void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::Value,4u>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  void *v4;
  void *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 48, &v14);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    v8 = 48 * v7;
    v9 = v4;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x400000000;
      if (v6[2]) {
        llvm::SmallVectorImpl<mlir::Value>::operator=((uint64_t)v9, (uint64_t)v6);
      }
      v9 += 6;
      v6 += 12;
      v8 -= 48;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if (v10)
    {
      v11 = 12 * v10;
      do
      {
        v12 = *(_DWORD **)&v6[v11 - 12];
        if (&v6[v11 - 8] != v12) {
          free(v12);
        }
        v11 -= 12;
      }
      while (v11 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v14;
  if (v6 != v3) {
    free(v6);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

uint64_t mlir::getBroadcastIndices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v72[4] = *MEMORY[0x1E4F143B8];
  v65[0] = a1;
  v65[1] = a2;
  v64[0] = a3;
  v64[1] = a4;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  if (!v6) {
    return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  if (!v7) {
    return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  uint64_t v9 = v8;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  if (v9 == 1)
  {
    if (v11)
    {
      uint64_t v12 = ArgAttrsAttr;
      char v13 = 0;
      v14 = 0;
      uint64_t v15 = 8 * v11;
      do
      {
        if ((v13 & 1) == 0
          && (uint64_t v16 = *(void *)(v12 + 8 * (void)v14),
              v16 == *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65)))
        {
          char v13 = 1;
        }
        else
        {
          v70 = v14;
          uint64_t v17 = *(unsigned int *)(a5 + 8);
          if (v17 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(a5, (uint64_t *)&v70);
          }
          else
          {
            *(void *)(*(void *)a5 + 8 * v17) = v14;
            *(_DWORD *)(a5 + 8) = v17 + 1;
          }
        }
        v14 = (char *)v14 + 1;
        v15 -= 8;
      }
      while (v15);
    }
    return 1;
  }
  if (v11 == 1)
  {
    uint64_t v18 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
    if (v19)
    {
      uint64_t v20 = v18;
      char v21 = 0;
      v22 = 0;
      uint64_t v23 = 8 * v19;
      do
      {
        if ((v21 & 1) == 0
          && (uint64_t v24 = *(void *)(v20 + 8 * (void)v22),
              v24 == *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64)))
        {
          char v21 = 1;
        }
        else
        {
          v70 = v22;
          uint64_t v25 = *(unsigned int *)(a5 + 8);
          if (v25 >= *(_DWORD *)(a5 + 12))
          {
            llvm::SmallVectorTemplateBase<mlir::Block *,true>::growAndEmplaceBack<mlir::Block *&>(a5, (uint64_t *)&v70);
          }
          else
          {
            *(void *)(*(void *)a5 + 8 * v25) = v22;
            *(_DWORD *)(a5 + 8) = v25 + 1;
          }
        }
        v22 = (char *)v22 + 1;
        v23 -= 8;
      }
      while (v23);
    }
    return 1;
  }
  v28 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  uint64_t v29 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  v31 = (unsigned char *)(v29 + 8 * v30);
  v70 = v72;
  uint64_t v71 = 0x400000000;
  uint64_t v32 = v31 - v28;
  if ((unint64_t)(v31 - v28) < 0x21)
  {
    unsigned int v33 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v32 >> 3, 8);
    unsigned int v33 = v71;
  }
  if (v31 != v28)
  {
    memcpy((char *)v70 + 8 * v33, v28, v31 - v28);
    unsigned int v33 = v71;
  }
  LODWORD(v71) = v33 + ((unint64_t)v32 >> 3);
  v34 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  uint64_t v35 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  v37 = (unsigned char *)(v35 + 8 * v36);
  v67 = v69;
  uint64_t v68 = 0x400000000;
  uint64_t v38 = v37 - v34;
  if ((unint64_t)(v37 - v34) < 0x21)
  {
    unsigned int v39 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, v38 >> 3, 8);
    unsigned int v39 = v68;
  }
  if (v37 != v34)
  {
    memcpy((char *)v67 + 8 * v39, v34, v37 - v34);
    unsigned int v39 = v68;
  }
  LODWORD(v68) = v39 + ((unint64_t)v38 >> 3);
  uint64_t v40 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
  uint64_t v42 = v41;
  uint64_t v43 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
  BOOL v45 = v42 == 0;
  if (v42 | v44)
  {
    uint64_t v46 = v43;
    uint64_t v47 = v43 + 8 * v44;
    uint64_t v48 = v40 + 8 * v42;
    do
    {
      if (v45)
      {
        if (v47 != v46)
        {
          v49 = v70;
          uint64_t v66 = 1;
          v50 = &v70;
LABEL_42:
          llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)v50, (uint64_t)v49, &v66);
        }
      }
      else if (v47 == v46)
      {
        v49 = v67;
        uint64_t v66 = 1;
        v50 = &v67;
        goto LABEL_42;
      }
      if (v45) {
        uint64_t v48 = v40;
      }
      else {
        v48 -= 8;
      }
      if (v47 == v46) {
        uint64_t v47 = v46;
      }
      else {
        v47 -= 8;
      }
      BOOL v45 = v48 == v40;
    }
    while (v48 != v40 || v47 != v46);
  }
  char v51 = mlir::OpTrait::util::staticallyKnownBroadcastable(v70, v71, (char *)v67, v68);
  v52 = v67;
  if ((v51 & 1) == 0)
  {
    uint64_t v26 = 0;
    goto LABEL_68;
  }
  uint64_t v26 = 1;
  if (!v71 || !v68)
  {
LABEL_68:
    if (v67 == v69) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  uint64_t v53 = 0;
  v54 = v70;
  uint64_t v55 = 8 * v71 - 8;
  uint64_t v56 = 8 * v68 - 8;
  do
  {
    uint64_t v57 = v54[v53];
    uint64_t v58 = v52[v53];
    if (v57 != v58 && (v57 == 1 || v58 == 1))
    {
      unint64_t v60 = *(unsigned int *)(a5 + 8);
      if (v60 >= *(unsigned int *)(a5 + 12))
      {
        v62 = v52;
        uint64_t v63 = v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v60 + 1, 8);
        uint64_t v55 = v63;
        v52 = v62;
        unint64_t v60 = *(unsigned int *)(a5 + 8);
      }
      *(void *)(*(void *)a5 + 8 * v60) = v53;
      ++*(_DWORD *)(a5 + 8);
    }
    if (!v55) {
      break;
    }
    ++v53;
    v55 -= 8;
    uint64_t v61 = v56;
    v56 -= 8;
  }
  while (v61);
  uint64_t v26 = 1;
  v52 = v67;
  if (v67 == v69) {
    goto LABEL_70;
  }
LABEL_69:
  free(v52);
LABEL_70:
  if (v70 != v72) {
    free(v70);
  }
  return v26;
}

uint64_t mlir::getPositiveAxis(uint64_t this, uint64_t a2)
{
  return (a2 & (this >> 63)) + this;
}

uint64_t mlir::getNegativeAxis(mlir *this, uint64_t a2)
{
  if ((uint64_t)this >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = 0;
  }
  return (uint64_t)this - v2;
}

unint64_t mlir::tryGetPositiveAxis(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  v40[19] = *MEMORY[0x1E4F143B8];
  uint64_t v32 = a1;
  uint64_t v7 = -a2;
  if (-a2 > a1 || a2 <= a1)
  {
    if (a5)
    {
      v30[0] = (const void **)"invalid axis ";
      __int16 v31 = 259;
      mlir::Operation::emitOpError(a5, v30, (uint64_t)&v35);
      if (v35)
      {
        int v33 = 2;
        uint64_t v34 = a1;
        uint64_t v9 = &v33;
        unint64_t v10 = v37;
        if (v38 >= v39)
        {
          unint64_t v24 = v38 + 1;
          if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
          {
            v27 = (char *)&v33 - v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v24, 24);
            unint64_t v10 = v37;
            uint64_t v9 = (int *)&v27[v37];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v24, 24);
            uint64_t v9 = &v33;
            unint64_t v10 = v37;
          }
        }
        unint64_t v11 = v10 + 24 * v38;
        long long v12 = *(_OWORD *)v9;
        *(void *)(v11 + 16) = *((void *)v9 + 2);
        *(_OWORD *)unint64_t v11 = v12;
        ++v38;
        if (v35)
        {
          mlir::Diagnostic::operator<<((uint64_t)v36, " is outside of the range [");
          if (v35)
          {
            int v33 = 2;
            uint64_t v34 = v7;
            char v13 = &v33;
            unint64_t v14 = v37;
            if (v38 >= v39)
            {
              unint64_t v25 = v38 + 1;
              if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
              {
                v28 = (char *)&v33 - v37;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v25, 24);
                unint64_t v14 = v37;
                char v13 = (int *)&v28[v37];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v25, 24);
                char v13 = &v33;
                unint64_t v14 = v37;
              }
            }
            unint64_t v15 = v14 + 24 * v38;
            long long v16 = *(_OWORD *)v13;
            *(void *)(v15 + 16) = *((void *)v13 + 2);
            *(_OWORD *)unint64_t v15 = v16;
            ++v38;
            if (v35)
            {
              mlir::Diagnostic::operator<<((uint64_t)v36, ", ");
              if (v35)
              {
                int v33 = 2;
                uint64_t v34 = a2 - 1;
                uint64_t v17 = &v33;
                unint64_t v18 = v37;
                if (v38 >= v39)
                {
                  unint64_t v26 = v38 + 1;
                  if (v37 <= (unint64_t)&v33 && v37 + 24 * v38 > (unint64_t)&v33)
                  {
                    uint64_t v29 = (char *)&v33 - v37;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v26, 24);
                    unint64_t v18 = v37;
                    uint64_t v17 = (int *)&v29[v37];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v26, 24);
                    uint64_t v17 = &v33;
                    unint64_t v18 = v37;
                  }
                }
                unint64_t v19 = v18 + 24 * v38;
                long long v20 = *(_OWORD *)v17;
                *(void *)(v19 + 16) = *((void *)v17 + 2);
                *(_OWORD *)unint64_t v19 = v20;
                ++v38;
                if (v35)
                {
                  mlir::Diagnostic::operator<<((uint64_t)v36, "].");
                  if (v35) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
                  }
                }
              }
            }
          }
        }
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v36);
    }
    else
    {
      uint64_t v35 = -a2;
      v30[0] = (const void **)(a2 - 1);
      mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(a3, a4, "invalid axis ", &v32, " is outside of the range [", &v35, ", ", (uint64_t *)v30, "]");
    }
    uint64_t v22 = 0;
    unint64_t v21 = 0;
  }
  else
  {
    unint64_t v21 = ((a2 & (a1 >> 63)) + a1) & 0xFFFFFFFFFFFFFF00;
    uint64_t v22 = ((a2 & (a1 >> 63)) + a1);
  }
  return v21 | v22;
}

uint64_t mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7, uint64_t *a8, char *a9)
{
  v18[23] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v17);
  if (v17)
  {
    mlir::Diagnostic::operator<<((uint64_t)v18, a3);
    mlir::Diagnostic::append<long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>((uint64_t)v18, a4, a5, a6, a7, a8, a9);
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
  if (v17) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  return v15;
}

uint64_t mlir::getPositiveAxes(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  v52[6] = *MEMORY[0x1E4F143B8];
  v50 = (char *)v52;
  uint64_t v51 = 0x600000000;
  if (a2)
  {
    uint64_t v40 = (void *)(a4 + 16);
    uint64_t v13 = 8 * a2;
    do
    {
      uint64_t v17 = *a1;
      unint64_t PositiveAxis = mlir::tryGetPositiveAxis(*a1, a3, 0, 0, a7);
      if (v19)
      {
        unint64_t v14 = PositiveAxis;
        unint64_t v15 = *(unsigned int *)(a4 + 8);
        if (v15 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v40, v15 + 1, 8);
          unint64_t v15 = *(unsigned int *)(a4 + 8);
        }
        long long v16 = (char **)a4;
      }
      else
      {
        unint64_t v15 = v51;
        long long v16 = &v50;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, v51 + 1, 8);
          unint64_t v15 = v51;
        }
        unint64_t v14 = v17;
      }
      *(void *)&(*v16)[8 * v15] = v14;
      ++*((_DWORD *)v16 + 2);
      ++a1;
      v13 -= 8;
    }
    while (v13);
    if (v51)
    {
      if (a6)
      {
        uint64_t v41 = "invalid axes: ";
        __int16 v43 = 259;
        mlir::emitError(a5, (uint64_t)&v41, (uint64_t)&v44);
        uint64_t v20 = v51;
        if (v51)
        {
          unint64_t v21 = v50;
          if (v44)
          {
            uint64_t v22 = *(void *)v50;
            LODWORD(v41) = 2;
            uint64_t v42 = v22;
            uint64_t v23 = &v41;
            unint64_t v24 = v46;
            if (v47 >= v48)
            {
              unint64_t v38 = v47 + 1;
              if (v46 <= (unint64_t)&v41 && v46 + 24 * v47 > (unint64_t)&v41)
              {
                unsigned int v39 = (char *)&v41 - v46;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v38, 24);
                unint64_t v24 = v46;
                uint64_t v23 = (const char **)&v39[v46];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v38, 24);
                uint64_t v23 = &v41;
                unint64_t v24 = v46;
              }
            }
            unint64_t v25 = v24 + 24 * v47;
            long long v26 = *(_OWORD *)v23;
            *(void *)(v25 + 16) = v23[2];
            *(_OWORD *)unint64_t v25 = v26;
            ++v47;
          }
          if (v20 != 1)
          {
            uint64_t v29 = (uint64_t *)(v21 + 8);
            uint64_t v30 = 8 * v20 - 8;
            do
            {
              if (v44)
              {
                mlir::Diagnostic::operator<<((uint64_t)v45, ", ");
                if (v44)
                {
                  uint64_t v34 = *v29;
                  LODWORD(v41) = 2;
                  uint64_t v42 = v34;
                  unint64_t v35 = v46;
                  if (v47 < v48)
                  {
                    __int16 v31 = &v41;
                  }
                  else
                  {
                    unint64_t v36 = v47 + 1;
                    if (v46 <= (unint64_t)&v41 && v46 + 24 * v47 > (unint64_t)&v41)
                    {
                      unint64_t v37 = (char *)&v41 - v46;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v36, 24);
                      unint64_t v35 = v46;
                      __int16 v31 = (const char **)&v37[v46];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v36, 24);
                      __int16 v31 = &v41;
                      unint64_t v35 = v46;
                    }
                  }
                  unint64_t v32 = v35 + 24 * v47;
                  long long v33 = *(_OWORD *)v31;
                  *(void *)(v32 + 16) = v31[2];
                  *(_OWORD *)unint64_t v32 = v33;
                  ++v47;
                }
              }
              ++v29;
              v30 -= 8;
            }
            while (v30);
          }
        }
        uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
        if (v44) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v45);
      }
      else
      {
        uint64_t v27 = 0;
      }
    }
    else
    {
      uint64_t v27 = 1;
    }
  }
  else
  {
    uint64_t v27 = 1;
  }
  if (v50 != (char *)v52) {
    free(v50);
  }
  return v27;
}

uint64_t mlir::getPositiveAxes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  v19[22] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v15);
  uint64_t v18 = v12;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = v19;
    uint64_t v18 = 0x600000000;
    mlir::getIntValues<long long>(v15, v16, (uint64_t)&ArgOperands, 1);
    uint64_t PositiveAxes = mlir::getPositiveAxes((uint64_t *)ArgOperands, v18, a3, a4, a5, a6, a7);
    if (ArgOperands != v19) {
      free(ArgOperands);
    }
  }
  else if (a6)
  {
    mlir::emitError(a5, (uint64_t)&ArgOperands);
    if (ArgOperands) {
      mlir::Diagnostic::operator<<((uint64_t)&v18, "attribute is not integer type");
    }
    uint64_t PositiveAxes = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ArgOperands);
    if (ArgOperands) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ArgOperands);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v18);
  }
  else
  {
    return 0;
  }
  return PositiveAxes;
}

uint64_t mlir::getPositiveAxes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  v18[23] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v14 = (uint64_t **)&v15;
  uint64_t v17 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v14, DefiningOp)) {
    return mlir::getPositiveAxes(v15, v16, a2, a3, a4, a5, a6);
  }
  if (!a5) {
    return 0;
  }
  mlir::emitError(a4, (uint64_t)&v17);
  if (v17) {
    mlir::Diagnostic::operator<<((uint64_t)v18, "axes is not a constant");
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v17);
  if (v17) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v17);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  return v12;
}

void llvm::SmallSet<long long,4u,std::less<long long>>::insert(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)(a1 + 64))
  {
    uint64_t v15 = *(uint64_t ***)a1;
    uint64_t v16 = *(unsigned int *)(a1 + 8);
    uint64_t v17 = *a2;
    if (!v16) {
      goto LABEL_21;
    }
    uint64_t v18 = 8 * v16;
    uint64_t v9 = *(uint64_t ***)a1;
    while (*v9 != v17)
    {
      ++v9;
      v18 -= 8;
      if (!v18) {
        goto LABEL_20;
      }
    }
    if (v18)
    {
      char v19 = 0;
      char v14 = 1;
      goto LABEL_25;
    }
LABEL_20:
    if (v16 <= 3)
    {
LABEL_21:
      if (v16 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v16 + 1, 8);
        uint64_t v16 = *(unsigned int *)(a1 + 8);
        uint64_t v15 = *(uint64_t ***)a1;
      }
      v15[v16] = v17;
      unsigned int v20 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v20;
      uint64_t v9 = (uint64_t **)(*(void *)a1 + 8 * v20 - 8);
      char v14 = 1;
      goto LABEL_24;
    }
    uint64_t v7 = (uint64_t **)(a1 + 56);
    do
    {
      uint64_t v22 = *(uint64_t **)(a1 + 56);
      uint64_t v23 = *(void *)(*(void *)a1 + 8 * v16 - 8);
      unint64_t v24 = (uint64_t **)(a1 + 56);
      unint64_t v25 = (uint64_t **)(a1 + 56);
      if (v22)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v25 = (uint64_t **)v22;
            uint64_t v26 = v22[4];
            if (v23 >= v26) {
              break;
            }
            uint64_t v22 = *v25;
            unint64_t v24 = v25;
            if (!*v25) {
              goto LABEL_37;
            }
          }
          if (v26 >= v23) {
            break;
          }
          uint64_t v22 = v25[1];
          if (!v22)
          {
            unint64_t v24 = v25 + 1;
            goto LABEL_37;
          }
        }
      }
      else
      {
LABEL_37:
        uint64_t v27 = (uint64_t *)operator new(0x28uLL);
        v27[4] = v23;
        uint64_t *v27 = 0;
        v27[1] = 0;
        v27[2] = (uint64_t)v25;
        *unint64_t v24 = v27;
        uint64_t v28 = **(void **)(a1 + 48);
        if (v28)
        {
          *(void *)(a1 + 48) = v28;
          unint64_t v21 = *v24;
        }
        else
        {
          unint64_t v21 = v27;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v21);
        ++*(void *)(a1 + 64);
        LODWORD(v16) = *(_DWORD *)(a1 + 8);
      }
      LODWORD(v16) = v16 - 1;
      *(_DWORD *)(a1 + 8) = v16;
    }
    while (v16);
    uint64_t v8 = *a2;
    uint64_t v29 = *v7;
    uint64_t v9 = (uint64_t **)(a1 + 56);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (uint64_t **)v29;
          uint64_t v30 = v29[4];
          if ((uint64_t)v8 >= v30) {
            break;
          }
          uint64_t v29 = *v9;
          uint64_t v7 = v9;
          if (!*v9) {
            goto LABEL_9;
          }
        }
        if (v30 >= (uint64_t)v8) {
          break;
        }
        uint64_t v29 = v9[1];
        if (!v29)
        {
LABEL_8:
          uint64_t v7 = v9 + 1;
          goto LABEL_9;
        }
      }
      char v14 = 0;
      goto LABEL_24;
    }
LABEL_9:
    unint64_t v11 = (uint64_t *)v9;
    uint64_t v9 = (uint64_t **)operator new(0x28uLL);
    v9[4] = v8;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *uint64_t v7 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 48);
    uint64_t v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 48) = v12;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v13);
    char v14 = 0;
    ++*(void *)(a1 + 64);
LABEL_24:
    char v19 = 1;
    goto LABEL_25;
  }
  uint64_t v7 = (uint64_t **)(a1 + 56);
  uint64_t v6 = *(uint64_t **)(a1 + 56);
  uint64_t v8 = *a2;
  if (!v6)
  {
    uint64_t v9 = (uint64_t **)(a1 + 56);
    goto LABEL_9;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v9 = (uint64_t **)v6;
      unint64_t v10 = (uint64_t *)v6[4];
      if ((uint64_t)v8 >= (uint64_t)v10) {
        break;
      }
      uint64_t v6 = *v9;
      uint64_t v7 = v9;
      if (!*v9) {
        goto LABEL_9;
      }
    }
    if ((uint64_t)v10 >= (uint64_t)v8) {
      break;
    }
    uint64_t v6 = v9[1];
    if (!v6) {
      goto LABEL_8;
    }
  }
  char v14 = 0;
  char v19 = 0;
LABEL_25:
  *(unsigned char *)(a3 + 8) = v14;
  *(void *)a3 = v9;
  *(unsigned char *)(a3 + 16) = v19;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  v23[22] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19);
  uint64_t v22 = v10;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = v23;
    uint64_t v22 = 0x600000000;
    mlir::getIntValues<long long>(v19, v20, (uint64_t)&ArgOperands, 1);
    if (mlir::getPositiveAxes((uint64_t *)ArgOperands, v22, a3, a4, a5, a6, 0))
    {
      uint64_t v12 = *(unsigned int *)(a4 + 8);
      if (v12)
      {
        uint64_t v13 = *(uint64_t **)a4;
        uint64_t v14 = 8 * v12;
        do
        {
          uint64_t v15 = *v13;
          if (*v13 == 2) {
            uint64_t v16 = 3;
          }
          else {
            uint64_t v16 = *v13;
          }
          if (v15) {
            uint64_t v17 = 3;
          }
          else {
            uint64_t v17 = 1;
          }
          if (a3 == 2) {
            uint64_t v15 = v17;
          }
          if (a3 == 3) {
            uint64_t v15 = v16;
          }
          if (a3 < 2) {
            uint64_t v15 = 3;
          }
          *v13++ = v15;
          v14 -= 8;
        }
        while (v14);
      }
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 0;
    }
    if (ArgOperands != v23) {
      free(ArgOperands);
    }
  }
  else if (a6)
  {
    mlir::emitError(a5, (uint64_t)&ArgOperands);
    if (ArgOperands) {
      mlir::Diagnostic::operator<<((uint64_t)&v22, "attribute is not integer type");
    }
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&ArgOperands);
    if (ArgOperands) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&ArgOperands);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v22);
  }
  else
  {
    return 0;
  }
  return v11;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!mlir::getPositiveAxes(a1, a2, a3, a4, a5, a6, 0)) {
    return 0;
  }
  uint64_t v8 = *(unsigned int *)(a4 + 8);
  if (v8)
  {
    uint64_t v9 = *(uint64_t **)a4;
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9;
      if (*v9 == 2) {
        uint64_t v12 = 3;
      }
      else {
        uint64_t v12 = *v9;
      }
      if (v11) {
        uint64_t v13 = 3;
      }
      else {
        uint64_t v13 = 1;
      }
      if (a3 == 2) {
        uint64_t v11 = v13;
      }
      if (a3 == 3) {
        uint64_t v11 = v12;
      }
      if (a3 < 2) {
        uint64_t v11 = 3;
      }
      *v9++ = v11;
      v10 -= 8;
    }
    while (v10);
  }
  return 1;
}

uint64_t mlir::getPositivePromotedAxes(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a1) {
    goto LABEL_10;
  }
  uint64_t v10 = *a1;
  unint64_t v11 = mlir::TypeID::get<mlir::ElementsAttr>();
  unint64_t v12 = *(unsigned int *)(v10 + 16);
  if (!v12) {
    goto LABEL_10;
  }
  uint64_t v13 = *(void **)(v10 + 8);
  uint64_t v14 = &v13[2 * v12];
  do
  {
    unint64_t v15 = v12 >> 1;
    uint64_t v16 = &v13[2 * (v12 >> 1)];
    unint64_t v18 = *v16;
    uint64_t v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11) {
      uint64_t v13 = v17;
    }
    else {
      unint64_t v12 = v15;
    }
  }
  while (v12);
  if (v13 != v14 && *v13 == v11) {
    uint64_t v19 = v13[1];
  }
  else {
LABEL_10:
  }
    uint64_t v19 = 0;

  return mlir::getPositivePromotedAxes((uint64_t)a1, v19, a2, a3, a4, a5);
}

unint64_t mlir::getSortedUniquePromotedPositiveAxesAttr(void *a1, unint64_t a2, uint64_t a3, char a4)
{
  v67[22] = *MEMORY[0x1E4F143B8];
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  v62 = &v55;
  v65 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v65);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v62, DefiningOp))
  {
    v65 = v67;
    uint64_t v66 = 0x600000000;
    if (!mlir::getPositiveAxes(v55, v56, a2, (uint64_t)&v65, a3, a4, 0))
    {
      unsigned __int8 v18 = 0;
      unint64_t v19 = 0;
LABEL_64:
      if (v65 != v67) {
        free(v65);
      }
      return v19 & 0xFFFFFFFFFFFFFF00 | v18;
    }
    v62 = v64;
    uint64_t v63 = 0x600000000;
    if (!mlir::getPositiveAxes((uint64_t *)v65, v66, a2, (uint64_t)&v62, a3, a4, 0))
    {
      unsigned __int8 v18 = 0;
      unint64_t v19 = 0;
LABEL_62:
      if (v62 != v64) {
        free(v62);
      }
      goto LABEL_64;
    }
    std::__sort<std::__less<long long,long long> &,long long *>();
    uint64_t v9 = (char *)v62;
    uint64_t v10 = (char *)v62;
    if (v63)
    {
      uint64_t v10 = (char *)v62 + 8 * v63;
      uint64_t v11 = 8 * v63 - 16;
      unint64_t v12 = (char *)v62;
      while (1)
      {
        uint64_t v13 = v12;
        v12 += 8;
        if (v12 == v10) {
          break;
        }
        uint64_t v14 = v11;
        uint64_t v15 = *v13;
        v11 -= 8;
        if (*v13 == v13[1])
        {
          if (v13 + 2 != (void *)v10)
          {
            uint64_t v16 = 8;
            do
            {
              uint64_t v17 = v15;
              uint64_t v15 = *(void *)&v12[v16];
              if (v17 != v15)
              {
                v13[1] = v15;
                ++v13;
              }
              v16 += 8;
              v14 -= 8;
            }
            while (v14);
          }
          uint64_t v10 = (char *)(v13 + 1);
          break;
        }
      }
    }
    unint64_t v20 = (unint64_t)(v10 - v9) >> 3;
    LODWORD(v63) = v20;
    if (v20)
    {
      uint64_t v21 = 8 * v20;
      uint64_t v22 = (uint64_t *)v9;
      do
      {
        uint64_t v23 = *v22;
        if (*v22 == 2) {
          uint64_t v24 = 3;
        }
        else {
          uint64_t v24 = *v22;
        }
        if (v23) {
          uint64_t v25 = 3;
        }
        else {
          uint64_t v25 = 1;
        }
        if (a2 == 2) {
          uint64_t v23 = v25;
        }
        if (a2 == 3) {
          uint64_t v23 = v24;
        }
        if (a2 < 2) {
          uint64_t v23 = 3;
        }
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    v59 = v61;
    uint64_t v60 = 0x600000000;
    if (v20 < 7uLL)
    {
      int v26 = 0;
      if (!v20) {
        goto LABEL_50;
      }
      uint64_t v27 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, v61, v20, 8);
      int v26 = v60;
      uint64_t v27 = v60;
    }
    uint64_t v28 = (char *)v59 + 8 * v27;
    unint64_t v29 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v29 >= 7)
    {
      __int16 v31 = (char *)v59 + 8 * v27;
      uint64_t v30 = v9;
      if ((unint64_t)(v31 - v9) >= 0x20)
      {
        unint64_t v32 = v29 + 1;
        uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v28 = (void *)((char *)v28 + v33);
        uint64_t v30 = &v9[v33];
        uint64_t v34 = (long long *)(v9 + 16);
        unint64_t v35 = v31 + 16;
        uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *unint64_t v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 4;
        }
        while (v36);
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_50:
          LODWORD(v60) = v26 + v20;
          uint64_t v58 = v63;
          unint64_t v57 = a1[1] & 0xFFFFFFFFFFFFFFF8;
          uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v57);
          uint64_t v40 = mlir::IntegerType::get(Context, 0x40u, 2u);
          uint64_t v41 = (void *)mlir::RankedTensorType::get((uint64_t)&v58, 1, v40, 0);
          uint64_t v42 = v41;
          if (!v41) {
            goto LABEL_59;
          }
          uint64_t v43 = *v41;
          unint64_t v44 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v45 = *(unsigned int *)(v43 + 16);
          if (!v45) {
            goto LABEL_59;
          }
          unint64_t v46 = *(void **)(v43 + 8);
          unsigned int v47 = &v46[2 * v45];
          do
          {
            unint64_t v48 = v45 >> 1;
            v49 = &v46[2 * (v45 >> 1)];
            unint64_t v51 = *v49;
            v50 = v49 + 2;
            v45 += ~(v45 >> 1);
            if (v51 < v44) {
              unint64_t v46 = v50;
            }
            else {
              unint64_t v45 = v48;
            }
          }
          while (v45);
          if (v46 != v47 && *v46 == v44) {
            uint64_t v52 = v46[1];
          }
          else {
LABEL_59:
          }
            uint64_t v52 = 0;
          uint64_t v53 = mlir::DenseElementsAttr::getFromRawBuffer(v42, v52, v59, 8 * v60, 8, 1, 0);
          unsigned __int8 v18 = v53;
          unint64_t v19 = v53 & 0xFFFFFFFFFFFFFF00;
          if (v59 != v61) {
            free(v59);
          }
          goto LABEL_62;
        }
      }
    }
    else
    {
      uint64_t v30 = v9;
    }
    do
    {
      uint64_t v38 = *(void *)v30;
      v30 += 8;
      *v28++ = v38;
    }
    while (v30 != &v9[8 * v20]);
    goto LABEL_50;
  }
  if (a4)
  {
    mlir::emitError(a3, (uint64_t)&v65);
    if (v65) {
      mlir::Diagnostic::operator<<((uint64_t)&v66, "axes is not a constant");
    }
    mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
    if (v65) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v66);
  }
  unsigned __int8 v18 = 0;
  unint64_t v19 = 0;
  return v19 & 0xFFFFFFFFFFFFFF00 | v18;
}

uint64_t mlir::getMostDefinedTypeForCPU(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v27 = 0uLL;
  uint64_t v28 = a1;
  uint64_t v29 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v6 = (uint64_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v28, v4) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v6) {
      goto LABEL_17;
    }
    uint64_t v7 = *v6;
    unint64_t v8 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v9 = *(unsigned int *)(v7 + 16);
    if (!v9) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void **)(v7 + 8);
    uint64_t v11 = &v10[2 * v9];
    do
    {
      unint64_t v12 = v9 >> 1;
      uint64_t v13 = &v10[2 * (v9 >> 1)];
      unint64_t v15 = *v13;
      uint64_t v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8) {
        uint64_t v10 = v14;
      }
      else {
        unint64_t v9 = v12;
      }
    }
    while (v9);
    if (v10 != v11 && *v10 == v8) {
      uint64_t v16 = v10[1];
    }
    else {
LABEL_17:
    }
      uint64_t v16 = 0;
    *(void *)&long long v26 = v6;
    *((void *)&v26 + 1) = v16;
    if (!(void)v27
      || (uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26),
          uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v18),
          unint64_t v20 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v27),
          NumElements > mlir::ShapedType::getNumElements(v20, v21))
      || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v26),
          uint64_t v23 = v22,
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v27),
          v23 > v24))
    {
      long long v27 = v26;
    }
    uint64_t v4 = ++v29;
  }
  while (v28 != a1 || v4 != a2);
  return v27;
}

void mlir::getRankPromotionShapeForANE(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  v24[0] = a1;
  v24[1] = a2;
  uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
  uint64_t v5 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
  uint64_t v7 = (unsigned char *)(v5 + 8 * v6);
  *a3 = (uint64_t *)(a3 + 2);
  a3[1] = (uint64_t *)0x500000000;
  uint64_t v8 = v7 - ArgAttrsAttr;
  if ((unint64_t)(v7 - ArgAttrsAttr) < 0x29)
  {
    unsigned int v9 = 0;
    if (v7 == ArgAttrsAttr) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, v8 >> 3, 8);
  unsigned int v9 = *((_DWORD *)a3 + 2);
  if (v7 != ArgAttrsAttr)
  {
LABEL_5:
    memcpy(&(*a3)[v9], ArgAttrsAttr, v7 - ArgAttrsAttr);
    unsigned int v9 = *((_DWORD *)a3 + 2);
  }
LABEL_6:
  int v10 = v9 + ((unint64_t)v8 >> 3);
  *((_DWORD *)a3 + 2) = v10;
  switch(v10)
  {
    case 0:
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        uint64_t v11 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        uint64_t v11 = *((unsigned int *)a3 + 2);
      }
      uint64_t v21 = &(*a3)[v11];
      *(_OWORD *)uint64_t v21 = xmmword_181111BB0;
      *((_OWORD *)v21 + 1) = unk_181111BC0;
      goto LABEL_25;
    case 1:
      unint64_t v19 = *a3;
      uint64_t v13 = **a3;
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        uint64_t v20 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        uint64_t v20 = *((unsigned int *)a3 + 2);
        unint64_t v19 = *a3;
      }
      uint64_t v22 = &v19[v20];
      uint64_t *v22 = 1;
      *(int64x2_t *)(v22 + 1) = vdupq_n_s64(1uLL);
      goto LABEL_24;
    case 2:
      unint64_t v12 = *a3;
      uint64_t v14 = **a3;
      uint64_t v13 = (*a3)[1];
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        uint64_t v15 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        uint64_t v15 = *((unsigned int *)a3 + 2);
        unint64_t v12 = *a3;
      }
      uint64_t v22 = &v12[v15];
      uint64_t *v22 = 1;
      v22[1] = v14;
      goto LABEL_21;
    case 3:
      uint64_t v16 = *a3;
      long long v17 = *(_OWORD *)*a3;
      uint64_t v13 = (*a3)[2];
      *((_DWORD *)a3 + 2) = 0;
      if (*((_DWORD *)a3 + 3) > 3u)
      {
        uint64_t v18 = 0;
      }
      else
      {
        long long v23 = v17;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, a3 + 2, 4uLL, 8);
        long long v17 = v23;
        uint64_t v18 = *((unsigned int *)a3 + 2);
        uint64_t v16 = *a3;
      }
      uint64_t v22 = &v16[v18];
      *(_OWORD *)uint64_t v22 = v17;
LABEL_21:
      v22[2] = 1;
LABEL_24:
      v22[3] = v13;
LABEL_25:
      *((_DWORD *)a3 + 2) += 4;
      break;
    default:
      return;
  }
}

uint64_t mlir::getRankPromotionTypeForANE(uint64_t a1, uint64_t a2)
{
  v35[5] = *MEMORY[0x1E4F143B8];
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v29)) {
    return v29;
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v29);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v4 -= 8;
      if (!v4) {
        goto LABEL_6;
      }
    }
    return v29;
  }
LABEL_6:
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v29) & 1) == 0) {
    return v29;
  }
  mlir::getRankPromotionShapeForANE(v29, v30, (uint64_t **)&__s2);
  uint64_t v5 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v29);
  uint64_t v6 = v34;
  if (v7 == v34 && !memcmp(v5, __s2, 8 * v34))
  {
    uint64_t v12 = v29;
  }
  else
  {
    uint64_t v8 = v29;
    unsigned int v9 = *(void **)(*(void *)v29 + 136);
    if (v9 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      uint64_t v8 = 0;
    }
    uint64_t v28 = v8;
    if (v9 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      *(void *)&long long v31 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v28);
      *((void *)&v31 + 1) = v14;
      mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v31);
      uint64_t v15 = __s2;
      uint64_t v16 = (mlir::AffineMap *)v34;
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28);
      uint64_t MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v28);
      unint64_t v19 = (uint64_t *)mlir::MemRefType::get(v15, v16, RHS, 0, MemorySpace);
      uint64_t v12 = (uint64_t)v19;
      if (v19)
      {
        uint64_t v20 = *v19;
        unint64_t v21 = mlir::TypeID::get<mlir::ShapedType>();
        unint64_t v22 = *(unsigned int *)(v20 + 16);
        if (v22)
        {
          long long v23 = *(void **)(v20 + 8);
          do
          {
            unint64_t v24 = v22 >> 1;
            uint64_t v25 = &v23[2 * (v22 >> 1)];
            unint64_t v27 = *v25;
            long long v26 = v25 + 2;
            v22 += ~(v22 >> 1);
            if (v27 < v21) {
              long long v23 = v26;
            }
            else {
              unint64_t v22 = v24;
            }
          }
          while (v22);
        }
      }
    }
    else
    {
      int v10 = __s2;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v29);
      *(void *)&long long v31 = v10;
      *((void *)&v31 + 1) = v6;
      char v32 = 1;
      uint64_t v12 = mlir::ShapedType::cloneWith(&v29, &v31, OperandRange);
    }
  }
  if (__s2 != v35) {
    free(__s2);
  }
  return v12;
}

uint64_t mlir::getMostDefinedTypeForANE(uint64_t a1, uint64_t a2)
{
  uint64_t MostDefinedTypeForCPU = mlir::getMostDefinedTypeForCPU(a1, a2);

  return mlir::getRankPromotionTypeForANE(MostDefinedTypeForCPU, v3);
}

double mlir::anec::getAllDims@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 16) = xmmword_181111BD0;
  *(void *)&double result = 0x500000005;
  *(void *)(a1 + 8) = 0x500000005;
  return result;
}

unint64_t mlir::anec::getIndexFromDim(int a1, unint64_t a2)
{
  switch(a1)
  {
    case 0:
      unsigned __int8 v2 = 0;
      unint64_t v3 = 0;
      break;
    case 1:
      unsigned __int8 v2 = a2 - 3;
      unint64_t v3 = (a2 - 3) & 0xFFFFFFFFFFFFFF00;
      BOOL v4 = a2 >= 3;
      goto LABEL_7;
    case 2:
      unint64_t v3 = 0;
      unsigned __int8 v2 = a2 > 4;
      break;
    case 3:
      unsigned __int8 v2 = a2 - 2;
      unint64_t v3 = (a2 - 2) & 0xFFFFFFFFFFFFFF00;
      BOOL v4 = a2 >= 2;
LABEL_7:
      if (!v4)
      {
        unsigned __int8 v2 = 0;
        unint64_t v3 = 0;
      }
      break;
    case 4:
      unsigned __int8 v2 = a2 - 1;
      unint64_t v3 = (a2 - 1) & 0xFFFFFFFFFFFFFF00;
      if (!a2)
      {
        unsigned __int8 v2 = 0;
        unint64_t v3 = 0;
      }
      break;
    default:
      unsigned __int8 v2 = 0;
      unint64_t v3 = 0;
      break;
  }
  return v3 | v2;
}

uint64_t mlir::anec::getMaximumDimSize(unsigned int a1)
{
  if (a1 > 4) {
    return 0x10000;
  }
  else {
    return qword_181111C00[a1];
  }
}

uint64_t mlir::anec::getDimFromIndex(mlir::anec *this, unint64_t a2)
{
  if (a2 && (mlir::anec *)(a2 - 1) == this) {
    return 0x100000004;
  }
  if (a2 >= 2 && (mlir::anec *)(a2 - 2) == this) {
    return 0x100000003;
  }
  if (a2 >= 3 && (mlir::anec *)(a2 - 3) == this) {
    return 0x100000001;
  }
  if (a2 >= 4 && (mlir::anec *)(a2 - 4) == this) {
    return (2 * (a2 > 4)) | 0x100000000;
  }
  BOOL v3 = (mlir::anec *)(a2 - 5) == this && a2 > 4;
  uint64_t v4 = 0x100000000;
  if (!v3) {
    return 0;
  }
  return v4;
}

uint64_t mlir::anec::getKernelDimFromIndex(unint64_t this, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  mlir::anec::getKernelDimMap(&v27);
  char v4 = v27;
  uint64_t v5 = (char *)&v28;
  if (v27)
  {
    int v7 = 4;
    uint64_t v6 = &v28;
  }
  else
  {
    uint64_t v6 = v28;
    int v7 = v29;
    if (!v29)
    {
      uint64_t v8 = 0;
LABEL_4:
      unsigned int v9 = (char *)&v6[4 * v8];
      goto LABEL_7;
    }
  }
  int v10 = v7 - 1;
  unsigned int v9 = (char *)&v6[4 * (v10 & (37 * a2))];
  uint64_t v11 = *(void *)v9;
  if (*(void *)v9 != a2)
  {
    int v24 = 1;
    LODWORD(v25) = v10 & (37 * a2);
    while (v11 != -1)
    {
      int v26 = v25 + v24++;
      uint64_t v25 = v26 & v10;
      uint64_t v11 = v6[4 * v25];
      if (v11 == a2)
      {
        unsigned int v9 = (char *)&v6[4 * v25];
        goto LABEL_7;
      }
    }
    if ((v27 & 1) == 0)
    {
      uint64_t v6 = v28;
      uint64_t v8 = v29;
      goto LABEL_4;
    }
    unsigned int v9 = (char *)&v30;
  }
LABEL_7:
  uint64_t v12 = v29;
  uint64_t v13 = (char *)v28 + 32 * v29;
  if (v27) {
    uint64_t v13 = (char *)&v30;
  }
  if (v9 == v13 || (uint64_t v15 = v9 + 8, v14 = *((void *)v9 + 1), this >= (v15[1] - v14) >> 2))
  {
    uint64_t v19 = 0;
    int v18 = 0;
    unsigned int v17 = 0;
    if (v27) {
      goto LABEL_12;
    }
LABEL_14:
    uint64_t v5 = (char *)v28;
    if (!v29) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  int v16 = *(_DWORD *)(v14 + 4 * this);
  unsigned int v17 = v16 & 0xFFFFFF00;
  int v18 = v16;
  uint64_t v19 = 0x100000000;
  if ((v27 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v12 = 4;
LABEL_15:
  uint64_t v20 = 32 * v12;
  unint64_t v21 = v5 + 16;
  do
  {
    if (*(v21 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v22 = (void *)*(v21 - 1);
      if (v22)
      {
        *unint64_t v21 = v22;
        operator delete(v22);
      }
    }
    v21 += 4;
    v20 -= 32;
  }
  while (v20);
  char v4 = v27;
LABEL_21:
  if ((v4 & 1) == 0) {
    llvm::deallocate_buffer(v28, (void *)(32 * v29));
  }
  return v19 | v17 | v18;
}

void mlir::anec::getKernelDimMap(void *a1@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 2;
  BOOL v3 = operator new(8uLL);
  uint64_t v12 = v3;
  *BOOL v3 = 0x100000000;
  uint64_t v13 = v3 + 1;
  uint64_t v14 = v3 + 1;
  char v4 = operator new(0xCuLL);
  *(void *)char v4 = 0x100000000;
  v4[2] = 4;
  uint64_t v15 = 3;
  uint64_t v5 = operator new(0xCuLL);
  unsigned int v17 = v5 + 3;
  int v18 = (char *)(v5 + 3);
  *(void *)uint64_t v5 = *(void *)v4;
  v5[2] = v4[2];
  int v16 = v5;
  uint64_t v6 = operator new(0x10uLL);
  *uint64_t v6 = xmmword_181111BA0;
  uint64_t v19 = 4;
  int v7 = operator new(0x10uLL);
  *int v7 = *v6;
  uint64_t v20 = v7;
  unint64_t v21 = v7 + 1;
  unint64_t v22 = v7 + 1;
  uint64_t v23 = 5;
  uint64_t v8 = operator new(0x14uLL);
  uint64_t v25 = v8 + 5;
  int v26 = (char *)(v8 + 5);
  v8[4] = 2;
  *(_OWORD *)uint64_t v8 = xmmword_181111BE8;
  __p = v8;
  int v10 = &v11;
  unsigned int v9 = &v27;
  llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::SmallDenseMap<llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>> const*>(a1, &v10, &v9);
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    unint64_t v21 = v20;
    operator delete(v20);
  }
  if (v16)
  {
    unsigned int v17 = v16;
    operator delete(v16);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  operator delete(v6);
  operator delete(v4);
}

unint64_t mlir::anec::getReferenceFormatIndex(mlir::anec *this, unint64_t a2, unint64_t a3)
{
  if (a2 && (mlir::anec *)(a2 - 1) == this)
  {
    unsigned __int8 v3 = a3 - 1;
    unint64_t v4 = (a3 - 1) & 0xFFFFFFFFFFFFFF00;
    if (!a3)
    {
      unsigned __int8 v3 = 0;
      unint64_t v4 = 0;
    }
    return v4 | v3;
  }
  if (a2 >= 2 && (mlir::anec *)(a2 - 2) == this)
  {
    unsigned __int8 v3 = a3 - 2;
    unint64_t v4 = (a3 - 2) & 0xFFFFFFFFFFFFFF00;
    BOOL v5 = a3 >= 2;
    goto LABEL_12;
  }
  if (a2 >= 3 && (mlir::anec *)(a2 - 3) == this)
  {
    unsigned __int8 v3 = a3 - 3;
    unint64_t v4 = (a3 - 3) & 0xFFFFFFFFFFFFFF00;
    BOOL v5 = a3 >= 3;
LABEL_12:
    if (!v5)
    {
      unsigned __int8 v3 = 0;
      unint64_t v4 = 0;
    }
    return v4 | v3;
  }
  if (a2 >= 4 && (mlir::anec *)(a2 - 4) == this)
  {
    if (a2 >= 5)
    {
      unint64_t v4 = 0;
      unsigned __int8 v3 = a3 > 4;
      return v4 | v3;
    }
LABEL_22:
    unsigned __int8 v3 = 0;
    unint64_t v4 = 0;
    return v4 | v3;
  }
  uint64_t v6 = 0;
  if (a2 >= 5 && (mlir::anec *)(a2 - 5) == this) {
    goto LABEL_22;
  }
  return v6;
}

uint64_t mlir::anec::allElementsOnAxis(uint64_t a1, uint64_t a2, int a3)
{
  v15[0] = a1;
  v15[1] = a2;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  if (v5)
  {
    uint64_t v6 = ArgAttrsAttr;
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    while (1)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
      if (v9 && v7 == v9 - 1) {
        break;
      }
      if (v9 >= 2 && v7 == v9 - 2)
      {
        int v11 = 3;
LABEL_12:
        BOOL v12 = 1;
        goto LABEL_13;
      }
      if (v9 >= 3 && v7 == v9 - 3)
      {
        BOOL v12 = 1;
        int v11 = 1;
        goto LABEL_13;
      }
      if (v9 >= 4 && v7 == v9 - 4)
      {
        int v11 = 2 * (v9 > 4);
        goto LABEL_12;
      }
      int v11 = 0;
      BOOL v12 = v9 > 4 && v7 == v9 - 5;
LABEL_13:
      if (*(void *)(v6 + 8 * v7) != 1)
      {
        uint64_t result = 0;
        if (!v12 || v11 != a3) {
          return result;
        }
      }
      ++v7;
      v8 -= 8;
      if (!v8) {
        return 1;
      }
    }
    int v11 = 4;
    goto LABEL_12;
  }
  return 1;
}

uint64_t mlir::anec::verifyCompatibilityWithFlatten(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[0] = a1;
  v19[1] = a2;
  v18[0] = a3;
  v18[1] = a4;
  uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v19);
  if (result)
  {
    uint64_t result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v18);
    if (result)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
      uint64_t v6 = v5;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v18);
      if (v6 == v7
        && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19), v8 <= 4)
        && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19), v9 >= 4)
        && (uint64_t v10 = *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19),
            v10 == *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v18))
        && (uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19),
            uint64_t NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v12),
            uint64_t v14 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v18),
            NumElements == mlir::ShapedType::getNumElements(v14, v15)))
      {
        v17[0] = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v18);
        v17[1] = v16;
        return llvm::any_of<llvm::detail::zippy<llvm::detail::zip_enumerator,llvm::detail::index_stream,llvm::ArrayRef<long long>>,mlir::anec::verifyCompatibilityWithFlatten(mlir::ShapedType,mlir::ShapedType)::$_0>(v17, (mlir::CallableOpInterface *)v18) ^ 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t llvm::any_of<llvm::detail::zippy<llvm::detail::zip_enumerator,llvm::detail::index_stream,llvm::ArrayRef<long long>>,mlir::anec::verifyCompatibilityWithFlatten(mlir::ShapedType,mlir::ShapedType)::$_0>(uint64_t *a1, mlir::CallableOpInterface *this)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = 8 * v2;
  while (1)
  {
    mlir::CallableOpInterface::getArgAttrsAttr(this);
    if (v7)
    {
      if (v4 == v7 - 1) {
        break;
      }
    }
    if (v7 >= 2 && v4 == v7 - 2) {
      break;
    }
    if (v7 >= 3 && v4 == v7 - 3) {
      goto LABEL_4;
    }
    if (v7 >= 4 && v4 == v7 - 4)
    {
      if (v7 < 5) {
        goto LABEL_4;
      }
      break;
    }
    if (v7 < 5 || v4 != v7 - 5)
    {
      std::__throw_bad_optional_access[abi:nn180100]();
      return 0;
    }
LABEL_4:
    ++v4;
    v6 -= 8;
    if (!v6) {
      return 0;
    }
  }
  if (*(void *)(v5 + 8 * v4) == 1) {
    goto LABEL_4;
  }
  return 1;
}

uint64_t mlir::anec::verifyCompatibilityWithUnflatten(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return mlir::anec::verifyCompatibilityWithFlatten(a3, a4, a1, a2);
}

void *llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::SmallDenseMap<llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>> const*>(void *a1, void *a2, void *a3)
{
  unint64_t v6 = ((uint64_t)(*a3 - *a2) >> 5) | ((unint64_t)((uint64_t)(*a3 - *a2) >> 5) >> 1);
  unint64_t v7 = v6 | (v6 >> 2) | ((v6 | (v6 >> 2)) >> 4);
  unint64_t v8 = v7 | (v7 >> 8) | ((v7 | (v7 >> 8)) >> 16);
  uint64_t v9 = (HIDWORD(v8) | v8) + 1;
  uint64_t v10 = a1 + 1;
  if (v9 <= 4)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    buffer = llvm::allocate_buffer(32 * ((HIDWORD(v8) | v8) + 1), (std::align_val_t)8uLL);
    a1[1] = buffer;
    a1[2] = v9;
    int v12 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (char *)&buffer[4 * v9];
      goto LABEL_6;
    }
  }
  uint64_t v13 = (char *)(a1 + 17);
  buffer = v10;
LABEL_6:
  unint64_t v14 = v13 - (char *)buffer - 32;
  if (v14 < 0x20)
  {
    uint64_t v15 = (char *)buffer;
    do
    {
LABEL_11:
      *(void *)uint64_t v15 = -1;
      v15 += 32;
    }
    while (v15 != v13);
    goto LABEL_12;
  }
  uint64_t v16 = (v14 >> 5) + 1;
  uint64_t v15 = (char *)&buffer[4 * (v16 & 0xFFFFFFFFFFFFFFELL)];
  unsigned int v17 = buffer + 4;
  uint64_t v18 = v16 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v17 - 4) = -1;
    *unsigned int v17 = -1;
    v17 += 8;
    v18 -= 2;
  }
  while (v18);
  if (v16 != (v16 & 0xFFFFFFFFFFFFFFELL)) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v19 = (void *)*a2;
  for (i = (void *)*a3; v19 != i; v19 += 4)
  {
    if (*(unsigned char *)a1)
    {
      int v21 = 4;
      unint64_t v22 = v10;
    }
    else
    {
      int v21 = *((_DWORD *)a1 + 4);
      if (!v21)
      {
        uint64_t v27 = 0;
LABEL_21:
        llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::InsertIntoBucket<unsigned long long const&,std::vector<mlir::anec::KernelDim> const&>((uint64_t)a1, v27, v19, (uint64_t)(v19 + 1));
        continue;
      }
      unint64_t v22 = (void *)a1[1];
    }
    int v23 = v21 - 1;
    uint64_t v24 = (37 * *v19) & v23;
    uint64_t v25 = &v22[4 * v24];
    uint64_t v26 = *v25;
    if (*v19 != *v25)
    {
      uint64_t v28 = 0;
      int v29 = 1;
      while (v26 != -1)
      {
        if (v28) {
          BOOL v30 = 0;
        }
        else {
          BOOL v30 = v26 == -2;
        }
        if (v30) {
          uint64_t v28 = v25;
        }
        int v31 = v24 + v29++;
        uint64_t v24 = v31 & v23;
        uint64_t v25 = &v22[4 * v24];
        uint64_t v26 = *v25;
        if (*v19 == *v25) {
          goto LABEL_16;
        }
      }
      if (v28) {
        uint64_t v27 = v28;
      }
      else {
        uint64_t v27 = v25;
      }
      goto LABEL_21;
    }
LABEL_16:
    ;
  }
  return a1;
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::InsertIntoBucket<unsigned long long const&,std::vector<mlir::anec::KernelDim> const&>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    int v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::grow(a1, v10);
  uint64_t v17 = a1 + 8;
  int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v18 = 4;
  }
  else
  {
    int v18 = *(_DWORD *)(a1 + 16);
    if (!v18)
    {
      int v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v17 = *(void *)(a1 + 8);
  }
  int v11 = *(_DWORD *)a1 & 1;
  int v19 = v18 - 1;
  uint64_t v20 = (37 * *a3) & v19;
  a2 = (void *)(v17 + 32 * v20);
  uint64_t v21 = *a2;
  if (*a3 != *a2)
  {
    unint64_t v22 = 0;
    int v23 = 1;
    while (v21 != -1)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -2;
      }
      if (v24) {
        unint64_t v22 = a2;
      }
      int v25 = v20 + v23++;
      uint64_t v20 = v25 & v19;
      a2 = (void *)(v17 + 32 * v20);
      uint64_t v21 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v22) {
      a2 = v22;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  *a2 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  int v12 = *(const void **)a4;
  int64_t v13 = *(void *)(a4 + 8) - *(void *)a4;
  if (v13)
  {
    if (v13 < 0) {
      abort();
    }
    unint64_t v14 = (char *)operator new(v13);
    a2[1] = v14;
    a2[2] = v14;
    uint64_t v15 = &v14[4 * (v13 >> 2)];
    a2[3] = v15;
    memcpy(v14, v12, v13);
    a2[2] = v15;
  }
  return a2;
}

void llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::grow(uint64_t a1, unsigned int a2)
{
  v18[12] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unint64_t v6 = *(uint64_t **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = llvm::allocate_buffer(32 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    unint64_t v14 = (char *)(32 * v7);
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets((int *)a1, v6, (uint64_t *)&v14[(void)v6]);
    llvm::deallocate_buffer((llvm *)v6, v14);
  }
  int v8 = &v15;
  if (*(void *)(a1 + 8) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    long long v16 = *(_OWORD *)(a1 + 16);
    uint64_t v17 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    int v8 = v18;
  }
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *int v8 = v9;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 48);
    v8[3] = *(void *)(a1 + 64);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    v8 += 4;
  }
  unint64_t v10 = *(void *)(a1 + 72);
  if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *int v8 = v10;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 80);
    v8[3] = *(void *)(a1 + 96);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    v8 += 4;
  }
  unint64_t v11 = *(void *)(a1 + 104);
  if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *int v8 = v11;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *(_OWORD *)(v8 + 1) = *(_OWORD *)(a1 + 112);
    v8[3] = *(void *)(a1 + 128);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    v8 += 4;
  }
  if (a2 >= 5)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v12 = a2;
    *(void *)(a1 + 8) = llvm::allocate_buffer(32 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v12;
  }
  llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets((int *)a1, &v15, v8);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,std::vector<mlir::anec::KernelDim>,4u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>,unsigned long long,std::vector<mlir::anec::KernelDim>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,std::vector<mlir::anec::KernelDim>>>::moveFromOldBuckets(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *a1;
  *(void *)a1 = *a1 & 1;
  uint64_t v7 = a1 + 2;
  if (v6)
  {
    unint64_t v10 = (char *)(a1 + 34);
    unint64_t v9 = a1 + 2;
  }
  else
  {
    uint64_t v8 = a1[4];
    if (!v8) {
      goto LABEL_11;
    }
    unint64_t v9 = (void *)*((void *)a1 + 1);
    unint64_t v10 = (char *)&v9[4 * v8];
  }
  unint64_t v11 = v10 - (char *)v9 - 32;
  if (v11 < 0x20)
  {
    uint64_t v12 = (char *)v9;
    do
    {
LABEL_10:
      *(void *)uint64_t v12 = -1;
      v12 += 32;
    }
    while (v12 != v10);
    goto LABEL_11;
  }
  uint64_t v13 = (v11 >> 5) + 1;
  uint64_t v12 = (char *)&v9[4 * (v13 & 0xFFFFFFFFFFFFFFELL)];
  unint64_t v14 = v9 + 4;
  uint64_t v15 = v13 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    *(v14 - 4) = -1;
    void *v14 = -1;
    v14 += 8;
    v15 -= 2;
  }
  while (v15);
  if (v13 != (v13 & 0xFFFFFFFFFFFFFFELL)) {
    goto LABEL_10;
  }
LABEL_11:
  if (a2 != a3)
  {
    do
    {
      unint64_t v16 = *v4;
      if ((unint64_t)*v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if (*(unsigned char *)a1)
        {
          int v18 = 4;
          uint64_t v17 = v7;
        }
        else
        {
          uint64_t v17 = (int *)*((void *)a1 + 1);
          int v18 = a1[4];
        }
        int v19 = v18 - 1;
        uint64_t v20 = (v18 - 1) & (37 * v16);
        uint64_t v21 = (unint64_t *)&v17[8 * v20];
        unint64_t v22 = *v21;
        if (v16 != *v21)
        {
          BOOL v24 = 0;
          int v25 = 1;
          while (v22 != -1)
          {
            if (v24) {
              BOOL v26 = 0;
            }
            else {
              BOOL v26 = v22 == -2;
            }
            if (v26) {
              BOOL v24 = v21;
            }
            int v27 = v20 + v25++;
            uint64_t v20 = v27 & v19;
            uint64_t v21 = (unint64_t *)&v17[8 * v20];
            unint64_t v22 = *v21;
            if (v16 == *v21) {
              goto LABEL_19;
            }
          }
          if (v24) {
            uint64_t v21 = v24;
          }
        }
LABEL_19:
        *uint64_t v21 = v16;
        v21[1] = 0;
        v21[2] = 0;
        v21[3] = 0;
        *(_OWORD *)(v21 + 1) = *(_OWORD *)(v4 + 1);
        v21[3] = v4[3];
        v4[1] = 0;
        v4[2] = 0;
        v4[3] = 0;
        *a1 += 2;
        int v23 = (void *)v4[1];
        if (v23)
        {
          v4[2] = (uint64_t)v23;
          operator delete(v23);
        }
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s, uint64_t *a4, char *a5, uint64_t *a6, char *a7)
{
  unint64_t v15 = *(void *)(a1 + 16);
  uint64_t v13 = a1 + 16;
  unint64_t v14 = v15;
  uint64_t v16 = *a2;
  int v25 = 2;
  uint64_t v26 = v16;
  uint64_t v17 = *(unsigned int *)(v13 + 8);
  int v18 = &v25;
  if (v17 >= *(_DWORD *)(v13 + 12))
  {
    unint64_t v22 = v17 + 1;
    BOOL v23 = v14 + 24 * v17 > (unint64_t)&v25;
    if (v14 <= (unint64_t)&v25 && v23)
    {
      BOOL v24 = (char *)&v25 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v22, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      int v18 = (int *)&v24[v14];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 32), v22, 24);
      unint64_t v14 = *(void *)(a1 + 16);
      int v18 = &v25;
    }
  }
  uint64_t v19 = v14 + 24 * *(unsigned int *)(a1 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = *((void *)v18 + 2);
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<long long,char const(&)[3],long long,char const(&)[2]>(a1, a4, a5, a6, a7);
}

uint64_t mlir::Diagnostic::append<long long,char const(&)[3],long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s, uint64_t *a4, char *a5)
{
  unint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  unint64_t v10 = v11;
  uint64_t v12 = *a2;
  int v21 = 2;
  uint64_t v22 = v12;
  uint64_t v13 = *(unsigned int *)(v9 + 8);
  unint64_t v14 = &v21;
  if (v13 >= *(_DWORD *)(v9 + 12))
  {
    unint64_t v18 = v13 + 1;
    BOOL v19 = v10 + 24 * v13 > (unint64_t)&v21;
    if (v10 <= (unint64_t)&v21 && v19)
    {
      long long v20 = (char *)&v21 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      unint64_t v14 = (int *)&v20[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      unint64_t v10 = *(void *)(a1 + 16);
      unint64_t v14 = &v21;
    }
  }
  uint64_t v15 = v10 + 24 * *(unsigned int *)(a1 + 24);
  long long v16 = *(_OWORD *)v14;
  *(void *)(v15 + 16) = *((void *)v14 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<long long,char const(&)[2]>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<long long,char const(&)[2]>(uint64_t a1, uint64_t *a2, char *__s)
{
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = a1 + 16;
  unint64_t v6 = v7;
  uint64_t v8 = *a2;
  int v17 = 2;
  uint64_t v18 = v8;
  uint64_t v9 = *(unsigned int *)(v5 + 8);
  unint64_t v10 = &v17;
  if (v9 >= *(_DWORD *)(v5 + 12))
  {
    unint64_t v14 = v9 + 1;
    BOOL v15 = v6 + 24 * v9 > (unint64_t)&v17;
    if (v6 <= (unint64_t)&v17 && v15)
    {
      long long v16 = (char *)&v17 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      unint64_t v10 = (int *)&v16[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      unint64_t v6 = *(void *)(a1 + 16);
      unint64_t v10 = &v17;
    }
  }
  uint64_t v11 = v6 + 24 * *(unsigned int *)(a1 + 24);
  long long v12 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = *((void *)v10 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return a1;
}

uint64_t mlir::getStrideInBytes(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = a1;
  *(_DWORD *)(a2 + 8) = 0;
  if (a3)
  {
    v19[0] = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v20);
    v19[1] = v4;
    if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19)) {
      return 1;
    }
    a1 = v20;
  }
  uint64_t v18 = 0;
  if (!mlir::getStridesAndOffset(a1, a2, &v18)) {
    return 0;
  }
  v19[0] = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v20);
  unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v19);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = IntOrFloatBitWidth >> 3;
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v9)
    {
      uint64_t v10 = v9 + 1;
      uint64_t v11 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
      long long v12 = &v8[v11];
      uint64_t v13 = v8 + 1;
      uint64_t v14 = v11;
      do
      {
        uint64_t v15 = *v13 * v7;
        *(v13 - 1) *= v7;
        *uint64_t v13 = v15;
        v13 += 2;
        v14 -= 2;
      }
      while (v14);
      if (v10 == v11) {
        return 1;
      }
    }
    else
    {
      long long v12 = *(void **)a2;
    }
    int v17 = &v8[v6];
    do
      *v12++ *= v7;
    while (v12 != v17);
  }
  return 1;
}

uint64_t mlir::cloneTypeWithStrideInBytes(uint64_t a1, const void *a2, uint64_t a3, mlir *a4)
{
  v31[5] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a1;
  uint64_t RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28);
  unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  uint64_t RHS = v31;
  uint64_t v30 = 0x500000000;
  if ((unint64_t)(8 * a3) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&RHS, v31, (8 * a3) >> 3, 8);
    int v8 = v30;
    uint64_t v9 = (uint64_t *)RHS;
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v8 = 0;
  uint64_t v9 = v31;
  if (a3)
  {
LABEL_5:
    memcpy(&v9[v8], a2, 8 * a3);
    int v8 = v30;
    uint64_t v9 = (uint64_t *)RHS;
  }
LABEL_6:
  uint64_t v10 = (v8 + a3);
  LODWORD(v30) = v8 + a3;
  if (v8 + a3)
  {
    uint64_t v11 = IntOrFloatBitWidth >> 3;
    long long v12 = v9;
    if (((v10 - 1) & 0x1FFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_11;
    }
    uint64_t v13 = ((v10 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    long long v12 = &v9[v13 & 0x3FFFFFFFFFFFFFFELL];
    uint64_t v14 = v9 + 1;
    uint64_t v15 = v13 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v16 = *v14;
      *(v14 - 1) /= v11;
      uint64_t *v14 = v16 / v11;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_11:
      int v17 = &v9[v10];
      do
        *v12++ /= v11;
      while (v12 != v17);
    }
  }
  Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v28);
  uint64_t v20 = v19;
  uint64_t v21 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v28);
  uint64_t v22 = RHS;
  uint64_t v23 = v30;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  unint64_t StridedLinearLayoutMap = mlir::makeStridedLinearLayoutMap((uint64_t)v22, v23, a4, Context);
  uint64_t v26 = mlir::MemRefType::get(Value, v20, v21, StridedLinearLayoutMap, 0);
  if (RHS != v31) {
    free(RHS);
  }
  return v26;
}

void mlir::getRowBytesAlignedStrideInBytes(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10 = *(unsigned int *)(a5 + 8);
  if (a2 != v10)
  {
    if (a2 >= v10)
    {
      if (a2 > *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), a2, 8);
        unint64_t v10 = *(unsigned int *)(a5 + 8);
      }
      if (a2 != v10) {
        bzero((void *)(*(void *)a5 + 8 * v10), 8 * (a2 - v10));
      }
    }
    *(_DWORD *)(a5 + 8) = a2;
  }
  if (a2)
  {
    uint64_t v11 = *(void *)a5;
    *(void *)(*(void *)a5 + 8 * a2 - 8) = a3;
    if (a2 != 1)
    {
      uint64_t v12 = v11 - 16;
      unint64_t v13 = a2;
      do
      {
        a3 = (a4 - 1 + *(void *)(a1 - 8 + 8 * v13) * a3) / a4 * a4;
        *(void *)(v12 + 8 * v13) = a3;
        unint64_t v14 = v13 - 3;
        --v13;
      }
      while (v14 < a2);
    }
  }
}

uint64_t mlir::inferReturnTypesEqualToNthArgumentType(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  v16[23] = *MEMORY[0x1E4F143B8];
  v14[0] = a4;
  v14[1] = a5;
  if (a5 <= a10)
  {
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v15);
      if (v15) {
        mlir::Diagnostic::operator<<((uint64_t)v16, "invalid number of operands");
      }
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v15);
      if (v15) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v15);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v16);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unint64_t v10 = *(void *)(mlir::ValueRange::dereference_iterator(v14, a10) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v11 = *(unsigned int *)(a9 + 8);
    if (v11 >= *(_DWORD *)(a9 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(a9 + 8);
    }
    *(void *)(*(void *)a9 + 8 * v11) = v10;
    ++*(_DWORD *)(a9 + 8);
    return 1;
  }
  return v12;
}

uint64_t mlir::inferReturnTypesEqualToFirstArgumentType(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return mlir::inferReturnTypesEqualToNthArgumentType(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0);
}

uint64_t mlir::inferReductionOpReturnShape(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8)
{
  v40[6] = *MEMORY[0x1E4F143B8];
  uint64_t v38 = v40;
  uint64_t v39 = 0x600000000;
  if (mlir::getPositiveAxes(a5, a6, a4, (uint64_t)&v38, a1, a2, 0))
  {
    char v32 = v34;
    uint64_t v33 = 0x400000000;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unint64_t v35 = &v36;
    if (v39)
    {
      uint64_t v12 = (uint64_t **)v38;
      uint64_t v13 = 8 * v39;
      do
      {
        unint64_t v14 = *v12++;
        int v31 = v14;
        llvm::SmallSet<long long,4u,std::less<long long>>::insert((uint64_t)&v32, &v31, (uint64_t)v30);
        v13 -= 8;
      }
      while (v13);
    }
    if (a4)
    {
      uint64_t v15 = 0;
      uint64_t v16 = (void *)(a8 + 16);
      do
      {
        if (v37)
        {
          BOOL v19 = v36;
          if (!v36) {
            goto LABEL_7;
          }
          uint64_t v20 = &v36;
          do
          {
            uint64_t v21 = v19;
            uint64_t v22 = v20;
            uint64_t v23 = v19[4];
            BOOL v24 = v19 + 1;
            if (v23 >= v15)
            {
              BOOL v24 = v21;
              uint64_t v20 = (void **)v21;
            }
            BOOL v19 = (void *)*v24;
          }
          while (v19);
          if (v20 == &v36) {
            goto LABEL_7;
          }
          if (v23 < v15) {
            uint64_t v21 = v22;
          }
          if (v15 < v21[4]) {
            goto LABEL_7;
          }
        }
        else
        {
          if (!v33) {
            goto LABEL_7;
          }
          int v25 = v32;
          uint64_t v26 = 8 * v33;
          while (*v25 != v15)
          {
            ++v25;
            v26 -= 8;
            if (!v26) {
              goto LABEL_7;
            }
          }
          if (!v26)
          {
LABEL_7:
            uint64_t v17 = *(void *)(a3 + 8 * v15);
            unint64_t v18 = *(unsigned int *)(a8 + 8);
            if (v18 >= *(unsigned int *)(a8 + 12)) {
              goto LABEL_29;
            }
            goto LABEL_8;
          }
        }
        if (!a7) {
          goto LABEL_9;
        }
        unint64_t v18 = *(unsigned int *)(a8 + 8);
        uint64_t v17 = 1;
        if (v18 >= *(unsigned int *)(a8 + 12))
        {
LABEL_29:
          int v29 = v16;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a8, v16, v18 + 1, 8);
          uint64_t v16 = v29;
          unint64_t v18 = *(unsigned int *)(a8 + 8);
        }
LABEL_8:
        *(void *)(*(void *)a8 + 8 * v18) = v17;
        ++*(_DWORD *)(a8 + 8);
LABEL_9:
        ++v15;
      }
      while (v15 != a4);
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v35, v36);
    if (v32 != v34) {
      free(v32);
    }
    uint64_t v27 = 1;
  }
  else
  {
    uint64_t v27 = 0;
  }
  if (v38 != v40) {
    free(v38);
  }
  return v27;
}

uint64_t mlir::mps::isMoreSpecializedShape(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a2 != a4) {
    return 0;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v4 = 8 * a2 - 8;
  do
  {
    uint64_t v5 = v4;
    BOOL v6 = *a1 == *a3 || *a3 == 0x8000000000000000;
    uint64_t v7 = v6;
    if (!v6) {
      break;
    }
    ++a1;
    ++a3;
    v4 -= 8;
  }
  while (v5);
  return v7;
}

uint64_t mlir::mps::areMoreSpecializedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 != a4) {
    return 0;
  }
  v16[0] = &unk_1EC97F480;
  v16[1] = a5;
  uint64_t v17 = v16;
  if (!a2)
  {
    uint64_t v12 = 1;
LABEL_15:
    (*(void (**)(void *))(v16[0] + 32))(v16);
    return v12;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a2 - 1;
  do
  {
    unint64_t v9 = mlir::TypeRange::dereference_iterator(a1, v7);
    unint64_t v14 = mlir::TypeRange::dereference_iterator(a3, v7);
    unint64_t v15 = v9;
    if (!v17) {
      std::__throw_bad_function_call[abi:nn180100]();
    }
    uint64_t v10 = (*(uint64_t (**)(void *, unint64_t *, unint64_t *))(*v17 + 48))(v17, &v15, &v14);
    if (v10) {
      BOOL v11 = v8 == v7;
    }
    else {
      BOOL v11 = 1;
    }
    ++v7;
  }
  while (!v11);
  uint64_t v12 = v10;
  if (v17 == v16) {
    goto LABEL_15;
  }
  if (v17) {
    (*(void (**)(void))(*v17 + 40))();
  }
  return v12;
}

void *std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EC97F480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EC97F480;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mps::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v4 = *a3;
  v24[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(*a2);
  v24[1] = v5;
  BOOL v6 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v4);
  v23[0] = v6;
  v23[1] = v7;
  if (v24[0]) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v24);
  uint64_t v25 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v23);
  uint64_t v26 = OperandRange;
  uint64_t v11 = *(void *)(v9 + 24);
  if (v11)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v26, &v25))
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v23)) {
        return 1;
      }
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v24))
      {
        uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
        uint64_t v14 = v13;
        unint64_t v15 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v23);
        if (v14 == v16)
        {
          if (v14)
          {
            uint64_t v17 = 8 * v14 - 8;
            do
            {
              uint64_t v18 = v17;
              BOOL v19 = *ArgAttrsAttr == *v15 || *v15 == 0x8000000000000000;
              uint64_t v20 = v19;
              if (!v19) {
                break;
              }
              ++ArgAttrsAttr;
              ++v15;
              v17 -= 8;
            }
            while (v18);
            return v20;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  uint64_t v22 = (void *)std::__throw_bad_function_call[abi:nn180100]();
  return mlir::mps::getElementBitWidth(v22);
}

uint64_t mlir::mps::getElementBitWidth(void *a1)
{
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  uint64_t v6 = ElementTypeOrSelf;
  if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v2 = ElementTypeOrSelf;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v5 = v2;
  if (!v2) {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v6);
  }
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v5);
  return 2 * mlir::mps::getElementBitWidth(Value);
}

uint64_t mlir::mps::getTypeAlignmentSize(void *a1)
{
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  uint64_t v11 = ElementTypeOrSelf;
  uint64_t v2 = *(void **)(*(void *)ElementTypeOrSelf + 136);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id) {
    return 1;
  }
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    BOOL v3 = v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
    if (v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
      uint64_t v4 = ElementTypeOrSelf;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v10 = v4;
    if (!v3) {
      return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v11) >> 3;
    }
    goto LABEL_15;
  }
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v11) < 8) {
    return 1;
  }
  uint64_t v6 = *(void **)(*(void *)v11 + 136);
  BOOL v7 = v6 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  if (v6 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v10 = v8;
  if (!v7) {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v11) >> 3;
  }
LABEL_15:
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v10);
  return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value) >> 3;
}

uint64_t mlir::mps::getElementsAttrElementBitWidth(void *a1)
{
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  uint64_t v7 = ElementTypeOrSelf;
  uint64_t v2 = *(void **)(*(void *)ElementTypeOrSelf + 136);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v3 = ElementTypeOrSelf;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v6 = v3;
  if (v3)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v6);
    return 2 * mlir::mps::getElementsAttrElementBitWidth(Value);
  }
  else if (v2 == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 4;
  }
  else
  {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v7);
  }
}

unint64_t mlir::mps::getElementsAttrStorageSize(uint64_t a1, uint64_t a2)
{
  v13[0] = a1;
  v13[1] = a2;
  uint64_t OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v13);
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(ArgAttrsAttr, v3) + 7) >> 3;
  }
  else if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 2))
  {
    uint64_t v5 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v5, v6) + 3) >> 2;
  }
  else if (*(_UNKNOWN **)(*OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id {
         || mlir::Type::isInteger((mlir::Type *)&OperandRange, 4))
  }
  {
    uint64_t v7 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v7, v8) + 1) >> 1;
  }
  else
  {
    uint64_t ElementsAttrElementBitWidth = mlir::mps::getElementsAttrElementBitWidth(OperandRange);
    uint64_t v10 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
    return (unint64_t)(mlir::ShapedType::getNumElements(v10, v11) * ElementsAttrElementBitWidth) >> 3;
  }
}

uint64_t mlir::mps::isCompatibleWithDenseStorage(uint64_t a1)
{
  uint64_t v7 = a1;
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    uint64_t v1 = a1;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v6 = v1;
  if (v1)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v6);
    return mlir::mps::isCompatibleWithDenseStorage(Value);
  }
  else
  {
    uint64_t result = mlir::Type::isIntOrFloat((mlir::Type *)&v7);
    if (result)
    {
      unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v7);
      return IntOrFloatBitWidth == 1 || IntOrFloatBitWidth > 7;
    }
  }
  return result;
}

void *mlir::mps::MPSDialect::initialize(mlir::mps::MPSDialect *this)
{
  _ZN4mlir7Dialect13addOperationsIJNS_3mps6ACosOpENS2_7ACoshOpENS2_6ASinOpENS2_7ASinhOpENS2_7ATan2OpENS2_6ATanOpENS2_7ATanhOpENS2_10AbsoluteOpENS2_16AbsoluteSquareOpENS2_5AddOpENS2_5AndOpENS2_16AssignVariableOpENS2_10BandPartOpENS2_14BatchToSpaceOpENS2_13BiasAddGradOpENS2_9BiasAddOpENS2_12BitwiseAndOpENS2_18BitwiseLeftShiftOpENS2_12BitwiseNotOpENS2_11BitwiseOrOpENS2_17BitwisePopcountOpENS2_19BitwiseRightShiftOpENS2_12BitwiseXorOpENS2_23BroadcastGradientArgsOpENS2_13BroadcastToOpENS2_6CallOpENS2_6CastOpENS2_6CeilOpENS2_7ClampOpENS2_9ColToImOpENS2_8ConcatOpENS2_11ConjugateOpENS2_10ConstantOpENS2_20Conv2DDataGradientOpENS2_8Conv2DOpENS2_23Conv2DWeightsGradientOpENS2_20Conv3DDataGradientOpENS2_8Conv3DOpENS2_23Conv3DWeightsGradientOpENS2_5CosOpENS2_6CoshOpENS2_12CostVolumeOpENS2_15CreateComplexOpENS2_21CreateTextureTensorOpENS2_6CropOpENS2_12CropResizeOpENS2_19CumulativeMaximumOpENS2_19CumulativeMinimumOpENS2_19CumulativeProductOpENS2_15CumulativeSumOpENS2_9DegammaOpENS2_16DepthToSpace2DOpENS2_29DepthwiseConv2DDataGradientOpENS2_17DepthwiseConv2DOpENS2_32DepthwiseConv2DWeightsGradientOpENS2_29DepthwiseConv3DDataGradientOpENS2_17DepthwiseConv3DOpENS2_32DepthwiseConv3DWeightsGradientOpENS2_15DequantizeLUTOpENS2_12DequantizeOpENS2_15DimensionSizeOpENS2_7DiracOpENS2_8DivideOpENS2_18DynamicShapeCastOpENS2_5EluOpENS2_9EqualToOpENS2_5ErfOpENS2_12ExpandDimsOpENS2_16ExponentBase10OpENS2_15ExponentBase2OpENS2_10ExponentOpENS2_22FastFourierTransformOpENS2_11Flatten2DOpENS2_13FloorDivideOpENS2_7FloorOpENS2_13GRUGradientOpENS2_5GRUOpENS2_17GatherAlongAxisOpENS2_10GatherNDOpENS2_8GatherOpENS2_6GeluOpENS2_10GetCoordOpENS2_13GreaterThanOpENS2_22GreaterThanOrEqualToOpENS2_17HammingDistanceOpENS2_20HermiteanToRealFFTOpENS2_10IdentityOpENS2_9ImToColOpENS2_15ImaginaryPartOpENS2_23InitRandomPhiloxStateOpENS2_14InstanceNormOpENS2_10IsFiniteOpENS2_12IsInfiniteOpENS2_7IsNaNOpENS2_8LPNormOpENS2_14LSTMGradientOpENS2_6LSTMOpENS2_11LeakyReluOpENS2_10LessThanOpENS2_19LessThanOrEqualToOpENS2_30LocalConvolutionDataGradientOpENS2_18LocalConvolutionOpENS2_32LocalConvolutionWeightGradientOpENS2_17LogarithmBase10OpENS2_16LogarithmBase2OpENS2_11LogarithmOpENS2_8MatMulOpENS2_25MaterializeSparseTensorOpENS2_23MatrixDecompositionLUOpENS2_15MatrixInverseOpENS2_16MatrixSolverLUOpENS2_9MaximumOpENS2_9MinimumOpENS2_8ModuloOpENS2_10MultiplyOpENS2_7NReluOpENS2_6NandOpENS2_10NegativeOpENS2_23NonMaximumSuppressionOpENS2_9NonZeroOpENS2_5NorOpENS2_15NormalizationOpENS2_12NotEqualToOpENS2_5NotOpENS2_8OneHotOpENS2_4OrOpENS2_7PReluOpENS2_13PadGradientOpENS2_5PadOpENS2_9PermuteOpENS2_13PlaceholderOpENS2_17PoolAvgGradientOpENS2_9PoolAvgOpENS2_20PoolL2NormGradientOpENS2_12PoolL2NormOpENS2_17PoolMaxGradientOpENS2_9PoolMaxOpENS2_7PowerOpENS2_17PruningGradientOpENS2_9PruningOpENS2_10QuantizeOpENS2_14RandomNormalOpENS2_23RandomTruncatedNormalOpENS2_15RandomUniformOpENS2_6RankOpENS2_18ReadDataFromFileOpENS2_14ReadVariableOpENS2_10RealPartOpENS2_20RealToHermiteanFFTOpENS2_12ReciprocalOpENS2_22ReciprocalSquareRootOpENS2_14ReductionAndOpENS2_17ReductionArgMaxOpENS2_17ReductionArgMinOpENS2_20ReductionLogSumExpOpENS2_14ReductionMaxOpENS2_15ReductionMeanOpENS2_14ReductionMinOpENS2_13ReductionOrOpENS2_15ReductionProdOpENS2_14ReductionSumOpENS2_19ReductionVarianceOpENS2_17ReinterpretCastOpENS2_7Relu6OpENS2_10ReluGradOpENS2_6ReluOpENS2_9ReshapeOpENS2_16ResizeGradientOpENS2_8ResizeOpENS2_9ReverseOpENS2_6RintOpENS2_7RoundOpENS2_24SampleGridDataGradientOpENS2_12SampleGridOpENS2_18ScatterAlongAxisOpENS2_11ScatterNDOpENS2_9ScatterOpENS2_8SelectOpENS2_7ShapeOpENS2_17SigmoidGradientOpENS2_28SigmoidGradientWithSigmoidOpENS2_13SigmoidHardOpENS2_9SigmoidOpENS2_6SignOpENS2_9SignbitOpENS2_5SinOpENS2_23SingleGateRNNGradientOpENS2_15SingleGateRNNOpENS2_6SinhOpENS2_6SizeOpENS2_7SliceOpENS2_9SoftmaxOpENS2_10SoftplusOpENS2_20SoftplusParametricOpENS2_10SoftsignOpENS2_6SortOpENS2_14SpaceToBatchOpENS2_16SpaceToDepth2DOpENS2_7SplitOpENS2_8SquareOpENS2_12SquareRootOpENS2_9SqueezeOpENS2_9StencilOpENS2_22StridedSliceGradientOpENS2_14StridedSliceOpENS2_20StridedSliceUpdateOpENS2_10SubtractOpENS2_7SwishOpENS2_5TanOpENS2_6TanhOpENS2_14TileGradientOpENS2_6TileOpENS2_14TopKGradientOpENS2_6TopKOpENS2_11TransposeOpENS2_10TruncateOpENS2_16TypeConstraintOpENS2_16UnrealizedFoldOpENS2_19UpdateRandomStateOpENS2_20VariableFromTensorOpENS2_6XnorOpENS2_5XorOpEEEEvv((uint64_t)this);
  mlir::Dialect::addOperations<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::ForOp,mlir::mps::serialization::IfOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp,mlir::mps::serialization::FuncOp,mlir::mps::serialization::ModuleOp,mlir::mps::serialization::ReturnOp,mlir::mps::serialization::WhileOp,mlir::mps::serialization::YieldOp>((uint64_t)this);
  mlir::Dialect::addAttributes<mlir::mps::TensorDataLayoutAttr,mlir::mps::ReductionModeAttr,mlir::mps::DeviceHintAttr,mlir::mps::ScatterModeAttr,mlir::mps::PaddingModeAttr,mlir::mps::SamplingModeAttr,mlir::mps::NearestRoundingModeAttr,mlir::mps::SparseTensorStorageAttr,mlir::mps::MetalPixelFormatAttr,mlir::mps::NormalSamplingMethodAttr,mlir::mps::PaddingStyleAttr,mlir::mps::PoolIndicesModeAttr,mlir::mps::RNNActivationAttr,mlir::mps::LSTMGateLayoutAttr,mlir::mps::GRUGateLayoutAttr,mlir::mps::StencilPaddingModeAttr,mlir::mps::CropResizeAlignmentModeAttr,mlir::mps::CropResizeCoordinateModeAttr,mlir::mps::PruningMetricAttr,mlir::mps::PruningStructureAttr,mlir::mps::SimilarityTypeAttr,mlir::mps::FFTScalingModeAttr,mlir::mps::MPSBufferTensorAttr,mlir::mps::CallInlineModeAttr>((uint64_t)this);
  mlir::Dialect::addInterfaces<mlir::mps::MPSInlinerInterface,mlir::mps::MPSBytecodeDialectInterface>(this);
  uint64_t v2 = (mlir::mps::MPSResourceBlobManagerInterface *)operator new(0x48uLL);
  uint64_t v5 = mlir::mps::MPSResourceBlobManagerInterface::MPSResourceBlobManagerInterface(v2, this);
  mlir::Dialect::addInterface((uint64_t)this, &v5);
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  mlir::Dialect::addInterface<mlir::mps::MPSOpAsmInterface,mlir::mps::MPSResourceBlobManagerInterface &>((uint64_t)this, (uint64_t)v2);
  return mlir::Dialect::addType<mlir::mps::NF4Type>((uint64_t)this);
}

uint64_t _ZN4mlir7Dialect13addOperationsIJNS_3mps6ACosOpENS2_7ACoshOpENS2_6ASinOpENS2_7ASinhOpENS2_7ATan2OpENS2_6ATanOpENS2_7ATanhOpENS2_10AbsoluteOpENS2_16AbsoluteSquareOpENS2_5AddOpENS2_5AndOpENS2_16AssignVariableOpENS2_10BandPartOpENS2_14BatchToSpaceOpENS2_13BiasAddGradOpENS2_9BiasAddOpENS2_12BitwiseAndOpENS2_18BitwiseLeftShiftOpENS2_12BitwiseNotOpENS2_11BitwiseOrOpENS2_17BitwisePopcountOpENS2_19BitwiseRightShiftOpENS2_12BitwiseXorOpENS2_23BroadcastGradientArgsOpENS2_13BroadcastToOpENS2_6CallOpENS2_6CastOpENS2_6CeilOpENS2_7ClampOpENS2_9ColToImOpENS2_8ConcatOpENS2_11ConjugateOpENS2_10ConstantOpENS2_20Conv2DDataGradientOpENS2_8Conv2DOpENS2_23Conv2DWeightsGradientOpENS2_20Conv3DDataGradientOpENS2_8Conv3DOpENS2_23Conv3DWeightsGradientOpENS2_5CosOpENS2_6CoshOpENS2_12CostVolumeOpENS2_15CreateComplexOpENS2_21CreateTextureTensorOpENS2_6CropOpENS2_12CropResizeOpENS2_19CumulativeMaximumOpENS2_19CumulativeMinimumOpENS2_19CumulativeProductOpENS2_15CumulativeSumOpENS2_9DegammaOpENS2_16DepthToSpace2DOpENS2_29DepthwiseConv2DDataGradientOpENS2_17DepthwiseConv2DOpENS2_32DepthwiseConv2DWeightsGradientOpENS2_29DepthwiseConv3DDataGradientOpENS2_17DepthwiseConv3DOpENS2_32DepthwiseConv3DWeightsGradientOpENS2_15DequantizeLUTOpENS2_12DequantizeOpENS2_15DimensionSizeOpENS2_7DiracOpENS2_8DivideOpENS2_18DynamicShapeCastOpENS2_5EluOpENS2_9EqualToOpENS2_5ErfOpENS2_12ExpandDimsOpENS2_16ExponentBase10OpENS2_15ExponentBase2OpENS2_10ExponentOpENS2_22FastFourierTransformOpENS2_11Flatten2DOpENS2_13FloorDivideOpENS2_7FloorOpENS2_13GRUGradientOpENS2_5GRUOpENS2_17GatherAlongAxisOpENS2_10GatherNDOpENS2_8GatherOpENS2_6GeluOpENS2_10GetCoordOpENS2_13GreaterThanOpENS2_22GreaterThanOrEqualToOpENS2_17HammingDistanceOpENS2_20HermiteanToRealFFTOpENS2_10IdentityOpENS2_9ImToColOpENS2_15ImaginaryPartOpENS2_23InitRandomPhiloxStateOpENS2_14InstanceNormOpENS2_10IsFiniteOpENS2_12IsInfiniteOpENS2_7IsNaNOpENS2_8LPNormOpENS2_14LSTMGradientOpENS2_6LSTMOpENS2_11LeakyReluOpENS2_10LessThanOpENS2_19LessThanOrEqualToOpENS2_30LocalConvolutionDataGradientOpENS2_18LocalConvolutionOpENS2_32LocalConvolutionWeightGradientOpENS2_17LogarithmBase10OpENS2_16LogarithmBase2OpENS2_11LogarithmOpENS2_8MatMulOpENS2_25MaterializeSparseTensorOpENS2_23MatrixDecompositionLUOpENS2_15MatrixInverseOpENS2_16MatrixSolverLUOpENS2_9MaximumOpENS2_9MinimumOpENS2_8ModuloOpENS2_10MultiplyOpENS2_7NReluOpENS2_6NandOpENS2_10NegativeOpENS2_23NonMaximumSuppressionOpENS2_9NonZeroOpENS2_5NorOpENS2_15NormalizationOpENS2_12NotEqualToOpENS2_5NotOpENS2_8OneHotOpENS2_4OrOpENS2_7PReluOpENS2_13PadGradientOpENS2_5PadOpENS2_9PermuteOpENS2_13PlaceholderOpENS2_17PoolAvgGradientOpENS2_9PoolAvgOpENS2_20PoolL2NormGradientOpENS2_12PoolL2NormOpENS2_17PoolMaxGradientOpENS2_9PoolMaxOpENS2_7PowerOpENS2_17PruningGradientOpENS2_9PruningOpENS2_10QuantizeOpENS2_14RandomNormalOpENS2_23RandomTruncatedNormalOpENS2_15RandomUniformOpENS2_6RankOpENS2_18ReadDataFromFileOpENS2_14ReadVariableOpENS2_10RealPartOpENS2_20RealToHermiteanFFTOpENS2_12ReciprocalOpENS2_22ReciprocalSquareRootOpENS2_14ReductionAndOpENS2_17ReductionArgMaxOpENS2_17ReductionArgMinOpENS2_20ReductionLogSumExpOpENS2_14ReductionMaxOpENS2_15ReductionMeanOpENS2_14ReductionMinOpENS2_13ReductionOrOpENS2_15ReductionProdOpENS2_14ReductionSumOpENS2_19ReductionVarianceOpENS2_17ReinterpretCastOpENS2_7Relu6OpENS2_10ReluGradOpENS2_6ReluOpENS2_9ReshapeOpENS2_16ResizeGradientOpENS2_8ResizeOpENS2_9ReverseOpENS2_6RintOpENS2_7RoundOpENS2_24SampleGridDataGradientOpENS2_12SampleGridOpENS2_18ScatterAlongAxisOpENS2_11ScatterNDOpENS2_9ScatterOpENS2_8SelectOpENS2_7ShapeOpENS2_17SigmoidGradientOpENS2_28SigmoidGradientWithSigmoidOpENS2_13SigmoidHardOpENS2_9SigmoidOpENS2_6SignOpENS2_9SignbitOpENS2_5SinOpENS2_23SingleGateRNNGradientOpENS2_15SingleGateRNNOpENS2_6SinhOpENS2_6SizeOpENS2_7SliceOpENS2_9SoftmaxOpENS2_10SoftplusOpENS2_20SoftplusParametricOpENS2_10SoftsignOpENS2_6SortOpENS2_14SpaceToBatchOpENS2_16SpaceToDepth2DOpENS2_7SplitOpENS2_8SquareOpENS2_12SquareRootOpENS2_9SqueezeOpENS2_9StencilOpENS2_22StridedSliceGradientOpENS2_14StridedSliceOpENS2_20StridedSliceUpdateOpENS2_10SubtractOpENS2_7SwishOpENS2_5TanOpENS2_6TanhOpENS2_14TileGradientOpENS2_6TileOpENS2_14TopKGradientOpENS2_6TopKOpENS2_11TransposeOpENS2_10TruncateOpENS2_16TypeConstraintOpENS2_16UnrealizedFoldOpENS2_19UpdateRandomStateOpENS2_20VariableFromTensorOpENS2_6XnorOpENS2_5XorOpEEEEvv(uint64_t a1)
{
  uint64_t v2 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ACosOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v3 = (uint64_t)v434;
  v434 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ACoshOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v5 = (uint64_t)v434;
  v434 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ASinOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v7 = (uint64_t)v434;
  v434 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ASinhOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v9 = (uint64_t)v434;
  v434 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ATan2Op>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v11 = (uint64_t)v434;
  v434 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ATanOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v13 = (uint64_t)v434;
  v434 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ATanhOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v15 = (uint64_t)v434;
  v434 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v17 = (uint64_t)v434;
  v434 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::AbsoluteSquareOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v19 = (uint64_t)v434;
  v434 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::AddOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v21 = (uint64_t)v434;
  v434 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::AndOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v23 = (uint64_t)v434;
  v434 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  mlir::RegisteredOperationName::insert<mlir::mps::AssignVariableOp>(a1);
  BOOL v24 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BandPartOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v25 = (uint64_t)v434;
  v434 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BatchToSpaceOp>::Model(v26, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::BatchToSpaceOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v27 = (uint64_t)v434;
  v434 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BiasAddGradOp>::Model(v28, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::BiasAddGradOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v29 = (uint64_t)v434;
  v434 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BiasAddOp>::Model(v30, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::BiasAddOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v31 = (uint64_t)v434;
  v434 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  char v32 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseAndOp>::Model(v32, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v33 = (uint64_t)v434;
  v434 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  unsigned int v34 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseLeftShiftOp>::Model(v34, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v35 = (uint64_t)v434;
  v434 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseNotOp>::Model(v36, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v37 = (uint64_t)v434;
  v434 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseOrOp>::Model(v38, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v39 = (uint64_t)v434;
  v434 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BitwisePopcountOp>::Model(v40, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v41 = (uint64_t)v434;
  v434 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseRightShiftOp>::Model(v42, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v43 = (uint64_t)v434;
  v434 = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  unint64_t v44 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BitwiseXorOp>::Model(v44, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v45 = (uint64_t)v434;
  v434 = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  unint64_t v46 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BroadcastGradientArgsOp>::Model(v46, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v47 = (uint64_t)v434;
  v434 = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  unint64_t v48 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::BroadcastToOp>::Model(v48, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v49 = (uint64_t)v434;
  v434 = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  mlir::RegisteredOperationName::insert<mlir::mps::CallOp>(a1);
  v50 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CastOp>::Model(v50, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::CastOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v51 = (uint64_t)v434;
  v434 = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CeilOp>::Model(v52, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v53 = (uint64_t)v434;
  v434 = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  v54 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ClampOp>::Model(v54, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v55 = (uint64_t)v434;
  v434 = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ColToImOp>::Model(v56, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ColToImOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v57 = (uint64_t)v434;
  v434 = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  uint64_t v58 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ConcatOp>::Model(v58, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ConcatOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v59 = (uint64_t)v434;
  v434 = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ConjugateOp>::Model(v60, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v61 = (uint64_t)v434;
  v434 = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  mlir::RegisteredOperationName::insert<mlir::mps::ConstantOp>(a1);
  v62 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::Conv2DDataGradientOp>::Model(v62, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::Conv2DDataGradientOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v63 = (uint64_t)v434;
  v434 = 0;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  v64 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::Conv2DOp>::Model(v64, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::Conv2DOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v65 = (uint64_t)v434;
  v434 = 0;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  uint64_t v66 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::Conv2DWeightsGradientOp>::Model(v66, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::Conv2DWeightsGradientOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v67 = (uint64_t)v434;
  v434 = 0;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  }
  uint64_t v68 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::Conv3DDataGradientOp>::Model(v68, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::Conv3DDataGradientOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v69 = (uint64_t)v434;
  v434 = 0;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  v70 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::Conv3DOp>::Model(v70, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::Conv3DOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v71 = (uint64_t)v434;
  v434 = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  v72 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::Conv3DWeightsGradientOp>::Model(v72, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::Conv3DWeightsGradientOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v73 = (uint64_t)v434;
  v434 = 0;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  }
  v74 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CosOp>::Model(v74, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v75 = (uint64_t)v434;
  v434 = 0;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  v76 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CoshOp>::Model(v76, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v77 = (uint64_t)v434;
  v434 = 0;
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
  }
  v78 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CostVolumeOp>::Model(v78, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::CostVolumeOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v79 = (uint64_t)v434;
  v434 = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  }
  v80 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CreateComplexOp>::Model(v80, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v81 = (uint64_t)v434;
  v434 = 0;
  if (v81) {
    (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
  }
  v82 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CreateTextureTensorOp>::Model(v82, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::CreateTextureTensorOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v83 = (uint64_t)v434;
  v434 = 0;
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  v84 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CropOp>::Model(v84, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v85 = (uint64_t)v434;
  v434 = 0;
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
  }
  v86 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CropResizeOp>::Model(v86, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::CropResizeOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v87 = (uint64_t)v434;
  v434 = 0;
  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
  }
  v88 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CumulativeMaximumOp>::Model(v88, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::CumulativeMaximumOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v89 = (uint64_t)v434;
  v434 = 0;
  if (v89) {
    (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
  }
  v90 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CumulativeMinimumOp>::Model(v90, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::CumulativeMinimumOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v91 = (uint64_t)v434;
  v434 = 0;
  if (v91) {
    (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
  }
  v92 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CumulativeProductOp>::Model(v92, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::CumulativeProductOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v93 = (uint64_t)v434;
  v434 = 0;
  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
  }
  v94 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::CumulativeSumOp>::Model(v94, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::CumulativeSumOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v95 = (uint64_t)v434;
  v434 = 0;
  if (v95) {
    (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
  }
  v96 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DegammaOp>::Model(v96, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v97 = (uint64_t)v434;
  v434 = 0;
  if (v97) {
    (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
  }
  v98 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DepthToSpace2DOp>::Model(v98, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DepthToSpace2DOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v99 = (uint64_t)v434;
  v434 = 0;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
  }
  v100 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv2DDataGradientOp>::Model(v100, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DepthwiseConv2DDataGradientOp::getAttributeNames(void)::attrNames, 6);
  uint64_t v101 = (uint64_t)v434;
  v434 = 0;
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
  }
  v102 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv2DOp>::Model(v102, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DepthwiseConv2DOp::getAttributeNames(void)::attrNames, 6);
  uint64_t v103 = (uint64_t)v434;
  v434 = 0;
  if (v103) {
    (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
  }
  v104 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv2DWeightsGradientOp>::Model(v104, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DepthwiseConv2DWeightsGradientOp::getAttributeNames(void)::attrNames, 6);
  uint64_t v105 = (uint64_t)v434;
  v434 = 0;
  if (v105) {
    (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
  }
  v106 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv3DDataGradientOp>::Model(v106, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DepthwiseConv3DDataGradientOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v107 = (uint64_t)v434;
  v434 = 0;
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
  }
  v108 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv3DOp>::Model(v108, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DepthwiseConv3DOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v109 = (uint64_t)v434;
  v434 = 0;
  if (v109) {
    (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
  }
  v110 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DepthwiseConv3DWeightsGradientOp>::Model(v110, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DepthwiseConv3DWeightsGradientOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v111 = (uint64_t)v434;
  v434 = 0;
  if (v111) {
    (*(void (**)(uint64_t))(*(void *)v111 + 8))(v111);
  }
  v112 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DequantizeLUTOp>::Model(v112, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DequantizeLUTOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v113 = (uint64_t)v434;
  v434 = 0;
  if (v113) {
    (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
  }
  v114 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DequantizeOp>::Model(v114, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DequantizeOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v115 = (uint64_t)v434;
  v434 = 0;
  if (v115) {
    (*(void (**)(uint64_t))(*(void *)v115 + 8))(v115);
  }
  v116 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DimensionSizeOp>::Model(v116, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v117 = (uint64_t)v434;
  v434 = 0;
  if (v117) {
    (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
  }
  v118 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DiracOp>::Model(v118, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v119 = (uint64_t)v434;
  v434 = 0;
  if (v119) {
    (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
  }
  v120 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DivideOp>::Model(v120, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v121 = (uint64_t)v434;
  v434 = 0;
  if (v121) {
    (*(void (**)(uint64_t))(*(void *)v121 + 8))(v121);
  }
  v122 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::DynamicShapeCastOp>::Model(v122, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::DynamicShapeCastOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v123 = (uint64_t)v434;
  v434 = 0;
  if (v123) {
    (*(void (**)(uint64_t))(*(void *)v123 + 8))(v123);
  }
  v124 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::EluOp>::Model(v124, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v125 = (uint64_t)v434;
  v434 = 0;
  if (v125) {
    (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
  }
  v126 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::EqualToOp>::Model(v126, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v127 = (uint64_t)v434;
  v434 = 0;
  if (v127) {
    (*(void (**)(uint64_t))(*(void *)v127 + 8))(v127);
  }
  v128 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ErfOp>::Model(v128, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v129 = (uint64_t)v434;
  v434 = 0;
  if (v129) {
    (*(void (**)(uint64_t))(*(void *)v129 + 8))(v129);
  }
  v130 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ExpandDimsOp>::Model(v130, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v131 = (uint64_t)v434;
  v434 = 0;
  if (v131) {
    (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
  }
  v132 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ExponentBase10Op>::Model(v132, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v133 = (uint64_t)v434;
  v434 = 0;
  if (v133) {
    (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
  }
  v134 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ExponentBase2Op>::Model(v134, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v135 = (uint64_t)v434;
  v434 = 0;
  if (v135) {
    (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
  }
  v136 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ExponentOp>::Model(v136, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v137 = (uint64_t)v434;
  v434 = 0;
  if (v137) {
    (*(void (**)(uint64_t))(*(void *)v137 + 8))(v137);
  }
  v138 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::FastFourierTransformOp>::Model(v138, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::FastFourierTransformOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v139 = (uint64_t)v434;
  v434 = 0;
  if (v139) {
    (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
  }
  v140 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::Flatten2DOp>::Model(v140, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v141 = (uint64_t)v434;
  v434 = 0;
  if (v141) {
    (*(void (**)(uint64_t))(*(void *)v141 + 8))(v141);
  }
  v142 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::FloorDivideOp>::Model(v142, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v143 = (uint64_t)v434;
  v434 = 0;
  if (v143) {
    (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
  }
  v144 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::FloorOp>::Model(v144, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v145 = (uint64_t)v434;
  v434 = 0;
  if (v145) {
    (*(void (**)(uint64_t))(*(void *)v145 + 8))(v145);
  }
  v146 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GRUGradientOp>::Model(v146, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::GRUGradientOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v147 = (uint64_t)v434;
  v434 = 0;
  if (v147) {
    (*(void (**)(uint64_t))(*(void *)v147 + 8))(v147);
  }
  v148 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GRUOp>::Model(v148, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::GRUOp::getAttributeNames(void)::attrNames, 8);
  uint64_t v149 = (uint64_t)v434;
  v434 = 0;
  if (v149) {
    (*(void (**)(uint64_t))(*(void *)v149 + 8))(v149);
  }
  v150 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GatherAlongAxisOp>::Model(v150, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::GatherAlongAxisOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v151 = (uint64_t)v434;
  v434 = 0;
  if (v151) {
    (*(void (**)(uint64_t))(*(void *)v151 + 8))(v151);
  }
  v152 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GatherNDOp>::Model(v152, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::GatherNDOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v153 = (uint64_t)v434;
  v434 = 0;
  if (v153) {
    (*(void (**)(uint64_t))(*(void *)v153 + 8))(v153);
  }
  v154 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GatherOp>::Model(v154, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::GatherOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v155 = (uint64_t)v434;
  v434 = 0;
  if (v155) {
    (*(void (**)(uint64_t))(*(void *)v155 + 8))(v155);
  }
  v156 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GeluOp>::Model(v156, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v157 = (uint64_t)v434;
  v434 = 0;
  if (v157) {
    (*(void (**)(uint64_t))(*(void *)v157 + 8))(v157);
  }
  v158 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GetCoordOp>::Model(v158, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::GetCoordOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v159 = (uint64_t)v434;
  v434 = 0;
  if (v159) {
    (*(void (**)(uint64_t))(*(void *)v159 + 8))(v159);
  }
  v160 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GreaterThanOp>::Model(v160, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v161 = (uint64_t)v434;
  v434 = 0;
  if (v161) {
    (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
  }
  v162 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::GreaterThanOrEqualToOp>::Model(v162, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v163 = (uint64_t)v434;
  v434 = 0;
  if (v163) {
    (*(void (**)(uint64_t))(*(void *)v163 + 8))(v163);
  }
  v164 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::HammingDistanceOp>::Model(v164, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::HammingDistanceOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v165 = (uint64_t)v434;
  v434 = 0;
  if (v165) {
    (*(void (**)(uint64_t))(*(void *)v165 + 8))(v165);
  }
  v166 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::HermiteanToRealFFTOp>::Model(v166, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::HermiteanToRealFFTOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v167 = (uint64_t)v434;
  v434 = 0;
  if (v167) {
    (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
  }
  v168 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::IdentityOp>::Model(v168, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v169 = (uint64_t)v434;
  v434 = 0;
  if (v169) {
    (*(void (**)(uint64_t))(*(void *)v169 + 8))(v169);
  }
  v170 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ImToColOp>::Model(v170, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ImToColOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v171 = (uint64_t)v434;
  v434 = 0;
  if (v171) {
    (*(void (**)(uint64_t))(*(void *)v171 + 8))(v171);
  }
  v172 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ImaginaryPartOp>::Model(v172, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v173 = (uint64_t)v434;
  v434 = 0;
  if (v173) {
    (*(void (**)(uint64_t))(*(void *)v173 + 8))(v173);
  }
  v174 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::InitRandomPhiloxStateOp>::Model(v174, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v175 = (uint64_t)v434;
  v434 = 0;
  if (v175) {
    (*(void (**)(uint64_t))(*(void *)v175 + 8))(v175);
  }
  v176 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::InstanceNormOp>::Model(v176, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::InstanceNormOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v177 = (uint64_t)v434;
  v434 = 0;
  if (v177) {
    (*(void (**)(uint64_t))(*(void *)v177 + 8))(v177);
  }
  v178 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::IsFiniteOp>::Model(v178, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v179 = (uint64_t)v434;
  v434 = 0;
  if (v179) {
    (*(void (**)(uint64_t))(*(void *)v179 + 8))(v179);
  }
  v180 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::IsInfiniteOp>::Model(v180, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v181 = (uint64_t)v434;
  v434 = 0;
  if (v181) {
    (*(void (**)(uint64_t))(*(void *)v181 + 8))(v181);
  }
  v182 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::IsNaNOp>::Model(v182, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v183 = (uint64_t)v434;
  v434 = 0;
  if (v183) {
    (*(void (**)(uint64_t))(*(void *)v183 + 8))(v183);
  }
  v184 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LPNormOp>::Model(v184, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v185 = (uint64_t)v434;
  v434 = 0;
  if (v185) {
    (*(void (**)(uint64_t))(*(void *)v185 + 8))(v185);
  }
  v186 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LSTMGradientOp>::Model(v186, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::LSTMGradientOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v187 = (uint64_t)v434;
  v434 = 0;
  if (v187) {
    (*(void (**)(uint64_t))(*(void *)v187 + 8))(v187);
  }
  v188 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LSTMOp>::Model(v188, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::LSTMOp::getAttributeNames(void)::attrNames, 8);
  uint64_t v189 = (uint64_t)v434;
  v434 = 0;
  if (v189) {
    (*(void (**)(uint64_t))(*(void *)v189 + 8))(v189);
  }
  v190 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LeakyReluOp>::Model(v190, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v191 = (uint64_t)v434;
  v434 = 0;
  if (v191) {
    (*(void (**)(uint64_t))(*(void *)v191 + 8))(v191);
  }
  v192 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LessThanOp>::Model(v192, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v193 = (uint64_t)v434;
  v434 = 0;
  if (v193) {
    (*(void (**)(uint64_t))(*(void *)v193 + 8))(v193);
  }
  v194 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LessThanOrEqualToOp>::Model(v194, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v195 = (uint64_t)v434;
  v434 = 0;
  if (v195) {
    (*(void (**)(uint64_t))(*(void *)v195 + 8))(v195);
  }
  v196 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LocalConvolutionDataGradientOp>::Model(v196, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::LocalConvolutionDataGradientOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v197 = (uint64_t)v434;
  v434 = 0;
  if (v197) {
    (*(void (**)(uint64_t))(*(void *)v197 + 8))(v197);
  }
  v198 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LocalConvolutionOp>::Model(v198, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::LocalConvolutionOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v199 = (uint64_t)v434;
  v434 = 0;
  if (v199) {
    (*(void (**)(uint64_t))(*(void *)v199 + 8))(v199);
  }
  v200 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LocalConvolutionWeightGradientOp>::Model(v200, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::LocalConvolutionWeightGradientOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v201 = (uint64_t)v434;
  v434 = 0;
  if (v201) {
    (*(void (**)(uint64_t))(*(void *)v201 + 8))(v201);
  }
  v202 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LogarithmBase10Op>::Model(v202, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v203 = (uint64_t)v434;
  v434 = 0;
  if (v203) {
    (*(void (**)(uint64_t))(*(void *)v203 + 8))(v203);
  }
  v204 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LogarithmBase2Op>::Model(v204, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v205 = (uint64_t)v434;
  v434 = 0;
  if (v205) {
    (*(void (**)(uint64_t))(*(void *)v205 + 8))(v205);
  }
  v206 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::LogarithmOp>::Model(v206, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v207 = (uint64_t)v434;
  v434 = 0;
  if (v207) {
    (*(void (**)(uint64_t))(*(void *)v207 + 8))(v207);
  }
  v208 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::MatMulOp>::Model(v208, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::MatMulOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v209 = (uint64_t)v434;
  v434 = 0;
  if (v209) {
    (*(void (**)(uint64_t))(*(void *)v209 + 8))(v209);
  }
  mlir::RegisteredOperationName::insert<mlir::mps::MaterializeSparseTensorOp>(a1);
  v210 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::MatrixDecompositionLUOp>::Model(v210, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v211 = (uint64_t)v434;
  v434 = 0;
  if (v211) {
    (*(void (**)(uint64_t))(*(void *)v211 + 8))(v211);
  }
  v212 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::MatrixInverseOp>::Model(v212, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v213 = (uint64_t)v434;
  v434 = 0;
  if (v213) {
    (*(void (**)(uint64_t))(*(void *)v213 + 8))(v213);
  }
  v214 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::MatrixSolverLUOp>::Model(v214, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v215 = (uint64_t)v434;
  v434 = 0;
  if (v215) {
    (*(void (**)(uint64_t))(*(void *)v215 + 8))(v215);
  }
  v216 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::MaximumOp>::Model(v216, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v217 = (uint64_t)v434;
  v434 = 0;
  if (v217) {
    (*(void (**)(uint64_t))(*(void *)v217 + 8))(v217);
  }
  v218 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::MinimumOp>::Model(v218, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v219 = (uint64_t)v434;
  v434 = 0;
  if (v219) {
    (*(void (**)(uint64_t))(*(void *)v219 + 8))(v219);
  }
  v220 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ModuloOp>::Model(v220, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v221 = (uint64_t)v434;
  v434 = 0;
  if (v221) {
    (*(void (**)(uint64_t))(*(void *)v221 + 8))(v221);
  }
  v222 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::MultiplyOp>::Model(v222, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v223 = (uint64_t)v434;
  v434 = 0;
  if (v223) {
    (*(void (**)(uint64_t))(*(void *)v223 + 8))(v223);
  }
  v224 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NReluOp>::Model(v224, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v225 = (uint64_t)v434;
  v434 = 0;
  if (v225) {
    (*(void (**)(uint64_t))(*(void *)v225 + 8))(v225);
  }
  v226 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NandOp>::Model(v226, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v227 = (uint64_t)v434;
  v434 = 0;
  if (v227) {
    (*(void (**)(uint64_t))(*(void *)v227 + 8))(v227);
  }
  v228 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NegativeOp>::Model(v228, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v229 = (uint64_t)v434;
  v434 = 0;
  if (v229) {
    (*(void (**)(uint64_t))(*(void *)v229 + 8))(v229);
  }
  v230 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NonMaximumSuppressionOp>::Model(v230, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::NonMaximumSuppressionOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v231 = (uint64_t)v434;
  v434 = 0;
  if (v231) {
    (*(void (**)(uint64_t))(*(void *)v231 + 8))(v231);
  }
  v232 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NonZeroOp>::Model(v232, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v233 = (uint64_t)v434;
  v434 = 0;
  if (v233) {
    (*(void (**)(uint64_t))(*(void *)v233 + 8))(v233);
  }
  v234 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NorOp>::Model(v234, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v235 = (uint64_t)v434;
  v434 = 0;
  if (v235) {
    (*(void (**)(uint64_t))(*(void *)v235 + 8))(v235);
  }
  v236 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NormalizationOp>::Model(v236, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::NormalizationOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v237 = (uint64_t)v434;
  v434 = 0;
  if (v237) {
    (*(void (**)(uint64_t))(*(void *)v237 + 8))(v237);
  }
  v238 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NotEqualToOp>::Model(v238, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v239 = (uint64_t)v434;
  v434 = 0;
  if (v239) {
    (*(void (**)(uint64_t))(*(void *)v239 + 8))(v239);
  }
  v240 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::NotOp>::Model(v240, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v241 = (uint64_t)v434;
  v434 = 0;
  if (v241) {
    (*(void (**)(uint64_t))(*(void *)v241 + 8))(v241);
  }
  v242 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::OneHotOp>::Model(v242, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::OneHotOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v243 = (uint64_t)v434;
  v434 = 0;
  if (v243) {
    (*(void (**)(uint64_t))(*(void *)v243 + 8))(v243);
  }
  v244 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::OrOp>::Model(v244, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v245 = (uint64_t)v434;
  v434 = 0;
  if (v245) {
    (*(void (**)(uint64_t))(*(void *)v245 + 8))(v245);
  }
  v246 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PReluOp>::Model(v246, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v247 = (uint64_t)v434;
  v434 = 0;
  if (v247) {
    (*(void (**)(uint64_t))(*(void *)v247 + 8))(v247);
  }
  v248 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PadGradientOp>::Model(v248, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PadGradientOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v249 = (uint64_t)v434;
  v434 = 0;
  if (v249) {
    (*(void (**)(uint64_t))(*(void *)v249 + 8))(v249);
  }
  v250 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PadOp>::Model(v250, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PadOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v251 = (uint64_t)v434;
  v434 = 0;
  if (v251) {
    (*(void (**)(uint64_t))(*(void *)v251 + 8))(v251);
  }
  v252 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PermuteOp>::Model(v252, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v253 = (uint64_t)v434;
  v434 = 0;
  if (v253) {
    (*(void (**)(uint64_t))(*(void *)v253 + 8))(v253);
  }
  mlir::RegisteredOperationName::insert<mlir::mps::PlaceholderOp>(a1);
  v254 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PoolAvgGradientOp>::Model(v254, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PoolAvgGradientOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v255 = (uint64_t)v434;
  v434 = 0;
  if (v255) {
    (*(void (**)(uint64_t))(*(void *)v255 + 8))(v255);
  }
  v256 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PoolAvgOp>::Model(v256, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PoolAvgOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v257 = (uint64_t)v434;
  v434 = 0;
  if (v257) {
    (*(void (**)(uint64_t))(*(void *)v257 + 8))(v257);
  }
  v258 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PoolL2NormGradientOp>::Model(v258, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PoolL2NormGradientOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v259 = (uint64_t)v434;
  v434 = 0;
  if (v259) {
    (*(void (**)(uint64_t))(*(void *)v259 + 8))(v259);
  }
  v260 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PoolL2NormOp>::Model(v260, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PoolL2NormOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v261 = (uint64_t)v434;
  v434 = 0;
  if (v261) {
    (*(void (**)(uint64_t))(*(void *)v261 + 8))(v261);
  }
  v262 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PoolMaxGradientOp>::Model(v262, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PoolMaxGradientOp::getAttributeNames(void)::attrNames, 10);
  uint64_t v263 = (uint64_t)v434;
  v434 = 0;
  if (v263) {
    (*(void (**)(uint64_t))(*(void *)v263 + 8))(v263);
  }
  v264 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PoolMaxOp>::Model(v264, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PoolMaxOp::getAttributeNames(void)::attrNames, 9);
  uint64_t v265 = (uint64_t)v434;
  v434 = 0;
  if (v265) {
    (*(void (**)(uint64_t))(*(void *)v265 + 8))(v265);
  }
  v266 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PowerOp>::Model(v266, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v267 = (uint64_t)v434;
  v434 = 0;
  if (v267) {
    (*(void (**)(uint64_t))(*(void *)v267 + 8))(v267);
  }
  v268 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PruningGradientOp>::Model(v268, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PruningGradientOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v269 = (uint64_t)v434;
  v434 = 0;
  if (v269) {
    (*(void (**)(uint64_t))(*(void *)v269 + 8))(v269);
  }
  v270 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::PruningOp>::Model(v270, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::PruningOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v271 = (uint64_t)v434;
  v434 = 0;
  if (v271) {
    (*(void (**)(uint64_t))(*(void *)v271 + 8))(v271);
  }
  v272 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::QuantizeOp>::Model(v272, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::QuantizeOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v273 = (uint64_t)v434;
  v434 = 0;
  if (v273) {
    (*(void (**)(uint64_t))(*(void *)v273 + 8))(v273);
  }
  v274 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::RandomNormalOp>::Model(v274, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::RandomNormalOp::getAttributeNames(void)::attrNames, 4);
  uint64_t v275 = (uint64_t)v434;
  v434 = 0;
  if (v275) {
    (*(void (**)(uint64_t))(*(void *)v275 + 8))(v275);
  }
  v276 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::RandomTruncatedNormalOp>::Model(v276, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::RandomTruncatedNormalOp::getAttributeNames(void)::attrNames, 6);
  uint64_t v277 = (uint64_t)v434;
  v434 = 0;
  if (v277) {
    (*(void (**)(uint64_t))(*(void *)v277 + 8))(v277);
  }
  v278 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::RandomUniformOp>::Model(v278, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::RandomUniformOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v279 = (uint64_t)v434;
  v434 = 0;
  if (v279) {
    (*(void (**)(uint64_t))(*(void *)v279 + 8))(v279);
  }
  v280 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::RankOp>::Model(v280, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v281 = (uint64_t)v434;
  v434 = 0;
  if (v281) {
    (*(void (**)(uint64_t))(*(void *)v281 + 8))(v281);
  }
  v282 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReadDataFromFileOp>::Model(v282, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReadDataFromFileOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v283 = (uint64_t)v434;
  v434 = 0;
  if (v283) {
    (*(void (**)(uint64_t))(*(void *)v283 + 8))(v283);
  }
  v284 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReadVariableOp>::Model(v284, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v285 = (uint64_t)v434;
  v434 = 0;
  if (v285) {
    (*(void (**)(uint64_t))(*(void *)v285 + 8))(v285);
  }
  v286 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::RealPartOp>::Model(v286, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v287 = (uint64_t)v434;
  v434 = 0;
  if (v287) {
    (*(void (**)(uint64_t))(*(void *)v287 + 8))(v287);
  }
  v288 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::RealToHermiteanFFTOp>::Model(v288, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::RealToHermiteanFFTOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v289 = (uint64_t)v434;
  v434 = 0;
  if (v289) {
    (*(void (**)(uint64_t))(*(void *)v289 + 8))(v289);
  }
  v290 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReciprocalOp>::Model(v290, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v291 = (uint64_t)v434;
  v434 = 0;
  if (v291) {
    (*(void (**)(uint64_t))(*(void *)v291 + 8))(v291);
  }
  v292 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReciprocalSquareRootOp>::Model(v292, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v293 = (uint64_t)v434;
  v434 = 0;
  if (v293) {
    (*(void (**)(uint64_t))(*(void *)v293 + 8))(v293);
  }
  v294 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionAndOp>::Model(v294, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionAndOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v295 = (uint64_t)v434;
  v434 = 0;
  if (v295) {
    (*(void (**)(uint64_t))(*(void *)v295 + 8))(v295);
  }
  v296 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionArgMaxOp>::Model(v296, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionArgMaxOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v297 = (uint64_t)v434;
  v434 = 0;
  if (v297) {
    (*(void (**)(uint64_t))(*(void *)v297 + 8))(v297);
  }
  v298 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionArgMinOp>::Model(v298, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionArgMinOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v299 = (uint64_t)v434;
  v434 = 0;
  if (v299) {
    (*(void (**)(uint64_t))(*(void *)v299 + 8))(v299);
  }
  v300 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionLogSumExpOp>::Model(v300, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionLogSumExpOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v301 = (uint64_t)v434;
  v434 = 0;
  if (v301) {
    (*(void (**)(uint64_t))(*(void *)v301 + 8))(v301);
  }
  v302 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionMaxOp>::Model(v302, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionMaxOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v303 = (uint64_t)v434;
  v434 = 0;
  if (v303) {
    (*(void (**)(uint64_t))(*(void *)v303 + 8))(v303);
  }
  v304 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionMeanOp>::Model(v304, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionMeanOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v305 = (uint64_t)v434;
  v434 = 0;
  if (v305) {
    (*(void (**)(uint64_t))(*(void *)v305 + 8))(v305);
  }
  v306 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionMinOp>::Model(v306, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionMinOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v307 = (uint64_t)v434;
  v434 = 0;
  if (v307) {
    (*(void (**)(uint64_t))(*(void *)v307 + 8))(v307);
  }
  v308 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionOrOp>::Model(v308, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionOrOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v309 = (uint64_t)v434;
  v434 = 0;
  if (v309) {
    (*(void (**)(uint64_t))(*(void *)v309 + 8))(v309);
  }
  v310 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionProdOp>::Model(v310, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionProdOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v311 = (uint64_t)v434;
  v434 = 0;
  if (v311) {
    (*(void (**)(uint64_t))(*(void *)v311 + 8))(v311);
  }
  v312 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionSumOp>::Model(v312, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionSumOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v313 = (uint64_t)v434;
  v434 = 0;
  if (v313) {
    (*(void (**)(uint64_t))(*(void *)v313 + 8))(v313);
  }
  v314 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReductionVarianceOp>::Model(v314, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReductionVarianceOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v315 = (uint64_t)v434;
  v434 = 0;
  if (v315) {
    (*(void (**)(uint64_t))(*(void *)v315 + 8))(v315);
  }
  v316 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReinterpretCastOp>::Model(v316, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReinterpretCastOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v317 = (uint64_t)v434;
  v434 = 0;
  if (v317) {
    (*(void (**)(uint64_t))(*(void *)v317 + 8))(v317);
  }
  v318 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::Relu6Op>::Model(v318, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v319 = (uint64_t)v434;
  v434 = 0;
  if (v319) {
    (*(void (**)(uint64_t))(*(void *)v319 + 8))(v319);
  }
  v320 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReluGradOp>::Model(v320, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v321 = (uint64_t)v434;
  v434 = 0;
  if (v321) {
    (*(void (**)(uint64_t))(*(void *)v321 + 8))(v321);
  }
  v322 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReluOp>::Model(v322, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v323 = (uint64_t)v434;
  v434 = 0;
  if (v323) {
    (*(void (**)(uint64_t))(*(void *)v323 + 8))(v323);
  }
  v324 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReshapeOp>::Model(v324, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ReshapeOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v325 = (uint64_t)v434;
  v434 = 0;
  if (v325) {
    (*(void (**)(uint64_t))(*(void *)v325 + 8))(v325);
  }
  v326 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ResizeGradientOp>::Model(v326, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ResizeGradientOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v327 = (uint64_t)v434;
  v434 = 0;
  if (v327) {
    (*(void (**)(uint64_t))(*(void *)v327 + 8))(v327);
  }
  v328 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ResizeOp>::Model(v328, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ResizeOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v329 = (uint64_t)v434;
  v434 = 0;
  if (v329) {
    (*(void (**)(uint64_t))(*(void *)v329 + 8))(v329);
  }
  v330 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ReverseOp>::Model(v330, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v331 = (uint64_t)v434;
  v434 = 0;
  if (v331) {
    (*(void (**)(uint64_t))(*(void *)v331 + 8))(v331);
  }
  v332 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::RintOp>::Model(v332, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v333 = (uint64_t)v434;
  v434 = 0;
  if (v333) {
    (*(void (**)(uint64_t))(*(void *)v333 + 8))(v333);
  }
  v334 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::RoundOp>::Model(v334, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v335 = (uint64_t)v434;
  v434 = 0;
  if (v335) {
    (*(void (**)(uint64_t))(*(void *)v335 + 8))(v335);
  }
  v336 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SampleGridDataGradientOp>::Model(v336, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::SampleGridDataGradientOp::getAttributeNames(void)::attrNames, 4);
  uint64_t v337 = (uint64_t)v434;
  v434 = 0;
  if (v337) {
    (*(void (**)(uint64_t))(*(void *)v337 + 8))(v337);
  }
  v338 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SampleGridOp>::Model(v338, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::SampleGridOp::getAttributeNames(void)::attrNames, 7);
  uint64_t v339 = (uint64_t)v434;
  v434 = 0;
  if (v339) {
    (*(void (**)(uint64_t))(*(void *)v339 + 8))(v339);
  }
  v340 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ScatterAlongAxisOp>::Model(v340, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ScatterAlongAxisOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v341 = (uint64_t)v434;
  v434 = 0;
  if (v341) {
    (*(void (**)(uint64_t))(*(void *)v341 + 8))(v341);
  }
  v342 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ScatterNDOp>::Model(v342, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ScatterNDOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v343 = (uint64_t)v434;
  v434 = 0;
  if (v343) {
    (*(void (**)(uint64_t))(*(void *)v343 + 8))(v343);
  }
  v344 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ScatterOp>::Model(v344, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::ScatterOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v345 = (uint64_t)v434;
  v434 = 0;
  if (v345) {
    (*(void (**)(uint64_t))(*(void *)v345 + 8))(v345);
  }
  v346 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SelectOp>::Model(v346, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v347 = (uint64_t)v434;
  v434 = 0;
  if (v347) {
    (*(void (**)(uint64_t))(*(void *)v347 + 8))(v347);
  }
  v348 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::ShapeOp>::Model(v348, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v349 = (uint64_t)v434;
  v434 = 0;
  if (v349) {
    (*(void (**)(uint64_t))(*(void *)v349 + 8))(v349);
  }
  v350 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SigmoidGradientOp>::Model(v350, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v351 = (uint64_t)v434;
  v434 = 0;
  if (v351) {
    (*(void (**)(uint64_t))(*(void *)v351 + 8))(v351);
  }
  v352 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SigmoidGradientWithSigmoidOp>::Model(v352, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v353 = (uint64_t)v434;
  v434 = 0;
  if (v353) {
    (*(void (**)(uint64_t))(*(void *)v353 + 8))(v353);
  }
  v354 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SigmoidHardOp>::Model(v354, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v355 = (uint64_t)v434;
  v434 = 0;
  if (v355) {
    (*(void (**)(uint64_t))(*(void *)v355 + 8))(v355);
  }
  v356 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SigmoidOp>::Model(v356, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v357 = (uint64_t)v434;
  v434 = 0;
  if (v357) {
    (*(void (**)(uint64_t))(*(void *)v357 + 8))(v357);
  }
  v358 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SignOp>::Model(v358, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v359 = (uint64_t)v434;
  v434 = 0;
  if (v359) {
    (*(void (**)(uint64_t))(*(void *)v359 + 8))(v359);
  }
  v360 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SignbitOp>::Model(v360, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v361 = (uint64_t)v434;
  v434 = 0;
  if (v361) {
    (*(void (**)(uint64_t))(*(void *)v361 + 8))(v361);
  }
  v362 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SinOp>::Model(v362, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v363 = (uint64_t)v434;
  v434 = 0;
  if (v363) {
    (*(void (**)(uint64_t))(*(void *)v363 + 8))(v363);
  }
  v364 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SingleGateRNNGradientOp>::Model(v364, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::SingleGateRNNGradientOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v365 = (uint64_t)v434;
  v434 = 0;
  if (v365) {
    (*(void (**)(uint64_t))(*(void *)v365 + 8))(v365);
  }
  v366 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SingleGateRNNOp>::Model(v366, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::SingleGateRNNOp::getAttributeNames(void)::attrNames, 3);
  uint64_t v367 = (uint64_t)v434;
  v434 = 0;
  if (v367) {
    (*(void (**)(uint64_t))(*(void *)v367 + 8))(v367);
  }
  v368 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SinhOp>::Model(v368, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v369 = (uint64_t)v434;
  v434 = 0;
  if (v369) {
    (*(void (**)(uint64_t))(*(void *)v369 + 8))(v369);
  }
  v370 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SizeOp>::Model(v370, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v371 = (uint64_t)v434;
  v434 = 0;
  if (v371) {
    (*(void (**)(uint64_t))(*(void *)v371 + 8))(v371);
  }
  v372 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SliceOp>::Model(v372, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v373 = (uint64_t)v434;
  v434 = 0;
  if (v373) {
    (*(void (**)(uint64_t))(*(void *)v373 + 8))(v373);
  }
  v374 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SoftmaxOp>::Model(v374, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v375 = (uint64_t)v434;
  v434 = 0;
  if (v375) {
    (*(void (**)(uint64_t))(*(void *)v375 + 8))(v375);
  }
  v376 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SoftplusOp>::Model(v376, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v377 = (uint64_t)v434;
  v434 = 0;
  if (v377) {
    (*(void (**)(uint64_t))(*(void *)v377 + 8))(v377);
  }
  v378 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SoftplusParametricOp>::Model(v378, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v379 = (uint64_t)v434;
  v434 = 0;
  if (v379) {
    (*(void (**)(uint64_t))(*(void *)v379 + 8))(v379);
  }
  v380 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SoftsignOp>::Model(v380, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v381 = (uint64_t)v434;
  v434 = 0;
  if (v381) {
    (*(void (**)(uint64_t))(*(void *)v381 + 8))(v381);
  }
  v382 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SortOp>::Model(v382, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::SortOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v383 = (uint64_t)v434;
  v434 = 0;
  if (v383) {
    (*(void (**)(uint64_t))(*(void *)v383 + 8))(v383);
  }
  v384 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SpaceToBatchOp>::Model(v384, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::SpaceToBatchOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v385 = (uint64_t)v434;
  v434 = 0;
  if (v385) {
    (*(void (**)(uint64_t))(*(void *)v385 + 8))(v385);
  }
  v386 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SpaceToDepth2DOp>::Model(v386, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::SpaceToDepth2DOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v387 = (uint64_t)v434;
  v434 = 0;
  if (v387) {
    (*(void (**)(uint64_t))(*(void *)v387 + 8))(v387);
  }
  v388 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SplitOp>::Model(v388, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::SplitOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v389 = (uint64_t)v434;
  v434 = 0;
  if (v389) {
    (*(void (**)(uint64_t))(*(void *)v389 + 8))(v389);
  }
  v390 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SquareOp>::Model(v390, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v391 = (uint64_t)v434;
  v434 = 0;
  if (v391) {
    (*(void (**)(uint64_t))(*(void *)v391 + 8))(v391);
  }
  v392 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SquareRootOp>::Model(v392, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v393 = (uint64_t)v434;
  v434 = 0;
  if (v393) {
    (*(void (**)(uint64_t))(*(void *)v393 + 8))(v393);
  }
  v394 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SqueezeOp>::Model(v394, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v395 = (uint64_t)v434;
  v434 = 0;
  if (v395) {
    (*(void (**)(uint64_t))(*(void *)v395 + 8))(v395);
  }
  v396 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::StencilOp>::Model(v396, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::StencilOp::getAttributeNames(void)::attrNames, 8);
  uint64_t v397 = (uint64_t)v434;
  v434 = 0;
  if (v397) {
    (*(void (**)(uint64_t))(*(void *)v397 + 8))(v397);
  }
  v398 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::StridedSliceGradientOp>::Model(v398, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::StridedSliceGradientOp::getAttributeNames(void)::attrNames, 4);
  uint64_t v399 = (uint64_t)v434;
  v434 = 0;
  if (v399) {
    (*(void (**)(uint64_t))(*(void *)v399 + 8))(v399);
  }
  v400 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::StridedSliceOp>::Model(v400, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::StridedSliceOp::getAttributeNames(void)::attrNames, 4);
  uint64_t v401 = (uint64_t)v434;
  v434 = 0;
  if (v401) {
    (*(void (**)(uint64_t))(*(void *)v401 + 8))(v401);
  }
  v402 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::StridedSliceUpdateOp>::Model(v402, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::StridedSliceUpdateOp::getAttributeNames(void)::attrNames, 4);
  uint64_t v403 = (uint64_t)v434;
  v434 = 0;
  if (v403) {
    (*(void (**)(uint64_t))(*(void *)v403 + 8))(v403);
  }
  v404 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SubtractOp>::Model(v404, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v405 = (uint64_t)v434;
  v434 = 0;
  if (v405) {
    (*(void (**)(uint64_t))(*(void *)v405 + 8))(v405);
  }
  v406 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::SwishOp>::Model(v406, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v407 = (uint64_t)v434;
  v434 = 0;
  if (v407) {
    (*(void (**)(uint64_t))(*(void *)v407 + 8))(v407);
  }
  v408 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TanOp>::Model(v408, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v409 = (uint64_t)v434;
  v434 = 0;
  if (v409) {
    (*(void (**)(uint64_t))(*(void *)v409 + 8))(v409);
  }
  v410 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TanhOp>::Model(v410, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v411 = (uint64_t)v434;
  v434 = 0;
  if (v411) {
    (*(void (**)(uint64_t))(*(void *)v411 + 8))(v411);
  }
  v412 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TileGradientOp>::Model(v412, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v413 = (uint64_t)v434;
  v434 = 0;
  if (v413) {
    (*(void (**)(uint64_t))(*(void *)v413 + 8))(v413);
  }
  v414 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TileOp>::Model(v414, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v415 = (uint64_t)v434;
  v434 = 0;
  if (v415) {
    (*(void (**)(uint64_t))(*(void *)v415 + 8))(v415);
  }
  v416 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TopKGradientOp>::Model(v416, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::TopKGradientOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v417 = (uint64_t)v434;
  v434 = 0;
  if (v417) {
    (*(void (**)(uint64_t))(*(void *)v417 + 8))(v417);
  }
  v418 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TopKOp>::Model(v418, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::TopKOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v419 = (uint64_t)v434;
  v434 = 0;
  if (v419) {
    (*(void (**)(uint64_t))(*(void *)v419 + 8))(v419);
  }
  v420 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TransposeOp>::Model(v420, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v421 = (uint64_t)v434;
  v434 = 0;
  if (v421) {
    (*(void (**)(uint64_t))(*(void *)v421 + 8))(v421);
  }
  v422 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TruncateOp>::Model(v422, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v423 = (uint64_t)v434;
  v434 = 0;
  if (v423) {
    (*(void (**)(uint64_t))(*(void *)v423 + 8))(v423);
  }
  v424 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::TypeConstraintOp>::Model(v424, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, (uint64_t)&mlir::mps::TypeConstraintOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v425 = (uint64_t)v434;
  v434 = 0;
  if (v425) {
    (*(void (**)(uint64_t))(*(void *)v425 + 8))(v425);
  }
  mlir::RegisteredOperationName::insert<mlir::mps::UnrealizedFoldOp>(a1);
  v426 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::UpdateRandomStateOp>::Model(v426, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v427 = (uint64_t)v434;
  v434 = 0;
  if (v427) {
    (*(void (**)(uint64_t))(*(void *)v427 + 8))(v427);
  }
  v428 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::VariableFromTensorOp>::Model(v428, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v429 = (uint64_t)v434;
  v434 = 0;
  if (v429) {
    (*(void (**)(uint64_t))(*(void *)v429 + 8))(v429);
  }
  v430 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::XnorOp>::Model(v430, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t v431 = (uint64_t)v434;
  v434 = 0;
  if (v431) {
    (*(void (**)(uint64_t))(*(void *)v431 + 8))(v431);
  }
  v432 = operator new(0x70uLL);
  v434 = mlir::RegisteredOperationName::Model<mlir::mps::XorOp>::Model(v432, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v434, 0, 0);
  uint64_t result = (uint64_t)v434;
  v434 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::Dialect::addOperations<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::ForOp,mlir::mps::serialization::IfOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp,mlir::mps::serialization::FuncOp,mlir::mps::serialization::ModuleOp,mlir::mps::serialization::ReturnOp,mlir::mps::serialization::WhileOp,mlir::mps::serialization::YieldOp>(uint64_t a1)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::ConditionOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  uint64_t v3 = (uint64_t)v16;
  uint64_t v16 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  mlir::RegisteredOperationName::insert<mlir::mps::serialization::ForOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mps::serialization::IfOp>(a1);
  uint64_t v4 = operator new(0x70uLL);
  uint64_t v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::ExtractOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  uint64_t v5 = (uint64_t)v16;
  uint64_t v16 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = operator new(0x70uLL);
  uint64_t v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::FromElementsOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  uint64_t v7 = (uint64_t)v16;
  uint64_t v16 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = operator new(0x70uLL);
  uint64_t v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::FuncOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, (uint64_t)&mlir::mps::serialization::FuncOp::getAttributeNames(void)::attrNames, 5);
  uint64_t v9 = (uint64_t)v16;
  uint64_t v16 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = operator new(0x70uLL);
  uint64_t v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::ModuleOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, (uint64_t)&mlir::mps::serialization::ModuleOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v11 = (uint64_t)v16;
  uint64_t v16 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = operator new(0x70uLL);
  uint64_t v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::ReturnOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  uint64_t v13 = (uint64_t)v16;
  uint64_t v16 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  mlir::RegisteredOperationName::insert<mlir::mps::serialization::WhileOp>(a1);
  uint64_t v14 = operator new(0x70uLL);
  uint64_t v16 = mlir::RegisteredOperationName::Model<mlir::mps::serialization::YieldOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v16, 0, 0);
  uint64_t result = (uint64_t)v16;
  uint64_t v16 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t *mlir::Dialect::addAttributes<mlir::mps::TensorDataLayoutAttr,mlir::mps::ReductionModeAttr,mlir::mps::DeviceHintAttr,mlir::mps::ScatterModeAttr,mlir::mps::PaddingModeAttr,mlir::mps::SamplingModeAttr,mlir::mps::NearestRoundingModeAttr,mlir::mps::SparseTensorStorageAttr,mlir::mps::MetalPixelFormatAttr,mlir::mps::NormalSamplingMethodAttr,mlir::mps::PaddingStyleAttr,mlir::mps::PoolIndicesModeAttr,mlir::mps::RNNActivationAttr,mlir::mps::LSTMGateLayoutAttr,mlir::mps::GRUGateLayoutAttr,mlir::mps::StencilPaddingModeAttr,mlir::mps::CropResizeAlignmentModeAttr,mlir::mps::CropResizeCoordinateModeAttr,mlir::mps::PruningMetricAttr,mlir::mps::PruningStructureAttr,mlir::mps::SimilarityTypeAttr,mlir::mps::FFTScalingModeAttr,mlir::mps::MPSBufferTensorAttr,mlir::mps::CallInlineModeAttr>(uint64_t a1)
{
  mlir::Dialect::addAttribute<mlir::mps::TensorDataLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::ReductionModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::DeviceHintAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::ScatterModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PaddingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::SamplingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::NearestRoundingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::SparseTensorStorageAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::MetalPixelFormatAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::NormalSamplingMethodAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PaddingStyleAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PoolIndicesModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::RNNActivationAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::LSTMGateLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::GRUGateLayoutAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::StencilPaddingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::CropResizeAlignmentModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::CropResizeCoordinateModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PruningMetricAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::PruningStructureAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::SimilarityTypeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::FFTScalingModeAttr>(a1);
  mlir::Dialect::addAttribute<mlir::mps::MPSBufferTensorAttr>(a1);

  return mlir::Dialect::addAttribute<mlir::mps::CallInlineModeAttr>(a1);
}

uint64_t mlir::Dialect::addInterfaces<mlir::mps::MPSInlinerInterface,mlir::mps::MPSBytecodeDialectInterface>(mlir::Dialect *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v18 = v2;
    unint64_t v3 = 0x1E8EB8000;
    int v10 = v9;
    uint64_t v2 = v18;
    if (v10)
    {
      uint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      unint64_t v22 = 79;
      unint64_t v11 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v11) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = v22;
      }
      uint64_t v13 = &v21[v12];
      unint64_t v14 = v22 - v12;
      if (v22 - v12 >= 0x12) {
        uint64_t v15 = 18;
      }
      else {
        uint64_t v15 = v22 - v12;
      }
      unint64_t v16 = v14 - v15;
      if (v16 >= v16 - 1) {
        uint64_t v17 = v16 - 1;
      }
      else {
        uint64_t v17 = v16;
      }
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v13[v15], v17);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v18;
    }
  }
  uint64_t v4 = *(void *)(v3 + 3896);
  v2[1] = a1;
  v2[2] = v4;
  *uint64_t v2 = &unk_1EC9CA738;
  uint64_t v20 = v2;
  mlir::Dialect::addInterface((uint64_t)a1, (uint64_t *)&v20);
  uint64_t v5 = (mlir::mps::MPSBytecodeDialectInterface *)operator new(0x30uLL);
  mlir::mps::MPSBytecodeDialectInterface::MPSBytecodeDialectInterface(v5, a1);
  uint64_t v19 = v6;
  mlir::Dialect::addInterface((uint64_t)a1, &v19);
  uint64_t v7 = v19;
  uint64_t v19 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t result = (uint64_t)v20;
  uint64_t v20 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *mlir::Dialect::addInterface<mlir::mps::MPSOpAsmInterface,mlir::mps::MPSResourceBlobManagerInterface &>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x20uLL);
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    unint64_t v5 = 0x1E8EB8000;
    if (v9)
    {
      uint64_t v18 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmDialectInterface]";
      unint64_t v19 = 77;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v19;
      }
      unint64_t v12 = &v18[v11];
      unint64_t v13 = v19 - v11;
      if (v19 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v19 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmDialectInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      unint64_t v5 = 0x1E8EB8000;
    }
  }
  uint64_t v6 = *(void *)(v5 + 3872);
  v4[1] = a1;
  v4[2] = v6;
  *uint64_t v4 = &unk_1EC9CA6C8;
  v4[3] = a2;
  uint64_t v17 = v4;
  mlir::Dialect::addInterface(a1, (uint64_t *)&v17);
  uint64_t v7 = (uint64_t)v17;
  uint64_t v17 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return v4;
}

mlir::GenericProgramPoint *mlir::mps::MPSDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a4;
  if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a3 + 8))
  {
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*a3 + 8);
    unint64_t v10 = a3;
    uint64_t v11 = v8;
    if (a3) {
      return mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(a2, a5, &v12, &v10);
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  return 0;
}

uint64_t mlir::mps::createBlobHandle@<X0>(mlir::mps *this@<X0>, mlir::MLIRContext *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  Manager = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::mps::MPSResourceBlobManagerInterface::getManager(this, a2);
  mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(Manager, (uint64_t)a2, a3, (uint64_t)&v22);
  long long v15 = v22;
  uint64_t v16 = v23;
  unint64_t v19 = v26;
  if (v26 >= 8)
  {
    if ((v26 & 2) != 0 && (v26 & 4) != 0)
    {
      (*(void (**)(long long *, long long *))((v26 & 0xFFFFFFFFFFFFFFF8) + 8))(&v17, &v24);
    }
    else
    {
      long long v17 = v24;
      unint64_t v18 = v25;
    }
    unint64_t v26 = 0;
  }
  char v20 = v27;
  char v21 = 1;
  uint64_t result = mlir::mps::MPSResourceBlobManagerInterface::insert((uint64_t)Manager, (int8x16_t *)"tmp", (const unsigned __int8 *)3, (uint64_t)&v15, a4);
  if (v21 && v19 >= 8)
  {
    int v9 = (v19 & 2) != 0 ? &v17 : (long long *)v17;
    uint64_t result = (*(uint64_t (**)(long long *, void, void, uint64_t))(v19 & 0xFFFFFFFFFFFFFFF8))(v9, v15, *((void *)&v15 + 1), v16);
    char v10 = v19;
    if (v19 >= 8)
    {
      if ((v19 & 4) != 0)
      {
        if ((v19 & 2) != 0) {
          uint64_t v11 = &v17;
        }
        else {
          uint64_t v11 = (long long *)v17;
        }
        uint64_t result = (*(uint64_t (**)(long long *))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))(v11);
      }
      if ((v10 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v17, *((void **)&v17 + 1));
      }
    }
  }
  if (v26 >= 8)
  {
    uint64_t v12 = (v26 & 2) != 0 ? &v24 : (long long *)v24;
    uint64_t result = (*(uint64_t (**)(long long *, void, void, uint64_t))(v26 & 0xFFFFFFFFFFFFFFF8))(v12, v22, *((void *)&v22 + 1), v23);
    char v13 = v26;
    if (v26 >= 8)
    {
      if ((v26 & 4) != 0)
      {
        if ((v26 & 2) != 0) {
          uint64_t v14 = &v24;
        }
        else {
          uint64_t v14 = (long long *)v24;
        }
        uint64_t result = (*(uint64_t (**)(long long *))((v26 & 0xFFFFFFFFFFFFFFF8) + 16))(v14);
      }
      if ((v13 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v24, *((void **)&v24 + 1));
      }
    }
  }
  return result;
}

uint64_t mlir::mps::getBufferTensorAttr(void *a1)
{
  uint64_t v11 = a1;
  uint64_t Context = (mlir::mps *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t v2 = (uint64_t)v11;
  if (v11) {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  ElementsAttrStorageSize = (mlir::MLIRContext *)mlir::mps::getElementsAttrStorageSize(v2, v3);
  uint64_t RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v11);
  uint64_t TypeAlignmentSize = mlir::mps::getTypeAlignmentSize(RHS);
  mlir::mps::createBlobHandle(Context, ElementsAttrStorageSize, TypeAlignmentSize, (uint64_t *)&v9);
  long long v12 = v9;
  uint64_t v13 = v10;
  uint64_t v14 = 0;
  long long v15 = v11;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v16[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v16[1] = Context;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v16, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, (uint64_t *)&v15, &v12, &v14);
}

uint64_t mlir::mps::MPSBufferTensorAttr::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v10[1] = a1;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &v9, &v6, &v8);
}

uint64_t mlir::mps::getBufferTensorAttr(uint64_t a1, const void *a2, const void *a3)
{
  v8[6] = *MEMORY[0x1E4F143B8];
  v5[1] = a3;
  uint64_t v6 = a1;
  v5[0] = a2;
  mlir::mps::getBufferTensorAttrs((mlir::Attribute *)&v6, 1uLL, v5, 1, (uint64_t)&v7);
  uint64_t v3 = *(void *)v7;
  if (v7 != v8) {
    free(v7);
  }
  return v3;
}

void mlir::mps::getBufferTensorAttrs(mlir::Attribute *a1@<X0>, unint64_t a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v58[10] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v8 = a1;
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext(a1);
    uint64_t v56 = v58;
    uint64_t v57 = 0xA00000000;
    if (a2 <= 0xA)
    {
      uint64_t v53 = v55;
      uint64_t v54 = 0xA00000000;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, a2, 8);
      uint64_t v53 = v55;
      uint64_t v54 = 0xA00000000;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, a2, 16);
    }
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 8 * a2;
    long long v12 = v8;
    do
    {
      *(void *)&long long v48 = *(void *)v12;
      uint64_t RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v48);
      unint64_t TypeAlignmentSize = mlir::mps::getTypeAlignmentSize(RHS);
      unint64_t v16 = TypeAlignmentSize;
      if (v9 <= TypeAlignmentSize) {
        unint64_t v9 = TypeAlignmentSize;
      }
      uint64_t v17 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, v57 + 1, 8);
        uint64_t v17 = v57;
      }
      unint64_t v18 = ((unint64_t)v10 + v16 - 1) / v16 * v16;
      v56[v17] = v18;
      LODWORD(v57) = v57 + 1;
      uint64_t v19 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v54 + 1, 16);
        uint64_t v19 = v54;
      }
      char v20 = (mlir::MLIRContext **)((char *)v53 + 16 * v19);
      *char v20 = v10;
      v20[1] = (mlir::MLIRContext *)v18;
      LODWORD(v54) = v54 + 1;
      uint64_t v21 = v48;
      if ((void)v48) {
        uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v48 + 8);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v10 = (mlir::MLIRContext *)(mlir::mps::getElementsAttrStorageSize(v21, v13) + v18);
      long long v12 = (mlir::Attribute *)((char *)v12 + 8);
      v11 -= 8;
    }
    while (v11);
    mlir::mps::createBlobHandle(Context, v10, v9, (uint64_t *)&v48);
    *(void *)a5 = a5 + 16;
    *(void *)(a5 + 8) = 0x600000000;
    if (a2 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), a2, 8);
    }
    if (a4 && v57)
    {
      long long v22 = v56;
      uint64_t v23 = 8 * v57 - 8;
      uint64_t v24 = 16 * a4 - 16;
      uint64_t v25 = 8 * a2 - 8;
      do
      {
        uint64_t v26 = *(void *)v8;
        long long v46 = v48;
        uint64_t v47 = v49;
        uint64_t v50 = *v22;
        uint64_t v51 = v26;
        AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
        v52[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
        v52[1] = Context;
        uint64_t v28 = mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v52, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &v51, &v46, &v50);
        unint64_t v29 = *(unsigned int *)(a5 + 8);
        if (v29 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v29 + 1, 8);
          unint64_t v29 = *(unsigned int *)(a5 + 8);
        }
        *(void *)(*(void *)a5 + 8 * v29) = v28;
        unsigned int v30 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v30;
        uint64_t v31 = *(void **)(*(void *)a5 + 8 * v30 - 8);
        char v32 = (void *)v31[1];
        uint64_t v33 = *(void *)(v31[2] + 16);
        uint64_t v34 = v31[5];
        if (v32) {
          uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v32 + 8);
        }
        else {
          uint64_t v35 = 0;
        }
        size_t ElementsAttrStorageSize = mlir::mps::getElementsAttrStorageSize((uint64_t)v32, v35);
        uint64_t v37 = *a3;
        a3 += 2;
        memcpy((void *)(v33 + v34), v37, ElementsAttrStorageSize);
        if (!v25) {
          break;
        }
        if (!v24) {
          break;
        }
        uint64_t v8 = (mlir::Attribute *)((char *)v8 + 8);
        ++v22;
        uint64_t v38 = v23;
        v23 -= 8;
        v24 -= 16;
        v25 -= 8;
      }
      while (v38);
    }
    uint64_t v39 = (char *)v53;
    if (v54)
    {
      uint64_t v40 = v48;
      uint64_t v41 = (char *)v53 + 16 * v54;
      do
      {
        uint64_t v42 = *(void *)v39;
        uint64_t v43 = *((void *)v39 + 1);
        v39 += 16;
        memset((void *)(*(void *)(v40 + 16) + v42), 255, v43 - v42);
      }
      while (v39 != v41);
      uint64_t v39 = (char *)v53;
    }
    if (v39 != v55) {
      free(v39);
    }
    if (v56 != v58) {
      free(v56);
    }
  }
  else
  {
    *(void *)a5 = a5 + 16;
    *(void *)(a5 + 8) = 0x600000000;
  }
}

uint64_t mlir::mps::MPSBufferTensorAttr::get(mlir::MLIRContext *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = a2;
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
  v10[1] = a1;
  return mlir::StorageUniquer::get<mlir::mps::detail::MPSBufferTensorAttrStorage,mlir::RankedTensorType,mlir::mps::MPSDialectResourceBlobHandle,unsigned long long>(AttributeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir3mps6detail26MPSBufferTensorAttrStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer13getWithTypeIDINS2_19MPSBufferTensorAttrEJNS1_16RankedTensorTypeENS2_28MPSDialectResourceBlobHandleEyEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS5_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id, &v9, a3, &v8);
}

uint64_t mlir::mps::MPSBufferTensorAttr::getMutableRawData(mlir::mps::MPSBufferTensorAttr *this)
{
  uint64_t v1 = *(void **)(*(void *)this + 8);
  uint64_t v2 = *(void *)(*(void *)(*(void *)this + 16) + 16);
  uint64_t v3 = *(void *)(*(void *)this + 40);
  if (v1) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  mlir::mps::getElementsAttrStorageSize((uint64_t)v1, v4);
  return v2 + v3;
}

llvm::raw_ostream *mlir::mps::operator<<(llvm::raw_ostream *a1, unsigned int *a2)
{
  uint64_t v3 = llvm::raw_ostream::operator<<(a1, a2[2]);
  uint64_t v4 = (unsigned char *)*((void *)v3 + 4);
  if (*((unsigned char **)v3 + 3) == v4)
  {
    uint64_t v9 = llvm::raw_ostream::write(v3, ".", 1uLL);
    unint64_t v5 = llvm::raw_ostream::operator<<(v9, a2[3]);
    uint64_t v6 = (unsigned char *)*((void *)v5 + 4);
    if (*((unsigned char **)v5 + 3) != v6)
    {
LABEL_3:
      *uint64_t v6 = 46;
      ++*((void *)v5 + 4);
      unint64_t v7 = a2[4];
      return llvm::raw_ostream::operator<<(v5, v7);
    }
  }
  else
  {
    *uint64_t v4 = 46;
    ++*((void *)v3 + 4);
    unint64_t v5 = llvm::raw_ostream::operator<<(v3, a2[3]);
    uint64_t v6 = (unsigned char *)*((void *)v5 + 4);
    if (*((unsigned char **)v5 + 3) != v6) {
      goto LABEL_3;
    }
  }
  unint64_t v5 = llvm::raw_ostream::write(v5, ".", 1uLL);
  unint64_t v7 = a2[4];

  return llvm::raw_ostream::operator<<(v5, v7);
}

void mlir::mps::MPSDialect::convertUnregisteredOperation(mlir::OpBuilder *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  v37[0] = *(void *)(*(void *)(a3 + 48) + 8);
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v37);
  unint64_t v10 = v9;
  if (v9 >= 0x17) {
    size_t v11 = 23;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    if (memcmp(AttrData, "mps.reverse_square_root", v11) || v10 != 23) {
      goto LABEL_9;
    }
  }
  else if (v9 != 23)
  {
LABEL_9:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }
  int v13 = *(_DWORD *)(a2 + 8);
  if (v13 && (v13 != 1 || *(_DWORD *)(a2 + 12) >= 2u))
  {
    v35[0] = "incorrect version of the operation";
    __int16 v36 = 259;
    mlir::Operation::emitError((uint64_t *)a3, (uint64_t)v35, (uint64_t)v37);
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      uint64_t v17 = (void **)__p;
      if (__p)
      {
        unint64_t v18 = v43;
        uint64_t v19 = __p;
        if (v43 != __p)
        {
          do
            unint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        uint64_t v43 = v17;
        operator delete(v19);
      }
      char v20 = v40;
      if (!v40) {
        goto LABEL_48;
      }
      uint64_t v21 = v41;
      long long v22 = v40;
      if (v41 == v40) {
        goto LABEL_47;
      }
      do
      {
        uint64_t v24 = (void *)*--v21;
        uint64_t v23 = v24;
        *uint64_t v21 = 0;
        if (v24) {
          operator delete[](v23);
        }
      }
      while (v21 != v20);
      goto LABEL_46;
    }
  }
  else
  {
    if ((*(unsigned char *)(a3 + 46) & 0x80) != 0 && *(_DWORD *)(a3 + 68) == 1)
    {
      uint64_t v14 = *(void *)(a3 + 24);
      v37[0] = *(void *)(*(void *)(a3 + 72) + 24);
      long long v15 = mlir::OpBuilder::create<mlir::mps::ReciprocalSquareRootOp,mlir::Value>(a1, v14, v37);
      if (*(unsigned char *)(a3 + 47))
      {
        v37[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)a3);
        unint64_t v16 = (mlir::ArrayAttr *)v37;
      }
      else
      {
        unint64_t v16 = (mlir::ArrayAttr *)(a3 + 56);
      }
      uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue(v16);
      mlir::Operation::setAttrs((uint64_t)v15, Value, v32);
      uint64_t v33 = *((unsigned int *)v15 + 9);
      uint64_t v34 = (char *)v15 - 16;
      if (!v33) {
        uint64_t v34 = 0;
      }
      *(void *)a4 = v34;
      *(void *)(a4 + 8) = v33;
      *(unsigned char *)(a4 + 16) = 1;
      return;
    }
    v35[0] = "incorrect number of operands";
    __int16 v36 = 259;
    mlir::Operation::emitError((uint64_t *)a3, (uint64_t)v35, (uint64_t)v37);
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    if (v37[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
    }
    if (v44)
    {
      uint64_t v25 = (void **)__p;
      if (__p)
      {
        uint64_t v26 = v43;
        char v27 = __p;
        if (v43 != __p)
        {
          do
            uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
          while (v26 != v25);
          char v27 = __p;
        }
        uint64_t v43 = v25;
        operator delete(v27);
      }
      char v20 = v40;
      if (!v40) {
        goto LABEL_48;
      }
      uint64_t v28 = v41;
      long long v22 = v40;
      if (v41 == v40)
      {
LABEL_47:
        uint64_t v41 = v20;
        operator delete(v22);
LABEL_48:
        if (v38 != &v39) {
          free(v38);
        }
        return;
      }
      do
      {
        unsigned int v30 = (void *)*--v28;
        unint64_t v29 = v30;
        void *v28 = 0;
        if (v30) {
          operator delete[](v29);
        }
      }
      while (v28 != v20);
LABEL_46:
      long long v22 = v40;
      goto LABEL_47;
    }
  }
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseUnaryComparisonOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v16[2] = *MEMORY[0x1E4F143B8];
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v15 = a1;
  uint64_t IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)&v15, 1u);
  uint64_t v7 = mlir::UnrankedTensorType::get(IntegerType);
  if (a3 == 1)
  {
    unint64_t v8 = *(void *)(mlir::ValueRange::dereference_iterator(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = *(void **)(*(void *)v8 + 136);
    if (v9 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v9 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v8 = 0;
    }
    unint64_t v14 = v8;
    if (v8)
    {
      v13[0] = 0;
      v13[16] = 0;
      uint64_t v7 = mlir::TensorType::cloneWith((uint64_t)&v14, (uint64_t)v13, IntegerType);
    }
  }
  uint64_t v11 = *(unsigned int *)(a4 + 8);
  if (v11 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * v11) = v7;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseBinaryMathOpReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4)
{
  v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a2;
  v21[1] = a3;
  if (a3 != 2)
  {
LABEL_14:
    uint64_t v13 = mlir::Float32Type::get(this, a2);
    uint64_t v14 = mlir::UnrankedTensorType::get(v13);
    uint64_t v15 = *(unsigned int *)(a4 + 8);
    if (v15 < *(_DWORD *)(a4 + 12))
    {
LABEL_15:
      *(void *)(*(void *)a4 + 8 * v15) = v14;
      ++*(_DWORD *)(a4 + 8);
      return 1;
    }
LABEL_18:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a4 + 8);
    goto LABEL_15;
  }
  uint64_t v6 = mlir::ValueRange::dereference_iterator(v21, 0);
  uint64_t v7 = mlir::ValueRange::dereference_iterator(v21, 1);
  unint64_t v8 = (void *)(*(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  if (v9) {
    unint64_t v9 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  }
  else {
    unint64_t v8 = 0;
  }
  v20[0] = v8;
  v20[1] = v9;
  unint64_t v10 = (void *)(*(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8))
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
    unint64_t v18 = v10;
    uint64_t v19 = v11;
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    if (!v8) {
      goto LABEL_14;
    }
  }
  if (!v10) {
    goto LABEL_14;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v20)
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v18) & 1) == 0)
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v20[0]);
    uint64_t v14 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v15 = *(unsigned int *)(a4 + 8);
    if (v15 < *(_DWORD *)(a4 + 12)) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  uint64_t BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v20[0], v18, 0);
  if (BroadcastedType)
  {
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a4, BroadcastedType);
    return 1;
  }
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseBinaryComparisonOpReturnTypes(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  v24[0] = a3;
  v24[1] = a4;
  if (a4 == 2)
  {
    long long v22 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v24, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v24, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v22, v21, 0);
    uint64_t v20 = BroadcastedType;
    if (BroadcastedType)
    {
      uint64_t v9 = BroadcastedType;
      uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v22);
      uint64_t v11 = mlir::IntegerType::get(Context, 1u, 0);
      uint64_t v12 = v11;
      uint64_t v13 = *(void **)(*(void *)v9 + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        uint64_t v16 = mlir::UnrankedTensorType::get(v11);
        if (!v16) {
          return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
        }
      }
      else
      {
        if (v13 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
          return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
        }
        uint64_t v23 = v9;
        uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v23);
        uint64_t v16 = mlir::RankedTensorType::get(Value, v15, v12, 0);
        if (!v16) {
          return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a1, a2, "unexpected type ", &v20);
        }
      }
      uint64_t v18 = *(unsigned int *)(a5 + 8);
      if (v18 >= *(_DWORD *)(a5 + 12))
      {
        uint64_t v19 = v16;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v18 + 1, 8);
        uint64_t v16 = v19;
        LODWORD(v18) = *(_DWORD *)(a5 + 8);
      }
      *(void *)(*(void *)a5 + 8 * v18) = v16;
      ++*(_DWORD *)(a5 + 8);
      return 1;
    }
    else
    {
      return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v22, " and ", (uint64_t *)&v21, " are not broadcast compatible");
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "invalid number of operands");
  }
}

void mlir::mps::UnrealizedFoldOp::downgradeToVersion(uint64_t **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  v22[0] = &unk_1EC9CA678;
  v22[1] = 0x100000001;
  int v23 = 0;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 && (v5 != 1 || *(_DWORD *)(a2 + 12)))
  {
    uint64_t v6 = *((unsigned int *)v4 + 9);
    uint64_t v7 = v4 - 2;
    if (!v6) {
      uint64_t v7 = 0;
    }
    *(void *)a3 = v7;
    *(void *)(a3 + 8) = v6;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    v16[0] = "failed to downgrade: requested target version is {0}, but the op was first defined in version {1}";
    v16[1] = 97;
    void v16[2] = v19;
    void v16[3] = 2;
    v17[0] = &unk_1EC9A4798;
    v17[1] = a2;
    v18[0] = &unk_1EC9A4828;
    v18[1] = v22;
    v19[0] = v17;
    v19[1] = v18;
    __int16 v21 = 263;
    uint64_t v20 = (const void **)v16;
    mlir::OpState::emitOpError(a1, &v20, (uint64_t)v24);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v31)
    {
      unint64_t v8 = (void **)__p;
      if (__p)
      {
        uint64_t v9 = v30;
        unint64_t v10 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          unint64_t v10 = __p;
        }
        unsigned int v30 = v8;
        operator delete(v10);
      }
      uint64_t v11 = v27;
      if (v27)
      {
        uint64_t v12 = v28;
        uint64_t v13 = v27;
        if (v28 != v27)
        {
          do
          {
            uint64_t v15 = (void *)*--v12;
            uint64_t v14 = v15;
            *uint64_t v12 = 0;
            if (v15) {
              operator delete[](v14);
            }
          }
          while (v12 != v11);
          uint64_t v13 = v27;
        }
        uint64_t v28 = v11;
        operator delete(v13);
      }
      if (v25 != &v26) {
        free(v25);
      }
    }
  }
}

void mlir::mps::ReadDataFromFileOp::downgradeToVersion(uint64_t **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  v22[0] = &unk_1EC9CA678;
  v22[1] = 0x300000001;
  int v23 = 0;
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 && (v5 != 1 || *(_DWORD *)(a2 + 12) > 2u))
  {
    uint64_t v14 = *((unsigned int *)v4 + 9);
    uint64_t v15 = v4 - 2;
    if (!v14) {
      uint64_t v15 = 0;
    }
    *(void *)a3 = v15;
    *(void *)(a3 + 8) = v14;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    v16[0] = "failed to downgrade: requested target version is {0}, but the op was first defined in version {1}";
    v16[1] = 97;
    void v16[2] = v19;
    void v16[3] = 2;
    v17[0] = &unk_1EC9A4798;
    v17[1] = a2;
    v18[0] = &unk_1EC9A4828;
    v18[1] = v22;
    v19[0] = v17;
    v19[1] = v18;
    __int16 v21 = 263;
    uint64_t v20 = (const void **)v16;
    mlir::OpState::emitOpError(a1, &v20, (uint64_t)v24);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v31)
    {
      uint64_t v6 = (void **)__p;
      if (__p)
      {
        uint64_t v7 = v30;
        unint64_t v8 = __p;
        if (v30 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          unint64_t v8 = __p;
        }
        unsigned int v30 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v27;
      if (v27)
      {
        unint64_t v10 = v28;
        uint64_t v11 = v27;
        if (v28 != v27)
        {
          do
          {
            uint64_t v13 = (void *)*--v10;
            uint64_t v12 = v13;
            *unint64_t v10 = 0;
            if (v13) {
              operator delete[](v12);
            }
          }
          while (v10 != v9);
          uint64_t v11 = v27;
        }
        uint64_t v28 = v9;
        operator delete(v11);
      }
      if (v25 != &v26) {
        free(v25);
      }
    }
  }
}

mlir::GenericProgramPoint *mlir::mps::ReciprocalSquareRootOp::downgradeToVersion@<X0>(mlir::GenericProgramPoint *result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(mlir::GenericProgramPoint **)result;
  int v7 = *(_DWORD *)(a3 + 8);
  if (!v7 || v7 == 1 && *(_DWORD *)(a3 + 12) <= 1u)
  {
    uint64_t v8 = *((void *)v6 + 3);
    uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::GenericProgramPoint *)((char *)v6 + 24));
    __int16 v29 = 261;
    v28[0] = "mps.reverse_square_root";
    v28[1] = 23;
    uint64_t v10 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v28);
    if ((*((unsigned char *)v6 + 46) & 0x80) != 0)
    {
      uint64_t v11 = *((void *)v6 + 9);
      unint64_t v12 = *((unsigned int *)v6 + 17);
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
    }
    mlir::ValueRange::ValueRange(v32, v11, v12);
    unint64_t v13 = *((unsigned int *)v6 + 9);
    unint64_t v14 = (unint64_t)v6 - 16;
    if (!v13) {
      unint64_t v14 = 0;
    }
    unint64_t AttrDictionary = v14;
    unint64_t v34 = v13;
    mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, &v25);
    uint64_t NextResultAtOffset = v25;
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    if (v26) {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v25, v26);
    }
    mlir::ValueRange::ValueRange(&AttrDictionary, NextResultAtOffset, v17 - v16);
    mlir::TypeRange::TypeRange(v31, AttrDictionary, v34);
    if (*((unsigned char *)v6 + 47))
    {
      unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
      p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
    }
    else
    {
      p_unint64_t AttrDictionary = (mlir::GenericProgramPoint *)((char *)v6 + 56);
    }
    uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
    uint64_t v21 = v20;
    mlir::SuccessorRange::SuccessorRange(&AttrDictionary, v6);
    mlir::BlockRange::BlockRange(v30, AttrDictionary, v34);
    uint64_t result = mlir::OpBuilder::create(a2, v8, v10, v32[0], v32[1], v31[0], v31[1], v22, Value, v21, v30[0], v30[1], 0, 0);
    uint64_t v6 = result;
  }
  uint64_t v23 = *((unsigned int *)v6 + 9);
  uint64_t v24 = (char *)v6 - 16;
  if (!v23) {
    uint64_t v24 = 0;
  }
  *(void *)a4 = v24;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t mlir::mps::anonymous namespace'::inferElementWiseTernaryMathOpReturnTypes(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  v17[0] = a3;
  v17[1] = a4;
  if (a4 == 3)
  {
    uint64_t v16 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v17, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v8 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v17, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v14 = v8;
    uint64_t BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(v16, v15, 0);
    if (BroadcastedType)
    {
      uint64_t v10 = mlir::OpTrait::util::getBroadcastedType(BroadcastedType, v8, 0);
      if (v10)
      {
        uint64_t v11 = *(unsigned int *)(a5 + 8);
        if (v11 >= *(_DWORD *)(a5 + 12))
        {
          uint64_t v13 = v10;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
          uint64_t v10 = v13;
          LODWORD(v11) = *(_DWORD *)(a5 + 8);
        }
        *(void *)(*(void *)a5 + 8 * v11) = v10;
        ++*(_DWORD *)(a5 + 8);
        return 1;
      }
      else
      {
        return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v16, " , ", (uint64_t *)&v15, " and ", (uint64_t *)&v14, " are not broadcast compatible");
      }
    }
    else
    {
      return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>(a1, a2, "input types ", (uint64_t *)&v16, " and ", (uint64_t *)&v15, " are not broadcast compatible");
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "invalid number of operands");
  }
}

uint64_t mlir::mps::SelectOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v23[2] = *MEMORY[0x1E4F143B8];
  v23[0] = a4;
  v23[1] = a5;
  if (a5 == 3)
  {
    uint64_t v13 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v23, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v13;
    uint64_t v21 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v23, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v23, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v21);
    uint64_t BroadcastedType = (void *)mlir::OpTrait::util::getBroadcastedType(v21, v20, ElementTypeOrSelf);
    if (BroadcastedType
      && (uint64_t v16 = mlir::OpTrait::util::getBroadcastedType(BroadcastedType, v13, ElementTypeOrSelf)) != 0)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(unsigned int *)(a11 + 8);
      if (v18 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
        LODWORD(v18) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v18) = v17;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
    else
    {
      return mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(a2, a3, "input types ", (uint64_t *)&v22, ", ", (uint64_t *)&v21, ", and ", (uint64_t *)&v20, " are not broadcast compatible");
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[3],mlir::Type &,char const(&)[7],mlir::Type &,char const(&)[30]>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7, uint64_t *a8, const char *a9)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v25);
  if (v25) {
    mlir::Diagnostic::append<char const(&)[13],mlir::Type &,char const(&)[4],mlir::Type &,char const(&)[6],mlir::Type &,char const(&)[30]>((uint64_t)&v26, a3, a4, a5, a6, a7, a8, a9);
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v25);
  if (v25) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  }
  if (v33)
  {
    uint64_t v16 = (void **)__p;
    if (__p)
    {
      uint64_t v17 = v32;
      uint64_t v18 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      uint64_t v32 = v16;
      operator delete(v18);
    }
    uint64_t v19 = v29;
    if (v29)
    {
      uint64_t v20 = v30;
      uint64_t v21 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v23 = (void *)*--v20;
          uint64_t v22 = v23;
          *uint64_t v20 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v20 != v19);
        uint64_t v21 = v29;
      }
      unsigned int v30 = v19;
      operator delete(v21);
    }
    if (v27 != &v28) {
      free(v27);
    }
  }
  return v15;
}

uint64_t mlir::mps::SelectOp::verify(uint64_t **this)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*this)[9];
  uint64_t v3 = (void *)(*(void *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *(void *)(v2[11] + 8);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v4);
  uint64_t v74 = mlir::getElementTypeOrSelf(v3);
  if (v74 == ElementTypeOrSelf || mlir::Type::isInteger((mlir::Type *)&v74, 1))
  {
    int v7 = (void *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if (mlir::OpTrait::util::getBroadcastedType(v3, v4, ElementTypeOrSelf)
      && mlir::OpTrait::util::getBroadcastedType(v3, v7, ElementTypeOrSelf)
      && mlir::OpTrait::util::getBroadcastedType(v4, v7, ElementTypeOrSelf))
    {
      return 1;
    }
    v72[0] = (const void **)"input types ";
    __int16 v73 = 259;
    mlir::OpState::emitOpError(this, v72, (uint64_t)v78);
    if (v78[0])
    {
      uint64_t v9 = &v75;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v3);
      uint64_t v10 = (char *)v79;
      if (v80 >= v81)
      {
        unint64_t v55 = v80 + 1;
        if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
        {
          int64_t v65 = (char *)&v75 - (unsigned char *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v55, 24);
          uint64_t v10 = (char *)v79;
          uint64_t v9 = (int *)((char *)v79 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v55, 24);
          uint64_t v9 = &v75;
          uint64_t v10 = (char *)v79;
        }
      }
      uint64_t v11 = &v10[24 * v80];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v80;
      if (v78[0])
      {
        int v75 = 3;
        v76 = ", ";
        uint64_t v77 = 2;
        unint64_t v14 = &v75;
        uint64_t v15 = (char *)v79;
        if (v13 >= v81)
        {
          unint64_t v56 = v13 + 1;
          BOOL v57 = (char *)v79 + 24 * v13 > (char *)&v75;
          if (v79 <= &v75 && v57)
          {
            int64_t v66 = (char *)&v75 - (unsigned char *)v79;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v56, 24);
            uint64_t v15 = (char *)v79;
            unint64_t v14 = (int *)((char *)v79 + v66);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v56, 24);
            unint64_t v14 = &v75;
            uint64_t v15 = (char *)v79;
          }
        }
        uint64_t v16 = &v15[24 * v80];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v80;
        if (v78[0])
        {
          uint64_t v18 = &v75;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v4);
          uint64_t v19 = (char *)v79;
          if (v80 >= v81)
          {
            unint64_t v59 = v80 + 1;
            if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
            {
              int64_t v68 = (char *)&v75 - (unsigned char *)v79;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
              uint64_t v19 = (char *)v79;
              uint64_t v18 = (int *)((char *)v79 + v68);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v59, 24);
              uint64_t v18 = &v75;
              uint64_t v19 = (char *)v79;
            }
          }
          uint64_t v20 = &v19[24 * v80];
          long long v21 = *(_OWORD *)v18;
          *((void *)v20 + 2) = *((void *)v18 + 2);
          *(_OWORD *)uint64_t v20 = v21;
          uint64_t v22 = ++v80;
          if (v78[0])
          {
            int v75 = 3;
            v76 = ", and ";
            uint64_t v77 = 6;
            uint64_t v23 = &v75;
            uint64_t v24 = (char *)v79;
            if (v22 >= v81)
            {
              unint64_t v60 = v22 + 1;
              BOOL v61 = (char *)v79 + 24 * v22 > (char *)&v75;
              if (v79 <= &v75 && v61)
              {
                int64_t v69 = (char *)&v75 - (unsigned char *)v79;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
                uint64_t v24 = (char *)v79;
                uint64_t v23 = (int *)((char *)v79 + v69);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v60, 24);
                uint64_t v23 = &v75;
                uint64_t v24 = (char *)v79;
              }
            }
            uint64_t v25 = &v24[24 * v80];
            long long v26 = *(_OWORD *)v23;
            *((void *)v25 + 2) = *((void *)v23 + 2);
            *(_OWORD *)uint64_t v25 = v26;
            ++v80;
            if (v78[0])
            {
              uint64_t v27 = &v75;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v7);
              uint64_t v28 = (char *)v79;
              if (v80 >= v81)
              {
                unint64_t v62 = v80 + 1;
                if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
                {
                  int64_t v70 = (char *)&v75 - (unsigned char *)v79;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                  uint64_t v28 = (char *)v79;
                  uint64_t v27 = (int *)((char *)v79 + v70);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v62, 24);
                  uint64_t v27 = &v75;
                  uint64_t v28 = (char *)v79;
                }
              }
              __int16 v29 = &v28[24 * v80];
              long long v30 = *(_OWORD *)v27;
              *((void *)v29 + 2) = *((void *)v27 + 2);
              *(_OWORD *)__int16 v29 = v30;
              uint64_t v31 = ++v80;
              if (v78[0])
              {
                int v75 = 3;
                v76 = " are not broadcast compatible";
                uint64_t v77 = 29;
                uint64_t v32 = &v75;
                char v33 = (char *)v79;
                if (v31 >= v81)
                {
                  unint64_t v63 = v31 + 1;
                  BOOL v64 = (char *)v79 + 24 * v31 > (char *)&v75;
                  if (v79 <= &v75 && v64)
                  {
                    int64_t v71 = (char *)&v75 - (unsigned char *)v79;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                    char v33 = (char *)v79;
                    uint64_t v32 = (int *)((char *)v79 + v71);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v63, 24);
                    uint64_t v32 = &v75;
                    char v33 = (char *)v79;
                  }
                }
                uint64_t v34 = &v33[24 * v80];
                long long v35 = *(_OWORD *)v32;
                *((void *)v34 + 2) = *((void *)v32 + 2);
                *(_OWORD *)uint64_t v34 = v35;
                ++v80;
              }
            }
          }
        }
      }
    }
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
    if (v78[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
    }
    if (v87)
    {
      __int16 v36 = (void **)__p;
      if (__p)
      {
        uint64_t v37 = v86;
        uint64_t v38 = __p;
        if (v86 != __p)
        {
          do
            uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          uint64_t v38 = __p;
        }
        v86 = v36;
        operator delete(v38);
      }
      uint64_t v39 = v83;
      if (!v83) {
        goto LABEL_53;
      }
      uint64_t v40 = v84;
      uint64_t v41 = v83;
      if (v84 == v83)
      {
LABEL_52:
        v84 = v39;
        operator delete(v41);
LABEL_53:
        if (v79 != v82) {
          free(v79);
        }
        return v8;
      }
      do
      {
        uint64_t v43 = (void *)*--v40;
        uint64_t v42 = v43;
        *uint64_t v40 = 0;
        if (v43) {
          operator delete[](v42);
        }
      }
      while (v40 != v39);
LABEL_51:
      uint64_t v41 = v83;
      goto LABEL_52;
    }
  }
  else
  {
    v72[0] = (const void **)"condition operand must be a 1-bit integer tensor or match the value element type, but got ";
    __int16 v73 = 259;
    mlir::OpState::emitOpError(this, v72, (uint64_t)v78);
    if (v78[0])
    {
      char v44 = &v75;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v75, (uint64_t)v3);
      uint64_t v45 = (char *)v79;
      if (v80 >= v81)
      {
        unint64_t v58 = v80 + 1;
        if (v79 <= &v75 && (char *)v79 + 24 * v80 > (char *)&v75)
        {
          int64_t v67 = (char *)&v75 - (unsigned char *)v79;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
          uint64_t v45 = (char *)v79;
          char v44 = (int *)((char *)v79 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v82, v58, 24);
          char v44 = &v75;
          uint64_t v45 = (char *)v79;
        }
      }
      long long v46 = &v45[24 * v80];
      long long v47 = *(_OWORD *)v44;
      *((void *)v46 + 2) = *((void *)v44 + 2);
      *(_OWORD *)long long v46 = v47;
      ++v80;
    }
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v78);
    if (v78[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v78);
    }
    if (v87)
    {
      long long v48 = (void **)__p;
      if (__p)
      {
        uint64_t v49 = v86;
        uint64_t v50 = __p;
        if (v86 != __p)
        {
          do
            uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          uint64_t v50 = __p;
        }
        v86 = v48;
        operator delete(v50);
      }
      uint64_t v39 = v83;
      if (!v83) {
        goto LABEL_53;
      }
      uint64_t v51 = v84;
      uint64_t v41 = v83;
      if (v84 == v83) {
        goto LABEL_52;
      }
      do
      {
        uint64_t v53 = (void *)*--v51;
        uint64_t v52 = v53;
        *uint64_t v51 = 0;
        if (v53) {
          operator delete[](v52);
        }
      }
      while (v51 != v39);
      goto LABEL_51;
    }
  }
  return v8;
}

uint64_t mlir::mps::anonymous namespace'::verifyTensorBufferAttr(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  v116 = a3;
  if (!*(unsigned char *)(a4 + 96))
  {
    if ((a6 & 1) == 0)
    {
      a1(v120, a2);
      if (v120[0])
      {
        int v117 = 3;
        v118 = "MPSBufferTensor blob entry is undefined";
        uint64_t v119 = 39;
        uint64_t v49 = &v117;
        uint64_t v50 = (char *)v121;
        if (v122 >= v123)
        {
          unint64_t v92 = v122 + 1;
          if (v121 <= &v117 && (char *)v121 + 24 * v122 > (char *)&v117)
          {
            int64_t v108 = (char *)&v117 - (unsigned char *)v121;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v92, 24);
            uint64_t v50 = (char *)v121;
            uint64_t v49 = (int *)((char *)v121 + v108);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v92, 24);
            uint64_t v49 = &v117;
            uint64_t v50 = (char *)v121;
          }
        }
        uint64_t v51 = &v50[24 * v122];
        long long v52 = *(_OWORD *)v49;
        *((void *)v51 + 2) = *((void *)v49 + 2);
        *(_OWORD *)uint64_t v51 = v52;
        ++v122;
      }
      uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v120);
      if (v120[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v120);
      }
      if (v129)
      {
        uint64_t v53 = (void **)__p;
        if (__p)
        {
          uint64_t v54 = v128;
          unint64_t v55 = __p;
          if (v128 != __p)
          {
            do
              uint64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
            while (v54 != v53);
            unint64_t v55 = __p;
          }
          v128 = v53;
          operator delete(v55);
        }
        char v44 = v125;
        if (!v125) {
          goto LABEL_91;
        }
        unint64_t v56 = v126;
        long long v46 = v125;
        if (v126 == v125) {
          goto LABEL_90;
        }
        do
        {
          unint64_t v58 = (void *)*--v56;
          BOOL v57 = v58;
          *unint64_t v56 = 0;
          if (v58) {
            operator delete[](v57);
          }
        }
        while (v56 != v44);
        goto LABEL_89;
      }
      return v40;
    }
    return 1;
  }
  if (!*(unsigned char *)(a4 + 80))
  {
    a1(v120, a2);
    if (v120[0])
    {
      int v117 = 3;
      v118 = "MPSBufferTensor blob entry memory was released while still in use";
      uint64_t v119 = 65;
      unint64_t v59 = &v117;
      unint64_t v60 = (char *)v121;
      if (v122 >= v123)
      {
        unint64_t v90 = v122 + 1;
        if (v121 <= &v117 && (char *)v121 + 24 * v122 > (char *)&v117)
        {
          int64_t v106 = (char *)&v117 - (unsigned char *)v121;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v90, 24);
          unint64_t v60 = (char *)v121;
          unint64_t v59 = (int *)((char *)v121 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v90, 24);
          unint64_t v59 = &v117;
          unint64_t v60 = (char *)v121;
        }
      }
      BOOL v61 = &v60[24 * v122];
      long long v62 = *(_OWORD *)v59;
      *((void *)v61 + 2) = *((void *)v59 + 2);
      *(_OWORD *)BOOL v61 = v62;
      ++v122;
    }
    uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v120);
    if (v120[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v120);
    }
    if (v129)
    {
      unint64_t v63 = (void **)__p;
      if (__p)
      {
        BOOL v64 = v128;
        int64_t v65 = __p;
        if (v128 != __p)
        {
          do
            BOOL v64 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v64 - 1);
          while (v64 != v63);
          int64_t v65 = __p;
        }
        v128 = v63;
        operator delete(v65);
      }
      char v44 = v125;
      if (!v125) {
        goto LABEL_91;
      }
      int64_t v66 = v126;
      long long v46 = v125;
      if (v126 == v125) {
        goto LABEL_90;
      }
      do
      {
        int64_t v68 = (void *)*--v66;
        int64_t v67 = v68;
        *int64_t v66 = 0;
        if (v68) {
          operator delete[](v67);
        }
      }
      while (v66 != v44);
      goto LABEL_89;
    }
    return v40;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v9 = *(const char **)(a4 + 24);
  uint64_t RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v116);
  unint64_t TypeAlignmentSize = mlir::mps::getTypeAlignmentSize(RHS);
  uint64_t v13 = (uint64_t)v116;
  if (v116)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v116 + 8);
    uint64_t v15 = (const char *)(mlir::mps::getElementsAttrStorageSize(v13, v14) + a5);
    if (v15 > v9) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v15 = (const char *)(mlir::mps::getElementsAttrStorageSize(0, 0) + a5);
    if (v15 > v9)
    {
LABEL_5:
      a1(v120, a2);
      if (v120[0])
      {
        int v117 = 3;
        v118 = "MPSBufferTensor blob is of size ";
        uint64_t v119 = 32;
        uint64_t v16 = &v117;
        long long v17 = (char *)v121;
        if (v122 >= v123)
        {
          unint64_t v91 = v122 + 1;
          if (v121 <= &v117 && (char *)v121 + 24 * v122 > (char *)&v117)
          {
            int64_t v107 = (char *)&v117 - (unsigned char *)v121;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v91, 24);
            long long v17 = (char *)v121;
            uint64_t v16 = (int *)((char *)v121 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v91, 24);
            uint64_t v16 = &v117;
            long long v17 = (char *)v121;
          }
        }
        uint64_t v18 = &v17[24 * v122];
        long long v19 = *(_OWORD *)v16;
        *((void *)v18 + 2) = *((void *)v16 + 2);
        *(_OWORD *)uint64_t v18 = v19;
        uint64_t v20 = ++v122;
        if (v120[0])
        {
          int v117 = 5;
          v118 = v9;
          long long v21 = &v117;
          uint64_t v22 = (char *)v121;
          if (v20 >= v123)
          {
            unint64_t v93 = v20 + 1;
            BOOL v94 = (char *)v121 + 24 * v20 > (char *)&v117;
            if (v121 <= &v117 && v94)
            {
              int64_t v109 = (char *)&v117 - (unsigned char *)v121;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v93, 24);
              uint64_t v22 = (char *)v121;
              long long v21 = (int *)((char *)v121 + v109);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v93, 24);
              long long v21 = &v117;
              uint64_t v22 = (char *)v121;
            }
          }
          uint64_t v23 = &v22[24 * v122];
          long long v24 = *(_OWORD *)v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)uint64_t v23 = v24;
          uint64_t v25 = ++v122;
          if (v120[0])
          {
            int v117 = 3;
            v118 = " bytes, expected it to be at least ";
            uint64_t v119 = 35;
            long long v26 = &v117;
            uint64_t v27 = (char *)v121;
            if (v25 >= v123)
            {
              unint64_t v96 = v25 + 1;
              BOOL v97 = (char *)v121 + 24 * v25 > (char *)&v117;
              if (v121 <= &v117 && v97)
              {
                int64_t v111 = (char *)&v117 - (unsigned char *)v121;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v96, 24);
                uint64_t v27 = (char *)v121;
                long long v26 = (int *)((char *)v121 + v111);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v96, 24);
                long long v26 = &v117;
                uint64_t v27 = (char *)v121;
              }
            }
            uint64_t v28 = &v27[24 * v122];
            long long v29 = *(_OWORD *)v26;
            *((void *)v28 + 2) = *((void *)v26 + 2);
            *(_OWORD *)uint64_t v28 = v29;
            uint64_t v30 = ++v122;
            if (v120[0])
            {
              int v117 = 5;
              v118 = v15;
              uint64_t v31 = &v117;
              uint64_t v32 = (char *)v121;
              if (v30 >= v123)
              {
                unint64_t v100 = v30 + 1;
                BOOL v101 = (char *)v121 + 24 * v30 > (char *)&v117;
                if (v121 <= &v117 && v101)
                {
                  int64_t v113 = (char *)&v117 - (unsigned char *)v121;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v100, 24);
                  uint64_t v32 = (char *)v121;
                  uint64_t v31 = (int *)((char *)v121 + v113);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v100, 24);
                  uint64_t v31 = &v117;
                  uint64_t v32 = (char *)v121;
                }
              }
              char v33 = &v32[24 * v122];
              long long v34 = *(_OWORD *)v31;
              *((void *)v33 + 2) = *((void *)v31 + 2);
              *(_OWORD *)char v33 = v34;
              uint64_t v35 = ++v122;
              if (v120[0])
              {
                int v117 = 3;
                v118 = " bytes";
                uint64_t v119 = 6;
                __int16 v36 = &v117;
                uint64_t v37 = (char *)v121;
                if (v35 >= v123)
                {
                  unint64_t v104 = v35 + 1;
                  BOOL v105 = (char *)v121 + 24 * v35 > (char *)&v117;
                  if (v121 <= &v117 && v105)
                  {
                    int64_t v115 = (char *)&v117 - (unsigned char *)v121;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v104, 24);
                    uint64_t v37 = (char *)v121;
                    __int16 v36 = (int *)((char *)v121 + v115);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v104, 24);
                    __int16 v36 = &v117;
                    uint64_t v37 = (char *)v121;
                  }
                }
                uint64_t v38 = &v37[24 * v122];
                long long v39 = *(_OWORD *)v36;
                *((void *)v38 + 2) = *((void *)v36 + 2);
                *(_OWORD *)uint64_t v38 = v39;
                ++v122;
              }
            }
          }
        }
      }
      uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v120);
      if (v120[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v120);
      }
      if (v129)
      {
        uint64_t v41 = (void **)__p;
        if (__p)
        {
          uint64_t v42 = v128;
          uint64_t v43 = __p;
          if (v128 != __p)
          {
            do
              uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            uint64_t v43 = __p;
          }
          v128 = v41;
          operator delete(v43);
        }
        char v44 = v125;
        if (!v125) {
          goto LABEL_91;
        }
        uint64_t v45 = v126;
        long long v46 = v125;
        if (v126 == v125)
        {
LABEL_90:
          v126 = v44;
          operator delete(v46);
LABEL_91:
          if (v121 != v124) {
            free(v121);
          }
          return v40;
        }
        do
        {
          long long v48 = (void *)*--v45;
          long long v47 = v48;
          *uint64_t v45 = 0;
          if (v48) {
            operator delete[](v47);
          }
        }
        while (v45 != v44);
LABEL_89:
        long long v46 = v125;
        goto LABEL_90;
      }
      return v40;
    }
  }
  if (!((v10 + a5) % TypeAlignmentSize)) {
    return 1;
  }
  a1(v120, a2);
  if (v120[0])
  {
    int v117 = 3;
    v118 = "MPSBufferTensor blob is not aligned to ";
    uint64_t v119 = 39;
    int64_t v69 = &v117;
    int64_t v70 = (char *)v121;
    if (v122 >= v123)
    {
      unint64_t v95 = v122 + 1;
      if (v121 <= &v117 && (char *)v121 + 24 * v122 > (char *)&v117)
      {
        int64_t v110 = (char *)&v117 - (unsigned char *)v121;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v95, 24);
        int64_t v70 = (char *)v121;
        int64_t v69 = (int *)((char *)v121 + v110);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v95, 24);
        int64_t v69 = &v117;
        int64_t v70 = (char *)v121;
      }
    }
    int64_t v71 = &v70[24 * v122];
    long long v72 = *(_OWORD *)v69;
    *((void *)v71 + 2) = *((void *)v69 + 2);
    *(_OWORD *)int64_t v71 = v72;
    uint64_t v73 = ++v122;
    if (v120[0])
    {
      int v117 = 5;
      v118 = (const char *)TypeAlignmentSize;
      uint64_t v74 = &v117;
      int v75 = (char *)v121;
      if (v73 >= v123)
      {
        unint64_t v98 = v73 + 1;
        BOOL v99 = (char *)v121 + 24 * v73 > (char *)&v117;
        if (v121 <= &v117 && v99)
        {
          int64_t v112 = (char *)&v117 - (unsigned char *)v121;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v98, 24);
          int v75 = (char *)v121;
          uint64_t v74 = (int *)((char *)v121 + v112);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v98, 24);
          uint64_t v74 = &v117;
          int v75 = (char *)v121;
        }
      }
      v76 = &v75[24 * v122];
      long long v77 = *(_OWORD *)v74;
      *((void *)v76 + 2) = *((void *)v74 + 2);
      *(_OWORD *)v76 = v77;
      uint64_t v78 = ++v122;
      if (v120[0])
      {
        int v117 = 3;
        v118 = " bytes";
        uint64_t v119 = 6;
        uint64_t v79 = &v117;
        unsigned int v80 = (char *)v121;
        if (v78 >= v123)
        {
          unint64_t v102 = v78 + 1;
          BOOL v103 = (char *)v121 + 24 * v78 > (char *)&v117;
          if (v121 <= &v117 && v103)
          {
            int64_t v114 = (char *)&v117 - (unsigned char *)v121;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v102, 24);
            unsigned int v80 = (char *)v121;
            uint64_t v79 = (int *)((char *)v121 + v114);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, v124, v102, 24);
            uint64_t v79 = &v117;
            unsigned int v80 = (char *)v121;
          }
        }
        unsigned int v81 = &v80[24 * v122];
        long long v82 = *(_OWORD *)v79;
        *((void *)v81 + 2) = *((void *)v79 + 2);
        *(_OWORD *)unsigned int v81 = v82;
        ++v122;
      }
    }
  }
  uint64_t v40 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v120);
  if (v120[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v120);
  }
  if (v129)
  {
    uint64_t v83 = (void **)__p;
    if (__p)
    {
      v84 = v128;
      uint64_t v85 = __p;
      if (v128 != __p)
      {
        do
          v84 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v84 - 1);
        while (v84 != v83);
        uint64_t v85 = __p;
      }
      v128 = v83;
      operator delete(v85);
    }
    char v44 = v125;
    if (!v125) {
      goto LABEL_91;
    }
    v86 = v126;
    long long v46 = v125;
    if (v126 == v125) {
      goto LABEL_90;
    }
    do
    {
      uint64_t v88 = (void *)*--v86;
      char v87 = v88;
      void *v86 = 0;
      if (v88) {
        operator delete[](v87);
      }
    }
    while (v86 != v44);
    goto LABEL_89;
  }
  return v40;
}

__n128 mlir::mps::MPSBufferTensorAttr::getHandle@<Q0>(__n128 **this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = *this;
  __n128 result = (*this)[1];
  *a2 = result;
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  return result;
}

void *mlir::mps::ConstantOp::getValue(mlir::mps::ConstantOp *this)
{
  uint64_t Context = (mlir::UnitAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)this + 24));
  uint64_t v4 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v4 || (result = (void *)mlir::UnitAttr::get(Context, v3), (uint64_t v4 = result) != 0))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
    return v4;
  }
  return result;
}

uint64_t mlir::mps::ConstantOp::setValueAttr(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)result;
  unint64_t v4 = *(unsigned int *)(*(void *)result + 44);
  if (a2)
  {
    uint64_t v5 = *(void **)(*a2 + 136);
    BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
    int v7 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id ? a2 : 0;
    uint64_t v13 = v7;
    if (v6)
    {
      uint64_t v8 = a2[2];
      uint64_t Context = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::Attribute::getContext((mlir::Attribute *)&v13);
      uint64_t v11 = (pthread_rwlock_t **)(mlir::mps::MPSResourceBlobManagerInterface::getManager(Context, v10) + 48);
      llvm::sys::RWMutexImpl::lock(v11);
      ++*(void *)(v8 + 88);
      __n128 result = llvm::sys::RWMutexImpl::unlock_shared(v11);
    }
  }
  long long v12 = (void *)(v3 + 16 * ((v4 >> 23) & 1) + 64);
  if (!BYTE3(v4)) {
    long long v12 = 0;
  }
  *long long v12 = a2;
  return result;
}

uint64_t mlir::mps::ConstantOp::updateValue(uint64_t *a1, void *a2)
{
  uint64_t result = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
  BOOL v6 = *(void **)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
  if (!v6)
  {
    uint64_t result = mlir::UnitAttr::get((mlir::UnitAttr *)result, v5);
    BOOL v6 = (void *)result;
  }
  if (v6) {
    uint64_t result = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v6 + 8);
  }
  if (v6 != a2)
  {
    uint64_t v7 = *a1;
    unint64_t v8 = *(unsigned int *)(*a1 + 44);
    if (a2)
    {
      uint64_t v9 = *(void **)(*a2 + 136);
      BOOL v10 = v9 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id;
      uint64_t v11 = v9 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id ? a2 : 0;
      long long v17 = v11;
      if (v10)
      {
        uint64_t v12 = a2[2];
        uint64_t Context = (mlir::mps::MPSResourceBlobManagerInterface *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
        uint64_t v15 = (pthread_rwlock_t **)(mlir::mps::MPSResourceBlobManagerInterface::getManager(Context, v14) + 48);
        llvm::sys::RWMutexImpl::lock(v15);
        ++*(void *)(v12 + 88);
        uint64_t result = llvm::sys::RWMutexImpl::unlock_shared(v15);
      }
    }
    uint64_t v16 = (void *)(v7 + 16 * ((v8 >> 23) & 1) + 64);
    if (!BYTE3(v8)) {
      uint64_t v16 = 0;
    }
    *uint64_t v16 = a2;
  }
  return result;
}

uint64_t mlir::mps::ConstantOp::verify(uint64_t **this)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t Context = (mlir::UnitAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*this + 3));
  unint64_t v4 = (uint64_t *)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!v4 && (unint64_t v4 = (uint64_t *)mlir::UnitAttr::get(Context, v3)) == 0
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8))
  {
    v94[0] = (const void **)"failed: property must contain a valid ElementsAttr";
    __int16 v95 = 259;
    mlir::OpState::emitOpError(this, v94, (uint64_t)v102);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
    if (v102[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
    }
    if (v111)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v110;
        uint64_t v14 = __p;
        if (v110 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        int64_t v110 = v12;
        operator delete(v14);
      }
      uint64_t v15 = v107;
      if (!v107) {
        goto LABEL_107;
      }
      uint64_t v16 = v108;
      long long v17 = v107;
      if (v108 == v107) {
        goto LABEL_106;
      }
      do
      {
        long long v19 = (void *)*--v16;
        uint64_t v18 = v19;
        *uint64_t v16 = 0;
        if (v19) {
          operator delete[](v18);
        }
      }
      while (v16 != v15);
      goto LABEL_105;
    }
    return v11;
  }
  uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v4 + 8);
  v102[0] = v4;
  v102[1] = v5;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v102);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8))
  {
    unint64_t v92 = 0;
    uint64_t v93 = 0;
LABEL_29:
    v94[0] = (const void **)"failed: property contained an non shaped-type attribute";
    __int16 v95 = 259;
    mlir::OpState::emitOpError(this, v94, (uint64_t)v102);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
    if (v102[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
    }
    if (v111)
    {
      uint64_t v20 = (void **)__p;
      if (__p)
      {
        long long v21 = v110;
        uint64_t v22 = __p;
        if (v110 != __p)
        {
          do
            long long v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        int64_t v110 = v20;
        operator delete(v22);
      }
      uint64_t v15 = v107;
      if (!v107) {
        goto LABEL_107;
      }
      uint64_t v23 = v108;
      long long v17 = v107;
      if (v108 == v107) {
        goto LABEL_106;
      }
      do
      {
        uint64_t v25 = (void *)*--v23;
        long long v24 = v25;
        *uint64_t v23 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v23 != v15);
      goto LABEL_105;
    }
    return v11;
  }
  uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  unint64_t v92 = Type;
  uint64_t v93 = v7;
  if (!Type) {
    goto LABEL_29;
  }
  if (*(_UNKNOWN **)(*v4 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
  {
    v102[0] = this;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v8 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9)
  {
    uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
    unint64_t v90 = v9;
    uint64_t v91 = v10;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90))
    {
LABEL_53:
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v90);
      uint64_t v35 = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v92);
      v102[0] = OperandRange;
      v94[0] = v35;
      if ((const void **)OperandRange == v35) {
        return 1;
      }
      __int16 v36 = v35;
      if (mlir::Type::isF16((mlir::Type *)v102) || mlir::Type::isBF16((mlir::Type *)v102))
      {
        if (mlir::Type::isF32((mlir::Type *)v94)) {
          return 1;
        }
      }
      else if (*(_UNKNOWN **)(*(void *)v102[0] + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id {
             && *((_UNKNOWN **)*v36 + 17) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      }
      {
        uint64_t v98 = v102[0];
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v98);
        if (mlir::Type::isF16((mlir::Type *)&Value))
        {
          unint64_t v96 = v36;
          uint64_t v97 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v96);
          if (mlir::Type::isF32((mlir::Type *)&v97)) {
            return 1;
          }
        }
      }
      v94[0] = (const void **)"invalid element type: constant value ";
      __int16 v95 = 259;
      mlir::OpState::emitOpError(this, v94, (uint64_t)v102);
      if (v102[0])
      {
        p_uint64_t Value = &Value;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v92);
        BOOL v57 = (char *)v103;
        if (v104 >= v105)
        {
          unint64_t v77 = v104 + 1;
          if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
          {
            int64_t v85 = (char *)&Value - (unsigned char *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v77, 24);
            BOOL v57 = (char *)v103;
            p_uint64_t Value = (uint64_t *)((char *)v103 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v77, 24);
            p_uint64_t Value = &Value;
            BOOL v57 = (char *)v103;
          }
        }
        unint64_t v58 = &v57[24 * v104];
        long long v59 = *(_OWORD *)p_Value;
        *((void *)v58 + 2) = p_Value[2];
        *(_OWORD *)unint64_t v58 = v59;
        uint64_t v60 = ++v104;
        if (v102[0])
        {
          LODWORD(Value) = 3;
          unint64_t v100 = " doesn't match op result ";
          uint64_t v101 = 25;
          BOOL v61 = &Value;
          long long v62 = (char *)v103;
          if (v60 >= v105)
          {
            unint64_t v80 = v60 + 1;
            BOOL v81 = (char *)v103 + 24 * v60 > (char *)&Value;
            if (v103 <= &Value && v81)
            {
              int64_t v87 = (char *)&Value - (unsigned char *)v103;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v80, 24);
              long long v62 = (char *)v103;
              BOOL v61 = (uint64_t *)((char *)v103 + v87);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v80, 24);
              BOOL v61 = &Value;
              long long v62 = (char *)v103;
            }
          }
          unint64_t v63 = &v62[24 * v104];
          long long v64 = *(_OWORD *)v61;
          *((void *)v63 + 2) = v61[2];
          *(_OWORD *)unint64_t v63 = v64;
          ++v104;
          if (v102[0])
          {
            int64_t v65 = &Value;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v90);
            int64_t v66 = (char *)v103;
            if (v104 >= v105)
            {
              unint64_t v83 = v104 + 1;
              if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
              {
                int64_t v89 = (char *)&Value - (unsigned char *)v103;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v83, 24);
                int64_t v66 = (char *)v103;
                int64_t v65 = (uint64_t *)((char *)v103 + v89);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v83, 24);
                int64_t v65 = &Value;
                int64_t v66 = (char *)v103;
              }
            }
            int64_t v67 = &v66[24 * v104];
            long long v68 = *(_OWORD *)v65;
            *((void *)v67 + 2) = v65[2];
            *(_OWORD *)int64_t v67 = v68;
            ++v104;
          }
        }
      }
      uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
      if (v102[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
      }
      if (v111)
      {
        int64_t v69 = (void **)__p;
        if (__p)
        {
          int64_t v70 = v110;
          int64_t v71 = __p;
          if (v110 != __p)
          {
            do
              int64_t v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            int64_t v71 = __p;
          }
          int64_t v110 = v69;
          operator delete(v71);
        }
        uint64_t v15 = v107;
        if (!v107) {
          goto LABEL_107;
        }
        long long v72 = v108;
        long long v17 = v107;
        if (v108 == v107)
        {
LABEL_106:
          int64_t v108 = v15;
          operator delete(v17);
LABEL_107:
          if (v103 != v106) {
            free(v103);
          }
          return v11;
        }
        do
        {
          uint64_t v74 = (void *)*--v72;
          uint64_t v73 = v74;
          void *v72 = 0;
          if (v74) {
            operator delete[](v73);
          }
        }
        while (v72 != v15);
LABEL_105:
        long long v17 = v107;
        goto LABEL_106;
      }
      return v11;
    }
  }
  else
  {
    unint64_t v90 = 0;
    uint64_t v91 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90)) {
      goto LABEL_53;
    }
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v92);
  uint64_t v28 = v27;
  long long v29 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90);
  if (v28 == v30)
  {
    if (!v28) {
      goto LABEL_53;
    }
    uint64_t v31 = 8 * v28 - 8;
    while (1)
    {
      uint64_t v32 = v31;
      if (*ArgAttrsAttr != *v29 && *v29 != 0x8000000000000000) {
        break;
      }
      ++ArgAttrsAttr;
      ++v29;
      v31 -= 8;
      if (!v32) {
        goto LABEL_53;
      }
    }
  }
  v94[0] = (const void **)"invalid shape: constant value ";
  __int16 v95 = 259;
  mlir::OpState::emitOpError(this, v94, (uint64_t)v102);
  if (v102[0])
  {
    uint64_t v37 = &Value;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v92);
    uint64_t v38 = (char *)v103;
    if (v104 >= v105)
    {
      unint64_t v76 = v104 + 1;
      if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
      {
        int64_t v84 = (char *)&Value - (unsigned char *)v103;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v76, 24);
        uint64_t v38 = (char *)v103;
        uint64_t v37 = (uint64_t *)((char *)v103 + v84);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v76, 24);
        uint64_t v37 = &Value;
        uint64_t v38 = (char *)v103;
      }
    }
    long long v39 = &v38[24 * v104];
    long long v40 = *(_OWORD *)v37;
    *((void *)v39 + 2) = v37[2];
    *(_OWORD *)long long v39 = v40;
    uint64_t v41 = ++v104;
    if (v102[0])
    {
      LODWORD(Value) = 3;
      unint64_t v100 = " is not compatible with op result ";
      uint64_t v101 = 34;
      uint64_t v42 = &Value;
      uint64_t v43 = (char *)v103;
      if (v41 >= v105)
      {
        unint64_t v78 = v41 + 1;
        BOOL v79 = (char *)v103 + 24 * v41 > (char *)&Value;
        if (v103 <= &Value && v79)
        {
          int64_t v86 = (char *)&Value - (unsigned char *)v103;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v78, 24);
          uint64_t v43 = (char *)v103;
          uint64_t v42 = (uint64_t *)((char *)v103 + v86);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v78, 24);
          uint64_t v42 = &Value;
          uint64_t v43 = (char *)v103;
        }
      }
      char v44 = &v43[24 * v104];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = v42[2];
      *(_OWORD *)char v44 = v45;
      ++v104;
      if (v102[0])
      {
        long long v46 = &Value;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&Value, (uint64_t)v90);
        long long v47 = (char *)v103;
        if (v104 >= v105)
        {
          unint64_t v82 = v104 + 1;
          if (v103 <= &Value && (char *)v103 + 24 * v104 > (char *)&Value)
          {
            int64_t v88 = (char *)&Value - (unsigned char *)v103;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v82, 24);
            long long v47 = (char *)v103;
            long long v46 = (uint64_t *)((char *)v103 + v88);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, v106, v82, 24);
            long long v46 = &Value;
            long long v47 = (char *)v103;
          }
        }
        long long v48 = &v47[24 * v104];
        long long v49 = *(_OWORD *)v46;
        *((void *)v48 + 2) = v46[2];
        *(_OWORD *)long long v48 = v49;
        ++v104;
      }
    }
  }
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v102);
  if (v102[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v102);
  }
  if (v111)
  {
    uint64_t v50 = (void **)__p;
    if (__p)
    {
      uint64_t v51 = v110;
      long long v52 = __p;
      if (v110 != __p)
      {
        do
          uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
        while (v51 != v50);
        long long v52 = __p;
      }
      int64_t v110 = v50;
      operator delete(v52);
    }
    uint64_t v15 = v107;
    if (!v107) {
      goto LABEL_107;
    }
    uint64_t v53 = v108;
    long long v17 = v107;
    if (v108 == v107) {
      goto LABEL_106;
    }
    do
    {
      unint64_t v55 = (void *)*--v53;
      uint64_t v54 = v55;
      *uint64_t v53 = 0;
      if (v55) {
        operator delete[](v54);
      }
    }
    while (v53 != v15);
    goto LABEL_105;
  }
  return v11;
}

void *mlir::Type::dyn_cast<mlir::ShapedType>(void **a1)
{
  uint64_t v1 = *a1;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(**a1 + 8)) {
    return 0;
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
  return v1;
}

uint64_t mlir::mps::MatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v105 = a4;
  unint64_t v106 = a5;
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v97 = a6;
  v98[0] = 0;
  char v99 = 0;
  long long v100 = v16;
  unint64_t v17 = a5;
  uint64_t v101 = a9;
  uint64_t v102 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v97);
    if (v99) {
      char v99 = 0;
    }
    mlir::OperationName::OperationName(v98, "mps.matmul", 10, Context);
    char v99 = 1;
    unint64_t v17 = v106;
  }
  uint64_t v103 = a4;
  unint64_t v104 = a5;
  if (v17 <= 1)
  {
    uint64_t v19 = mlir::Float32Type::get(this, a2);
LABEL_25:
    uint64_t v29 = mlir::UnrankedTensorType::get(v19);
    goto LABEL_26;
  }
  mlir::UnknownLoc::get(this, a2);
  uint64_t v91 = *((void *)&v100 + 1);
  uint64_t v92 = v100;
  if (!(void)v100)
  {
    BOOL Value = 0;
    if (*((void *)&v100 + 1)) {
      goto LABEL_12;
    }
LABEL_14:
    BOOL v21 = 0;
    goto LABEL_15;
  }
  BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v92);
  if (!v91) {
    goto LABEL_14;
  }
LABEL_12:
  BOOL v21 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v91);
LABEL_15:
  uint64_t v22 = (int64x2_t *)(*(void *)(mlir::ValueRange::dereference_iterator(&v105, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = *(void *)(mlir::ValueRange::dereference_iterator(&v105, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  int v117 = v22;
  unint64_t v118 = v23;
  mlir::ValueRange::ValueRange(v110, (uint64_t)&v117, 2uLL);
  if (*(_UNKNOWN **)(v22->i64[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(void *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_24;
  }
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v22->i64[0] + 8))
  {
    uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v22->i64[0] + 8);
    uint64_t v95 = (uint64_t)v22;
    uint64_t v96 = v25;
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
    if (v26) {
      goto LABEL_19;
    }
LABEL_22:
    unint64_t v23 = 0;
    unint64_t v93 = 0;
    uint64_t v94 = v26;
    uint64_t v28 = v95;
    if (v95) {
      goto LABEL_29;
    }
    goto LABEL_23;
  }
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
  if (!v26) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
  unint64_t v93 = v23;
  uint64_t v94 = v27;
  uint64_t v28 = v95;
  if (v95) {
    goto LABEL_29;
  }
LABEL_23:
  if (!v23)
  {
LABEL_24:
    uint64_t v19 = v24;
    goto LABEL_25;
  }
LABEL_29:
  if (*(_UNKNOWN **)(*(void *)v28 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || *(_UNKNOWN **)(*(void *)v23 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    char v32 = mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)a2, a3, "invalid input types: ", &v95, ", ", (uint64_t *)&v93);
    uint64_t v29 = 0;
    goto LABEL_32;
  }
  int64_t v107 = v109;
  uint64_t v108 = 0x400000000;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v95);
  unint64_t v35 = v34;
  __int16 v36 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v93);
  int v117 = &v119;
  unint64_t v118 = 0x400000000;
  unint64_t v90 = v37;
  int64_t v114 = v116;
  unint64_t v115 = 0x400000000;
  unint64_t v89 = v35;
  if (v35 == 1)
  {
    uint64_t v38 = *ArgAttrsAttr;
    v119.i64[0] = 1;
    v119.i64[1] = v38;
    goto LABEL_38;
  }
  if (!v35)
  {
    int64x2_t v119 = vdupq_n_s64(1uLL);
LABEL_38:
    LODWORD(v118) = 2;
    goto LABEL_39;
  }
  unint64_t v42 = v35;
  size_t v43 = 8 * v35;
  char v111 = v113;
  uint64_t v112 = 0x400000000;
  __src = v36;
  if (v43 < 0x21)
  {
    int v44 = 0;
    long long v45 = v113;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, (uint64_t)(8 * v42) >> 3, 8);
    int v44 = v112;
    long long v45 = v111;
  }
  memcpy(&v45[8 * v44], ArgAttrsAttr, v43);
  uint64_t v51 = (int64x2_t *)v111;
  unint64_t v52 = v112 + (v43 >> 3);
  LODWORD(v112) = v112 + (v43 >> 3);
  if (v111 != v113)
  {
    if (v117 != &v119)
    {
      free(v117);
      uint64_t v51 = (int64x2_t *)v111;
      LODWORD(v52) = v112;
    }
    int v117 = v51;
    unint64_t v118 = __PAIR64__(HIDWORD(v112), v52);
    char v111 = v113;
    HIDWORD(v112) = 0;
    goto LABEL_80;
  }
  if (v118 >= v52)
  {
    if (v52) {
      memmove(v117, v113, 8 * v52);
    }
    goto LABEL_79;
  }
  if (HIDWORD(v118) >= v52)
  {
    if (v118)
    {
      uint64_t v86 = v118;
      memmove(v117, v113, 8 * v118);
      uint64_t v55 = v86;
      goto LABEL_77;
    }
  }
  else
  {
    LODWORD(v118) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, &v119, v52, 8);
  }
  uint64_t v55 = 0;
LABEL_77:
  if (v55 != v112) {
    memcpy((char *)v117 + 8 * v55, (char *)v111 + 8 * v55, 8 * v112 - 8 * v55);
  }
LABEL_79:
  LODWORD(v118) = v52;
LABEL_80:
  LODWORD(v112) = 0;
  if (v111 != v113) {
    free(v111);
  }
  __int16 v36 = __src;
  unint64_t v37 = v90;
  if (Value)
  {
    unint64_t v56 = &v117->i8[8 * v118];
    *((void *)v56 - 1) = ArgAttrsAttr[v43 / 8 - 2];
    *((void *)v56 - 2) = ArgAttrsAttr[v43 / 8 - 1];
  }
LABEL_39:
  if (v37 == 1)
  {
    uint64_t v40 = *v36;
    LODWORD(v115) = 0;
    if (HIDWORD(v115) > 1)
    {
      uint64_t v41 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, 2uLL, 8);
      uint64_t v41 = v115;
    }
    long long v49 = &v114[8 * v41];
    *(void *)long long v49 = v40;
    goto LABEL_53;
  }
  if (v37)
  {
    __srca = (char *)v36;
    size_t v46 = 8 * v37;
    char v111 = v113;
    uint64_t v112 = 0x400000000;
    if (8 * v37 < 0x21)
    {
      int v47 = 0;
      long long v48 = v113;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, (uint64_t)(8 * v37) >> 3, 8);
      int v47 = v112;
      long long v48 = v111;
    }
    memcpy(&v48[8 * v47], __srca, v46);
    uint64_t v53 = (char *)v111;
    unint64_t v50 = v112 + (v46 >> 3);
    LODWORD(v112) = v112 + (v46 >> 3);
    if (v111 != v113)
    {
      if (v114 != v116)
      {
        free(v114);
        uint64_t v53 = (char *)v111;
        LODWORD(v50) = v112;
      }
      int64_t v114 = v53;
      unint64_t v115 = __PAIR64__(HIDWORD(v112), v50);
      char v111 = v113;
      HIDWORD(v112) = 0;
      goto LABEL_90;
    }
    uint64_t v54 = v115;
    if (v115 >= v50)
    {
      if (v50) {
        memmove(v114, v113, 8 * v50);
      }
      goto LABEL_89;
    }
    if (HIDWORD(v115) >= v50)
    {
      if (v115)
      {
        memmove(v114, v113, 8 * v115);
        goto LABEL_87;
      }
    }
    else
    {
      LODWORD(v115) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, v50, 8);
    }
    uint64_t v54 = 0;
LABEL_87:
    if (v54 != v112) {
      memcpy(&v114[8 * v54], (char *)v111 + 8 * v54, 8 * v112 - 8 * v54);
    }
LABEL_89:
    LODWORD(v115) = v50;
LABEL_90:
    LODWORD(v112) = 0;
    if (v111 != v113)
    {
      free(v111);
      LODWORD(v50) = v115;
    }
    if (v21)
    {
      BOOL v57 = &v114[8 * v50];
      *((void *)v57 - 1) = *(void *)&__srca[v46 - 16];
      *((void *)v57 - 2) = *(void *)&__srca[v46 - 8];
    }
    goto LABEL_94;
  }
  LODWORD(v115) = 0;
  if (HIDWORD(v115) > 1)
  {
    uint64_t v39 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, v116, 2uLL, 8);
    uint64_t v39 = v115;
  }
  long long v49 = &v114[8 * v39];
  *(void *)long long v49 = 1;
LABEL_53:
  *((void *)v49 + 1) = 1;
  LODWORD(v50) = v115 + 2;
  LODWORD(v115) = v115 + 2;
LABEL_94:
  LODWORD(v108) = 0;
  if (v118 <= v50)
  {
    unsigned int v58 = 0;
    if (v50)
    {
      long long v62 = (uint64_t *)v114;
      uint64_t v63 = 8 * v50;
      do
      {
        uint64_t v64 = *v62;
        if (v58 >= HIDWORD(v108))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v58 + 1, 8);
          unsigned int v58 = v108;
        }
        *((void *)v107 + v58) = v64;
        unsigned int v58 = v108 + 1;
        LODWORD(v108) = v108 + 1;
        ++v62;
        v63 -= 8;
      }
      while (v63);
    }
  }
  else
  {
    unsigned int v58 = 0;
    long long v59 = (uint64_t *)v117;
    uint64_t v60 = 8 * v118;
    do
    {
      uint64_t v61 = *v59;
      if (v58 >= HIDWORD(v108))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v58 + 1, 8);
        unsigned int v58 = v108;
      }
      *((void *)v107 + v58) = v61;
      unsigned int v58 = v108 + 1;
      LODWORD(v108) = v108 + 1;
      ++v59;
      v60 -= 8;
    }
    while (v60);
  }
  int64_t v65 = (char *)v117;
  uint64_t v66 = v118;
  int64_t v67 = &v117->i8[8 * v118];
  long long v68 = v114;
  uint64_t v69 = v115;
  int64_t v70 = &v114[8 * v115];
  int64_t v71 = v107;
  long long v72 = (char *)v107 + 8 * v58;
  *((void *)v72 - 1) = *((void *)v70 - 1);
  uint64_t v73 = v70 - 16;
  *((void *)v72 - 2) = *((void *)v67 - 2);
  BOOL v74 = v67 - 16 == v65 || v73 == v68;
  if (!v74)
  {
    uint64_t v75 = 8 * v66 - 24;
    unint64_t v76 = &v71[v58 - 3];
    uint64_t v77 = 8 * v69 - 24;
    while (1)
    {
      uint64_t v78 = *(void *)&v65[v75];
      uint64_t v79 = *(void *)&v68[v77];
      if (v78 == 0x8000000000000000)
      {
        if (v79 <= 1) {
          uint64_t v78 = 0x8000000000000000;
        }
        else {
          uint64_t v78 = *(void *)&v68[v77];
        }
      }
      else if (v79 == 0x8000000000000000)
      {
        if (v78 <= 1) {
          uint64_t v78 = 0x8000000000000000;
        }
      }
      else if (v78 != v79 && v79 != 1)
      {
        BOOL v74 = v78 == 1;
        uint64_t v78 = *(void *)&v68[v77];
        if (!v74)
        {
          LODWORD(v108) = 0;
          unsigned __int8 v84 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "incompatible dimensions");
          unsigned __int8 v85 = v84;
          long long v68 = v114;
          uint64_t v83 = v85;
          if (v114 == v116) {
            goto LABEL_132;
          }
LABEL_131:
          free(v68);
          goto LABEL_132;
        }
      }
      *v76-- = v78;
      if (v75)
      {
        v75 -= 8;
        uint64_t v81 = v77;
        v77 -= 8;
        if (v81) {
          continue;
        }
      }
      break;
    }
  }
  if (v89 <= 1)
  {
    uint64_t v82 = *((void *)v72 - 1);
    LODWORD(v108) = --v58;
    v71[v58 - 1] = v82;
  }
  if (v90 <= 1) {
    LODWORD(v108) = v58 - 1;
  }
  uint64_t v83 = 1;
  if (v68 != v116) {
    goto LABEL_131;
  }
LABEL_132:
  if (v117 != &v119) {
    free(v117);
  }
  if (v83)
  {
    uint64_t v29 = mlir::RankedTensorType::get((uint64_t)v107, v108, v24, 0);
    char v32 = 1;
  }
  else
  {
    char v32 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid shape");
    uint64_t v29 = 0;
  }
  if (v107 != v109) {
    free(v107);
  }
LABEL_32:
  if (!v32) {
    return 0;
  }
LABEL_26:
  uint64_t v30 = *(unsigned int *)(a11 + 8);
  if (v30 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v30 + 1, 8);
    LODWORD(v30) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v30) = v29;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::anonymous namespace'::defaultInferReturnTypes(mlir::Float32Type *a1, _DWORD *a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v7 = mlir::Float32Type::get(a1, (mlir::MLIRContext *)a2);
    uint64_t v4 = mlir::UnrankedTensorType::get(v7);
    unsigned int v5 = a2[2];
    if (v5 < a2[3]) {
      goto LABEL_3;
    }
LABEL_5:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 4, v5 + 1, 8);
    unsigned int v5 = a2[2];
    goto LABEL_3;
  }
  uint64_t v4 = mlir::UnrankedTensorType::get(a3);
  unsigned int v5 = a2[2];
  if (v5 >= a2[3]) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(*(void *)a2 + 8 * v5) = v4;
  ++a2[2];
  return 1;
}

uint64_t mlir::mps::MatMulOp::verify(uint64_t **this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v3)
  {
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    unint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v6) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8);
  uint64_t v5 = (*this)[9];
  unint64_t v55 = v3;
  uint64_t v56 = v4;
  unint64_t v6 = *(void *)(*(void *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v6 + 8);
LABEL_6:
  v54[0] = v6;
  v54[1] = v7;
  if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(void *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return 1;
  }
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
  uint64_t v10 = v9;
  uint64_t v12 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v54);
  uint64_t v13 = v11;
  if (!v10)
  {
    uint64_t v14 = 1;
    if (v11) {
      goto LABEL_12;
    }
LABEL_23:
    uint64_t v19 = 1;
    uint64_t v20 = 1;
    if (v14 == 0x8000000000000000) {
      return v20;
    }
    goto LABEL_24;
  }
  if (v10 != 1)
  {
    v60[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    uint64_t ArgAttrsAttr = &ArgAttrsAttr[v10 - 1 + ((uint64_t)mlir::BoolAttr::getValue((mlir::BoolAttr *)v60) << 63 >> 63)];
  }
  uint64_t v14 = *ArgAttrsAttr;
  if (!v13) {
    goto LABEL_23;
  }
LABEL_12:
  if (v13 != 1)
  {
    uint64_t v15 = &v12[v13];
    unint64_t v16 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v16 = 0;
    }
    v60[0] = *(void *)(v16 + 8);
    BOOL Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)v60);
    uint64_t v18 = 0x1FFFFFFFFFFFFFFELL;
    if (Value) {
      uint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    uint64_t v12 = &v15[v18];
  }
  uint64_t v19 = *v12;
  uint64_t v20 = 1;
  if (v14 != 0x8000000000000000)
  {
LABEL_24:
    if (v19 != 0x8000000000000000 && v14 != v19)
    {
      unint64_t v52 = (const void **)"contracting dimensions differ ";
      __int16 v53 = 259;
      mlir::OpState::emitOpError(this, &v52, (uint64_t)v60);
      if (v60[0])
      {
        int v57 = 2;
        unsigned int v58 = (const char *)v14;
        uint64_t v22 = &v57;
        unint64_t v23 = (char *)v61;
        if (v62 >= v63)
        {
          unint64_t v44 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            int64_t v49 = (char *)&v57 - (unsigned char *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
            unint64_t v23 = (char *)v61;
            uint64_t v22 = (int *)((char *)v61 + v49);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v44, 24);
            uint64_t v22 = &v57;
            unint64_t v23 = (char *)v61;
          }
        }
        uint64_t v24 = &v23[24 * v62];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        uint64_t v26 = ++v62;
        if (v60[0])
        {
          int v57 = 3;
          unsigned int v58 = " & ";
          uint64_t v59 = 3;
          uint64_t v27 = &v57;
          uint64_t v28 = (char *)v61;
          if (v26 >= v63)
          {
            unint64_t v45 = v26 + 1;
            BOOL v46 = (char *)v61 + 24 * v26 > (char *)&v57;
            if (v61 <= &v57 && v46)
            {
              int64_t v50 = (char *)&v57 - (unsigned char *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
              uint64_t v28 = (char *)v61;
              uint64_t v27 = (int *)((char *)v61 + v50);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v45, 24);
              uint64_t v27 = &v57;
              uint64_t v28 = (char *)v61;
            }
          }
          uint64_t v29 = &v28[24 * v62];
          long long v30 = *(_OWORD *)v27;
          *((void *)v29 + 2) = *((void *)v27 + 2);
          *(_OWORD *)uint64_t v29 = v30;
          uint64_t v31 = ++v62;
          if (v60[0])
          {
            int v57 = 2;
            unsigned int v58 = (const char *)v19;
            char v32 = &v57;
            char v33 = (char *)v61;
            if (v31 >= v63)
            {
              unint64_t v47 = v31 + 1;
              BOOL v48 = (char *)v61 + 24 * v31 > (char *)&v57;
              if (v61 <= &v57 && v48)
              {
                int64_t v51 = (char *)&v57 - (unsigned char *)v61;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
                char v33 = (char *)v61;
                char v32 = (int *)((char *)v61 + v51);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
                char v32 = &v57;
                char v33 = (char *)v61;
              }
            }
            unint64_t v34 = &v33[24 * v62];
            long long v35 = *(_OWORD *)v32;
            *((void *)v34 + 2) = *((void *)v32 + 2);
            *(_OWORD *)unint64_t v34 = v35;
            ++v62;
          }
        }
      }
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v60);
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
      if (v69)
      {
        __int16 v36 = (void **)__p;
        if (__p)
        {
          unint64_t v37 = v68;
          uint64_t v38 = __p;
          if (v68 != __p)
          {
            do
              unint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            uint64_t v38 = __p;
          }
          long long v68 = v36;
          operator delete(v38);
        }
        uint64_t v39 = v65;
        if (v65)
        {
          uint64_t v40 = v66;
          uint64_t v41 = v65;
          if (v66 != v65)
          {
            do
            {
              size_t v43 = (void *)*--v40;
              unint64_t v42 = v43;
              *uint64_t v40 = 0;
              if (v43) {
                operator delete[](v42);
              }
            }
            while (v40 != v39);
            uint64_t v41 = v65;
          }
          uint64_t v66 = v39;
          operator delete(v41);
        }
        if (v61 != v64) {
          free(v61);
        }
      }
    }
  }
  return v20;
}

BOOL mlir::mps::MatMulOp::getTransposeRhs(mlir::mps::MatMulOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&v3);
}

uint64_t mlir::mps::verifySparseTensorHelper(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void (*a7)(void *__return_ptr, uint64_t, void *), uint64_t a8)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v73 = a6;
  uint64_t v74 = a5;
  uint64_t v13 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v13)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
    int64_t v71 = v13;
    uint64_t v72 = v14;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)) {
      return 1;
    }
  }
  else
  {
    int64_t v71 = 0;
    uint64_t v72 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)) {
      return 1;
    }
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
  if (v16)
  {
    uint64_t v17 = 8 * v16;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v17 -= 8;
      if (!v17) {
        goto LABEL_9;
      }
    }
    return 1;
  }
LABEL_9:
  uint64_t v18 = *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71) - 1;
  if (a4 == 2 && v74 != v18)
  {
    uint64_t v56 = "failed: sparse tensor shape is {0}x{1} while index_tensor1 shape is {2}";
    uint64_t v57 = 71;
    unsigned int v58 = &v66;
    uint64_t v59 = 3;
    uint64_t v60 = &unk_1EC9A4648;
    uint64_t v61 = &v74;
    unsigned int v62 = &unk_1EC9A4648;
    unsigned int v63 = &v73;
    uint64_t v64 = &unk_1EC9A47C8;
    int64_t v65 = &v71;
    uint64_t v66 = &v60;
    int64_t v67 = &v62;
    long long v68 = &v64;
    v69[0] = &v56;
    __int16 v70 = 263;
    a7(v75, a8, v69);
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
    if (v75[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
    }
    if (!v82) {
      return v19;
    }
    uint64_t v20 = (void **)__p;
    if (__p)
    {
      BOOL v21 = v81;
      uint64_t v22 = __p;
      if (v81 != __p)
      {
        do
          BOOL v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      uint64_t v81 = v20;
      operator delete(v22);
    }
    unint64_t v23 = v78;
    if (v78)
    {
      uint64_t v24 = v79;
      long long v25 = v78;
      if (v79 != v78)
      {
        do
        {
          uint64_t v27 = (void *)*--v24;
          uint64_t v26 = v27;
          *uint64_t v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        long long v25 = v78;
      }
      uint64_t v79 = v23;
      operator delete(v25);
    }
    uint64_t v40 = v76;
    if (v76 == v77) {
      return v19;
    }
LABEL_66:
    free(v40);
    return v19;
  }
  if (a4 != 1 || v73 == v18)
  {
    __int16 v36 = (void *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v36)
    {
      uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v36 + 8);
      uint64_t v54 = v36;
      uint64_t v55 = v37;
      uint64_t v38 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v38) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v38 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v38)
      {
LABEL_43:
        uint64_t v39 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v38 + 8);
        unint64_t v52 = v38;
        uint64_t v53 = v39;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54))
        {
LABEL_51:
          uint64_t v41 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
          if (v42)
          {
            uint64_t v43 = 8 * v42;
            while (*v41 != 0x8000000000000000)
            {
              ++v41;
              v43 -= 8;
              if (!v43) {
                goto LABEL_55;
              }
            }
          }
          else
          {
LABEL_55:
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52))
            {
              unint64_t v44 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
              if (v45)
              {
                uint64_t v46 = 8 * v45;
                while (*v44 != 0x8000000000000000)
                {
                  ++v44;
                  v46 -= 8;
                  if (!v46) {
                    goto LABEL_60;
                  }
                }
              }
              else
              {
LABEL_60:
                uint64_t v47 = *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
                if (v47 != *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52))
                {
                  int64_t v49 = (const char *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
                  int64_t v50 = (const char *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
                  int64_t v51 = v49;
                  llvm::formatv<mlir::Type,mlir::Type>("failed: index_tensor0 and sparse_values shape mismatch, {0} and {1}", &v51, &v50, &v56);
                  __int16 v70 = 263;
                  v69[0] = &v56;
                  a7(v75, a8, v69);
                  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v75);
                  return v19;
                }
              }
            }
          }
        }
        return 1;
      }
    }
    unint64_t v52 = v38;
    uint64_t v53 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v54)) {
      goto LABEL_51;
    }
    return 1;
  }
  uint64_t v56 = "failed: sparse tensor shape is {0}x{1} while index_tensor1 shape is {2}";
  uint64_t v57 = 71;
  unsigned int v58 = &v66;
  uint64_t v59 = 3;
  uint64_t v60 = &unk_1EC9A4648;
  uint64_t v61 = &v74;
  unsigned int v62 = &unk_1EC9A4648;
  unsigned int v63 = &v73;
  uint64_t v64 = &unk_1EC9A47C8;
  int64_t v65 = &v71;
  uint64_t v66 = &v60;
  int64_t v67 = &v62;
  long long v68 = &v64;
  v69[0] = &v56;
  __int16 v70 = 263;
  a7(v75, a8, v69);
  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
  if (v75[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
  }
  if (v82)
  {
    uint64_t v28 = (void **)__p;
    if (__p)
    {
      uint64_t v29 = v81;
      long long v30 = __p;
      if (v81 != __p)
      {
        do
          uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        long long v30 = __p;
      }
      uint64_t v81 = v28;
      operator delete(v30);
    }
    uint64_t v31 = v78;
    if (v78)
    {
      char v32 = v79;
      char v33 = v78;
      if (v79 != v78)
      {
        do
        {
          long long v35 = (void *)*--v32;
          unint64_t v34 = v35;
          *char v32 = 0;
          if (v35) {
            operator delete[](v34);
          }
        }
        while (v32 != v31);
        char v33 = v78;
      }
      uint64_t v79 = v31;
      operator delete(v33);
    }
    uint64_t v40 = v76;
    if (v76 != v77) {
      goto LABEL_66;
    }
  }
  return v19;
}

const char *llvm::formatv<mlir::Type,mlir::Type>@<X0>(const char *__s@<X0>, const char **a2@<X1>, const char **a3@<X2>, const char **a4@<X8>)
{
  unint64_t v6 = __s;
  if (__s) {
    __s = (const char *)strlen(__s);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  *a4 = v6;
  a4[1] = __s;
  a4[8] = (const char *)(a4 + 4);
  a4[2] = (const char *)(a4 + 8);
  a4[3] = (const char *)2;
  a4[4] = (const char *)&unk_1EC9A4768;
  a4[5] = v8;
  a4[6] = (const char *)&unk_1EC9A4768;
  a4[7] = v9;
  a4[9] = (const char *)(a4 + 6);
  return __s;
}

uint64_t mlir::mps::MaterializeSparseTensorOp::verify(uint64_t **this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  v26[0] = v3;
  v26[1] = v4;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
  uint64_t v6 = *ArgAttrsAttr;
  uint64_t v7 = ArgAttrsAttr[1];
  uint64_t v8 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) != 0 && (unint64_t)*((unsigned int *)v8 + 17) - 1 <= 1)
  {
    uint64_t v24 = (const void **)"failure: expected at least two operands to represent COO, CSR or CSC sparse formats.";
    __int16 v25 = 259;
    mlir::OpState::emitOpError(this, &v24, (uint64_t)v26);
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v10 = (void **)__p;
      if (__p)
      {
        uint64_t v11 = v32;
        uint64_t v12 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          uint64_t v12 = __p;
        }
        char v32 = v10;
        operator delete(v12);
      }
      uint64_t v13 = v29;
      if (v29)
      {
        uint64_t v14 = v30;
        uint64_t v15 = v29;
        if (v30 != v29)
        {
          do
          {
            uint64_t v17 = (void *)*--v14;
            uint64_t v16 = v17;
            void *v14 = 0;
            if (v17) {
              operator delete[](v16);
            }
          }
          while (v14 != v13);
          uint64_t v15 = v29;
        }
        long long v30 = v13;
        operator delete(v15);
      }
      if (v27 != &v28) {
        free(v27);
      }
    }
  }
  else
  {
    uint64_t v18 = (void *)v8[9];
    uint64_t v19 = v18[3];
    uint64_t v20 = v18[7];
    uint64_t v21 = v18[11];
    int v22 = *(_DWORD *)(v8[10] + 8);
    v26[0] = this;
    return mlir::mps::verifySparseTensorHelper(v19, v20, v21, v22, v6, v7, (void (*)(void *__return_ptr, uint64_t, void *))llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mps::MaterializeSparseTensorOp::verify(void)::$_0>, (uint64_t)v26);
  }
  return v9;
}

uint64_t mlir::mps::MaterializeSparseTensorOp::getStorageType(mlir::mps::MaterializeSparseTensorOp *this)
{
  return *(unsigned int *)(*(void *)(*(void *)this
                                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                                     + 64)
                         + 8);
}

uint64_t mlir::mps::HammingDistanceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v68[4] = *MEMORY[0x1E4F143B8];
  uint64_t v64 = a4;
  unint64_t v65 = a5;
  if (a7) {
    uint64_t v14 = *a7;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v56 = a6;
  v57[0] = 0;
  char v58 = 0;
  uint64_t v59 = v14;
  uint64_t v60 = a9;
  unint64_t v15 = a5;
  uint64_t v61 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v56);
    if (v58) {
      char v58 = 0;
    }
    mlir::OperationName::OperationName(v57, "mps.hamming_distance", 20, Context);
    char v58 = 1;
    unint64_t v15 = v65;
  }
  uint64_t v62 = a4;
  unint64_t v63 = a5;
  if (v15 >= 2)
  {
    uint64_t v17 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::HammingDistanceOpAdaptor::verify((uint64_t)&v56, v17))
    {
      uint64_t v51 = v59;
      uint64_t Value = mlir::IntegerType::get((uint64_t)this, 0x20u, 2u);
      if (v51) {
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v51);
      }
      uint64_t v19 = Value;
      unint64_t v20 = *(void *)(mlir::ValueRange::dereference_iterator(&v64, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v21 = mlir::ValueRange::dereference_iterator(&v64, 1);
      if (*(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(void *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        goto LABEL_32;
      }
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v20 + 8))
      {
        uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v20 + 8);
        unint64_t v54 = v20;
        uint64_t v55 = v23;
        uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
        if (v24) {
          goto LABEL_16;
        }
      }
      else
      {
        unint64_t v20 = 0;
        unint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
        if (v24)
        {
LABEL_16:
          uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
          unint64_t v52 = v22;
          uint64_t v53 = v25;
          if (!v20) {
            goto LABEL_32;
          }
LABEL_25:
          if (v22)
          {
            uint64_t v66 = v68;
            uint64_t v67 = 0x400000000;
            uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v54);
            unint64_t v32 = v31;
            uint64_t v33 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
            uint64_t v35 = v33;
            unint64_t v36 = v34;
            if (v32 <= v34) {
              unint64_t v37 = v34;
            }
            else {
              unint64_t v37 = v32;
            }
            if (v32 < 2)
            {
              uint64_t v38 = 1;
              if (v34 < 2) {
                goto LABEL_31;
              }
            }
            else
            {
              uint64_t v38 = *(void *)(ArgAttrsAttr + 8 * v32 - 16);
              if (v34 < 2)
              {
LABEL_31:
                uint64_t v39 = 1;
LABEL_39:
                uint64_t v43 = v67;
                if (v37 != v67)
                {
                  if (v37 >= v67)
                  {
                    if (v37 > HIDWORD(v67))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v37, 8);
                      uint64_t v43 = v67;
                    }
                    if (v37 != v43) {
                      bzero((char *)v66 + 8 * v43, 8 * (v37 - v43));
                    }
                  }
                  LODWORD(v67) = v37;
                  LODWORD(v43) = v37;
                }
                unint64_t v44 = v66;
                if ((uint64_t)v37 >= 1)
                {
                  uint64_t v45 = (char *)v66 + 8 * v37;
                  *((void *)v45 - 1) = v39;
                  if (v37 != 1)
                  {
                    *((void *)v45 - 2) = v38;
                    if (v37 >= 3)
                    {
                      unint64_t v46 = v36 - 3;
                      unint64_t v47 = v32 - 3;
                      do
                      {
                        if ((v47 & 0x8000000000000000) != 0)
                        {
                          if ((v46 & 0x8000000000000000) != 0) {
                            uint64_t v48 = 1;
                          }
                          else {
                            uint64_t v48 = *(void *)(v35 + 8 * v46);
                          }
                        }
                        else
                        {
                          uint64_t v48 = *(void *)(ArgAttrsAttr + 8 * v47);
                          if ((v46 & 0x8000000000000000) == 0)
                          {
                            if (v48 == 0x8000000000000000) {
                              uint64_t v50 = *(void *)(v35 + 8 * v46);
                            }
                            else {
                              uint64_t v50 = *(void *)(ArgAttrsAttr + 8 * v47);
                            }
                            if (*(void *)(v35 + 8 * v46) == 1) {
                              uint64_t v50 = *(void *)(ArgAttrsAttr + 8 * v47);
                            }
                            if (v48 == 1) {
                              uint64_t v48 = *(void *)(v35 + 8 * v46);
                            }
                            else {
                              uint64_t v48 = v50;
                            }
                          }
                        }
                        v44[v37 - 3] = v48;
                        --v46;
                        uint64_t v49 = v37 - 3;
                        --v37;
                        --v47;
                      }
                      while (v49 > 0);
                    }
                  }
                }
                uint64_t v40 = mlir::RankedTensorType::get((uint64_t)v44, v43, v19, 0);
                if (v66 != v68) {
                  free(v66);
                }
                goto LABEL_33;
              }
            }
            uint64_t v39 = *(void *)(v33 + 8 * v34 - 16);
            goto LABEL_39;
          }
LABEL_32:
          uint64_t v40 = mlir::UnrankedTensorType::get(v19);
LABEL_33:
          uint64_t v41 = *(unsigned int *)(a11 + 8);
          if (v41 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
            LODWORD(v41) = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v41) = v40;
          goto LABEL_36;
        }
      }
      unint64_t v22 = 0;
      unint64_t v52 = 0;
      uint64_t v53 = v24;
      if (!v20) {
        goto LABEL_32;
      }
      goto LABEL_25;
    }
  }
  uint64_t v26 = mlir::IntegerType::get((uint64_t)this, 0x20u, 2u);
  if (!v26) {
    uint64_t v26 = mlir::Float32Type::get(this, v27);
  }
  uint64_t v28 = mlir::UnrankedTensorType::get(v26);
  unsigned int v29 = *(_DWORD *)(a11 + 8);
  if (v29 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v29 + 1, 8);
    unsigned int v29 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v29) = v28;
LABEL_36:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::HammingDistanceOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    v14[0] = *(void *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    uint64_t v12 = "'mps.hamming_distance' op requires attribute 'resultElementType'";
    __int16 v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    }
    if (v21)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v20;
        uint64_t v6 = __p;
        if (v20 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        unint64_t v20 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v17;
      if (v17)
      {
        uint64_t v8 = v18;
        uint64_t v9 = v17;
        if (v18 != v17)
        {
          do
          {
            uint64_t v11 = (void *)*--v8;
            uint64_t v10 = v11;
            *uint64_t v8 = 0;
            if (v11) {
              operator delete[](v10);
            }
          }
          while (v8 != v7);
          uint64_t v9 = v17;
        }
        uint64_t v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16) {
        free(v15);
      }
    }
  }
  return v2;
}

uint64_t mlir::mps::HammingDistanceOp::verify(uint64_t **this)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  v79[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v79);
  BOOL isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&Value);
  int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value);
  if (!isSignedInteger && (IntOrFloatBitWidth == 16 || IntOrFloatBitWidth == 32))
  {
    uint64_t v4 = (*this)[9];
    unint64_t v5 = *(void *)(*(void *)(v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v5)
    {
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v5 + 8);
      uint64_t v7 = (*this)[9];
      unint64_t v71 = v5;
      uint64_t v72 = v6;
      unint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v8) {
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v71 = 0;
      uint64_t v72 = 0;
      unint64_t v8 = *(void *)(*(void *)(v4 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
LABEL_6:
        uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v8 + 8);
        unint64_t v5 = v71;
        unint64_t v69 = v8;
        uint64_t v70 = v9;
        if (!v71) {
          return 1;
        }
        goto LABEL_24;
      }
    }
    unint64_t v69 = v8;
    uint64_t v70 = 0;
    if (!v5) {
      return 1;
    }
LABEL_24:
    BOOL v19 = *(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
       || v8 == 0;
    if (v19
      || *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      return 1;
    }
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
    unint64_t v22 = v21;
    uint64_t v23 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    if (v22 <= v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = v22;
    }
    if (v22)
    {
      uint64_t v26 = *(void *)(ArgAttrsAttr + 8 * v22 - 8);
      if (v24) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v26 = 1;
      if (v24)
      {
LABEL_34:
        uint64_t v27 = *(void *)(v23 + 8 * v24 - 8);
        if (v27 == 0x8000000000000000)
        {
LABEL_41:
          if (v25 < 3) {
            return 1;
          }
          uint64_t v31 = v25 - 2;
          unint64_t v32 = v22 - 3;
          for (unint64_t i = v24 - 3; ; --i)
          {
            if ((v32 & 0x8000000000000000) != 0)
            {
              uint64_t v34 = 1;
              if ((i & 0x8000000000000000) == 0)
              {
LABEL_47:
                uint64_t v35 = *(void *)(v23 + 8 * i);
                if (v34 == 0x8000000000000000) {
                  goto LABEL_44;
                }
                goto LABEL_51;
              }
            }
            else
            {
              uint64_t v34 = *(void *)(ArgAttrsAttr + 8 * v32);
              if ((i & 0x8000000000000000) == 0) {
                goto LABEL_47;
              }
            }
            uint64_t v35 = 1;
            if (v34 == 0x8000000000000000) {
              goto LABEL_44;
            }
LABEL_51:
            if (v35 != 1 && v35 != 0x8000000000000000 && v34 != 1 && v34 != v35)
            {
              v73[0] = (const void **)"Leading n-2 dimensions not broadcast compatible: ";
              __int16 v74 = 259;
              mlir::OpState::emitOpError(this, v73, (uint64_t)v79);
              if (v79[0])
              {
                int v76 = 3;
                uint64_t v77 = "LHS = ";
                uint64_t v78 = 6;
                unint64_t v36 = &v76;
                unint64_t v37 = (char *)v80;
                if (v81 >= v82)
                {
                  unint64_t v60 = v81 + 1;
                  if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                  {
                    int64_t v65 = (char *)&v76 - (unsigned char *)v80;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
                    unint64_t v37 = (char *)v80;
                    unint64_t v36 = (int *)((char *)v80 + v65);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
                    unint64_t v36 = &v76;
                    unint64_t v37 = (char *)v80;
                  }
                }
                uint64_t v38 = &v37[24 * v81];
                long long v39 = *(_OWORD *)v36;
                *((void *)v38 + 2) = *((void *)v36 + 2);
                *(_OWORD *)uint64_t v38 = v39;
                ++v81;
                if (v79[0])
                {
                  uint64_t v40 = &v76;
                  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v71);
                  uint64_t v41 = (char *)v80;
                  if (v81 >= v82)
                  {
                    unint64_t v61 = v81 + 1;
                    if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                    {
                      int64_t v66 = (char *)&v76 - (unsigned char *)v80;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
                      uint64_t v41 = (char *)v80;
                      uint64_t v40 = (int *)((char *)v80 + v66);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
                      uint64_t v40 = &v76;
                      uint64_t v41 = (char *)v80;
                    }
                  }
                  uint64_t v42 = &v41[24 * v81];
                  long long v43 = *(_OWORD *)v40;
                  *((void *)v42 + 2) = *((void *)v40 + 2);
                  *(_OWORD *)uint64_t v42 = v43;
                  uint64_t v44 = ++v81;
                  if (v79[0])
                  {
                    int v76 = 3;
                    v77 = " uint64_t RHS = ";
                    uint64_t v78 = 7;
                    uint64_t v45 = &v76;
                    unint64_t v46 = (char *)v80;
                    if (v44 >= v82)
                    {
                      unint64_t v62 = v44 + 1;
                      BOOL v63 = (char *)v80 + 24 * v44 > (char *)&v76;
                      if (v80 <= &v76 && v63)
                      {
                        int64_t v67 = (char *)&v76 - (unsigned char *)v80;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                        unint64_t v46 = (char *)v80;
                        uint64_t v45 = (int *)((char *)v80 + v67);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
                        uint64_t v45 = &v76;
                        unint64_t v46 = (char *)v80;
                      }
                    }
                    unint64_t v47 = &v46[24 * v81];
                    long long v48 = *(_OWORD *)v45;
                    *((void *)v47 + 2) = *((void *)v45 + 2);
                    *(_OWORD *)unint64_t v47 = v48;
                    ++v81;
                    if (v79[0])
                    {
                      uint64_t v49 = &v76;
                      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v69);
                      uint64_t v50 = (char *)v80;
                      if (v81 >= v82)
                      {
                        unint64_t v64 = v81 + 1;
                        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
                        {
                          int64_t v68 = (char *)&v76 - (unsigned char *)v80;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
                          uint64_t v50 = (char *)v80;
                          uint64_t v49 = (int *)((char *)v80 + v68);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
                          uint64_t v49 = &v76;
                          uint64_t v50 = (char *)v80;
                        }
                      }
                      uint64_t v51 = &v50[24 * v81];
                      long long v52 = *(_OWORD *)v49;
                      *((void *)v51 + 2) = *((void *)v49 + 2);
                      *(_OWORD *)uint64_t v51 = v52;
                      ++v81;
                    }
                  }
                }
              }
              uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
              if (v79[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
              }
              if (v88)
              {
                uint64_t v53 = (void **)__p;
                if (__p)
                {
                  unint64_t v54 = v87;
                  uint64_t v55 = __p;
                  if (v87 != __p)
                  {
                    do
                      unint64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                    while (v54 != v53);
                    uint64_t v55 = __p;
                  }
                  int64_t v87 = v53;
                  operator delete(v55);
                }
                uint64_t v14 = v84;
                if (v84)
                {
                  uint64_t v56 = v85;
                  uint64_t v16 = v84;
                  if (v85 == v84)
                  {
LABEL_79:
                    unsigned __int8 v85 = v14;
                    operator delete(v16);
                    goto LABEL_80;
                  }
                  do
                  {
                    char v58 = (void *)*--v56;
                    uint64_t v57 = v58;
                    *uint64_t v56 = 0;
                    if (v58) {
                      operator delete[](v57);
                    }
                  }
                  while (v56 != v14);
LABEL_78:
                  uint64_t v16 = v84;
                  goto LABEL_79;
                }
                goto LABEL_80;
              }
              return v10;
            }
LABEL_44:
            --v31;
            --v32;
            if (v31 < 1) {
              return 1;
            }
          }
        }
LABEL_38:
        if (v26 != 0x8000000000000000 && v26 != v27)
        {
          v73[0] = (const void **)"Incompatible last dimension shapes: LHS = ";
          __int16 v74 = 259;
          mlir::OpState::emitOpError(this, v73, (uint64_t)v79);
          uint64_t v28 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)v79, (uint64_t *)&v71);
          uint64_t v29 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v28, " RHS = ");
          uint64_t v30 = mlir::InFlightDiagnostic::append<mlir::Type &>(v29, (uint64_t *)&v69);
          uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v30);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v79);
          return v10;
        }
        goto LABEL_41;
      }
    }
    uint64_t v27 = 1;
    goto LABEL_38;
  }
  __int16 v74 = 259;
  mlir::OpState::emitOpError(this, v73, (uint64_t)v79);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v79);
  if (v79[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
  }
  if (v88)
  {
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v87;
      __int16 v13 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        __int16 v13 = __p;
      }
      int64_t v87 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v84;
    if (v84)
    {
      unint64_t v15 = v85;
      uint64_t v16 = v84;
      if (v85 == v84) {
        goto LABEL_79;
      }
      do
      {
        uint64_t v18 = (void *)*--v15;
        uint64_t v17 = v18;
        *unint64_t v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
      goto LABEL_78;
    }
LABEL_80:
    if (v80 != v83) {
      free(v80);
    }
  }
  return v10;
}

uint64_t mlir::mps::TransposeOp::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    uint64_t ElementTypeOrSelf = mlir::Float32Type::get(a1, a2);
    goto LABEL_9;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  uint64_t v61 = a9;
  uint64_t v62 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.transpose", 13, Context);
    char v60 = 1;
  }
  BOOL v63 = a4;
  unint64_t v64 = a5;
  if (a5 <= 2)
  {
    uint64_t v51 = a4;
    uint64_t v52 = 0;
    uint64_t v14 = mlir::ValueRange::dereference_iterator(&v51, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v14);
LABEL_9:
    uint64_t v16 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v17 = *(unsigned int *)(a11 + 8);
    if (v17 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v17) = v16;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  uint64_t v51 = a4;
  uint64_t v52 = 0;
  uint64_t v18 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v51, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v18) {
    uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  }
  else {
    uint64_t v19 = 0;
  }
  v47[0] = (uint64_t)v18;
  v47[1] = v19;
  v56[0] = &v57;
  v56[1] = (void *)0x100000000;
  v54[0] = &v55;
  v54[1] = (void *)0x100000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v47)) {
    goto LABEL_24;
  }
  uint64_t v51 = v63;
  uint64_t v52 = 1;
  uint64_t v51 = (void *)mlir::ValueRange::offset_base(&v51, 1);
  uint64_t v52 = 0;
  uint64_t v20 = mlir::ValueRange::dereference_iterator(&v51, 0);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
  uint64_t v22 = v21;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  long long v48 = &v51;
  *(void *)&long long v49 = v20;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v49);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v48, DefiningOp))
  {
LABEL_21:
    uint64_t v51 = v63;
    uint64_t v52 = 2;
    uint64_t v51 = (void *)mlir::ValueRange::offset_base(&v51, 2);
    uint64_t v52 = 0;
    uint64_t v24 = mlir::ValueRange::dereference_iterator(&v51, 0);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    uint64_t v26 = v25;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    long long v48 = &v51;
    *(void *)&long long v49 = v24;
    uint64_t v27 = mlir::Value::getDefiningOp((mlir::Value *)&v49);
    if (v27 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v48, v27))
    {
    }
    else if (!mlir::emitOptionalError<char const(&)[39]>(0, 0, "axes is not a constant"))
    {
      goto LABEL_24;
    }
    uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    uint64_t v34 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
    unint64_t v36 = (unsigned char *)(v34 + 8 * v35);
    uint64_t v51 = v53;
    uint64_t v52 = 0x600000000;
    uint64_t v37 = v36 - ArgAttrsAttr;
    if ((unint64_t)(v36 - ArgAttrsAttr) < 0x31)
    {
      int v38 = 0;
      long long v39 = v53;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, v37 >> 3, 8);
      int v38 = v52;
      long long v39 = v51;
    }
    if (v36 != ArgAttrsAttr)
    {
      memcpy(&v39[8 * v38], ArgAttrsAttr, v36 - ArgAttrsAttr);
      int v38 = v52;
      long long v39 = v51;
    }
    uint64_t v40 = v38 + ((unint64_t)v37 >> 3);
    LODWORD(v52) = v40;
    uint64_t v41 = 8 * *(void *)v56[0];
    uint64_t v42 = 8 * *(void *)v54[0];
    uint64_t v43 = *(void *)&v39[v41];
    *(void *)&v39[v41] = *(void *)&v39[v42];
    *(void *)&v39[v42] = v43;
    *(void *)&long long v49 = v39;
    *((void *)&v49 + 1) = v40;
    char v50 = 1;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47);
    uint64_t v45 = mlir::ShapedType::cloneWith(v47, &v49, OperandRange);
    uint64_t v46 = *(unsigned int *)(a11 + 8);
    if (v46 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
      LODWORD(v46) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v46) = v45;
    ++*(_DWORD *)(a11 + 8);
    if (v51 != v53) {
      free(v51);
    }
    goto LABEL_27;
  }
  if (mlir::emitOptionalError<char const(&)[39]>(0, 0, "axes is not a constant")) {
    goto LABEL_21;
  }
LABEL_24:
  uint64_t v51 = v63;
  uint64_t v52 = 0;
  uint64_t v28 = mlir::ValueRange::dereference_iterator(&v51, 0);
  uint64_t v29 = mlir::getElementTypeOrSelf(v28);
  uint64_t v30 = mlir::UnrankedTensorType::get(v29);
  uint64_t v31 = *(unsigned int *)(a11 + 8);
  if (v31 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v31) = v30;
  ++*(_DWORD *)(a11 + 8);
LABEL_27:
  if (v54[0] != &v55) {
    free(v54[0]);
  }
  if (v56[0] != &v57) {
    free(v56[0]);
  }
  return 1;
}

void *llvm::SmallVector<long long,6u>::SmallVector<long long const*,void>(void *a1, unsigned char *a2, unsigned char *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x600000000;
  int64_t v6 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x31)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 3, 8);
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (a2 == a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v7 = 0;
  if (a2 != a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    unsigned int v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 3);
  return a1;
}

uint64_t mlir::mps::PermuteOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  v41[0] = a4;
  v41[1] = a5;
  if (a5 == 2)
  {
    unint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(v41, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = mlir::ValueRange::dereference_iterator(v41, 1);
    unint64_t v15 = *(void **)(*(void *)v13 + 136);
    if (v15 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v15 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v17 = v13;
    }
    else
    {
      unint64_t v17 = 0;
    }
    unint64_t v36 = v17;
    if (!v17)
    {
      char v24 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot permute a non-tensor type");
      uint64_t v25 = 0;
      goto LABEL_35;
    }
    uint64_t v18 = v14;
    __b = v44;
    uint64_t v43 = 0x400000000;
    unint64_t v40 = v17;
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v40))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
      unint64_t NumElements = (unint64_t)v19;
      long long v39 = v19;
      uint64_t v21 = v43;
      BOOL v22 = (unint64_t)v19 >= v43;
      if (v19 == (char *)v43) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v45 = (void *)(*(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
      unint64_t NumElements = mlir::ShapedType::getNumElements(Value, v27);
      long long v39 = (char *)NumElements;
      uint64_t v21 = v43;
      BOOL v22 = NumElements >= v43;
      if (NumElements == v43) {
        goto LABEL_24;
      }
    }
    if (v22)
    {
      if (NumElements > HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v44, NumElements, 8);
        uint64_t v21 = v43;
      }
      if (NumElements != v21) {
        bzero((char *)__b + 8 * v21, 8 * (NumElements - v21));
      }
    }
    LODWORD(v43) = NumElements;
LABEL_24:
    uint64_t v45 = v47;
    uint64_t v46 = 0x400000000;
    if (*(_UNKNOWN **)(*(void *)v40 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || !mlir::matchConstantWithIntVector<long long>(v18, (uint64_t)&v45))
    {
      if (NumElements) {
        memset_pattern16(__b, &unk_1811000C0, 8 * NumElements);
      }
      char v30 = 1;
      uint64_t v31 = v45;
      if (v45 == v47)
      {
LABEL_32:
        unint64_t v32 = __b;
        if (v30)
        {
          uint64_t v33 = v43;
          uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v36);
          uint64_t v25 = mlir::RankedTensorType::get((uint64_t)v32, v33, ElementType, 0);
          char v24 = 1;
          unint64_t v32 = __b;
          if (__b == v44) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v25 = 0;
          char v24 = 0;
          if (__b == v44)
          {
LABEL_35:
            if (!v24) {
              return 0;
            }
            uint64_t v35 = *(unsigned int *)(a11 + 8);
            if (v35 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
              LODWORD(v35) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v35) = v25;
            ++*(_DWORD *)(a11 + 8);
            return 1;
          }
        }
        free(v32);
        goto LABEL_35;
      }
    }
    else
    {
      if (NumElements == v46)
      {
        v37[0] = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v40);
        v37[1] = v28;
        char v38 = 1;
      }
      else
      {
        v37[0] = (char *)v46;
        char v29 = mlir::emitOptionalError<char const(&)[37],char const(&)[14],unsigned long,char const(&)[5],unsigned long &>(a2, a3, "perm tensor length must equal input ", "tensor rank, ", v37, " != ", &v39);
      }
      char v30 = v29;
      uint64_t v31 = v45;
      if (v45 == v47) {
        goto LABEL_32;
      }
    }
    free(v31);
    goto LABEL_32;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::PermuteOp::verify(uint64_t **this)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(*(void *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v3 = 0;
  }
  unint64_t v78 = v3;
  unint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v7 = *(void **)(*(void *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v6 = 0;
  }
  unint64_t v77 = v6;
  if (v3)
  {
    if (v6)
    {
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v78) || !mlir::TensorType::hasRank((mlir::TensorType *)&v77)) {
        return 1;
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v78);
      uint64_t v10 = v9;
      uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v77);
      if ((char *)mlir::ShapedType::getNumElements(Value, v12) == v10)
      {
        unsigned int v82 = (char **)&v84;
        uint64_t v83 = 0x400000000;
        if (mlir::matchConstantWithIntVector<long long>(*(void *)((*this)[9] + 56), (uint64_t)&v82))
        {
          uint64_t v13 = (*this)[3];
          v74[0] = 0;
          v74[16] = 0;
        }
        else
        {
          uint64_t v14 = 1;
        }
        char v60 = v82;
        if (v82 == (char **)&v84) {
          return v14;
        }
LABEL_77:
        free(v60);
        return v14;
      }
      v75[0] = (const void **)"perm tensor length must equal input tensor rank, ";
      __int16 v76 = 259;
      mlir::OpState::emitOpError(this, v75, (uint64_t)&v82);
      uint64_t v37 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v77);
      uint64_t NumElements = mlir::ShapedType::getNumElements(v37, v38);
      if (v82)
      {
        int v79 = 2;
        unint64_t v80 = (const char *)NumElements;
        unint64_t v40 = &v79;
        uint64_t v41 = (char *)v85;
        if (v86 >= v87)
        {
          unint64_t v64 = v86 + 1;
          if (v85 <= &v79 && (char *)v85 + 24 * v86 > (char *)&v79)
          {
            int64_t v71 = (char *)&v79 - (unsigned char *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v64, 24);
            uint64_t v41 = (char *)v85;
            unint64_t v40 = (int *)((char *)v85 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v64, 24);
            unint64_t v40 = &v79;
            uint64_t v41 = (char *)v85;
          }
        }
        uint64_t v42 = &v41[24 * v86];
        long long v43 = *(_OWORD *)v40;
        *((void *)v42 + 2) = *((void *)v40 + 2);
        *(_OWORD *)uint64_t v42 = v43;
        uint64_t v44 = ++v86;
        if (v82)
        {
          int v79 = 3;
          unint64_t v80 = " != ";
          uint64_t v81 = 4;
          uint64_t v45 = &v79;
          uint64_t v46 = (char *)v85;
          if (v44 >= v87)
          {
            unint64_t v65 = v44 + 1;
            BOOL v66 = (char *)v85 + 24 * v44 > (char *)&v79;
            if (v85 <= &v79 && v66)
            {
              int64_t v72 = (char *)&v79 - (unsigned char *)v85;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v65, 24);
              uint64_t v46 = (char *)v85;
              uint64_t v45 = (int *)((char *)v85 + v72);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v65, 24);
              uint64_t v45 = &v79;
              uint64_t v46 = (char *)v85;
            }
          }
          unint64_t v47 = &v46[24 * v86];
          long long v48 = *(_OWORD *)v45;
          *((void *)v47 + 2) = *((void *)v45 + 2);
          *(_OWORD *)unint64_t v47 = v48;
          uint64_t v49 = ++v86;
          if (v82)
          {
            int v79 = 5;
            unint64_t v80 = v10;
            char v50 = &v79;
            uint64_t v51 = (char *)v85;
            if (v49 >= v87)
            {
              unint64_t v67 = v49 + 1;
              BOOL v68 = (char *)v85 + 24 * v49 > (char *)&v79;
              if (v85 <= &v79 && v68)
              {
                int64_t v73 = (char *)&v79 - (unsigned char *)v85;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v67, 24);
                uint64_t v51 = (char *)v85;
                char v50 = (int *)((char *)v85 + v73);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v67, 24);
                char v50 = &v79;
                uint64_t v51 = (char *)v85;
              }
            }
            uint64_t v52 = &v51[24 * v86];
            long long v53 = *(_OWORD *)v50;
            *((void *)v52 + 2) = *((void *)v50 + 2);
            *(_OWORD *)uint64_t v52 = v53;
            ++v86;
          }
        }
      }
      uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (v93)
      {
        unint64_t v54 = (void **)__p;
        if (__p)
        {
          uint64_t v55 = v92;
          uint64_t v56 = __p;
          if (v92 != __p)
          {
            do
              uint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
            while (v55 != v54);
            uint64_t v56 = __p;
          }
          uint64_t v92 = v54;
          operator delete(v56);
        }
        BOOL v22 = v89;
        if (v89)
        {
          uint64_t v57 = v90;
          char v24 = v89;
          if (v90 == v89) {
            goto LABEL_75;
          }
          do
          {
            uint64_t v59 = (void *)*--v57;
            uint64_t v58 = v59;
            *uint64_t v57 = 0;
            if (v59) {
              operator delete[](v58);
            }
          }
          while (v57 != v22);
          goto LABEL_74;
        }
        goto LABEL_76;
      }
    }
    else
    {
      __int16 v76 = 259;
      mlir::OpState::emitOpError(this, v75, (uint64_t)&v82);
      if (v82)
      {
        uint64_t v27 = &v79;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v28 = (char *)v85;
        if (v86 >= v87)
        {
          unint64_t v63 = v86 + 1;
          if (v85 <= &v79 && (char *)v85 + 24 * v86 > (char *)&v79)
          {
            int64_t v70 = (char *)&v79 - (unsigned char *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v63, 24);
            uint64_t v28 = (char *)v85;
            uint64_t v27 = (int *)((char *)v85 + v70);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v63, 24);
            uint64_t v27 = &v79;
            uint64_t v28 = (char *)v85;
          }
        }
        char v29 = &v28[24 * v86];
        long long v30 = *(_OWORD *)v27;
        *((void *)v29 + 2) = *((void *)v27 + 2);
        *(_OWORD *)char v29 = v30;
        ++v86;
      }
      uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (v93)
      {
        uint64_t v31 = (void **)__p;
        if (__p)
        {
          unint64_t v32 = v92;
          uint64_t v33 = __p;
          if (v92 != __p)
          {
            do
              unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            uint64_t v33 = __p;
          }
          uint64_t v92 = v31;
          operator delete(v33);
        }
        BOOL v22 = v89;
        if (v89)
        {
          uint64_t v34 = v90;
          char v24 = v89;
          if (v90 == v89) {
            goto LABEL_75;
          }
          do
          {
            unint64_t v36 = (void *)*--v34;
            uint64_t v35 = v36;
            void *v34 = 0;
            if (v36) {
              operator delete[](v35);
            }
          }
          while (v34 != v22);
          goto LABEL_74;
        }
        goto LABEL_76;
      }
    }
  }
  else
  {
    __int16 v76 = 259;
    mlir::OpState::emitOpError(this, v75, (uint64_t)&v82);
    if (v82)
    {
      unint64_t v15 = &v79;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v16 = (char *)v85;
      if (v86 >= v87)
      {
        unint64_t v62 = v86 + 1;
        if (v85 <= &v79 && (char *)v85 + 24 * v86 > (char *)&v79)
        {
          int64_t v69 = (char *)&v79 - (unsigned char *)v85;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v62, 24);
          uint64_t v16 = (char *)v85;
          unint64_t v15 = (int *)((char *)v85 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, v88, v62, 24);
          unint64_t v15 = &v79;
          uint64_t v16 = (char *)v85;
        }
      }
      unint64_t v17 = &v16[24 * v86];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)unint64_t v17 = v18;
      ++v86;
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
    if (v82) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
    }
    if (v93)
    {
      uint64_t v19 = (void **)__p;
      if (__p)
      {
        uint64_t v20 = v92;
        uint64_t v21 = __p;
        if (v92 != __p)
        {
          do
            uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        uint64_t v92 = v19;
        operator delete(v21);
      }
      BOOL v22 = v89;
      if (v89)
      {
        uint64_t v23 = v90;
        char v24 = v89;
        if (v90 == v89) {
          goto LABEL_75;
        }
        do
        {
          uint64_t v26 = (void *)*--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
LABEL_74:
        char v24 = v89;
LABEL_75:
        unint64_t v90 = v22;
        operator delete(v24);
      }
LABEL_76:
      char v60 = (char **)v85;
      if (v85 == v88) {
        return v14;
      }
      goto LABEL_77;
    }
  }
  return v14;
}

uint64_t mlir::mps::anonymous namespace'::permuteShapeWithAxes(uint64_t a1, char a2, uint64_t a3, void *a4, char **a5, uint64_t a6, char *a7)
{
  uint64_t v28 = 0;
  unint64_t v29 = (unint64_t)a7;
  uint64_t v26 = &v27;
  uint64_t v27 = 0;
  if (!a6)
  {
LABEL_20:
    uint64_t v21 = 1;
    goto LABEL_21;
  }
  unsigned int v7 = a5;
  uint64_t v11 = 0;
  uint64_t v12 = &a5[a6];
  while (1)
  {
    uint64_t v13 = *v7;
    int64_t v14 = (int64_t)&(*v7)[v29 & ((uint64_t)*v7 >> 63)];
    char v24 = (char *)v14;
    uint64_t v25 = v13;
    if (v29 <= v14)
    {
      uint64_t v20 = mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[7],char const(&)[15],unsigned long &>(a1, a2, "invalid axis (", &v25, ") for ", "input of rank ", (char **)&v29);
      goto LABEL_19;
    }
    unint64_t v15 = v27;
    uint64_t v16 = &v27;
    unint64_t v17 = &v27;
    if (v27) {
      break;
    }
LABEL_12:
    uint64_t v19 = (uint64_t *)operator new(0x28uLL);
    v19[4] = v14;
    *uint64_t v19 = 0;
    v19[1] = 0;
    void v19[2] = (uint64_t)v17;
    *uint64_t v16 = v19;
    if (*v26)
    {
      uint64_t v26 = (uint64_t **)*v26;
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v27, *v16);
      ++v28;
      if (a4) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v27, v19);
      ++v28;
      if (a4)
      {
LABEL_16:
        if (*(unsigned char *)(a3 + 16)) {
          *(void *)(*a4 + 8 * v11) = *(void *)(*(void *)a3 + 8 * v14);
        }
      }
    }
    ++v11;
    if (++v7 == v12) {
      goto LABEL_20;
    }
  }
  while (1)
  {
    while (1)
    {
      unint64_t v17 = (uint64_t **)v15;
      uint64_t v18 = v15[4];
      if (v14 >= v18) {
        break;
      }
      unint64_t v15 = *v17;
      uint64_t v16 = v17;
      if (!*v17) {
        goto LABEL_12;
      }
    }
    if (v18 >= v14) {
      break;
    }
    unint64_t v15 = v17[1];
    if (!v15)
    {
      uint64_t v16 = v17 + 1;
      goto LABEL_12;
    }
  }
  uint64_t v20 = mlir::emitOptionalError<char const(&)[37],char const(&)[6],unsigned long &,char const(&)[13]>(a1, a2, "axes in perm tensor must be unique, ", "axis ", &v24, " is repeated");
LABEL_19:
  uint64_t v21 = v20;
LABEL_21:
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v26, v27);
  return v21;
}

uint64_t mlir::mps::OneHotOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, unint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v14 = *a7;
  }
  else {
    unint64_t v14 = 0;
  }
  uint64_t v42 = a6;
  v43[0] = 0;
  char v44 = 0;
  unint64_t v45 = v14;
  uint64_t v46 = a9;
  uint64_t v47 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v42);
    if (v44) {
      char v44 = 0;
    }
    mlir::OperationName::OperationName(v43, "mps.one_hot", 11, Context);
    char v44 = 1;
  }
  long long v48 = a4;
  uint64_t v49 = a5;
  if (a5)
  {
    uint64_t v16 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::OneHotOpAdaptor::verify((uint64_t)&v42, v16))
    {
      long long v39 = v48;
      uint64_t v40 = 0;
      unint64_t v17 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8))
      {
        uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
      long long v39 = v48;
      uint64_t v40 = 1;
      long long v39 = (void *)mlir::ValueRange::offset_base(&v39, 1);
      uint64_t v40 = 0;
      BOOL v22 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8)) {
        mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
      }
      else {
        BOOL v22 = 0;
      }
      long long v39 = v48;
      uint64_t v40 = 2;
      long long v39 = (void *)mlir::ValueRange::offset_base(&v39, 2);
      uint64_t v40 = 0;
      uint64_t v23 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8))
      {
        mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8);
        BOOL v24 = v23 == 0;
      }
      else
      {
        BOOL v24 = 1;
      }
      long long v39 = &v41;
      uint64_t v40 = 0x100000000;
      v37[0] = &v38;
      v37[1] = (void *)0x100000000;
      if (!v17) {
        goto LABEL_29;
      }
      if (!v22) {
        goto LABEL_29;
      }
      if (v24) {
        goto LABEL_29;
      }
      unint64_t v50 = (unint64_t)v48;
      uint64_t v51 = 1;
      unint64_t v50 = mlir::ValueRange::offset_base(&v50, 1);
      uint64_t v51 = 0;
      uint64_t v25 = mlir::ValueRange::dereference_iterator(&v50, 0);
      if (!mlir::matchConstantWithIntVector<unsigned long long>(v25, (uint64_t)&v39)) {
        goto LABEL_29;
      }
      unint64_t v50 = (unint64_t)v48;
      uint64_t v51 = 2;
      unint64_t v50 = mlir::ValueRange::offset_base(&v50, 2);
      uint64_t v51 = 0;
      uint64_t v26 = mlir::ValueRange::dereference_iterator(&v50, 0);
      if (mlir::matchConstantWithIntVector<long long>(v26, (uint64_t)v37))
      {
        uint64_t v36 = 0;
        unsigned int v27 = *(_DWORD *)v39;
        int v28 = *(_DWORD *)v37[0];
        unint64_t v50 = v45;
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v50);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v36);
        long long v30 = v37[0];
        if (v37[0] == &v38)
        {
LABEL_33:
          if (v39 != &v41) {
            free(v39);
          }
          return 1;
        }
      }
      else
      {
LABEL_29:
        unint64_t v50 = v45;
        uint64_t v31 = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v50);
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v31);
        uint64_t v33 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
        uint64_t v34 = *(unsigned int *)(a11 + 8);
        if (v34 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v34 + 1, 8);
          LODWORD(v34) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v34) = v33;
        ++*(_DWORD *)(a11 + 8);
        long long v30 = v37[0];
        if (v37[0] == &v38) {
          goto LABEL_33;
        }
      }
      free(v30);
      goto LABEL_33;
    }
  }
  uint64_t v19 = mlir::Float32Type::get(this, a2);
  uint64_t v20 = mlir::UnrankedTensorType::get(v19);
  uint64_t v21 = *(unsigned int *)(a11 + 8);
  if (v21 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v21) = v20;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::OneHotOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    v14[0] = *(void *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    uint64_t v12 = "'mps.one_hot' op requires attribute 'resultElementType'";
    __int16 v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    }
    if (v21)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        unint64_t v5 = v20;
        unint64_t v6 = __p;
        if (v20 != __p)
        {
          do
            unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          unint64_t v6 = __p;
        }
        uint64_t v20 = v4;
        operator delete(v6);
      }
      unsigned int v7 = v17;
      if (v17)
      {
        unint64_t v8 = v18;
        uint64_t v9 = v17;
        if (v18 != v17)
        {
          do
          {
            uint64_t v11 = (void *)*--v8;
            uint64_t v10 = v11;
            *unint64_t v8 = 0;
            if (v11) {
              operator delete[](v10);
            }
          }
          while (v8 != v7);
          uint64_t v9 = v17;
        }
        uint64_t v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16) {
        free(v15);
      }
    }
  }
  return v2;
}

void mlir::mps::anonymous namespace'::inferOneHotReturnType(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t *a6)
{
  v24[16] = *MEMORY[0x1E4F143B8];
  v21[0] = a1;
  v21[1] = a2;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v21);
  if (a4 >= 0) {
    int v11 = 0;
  }
  else {
    int v11 = v10;
  }
  unsigned int v12 = v11 + a4;
  if (v11 + a4 < 0
    || (uint64_t v13 = (v11 + a4),
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v21),
        v12 >= v14))
  {
    *a6 = mlir::UnrankedTensorType::get(a5);
  }
  else
  {
    __dst = v24;
    uint64_t v23 = 0x1000000000;
    uint64_t ArgAttrsAttr = (char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v21);
    unint64_t v17 = v15;
    uint64_t v18 = v23;
    if (v15 != v23)
    {
      if (v15 >= v23)
      {
        if (v15 > HIDWORD(v23))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v24, v15, 8);
          uint64_t v18 = v23;
        }
        if (v17 != v18) {
          bzero((char *)__dst + 8 * v18, 8 * (v17 - v18));
        }
      }
      LODWORD(v23) = v17;
    }
    uint64_t v19 = (char *)__dst;
    if (v12)
    {
      memmove(__dst, ArgAttrsAttr, 8 * v13);
      uint64_t v19 = (char *)__dst;
    }
    uint64_t v20 = &v19[8 * v13];
    *(void *)uint64_t v20 = a3;
    if (v17 != v13)
    {
      memmove(v20 + 8, &ArgAttrsAttr[8 * v13], 8 * v17 - 8 * v13);
      uint64_t v19 = (char *)__dst;
    }
    *a6 = mlir::RankedTensorType::get((uint64_t)v19, v23, a5, 0);
    if (__dst != v24) {
      free(__dst);
    }
  }
}

uint64_t mlir::mps::OneHotOp::verify(uint64_t **this)
{
  v68[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
  {
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52)) {
      goto LABEL_3;
    }
    return 1;
  }
  uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  uint64_t v52 = v2;
  uint64_t v53 = v3;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v52)) {
    return 1;
  }
LABEL_3:
  v67[0] = v68;
  v67[1] = (void *)0x100000000;
  if (mlir::matchConstantWithIntVector<long long>(*(void *)((*this)[9] + 88), (uint64_t)v67))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
    unint64_t v5 = v4;
    uint64_t v51 = 0;
    {
      unsigned int v7 = v5 - 1;
      unint64_t v8 = *(const char **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52)
                          + 8 * (v5 - 1));
      uint64_t v9 = 1;
      if (v8 != (const char *)0x8000000000000000 && v8 != (const char *)1)
      {
        __int16 v50 = 259;
        mlir::OpState::emitOpError(this, &v49, (uint64_t)v57);
        if (v57[0])
        {
          int v54 = 2;
          uint64_t v55 = v8;
          int v10 = &v54;
          int v11 = (char *)v58;
          if (v59 >= v60)
          {
            unint64_t v38 = v59 + 1;
            if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
            {
              int64_t v45 = (char *)&v54 - (unsigned char *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v38, 24);
              int v11 = (char *)v58;
              int v10 = (int *)((char *)v58 + v45);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v38, 24);
              int v10 = &v54;
              int v11 = (char *)v58;
            }
          }
          unsigned int v12 = &v11[24 * v59];
          long long v13 = *(_OWORD *)v10;
          *((void *)v12 + 2) = *((void *)v10 + 2);
          *(_OWORD *)unsigned int v12 = v13;
          uint64_t v14 = ++v59;
          if (v57[0])
          {
            int v54 = 3;
            uint64_t v56 = 17;
            unint64_t v15 = &v54;
            uint64_t v16 = (char *)v58;
            if (v14 >= v60)
            {
              unint64_t v39 = v14 + 1;
              BOOL v40 = (char *)v58 + 24 * v14 > (char *)&v54;
              if (v58 <= &v54 && v40)
              {
                int64_t v46 = (char *)&v54 - (unsigned char *)v58;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v39, 24);
                uint64_t v16 = (char *)v58;
                unint64_t v15 = (int *)((char *)v58 + v46);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v39, 24);
                unint64_t v15 = &v54;
                uint64_t v16 = (char *)v58;
              }
            }
            unint64_t v17 = &v16[24 * v59];
            long long v18 = *(_OWORD *)v15;
            *((void *)v17 + 2) = *((void *)v15 + 2);
            *(_OWORD *)unint64_t v17 = v18;
            uint64_t v19 = ++v59;
            if (v57[0])
            {
              int v54 = 2;
              uint64_t v55 = v7;
              uint64_t v20 = &v54;
              char v21 = (char *)v58;
              if (v19 >= v60)
              {
                unint64_t v41 = v19 + 1;
                BOOL v42 = (char *)v58 + 24 * v19 > (char *)&v54;
                if (v58 <= &v54 && v42)
                {
                  int64_t v47 = (char *)&v54 - (unsigned char *)v58;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
                  char v21 = (char *)v58;
                  uint64_t v20 = (int *)((char *)v58 + v47);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
                  uint64_t v20 = &v54;
                  char v21 = (char *)v58;
                }
              }
              uint64_t v22 = &v21[24 * v59];
              long long v23 = *(_OWORD *)v20;
              *((void *)v22 + 2) = *((void *)v20 + 2);
              *(_OWORD *)uint64_t v22 = v23;
              uint64_t v24 = ++v59;
              if (v57[0])
              {
                int v54 = 3;
                uint64_t v55 = ".";
                uint64_t v56 = 1;
                uint64_t v25 = &v54;
                uint64_t v26 = (char *)v58;
                if (v24 >= v60)
                {
                  unint64_t v43 = v24 + 1;
                  BOOL v44 = (char *)v58 + 24 * v24 > (char *)&v54;
                  if (v58 <= &v54 && v44)
                  {
                    int64_t v48 = (char *)&v54 - (unsigned char *)v58;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v43, 24);
                    uint64_t v26 = (char *)v58;
                    uint64_t v25 = (int *)((char *)v58 + v48);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v43, 24);
                    uint64_t v25 = &v54;
                    uint64_t v26 = (char *)v58;
                  }
                }
                unsigned int v27 = &v26[24 * v59];
                long long v28 = *(_OWORD *)v25;
                *((void *)v27 + 2) = *((void *)v25 + 2);
                *(_OWORD *)unsigned int v27 = v28;
                ++v59;
              }
            }
          }
        }
        uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
        if (v57[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
        }
        if (v66)
        {
          unint64_t v29 = (void **)__p;
          if (__p)
          {
            long long v30 = v65;
            uint64_t v31 = __p;
            if (v65 != __p)
            {
              do
                long long v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
              while (v30 != v29);
              uint64_t v31 = __p;
            }
            unint64_t v65 = v29;
            operator delete(v31);
          }
          unint64_t v32 = v62;
          if (v62)
          {
            uint64_t v33 = v63;
            uint64_t v34 = v62;
            if (v63 != v62)
            {
              do
              {
                uint64_t v36 = (void *)*--v33;
                uint64_t v35 = v36;
                *uint64_t v33 = 0;
                if (v36) {
                  operator delete[](v35);
                }
              }
              while (v33 != v32);
              uint64_t v34 = v62;
            }
            unint64_t v63 = v32;
            operator delete(v34);
          }
          if (v58 != v61) {
            free(v58);
          }
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 1;
  }
  if (v67[0] != v68) {
    free(v67[0]);
  }
  return v9;
}

uint64_t mlir::mps::anonymous namespace'::validateSingleAxis(mlir::mps::_anonymous_namespace_ *this, uint64_t a2, const char *a3, const char **a4, uint64_t *a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = (const char *)(((unint64_t)a3 & (a2 >> 63)) + a2);
  if ((uint64_t)v7 < 0 || (uint64_t)v7 >= (uint64_t)a3)
  {
    int64_t v48 = (const void **)"invalid axis: ";
    __int16 v49 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, &v48, (uint64_t)v53);
    if (v53[0])
    {
      int v50 = 2;
      uint64_t v51 = (const char *)a2;
      uint64_t v9 = &v50;
      int v10 = (char *)v54;
      if (v55 >= v56)
      {
        unint64_t v37 = v55 + 1;
        if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
        {
          int64_t v44 = (char *)&v50 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
          int v10 = (char *)v54;
          uint64_t v9 = (int *)((char *)v54 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
          uint64_t v9 = &v50;
          int v10 = (char *)v54;
        }
      }
      int v11 = &v10[24 * v55];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)int v11 = v12;
      uint64_t v13 = ++v55;
      if (v53[0])
      {
        int v50 = 3;
        uint64_t v51 = ", axis must be in ";
        uint64_t v52 = 18;
        uint64_t v14 = &v50;
        unint64_t v15 = (char *)v54;
        if (v13 >= v56)
        {
          unint64_t v38 = v13 + 1;
          BOOL v39 = (char *)v54 + 24 * v13 > (char *)&v50;
          if (v54 <= &v50 && v39)
          {
            int64_t v45 = (char *)&v50 - (unsigned char *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
            unint64_t v15 = (char *)v54;
            uint64_t v14 = (int *)((char *)v54 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
            uint64_t v14 = &v50;
            unint64_t v15 = (char *)v54;
          }
        }
        uint64_t v16 = &v15[24 * v55];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        uint64_t v18 = ++v55;
        if (v53[0])
        {
          int v50 = 3;
          uint64_t v51 = "range - rank <= axis < rank, rank = ";
          uint64_t v52 = 36;
          uint64_t v19 = &v50;
          uint64_t v20 = (char *)v54;
          if (v18 >= v56)
          {
            unint64_t v40 = v18 + 1;
            BOOL v41 = (char *)v54 + 24 * v18 > (char *)&v50;
            if (v54 <= &v50 && v41)
            {
              int64_t v46 = (char *)&v50 - (unsigned char *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
              uint64_t v20 = (char *)v54;
              uint64_t v19 = (int *)((char *)v54 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
              uint64_t v19 = &v50;
              uint64_t v20 = (char *)v54;
            }
          }
          char v21 = &v20[24 * v55];
          long long v22 = *(_OWORD *)v19;
          *((void *)v21 + 2) = *((void *)v19 + 2);
          *(_OWORD *)char v21 = v22;
          uint64_t v23 = ++v55;
          if (v53[0])
          {
            int v50 = 2;
            uint64_t v51 = a3;
            uint64_t v24 = &v50;
            uint64_t v25 = (char *)v54;
            if (v23 >= v56)
            {
              unint64_t v42 = v23 + 1;
              BOOL v43 = (char *)v54 + 24 * v23 > (char *)&v50;
              if (v54 <= &v50 && v43)
              {
                int64_t v47 = (char *)&v50 - (unsigned char *)v54;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
                uint64_t v25 = (char *)v54;
                uint64_t v24 = (int *)((char *)v54 + v47);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v42, 24);
                uint64_t v24 = &v50;
                uint64_t v25 = (char *)v54;
              }
            }
            uint64_t v26 = &v25[24 * v55];
            long long v27 = *(_OWORD *)v24;
            *((void *)v26 + 2) = *((void *)v24 + 2);
            *(_OWORD *)uint64_t v26 = v27;
            ++v55;
          }
        }
      }
    }
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (v62)
    {
      long long v28 = (void **)__p;
      if (__p)
      {
        unint64_t v29 = v61;
        long long v30 = __p;
        if (v61 != __p)
        {
          do
            unint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          long long v30 = __p;
        }
        uint64_t v61 = v28;
        operator delete(v30);
      }
      uint64_t v31 = v58;
      if (v58)
      {
        unint64_t v32 = v59;
        uint64_t v33 = v58;
        if (v59 != v58)
        {
          do
          {
            uint64_t v35 = (void *)*--v32;
            uint64_t v34 = v35;
            *unint64_t v32 = 0;
            if (v35) {
              operator delete[](v34);
            }
          }
          while (v32 != v31);
          uint64_t v33 = v58;
        }
        unsigned int v59 = v31;
        operator delete(v33);
      }
      if (v54 != v57) {
        free(v54);
      }
    }
  }
  else
  {
    *a4 = v7;
    return 1;
  }
  return v8;
}

uint64_t mlir::mps::ScatterNDOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  v61[2] = *MEMORY[0x1E4F143B8];
  v61[0] = a4;
  v61[1] = a5;
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v53 = a6;
  v54[0] = 0;
  char v55 = 0;
  long long v56 = v16;
  uint64_t v57 = a9;
  uint64_t v58 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v53);
    if (v55) {
      char v55 = 0;
    }
    mlir::OperationName::OperationName(v54, "mps.scatter_nd", 14, Context);
    char v55 = 1;
  }
  uint64_t v59 = a4;
  unint64_t v60 = a5;
  if (a5 >= 3)
  {
    uint64_t v18 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::ScatterNDOpAdaptor::verify((uint64_t)&v53, v18))
    {
      uint64_t v19 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v61, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
      {
        uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
      }
      uint64_t v26 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v61, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8))
      {
        uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
      }
      long long v28 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v61, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8))
      {
        uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8);
        if (!v19) {
          goto LABEL_32;
        }
      }
      else
      {
        long long v28 = 0;
        uint64_t v29 = 0;
        if (!v19)
        {
LABEL_32:
          uint64_t v33 = mlir::ValueRange::dereference_iterator(v61, 0);
          uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v33);
          if (!ElementTypeOrSelf) {
            uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, v35);
          }
          uint64_t v36 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
          unsigned int v37 = a11[2];
          if (v37 >= a11[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v37 + 1, 8);
            unsigned int v37 = a11[2];
          }
          *(void *)(*(void *)a11 + 8 * v37) = v36;
          goto LABEL_14;
        }
      }
      if (!v26 || !v28) {
        goto LABEL_32;
      }
      int64_t v46 = v19;
      uint64_t v47 = v20;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46))
      {
        uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
        if (!v31) {
          goto LABEL_42;
        }
        uint64_t v32 = 8 * v31;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v32 -= 8;
          if (!v32) {
            goto LABEL_42;
          }
        }
      }
      {
LABEL_42:
        uint64_t v22 = (uint64_t)v46;
        uint64_t v23 = a11[2];
        if (v23 >= a11[3]) {
          goto LABEL_43;
        }
        goto LABEL_13;
      }
      unsigned int BatchDims = mlir::mps::detail::ScatterNDOpGenericAdaptorBase::getBatchDims((mlir::mps::detail::ScatterNDOpGenericAdaptorBase *)&v53);
      int v50 = v52;
      uint64_t v51 = 0x400000000;
      if (v39)
      {
        uint64_t v24 = (uint64_t)v50;
        uint64_t v40 = v51;
        uint64_t v41 = mlir::getElementTypeOrSelf(v19);
        *(void *)&long long v48 = v24;
        *((void *)&v48 + 1) = v40;
        char v49 = 1;
        int64_t v46 = (void *)mlir::ShapedType::cloneWith((uint64_t *)&v46, &v48, v41);
        uint64_t v47 = v42;
        BOOL v43 = v50;
        if (v50 == v52) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v44 = mlir::ValueRange::dereference_iterator(v61, 0);
        uint64_t v45 = mlir::getElementTypeOrSelf(v44);
        BOOL v43 = v50;
        if (v50 == v52)
        {
LABEL_41:
          if (!v39) {
            return v24;
          }
          goto LABEL_42;
        }
      }
      free(v43);
      goto LABEL_41;
    }
  }
  uint64_t v21 = mlir::Float32Type::get(this, a2);
  uint64_t v22 = mlir::UnrankedTensorType::get(v21);
  uint64_t v23 = a11[2];
  if (v23 >= a11[3])
  {
LABEL_43:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v23 + 1, 8);
    LODWORD(v23) = a11[2];
  }
LABEL_13:
  *(void *)(*(void *)a11 + 8 * v23) = v22;
LABEL_14:
  ++a11[2];
  return 1;
}

uint64_t mlir::mps::ScatterNDOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a1 + 32))
    {
      v25[0] = *(void *)(a1 + 24);
      v27[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v25);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)v27, 32)) {
        return 1;
      }
      v25[0] = "'mps.scatter_nd' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
      __int16 v26 = 259;
      mlir::emitError(a2, (uint64_t)v25, (uint64_t)v27);
      uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
      if (v27[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
      }
      if (v34)
      {
        uint64_t v18 = (void **)__p;
        if (__p)
        {
          uint64_t v19 = v33;
          uint64_t v20 = __p;
          if (v33 != __p)
          {
            do
              uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
            while (v19 != v18);
            uint64_t v20 = __p;
          }
          uint64_t v33 = v18;
          operator delete(v20);
        }
        unsigned int v7 = v30;
        if (!v30) {
          goto LABEL_49;
        }
        uint64_t v21 = v31;
        uint64_t v9 = v30;
        if (v31 == v30)
        {
LABEL_48:
          uint64_t v31 = v7;
          operator delete(v9);
LABEL_49:
          if (v28 != &v29) {
            free(v28);
          }
          return v3;
        }
        do
        {
          uint64_t v23 = (void *)*--v21;
          uint64_t v22 = v23;
          *uint64_t v21 = 0;
          if (v23) {
            operator delete[](v22);
          }
        }
        while (v21 != v7);
LABEL_47:
        uint64_t v9 = v30;
        goto LABEL_48;
      }
    }
    else
    {
      v25[0] = "'mps.scatter_nd' op requires attribute 'mode'";
      __int16 v26 = 259;
      mlir::emitError(a2, (uint64_t)v25, (uint64_t)v27);
      uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
      if (v27[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
      }
      if (v34)
      {
        long long v12 = (void **)__p;
        if (__p)
        {
          uint64_t v13 = v33;
          uint64_t v14 = __p;
          if (v33 != __p)
          {
            do
              uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p;
          }
          uint64_t v33 = v12;
          operator delete(v14);
        }
        unsigned int v7 = v30;
        if (!v30) {
          goto LABEL_49;
        }
        unint64_t v15 = v31;
        uint64_t v9 = v30;
        if (v31 == v30) {
          goto LABEL_48;
        }
        do
        {
          long long v17 = (void *)*--v15;
          long long v16 = v17;
          *unint64_t v15 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v15 != v7);
        goto LABEL_47;
      }
    }
  }
  else
  {
    v25[0] = "'mps.scatter_nd' op requires attribute 'batch_dims'";
    __int16 v26 = 259;
    mlir::emitError(a2, (uint64_t)v25, (uint64_t)v27);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
    if (v27[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
    }
    if (v34)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        unint64_t v5 = v33;
        unint64_t v6 = __p;
        if (v33 != __p)
        {
          do
            unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          unint64_t v6 = __p;
        }
        uint64_t v33 = v4;
        operator delete(v6);
      }
      unsigned int v7 = v30;
      if (!v30) {
        goto LABEL_49;
      }
      uint64_t v8 = v31;
      uint64_t v9 = v30;
      if (v31 == v30) {
        goto LABEL_48;
      }
      do
      {
        int v11 = (void *)*--v8;
        int v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          operator delete[](v10);
        }
      }
      while (v8 != v7);
      goto LABEL_47;
    }
  }
  return v3;
}

BOOL mlir::mps::anonymous namespace'::scatterNDRankInferrable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v12)) {
    return 1;
  }
  unint64_t v7 = 0x8000000000000000;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v10))
  {
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v10);
    unint64_t v7 = *(void *)(ArgAttrsAttr + 8 * v9 - 8);
  }
  return mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v11) && v7 != 0x8000000000000000;
}

void *mlir::mps::detail::ScatterNDOpGenericAdaptorBase::getBatchDims(mlir::mps::detail::ScatterNDOpGenericAdaptorBase *this)
{
  uint64_t v5 = *((void *)this + 3);
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40) {
    return __p;
  }
  uint64_t v2 = *(void *)__p;
  operator delete[](__p);
  return (void *)v2;
}

uint64_t mlir::mps::anonymous namespace'::inferScatterNDShape(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  v43[0] = a3;
  v43[1] = a4;
  v42[0] = a5;
  v42[1] = a6;
  v41[0] = a7;
  v41[1] = a8;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v43))
  {
    uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
    unint64_t v14 = v12;
    unint64_t v15 = *(unsigned int *)(a10 + 8);
    if (v12 != v15)
    {
      if (v12 >= v15)
      {
        if (v12 > *(unsigned int *)(a10 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v12, 8);
          unint64_t v15 = *(unsigned int *)(a10 + 8);
        }
        if (v14 != v15) {
          bzero((void *)(*(void *)a10 + 8 * v15), 8 * (v14 - v15));
        }
      }
      *(_DWORD *)(a10 + 8) = v14;
    }
    if (v14) {
      memmove(*(void **)a10, ArgAttrsAttr, 8 * v14);
    }
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v43))
    {
      long long v16 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
      if (!v17) {
        return 1;
      }
      uint64_t v18 = 8 * v17;
      while (*v16 != 0x8000000000000000)
      {
        ++v16;
        v18 -= 8;
        if (!v18) {
          return 1;
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0x8000000000000000;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v41)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v42))
  {
    return 1;
  }
  uint64_t v19 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
  uint64_t v21 = v20;
  uint64_t v23 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v41);
  uint64_t v40 = v21;
  uint64_t v24 = v22 - 1;
  int64_t v25 = v23[v22 - 1];
  char v39 = (char *)v25;
  if (v25 == 0x8000000000000000)
  {
    if (v14 == 0x8000000000000000) {
      return 1;
    }
    int64_t v25 = v14 - (void)&v21[a9] + v24;
    char v39 = (char *)v25;
  }
  if (v25 <= 0) {
    return mlir::emitOptionalError<char const(&)[36],char const(&)[49],long long &,char const(&)[6]>(a1, a2, "invalid input tensor shapes: minor ", "dimension of indices must have positive length, ", &v39, " <= 0");
  }
  if (v24 > (uint64_t)v21)
  {
    uint64_t v44 = (char *)(v22 - 1);
    return mlir::emitOptionalError<char const(&)[35],char const(&)[13],long long &,char const(&)[6],long long const&>(a1, a2, "invalid input tensor shapes: requires ", "|updates| >= |indices| - 1, ", &v40, " < ", &v44);
  }
  unint64_t v27 = (unint64_t)&v21[a9 - v22 + 1 + v25];
  if (v14 != 0x8000000000000000)
  {
    BOOL v28 = v14 == v27;
    unint64_t v27 = v14;
    if (!v28) {
      return mlir::emitOptionalError<char const(&)[31],char const(&)[45],char const(&)[25]>(a1, a2, "Rank of data array must equal ", "number of outer dimensions in index array + ", "rank of slice to update.");
    }
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v43) & 1) == 0) {
    llvm::SmallVectorImpl<long long>::assign(a10, v27, 0x8000000000000000);
  }
  if (a9)
  {
    uint64_t v29 = *(char ***)a10;
    uint64_t v30 = 8 * a9;
    uint64_t v31 = (uint64_t *)v19;
    do
    {
      uint64_t v44 = *v29;
      uint64_t v32 = *v23++;
      uint64_t v45 = v32;
      uint64_t v33 = *v31++;
      uint64_t v46 = v33;
      *v29++ = (char *)mlir::mps::mergeDynamicDims((unint64_t *)&v44, 3);
      v30 -= 8;
    }
    while (v30);
  }
  uint64_t v34 = v19 + 8 * (void)v21;
  if (v34 != v34 - 8 * v27 + 8 * v25 + 8 * a9)
  {
    uint64_t v35 = 8 * (v25 + a9) - 8 * v27;
    uint64_t v36 = (uint64_t *)(v34 - 8);
    unsigned int v37 = (char **)(*(void *)a10 + 8 * *(unsigned int *)(a10 + 8) - 8);
    do
    {
      uint64_t v44 = *v37;
      uint64_t v38 = *v36--;
      uint64_t v45 = v38;
      *v37-- = (char *)mlir::mps::mergeDynamicDims((unint64_t *)&v44, 2);
      v35 += 8;
    }
    while (v35);
  }
  return 1;
}

uint64_t mlir::mps::ScatterNDOp::verify(uint64_t **this)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*this)[9];
  uint64_t v3 = (void *)(*(void *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v2 = (void *)(*this)[9];
    v124 = v3;
    uint64_t v125 = v4;
    uint64_t v5 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    unsigned int v122 = v5;
    uint64_t v123 = 0;
    uint64_t v8 = (void *)(*(void *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  v124 = 0;
  uint64_t v125 = 0;
  uint64_t v5 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  uint64_t v7 = (*this)[9];
  unsigned int v122 = v5;
  uint64_t v123 = v6;
  uint64_t v8 = (void *)(*(void *)(*(void *)(v7 + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v8)
  {
LABEL_4:
    uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v9 = 0;
LABEL_8:
  v121[0] = v8;
  v121[1] = v9;
  unint64_t v10 = 0x8000000000000000;
  uint64_t v118 = 0x8000000000000000;
  unint64_t v119 = 0x8000000000000000;
  uint64_t v120 = 0x8000000000000000;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122))
  {
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v122);
    unint64_t v10 = v12;
    uint64_t v120 = v12;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121)) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v13 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v121);
    unint64_t v15 = v18;
    unint64_t v14 = v13[v18 - 1];
    uint64_t v118 = v14;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124)) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  uint64_t ArgAttrsAttr = 0;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121)) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v13 = 0;
  unint64_t v14 = 0x8000000000000000;
  unint64_t v15 = 0x8000000000000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
  {
LABEL_11:
    long long v16 = 0;
    unint64_t v17 = 0x8000000000000000;
    goto LABEL_15;
  }
LABEL_14:
  long long v16 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v124);
  unint64_t v17 = v19;
  unint64_t v119 = v19;
LABEL_15:
  v126 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(&v126, (llvm::APInt *)&__p);
  if (v130 > 0x40)
  {
    unint64_t v20 = *(unsigned int *)__p;
    operator delete[](__p);
    if (v10 == 0x8000000000000000) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v20 = __p;
    if (v10 == 0x8000000000000000) {
      goto LABEL_20;
    }
  }
  if (v20 >= v10) {
    goto LABEL_24;
  }
LABEL_20:
  if ((v15 == 0x8000000000000000 || v20 < v15) && (v17 == 0x8000000000000000 || v20 < v17))
  {
    unint64_t v106 = v14;
    unint64_t v107 = v17;
    v126 = (const void **)v128;
    uint64_t v127 = 0x400000000;
    if (v20)
    {
      if (v20 < 5)
      {
        uint64_t v41 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v128, v20, 8);
        uint64_t v41 = v127;
      }
      if (v20 != v41) {
        bzero(&v126[v41], 8 * (v20 - v41));
      }
      uint64_t v42 = 0;
      LODWORD(v127) = v20;
      do
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122))
        {
          uint64_t v45 = (void *)ArgAttrsAttr[v42];
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121)) {
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v45 = (void *)0x8000000000000000;
          if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121))
          {
LABEL_59:
            unint64_t v46 = 0x8000000000000000;
            if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124)) {
              goto LABEL_63;
            }
            goto LABEL_55;
          }
        }
        unint64_t v46 = v13[v42];
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
        {
LABEL_63:
          unint64_t v43 = 0x8000000000000000;
          goto LABEL_56;
        }
LABEL_55:
        unint64_t v43 = v16[v42];
LABEL_56:
        __p = v45;
        unint64_t v130 = v46;
        unint64_t v131 = v43;
        uint64_t v44 = (const void *)mlir::mps::mergeDynamicDims((unint64_t *)&__p, 3);
        v126[v42++] = v44;
      }
      while (v20 != v42);
    }
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122) & 1) != 0
      && !mlir::verifyCompatibleShape(ArgAttrsAttr, v20, v126, v127))
    {
      uint64_t v108 = (const void **)"invalid updates tensor shape: input tensor shapes ";
      __int16 v112 = 259;
      mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
      if (__p)
      {
        LODWORD(v113) = 3;
        int64_t v114 = "must match along batch dimensions";
        uint64_t v115 = 33;
        uint64_t v53 = &v113;
        int v54 = (char *)v132;
        if (v133 >= v134)
        {
          unint64_t v98 = v133 + 1;
          if (v132 <= &v113 && (char *)v132 + 24 * v133 > (char *)&v113)
          {
            int64_t v103 = (char *)&v113 - (unsigned char *)v132;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v98, 24);
            int v54 = (char *)v132;
            uint64_t v53 = (const void ****)((char *)v132 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v98, 24);
            uint64_t v53 = &v113;
            int v54 = (char *)v132;
          }
        }
        char v55 = &v54[24 * v133];
        long long v56 = *(_OWORD *)v53;
        *((void *)v55 + 2) = v53[2];
        *(_OWORD *)char v55 = v56;
        ++v133;
      }
      uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (v140)
      {
        uint64_t v57 = (void **)v138;
        if (v138)
        {
          uint64_t v58 = v139;
          uint64_t v59 = v138;
          if (v139 != v138)
          {
            do
              uint64_t v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
            while (v58 != v57);
            uint64_t v59 = v138;
          }
          uint64_t v139 = v57;
          operator delete(v59);
        }
        unint64_t v60 = v136;
        if (v136)
        {
          uint64_t v61 = v137;
          char v62 = v136;
          if (v137 == v136) {
            goto LABEL_126;
          }
          do
          {
            unint64_t v64 = (void *)*--v61;
            uint64_t v63 = v64;
            *uint64_t v61 = 0;
            if (v64) {
              operator delete[](v63);
            }
          }
          while (v61 != v60);
LABEL_125:
          char v62 = v136;
LABEL_126:
          uint64_t v137 = v60;
          operator delete(v62);
        }
LABEL_127:
        if (v132 != v135)
        {
          free(v132);
          char v39 = v126;
          if (v126 == (const void **)v128) {
            return v30;
          }
          goto LABEL_46;
        }
      }
    }
    else if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121) {
           && !mlir::verifyCompatibleShape(v13, v20, v126, v127))
    }
    {
      uint64_t v108 = (const void **)"invalid indices tensor shape: input tensor shapes ";
      __int16 v112 = 259;
      mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
      if (__p)
      {
        LODWORD(v113) = 3;
        int64_t v114 = "must match along batch dimensions";
        uint64_t v115 = 33;
        unint64_t v65 = &v113;
        char v66 = (char *)v132;
        if (v133 >= v134)
        {
          unint64_t v99 = v133 + 1;
          if (v132 <= &v113 && (char *)v132 + 24 * v133 > (char *)&v113)
          {
            int64_t v104 = (char *)&v113 - (unsigned char *)v132;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v99, 24);
            char v66 = (char *)v132;
            unint64_t v65 = (const void ****)((char *)v132 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v99, 24);
            unint64_t v65 = &v113;
            char v66 = (char *)v132;
          }
        }
        unint64_t v67 = &v66[24 * v133];
        long long v68 = *(_OWORD *)v65;
        *((void *)v67 + 2) = v65[2];
        *(_OWORD *)unint64_t v67 = v68;
        ++v133;
      }
      uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (v140)
      {
        int64_t v69 = (void **)v138;
        if (v138)
        {
          int64_t v70 = v139;
          int64_t v71 = v138;
          if (v139 != v138)
          {
            do
              int64_t v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            int64_t v71 = v138;
          }
          uint64_t v139 = v69;
          operator delete(v71);
        }
        unint64_t v60 = v136;
        if (v136)
        {
          int64_t v72 = v137;
          char v62 = v136;
          if (v137 == v136) {
            goto LABEL_126;
          }
          do
          {
            __int16 v74 = (void *)*--v72;
            int64_t v73 = v74;
            void *v72 = 0;
            if (v74) {
              operator delete[](v73);
            }
          }
          while (v72 != v60);
          goto LABEL_125;
        }
        goto LABEL_127;
      }
    }
    else
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124)
        || mlir::verifyCompatibleShape(v16, v20, v126, v127))
      {
        uint64_t v47 = v107;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121)
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122))
        {
          goto LABEL_141;
        }
        unint64_t v48 = v15 - 1;
        if ((uint64_t)v10 < (uint64_t)(v15 - 1))
        {
          uint64_t v108 = (const void **)"invalid input tensor shapes: requires ";
          __int16 v112 = 259;
          mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
          uint64_t v49 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "|updates| >= |indices| - 1, ");
          uint64_t v50 = mlir::InFlightDiagnostic::operator<<<long long &>(v49, &v120);
          uint64_t v51 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v50, " < ");
          int64_t v113 = (const void ***)(v15 - 1);
          uint64_t p_p = mlir::InFlightDiagnostic::operator<<<long long &>(v51, (uint64_t *)&v113);
          goto LABEL_148;
        }
        uint64_t v85 = v106;
        if (v106 == 0x8000000000000000)
        {
          if (v107 == 0x8000000000000000 || (uint64_t v85 = v48 - (v20 + v10) + v107, v118 = v85, v85 == 0x8000000000000000))
          {
            uint64_t v108 = (const void **)"invalid input tensor shapes: minor dimension of indices was dynamic and could not be inferred";
            uint64_t v109 = 93;
            uint64_t v110 = 0;
            uint64_t v111 = 0;
            __int16 v116 = 263;
            int64_t v113 = &v108;
            mlir::OpState::emitOpError(this, (const void ***)&v113, (uint64_t)&__p);
            uint64_t p_p = (uint64_t)&__p;
            goto LABEL_148;
          }
        }
        else if (v107 == 0x8000000000000000)
        {
          unint64_t v119 = v20 - v15 + v10 + v106 + 1;
          uint64_t v47 = v119;
        }
        else if (v107 != v20 - v15 + v10 + v106 + 1)
        {
          uint64_t v108 = (const void **)"Rank of data array must equal number of outer ";
          __int16 v112 = 259;
          mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
          uint64_t v89 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "dimensions in indices array + rank of slice to update, ");
          uint64_t v90 = mlir::InFlightDiagnostic::operator<<<long long &>(v89, (uint64_t *)&v119);
          uint64_t v91 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v90, " != ");
          int64_t v113 = (const void ***)(v106 + v20);
          uint64_t v92 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v91, (uint64_t *)&v113);
          uint64_t v93 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v92, " + ");
          unint64_t v117 = v10 - (v15 - 1);
          uint64_t p_p = mlir::InFlightDiagnostic::operator<<<long long &>(v93, (uint64_t *)&v117);
          goto LABEL_148;
        }
        if (v85 <= 0)
        {
          uint64_t v108 = (const void **)"invalid input tensor shapes: minor dimension of ";
          __int16 v112 = 259;
          mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
          uint64_t v87 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "indices must have positive length, ");
          uint64_t v88 = mlir::InFlightDiagnostic::operator<<<long long &>(v87, &v118);
          uint64_t p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v88, " <= 0");
        }
        else
        {
          uint64_t v86 = v10 - (v15 - 1);
          if (mlir::verifyCompatibleShape(&ArgAttrsAttr[v20], v48 - v20, &v13[v20], v48 - v20))
          {
            if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124)
              || mlir::verifyCompatibleShape(&ArgAttrsAttr[v48], v86, &v16[v85 + v20], v47 - (v85 + v20)))
            {
LABEL_141:
              uint64_t v30 = 1;
              goto LABEL_142;
            }
            uint64_t v108 = (const void **)"invalid input tensor shape: updates tensor ";
            __int16 v112 = 259;
            mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
            uint64_t p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "shape and data tensor shape must match along inner dimensions");
          }
          else
          {
            uint64_t v108 = (const void **)"invalid input tensor shape: updates tensor ";
            __int16 v112 = 259;
            mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
            uint64_t v94 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "shape and indices tensor shape must match along outer ");
            uint64_t p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v94, "dimensions");
          }
        }
LABEL_148:
        uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(p_p);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
        char v39 = v126;
        if (v126 == (const void **)v128) {
          return v30;
        }
        goto LABEL_46;
      }
      uint64_t v108 = (const void **)"invalid data tensor shape: input tensor shapes ";
      __int16 v112 = 259;
      mlir::OpState::emitOpError(this, &v108, (uint64_t)&__p);
      if (__p)
      {
        LODWORD(v113) = 3;
        int64_t v114 = "must match along batch dimensions";
        uint64_t v115 = 33;
        uint64_t v75 = &v113;
        __int16 v76 = (char *)v132;
        if (v133 >= v134)
        {
          unint64_t v100 = v133 + 1;
          if (v132 <= &v113 && (char *)v132 + 24 * v133 > (char *)&v113)
          {
            int64_t v105 = (char *)&v113 - (unsigned char *)v132;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v100, 24);
            __int16 v76 = (char *)v132;
            uint64_t v75 = (const void ****)((char *)v132 + v105);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v100, 24);
            uint64_t v75 = &v113;
            __int16 v76 = (char *)v132;
          }
        }
        unint64_t v77 = &v76[24 * v133];
        long long v78 = *(_OWORD *)v75;
        *((void *)v77 + 2) = v75[2];
        *(_OWORD *)unint64_t v77 = v78;
        ++v133;
      }
      uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (v140)
      {
        int v79 = (void **)v138;
        if (v138)
        {
          unint64_t v80 = v139;
          uint64_t v81 = v138;
          if (v139 != v138)
          {
            do
              unint64_t v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
            while (v80 != v79);
            uint64_t v81 = v138;
          }
          uint64_t v139 = v79;
          operator delete(v81);
        }
        unint64_t v60 = v136;
        if (v136)
        {
          unsigned int v82 = v137;
          char v62 = v136;
          if (v137 == v136) {
            goto LABEL_126;
          }
          do
          {
            uint64_t v84 = (void *)*--v82;
            uint64_t v83 = v84;
            void *v82 = 0;
            if (v84) {
              operator delete[](v83);
            }
          }
          while (v82 != v60);
          goto LABEL_125;
        }
        goto LABEL_127;
      }
    }
LABEL_142:
    char v39 = v126;
    if (v126 == (const void **)v128) {
      return v30;
    }
    goto LABEL_46;
  }
LABEL_24:
  v126 = (const void **)"invalid batch dimensions: ";
  v128[8] = 259;
  mlir::OpState::emitOpError(this, &v126, (uint64_t)&__p);
  if (__p)
  {
    LODWORD(v108) = 5;
    uint64_t v109 = v20;
    uint64_t v21 = &v108;
    uint64_t v22 = (char *)v132;
    if (v133 >= v134)
    {
      unint64_t v95 = v133 + 1;
      if (v132 <= &v108 && (char *)v132 + 24 * v133 > (char *)&v108)
      {
        int64_t v101 = (char *)&v108 - (unsigned char *)v132;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v95, 24);
        uint64_t v22 = (char *)v132;
        uint64_t v21 = (const void ***)((char *)v132 + v101);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v95, 24);
        uint64_t v21 = &v108;
        uint64_t v22 = (char *)v132;
      }
    }
    uint64_t v23 = &v22[24 * v133];
    long long v24 = *(_OWORD *)v21;
    *((void *)v23 + 2) = v21[2];
    *(_OWORD *)uint64_t v23 = v24;
    uint64_t v25 = ++v133;
    if (__p)
    {
      LODWORD(v108) = 3;
      uint64_t v109 = (uint64_t)", must be less than ranks of all input tensors";
      uint64_t v110 = 46;
      __int16 v26 = &v108;
      unint64_t v27 = (char *)v132;
      if (v25 >= v134)
      {
        unint64_t v96 = v25 + 1;
        BOOL v97 = (char *)v132 + 24 * v25 > (char *)&v108;
        if (v132 <= &v108 && v97)
        {
          int64_t v102 = (char *)&v108 - (unsigned char *)v132;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v96, 24);
          unint64_t v27 = (char *)v132;
          __int16 v26 = (const void ***)((char *)v132 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v96, 24);
          __int16 v26 = &v108;
          unint64_t v27 = (char *)v132;
        }
      }
      BOOL v28 = &v27[24 * v133];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = v26[2];
      *(_OWORD *)BOOL v28 = v29;
      ++v133;
    }
  }
  uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  }
  if (v140)
  {
    uint64_t v31 = (void **)v138;
    if (v138)
    {
      uint64_t v32 = v139;
      uint64_t v33 = v138;
      if (v139 != v138)
      {
        do
          uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        uint64_t v33 = v138;
      }
      uint64_t v139 = v31;
      operator delete(v33);
    }
    uint64_t v34 = v136;
    if (v136)
    {
      uint64_t v35 = v137;
      uint64_t v36 = v136;
      if (v137 != v136)
      {
        do
        {
          uint64_t v38 = (void *)*--v35;
          unsigned int v37 = v38;
          *uint64_t v35 = 0;
          if (v38) {
            operator delete[](v37);
          }
        }
        while (v35 != v34);
        uint64_t v36 = v136;
      }
      uint64_t v137 = v34;
      operator delete(v36);
    }
    char v39 = (const void **)v132;
    if (v132 != v135) {
LABEL_46:
    }
      free(v39);
  }
  return v30;
}

uint64_t mlir::mps::getAxis(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = a4;
  unint64_t v15 = (uint64_t **)&v16;
  uint64_t v18 = a3;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v15, DefiningOp)) {
    return 1;
  }
  int64_t SingleInt = mlir::getSingleIntValue<long long>(v16, v17);
  uint64_t v16 = SingleInt;
  uint64_t v17 = v11;
  uint64_t v12 = 1;
  if ((_BYTE)v11)
  {
    *(void *)a5 = SingleInt;
    *(unsigned char *)(a5 + 8) = 1;
    if (SingleInt < 0)
    {
      SingleInt += a4;
      *(void *)a5 = SingleInt;
      if (SingleInt < 0) {
        return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", &v16, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
      }
    }
    if (SingleInt >= a4) {
      return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", &v16, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
    }
  }
  return v12;
}

uint64_t mlir::mps::ScatterOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v51[2] = *MEMORY[0x1E4F143B8];
  v51[0] = a4;
  v51[1] = a5;
  if (a5 == 4)
  {
    uint64_t v13 = mlir::ValueRange::dereference_iterator(v51, 0);
    uint64_t v14 = *(void **)(*(void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v16 = (void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v46 = v16;
    unint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(v51, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void **)(*(void *)v17 + 136);
    if (v18 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v17 = 0;
    }
    unint64_t v45 = v17;
    if (v16) {
      BOOL v20 = v17 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20) {
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot scatter a non-tensor type");
    }
    uint64_t v44 = (uint64_t)v16;
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v44))
    {
      uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
      if (!v24)
      {
LABEL_43:
        uint64_t v40 = v44;
        uint64_t v41 = *(unsigned int *)(a11 + 8);
        if (v41 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
          LODWORD(v41) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v41) = v40;
        ++*(_DWORD *)(a11 + 8);
        return 1;
      }
      uint64_t v25 = 8 * v24;
      while (*Value != 0x8000000000000000)
      {
        ++Value;
        v25 -= 8;
        if (!v25) {
          goto LABEL_43;
        }
      }
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v45))
    {
      uint64_t v26 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
      uint64_t v28 = v27;
      LOBYTE(v42) = 0;
      char v43 = 0;
      uint64_t v29 = mlir::ValueRange::dereference_iterator(v51, 3);
      if (!mlir::mps::getAxis(a2, a3, v29, v28, (uint64_t)&v42)) {
        return 0;
      }
      if (v43)
      {
        __dst = v50;
        uint64_t v49 = 0x400000000;
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v46))
        {
          llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&__dst, v28);
          uint64_t v30 = (unsigned char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
          uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
          uint64_t v33 = (unsigned char *)(v31 + 8 * v32);
          if (v33 != v30) {
            memmove(__dst, v30, v33 - v30);
          }
        }
        else
        {
          llvm::SmallVectorImpl<long long>::assign((uint64_t)&__dst, v28, 0x8000000000000000);
        }
        if (v28 >= 1)
        {
          uint64_t v34 = 0;
          uint64_t v35 = v42;
          do
          {
            if (v35 != v34)
            {
              v47[0] = *((void *)__dst + v34);
              v47[1] = *(void *)(v26 + 8 * v34);
              unint64_t v36 = mlir::mps::mergeDynamicDims(v47, 2);
              *((void *)__dst + v34) = v36;
            }
            ++v34;
          }
          while (v28 != v34);
        }
        unsigned int v37 = __dst;
        uint64_t v38 = v49;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v46);
        uint64_t v44 = mlir::RankedTensorType::get((uint64_t)v37, v38, ElementTypeOrSelf, 0);
        if (__dst != v50) {
          free(__dst);
        }
      }
    }
    goto LABEL_43;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

void llvm::SmallVectorImpl<long long>::assign(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    uint64_t v14 = *(unint64_t **)a1;
    uint64_t v13 = (_DWORD *)(a1 + 8);
    unint64_t v15 = *(unsigned int *)(a1 + 8);
    if (v15 >= a2) {
      unint64_t v16 = a2;
    }
    else {
      unint64_t v16 = *(unsigned int *)(a1 + 8);
    }
    if (v16)
    {
      if (v16 < 4)
      {
        unint64_t v17 = *(unint64_t **)a1;
        unint64_t v18 = v16;
        do
        {
LABEL_19:
          *v17++ = a3;
          --v18;
        }
        while (v18);
        goto LABEL_20;
      }
      unint64_t v17 = &v14[v16 & 0xFFFFFFFC];
      unint64_t v18 = v16 & 3;
      int64x2_t v19 = vdupq_n_s64(a3);
      BOOL v20 = (int64x2_t *)(v14 + 2);
      uint64_t v21 = v16 & 0xFFFFFFFC;
      do
      {
        v20[-1] = v19;
        *BOOL v20 = v19;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v16 != (v16 & 0xFFFFFFFC)) {
        goto LABEL_19;
      }
    }
LABEL_20:
    unint64_t v22 = a2 - v15;
    if (a2 > v15)
    {
      uint64_t v23 = (int64x2_t *)&v14[v15];
      if (v22 >= 4)
      {
        uint64_t v24 = (unint64_t *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL);
        unint64_t v25 = v22 & 3;
        int64x2_t v26 = vdupq_n_s64(a3);
        uint64_t v27 = v23 + 1;
        unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v27[-1] = v26;
          int64x2_t *v27 = v26;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v24 = &v14[v15];
        unint64_t v25 = a2 - v15;
      }
      do
      {
        *v24++ = a3;
        --v25;
      }
      while (v25);
    }
LABEL_7:
    *uint64_t v13 = a2;
    return;
  }
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = (_DWORD *)(a1 + 8);
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
  uint64_t v7 = *(int64x2_t **)a1;
  uint64_t v8 = *(unint64_t **)a1;
  unint64_t v9 = a2;
  if (a2 >= 4)
  {
    uint64_t v8 = (unint64_t *)v7 + (a2 & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v9 = a2 & 3;
    int64x2_t v10 = vdupq_n_s64(a3);
    uint64_t v11 = v7 + 1;
    unint64_t v12 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v10;
      *uint64_t v11 = v10;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == a2)
    {
      uint64_t v13 = (_DWORD *)(a1 + 8);
      goto LABEL_7;
    }
  }
  do
  {
    *v8++ = a3;
    --v9;
  }
  while (v9);
  *uint64_t v6 = a2;
}

uint64_t mlir::mps::ScatterOp::verify(uint64_t **this)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*this)[9];
  uint64_t v3 = (void *)(*(void *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v2 = (void *)(*this)[9];
    long long v78 = v3;
    uint64_t v79 = v4;
    uint64_t v5 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v78 = 0;
    uint64_t v79 = 0;
    uint64_t v5 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
      uint64_t v7 = (*this)[9];
      __int16 v76 = v5;
      uint64_t v77 = v6;
      uint64_t v8 = (void *)(*(void *)(*(void *)(v7 + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v8) {
        goto LABEL_4;
      }
LABEL_8:
      __int16 v74 = v8;
      uint64_t v75 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v76)) {
        goto LABEL_9;
      }
      return 1;
    }
  }
  __int16 v76 = v5;
  uint64_t v77 = 0;
  uint64_t v8 = (void *)(*(void *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  __int16 v74 = v8;
  uint64_t v75 = v9;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v76)) {
    return 1;
  }
LABEL_9:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
  uint64_t v11 = (const char *)v10;
  LOBYTE(v72) = 0;
  char v73 = 0;
  if (!mlir::mps::getAxis((*this)[3], 1, *(void *)((*this)[9] + 120), v10, (uint64_t)&v72)) {
    return 0;
  }
  if (!v73) {
    return 1;
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74))
  {
    if (*(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74) != 0x8000000000000000)
    {
      uint64_t v13 = v72;
      if (*(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76)
                     + 8 * v13) != 0x8000000000000000)
      {
        uint64_t v14 = ArgAttrsAttr[v13];
        if (v14 != *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74))
        {
          v70[0] = (const void **)"invalid updates tensor shape, shape at axis must ";
          __int16 v71 = 259;
          mlir::OpState::emitOpError(this, v70, (uint64_t)v83);
          uint64_t v57 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)v83, "equal length of indices tensor");
          uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v57);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v83);
          return v18;
        }
      }
    }
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v78)) {
    return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
  if (v15 == v11)
  {
    unint64_t v16 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
    uint64_t v17 = v72;
    if (mlir::verifyCompatibleShape(ArgAttrsAttr, v72, v16, v72)
      && mlir::verifyCompatibleShape(&ArgAttrsAttr[v17 + 1], (uint64_t)&v11[~v17], &v16[v17 + 1], (uint64_t)&v11[~v17]))
    {
      return 1;
    }
    v70[0] = (const void **)"invalid input tensor shapes, updates shape and ";
    __int16 v71 = 259;
    mlir::OpState::emitOpError(this, v70, (uint64_t)v83);
    if (v83[0])
    {
      int v80 = 3;
      uint64_t v81 = "data shape must match except at axis";
      uint64_t v82 = 36;
      uint64_t v47 = &v80;
      unint64_t v48 = (char *)v84;
      if (v85 >= v86)
      {
        unint64_t v62 = v85 + 1;
        if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
        {
          int64_t v68 = (char *)&v80 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
          unint64_t v48 = (char *)v84;
          uint64_t v47 = (int *)((char *)v84 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
          uint64_t v47 = &v80;
          unint64_t v48 = (char *)v84;
        }
      }
      uint64_t v49 = &v48[24 * v85];
      long long v50 = *(_OWORD *)v47;
      *((void *)v49 + 2) = *((void *)v47 + 2);
      *(_OWORD *)uint64_t v49 = v50;
      ++v85;
    }
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v83);
    if (v83[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
    }
    if (v92)
    {
      uint64_t v51 = (void **)__p;
      if (__p)
      {
        uint64_t v52 = v91;
        uint64_t v53 = __p;
        if (v91 != __p)
        {
          do
            uint64_t v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
          while (v52 != v51);
          uint64_t v53 = __p;
        }
        uint64_t v91 = v51;
        operator delete(v53);
      }
      uint64_t v42 = v88;
      if (!v88) {
        goto LABEL_65;
      }
      int v54 = v89;
      uint64_t v44 = v88;
      if (v89 == v88)
      {
LABEL_64:
        uint64_t v89 = v42;
        operator delete(v44);
LABEL_65:
        if (v84 != v87) {
          free(v84);
        }
        return v18;
      }
      do
      {
        long long v56 = (void *)*--v54;
        char v55 = v56;
        void *v54 = 0;
        if (v56) {
          operator delete[](v55);
        }
      }
      while (v54 != v42);
LABEL_63:
      uint64_t v44 = v88;
      goto LABEL_64;
    }
  }
  else
  {
    v70[0] = (const void **)"invalid input tensor shapes, updates rank and result ";
    __int16 v71 = 259;
    mlir::OpState::emitOpError(this, v70, (uint64_t)v83);
    if (v83[0])
    {
      int v80 = 3;
      uint64_t v81 = "rank must be equal, ";
      uint64_t v82 = 20;
      BOOL v20 = &v80;
      uint64_t v21 = (char *)v84;
      if (v85 >= v86)
      {
        unint64_t v58 = v85 + 1;
        if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
        {
          int64_t v65 = (char *)&v80 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v58, 24);
          uint64_t v21 = (char *)v84;
          BOOL v20 = (int *)((char *)v84 + v65);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v58, 24);
          BOOL v20 = &v80;
          uint64_t v21 = (char *)v84;
        }
      }
      unint64_t v22 = &v21[24 * v85];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v22 = v23;
      uint64_t v24 = ++v85;
      if (v83[0])
      {
        int v80 = 2;
        uint64_t v81 = v11;
        unint64_t v25 = &v80;
        int64x2_t v26 = (char *)v84;
        if (v24 >= v86)
        {
          unint64_t v60 = v24 + 1;
          BOOL v61 = (char *)v84 + 24 * v24 > (char *)&v80;
          if (v84 <= &v80 && v61)
          {
            int64_t v67 = (char *)&v80 - (unsigned char *)v84;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
            int64x2_t v26 = (char *)v84;
            unint64_t v25 = (int *)((char *)v84 + v67);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v60, 24);
            unint64_t v25 = &v80;
            int64x2_t v26 = (char *)v84;
          }
        }
        uint64_t v27 = &v26[24 * v85];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = *((void *)v25 + 2);
        *(_OWORD *)uint64_t v27 = v28;
        uint64_t v29 = ++v85;
        if (v83[0])
        {
          int v80 = 3;
          uint64_t v81 = " != ";
          uint64_t v82 = 4;
          uint64_t v30 = &v80;
          uint64_t v31 = (char *)v84;
          if (v29 >= v86)
          {
            unint64_t v63 = v29 + 1;
            BOOL v64 = (char *)v84 + 24 * v29 > (char *)&v80;
            if (v84 <= &v80 && v64)
            {
              int64_t v69 = (char *)&v80 - (unsigned char *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
              uint64_t v31 = (char *)v84;
              uint64_t v30 = (int *)((char *)v84 + v69);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
              uint64_t v30 = &v80;
              uint64_t v31 = (char *)v84;
            }
          }
          uint64_t v32 = &v31[24 * v85];
          long long v33 = *(_OWORD *)v30;
          *((void *)v32 + 2) = *((void *)v30 + 2);
          *(_OWORD *)uint64_t v32 = v33;
          ++v85;
        }
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
    if (v83[0])
    {
      int v80 = 2;
      uint64_t v81 = v34;
      uint64_t v35 = &v80;
      unint64_t v36 = (char *)v84;
      if (v85 >= v86)
      {
        unint64_t v59 = v85 + 1;
        if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
        {
          int64_t v66 = (char *)&v80 - (unsigned char *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v59, 24);
          unint64_t v36 = (char *)v84;
          uint64_t v35 = (int *)((char *)v84 + v66);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v59, 24);
          uint64_t v35 = &v80;
          unint64_t v36 = (char *)v84;
        }
      }
      unsigned int v37 = &v36[24 * v85];
      long long v38 = *(_OWORD *)v35;
      *((void *)v37 + 2) = *((void *)v35 + 2);
      *(_OWORD *)unsigned int v37 = v38;
      ++v85;
    }
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v83);
    if (v83[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
    }
    if (v92)
    {
      char v39 = (void **)__p;
      if (__p)
      {
        uint64_t v40 = v91;
        uint64_t v41 = __p;
        if (v91 != __p)
        {
          do
            uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
          while (v40 != v39);
          uint64_t v41 = __p;
        }
        uint64_t v91 = v39;
        operator delete(v41);
      }
      uint64_t v42 = v88;
      if (!v88) {
        goto LABEL_65;
      }
      char v43 = v89;
      uint64_t v44 = v88;
      if (v89 == v88) {
        goto LABEL_64;
      }
      do
      {
        unint64_t v46 = (void *)*--v43;
        unint64_t v45 = v46;
        *char v43 = 0;
        if (v46) {
          operator delete[](v45);
        }
      }
      while (v43 != v42);
      goto LABEL_63;
    }
  }
  return v18;
}

uint64_t mlir::mps::ScatterAlongAxisOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v64[2] = *MEMORY[0x1E4F143B8];
  v64[0] = a4;
  v64[1] = a5;
  if (a5 == 4)
  {
    uint64_t v13 = mlir::ValueRange::dereference_iterator(v64, 0);
    uint64_t v14 = *(void **)(*(void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v16 = (void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v58 = v16;
    unint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(v64, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void **)(*(void *)v17 + 136);
    if (v18 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v17 = 0;
    }
    unint64_t v57 = v17;
    unint64_t v20 = *(void *)(mlir::ValueRange::dereference_iterator(v64, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = *(void **)(*(void *)v20 + 136);
    if (v21 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v21 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v20 = 0;
    }
    unint64_t v56 = v20;
    if (v16) {
      BOOL v23 = v57 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    if (v23 || v20 == 0) {
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot scatter_along_axis a non-tensor type");
    }
    uint64_t v55 = (uint64_t)v16;
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v55))
    {
      uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v55);
      if (!v28) {
        goto LABEL_68;
      }
      uint64_t v29 = 8 * v28;
      while (*Value != 0x8000000000000000)
      {
        ++Value;
        v29 -= 8;
        if (!v29) {
          goto LABEL_68;
        }
      }
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v57) || mlir::TensorType::hasRank((mlir::TensorType *)&v56))
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        uint64_t v32 = v31;
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
LABEL_40:
          uint64_t v33 = 0;
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v32 = 0;
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_40;
        }
      }
      uint64_t v33 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
      uint64_t v32 = v34;
LABEL_43:
      __dst = v63;
      int v62 = 4;
      if ((unint64_t)v32 < 5)
      {
        if (!v32) {
          goto LABEL_48;
        }
        size_t v36 = 8 * v32;
        uint64_t v35 = v63;
      }
      else
      {
        unsigned int v61 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v63, v32, 8);
        uint64_t v35 = __dst;
        size_t v36 = 8 * v32;
      }
      memset_pattern16(v35, &unk_1811000C0, v36);
LABEL_48:
      unsigned int v61 = v32;
      LOBYTE(v53) = 0;
      char v54 = 0;
      uint64_t v37 = mlir::ValueRange::dereference_iterator(v64, 3);
      char Axis = mlir::mps::getAxis(a2, a3, v37, v32, (uint64_t)&v53);
      if (Axis)
      {
        if (v54)
        {
          if (mlir::TensorType::hasRank((mlir::TensorType *)&v58))
          {
            llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&__dst, v32);
            char v39 = (unsigned char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
            uint64_t v40 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
            uint64_t v42 = (unsigned char *)(v40 + 8 * v41);
            if (v42 != v39) {
              memmove(__dst, v39, v42 - v39);
            }
          }
          if (v32 >= 1)
          {
            uint64_t v43 = 0;
            uint64_t v44 = v53;
            do
            {
              if (v44 == v43) {
                goto LABEL_57;
              }
              if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
              {
                unint64_t v47 = *(void *)(v30 + 8 * v43);
                if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
                  goto LABEL_63;
                }
              }
              else
              {
                unint64_t v47 = 0x8000000000000000;
                if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56))
                {
LABEL_63:
                  unint64_t v45 = 0x8000000000000000;
                  goto LABEL_56;
                }
              }
              unint64_t v45 = *(void *)(v33 + 8 * v43);
LABEL_56:
              v59[0] = *((void *)__dst + v43);
              v59[1] = v47;
              v59[2] = v45;
              unint64_t v46 = mlir::mps::mergeDynamicDims(v59, 3);
              *((void *)__dst + v43) = v46;
LABEL_57:
              ++v43;
            }
            while (v32 != v43);
          }
        }
        unint64_t v48 = __dst;
        uint64_t v49 = v61;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v58);
        uint64_t v55 = mlir::RankedTensorType::get((uint64_t)v48, v49, ElementTypeOrSelf, 0);
      }
      if (__dst != v63) {
        free(__dst);
      }
      if (!Axis) {
        return 0;
      }
    }
LABEL_68:
    uint64_t v51 = v55;
    uint64_t v52 = *(unsigned int *)(a11 + 8);
    if (v52 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v52 + 1, 8);
      LODWORD(v52) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v52) = v51;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::ScatterAlongAxisOp::verify(uint64_t **this)
{
  v151[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*this)[9];
  uint64_t v3 = (void *)(*(void *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v2 = (void *)(*this)[9];
    unsigned int v134 = v3;
    uint64_t v135 = v4;
    uint64_t v5 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    v132 = v5;
    uint64_t v133 = 0;
    uint64_t v8 = (void *)(*(void *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  unsigned int v134 = 0;
  uint64_t v135 = 0;
  uint64_t v5 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  uint64_t v7 = (*this)[9];
  v132 = v5;
  uint64_t v133 = v6;
  uint64_t v8 = (void *)(*(void *)(*(void *)(v7 + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
LABEL_8:
  v131[0] = v8;
  v131[1] = v9;
  uint64_t v149 = v151;
  uint64_t v150 = 0x400000000;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132)
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v131))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
    uint64_t v11 = v10;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v131);
    if (v13 != v11)
    {
      v129[0] = (const void **)"invalid input tensor shapes, indices rank and";
      __int16 v130 = 259;
      mlir::OpState::emitOpError(this, v129, (uint64_t)v139);
      if (v139[0])
      {
        int v136 = 3;
        uint64_t v137 = " updates rank must be equal, ";
        uint64_t v138 = 29;
        unint64_t v56 = &v136;
        unint64_t v57 = (char *)v140;
        if (v141 >= v142)
        {
          unint64_t v105 = v141 + 1;
          if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
          {
            int64_t v119 = (char *)&v136 - (unsigned char *)v140;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v105, 24);
            unint64_t v57 = (char *)v140;
            unint64_t v56 = (int *)((char *)v140 + v119);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v105, 24);
            unint64_t v56 = &v136;
            unint64_t v57 = (char *)v140;
          }
        }
        unint64_t v58 = &v57[24 * v141];
        long long v59 = *(_OWORD *)v56;
        *((void *)v58 + 2) = *((void *)v56 + 2);
        *(_OWORD *)unint64_t v58 = v59;
        ++v141;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v131);
      if (v139[0])
      {
        int v136 = 2;
        uint64_t v137 = v60;
        unsigned int v61 = &v136;
        int v62 = (char *)v140;
        if (v141 >= v142)
        {
          unint64_t v106 = v141 + 1;
          if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
          {
            int64_t v120 = (char *)&v136 - (unsigned char *)v140;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v106, 24);
            int v62 = (char *)v140;
            unsigned int v61 = (int *)((char *)v140 + v120);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v106, 24);
            unsigned int v61 = &v136;
            int v62 = (char *)v140;
          }
        }
        unint64_t v63 = &v62[24 * v141];
        long long v64 = *(_OWORD *)v61;
        *((void *)v63 + 2) = *((void *)v61 + 2);
        *(_OWORD *)unint64_t v63 = v64;
        uint64_t v65 = ++v141;
        if (v139[0])
        {
          int v136 = 3;
          uint64_t v137 = " != ";
          uint64_t v138 = 4;
          int64_t v66 = &v136;
          int64_t v67 = (char *)v140;
          if (v65 >= v142)
          {
            unint64_t v109 = v65 + 1;
            BOOL v110 = (char *)v140 + 24 * v65 > (char *)&v136;
            if (v140 <= &v136 && v110)
            {
              int64_t v122 = (char *)&v136 - (unsigned char *)v140;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v109, 24);
              int64_t v67 = (char *)v140;
              int64_t v66 = (int *)((char *)v140 + v122);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v109, 24);
              int64_t v66 = &v136;
              int64_t v67 = (char *)v140;
            }
          }
          int64_t v68 = &v67[24 * v141];
          long long v69 = *(_OWORD *)v66;
          *((void *)v68 + 2) = *((void *)v66 + 2);
          *(_OWORD *)int64_t v68 = v69;
          uint64_t v70 = ++v141;
          if (v139[0])
          {
            int v136 = 2;
            uint64_t v137 = (const char *)v11;
            __int16 v71 = &v136;
            uint64_t v72 = (char *)v140;
            if (v70 >= v142)
            {
              unint64_t v113 = v70 + 1;
              BOOL v114 = (char *)v140 + 24 * v70 > (char *)&v136;
              if (v140 <= &v136 && v114)
              {
                int64_t v124 = (char *)&v136 - (unsigned char *)v140;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v113, 24);
                uint64_t v72 = (char *)v140;
                __int16 v71 = (int *)((char *)v140 + v124);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v113, 24);
                __int16 v71 = &v136;
                uint64_t v72 = (char *)v140;
              }
            }
            char v73 = &v72[24 * v141];
            long long v74 = *(_OWORD *)v71;
            *((void *)v73 + 2) = *((void *)v71 + 2);
            *(_OWORD *)char v73 = v74;
            ++v141;
          }
        }
      }
      uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v139);
      if (v139[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v139);
      }
      if (v148)
      {
        uint64_t v75 = (void **)__p;
        if (__p)
        {
          __int16 v76 = v147;
          uint64_t v77 = __p;
          if (v147 != __p)
          {
            do
              __int16 v76 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v76 - 1);
            while (v76 != v75);
            uint64_t v77 = __p;
          }
          uint64_t v147 = v75;
          operator delete(v77);
        }
        uint64_t v51 = v144;
        if (!v144) {
          goto LABEL_123;
        }
        long long v78 = v145;
        uint64_t v53 = v144;
        if (v145 == v144) {
          goto LABEL_122;
        }
        do
        {
          int v80 = (void *)*--v78;
          uint64_t v79 = v80;
          void *v78 = 0;
          if (v80) {
            operator delete[](v79);
          }
        }
        while (v78 != v51);
        goto LABEL_121;
      }
      goto LABEL_35;
    }
    uint64_t v14 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
    uint64_t v16 = v15;
    unint64_t v17 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v131);
    char v19 = mlir::verifyCompatibleShape(v17, v18, (void *)v14, v16);
    if (v19)
    {
      uint64_t v20 = v150;
      if (v11 != v150)
      {
        if (v11 >= (unint64_t)v150)
        {
          if (v11 > (unint64_t)HIDWORD(v150))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, v151, v11, 8);
            uint64_t v20 = v150;
          }
          if (v11 != v20) {
            bzero(&v149[v20], 8 * (v11 - v20));
          }
        }
        LODWORD(v150) = v11;
      }
      if (v11 <= 0)
      {
        uint64_t ArgAttrsAttr = v149;
        goto LABEL_28;
      }
      for (uint64_t i = 0; i != v11; ++i)
      {
        v139[0] = *(void *)(v14 + 8 * i);
        v139[1] = v17[i];
        unint64_t v22 = mlir::mps::mergeDynamicDims(v139, 2);
        uint64_t ArgAttrsAttr = v149;
        v149[i] = v22;
      }
    }
    else
    {
      v129[0] = (const void **)"invalid input tensor shapes, indices shape and ";
      __int16 v130 = 259;
      mlir::OpState::emitOpError(this, v129, (uint64_t)v139);
      if (v139[0])
      {
        int v136 = 3;
        uint64_t v137 = "updates shape must be equal";
        uint64_t v138 = 27;
        uint64_t v81 = &v136;
        uint64_t v82 = (char *)v140;
        if (v141 >= v142)
        {
          unint64_t v115 = v141 + 1;
          if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
          {
            int64_t v125 = (char *)&v136 - (unsigned char *)v140;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v115, 24);
            uint64_t v82 = (char *)v140;
            uint64_t v81 = (int *)((char *)v140 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v115, 24);
            uint64_t v81 = &v136;
            uint64_t v82 = (char *)v140;
          }
        }
        uint64_t v83 = &v82[24 * v141];
        long long v84 = *(_OWORD *)v81;
        *((void *)v83 + 2) = *((void *)v81 + 2);
        *(_OWORD *)uint64_t v83 = v84;
        ++v141;
      }
      uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v139);
      if (v139[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v139);
      }
      if (v148)
      {
        unsigned int v85 = (void **)__p;
        if (__p)
        {
          unsigned int v86 = v147;
          uint64_t v87 = __p;
          if (v147 != __p)
          {
            do
              unsigned int v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
            while (v86 != v85);
            uint64_t v87 = __p;
          }
          uint64_t v147 = v85;
          operator delete(v87);
        }
        uint64_t v88 = v144;
        if (v144)
        {
          uint64_t v89 = v145;
          uint64_t v90 = v144;
          if (v145 != v144)
          {
            do
            {
              char v92 = (void *)*--v89;
              uint64_t v91 = v92;
              *uint64_t v89 = 0;
              if (v92) {
                operator delete[](v91);
              }
            }
            while (v89 != v88);
            uint64_t v90 = v144;
          }
          uint64_t v145 = v88;
          operator delete(v90);
        }
        if (v140 != v143) {
          free(v140);
        }
      }
    }
    if (!v19) {
      goto LABEL_35;
    }
  }
  else
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132))
    {
      uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
      BOOL v23 = (mlir::CallableOpInterface *)&v132;
    }
    else
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v131)) {
        goto LABEL_34;
      }
      uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v131);
      BOOL v23 = (mlir::CallableOpInterface *)v131;
    }
    mlir::CallableOpInterface::getArgAttrsAttr(v23);
    uint64_t v11 = v24;
  }
LABEL_28:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v134)) {
    goto LABEL_34;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v134);
  if (v25 == v11)
  {
    LOBYTE(v127) = 0;
    char v128 = 0;
    if (!mlir::mps::getAxis((*this)[3], 1, *(void *)((*this)[9] + 120), v11, (uint64_t)&v127))
    {
      uint64_t v14 = 0;
      goto LABEL_35;
    }
    if (!v128
      || (int64x2_t v26 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v134),
          uint64_t v27 = v127,
          mlir::verifyCompatibleShape(ArgAttrsAttr, v127, v26, v127))
      && mlir::verifyCompatibleShape(&ArgAttrsAttr[v27 + 1], v11 + ~v27, &v26[v27 + 1], v11 + ~v27))
    {
LABEL_34:
      uint64_t v14 = 1;
      goto LABEL_35;
    }
    v129[0] = (const void **)"invalid input tensor shapes, updates shape and ";
    __int16 v130 = 259;
    mlir::OpState::emitOpError(this, v129, (uint64_t)v139);
    if (v139[0])
    {
      int v136 = 3;
      uint64_t v137 = "data shape must match except at axis";
      uint64_t v138 = 36;
      uint64_t v93 = &v136;
      uint64_t v94 = (char *)v140;
      if (v141 >= v142)
      {
        unint64_t v116 = v141 + 1;
        if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
        {
          int64_t v126 = (char *)&v136 - (unsigned char *)v140;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v116, 24);
          uint64_t v94 = (char *)v140;
          uint64_t v93 = (int *)((char *)v140 + v126);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v116, 24);
          uint64_t v93 = &v136;
          uint64_t v94 = (char *)v140;
        }
      }
      unint64_t v95 = &v94[24 * v141];
      long long v96 = *(_OWORD *)v93;
      *((void *)v95 + 2) = *((void *)v93 + 2);
      *(_OWORD *)unint64_t v95 = v96;
      ++v141;
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v139);
    if (v139[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v139);
    }
    if (v148)
    {
      BOOL v97 = (void **)__p;
      if (__p)
      {
        unint64_t v98 = v147;
        unint64_t v99 = __p;
        if (v147 != __p)
        {
          do
            unint64_t v98 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v98 - 1);
          while (v98 != v97);
          unint64_t v99 = __p;
        }
        uint64_t v147 = v97;
        operator delete(v99);
      }
      uint64_t v51 = v144;
      if (!v144) {
        goto LABEL_123;
      }
      unint64_t v100 = v145;
      uint64_t v53 = v144;
      if (v145 == v144)
      {
LABEL_122:
        uint64_t v145 = v51;
        operator delete(v53);
LABEL_123:
        if (v140 != v143) {
          free(v140);
        }
        goto LABEL_35;
      }
      do
      {
        int64_t v102 = (void *)*--v100;
        int64_t v101 = v102;
        void *v100 = 0;
        if (v102) {
          operator delete[](v101);
        }
      }
      while (v100 != v51);
LABEL_121:
      uint64_t v53 = v144;
      goto LABEL_122;
    }
  }
  else
  {
    v129[0] = (const void **)"invalid input tensor shapes, indices rank and ";
    __int16 v130 = 259;
    mlir::OpState::emitOpError(this, v129, (uint64_t)v139);
    if (v139[0])
    {
      int v136 = 3;
      uint64_t v137 = "result rank must be equal, ";
      uint64_t v138 = 27;
      uint64_t v29 = &v136;
      uint64_t v30 = (char *)v140;
      if (v141 >= v142)
      {
        unint64_t v103 = v141 + 1;
        if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
        {
          int64_t v117 = (char *)&v136 - (unsigned char *)v140;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v103, 24);
          uint64_t v30 = (char *)v140;
          uint64_t v29 = (int *)((char *)v140 + v117);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v103, 24);
          uint64_t v29 = &v136;
          uint64_t v30 = (char *)v140;
        }
      }
      uint64_t v31 = &v30[24 * v141];
      long long v32 = *(_OWORD *)v29;
      *((void *)v31 + 2) = *((void *)v29 + 2);
      *(_OWORD *)uint64_t v31 = v32;
      uint64_t v33 = ++v141;
      if (v139[0])
      {
        int v136 = 2;
        uint64_t v137 = (const char *)v11;
        uint64_t v34 = &v136;
        uint64_t v35 = (char *)v140;
        if (v33 >= v142)
        {
          unint64_t v107 = v33 + 1;
          BOOL v108 = (char *)v140 + 24 * v33 > (char *)&v136;
          if (v140 <= &v136 && v108)
          {
            int64_t v121 = (char *)&v136 - (unsigned char *)v140;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v107, 24);
            uint64_t v35 = (char *)v140;
            uint64_t v34 = (int *)((char *)v140 + v121);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v107, 24);
            uint64_t v34 = &v136;
            uint64_t v35 = (char *)v140;
          }
        }
        size_t v36 = &v35[24 * v141];
        long long v37 = *(_OWORD *)v34;
        *((void *)v36 + 2) = *((void *)v34 + 2);
        *(_OWORD *)size_t v36 = v37;
        uint64_t v38 = ++v141;
        if (v139[0])
        {
          int v136 = 3;
          uint64_t v137 = " != ";
          uint64_t v138 = 4;
          char v39 = &v136;
          uint64_t v40 = (char *)v140;
          if (v38 >= v142)
          {
            unint64_t v111 = v38 + 1;
            BOOL v112 = (char *)v140 + 24 * v38 > (char *)&v136;
            if (v140 <= &v136 && v112)
            {
              int64_t v123 = (char *)&v136 - (unsigned char *)v140;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v111, 24);
              uint64_t v40 = (char *)v140;
              char v39 = (int *)((char *)v140 + v123);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v111, 24);
              char v39 = &v136;
              uint64_t v40 = (char *)v140;
            }
          }
          uint64_t v41 = &v40[24 * v141];
          long long v42 = *(_OWORD *)v39;
          *((void *)v41 + 2) = *((void *)v39 + 2);
          *(_OWORD *)uint64_t v41 = v42;
          ++v141;
        }
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v134);
    if (v139[0])
    {
      int v136 = 2;
      uint64_t v137 = v43;
      uint64_t v44 = &v136;
      unint64_t v45 = (char *)v140;
      if (v141 >= v142)
      {
        unint64_t v104 = v141 + 1;
        if (v140 <= &v136 && (char *)v140 + 24 * v141 > (char *)&v136)
        {
          int64_t v118 = (char *)&v136 - (unsigned char *)v140;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v104, 24);
          unint64_t v45 = (char *)v140;
          uint64_t v44 = (int *)((char *)v140 + v118);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v143, v104, 24);
          uint64_t v44 = &v136;
          unint64_t v45 = (char *)v140;
        }
      }
      unint64_t v46 = &v45[24 * v141];
      long long v47 = *(_OWORD *)v44;
      *((void *)v46 + 2) = *((void *)v44 + 2);
      *(_OWORD *)unint64_t v46 = v47;
      ++v141;
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v139);
    if (v139[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v139);
    }
    if (v148)
    {
      unint64_t v48 = (void **)__p;
      if (__p)
      {
        uint64_t v49 = v147;
        long long v50 = __p;
        if (v147 != __p)
        {
          do
            uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          long long v50 = __p;
        }
        uint64_t v147 = v48;
        operator delete(v50);
      }
      uint64_t v51 = v144;
      if (!v144) {
        goto LABEL_123;
      }
      uint64_t v52 = v145;
      uint64_t v53 = v144;
      if (v145 == v144) {
        goto LABEL_122;
      }
      do
      {
        uint64_t v55 = (void *)*--v52;
        char v54 = v55;
        void *v52 = 0;
        if (v55) {
          operator delete[](v54);
        }
      }
      while (v52 != v51);
      goto LABEL_121;
    }
  }
LABEL_35:
  if (v149 != v151) {
    free(v149);
  }
  return v14;
}

uint64_t mlir::mps::GatherNDOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v120 = a4;
  unint64_t v121 = a5;
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v112 = a6;
  v113[0] = 0;
  char v114 = 0;
  long long v115 = v16;
  unint64_t v17 = a5;
  uint64_t v116 = a9;
  uint64_t v117 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v112);
    if (v114) {
      char v114 = 0;
    }
    mlir::OperationName::OperationName(v113, "mps.gather_nd", 13, Context);
    char v114 = 1;
    unint64_t v17 = v121;
  }
  uint64_t v118 = a4;
  unint64_t v119 = a5;
  if (v17 < 2
    || (uint64_t v19 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::GatherNDOpAdaptor::verify((uint64_t)&v112, v19)))
  {
    uint64_t v22 = mlir::Float32Type::get(this, a2);
    uint64_t v23 = mlir::UnrankedTensorType::get(v22);
    uint64_t v24 = a11[2];
    if (v24 >= a11[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v24 + 1, 8);
      LODWORD(v24) = a11[2];
    }
    *(void *)(*(void *)a11 + 8 * v24) = v23;
    goto LABEL_32;
  }
  uint64_t v20 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v120, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  if (v21) {
    uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  }
  else {
    uint64_t v20 = 0;
  }
  unint64_t v104 = v20;
  uint64_t v105 = v21;
  uint64_t v25 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v120, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  if (v26)
  {
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
    int64_t v102 = v25;
    uint64_t v103 = v26;
    uint64_t v27 = v104;
    if (!v104) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v25 = 0;
    int64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v27 = v104;
    if (!v104)
    {
LABEL_26:
      uint64_t v33 = mlir::ValueRange::dereference_iterator(&v120, 0);
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v33);
      if (!ElementTypeOrSelf) {
        uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, v35);
      }
      uint64_t v32 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
LABEL_29:
      unsigned int v36 = a11[2];
      if (v36 >= a11[3])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v36 + 1, 8);
        unsigned int v36 = a11[2];
      }
      *(void *)(*(void *)a11 + 8 * v36) = v32;
LABEL_32:
      ++a11[2];
      return 1;
    }
  }
  if (!v25) {
    goto LABEL_26;
  }
  __p = v27;
  uint64_t v110 = v105;
  int64_t v122 = v25;
  uint64_t v123 = v26;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__p)
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v122) & 1) == 0
    || (uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v122),
        *(void *)(ArgAttrsAttr + 8 * v29 - 8) == 0x8000000000000000))
  {
    uint64_t v30 = mlir::getElementTypeOrSelf(v104);
    uint64_t v31 = (void *)mlir::UnrankedTensorType::get(v30);
    uint64_t v32 = (uint64_t)v31;
    if (v31) {
      mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
    }
    goto LABEL_29;
  }
  int64_t v122 = (void *)*((void *)&v115 + 1);
  mlir::IntegerAttr::getValue(&v122, (llvm::APInt *)&__p);
  if (v110 > 0x40)
  {
    unint64_t v39 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    unint64_t v39 = __p;
  }
  __p = v111;
  uint64_t v110 = 0x400000000;
  uint64_t v40 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v104);
  unint64_t v42 = v41;
  uint64_t v43 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v102);
  uint64_t v45 = v42;
  unsigned int v108 = v39;
  unint64_t v46 = (char *)(v42 - v39);
  if (v42 <= v39 || (long long v47 = (unint64_t *)v43, v48 = v44, v49 = v44 - v39, v44 <= v39))
  {
    char v55 = mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>((uint64_t)a2, a3, "invalid batch dimensions: ", &v108, ", must be less than ranks of all input tensors");
    if (!v55) {
      goto LABEL_59;
    }
    goto LABEL_77;
  }
  unint64_t v107 = v46;
  long long v50 = &v47[v44];
  uint64_t v51 = &v47[v48];
  char v54 = (char *)*(v51 - 1);
  uint64_t v53 = v51 - 1;
  uint64_t v52 = v54;
  unint64_t v106 = v54;
  if (v54 == (char *)0x8000000000000000)
  {
    char v55 = mlir::emitOptionalError<char const(&)[30],char const(&)[27]>((uint64_t)a2, a3, "inner-most dimension of indices array ", "cannot be inferred.");
    if (!v55) {
      goto LABEL_59;
    }
    goto LABEL_77;
  }
  if (v52 > v46)
  {
    char v55 = mlir::emitOptionalError<char const(&)[38],char const(&)[49],char const(&)[41],unsigned long &,char const(&)[4],long long &>((uint64_t)a2, a3, "invalid input tensor shapes: rank of ", "updates tensor must be greater than or equal to ", "inner-most dimension of indices tensor, ", &v107, " < ", &v106);
    if (!v55) {
      goto LABEL_59;
    }
    goto LABEL_77;
  }
  uint64_t v56 = (uint64_t)&v46[v49 + ~(unint64_t)v52];
  if (v56 > 0)
  {
    unint64_t v57 = v56 + v39;
    uint64_t v58 = v110;
    if (v57 != v110)
    {
      if (v57 >= v110)
      {
        uint64_t v101 = v49;
        if (v57 > HIDWORD(v110))
        {
          uint64_t v99 = v45;
          long long v59 = v52;
          unint64_t v60 = v57;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v111, v57, 8);
          unint64_t v57 = v60;
          uint64_t v52 = v59;
          uint64_t v45 = v99;
          long long v50 = &v47[v48];
          uint64_t v49 = v101;
          uint64_t v58 = v110;
        }
        if (v57 != v58)
        {
          uint64_t v61 = v45;
          int v62 = v52;
          int v100 = v57;
          bzero((char *)__p + 8 * v58, 8 * (v57 - v58));
          LODWORD(v57) = v100;
          long long v50 = &v47[v48];
          uint64_t v52 = v62;
          uint64_t v45 = v61;
          uint64_t v49 = v101;
        }
      }
      LODWORD(v110) = v57;
      unint64_t v57 = v57;
    }
    unint64_t v63 = (unint64_t *)__p;
    long long v64 = (char *)__p + 8 * v57;
    if (v52 == v46) {
      goto LABEL_66;
    }
    uint64_t v65 = &v40[v45];
    uint64_t v66 = v45;
    unint64_t v67 = 8 * v45 - 8 * (void)&v52[v39] - 8;
    if (v67 >= 0x78)
    {
      int64_t v68 = &v40[v45];
      long long v69 = (char *)__p + 8 * v57;
      if ((char *)&v40[v66] - (unsigned char *)__p - 8 * v57 >= 0x20)
      {
        uint64_t v72 = (v67 >> 3) + 1;
        uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        int64_t v68 = &v65[v73 / 0xFFFFFFFFFFFFFFF8];
        long long v69 = &v64[-v73];
        long long v74 = (char *)__p + 8 * v57 - 16;
        uint64_t v75 = &v40[v66 - 2];
        uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          _OWORD *v74 = v77;
          v74 -= 2;
          v75 -= 4;
          v76 -= 4;
        }
        while (v76);
        if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
    }
    else
    {
      int64_t v68 = &v40[v45];
      long long v69 = (char *)__p + 8 * v57;
    }
    long long v78 = &v65[v52 - v46];
    uint64_t v79 = v69 - 8;
    do
    {
      uint64_t v80 = *--v68;
      *(void *)uint64_t v79 = v80;
      v79 -= 8;
    }
    while (v68 != v78);
LABEL_66:
    uint64_t v81 = 8 * v39;
    if (v49 != 1)
    {
      uint64_t v82 = (uint64_t)&v64[8 * (void)v52 + -8 * (void)v46];
      uint64_t v83 = v48;
      unint64_t v84 = 8 * v48 - v81 - 16;
      if (v84 < 0xD8) {
        goto LABEL_72;
      }
      if ((unint64_t)&v47[v83 - 1] + 8 * v45 - (void)&v63[(void)&v52[v57 + v39]] < 0x20) {
        goto LABEL_72;
      }
      uint64_t v85 = (v84 >> 3) + 1;
      uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v53 = (unint64_t *)((char *)v53 - v86);
      v82 -= v86;
      uint64_t v87 = (_OWORD *)((char *)v63 + 8 * v57 + 8 * (void)v52 + v81 - 8 * v45 - 16);
      uint64_t v88 = &v47[v83 - 5];
      uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v91 = *(_OWORD *)v88;
        long long v90 = *((_OWORD *)v88 + 1);
        v88 -= 4;
        *(v87 - 1) = v91;
        *uint64_t v87 = v90;
        v87 -= 2;
        v89 -= 4;
      }
      while (v89);
      if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_72:
        char v92 = (void *)(v82 - 8);
        do
        {
          uint64_t v93 = *--v53;
          *v92-- = v93;
        }
        while (v53 != &v50[-v49]);
      }
    }
    if (v39)
    {
      do
      {
        unint64_t v94 = *v47++;
        int64_t v122 = (void *)v94;
        uint64_t v95 = *v40++;
        uint64_t v123 = v95;
        *v63++ = mlir::mps::mergeDynamicDims((unint64_t *)&v122, 2);
        v81 -= 8;
      }
      while (v81);
      char v55 = 1;
    }
    else
    {
      char v55 = 1;
    }
    goto LABEL_77;
  }
  char v55 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Rank of destination array must be greater than 0");
  if (!v55)
  {
LABEL_59:
    uint64_t v70 = mlir::ValueRange::dereference_iterator(&v120, 0);
    uint64_t v71 = mlir::getElementTypeOrSelf(v70);
    uint64_t v32 = 0;
    goto LABEL_79;
  }
LABEL_77:
  long long v96 = __p;
  uint64_t v37 = v110;
  uint64_t v97 = mlir::getElementTypeOrSelf(v104);
  unint64_t v98 = (void *)mlir::RankedTensorType::get((uint64_t)v96, v37, v97, 0);
  uint64_t v32 = (uint64_t)v98;
  if (v98) {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v98 + 8);
  }
LABEL_79:
  if (__p != v111) {
    free(__p);
  }
  if (v55) {
    goto LABEL_29;
  }
  return v37;
}

uint64_t mlir::mps::GatherNDOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    v19[0] = *(void *)(a1 + 32);
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)v21, 32)) {
      return 1;
    }
    v19[0] = "'mps.gather_nd' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
    __int16 v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      unint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v27;
        uint64_t v14 = __p;
        if (v27 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v27 = v12;
        operator delete(v14);
      }
      uint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      uint64_t v15 = v25;
      uint64_t v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        uint64_t v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23) {
          free(v22);
        }
        return v3;
      }
      do
      {
        unint64_t v17 = (void *)*--v15;
        long long v16 = v17;
        *uint64_t v15 = 0;
        if (v17) {
          operator delete[](v16);
        }
      }
      while (v15 != v7);
LABEL_32:
      uint64_t v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "'mps.gather_nd' op requires attribute 'batch_dims'";
    __int16 v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v27;
        uint64_t v6 = __p;
        if (v27 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        uint64_t v27 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      uint64_t v8 = v25;
      uint64_t v9 = v24;
      if (v25 == v24) {
        goto LABEL_33;
      }
      do
      {
        uint64_t v11 = (void *)*--v8;
        uint64_t v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          operator delete[](v10);
        }
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

uint64_t mlir::mps::GatherNDOp::verify(uint64_t **this)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  uint64_t v3 = (void *)(*(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v5 = (*this)[9];
    uint64_t v51 = v3;
    uint64_t v52 = v4;
    uint64_t v6 = (void *)(*(void *)(*(void *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v6 = (void *)(*(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
    {
LABEL_3:
      uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
      uint64_t v49 = v6;
      uint64_t v50 = v7;
      unint64_t v8 = 0x8000000000000000;
      unint64_t v48 = 0x8000000000000000;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51)) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t ArgAttrsAttr = 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v49)) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  uint64_t v49 = v6;
  uint64_t v50 = 0;
  unint64_t v8 = 0x8000000000000000;
  unint64_t v48 = 0x8000000000000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51)) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
  unint64_t v8 = v10;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v49))
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = 0x8000000000000000;
    unint64_t v13 = 0x8000000000000000;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v11 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  unint64_t v13 = v14;
  unint64_t v12 = v11[v14 - 1];
  unint64_t v48 = v12;
LABEL_10:
  unint64_t v15 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v15 = 0;
  }
  v46[0] = *(const void ***)(v15 + 8);
  mlir::IntegerAttr::getValue(v46, (llvm::APInt *)&__p);
  if (v57 > 0x40)
  {
    unint64_t v16 = *(unsigned int *)__p;
    operator delete[](__p);
    if (v8 == 0x8000000000000000) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v16 = __p;
    if (v8 == 0x8000000000000000) {
      goto LABEL_17;
    }
  }
  if (v8 <= v16)
  {
LABEL_19:
    v46[0] = (const void **)"invalid batch dimensions: ";
    __int16 v47 = 259;
    mlir::OpState::emitOpError(this, v46, (uint64_t)&__p);
    if (__p)
    {
      LODWORD(v53) = 5;
      char v54 = (const char *)v16;
      unint64_t v17 = (uint64_t *)&v53;
      uint64_t v18 = (char *)v58;
      if (v59 >= v60)
      {
        unint64_t v41 = v59 + 1;
        if (v58 <= &v53 && (char *)v58 + 24 * v59 > (char *)&v53)
        {
          int64_t v44 = (char *)&v53 - (unsigned char *)v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
          uint64_t v18 = (char *)v58;
          unint64_t v17 = (uint64_t *)((char *)v58 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v41, 24);
          unint64_t v17 = (uint64_t *)&v53;
          uint64_t v18 = (char *)v58;
        }
      }
      uint64_t v19 = &v18[24 * v59];
      long long v20 = *(_OWORD *)v17;
      *((void *)v19 + 2) = v17[2];
      *(_OWORD *)uint64_t v19 = v20;
      uint64_t v21 = ++v59;
      if (__p)
      {
        LODWORD(v53) = 3;
        char v54 = ", must be less than ranks of all input tensors";
        uint64_t v55 = 46;
        uint64_t v22 = (uint64_t *)&v53;
        uint64_t v23 = (char *)v58;
        if (v21 >= v60)
        {
          unint64_t v42 = v21 + 1;
          BOOL v43 = (char *)v58 + 24 * v21 > (char *)&v53;
          if (v58 <= &v53 && v43)
          {
            int64_t v45 = (char *)&v53 - (unsigned char *)v58;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v42, 24);
            uint64_t v23 = (char *)v58;
            uint64_t v22 = (uint64_t *)((char *)v58 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v42, 24);
            uint64_t v22 = (uint64_t *)&v53;
            uint64_t v23 = (char *)v58;
          }
        }
        uint64_t v24 = &v23[24 * v59];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = v22[2];
        *(_OWORD *)uint64_t v24 = v25;
        ++v59;
      }
    }
    uint64_t v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    if (v66)
    {
      uint64_t v27 = (void **)v64;
      if (v64)
      {
        char v28 = v65;
        uint64_t v29 = v64;
        if (v65 != v64)
        {
          do
            char v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          uint64_t v29 = v64;
        }
        uint64_t v65 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v62;
      if (v62)
      {
        uint64_t v31 = v63;
        uint64_t v32 = v62;
        if (v63 != v62)
        {
          do
          {
            uint64_t v34 = (void *)*--v31;
            uint64_t v33 = v34;
            void *v31 = 0;
            if (v34) {
              operator delete[](v33);
            }
          }
          while (v31 != v30);
          uint64_t v32 = v62;
        }
        unint64_t v63 = v30;
        operator delete(v32);
      }
      if (v58 != v61) {
        free(v58);
      }
    }
    return v26;
  }
LABEL_17:
  if (v13 != 0x8000000000000000 && v16 >= v13) {
    goto LABEL_19;
  }
  uint64_t v26 = 1;
  if (v8 != 0x8000000000000000 && v13 != 0x8000000000000000)
  {
    if (mlir::verifyCompatibleShape(ArgAttrsAttr, v16, v11, v16))
    {
      if (v12 == 0x8000000000000000) {
        return v26;
      }
      if (v8 - v16 >= v12)
      {
        if ((uint64_t)(~(v16 + v12) + v8 + v13) > 0) {
          return 1;
        }
        v46[0] = (const void **)"Rank of destination array must be greater than 0";
        __int16 v47 = 259;
        mlir::OpState::emitOpError(this, v46, (uint64_t)&__p);
        uint64_t p_p = (uint64_t)&__p;
      }
      else
      {
        v46[0] = (const void **)"invalid input tensor shapes: rank of updates tensor ";
        __int16 v47 = 259;
        mlir::OpState::emitOpError(this, v46, (uint64_t)&__p);
        uint64_t v35 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "must be greater than or equal to inner-most dimension of ");
        uint64_t v36 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v35, "indices tensor, ");
        unint64_t v53 = v8 - v16;
        uint64_t v37 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v36, (uint64_t *)&v53);
        uint64_t v38 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v37, " < ");
        uint64_t p_p = mlir::InFlightDiagnostic::operator<<<long long &>(v38, (uint64_t *)&v48);
      }
    }
    else
    {
      v46[0] = (const void **)"invalid input tensor shapes: input tensor shapes ";
      __int16 v47 = 259;
      mlir::OpState::emitOpError(this, v46, (uint64_t)&__p);
      uint64_t p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "must match along batch dimensions");
    }
    uint64_t v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(p_p);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
  }
  return v26;
}

uint64_t mlir::mps::GatherOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v64[2] = *MEMORY[0x1E4F143B8];
  v64[0] = a4;
  v64[1] = a5;
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v56 = a6;
  v57[0] = 0;
  char v58 = 0;
  long long v59 = v16;
  uint64_t v60 = a9;
  uint64_t v61 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v56);
    if (v58) {
      char v58 = 0;
    }
    mlir::OperationName::OperationName(v57, "mps.gather", 10, Context);
    char v58 = 1;
  }
  uint64_t v62 = a4;
  unint64_t v63 = a5;
  if (a5 < 3
    || (uint64_t v18 = mlir::UnknownLoc::get(this, a2), !mlir::mps::GatherOpAdaptor::verify((uint64_t)&v56, v18)))
  {
    uint64_t v21 = mlir::Float32Type::get(this, a2);
    uint64_t v22 = mlir::UnrankedTensorType::get(v21);
    uint64_t v23 = *(unsigned int *)(a11 + 8);
    if (v23 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v23) = v22;
    goto LABEL_15;
  }
  uint64_t v19 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v64, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  long long v20 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  if (v20) {
    long long v20 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  }
  else {
    uint64_t v19 = 0;
  }
  v52[0] = v19;
  v52[1] = v20;
  long long v25 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v64, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8))
  {
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
    uint64_t v50 = v25;
    uint64_t v51 = v26;
    if (!v19) {
      goto LABEL_34;
    }
  }
  else
  {
    long long v25 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    if (!v19)
    {
LABEL_34:
      uint64_t v43 = mlir::ValueRange::dereference_iterator(v64, 0);
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v43);
      if (!ElementTypeOrSelf) {
        uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, v45);
      }
      uint64_t v46 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      unsigned int v47 = *(_DWORD *)(a11 + 8);
      if (v47 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v47 + 1, 8);
        unsigned int v47 = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v47) = v46;
LABEL_15:
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
  }
  if (!v25) {
    goto LABEL_34;
  }
  uint64_t v27 = mlir::getElementTypeOrSelf(v19);
  uint64_t v28 = mlir::UnrankedTensorType::get(v27);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v52)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
  {
    goto LABEL_31;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
  uint64_t v30 = v29;
  LOBYTE(v48) = 0;
  char v49 = 0;
  uint64_t v31 = mlir::ValueRange::dereference_iterator(v64, 2);
  if (mlir::mps::getAxis((uint64_t)a2, a3, v31, v30, (uint64_t)&v48))
  {
    if (!v49) {
      goto LABEL_31;
    }
    unsigned int BatchDims = mlir::mps::detail::GatherOpGenericAdaptorBase::getBatchDims((mlir::mps::detail::GatherOpGenericAdaptorBase *)&v56);
    unint64_t v53 = v55;
    uint64_t v54 = 0x400000000;
    uint64_t ArgAttrsAttr = (unint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
    unint64_t v35 = v34;
    uint64_t v36 = (unint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
    if (v38)
    {
      unint64_t v39 = v53;
      uint64_t v40 = v54;
      uint64_t v41 = mlir::getElementTypeOrSelf(v52[0]);
      uint64_t v28 = mlir::RankedTensorType::get((uint64_t)v39, v40, v41, 0);
    }
    if (v53 != v55) {
      free(v53);
    }
    if (v38)
    {
LABEL_31:
      uint64_t v42 = *(unsigned int *)(a11 + 8);
      if (v42 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v42 + 1, 8);
        LODWORD(v42) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v42) = v28;
      goto LABEL_15;
    }
  }
  return 0;
}

uint64_t mlir::mps::GatherOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    v19[0] = *(void *)(a1 + 32);
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)v21, 32)) {
      return 1;
    }
    v19[0] = "'mps.gather' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
    __int16 v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      unint64_t v12 = (void **)__p;
      if (__p)
      {
        unint64_t v13 = v27;
        unint64_t v14 = __p;
        if (v27 != __p)
        {
          do
            unint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          unint64_t v14 = __p;
        }
        uint64_t v27 = v12;
        operator delete(v14);
      }
      uint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      unint64_t v15 = v25;
      uint64_t v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        long long v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23) {
          free(v22);
        }
        return v3;
      }
      do
      {
        unint64_t v17 = (void *)*--v15;
        long long v16 = v17;
        *unint64_t v15 = 0;
        if (v17) {
          operator delete[](v16);
        }
      }
      while (v15 != v7);
LABEL_32:
      uint64_t v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "'mps.gather' op requires attribute 'batch_dims'";
    __int16 v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v27;
        uint64_t v6 = __p;
        if (v27 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        uint64_t v27 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      unint64_t v8 = v25;
      uint64_t v9 = v24;
      if (v25 == v24) {
        goto LABEL_33;
      }
      do
      {
        uint64_t v11 = (void *)*--v8;
        unint64_t v10 = v11;
        *unint64_t v8 = 0;
        if (v11) {
          operator delete[](v10);
        }
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

void *mlir::mps::detail::GatherOpGenericAdaptorBase::getBatchDims(mlir::mps::detail::GatherOpGenericAdaptorBase *this)
{
  uint64_t v5 = *((void *)this + 4);
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40) {
    return __p;
  }
  uint64_t v2 = *(void *)__p;
  operator delete[](__p);
  return (void *)v2;
}

uint64_t mlir::mps::anonymous namespace'::inferGatherShape(uint64_t a1, char a2, unint64_t *a3, unint64_t a4, unint64_t *a5, unint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  v78[2] = *MEMORY[0x1E4F143B8];
  uint64_t v77 = a7;
  unsigned int v76 = a8;
  uint64_t v10 = a8;
  unint64_t v11 = a4 - a8;
  if (a4 <= a8 || a6 < a8) {
    return mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>(a1, a2, "invalid batch dimensions: ", &v76, ", must be less than ranks of all input tensors");
  }
  uint64_t v16 = a7 - a8;
  if (a7 < a8) {
    return mlir::emitOptionalError<char const(&)[39],char const(&)[19],long long &,char const(&)[4],unsigned int &>(a1, a2, "Axis must be greater than or equal to ", "batch dimensions, ", &v77, " < ", &v76);
  }
  unint64_t v19 = a6 - a8;
  unint64_t v20 = v11 - 1;
  if ((uint64_t)(v11 - 1 + v19) >= 0)
  {
    unint64_t v22 = v20 + a6;
    unint64_t v23 = *(unsigned int *)(a9 + 8);
    if (v20 + a6 != v23)
    {
      if (v20 + a6 >= v23)
      {
        uint64_t v74 = a7 - a8;
        unint64_t v75 = v11;
        unint64_t v73 = a6 - a8;
        if (v22 > *(unsigned int *)(a9 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v20 + a6, 8);
          unint64_t v19 = v73;
          uint64_t v16 = v74;
          unint64_t v11 = v75;
          unint64_t v23 = *(unsigned int *)(a9 + 8);
        }
        if (v22 != v23)
        {
          bzero((void *)(*(void *)a9 + 8 * v23), 8 * (v22 - v23));
          unint64_t v19 = v73;
          uint64_t v16 = v74;
          unint64_t v11 = v75;
        }
      }
      *(_DWORD *)(a9 + 8) = v22;
      unint64_t v23 = v22;
    }
    uint64_t v24 = &a3[a4];
    long long v25 = *(unint64_t **)a9;
    uint64_t v26 = *(void *)a9 + 8 * v23;
    unint64_t v27 = v16 - v20;
    if (v16 != v20)
    {
      uint64_t v28 = 8 * a4 - 16;
      unint64_t v29 = v28 - 8 * a7;
      if (v29 < 0x78)
      {
        uint64_t v30 = (char *)&a3[a4];
        uint64_t v31 = &v25[v23];
LABEL_26:
        char v38 = v31 - 1;
        do
        {
          unint64_t v39 = *((void *)v30 - 1);
          v30 -= 8;
          *v38-- = v39;
        }
        while (v30 != (char *)&v24[v27]);
        goto LABEL_28;
      }
      uint64_t v30 = (char *)&a3[a4];
      uint64_t v31 = &v25[v23];
      if (v30 - (char *)v25 - 8 * v23 < 0x20) {
        goto LABEL_26;
      }
      uint64_t v32 = (v29 >> 3) + 1;
      uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v30 = (char *)&v24[v33 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v31 = (unint64_t *)(v26 - v33);
      unint64_t v34 = &v25[v23 - 2];
      unint64_t v35 = (long long *)((char *)a3 + v28);
      uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v37 = *v35;
        *((_OWORD *)v34 - 1) = *(v35 - 1);
        *(_OWORD *)unint64_t v34 = v37;
        v34 -= 4;
        v35 -= 2;
        v36 -= 4;
      }
      while (v36);
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_26;
      }
    }
LABEL_28:
    if (a6 != v10)
    {
      uint64_t v40 = &a5[a6];
      uint64_t v41 = v26 + 8 * v27;
      uint64_t v42 = a6;
      unint64_t v43 = 8 * a6 - 8 * v10 - 8;
      if (v43 >= 0x98)
      {
        uint64_t v45 = v23 + a7;
        int64_t v44 = &a5[a6];
        if ((unint64_t)&a5[v42 - 1] + 8 * a4 - (void)&v25[v45] >= 0x20)
        {
          uint64_t v46 = (v43 >> 3) + 1;
          uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          int64_t v44 = &v40[v47 / 0xFFFFFFFFFFFFFFF8];
          v41 -= v47;
          uint64_t v48 = (_OWORD *)((char *)v25 + v45 * 8 - 8 * a4 - 8);
          char v49 = &a5[v42 - 2];
          uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v51 = *(_OWORD *)v49;
            *(v48 - 1) = *((_OWORD *)v49 - 1);
            *uint64_t v48 = v51;
            v48 -= 2;
            v49 -= 4;
            v50 -= 4;
          }
          while (v50);
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_37;
          }
        }
      }
      else
      {
        int64_t v44 = &a5[a6];
      }
      uint64_t v52 = &v40[-v19];
      unint64_t v53 = (void *)(v41 - 8);
      do
      {
        uint64_t v54 = *--v44;
        *v53-- = v54;
      }
      while (v44 != v52);
    }
LABEL_37:
    if (a7 != v10)
    {
      uint64_t v55 = v26 + 8 * (v16 - (v11 + v19)) + 8;
      uint64_t v56 = &v24[v16 - v11];
      uint64_t v57 = a7;
      unint64_t v58 = 8 * a7 - 8 * v10 - 8;
      if (v58 < 0xB8) {
        goto LABEL_43;
      }
      uint64_t v59 = v23 + a7 + v10;
      uint64_t v60 = 8 * (a6 + a4);
      if ((unint64_t)&a3[v57 - 1] + v60 - (void)&v25[v59] < 0x20) {
        goto LABEL_43;
      }
      uint64_t v61 = (v58 >> 3) + 1;
      uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v56 = (unint64_t *)((char *)v56 - v62);
      v55 -= v62;
      unint64_t v63 = (_OWORD *)((char *)v25 + v59 * 8 - v60 - 8);
      long long v64 = &a3[v57 - 2];
      uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v66 = *(_OWORD *)v64;
        *(v63 - 1) = *((_OWORD *)v64 - 1);
        *unint64_t v63 = v66;
        v63 -= 2;
        v64 -= 4;
        v65 -= 4;
      }
      while (v65);
      if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        uint64_t v67 = &v24[-v11];
        int64_t v68 = (void *)(v55 - 8);
        do
        {
          uint64_t v69 = *--v56;
          *v68-- = v69;
        }
        while (v56 != v67);
      }
    }
    if (a8)
    {
      uint64_t v70 = 8 * v10;
      do
      {
        unint64_t v71 = *a5++;
        v78[0] = v71;
        unint64_t v72 = *a3++;
        v78[1] = v72;
        *v25++ = mlir::mps::mergeDynamicDims(v78, 2);
        v70 -= 8;
      }
      while (v70);
    }
    return 1;
  }

  return mlir::emitOptionalError<char const(&)[57],char const(&)[5]>(a1, a2, "Rank of destination array must be greater than or equal ", "to 0");
}

uint64_t mlir::mps::GatherAlongAxisOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v58[2] = *MEMORY[0x1E4F143B8];
  v58[0] = a4;
  v58[1] = a5;
  if (a5 == 3)
  {
    uint64_t v13 = mlir::ValueRange::dereference_iterator(v58, 0);
    unint64_t v14 = *(void **)(*(void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v16 = (void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v52 = v16;
    unint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(v58, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void **)(*(void *)v17 + 136);
    if (v18 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v17 = 0;
    }
    unint64_t v51 = v17;
    if (v16) {
      BOOL v20 = v17 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20) {
      return mlir::emitOptionalError<char const(&)[43]>(a2, a3, "cannot gather_along_axis a non-tensor type");
    }
    if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
      uint64_t v26 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v51)) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
      uint64_t v24 = v23;
      uint64_t v25 = mlir::getElementTypeOrSelf(v16);
      uint64_t v26 = mlir::RankedTensorType::get(Value, v24, v25, 0);
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v51)) {
        goto LABEL_31;
      }
    }
    uint64_t v28 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
    if (!v29) {
      goto LABEL_51;
    }
    uint64_t v30 = 8 * v29;
    while (*v28 != 0x8000000000000000)
    {
      ++v28;
      v30 -= 8;
      if (!v30) {
        goto LABEL_51;
      }
    }
LABEL_31:
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v52))
    {
      uint64_t v32 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
      uint64_t v33 = v31;
      __dst = v57;
      int v56 = 4;
      if (v31 < 5)
      {
        if (!v31) {
          goto LABEL_37;
        }
        size_t v35 = 8 * v31;
        unint64_t v34 = v57;
      }
      else
      {
        unsigned int v55 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v57, v31, 8);
        unint64_t v34 = __dst;
        size_t v35 = 8 * v33;
      }
      memset_pattern16(v34, &unk_1811000C0, v35);
LABEL_37:
      unsigned int v55 = v33;
      LOBYTE(v49) = 0;
      char v50 = 0;
      uint64_t v36 = mlir::ValueRange::dereference_iterator(v58, 2);
      char Axis = mlir::mps::getAxis(a2, a3, v36, v33, (uint64_t)&v49);
      if (Axis)
      {
        if (v50)
        {
          if (mlir::TensorType::hasRank((mlir::TensorType *)&v51))
          {
            llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&__dst, v33);
            char v38 = (unsigned char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
            uint64_t v39 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
            uint64_t v41 = (unsigned char *)(v39 + 8 * v40);
            if (v41 != v38) {
              memmove(__dst, v38, v41 - v38);
            }
          }
          if (v33 >= 1)
          {
            uint64_t v42 = 0;
            uint64_t v43 = v49;
            do
            {
              if (v43 != v42)
              {
                v53[0] = *((void *)__dst + v42);
                v53[1] = *(void *)(v32 + 8 * v42);
                unint64_t v44 = mlir::mps::mergeDynamicDims(v53, 2);
                *((void *)__dst + v42) = v44;
              }
              ++v42;
            }
            while (v33 != v42);
          }
        }
        uint64_t v45 = __dst;
        uint64_t v46 = v55;
        uint64_t v47 = mlir::getElementTypeOrSelf(v52);
        uint64_t v26 = mlir::RankedTensorType::get((uint64_t)v45, v46, v47, 0);
      }
      if (__dst != v57) {
        free(__dst);
      }
      if (!Axis) {
        return 0;
      }
    }
LABEL_51:
    uint64_t v48 = *(unsigned int *)(a11 + 8);
    if (v48 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
      LODWORD(v48) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v48) = v26;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::GatherAlongAxisOp::verify(uint64_t **this)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  uint64_t v3 = (void *)(*(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v5 = (*this)[9];
    unint64_t v71 = v3;
    uint64_t v72 = v4;
    uint64_t v6 = (void *)(*(void *)(*(void *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v69 = v6;
    uint64_t v70 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)) {
      goto LABEL_7;
    }
    return 1;
  }
  unint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v6 = (void *)(*(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  uint64_t v69 = v6;
  uint64_t v70 = v7;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)) {
    return 1;
  }
LABEL_7:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
  uint64_t v9 = v8;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v69)) {
    return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
  if (v10 == v9)
  {
    LOBYTE(v65) = 0;
    char v66 = 0;
    if (!mlir::mps::getAxis((*this)[3], 1, *(void *)((*this)[9] + 88), v9, (uint64_t)&v65)) {
      return 0;
    }
    if (!v66) {
      return 1;
    }
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
    unint64_t v12 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    uint64_t v13 = v65;
    if (mlir::verifyCompatibleShape(ArgAttrsAttr, v65, v12, v65))
    {
      if (mlir::verifyCompatibleShape(&ArgAttrsAttr[v13 + 1], v9 + ~v13, &v12[v13 + 1], v9 + ~v13)) {
        return 1;
      }
    }
    v67[0] = (const void **)"invalid input tensor shapes, updates shape and ";
    __int16 v68 = 259;
    mlir::OpState::emitOpError(this, v67, (uint64_t)v76);
    if (v76[0])
    {
      int v73 = 3;
      uint64_t v74 = "indices shape must match except at axis";
      uint64_t v75 = 39;
      uint64_t v43 = &v73;
      unint64_t v44 = (char *)v77;
      if (v78 >= v79)
      {
        unint64_t v59 = v78 + 1;
        if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
        {
          int64_t v64 = (char *)&v73 - (unsigned char *)v77;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v59, 24);
          unint64_t v44 = (char *)v77;
          uint64_t v43 = (int *)((char *)v77 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v59, 24);
          uint64_t v43 = &v73;
          unint64_t v44 = (char *)v77;
        }
      }
      uint64_t v45 = &v44[24 * v78];
      long long v46 = *(_OWORD *)v43;
      *((void *)v45 + 2) = *((void *)v43 + 2);
      *(_OWORD *)uint64_t v45 = v46;
      ++v78;
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v76);
    if (v76[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v76);
    }
    if (v85)
    {
      uint64_t v47 = (void **)__p;
      if (__p)
      {
        uint64_t v48 = v84;
        uint64_t v49 = __p;
        if (v84 != __p)
        {
          do
            uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
          while (v48 != v47);
          uint64_t v49 = __p;
        }
        unint64_t v84 = v47;
        operator delete(v49);
      }
      char v38 = v81;
      if (!v81) {
        goto LABEL_59;
      }
      char v50 = v82;
      uint64_t v40 = v81;
      if (v82 == v81)
      {
LABEL_58:
        uint64_t v82 = v38;
        operator delete(v40);
LABEL_59:
        if (v77 != v80) {
          free(v77);
        }
        return v14;
      }
      do
      {
        uint64_t v52 = (void *)*--v50;
        unint64_t v51 = v52;
        void *v50 = 0;
        if (v52) {
          operator delete[](v51);
        }
      }
      while (v50 != v38);
LABEL_57:
      uint64_t v40 = v81;
      goto LABEL_58;
    }
  }
  else
  {
    v67[0] = (const void **)"invalid input tensor shapes, updates rank and ";
    __int16 v68 = 259;
    mlir::OpState::emitOpError(this, v67, (uint64_t)v76);
    if (v76[0])
    {
      int v73 = 3;
      uint64_t v74 = "indices rank must be equal, ";
      uint64_t v75 = 28;
      uint64_t v16 = &v73;
      unint64_t v17 = (char *)v77;
      if (v78 >= v79)
      {
        unint64_t v53 = v78 + 1;
        if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
        {
          int64_t v60 = (char *)&v73 - (unsigned char *)v77;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v53, 24);
          unint64_t v17 = (char *)v77;
          uint64_t v16 = (int *)((char *)v77 + v60);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v53, 24);
          uint64_t v16 = &v73;
          unint64_t v17 = (char *)v77;
        }
      }
      uint64_t v18 = &v17[24 * v78];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v78;
      if (v76[0])
      {
        int v73 = 2;
        uint64_t v74 = (const char *)v9;
        uint64_t v21 = &v73;
        unint64_t v22 = (char *)v77;
        if (v20 >= v79)
        {
          unint64_t v55 = v20 + 1;
          BOOL v56 = (char *)v77 + 24 * v20 > (char *)&v73;
          if (v77 <= &v73 && v56)
          {
            int64_t v62 = (char *)&v73 - (unsigned char *)v77;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v55, 24);
            unint64_t v22 = (char *)v77;
            uint64_t v21 = (int *)((char *)v77 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v55, 24);
            uint64_t v21 = &v73;
            unint64_t v22 = (char *)v77;
          }
        }
        uint64_t v23 = &v22[24 * v78];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        uint64_t v25 = ++v78;
        if (v76[0])
        {
          int v73 = 3;
          uint64_t v74 = " != ";
          uint64_t v75 = 4;
          uint64_t v26 = &v73;
          unint64_t v27 = (char *)v77;
          if (v25 >= v79)
          {
            unint64_t v57 = v25 + 1;
            BOOL v58 = (char *)v77 + 24 * v25 > (char *)&v73;
            if (v77 <= &v73 && v58)
            {
              int64_t v63 = (char *)&v73 - (unsigned char *)v77;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v57, 24);
              unint64_t v27 = (char *)v77;
              uint64_t v26 = (int *)((char *)v77 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v57, 24);
              uint64_t v26 = &v73;
              unint64_t v27 = (char *)v77;
            }
          }
          uint64_t v28 = &v27[24 * v78];
          long long v29 = *(_OWORD *)v26;
          *((void *)v28 + 2) = *((void *)v26 + 2);
          *(_OWORD *)uint64_t v28 = v29;
          ++v78;
        }
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    if (v76[0])
    {
      int v73 = 2;
      uint64_t v74 = v30;
      unint64_t v31 = &v73;
      uint64_t v32 = (char *)v77;
      if (v78 >= v79)
      {
        unint64_t v54 = v78 + 1;
        if (v77 <= &v73 && (char *)v77 + 24 * v78 > (char *)&v73)
        {
          int64_t v61 = (char *)&v73 - (unsigned char *)v77;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v54, 24);
          uint64_t v32 = (char *)v77;
          unint64_t v31 = (int *)((char *)v77 + v61);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, v80, v54, 24);
          unint64_t v31 = &v73;
          uint64_t v32 = (char *)v77;
        }
      }
      uint64_t v33 = &v32[24 * v78];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = *((void *)v31 + 2);
      *(_OWORD *)uint64_t v33 = v34;
      ++v78;
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v76);
    if (v76[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v76);
    }
    if (v85)
    {
      size_t v35 = (void **)__p;
      if (__p)
      {
        uint64_t v36 = v84;
        long long v37 = __p;
        if (v84 != __p)
        {
          do
            uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
          while (v36 != v35);
          long long v37 = __p;
        }
        unint64_t v84 = v35;
        operator delete(v37);
      }
      char v38 = v81;
      if (!v81) {
        goto LABEL_59;
      }
      uint64_t v39 = v82;
      uint64_t v40 = v81;
      if (v82 == v81) {
        goto LABEL_58;
      }
      do
      {
        uint64_t v42 = (void *)*--v39;
        uint64_t v41 = v42;
        *uint64_t v39 = 0;
        if (v42) {
          operator delete[](v41);
        }
      }
      while (v39 != v38);
      goto LABEL_57;
    }
  }
  return v14;
}

uint64_t mlir::mps::GatherOp::verify(uint64_t **this)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  uint64_t v3 = (void *)(*(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v5 = (*this)[9];
    uint64_t v49 = v3;
    uint64_t v50 = v4;
    uint64_t v6 = (void *)(*(void *)(*(void *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v6 = (void *)(*(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6)
    {
LABEL_3:
      uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
      uint64_t v47 = v6;
      uint64_t v48 = v7;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v49)) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t ArgAttrsAttr = 0;
      unint64_t v10 = 0x8000000000000000;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v47)) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  uint64_t v47 = v6;
  uint64_t v48 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v49)) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  unint64_t v10 = v9;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v47))
  {
LABEL_5:
    unint64_t v11 = 0;
    unint64_t v12 = 0x8000000000000000;
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v11 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v47);
  unint64_t v12 = v13;
LABEL_10:
  unint64_t v14 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v14 = 0;
  }
  v44[0] = *(const void ***)(v14 + 8);
  mlir::IntegerAttr::getValue(v44, (llvm::APInt *)&__p);
  if (v55 > 0x40)
  {
    unint64_t v15 = *(unsigned int *)__p;
    operator delete[](__p);
    unint64_t v46 = v15;
    if (v10 == 0x8000000000000000) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v15 = __p;
    unint64_t v46 = __p;
    if (v10 == 0x8000000000000000) {
      goto LABEL_17;
    }
  }
  if (v15 >= v10)
  {
LABEL_19:
    v44[0] = (const void **)"invalid batch dimensions: ";
    __int16 v45 = 259;
    mlir::OpState::emitOpError(this, v44, (uint64_t)&__p);
    if (__p)
    {
      LODWORD(v51) = 5;
      uint64_t v52 = (const char *)v15;
      uint64_t v16 = &v51;
      unint64_t v17 = (char *)v56;
      if (v57 >= v58)
      {
        unint64_t v39 = v57 + 1;
        if (v56 <= &v51 && (char *)v56 + 24 * v57 > (char *)&v51)
        {
          int64_t v42 = (char *)&v51 - (unsigned char *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
          unint64_t v17 = (char *)v56;
          uint64_t v16 = (unint64_t *)((char *)v56 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v39, 24);
          uint64_t v16 = &v51;
          unint64_t v17 = (char *)v56;
        }
      }
      uint64_t v18 = &v17[24 * v57];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v57;
      if (__p)
      {
        LODWORD(v51) = 3;
        uint64_t v52 = ", must be less than ranks of all input tensors";
        uint64_t v53 = 46;
        uint64_t v21 = &v51;
        unint64_t v22 = (char *)v56;
        if (v20 >= v58)
        {
          unint64_t v40 = v20 + 1;
          BOOL v41 = (char *)v56 + 24 * v20 > (char *)&v51;
          if (v56 <= &v51 && v41)
          {
            int64_t v43 = (char *)&v51 - (unsigned char *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
            unint64_t v22 = (char *)v56;
            uint64_t v21 = (unint64_t *)((char *)v56 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
            uint64_t v21 = &v51;
            unint64_t v22 = (char *)v56;
          }
        }
        uint64_t v23 = &v22[24 * v57];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = v21[2];
        *(_OWORD *)uint64_t v23 = v24;
        ++v57;
      }
    }
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    if (v64)
    {
      uint64_t v26 = (void **)v62;
      if (v62)
      {
        unint64_t v27 = v63;
        uint64_t v28 = v62;
        if (v63 != v62)
        {
          do
            unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = v62;
        }
        int64_t v63 = v26;
        operator delete(v28);
      }
      long long v29 = v60;
      if (v60)
      {
        uint64_t v30 = v61;
        unint64_t v31 = v60;
        if (v61 != v60)
        {
          do
          {
            uint64_t v33 = (void *)*--v30;
            uint64_t v32 = v33;
            *uint64_t v30 = 0;
            if (v33) {
              operator delete[](v32);
            }
          }
          while (v30 != v29);
          unint64_t v31 = v60;
        }
        int64_t v61 = v29;
        operator delete(v31);
      }
      if (v56 != v59) {
        free(v56);
      }
    }
    return v25;
  }
LABEL_17:
  if (v12 != 0x8000000000000000 && v15 > v12) {
    goto LABEL_19;
  }
  uint64_t v25 = 1;
  if (v10 == 0x8000000000000000 || v12 == 0x8000000000000000) {
    return v25;
  }
  if (!mlir::verifyCompatibleShape(ArgAttrsAttr, v15, v11, v15))
  {
    v44[0] = (const void **)"invalid input tensor shapes: input tensor shapes ";
    __int16 v45 = 259;
    mlir::OpState::emitOpError(this, v44, (uint64_t)&__p);
    uint64_t p_p = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "must match along batch dimensions");
LABEL_51:
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(p_p);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
    return v25;
  }
  LOBYTE(v51) = 0;
  LOBYTE(v52) = 0;
  if (!mlir::mps::getAxis((*this)[3], 1, *(void *)((*this)[9] + 88), v10, (uint64_t)&v51)) {
    return 0;
  }
  if ((_BYTE)v52)
  {
    if (v51 >= v15)
    {
      if ((uint64_t)(v10 + v12 - 1) >= 0) {
        return v25;
      }
      v44[0] = (const void **)"Rank of destination array must be greater than or equal to 0";
      __int16 v45 = 259;
      mlir::OpState::emitOpError(this, v44, (uint64_t)&__p);
      uint64_t p_p = (uint64_t)&__p;
    }
    else
    {
      v44[0] = (const void **)"Axis must be greater than or equal to batch ";
      __int16 v45 = 259;
      mlir::OpState::emitOpError(this, v44, (uint64_t)&__p);
      uint64_t v34 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__p, "dimensions, ");
      uint64_t v35 = mlir::InFlightDiagnostic::operator<<<long long &>(v34, (uint64_t *)&v51);
      uint64_t v36 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v35, " < ");
      uint64_t p_p = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v36, (uint64_t *)&v46);
    }
    goto LABEL_51;
  }
  return v25;
}

uint64_t mlir::mps::ResizeOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    long long v14 = *a7;
    long long v15 = a7[1];
    *(_OWORD *)unsigned int v57 = a7[2];
  }
  else
  {
    long long v14 = 0uLL;
    *(_OWORD *)unsigned int v57 = 0u;
    long long v15 = 0uLL;
  }
  uint64_t v59 = a6;
  v60[0] = 0;
  char v61 = 0;
  long long v62 = v14;
  long long v63 = v15;
  long long v64 = *(_OWORD *)v57;
  uint64_t v65 = a9;
  uint64_t v66 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61) {
      char v61 = 0;
    }
    mlir::OperationName::OperationName(v60, "mps.resize", 10, Context);
    char v61 = 1;
  }
  uint64_t v67 = a4;
  unint64_t v68 = a5;
  if (!a5
    || (uint64_t v17 = mlir::UnknownLoc::get(this, a2), !mlir::mps::ResizeOpAdaptor::verify((uint64_t)&v59, v17)))
  {
    uint64_t v32 = mlir::Float32Type::get(this, a2);
    uint64_t v33 = mlir::UnrankedTensorType::get(v32);
    uint64_t v34 = *(unsigned int *)(a11 + 8);
    if (v34 >= *(_DWORD *)(a11 + 12))
    {
LABEL_34:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a11 + 8);
    }
LABEL_30:
    *(void *)(*(void *)a11 + 8 * v34) = v33;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  if (a5 <= 1)
  {
LABEL_33:
    v57[0] = v67;
    v57[1] = 0;
    uint64_t v37 = mlir::ValueRange::dereference_iterator(v57, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v37);
    uint64_t v33 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v34 = *(unsigned int *)(a11 + 8);
    if (v34 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  v57[0] = v67;
  v57[1] = 0;
  uint64_t v18 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v57, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8))
  {
    unsigned int v55 = 0;
    uint64_t v56 = 0;
    goto LABEL_33;
  }
  uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  unsigned int v55 = v18;
  uint64_t v56 = v19;
  if (!v18) {
    goto LABEL_33;
  }
  v57[0] = v58;
  v57[1] = (void *)0x400000000;
  unint64_t v20 = (unint64_t)v67;
  unint64_t v69 = (unint64_t)v67;
  uint64_t v70 = v64;
  if (v64) {
    unint64_t v20 = mlir::ValueRange::offset_base(&v69, v64);
  }
  unint64_t v69 = v20;
  uint64_t v70 = 0;
  uint64_t v21 = mlir::ValueRange::dereference_iterator(&v69, 0);
  if (mlir::matchConstantWithIntVector<long long>(v21, (uint64_t)v57))
  {
    uint64_t v22 = LODWORD(v57[1]);
    if (!LODWORD(v57[1])) {
      goto LABEL_37;
    }
    uint64_t v23 = (char *)v57[0];
    unint64_t v24 = (LODWORD(v57[1]) - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v25 = (char *)v57[0];
    if (v24 >= 3)
    {
      unint64_t v26 = v24 + 1;
      uint64_t v25 = (char *)v57[0] + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v27 = (int64x2_t *)((char *)v57[0] + 16);
      v28.i64[0] = -1;
      v28.i64[1] = -1;
      uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      while (1)
      {
        int32x2_t v30 = vmovn_s64(vceqq_s64(v27[-1], v28));
        if (v30.i8[0])
        {
          v27[-1].i64[0] = 0x8000000000000000;
          if ((v30.i8[4] & 1) == 0)
          {
LABEL_22:
            int32x2_t v31 = vmovn_s64(vceqq_s64(*v27, v28));
            if ((v31.i8[0] & 1) == 0) {
              goto LABEL_23;
            }
            goto LABEL_27;
          }
        }
        else if ((v30.i8[4] & 1) == 0)
        {
          goto LABEL_22;
        }
        v27[-1].i64[1] = 0x8000000000000000;
        int32x2_t v31 = vmovn_s64(vceqq_s64(*v27, v28));
        if ((v31.i8[0] & 1) == 0)
        {
LABEL_23:
          if (v31.i8[4]) {
            goto LABEL_28;
          }
          goto LABEL_19;
        }
LABEL_27:
        v27->i64[0] = 0x8000000000000000;
        if (v31.i8[4]) {
LABEL_28:
        }
          v27->i64[1] = 0x8000000000000000;
LABEL_19:
        v27 += 2;
        v29 -= 4;
        if (!v29)
        {
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_37;
          }
          break;
        }
      }
    }
    uint64_t v52 = &v23[8 * v22];
    do
    {
      if (*(void *)v25 == -1) {
        *(void *)uint64_t v25 = 0x8000000000000000;
      }
      v25 += 8;
    }
    while (v25 != v52);
LABEL_37:
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v55))
    {
      uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
      if (v43 != LODWORD(v57[1]))
      {
        unint64_t v69 = (unint64_t)v67;
        uint64_t v70 = 0;
        uint64_t v53 = mlir::ValueRange::dereference_iterator(&v69, 0);
        uint64_t v54 = mlir::getElementTypeOrSelf(v53);
        uint64_t v35 = mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v54);
        unint64_t v51 = v57[0];
        if (v57[0] == v58) {
          return v35;
        }
        goto LABEL_46;
      }
      if (LODWORD(v57[1]))
      {
        uint64_t v44 = ArgAttrsAttr;
        unint64_t v45 = 0;
        unint64_t v46 = v57[0];
        do
        {
          unint64_t v69 = v46[v45];
          uint64_t v70 = *(void *)(v44 + 8 * v45);
          unint64_t v47 = mlir::mps::mergeDynamicDims(&v69, 2);
          unint64_t v46 = v57[0];
          *((void *)v57[0] + v45++) = v47;
        }
        while (v45 < LODWORD(v57[1]));
      }
    }
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
    uint64_t v41 = mlir::RankedTensorType::get((uint64_t)v57[0], LODWORD(v57[1]), OperandRange, 0);
  }
  else
  {
    unint64_t v69 = (unint64_t)v67;
    uint64_t v70 = 0;
    uint64_t v39 = mlir::ValueRange::dereference_iterator(&v69, 0);
    uint64_t v40 = mlir::getElementTypeOrSelf(v39);
    uint64_t v41 = mlir::UnrankedTensorType::get(v40);
  }
  uint64_t v49 = v41;
  uint64_t v50 = *(unsigned int *)(a11 + 8);
  if (v50 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
    LODWORD(v50) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v50) = v49;
  ++*(_DWORD *)(a11 + 8);
  uint64_t v35 = 1;
  unint64_t v51 = v57[0];
  if (v57[0] != v58) {
LABEL_46:
  }
    free(v51);
  return v35;
}

uint64_t mlir::mps::ResizeOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  unint64_t v12 = "'mps.resize' op requires attribute 'mode'";
  __int16 v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  }
  if (v21)
  {
    uint64_t v4 = (void **)__p;
    if (__p)
    {
      uint64_t v5 = v20;
      uint64_t v6 = __p;
      if (v20 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      unint64_t v20 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v17;
    if (v17)
    {
      uint64_t v8 = v18;
      unint64_t v9 = v17;
      if (v18 != v17)
      {
        do
        {
          unint64_t v11 = (void *)*--v8;
          unint64_t v10 = v11;
          *uint64_t v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
        unint64_t v9 = v17;
      }
      uint64_t v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16) {
      free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::UnrankedTensorType::get(a2);
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(void *)(*(void *)a1 + 8 * v4) = v3;
  ++*(_DWORD *)(a1 + 8);
  return 1;
}

uint64_t mlir::mps::verifyResize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v11 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v11 = (void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v11)
    {
LABEL_3:
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
      unint64_t v69 = v11;
      uint64_t v70 = v12;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v69)) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  unint64_t v69 = v11;
  uint64_t v70 = 0;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v69))
  {
LABEL_4:
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v69);
    uint64_t NumElements = v13;
    int v15 = 1;
    uint64_t v16 = (void *)(*(void *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v16) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t v67 = v16;
    uint64_t v68 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v67)) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t NumElements = 0;
  int v15 = 0;
  uint64_t v16 = (void *)(*(void *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  uint64_t v67 = v16;
  uint64_t v68 = v17;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v67)) {
    goto LABEL_18;
  }
LABEL_11:
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
  if (v19)
  {
    uint64_t v20 = 8 * v19;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v20 -= 8;
      if (!v20) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    if (v15)
    {
      char v21 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
      if (NumElements != mlir::ShapedType::getNumElements(v21, v22))
      {
        v65[0] = (const void **)"Size of shape must match rank of input";
        __int16 v66 = 259;
        mlir::Operation::emitOpError(a1, v65, (uint64_t)&v69);
        uint64_t v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
        if (v69) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
        }
        if (v77)
        {
          uint64_t v43 = (void **)__p;
          if (__p)
          {
            uint64_t v44 = v76;
            unint64_t v45 = __p;
            if (v76 != __p)
            {
              do
                uint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
              while (v44 != v43);
              unint64_t v45 = __p;
            }
            unsigned int v76 = v43;
            operator delete(v45);
          }
          unint64_t v46 = v73;
          if (!v73) {
            goto LABEL_87;
          }
          unint64_t v47 = v74;
          uint64_t v48 = v73;
          if (v74 == v73) {
            goto LABEL_86;
          }
          do
          {
            uint64_t v50 = (void *)*--v47;
            uint64_t v49 = v50;
            *unint64_t v47 = 0;
            if (v50) {
              operator delete[](v49);
            }
          }
          while (v47 != v46);
          goto LABEL_85;
        }
        return v41;
      }
    }
    uint64_t v23 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
    uint64_t NumElements = mlir::ShapedType::getNumElements(v23, v24);
    int v15 = 1;
  }
LABEL_18:
  if (!a6) {
    goto LABEL_30;
  }
  uint64_t v25 = (void *)(*(void *)(a6 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25)
  {
    long long v63 = 0;
    uint64_t v64 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63)) {
      goto LABEL_23;
    }
LABEL_30:
    if (!a7) {
      return 1;
    }
    uint64_t v34 = (void *)(*(void *)(a7 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v34)
    {
      uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v34 + 8);
      long long v63 = v34;
      uint64_t v64 = v35;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63)) {
        return 1;
      }
    }
    else
    {
      long long v63 = 0;
      uint64_t v64 = 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63)) {
        return 1;
      }
    }
    uint64_t v36 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
    if (v37)
    {
      uint64_t v38 = 8 * v37;
      while (*v36 != 0x8000000000000000)
      {
        ++v36;
        v38 -= 8;
        if (!v38) {
          goto LABEL_39;
        }
      }
      return 1;
    }
LABEL_39:
    if (!v15) {
      return 1;
    }
    uint64_t v39 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
    if (NumElements == mlir::ShapedType::getNumElements(v39, v40)) {
      return 1;
    }
    v65[0] = (const void **)"Size of offset must match rank of input";
    __int16 v66 = 259;
    mlir::Operation::emitOpError(a1, v65, (uint64_t)&v69);
    uint64_t v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
    if (v69) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
    }
    if (v77)
    {
      unsigned int v57 = (void **)__p;
      if (__p)
      {
        unsigned int v58 = v76;
        uint64_t v59 = __p;
        if (v76 != __p)
        {
          do
            unsigned int v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          uint64_t v59 = __p;
        }
        unsigned int v76 = v57;
        operator delete(v59);
      }
      unint64_t v46 = v73;
      if (!v73) {
        goto LABEL_87;
      }
      int64_t v60 = v74;
      uint64_t v48 = v73;
      if (v74 == v73)
      {
LABEL_86:
        uint64_t v74 = v46;
        operator delete(v48);
LABEL_87:
        if (v71 != &v72) {
          free(v71);
        }
        return v41;
      }
      do
      {
        long long v62 = (void *)*--v60;
        char v61 = v62;
        *int64_t v60 = 0;
        if (v62) {
          operator delete[](v61);
        }
      }
      while (v60 != v46);
LABEL_85:
      uint64_t v48 = v73;
      goto LABEL_86;
    }
    return v41;
  }
  uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  long long v63 = v25;
  uint64_t v64 = v26;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v63)) {
    goto LABEL_30;
  }
LABEL_23:
  unint64_t v27 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
  if (v28)
  {
    uint64_t v29 = 8 * v28;
    while (*v27 != 0x8000000000000000)
    {
      ++v27;
      v29 -= 8;
      if (!v29) {
        goto LABEL_27;
      }
    }
    goto LABEL_30;
  }
LABEL_27:
  if (!v15
    || (int32x2_t v30 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63),
        NumElements == mlir::ShapedType::getNumElements(v30, v31)))
  {
    uint64_t v32 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v63);
    uint64_t NumElements = mlir::ShapedType::getNumElements(v32, v33);
    int v15 = 1;
    goto LABEL_30;
  }
  v65[0] = (const void **)"Size of scale must match rank of input";
  __int16 v66 = 259;
  mlir::Operation::emitOpError(a1, v65, (uint64_t)&v69);
  uint64_t v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v69);
  if (v69) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v69);
  }
  if (v77)
  {
    unint64_t v51 = (void **)__p;
    if (__p)
    {
      uint64_t v52 = v76;
      uint64_t v53 = __p;
      if (v76 != __p)
      {
        do
          uint64_t v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
        while (v52 != v51);
        uint64_t v53 = __p;
      }
      unsigned int v76 = v51;
      operator delete(v53);
    }
    unint64_t v46 = v73;
    if (!v73) {
      goto LABEL_87;
    }
    uint64_t v54 = v74;
    uint64_t v48 = v73;
    if (v74 == v73) {
      goto LABEL_86;
    }
    do
    {
      uint64_t v56 = (void *)*--v54;
      unsigned int v55 = v56;
      void *v54 = 0;
      if (v56) {
        operator delete[](v55);
      }
    }
    while (v54 != v46);
    goto LABEL_85;
  }
  return v41;
}

uint64_t mlir::mps::getResizedAxesImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v86[4] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v13)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
    int v73 = v13;
    uint64_t v74 = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73)) {
      goto LABEL_3;
    }
    return 0;
  }
  int v73 = 0;
  uint64_t v74 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73)) {
    return 0;
  }
LABEL_3:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
  uint64_t v16 = v15;
  unint64_t v84 = v86;
  uint64_t v85 = 0x400000000;
  uint64_t v81 = v83;
  uint64_t v82 = 0x400000000;
  uint64_t v78 = v80;
  uint64_t v79 = 0x400000000;
  if (!a1)
  {
    if (!a2)
    {
      uint64_t ArgAttrsAttr = 0;
      uint64_t v22 = 0;
      uint64_t v20 = 0;
      uint64_t v23 = (void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v23) {
        goto LABEL_20;
      }
      goto LABEL_8;
    }
    uint64_t v25 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v25)
    {
      uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
      uint64_t v75 = v25;
      unint64_t v76 = v26;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
LABEL_15:
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (v16 != v27)
        {
LABEL_39:
          uint64_t v24 = 0;
          unint64_t v45 = v78;
          if (v78 == v80) {
            goto LABEL_97;
          }
LABEL_96:
          free(v45);
          goto LABEL_97;
        }
        uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        a2 = v28;
        uint64_t v22 = 0;
        uint64_t v20 = 0;
        uint64_t v23 = (void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v23) {
          goto LABEL_20;
        }
LABEL_8:
        uint64_t v71 = v23;
        uint64_t v72 = 0;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)) {
          goto LABEL_47;
        }
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v75 = 0;
      unint64_t v76 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75)) {
        goto LABEL_15;
      }
    }
    a2 = 0;
    uint64_t ArgAttrsAttr = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    uint64_t v23 = (void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v23) {
      goto LABEL_20;
    }
    goto LABEL_8;
  }
  uint64_t v17 = (void *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v17)
  {
    uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
    uint64_t v75 = v17;
    unint64_t v76 = v18;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75)) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
  {
LABEL_19:
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    a2 = 0;
    uint64_t ArgAttrsAttr = 0;
    uint64_t v23 = (void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v23) {
      goto LABEL_20;
    }
    goto LABEL_8;
  }
LABEL_6:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  if (v16 != v19) {
    goto LABEL_39;
  }
  uint64_t v20 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  uint64_t v22 = v21;
  a2 = 0;
  uint64_t ArgAttrsAttr = 0;
  uint64_t v23 = (void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23) {
    goto LABEL_8;
  }
LABEL_20:
  uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8);
  uint64_t v71 = v23;
  uint64_t v72 = v29;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)) {
    goto LABEL_47;
  }
LABEL_21:
  int32x2_t v30 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
  if (v31)
  {
    uint64_t v32 = 8 * v31;
    do
    {
      if (*v30 == 0x8000000000000000) {
        goto LABEL_47;
      }
      ++v30;
      v32 -= 8;
    }
    while (v32);
  }
  uint64_t v33 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
  if (v16 != mlir::ShapedType::getNumElements(v33, v34)) {
    goto LABEL_102;
  }
  mlir::matchConstantWithIntVector<long long>(a4, (uint64_t)&v84);
  uint64_t v35 = v85;
  if (!v85) {
    goto LABEL_47;
  }
  uint64_t v36 = (char *)v84;
  unint64_t v37 = (v85 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v38 = (char *)v84;
  if (v37 < 3) {
    goto LABEL_104;
  }
  unint64_t v39 = v37 + 1;
  uint64_t v38 = (char *)v84 + 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v40 = (int64x2_t *)((char *)v84 + 16);
  v41.i64[0] = -1;
  v41.i64[1] = -1;
  uint64_t v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    int32x2_t v43 = vmovn_s64(vceqq_s64(v40[-1], v41));
    if (v43.i8[0])
    {
      v40[-1].i64[0] = 0x8000000000000000;
      if ((v43.i8[4] & 1) == 0) {
        goto LABEL_32;
      }
    }
    else if ((v43.i8[4] & 1) == 0)
    {
LABEL_32:
      int32x2_t v44 = vmovn_s64(vceqq_s64(*v40, v41));
      if ((v44.i8[0] & 1) == 0) {
        goto LABEL_37;
      }
      goto LABEL_33;
    }
    v40[-1].i64[1] = 0x8000000000000000;
    int32x2_t v44 = vmovn_s64(vceqq_s64(*v40, v41));
    if ((v44.i8[0] & 1) == 0)
    {
LABEL_37:
      if ((v44.i8[4] & 1) == 0) {
        goto LABEL_29;
      }
      goto LABEL_38;
    }
LABEL_33:
    v40->i64[0] = 0x8000000000000000;
    if ((v44.i8[4] & 1) == 0) {
      goto LABEL_29;
    }
LABEL_38:
    v40->i64[1] = 0x8000000000000000;
LABEL_29:
    v40 += 2;
    v42 -= 4;
  }
  while (v42);
  if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_47;
  }
LABEL_104:
  unint64_t v69 = &v36[8 * v35];
  do
  {
    if (*(void *)v38 == -1) {
      *(void *)uint64_t v38 = 0x8000000000000000;
    }
    v38 += 8;
  }
  while (v38 != v69);
LABEL_47:
  if (!a5)
  {
LABEL_58:
    if (a6)
    {
      uint64_t v53 = (void *)(*(void *)(a6 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v53)
      {
        uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v53 + 8);
        uint64_t v75 = v53;
        unint64_t v76 = v54;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75)) {
          goto LABEL_69;
        }
LABEL_63:
        unsigned int v55 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (v56)
        {
          uint64_t v57 = 8 * v56;
          while (*v55 != 0x8000000000000000)
          {
            ++v55;
            v57 -= 8;
            if (!v57) {
              goto LABEL_67;
            }
          }
        }
        else
        {
LABEL_67:
          unsigned int v58 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
          if (v16 != mlir::ShapedType::getNumElements(v58, v59)) {
            goto LABEL_102;
          }
          mlir::matchConstantWithFloatVector<float>(a6, (uint64_t)&v78);
        }
        goto LABEL_69;
      }
      uint64_t v75 = 0;
      unint64_t v76 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75)) {
        goto LABEL_63;
      }
    }
LABEL_69:
    if (v16 < 1)
    {
LABEL_95:
      uint64_t v24 = 1;
      unint64_t v45 = v78;
      if (v78 == v80) {
        goto LABEL_97;
      }
      goto LABEL_96;
    }
    uint64_t v60 = 0;
    while (1)
    {
      if (v22)
      {
        unint64_t v62 = *(void *)(v20 + 8 * v60);
        if (v85) {
          goto LABEL_77;
        }
      }
      else
      {
        unint64_t v62 = 0x8000000000000000;
        if (v85)
        {
LABEL_77:
          unint64_t v63 = *((void *)v84 + v60);
          if (a2) {
            goto LABEL_78;
          }
          goto LABEL_83;
        }
      }
      unint64_t v63 = 0x8000000000000000;
      if (a2)
      {
LABEL_78:
        unint64_t v64 = *(void *)(ArgAttrsAttr + 8 * v60);
        if (v82) {
          goto LABEL_79;
        }
        goto LABEL_84;
      }
LABEL_83:
      unint64_t v64 = 0x8000000000000000;
      if (v82)
      {
LABEL_79:
        float v65 = *((float *)v81 + v60);
        if (!v79) {
          goto LABEL_85;
        }
        goto LABEL_80;
      }
LABEL_84:
      float v65 = 1.0;
      if (!v79)
      {
LABEL_85:
        float v66 = 0.0;
        goto LABEL_86;
      }
LABEL_80:
      float v66 = *((float *)v78 + v60);
LABEL_86:
      uint64_t v75 = (void *)v62;
      unint64_t v76 = v63;
      unint64_t v77 = v64;
      unint64_t v67 = mlir::mps::mergeDynamicDims((unint64_t *)&v75, 3);
      if (v62 != 0x8000000000000000 && v62 != v67
        || v63 != 0x8000000000000000 && v63 != v67
        || v64 != 0x8000000000000000 && v64 != v67
        || v65 != 1.0
        || v66 != 0.0)
      {
        unint64_t v61 = *(unsigned int *)(a7 + 8);
        if (v61 >= *(unsigned int *)(a7 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a7, (void *)(a7 + 16), v61 + 1, 8);
          unint64_t v61 = *(unsigned int *)(a7 + 8);
        }
        *(void *)(*(void *)a7 + 8 * v61) = v60;
        ++*(_DWORD *)(a7 + 8);
      }
      if (v16 == ++v60) {
        goto LABEL_95;
      }
    }
  }
  unint64_t v46 = (void *)(*(void *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v46)
  {
    uint64_t v47 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v46 + 8);
    uint64_t v75 = v46;
    unint64_t v76 = v47;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75)) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v75 = 0;
    unint64_t v76 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75)) {
      goto LABEL_58;
    }
  }
  uint64_t v48 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  if (v49)
  {
    uint64_t v50 = 8 * v49;
    while (*v48 != 0x8000000000000000)
    {
      ++v48;
      v50 -= 8;
      if (!v50) {
        goto LABEL_56;
      }
    }
    goto LABEL_58;
  }
LABEL_56:
  unint64_t v51 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
  if (v16 == mlir::ShapedType::getNumElements(v51, v52))
  {
    mlir::matchConstantWithFloatVector<float>(a5, (uint64_t)&v81);
    goto LABEL_58;
  }
LABEL_102:
  uint64_t v24 = 0;
  unint64_t v45 = v78;
  if (v78 != v80) {
    goto LABEL_96;
  }
LABEL_97:
  if (v81 != v83) {
    free(v81);
  }
  if (v84 != v86) {
    free(v84);
  }
  return v24;
}

uint64_t mlir::mps::getResizedAxes(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 48) + 16);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id)
  {
    if (v4 != &mlir::detail::TypeIDResolver<mlir::mps::ResizeGradientOp,void>::id) {
      return 0;
    }
    uint64_t v18 = *(void *)(*(void *)(a1 + 72) + 24);
    if (*(_DWORD *)(a1 + 36)) {
      uint64_t v19 = a1 - 16;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0);
    if (*(unsigned char *)(a1 + 47)) {
      uint64_t v20 = (unsigned int *)(a1 + 80);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void *)(a1 + 72);
    uint64_t v22 = v20[8];
    uint64_t v23 = v21 + 32 * v22;
    uint64_t v24 = v20[9] + v22;
    unsigned int v25 = v20[10];
    if (v25)
    {
      uint64_t v15 = *(void *)(v21 + 32 * v24 + 24);
      uint64_t v16 = *(void *)(v23 + 24);
      if (v20[11])
      {
LABEL_22:
        uint64_t v17 = *(void *)(v21 + 32 * (v25 + v24) + 24);
LABEL_27:
        uint64_t v6 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(v23 + 24);
      if (v20[11]) {
        goto LABEL_22;
      }
    }
    uint64_t v17 = 0;
    goto LABEL_27;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 24);
  if (*(_DWORD *)(a1 + 36)) {
    uint64_t v7 = a1 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  if (*(unsigned char *)(a1 + 47)) {
    unint64_t v9 = (unsigned int *)(a1 + 80);
  }
  else {
    unint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = v9[8];
  uint64_t v12 = v10 + 32 * v11;
  uint64_t v13 = v9[9] + v11;
  unsigned int v14 = v9[10];
  if (!v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(v12 + 24);
    if (v9[11]) {
      goto LABEL_13;
    }
LABEL_24:
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    goto LABEL_28;
  }
  uint64_t v15 = *(void *)(v10 + 32 * v13 + 24);
  uint64_t v16 = *(void *)(v12 + 24);
  if (!v9[11]) {
    goto LABEL_24;
  }
LABEL_13:
  uint64_t v17 = *(void *)(v10 + 32 * (v14 + v13) + 24);
  uint64_t v18 = 0;
LABEL_28:

  return mlir::mps::getResizedAxesImpl(v6, v18, NextResultAtOffset, v16, v15, v17, a2);
}

uint64_t mlir::mps::ResizeOp::getShape(mlir::mps::ResizeOp *this)
{
  if (*(unsigned char *)(*(void *)this + 47)) {
    uint64_t v1 = *(void *)this + 80;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(*(void *)(*(void *)this + 72) + 32 * *(unsigned int *)(v1 + 32) + 24);
}

uint64_t mlir::mps::ResizeOp::getScale(mlir::mps::ResizeOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[10];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[9] + v2[8]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[9] + v2[8]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::ResizeOp::getOffset(mlir::mps::ResizeOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[11];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[10] + v2[9] + v2[8]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[10] + v2[9] + v2[8]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::getResizeLayout(mlir::mps *this, mlir::Operation *a2)
{
  uint64_t v2 = (uint64_t)this;
  void v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (this)
  {
    int v3 = *(void **)(*((void *)this + 6) + 16);
    if (v3 != &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id
      && v3 != &mlir::detail::TypeIDResolver<mlir::mps::ResizeGradientOp,void>::id)
    {
      goto LABEL_13;
    }
    if (*((_DWORD *)this + 9)) {
      uint64_t v4 = (char *)this - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v4, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5)
    {
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
      uint64_t v12 = v5;
      uint64_t v13 = v6;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v12))
      {
LABEL_12:
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v12);
        if (v8 > 4) {
          goto LABEL_13;
        }
        unint64_t v10 = v8;
        unsigned int v14 = v16;
        uint64_t v15 = 0x200000000;
        if (!mlir::mps::getResizedAxes(v2, (uint64_t)&v14)) {
          goto LABEL_17;
        }
        uint64_t v2 = v15;
        if (v15 > 2) {
          goto LABEL_17;
        }
        if (v10 == 2)
        {
          uint64_t v2 = 6;
          uint64_t v7 = 0x100000000;
          uint64_t v11 = v14;
          if (v14 == v16) {
            return v2 | v7 & 0x100000000;
          }
          goto LABEL_45;
        }
        if (v10 != 3)
        {
          if (v10 != 4)
          {
LABEL_17:
            uint64_t v7 = 0;
            uint64_t v2 = 0;
            uint64_t v11 = v14;
            if (v14 == v16) {
              return v2 | v7 & 0x100000000;
            }
            goto LABEL_45;
          }
          if (!v15) {
            goto LABEL_44;
          }
          if (v15 == 1)
          {
            uint64_t v2 = 0;
            if ((*(void *)v14 & 0xFFFFFFFFFFFFFFFELL) == 2 || *(void *)v14 != 1)
            {
LABEL_44:
              uint64_t v7 = 0x100000000;
              uint64_t v11 = v14;
              if (v14 == v16) {
                return v2 | v7 & 0x100000000;
              }
LABEL_45:
              free(v11);
              return v2 | v7 & 0x100000000;
            }
LABEL_36:
            uint64_t v2 = 1;
            uint64_t v7 = 0x100000000;
            uint64_t v11 = v14;
            if (v14 == v16) {
              return v2 | v7 & 0x100000000;
            }
            goto LABEL_45;
          }
          if (*(void *)v14 == 1 && *((void *)v14 + 1) == 2) {
            goto LABEL_36;
          }
          goto LABEL_43;
        }
        if (v15)
        {
          if (v15 == 1)
          {
            if ((unint64_t)(*(void *)v14 - 1) < 2) {
              goto LABEL_32;
            }
            if (*(void *)v14) {
              goto LABEL_43;
            }
          }
          else
          {
            if (*(void *)v14)
            {
              if (*(void *)v14 == 1)
              {
                uint64_t v2 = 4 * (*((void *)v14 + 1) == 2);
                uint64_t v7 = 0x100000000;
                uint64_t v11 = v14;
                if (v14 == v16) {
                  return v2 | v7 & 0x100000000;
                }
                goto LABEL_45;
              }
              goto LABEL_43;
            }
            if (*((void *)v14 + 1) != 1)
            {
LABEL_43:
              uint64_t v2 = 0;
              goto LABEL_44;
            }
          }
          uint64_t v2 = 5;
          uint64_t v7 = 0x100000000;
          uint64_t v11 = v14;
          if (v14 == v16) {
            return v2 | v7 & 0x100000000;
          }
          goto LABEL_45;
        }
LABEL_32:
        uint64_t v2 = 4;
        uint64_t v7 = 0x100000000;
        uint64_t v11 = v14;
        if (v14 == v16) {
          return v2 | v7 & 0x100000000;
        }
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v12)) {
        goto LABEL_12;
      }
    }
LABEL_13:
    uint64_t v7 = 0;
    uint64_t v2 = 0;
    return v2 | v7 & 0x100000000;
  }
  uint64_t v7 = 0;
  return v2 | v7 & 0x100000000;
}

uint64_t mlir::mps::ResizeGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    long long v14 = *a7;
    long long v15 = a7[1];
    *(_OWORD *)unint64_t v46 = a7[2];
  }
  else
  {
    long long v14 = 0uLL;
    *(_OWORD *)unint64_t v46 = 0u;
    long long v15 = 0uLL;
  }
  uint64_t v48 = a6;
  v49[0] = 0;
  char v50 = 0;
  long long v51 = v14;
  long long v52 = v15;
  long long v53 = *(_OWORD *)v46;
  uint64_t v54 = a9;
  uint64_t v55 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v48);
    if (v50) {
      char v50 = 0;
    }
    mlir::OperationName::OperationName(v49, "mps.resize_gradient", 19, Context);
    char v50 = 1;
  }
  uint64_t v56 = a4;
  unint64_t v57 = a5;
  if (!a5
    || (uint64_t v17 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::ResizeGradientOpAdaptor::verify((uint64_t)&v48, v17)))
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
    uint64_t v31 = mlir::UnrankedTensorType::get(v30);
    uint64_t v32 = *(unsigned int *)(a11 + 8);
    if (v32 >= *(_DWORD *)(a11 + 12))
    {
LABEL_27:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v32 + 1, 8);
      LODWORD(v32) = *(_DWORD *)(a11 + 8);
    }
LABEL_23:
    *(void *)(*(void *)a11 + 8 * v32) = v31;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  if (a5 <= 1)
  {
LABEL_26:
    v46[0] = v56;
    v46[1] = 0;
    uint64_t v35 = mlir::ValueRange::dereference_iterator(v46, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v35);
    uint64_t v31 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v32 = *(unsigned int *)(a11 + 8);
    if (v32 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  v46[0] = v56;
  v46[1] = 0;
  uint64_t v18 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v46, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8))
  {
    int32x2_t v44 = 0;
    uint64_t v45 = 0;
    goto LABEL_26;
  }
  uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
  int32x2_t v44 = v18;
  uint64_t v45 = v19;
  if (!v18) {
    goto LABEL_26;
  }
  v46[0] = v47;
  v46[1] = (void *)0x400000000;
  unint64_t v20 = (unint64_t)v56;
  unint64_t v58 = (unint64_t)v56;
  uint64_t v59 = v53;
  if (v53) {
    unint64_t v20 = mlir::ValueRange::offset_base(&v58, v53);
  }
  unint64_t v58 = v20;
  uint64_t v59 = 0;
  uint64_t v21 = mlir::ValueRange::dereference_iterator(&v58, 0);
  if (mlir::matchConstantWithIntVector<long long>(v21, (uint64_t)v46))
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44))
    {
      uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
      if (v23 != LODWORD(v46[1]))
      {
        unint64_t v58 = (unint64_t)v56;
        uint64_t v59 = 0;
        uint64_t v42 = mlir::ValueRange::dereference_iterator(&v58, 0);
        uint64_t v43 = mlir::getElementTypeOrSelf(v42);
        uint64_t v33 = mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v43);
        int64x2_t v41 = v46[0];
        if (v46[0] == v47) {
          return v33;
        }
        goto LABEL_32;
      }
      if (LODWORD(v46[1]))
      {
        uint64_t v24 = ArgAttrsAttr;
        unint64_t v25 = 0;
        uint64_t v26 = v46[0];
        do
        {
          unint64_t v58 = v26[v25];
          uint64_t v59 = *(void *)(v24 + 8 * v25);
          unint64_t v27 = mlir::mps::mergeDynamicDims(&v58, 2);
          uint64_t v26 = v46[0];
          *((void *)v46[0] + v25++) = v27;
        }
        while (v25 < LODWORD(v46[1]));
      }
    }
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v44);
    uint64_t v29 = mlir::RankedTensorType::get((uint64_t)v46[0], LODWORD(v46[1]), OperandRange, 0);
  }
  else
  {
    unint64_t v58 = (unint64_t)v56;
    uint64_t v59 = 0;
    uint64_t v37 = mlir::ValueRange::dereference_iterator(&v58, 0);
    uint64_t v38 = mlir::getElementTypeOrSelf(v37);
    uint64_t v29 = mlir::UnrankedTensorType::get(v38);
  }
  uint64_t v39 = v29;
  uint64_t v40 = *(unsigned int *)(a11 + 8);
  if (v40 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v40 + 1, 8);
    LODWORD(v40) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v40) = v39;
  ++*(_DWORD *)(a11 + 8);
  uint64_t v33 = 1;
  int64x2_t v41 = v46[0];
  if (v46[0] != v47) {
LABEL_32:
  }
    free(v41);
  return v33;
}

uint64_t mlir::mps::ResizeGradientOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  uint64_t v12 = "'mps.resize_gradient' op requires attribute 'mode'";
  __int16 v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  }
  if (v21)
  {
    uint64_t v4 = (void **)__p;
    if (__p)
    {
      uint64_t v5 = v20;
      uint64_t v6 = __p;
      if (v20 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      unint64_t v20 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v17;
    if (v17)
    {
      unint64_t v8 = v18;
      unint64_t v9 = v17;
      if (v18 != v17)
      {
        do
        {
          uint64_t v11 = (void *)*--v8;
          unint64_t v10 = v11;
          *unint64_t v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
        unint64_t v9 = v17;
      }
      uint64_t v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16) {
      free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::TopKOp::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  v57[0] = a11;
  v57[1] = &v58;
  unint64_t v58 = a1;
  if (a7)
  {
    uint64_t v13 = *a7;
    uint64_t v64 = a6;
    v65[0] = 0;
    char v66 = 0;
    uint64_t v67 = v13;
    uint64_t v68 = a9;
    uint64_t v69 = a10;
    if (!a6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v64 = a6;
    v65[0] = 0;
    char v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = a9;
    uint64_t v69 = a10;
    if (!a6)
    {
LABEL_3:
      uint64_t v70 = a4;
      unint64_t v71 = a5;
      long long v14 = v58;
      if (a5) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t v24 = mlir::Float32Type::get(v14, a2);
      uint64_t v17 = mlir::UnrankedTensorType::get(v24);
      uint64_t v18 = *(unsigned int *)(a11 + 8);
      if (v18 < *(_DWORD *)(a11 + 12)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v64);
  if (v66) {
    char v66 = 0;
  }
  mlir::OperationName::OperationName(v65, "mps.top_k", 9, Context);
  char v66 = 1;
  uint64_t v70 = a4;
  unint64_t v71 = a5;
  long long v14 = v58;
  if (!a5) {
    goto LABEL_14;
  }
LABEL_4:
  mlir::UnknownLoc::get(v14, a2);
  if (a5 <= 2) {
    goto LABEL_5;
  }
  unint64_t v61 = v70;
  uint64_t v62 = 0;
  unint64_t v25 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v61, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  if (v26) {
    uint64_t v26 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  }
  else {
    unint64_t v25 = 0;
  }
  v56[0] = v25;
  v56[1] = v26;
  unint64_t v61 = v70;
  uint64_t v62 = 1;
  unint64_t v61 = (void *)mlir::ValueRange::offset_base(&v61, 1);
  uint64_t v62 = 0;
  uint64_t v27 = mlir::ValueRange::dereference_iterator(&v61, 0);
  unint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v59 = &v61;
  uint64_t v60 = v27;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v60);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, DefiningOp))
  {
    uint64_t SingleInt = mlir::getSingleIntValue<int>((uint64_t)v61, v62);
    int v30 = SingleInt & 0xFFFFFF00;
    int v31 = SingleInt;
    int v32 = BYTE4(SingleInt);
  }
  else
  {
    int v30 = 0;
    int v32 = 0;
    int v31 = 0;
  }
  unint64_t v61 = v70;
  uint64_t v62 = 2;
  unint64_t v61 = (void *)mlir::ValueRange::offset_base(&v61, 2);
  uint64_t v62 = 0;
  uint64_t v33 = mlir::ValueRange::dereference_iterator(&v61, 0);
  unint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v59 = &v61;
  uint64_t v60 = v33;
  uint64_t v34 = mlir::Value::getDefiningOp((mlir::Value *)&v60);
  if (v34 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v34))
  {
    uint64_t v35 = mlir::getSingleIntValue<int>((uint64_t)v61, v62);
    uint64_t v36 = v35 & 0xFFFFFF00;
    uint64_t v37 = v35;
    uint64_t v38 = BYTE4(v35);
    if (!v25) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
    uint64_t v37 = 0;
    if (!v25) {
      goto LABEL_5;
    }
  }
  if (!v32
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56), !v39))
  {
LABEL_5:
    unint64_t v61 = v70;
    uint64_t v62 = 0;
    uint64_t v15 = mlir::ValueRange::dereference_iterator(&v61, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v15);
    uint64_t v17 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v18 = *(unsigned int *)(a11 + 8);
    if (v18 < *(_DWORD *)(a11 + 12))
    {
LABEL_6:
      *(void *)(*(void *)a11 + 8 * v18) = v17;
      ++*(_DWORD *)(a11 + 8);
      uint64_t v19 = mlir::IntegerType::get((uint64_t)v58, 0x20u, 1u);
      uint64_t v20 = mlir::UnrankedTensorType::get(v19);
      uint64_t v21 = *(unsigned int *)(a11 + 8);
      if (v21 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
        LODWORD(v21) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v21) = v20;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
LABEL_15:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a11 + 8);
    goto LABEL_6;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
  uint64_t v41 = (v40 & ((uint64_t)(v31 | v30) >> 31)) + (v31 | v30);
  if (v41 < v40)
  {
    if (v38)
    {
      unint64_t v42 = v37 | v36;
      if ((int)(v37 | v36) <= 0) {
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v42 = 0x8000000000000000;
    }
    uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
    uint64_t v46 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v61, ArgAttrsAttr, (unsigned char *)(v46 + 8 * v47));
    uint64_t v48 = v61;
    *((void *)v61 + v41) = v42;
    uint64_t v49 = v62;
    uint64_t v50 = mlir::getElementTypeOrSelf(v56[0]);
    uint64_t v51 = mlir::RankedTensorType::get((uint64_t)v48, v49, v50, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v51);
    long long v52 = v61;
    uint64_t v53 = v62;
    uint64_t v54 = mlir::IntegerType::get((uint64_t)v58, 0x20u, 1u);
    uint64_t v55 = mlir::RankedTensorType::get((uint64_t)v52, v53, v54, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v55);
    if (v61 != &v63) {
      free(v61);
    }
    return 1;
  }
LABEL_34:
  unint64_t v61 = v70;
  uint64_t v62 = 0;
  uint64_t v43 = mlir::ValueRange::dereference_iterator(&v61, 0);
  uint64_t v44 = mlir::getElementTypeOrSelf(v43);
  return mlir::mps::TopKOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()((uint64_t)v57, v44);
}

uint64_t mlir::mps::TopKOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = mlir::UnrankedTensorType::get(a2);
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  if (v5 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(v3 + 16), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(v3 + 8);
  }
  *(void *)(*(void *)v3 + 8 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = mlir::IntegerType::get(**(void **)(a1 + 8), 0x20u, 1u);
  uint64_t v8 = mlir::UnrankedTensorType::get(v7);
  uint64_t v9 = *(unsigned int *)(v6 + 8);
  if (v9 >= *(_DWORD *)(v6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(v6 + 8);
  }
  *(void *)(*(void *)v6 + 8 * v9) = v8;
  ++*(_DWORD *)(v6 + 8);
  return 1;
}

uint64_t mlir::matchConstantWithIntValue<int>(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = (uint64_t **)&v4;
  uint64_t v6 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v6);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v3, DefiningOp)) {
    return mlir::getSingleIntValue<int>(v4, v5);
  }
  else {
    return 0;
  }
}

uint64_t mlir::mps::TopKOp::verify(uint64_t **this)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(const void ***)((*this)[9] + 88);
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v60 = (uint64_t **)&v65;
  v58[0] = v2;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v58);
  if (!DefiningOp) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v60, DefiningOp)) {
    return 1;
  }
  uint64_t SingleInt = mlir::getSingleIntValue<int>(v65, v66);
  if ((SingleInt & 0xFF00000000) == 0) {
    return 1;
  }
  unsigned int v5 = SingleInt;
  if ((int)SingleInt <= 0)
  {
    v58[0] = (const void **)"K must be larger than 0";
    __int16 v59 = 259;
    mlir::OpState::emitOpError(this, v58, (uint64_t)&v65);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
    if (v65) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
    }
    if (v75)
    {
      uint64_t v13 = (void **)__p;
      if (__p)
      {
        long long v14 = v74;
        uint64_t v15 = __p;
        if (v74 != __p)
        {
          do
            long long v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        uint64_t v74 = v13;
        operator delete(v15);
      }
      uint64_t v16 = v71;
      if (v71)
      {
        uint64_t v17 = v72;
        uint64_t v18 = v71;
        if (v72 != v71)
        {
          do
          {
            uint64_t v20 = (void *)*--v17;
            uint64_t v19 = v20;
            *uint64_t v17 = 0;
            if (v20) {
              operator delete[](v19);
            }
          }
          while (v17 != v16);
          uint64_t v18 = v71;
        }
        uint64_t v72 = v16;
        operator delete(v18);
      }
      unint64_t v25 = v67;
      if (v67 != v70) {
        goto LABEL_62;
      }
    }
    return v12;
  }
  uint64_t v6 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v6)
  {
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
    uint64_t v56 = v6;
    uint64_t v57 = v7;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56)) {
      goto LABEL_7;
    }
    return 1;
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56)) {
    return 1;
  }
LABEL_7:
  v63[0] = &v64;
  v63[1] = (void *)0x100000000;
  uint64_t v8 = *(const void ***)((*this)[9] + 56);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
  uint64_t v10 = v9;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v60 = (uint64_t **)&v65;
  v58[0] = v8;
  uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)v58);
  if (v11 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v60, v11)) {
  else
  }
    mlir::emitOptionalError<char const(&)[39]>(0, 0, "axes is not a constant");
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
  if (v22 < 1)
  {
    uint64_t v24 = 1;
  }
  else
  {
    uint64_t v23 = *(unsigned int *)v63[0];
    uint64_t v24 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56) + 8 * v23);
    if (v24 == 0x8000000000000000) {
      goto LABEL_60;
    }
  }
  if (v24 >= v5)
  {
LABEL_60:
    uint64_t v12 = 1;
    goto LABEL_61;
  }
  v58[0] = (const void **)"k is larger than input minor dimension, ";
  __int16 v59 = 259;
  mlir::OpState::emitOpError(this, v58, (uint64_t)&v65);
  if (v65)
  {
    LODWORD(v60) = 2;
    uint64_t v61 = v5;
    uint64_t v26 = &v60;
    uint64_t v27 = (char *)v67;
    if (v68 >= v69)
    {
      unint64_t v48 = v68 + 1;
      if (v67 <= &v60 && (char *)v67 + 24 * v68 > (char *)&v60)
      {
        int64_t v53 = (char *)&v60 - (unsigned char *)v67;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v48, 24);
        uint64_t v27 = (char *)v67;
        uint64_t v26 = (uint64_t ***)((char *)v67 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v48, 24);
        uint64_t v26 = &v60;
        uint64_t v27 = (char *)v67;
      }
    }
    uint64_t v28 = &v27[24 * v68];
    long long v29 = *(_OWORD *)v26;
    *((void *)v28 + 2) = v26[2];
    *(_OWORD *)uint64_t v28 = v29;
    uint64_t v30 = ++v68;
    if (v65)
    {
      LODWORD(v60) = 3;
      uint64_t v61 = (uint64_t)" > ";
      uint64_t v62 = 3;
      int v31 = &v60;
      int v32 = (char *)v67;
      if (v30 >= v69)
      {
        unint64_t v49 = v30 + 1;
        BOOL v50 = (char *)v67 + 24 * v30 > (char *)&v60;
        if (v67 <= &v60 && v50)
        {
          int64_t v54 = (char *)&v60 - (unsigned char *)v67;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v49, 24);
          int v32 = (char *)v67;
          int v31 = (uint64_t ***)((char *)v67 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v49, 24);
          int v31 = &v60;
          int v32 = (char *)v67;
        }
      }
      uint64_t v33 = &v32[24 * v68];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = v31[2];
      *(_OWORD *)uint64_t v33 = v34;
      uint64_t v35 = ++v68;
      if (v65)
      {
        LODWORD(v60) = 2;
        uint64_t v61 = v24;
        uint64_t v36 = &v60;
        uint64_t v37 = (char *)v67;
        if (v35 >= v69)
        {
          unint64_t v51 = v35 + 1;
          BOOL v52 = (char *)v67 + 24 * v35 > (char *)&v60;
          if (v67 <= &v60 && v52)
          {
            int64_t v55 = (char *)&v60 - (unsigned char *)v67;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v51, 24);
            uint64_t v37 = (char *)v67;
            uint64_t v36 = (uint64_t ***)((char *)v67 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v70, v51, 24);
            uint64_t v36 = &v60;
            uint64_t v37 = (char *)v67;
          }
        }
        uint64_t v38 = &v37[24 * v68];
        long long v39 = *(_OWORD *)v36;
        *((void *)v38 + 2) = v36[2];
        *(_OWORD *)uint64_t v38 = v39;
        ++v68;
      }
    }
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
  if (v65) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
  }
  if (v75)
  {
    uint64_t v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v74;
      unint64_t v42 = __p;
      if (v74 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        unint64_t v42 = __p;
      }
      uint64_t v74 = v40;
      operator delete(v42);
    }
    uint64_t v43 = v71;
    if (v71)
    {
      uint64_t v44 = v72;
      uint64_t v45 = v71;
      if (v72 != v71)
      {
        do
        {
          uint64_t v47 = (void *)*--v44;
          uint64_t v46 = v47;
          *uint64_t v44 = 0;
          if (v47) {
            operator delete[](v46);
          }
        }
        while (v44 != v43);
        uint64_t v45 = v71;
      }
      uint64_t v72 = v43;
      operator delete(v45);
    }
    if (v67 != v70) {
      free(v67);
    }
  }
LABEL_61:
  unint64_t v25 = v63[0];
  if (v63[0] != &v64) {
LABEL_62:
  }
    free(v25);
  return v12;
}

uint64_t mlir::mps::anonymous namespace'::verifyConstantAxis(mlir::mps::_anonymous_namespace_ *this, mlir::Operation *a2)
{
  v40[6] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 9);
  uint64_t v4 = *(void *)(v3 + 32 * a2 + 24);
  unsigned int v5 = (void *)(*(void *)(*(void *)(v3 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v5) {
    uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  v29[0] = v5;
  v29[1] = v6;
  uint64_t v38 = v40;
  uint64_t v39 = 0x600000000;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v29)
    && mlir::matchConstantWithIntVector<long long>(v4, (uint64_t)&v38)
    && v39)
  {
    uint64_t v7 = v38;
    uint64_t v8 = 8 * v39;
    while (1)
    {
      uint64_t v28 = *v7;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
      v30[0] = v28;
      if (v28 < -v9 || v9 <= v28) {
        break;
      }
      ++v7;
      v8 -= 8;
      if (!v8) {
        goto LABEL_13;
      }
    }
    v22[0] = -v9;
    v26[0] = (const void **)(v9 - 1);
    mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(0, 0, "invalid axis ", v30, " is outside of the range [", v22, ", ", (uint64_t *)v26, "]");
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v29);
    v22[0] = (uint64_t)"failed: constant axis ({0}) is not within range for the input tensor rank ({1})";
    v22[1] = 79;
    void v22[2] = (uint64_t)v25;
    v22[3] = 2;
    v23[0] = &unk_1EC9A4648;
    v23[1] = &v28;
    v24[0] = &unk_1EC9A4708;
    v24[1] = v13;
    v25[0] = v23;
    v25[1] = v24;
    __int16 v27 = 263;
    v26[0] = (const void **)v22;
    mlir::Operation::emitOpError((uint64_t *)this, v26, (uint64_t)v30);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      long long v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v36;
        uint64_t v16 = __p;
        if (v36 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          uint64_t v16 = __p;
        }
        uint64_t v36 = v14;
        operator delete(v16);
      }
      uint64_t v17 = v33;
      if (v33)
      {
        uint64_t v18 = v34;
        uint64_t v19 = v33;
        if (v34 != v33)
        {
          do
          {
            uint64_t v21 = (void *)*--v18;
            uint64_t v20 = v21;
            *uint64_t v18 = 0;
            if (v21) {
              operator delete[](v20);
            }
          }
          while (v18 != v17);
          uint64_t v19 = v33;
        }
        long long v34 = v17;
        operator delete(v19);
      }
      if (v31 != &v32) {
        free(v31);
      }
    }
  }
  else
  {
LABEL_13:
    uint64_t v11 = 1;
  }
  if (v38 != v40) {
    free(v38);
  }
  return v11;
}

uint64_t mlir::InFlightDiagnostic::operator<<<int &>(uint64_t a1, int *a2)
{
  if (*(void *)a1)
  {
    uint64_t v3 = a1 + 24;
    unint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *a2;
    int v14 = 2;
    uint64_t v15 = v5;
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    uint64_t v7 = &v14;
    if (v6 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v11 = v6 + 1;
      BOOL v12 = v4 + 24 * v6 > (unint64_t)&v14;
      if (v4 <= (unint64_t)&v14 && v12)
      {
        uint64_t v13 = (char *)&v14 - v4;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = (int *)&v13[v4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 40), v11, 24);
        unint64_t v4 = *(void *)(a1 + 24);
        uint64_t v7 = &v14;
      }
    }
    uint64_t v8 = v4 + 24 * *(unsigned int *)(a1 + 32);
    long long v9 = *(_OWORD *)v7;
    *(void *)(v8 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

uint64_t mlir::mps::TopKGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v64[2] = *MEMORY[0x1E4F143B8];
  if (a7) {
    uint64_t v14 = *a7;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v56 = a6;
  v57[0] = 0;
  char v58 = 0;
  uint64_t v59 = v14;
  uint64_t v60 = a9;
  uint64_t v61 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v56);
    if (v58) {
      char v58 = 0;
    }
    mlir::OperationName::OperationName(v57, "mps.top_k_grad", 14, Context);
    char v58 = 1;
  }
  uint64_t v62 = a4;
  unint64_t v63 = a5;
  if (!a5)
  {
    uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
LABEL_31:
    uint64_t v38 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v39 = *(unsigned int *)(a11 + 8);
    if (v39 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v39) = v38;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  mlir::UnknownLoc::get(this, a2);
  if (a5 <= 3) {
    goto LABEL_30;
  }
  int64_t v53 = v62;
  uint64_t v54 = 0;
  uint64_t v16 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v53, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  if (v17) {
    uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  v51[0] = v16;
  v51[1] = v17;
  int64_t v53 = v62;
  uint64_t v54 = 1;
  int64_t v53 = (void *)mlir::ValueRange::offset_base(&v53, 1);
  uint64_t v54 = 0;
  uint64_t v19 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v53, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  if (v20) {
    uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  }
  else {
    uint64_t v19 = 0;
  }
  v50[0] = v19;
  v50[1] = v20;
  int64_t v53 = v62;
  uint64_t v54 = 2;
  int64_t v53 = (void *)mlir::ValueRange::offset_base(&v53, 2);
  uint64_t v54 = 0;
  uint64_t v21 = mlir::ValueRange::dereference_iterator(&v53, 0);
  int64_t v53 = 0;
  uint64_t v54 = 0;
  BOOL v52 = &v53;
  v64[0] = v21;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v64);
  if (!DefiningOp
    || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v52, DefiningOp)
    || (uint64_t SingleInt = mlir::getSingleIntValue<int>((uint64_t)v53, v54), !v16)
    || !v19
    || (int v24 = SingleInt, (SingleInt & 0xFF00000000) == 0)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v50)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51), !v25)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50), !v26)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51),
        uint64_t v28 = v27,
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50),
        v28 != v29))
  {
LABEL_30:
    int64_t v53 = v62;
    uint64_t v54 = 0;
    uint64_t v37 = mlir::ValueRange::dereference_iterator(&v53, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v37);
    goto LABEL_31;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
  uint64_t v31 = (v30 & ((uint64_t)v24 >> 31)) + v24;
  if (v31 < v30)
  {
    uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    uint64_t v33 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v53, ArgAttrsAttr, (unsigned char *)(v33 + 8 * v34));
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    if (v35 >= 1)
    {
      for (uint64_t i = 0; i < v41; ++i)
      {
        if (v31 != i && *((void *)v53 + i) == 0x8000000000000000)
        {
          uint64_t v42 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
          *((void *)v53 + i) = *(void *)(v42 + 8 * i);
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
      }
    }
    uint64_t v45 = v53;
    uint64_t v46 = v54;
    v64[0] = v62;
    v64[1] = 0;
    uint64_t v47 = mlir::ValueRange::dereference_iterator(v64, 0);
    uint64_t v48 = mlir::getElementTypeOrSelf(v47);
    uint64_t v49 = mlir::RankedTensorType::get((uint64_t)v45, v46, v48, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v49);
    if (v53 != &v55) {
      free(v53);
    }
    return 1;
  }
  int64_t v53 = v62;
  uint64_t v54 = 0;
  uint64_t v43 = mlir::ValueRange::dereference_iterator(&v53, 0);
  uint64_t v44 = mlir::getElementTypeOrSelf(v43);
  return mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v44);
}

uint64_t mlir::mps::TopKGradientOp::verify(uint64_t **this)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  uint64_t v3 = (void *)(*(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v5 = (*this)[9];
    uint64_t v61 = v3;
    uint64_t v62 = v4;
    uint64_t v6 = (void *)(*(void *)(*(void *)(v5 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v59 = v6;
    uint64_t v60 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v61)) {
      goto LABEL_7;
    }
    return 1;
  }
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v6 = (void *)(*(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  uint64_t v59 = v6;
  uint64_t v60 = v7;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v61)) {
    return 1;
  }
LABEL_7:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v59)) {
    return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
  uint64_t v9 = v8;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
  if (v9 != v10)
  {
    v49[0] = (const void **)"failed: input and gradient tensors must have the same rank, but got {0} and {1}";
    v49[1] = (const void **)79;
    v49[2] = (const void **)v52;
    v49[3] = (const void **)2;
    v50[0] = &unk_1EC9A47C8;
    v50[1] = &v61;
    v51[0] = &unk_1EC9A47C8;
    v51[1] = &v59;
    v52[0] = v50;
    v52[1] = v51;
    __int16 v58 = 263;
    v57[0] = (uint64_t **)v49;
    mlir::OpState::emitOpError(this, (const void ***)v57, (uint64_t)&v65);
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v65);
    if (v65) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v65);
    }
    if (v73)
    {
      uint64_t v17 = (void **)__p;
      if (__p)
      {
        uint64_t v18 = v72;
        uint64_t v19 = __p;
        if (v72 != __p)
        {
          do
            uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          uint64_t v19 = __p;
        }
        uint64_t v72 = v17;
        operator delete(v19);
      }
      uint64_t v20 = v69;
      if (v69)
      {
        uint64_t v21 = v70;
        uint64_t v22 = v69;
        if (v70 != v69)
        {
          do
          {
            int v24 = (void *)*--v21;
            uint64_t v23 = v24;
            *uint64_t v21 = 0;
            if (v24) {
              operator delete[](v23);
            }
          }
          while (v21 != v20);
          uint64_t v22 = v69;
        }
        uint64_t v70 = v20;
        operator delete(v22);
      }
      uint64_t v35 = v67;
      if (v67 != &v68) {
        goto LABEL_64;
      }
    }
    return v15;
  }
  v63[0] = &v64;
  v63[1] = (void *)0x100000000;
  unint64_t v11 = *(const void ***)((*this)[9] + 88);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
  uint64_t v13 = v12;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  v57[0] = (uint64_t **)&v65;
  v49[0] = v11;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v49);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v57, DefiningOp)) {
  else
  }
    mlir::emitOptionalError<char const(&)[39]>(0, 0, "axes is not a constant");
  uint64_t v25 = *(const void ***)((*this)[9] + 120);
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  v57[0] = (uint64_t **)&v65;
  v49[0] = v25;
  uint64_t v26 = mlir::Value::getDefiningOp((mlir::Value *)v49);
  if (v26)
  {
    if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v57, v26))
    {
      uint64_t SingleInt = mlir::getSingleIntValue<int>(v65, v66);
      uint64_t v56 = SingleInt;
      if ((SingleInt & 0xFF00000000) != 0)
      {
        int v28 = SingleInt;
        if ((int)SingleInt <= 0)
        {
          v49[0] = (const void **)"failed: k must positive";
          LOWORD(v50[0]) = 259;
          uint64_t v36 = v49;
LABEL_51:
          mlir::OpState::emitOpError(this, v36, (uint64_t)&v65);
          uint64_t v34 = &v65;
          goto LABEL_52;
        }
        uint64_t v29 = 1;
        uint64_t v55 = 1;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
        if (v30 >= 1)
        {
          uint64_t v31 = *(unsigned int *)v63[0];
          uint64_t v29 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61) + 8 * v31);
          uint64_t v55 = v29;
        }
        if (v29 != 0x8000000000000000 && v29 < v28)
        {
          v49[0] = (const void **)"failed: k is larger than input minor dimension, ";
          LOWORD(v50[0]) = 259;
          mlir::OpState::emitOpError(this, v49, (uint64_t)&v65);
          uint64_t v32 = mlir::InFlightDiagnostic::operator<<<int &>((uint64_t)&v65, (int *)&v56);
          uint64_t v33 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v32, " > ");
          uint64_t v34 = (uint64_t *)mlir::InFlightDiagnostic::operator<<<long long &>(v33, &v55);
LABEL_52:
          uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v34);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v65);
          goto LABEL_63;
        }
        uint64_t v37 = 1;
        uint64_t v54 = 1;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
        if (v38 >= 1)
        {
          uint64_t v39 = *(unsigned int *)v63[0];
          uint64_t v37 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59) + 8 * v39);
          uint64_t v54 = v37;
        }
        if (v37 != 0x8000000000000000 && v37 != (int)v56)
        {
          llvm::formatv<long long &,int &>("failed: input gradient dimension at axis dimension is not equal k: {0} != {1}", (const char *)&v54, (const char *)&v56, (const char **)v49);
LABEL_50:
          __int16 v58 = 263;
          v57[0] = (uint64_t **)v49;
          uint64_t v36 = (const void ***)v57;
          goto LABEL_51;
        }
        uint64_t v53 = 0;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
        if (v40 >= 1)
        {
          uint64_t v41 = 1;
          while (1)
          {
            if (v41 - 1 != *(void *)v63[0]
              && *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61)
                           + 8 * (v41 - 1)) != 0x8000000000000000)
            {
              uint64_t v44 = (v41 - 1);
              if (*(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59) + 8 * v44) != 0x8000000000000000)
              {
                uint64_t v45 = 8 * v44;
                uint64_t v46 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61) + v45);
                if (v46 != *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59)
                                      + v45))
                  break;
              }
            }
            uint64_t v53 = v41;
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61);
            if (v41++ >= v42) {
              goto LABEL_62;
            }
          }
          uint64_t v48 = *(const char **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v61) + v45);
          uint64_t v47 = *(const char **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59) + v45);
          llvm::formatv<long long &,long long,long long>("failed: input tensor and input gradient tensor shape do not match along dimension {0}, {1} != {2}", (const char *)&v53, &v48, &v47, (const char **)v49);
          goto LABEL_50;
        }
      }
    }
  }
LABEL_62:
  uint64_t v15 = 1;
LABEL_63:
  uint64_t v35 = (uint64_t *)v63[0];
  if (v63[0] != &v64) {
LABEL_64:
  }
    free(v35);
  return v15;
}

const char *llvm::formatv<long long &,int &>@<X0>(const char *__s@<X0>, const char *a2@<X1>, const char *a3@<X2>, const char **a4@<X8>)
{
  uint64_t v6 = __s;
  if (__s) {
    __s = (const char *)strlen(__s);
  }
  *a4 = v6;
  a4[1] = __s;
  a4[8] = (const char *)(a4 + 4);
  a4[2] = (const char *)(a4 + 8);
  a4[3] = (const char *)2;
  a4[4] = (const char *)&unk_1EC9A4648;
  a4[5] = a2;
  a4[6] = (const char *)&unk_1EC9A45E8;
  a4[7] = a3;
  a4[9] = (const char *)(a4 + 6);
  return __s;
}

const char *llvm::formatv<long long &,long long,long long>@<X0>(const char *__s@<X0>, const char *a2@<X1>, const char **a3@<X2>, const char **a4@<X3>, const char **a5@<X8>)
{
  uint64_t v8 = __s;
  if (__s) {
    __s = (const char *)strlen(__s);
  }
  uint64_t v10 = *a3;
  unint64_t v11 = *a4;
  *a5 = v8;
  a5[1] = __s;
  a5[10] = (const char *)(a5 + 4);
  a5[2] = (const char *)(a5 + 10);
  a5[3] = (const char *)3;
  a5[4] = (const char *)&unk_1EC9A4648;
  a5[5] = a2;
  a5[6] = (const char *)&unk_1EC9A4708;
  a5[7] = v10;
  a5[8] = (const char *)&unk_1EC9A4708;
  a5[9] = v11;
  a5[11] = (const char *)(a5 + 6);
  a5[12] = (const char *)(a5 + 8);
  return __s;
}

uint64_t mlir::mps::SliceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v63 = a6;
  v64[0] = 0;
  char v65 = 0;
  uint64_t v66 = a9;
  uint64_t v67 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v63);
    if (v65) {
      char v65 = 0;
    }
    mlir::OperationName::OperationName(v64, "mps.slice", 9, Context);
    char v65 = 1;
  }
  uint64_t v68 = a4;
  unint64_t v69 = a5;
  if (!a5)
  {
    uint64_t v20 = mlir::Float32Type::get(this, a2);
    uint64_t v17 = mlir::UnrankedTensorType::get(v20);
    uint64_t v18 = *(unsigned int *)(a11 + 8);
    if (v18 < *(_DWORD *)(a11 + 12)) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  mlir::UnknownLoc::get(this, a2);
  if (a5 <= 3) {
    goto LABEL_7;
  }
  uint64_t v60 = v68;
  uint64_t v61 = 0;
  unint64_t v21 = *(void *)(mlir::ValueRange::dereference_iterator(&v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v21 + 8);
  if (v22) {
    uint64_t v22 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v21 + 8);
  }
  else {
    unint64_t v21 = 0;
  }
  v57[0] = v21;
  v57[1] = v22;
  uint64_t v60 = v68;
  uint64_t v61 = 1;
  uint64_t v60 = (void *)mlir::ValueRange::offset_base(&v60, 1);
  uint64_t v61 = 0;
  uint64_t v23 = mlir::ValueRange::dereference_iterator(&v60, 0);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  __int16 v58 = &v60;
  uint64_t v59 = v23;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!DefiningOp) {
    goto LABEL_19;
  }
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v58, DefiningOp))
  {
    uint64_t SingleInt = mlir::getSingleIntValue<int>((uint64_t)v60, v61);
    uint64_t v26 = SingleInt & 0xFF00000000;
    int v27 = SingleInt & 0xFFFFFF00;
    int v28 = SingleInt;
  }
  else
  {
LABEL_19:
    int v27 = 0;
    uint64_t v26 = 0;
    int v28 = 0;
  }
  uint64_t v60 = v68;
  uint64_t v61 = 2;
  uint64_t v60 = (void *)mlir::ValueRange::offset_base(&v60, 2);
  uint64_t v61 = 0;
  uint64_t v29 = mlir::ValueRange::dereference_iterator(&v60, 0);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  __int16 v58 = &v60;
  uint64_t v59 = v29;
  uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!v30) {
    goto LABEL_23;
  }
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v58, v30))
  {
    uint64_t v31 = mlir::getSingleIntValue<int>((uint64_t)v60, v61);
    uint64_t v32 = v31 & 0xFFFFFF00;
    uint64_t v33 = v31;
    int v34 = BYTE4(v31);
  }
  else
  {
LABEL_23:
    uint64_t v32 = 0;
    int v34 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v60 = v68;
  uint64_t v61 = 3;
  uint64_t v60 = (void *)mlir::ValueRange::offset_base(&v60, 3);
  uint64_t v61 = 0;
  uint64_t v35 = mlir::ValueRange::dereference_iterator(&v60, 0);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  __int16 v58 = &v60;
  uint64_t v59 = v35;
  uint64_t v36 = mlir::Value::getDefiningOp((mlir::Value *)&v59);
  if (!v36) {
    goto LABEL_27;
  }
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v58, v36))
  {
    uint64_t v37 = mlir::getSingleIntValue<int>((uint64_t)v60, v61);
    unint64_t v38 = v37 & 0xFFFFFF00;
    uint64_t v39 = v37;
    BOOL v40 = (v37 & 0xFF00000000) == 0;
  }
  else
  {
LABEL_27:
    unint64_t v38 = 0;
    uint64_t v39 = 0;
    BOOL v40 = 1;
  }
  if (!v21 || !v26 || !v34 || v40)
  {
LABEL_7:
    uint64_t v60 = v68;
    uint64_t v61 = 0;
    uint64_t v15 = mlir::ValueRange::dereference_iterator(&v60, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v15);
    uint64_t v17 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v18 = *(unsigned int *)(a11 + 8);
    if (v18 < *(_DWORD *)(a11 + 12))
    {
LABEL_8:
      *(void *)(*(void *)a11 + 8 * v18) = v17;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
LABEL_12:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a11 + 8);
    goto LABEL_8;
  }
  if (*(_UNKNOWN **)(*(void *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v21);
  }
  else
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
    uint64_t v42 = (v41 & ((uint64_t)(v28 | v27) >> 31)) + (v28 | v27);
    if (v42 >= v41
      || v38 >> 31
      || (uint64_t v43 = v39 | v38,
          *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57)
                    + 8 * v42) != 0x8000000000000000)
      && (int v44 = v33 | v32,
          uint64_t v45 = (v33 | v32) << 32,
          uint64_t v46 = 8 * v42,
          uint64_t v47 = v43
              + v44
              + (*(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57) + v46) & (v45 >> 63)),
          v47 > *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57) + v46)))
    {
      uint64_t v60 = v68;
      uint64_t v61 = 0;
      uint64_t v48 = mlir::ValueRange::dereference_iterator(&v60, 0);
      uint64_t v49 = mlir::getElementTypeOrSelf(v48);
      return mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v49);
    }
    uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
    uint64_t v51 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v60, ArgAttrsAttr, (unsigned char *)(v51 + 8 * v52));
    uint64_t v53 = v60;
    if (*((void *)v60 + v42) != 0x8000000000000000) {
      *((void *)v60 + v42) = v43;
    }
    uint64_t v54 = v61;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
    uint64_t v56 = mlir::RankedTensorType::get((uint64_t)v53, v54, OperandRange, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v56);
    if (v60 != &v62) {
      free(v60);
    }
  }
  return 1;
}

uint64_t mlir::mps::SliceOp::verify(uint64_t **this)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
  {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    uint64_t v51 = v2;
    uint64_t v52 = v3;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51)) {
      goto LABEL_5;
    }
    return 1;
  }
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51)) {
    return 1;
  }
LABEL_5:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
  uint64_t v5 = v4;
  uint64_t v50 = v4;
  uint64_t v6 = *(const char **)((*this)[9] + 56);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  v47[0] = (uint64_t **)&v53;
  uint64_t v35 = v6;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v35);
  if (!DefiningOp) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v47, DefiningOp)) {
    return 1;
  }
  uint64_t SingleInt = mlir::getSingleIntValue<int>(v53, v54);
  if ((SingleInt & 0xFF00000000) == 0) {
    return 1;
  }
  uint64_t v9 = (v5 & ((uint64_t)(int)SingleInt >> 31)) + (int)SingleInt;
  uint64_t v49 = v9;
  if (v9 < 0 || v9 >= v5)
  {
    uint64_t v35 = "failed: axis value {0} does not fit tensor rank ({1})";
    uint64_t v36 = 53;
    uint64_t v37 = &v43;
    uint64_t v38 = 2;
    uint64_t v39 = &unk_1EC9A4648;
    BOOL v40 = &v49;
    uint64_t v41 = &unk_1EC9A4648;
    uint64_t v42 = &v50;
    uint64_t v43 = &v39;
    int v44 = &v41;
    __int16 v48 = 263;
    v47[0] = (uint64_t **)&v35;
    mlir::OpState::emitOpError(this, (const void ***)v47, (uint64_t)&v53);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if (v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v61)
    {
      uint64_t v16 = (void **)__p;
      if (__p)
      {
        uint64_t v17 = v60;
        uint64_t v18 = __p;
        if (v60 != __p)
        {
          do
            uint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          uint64_t v18 = __p;
        }
        uint64_t v60 = v16;
        operator delete(v18);
      }
      uint64_t v19 = v57;
      if (!v57) {
        goto LABEL_52;
      }
      uint64_t v20 = v58;
      unint64_t v21 = v57;
      if (v58 == v57) {
        goto LABEL_51;
      }
      do
      {
        uint64_t v23 = (void *)*--v20;
        uint64_t v22 = v23;
        *uint64_t v20 = 0;
        if (v23) {
          operator delete[](v22);
        }
      }
      while (v20 != v19);
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v10 = *(const char **)((*this)[9] + 88);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    v47[0] = (uint64_t **)&v53;
    uint64_t v35 = v10;
    uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)&v35);
    if (!v11) {
      return 1;
    }
    if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v47, v11)) {
      return 1;
    }
    uint64_t v12 = mlir::getSingleIntValue<int>(v53, v54);
    if ((v12 & 0xFF00000000) == 0) {
      return 1;
    }
    int v13 = v12;
    if (*(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51)
                   + 8 * v9) == 0x8000000000000000)
      return 1;
    uint64_t v24 = (*(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51)
                     + 8 * v9) & ((uint64_t)v13 >> 31))
        + v13;
    uint64_t v46 = v24;
    if (v24 >= 0
      && v24 < *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51)
                         + 8 * v9))
    {
      uint64_t matched = mlir::matchConstantWithIntValue<int>(*(void *)((*this)[9] + 120));
      if ((matched & 0xFF00000000) != 0)
      {
        uint64_t v45 = (int)matched;
        if ((matched & 0x80000000) != 0
          || (uint64_t v26 = v46 + (int)matched,
              v26 > *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51)
                              + 8 * v9)))
        {
          int v34 = *(const char **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51)
                               + 8 * v9);
          llvm::formatv<long long &,long long,long long &>("failed: length value {0} does not fit within the dimension size ({1}) with start value ({2})", (const char *)&v45, &v34, (const char *)&v46, &v35);
          __int16 v48 = 263;
          v47[0] = (uint64_t **)&v35;
          mlir::OpState::emitOpError(this, (const void ***)v47, (uint64_t)&v53);
          uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v53);
          return v14;
        }
      }
      return 1;
    }
    int v27 = *(uint64_t **)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51)
                      + 8 * v9);
    uint64_t v35 = "failed: start value {0} does not fit dimension size ({1})";
    uint64_t v36 = 57;
    uint64_t v37 = &v43;
    uint64_t v38 = 2;
    uint64_t v39 = &unk_1EC9A4648;
    BOOL v40 = &v46;
    uint64_t v41 = &unk_1EC9A4708;
    uint64_t v42 = v27;
    uint64_t v43 = &v39;
    int v44 = &v41;
    __int16 v48 = 263;
    v47[0] = (uint64_t **)&v35;
    mlir::OpState::emitOpError(this, (const void ***)v47, (uint64_t)&v53);
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if (v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v61)
    {
      int v28 = (void **)__p;
      if (__p)
      {
        uint64_t v29 = v60;
        uint64_t v30 = __p;
        if (v60 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        uint64_t v60 = v28;
        operator delete(v30);
      }
      uint64_t v19 = v57;
      if (!v57) {
        goto LABEL_52;
      }
      uint64_t v31 = v58;
      unint64_t v21 = v57;
      if (v58 == v57)
      {
LABEL_51:
        __int16 v58 = v19;
        operator delete(v21);
LABEL_52:
        if (v55 != &v56) {
          free(v55);
        }
        return v14;
      }
      do
      {
        uint64_t v33 = (void *)*--v31;
        uint64_t v32 = v33;
        void *v31 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v31 != v19);
LABEL_50:
      unint64_t v21 = v57;
      goto LABEL_51;
    }
  }
  return v14;
}

const char *llvm::formatv<long long &,long long,long long &>@<X0>(const char *__s@<X0>, const char *a2@<X1>, const char **a3@<X2>, const char *a4@<X3>, const char **a5@<X8>)
{
  uint64_t v8 = __s;
  if (__s) {
    __s = (const char *)strlen(__s);
  }
  uint64_t v10 = *a3;
  *a5 = v8;
  a5[1] = __s;
  a5[10] = (const char *)(a5 + 4);
  a5[2] = (const char *)(a5 + 10);
  a5[3] = (const char *)3;
  a5[4] = (const char *)&unk_1EC9A4648;
  a5[5] = a2;
  a5[6] = (const char *)&unk_1EC9A4708;
  a5[7] = v10;
  a5[8] = (const char *)&unk_1EC9A4648;
  a5[9] = a4;
  a5[11] = (const char *)(a5 + 6);
  a5[12] = (const char *)(a5 + 8);
  return __s;
}

uint64_t mlir::mps::anonymous namespace'::verifyStridedSlice(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void **)(*(void *)v9 + 136);
  BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  int v12 = v11;
  if (!v11) {
    unint64_t v9 = 0;
  }
  unint64_t v116 = v9;
  int v13 = *(void **)(*(void *)(*(void *)(a5 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  BOOL v15 = v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  uint64_t v16 = *(void **)(*(void *)(*(void *)(a6 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  BOOL v18 = v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v16 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  uint64_t v19 = *(void **)(*(void *)(*(void *)(a7 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  BOOL v21 = v19 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (v12) {
    BOOL v22 = !v15;
  }
  else {
    BOOL v22 = 1;
  }
  BOOL v23 = v22 || !v18;
  if (v23 || !v21)
  {
    int64_t v125 = (uint64_t **)"cannot run strided slice a non-tensor type";
    v127[8] = 259;
    mlir::Operation::emitOpError(a1, (const void ***)&v125, (uint64_t)&v128);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v128);
    if (v128) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v128);
    }
    if (v138)
    {
      int v28 = (void **)__p;
      if (__p)
      {
        uint64_t v29 = v137;
        uint64_t v30 = __p;
        if (v137 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        uint64_t v137 = v28;
        operator delete(v30);
      }
      uint64_t v31 = v134;
      if (v134)
      {
        uint64_t v32 = v135;
        uint64_t v33 = v134;
        if (v135 != v134)
        {
          do
          {
            uint64_t v35 = (void *)*--v32;
            int v34 = v35;
            *uint64_t v32 = 0;
            if (v35) {
              operator delete[](v34);
            }
          }
          while (v32 != v31);
          uint64_t v33 = v134;
        }
        uint64_t v135 = v31;
        operator delete(v33);
      }
      uint64_t v45 = (uint64_t **)v131;
      if (v131 != &v133) {
LABEL_75:
      }
        free(v45);
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(void *)v9 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v13 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v19 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      if (!v42
      {
        return 0;
      }
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      uint64_t v112 = 0;
      uint64_t v113 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      char v128 = (uint64_t **)&v114;
      if (mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(a5, &v128))
      {
        int64_t v125 = (uint64_t **)&v112;
        if (mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(a6, &v125))
        {
          unint64_t v121 = &v110;
          if (mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(a7, (uint64_t ***)&v121))
          {
            int64_t v125 = (uint64_t **)v127;
            uint64_t v126 = 0x400000000;
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v116);
            uint64_t v107 = v43;
            if (a3)
            {
              char v128 = (uint64_t **)&v108;
              if (mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(a3, &v128))
              {
                uint64_t NumElements = mlir::ElementsAttr::getNumElements(v108, v109);
                uint64_t v107 = NumElements;
                mlir::ElementsAttr::getValues<llvm::APInt>(&v108, (uint64_t)&v128);
                LOWORD(v121) = (_WORD)v128;
                if ((_BYTE)v128) {
                  uint64_t v122 = v129;
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v129 + 16))(&v122);
                }
                uint64_t v54 = v130;
                v123[0] = v130;
                LOWORD(v117) = (_WORD)v131;
                if ((_BYTE)v131)
                {
                  uint64_t v118 = v132;
                }
                else
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v132 + 16))(&v118);
                  uint64_t v54 = v123[0];
                }
                v119[0] = v133;
                if (v54 != v133)
                {
                  do
                  {
                    mlir::detail::ElementsAttrIterator<llvm::APInt>::operator*((uint64_t)&v121, (llvm::APInt *)&v102);
                    if (v103 > 0x40) {
                      uint64_t v64 = *(void *)v102;
                    }
                    else {
                      uint64_t v64 = (uint64_t)((void)v102 << -(uint64_t)v103) >> -(uint64_t)v103;
                    }
                    if (v64 == -1) {
                      uint64_t v65 = 0x8000000000000000;
                    }
                    else {
                      uint64_t v65 = v64;
                    }
                    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v125, v65);
                    if (v103 >= 0x41 && v102) {
                      operator delete[](v102);
                    }
                    ++v123[0];
                  }
                  while (v123[0] != v119[0]);
                }
                if (!(_BYTE)v117)
                {
                  uint64_t v55 = v118;
                  uint64_t v118 = 0;
                  if (v55) {
                    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
                  }
                }
                if (!(_BYTE)v121)
                {
                  uint64_t v56 = v122;
                  uint64_t v122 = 0;
                  if (v56) {
                    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
                  }
                }
                mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::~ElementsAttrRange((uint64_t)&v128);
                goto LABEL_98;
              }
            }
            else
            {
              if (!a4)
              {
                uint64_t NumElements = v43;
                goto LABEL_98;
              }
              unint64_t v121 = (void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
              char v128 = (uint64_t **)mlir::Type::dyn_cast<mlir::ShapedType>((void **)&v121);
              uint64_t v129 = v47;
              if (v128 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v128))
              {
                uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v128);
                if (v49)
                {
                  uint64_t v50 = (uint64_t *)ArgAttrsAttr;
                  uint64_t v51 = 8 * v49;
                  do
                  {
                    uint64_t v52 = *v50++;
                    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v125, v52);
                    v51 -= 8;
                  }
                  while (v51);
                }
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v128);
                uint64_t NumElements = v53;
                uint64_t v107 = v53;
LABEL_98:
                if (mlir::ElementsAttr::getNumElements(v114, v115) > NumElements
                  || mlir::ElementsAttr::getNumElements(v112, v113) > NumElements
                  || mlir::ElementsAttr::getNumElements(v110, v111) > NumElements)
                {
                  unint64_t v121 = "Slice specification lengths: begin (";
                  __int16 v124 = 259;
                  mlir::Operation::emitOpError(a1, (const void ***)&v121, (uint64_t)&v128);
                  uint64_t v117 = (void *)mlir::ElementsAttr::getNumElements(v114, v115);
                  uint64_t v57 = mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&v128, (uint64_t *)&v117);
                  uint64_t v58 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v57, ") end (");
                  int64_t v102 = (void *)mlir::ElementsAttr::getNumElements(v112, v113);
                  uint64_t v59 = mlir::InFlightDiagnostic::operator<<<long long &>(v58, (uint64_t *)&v102);
                  uint64_t v60 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v59, ") stride (");
                  unint64_t v106 = (const char *)mlir::ElementsAttr::getNumElements(v110, v111);
                  uint64_t v61 = mlir::InFlightDiagnostic::operator<<<long long &>(v60, (uint64_t *)&v106);
                  uint64_t v62 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v61, ") must be lower or equal to input rank ");
                  uint64_t v63 = mlir::InFlightDiagnostic::operator<<<long long &>(v62, &v107);
                  uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v63);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v128);
                  goto LABEL_102;
                }
                unint64_t v121 = v123;
                uint64_t v122 = 0x400000000;
                mlir::getIntValues<long long>(v110, v111, (uint64_t)&v121, 1);
                if (v122)
                {
                  uint64_t v66 = v121;
                  uint64_t v67 = 8 * v122;
                  while (*v66)
                  {
                    ++v66;
                    v67 -= 8;
                    if (!v67) {
                      goto LABEL_119;
                    }
                  }
                  uint64_t v117 = "stride cannot be 0";
                  __int16 v120 = 259;
                  mlir::Operation::emitOpError(a1, (const void ***)&v117, (uint64_t)&v128);
                  uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v128);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v128);
                  goto LABEL_146;
                }
LABEL_119:
                if (!(a3 | a4))
                {
                  uint64_t v27 = 1;
LABEL_146:
                  if (v121 != v123) {
                    free(v121);
                  }
LABEL_102:
                  uint64_t v45 = v125;
                  if (v125 == (uint64_t **)v127) {
                    return v27;
                  }
                  goto LABEL_75;
                }
                uint64_t v117 = v119;
                uint64_t v118 = 0x400000000;
                uint64_t Attr = mlir::Operation::getAttr((uint64_t)a1, "begin_mask", 0xAuLL);
                uint64_t v70 = mlir::Operation::getAttr((uint64_t)a1, "end_mask", 8uLL);
                uint64_t v72 = mlir::Operation::getAttr((uint64_t)a1, "shrink_axis_mask", 0x10uLL);
                {
                  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v116);
                  uint64_t v76 = v75;
                  if (a4) {
                  else
                  }
                  if (!a4) {
                  uint64_t v105 = v78;
                  }
                  unint64_t v106 = v77;
                  if (v75 == v118)
                  {
                    if (!v118)
                    {
LABEL_138:
                      uint64_t v27 = 1;
                      goto LABEL_144;
                    }
                    uint64_t v79 = Value;
                    uint64_t v80 = 0;
                    while (1)
                    {
                      uint64_t v81 = *((void *)v117 + v80);
                      uint64_t v82 = *(void *)(Value + 8 * v80);
                      BOOL v83 = v82 == 0x8000000000000000 || v81 == 0x8000000000000000;
                      if (!v83 && v81 != v82) {
                        break;
                      }
                      if (v75 == ++v80) {
                        goto LABEL_138;
                      }
                    }
                    uint64_t v101 = v80;
                    __int16 v104 = 257;
                    mlir::Operation::emitOpError(a1, (const void ***)&v102, (uint64_t)&v128);
                    uint64_t v91 = mlir::InFlightDiagnostic::append<char const*&>((uint64_t)&v128, &v106);
                    uint64_t v92 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v91, "[");
                    uint64_t v93 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v92, &v101);
                    uint64_t v94 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v93, "] = ");
                    uint64_t v95 = mlir::InFlightDiagnostic::operator<<<long long &>(v94, (uint64_t *)(v79 + 8 * v101));
                    uint64_t v96 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v95, " should match dimension size: ");
                    uint64_t v97 = mlir::InFlightDiagnostic::operator<<<long long &>(v96, (uint64_t *)v117 + v101);
                    uint64_t v98 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v97, " deduced from ");
                    uint64_t v99 = mlir::InFlightDiagnostic::append<char const*&>(v98, &v105);
                  }
                  else
                  {
                    __int16 v104 = 257;
                    mlir::Operation::emitOpError(a1, (const void ***)&v102, (uint64_t)&v128);
                    uint64_t v85 = mlir::InFlightDiagnostic::append<char const*&>((uint64_t)&v128, &v106);
                    uint64_t v86 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v85, " rank ");
                    uint64_t v101 = v76;
                    uint64_t v87 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v86, &v101);
                    uint64_t v88 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v87, " is not consistent with rank deduced from ");
                    uint64_t v89 = mlir::InFlightDiagnostic::append<char const*&>(v88, &v105);
                    uint64_t v90 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v89, " ");
                    uint64_t v100 = v118;
                    uint64_t v99 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v90, &v100);
                  }
                  uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v99);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v128);
                }
                else
                {
                  uint64_t v27 = 0;
                }
LABEL_144:
                if (v117 != v119) {
                  free(v117);
                }
                goto LABEL_146;
              }
            }
            uint64_t v27 = 1;
            goto LABEL_102;
          }
        }
      }
    }
    return 1;
  }
  return v27;
}

BOOL mlir::mps::StridedSliceOp::getEndIsSize(mlir::mps::StridedSliceOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 8) != 0;
}

uint64_t mlir::mps::StridedSliceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v79[4] = *MEMORY[0x1E4F143B8];
  v76[0] = a4;
  v76[1] = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
  }
  else
  {
    long long v16 = 0uLL;
    long long v17 = 0uLL;
  }
  uint64_t v67 = a6;
  v68[0] = 0;
  char v69 = 0;
  long long v70 = v16;
  long long v71 = v17;
  uint64_t v72 = a9;
  uint64_t v73 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69) {
      char v69 = 0;
    }
    mlir::OperationName::OperationName(v68, "mps.strided_slice", 17, Context);
    char v69 = 1;
  }
  uint64_t v74 = a4;
  unint64_t v75 = a5;
  if (a5 < 4
    || (uint64_t v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::StridedSliceOpAdaptor::verify(&v67, v19)))
  {
LABEL_71:
    uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
    goto LABEL_72;
  }
  uint64_t v63 = v70;
  mlir::IntegerAttr::getValue(&v63, (llvm::APInt *)&v77);
  if (v78 > 0x40)
  {
    uint64_t v57 = *v77;
    operator delete[](v77);
  }
  else
  {
    uint64_t v57 = v77;
  }
  uint64_t v63 = v71;
  mlir::IntegerAttr::getValue(&v63, (llvm::APInt *)&v77);
  if (v78 > 0x40)
  {
    uint64_t v56 = *v77;
    operator delete[](v77);
  }
  else
  {
    uint64_t v56 = v77;
  }
  uint64_t v63 = *((void *)&v71 + 1);
  mlir::IntegerAttr::getValue(&v63, (llvm::APInt *)&v77);
  if (v78 > 0x40)
  {
    uint64_t v20 = *v77;
    operator delete[](v77);
  }
  else
  {
    uint64_t v20 = v77;
  }
  uint64_t v21 = *((void *)&v70 + 1);
  uint64_t v22 = mlir::ValueRange::dereference_iterator(v76, 0);
  uint64_t v23 = mlir::ValueRange::dereference_iterator(v76, 1);
  uint64_t v24 = mlir::ValueRange::dereference_iterator(v76, 2);
  uint64_t v25 = mlir::ValueRange::dereference_iterator(v76, 3);
  uint64_t v26 = *(void **)(*(void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v26 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    int v28 = (void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    int v28 = 0;
  }
  uint64_t v65 = v28;
  uint64_t v29 = *(void **)(*(void *)(*(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  BOOL v31 = v29 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v29 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  uint64_t v32 = *(void **)(*(void *)(*(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  BOOL v34 = v32 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v32 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  uint64_t v35 = *(void **)(*(void *)(*(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  BOOL v37 = v35 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v35 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (!v28 || !v31 || !v34 || !v37)
  {
    char v42 = mlir::emitOptionalError<char const(&)[43]>((uint64_t)a2, a3, "cannot run strided slice a non-tensor type");
    uint64_t v43 = 0;
    goto LABEL_69;
  }
  if (*(_UNKNOWN **)(*v28 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v29 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v32 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v35 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v28);
    goto LABEL_72;
  }
  unint64_t v77 = (unsigned int *)v79;
  uint64_t v78 = 0x400000000;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = (uint64_t **)&v63;
  uint64_t v66 = v23;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (DefiningOp) {
    mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v58, DefiningOp);
  }
  uint64_t v58 = (uint64_t **)&v61;
  uint64_t v66 = v24;
  uint64_t v45 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (v45) {
    mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v58, v45);
  }
  uint64_t v58 = (uint64_t **)&v59;
  uint64_t v66 = v25;
  uint64_t v46 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (v46) {
    mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v58, v46);
  }
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
  {
    uint64_t v49 = (uint64_t)v77;
    uint64_t v50 = v78;
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v65);
    uint64_t v43 = mlir::RankedTensorType::get(v49, v50, ElementType, 0);
    char v42 = 1;
    uint64_t v52 = v77;
    if (v77 == (unsigned int *)v79) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  uint64_t v43 = 0;
  char v42 = 0;
  uint64_t v52 = v77;
  if (v77 != (unsigned int *)v79) {
LABEL_68:
  }
    free(v52);
LABEL_69:
  if (v42) {
    goto LABEL_73;
  }
  uint64_t v53 = mlir::ValueRange::dereference_iterator(v76, 0);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v53);
  if (!ElementTypeOrSelf) {
    goto LABEL_71;
  }
LABEL_72:
  uint64_t v43 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
LABEL_73:
  unsigned int v54 = *(_DWORD *)(a11 + 8);
  if (v54 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v54 + 1, 8);
    unsigned int v54 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v54) = v43;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::StridedSliceOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    uint64_t v3 = a1[5];
    if (v3)
    {
      uint64_t v4 = a1[6];
      if (v4)
      {
        v39[0] = a1[3];
        v41[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v39);
        if (mlir::Type::isUnsignedInteger((mlir::Type *)v41, 32))
        {
          v39[0] = v3;
          v41[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v39);
          if (mlir::Type::isUnsignedInteger((mlir::Type *)v41, 32))
          {
            v39[0] = v4;
            v41[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v39);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)v41, 32)) {
              return 1;
            }
            v39[0] = "'mps.strided_slice' op attribute 'shrink_axis_mask' failed to satisfy constraint: 32-bit unsigned i"
                     "nteger attribute";
            __int16 v40 = 259;
            mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
            uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v41);
            return v5;
          }
          v39[0] = "'mps.strided_slice' op attribute 'end_mask' failed to satisfy constraint: 32-bit unsigned integer attribute";
          __int16 v40 = 259;
          mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
          uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
          if (v41[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
          }
          if (v48)
          {
            uint64_t v32 = (void **)__p;
            if (__p)
            {
              uint64_t v33 = v47;
              BOOL v34 = __p;
              if (v47 != __p)
              {
                do
                  uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
                while (v33 != v32);
                BOOL v34 = __p;
              }
              uint64_t v47 = v32;
              operator delete(v34);
            }
            unint64_t v9 = v44;
            if (!v44) {
              goto LABEL_80;
            }
            uint64_t v35 = v45;
            BOOL v11 = v44;
            if (v45 == v44)
            {
LABEL_79:
              uint64_t v45 = v9;
              operator delete(v11);
LABEL_80:
              if (v42 != &v43) {
                free(v42);
              }
              return v5;
            }
            do
            {
              BOOL v37 = (void *)*--v35;
              uint64_t v36 = v37;
              *uint64_t v35 = 0;
              if (v37) {
                operator delete[](v36);
              }
            }
            while (v35 != v9);
LABEL_78:
            BOOL v11 = v44;
            goto LABEL_79;
          }
        }
        else
        {
          v39[0] = "'mps.strided_slice' op attribute 'begin_mask' failed to satisfy constraint: 32-bit unsigned integer attribute";
          __int16 v40 = 259;
          mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
          uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
          if (v41[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
          }
          if (v48)
          {
            uint64_t v26 = (void **)__p;
            if (__p)
            {
              uint64_t v27 = v47;
              int v28 = __p;
              if (v47 != __p)
              {
                do
                  uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
                while (v27 != v26);
                int v28 = __p;
              }
              uint64_t v47 = v26;
              operator delete(v28);
            }
            unint64_t v9 = v44;
            if (!v44) {
              goto LABEL_80;
            }
            uint64_t v29 = v45;
            BOOL v11 = v44;
            if (v45 == v44) {
              goto LABEL_79;
            }
            do
            {
              BOOL v31 = (void *)*--v29;
              uint64_t v30 = v31;
              *uint64_t v29 = 0;
              if (v31) {
                operator delete[](v30);
              }
            }
            while (v29 != v9);
            goto LABEL_78;
          }
        }
      }
      else
      {
        v39[0] = "'mps.strided_slice' op requires attribute 'shrink_axis_mask'";
        __int16 v40 = 259;
        mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
        uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
        if (v41[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
        }
        if (v48)
        {
          uint64_t v20 = (void **)__p;
          if (__p)
          {
            uint64_t v21 = v47;
            uint64_t v22 = __p;
            if (v47 != __p)
            {
              do
                uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
              while (v21 != v20);
              uint64_t v22 = __p;
            }
            uint64_t v47 = v20;
            operator delete(v22);
          }
          unint64_t v9 = v44;
          if (!v44) {
            goto LABEL_80;
          }
          uint64_t v23 = v45;
          BOOL v11 = v44;
          if (v45 == v44) {
            goto LABEL_79;
          }
          do
          {
            uint64_t v25 = (void *)*--v23;
            uint64_t v24 = v25;
            *uint64_t v23 = 0;
            if (v25) {
              operator delete[](v24);
            }
          }
          while (v23 != v9);
          goto LABEL_78;
        }
      }
    }
    else
    {
      v39[0] = "'mps.strided_slice' op requires attribute 'end_mask'";
      __int16 v40 = 259;
      mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
      if (v41[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
      }
      if (v48)
      {
        uint64_t v14 = (void **)__p;
        if (__p)
        {
          BOOL v15 = v47;
          long long v16 = __p;
          if (v47 != __p)
          {
            do
              BOOL v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            long long v16 = __p;
          }
          uint64_t v47 = v14;
          operator delete(v16);
        }
        unint64_t v9 = v44;
        if (!v44) {
          goto LABEL_80;
        }
        long long v17 = v45;
        BOOL v11 = v44;
        if (v45 == v44) {
          goto LABEL_79;
        }
        do
        {
          uint64_t v19 = (void *)*--v17;
          BOOL v18 = v19;
          *long long v17 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v17 != v9);
        goto LABEL_78;
      }
    }
  }
  else
  {
    v39[0] = "'mps.strided_slice' op requires attribute 'begin_mask'";
    __int16 v40 = 259;
    mlir::emitError(a2, (uint64_t)v39, (uint64_t)v41);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v41);
    if (v41[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v41);
    }
    if (v48)
    {
      uint64_t v6 = (void **)__p;
      if (__p)
      {
        uint64_t v7 = v47;
        uint64_t v8 = __p;
        if (v47 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        uint64_t v47 = v6;
        operator delete(v8);
      }
      unint64_t v9 = v44;
      if (!v44) {
        goto LABEL_80;
      }
      uint64_t v10 = v45;
      BOOL v11 = v44;
      if (v45 == v44) {
        goto LABEL_79;
      }
      do
      {
        int v13 = (void *)*--v10;
        int v12 = v13;
        *uint64_t v10 = 0;
        if (v13) {
          operator delete[](v12);
        }
      }
      while (v10 != v9);
      goto LABEL_78;
    }
  }
  return v5;
}

uint64_t mlir::mps::StridedSliceGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  v38[0] = a4;
  v38[1] = a5;
  if (a5 == 5)
  {
    uint64_t v13 = mlir::ValueRange::dereference_iterator(v38, 0);
    uint64_t v14 = *(void **)(*(void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      long long v16 = (void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      long long v16 = 0;
    }
    BOOL v34 = v16;
    if (!v16) {
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot run strided slice grad a non-tensor type");
    }
    uint64_t v35 = v37;
    uint64_t v36 = 0x400000000;
    uint64_t v17 = mlir::ValueRange::dereference_iterator(v38, 1);
    if (!mlir::matchConstantWithIntVector<long long>(v17, (uint64_t)&v35))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
      uint64_t v23 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
LABEL_31:
      uint64_t v30 = v23;
      uint64_t v31 = *(unsigned int *)(a11 + 8);
      if (v31 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v31 + 1, 8);
        LODWORD(v31) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v31) = v30;
      ++*(_DWORD *)(a11 + 8);
      if (v35 != v37) {
        free(v35);
      }
      return 1;
    }
    uint64_t v18 = v36;
    uint64_t v19 = (char *)v35;
    if (!v36) {
      goto LABEL_30;
    }
    if (v36 < 4)
    {
      uint64_t v20 = 0;
LABEL_36:
      uint64_t v32 = v18 - v20;
      uint64_t v33 = &v19[8 * v20];
      do
      {
        if (*(void *)v33 == -1) {
          *(void *)uint64_t v33 = 0x8000000000000000;
        }
        v33 += 8;
        --v32;
      }
      while (v32);
LABEL_30:
      uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v34);
      uint64_t v23 = mlir::RankedTensorType::get((uint64_t)v19, v18, ElementType, 0);
      goto LABEL_31;
    }
    uint64_t v20 = v36 & 0xFFFFFFFC;
    uint64_t v24 = (int64x2_t *)((char *)v35 + 16);
    v25.i64[0] = -1;
    v25.i64[1] = -1;
    uint64_t v26 = v20;
    while (1)
    {
      int32x2_t v27 = vmovn_s64(vceqq_s64(v24[-1], v25));
      if (v27.i8[0])
      {
        v24[-1].i64[0] = 0x8000000000000000;
        if ((v27.i8[4] & 1) == 0)
        {
LABEL_22:
          int32x2_t v28 = vmovn_s64(vceqq_s64(*v24, v25));
          if ((v28.i8[0] & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_27;
        }
      }
      else if ((v27.i8[4] & 1) == 0)
      {
        goto LABEL_22;
      }
      v24[-1].i64[1] = 0x8000000000000000;
      int32x2_t v28 = vmovn_s64(vceqq_s64(*v24, v25));
      if ((v28.i8[0] & 1) == 0)
      {
LABEL_23:
        if (v28.i8[4]) {
          goto LABEL_28;
        }
        goto LABEL_19;
      }
LABEL_27:
      v24->i64[0] = 0x8000000000000000;
      if (v28.i8[4]) {
LABEL_28:
      }
        v24->i64[1] = 0x8000000000000000;
LABEL_19:
      v24 += 2;
      v26 -= 4;
      if (!v26)
      {
        if (v20 == v18) {
          goto LABEL_30;
        }
        goto LABEL_36;
      }
    }
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::CropOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v69 = a6;
  v70[0] = 0;
  char v71 = 0;
  uint64_t v72 = a9;
  uint64_t v73 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v69);
    if (v71) {
      char v71 = 0;
    }
    mlir::OperationName::OperationName(v70, "mps.crop", 8, Context);
    char v71 = 1;
  }
  uint64_t v74 = a4;
  unint64_t v75 = a5;
  if (!a5)
  {
    uint64_t v21 = mlir::Float32Type::get(this, a2);
    uint64_t v22 = mlir::UnrankedTensorType::get(v21);
    uint64_t v23 = *(unsigned int *)(a11 + 8);
    if (v23 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  mlir::UnknownLoc::get(this, a2);
  if (a5 <= 3) {
    goto LABEL_15;
  }
  uint64_t v66 = v74;
  uint64_t v67 = 0;
  BOOL v15 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v66, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
  {
    uint64_t v59 = 0;
    uint64_t v60 = 0;
LABEL_15:
    uint64_t v66 = v74;
    uint64_t v67 = 0;
    uint64_t v24 = mlir::ValueRange::dereference_iterator(&v66, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v24);
    uint64_t v22 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v23 = *(unsigned int *)(a11 + 8);
    if (v23 >= *(_DWORD *)(a11 + 12))
    {
LABEL_19:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(a11 + 8);
    }
LABEL_16:
    *(void *)(*(void *)a11 + 8 * v23) = v22;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
  uint64_t v59 = v15;
  uint64_t v60 = v16;
  if (!v15) {
    goto LABEL_15;
  }
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v59) & 1) == 0)
  {
    uint64_t v22 = (uint64_t)v59;
    uint64_t v23 = *(unsigned int *)(a11 + 8);
    if (v23 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
  int64_t v18 = v17;
  uint64_t v66 = v68;
  HIDWORD(v67) = 4;
  if (v17 >= 5)
  {
    LODWORD(v67) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v17, 8);
    uint64_t v19 = v66;
    size_t v20 = 8 * v18;
LABEL_22:
    memset_pattern16(v19, &unk_1811000C0, v20);
    goto LABEL_23;
  }
  if (v17)
  {
    size_t v20 = 8 * v17;
    uint64_t v19 = v68;
    goto LABEL_22;
  }
LABEL_23:
  LODWORD(v67) = v18;
  uint64_t v63 = v74;
  uint64_t v64 = 1;
  uint64_t v63 = (void *)mlir::ValueRange::offset_base(&v63, 1);
  uint64_t v64 = 0;
  uint64_t v28 = mlir::ValueRange::dereference_iterator(&v63, 0);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = &v63;
  uint64_t v62 = v28;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v62);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v61, DefiningOp))
  {
    uint64_t SingleInt = mlir::getSingleIntValue<int>((uint64_t)v63, v64);
    uint64_t v31 = SingleInt & 0xFF00000000;
    uint64_t v32 = SingleInt & 0xFFFFFF00;
    uint64_t v33 = SingleInt;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v63 = v74;
  uint64_t v64 = 2;
  uint64_t v63 = (void *)mlir::ValueRange::offset_base(&v63, 2);
  uint64_t v64 = 0;
  uint64_t v34 = mlir::ValueRange::dereference_iterator(&v63, 0);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = &v63;
  uint64_t v62 = v34;
  uint64_t v35 = mlir::Value::getDefiningOp((mlir::Value *)&v62);
  if (v35 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v61, v35))
  {
    uint64_t v36 = mlir::getSingleIntValue<int>((uint64_t)v63, v64);
    int v57 = v36;
    int v58 = v36 & 0xFFFFFF00;
    int v37 = BYTE4(v36);
  }
  else
  {
    int v57 = 0;
    int v58 = 0;
    int v37 = 0;
  }
  uint64_t v63 = v74;
  uint64_t v64 = 3;
  uint64_t v63 = (void *)mlir::ValueRange::offset_base(&v63, 3);
  uint64_t v64 = 0;
  uint64_t v38 = mlir::ValueRange::dereference_iterator(&v63, 0);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = &v63;
  uint64_t v62 = v38;
  uint64_t v39 = mlir::Value::getDefiningOp((mlir::Value *)&v62);
  if (v39 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v61, v39))
  {
    uint64_t v40 = mlir::getSingleIntValue<int>((uint64_t)v63, v64);
    int v41 = v40 & 0xFFFFFF00;
    int v42 = v40;
    int v43 = BYTE4(v40);
    if (!v31)
    {
LABEL_34:
      int v44 = v66;
      goto LABEL_46;
    }
  }
  else
  {
    int v41 = 0;
    int v43 = 0;
    int v42 = 0;
    if (!v31) {
      goto LABEL_34;
    }
  }
  uint64_t v45 = (v18 & ((v33 | v32) << 32 >> 63)) + (int)(v33 | v32);
  if (v45 >= 0 && v18 > v45)
  {
    uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
    uint64_t v47 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
    llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v63, ArgAttrsAttr, (unsigned char *)(v47 + 8 * v48));
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v66, (uint64_t)&v63);
    if (v63 != &v65) {
      free(v63);
    }
    int64_t v49 = 0x8000000000000000;
    int v44 = v66;
    if (!v37 || !v43) {
      goto LABEL_45;
    }
    int64_t v50 = *((void *)v66 + v45);
    if (v50 == 0x8000000000000000) {
      goto LABEL_46;
    }
    if (((v50 - ((v57 | v58) + v41 + v42)) & 0x80000000) == 0)
    {
      int64_t v49 = v50 - ((v57 | v58) + v41 + v42);
      if (v50 >= v49)
      {
LABEL_45:
        *((void *)v66 + v45) = v49;
LABEL_46:
        uint64_t v51 = v67;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v59);
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v44, v51, OperandRange, 0);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v53);
        uint64_t v26 = 1;
        unsigned int v54 = v66;
        if (v66 == v68) {
          return v26;
        }
        goto LABEL_49;
      }
    }
  }
  uint64_t v63 = v74;
  uint64_t v64 = 0;
  uint64_t v55 = mlir::ValueRange::dereference_iterator(&v63, 0);
  uint64_t v56 = mlir::getElementTypeOrSelf(v55);
  uint64_t v26 = mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v56);
  unsigned int v54 = v66;
  if (v66 != v68) {
LABEL_49:
  }
    free(v54);
  return v26;
}

uint64_t mlir::mps::CropOp::verify(uint64_t **this)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  LOBYTE(v84) = 0;
  char v85 = 0;
  uint64_t v2 = (*this)[9];
  uint64_t v3 = (void *)(*(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v2 = (*this)[9];
  }
  else
  {
    uint64_t v4 = 0;
  }
  v83[0] = v3;
  v83[1] = v4;
  uint64_t v5 = *(const char **)(v2 + 56);
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  v79[0] = (uint64_t **)&v86;
  uint64_t v66 = v5;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v79, DefiningOp))
  {
    uint64_t SingleInt = mlir::getSingleIntValue<int>(v86, v87);
    unint64_t v8 = SingleInt & 0xFFFFFF0000000000;
    uint64_t v9 = SingleInt & 0xFF00000000;
    unint64_t v10 = SingleInt & 0xFFFFFF00;
    uint64_t v11 = SingleInt;
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  unint64_t v12 = v8 | v11 | v10;
  uint64_t v82 = v12 | v9;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v83) && v9)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83);
    uint64_t v81 = v13;
    if (v10 >> 31) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14 + (int)v12;
    if (v15 < 0 || v15 >= v13)
    {
      uint64_t v66 = "failed: axis value {0} does not fit tensor rank ({1})";
      uint64_t v67 = 53;
      uint64_t v68 = &v74;
      uint64_t v69 = 2;
      long long v70 = &unk_1EC9A45E8;
      char v71 = &v82;
      uint64_t v72 = (void **)&unk_1EC9A4648;
      uint64_t v73 = &v81;
      uint64_t v74 = &v70;
      unint64_t v75 = &v72;
      __int16 v80 = 263;
      v79[0] = (uint64_t **)&v66;
      mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
      uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
      if (v86) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
      }
      if (v94)
      {
        int v37 = (void **)__p;
        if (__p)
        {
          uint64_t v38 = v93;
          uint64_t v39 = __p;
          if (v93 != __p)
          {
            do
              uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
            while (v38 != v37);
            uint64_t v39 = __p;
          }
          uint64_t v93 = v37;
          operator delete(v39);
        }
        uint64_t v24 = v90;
        if (!v90) {
          goto LABEL_125;
        }
        uint64_t v40 = v91;
        uint64_t v26 = v90;
        if (v91 == v90) {
          goto LABEL_124;
        }
        do
        {
          int v42 = (void *)*--v40;
          int v41 = v42;
          *uint64_t v40 = 0;
          if (v42) {
            operator delete[](v41);
          }
        }
        while (v40 != v24);
        goto LABEL_123;
      }
      return v20;
    }
    if (*(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83)
                   + 8 * v15) != 0x8000000000000000)
    {
      uint64_t v84 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83)
                      + 8 * v15);
      char v85 = 1;
    }
  }
  uint64_t v16 = *(const char **)((*this)[9] + 88);
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  v79[0] = (uint64_t **)&v86;
  uint64_t v66 = v16;
  uint64_t v17 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (!v17 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v79, v17))
  {
    int v19 = 0;
    uint64_t v81 = 0;
    goto LABEL_35;
  }
  uint64_t v18 = mlir::getSingleIntValue<int>(v86, v87);
  int v19 = v18;
  uint64_t v81 = v18;
  if ((v18 & 0xFF00000000) == 0)
  {
LABEL_35:
    char v27 = 1;
    goto LABEL_36;
  }
  uint64_t v78 = (int)v18;
  if ((v18 & 0x80000000) != 0)
  {
    uint64_t v66 = "failed: amount_before value {0} must be positive";
    uint64_t v67 = 48;
    uint64_t v68 = &v72;
    uint64_t v69 = 1;
    long long v70 = &unk_1EC9A4648;
    char v71 = &v78;
    uint64_t v72 = &v70;
    __int16 v80 = 263;
    v79[0] = (uint64_t **)&v66;
    mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
    if (v86) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
    }
    if (v94)
    {
      uint64_t v45 = (void **)__p;
      if (__p)
      {
        uint64_t v46 = v93;
        uint64_t v47 = __p;
        if (v93 != __p)
        {
          do
            uint64_t v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
          while (v46 != v45);
          uint64_t v47 = __p;
        }
        uint64_t v93 = v45;
        operator delete(v47);
      }
      uint64_t v24 = v90;
      if (!v90) {
        goto LABEL_125;
      }
      uint64_t v48 = v91;
      uint64_t v26 = v90;
      if (v91 == v90) {
        goto LABEL_124;
      }
      do
      {
        int64_t v50 = (void *)*--v48;
        int64_t v49 = v50;
        *uint64_t v48 = 0;
        if (v50) {
          operator delete[](v49);
        }
      }
      while (v48 != v24);
      goto LABEL_123;
    }
    return v20;
  }
  if (v85 && v84 < (int)v18)
  {
    uint64_t v66 = "failed: amount_before value {0} does not fit dimension size ({1})";
    uint64_t v67 = 65;
    uint64_t v68 = &v74;
    uint64_t v69 = 2;
    long long v70 = &unk_1EC9A4648;
    char v71 = &v78;
    uint64_t v72 = (void **)&unk_1EC9A4648;
    uint64_t v73 = &v84;
    uint64_t v74 = &v70;
    unint64_t v75 = &v72;
    __int16 v80 = 263;
    v79[0] = (uint64_t **)&v66;
    mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
    if (v86) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
    }
    if (v94)
    {
      uint64_t v21 = (void **)__p;
      if (__p)
      {
        uint64_t v22 = v93;
        uint64_t v23 = __p;
        if (v93 != __p)
        {
          do
            uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          uint64_t v23 = __p;
        }
        uint64_t v93 = v21;
        operator delete(v23);
      }
      uint64_t v24 = v90;
      if (!v90) {
        goto LABEL_125;
      }
      int64x2_t v25 = v91;
      uint64_t v26 = v90;
      if (v91 == v90)
      {
LABEL_124:
        uint64_t v91 = v24;
        operator delete(v26);
LABEL_125:
        if (v88 != &v89) {
          free(v88);
        }
        return v20;
      }
      do
      {
        uint64_t v36 = (void *)*--v25;
        uint64_t v35 = v36;
        *int64x2_t v25 = 0;
        if (v36) {
          operator delete[](v35);
        }
      }
      while (v25 != v24);
LABEL_123:
      uint64_t v26 = v90;
      goto LABEL_124;
    }
    return v20;
  }
  char v27 = 0;
LABEL_36:
  uint64_t v28 = *(const char **)((*this)[9] + 120);
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  v79[0] = (uint64_t **)&v86;
  uint64_t v66 = v28;
  uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v66);
  if (!v29) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v79, v29)) {
    return 1;
  }
  uint64_t v30 = mlir::getSingleIntValue<int>(v86, v87);
  uint64_t v78 = v30;
  if ((v30 & 0xFF00000000) == 0) {
    return 1;
  }
  uint64_t v77 = (int)v30;
  if ((v30 & 0x80000000) != 0)
  {
    uint64_t v66 = "failed: amount_after value {0} must be positive";
    uint64_t v67 = 47;
    uint64_t v68 = &v72;
    uint64_t v69 = 1;
    long long v70 = &unk_1EC9A4648;
    char v71 = &v77;
    uint64_t v72 = &v70;
    __int16 v80 = 263;
    v79[0] = (uint64_t **)&v66;
    mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
    if (v86) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
    }
    if (v94)
    {
      uint64_t v51 = (void **)__p;
      if (__p)
      {
        uint64_t v52 = v93;
        uint64_t v53 = __p;
        if (v93 != __p)
        {
          do
            uint64_t v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
          while (v52 != v51);
          uint64_t v53 = __p;
        }
        uint64_t v93 = v51;
        operator delete(v53);
      }
      uint64_t v24 = v90;
      if (!v90) {
        goto LABEL_125;
      }
      unsigned int v54 = v91;
      uint64_t v26 = v90;
      if (v91 == v90) {
        goto LABEL_124;
      }
      do
      {
        uint64_t v56 = (void *)*--v54;
        uint64_t v55 = v56;
        void *v54 = 0;
        if (v56) {
          operator delete[](v55);
        }
      }
      while (v54 != v24);
      goto LABEL_123;
    }
    return v20;
  }
  if (!v85 || v84 >= (int)v30)
  {
    if (v85) {
      char v57 = v27;
    }
    else {
      char v57 = 1;
    }
    if ((v57 & 1) == 0)
    {
      uint64_t v58 = v84 - ((int)v30 + (uint64_t)v19);
      if (v58 < 0 || v84 < v58)
      {
        uint64_t v66 = "failed: amount_before value {0} and amount_after value {1} do not fit dimension size ({1})";
        uint64_t v67 = 90;
        uint64_t v68 = (void ***)v76;
        uint64_t v69 = 3;
        long long v70 = &unk_1EC9A45E8;
        char v71 = &v81;
        uint64_t v72 = (void **)&unk_1EC9A45E8;
        uint64_t v73 = &v78;
        uint64_t v74 = (void **)&unk_1EC9A4648;
        unint64_t v75 = (void ***)&v84;
        v76[0] = &v70;
        v76[1] = &v72;
        void v76[2] = &v74;
        __int16 v80 = 263;
        v79[0] = (uint64_t **)&v66;
        mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
        uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
        if (v86) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
        }
        if (v94)
        {
          uint64_t v59 = (void **)__p;
          if (__p)
          {
            uint64_t v60 = v93;
            uint64_t v61 = __p;
            if (v93 != __p)
            {
              do
                uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
              while (v60 != v59);
              uint64_t v61 = __p;
            }
            uint64_t v93 = v59;
            operator delete(v61);
          }
          uint64_t v24 = v90;
          if (!v90) {
            goto LABEL_125;
          }
          uint64_t v62 = v91;
          uint64_t v26 = v90;
          if (v91 == v90) {
            goto LABEL_124;
          }
          do
          {
            uint64_t v64 = (void *)*--v62;
            uint64_t v63 = v64;
            void *v62 = 0;
            if (v64) {
              operator delete[](v63);
            }
          }
          while (v62 != v24);
          goto LABEL_123;
        }
        return v20;
      }
    }
    return 1;
  }
  uint64_t v66 = "failed: amount_after value {0} does not fit dimension size ({1})";
  uint64_t v67 = 64;
  uint64_t v68 = &v74;
  uint64_t v69 = 2;
  long long v70 = &unk_1EC9A4648;
  char v71 = &v77;
  uint64_t v72 = (void **)&unk_1EC9A4648;
  uint64_t v73 = &v84;
  uint64_t v74 = &v70;
  unint64_t v75 = &v72;
  __int16 v80 = 263;
  v79[0] = (uint64_t **)&v66;
  mlir::OpState::emitOpError(this, (const void ***)v79, (uint64_t)&v86);
  uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v86);
  if (v86) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v86);
  }
  if (v94)
  {
    uint64_t v31 = (void **)__p;
    if (__p)
    {
      uint64_t v32 = v93;
      uint64_t v33 = __p;
      if (v93 != __p)
      {
        do
          uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
        while (v32 != v31);
        uint64_t v33 = __p;
      }
      uint64_t v93 = v31;
      operator delete(v33);
    }
    uint64_t v24 = v90;
    if (!v90) {
      goto LABEL_125;
    }
    uint64_t v34 = v91;
    uint64_t v26 = v90;
    if (v91 == v90) {
      goto LABEL_124;
    }
    do
    {
      int v44 = (void *)*--v34;
      int v43 = v44;
      void *v34 = 0;
      if (v44) {
        operator delete[](v43);
      }
    }
    while (v34 != v24);
    goto LABEL_123;
  }
  return v20;
}

BOOL mlir::mps::ReverseOp::verify(mlir::mps::_anonymous_namespace_ **this)
{
  uint64_t v2 = (void *)(*(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
  {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    uint64_t v16 = v2;
    uint64_t v17 = v3;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v16)) {
      return 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v16)) {
      return 1;
    }
  }
  if (*((_DWORD *)*this + 17) == 1) {
    return 1;
  }
  uint64_t v4 = *(uint64_t **)(*((void *)*this + 9) + 56);
  if (!v4) {
    return 1;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = (uint64_t **)&v14;
  uint64_t v11 = v4;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v13, DefiningOp)) {
    return 1;
  }
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v11 = (uint64_t *)v12;
  uint64_t v6 = *this;
  uint64_t v7 = v14;
  uint64_t v8 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v16);
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v11, v12[0]);
  return v6 != 0;
}

uint64_t mlir::mps::ReverseOp::getAxes(mlir::mps::ReverseOp *this)
{
  if (*(_DWORD *)(*(void *)this + 68) == 1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(*(void *)this + 72) + 56);
  }
}

uint64_t mlir::matchPattern<mlir::detail::constant_op_binder<mlir::ElementsAttr>>(uint64_t a1, uint64_t ***a2)
{
  uint64_t v4 = a1;
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v4);
  if (result) {
    return mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(a2, result);
  }
  return result;
}

uint64_t mlir::mps::anonymous namespace'::validateUniqueAxes(mlir::mps::_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t **a5)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  uint64_t v45 = v47;
  uint64_t v46 = 0x400000000;
  uint64_t v8 = 1;
  mlir::getIntValues<long long>(a2, a3, (uint64_t)&v45, 1);
  if (v46)
  {
    unint64_t v10 = v45;
    uint64_t v11 = &v45[v46];
    unint64_t v12 = a5 + 1;
    while (1)
    {
      uint64_t v13 = *v10;
      uint64_t v36 = 0;
        break;
      uint64_t v14 = *v12;
      uint64_t v15 = v36;
      uint64_t v16 = a5 + 1;
      uint64_t v17 = a5 + 1;
      if (*v12)
      {
        uint64_t v18 = *v12;
        do
        {
          uint64_t v19 = v18[4];
          if ((uint64_t)v36 >= v19)
          {
            if (v19 >= (uint64_t)v36)
            {
              uint64_t v34 = (const void **)"axis must be unique";
              __int16 v35 = 259;
              mlir::Operation::emitOpError((uint64_t *)a1, &v34, (uint64_t)v37);
              uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v37);
              if (v37[0]) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v37);
              }
              if (v44)
              {
                int64x2_t v25 = (void **)__p;
                if (__p)
                {
                  uint64_t v26 = v43;
                  char v27 = __p;
                  if (v43 != __p)
                  {
                    do
                      uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
                    while (v26 != v25);
                    char v27 = __p;
                  }
                  int v43 = v25;
                  operator delete(v27);
                }
                uint64_t v28 = v40;
                if (v40)
                {
                  uint64_t v29 = v41;
                  uint64_t v30 = v40;
                  if (v41 != v40)
                  {
                    do
                    {
                      uint64_t v32 = (void *)*--v29;
                      uint64_t v31 = v32;
                      *uint64_t v29 = 0;
                      if (v32) {
                        operator delete[](v31);
                      }
                    }
                    while (v29 != v28);
                    uint64_t v30 = v40;
                  }
                  int v41 = v28;
                  operator delete(v30);
                }
                if (v38 != &v39) {
                  free(v38);
                }
              }
              goto LABEL_40;
            }
            ++v18;
          }
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
        while (1)
        {
          while (1)
          {
            uint64_t v17 = (uint64_t **)v14;
            uint64_t v20 = v14[4];
            if ((uint64_t)v36 >= v20) {
              break;
            }
            uint64_t v14 = *v17;
            uint64_t v16 = v17;
            if (!*v17) {
              goto LABEL_15;
            }
          }
          if (v20 >= (uint64_t)v36) {
            break;
          }
          uint64_t v14 = v17[1];
          if (!v14)
          {
            uint64_t v16 = v17 + 1;
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        uint64_t v21 = (uint64_t *)operator new(0x28uLL);
        v21[4] = (uint64_t)v15;
        *uint64_t v21 = 0;
        v21[1] = 0;
        void v21[2] = (uint64_t)v17;
        *uint64_t v16 = v21;
        uint64_t v22 = (uint64_t *)**a5;
        if (v22)
        {
          *a5 = v22;
          uint64_t v23 = *v16;
        }
        else
        {
          uint64_t v23 = v21;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a5[1], v23);
        a5[2] = (uint64_t *)((char *)a5[2] + 1);
      }
      if (++v10 == v11)
      {
        uint64_t v8 = 1;
        uint64_t v24 = v45;
        if (v45 != v47) {
          goto LABEL_41;
        }
        return v8;
      }
    }
    uint64_t v8 = 0;
    uint64_t v24 = v45;
    if (v45 != v47) {
      goto LABEL_41;
    }
  }
  else
  {
LABEL_40:
    uint64_t v24 = v45;
    if (v45 != v47) {
LABEL_41:
    }
      free(v24);
  }
  return v8;
}

uint64_t mlir::mps::SplitOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v117[6] = *MEMORY[0x1E4F143B8];
  uint64_t v110 = a4;
  unint64_t v111 = a5;
  if (a7) {
    uint64_t v16 = *a7;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v102 = a6;
  v103[0] = 0;
  char v104 = 0;
  uint64_t v105 = v16;
  uint64_t v106 = a9;
  unint64_t v17 = a5;
  uint64_t v107 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v102);
    if (v104) {
      char v104 = 0;
    }
    mlir::OperationName::OperationName(v103, "mps.split", 9, Context);
    char v104 = 1;
    unint64_t v17 = v111;
  }
  uint64_t v108 = a4;
  unint64_t v109 = a5;
  if (v17 < 2
    || (uint64_t v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::SplitOpAdaptor::verify((uint64_t)&v102, v19)))
  {
    uint64_t v26 = mlir::Float32Type::get(this, a2);
    uint64_t v27 = mlir::UnrankedTensorType::get(v26);
    uint64_t v28 = *(unsigned int *)(a11 + 8);
    if (v28 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
      LODWORD(v28) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v28) = v27;
    goto LABEL_18;
  }
  uint64_t v20 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v110, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8)
    || (uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8), !v20))
  {
    uint64_t v31 = mlir::ValueRange::dereference_iterator(&v110, 0);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v31);
    if (!ElementTypeOrSelf) {
      uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, v33);
    }
    uint64_t v34 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    unsigned int v35 = *(_DWORD *)(a11 + 8);
    if (v35 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
      unsigned int v35 = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v35) = v34;
LABEL_18:
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  uint64_t v22 = mlir::ValueRange::dereference_iterator(&v110, 1);
  unint64_t v23 = v111;
  if (v111 == 3)
  {
    uint64_t v87 = mlir::ValueRange::dereference_iterator(&v110, 2);
    uint64_t v88 = v105;
    if (v105)
    {
LABEL_14:
      unint64_t UInt = (unint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v88);
      uint64_t v25 = 1;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v87 = 0;
    uint64_t v88 = v105;
    if (v105) {
      goto LABEL_14;
    }
  }
  unint64_t UInt = 0;
  uint64_t v25 = 0;
LABEL_27:
  v101[0] = v20;
  v101[1] = v21;
  unint64_t v99 = UInt;
  uint64_t v100 = v25;
  uint64_t v115 = v117;
  uint64_t v116 = 0x600000000;
  LOBYTE(v97) = 0;
  char v98 = 0;
  uint64_t v36 = 0x8000000000000000;
  unint64_t v96 = 0x8000000000000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v101)) {
    goto LABEL_51;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v101);
  uint64_t v38 = v37;
  if (mlir::mps::getAxis((uint64_t)a2, a3, v22, v37, (uint64_t)&v97))
  {
    if (v98)
    {
      uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v101);
      uint64_t v41 = v40;
      int v42 = 0;
      uint64_t v36 = ArgAttrsAttr[v97];
      unint64_t v96 = v36;
      LODWORD(v116) = 0;
      unint64_t v43 = (8 * v40) >> 3;
      if (v43 > HIDWORD(v116))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v43, 8);
        int v42 = v116;
      }
      unint64_t v44 = 8 * v41;
      if (v41)
      {
        memcpy(&v115[v42], ArgAttrsAttr, 8 * v41);
        int v42 = v116;
      }
      char v45 = 0;
      LODWORD(v116) = v42 + (v44 >> 3);
      __b = v114;
      uint64_t v113 = 0x600000000;
      if (v23 != 3) {
        goto LABEL_35;
      }
      goto LABEL_52;
    }
    if (v38 < 1)
    {
      uint64_t v36 = 0x8000000000000000;
    }
    else
    {
      unsigned int v48 = v116;
      unint64_t v49 = v38 + 1;
      uint64_t v36 = 0x8000000000000000;
      do
      {
        if (v48 >= HIDWORD(v116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, v117, v48 + 1, 8);
          unsigned int v48 = v116;
        }
        v115[v48] = 0x8000000000000000;
        unsigned int v48 = v116 + 1;
        LODWORD(v116) = v116 + 1;
        --v49;
      }
      while (v49 > 1);
    }
LABEL_51:
    char v45 = 1;
    __b = v114;
    uint64_t v113 = 0x600000000;
    if (v23 != 3)
    {
LABEL_35:
      if (!v25)
      {
        goto LABEL_111;
      }
      if (v36 == 0x8000000000000000)
      {
        if (!UInt) {
          goto LABEL_74;
        }
        if (UInt < 7)
        {
          uint64_t v46 = 0;
          uint64_t v47 = v114;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v114, UInt, 8);
          uint64_t v46 = v113;
          uint64_t v47 = __b;
        }
        if (UInt != v46) {
          bzero(&v47[8 * v46], 8 * (UInt - v46));
        }
        LODWORD(v113) = UInt;
        size_t v54 = 8 * UInt;
        uint64_t v53 = v47;
        goto LABEL_73;
      }
      {
        uint64_t v89 = "infer split sizes from total size={0} and num_splits={1} failed.";
        uint64_t v90 = 64;
        uint64_t v91 = v95;
        uint64_t v92 = 2;
        v93[0] = &unk_1EC9A4648;
        v93[1] = &v96;
        v94[0] = &unk_1EC9A4678;
        v94[1] = &v99;
        v95[0] = v93;
        v95[1] = v94;
        uint64_t v29 = mlir::emitOptionalError<llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<long long &>,llvm::detail::provider_format_adapter<unsigned long long &>>>>((uint64_t)a2, a3, (const void **)&v89);
        goto LABEL_111;
      }
      goto LABEL_74;
    }
LABEL_52:
    int64_t v50 = (const char *)(*(void *)(v87 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v50 + 8))
    {
      uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v50 + 8);
      uint64_t v89 = v50;
      uint64_t v90 = v51;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v89))
      {
LABEL_54:
        if (!mlir::matchConstantWithIntVector<long long>(v87, (uint64_t)&__b))
        {
          if (!v25)
          {
            unint64_t UInt = *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89);
            LOBYTE(v100) = 1;
            unint64_t v99 = UInt;
            if (UInt == 0x8000000000000000)
            {
              goto LABEL_111;
            }
          }
          uint64_t v52 = v113;
          if (UInt != v113)
          {
            if (UInt >= v113)
            {
              if (UInt > HIDWORD(v113))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v114, UInt, 8);
                uint64_t v52 = v113;
              }
              if (UInt != v52) {
                bzero((char *)__b + 8 * v52, 8 * (UInt - v52));
              }
            }
            LODWORD(v113) = UInt;
          }
          if (UInt)
          {
            uint64_t v53 = __b;
            size_t v54 = 8 * UInt;
LABEL_73:
            memset_pattern16(v53, &unk_1811000C0, v54);
          }
        }
LABEL_74:
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v101))
        {
          if (v113)
          {
            uint64_t v55 = __b;
            uint64_t v56 = v97;
            do
            {
              uint64_t v57 = (uint64_t)v115;
              if ((v45 & 1) == 0) {
                v115[v56] = *v55;
              }
              uint64_t v58 = v116;
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v101);
              uint64_t v60 = mlir::RankedTensorType::get(v57, v58, OperandRange, 0);
              unint64_t v61 = *(unsigned int *)(a11 + 8);
              if (v61 >= *(unsigned int *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v61 + 1, 8);
                unint64_t v61 = *(unsigned int *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v61) = v60;
              ++*(_DWORD *)(a11 + 8);
              ++v55;
            }
            while (v55 != (void *)((char *)__b + 8 * v113));
          }
          goto LABEL_110;
        }
        uint64_t v62 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v101);
        unint64_t v63 = mlir::UnrankedTensorType::get(v62);
        unint64_t v64 = v63;
        unint64_t v65 = v113;
        if (*(_DWORD *)(a11 + 12) < v113)
        {
          *(_DWORD *)(a11 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v65, 8);
          uint64_t v66 = *(int64x2_t **)a11;
          if (v65 >= 4)
          {
            uint64_t v67 = (unint64_t *)v66 + (v65 & 0xFFFFFFFC);
            unint64_t v68 = v65 & 3;
            int64x2_t v74 = vdupq_n_s64(v64);
            unint64_t v75 = v66 + 1;
            uint64_t v76 = v65 & 0xFFFFFFFC;
            do
            {
              v75[-1] = v74;
              *unint64_t v75 = v74;
              v75 += 2;
              v76 -= 4;
            }
            while (v76);
            if ((v65 & 0xFFFFFFFC) == v65) {
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v67 = *(unint64_t **)a11;
            unint64_t v68 = v65;
          }
          do
          {
            *v67++ = v64;
            --v68;
          }
          while (v68);
LABEL_109:
          *(_DWORD *)(a11 + 8) = v65;
LABEL_110:
          uint64_t v29 = 1;
LABEL_111:
          if (__b != v114) {
            free(__b);
          }
          goto LABEL_113;
        }
        unint64_t v69 = *(unsigned int *)(a11 + 8);
        if (v69 >= v113) {
          unint64_t v70 = v113;
        }
        else {
          unint64_t v70 = *(unsigned int *)(a11 + 8);
        }
        if (v70)
        {
          char v71 = *(int64x2_t **)a11;
          if (v70 >= 4)
          {
            uint64_t v72 = (unint64_t *)v71 + (v70 & 0xFFFFFFFC);
            unint64_t v73 = v70 & 3;
            int64x2_t v77 = vdupq_n_s64(v63);
            uint64_t v78 = v71 + 1;
            uint64_t v79 = v70 & 0xFFFFFFFC;
            do
            {
              v78[-1] = v77;
              int64x2_t *v78 = v77;
              v78 += 2;
              v79 -= 4;
            }
            while (v79);
            if (v70 == (v70 & 0xFFFFFFFC)) {
              goto LABEL_101;
            }
          }
          else
          {
            uint64_t v72 = *(unint64_t **)a11;
            unint64_t v73 = v70;
          }
          do
          {
            *v72++ = v63;
            --v73;
          }
          while (v73);
        }
LABEL_101:
        if (v69 >= v65) {
          goto LABEL_109;
        }
        unint64_t v80 = v65 - v69;
        if (v65 == v69) {
          goto LABEL_109;
        }
        uint64_t v81 = *(void *)a11 + 8 * v69;
        if (v80 >= 4)
        {
          uint64_t v82 = (unint64_t *)(v81 + 8 * (v80 & 0xFFFFFFFFFFFFFFFCLL));
          unint64_t v83 = v80 & 3;
          int64x2_t v84 = vdupq_n_s64(v63);
          char v85 = (int64x2_t *)(v81 + 16);
          unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v85[-1] = v84;
            *char v85 = v84;
            v85 += 2;
            v86 -= 4;
          }
          while (v86);
          if (v80 == (v80 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_109;
          }
        }
        else
        {
          uint64_t v82 = (unint64_t *)(*(void *)a11 + 8 * v69);
          unint64_t v83 = v80;
        }
        do
        {
          *v82++ = v63;
          --v83;
        }
        while (v83);
        goto LABEL_109;
      }
    }
    else
    {
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v89)) {
        goto LABEL_54;
      }
    }
    goto LABEL_111;
  }
  uint64_t v29 = 0;
LABEL_113:
  if (v115 != v117) {
    free(v115);
  }
  return v29;
}

uint64_t mlir::mps::SplitOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 24)) {
    return 1;
  }
  v13[0] = *(void *)(a1 + 24);
  v15[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)v15, 32)) {
    return 1;
  }
  v13[0] = "'mps.split' op attribute 'num_splits' failed to satisfy constraint: 32-bit unsigned integer attribute";
  __int16 v14 = 259;
  mlir::emitError(a2, (uint64_t)v13, (uint64_t)v15);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  }
  if (v22)
  {
    uint64_t v5 = (void **)__p;
    if (__p)
    {
      uint64_t v6 = v21;
      uint64_t v7 = __p;
      if (v21 != __p)
      {
        do
          uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      uint64_t v21 = v5;
      operator delete(v7);
    }
    uint64_t v8 = v18;
    if (v18)
    {
      uint64_t v9 = v19;
      unint64_t v10 = v18;
      if (v19 != v18)
      {
        do
        {
          unint64_t v12 = (void *)*--v9;
          uint64_t v11 = v12;
          *uint64_t v9 = 0;
          if (v12) {
            operator delete[](v11);
          }
        }
        while (v9 != v8);
        unint64_t v10 = v18;
      }
      uint64_t v19 = v8;
      operator delete(v10);
    }
    if (v16 != &v17) {
      free(v16);
    }
  }
  return v3;
}

uint64_t mlir::mps::SplitOp::verify(uint64_t **this)
{
  v133[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v2 = *this;
  }
  else
  {
    uint64_t v4 = 0;
  }
  v113[0] = v3;
  v113[1] = v4;
  uint64_t v5 = *((unsigned int *)v2 + 9);
  uint64_t v6 = (uint64_t)(v2 - 2);
  if (v5) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = 0x8000000000000000;
  uint64_t v112 = 0x8000000000000000;
  LOBYTE(v110) = 0;
  char v111 = 0;
  int ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v113);
  if (!ArgOperands)
  {
    uint64_t v12 = 0;
    uint64_t ArgAttrsAttr = 0;
    uint64_t v13 = *this;
    if (*((_DWORD *)*this + 17) != 2) {
      goto LABEL_11;
    }
LABEL_16:
    int v102 = 0;
    uint64_t v15 = v133;
    unint64_t v131 = v133;
    uint64_t v132 = 0x600000000;
    goto LABEL_18;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v113);
  unint64_t v8 = v9;
  if (!mlir::mps::getAxis((*this)[3], 1, *(void *)((*this)[9] + 56), v9, (uint64_t)&v110)) {
    return 0;
  }
  if (!v111) {
    return 1;
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v113);
  uint64_t v12 = v11;
  uint64_t v112 = ArgAttrsAttr[v110];
  uint64_t v13 = *this;
  if (*((_DWORD *)*this + 17) == 2) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v14 = *(void *)(v13[9] + 88);
  uint64_t v15 = v133;
  unint64_t v131 = v133;
  uint64_t v132 = 0x600000000;
  if (v14 && mlir::matchConstantWithIntVector<long long>(v14, (uint64_t)&v131))
  {
    if (v132 != v5)
    {
      __int16 v105 = 259;
      mlir::OpState::emitOpError(this, v104, (uint64_t)&__p);
      int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (!v130) {
        goto LABEL_212;
      }
      uint64_t v52 = (void **)v128;
      if (v128)
      {
        uint64_t v53 = v129;
        size_t v54 = v128;
        if (v129 != v128)
        {
          do
            uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
          while (v53 != v52);
          size_t v54 = v128;
        }
        uint64_t v129 = v52;
        operator delete(v54);
      }
      uint64_t v55 = v126;
      if (v126)
      {
        uint64_t v56 = v127;
        uint64_t v57 = v126;
        if (v127 != v126)
        {
          do
          {
            uint64_t v59 = (void *)*--v56;
            uint64_t v58 = v59;
            *uint64_t v56 = 0;
            if (v59) {
              operator delete[](v58);
            }
          }
          while (v56 != v55);
          uint64_t v57 = v126;
        }
        uint64_t v127 = v55;
        operator delete(v57);
      }
      uint64_t v76 = (uint64_t *)v122;
      int64x2_t v77 = (uint64_t *)v125;
LABEL_210:
      if (v76 != v77) {
        free(v76);
      }
      goto LABEL_212;
    }
    int v102 = 1;
  }
  else
  {
    int v102 = 0;
  }
LABEL_18:
  LOBYTE(v117) = 0;
  char v119 = 0;
  v104[0] = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v104[0])
  {
    mlir::IntegerAttr::getValue(v104, (llvm::APInt *)&__p);
    if (v121 >= 0x41) {
      uint64_t p_p = (unsigned int *)__p;
    }
    else {
      uint64_t p_p = (unsigned int *)&__p;
    }
    int64_t v17 = *p_p;
    if (v121 >= 0x41 && __p) {
      operator delete[](__p);
    }
    uint64_t v109 = v17 | 0x100000000;
    if (!v17)
    {
      __int16 v105 = 259;
      mlir::OpState::emitOpError(this, v104, (uint64_t)&__p);
      int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (!v130) {
        goto LABEL_208;
      }
      uint64_t v32 = (void **)v128;
      if (v128)
      {
        uint64_t v33 = v129;
        uint64_t v34 = v128;
        if (v129 != v128)
        {
          do
            uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          uint64_t v34 = v128;
        }
        uint64_t v129 = v32;
        operator delete(v34);
      }
      unsigned int v35 = v126;
      if (!v126) {
        goto LABEL_206;
      }
      uint64_t v36 = v127;
      uint64_t v37 = v126;
      if (v127 == v126) {
        goto LABEL_205;
      }
      do
      {
        uint64_t v39 = (void *)*--v36;
        uint64_t v38 = v39;
        *uint64_t v36 = 0;
        if (v39) {
          operator delete[](v38);
        }
      }
      while (v36 != v35);
      goto LABEL_204;
    }
    if (v5 != v17)
    {
      __int16 v105 = 259;
      mlir::OpState::emitOpError(this, v104, (uint64_t)&__p);
      int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (!v130) {
        goto LABEL_208;
      }
      uint64_t v46 = (void **)v128;
      if (v128)
      {
        uint64_t v47 = v129;
        unsigned int v48 = v128;
        if (v129 != v128)
        {
          do
            uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          unsigned int v48 = v128;
        }
        uint64_t v129 = v46;
        operator delete(v48);
      }
      unsigned int v35 = v126;
      if (!v126) {
        goto LABEL_206;
      }
      unint64_t v49 = v127;
      uint64_t v37 = v126;
      if (v127 == v126) {
        goto LABEL_205;
      }
      do
      {
        uint64_t v51 = (void *)*--v49;
        int64_t v50 = v51;
        void *v49 = 0;
        if (v51) {
          operator delete[](v50);
        }
      }
      while (v49 != v35);
      goto LABEL_204;
    }
    if (v112 == 0x8000000000000000) {
      goto LABEL_34;
    }
    uint64_t v114 = v116;
    uint64_t v115 = 0x600000000;
    if (v18)
    {
      std::optional<llvm::SmallVector<long long,6u>>::operator=[abi:nn180100]<llvm::SmallVector<long long,6u>&,void>((uint64_t)&v117, (uint64_t)&v114);
      uint64_t v19 = v114;
      if (v114 == v116) {
        goto LABEL_31;
      }
    }
    else
    {
      if (!BYTE4(v109))
      {
        uint64_t v92 = std::__throw_bad_optional_access[abi:nn180100]();
LABEL_222:
        char v94 = (char *)((char *)&v114 - v61);
        llvm::SmallVectorBase<unsigned int>::grow_pod(v92, v125, v93, 24);
        unint64_t v61 = v122;
        uint64_t v60 = (void **)&v94[(void)v122];
LABEL_220:
        uint64_t v15 = v97;
LABEL_141:
        uint64_t v62 = &v61[24 * v123];
        long long v63 = *(_OWORD *)v60;
        *((void *)v62 + 2) = v60[2];
        *(_OWORD *)uint64_t v62 = v63;
        ++v123;
LABEL_142:
        int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        }
        if (!v130) {
          goto LABEL_208;
        }
        unint64_t v64 = (void **)v128;
        if (v128)
        {
          unint64_t v65 = v129;
          uint64_t v66 = v128;
          if (v129 != v128)
          {
            do
              unint64_t v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
            while (v65 != v64);
            uint64_t v66 = v128;
          }
          uint64_t v129 = v64;
          operator delete(v66);
        }
        unsigned int v35 = v126;
        if (!v126) {
          goto LABEL_206;
        }
        uint64_t v67 = v127;
        uint64_t v37 = v126;
        if (v127 == v126)
        {
LABEL_205:
          uint64_t v127 = v35;
          operator delete(v37);
LABEL_206:
          if (v122 != v125) {
            free(v122);
          }
          goto LABEL_208;
        }
        do
        {
          unint64_t v69 = (void *)*--v67;
          unint64_t v68 = v69;
          void *v67 = 0;
          if (v69) {
            operator delete[](v68);
          }
        }
        while (v67 != v35);
LABEL_204:
        uint64_t v37 = v126;
        goto LABEL_205;
      }
      llvm::formatv<long long &,unsigned int &>("infer split sizes from total size={0} and num_splits={1} failed.", (const char *)&v112, (const char *)&v109, (const char **)v104);
      __int16 v108 = 263;
      uint64_t v106 = v104;
      mlir::OpState::emitOpError(this, (const void ***)&v106, (uint64_t)&__p);
      int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
      uint64_t v19 = v114;
      if (v114 == v116) {
        goto LABEL_31;
      }
    }
    free(v19);
LABEL_31:
    if (!v18)
    {
LABEL_208:
      if (!v119) {
        goto LABEL_212;
      }
LABEL_209:
      uint64_t v76 = (uint64_t *)v117;
      int64x2_t v77 = &v118;
      goto LABEL_210;
    }
    goto LABEL_34;
  }
  uint64_t v109 = 0;
LABEL_34:
  char v98 = this;
  if (!v5)
  {
    unint64_t v20 = 0;
LABEL_94:
    int64_t v17 = 1;
    if (v112 == 0x8000000000000000 || v20 == v112) {
      goto LABEL_208;
    }
    v104[0] = (const void **)"sum of result dimension lengths along split axis must equal input dimension length along split axis";
    __int16 v105 = 259;
    mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
    int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    if (!v130) {
      goto LABEL_208;
    }
    uint64_t v40 = (void **)v128;
    if (v128)
    {
      uint64_t v41 = v129;
      int v42 = v128;
      if (v129 != v128)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        int v42 = v128;
      }
      uint64_t v129 = v40;
      operator delete(v42);
    }
    unsigned int v35 = v126;
    if (!v126) {
      goto LABEL_206;
    }
    unint64_t v43 = v127;
    uint64_t v37 = v126;
    if (v127 == v126) {
      goto LABEL_205;
    }
    do
    {
      char v45 = (void *)*--v43;
      unint64_t v44 = v45;
      *unint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v35);
    goto LABEL_204;
  }
  uint64_t v97 = v133;
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  int v96 = 0;
  uint64_t v22 = v110;
  uint64_t v100 = v12 - (v110 + 1);
  uint64_t v101 = v110 + 1;
  unint64_t v99 = &ArgAttrsAttr[v110 + 1];
  int64_t v95 = 0;
  do
  {
    while (1)
    {
      uint64_t v23 = (const void **)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v21) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v23) {
        break;
      }
      uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v23 + 8);
      uint64_t v106 = (const void ***)v23;
      uint64_t v107 = v24;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v106)) {
        goto LABEL_41;
      }
LABEL_36:
      unint64_t v20 = 0x8000000000000000;
      if (v5 == ++v21) {
        goto LABEL_90;
      }
    }
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v106)) {
      goto LABEL_36;
    }
LABEL_41:
    if (v8 != 0x8000000000000000)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v106);
      if (v25 != v8)
      {
        v104[0] = (const void **)"invalid rank for result, expected rank ";
        __int16 v105 = 259;
        mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
        uint64_t v15 = v133;
        if (!__p) {
          goto LABEL_142;
        }
        LODWORD(v114) = 2;
        uint64_t v115 = v8;
        uint64_t v60 = &v114;
        unint64_t v61 = v122;
        if (v123 < v124) {
          goto LABEL_141;
        }
        uint64_t v92 = (uint64_t)&v122;
        unint64_t v93 = v123 + 1;
        if (v122 > &v114 || (char *)v122 + 24 * v123 <= (char *)&v114)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, v125, v93, 24);
          uint64_t v60 = &v114;
          unint64_t v61 = v122;
          goto LABEL_220;
        }
        goto LABEL_222;
      }
    }
    uint64_t v26 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v106);
    if (!ArgOperands) {
      goto LABEL_53;
    }
    uint64_t v28 = (void *)v26;
    uint64_t v29 = v27;
    int64_t v30 = *(void *)(v26 + 8 * v22);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v113)
      && (!mlir::verifyCompatibleShape(v28, v22, ArgAttrsAttr, v22)
       || !mlir::verifyCompatibleShape(&v28[v101], v29 - v101, v99, v100)))
    {
      v104[0] = (const void **)"result shape must match input shape along non-axis dimensions";
      __int16 v105 = 259;
      mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
      int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      uint64_t v15 = v133;
      if (!v130) {
        goto LABEL_208;
      }
      unint64_t v70 = (void **)v128;
      if (v128)
      {
        char v71 = v129;
        uint64_t v72 = v128;
        if (v129 != v128)
        {
          do
            char v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
          while (v71 != v70);
          uint64_t v72 = v128;
        }
        uint64_t v129 = v70;
        operator delete(v72);
      }
      unsigned int v35 = v126;
      if (!v126) {
        goto LABEL_206;
      }
      unint64_t v73 = v127;
      uint64_t v37 = v126;
      if (v127 == v126) {
        goto LABEL_205;
      }
      do
      {
        unint64_t v75 = (void *)*--v73;
        int64x2_t v74 = v75;
        *unint64_t v73 = 0;
        if (v75) {
          operator delete[](v74);
        }
      }
      while (v73 != v35);
      goto LABEL_204;
    }
    if (v102)
    {
      if (v30 == 0x8000000000000000) {
        goto LABEL_53;
      }
      if (v30 != v131[v21])
      {
        __int16 v105 = 259;
        mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
        int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        }
        uint64_t v15 = v133;
        if (!v130) {
          goto LABEL_208;
        }
        uint64_t v78 = (void **)v128;
        if (v128)
        {
          uint64_t v79 = v129;
          unint64_t v80 = v128;
          if (v129 != v128)
          {
            do
              uint64_t v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
            while (v79 != v78);
            unint64_t v80 = v128;
          }
          uint64_t v129 = v78;
          operator delete(v80);
        }
        unsigned int v35 = v126;
        if (!v126) {
          goto LABEL_206;
        }
        uint64_t v81 = v127;
        uint64_t v37 = v126;
        if (v127 == v126) {
          goto LABEL_205;
        }
        do
        {
          unint64_t v83 = (void *)*--v81;
          uint64_t v82 = v83;
          *uint64_t v81 = 0;
          if (v83) {
            operator delete[](v82);
          }
        }
        while (v81 != v35);
        goto LABEL_204;
      }
    }
    else
    {
      if (!BYTE4(v109)) {
        goto LABEL_54;
      }
      if (v30 == 0x8000000000000000)
      {
LABEL_53:
        int64_t v30 = 0x8000000000000000;
        goto LABEL_54;
      }
      if (!v119)
      {
        if (v21 < v5 - 1)
        {
          if (v96)
          {
            if (v30 != v95)
            {
              uint64_t v91 = "Dim length along axis in the results (except the last one) must be same";
              goto LABEL_215;
            }
          }
          else
          {
            int v96 = 1;
          }
          int64_t v95 = v30;
          goto LABEL_54;
        }
        if (!v96)
        {
          int v96 = 0;
          goto LABEL_54;
        }
        if (v30 <= v95) {
          goto LABEL_54;
        }
        uint64_t v91 = "Dim length along axis in the last result tensor must be <= that in the first (N - 1) tensors. N: number of results";
LABEL_215:
        v104[0] = (const void **)v91;
        __int16 v105 = 259;
        mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
        int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
        uint64_t v15 = v133;
        if (v119) {
          goto LABEL_209;
        }
        goto LABEL_212;
      }
      if (v30 != *((void *)v117 + v21))
      {
        v104[0] = (const void **)"inferred dimension size along axis must be compatible with result shape at axis";
        __int16 v105 = 259;
        mlir::OpState::emitOpError(v98, v104, (uint64_t)&__p);
        int64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        }
        uint64_t v15 = v133;
        if (!v130) {
          goto LABEL_208;
        }
        int64x2_t v84 = (void **)v128;
        if (v128)
        {
          char v85 = v129;
          unint64_t v86 = v128;
          if (v129 != v128)
          {
            do
              char v85 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v85 - 1);
            while (v85 != v84);
            unint64_t v86 = v128;
          }
          uint64_t v129 = v84;
          operator delete(v86);
        }
        unsigned int v35 = v126;
        if (!v126) {
          goto LABEL_206;
        }
        uint64_t v87 = v127;
        uint64_t v37 = v126;
        if (v127 == v126) {
          goto LABEL_205;
        }
        do
        {
          uint64_t v89 = (void *)*--v87;
          uint64_t v88 = v89;
          *uint64_t v87 = 0;
          if (v89) {
            operator delete[](v88);
          }
        }
        while (v87 != v35);
        goto LABEL_204;
      }
    }
LABEL_54:
    if (v30 == 0x8000000000000000 || v20 == 0x8000000000000000) {
      unint64_t v20 = 0x8000000000000000;
    }
    else {
      v20 += v30;
    }
    ++v21;
  }
  while (v5 != v21);
LABEL_90:
  uint64_t v15 = v133;
  if (v20 != 0x8000000000000000) {
    goto LABEL_94;
  }
  int64_t v17 = 1;
  if (v119) {
    goto LABEL_209;
  }
LABEL_212:
  if (v131 != v15) {
    free(v131);
  }
  return v17;
}

uint64_t mlir::mps::SplitOp::getSplitSizes(mlir::mps::SplitOp *this)
{
  if (*(_DWORD *)(*(void *)this + 68) == 2) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(*(void *)this + 72) + 88);
  }
}

uint64_t mlir::mps::anonymous namespace'::inferSplitSizes(uint64_t a1, int64_t a2, uint64_t a3)
{
  v23[6] = *MEMORY[0x1E4F143B8];
  int64_t v6 = (a1 + a2 - 1) / a2;
  uint64_t v7 = a1 / v6;
  unint64_t v8 = a1 / v6;
  __src = v23;
  unsigned int v22 = 6;
  if ((unint64_t)(a1 / v6) < 7)
  {
    uint64_t v9 = v23;
    if (v8)
    {
      v23[0] = (a1 + a2 - 1) / a2;
      uint64_t v9 = v23;
      if (v7 != 1)
      {
        v23[1] = (a1 + a2 - 1) / a2;
        uint64_t v9 = v23;
        if (v7 != 2)
        {
          void v23[2] = (a1 + a2 - 1) / a2;
          uint64_t v9 = v23;
          if (v7 != 3)
          {
            void v23[3] = (a1 + a2 - 1) / a2;
            uint64_t v9 = v23;
            if (v7 != 4)
            {
              v23[4] = (a1 + a2 - 1) / a2;
              uint64_t v9 = v23;
              if (v7 != 5)
              {
                v23[5] = (a1 + a2 - 1) / a2;
                uint64_t v9 = v23;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    unsigned int v21 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v23, v8, 8);
    uint64_t v9 = __src;
    unint64_t v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v11 = v7 & 3;
    int64x2_t v12 = vdupq_n_s64(v6);
    uint64_t v13 = (int64x2_t *)((char *)__src + 16);
    unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13[-1] = v12;
      *uint64_t v13 = v12;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFFCLL))
    {
      do
      {
        v9[v10++] = v6;
        --v11;
      }
      while (v11);
    }
  }
  unsigned int v21 = v8;
  uint64_t v15 = a1 - v7 * v6;
  if (v15)
  {
    if (v22 <= v8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v23, v7 + 1, 8);
      LODWORD(v8) = v21;
      uint64_t v9 = __src;
    }
    v9[v8] = v15;
    LODWORD(v8) = ++v21;
  }
  if (v8 == a2)
  {
    if (&__src == (void **)a3) {
      goto LABEL_34;
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 >= v8)
    {
      if (v8) {
        memmove(*(void **)a3, __src, 8 * a2);
      }
      goto LABEL_33;
    }
    if (*(_DWORD *)(a3 + 12) >= v8)
    {
      if (v16)
      {
        memmove(*(void **)a3, __src, 8 * v16);
        goto LABEL_31;
      }
    }
    else
    {
      *(_DWORD *)(a3 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), a2, 8);
    }
    uint64_t v16 = 0;
LABEL_31:
    if (v16 != v21) {
      memcpy((void *)(*(void *)a3 + 8 * v16), (char *)__src + 8 * v16, 8 * v21 - 8 * v16);
    }
LABEL_33:
    *(_DWORD *)(a3 + 8) = v8;
LABEL_34:
    uint64_t v17 = 1;
    char v18 = __src;
    if (__src == v23) {
      return v17;
    }
    goto LABEL_24;
  }
  uint64_t v17 = 0;
  char v18 = __src;
  if (__src != v23) {
LABEL_24:
  }
    free(v18);
  return v17;
}

const char *llvm::formatv<long long &,unsigned int &>@<X0>(const char *__s@<X0>, const char *a2@<X1>, const char *a3@<X2>, const char **a4@<X8>)
{
  int64_t v6 = __s;
  if (__s) {
    __s = (const char *)strlen(__s);
  }
  *a4 = v6;
  a4[1] = __s;
  a4[8] = (const char *)(a4 + 4);
  a4[2] = (const char *)(a4 + 8);
  a4[3] = (const char *)2;
  a4[4] = (const char *)&unk_1EC9A4648;
  a4[5] = a2;
  a4[6] = (const char *)&unk_1EC9A4618;
  a4[7] = a3;
  a4[9] = (const char *)(a4 + 6);
  return __s;
}

uint64_t std::optional<llvm::SmallVector<long long,6u>>::operator=[abi:nn180100]<llvm::SmallVector<long long,6u>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (a1 != a2)
    {
      unint64_t v4 = *(unsigned int *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a1 + 8);
      if (v5 < v4)
      {
        if (*(_DWORD *)(a1 + 12) < v4)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 8);
          uint64_t v5 = 0;
          uint64_t v6 = *(unsigned int *)(a2 + 8);
          if (!*(_DWORD *)(a2 + 8)) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        if (!v5)
        {
          uint64_t v5 = 0;
          uint64_t v6 = *(unsigned int *)(a2 + 8);
          if (!*(_DWORD *)(a2 + 8)) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        uint64_t v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6) {
LABEL_17:
        }
          memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
LABEL_18:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
      if (!v4) {
        goto LABEL_18;
      }
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      *(_DWORD *)(a1 + 8) = v4;
    }
    return a1;
  }
  uint64_t v7 = (void *)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  if (a1 != a2)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 8);
    if (v8)
    {
      if (v8 < 7)
      {
        unsigned int v9 = *(_DWORD *)(a2 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), *(unsigned int *)(a2 + 8), 8);
        unsigned int v9 = *(_DWORD *)(a2 + 8);
        if (!v9)
        {
LABEL_21:
          *(_DWORD *)(a1 + 8) = v8;
          goto LABEL_22;
        }
        uint64_t v7 = *(void **)a1;
      }
      memcpy(v7, *(const void **)a2, 8 * v9);
      goto LABEL_21;
    }
  }
LABEL_22:
  *(unsigned char *)(a1 + 64) = 1;
  return a1;
}

uint64_t mlir::mps::SingleGateRNNOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    long long v16 = *a7;
    long long v39 = a7[1];
  }
  else
  {
    long long v16 = 0uLL;
    long long v39 = 0u;
  }
  uint64_t v30 = a6;
  v31[0] = 0;
  char v32 = 0;
  long long v33 = v16;
  long long v34 = v39;
  uint64_t v35 = a9;
  uint64_t v36 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v30);
    if (v32) {
      char v32 = 0;
    }
    mlir::OperationName::OperationName(v31, "mps.singlegate_rnn", 18, Context);
    char v32 = 1;
  }
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v18 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mps::SingleGateRNNOpAdaptor::verify((uint64_t)&v30, v18))
  {
    uint64_t v22 = mlir::Float32Type::get(this, v19);
    uint64_t v23 = mlir::UnrankedTensorType::get(v22);
    uint64_t v24 = *(unsigned int *)(a11 + 8);
    uint64_t v25 = (_DWORD *)(a11 + 8);
    if (v24 < *(_DWORD *)(a11 + 12))
    {
LABEL_14:
      uint64_t v26 = *(uint64_t **)a11;
LABEL_22:
      v26[v24] = v23;
      ++*v25;
      return 1;
    }
LABEL_18:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a11 + 8);
    goto LABEL_14;
  }
  *(void *)&long long v39 = a4;
  *((void *)&v39 + 1) = a5;
  if (a5)
  {
    unint64_t v20 = *(void *)(mlir::ValueRange::dereference_iterator(&v39, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = *(unsigned int *)(a11 + 8);
    if (v21 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v21) = v20;
    ++*(_DWORD *)(a11 + 8);
  }
  else if (!mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid number of operands"))
  {
    uint64_t v28 = mlir::Float32Type::get(this, v27);
    uint64_t v23 = mlir::UnrankedTensorType::get(v28);
    uint64_t v24 = *(unsigned int *)(a11 + 8);
    uint64_t v25 = (_DWORD *)(a11 + 8);
    if (v24 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a11 + 8);
    }
    uint64_t v26 = *(uint64_t **)a11;
    goto LABEL_22;
  }
  if (*((void *)&v33 + 1))
  {
    uint64_t v26 = *(uint64_t **)a11;
    uint64_t v23 = **(void **)a11;
    uint64_t v25 = (_DWORD *)(a11 + 8);
    uint64_t v24 = *(unsigned int *)(a11 + 8);
    if (v24 < *(_DWORD *)(a11 + 12)) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
  return 1;
}

uint64_t mlir::mps::SingleGateRNNOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24)) {
    return 1;
  }
  int64x2_t v12 = "'mps.singlegate_rnn' op requires attribute 'activation'";
  __int16 v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  }
  if (v21)
  {
    unint64_t v4 = (void **)__p;
    if (__p)
    {
      uint64_t v5 = v20;
      uint64_t v6 = __p;
      if (v20 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      unint64_t v20 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v17;
    if (v17)
    {
      unsigned int v8 = v18;
      unsigned int v9 = v17;
      if (v18 != v17)
      {
        do
        {
          uint64_t v11 = (void *)*--v8;
          unint64_t v10 = v11;
          *unsigned int v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
        unsigned int v9 = v17;
      }
      uint64_t v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16) {
      free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::verify(uint64_t **this)
{
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    uint64_t v3 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  if (*((unsigned char *)*this + 47)) {
    uint64_t v4 = (uint64_t)(*this + 10);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (void *)(*(void *)(*(void *)((*this)[9] + 32 * *(unsigned int *)(v4 + 16) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8))
  {
    uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  if (*((unsigned char *)*this + 47)) {
    uint64_t v7 = (uint64_t)(*this + 10);
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = (void *)(*(void *)(*(void *)((*this)[9]
                                        + 32 * (*(_DWORD *)(v7 + 20) + *(_DWORD *)(v7 + 16))
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8))
  {
    uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = *this;
  unint64_t v12 = *((unsigned int *)*this + 11);
  uint64_t v13 = (v12 >> 23) & 1;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v14 = &(*this)[2 * v13 + 8];
  }
  else {
    unint64_t v14 = 0;
  }
  int v15 = *((_DWORD *)v14 + 7);
  int v16 = v12 & 0x800000;
  if ((v12 & 0x800000) != 0)
  {
    uint64_t v17 = v11[9];
    if (!v15)
    {
LABEL_27:
      uint64_t v20 = 0;
      uint64_t v19 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v17 = 0;
    if (!v15) {
      goto LABEL_27;
    }
  }
  uint64_t v18 = (*((_DWORD *)v14 + 5) + *((_DWORD *)v14 + 4) + *((_DWORD *)v14 + 6));
  if (!*(void *)(v17 + 32 * v18 + 24)) {
    goto LABEL_27;
  }
  uint64_t v19 = (void *)(*(void *)(*(void *)(v11[9] + 32 * v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
  {
    uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  uint64_t v11 = *this;
  unint64_t v12 = *((unsigned int *)*this + 11);
  uint64_t v13 = (v12 >> 23) & 1;
  int v16 = v12 & 0x800000;
LABEL_28:
  char v21 = &v11[2 * v13 + 8];
  if (!BYTE3(v12)) {
    char v21 = 0;
  }
  int v22 = *((_DWORD *)v21 + 8);
  if (v16)
  {
    uint64_t v23 = v11[9];
    if (!v22)
    {
LABEL_38:
      uint64_t v26 = 0;
      uint64_t v25 = 0;
    }
  }
  else
  {
    uint64_t v23 = 0;
    if (!v22) {
      goto LABEL_38;
    }
  }
  uint64_t v24 = (*((_DWORD *)v21 + 5) + *((_DWORD *)v21 + 4) + *((_DWORD *)v21 + 6) + *((_DWORD *)v21 + 7));
  if (!*(void *)(v23 + 32 * v24 + 24)) {
    goto LABEL_38;
  }
  uint64_t v25 = (void *)(*(void *)(*(void *)(v11[9] + 32 * v24 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8))
  {
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  uint64_t v11 = *this;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getRecurrentWeight(mlir::mps::SingleGateRNNGradientOp *this)
{
  if (*(unsigned char *)(*(void *)this + 47)) {
    uint64_t v1 = *(void *)this + 80;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(*(void *)(*(void *)this + 72) + 32 * *(unsigned int *)(v1 + 16) + 24);
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getTrainingState(mlir::mps::SingleGateRNNGradientOp *this)
{
  if (*(unsigned char *)(*(void *)this + 47)) {
    uint64_t v1 = *(void *)this + 80;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(*(void *)(*(void *)this + 72)
                   + 32 * (*(_DWORD *)(v1 + 20) + *(_DWORD *)(v1 + 16))
                   + 24);
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getInputState(mlir::mps::SingleGateRNNGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[7];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[6] + v2[5] + v2[4]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[6] + v2[5] + v2[4]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::getMask(mlir::mps::SingleGateRNNGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[8];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[7] + v2[6] + v2[5] + v2[4]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[7] + v2[6] + v2[5] + v2[4]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::anonymous namespace'::verifySingleGateRNN(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  v128[0] = a2;
  v128[1] = a3;
  v127[0] = a4;
  v127[1] = a5;
  v126[0] = a6;
  v126[1] = a7;
  v125[0] = a11;
  v125[1] = a12;
  if (!a2) {
    return 1;
  }
  BOOL v12 = *(_UNKNOWN **)(*a2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id || a4 == 0;
  if (v12 || *(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    return 1;
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v128);
  int v16 = v15;
  uint64_t v17 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v127);
  if (v16 != (const char *)3)
  {
    v123[0] = (const void **)"Invalid input tensor rank: ";
    __int16 v124 = 259;
    mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
    if (v132[0])
    {
      LODWORD(v129) = 5;
      char v130 = v16;
      uint64_t v23 = &v129;
      uint64_t v24 = (char *)v133;
      if (v134 >= v135)
      {
        unint64_t v101 = v134 + 1;
        if (v133 <= &v129 && (char *)v133 + 24 * v134 > (char *)&v129)
        {
          int64_t v113 = (char *)&v129 - (unsigned char *)v133;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v101, 24);
          uint64_t v24 = (char *)v133;
          uint64_t v23 = (unint64_t *)((char *)v133 + v113);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v101, 24);
          uint64_t v23 = &v129;
          uint64_t v24 = (char *)v133;
        }
      }
      uint64_t v25 = &v24[24 * v134];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = v23[2];
      *(_OWORD *)uint64_t v25 = v26;
      uint64_t v27 = ++v134;
      if (v132[0])
      {
        LODWORD(v129) = 3;
        char v130 = ", should be 3.";
        uint64_t v131 = 14;
        uint64_t v28 = &v129;
        uint64_t v29 = (char *)v133;
        if (v27 >= v135)
        {
          unint64_t v102 = v27 + 1;
          BOOL v103 = (char *)v133 + 24 * v27 > (char *)&v129;
          if (v133 <= &v129 && v103)
          {
            int64_t v114 = (char *)&v129 - (unsigned char *)v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v102, 24);
            uint64_t v29 = (char *)v133;
            uint64_t v28 = (unint64_t *)((char *)v133 + v114);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v102, 24);
            uint64_t v28 = &v129;
            uint64_t v29 = (char *)v133;
          }
        }
        uint64_t v30 = &v29[24 * v134];
        long long v31 = *(_OWORD *)v28;
        *((void *)v30 + 2) = v28[2];
        *(_OWORD *)uint64_t v30 = v31;
        ++v134;
      }
    }
    uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v132);
    if (v132[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v132);
    }
    if (!v141) {
      return v22;
    }
    char v32 = (void **)__p;
    if (__p)
    {
      long long v33 = v140;
      long long v34 = __p;
      if (v140 != __p)
      {
        do
          long long v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        long long v34 = __p;
      }
      char v140 = v32;
      operator delete(v34);
    }
    uint64_t v35 = v137;
    if (v137)
    {
      uint64_t v36 = v138;
      uint64_t v37 = v137;
      if (v138 != v137)
      {
        do
        {
          long long v39 = (void *)*--v36;
          uint64_t v38 = v39;
          *uint64_t v36 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v36 != v35);
        uint64_t v37 = v137;
      }
      char v138 = v35;
      operator delete(v37);
    }
    unint64_t v80 = v133;
    if (v133 == v136) {
      return v22;
    }
LABEL_80:
    free(v80);
    return v22;
  }
  unint64_t v122 = v18;
  if (v18 < 2)
  {
    __int16 v124 = 259;
    mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
    uint64_t v19 = (uint64_t *)&v122;
LABEL_10:
    uint64_t v20 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)v132, v19);
    char v21 = (void *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v20, ", should be 2 or greater.");
    goto LABEL_11;
  }
  unint64_t v40 = 0;
  uint64_t v41 = (const char *)ArgAttrsAttr[2];
  do
  {
    if (v40 < v18 - 2) {
      uint64_t v42 = 1;
    }
    else {
      uint64_t v42 = ArgAttrsAttr[2];
    }
    uint64_t v43 = *(void *)(v17 + 8 * v40);
    if (v42 != 0x8000000000000000 && v43 != 0x8000000000000000 && v43 != v42)
    {
      __int16 v124 = 259;
      mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
      if (v132[0])
      {
        LODWORD(v129) = 3;
        char v130 = "square matrix of size [";
        uint64_t v131 = 23;
        unsigned int v48 = &v129;
        unint64_t v49 = (char *)v133;
        if (v134 >= v135)
        {
          unint64_t v104 = v134 + 1;
          if (v133 <= &v129 && (char *)v133 + 24 * v134 > (char *)&v129)
          {
            int64_t v115 = (char *)&v129 - (unsigned char *)v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v104, 24);
            unint64_t v49 = (char *)v133;
            unsigned int v48 = (unint64_t *)((char *)v133 + v115);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v104, 24);
            unsigned int v48 = &v129;
            unint64_t v49 = (char *)v133;
          }
        }
        int64_t v50 = &v49[24 * v134];
        long long v51 = *(_OWORD *)v48;
        *((void *)v50 + 2) = v48[2];
        *(_OWORD *)int64_t v50 = v51;
        uint64_t v52 = ++v134;
        if (v132[0])
        {
          LODWORD(v129) = 2;
          char v130 = v41;
          uint64_t v53 = &v129;
          size_t v54 = (char *)v133;
          if (v52 >= v135)
          {
            unint64_t v105 = v52 + 1;
            BOOL v106 = (char *)v133 + 24 * v52 > (char *)&v129;
            if (v133 <= &v129 && v106)
            {
              int64_t v116 = (char *)&v129 - (unsigned char *)v133;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v105, 24);
              size_t v54 = (char *)v133;
              uint64_t v53 = (unint64_t *)((char *)v133 + v116);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v105, 24);
              uint64_t v53 = &v129;
              size_t v54 = (char *)v133;
            }
          }
          uint64_t v55 = &v54[24 * v134];
          long long v56 = *(_OWORD *)v53;
          *((void *)v55 + 2) = v53[2];
          *(_OWORD *)uint64_t v55 = v56;
          uint64_t v57 = ++v134;
          if (v132[0])
          {
            LODWORD(v129) = 3;
            char v130 = ", ";
            uint64_t v131 = 2;
            uint64_t v58 = &v129;
            uint64_t v59 = (char *)v133;
            if (v57 >= v135)
            {
              unint64_t v107 = v57 + 1;
              BOOL v108 = (char *)v133 + 24 * v57 > (char *)&v129;
              if (v133 <= &v129 && v108)
              {
                int64_t v117 = (char *)&v129 - (unsigned char *)v133;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v107, 24);
                uint64_t v59 = (char *)v133;
                uint64_t v58 = (unint64_t *)((char *)v133 + v117);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v107, 24);
                uint64_t v58 = &v129;
                uint64_t v59 = (char *)v133;
              }
            }
            uint64_t v60 = &v59[24 * v134];
            long long v61 = *(_OWORD *)v58;
            *((void *)v60 + 2) = v58[2];
            *(_OWORD *)uint64_t v60 = v61;
            uint64_t v62 = ++v134;
            if (v132[0])
            {
              LODWORD(v129) = 2;
              char v130 = v41;
              long long v63 = &v129;
              unint64_t v64 = (char *)v133;
              if (v62 >= v135)
              {
                unint64_t v109 = v62 + 1;
                BOOL v110 = (char *)v133 + 24 * v62 > (char *)&v129;
                if (v133 <= &v129 && v110)
                {
                  int64_t v118 = (char *)&v129 - (unsigned char *)v133;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v109, 24);
                  unint64_t v64 = (char *)v133;
                  long long v63 = (unint64_t *)((char *)v133 + v118);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v109, 24);
                  long long v63 = &v129;
                  unint64_t v64 = (char *)v133;
                }
              }
              unint64_t v65 = &v64[24 * v134];
              long long v66 = *(_OWORD *)v63;
              *((void *)v65 + 2) = v63[2];
              *(_OWORD *)unint64_t v65 = v66;
              uint64_t v67 = ++v134;
              if (v132[0])
              {
                LODWORD(v129) = 3;
                char v130 = "].";
                uint64_t v131 = 2;
                unint64_t v68 = &v129;
                unint64_t v69 = (char *)v133;
                if (v67 >= v135)
                {
                  unint64_t v111 = v67 + 1;
                  BOOL v112 = (char *)v133 + 24 * v67 > (char *)&v129;
                  if (v133 <= &v129 && v112)
                  {
                    int64_t v119 = (char *)&v129 - (unsigned char *)v133;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v111, 24);
                    unint64_t v69 = (char *)v133;
                    unint64_t v68 = (unint64_t *)((char *)v133 + v119);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v111, 24);
                    unint64_t v68 = &v129;
                    unint64_t v69 = (char *)v133;
                  }
                }
                unint64_t v70 = &v69[24 * v134];
                long long v71 = *(_OWORD *)v68;
                *((void *)v70 + 2) = v68[2];
                *(_OWORD *)unint64_t v70 = v71;
                ++v134;
              }
            }
          }
        }
      }
      uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v132);
      if (v132[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v132);
      }
      if (!v141) {
        return v22;
      }
      uint64_t v72 = (void **)__p;
      if (__p)
      {
        unint64_t v73 = v140;
        int64x2_t v74 = __p;
        if (v140 != __p)
        {
          do
            unint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
          while (v73 != v72);
          int64x2_t v74 = __p;
        }
        char v140 = v72;
        operator delete(v74);
      }
      unint64_t v75 = v137;
      if (v137)
      {
        uint64_t v76 = v138;
        int64x2_t v77 = v137;
        if (v138 != v137)
        {
          do
          {
            uint64_t v79 = (void *)*--v76;
            uint64_t v78 = v79;
            void *v76 = 0;
            if (v79) {
              operator delete[](v78);
            }
          }
          while (v76 != v75);
          int64x2_t v77 = v137;
        }
        char v138 = v75;
        operator delete(v77);
      }
      unint64_t v80 = v133;
      if (v133 == v136) {
        return v22;
      }
      goto LABEL_80;
    }
    ++v40;
  }
  while (v18 != v40);
  if (!v126[0]
    || *(_UNKNOWN **)(*(void *)v126[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_92:
    if (a9)
    {
      if (*(_UNKNOWN **)(*a9 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        uint64_t v91 = v128[0];
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v128[0]);
        if (!mlir::OpTrait::util::getBroadcastedType(v91, a9, ElementTypeOrSelf))
        {
          goto LABEL_111;
        }
      }
    }
    if (v125[0]
      && *(_UNKNOWN **)(*(void *)v125[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      unint64_t v93 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v125);
      if (v94 == 3 && (*v93 == 0x8000000000000000 || *ArgAttrsAttr == 0x8000000000000000 || *ArgAttrsAttr == *v93))
      {
        uint64_t v95 = v93[1];
        if (v95 == 0x8000000000000000 || (uint64_t v96 = ArgAttrsAttr[1], v96 == 0x8000000000000000) || v96 == v95)
        {
          uint64_t v97 = v93[2];
          uint64_t v22 = 1;
          if (v97 == 0x8000000000000000) {
            return v22;
          }
          uint64_t v98 = ArgAttrsAttr[2];
          if (v98 == 0x8000000000000000 || v98 == v97) {
            return v22;
          }
        }
      }
LABEL_111:
      v123[0] = (const void **)v99;
      __int16 v124 = 259;
      mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
      char v21 = v132;
      goto LABEL_11;
    }
    return 1;
  }
  uint64_t v46 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v126);
  unint64_t v129 = v47;
  if (v47 <= 1)
  {
    __int16 v124 = 259;
    mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
    uint64_t v19 = (uint64_t *)&v129;
    goto LABEL_10;
  }
  uint64_t v81 = v46;
  unint64_t v82 = 0;
  while (1)
  {
    uint64_t v83 = v82 >= v47 - 2 ? ArgAttrsAttr[v82 + 3 - v47] : 1;
    uint64_t v120 = v83;
    if (v83 != 0x8000000000000000)
    {
      uint64_t v84 = *(void *)(v46 + 8 * v82);
      if (v84 != 0x8000000000000000 && v84 != v83) {
        break;
      }
    }
    if (v47 == ++v82) {
      goto LABEL_92;
    }
  }
  unint64_t v121 = v82;
  __int16 v124 = 259;
  mlir::Operation::emitOpError(a1, v123, (uint64_t)v132);
  uint64_t v86 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)v132, (uint64_t *)&v121);
  uint64_t v87 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v86, "] = ");
  uint64_t v88 = mlir::InFlightDiagnostic::operator<<<long long &>(v87, (uint64_t *)(v81 + 8 * v121));
  uint64_t v89 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v88, ", expected ");
  uint64_t v90 = mlir::InFlightDiagnostic::operator<<<long long &>(v89, &v120);
  char v21 = (void *)mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v90, ".");
LABEL_11:
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v132);
  return v22;
}

uint64_t mlir::mps::SingleGateRNNOp::verify(mlir::mps::SingleGateRNNOp *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)this;
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = (void *)(*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v11)
  {
    BOOL v12 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    uint64_t v9 = *(void *)this;
    LODWORD(v13) = *(_DWORD *)(*(void *)this + 44);
    uint64_t v10 = *(void *)(*(void *)this + 72);
    int v14 = v13 & 0x800000;
  }
  else
  {
    BOOL v12 = 0;
    LODWORD(v13) = *(_DWORD *)(v9 + 44);
    int v14 = 0x800000;
  }
  uint64_t v15 = v9 + 80;
  if (!BYTE3(v13)) {
    uint64_t v15 = 0;
  }
  int v16 = (void *)(*(void *)(*(void *)(v10 + 32 * *(unsigned int *)(v15 + 16) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v16)
  {
    uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
    uint64_t v9 = *(void *)this;
    LODWORD(v13) = *(_DWORD *)(*(void *)this + 44);
    int v14 = v13 & 0x800000;
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v18 = (v13 >> 23) & 1;
  uint64_t v19 = (_DWORD *)(v9 + 16 * v18 + 64);
  if (!BYTE3(v13)) {
    uint64_t v19 = 0;
  }
  int v20 = v19[6];
  if (v14)
  {
    uint64_t v21 = *(void *)(v9 + 72);
    if (!v20) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v21 = 0;
    if (!v20) {
      goto LABEL_18;
    }
  }
  uint64_t v22 = (v19[5] + v19[4]);
  if (*(void *)(v21 + 32 * v22 + 24))
  {
    uint64_t v23 = (void *)(*(void *)(*(void *)(*(void *)(v9 + 72) + 32 * v22 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v23)
    {
      uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8);
      uint64_t v9 = *(void *)this;
      unint64_t v13 = *(unsigned int *)(*(void *)this + 44);
      uint64_t v18 = (v13 >> 23) & 1;
      int v14 = v13 & 0x800000;
    }
    else
    {
      uint64_t v24 = 0;
      int v14 = 1;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v24 = 0;
  uint64_t v23 = 0;
LABEL_19:
  uint64_t v25 = v9 + 16 * v18 + 64;
  if (BYTE3(v13)) {
    long long v26 = (_DWORD *)v25;
  }
  else {
    long long v26 = 0;
  }
  int v27 = v26[7];
  if (v14)
  {
    uint64_t v28 = *(void *)(v9 + 72);
    if (!v27)
    {
LABEL_29:
      uint64_t v31 = 0;
      uint64_t v30 = 0;
    }
  }
  else
  {
    uint64_t v28 = 0;
    if (!v27) {
      goto LABEL_29;
    }
  }
  uint64_t v29 = (v26[5] + v26[4] + v26[6]);
  if (!*(void *)(v28 + 32 * v29 + 24)) {
    goto LABEL_29;
  }
  uint64_t v30 = (void *)(*(void *)(*(void *)(*(void *)(v9 + 72) + 32 * v29 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30)
  {
    uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
    uint64_t v9 = *(void *)this;
  }
  else
  {
    uint64_t v31 = 0;
  }
}

uint64_t mlir::mps::SingleGateRNNOp::getInputState(mlir::mps::SingleGateRNNOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[6];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[5] + v2[4]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[5] + v2[4]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::SingleGateRNNGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  v39[0] = a4;
  v39[1] = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v40 = a7[1];
    int v41 = *((_DWORD *)a7 + 8);
  }
  else
  {
    int v41 = 0;
    long long v16 = 0uLL;
    long long v40 = 0u;
  }
  uint64_t v29 = a6;
  v30[0] = 0;
  char v31 = 0;
  long long v32 = v16;
  long long v33 = v40;
  int v34 = v41;
  uint64_t v35 = a9;
  uint64_t v36 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31) {
      char v31 = 0;
    }
    mlir::OperationName::OperationName(v30, "mps.singlegate_rnn_gradient", 27, Context);
    char v31 = 1;
  }
  uint64_t v37 = a4;
  unint64_t v38 = a5;
  uint64_t v18 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mps::SingleGateRNNGradientOpAdaptor::verify((uint64_t)&v29, v18)) {
    goto LABEL_21;
  }
  *(void *)&long long v40 = a4;
  *((void *)&v40 + 1) = a5;
  if (!a5)
  {
    if (!mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid number of operands")) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  unint64_t v20 = *(void *)(mlir::ValueRange::dereference_iterator(&v40, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(unsigned int *)(a11 + 8);
  if (v21 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v21) = v20;
  ++*(_DWORD *)(a11 + 8);
  *(void *)&long long v40 = a4;
  *((void *)&v40 + 1) = a5;
  if (a5 < 2)
  {
LABEL_17:
    if (mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid number of operands")) {
      goto LABEL_18;
    }
LABEL_21:
    uint64_t v26 = mlir::Float32Type::get(this, v19);
    uint64_t v25 = mlir::UnrankedTensorType::get(v26);
    goto LABEL_22;
  }
  unint64_t v22 = *(void *)(mlir::ValueRange::dereference_iterator(&v40, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(unsigned int *)(a11 + 8);
  if (v23 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v23 + 1, 8);
    LODWORD(v23) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v23) = v22;
  ++*(_DWORD *)(a11 + 8);
LABEL_18:
  if (!*((void *)&v32 + 1)) {
    return 1;
  }
  *(void *)&long long v40 = 0;
  uint64_t v24 = mlir::ValueRange::dereference_iterator(v39, 0);
  uint64_t v25 = v40;
LABEL_22:
  uint64_t v27 = *(unsigned int *)(a11 + 8);
  if (v27 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v27) = v25;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::SingleGateRNNGradientOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24)) {
    return 1;
  }
  BOOL v12 = "'mps.singlegate_rnn_gradient' op requires attribute 'activation'";
  __int16 v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  }
  if (v21)
  {
    uint64_t v4 = (void **)__p;
    if (__p)
    {
      uint64_t v5 = v20;
      uint64_t v6 = __p;
      if (v20 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      unint64_t v20 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v17;
    if (v17)
    {
      unsigned int v8 = v18;
      uint64_t v9 = v17;
      if (v18 != v17)
      {
        do
        {
          uint64_t v11 = (void *)*--v8;
          uint64_t v10 = v11;
          *unsigned int v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
        uint64_t v9 = v17;
      }
      uint64_t v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16) {
      free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::anonymous namespace'::inferRNNHiddenStateType(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(*(void *)a3 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    uint64_t v6 = a3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v19 = v6;
  if (v6)
  {
    if (*(_UNKNOWN **)(*(void *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      *a4 = v6;
    }
    else
    {
      unint64_t v20 = v22;
      uint64_t v21 = 0x400000000;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
      unsigned int v9 = v21;
      uint64_t v11 = v10 - 1;
      if (v10 != 1)
      {
        uint64_t v16 = (uint64_t *)(Value + 8);
        do
        {
          uint64_t v18 = *v16++;
          uint64_t v17 = v18;
          if (v9 >= HIDWORD(v21))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v9 + 1, 8);
            unsigned int v9 = v21;
          }
          *((void *)v20 + v9) = v17;
          unsigned int v9 = v21 + 1;
          LODWORD(v21) = v21 + 1;
          --v11;
        }
        while (v11);
      }
      BOOL v12 = v20;
      uint64_t v13 = v9;
      uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v19);
      *a4 = mlir::RankedTensorType::get((uint64_t)v12, v13, ElementType, 0);
      if (v20 != v22) {
        free(v20);
      }
    }
    return 1;
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "RNN non-tensor input type");
  }
}

uint64_t mlir::mps::LSTMOp::verify(uint64_t **this)
{
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v37 = 0;
  }
  if (*((unsigned char *)*this + 47)) {
    uint64_t v3 = (uint64_t)(*this + 10);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)(*(void *)(*(void *)((*this)[9] + 32 * *(unsigned int *)(v3 + 56) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8))
  {
    uint64_t v36 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v36 = 0;
  }
  uint64_t v5 = *this;
  unint64_t v6 = *((unsigned int *)*this + 11);
  uint64_t v7 = (v6 >> 23) & 1;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    unsigned int v8 = &(*this)[2 * v7 + 8];
  }
  else {
    unsigned int v8 = 0;
  }
  int v9 = *((_DWORD *)v8 + 16);
  int v10 = v6 & 0x800000;
  if ((v6 & 0x800000) != 0)
  {
    uint64_t v11 = v5[9];
    if (!v9)
    {
LABEL_21:
      uint64_t v14 = 0;
      uint64_t v13 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (!v9) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = (*((_DWORD *)v8 + 15) + *((_DWORD *)v8 + 14));
  if (!*(void *)(v11 + 32 * v12 + 24)) {
    goto LABEL_21;
  }
  uint64_t v13 = (void *)(*(void *)(*(void *)(v5[9] + 32 * v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8))
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v5 = *this;
  unint64_t v6 = *((unsigned int *)*this + 11);
  uint64_t v7 = (v6 >> 23) & 1;
  int v10 = v6 & 0x800000;
LABEL_22:
  uint64_t v15 = &v5[2 * v7 + 8];
  if (!BYTE3(v6)) {
    uint64_t v15 = 0;
  }
  int v16 = *((_DWORD *)v15 + 17);
  if (v10)
  {
    uint64_t v17 = v5[9];
    if (!v16)
    {
LABEL_32:
      uint64_t v20 = 0;
      uint64_t v19 = 0;
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v17 = 0;
    if (!v16) {
      goto LABEL_32;
    }
  }
  uint64_t v18 = (*((_DWORD *)v15 + 15) + *((_DWORD *)v15 + 14) + *((_DWORD *)v15 + 16));
  if (!*(void *)(v17 + 32 * v18 + 24)) {
    goto LABEL_32;
  }
  uint64_t v19 = (void *)(*(void *)(*(void *)(v5[9] + 32 * v18 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
  {
    uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  uint64_t v5 = *this;
  unint64_t v6 = *((unsigned int *)*this + 11);
  uint64_t v7 = (v6 >> 23) & 1;
  int v10 = v6 & 0x800000;
LABEL_33:
  uint64_t v21 = &v5[2 * v7 + 8];
  if (!BYTE3(v6)) {
    uint64_t v21 = 0;
  }
  int v22 = *((_DWORD *)v21 + 18);
  if (v10)
  {
    uint64_t v23 = v5[9];
    if (!v22)
    {
LABEL_43:
      uint64_t v26 = 0;
      uint64_t v25 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v23 = 0;
    if (!v22) {
      goto LABEL_43;
    }
  }
  uint64_t v24 = (*((_DWORD *)v21 + 15) + *((_DWORD *)v21 + 14) + *((_DWORD *)v21 + 16) + *((_DWORD *)v21 + 17));
  if (!*(void *)(v23 + 32 * v24 + 24)) {
    goto LABEL_43;
  }
  uint64_t v25 = (void *)(*(void *)(*(void *)(v5[9] + 32 * v24 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8))
  {
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  uint64_t v5 = *this;
  unint64_t v6 = *((unsigned int *)*this + 11);
  uint64_t v7 = (v6 >> 23) & 1;
  int v10 = v6 & 0x800000;
LABEL_44:
  uint64_t v27 = &v5[2 * v7 + 8];
  if (!BYTE3(v6)) {
    uint64_t v27 = 0;
  }
  int v28 = *((_DWORD *)v27 + 19);
  if (v10)
  {
    uint64_t v29 = v5[9];
    if (!v28)
    {
LABEL_54:
      uint64_t v32 = 0;
      char v31 = 0;
      uint64_t v33 = v37;
      uint64_t v34 = v36;
               0);
    }
  }
  else
  {
    uint64_t v29 = 0;
    if (!v28) {
      goto LABEL_54;
    }
  }
  uint64_t v30 = (*((_DWORD *)v27 + 15)
                     + *((_DWORD *)v27 + 14)
                     + *((_DWORD *)v27 + 16)
                     + *((_DWORD *)v27 + 17)
                     + *((_DWORD *)v27 + 18));
  if (!*(void *)(v29 + 32 * v30 + 24)) {
    goto LABEL_54;
  }
  char v31 = (void *)(*(void *)(*(void *)(v5[9] + 32 * v30 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8))
  {
    uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
  }
  else
  {
    char v31 = 0;
    uint64_t v32 = 0;
  }
  uint64_t v33 = v37;
  uint64_t v34 = v36;
  uint64_t v5 = *this;
           0);
}

uint64_t mlir::mps::LSTMOp::getRecurrentWeight(mlir::mps::LSTMOp *this)
{
  if (*(unsigned char *)(*(void *)this + 47)) {
    uint64_t v1 = *(void *)this + 80;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(*(void *)(*(void *)this + 72) + 32 * *(unsigned int *)(v1 + 56) + 24);
}

uint64_t mlir::mps::LSTMOp::getInputState(mlir::mps::LSTMOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[16];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[15] + v2[14]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[15] + v2[14]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::getInputCell(mlir::mps::LSTMOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[17];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[16] + v2[15] + v2[14]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[16] + v2[15] + v2[14]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::getMask(mlir::mps::LSTMOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[18];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[17] + v2[16] + v2[15] + v2[14]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[17] + v2[16] + v2[15] + v2[14]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::getPeephole(mlir::mps::LSTMOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[19];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[18] + v2[17] + v2[16] + v2[15] + v2[14]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[18] + v2[17] + v2[16] + v2[15] + v2[14]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::anonymous namespace'::verifyLSTM(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  v183[0] = a3;
  v183[1] = a4;
  v182[0] = a5;
  v182[1] = a6;
  v181[0] = a7;
  v181[1] = a8;
  v180[0] = a9;
  v180[1] = a10;
  v179[0] = a13;
  v179[1] = a14;
  v178[0] = a15;
  v178[1] = a16;
  v177[0] = a17;
  v177[1] = a18;
  v176[0] = a19;
  v176[1] = a20;
  if (!a3) {
    return 1;
  }
  uint64_t v21 = 1;
  if (*(_UNKNOWN **)(*(void *)a3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || !a5
    || *(_UNKNOWN **)(*(void *)a5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return v21;
  }
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v183);
  uint64_t v25 = v24;
  uint64_t v26 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v182);
  if (v25 != (const char *)3)
  {
    v174[0] = (const void **)"Invalid input tensor rank: ";
    __int16 v175 = 259;
    mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
    if (v187)
    {
      LODWORD(v184) = 5;
      uint64_t v185 = v25;
      char v31 = (uint64_t *)&v184;
      uint64_t v32 = (char *)v190;
      if (v191 >= v192)
      {
        unint64_t v152 = v191 + 1;
        if (v190 <= &v184 && (char *)v190 + 24 * v191 > (char *)&v184)
        {
          int64_t v164 = (char *)&v184 - (unsigned char *)v190;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v152, 24);
          uint64_t v32 = (char *)v190;
          char v31 = (uint64_t *)((char *)v190 + v164);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v152, 24);
          char v31 = (uint64_t *)&v184;
          uint64_t v32 = (char *)v190;
        }
      }
      uint64_t v33 = &v32[24 * v191];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = v31[2];
      *(_OWORD *)uint64_t v33 = v34;
      uint64_t v35 = ++v191;
      if (v187)
      {
        LODWORD(v184) = 3;
        uint64_t v185 = ", should be 3.";
        uint64_t v186 = 14;
        uint64_t v36 = (uint64_t *)&v184;
        uint64_t v37 = (char *)v190;
        if (v35 >= v192)
        {
          unint64_t v153 = v35 + 1;
          BOOL v154 = (char *)v190 + 24 * v35 > (char *)&v184;
          if (v190 <= &v184 && v154)
          {
            int64_t v165 = (char *)&v184 - (unsigned char *)v190;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v153, 24);
            uint64_t v37 = (char *)v190;
            uint64_t v36 = (uint64_t *)((char *)v190 + v165);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v153, 24);
            uint64_t v36 = (uint64_t *)&v184;
            uint64_t v37 = (char *)v190;
          }
        }
        unint64_t v38 = &v37[24 * v191];
        long long v39 = *(_OWORD *)v36;
        *((void *)v38 + 2) = v36[2];
        *(_OWORD *)unint64_t v38 = v39;
        ++v191;
      }
    }
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v187);
    if (v187) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v187);
    }
    if (!v198) {
      return v21;
    }
    long long v40 = (void **)__p;
    if (__p)
    {
      int v41 = v197;
      uint64_t v42 = __p;
      if (v197 != __p)
      {
        do
          int v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      uint64_t v197 = v40;
      operator delete(v42);
    }
    uint64_t v43 = v194;
    if (v194)
    {
      unint64_t v44 = v195;
      char v45 = v194;
      if (v195 != v194)
      {
        do
        {
          unint64_t v47 = (void *)*--v44;
          uint64_t v46 = v47;
          *unint64_t v44 = 0;
          if (v47) {
            operator delete[](v46);
          }
        }
        while (v44 != v43);
        char v45 = v194;
      }
      uint64_t v195 = v43;
      operator delete(v45);
    }
    uint64_t v62 = v190;
    if (v190 == v193) {
      return v21;
    }
LABEL_59:
    free(v62);
    return v21;
  }
  unint64_t v173 = v27;
  if (v27 <= 1)
  {
    __int16 v175 = 259;
    mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
    int v28 = (uint64_t *)&v173;
    goto LABEL_8;
  }
  uint64_t v48 = ArgAttrsAttr[2];
  uint64_t v49 = v48;
  if ((a2 & 1) == 0)
  {
    uint64_t v49 = 0x8000000000000000;
    if (v48 != 0x8000000000000000)
    {
      uint64_t v50 = v48 + 3;
      if (v48 >= 0) {
        uint64_t v50 = ArgAttrsAttr[2];
      }
      if ((v50 & 0xFFFFFFFFFFFFFFFCLL) != v48)
      {
        v174[0] = (const void **)"Invalid input last dimension size: ";
        __int16 v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        uint64_t v95 = mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&v187, ArgAttrsAttr + 2);
        uint64_t v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v95, ", should be divisible by four.");
        goto LABEL_9;
      }
      uint64_t v49 = v50 >> 2;
    }
  }
  unint64_t v51 = 0;
  unint64_t v52 = v27 - 2;
  do
  {
    if (v51 < v52) {
      uint64_t v53 = 1;
    }
    else {
      uint64_t v53 = v49;
    }
    uint64_t v54 = 4 * v53;
    if (v53 == 0x8000000000000000) {
      uint64_t v54 = 0x8000000000000000;
    }
    if (v52 == v51) {
      uint64_t v53 = v54;
    }
    uint64_t v55 = *(void *)(v26 + 8 * v51);
    if (v53 != 0x8000000000000000 && v55 != 0x8000000000000000 && v55 != v53)
    {
      __int16 v175 = 259;
      mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
      if (v187)
      {
        LODWORD(v184) = 3;
        uint64_t v185 = "matrix of size [";
        uint64_t v186 = 16;
        long long v63 = (uint64_t *)&v184;
        unint64_t v64 = (char *)v190;
        if (v191 >= v192)
        {
          unint64_t v155 = v191 + 1;
          if (v190 <= &v184 && (char *)v190 + 24 * v191 > (char *)&v184)
          {
            int64_t v166 = (char *)&v184 - (unsigned char *)v190;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v155, 24);
            unint64_t v64 = (char *)v190;
            long long v63 = (uint64_t *)((char *)v190 + v166);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v155, 24);
            long long v63 = (uint64_t *)&v184;
            unint64_t v64 = (char *)v190;
          }
        }
        unint64_t v65 = &v64[24 * v191];
        long long v66 = *(_OWORD *)v63;
        *((void *)v65 + 2) = v63[2];
        *(_OWORD *)unint64_t v65 = v66;
        uint64_t v67 = ++v191;
        if (v187)
        {
          LODWORD(v184) = 2;
          uint64_t v185 = (const char *)(4 * v49);
          unint64_t v68 = (uint64_t *)&v184;
          unint64_t v69 = (char *)v190;
          if (v67 >= v192)
          {
            unint64_t v156 = v67 + 1;
            BOOL v157 = (char *)v190 + 24 * v67 > (char *)&v184;
            if (v190 <= &v184 && v157)
            {
              int64_t v167 = (char *)&v184 - (unsigned char *)v190;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v156, 24);
              unint64_t v69 = (char *)v190;
              unint64_t v68 = (uint64_t *)((char *)v190 + v167);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v156, 24);
              unint64_t v68 = (uint64_t *)&v184;
              unint64_t v69 = (char *)v190;
            }
          }
          unint64_t v70 = &v69[24 * v191];
          long long v71 = *(_OWORD *)v68;
          *((void *)v70 + 2) = v68[2];
          *(_OWORD *)unint64_t v70 = v71;
          uint64_t v72 = ++v191;
          if (v187)
          {
            LODWORD(v184) = 3;
            uint64_t v185 = ", ";
            uint64_t v186 = 2;
            unint64_t v73 = (uint64_t *)&v184;
            int64x2_t v74 = (char *)v190;
            if (v72 >= v192)
            {
              unint64_t v158 = v72 + 1;
              BOOL v159 = (char *)v190 + 24 * v72 > (char *)&v184;
              if (v190 <= &v184 && v159)
              {
                int64_t v168 = (char *)&v184 - (unsigned char *)v190;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v158, 24);
                int64x2_t v74 = (char *)v190;
                unint64_t v73 = (uint64_t *)((char *)v190 + v168);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v158, 24);
                unint64_t v73 = (uint64_t *)&v184;
                int64x2_t v74 = (char *)v190;
              }
            }
            unint64_t v75 = &v74[24 * v191];
            long long v76 = *(_OWORD *)v73;
            *((void *)v75 + 2) = v73[2];
            *(_OWORD *)unint64_t v75 = v76;
            uint64_t v77 = ++v191;
            if (v187)
            {
              LODWORD(v184) = 2;
              uint64_t v185 = (const char *)v49;
              uint64_t v78 = (uint64_t *)&v184;
              uint64_t v79 = (char *)v190;
              if (v77 >= v192)
              {
                unint64_t v160 = v77 + 1;
                BOOL v161 = (char *)v190 + 24 * v77 > (char *)&v184;
                if (v190 <= &v184 && v161)
                {
                  int64_t v169 = (char *)&v184 - (unsigned char *)v190;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v160, 24);
                  uint64_t v79 = (char *)v190;
                  uint64_t v78 = (uint64_t *)((char *)v190 + v169);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v160, 24);
                  uint64_t v78 = (uint64_t *)&v184;
                  uint64_t v79 = (char *)v190;
                }
              }
              unint64_t v80 = &v79[24 * v191];
              long long v81 = *(_OWORD *)v78;
              *((void *)v80 + 2) = v78[2];
              *(_OWORD *)unint64_t v80 = v81;
              uint64_t v82 = ++v191;
              if (v187)
              {
                LODWORD(v184) = 3;
                uint64_t v185 = "].";
                uint64_t v186 = 2;
                uint64_t v83 = (uint64_t *)&v184;
                uint64_t v84 = (char *)v190;
                if (v82 >= v192)
                {
                  unint64_t v162 = v82 + 1;
                  BOOL v163 = (char *)v190 + 24 * v82 > (char *)&v184;
                  if (v190 <= &v184 && v163)
                  {
                    int64_t v170 = (char *)&v184 - (unsigned char *)v190;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v162, 24);
                    uint64_t v84 = (char *)v190;
                    uint64_t v83 = (uint64_t *)((char *)v190 + v170);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v193, v162, 24);
                    uint64_t v83 = (uint64_t *)&v184;
                    uint64_t v84 = (char *)v190;
                  }
                }
                char v85 = &v84[24 * v191];
                long long v86 = *(_OWORD *)v83;
                *((void *)v85 + 2) = v83[2];
                *(_OWORD *)char v85 = v86;
                ++v191;
              }
            }
          }
        }
      }
      uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v187);
      if (v187) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v187);
      }
      if (!v198) {
        return v21;
      }
      uint64_t v87 = (void **)__p;
      if (__p)
      {
        uint64_t v88 = v197;
        uint64_t v89 = __p;
        if (v197 != __p)
        {
          do
            uint64_t v88 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v88 - 1);
          while (v88 != v87);
          uint64_t v89 = __p;
        }
        uint64_t v197 = v87;
        operator delete(v89);
      }
      uint64_t v90 = v194;
      if (v194)
      {
        uint64_t v91 = v195;
        uint64_t v92 = v194;
        if (v195 != v194)
        {
          do
          {
            uint64_t v94 = (void *)*--v91;
            unint64_t v93 = v94;
            *uint64_t v91 = 0;
            if (v94) {
              operator delete[](v93);
            }
          }
          while (v91 != v90);
          uint64_t v92 = v194;
        }
        uint64_t v195 = v90;
        operator delete(v92);
      }
      uint64_t v62 = v190;
      if (v190 == v193) {
        return v21;
      }
      goto LABEL_59;
    }
    ++v51;
  }
  while (v27 != v51);
  if (v181[0]
    && *(_UNKNOWN **)(*(void *)v181[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v58 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v181);
    unint64_t v184 = v59;
    unint64_t v60 = v59 - 1;
    if (v59 <= 1)
    {
      goto LABEL_112;
    }
    uint64_t v96 = (uint64_t *)v58;
    unint64_t v97 = 0;
    while (2)
    {
      if (v97 >= v59 - 2)
      {
        uint64_t v98 = ArgAttrsAttr[v97 + 3 - v59];
        uint64_t v171 = v98;
        if (v60 != v97 || (a2 & 1) != 0 || v98 == 0x8000000000000000) {
          goto LABEL_99;
        }
      }
      else
      {
        uint64_t v171 = 1;
        uint64_t v98 = 1;
        if (v60 != v97 || (a2 & 1) != 0) {
          goto LABEL_99;
        }
      }
      v98 /= 4;
      uint64_t v171 = v98;
LABEL_99:
      uint64_t v99 = *(void *)(v58 + 8 * v97);
      if (v98 != 0x8000000000000000 && v99 != 0x8000000000000000 && v99 != v98)
      {
        unint64_t v172 = v97;
        goto LABEL_204;
      }
      if (v59 == ++v97) {
        break;
      }
      continue;
    }
  }
  if (!v180[0]
    || *(_UNKNOWN **)(*(void *)v180[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_131:
    if (a11 && *(_UNKNOWN **)(*a11 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      if (a2)
      {
        BOOL v110 = (void *)v183[0];
        unint64_t v111 = (void *)v183[0];
      }
      else
      {
        uint64_t v187 = &v189;
        uint64_t v188 = 0x400000000;
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v187, *ArgAttrsAttr);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v187, ArgAttrsAttr[1]);
        llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v187, ArgAttrsAttr[2]);
        uint64_t v113 = v188;
        uint64_t v114 = v188 - 1;
        int64_t v115 = v187;
        if (*((void *)v187 + v114) != 0x8000000000000000) {
          *((uint64_t *)v187 + v114) /= 4;
        }
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v183);
        int64_t v117 = (void *)mlir::RankedTensorType::get((uint64_t)v115, v113, OperandRange, 0);
        unint64_t v111 = v117;
        if (v117) {
          mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v117 + 8);
        }
        if (v187 != &v189) {
          free(v187);
        }
        BOOL v110 = (void *)v183[0];
      }
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v110);
      if (!mlir::OpTrait::util::getBroadcastedType(v111, a11, ElementTypeOrSelf))
      {
        goto LABEL_203;
      }
    }
    if (v176[0]
      && *(_UNKNOWN **)(*(void *)v176[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      int64_t v119 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v176);
      if (v120 != 3 || *v119 != 0x8000000000000000 && *ArgAttrsAttr != 0x8000000000000000 && *ArgAttrsAttr != *v119) {
        goto LABEL_157;
      }
      uint64_t v121 = v119[1];
      if (v121 != 0x8000000000000000)
      {
        uint64_t v122 = ArgAttrsAttr[1];
        if (v122 != 0x8000000000000000 && v122 != v121) {
          goto LABEL_157;
        }
      }
      uint64_t v123 = ArgAttrsAttr[2];
      if (v123 != 0x8000000000000000) {
        v123 *= 4;
      }
      uint64_t v124 = v119[2];
      if (v124 != 0x8000000000000000 && v123 != 0x8000000000000000 && v123 != v124)
      {
LABEL_157:
LABEL_203:
        v174[0] = (const void **)v125;
        __int16 v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        uint64_t v30 = (uint64_t)&v187;
        goto LABEL_9;
      }
    }
    if (v178[0]
      && *(_UNKNOWN **)(*(void *)v178[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      if ((uint64_t v126 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v178), v127 != 3)
        || *v126 != 0x8000000000000000 && *ArgAttrsAttr != 0x8000000000000000 && *ArgAttrsAttr != *v126
        || (uint64_t v128 = v126[1], v128 != 0x8000000000000000)
        && (uint64_t v129 = ArgAttrsAttr[1], v129 != 0x8000000000000000)
        && v129 != v128
        || (uint64_t v130 = v126[2], v130 != 0x8000000000000000)
        && (uint64_t v131 = ArgAttrsAttr[2], v131 != 0x8000000000000000)
        && v131 != v130)
      {
        goto LABEL_203;
      }
    }
    if (v179[0]
      && *(_UNKNOWN **)(*(void *)v179[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t v132 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v179);
      if (v133 != 1)
      {
        uint64_t v149 = v133;
        __int16 v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        unint64_t v184 = v149;
        uint64_t v150 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)&v187, (uint64_t *)&v184);
        uint64_t v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v150, ", should be 1.");
        goto LABEL_9;
      }
      unint64_t v134 = v49 == 0x8000000000000000 ? 0x8000000000000000 : 4 * v49;
      unint64_t v184 = v134;
      if (v134 != 0x8000000000000000 && *v132 != 0x8000000000000000 && *v132 != v134)
      {
        __int16 v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        uint64_t v135 = (uint64_t)&v187;
        int v136 = (uint64_t *)&v184;
        goto LABEL_205;
      }
    }
    if (v177[0]
      && *(_UNKNOWN **)(*(void *)v177[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t v137 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v177);
      unint64_t v184 = v138;
      if ((v138 & 0xFFFFFFFFFFFFFFFELL) != 2)
      {
        __int16 v175 = 259;
        mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
        uint64_t v151 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)&v187, (uint64_t *)&v184);
        uint64_t v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v151, ", should be 2 or 3.");
        goto LABEL_9;
      }
      uint64_t v96 = v137;
      unint64_t v139 = 0;
      char v140 = &ArgAttrsAttr[-v138 + 3];
      while (1)
      {
        if (v139 >= v138 - 2) {
          uint64_t v141 = v140[v139];
        }
        else {
          uint64_t v141 = 1;
        }
        uint64_t v171 = v141;
        if (!v139 && v138 == 3)
        {
          uint64_t v141 = *v137;
          if (*v137 != 1) {
            uint64_t v141 = *v140;
          }
          uint64_t v171 = v141;
        }
        if (v141 != 0x8000000000000000)
        {
          uint64_t v142 = v137[v139];
          if (v142 != 0x8000000000000000 && v142 != v141) {
            break;
          }
        }
        if (v138 == ++v139) {
          return 1;
        }
      }
      unint64_t v172 = v139;
LABEL_204:
      v174[0] = (const void **)v112;
      __int16 v175 = 259;
      mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
      uint64_t v145 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)&v187, (uint64_t *)&v172);
      uint64_t v146 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v145, "] = ");
      uint64_t v147 = mlir::InFlightDiagnostic::operator<<<long long &>(v146, &v96[v172]);
      uint64_t v135 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v147, ", expected ");
      int v136 = &v171;
LABEL_205:
      uint64_t v148 = mlir::InFlightDiagnostic::operator<<<long long &>(v135, v136);
      uint64_t v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v148, ".");
      goto LABEL_9;
    }
    return 1;
  }
  uint64_t v102 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v180);
  unint64_t v184 = v103;
  unint64_t v104 = v103 - 1;
  if (v103 > 1)
  {
    uint64_t v96 = (uint64_t *)v102;
    unint64_t v105 = 0;
    while (1)
    {
      if (v105 >= v103 - 2)
      {
        uint64_t v106 = ArgAttrsAttr[v105 + 3 - v103];
        uint64_t v171 = v106;
        if (v104 != v105 || (a2 & 1) != 0 || v106 == 0x8000000000000000) {
          goto LABEL_122;
        }
      }
      else
      {
        uint64_t v171 = 1;
        uint64_t v106 = 1;
        if (v104 != v105 || (a2 & 1) != 0) {
          goto LABEL_122;
        }
      }
      v106 /= 4;
      uint64_t v171 = v106;
LABEL_122:
      uint64_t v107 = *(void *)(v102 + 8 * v105);
      if (v106 != 0x8000000000000000 && v107 != 0x8000000000000000 && v107 != v106)
      {
        unint64_t v172 = v105;
        goto LABEL_204;
      }
      if (v103 == ++v105) {
        goto LABEL_131;
      }
    }
  }
LABEL_112:
  v174[0] = (const void **)v61;
  __int16 v175 = 259;
  mlir::Operation::emitOpError(a1, v174, (uint64_t)&v187);
  int v28 = (uint64_t *)&v184;
LABEL_8:
  uint64_t v29 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)&v187, v28);
  uint64_t v30 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v29, ", should be 2 or greater.");
LABEL_9:
  uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v30);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v187);
  return v21;
}

uint64_t mlir::mps::LSTMGradientOp::verify(uint64_t **this)
{
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    uint64_t v55 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v55 = 0;
  }
  if (*((unsigned char *)*this + 47)) {
    uint64_t v3 = (uint64_t)(*this + 10);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)(*(void *)(*(void *)((*this)[9] + 32 * *(unsigned int *)(v3 + 48) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8))
  {
    uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v54 = 0;
  }
  if (*((unsigned char *)*this + 47)) {
    uint64_t v5 = (uint64_t)(*this + 10);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = (void *)(*(void *)(*(void *)((*this)[9]
                                        + 32 * (*(_DWORD *)(v5 + 52) + *(_DWORD *)(v5 + 48))
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8))
  {
    uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v53 = 0;
  }
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v7 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = (void *)(*(void *)(*(void *)((*this)[9]
                                        + 32
                                        * (*((_DWORD *)v7 + 13)
                                                       + *((_DWORD *)v7 + 12)
                                                       + *((_DWORD *)v7 + 14))
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8))
  {
    uint64_t v52 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v52 = 0;
  }
  int v9 = *this;
  unint64_t v10 = *((unsigned int *)*this + 11);
  uint64_t v11 = (v10 >> 23) & 1;
  uint64_t v12 = &(*this)[2 * v11 + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v12 = 0;
  }
  int v13 = *((_DWORD *)v12 + 12);
  int v14 = *((_DWORD *)v12 + 13);
  int v15 = *((_DWORD *)v12 + 14);
  int v16 = *((_DWORD *)v12 + 15);
  int v17 = *((_DWORD *)v12 + 16);
  int v18 = v10 & 0x800000;
  if ((v10 & 0x800000) != 0)
  {
    uint64_t v19 = v9[9];
    if (!v17)
    {
LABEL_32:
      uint64_t v51 = 0;
      uint64_t v21 = 0;
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v19 = 0;
    if (!v17) {
      goto LABEL_32;
    }
  }
  uint64_t v20 = (v14 + v13 + v15 + v16);
  if (!*(void *)(v19 + 32 * v20 + 24)) {
    goto LABEL_32;
  }
  uint64_t v21 = (void *)(*(void *)(*(void *)(v9[9] + 32 * v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8))
  {
    uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v51 = 0;
  }
  int v9 = *this;
  unint64_t v10 = *((unsigned int *)*this + 11);
  uint64_t v11 = (v10 >> 23) & 1;
  int v18 = v10 & 0x800000;
LABEL_33:
  int v22 = &v9[2 * v11 + 8];
  if (!BYTE3(v10)) {
    int v22 = 0;
  }
  int v23 = *((_DWORD *)v22 + 17);
  if (v18)
  {
    uint64_t v24 = v9[9];
    if (!v23)
    {
LABEL_43:
      uint64_t v50 = 0;
      uint64_t v26 = 0;
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v24 = 0;
    if (!v23) {
      goto LABEL_43;
    }
  }
  uint64_t v25 = (*((_DWORD *)v22 + 13)
                     + *((_DWORD *)v22 + 12)
                     + *((_DWORD *)v22 + 14)
                     + *((_DWORD *)v22 + 15)
                     + *((_DWORD *)v22 + 16));
  if (!*(void *)(v24 + 32 * v25 + 24)) {
    goto LABEL_43;
  }
  uint64_t v26 = (void *)(*(void *)(*(void *)(v9[9] + 32 * v25 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8))
  {
    uint64_t v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v50 = 0;
  }
  int v9 = *this;
  unint64_t v10 = *((unsigned int *)*this + 11);
  uint64_t v11 = (v10 >> 23) & 1;
  int v18 = v10 & 0x800000;
LABEL_44:
  unint64_t v27 = &v9[2 * v11 + 8];
  if (!BYTE3(v10)) {
    unint64_t v27 = 0;
  }
  int v28 = *((_DWORD *)v27 + 18);
  if (v18)
  {
    uint64_t v29 = v9[9];
    uint64_t v56 = (uint64_t)v21;
    uint64_t v57 = (uint64_t)v4;
    if (!v28)
    {
LABEL_54:
      uint64_t v32 = 0;
      char v31 = 0;
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v56 = (uint64_t)v21;
    uint64_t v57 = (uint64_t)v4;
    if (!v28) {
      goto LABEL_54;
    }
  }
  uint64_t v30 = (*((_DWORD *)v27 + 13)
                     + *((_DWORD *)v27 + 12)
                     + *((_DWORD *)v27 + 14)
                     + *((_DWORD *)v27 + 15)
                     + *((_DWORD *)v27 + 16)
                     + *((_DWORD *)v27 + 17));
  if (!*(void *)(v29 + 32 * v30 + 24)) {
    goto LABEL_54;
  }
  char v31 = (void *)(*(void *)(*(void *)(v9[9] + 32 * v30 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8))
  {
    uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
  }
  else
  {
    char v31 = 0;
    uint64_t v32 = 0;
  }
  int v9 = *this;
  unint64_t v10 = *((unsigned int *)*this + 11);
  uint64_t v11 = (v10 >> 23) & 1;
  int v18 = v10 & 0x800000;
LABEL_55:
  uint64_t v33 = &v9[2 * v11 + 8];
  if (!BYTE3(v10)) {
    uint64_t v33 = 0;
  }
  int v34 = *((_DWORD *)v33 + 19);
  if (v18)
  {
    uint64_t v35 = v9[9];
    if (!v34)
    {
LABEL_65:
      uint64_t v38 = 0;
      uint64_t v37 = 0;
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v35 = 0;
    if (!v34) {
      goto LABEL_65;
    }
  }
  uint64_t v36 = (*((_DWORD *)v33 + 13)
                     + *((_DWORD *)v33 + 12)
                     + *((_DWORD *)v33 + 14)
                     + *((_DWORD *)v33 + 15)
                     + *((_DWORD *)v33 + 16)
                     + *((_DWORD *)v33 + 17)
                     + *((_DWORD *)v33 + 18));
  if (!*(void *)(v35 + 32 * v36 + 24)) {
    goto LABEL_65;
  }
  uint64_t v37 = (void *)(*(void *)(*(void *)(v9[9] + 32 * v36 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8))
  {
    uint64_t v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8);
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
  }
  int v9 = *this;
  unint64_t v10 = *((unsigned int *)*this + 11);
  uint64_t v11 = (v10 >> 23) & 1;
  int v18 = v10 & 0x800000;
LABEL_66:
  long long v39 = &v9[2 * v11 + 8];
  if (!BYTE3(v10)) {
    long long v39 = 0;
  }
  int v40 = *((_DWORD *)v39 + 21);
  if (v18)
  {
    uint64_t v41 = v9[9];
    if (!v40)
    {
LABEL_76:
      uint64_t v44 = 0;
      uint64_t v43 = 0;
      uint64_t v46 = v54;
      uint64_t v45 = v55;
      uint64_t v48 = v52;
      uint64_t v47 = v53;
               v47);
    }
  }
  else
  {
    uint64_t v41 = 0;
    if (!v40) {
      goto LABEL_76;
    }
  }
  uint64_t v42 = (*((_DWORD *)v39 + 13)
                     + *((_DWORD *)v39 + 12)
                     + *((_DWORD *)v39 + 14)
                     + *((_DWORD *)v39 + 15)
                     + *((_DWORD *)v39 + 16)
                     + *((_DWORD *)v39 + 17)
                     + *((_DWORD *)v39 + 18)
                     + *((_DWORD *)v39 + 19)
                     + *((_DWORD *)v39 + 20));
  if (!*(void *)(v41 + 32 * v42 + 24)) {
    goto LABEL_76;
  }
  uint64_t v43 = (void *)(*(void *)(*(void *)(v9[9] + 32 * v42 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v43 + 8))
  {
    uint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v43 + 8);
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
  }
  uint64_t v46 = v54;
  uint64_t v45 = v55;
  uint64_t v48 = v52;
  uint64_t v47 = v53;
  int v9 = *this;
           v47);
}

uint64_t mlir::mps::LSTMGradientOp::getRecurrentWeight(mlir::mps::LSTMGradientOp *this)
{
  if (*(unsigned char *)(*(void *)this + 47)) {
    uint64_t v1 = *(void *)this + 80;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(*(void *)(*(void *)this + 72) + 32 * *(unsigned int *)(v1 + 48) + 24);
}

uint64_t mlir::mps::LSTMGradientOp::getTrainingState(mlir::mps::LSTMGradientOp *this)
{
  if (*(unsigned char *)(*(void *)this + 47)) {
    uint64_t v1 = *(void *)this + 80;
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(*(void *)(*(void *)this + 72)
                   + 32 * (*(_DWORD *)(v1 + 52) + *(_DWORD *)(v1 + 48))
                   + 24);
}

uint64_t mlir::mps::LSTMGradientOp::getOutputCellFwd(mlir::mps::LSTMGradientOp *this)
{
  if (HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v1 = (_DWORD *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v1 = 0;
  }
  return *(void *)(*(void *)(*(void *)this + 72) + 32 * (v1[14] + v1[13] + v1[12]) + 24);
}

uint64_t mlir::mps::LSTMGradientOp::getInputState(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[16];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[15] + v2[14] + v2[13] + v2[12]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[15] + v2[14] + v2[13] + v2[12]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::LSTMGradientOp::getInputCell(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[17];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::LSTMGradientOp::getMask(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[18];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::LSTMGradientOp::getPeephole(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[19];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[18] + v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[18] + v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::LSTMGradientOp::getCellGradient(mlir::mps::LSTMGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[21];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4
    }
                       + 32
                       * (v2[20] + v2[19] + v2[18] + v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12])
                       + 24);
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4
    }
                       + 32
                       * (v2[20] + v2[19] + v2[18] + v2[17] + v2[16] + v2[15] + v2[14] + v2[13] + v2[12])
                       + 24);
  }
  return 0;
}

uint64_t mlir::mps::LSTMOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v55[2] = *MEMORY[0x1E4F143B8];
  v55[0] = a4;
  v55[1] = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
    uint64_t v19 = *((void *)a7 + 6);
    *(_OWORD *)uint64_t v42 = *(long long *)((char *)a7 + 56);
    *(_OWORD *)((char *)&v42[1] + 4) = *(long long *)((char *)a7 + 68);
  }
  else
  {
    uint64_t v19 = 0;
    long long v16 = 0uLL;
    memset(v42, 0, 28);
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v43 = a6;
  v44[0] = 0;
  char v45 = 0;
  long long v46 = v16;
  long long v47 = v17;
  long long v48 = v18;
  uint64_t v49 = v19;
  v50[0] = *(_OWORD *)v42;
  *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)((char *)&v42[1] + 4);
  uint64_t v51 = a9;
  uint64_t v52 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v43);
    if (v45) {
      char v45 = 0;
    }
    mlir::OperationName::OperationName(v44, "mps.lstm", 8, Context);
    char v45 = 1;
  }
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v21 = *(void *)(mlir::ValueRange::dereference_iterator(v55, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot handle a non-tensor input type");
    }
    BOOL v22 = *(void *)(*(void *)v21 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       && *(void *)(*(void *)v21 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
    unint64_t v23 = *(void *)(*(void *)v21 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       && *(void *)(*(void *)v21 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
        ? 0
        : v21;
    uint64_t v41 = v23;
    if (v22) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot handle a non-tensor input type");
    }
    if (*(_UNKNOWN **)(*(void *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
LABEL_28:
      uint64_t v38 = *(unsigned int *)(a11 + 8);
      if (v38 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v38 + 1, 8);
        LODWORD(v38) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v38) = v21;
      unsigned int v39 = *(_DWORD *)(a11 + 12);
      uint64_t v40 = (*(_DWORD *)(a11 + 8) + 1);
      *(_DWORD *)(a11 + 8) = v40;
      if (v40 >= v39)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v40 + 1, 8);
        LODWORD(v40) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v40) = v21;
      uint64_t v27 = (*(_DWORD *)(a11 + 8) + 1);
      *(_DWORD *)(a11 + 8) = v27;
      if (!*((void *)&v48 + 1)) {
        return 1;
      }
      uint64_t v26 = v41;
      if (v27 >= *(_DWORD *)(a11 + 12)) {
        goto LABEL_34;
      }
      goto LABEL_16;
    }
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
    v42[0] = &v42[2];
    v42[1] = (void *)0x400000000;
    if (v29)
    {
      uint64_t v30 = (uint64_t *)Value;
      LODWORD(v31) = 0;
      uint64_t v32 = 8 * v29;
      do
      {
        uint64_t v33 = *v30;
        if (v31 >= HIDWORD(v42[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v42, &v42[2], v31 + 1, 8);
          LODWORD(v31) = v42[1];
        }
        *((void *)v42[0] + v31) = v33;
        uint64_t v31 = ++LODWORD(v42[1]);
        ++v30;
        v32 -= 8;
      }
      while (v32);
      int v34 = (void **)v42[0];
      uint64_t v35 = v31 - 1;
      uint64_t v36 = *((void *)v42[0] + v31 - 1);
      if (v36 == 0x8000000000000000) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v31 = 0;
      int v34 = &v42[2];
      uint64_t v35 = -1;
      uint64_t v36 = (uint64_t)v42[1];
    }
    v34[v35] = (void *)(v36 / 4);
LABEL_26:
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v41);
    unint64_t v21 = mlir::RankedTensorType::get((uint64_t)v34, v31, ElementType, 0);
    if (v42[0] != &v42[2]) {
      free(v42[0]);
    }
    goto LABEL_28;
  }
  uint64_t v25 = mlir::Float32Type::get(this, a2);
  uint64_t v26 = mlir::UnrankedTensorType::get(v25);
  uint64_t v27 = *(unsigned int *)(a11 + 8);
  if (v27 >= *(_DWORD *)(a11 + 12))
  {
LABEL_34:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(a11 + 8);
  }
LABEL_16:
  *(void *)(*(void *)a11 + 8 * v27) = v26;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void mlir::mps::LSTMOp::downgradeToVersion(uint64_t **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  v24[0] = &unk_1EC9CA678;
  v24[1] = 0x100000001;
  int v25 = 0;
  if (HIBYTE(*((_DWORD *)v4 + 11))) {
    unint64_t v5 = (unint64_t)&v4[2 * (((unint64_t)*((unsigned int *)v4 + 11) >> 23) & 1) + 8];
  }
  else {
    unint64_t v5 = 0;
  }
  int v6 = *(_DWORD *)(*(void *)(v5 + 16) + 8);
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 && (v7 != 1 || *(_DWORD *)(a2 + 12)) || v6 != 3)
  {
    uint64_t v16 = *((unsigned int *)v4 + 9);
    long long v17 = v4 - 2;
    if (!v16) {
      long long v17 = 0;
    }
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v16;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    v18[0] = "failed to downgrade: requested target version is {0}, but IOFZ gate layout is only supported from version {1}";
    v18[1] = 109;
    void v18[2] = v21;
    v18[3] = 2;
    v19[0] = &unk_1EC9A4798;
    v19[1] = a2;
    v20[0] = &unk_1EC9A4828;
    v20[1] = v24;
    v21[0] = v19;
    v21[1] = v20;
    __int16 v23 = 263;
    BOOL v22 = (const void **)v18;
    mlir::OpState::emitOpError(a1, &v22, (uint64_t)v26);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      unsigned int v8 = (void **)__p;
      if (__p)
      {
        int v9 = v32;
        unint64_t v10 = __p;
        if (v32 != __p)
        {
          do
            int v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          unint64_t v10 = __p;
        }
        uint64_t v32 = v8;
        operator delete(v10);
      }
      uint64_t v11 = v29;
      if (v29)
      {
        uint64_t v12 = v30;
        int v13 = v29;
        if (v30 != v29)
        {
          do
          {
            int v15 = (void *)*--v12;
            int v14 = v15;
            *uint64_t v12 = 0;
            if (v15) {
              operator delete[](v14);
            }
          }
          while (v12 != v11);
          int v13 = v29;
        }
        uint64_t v30 = v11;
        operator delete(v13);
      }
      if (v27 != &v28) {
        free(v27);
      }
    }
  }
}

uint64_t mlir::mps::LSTMOp::getGateLayout(mlir::mps::LSTMOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(unsigned int *)(*(void *)(v1 + 16) + 8);
}

uint64_t mlir::mps::LSTMGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = a10;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v65 = a4;
  *((void *)&v65 + 1) = a5;
  if (a5)
  {
    unint64_t v16 = *(void *)(mlir::ValueRange::dereference_iterator(&v65, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      BOOL v17 = *(void *)(*(void *)v16 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
         && *(void *)(*(void *)v16 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
      if (*(void *)(*(void *)v16 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && *(void *)(*(void *)v16 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = v16;
      }
      uint64_t v53 = v18;
      if (!v17)
      {
        if (*(_UNKNOWN **)(*(void *)v16 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
          goto LABEL_23;
        }
        uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
        *(void *)&long long v54 = v55;
        *((void *)&v54 + 1) = 0x400000000;
        if (v20)
        {
          unint64_t v21 = (uint64_t *)Value;
          unsigned int v22 = 0;
          uint64_t v23 = 8 * v20;
          do
          {
            uint64_t v24 = *v21;
            if (v22 >= HIDWORD(v54))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v55, v22 + 1, 8);
              unsigned int v22 = DWORD2(v54);
            }
            *(void *)(v54 + 8 * v22) = v24;
            unsigned int v22 = ++DWORD2(v54);
            ++v21;
            v23 -= 8;
          }
          while (v23);
          uint64_t v26 = (char *)v54;
          uint64_t v13 = a10;
          uint64_t v27 = v22;
          uint64_t v28 = v22 - 1;
          uint64_t v29 = *(void *)(v54 + 8 * v28);
          if (v29 == 0x8000000000000000) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v26 = v55;
          uint64_t v27 = 0;
          uint64_t v28 = -1;
          uint64_t v29 = *((void *)&v54 + 1);
        }
        *(void *)&v26[8 * v28] = 4 * v29;
LABEL_21:
        uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v53);
        unint64_t v16 = mlir::RankedTensorType::get((uint64_t)v26, v27, ElementType, 0);
        if ((char *)v54 != v55) {
          free((void *)v54);
        }
LABEL_23:
        uint64_t v31 = *(unsigned int *)(a11 + 8);
        if (v31 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v31 + 1, 8);
          LODWORD(v31) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v31) = v16;
        ++*(_DWORD *)(a11 + 8);
        long long v54 = v65;
        if (*((void *)&v65 + 1) < 2uLL)
        {
          if (!mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands")) {
            return 0;
          }
        }
        else
        {
          unint64_t v32 = *(void *)(mlir::ValueRange::dereference_iterator(&v54, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v33 = *(unsigned int *)(a11 + 8);
          if (v33 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
            LODWORD(v33) = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v33) = v32;
          ++*(_DWORD *)(a11 + 8);
        }
        uint64_t v52 = 0;
        {
          uint64_t v34 = v52;
          uint64_t v35 = *(unsigned int *)(a11 + 8);
          if (v35 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
            LODWORD(v35) = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v35) = v34;
          unsigned int v36 = *(_DWORD *)(a11 + 12);
          uint64_t v37 = (*(_DWORD *)(a11 + 8) + 1);
          *(_DWORD *)(a11 + 8) = v37;
          if (v37 >= v36)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
            *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v34;
            if (a7) {
              goto LABEL_35;
            }
          }
          else
          {
            *(void *)(*(void *)a11 + 8 * v37) = v34;
            ++*(_DWORD *)(a11 + 8);
            if (a7)
            {
LABEL_35:
              long long v38 = *a7;
              long long v39 = a7[1];
              long long v40 = a7[2];
              long long v41 = a7[4];
              int32x4_t v66 = (int32x4_t)a7[3];
              long long v67 = v41;
              uint64_t v68 = *((void *)a7 + 10);
              goto LABEL_40;
            }
          }
          uint64_t v68 = 0;
          long long v38 = 0uLL;
          int32x4_t v66 = 0u;
          long long v67 = 0u;
          long long v39 = 0uLL;
          long long v40 = 0uLL;
LABEL_40:
          *(void *)&long long v54 = a6;
          BYTE8(v54) = 0;
          v55[0] = 0;
          long long v56 = v38;
          long long v57 = v39;
          long long v58 = v40;
          long long v42 = v65;
          int32x4_t v59 = v66;
          long long v60 = v67;
          uint64_t v61 = v68;
          uint64_t v62 = a9;
          uint64_t v63 = v13;
          if (a6)
          {
            long long v51 = v65;
            uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v54);
            if (v55[0]) {
              v55[0] = 0;
            }
            mlir::OperationName::OperationName((char *)&v54 + 8, "mps.lstm_gradient", 17, Context);
            v55[0] = 1;
            long long v42 = v51;
          }
          long long v64 = v42;
          int v44 = vaddvq_s32(v59) + v60;
          int v45 = HIDWORD(v60);
          v66.i64[0] = v42;
          unsigned int v46 = v44 + DWORD1(v60) + DWORD2(v60);
          v66.i64[1] = v46;
          if (v46)
          {
            unint64_t v47 = mlir::ValueRange::offset_base(&v66, (v44 + DWORD1(v60) + DWORD2(v60)));
            if (v66.i64[1] == v45 + v46) {
              return 1;
            }
          }
          else
          {
            unint64_t v47 = v42;
            if (!HIDWORD(v60)) {
              return 1;
            }
          }
          int32x4_t v66 = (int32x4_t)v47;
          uint64_t v48 = mlir::ValueRange::dereference_iterator(&v66, 0);
          if (v48)
          {
            unint64_t v49 = *(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v50 = *(unsigned int *)(a11 + 8);
            if (v50 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
              LODWORD(v50) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v50) = v49;
            ++*(_DWORD *)(a11 + 8);
          }
          return 1;
        }
        return 0;
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot handle a non-tensor input type");
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::GRUOp::verify(uint64_t **this)
{
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8))
  {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
  }
  if (*((unsigned char *)*this + 47)) {
    uint64_t v4 = (uint64_t)(*this + 10);
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = (void *)(*(void *)(*(void *)((*this)[9] + 32 * *(unsigned int *)(v4 + 56) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8))
  {
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  unsigned int v8 = *this;
  unint64_t v9 = *((unsigned int *)*this + 11);
  uint64_t v10 = (v9 >> 23) & 1;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v11 = &(*this)[2 * v10 + 8];
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *((_DWORD *)v11 + 16);
  int v13 = v9 & 0x800000;
  if ((v9 & 0x800000) != 0)
  {
    uint64_t v14 = v8[9];
    if (!v12)
    {
LABEL_21:
      uint64_t v17 = 0;
      unint64_t v16 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v14 = 0;
    if (!v12) {
      goto LABEL_21;
    }
  }
  uint64_t v15 = (*((_DWORD *)v11 + 15) + *((_DWORD *)v11 + 14));
  if (!*(void *)(v14 + 32 * v15 + 24)) {
    goto LABEL_21;
  }
  unint64_t v16 = (void *)(*(void *)(*(void *)(v8[9] + 32 * v15 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8))
  {
    uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  }
  else
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  unsigned int v8 = *this;
  unint64_t v9 = *((unsigned int *)*this + 11);
  uint64_t v10 = (v9 >> 23) & 1;
  int v13 = v9 & 0x800000;
LABEL_22:
  uint64_t v18 = &v8[2 * v10 + 8];
  if (!BYTE3(v9)) {
    uint64_t v18 = 0;
  }
  int v19 = *((_DWORD *)v18 + 17);
  if (v13)
  {
    uint64_t v20 = v8[9];
    if (!v19)
    {
LABEL_32:
      uint64_t v23 = 0;
      unsigned int v22 = 0;
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v20 = 0;
    if (!v19) {
      goto LABEL_32;
    }
  }
  uint64_t v21 = (*((_DWORD *)v18 + 15) + *((_DWORD *)v18 + 14) + *((_DWORD *)v18 + 16));
  if (!*(void *)(v20 + 32 * v21 + 24)) {
    goto LABEL_32;
  }
  unsigned int v22 = (void *)(*(void *)(*(void *)(v8[9] + 32 * v21 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8))
  {
    uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
  }
  else
  {
    unsigned int v22 = 0;
    uint64_t v23 = 0;
  }
  unsigned int v8 = *this;
  unint64_t v9 = *((unsigned int *)*this + 11);
  uint64_t v10 = (v9 >> 23) & 1;
  int v13 = v9 & 0x800000;
LABEL_33:
  uint64_t v24 = &v8[2 * v10 + 8];
  if (!BYTE3(v9)) {
    uint64_t v24 = 0;
  }
  int v25 = *((_DWORD *)v24 + 18);
  if (v13)
  {
    uint64_t v26 = v8[9];
    if (v25) {
      goto LABEL_37;
    }
LABEL_43:
    uint64_t v28 = 0;
    goto LABEL_44;
  }
  uint64_t v26 = 0;
  if (!v25) {
    goto LABEL_43;
  }
LABEL_37:
  uint64_t v27 = (*((_DWORD *)v24 + 15) + *((_DWORD *)v24 + 14) + *((_DWORD *)v24 + 16) + *((_DWORD *)v24 + 17));
  uint64_t v28 = *(void *)(v26 + 32 * v27 + 24);
  if (v28)
  {
    uint64_t v29 = (void *)(*(void *)(*(void *)(v8[9] + 32 * v27 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v29 + 8))
    {
      uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v29 + 8);
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v28 = 0;
    }
    unsigned int v8 = *this;
    unint64_t v9 = *((unsigned int *)*this + 11);
    uint64_t v10 = (v9 >> 23) & 1;
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v29 = 0;
LABEL_45:
  uint64_t v30 = (uint64_t)&v8[2 * v10 + 8];
  if (!BYTE3(v9)) {
    uint64_t v30 = 0;
  }
}

uint64_t mlir::mps::anonymous namespace'::verifyGRU(uint64_t *a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  v149[0] = a4;
  v149[1] = a5;
  v148[0] = a6;
  v148[1] = a7;
  v147[0] = a9;
  v147[1] = a10;
  v146[0] = a13;
  v146[1] = a14;
  v145[0] = a15;
  v145[1] = a16;
  if (!a4) {
    return 1;
  }
  uint64_t v16 = 1;
  if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || !a6
    || *(_UNKNOWN **)(*(void *)a6 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return v16;
  }
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v149);
  unsigned int v22 = v21;
  uint64_t v23 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v148);
  if (v22 != (const char *)3)
  {
    v143[0] = (const void **)"Invalid input tensor rank: ";
    __int16 v144 = 259;
    mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
    if (v153)
    {
      LODWORD(v150) = 5;
      uint64_t v151 = v22;
      uint64_t v28 = (uint64_t *)&v150;
      uint64_t v29 = (char *)v156;
      if (v157 >= HIDWORD(v157))
      {
        unint64_t v121 = v157 + 1;
        if (v156 <= &v150 && (char *)v156 + 24 * v157 > (char *)&v150)
        {
          int64_t v133 = (char *)&v150 - (unsigned char *)v156;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v121, 24);
          uint64_t v29 = (char *)v156;
          uint64_t v28 = (uint64_t *)((char *)v156 + v133);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v121, 24);
          uint64_t v28 = (uint64_t *)&v150;
          uint64_t v29 = (char *)v156;
        }
      }
      uint64_t v30 = &v29[24 * v157];
      long long v31 = *(_OWORD *)v28;
      *((void *)v30 + 2) = v28[2];
      *(_OWORD *)uint64_t v30 = v31;
      uint64_t v32 = (v157 + 1);
      LODWORD(v157) = v157 + 1;
      if (v153)
      {
        LODWORD(v150) = 3;
        uint64_t v151 = ", should be 3.";
        uint64_t v152 = 14;
        uint64_t v33 = (uint64_t *)&v150;
        uint64_t v34 = (char *)v156;
        if (v32 >= HIDWORD(v157))
        {
          unint64_t v122 = v32 + 1;
          BOOL v123 = (char *)v156 + 24 * v32 > (char *)&v150;
          if (v156 <= &v150 && v123)
          {
            int64_t v134 = (char *)&v150 - (unsigned char *)v156;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v122, 24);
            uint64_t v34 = (char *)v156;
            uint64_t v33 = (uint64_t *)((char *)v156 + v134);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v122, 24);
            uint64_t v33 = (uint64_t *)&v150;
            uint64_t v34 = (char *)v156;
          }
        }
        uint64_t v35 = &v34[24 * v157];
        long long v36 = *(_OWORD *)v33;
        *((void *)v35 + 2) = v33[2];
        *(_OWORD *)uint64_t v35 = v36;
        LODWORD(v157) = v157 + 1;
      }
    }
    uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v153);
    if (v153) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v153);
    }
    if (!v163) {
      return v16;
    }
    uint64_t v37 = (void **)__p;
    if (__p)
    {
      long long v38 = v162;
      long long v39 = __p;
      if (v162 != __p)
      {
        do
          long long v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        long long v39 = __p;
      }
      unint64_t v162 = v37;
      operator delete(v39);
    }
    long long v40 = v159;
    if (v159)
    {
      long long v41 = v160;
      long long v42 = v159;
      if (v160 != v159)
      {
        do
        {
          int v44 = (void *)*--v41;
          uint64_t v43 = v44;
          *long long v41 = 0;
          if (v44) {
            operator delete[](v43);
          }
        }
        while (v41 != v40);
        long long v42 = v159;
      }
      unint64_t v160 = v40;
      operator delete(v42);
    }
    long long v56 = v156;
    if (v156 == v158) {
      return v16;
    }
LABEL_54:
    free(v56);
    return v16;
  }
  unint64_t v142 = v24;
  if (v24 <= 1)
  {
    __int16 v144 = 259;
    mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
    int v25 = (uint64_t *)&v142;
    goto LABEL_8;
  }
  uint64_t v45 = *(void *)(ArgAttrsAttr + 16);
  uint64_t v46 = v45;
  if ((a2 & 1) == 0)
  {
    uint64_t v46 = 0x8000000000000000;
    if (v45 != 0x8000000000000000)
    {
      uint64_t v46 = v45 / 3;
      if (3 * (v45 / 3) != v45)
      {
        v143[0] = (const void **)"Invalid input last dimension size: ";
        __int16 v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        uint64_t v89 = mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&v153, (uint64_t *)(ArgAttrsAttr + 16));
        uint64_t v27 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v89, ", should be divisible by three.");
        goto LABEL_9;
      }
    }
  }
  unint64_t v47 = 0;
  unint64_t v48 = v24 - 2;
  do
  {
    if (v47 < v48) {
      uint64_t v49 = 1;
    }
    else {
      uint64_t v49 = v46;
    }
    if (v48 == v47) {
      v49 *= 3;
    }
    uint64_t v50 = *(void *)(v23 + 8 * v47);
    if (v49 != 0x8000000000000000 && v50 != 0x8000000000000000 && v50 != v49)
    {
      __int16 v144 = 259;
      mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
      if (v153)
      {
        LODWORD(v150) = 3;
        uint64_t v151 = "matrix of size [";
        uint64_t v152 = 16;
        long long v57 = (uint64_t *)&v150;
        long long v58 = (char *)v156;
        if (v157 >= HIDWORD(v157))
        {
          unint64_t v124 = v157 + 1;
          if (v156 <= &v150 && (char *)v156 + 24 * v157 > (char *)&v150)
          {
            int64_t v135 = (char *)&v150 - (unsigned char *)v156;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v124, 24);
            long long v58 = (char *)v156;
            long long v57 = (uint64_t *)((char *)v156 + v135);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v124, 24);
            long long v57 = (uint64_t *)&v150;
            long long v58 = (char *)v156;
          }
        }
        int32x4_t v59 = &v58[24 * v157];
        long long v60 = *(_OWORD *)v57;
        *((void *)v59 + 2) = v57[2];
        *(_OWORD *)int32x4_t v59 = v60;
        uint64_t v61 = (v157 + 1);
        LODWORD(v157) = v157 + 1;
        if (v153)
        {
          LODWORD(v150) = 2;
          uint64_t v151 = (const char *)(3 * v46);
          uint64_t v62 = (uint64_t *)&v150;
          uint64_t v63 = (char *)v156;
          if (v61 >= HIDWORD(v157))
          {
            unint64_t v125 = v61 + 1;
            BOOL v126 = (char *)v156 + 24 * v61 > (char *)&v150;
            if (v156 <= &v150 && v126)
            {
              int64_t v136 = (char *)&v150 - (unsigned char *)v156;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v125, 24);
              uint64_t v63 = (char *)v156;
              uint64_t v62 = (uint64_t *)((char *)v156 + v136);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v125, 24);
              uint64_t v62 = (uint64_t *)&v150;
              uint64_t v63 = (char *)v156;
            }
          }
          long long v64 = &v63[24 * v157];
          long long v65 = *(_OWORD *)v62;
          *((void *)v64 + 2) = v62[2];
          *(_OWORD *)long long v64 = v65;
          uint64_t v66 = (v157 + 1);
          LODWORD(v157) = v157 + 1;
          if (v153)
          {
            LODWORD(v150) = 3;
            uint64_t v151 = ", ";
            uint64_t v152 = 2;
            long long v67 = (uint64_t *)&v150;
            uint64_t v68 = (char *)v156;
            if (v66 >= HIDWORD(v157))
            {
              unint64_t v127 = v66 + 1;
              BOOL v128 = (char *)v156 + 24 * v66 > (char *)&v150;
              if (v156 <= &v150 && v128)
              {
                int64_t v137 = (char *)&v150 - (unsigned char *)v156;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v127, 24);
                uint64_t v68 = (char *)v156;
                long long v67 = (uint64_t *)((char *)v156 + v137);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v127, 24);
                long long v67 = (uint64_t *)&v150;
                uint64_t v68 = (char *)v156;
              }
            }
            uint64_t v69 = &v68[24 * v157];
            long long v70 = *(_OWORD *)v67;
            *((void *)v69 + 2) = v67[2];
            *(_OWORD *)uint64_t v69 = v70;
            uint64_t v71 = (v157 + 1);
            LODWORD(v157) = v157 + 1;
            if (v153)
            {
              LODWORD(v150) = 2;
              uint64_t v151 = (const char *)v46;
              uint64_t v72 = (uint64_t *)&v150;
              unint64_t v73 = (char *)v156;
              if (v71 >= HIDWORD(v157))
              {
                unint64_t v129 = v71 + 1;
                BOOL v130 = (char *)v156 + 24 * v71 > (char *)&v150;
                if (v156 <= &v150 && v130)
                {
                  int64_t v138 = (char *)&v150 - (unsigned char *)v156;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v129, 24);
                  unint64_t v73 = (char *)v156;
                  uint64_t v72 = (uint64_t *)((char *)v156 + v138);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v129, 24);
                  uint64_t v72 = (uint64_t *)&v150;
                  unint64_t v73 = (char *)v156;
                }
              }
              int64x2_t v74 = &v73[24 * v157];
              long long v75 = *(_OWORD *)v72;
              *((void *)v74 + 2) = v72[2];
              *(_OWORD *)int64x2_t v74 = v75;
              uint64_t v76 = (v157 + 1);
              LODWORD(v157) = v157 + 1;
              if (v153)
              {
                LODWORD(v150) = 3;
                uint64_t v151 = "].";
                uint64_t v152 = 2;
                uint64_t v77 = (uint64_t *)&v150;
                uint64_t v78 = (char *)v156;
                if (v76 >= HIDWORD(v157))
                {
                  unint64_t v131 = v76 + 1;
                  BOOL v132 = (char *)v156 + 24 * v76 > (char *)&v150;
                  if (v156 <= &v150 && v132)
                  {
                    int64_t v139 = (char *)&v150 - (unsigned char *)v156;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v131, 24);
                    uint64_t v78 = (char *)v156;
                    uint64_t v77 = (uint64_t *)((char *)v156 + v139);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v131, 24);
                    uint64_t v77 = (uint64_t *)&v150;
                    uint64_t v78 = (char *)v156;
                  }
                }
                uint64_t v79 = &v78[24 * v157];
                long long v80 = *(_OWORD *)v77;
                *((void *)v79 + 2) = v77[2];
                *(_OWORD *)uint64_t v79 = v80;
                LODWORD(v157) = v157 + 1;
              }
            }
          }
        }
      }
      uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v153);
      if (v153) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v153);
      }
      if (!v163) {
        return v16;
      }
      long long v81 = (void **)__p;
      if (__p)
      {
        uint64_t v82 = v162;
        uint64_t v83 = __p;
        if (v162 != __p)
        {
          do
            uint64_t v82 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v82 - 1);
          while (v82 != v81);
          uint64_t v83 = __p;
        }
        unint64_t v162 = v81;
        operator delete(v83);
      }
      uint64_t v84 = v159;
      if (v159)
      {
        char v85 = v160;
        long long v86 = v159;
        if (v160 != v159)
        {
          do
          {
            uint64_t v88 = (void *)*--v85;
            uint64_t v87 = v88;
            *char v85 = 0;
            if (v88) {
              operator delete[](v87);
            }
          }
          while (v85 != v84);
          long long v86 = v159;
        }
        unint64_t v160 = v84;
        operator delete(v86);
      }
      long long v56 = v156;
      if (v156 == v158) {
        return v16;
      }
      goto LABEL_54;
    }
    ++v47;
  }
  while (v24 != v47);
  if (!v147[0]
    || *(_UNKNOWN **)(*(void *)v147[0] + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_103:
    if (a11 && *(_UNKNOWN **)(*a11 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      if (a2)
      {
        uint64_t v96 = (void *)v149[0];
        unint64_t v97 = (void *)v149[0];
      }
      else
      {
        unint64_t v153 = &v155;
        uint64_t v154 = 0x400000000;
        uint64_t v155 = *(void *)ArgAttrsAttr;
        LODWORD(v154) = 1;
        unint64_t v156 = *(void **)(ArgAttrsAttr + 8);
        LODWORD(v154) = 2;
        uint64_t v157 = *(void *)(ArgAttrsAttr + 16);
        LODWORD(v154) = 3;
        if (v157 != 0x8000000000000000) {
          *((void *)v153 + v154 - 1) = v157 / 3;
        }
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v149);
        uint64_t v99 = (void *)mlir::RankedTensorType::get((uint64_t)&v155, 3, OperandRange, 0);
        unint64_t v97 = v99;
        if (v99) {
          mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v99 + 8);
        }
        if (v153 != &v155) {
          free(v153);
        }
        uint64_t v96 = (void *)v149[0];
      }
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v96);
      if (!mlir::OpTrait::util::getBroadcastedType(v97, a11, ElementTypeOrSelf))
      {
        goto LABEL_145;
      }
    }
    if (v146[0]
      && *(_UNKNOWN **)(*(void *)v146[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      unint64_t v101 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v146);
      if (v102 != 3) {
        goto LABEL_131;
      }
      uint64_t v103 = 3;
      if (a3) {
        uint64_t v103 = 4;
      }
      if (*v101 != 0x8000000000000000
        && *(void *)ArgAttrsAttr != 0x8000000000000000
        && *(void *)ArgAttrsAttr != *v101)
      {
        goto LABEL_131;
      }
      uint64_t v104 = v101[1];
      if (v104 != 0x8000000000000000)
      {
        uint64_t v105 = *(void *)(ArgAttrsAttr + 8);
        if (v105 != 0x8000000000000000 && v105 != v104) {
          goto LABEL_131;
        }
      }
      uint64_t v106 = *(void *)(ArgAttrsAttr + 16);
      unint64_t v107 = v106 * v103;
      if (v106 == 0x8000000000000000) {
        unint64_t v107 = 0x8000000000000000;
      }
      uint64_t v108 = v101[2];
      if (v108 != 0x8000000000000000 && v107 != 0x8000000000000000 && v107 != v108)
      {
LABEL_131:
LABEL_145:
        v143[0] = (const void **)v109;
        __int16 v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        uint64_t v27 = (uint64_t)&v153;
        goto LABEL_9;
      }
    }
    if (v145[0] && (a3 & 1) == 0)
    {
      goto LABEL_145;
    }
    if (v145[0]
      && *(_UNKNOWN **)(*(void *)v145[0] + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      BOOL v110 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v145);
      if (v111 != 1)
      {
        uint64_t v119 = v111;
        __int16 v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        unint64_t v150 = v119;
        uint64_t v120 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)&v153, (uint64_t *)&v150);
        uint64_t v27 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v120, ", should be 1.");
        goto LABEL_9;
      }
      unint64_t v150 = v46;
      if (v46 != 0x8000000000000000 && *v110 != 0x8000000000000000 && *v110 != v46)
      {
        __int16 v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        uint64_t v116 = (uint64_t)&v153;
        int64_t v117 = (uint64_t *)&v150;
LABEL_146:
        uint64_t v118 = mlir::InFlightDiagnostic::operator<<<long long &>(v116, v117);
        uint64_t v27 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v118, ".");
        goto LABEL_9;
      }
    }
    return 1;
  }
  uint64_t v53 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v147);
  unint64_t v150 = v54;
  unint64_t v55 = v54 - 1;
  if (v54 > 1)
  {
    uint64_t v90 = v53;
    unint64_t v91 = 0;
    while (1)
    {
      if (v91 >= v54 - 2)
      {
        uint64_t v92 = *(void *)(ArgAttrsAttr - 8 * v54 + 24 + 8 * v91);
        uint64_t v140 = v92;
        if (v55 != v91 || (a2 & 1) != 0 || v92 == 0x8000000000000000) {
          goto LABEL_94;
        }
      }
      else
      {
        uint64_t v140 = 1;
        uint64_t v92 = 1;
        if (v55 != v91 || (a2 & 1) != 0) {
          goto LABEL_94;
        }
      }
      v92 /= 3;
      uint64_t v140 = v92;
LABEL_94:
      uint64_t v93 = *(void *)(v53 + 8 * v91);
      if (v92 != 0x8000000000000000 && v93 != 0x8000000000000000 && v93 != v92)
      {
        unint64_t v141 = v91;
        __int16 v144 = 259;
        mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
        uint64_t v113 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)&v153, (uint64_t *)&v141);
        uint64_t v114 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v113, "] = ");
        uint64_t v115 = mlir::InFlightDiagnostic::operator<<<long long &>(v114, (uint64_t *)(v90 + 8 * v141));
        uint64_t v116 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v115, ", expected ");
        int64_t v117 = &v140;
        goto LABEL_146;
      }
      if (v54 == ++v91) {
        goto LABEL_103;
      }
    }
  }
  __int16 v144 = 259;
  mlir::Operation::emitOpError(a1, v143, (uint64_t)&v153);
  int v25 = (uint64_t *)&v150;
LABEL_8:
  uint64_t v26 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)&v153, v25);
  uint64_t v27 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v26, ", should be 2 or greater.");
LABEL_9:
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v27);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v153);
  return v16;
}

BOOL mlir::mps::GRUOp::getResetAfter(mlir::mps::GRUOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 24) != 0;
}

uint64_t mlir::mps::GRUGradientOp::verify(uint64_t **this)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  if (v3) {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v72 = v2;
  uint64_t v73 = v3;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v4 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = (void *)(*(void *)(*(void *)((*this)[9]
                                        + 32
                                        * (*((_DWORD *)v4 + 13)
                                                       + *((_DWORD *)v4 + 12)
                                                       + *((_DWORD *)v4 + 14))
                                        + 24)
                            + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  if (v6) {
    uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  v71[0] = v5;
  v71[1] = v6;
  if (*((unsigned char *)*this + 47)) {
    uint64_t v7 = (uint64_t)(*this + 10);
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = (void *)(*(void *)(*(void *)((*this)[9] + 32 * *(unsigned int *)(v7 + 48) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8))
  {
    uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = 0;
  }
  if (*((unsigned char *)*this + 47)) {
    uint64_t v10 = (uint64_t)(*this + 10);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (void *)(*(void *)(*(void *)((*this)[9]
                                         + 32 * (*(_DWORD *)(v10 + 52) + *(_DWORD *)(v10 + 48))
                                         + 24)
                             + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8))
  {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = *this;
  unint64_t v15 = *((unsigned int *)*this + 11);
  uint64_t v16 = (v15 >> 23) & 1;
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v17 = &(*this)[2 * v16 + 8];
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = *((_DWORD *)v17 + 16);
  int v19 = v15 & 0x800000;
  if ((v15 & 0x800000) != 0)
  {
    uint64_t v20 = v14[9];
    if (!v18)
    {
LABEL_33:
      uint64_t v67 = 0;
      unsigned int v22 = 0;
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v20 = 0;
    if (!v18) {
      goto LABEL_33;
    }
  }
  uint64_t v21 = (*((_DWORD *)v17 + 13) + *((_DWORD *)v17 + 12) + *((_DWORD *)v17 + 14) + *((_DWORD *)v17 + 15));
  if (!*(void *)(v20 + 32 * v21 + 24)) {
    goto LABEL_33;
  }
  unsigned int v22 = (void *)(*(void *)(*(void *)(v14[9] + 32 * v21 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8))
  {
    uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
  }
  else
  {
    unsigned int v22 = 0;
    uint64_t v67 = 0;
  }
  uint64_t v14 = *this;
  unint64_t v15 = *((unsigned int *)*this + 11);
  uint64_t v16 = (v15 >> 23) & 1;
  int v19 = v15 & 0x800000;
LABEL_34:
  uint64_t v23 = &v14[2 * v16 + 8];
  if (!BYTE3(v15)) {
    uint64_t v23 = 0;
  }
  int v24 = *((_DWORD *)v23 + 17);
  if (v19)
  {
    uint64_t v25 = v14[9];
    uint64_t v68 = v13;
    if (!v24)
    {
LABEL_44:
      uint64_t v28 = 0;
      uint64_t v27 = 0;
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v68 = v13;
    if (!v24) {
      goto LABEL_44;
    }
  }
  uint64_t v26 = (*((_DWORD *)v23 + 13)
                     + *((_DWORD *)v23 + 12)
                     + *((_DWORD *)v23 + 14)
                     + *((_DWORD *)v23 + 15)
                     + *((_DWORD *)v23 + 16));
  if (!*(void *)(v25 + 32 * v26 + 24)) {
    goto LABEL_44;
  }
  uint64_t v27 = (void *)(*(void *)(*(void *)(v14[9] + 32 * v26 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8))
  {
    uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v14 = *this;
  unint64_t v15 = *((unsigned int *)*this + 11);
  uint64_t v16 = (v15 >> 23) & 1;
  int v19 = v15 & 0x800000;
LABEL_45:
  uint64_t v29 = &v14[2 * v16 + 8];
  if (!BYTE3(v15)) {
    uint64_t v29 = 0;
  }
  int v30 = *((_DWORD *)v29 + 18);
  if (v19)
  {
    uint64_t v31 = v14[9];
    if (!v30) {
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v31 = 0;
    if (!v30) {
      goto LABEL_56;
    }
  }
  uint64_t v32 = (*((_DWORD *)v29 + 13)
                     + *((_DWORD *)v29 + 12)
                     + *((_DWORD *)v29 + 14)
                     + *((_DWORD *)v29 + 15)
                     + *((_DWORD *)v29 + 16)
                     + *((_DWORD *)v29 + 17));
  if (*(void *)(v31 + 32 * v32 + 24))
  {
    uint64_t v33 = (void *)(*(void *)(*(void *)(v14[9] + 32 * v32 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v33 + 8))
    {
      uint64_t v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v33 + 8);
      if (!v2) {
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (!v2) {
        goto LABEL_76;
      }
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v34 = 0;
  uint64_t v33 = 0;
  if (!v2)
  {
LABEL_76:
    if (HIBYTE(*((_DWORD *)*this + 11))) {
      unint64_t v49 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
    }
    else {
      unint64_t v49 = 0;
    }
  }
LABEL_57:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v72)
    || !v71[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v71))
  {
    goto LABEL_76;
  }
  uint64_t v66 = v9;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v72);
  uint64_t v37 = v36;
  long long v38 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v71);
  BOOL v40 = v37 == v39;
  if (v37 && v37 == v39)
  {
    uint64_t v41 = v37 - 1;
    do
    {
      uint64_t v43 = *ArgAttrsAttr++;
      uint64_t v42 = v43;
      uint64_t v45 = *v38++;
      uint64_t v44 = v45;
      BOOL v40 = v42 == 0x8000000000000000 || v42 == v44 || v44 == 0x8000000000000000;
      BOOL v48 = v41-- != 0;
    }
    while (v48 && v40);
  }
  uint64_t v9 = v66;
  if (v40) {
    goto LABEL_76;
  }
  __int16 v70 = 259;
  mlir::OpState::emitOpError(this, &v69, (uint64_t)v77);
  if (v77[0])
  {
    int v74 = 3;
    uint64_t v76 = 28;
    uint64_t v52 = &v74;
    uint64_t v53 = (char *)v78;
    if (v79 >= v80)
    {
      unint64_t v64 = v79 + 1;
      if (v78 <= &v74 && (char *)v78 + 24 * v79 > (char *)&v74)
      {
        int64_t v65 = (char *)&v74 - (unsigned char *)v78;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
        uint64_t v53 = (char *)v78;
        uint64_t v52 = (int *)((char *)v78 + v65);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v81, v64, 24);
        uint64_t v52 = &v74;
        uint64_t v53 = (char *)v78;
      }
    }
    unint64_t v54 = &v53[24 * v79];
    long long v55 = *(_OWORD *)v52;
    *((void *)v54 + 2) = *((void *)v52 + 2);
    *(_OWORD *)unint64_t v54 = v55;
    ++v79;
  }
  uint64_t v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v77);
  if (v77[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v77);
  }
  if (v86)
  {
    long long v56 = (void **)__p;
    if (__p)
    {
      long long v57 = v85;
      long long v58 = __p;
      if (v85 != __p)
      {
        do
          long long v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        long long v58 = __p;
      }
      char v85 = v56;
      operator delete(v58);
    }
    int32x4_t v59 = v82;
    if (v82)
    {
      long long v60 = v83;
      uint64_t v61 = v82;
      if (v83 != v82)
      {
        do
        {
          uint64_t v63 = (void *)*--v60;
          uint64_t v62 = v63;
          *long long v60 = 0;
          if (v63) {
            operator delete[](v62);
          }
        }
        while (v60 != v59);
        uint64_t v61 = v82;
      }
      uint64_t v83 = v59;
      operator delete(v61);
    }
    if (v78 != v81) {
      free(v78);
    }
  }
  return v50;
}

uint64_t mlir::mps::GRUOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v62[2] = *MEMORY[0x1E4F143B8];
  v62[0] = a4;
  v62[1] = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
    uint64_t v19 = *((void *)a7 + 6);
    *(_OWORD *)unint64_t v47 = *(long long *)((char *)a7 + 56);
    v48[0] = *((_DWORD *)a7 + 18);
  }
  else
  {
    uint64_t v19 = 0;
    v48[0] = 0;
    long long v16 = 0uLL;
    *(_OWORD *)unint64_t v47 = 0u;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v49 = a6;
  v50[0] = 0;
  char v51 = 0;
  long long v52 = v16;
  long long v53 = v17;
  long long v54 = v18;
  uint64_t v55 = v19;
  long long v56 = *(_OWORD *)v47;
  int v57 = v48[0];
  uint64_t v58 = a9;
  uint64_t v59 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v49);
    if (v51) {
      char v51 = 0;
    }
    mlir::OperationName::OperationName(v50, "mps.gru", 7, Context);
    char v51 = 1;
  }
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  if (!a5)
  {
    uint64_t v25 = mlir::Float32Type::get(this, a2);
    uint64_t v26 = mlir::UnrankedTensorType::get(v25);
    uint64_t v27 = *(unsigned int *)(a11 + 8);
    if (v27 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v27 + 1, 8);
      LODWORD(v27) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v27) = v26;
    goto LABEL_38;
  }
  mlir::UnknownLoc::get(this, a2);
  unint64_t v21 = *(void *)(mlir::ValueRange::dereference_iterator(v62, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v21) {
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot handle a non-tensor input type");
  }
  BOOL v22 = *(void *)(*(void *)v21 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && *(void *)(*(void *)v21 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  unint64_t v23 = *(void *)(*(void *)v21 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && *(void *)(*(void *)v21 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      ? 0
      : v21;
  unint64_t v46 = v23;
  if (v22) {
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot handle a non-tensor input type");
  }
  uint64_t v28 = v21;
  if (*(_UNKNOWN **)(*(void *)v21 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t Value = (unsigned char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
    uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v46);
    uint64_t v32 = (unsigned char *)(v30 + 8 * v31);
    v47[0] = v48;
    v47[1] = (void *)0x400000000;
    uint64_t v33 = v32 - Value;
    if ((unint64_t)(v32 - Value) < 0x21)
    {
      int v34 = 0;
      uint64_t v35 = v48;
      if (v32 == Value)
      {
LABEL_24:
        uint64_t v36 = v34 + ((unint64_t)v33 >> 3);
        LODWORD(v47[1]) = v36;
        uint64_t v37 = v36 - 1;
        uint64_t v38 = *(void *)&v35[2 * v36 - 2];
        if (v38 != 0x8000000000000000) {
          *(void *)&v35[2 * v37] = v38 / 3;
        }
        uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v46);
        uint64_t v28 = mlir::RankedTensorType::get((uint64_t)v35, v36, ElementType, 0);
        BOOL v40 = v47[0];
        if (v38 != 0x8000000000000000)
        {
          uint64_t v41 = 3;
          if (*((void *)&v53 + 1)) {
            uint64_t v41 = 4;
          }
          *((void *)v47[0] + v37) *= v41;
        }
        uint64_t v42 = LODWORD(v47[1]);
        uint64_t v43 = mlir::TensorType::getElementType((mlir::TensorType *)&v46);
        unint64_t v21 = mlir::RankedTensorType::get((uint64_t)v40, v42, v43, 0);
        if (v47[0] != v48) {
          free(v47[0]);
        }
        goto LABEL_32;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v47, v48, v33 >> 3, 8);
      int v34 = (int)v47[1];
      uint64_t v35 = v47[0];
      if (v32 == Value) {
        goto LABEL_24;
      }
    }
    memcpy(&v35[2 * v34], Value, v32 - Value);
    int v34 = (int)v47[1];
    uint64_t v35 = v47[0];
    goto LABEL_24;
  }
LABEL_32:
  uint64_t v44 = *(unsigned int *)(a11 + 8);
  if (v44 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
    LODWORD(v44) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v44) = v28;
  uint64_t v45 = (*(_DWORD *)(a11 + 8) + 1);
  *(_DWORD *)(a11 + 8) = v45;
  if (!*((void *)&v54 + 1)) {
    return 1;
  }
  if (v45 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v45 + 1, 8);
    LODWORD(v45) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v45) = v21;
LABEL_38:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::GRUGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = a9;
  uint64_t v13 = a10;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v60 = a4;
  *((void *)&v60 + 1) = a5;
  if (a5)
  {
    unint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(&v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v17)
    {
      BOOL v18 = *(void *)(*(void *)v17 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
         && *(void *)(*(void *)v17 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
      if (*(void *)(*(void *)v17 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && *(void *)(*(void *)v17 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = v17;
      }
      uint64_t v50 = v19;
      if (!v18)
      {
        if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
          goto LABEL_22;
        }
        uint64_t Value = (unsigned char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
        uint64_t v21 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
        unint64_t v23 = (unsigned char *)(v21 + 8 * v22);
        *(void *)&long long v51 = v52;
        *((void *)&v51 + 1) = 0x400000000;
        uint64_t v24 = v23 - Value;
        if ((unint64_t)(v23 - Value) < 0x21)
        {
          int v25 = 0;
          uint64_t v26 = v52;
          if (v23 == Value)
          {
LABEL_18:
            uint64_t v14 = a9;
            uint64_t v13 = a10;
            uint64_t v28 = v25 + ((unint64_t)v24 >> 3);
            DWORD2(v51) = v28;
            uint64_t v29 = *(void *)&v26[8 * v28 - 8];
            if (v29 != 0x8000000000000000) {
              *(void *)&v26[8 * v28 - 8] = 3 * v29;
            }
            uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v50);
            unint64_t v17 = mlir::RankedTensorType::get((uint64_t)v26, v28, ElementType, 0);
            if ((char *)v51 != v52) {
              free((void *)v51);
            }
LABEL_22:
            uint64_t v31 = *(unsigned int *)(a11 + 8);
            if (v31 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v31 + 1, 8);
              LODWORD(v31) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v31) = v17;
            ++*(_DWORD *)(a11 + 8);
            long long v51 = v60;
            if (*((void *)&v60 + 1) < 2uLL)
            {
              if (!mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands")) {
                return 0;
              }
            }
            else
            {
              unint64_t v32 = *(void *)(mlir::ValueRange::dereference_iterator(&v51, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v33 = *(unsigned int *)(a11 + 8);
              if (v33 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
                LODWORD(v33) = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v33) = v32;
              ++*(_DWORD *)(a11 + 8);
            }
            uint64_t v49 = 0;
            {
              uint64_t v34 = v49;
              uint64_t v35 = *(unsigned int *)(a11 + 8);
              if (v35 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
                LODWORD(v35) = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v35) = v34;
              ++*(_DWORD *)(a11 + 8);
              if (a7)
              {
                long long v36 = *a7;
                long long v37 = a7[1];
                long long v38 = a7[2];
                v61[0] = a7[3];
                *(_OWORD *)((char *)v61 + 12) = *(long long *)((char *)a7 + 60);
              }
              else
              {
                long long v36 = 0uLL;
                memset(v61, 0, 28);
                long long v37 = 0uLL;
                long long v38 = 0uLL;
              }
              long long v39 = v60;
              *(void *)&long long v51 = a6;
              BYTE8(v51) = 0;
              v52[0] = 0;
              long long v53 = v36;
              long long v54 = v37;
              long long v55 = v38;
              *(_OWORD *)long long v56 = v61[0];
              *(_OWORD *)&v56[12] = *(_OWORD *)((char *)v61 + 12);
              uint64_t v57 = v14;
              uint64_t v58 = v13;
              if (a6)
              {
                long long v48 = v60;
                uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v51);
                if (v52[0]) {
                  v52[0] = 0;
                }
                mlir::OperationName::OperationName((char *)&v51 + 8, "mps.gru_gradient", 16, Context);
                v52[0] = 1;
                long long v39 = v48;
              }
              long long v59 = v39;
              int v41 = vaddvq_s32(*(int32x4_t *)v56) + *(_DWORD *)&v56[16];
              int v42 = *(_DWORD *)&v56[24];
              *(void *)&v61[0] = v39;
              int v43 = v41 + *(_DWORD *)&v56[20];
              *((void *)&v61[0] + 1) = (v41 + *(_DWORD *)&v56[20]);
              if (v41 + *(_DWORD *)&v56[20])
              {
                unint64_t v44 = mlir::ValueRange::offset_base(v61, (v41 + *(_DWORD *)&v56[20]));
                if (*((void *)&v61[0] + 1) == v42 + v43) {
                  return 1;
                }
              }
              else
              {
                unint64_t v44 = v39;
                if (!*(_DWORD *)&v56[24]) {
                  return 1;
                }
              }
              v61[0] = v44;
              uint64_t v45 = mlir::ValueRange::dereference_iterator(v61, 0);
              if (v45)
              {
                unint64_t v46 = *(void *)(v45 + 8) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v47 = *(unsigned int *)(a11 + 8);
                if (v47 >= *(_DWORD *)(a11 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v47 + 1, 8);
                  LODWORD(v47) = *(_DWORD *)(a11 + 8);
                }
                *(void *)(*(void *)a11 + 8 * v47) = v46;
                ++*(_DWORD *)(a11 + 8);
              }
              return 1;
            }
            return 0;
          }
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v52, v24 >> 3, 8);
          int v25 = DWORD2(v51);
          uint64_t v26 = (char *)v51;
          if (v23 == Value) {
            goto LABEL_18;
          }
        }
        memcpy(&v26[8 * v25], Value, v23 - Value);
        int v25 = DWORD2(v51);
        uint64_t v26 = (char *)v51;
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v50 = 0;
    }
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot handle a non-tensor input type");
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::ConcatOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, char *a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v82 = a4;
  unint64_t v83 = a5;
  if (a7) {
    uint64_t v16 = *a7;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v74 = a6;
  v75[0] = 0;
  char v76 = 0;
  uint64_t v77 = v16;
  uint64_t v78 = a9;
  unint64_t v17 = a5;
  uint64_t v79 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v74);
    if (v76) {
      char v76 = 0;
    }
    mlir::OperationName::OperationName(v75, "mps.concat", 10, Context);
    char v76 = 1;
    unint64_t v17 = v83;
  }
  unsigned int v80 = a4;
  unint64_t v81 = a5;
  if (v17 <= 1)
  {
    uint64_t v19 = mlir::Float32Type::get(this, a2);
    uint64_t v20 = mlir::UnrankedTensorType::get(v19);
    goto LABEL_75;
  }
  mlir::UnknownLoc::get(this, a2);
  if (v83 < 2) {
    uint64_t v21 = v82;
  }
  else {
    uint64_t v21 = (char *)mlir::ValueRange::offset_base(&v82, v83 - 1);
  }
  uint64_t v87 = v21;
  uint64_t v88 = 0;
  uint64_t v68 = mlir::ValueRange::dereference_iterator(&v87, 0);
  uint64_t v90 = v82;
  unint64_t v91 = v83 - 1;
  uint64_t v22 = mlir::ValueRange::dereference_iterator(&v90, 0);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v24 = ElementTypeOrSelf;
  LOBYTE(v72) = 0;
  char v73 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = v89;
  uint64_t v88 = 0x400000000;
  int v25 = v90;
  unint64_t v26 = v91;
  char v85 = v90;
  if (!v91)
  {
LABEL_68:
    uint64_t v20 = mlir::UnrankedTensorType::get(v24);
    char v56 = 1;
    uint64_t v57 = v87;
    if (v87 != v89) {
LABEL_73:
    }
      free(v57);
    goto LABEL_74;
  }
  uint64_t v64 = ElementTypeOrSelf;
  uint64_t v66 = (uint64_t)a2;
  char v67 = a3;
  int v65 = 0;
  uint64_t v27 = 0;
  unint64_t v69 = 0;
  int v28 = 0;
  unint64_t v29 = 0;
  uint64_t v30 = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
  int v31 = 1;
  while (1)
  {
    unint64_t v33 = *(void *)(mlir::ValueRange::dereference_iterator(&v85, v27) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = *(void **)(*(void *)v33 + 136);
    if (v34 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id && v34 != v30) {
      unint64_t v33 = 0;
    }
    unint64_t v71 = v33;
    if (!v33)
    {
      long long v53 = "cannot concat a non-tensor type";
LABEL_71:
      char v56 = mlir::emitOptionalError<char const(&)[39]>(v66, v67, v53);
      goto LABEL_72;
    }
    if (v28) {
      goto LABEL_43;
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v71)) {
      break;
    }
    int v28 = 0;
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v71)) {
      goto LABEL_15;
    }
LABEL_44:
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    uint64_t v70 = 1;
    if (v43) {
      unint64_t v44 = (uint64_t *)Value;
    }
    else {
      unint64_t v44 = &v70;
    }
    if (v43 <= 1) {
      uint64_t v45 = 1;
    }
    else {
      uint64_t v45 = v43;
    }
    if (v45 != v29)
    {
      long long v53 = "all inputs must have equal rank";
      goto LABEL_71;
    }
    unint64_t v46 = v30;
    uint64_t v47 = 0;
    long long v48 = v87;
    do
    {
      v84[0] = v48[v47];
      v84[1] = v44[v47];
      unint64_t v49 = mlir::mps::mergeDynamicDims(v84, 2);
      long long v48 = v87;
      *(void *)&v87[8 * v47++] = v49;
    }
    while (v29 != v47);
    uint64_t v30 = v46;
LABEL_15:
    if (v31)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v71))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
        if (v50 < 1)
        {
          uint64_t v52 = 1;
LABEL_61:
          v69 += v52;
          goto LABEL_16;
        }
        uint64_t v51 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
        uint64_t v52 = *(void *)(v51 + 8 * v72);
        if (v52 != 0x8000000000000000) {
          goto LABEL_61;
        }
      }
      unint64_t v69 = 0;
      int v31 = 0;
    }
LABEL_16:
    uint64_t v27 = ++v86;
    if (v85 == v25 && v27 == v26)
    {
      uint64_t v24 = v64;
      if (!v28) {
        goto LABEL_68;
      }
      long long v54 = v87;
      if (v65)
      {
        unint64_t v55 = 0x8000000000000000;
        if (v31) {
          unint64_t v55 = v69;
        }
        *(void *)&v87[8 * v72] = v55;
      }
      goto LABEL_91;
    }
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
  if (v36 <= 1) {
    unint64_t v29 = 1;
  }
  else {
    unint64_t v29 = v36;
  }
  if (!mlir::mps::getAxis(v66, v67, v68, v29, (uint64_t)&v72))
  {
    char v56 = 0;
LABEL_72:
    uint64_t v20 = 0;
    uint64_t v57 = v87;
    if (v87 == v89) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  if (v73)
  {
    uint64_t v37 = v88;
    if (v29 != v88)
    {
      if (v29 >= v88)
      {
        if (v29 > HIDWORD(v88))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v29, 8);
          uint64_t v37 = v88;
        }
        if (v29 != v37) {
          bzero(&v87[8 * v37], 8 * (v29 - v37));
        }
      }
      LODWORD(v88) = v29;
    }
    long long v38 = (unsigned char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    uint64_t v39 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    int v41 = (unsigned char *)(v39 + 8 * v40);
    if (v41 != v38) {
      memmove(v87, v38, v41 - v38);
    }
    int v65 = 1;
    int v28 = 1;
LABEL_43:
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v71)) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
  if (v29 > HIDWORD(v88))
  {
    LODWORD(v88) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v29, 8);
    long long v60 = v87;
    unint64_t v61 = v29;
    long long v54 = v87;
    goto LABEL_89;
  }
  long long v54 = v87;
  unint64_t v62 = v88;
  if (v88 >= v29) {
    unint64_t v63 = v29;
  }
  else {
    unint64_t v63 = v88;
  }
  if (v63) {
    memset_pattern16(v87, &unk_1811000C0, 8 * v63);
  }
  unint64_t v61 = v29 - v62;
  if (v29 > v62)
  {
    long long v60 = &v54[8 * v62];
LABEL_89:
    memset_pattern16(v60, &unk_1811000C0, 8 * v61);
  }
  LODWORD(v88) = v29;
  uint64_t v24 = v64;
LABEL_91:
  uint64_t v20 = mlir::RankedTensorType::get((uint64_t)v54, v88, v24, 0);
  char v56 = 1;
  uint64_t v57 = v87;
  if (v87 != v89) {
    goto LABEL_73;
  }
LABEL_74:
  if (!v56) {
    return 0;
  }
LABEL_75:
  unsigned int v58 = *(_DWORD *)(a11 + 8);
  if (v58 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v58 + 1, 8);
    unsigned int v58 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v58) = v20;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ConcatOp::verify(uint64_t **this)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v86 = v3;
    uint64_t v87 = v4;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v86)) {
      return 1;
    }
  }
  else
  {
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v86)) {
      return 1;
    }
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v86);
  uint64_t v6 = v5;
  LOBYTE(v84) = 0;
  char v85 = 0;
  if (!mlir::mps::getAxis((*this)[3], 1, *(void *)((*this)[9] + 32 * (*((_DWORD *)*this + 17) - 1) + 24), v5, (uint64_t)&v84))return 0; {
  if (!v85)
  }
    return 1;
  uint64_t v7 = v84;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v86);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v86);
  LOBYTE(v82) = 0;
  char v83 = 0;
  uint64_t v10 = *this;
  if ((*((unsigned char *)*this + 46) & 0x80) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  int v11 = *((_DWORD *)v10 + 17);
  uint64_t v12 = (v11 - 1);
  if (v11 == 1) {
    return 1;
  }
  uint64_t v13 = v10[9];
LABEL_13:
  uint64_t v14 = 0;
  uint64_t v15 = ~v7;
  uint64_t v16 = v7 + 1;
  uint64_t v76 = v6 + v15;
  long long v75 = &ArgAttrsAttr[v16];
  uint64_t v74 = v16;
  while (1)
  {
    unint64_t v17 = (void *)(*(void *)(*(void *)(v13 + 32 * v14 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v17)
    {
      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
      unsigned int v80 = v17;
      uint64_t v81 = v18;
      if (mlir::getElementTypeOrSelf(v17) == ElementTypeOrSelf) {
        goto LABEL_38;
      }
    }
    else
    {
      unsigned int v80 = 0;
      uint64_t v81 = 0;
      if (mlir::getElementTypeOrSelf(0) == ElementTypeOrSelf) {
        goto LABEL_38;
      }
    }
    v91[0] = (const void **)"element type of operand and result differ";
    LOWORD(v93) = 259;
    mlir::OpState::emitOpError(this, v91, (uint64_t)v109);
    if (v109[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v109);
    }
    if (v116)
    {
      uint64_t v19 = (void **)__p;
      if (__p)
      {
        uint64_t v20 = v115;
        uint64_t v21 = __p;
        if (v115 != __p)
        {
          do
            uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        uint64_t v115 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v112;
      if (v112)
      {
        unint64_t v23 = v113;
        uint64_t v24 = v112;
        if (v113 != v112)
        {
          do
          {
            unint64_t v26 = (void *)*--v23;
            int v25 = v26;
            *unint64_t v23 = 0;
            if (v26) {
              operator delete[](v25);
            }
          }
          while (v23 != v22);
          uint64_t v24 = v112;
        }
        uint64_t v113 = v22;
        operator delete(v24);
      }
      if (v110 != &v111) {
        free(v110);
      }
    }
LABEL_38:
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v80) & 1) == 0) {
      goto LABEL_15;
    }
    uint64_t v27 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
    uint64_t v79 = 1;
    if (v28) {
      unint64_t v29 = (uint64_t *)v27;
    }
    else {
      unint64_t v29 = &v79;
    }
    if (v28 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v28;
    }
    if (v30 != v6)
    {
      v91[0] = (const void **)"all inputs must have equal rank";
      LOWORD(v93) = 259;
      mlir::OpState::emitOpError(this, v91, (uint64_t)v101);
      if (v101[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v101);
      }
      if (v108)
      {
        int v31 = (void **)v106;
        if (v106)
        {
          unint64_t v32 = v107;
          unint64_t v33 = v106;
          if (v107 != v106)
          {
            do
              unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            unint64_t v33 = v106;
          }
          unint64_t v107 = v31;
          operator delete(v33);
        }
        uint64_t v34 = v104;
        if (v104)
        {
          uint64_t v35 = ElementTypeOrSelf;
          uint64_t v36 = v12;
          uint64_t v37 = v13;
          uint64_t v38 = v6;
          uint64_t v39 = ArgAttrsAttr;
          uint64_t v40 = v105;
          int v41 = v104;
          if (v105 != v104)
          {
            do
            {
              unint64_t v43 = (void *)*--v40;
              int v42 = v43;
              *uint64_t v40 = 0;
              if (v43) {
                operator delete[](v42);
              }
            }
            while (v40 != v34);
            int v41 = v104;
          }
          uint64_t v105 = v34;
          operator delete(v41);
          uint64_t ArgAttrsAttr = v39;
          uint64_t v6 = v38;
          uint64_t v13 = v37;
          uint64_t v12 = v36;
          uint64_t ElementTypeOrSelf = v35;
          uint64_t v16 = v74;
        }
        if (v102 != &v103) {
          free(v102);
        }
      }
    }
    uint64_t v44 = v84;
    if (!mlir::verifyCompatibleShape(ArgAttrsAttr, v84, v29, v84)
      || !mlir::verifyCompatibleShape(v75, v76, &v29[v16], v76))
    {
      break;
    }
    if ((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8])
    {
      uint64_t v45 = &v29[v44];
      if (v83)
      {
        if (!mlir::verifyCompatibleShape(v45, 1, &v82, 1))
        {
          v77[0] = (const void **)"all input shapes must match along axis ";
          __int16 v78 = 259;
          mlir::OpState::emitOpError(this, v77, (uint64_t)v91);
          if (v91[0])
          {
            int v88 = 3;
            uint64_t v89 = "dimension when interleaving";
            uint64_t v90 = 27;
            unint64_t v46 = &v88;
            uint64_t v47 = (char *)v92;
            if (v93 >= v94)
            {
              unint64_t v71 = v93 + 1;
              if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
              {
                int64_t v73 = (char *)&v88 - (unsigned char *)v92;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v71, 24);
                uint64_t v47 = (char *)v92;
                unint64_t v46 = (int *)((char *)v92 + v73);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v71, 24);
                unint64_t v46 = &v88;
                uint64_t v47 = (char *)v92;
              }
            }
            long long v48 = &v47[24 * v93];
            long long v49 = *(_OWORD *)v46;
            *((void *)v48 + 2) = *((void *)v46 + 2);
            *(_OWORD *)long long v48 = v49;
            ++v93;
          }
          uint64_t v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v91);
          if (v91[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
          }
          if (v100)
          {
            uint64_t v51 = (void **)v98;
            if (v98)
            {
              uint64_t v52 = v99;
              long long v53 = v98;
              if (v99 != v98)
              {
                do
                  uint64_t v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
                while (v52 != v51);
                long long v53 = v98;
              }
              uint64_t v99 = v51;
              operator delete(v53);
            }
            long long v54 = v96;
            if (!v96) {
              goto LABEL_108;
            }
            unint64_t v55 = v97;
            char v56 = v96;
            if (v97 == v96) {
              goto LABEL_107;
            }
            do
            {
              long long v59 = (void *)*--v55;
              unsigned int v58 = v59;
              *unint64_t v55 = 0;
              if (v59) {
                operator delete[](v58);
              }
            }
            while (v55 != v54);
            goto LABEL_106;
          }
          return v50;
        }
      }
      else
      {
        uint64_t v82 = *v45;
        char v83 = 1;
      }
    }
LABEL_15:
    if (++v14 == v12) {
      return 1;
    }
  }
  v77[0] = (const void **)"invalid input tensor shapes, all input shapes must ";
  __int16 v78 = 259;
  mlir::OpState::emitOpError(this, v77, (uint64_t)v91);
  if (v91[0])
  {
    int v88 = 3;
    uint64_t v89 = "match except at axis";
    uint64_t v90 = 20;
    long long v60 = &v88;
    unint64_t v61 = (char *)v92;
    if (v93 >= v94)
    {
      unint64_t v70 = v93 + 1;
      if (v92 <= &v88 && (char *)v92 + 24 * v93 > (char *)&v88)
      {
        int64_t v72 = (char *)&v88 - (unsigned char *)v92;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v70, 24);
        unint64_t v61 = (char *)v92;
        long long v60 = (int *)((char *)v92 + v72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v70, 24);
        long long v60 = &v88;
        unint64_t v61 = (char *)v92;
      }
    }
    unint64_t v62 = &v61[24 * v93];
    long long v63 = *(_OWORD *)v60;
    *((void *)v62 + 2) = *((void *)v60 + 2);
    *(_OWORD *)unint64_t v62 = v63;
    ++v93;
  }
  uint64_t v50 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v91);
  if (v91[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v91);
  }
  if (v100)
  {
    uint64_t v64 = (void **)v98;
    if (v98)
    {
      int v65 = v99;
      uint64_t v66 = v98;
      if (v99 != v98)
      {
        do
          int v65 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v65 - 1);
        while (v65 != v64);
        uint64_t v66 = v98;
      }
      uint64_t v99 = v64;
      operator delete(v66);
    }
    long long v54 = v96;
    if (!v96) {
      goto LABEL_108;
    }
    char v67 = v97;
    char v56 = v96;
    if (v97 == v96)
    {
LABEL_107:
      unint64_t v97 = v54;
      operator delete(v56);
LABEL_108:
      if (v92 != v95) {
        free(v92);
      }
      return v50;
    }
    do
    {
      unint64_t v69 = (void *)*--v67;
      uint64_t v68 = v69;
      void *v67 = 0;
      if (v69) {
        operator delete[](v68);
      }
    }
    while (v67 != v54);
LABEL_106:
    char v56 = v96;
    goto LABEL_107;
  }
  return v50;
}

uint64_t mlir::mps::ConcatOp::getAxis(mlir::mps::ConcatOp *this)
{
  return *(void *)(*(void *)(*(void *)this + 72)
                   + 32 * (*(_DWORD *)(*(void *)this + 68) - 1)
                   + 24);
}

uint64_t mlir::mps::ConcatOp::getValues(mlir::mps::ConcatOp *this)
{
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    return *(void *)(*(void *)this + 72);
  }
  else {
    return 0;
  }
}

uint64_t mlir::mps::ReshapeOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    uint64_t v13 = *a7;
    uint64_t v26 = a6;
    v27[0] = 0;
    char v28 = 0;
    uint64_t v29 = v13;
    uint64_t v30 = a9;
    uint64_t v31 = a10;
    if (!a6) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v26 = a6;
    v27[0] = 0;
    char v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = a9;
    uint64_t v31 = a10;
    if (!a6) {
      goto LABEL_8;
    }
  }
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
  if (v28) {
    char v28 = 0;
  }
  mlir::OperationName::OperationName(v27, "mps.reshape", 11, Context);
  char v28 = 1;
LABEL_8:
  unint64_t v32 = a4;
  uint64_t v33 = a5;
  unint64_t v34 = a4;
  uint64_t v35 = 0;
  uint64_t v15 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v34, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
  {
    uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    if (v15)
    {
      unint64_t v34 = v32;
      uint64_t v35 = 1;
      unint64_t v34 = mlir::ValueRange::offset_base(&v34, 1);
      uint64_t v35 = 0;
      unint64_t v23 = (uint64_t **)&v24;
      unint64_t v34 = mlir::ValueRange::dereference_iterator(&v34, 0);
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v34);
      if (DefiningOp)
      {
        if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v23, DefiningOp))
        {
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v15);
  uint64_t v18 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
LABEL_16:
  uint64_t v20 = v18;
  unsigned int v21 = *(_DWORD *)(a11 + 8);
  if (v21 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
    unsigned int v21 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v21) = v20;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

void *mlir::mps::anonymous namespace'::inferReshapeReturnType(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  v74[6] = *MEMORY[0x1E4F143B8];
  uint64_t v66 = a1;
  uint64_t v67 = a2;
  int64_t v72 = v74;
  uint64_t v73 = 0x600000000;
  uint64_t v8 = 1;
  mlir::getIntValues<long long>(a3, a4, (uint64_t)&v72, 1);
  unint64_t v69 = v71;
  uint64_t v70 = 0x600000000;
  if (v73)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (char *)v72;
    int v11 = (char *)v72 + 8 * v73;
    uint64_t v8 = 1;
    do
    {
      while (1)
      {
        uint64_t v13 = *(void *)v10;
        if (*(void *)v10 == -1 || v13 == 0x8000000000000000) {
          break;
        }
        if (v13) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = a5 == 0;
        }
        if (!v17)
        {
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v66))
          {
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
            if (v9 < v18) {
              *(void *)uint64_t v10 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66)
            }
                                         + 8 * v9);
          }
        }
        uint64_t v12 = *(void *)v10;
        v10 += 8;
        v8 *= v12;
        ++v9;
        if (v10 == v11) {
          goto LABEL_20;
        }
      }
      uint64_t v15 = (char *)v72;
      uint64_t v16 = v70;
      if (v70 >= (unint64_t)HIDWORD(v70))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
        uint64_t v16 = v70;
      }
      *((void *)v69 + v16) = &v15[8 * v9];
      LODWORD(v70) = v70 + 1;
      ++v9;
      v10 += 8;
    }
    while (v10 != v11);
LABEL_20:
    uint64_t v7 = v66;
    uint64_t v6 = v67;
  }
  v68[0] = v7;
  v68[1] = v6;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v68))
  {
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
    if (v20)
    {
      uint64_t v21 = 8 * v20;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v21 -= 8;
        if (!v21) {
          goto LABEL_26;
        }
      }
LABEL_34:
      uint64_t v29 = v70;
      if (!v70) {
        goto LABEL_43;
      }
      uint64_t v30 = (char *)v69;
      uint64_t v31 = (v70 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v31)
      {
        uint64_t v32 = v31 + 1;
        uint64_t v33 = (v31 + 1) & 0x3FFFFFFFFFFFFFFELL;
        unint64_t v34 = (char *)v69 + 8 * v33;
        uint64_t v35 = (void **)((char *)v69 + 8);
        uint64_t v36 = v33;
        do
        {
          uint64_t v37 = *v35;
          **(v35 - 1) = 0;
          void *v37 = 0;
          v35 += 2;
          v36 -= 2;
        }
        while (v36);
        if (v32 == v33) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v34 = (char *)v69;
      }
      uint64_t v38 = &v30[8 * v29];
      do
      {
        uint64_t v39 = *(void **)v34;
        v34 += 8;
        *uint64_t v39 = 0;
      }
      while (v34 != v38);
      goto LABEL_43;
    }
  }
LABEL_26:
  if (!v8) {
    goto LABEL_34;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v66)) {
    goto LABEL_43;
  }
  uint64_t v22 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
  if (v23)
  {
    uint64_t v24 = 8 * v23;
    while (*v22 != 0x8000000000000000)
    {
      ++v22;
      v24 -= 8;
      if (!v24) {
        goto LABEL_32;
      }
    }
  }
  else
  {
LABEL_32:
    int v25 = v70;
    uint64_t v26 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
    uint64_t NumElements = mlir::ShapedType::getNumElements(v26, v27);
    if (v25 == 1)
    {
      **(void **)unint64_t v69 = NumElements / v8;
      goto LABEL_43;
    }
    if (NumElements == v8)
    {
      uint64_t v55 = v70;
      if (v70)
      {
        char v56 = (char *)v69;
        uint64_t v57 = (v70 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v57)
        {
          uint64_t v58 = v57 + 1;
          uint64_t v59 = (v57 + 1) & 0x3FFFFFFFFFFFFFFELL;
          long long v60 = (char *)v69 + 8 * v59;
          unint64_t v61 = (void **)((char *)v69 + 8);
          uint64_t v62 = v59;
          do
          {
            long long v63 = *v61;
            **(v61 - 1) = 1;
            *long long v63 = 1;
            v61 += 2;
            v62 -= 2;
          }
          while (v62);
          if (v58 == v59) {
            goto LABEL_43;
          }
        }
        else
        {
          long long v60 = (char *)v69;
        }
        uint64_t v64 = &v56[8 * v55];
        do
        {
          int v65 = *(void **)v60;
          v60 += 8;
          void *v65 = 1;
        }
        while (v60 != v64);
      }
    }
  }
LABEL_43:
  uint64_t v40 = (char *)v72;
  uint64_t v41 = v73;
  if (!v73) {
    goto LABEL_57;
  }
  unint64_t v42 = (v73 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  unint64_t v43 = (char *)v72;
  if (v42 >= 3)
  {
    unint64_t v44 = v42 + 1;
    unint64_t v43 = (char *)v72 + 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v45 = (int64x2_t *)((char *)v72 + 16);
    v46.i64[0] = -1;
    v46.i64[1] = -1;
    uint64_t v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      int32x2_t v48 = vmovn_s64(vceqq_s64(v45[-1], v46));
      if (v48.i8[0])
      {
        v45[-1].i64[0] = 0x8000000000000000;
        if ((v48.i8[4] & 1) == 0)
        {
LABEL_49:
          int32x2_t v49 = vmovn_s64(vceqq_s64(*v45, v46));
          if ((v49.i8[0] & 1) == 0) {
            goto LABEL_50;
          }
          goto LABEL_54;
        }
      }
      else if ((v48.i8[4] & 1) == 0)
      {
        goto LABEL_49;
      }
      v45[-1].i64[1] = 0x8000000000000000;
      int32x2_t v49 = vmovn_s64(vceqq_s64(*v45, v46));
      if ((v49.i8[0] & 1) == 0)
      {
LABEL_50:
        if (v49.i8[4]) {
          goto LABEL_55;
        }
        goto LABEL_46;
      }
LABEL_54:
      v45->i64[0] = 0x8000000000000000;
      if (v49.i8[4]) {
LABEL_55:
      }
        v45->i64[1] = 0x8000000000000000;
LABEL_46:
      v45 += 2;
      v47 -= 4;
      if (!v47)
      {
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_57;
        }
        goto LABEL_65;
      }
    }
  }
  do
  {
LABEL_65:
    if (*(void *)v43 == -1) {
      *(void *)unint64_t v43 = 0x8000000000000000;
    }
    v43 += 8;
  }
  while (v43 != &v40[8 * v41]);
LABEL_57:
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v66);
  uint64_t v51 = (void *)mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
  uint64_t v52 = v51;
  if (v51)
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v51 + 8);
    long long v53 = v69;
    if (v69 == v71) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  long long v53 = v69;
  if (v69 != v71) {
LABEL_59:
  }
    free(v53);
LABEL_60:
  if (v72 != v74) {
    free(v72);
  }
  return v52;
}

uint64_t mlir::mps::ReshapeOp::verify(uint64_t **this)
{
  v78[4] = *MEMORY[0x1E4F143B8];
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v2 = *(void *)((*this)[9] + 56);
  uint64_t v76 = (uint64_t **)&v66;
  v68[0] = v2;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v68);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v76, DefiningOp)) {
    return 1;
  }
  uint64_t v4 = *this;
  uint64_t v5 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v5)
  {
    uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
    uint64_t v4 = *this;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v8 = *((_DWORD *)v4 + 11);
  v65[0] = v5;
  v65[1] = v6;
  v64[1] = v9;
  uint64_t v76 = (uint64_t **)v78;
  uint64_t v77 = 0x400000000;
  mlir::getIntValues<long long>(v66, v67, (uint64_t)&v76, 1);
  if ((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v65)
    && v77)
  {
    uint64_t v10 = 0;
    int v11 = v76;
    uint64_t v12 = 8 * v77;
    while (1)
    {
      if (!v11[v10])
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
        if (v13 <= v10) {
          break;
        }
      }
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_25;
      }
    }
    v62[0] = (const void **)"zero_is_copy semantics is invalid: shape operand contains a zero value outside the input rank.";
    __int16 v63 = 259;
    mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
    if (v68[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
    }
    if (!v75) {
      goto LABEL_66;
    }
    uint64_t v14 = (void **)__p;
    if (__p)
    {
      uint64_t v15 = v74;
      uint64_t v16 = __p;
      if (v74 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        uint64_t v16 = __p;
      }
      uint64_t v74 = v14;
      operator delete(v16);
    }
    BOOL v17 = v71;
    if (!v71) {
      goto LABEL_88;
    }
    uint64_t v18 = v72;
    uint64_t v19 = v71;
    if (v72 == v71)
    {
LABEL_87:
      int64_t v72 = v17;
      operator delete(v19);
LABEL_88:
      if (v69 != &v70) {
        free(v69);
      }
      goto LABEL_66;
    }
    do
    {
      uint64_t v29 = (void *)*--v18;
      char v28 = v29;
      *uint64_t v18 = 0;
      if (v29) {
        operator delete[](v28);
      }
    }
    while (v18 != v17);
LABEL_86:
    uint64_t v19 = v71;
    goto LABEL_87;
  }
LABEL_25:
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v65))
  {
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
    if (v21)
    {
      uint64_t v22 = 8 * v21;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v22 -= 8;
        if (!v22) {
          goto LABEL_30;
        }
      }
      goto LABEL_54;
    }
LABEL_30:
    uint64_t v23 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
    if (!v24) {
      goto LABEL_54;
    }
    unint64_t v25 = (v24 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v25 >= 3)
    {
      unint64_t v30 = v25 + 1;
      uint64_t v31 = (v25 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v27 = (uint64_t *)(v23 + 8 * v31);
      uint64_t v32 = (int64x2_t *)(v23 + 16);
      int64x2_t v33 = 0uLL;
      int64x2_t v34 = vdupq_n_s64(0x8000000000000000);
      uint64_t v35 = v31;
      int64x2_t v36 = 0uLL;
      do
      {
        int64x2_t v33 = vsubq_s64(v33, vceqq_s64(v32[-1], v34));
        int64x2_t v36 = vsubq_s64(v36, vceqq_s64(*v32, v34));
        v32 += 2;
        v35 -= 4;
      }
      while (v35);
      unint64_t v26 = vaddvq_s64(vaddq_s64(v36, v33));
      if (v30 == v31) {
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v27 = (uint64_t *)v23;
    }
    do
    {
      uint64_t v37 = *v27++;
      if (v37 == 0x8000000000000000) {
        ++v26;
      }
    }
    while (v27 != (uint64_t *)(v23 + 8 * v24));
LABEL_42:
    if (v26 >= 2)
    {
      v62[0] = (const void **)"the result shape can not be resolved";
      __int16 v63 = 259;
      mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
      if (v68[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
      }
      if (!v75) {
        goto LABEL_66;
      }
      uint64_t v38 = (void **)__p;
      if (__p)
      {
        uint64_t v39 = v74;
        uint64_t v40 = __p;
        if (v74 != __p)
        {
          do
            uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          uint64_t v40 = __p;
        }
        uint64_t v74 = v38;
        operator delete(v40);
      }
      BOOL v17 = v71;
      if (!v71) {
        goto LABEL_88;
      }
      uint64_t v41 = v72;
      uint64_t v19 = v71;
      if (v72 == v71) {
        goto LABEL_87;
      }
      do
      {
        uint64_t v55 = (void *)*--v41;
        long long v54 = v55;
        *uint64_t v41 = 0;
        if (v55) {
          operator delete[](v54);
        }
      }
      while (v41 != v17);
      goto LABEL_86;
    }
  }
LABEL_54:
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v64))
  {
    unint64_t v42 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
    if (v43)
    {
      uint64_t v44 = 8 * v43;
      while (*v42 != 0x8000000000000000)
      {
        ++v42;
        v44 -= 8;
        if (!v44) {
          goto LABEL_59;
        }
      }
    }
    else
    {
LABEL_59:
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v65))
      {
        uint64_t v45 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
        if (v46)
        {
          uint64_t v47 = 8 * v46;
          while (*v45 != 0x8000000000000000)
          {
            ++v45;
            v47 -= 8;
            if (!v47) {
              goto LABEL_64;
            }
          }
        }
        else
        {
LABEL_64:
          int32x2_t v48 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v64);
          uint64_t NumElements = mlir::ShapedType::getNumElements(v48, v49);
          uint64_t v51 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v65);
          if (NumElements != mlir::ShapedType::getNumElements(v51, v52))
          {
            v62[0] = (const void **)"the result shape is not compatible with the input shape";
            __int16 v63 = 259;
            mlir::OpState::emitOpError(this, v62, (uint64_t)v68);
            uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
            if (v68[0]) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
            }
            if (!v75) {
              goto LABEL_66;
            }
            char v56 = (void **)__p;
            if (__p)
            {
              uint64_t v57 = v74;
              uint64_t v58 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
                while (v57 != v56);
                uint64_t v58 = __p;
              }
              uint64_t v74 = v56;
              operator delete(v58);
            }
            BOOL v17 = v71;
            if (!v71) {
              goto LABEL_88;
            }
            uint64_t v59 = v72;
            uint64_t v19 = v71;
            if (v72 == v71) {
              goto LABEL_87;
            }
            do
            {
              unint64_t v61 = (void *)*--v59;
              long long v60 = v61;
              void *v59 = 0;
              if (v61) {
                operator delete[](v60);
              }
            }
            while (v59 != v17);
            goto LABEL_86;
          }
        }
      }
    }
  }
  uint64_t v7 = 1;
LABEL_66:
  if (v76 != v78) {
    free(v76);
  }
  return v7;
}

uint64_t mlir::mps::DepthToSpace2DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v71[4] = *MEMORY[0x1E4F143B8];
  v68[0] = a4;
  v68[1] = a5;
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v60 = a6;
  v61[0] = 0;
  char v62 = 0;
  long long v63 = v16;
  uint64_t v64 = a9;
  uint64_t v65 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62) {
      char v62 = 0;
    }
    mlir::OperationName::OperationName(v61, "mps.depth_to_space_2d", 21, Context);
    char v62 = 1;
  }
  uint64_t v66 = a4;
  unint64_t v67 = a5;
  if (a5 < 4
    || (uint64_t v18 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::DepthToSpace2DOpAdaptor::verify((uint64_t)&v60, v18)))
  {
    uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
LABEL_22:
    unint64_t v19 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(mlir::ValueRange::dereference_iterator(v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (void *)mlir::ValueRange::dereference_iterator(v68, 1);
  uint64_t v21 = (void *)mlir::ValueRange::dereference_iterator(v68, 2);
  uint64_t v22 = mlir::ValueRange::dereference_iterator(v68, 3);
  uint64_t v23 = (uint64_t **)v63;
  uint64_t v24 = *(void **)(*(void *)v19 + 136);
  if (v24 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v26 = (void *)v19;
  }
  else
  {
    unint64_t v26 = 0;
  }
  char v56 = v26;
  if (!v26)
  {
    char v35 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Cannot use on a non-tensor input type");
    unint64_t v19 = 0;
    goto LABEL_27;
  }
  if (*(_UNKNOWN **)(*v26 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    goto LABEL_23;
  }
  uint64_t v27 = (void *)v22;
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v59 = (void **)&v69;
  __p = v20;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, DefiningOp))
  {
    unint64_t SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v69, v70);
    uint64_t v54 = SingleInt;
    unint64_t v55 = SingleInt & 0xFFFFFFFFFFFFFF00;
    int v31 = v30;
  }
  else
  {
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    int v31 = 0;
  }
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v59 = (void **)&v69;
  __p = v21;
  uint64_t v36 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (v36 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v36))
  {
    unint64_t v37 = mlir::getSingleIntValue<long long>((uint64_t)v69, v70);
    unint64_t v38 = v37 & 0xFFFFFFFFFFFFFF00;
    uint64_t v39 = v37;
    int v41 = v40;
  }
  else
  {
    unint64_t v38 = 0;
    int v41 = 0;
    uint64_t v39 = 0;
  }
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v59 = (void **)&v69;
  __p = v27;
  uint64_t v42 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!v42
    || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v42)
    || (unint64_t v43 = mlir::getSingleIntValue<long long>((uint64_t)v69, v70), !v31)
    || !v41
    || !v44)
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v26);
    goto LABEL_22;
  }
  uint64_t v45 = v43;
  uint64_t v46 = (char *)(v39 | v38);
  unint64_t v69 = v71;
  uint64_t v70 = 0x400000000;
  uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
  int64_t v49 = v48;
  uint64_t v59 = (void **)v23;
  mlir::IntegerAttr::getValue(&v59, (llvm::APInt *)&__p);
  if (v58 > 0x40)
  {
    uint64_t v50 = *(void *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v50) = __p;
  }
  {
    uint64_t v51 = (uint64_t)v69;
    uint64_t v52 = v70;
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v56);
    unint64_t v19 = mlir::RankedTensorType::get(v51, v52, ElementType, 0);
    char v35 = 1;
  }
  else
  {
    unint64_t v19 = 0;
    char v35 = 0;
  }
  if (v69 != v71) {
    free(v69);
  }
LABEL_27:
  if (!v35) {
    return 0;
  }
LABEL_23:
  unsigned int v33 = *(_DWORD *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    unsigned int v33 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v33) = v19;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthToSpace2DOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    v19[0] = *(void *)(a1 + 24);
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)v21, 32)) {
      return 1;
    }
    v19[0] = "'mps.depth_to_space_2d' op attribute 'block_size' failed to satisfy constraint: 32-bit unsigned integer attribute";
    __int16 v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v27;
        uint64_t v14 = __p;
        if (v27 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v27 = v12;
        operator delete(v14);
      }
      uint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      uint64_t v15 = v25;
      uint64_t v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        unint64_t v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23) {
          free(v22);
        }
        return v3;
      }
      do
      {
        BOOL v17 = (void *)*--v15;
        long long v16 = v17;
        *uint64_t v15 = 0;
        if (v17) {
          operator delete[](v16);
        }
      }
      while (v15 != v7);
LABEL_32:
      uint64_t v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "'mps.depth_to_space_2d' op requires attribute 'block_size'";
    __int16 v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v27;
        uint64_t v6 = __p;
        if (v27 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        uint64_t v27 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      unsigned int v8 = v25;
      uint64_t v9 = v24;
      if (v25 == v24) {
        goto LABEL_33;
      }
      do
      {
        int v11 = (void *)*--v8;
        uint64_t v10 = v11;
        *unsigned int v8 = 0;
        if (v11) {
          operator delete[](v10);
        }
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

uint64_t mlir::mps::SpaceToDepth2DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v71[4] = *MEMORY[0x1E4F143B8];
  v68[0] = a4;
  v68[1] = a5;
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v60 = a6;
  v61[0] = 0;
  char v62 = 0;
  long long v63 = v16;
  uint64_t v64 = a9;
  uint64_t v65 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62) {
      char v62 = 0;
    }
    mlir::OperationName::OperationName(v61, "mps.space_to_depth_2d", 21, Context);
    char v62 = 1;
  }
  uint64_t v66 = a4;
  unint64_t v67 = a5;
  if (a5 < 4
    || (uint64_t v18 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::SpaceToDepth2DOpAdaptor::verify((uint64_t)&v60, v18)))
  {
    uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
LABEL_22:
    unint64_t v19 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    goto LABEL_23;
  }
  unint64_t v19 = *(void *)(mlir::ValueRange::dereference_iterator(v68, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  __int16 v20 = (void *)mlir::ValueRange::dereference_iterator(v68, 1);
  uint64_t v21 = (void *)mlir::ValueRange::dereference_iterator(v68, 2);
  uint64_t v22 = mlir::ValueRange::dereference_iterator(v68, 3);
  uint64_t v23 = (uint64_t **)v63;
  uint64_t v24 = *(void **)(*(void *)v19 + 136);
  if (v24 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v26 = (void *)v19;
  }
  else
  {
    unint64_t v26 = 0;
  }
  char v56 = v26;
  if (!v26)
  {
    char v35 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Cannot use on a non-tensor input type");
    unint64_t v19 = 0;
    goto LABEL_27;
  }
  if (*(_UNKNOWN **)(*v26 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    goto LABEL_23;
  }
  uint64_t v27 = (void *)v22;
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v59 = (void **)&v69;
  __p = v20;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, DefiningOp))
  {
    unint64_t SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v69, v70);
    uint64_t v54 = SingleInt;
    unint64_t v55 = SingleInt & 0xFFFFFFFFFFFFFF00;
    int v31 = v30;
  }
  else
  {
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    int v31 = 0;
  }
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v59 = (void **)&v69;
  __p = v21;
  uint64_t v36 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (v36 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v36))
  {
    unint64_t v37 = mlir::getSingleIntValue<long long>((uint64_t)v69, v70);
    unint64_t v38 = v37 & 0xFFFFFFFFFFFFFF00;
    uint64_t v39 = v37;
    int v41 = v40;
  }
  else
  {
    unint64_t v38 = 0;
    int v41 = 0;
    uint64_t v39 = 0;
  }
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v59 = (void **)&v69;
  __p = v27;
  uint64_t v42 = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!v42
    || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v59, v42)
    || (unint64_t v43 = mlir::getSingleIntValue<long long>((uint64_t)v69, v70), !v31)
    || !v41
    || !v44)
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v26);
    goto LABEL_22;
  }
  uint64_t v45 = v43;
  uint64_t v46 = (char *)(v39 | v38);
  unint64_t v69 = v71;
  uint64_t v70 = 0x400000000;
  uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
  int64_t v49 = v48;
  uint64_t v59 = (void **)v23;
  mlir::IntegerAttr::getValue(&v59, (llvm::APInt *)&__p);
  if (v58 > 0x40)
  {
    uint64_t v50 = *(void *)__p;
    operator delete[](__p);
  }
  else
  {
    LODWORD(v50) = __p;
  }
  {
    uint64_t v51 = (uint64_t)v69;
    uint64_t v52 = v70;
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v56);
    unint64_t v19 = mlir::RankedTensorType::get(v51, v52, ElementType, 0);
    char v35 = 1;
  }
  else
  {
    unint64_t v19 = 0;
    char v35 = 0;
  }
  if (v69 != v71) {
    free(v69);
  }
LABEL_27:
  if (!v35) {
    return 0;
  }
LABEL_23:
  unsigned int v33 = *(_DWORD *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    unsigned int v33 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v33) = v19;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::SpaceToDepth2DOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    v19[0] = *(void *)(a1 + 24);
    v21[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v19);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)v21, 32)) {
      return 1;
    }
    v19[0] = "'mps.space_to_depth_2d' op attribute 'block_size' failed to satisfy constraint: 32-bit unsigned integer attribute";
    __int16 v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v27;
        uint64_t v14 = __p;
        if (v27 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v27 = v12;
        operator delete(v14);
      }
      uint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      uint64_t v15 = v25;
      uint64_t v9 = v24;
      if (v25 == v24)
      {
LABEL_33:
        unint64_t v25 = v7;
        operator delete(v9);
LABEL_34:
        if (v22 != &v23) {
          free(v22);
        }
        return v3;
      }
      do
      {
        BOOL v17 = (void *)*--v15;
        long long v16 = v17;
        *uint64_t v15 = 0;
        if (v17) {
          operator delete[](v16);
        }
      }
      while (v15 != v7);
LABEL_32:
      uint64_t v9 = v24;
      goto LABEL_33;
    }
  }
  else
  {
    v19[0] = "'mps.space_to_depth_2d' op requires attribute 'block_size'";
    __int16 v20 = 259;
    mlir::emitError(a2, (uint64_t)v19, (uint64_t)v21);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
    if (v21[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
    }
    if (v28)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v27;
        uint64_t v6 = __p;
        if (v27 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        uint64_t v27 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v24;
      if (!v24) {
        goto LABEL_34;
      }
      unsigned int v8 = v25;
      uint64_t v9 = v24;
      if (v25 == v24) {
        goto LABEL_33;
      }
      do
      {
        int v11 = (void *)*--v8;
        uint64_t v10 = v11;
        *unsigned int v8 = 0;
        if (v11) {
          operator delete[](v10);
        }
      }
      while (v8 != v7);
      goto LABEL_32;
    }
  }
  return v3;
}

uint64_t mlir::mps::DepthToSpace2DOp::verify(mlir::mps::DepthToSpace2DOp *this)
{
  uint64_t v336 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)this;
  uint64_t v321 = (uint64_t *)v1;
  uint64_t v2 = *(void **)(v1 + 72);
  unint64_t v3 = *(void *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (const void **)v2[7];
  uint64_t v5 = (const void **)v2[11];
  uint64_t v6 = (const void **)v2[15];
  uint64_t v7 = *(void **)(*(void *)v3 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v3 = 0;
  }
  unint64_t v320 = v3;
  if (!v3)
  {
    v318[0] = (const void **)"Cannot use on a non-tensor input type";
    __int16 v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    }
    if (v335)
    {
      int v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v334;
        uint64_t v13 = __p;
        if (v334 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          uint64_t v13 = __p;
        }
        v334 = v11;
        operator delete(v13);
      }
      uint64_t v14 = v331;
      if (!v331) {
        goto LABEL_235;
      }
      uint64_t v15 = v332;
      long long v16 = v331;
      if (v332 == v331) {
        goto LABEL_234;
      }
      do
      {
        uint64_t v18 = (void *)*--v15;
        BOOL v17 = v18;
        *uint64_t v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    return 1;
  }
  v318[0] = *(const void ***)(v1 + 80);
  mlir::IntegerAttr::getValue(v318, (llvm::APInt *)&v325);
  if (v326 > 0x40)
  {
    unint64_t v9 = *(unsigned int *)v325;
    operator delete[](v325);
  }
  else
  {
    unint64_t v9 = v325;
  }
  uint64_t v325 = 0;
  uint64_t v326 = 0;
  v322 = &v325;
  v318[0] = v4;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v318);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v322, DefiningOp))
  {
    unint64_t SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v325, v326);
    unint64_t v21 = SingleInt & 0xFFFFFFFFFFFFFF00;
    uint64_t v22 = SingleInt;
    uint64_t v24 = v23;
  }
  else
  {
    unint64_t v21 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v325 = 0;
  uint64_t v326 = 0;
  v322 = &v325;
  v318[0] = v5;
  uint64_t v25 = mlir::Value::getDefiningOp((mlir::Value *)v318);
  if (v25 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v322, v25))
  {
    unint64_t v26 = mlir::getSingleIntValue<long long>((uint64_t)v325, v326);
    unint64_t v27 = v26 & 0xFFFFFFFFFFFFFF00;
    uint64_t v28 = v26;
    uint64_t v30 = v29;
  }
  else
  {
    unint64_t v27 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
  }
  uint64_t v325 = 0;
  uint64_t v326 = 0;
  v322 = &v325;
  v318[0] = v6;
  uint64_t v31 = mlir::Value::getDefiningOp((mlir::Value *)v318);
  if (!v31 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v322, v31)) {
    return 1;
  }
  unint64_t v32 = mlir::getSingleIntValue<long long>((uint64_t)v325, v326);
  uint64_t v10 = 1;
  if (!v24 || !v30 || !v33) {
    return v10;
  }
  uint64_t v34 = v32;
  uint64_t v35 = v22 | v21;
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v320);
  unint64_t v38 = (const char *)v37;
  uint64_t v39 = (v37 & (v35 >> 63)) + v35;
  if (v39 < 0 || v37 <= v39)
  {
    v318[0] = (const void **)"invalid width_axis (";
    __int16 v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      unint64_t v323 = v35;
      unint64_t v69 = &v322;
      uint64_t v70 = (char *)v327;
      if (v328 >= v329)
      {
        unint64_t v236 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          int64_t v287 = (char *)&v322 - (unsigned char *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v236, 24);
          uint64_t v70 = (char *)v327;
          unint64_t v69 = (void ***)((char *)v327 + v287);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v236, 24);
          unint64_t v69 = &v322;
          uint64_t v70 = (char *)v327;
        }
      }
      unint64_t v71 = &v70[24 * v328];
      long long v72 = *(_OWORD *)v69;
      *((void *)v71 + 2) = v69[2];
      *(_OWORD *)unint64_t v71 = v72;
      uint64_t v73 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        unint64_t v323 = (unint64_t)") for shape of rank ";
        uint64_t v324 = 20;
        uint64_t v74 = &v322;
        char v75 = (char *)v327;
        if (v73 >= v329)
        {
          unint64_t v237 = v73 + 1;
          BOOL v238 = (char *)v327 + 24 * v73 > (char *)&v322;
          if (v327 <= &v322 && v238)
          {
            int64_t v288 = (char *)&v322 - (unsigned char *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v237, 24);
            char v75 = (char *)v327;
            uint64_t v74 = (void ***)((char *)v327 + v288);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v237, 24);
            uint64_t v74 = &v322;
            char v75 = (char *)v327;
          }
        }
        uint64_t v76 = &v75[24 * v328];
        long long v77 = *(_OWORD *)v74;
        *((void *)v76 + 2) = v74[2];
        *(_OWORD *)uint64_t v76 = v77;
        uint64_t v78 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 2;
          unint64_t v323 = (unint64_t)v38;
          uint64_t v79 = &v322;
          unsigned int v80 = (char *)v327;
          if (v78 >= v329)
          {
            unint64_t v240 = v78 + 1;
            BOOL v241 = (char *)v327 + 24 * v78 > (char *)&v322;
            if (v327 <= &v322 && v241)
            {
              int64_t v290 = (char *)&v322 - (unsigned char *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v240, 24);
              unsigned int v80 = (char *)v327;
              uint64_t v79 = (void ***)((char *)v327 + v290);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v240, 24);
              uint64_t v79 = &v322;
              unsigned int v80 = (char *)v327;
            }
          }
          uint64_t v81 = &v80[24 * v328];
          long long v82 = *(_OWORD *)v79;
          *((void *)v81 + 2) = v79[2];
          *(_OWORD *)uint64_t v81 = v82;
          ++v328;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    }
    if (v335)
    {
      char v83 = (void **)__p;
      if (__p)
      {
        uint64_t v84 = v334;
        char v85 = __p;
        if (v334 != __p)
        {
          do
            uint64_t v84 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v84 - 1);
          while (v84 != v83);
          char v85 = __p;
        }
        v334 = v83;
        operator delete(v85);
      }
      uint64_t v14 = v331;
      if (!v331) {
        goto LABEL_235;
      }
      uint64_t v86 = v332;
      long long v16 = v331;
      if (v332 == v331) {
        goto LABEL_234;
      }
      do
      {
        int v88 = (void *)*--v86;
        uint64_t v87 = v88;
        void *v86 = 0;
        if (v88) {
          operator delete[](v87);
        }
      }
      while (v86 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  uint64_t v40 = (v37 & ((uint64_t)(v28 | v27) >> 63)) + (v28 | v27);
  if (v40 < 0 || v37 <= v40)
  {
    v318[0] = (const void **)"invalid height_axis (";
    __int16 v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      unint64_t v323 = v28 | v27;
      unint64_t v91 = &v322;
      uint64_t v92 = (char *)v327;
      if (v328 >= v329)
      {
        unint64_t v239 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          int64_t v289 = (char *)&v322 - (unsigned char *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v239, 24);
          uint64_t v92 = (char *)v327;
          unint64_t v91 = (void ***)((char *)v327 + v289);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v239, 24);
          unint64_t v91 = &v322;
          uint64_t v92 = (char *)v327;
        }
      }
      unsigned int v93 = &v92[24 * v328];
      long long v94 = *(_OWORD *)v91;
      *((void *)v93 + 2) = v91[2];
      *(_OWORD *)unsigned int v93 = v94;
      uint64_t v95 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        unint64_t v323 = (unint64_t)") for shape of rank ";
        uint64_t v324 = 20;
        uint64_t v96 = &v322;
        unint64_t v97 = (char *)v327;
        if (v95 >= v329)
        {
          unint64_t v242 = v95 + 1;
          BOOL v243 = (char *)v327 + 24 * v95 > (char *)&v322;
          if (v327 <= &v322 && v243)
          {
            int64_t v291 = (char *)&v322 - (unsigned char *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v242, 24);
            unint64_t v97 = (char *)v327;
            uint64_t v96 = (void ***)((char *)v327 + v291);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v242, 24);
            uint64_t v96 = &v322;
            unint64_t v97 = (char *)v327;
          }
        }
        uint64_t v98 = &v97[24 * v328];
        long long v99 = *(_OWORD *)v96;
        *((void *)v98 + 2) = v96[2];
        *(_OWORD *)uint64_t v98 = v99;
        uint64_t v100 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 2;
          unint64_t v323 = (unint64_t)v38;
          unint64_t v101 = &v322;
          uint64_t v102 = (char *)v327;
          if (v100 >= v329)
          {
            unint64_t v245 = v100 + 1;
            BOOL v246 = (char *)v327 + 24 * v100 > (char *)&v322;
            if (v327 <= &v322 && v246)
            {
              int64_t v293 = (char *)&v322 - (unsigned char *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v245, 24);
              uint64_t v102 = (char *)v327;
              unint64_t v101 = (void ***)((char *)v327 + v293);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v245, 24);
              unint64_t v101 = &v322;
              uint64_t v102 = (char *)v327;
            }
          }
          uint64_t v103 = &v102[24 * v328];
          long long v104 = *(_OWORD *)v101;
          *((void *)v103 + 2) = v101[2];
          *(_OWORD *)uint64_t v103 = v104;
          ++v328;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    }
    if (v335)
    {
      uint64_t v105 = (void **)__p;
      if (__p)
      {
        uint64_t v106 = v334;
        unint64_t v107 = __p;
        if (v334 != __p)
        {
          do
            uint64_t v106 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v106 - 1);
          while (v106 != v105);
          unint64_t v107 = __p;
        }
        v334 = v105;
        operator delete(v107);
      }
      uint64_t v14 = v331;
      if (!v331) {
        goto LABEL_235;
      }
      char v108 = v332;
      long long v16 = v331;
      if (v332 == v331) {
        goto LABEL_234;
      }
      do
      {
        BOOL v110 = (void *)*--v108;
        unint64_t v109 = v110;
        void *v108 = 0;
        if (v110) {
          operator delete[](v109);
        }
      }
      while (v108 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  uint64_t v41 = (v37 & (v34 >> 63)) + v34;
  if (v41 < 0 || v37 <= v41)
  {
    v318[0] = (const void **)"invalid depth_axis (";
    __int16 v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      unint64_t v323 = v34;
      uint64_t v111 = &v322;
      BOOL v112 = (char *)v327;
      if (v328 >= v329)
      {
        unint64_t v244 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          int64_t v292 = (char *)&v322 - (unsigned char *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v244, 24);
          BOOL v112 = (char *)v327;
          uint64_t v111 = (void ***)((char *)v327 + v292);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v244, 24);
          uint64_t v111 = &v322;
          BOOL v112 = (char *)v327;
        }
      }
      uint64_t v113 = &v112[24 * v328];
      long long v114 = *(_OWORD *)v111;
      *((void *)v113 + 2) = v111[2];
      *(_OWORD *)uint64_t v113 = v114;
      uint64_t v115 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        unint64_t v323 = (unint64_t)") for shape of rank ";
        uint64_t v324 = 20;
        char v116 = &v322;
        uint64_t v117 = (char *)v327;
        if (v115 >= v329)
        {
          unint64_t v247 = v115 + 1;
          BOOL v248 = (char *)v327 + 24 * v115 > (char *)&v322;
          if (v327 <= &v322 && v248)
          {
            int64_t v294 = (char *)&v322 - (unsigned char *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v247, 24);
            uint64_t v117 = (char *)v327;
            char v116 = (void ***)((char *)v327 + v294);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v247, 24);
            char v116 = &v322;
            uint64_t v117 = (char *)v327;
          }
        }
        uint64_t v118 = &v117[24 * v328];
        long long v119 = *(_OWORD *)v116;
        *((void *)v118 + 2) = v116[2];
        *(_OWORD *)uint64_t v118 = v119;
        uint64_t v120 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 2;
          unint64_t v323 = (unint64_t)v38;
          unint64_t v121 = &v322;
          unint64_t v122 = (char *)v327;
          if (v120 >= v329)
          {
            unint64_t v249 = v120 + 1;
            BOOL v250 = (char *)v327 + 24 * v120 > (char *)&v322;
            if (v327 <= &v322 && v250)
            {
              int64_t v295 = (char *)&v322 - (unsigned char *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v249, 24);
              unint64_t v122 = (char *)v327;
              unint64_t v121 = (void ***)((char *)v327 + v295);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v249, 24);
              unint64_t v121 = &v322;
              unint64_t v122 = (char *)v327;
            }
          }
          BOOL v123 = &v122[24 * v328];
          long long v124 = *(_OWORD *)v121;
          *((void *)v123 + 2) = v121[2];
          *(_OWORD *)BOOL v123 = v124;
          ++v328;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    }
    if (v335)
    {
      unint64_t v125 = (void **)__p;
      if (__p)
      {
        BOOL v126 = v334;
        unint64_t v127 = __p;
        if (v334 != __p)
        {
          do
            BOOL v126 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v126 - 1);
          while (v126 != v125);
          unint64_t v127 = __p;
        }
        v334 = v125;
        operator delete(v127);
      }
      uint64_t v14 = v331;
      if (!v331) {
        goto LABEL_235;
      }
      BOOL v128 = v332;
      long long v16 = v331;
      if (v332 == v331) {
        goto LABEL_234;
      }
      do
      {
        BOOL v130 = (void *)*--v128;
        unint64_t v129 = v130;
        void *v128 = 0;
        if (v130) {
          operator delete[](v129);
        }
      }
      while (v128 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  if (!v9)
  {
    v318[0] = (const void **)"invalid block_size (";
    __int16 v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      unint64_t v323 = 0;
      unint64_t v131 = &v322;
      BOOL v132 = (char *)v327;
      if (v328 >= v329)
      {
        unint64_t v251 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          int64_t v296 = (char *)&v322 - (unsigned char *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v251, 24);
          BOOL v132 = (char *)v327;
          unint64_t v131 = (void ***)((char *)v327 + v296);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v251, 24);
          unint64_t v131 = &v322;
          BOOL v132 = (char *)v327;
        }
      }
      int64_t v133 = &v132[24 * v328];
      long long v134 = *(_OWORD *)v131;
      *((void *)v133 + 2) = v131[2];
      *(_OWORD *)int64_t v133 = v134;
      uint64_t v135 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        unint64_t v323 = (unint64_t)")";
        uint64_t v324 = 1;
        int64_t v136 = &v322;
        int64_t v137 = (char *)v327;
        if (v135 >= v329)
        {
          unint64_t v253 = v135 + 1;
          BOOL v254 = (char *)v327 + 24 * v135 > (char *)&v322;
          if (v327 <= &v322 && v254)
          {
            int64_t v298 = (char *)&v322 - (unsigned char *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v253, 24);
            int64_t v137 = (char *)v327;
            int64_t v136 = (void ***)((char *)v327 + v298);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v253, 24);
            int64_t v136 = &v322;
            int64_t v137 = (char *)v327;
          }
        }
        int64_t v138 = &v137[24 * v328];
        long long v139 = *(_OWORD *)v136;
        *((void *)v138 + 2) = v136[2];
        *(_OWORD *)int64_t v138 = v139;
        ++v328;
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    }
    if (v335)
    {
      uint64_t v140 = (void **)__p;
      if (__p)
      {
        unint64_t v141 = v334;
        unint64_t v142 = __p;
        if (v334 != __p)
        {
          do
            unint64_t v141 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v141 - 1);
          while (v141 != v140);
          unint64_t v142 = __p;
        }
        v334 = v140;
        operator delete(v142);
      }
      uint64_t v14 = v331;
      if (!v331) {
        goto LABEL_235;
      }
      uint64_t v143 = v332;
      long long v16 = v331;
      if (v332 == v331) {
        goto LABEL_234;
      }
      do
      {
        uint64_t v145 = (void *)*--v143;
        __int16 v144 = v145;
        *uint64_t v143 = 0;
        if (v145) {
          operator delete[](v144);
        }
      }
      while (v143 != v14);
      goto LABEL_233;
    }
    return v10;
  }
  if (v41 == v40)
  {
    v318[0] = (const void **)"Invalid degenerate axes: depth_axis (";
    __int16 v319 = 259;
    mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
    if (v325)
    {
      LODWORD(v322) = 2;
      unint64_t v323 = v34;
      uint64_t v42 = &v322;
      unint64_t v43 = (char *)v327;
      if (v328 >= v329)
      {
        unint64_t v252 = v328 + 1;
        if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
        {
          int64_t v297 = (char *)&v322 - (unsigned char *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v252, 24);
          unint64_t v43 = (char *)v327;
          uint64_t v42 = (void ***)((char *)v327 + v297);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v252, 24);
          uint64_t v42 = &v322;
          unint64_t v43 = (char *)v327;
        }
      }
      char v44 = &v43[24 * v328];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = v42[2];
      *(_OWORD *)char v44 = v45;
      uint64_t v46 = ++v328;
      if (v325)
      {
        LODWORD(v322) = 3;
        unint64_t v323 = (unint64_t)") height_axis (";
        uint64_t v324 = 15;
        uint64_t v47 = &v322;
        int64_t v48 = (char *)v327;
        if (v46 >= v329)
        {
          unint64_t v255 = v46 + 1;
          BOOL v256 = (char *)v327 + 24 * v46 > (char *)&v322;
          if (v327 <= &v322 && v256)
          {
            int64_t v299 = (char *)&v322 - (unsigned char *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v255, 24);
            int64_t v48 = (char *)v327;
            uint64_t v47 = (void ***)((char *)v327 + v299);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v255, 24);
            uint64_t v47 = &v322;
            int64_t v48 = (char *)v327;
          }
        }
        int64_t v49 = &v48[24 * v328];
        long long v50 = *(_OWORD *)v47;
        *((void *)v49 + 2) = v47[2];
        *(_OWORD *)int64_t v49 = v50;
        ++v328;
        if (v325)
        {
          LODWORD(v322) = 2;
          unint64_t v323 = v28 | v27;
          uint64_t v51 = &v322;
          uint64_t v52 = (char *)v327;
          if (v328 >= v329)
          {
            unint64_t v258 = v328 + 1;
            if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
            {
              int64_t v301 = (char *)&v322 - (unsigned char *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v258, 24);
              uint64_t v52 = (char *)v327;
              uint64_t v51 = (void ***)((char *)v327 + v301);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v258, 24);
              uint64_t v51 = &v322;
              uint64_t v52 = (char *)v327;
            }
          }
          long long v53 = &v52[24 * v328];
          long long v54 = *(_OWORD *)v51;
          *((void *)v53 + 2) = v51[2];
          *(_OWORD *)long long v53 = v54;
          uint64_t v55 = ++v328;
          if (v325)
          {
            LODWORD(v322) = 3;
            unint64_t v323 = (unint64_t)") for shape of rank ";
            uint64_t v324 = 20;
            char v56 = &v322;
            uint64_t v57 = (char *)v327;
            if (v55 >= v329)
            {
              unint64_t v262 = v55 + 1;
              BOOL v263 = (char *)v327 + 24 * v55 > (char *)&v322;
              if (v327 <= &v322 && v263)
              {
                int64_t v304 = (char *)&v322 - (unsigned char *)v327;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v262, 24);
                uint64_t v57 = (char *)v327;
                char v56 = (void ***)((char *)v327 + v304);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v262, 24);
                char v56 = &v322;
                uint64_t v57 = (char *)v327;
              }
            }
            unsigned int v58 = &v57[24 * v328];
            long long v59 = *(_OWORD *)v56;
            *((void *)v58 + 2) = v56[2];
            *(_OWORD *)unsigned int v58 = v59;
            uint64_t v60 = ++v328;
            if (v325)
            {
              LODWORD(v322) = 2;
              unint64_t v323 = (unint64_t)v38;
              unint64_t v61 = &v322;
              char v62 = (char *)v327;
              if (v60 >= v329)
              {
                unint64_t v267 = v60 + 1;
                BOOL v268 = (char *)v327 + 24 * v60 > (char *)&v322;
                if (v327 <= &v322 && v268)
                {
                  int64_t v307 = (char *)&v322 - (unsigned char *)v327;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v267, 24);
                  char v62 = (char *)v327;
                  unint64_t v61 = (void ***)((char *)v327 + v307);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v267, 24);
                  unint64_t v61 = &v322;
                  char v62 = (char *)v327;
                }
              }
              long long v63 = &v62[24 * v328];
              long long v64 = *(_OWORD *)v61;
              *((void *)v63 + 2) = v61[2];
              *(_OWORD *)long long v63 = v64;
              ++v328;
            }
          }
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
    if (v325) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
    }
    if (v335)
    {
      uint64_t v65 = (void **)__p;
      if (__p)
      {
        uint64_t v66 = v334;
        unint64_t v67 = __p;
        if (v334 != __p)
        {
          do
            uint64_t v66 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v66 - 1);
          while (v66 != v65);
          unint64_t v67 = __p;
        }
        v334 = v65;
        operator delete(v67);
      }
      uint64_t v14 = v331;
      if (!v331) {
        goto LABEL_235;
      }
      uint64_t v68 = v332;
      long long v16 = v331;
      if (v332 == v331)
      {
LABEL_234:
        v332 = v14;
        operator delete(v16);
LABEL_235:
        if (v327 != v330) {
          free(v327);
        }
        return v10;
      }
      do
      {
        uint64_t v90 = (void *)*--v68;
        uint64_t v89 = v90;
        *uint64_t v68 = 0;
        if (v90) {
          operator delete[](v89);
        }
      }
      while (v68 != v14);
LABEL_233:
      long long v16 = v331;
      goto LABEL_234;
    }
    return v10;
  }
  if (v41 != v39)
  {
    if (v39 == v40)
    {
      v318[0] = (const void **)"Invalid degenerate axes: width_axis (";
      __int16 v319 = 259;
      mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
      if (v325)
      {
        LODWORD(v322) = 2;
        unint64_t v323 = v35;
        __int16 v175 = &v322;
        v176 = (char *)v327;
        if (v328 >= v329)
        {
          unint64_t v261 = v328 + 1;
          if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
          {
            int64_t v303 = (char *)&v322 - (unsigned char *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v261, 24);
            v176 = (char *)v327;
            __int16 v175 = (void ***)((char *)v327 + v303);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v261, 24);
            __int16 v175 = &v322;
            v176 = (char *)v327;
          }
        }
        uint64_t v177 = &v176[24 * v328];
        long long v178 = *(_OWORD *)v175;
        *((void *)v177 + 2) = v175[2];
        *(_OWORD *)uint64_t v177 = v178;
        uint64_t v179 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 3;
          unint64_t v323 = (unint64_t)") height_axis (";
          uint64_t v324 = 15;
          v180 = &v322;
          uint64_t v181 = (char *)v327;
          if (v179 >= v329)
          {
            unint64_t v265 = v179 + 1;
            BOOL v266 = (char *)v327 + 24 * v179 > (char *)&v322;
            if (v327 <= &v322 && v266)
            {
              int64_t v306 = (char *)&v322 - (unsigned char *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v265, 24);
              uint64_t v181 = (char *)v327;
              v180 = (void ***)((char *)v327 + v306);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v265, 24);
              v180 = &v322;
              uint64_t v181 = (char *)v327;
            }
          }
          v182 = &v181[24 * v328];
          long long v183 = *(_OWORD *)v180;
          *((void *)v182 + 2) = v180[2];
          *(_OWORD *)v182 = v183;
          ++v328;
          if (v325)
          {
            LODWORD(v322) = 2;
            unint64_t v323 = v28 | v27;
            unint64_t v184 = &v322;
            uint64_t v185 = (char *)v327;
            if (v328 >= v329)
            {
              unint64_t v271 = v328 + 1;
              if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
              {
                int64_t v309 = (char *)&v322 - (unsigned char *)v327;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v271, 24);
                uint64_t v185 = (char *)v327;
                unint64_t v184 = (void ***)((char *)v327 + v309);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v271, 24);
                unint64_t v184 = &v322;
                uint64_t v185 = (char *)v327;
              }
            }
            uint64_t v186 = &v185[24 * v328];
            long long v187 = *(_OWORD *)v184;
            *((void *)v186 + 2) = v184[2];
            *(_OWORD *)uint64_t v186 = v187;
            uint64_t v188 = ++v328;
            if (v325)
            {
              LODWORD(v322) = 3;
              unint64_t v323 = (unint64_t)") for shape of rank ";
              uint64_t v324 = 20;
              uint64_t v189 = &v322;
              v190 = (char *)v327;
              if (v188 >= v329)
              {
                unint64_t v275 = v188 + 1;
                BOOL v276 = (char *)v327 + 24 * v188 > (char *)&v322;
                if (v327 <= &v322 && v276)
                {
                  int64_t v312 = (char *)&v322 - (unsigned char *)v327;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v275, 24);
                  v190 = (char *)v327;
                  uint64_t v189 = (void ***)((char *)v327 + v312);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v275, 24);
                  uint64_t v189 = &v322;
                  v190 = (char *)v327;
                }
              }
              unsigned int v191 = &v190[24 * v328];
              long long v192 = *(_OWORD *)v189;
              *((void *)v191 + 2) = v189[2];
              *(_OWORD *)unsigned int v191 = v192;
              uint64_t v193 = ++v328;
              if (v325)
              {
                LODWORD(v322) = 2;
                unint64_t v323 = (unint64_t)v38;
                v194 = &v322;
                uint64_t v195 = (char *)v327;
                if (v193 >= v329)
                {
                  unint64_t v279 = v193 + 1;
                  BOOL v280 = (char *)v327 + 24 * v193 > (char *)&v322;
                  if (v327 <= &v322 && v280)
                  {
                    int64_t v314 = (char *)&v322 - (unsigned char *)v327;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v279, 24);
                    uint64_t v195 = (char *)v327;
                    v194 = (void ***)((char *)v327 + v314);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v279, 24);
                    v194 = &v322;
                    uint64_t v195 = (char *)v327;
                  }
                }
                v196 = &v195[24 * v328];
                long long v197 = *(_OWORD *)v194;
                *((void *)v196 + 2) = v194[2];
                *(_OWORD *)v196 = v197;
                ++v328;
              }
            }
          }
        }
      }
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
      if (v325) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
      }
      if (v335)
      {
        char v198 = (void **)__p;
        if (__p)
        {
          uint64_t v199 = v334;
          v200 = __p;
          if (v334 != __p)
          {
            do
              uint64_t v199 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v199 - 1);
            while (v199 != v198);
            v200 = __p;
          }
          v334 = v198;
          operator delete(v200);
        }
        uint64_t v14 = v331;
        if (!v331) {
          goto LABEL_235;
        }
        uint64_t v201 = v332;
        long long v16 = v331;
        if (v332 == v331) {
          goto LABEL_234;
        }
        do
        {
          uint64_t v203 = (void *)*--v201;
          v202 = v203;
          *uint64_t v201 = 0;
          if (v203) {
            operator delete[](v202);
          }
        }
        while (v201 != v14);
        goto LABEL_233;
      }
      return v10;
    }
    int64_t v204 = *(void *)(Value + 8 * v41);
    if (v204 != 0x8000000000000000 && v204 % (uint64_t)(v9 * (unint64_t)v9))
    {
      v318[0] = (const void **)"block_size (";
      __int16 v319 = 259;
      mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
      if (v325)
      {
        LODWORD(v322) = 2;
        unint64_t v323 = v9;
        uint64_t v205 = &v322;
        v206 = (char *)v327;
        if (v328 >= v329)
        {
          unint64_t v272 = v328 + 1;
          if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
          {
            int64_t v310 = (char *)&v322 - (unsigned char *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v272, 24);
            v206 = (char *)v327;
            uint64_t v205 = (void ***)((char *)v327 + v310);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v272, 24);
            uint64_t v205 = &v322;
            v206 = (char *)v327;
          }
        }
        uint64_t v207 = &v206[24 * v328];
        long long v208 = *(_OWORD *)v205;
        *((void *)v207 + 2) = v205[2];
        *(_OWORD *)uint64_t v207 = v208;
        uint64_t v209 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 3;
          unint64_t v323 = (unint64_t)") squared (";
          uint64_t v324 = 11;
          v210 = &v322;
          uint64_t v211 = (char *)v327;
          if (v209 >= v329)
          {
            unint64_t v277 = v209 + 1;
            BOOL v278 = (char *)v327 + 24 * v209 > (char *)&v322;
            if (v327 <= &v322 && v278)
            {
              int64_t v313 = (char *)&v322 - (unsigned char *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v277, 24);
              uint64_t v211 = (char *)v327;
              v210 = (void ***)((char *)v327 + v313);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v277, 24);
              v210 = &v322;
              uint64_t v211 = (char *)v327;
            }
          }
          v212 = &v211[24 * v328];
          long long v213 = *(_OWORD *)v210;
          *((void *)v212 + 2) = v210[2];
          *(_OWORD *)v212 = v213;
          uint64_t v214 = ++v328;
          if (v325)
          {
            LODWORD(v322) = 2;
            unint64_t v323 = v9 * (unint64_t)v9;
            uint64_t v215 = &v322;
            v216 = (char *)v327;
            if (v214 >= v329)
            {
              unint64_t v281 = v214 + 1;
              BOOL v282 = (char *)v327 + 24 * v214 > (char *)&v322;
              if (v327 <= &v322 && v282)
              {
                int64_t v315 = (char *)&v322 - (unsigned char *)v327;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v281, 24);
                v216 = (char *)v327;
                uint64_t v215 = (void ***)((char *)v327 + v315);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v281, 24);
                uint64_t v215 = &v322;
                v216 = (char *)v327;
              }
            }
            uint64_t v217 = &v216[24 * v328];
            long long v218 = *(_OWORD *)v215;
            *((void *)v217 + 2) = v215[2];
            *(_OWORD *)uint64_t v217 = v218;
            uint64_t v219 = ++v328;
            if (v325)
            {
              LODWORD(v322) = 3;
              unint64_t v323 = (unint64_t)") must be multiple of depth ";
              uint64_t v324 = 28;
              v220 = &v322;
              uint64_t v221 = (char *)v327;
              if (v219 >= v329)
              {
                unint64_t v283 = v219 + 1;
                BOOL v284 = (char *)v327 + 24 * v219 > (char *)&v322;
                if (v327 <= &v322 && v284)
                {
                  int64_t v316 = (char *)&v322 - (unsigned char *)v327;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v283, 24);
                  uint64_t v221 = (char *)v327;
                  v220 = (void ***)((char *)v327 + v316);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v283, 24);
                  v220 = &v322;
                  uint64_t v221 = (char *)v327;
                }
              }
              v222 = &v221[24 * v328];
              long long v223 = *(_OWORD *)v220;
              *((void *)v222 + 2) = v220[2];
              *(_OWORD *)v222 = v223;
              uint64_t v224 = ++v328;
              if (v325)
              {
                LODWORD(v322) = 2;
                unint64_t v323 = v204;
                uint64_t v225 = &v322;
                v226 = (char *)v327;
                if (v224 >= v329)
                {
                  unint64_t v285 = v224 + 1;
                  BOOL v286 = (char *)v327 + 24 * v224 > (char *)&v322;
                  if (v327 <= &v322 && v286)
                  {
                    int64_t v317 = (char *)&v322 - (unsigned char *)v327;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v285, 24);
                    v226 = (char *)v327;
                    uint64_t v225 = (void ***)((char *)v327 + v317);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v285, 24);
                    uint64_t v225 = &v322;
                    v226 = (char *)v327;
                  }
                }
                uint64_t v227 = &v226[24 * v328];
                long long v228 = *(_OWORD *)v225;
                *((void *)v227 + 2) = v225[2];
                *(_OWORD *)uint64_t v227 = v228;
                ++v328;
              }
            }
          }
        }
      }
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
      if (v325) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
      }
      if (v335)
      {
        uint64_t v229 = (void **)__p;
        if (__p)
        {
          v230 = v334;
          uint64_t v231 = __p;
          if (v334 != __p)
          {
            do
              v230 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v230 - 1);
            while (v230 != v229);
            uint64_t v231 = __p;
          }
          v334 = v229;
          operator delete(v231);
        }
        uint64_t v14 = v331;
        if (!v331) {
          goto LABEL_235;
        }
        v232 = v332;
        long long v16 = v331;
        if (v332 == v331) {
          goto LABEL_234;
        }
        do
        {
          v234 = (void *)*--v232;
          uint64_t v233 = v234;
          void *v232 = 0;
          if (v234) {
            operator delete[](v233);
          }
        }
        while (v232 != v14);
        goto LABEL_233;
      }
      return v10;
    }
    return 1;
  }
  v318[0] = (const void **)"Invalid degenerate axes: depth_axis (";
  __int16 v319 = 259;
  mlir::OpState::emitOpError(&v321, v318, (uint64_t)&v325);
  if (v325)
  {
    LODWORD(v322) = 2;
    unint64_t v323 = v34;
    uint64_t v146 = &v322;
    uint64_t v147 = (char *)v327;
    if (v328 >= v329)
    {
      unint64_t v257 = v328 + 1;
      if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
      {
        int64_t v300 = (char *)&v322 - (unsigned char *)v327;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v257, 24);
        uint64_t v147 = (char *)v327;
        uint64_t v146 = (void ***)((char *)v327 + v300);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v257, 24);
        uint64_t v146 = &v322;
        uint64_t v147 = (char *)v327;
      }
    }
    uint64_t v148 = &v147[24 * v328];
    long long v149 = *(_OWORD *)v146;
    *((void *)v148 + 2) = v146[2];
    *(_OWORD *)uint64_t v148 = v149;
    uint64_t v150 = ++v328;
    if (v325)
    {
      LODWORD(v322) = 3;
      unint64_t v323 = (unint64_t)") width_axis (";
      uint64_t v324 = 14;
      uint64_t v151 = &v322;
      uint64_t v152 = (char *)v327;
      if (v150 >= v329)
      {
        unint64_t v259 = v150 + 1;
        BOOL v260 = (char *)v327 + 24 * v150 > (char *)&v322;
        if (v327 <= &v322 && v260)
        {
          int64_t v302 = (char *)&v322 - (unsigned char *)v327;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v259, 24);
          uint64_t v152 = (char *)v327;
          uint64_t v151 = (void ***)((char *)v327 + v302);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v259, 24);
          uint64_t v151 = &v322;
          uint64_t v152 = (char *)v327;
        }
      }
      unint64_t v153 = &v152[24 * v328];
      long long v154 = *(_OWORD *)v151;
      *((void *)v153 + 2) = v151[2];
      *(_OWORD *)unint64_t v153 = v154;
      ++v328;
      if (v325)
      {
        LODWORD(v322) = 2;
        unint64_t v323 = v35;
        uint64_t v155 = &v322;
        unint64_t v156 = (char *)v327;
        if (v328 >= v329)
        {
          unint64_t v264 = v328 + 1;
          if (v327 <= &v322 && (char *)v327 + 24 * v328 > (char *)&v322)
          {
            int64_t v305 = (char *)&v322 - (unsigned char *)v327;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v264, 24);
            unint64_t v156 = (char *)v327;
            uint64_t v155 = (void ***)((char *)v327 + v305);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v264, 24);
            uint64_t v155 = &v322;
            unint64_t v156 = (char *)v327;
          }
        }
        uint64_t v157 = &v156[24 * v328];
        long long v158 = *(_OWORD *)v155;
        *((void *)v157 + 2) = v155[2];
        *(_OWORD *)uint64_t v157 = v158;
        uint64_t v159 = ++v328;
        if (v325)
        {
          LODWORD(v322) = 3;
          unint64_t v323 = (unint64_t)") for shape of rank ";
          uint64_t v324 = 20;
          unint64_t v160 = &v322;
          BOOL v161 = (char *)v327;
          if (v159 >= v329)
          {
            unint64_t v269 = v159 + 1;
            BOOL v270 = (char *)v327 + 24 * v159 > (char *)&v322;
            if (v327 <= &v322 && v270)
            {
              int64_t v308 = (char *)&v322 - (unsigned char *)v327;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v269, 24);
              BOOL v161 = (char *)v327;
              unint64_t v160 = (void ***)((char *)v327 + v308);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v269, 24);
              unint64_t v160 = &v322;
              BOOL v161 = (char *)v327;
            }
          }
          unint64_t v162 = &v161[24 * v328];
          long long v163 = *(_OWORD *)v160;
          *((void *)v162 + 2) = v160[2];
          *(_OWORD *)unint64_t v162 = v163;
          uint64_t v164 = ++v328;
          if (v325)
          {
            LODWORD(v322) = 2;
            unint64_t v323 = (unint64_t)v38;
            int64_t v165 = &v322;
            int64_t v166 = (char *)v327;
            if (v164 >= v329)
            {
              unint64_t v273 = v164 + 1;
              BOOL v274 = (char *)v327 + 24 * v164 > (char *)&v322;
              if (v327 <= &v322 && v274)
              {
                int64_t v311 = (char *)&v322 - (unsigned char *)v327;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v273, 24);
                int64_t v166 = (char *)v327;
                int64_t v165 = (void ***)((char *)v327 + v311);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v327, v330, v273, 24);
                int64_t v165 = &v322;
                int64_t v166 = (char *)v327;
              }
            }
            int64_t v167 = &v166[24 * v328];
            long long v168 = *(_OWORD *)v165;
            *((void *)v167 + 2) = v165[2];
            *(_OWORD *)int64_t v167 = v168;
            ++v328;
          }
        }
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v325);
  if (v325) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v325);
  }
  if (v335)
  {
    int64_t v169 = (void **)__p;
    if (__p)
    {
      int64_t v170 = v334;
      uint64_t v171 = __p;
      if (v334 != __p)
      {
        do
          int64_t v170 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v170 - 1);
        while (v170 != v169);
        uint64_t v171 = __p;
      }
      v334 = v169;
      operator delete(v171);
    }
    uint64_t v14 = v331;
    if (!v331) {
      goto LABEL_235;
    }
    unint64_t v172 = v332;
    long long v16 = v331;
    if (v332 == v331) {
      goto LABEL_234;
    }
    do
    {
      v174 = (void *)*--v172;
      unint64_t v173 = v174;
      void *v172 = 0;
      if (v174) {
        operator delete[](v173);
      }
    }
    while (v172 != v14);
    goto LABEL_233;
  }
  return v10;
}

uint64_t mlir::mps::SpaceToDepth2DOp::verify(mlir::mps::SpaceToDepth2DOp *this)
{
  uint64_t v355 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)this;
  v340 = (uint64_t *)v1;
  uint64_t v2 = *(void **)(v1 + 72);
  unint64_t v3 = *(void *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (const void **)v2[7];
  uint64_t v5 = (const void **)v2[11];
  uint64_t v6 = (const void **)v2[15];
  uint64_t v7 = *(void **)(*(void *)v3 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v3 = 0;
  }
  unint64_t v339 = v3;
  if (!v3)
  {
    v337[0] = (const void **)"Cannot use on a non-tensor input type";
    __int16 v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    }
    if (v354)
    {
      int v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v353;
        uint64_t v13 = __p;
        if (v353 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          uint64_t v13 = __p;
        }
        uint64_t v353 = v11;
        operator delete(v13);
      }
      uint64_t v14 = v350;
      if (!v350) {
        goto LABEL_259;
      }
      uint64_t v15 = v351;
      long long v16 = v350;
      if (v351 == v350) {
        goto LABEL_258;
      }
      do
      {
        uint64_t v18 = (void *)*--v15;
        BOOL v17 = v18;
        *uint64_t v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    return 1;
  }
  v337[0] = *(const void ***)(v1 + 80);
  mlir::IntegerAttr::getValue(v337, (llvm::APInt *)&v344);
  if (v345 > 0x40)
  {
    uint64_t v9 = *(unsigned int *)v344;
    operator delete[](v344);
  }
  else
  {
    uint64_t v9 = v344;
  }
  v344 = 0;
  uint64_t v345 = 0;
  uint64_t v341 = &v344;
  v337[0] = v4;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v337);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v341, DefiningOp))
  {
    unint64_t SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v344, v345);
    unint64_t v21 = SingleInt & 0xFFFFFFFFFFFFFF00;
    uint64_t v22 = SingleInt;
    uint64_t v24 = v23;
  }
  else
  {
    unint64_t v21 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
  }
  v344 = 0;
  uint64_t v345 = 0;
  uint64_t v341 = &v344;
  v337[0] = v5;
  uint64_t v25 = mlir::Value::getDefiningOp((mlir::Value *)v337);
  if (v25 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v341, v25))
  {
    unint64_t v26 = mlir::getSingleIntValue<long long>((uint64_t)v344, v345);
    unint64_t v27 = v26 & 0xFFFFFFFFFFFFFF00;
    uint64_t v28 = v26;
    uint64_t v30 = v29;
  }
  else
  {
    unint64_t v27 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
  }
  v344 = 0;
  uint64_t v345 = 0;
  uint64_t v341 = &v344;
  v337[0] = v6;
  uint64_t v31 = mlir::Value::getDefiningOp((mlir::Value *)v337);
  if (!v31 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v341, v31)) {
    return 1;
  }
  unint64_t v32 = mlir::getSingleIntValue<long long>((uint64_t)v344, v345);
  uint64_t v10 = 1;
  if (!v24 || !v30 || !v33) {
    return v10;
  }
  uint64_t v34 = v32;
  uint64_t v35 = v22 | v21;
  uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v339);
  unint64_t v38 = (const char *)v37;
  uint64_t v39 = (v37 & (v35 >> 63)) + v35;
  if (v39 < 0 || v37 <= v39)
  {
    v337[0] = (const void **)"invalid width_axis (";
    __int16 v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = (const char *)v35;
      uint64_t v70 = &v341;
      unint64_t v71 = (char *)v346;
      if (v347 >= v348)
      {
        unint64_t v251 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          int64_t v305 = (char *)&v341 - (unsigned char *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v251, 24);
          unint64_t v71 = (char *)v346;
          uint64_t v70 = (void ***)((char *)v346 + v305);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v251, 24);
          uint64_t v70 = &v341;
          unint64_t v71 = (char *)v346;
        }
      }
      long long v72 = &v71[24 * v347];
      long long v73 = *(_OWORD *)v70;
      *((void *)v72 + 2) = v70[2];
      *(_OWORD *)long long v72 = v73;
      uint64_t v74 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ") for shape of rank ";
        uint64_t v343 = 20;
        char v75 = &v341;
        uint64_t v76 = (char *)v346;
        if (v74 >= v348)
        {
          unint64_t v252 = v74 + 1;
          BOOL v253 = (char *)v346 + 24 * v74 > (char *)&v341;
          if (v346 <= &v341 && v253)
          {
            int64_t v306 = (char *)&v341 - (unsigned char *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v252, 24);
            uint64_t v76 = (char *)v346;
            char v75 = (void ***)((char *)v346 + v306);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v252, 24);
            char v75 = &v341;
            uint64_t v76 = (char *)v346;
          }
        }
        long long v77 = &v76[24 * v347];
        long long v78 = *(_OWORD *)v75;
        *((void *)v77 + 2) = v75[2];
        *(_OWORD *)long long v77 = v78;
        uint64_t v79 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 2;
          v342 = v38;
          unsigned int v80 = &v341;
          uint64_t v81 = (char *)v346;
          if (v79 >= v348)
          {
            unint64_t v255 = v79 + 1;
            BOOL v256 = (char *)v346 + 24 * v79 > (char *)&v341;
            if (v346 <= &v341 && v256)
            {
              int64_t v308 = (char *)&v341 - (unsigned char *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v255, 24);
              uint64_t v81 = (char *)v346;
              unsigned int v80 = (void ***)((char *)v346 + v308);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v255, 24);
              unsigned int v80 = &v341;
              uint64_t v81 = (char *)v346;
            }
          }
          long long v82 = &v81[24 * v347];
          long long v83 = *(_OWORD *)v80;
          *((void *)v82 + 2) = v80[2];
          *(_OWORD *)long long v82 = v83;
          ++v347;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    }
    if (v354)
    {
      uint64_t v84 = (void **)__p;
      if (__p)
      {
        char v85 = v353;
        uint64_t v86 = __p;
        if (v353 != __p)
        {
          do
            char v85 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v85 - 1);
          while (v85 != v84);
          uint64_t v86 = __p;
        }
        uint64_t v353 = v84;
        operator delete(v86);
      }
      uint64_t v14 = v350;
      if (!v350) {
        goto LABEL_259;
      }
      uint64_t v87 = v351;
      long long v16 = v350;
      if (v351 == v350) {
        goto LABEL_258;
      }
      do
      {
        uint64_t v89 = (void *)*--v87;
        int v88 = v89;
        *uint64_t v87 = 0;
        if (v89) {
          operator delete[](v88);
        }
      }
      while (v87 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  uint64_t v40 = (v37 & ((uint64_t)(v28 | v27) >> 63)) + (v28 | v27);
  if (v40 < 0 || v37 <= v40)
  {
    v337[0] = (const void **)"invalid height_axis (";
    __int16 v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = (const char *)(v28 | v27);
      uint64_t v92 = &v341;
      unsigned int v93 = (char *)v346;
      if (v347 >= v348)
      {
        unint64_t v254 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          int64_t v307 = (char *)&v341 - (unsigned char *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v254, 24);
          unsigned int v93 = (char *)v346;
          uint64_t v92 = (void ***)((char *)v346 + v307);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v254, 24);
          uint64_t v92 = &v341;
          unsigned int v93 = (char *)v346;
        }
      }
      long long v94 = &v93[24 * v347];
      long long v95 = *(_OWORD *)v92;
      *((void *)v94 + 2) = v92[2];
      *(_OWORD *)long long v94 = v95;
      uint64_t v96 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ") for shape of rank ";
        uint64_t v343 = 20;
        unint64_t v97 = &v341;
        uint64_t v98 = (char *)v346;
        if (v96 >= v348)
        {
          unint64_t v257 = v96 + 1;
          BOOL v258 = (char *)v346 + 24 * v96 > (char *)&v341;
          if (v346 <= &v341 && v258)
          {
            int64_t v309 = (char *)&v341 - (unsigned char *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v257, 24);
            uint64_t v98 = (char *)v346;
            unint64_t v97 = (void ***)((char *)v346 + v309);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v257, 24);
            unint64_t v97 = &v341;
            uint64_t v98 = (char *)v346;
          }
        }
        long long v99 = &v98[24 * v347];
        long long v100 = *(_OWORD *)v97;
        *((void *)v99 + 2) = v97[2];
        *(_OWORD *)long long v99 = v100;
        uint64_t v101 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 2;
          v342 = v38;
          uint64_t v102 = &v341;
          uint64_t v103 = (char *)v346;
          if (v101 >= v348)
          {
            unint64_t v260 = v101 + 1;
            BOOL v261 = (char *)v346 + 24 * v101 > (char *)&v341;
            if (v346 <= &v341 && v261)
            {
              int64_t v311 = (char *)&v341 - (unsigned char *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v260, 24);
              uint64_t v103 = (char *)v346;
              uint64_t v102 = (void ***)((char *)v346 + v311);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v260, 24);
              uint64_t v102 = &v341;
              uint64_t v103 = (char *)v346;
            }
          }
          long long v104 = &v103[24 * v347];
          long long v105 = *(_OWORD *)v102;
          *((void *)v104 + 2) = v102[2];
          *(_OWORD *)long long v104 = v105;
          ++v347;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    }
    if (v354)
    {
      uint64_t v106 = (void **)__p;
      if (__p)
      {
        unint64_t v107 = v353;
        char v108 = __p;
        if (v353 != __p)
        {
          do
            unint64_t v107 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v107 - 1);
          while (v107 != v106);
          char v108 = __p;
        }
        uint64_t v353 = v106;
        operator delete(v108);
      }
      uint64_t v14 = v350;
      if (!v350) {
        goto LABEL_259;
      }
      unint64_t v109 = v351;
      long long v16 = v350;
      if (v351 == v350) {
        goto LABEL_258;
      }
      do
      {
        uint64_t v111 = (void *)*--v109;
        BOOL v110 = v111;
        *unint64_t v109 = 0;
        if (v111) {
          operator delete[](v110);
        }
      }
      while (v109 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  uint64_t v41 = (v37 & (v34 >> 63)) + v34;
  if (v41 < 0 || v37 <= v41)
  {
    v337[0] = (const void **)"invalid depth_axis (";
    __int16 v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = (const char *)v34;
      BOOL v112 = &v341;
      uint64_t v113 = (char *)v346;
      if (v347 >= v348)
      {
        unint64_t v259 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          int64_t v310 = (char *)&v341 - (unsigned char *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v259, 24);
          uint64_t v113 = (char *)v346;
          BOOL v112 = (void ***)((char *)v346 + v310);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v259, 24);
          BOOL v112 = &v341;
          uint64_t v113 = (char *)v346;
        }
      }
      long long v114 = &v113[24 * v347];
      long long v115 = *(_OWORD *)v112;
      *((void *)v114 + 2) = v112[2];
      *(_OWORD *)long long v114 = v115;
      uint64_t v116 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ") for shape of rank ";
        uint64_t v343 = 20;
        uint64_t v117 = &v341;
        uint64_t v118 = (char *)v346;
        if (v116 >= v348)
        {
          unint64_t v262 = v116 + 1;
          BOOL v263 = (char *)v346 + 24 * v116 > (char *)&v341;
          if (v346 <= &v341 && v263)
          {
            int64_t v312 = (char *)&v341 - (unsigned char *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v262, 24);
            uint64_t v118 = (char *)v346;
            uint64_t v117 = (void ***)((char *)v346 + v312);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v262, 24);
            uint64_t v117 = &v341;
            uint64_t v118 = (char *)v346;
          }
        }
        long long v119 = &v118[24 * v347];
        long long v120 = *(_OWORD *)v117;
        *((void *)v119 + 2) = v117[2];
        *(_OWORD *)long long v119 = v120;
        uint64_t v121 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 2;
          v342 = v38;
          unint64_t v122 = &v341;
          BOOL v123 = (char *)v346;
          if (v121 >= v348)
          {
            unint64_t v264 = v121 + 1;
            BOOL v265 = (char *)v346 + 24 * v121 > (char *)&v341;
            if (v346 <= &v341 && v265)
            {
              int64_t v313 = (char *)&v341 - (unsigned char *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v264, 24);
              BOOL v123 = (char *)v346;
              unint64_t v122 = (void ***)((char *)v346 + v313);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v264, 24);
              unint64_t v122 = &v341;
              BOOL v123 = (char *)v346;
            }
          }
          long long v124 = &v123[24 * v347];
          long long v125 = *(_OWORD *)v122;
          *((void *)v124 + 2) = v122[2];
          *(_OWORD *)long long v124 = v125;
          ++v347;
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    }
    if (v354)
    {
      BOOL v126 = (void **)__p;
      if (__p)
      {
        unint64_t v127 = v353;
        BOOL v128 = __p;
        if (v353 != __p)
        {
          do
            unint64_t v127 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v127 - 1);
          while (v127 != v126);
          BOOL v128 = __p;
        }
        uint64_t v353 = v126;
        operator delete(v128);
      }
      uint64_t v14 = v350;
      if (!v350) {
        goto LABEL_259;
      }
      unint64_t v129 = v351;
      long long v16 = v350;
      if (v351 == v350) {
        goto LABEL_258;
      }
      do
      {
        unint64_t v131 = (void *)*--v129;
        BOOL v130 = v131;
        *unint64_t v129 = 0;
        if (v131) {
          operator delete[](v130);
        }
      }
      while (v129 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  if (!v9)
  {
    v337[0] = (const void **)"invalid block_size (";
    __int16 v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = 0;
      BOOL v132 = &v341;
      int64_t v133 = (char *)v346;
      if (v347 >= v348)
      {
        unint64_t v266 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          int64_t v314 = (char *)&v341 - (unsigned char *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v266, 24);
          int64_t v133 = (char *)v346;
          BOOL v132 = (void ***)((char *)v346 + v314);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v266, 24);
          BOOL v132 = &v341;
          int64_t v133 = (char *)v346;
        }
      }
      long long v134 = &v133[24 * v347];
      long long v135 = *(_OWORD *)v132;
      *((void *)v134 + 2) = v132[2];
      *(_OWORD *)long long v134 = v135;
      uint64_t v136 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ")";
        uint64_t v343 = 1;
        int64_t v137 = &v341;
        int64_t v138 = (char *)v346;
        if (v136 >= v348)
        {
          unint64_t v268 = v136 + 1;
          BOOL v269 = (char *)v346 + 24 * v136 > (char *)&v341;
          if (v346 <= &v341 && v269)
          {
            int64_t v316 = (char *)&v341 - (unsigned char *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v268, 24);
            int64_t v138 = (char *)v346;
            int64_t v137 = (void ***)((char *)v346 + v316);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v268, 24);
            int64_t v137 = &v341;
            int64_t v138 = (char *)v346;
          }
        }
        long long v139 = &v138[24 * v347];
        long long v140 = *(_OWORD *)v137;
        *((void *)v139 + 2) = v137[2];
        *(_OWORD *)long long v139 = v140;
        ++v347;
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    }
    if (v354)
    {
      unint64_t v141 = (void **)__p;
      if (__p)
      {
        unint64_t v142 = v353;
        uint64_t v143 = __p;
        if (v353 != __p)
        {
          do
            unint64_t v142 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v142 - 1);
          while (v142 != v141);
          uint64_t v143 = __p;
        }
        uint64_t v353 = v141;
        operator delete(v143);
      }
      uint64_t v14 = v350;
      if (!v350) {
        goto LABEL_259;
      }
      __int16 v144 = v351;
      long long v16 = v350;
      if (v351 == v350) {
        goto LABEL_258;
      }
      do
      {
        uint64_t v146 = (void *)*--v144;
        uint64_t v145 = v146;
        void *v144 = 0;
        if (v146) {
          operator delete[](v145);
        }
      }
      while (v144 != v14);
      goto LABEL_257;
    }
    return v10;
  }
  if (v41 == v40)
  {
    v337[0] = (const void **)"Invalid degenerate axes: depth_axis (";
    __int16 v338 = 259;
    mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
    if (v344)
    {
      LODWORD(v341) = 2;
      v342 = (const char *)v34;
      uint64_t v42 = &v341;
      unint64_t v43 = (char *)v346;
      if (v347 >= v348)
      {
        unint64_t v267 = v347 + 1;
        if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
        {
          int64_t v315 = (char *)&v341 - (unsigned char *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v267, 24);
          unint64_t v43 = (char *)v346;
          uint64_t v42 = (void ***)((char *)v346 + v315);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v267, 24);
          uint64_t v42 = &v341;
          unint64_t v43 = (char *)v346;
        }
      }
      char v44 = &v43[24 * v347];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = v42[2];
      *(_OWORD *)char v44 = v45;
      uint64_t v46 = ++v347;
      if (v344)
      {
        LODWORD(v341) = 3;
        v342 = ") height_axis (";
        uint64_t v343 = 15;
        uint64_t v47 = &v341;
        int64_t v48 = (char *)v346;
        if (v46 >= v348)
        {
          unint64_t v270 = v46 + 1;
          BOOL v271 = (char *)v346 + 24 * v46 > (char *)&v341;
          if (v346 <= &v341 && v271)
          {
            int64_t v317 = (char *)&v341 - (unsigned char *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v270, 24);
            int64_t v48 = (char *)v346;
            uint64_t v47 = (void ***)((char *)v346 + v317);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v270, 24);
            uint64_t v47 = &v341;
            int64_t v48 = (char *)v346;
          }
        }
        int64_t v49 = &v48[24 * v347];
        long long v50 = *(_OWORD *)v47;
        *((void *)v49 + 2) = v47[2];
        *(_OWORD *)int64_t v49 = v50;
        uint64_t v51 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 2;
          v342 = (const char *)(v28 | v27);
          uint64_t v52 = &v341;
          long long v53 = (char *)v346;
          if (v51 >= v348)
          {
            unint64_t v273 = v51 + 1;
            BOOL v274 = (char *)v346 + 24 * v51 > (char *)&v341;
            if (v346 <= &v341 && v274)
            {
              int64_t v319 = (char *)&v341 - (unsigned char *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v273, 24);
              long long v53 = (char *)v346;
              uint64_t v52 = (void ***)((char *)v346 + v319);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v273, 24);
              uint64_t v52 = &v341;
              long long v53 = (char *)v346;
            }
          }
          long long v54 = &v53[24 * v347];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = v52[2];
          *(_OWORD *)long long v54 = v55;
          uint64_t v56 = ++v347;
          if (v344)
          {
            LODWORD(v341) = 3;
            v342 = ") for shape of rank ";
            uint64_t v343 = 20;
            uint64_t v57 = &v341;
            unsigned int v58 = (char *)v346;
            if (v56 >= v348)
            {
              unint64_t v278 = v56 + 1;
              BOOL v279 = (char *)v346 + 24 * v56 > (char *)&v341;
              if (v346 <= &v341 && v279)
              {
                int64_t v322 = (char *)&v341 - (unsigned char *)v346;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v278, 24);
                unsigned int v58 = (char *)v346;
                uint64_t v57 = (void ***)((char *)v346 + v322);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v278, 24);
                uint64_t v57 = &v341;
                unsigned int v58 = (char *)v346;
              }
            }
            long long v59 = &v58[24 * v347];
            long long v60 = *(_OWORD *)v57;
            *((void *)v59 + 2) = v57[2];
            *(_OWORD *)long long v59 = v60;
            uint64_t v61 = ++v347;
            if (v344)
            {
              LODWORD(v341) = 2;
              v342 = v38;
              char v62 = &v341;
              long long v63 = (char *)v346;
              if (v61 >= v348)
              {
                unint64_t v283 = v61 + 1;
                BOOL v284 = (char *)v346 + 24 * v61 > (char *)&v341;
                if (v346 <= &v341 && v284)
                {
                  int64_t v325 = (char *)&v341 - (unsigned char *)v346;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v283, 24);
                  long long v63 = (char *)v346;
                  char v62 = (void ***)((char *)v346 + v325);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v283, 24);
                  char v62 = &v341;
                  long long v63 = (char *)v346;
                }
              }
              long long v64 = &v63[24 * v347];
              long long v65 = *(_OWORD *)v62;
              *((void *)v64 + 2) = v62[2];
              *(_OWORD *)long long v64 = v65;
              ++v347;
            }
          }
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
    if (v344) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
    }
    if (v354)
    {
      uint64_t v66 = (void **)__p;
      if (__p)
      {
        unint64_t v67 = v353;
        uint64_t v68 = __p;
        if (v353 != __p)
        {
          do
            unint64_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
          while (v67 != v66);
          uint64_t v68 = __p;
        }
        uint64_t v353 = v66;
        operator delete(v68);
      }
      uint64_t v14 = v350;
      if (!v350) {
        goto LABEL_259;
      }
      unint64_t v69 = v351;
      long long v16 = v350;
      if (v351 == v350)
      {
LABEL_258:
        uint64_t v351 = v14;
        operator delete(v16);
LABEL_259:
        if (v346 != v349) {
          free(v346);
        }
        return v10;
      }
      do
      {
        unint64_t v91 = (void *)*--v69;
        uint64_t v90 = v91;
        *unint64_t v69 = 0;
        if (v91) {
          operator delete[](v90);
        }
      }
      while (v69 != v14);
LABEL_257:
      long long v16 = v350;
      goto LABEL_258;
    }
    return v10;
  }
  if (v41 != v39)
  {
    if (v39 == v40)
    {
      v337[0] = (const void **)"Invalid degenerate axes: width_axis (";
      __int16 v338 = 259;
      mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
      if (v344)
      {
        LODWORD(v341) = 2;
        v342 = (const char *)v35;
        v176 = &v341;
        uint64_t v177 = (char *)v346;
        if (v347 >= v348)
        {
          unint64_t v277 = v347 + 1;
          if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
          {
            int64_t v321 = (char *)&v341 - (unsigned char *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v277, 24);
            uint64_t v177 = (char *)v346;
            v176 = (void ***)((char *)v346 + v321);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v277, 24);
            v176 = &v341;
            uint64_t v177 = (char *)v346;
          }
        }
        long long v178 = &v177[24 * v347];
        long long v179 = *(_OWORD *)v176;
        *((void *)v178 + 2) = v176[2];
        *(_OWORD *)long long v178 = v179;
        uint64_t v180 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 3;
          v342 = ") height_axis (";
          uint64_t v343 = 15;
          uint64_t v181 = &v341;
          v182 = (char *)v346;
          if (v180 >= v348)
          {
            unint64_t v281 = v180 + 1;
            BOOL v282 = (char *)v346 + 24 * v180 > (char *)&v341;
            if (v346 <= &v341 && v282)
            {
              int64_t v324 = (char *)&v341 - (unsigned char *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v281, 24);
              v182 = (char *)v346;
              uint64_t v181 = (void ***)((char *)v346 + v324);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v281, 24);
              uint64_t v181 = &v341;
              v182 = (char *)v346;
            }
          }
          long long v183 = &v182[24 * v347];
          long long v184 = *(_OWORD *)v181;
          *((void *)v183 + 2) = v181[2];
          *(_OWORD *)long long v183 = v184;
          uint64_t v185 = ++v347;
          if (v344)
          {
            LODWORD(v341) = 2;
            v342 = (const char *)(v28 | v27);
            uint64_t v186 = &v341;
            long long v187 = (char *)v346;
            if (v185 >= v348)
            {
              unint64_t v288 = v185 + 1;
              BOOL v289 = (char *)v346 + 24 * v185 > (char *)&v341;
              if (v346 <= &v341 && v289)
              {
                int64_t v328 = (char *)&v341 - (unsigned char *)v346;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v288, 24);
                long long v187 = (char *)v346;
                uint64_t v186 = (void ***)((char *)v346 + v328);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v288, 24);
                uint64_t v186 = &v341;
                long long v187 = (char *)v346;
              }
            }
            uint64_t v188 = &v187[24 * v347];
            long long v189 = *(_OWORD *)v186;
            *((void *)v188 + 2) = v186[2];
            *(_OWORD *)uint64_t v188 = v189;
            uint64_t v190 = ++v347;
            if (v344)
            {
              LODWORD(v341) = 3;
              v342 = ") for shape of rank ";
              uint64_t v343 = 20;
              unsigned int v191 = &v341;
              long long v192 = (char *)v346;
              if (v190 >= v348)
              {
                unint64_t v295 = v190 + 1;
                BOOL v296 = (char *)v346 + 24 * v190 > (char *)&v341;
                if (v346 <= &v341 && v296)
                {
                  int64_t v332 = (char *)&v341 - (unsigned char *)v346;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v295, 24);
                  long long v192 = (char *)v346;
                  unsigned int v191 = (void ***)((char *)v346 + v332);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v295, 24);
                  unsigned int v191 = &v341;
                  long long v192 = (char *)v346;
                }
              }
              uint64_t v193 = &v192[24 * v347];
              long long v194 = *(_OWORD *)v191;
              *((void *)v193 + 2) = v191[2];
              *(_OWORD *)uint64_t v193 = v194;
              uint64_t v195 = ++v347;
              if (v344)
              {
                LODWORD(v341) = 2;
                v342 = v38;
                v196 = &v341;
                long long v197 = (char *)v346;
                if (v195 >= v348)
                {
                  unint64_t v301 = v195 + 1;
                  BOOL v302 = (char *)v346 + 24 * v195 > (char *)&v341;
                  if (v346 <= &v341 && v302)
                  {
                    int64_t v335 = (char *)&v341 - (unsigned char *)v346;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v301, 24);
                    long long v197 = (char *)v346;
                    v196 = (void ***)((char *)v346 + v335);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v301, 24);
                    v196 = &v341;
                    long long v197 = (char *)v346;
                  }
                }
                char v198 = &v197[24 * v347];
                long long v199 = *(_OWORD *)v196;
                *((void *)v198 + 2) = v196[2];
                *(_OWORD *)char v198 = v199;
                ++v347;
              }
            }
          }
        }
      }
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
      if (v344) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
      }
      if (v354)
      {
        v200 = (void **)__p;
        if (__p)
        {
          uint64_t v201 = v353;
          v202 = __p;
          if (v353 != __p)
          {
            do
              uint64_t v201 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v201 - 1);
            while (v201 != v200);
            v202 = __p;
          }
          uint64_t v353 = v200;
          operator delete(v202);
        }
        uint64_t v14 = v350;
        if (!v350) {
          goto LABEL_259;
        }
        uint64_t v203 = v351;
        long long v16 = v350;
        if (v351 == v350) {
          goto LABEL_258;
        }
        do
        {
          uint64_t v205 = (void *)*--v203;
          int64_t v204 = v205;
          *uint64_t v203 = 0;
          if (v205) {
            operator delete[](v204);
          }
        }
        while (v203 != v14);
        goto LABEL_257;
      }
      return v10;
    }
    v206 = *(const char **)(Value + 8 * v39);
    uint64_t v207 = *(const char **)(Value + 8 * v40);
    uint64_t v208 = 0x8000000000000000;
    uint64_t v209 = 0x8000000000000000;
    if (v206 == (const char *)0x8000000000000000)
    {
      if (v207 == (const char *)0x8000000000000000) {
        goto LABEL_208;
      }
    }
    else
    {
      uint64_t v209 = (uint64_t)v206 / v9;
      if (v207 == (const char *)0x8000000000000000)
      {
LABEL_208:
        if (v206 == (const char *)0x8000000000000000)
        {
LABEL_234:
          uint64_t v10 = 1;
          if (v207 != (const char *)0x8000000000000000 && (const char *)(v208 * v9) != v207)
          {
            v337[0] = (const void **)"block_size (";
            __int16 v338 = 259;
            mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
            if (v344)
            {
              LODWORD(v341) = 2;
              v342 = (const char *)v9;
              v230 = &v341;
              uint64_t v231 = (char *)v346;
              if (v347 >= v348)
              {
                unint64_t v294 = v347 + 1;
                if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
                {
                  int64_t v331 = (char *)&v341 - (unsigned char *)v346;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v294, 24);
                  uint64_t v231 = (char *)v346;
                  v230 = (void ***)((char *)v346 + v331);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v294, 24);
                  v230 = &v341;
                  uint64_t v231 = (char *)v346;
                }
              }
              v232 = &v231[24 * v347];
              long long v233 = *(_OWORD *)v230;
              *((void *)v232 + 2) = v230[2];
              *(_OWORD *)v232 = v233;
              uint64_t v234 = ++v347;
              if (v344)
              {
                LODWORD(v341) = 3;
                v342 = ") must be multiple of height ";
                uint64_t v343 = 29;
                uint64_t v235 = &v341;
                unint64_t v236 = (char *)v346;
                if (v234 >= v348)
                {
                  unint64_t v299 = v234 + 1;
                  BOOL v300 = (char *)v346 + 24 * v234 > (char *)&v341;
                  if (v346 <= &v341 && v300)
                  {
                    int64_t v334 = (char *)&v341 - (unsigned char *)v346;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v299, 24);
                    unint64_t v236 = (char *)v346;
                    uint64_t v235 = (void ***)((char *)v346 + v334);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v299, 24);
                    uint64_t v235 = &v341;
                    unint64_t v236 = (char *)v346;
                  }
                }
                unint64_t v237 = &v236[24 * v347];
                long long v238 = *(_OWORD *)v235;
                *((void *)v237 + 2) = v235[2];
                *(_OWORD *)unint64_t v237 = v238;
                uint64_t v239 = ++v347;
                if (v344)
                {
                  LODWORD(v341) = 2;
                  v342 = v207;
                  unint64_t v240 = &v341;
                  BOOL v241 = (char *)v346;
                  if (v239 >= v348)
                  {
                    unint64_t v303 = v239 + 1;
                    BOOL v304 = (char *)v346 + 24 * v239 > (char *)&v341;
                    if (v346 <= &v341 && v304)
                    {
                      int64_t v336 = (char *)&v341 - (unsigned char *)v346;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v303, 24);
                      BOOL v241 = (char *)v346;
                      unint64_t v240 = (void ***)((char *)v346 + v336);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v303, 24);
                      unint64_t v240 = &v341;
                      BOOL v241 = (char *)v346;
                    }
                  }
                  unint64_t v242 = &v241[24 * v347];
                  long long v243 = *(_OWORD *)v240;
                  *((void *)v242 + 2) = v240[2];
                  *(_OWORD *)unint64_t v242 = v243;
                  ++v347;
                }
              }
            }
            uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
            if (v344) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
            }
            if (v354)
            {
              unint64_t v244 = (void **)__p;
              if (__p)
              {
                unint64_t v245 = v353;
                BOOL v246 = __p;
                if (v353 != __p)
                {
                  do
                    unint64_t v245 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v245 - 1);
                  while (v245 != v244);
                  BOOL v246 = __p;
                }
                uint64_t v353 = v244;
                operator delete(v246);
              }
              uint64_t v14 = v350;
              if (!v350) {
                goto LABEL_259;
              }
              unint64_t v247 = v351;
              long long v16 = v350;
              if (v351 == v350) {
                goto LABEL_258;
              }
              do
              {
                unint64_t v249 = (void *)*--v247;
                BOOL v248 = v249;
                *unint64_t v247 = 0;
                if (v249) {
                  operator delete[](v248);
                }
              }
              while (v247 != v14);
              goto LABEL_257;
            }
          }
          return v10;
        }
LABEL_212:
        if ((const char *)(v209 * v9) != v206)
        {
          v337[0] = (const void **)"block_size (";
          __int16 v338 = 259;
          mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
          if (v344)
          {
            LODWORD(v341) = 2;
            v342 = (const char *)v9;
            v210 = &v341;
            uint64_t v211 = (char *)v346;
            if (v347 >= v348)
            {
              unint64_t v285 = v347 + 1;
              if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
              {
                int64_t v326 = (char *)&v341 - (unsigned char *)v346;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v285, 24);
                uint64_t v211 = (char *)v346;
                v210 = (void ***)((char *)v346 + v326);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v285, 24);
                v210 = &v341;
                uint64_t v211 = (char *)v346;
              }
            }
            v212 = &v211[24 * v347];
            long long v213 = *(_OWORD *)v210;
            *((void *)v212 + 2) = v210[2];
            *(_OWORD *)v212 = v213;
            uint64_t v214 = ++v347;
            if (v344)
            {
              LODWORD(v341) = 3;
              v342 = ") must be multiple of width ";
              uint64_t v343 = 28;
              uint64_t v215 = &v341;
              v216 = (char *)v346;
              if (v214 >= v348)
              {
                unint64_t v290 = v214 + 1;
                BOOL v291 = (char *)v346 + 24 * v214 > (char *)&v341;
                if (v346 <= &v341 && v291)
                {
                  int64_t v329 = (char *)&v341 - (unsigned char *)v346;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v290, 24);
                  v216 = (char *)v346;
                  uint64_t v215 = (void ***)((char *)v346 + v329);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v290, 24);
                  uint64_t v215 = &v341;
                  v216 = (char *)v346;
                }
              }
              uint64_t v217 = &v216[24 * v347];
              long long v218 = *(_OWORD *)v215;
              *((void *)v217 + 2) = v215[2];
              *(_OWORD *)uint64_t v217 = v218;
              uint64_t v219 = ++v347;
              if (v344)
              {
                LODWORD(v341) = 2;
                v342 = v206;
                v220 = &v341;
                uint64_t v221 = (char *)v346;
                if (v219 >= v348)
                {
                  unint64_t v297 = v219 + 1;
                  BOOL v298 = (char *)v346 + 24 * v219 > (char *)&v341;
                  if (v346 <= &v341 && v298)
                  {
                    int64_t v333 = (char *)&v341 - (unsigned char *)v346;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v297, 24);
                    uint64_t v221 = (char *)v346;
                    v220 = (void ***)((char *)v346 + v333);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v297, 24);
                    v220 = &v341;
                    uint64_t v221 = (char *)v346;
                  }
                }
                v222 = &v221[24 * v347];
                long long v223 = *(_OWORD *)v220;
                *((void *)v222 + 2) = v220[2];
                *(_OWORD *)v222 = v223;
                ++v347;
              }
            }
          }
          uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
          if (v344) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
          }
          if (v354)
          {
            uint64_t v224 = (void **)__p;
            if (__p)
            {
              uint64_t v225 = v353;
              v226 = __p;
              if (v353 != __p)
              {
                do
                  uint64_t v225 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v225 - 1);
                while (v225 != v224);
                v226 = __p;
              }
              uint64_t v353 = v224;
              operator delete(v226);
            }
            uint64_t v14 = v350;
            if (!v350) {
              goto LABEL_259;
            }
            uint64_t v227 = v351;
            long long v16 = v350;
            if (v351 == v350) {
              goto LABEL_258;
            }
            do
            {
              uint64_t v229 = (void *)*--v227;
              long long v228 = v229;
              *uint64_t v227 = 0;
              if (v229) {
                operator delete[](v228);
              }
            }
            while (v227 != v14);
            goto LABEL_257;
          }
          return v10;
        }
        goto LABEL_234;
      }
    }
    uint64_t v208 = (uint64_t)v207 / v9;
    if (v206 == (const char *)0x8000000000000000) {
      goto LABEL_234;
    }
    goto LABEL_212;
  }
  v337[0] = (const void **)"Invalid degenerate axes: depth_axis (";
  __int16 v338 = 259;
  mlir::OpState::emitOpError(&v340, v337, (uint64_t)&v344);
  if (v344)
  {
    LODWORD(v341) = 2;
    v342 = (const char *)v34;
    uint64_t v147 = &v341;
    uint64_t v148 = (char *)v346;
    if (v347 >= v348)
    {
      unint64_t v272 = v347 + 1;
      if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
      {
        int64_t v318 = (char *)&v341 - (unsigned char *)v346;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v272, 24);
        uint64_t v148 = (char *)v346;
        uint64_t v147 = (void ***)((char *)v346 + v318);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v272, 24);
        uint64_t v147 = &v341;
        uint64_t v148 = (char *)v346;
      }
    }
    long long v149 = &v148[24 * v347];
    long long v150 = *(_OWORD *)v147;
    *((void *)v149 + 2) = v147[2];
    *(_OWORD *)long long v149 = v150;
    uint64_t v151 = ++v347;
    if (v344)
    {
      LODWORD(v341) = 3;
      v342 = ") width_axis (";
      uint64_t v343 = 14;
      uint64_t v152 = &v341;
      unint64_t v153 = (char *)v346;
      if (v151 >= v348)
      {
        unint64_t v275 = v151 + 1;
        BOOL v276 = (char *)v346 + 24 * v151 > (char *)&v341;
        if (v346 <= &v341 && v276)
        {
          int64_t v320 = (char *)&v341 - (unsigned char *)v346;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v275, 24);
          unint64_t v153 = (char *)v346;
          uint64_t v152 = (void ***)((char *)v346 + v320);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v275, 24);
          uint64_t v152 = &v341;
          unint64_t v153 = (char *)v346;
        }
      }
      long long v154 = &v153[24 * v347];
      long long v155 = *(_OWORD *)v152;
      *((void *)v154 + 2) = v152[2];
      *(_OWORD *)long long v154 = v155;
      ++v347;
      if (v344)
      {
        LODWORD(v341) = 2;
        v342 = (const char *)v35;
        unint64_t v156 = &v341;
        uint64_t v157 = (char *)v346;
        if (v347 >= v348)
        {
          unint64_t v280 = v347 + 1;
          if (v346 <= &v341 && (char *)v346 + 24 * v347 > (char *)&v341)
          {
            int64_t v323 = (char *)&v341 - (unsigned char *)v346;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v280, 24);
            uint64_t v157 = (char *)v346;
            unint64_t v156 = (void ***)((char *)v346 + v323);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v280, 24);
            unint64_t v156 = &v341;
            uint64_t v157 = (char *)v346;
          }
        }
        long long v158 = &v157[24 * v347];
        long long v159 = *(_OWORD *)v156;
        *((void *)v158 + 2) = v156[2];
        *(_OWORD *)long long v158 = v159;
        uint64_t v160 = ++v347;
        if (v344)
        {
          LODWORD(v341) = 3;
          v342 = ") for shape of rank ";
          uint64_t v343 = 20;
          BOOL v161 = &v341;
          unint64_t v162 = (char *)v346;
          if (v160 >= v348)
          {
            unint64_t v286 = v160 + 1;
            BOOL v287 = (char *)v346 + 24 * v160 > (char *)&v341;
            if (v346 <= &v341 && v287)
            {
              int64_t v327 = (char *)&v341 - (unsigned char *)v346;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v286, 24);
              unint64_t v162 = (char *)v346;
              BOOL v161 = (void ***)((char *)v346 + v327);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v286, 24);
              BOOL v161 = &v341;
              unint64_t v162 = (char *)v346;
            }
          }
          long long v163 = &v162[24 * v347];
          long long v164 = *(_OWORD *)v161;
          *((void *)v163 + 2) = v161[2];
          *(_OWORD *)long long v163 = v164;
          uint64_t v165 = ++v347;
          if (v344)
          {
            LODWORD(v341) = 2;
            v342 = v38;
            int64_t v166 = &v341;
            int64_t v167 = (char *)v346;
            if (v165 >= v348)
            {
              unint64_t v292 = v165 + 1;
              BOOL v293 = (char *)v346 + 24 * v165 > (char *)&v341;
              if (v346 <= &v341 && v293)
              {
                int64_t v330 = (char *)&v341 - (unsigned char *)v346;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v292, 24);
                int64_t v167 = (char *)v346;
                int64_t v166 = (void ***)((char *)v346 + v330);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, v349, v292, 24);
                int64_t v166 = &v341;
                int64_t v167 = (char *)v346;
              }
            }
            long long v168 = &v167[24 * v347];
            long long v169 = *(_OWORD *)v166;
            *((void *)v168 + 2) = v166[2];
            *(_OWORD *)long long v168 = v169;
            ++v347;
          }
        }
      }
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v344);
  if (v344) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v344);
  }
  if (v354)
  {
    int64_t v170 = (void **)__p;
    if (__p)
    {
      uint64_t v171 = v353;
      unint64_t v172 = __p;
      if (v353 != __p)
      {
        do
          uint64_t v171 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v171 - 1);
        while (v171 != v170);
        unint64_t v172 = __p;
      }
      uint64_t v353 = v170;
      operator delete(v172);
    }
    uint64_t v14 = v350;
    if (!v350) {
      goto LABEL_259;
    }
    unint64_t v173 = v351;
    long long v16 = v350;
    if (v351 == v350) {
      goto LABEL_258;
    }
    do
    {
      __int16 v175 = (void *)*--v173;
      v174 = v175;
      *unint64_t v173 = 0;
      if (v175) {
        operator delete[](v174);
      }
    }
    while (v173 != v14);
    goto LABEL_257;
  }
  return v10;
}

uint64_t mlir::mps::BatchToSpaceOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a4;
  v21[1] = a5;
  if (a5 > 3)
  {
    uint64_t v20 = 0;
    uint64_t v14 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = mlir::ValueRange::dereference_iterator(v21, 1);
    uint64_t v16 = mlir::ValueRange::dereference_iterator(v21, 2);
    uint64_t v17 = mlir::ValueRange::dereference_iterator(v21, 3);
    {
      uint64_t v18 = v20;
      uint64_t v19 = *(unsigned int *)(a11 + 8);
      if (v19 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
        LODWORD(v19) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v19) = v18;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::mps::anonymous namespace'::inferBatchToSpaceReturnType(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8)
{
  v44[6] = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(void **)(*a3 + 136);
  if (v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    uint64_t v10 = a3;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v35 = v10;
  if (v10)
  {
    if (*(_UNKNOWN **)(*v10 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      *a8 = (uint64_t)v10;
    }
    else
    {
      uint64_t v13 = *(void **)(*(void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      {
        unint64_t v15 = *(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        unint64_t v15 = 0;
      }
      unint64_t v34 = v15;
      if (v15
        && (!mlir::TensorType::hasRank((mlir::TensorType *)&v34)
         || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v34), v19 < 2)))
      {
        v43[0] = v44;
        v43[1] = (void *)0x600000000;
        v41[0] = v42;
        v41[1] = (void *)0x600000000;
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v36 = &v38;
        uint64_t v37 = a5;
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v37);
        if (DefiningOp
          && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v36, DefiningOp)
          && (unint64_t SingleInt = mlir::getSingleIntValue<long long>((uint64_t)v38, v39), v24)
          && (uint64_t v25 = SingleInt, mlir::matchConstantWithIntVector<long long>(a4, (uint64_t)v43))
          && mlir::matchConstantWithIntVector<long long>(a6, (uint64_t)v41))
        {
          unint64_t v38 = v40;
          uint64_t v39 = 0x600000000;
          uint64_t Value = (char *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
          {
            uint64_t v28 = v38;
            uint64_t v29 = v39;
            uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v35);
            uint64_t v31 = mlir::RankedTensorType::get((uint64_t)v28, v29, ElementType, 0);
          }
          else
          {
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v35);
            uint64_t v31 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
          }
          *a8 = v31;
          if (v38 != v40) {
            free(v38);
          }
        }
        else
        {
          uint64_t v32 = mlir::getElementTypeOrSelf(v10);
          *a8 = mlir::UnrankedTensorType::get(v32);
        }
        if (v41[0] != v42) {
          free(v41[0]);
        }
        if (v43[0] != v44) {
          free(v43[0]);
        }
      }
      else
      {
        uint64_t v20 = mlir::getElementTypeOrSelf(v10);
        *a8 = mlir::UnrankedTensorType::get(v20);
      }
    }
    return 1;
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "Cannot use on a non-tensor input type");
  }
}

uint64_t mlir::mps::SpaceToBatchOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  v21[0] = a4;
  v21[1] = a5;
  if (a5 > 3)
  {
    uint64_t v20 = 0;
    uint64_t v14 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = mlir::ValueRange::dereference_iterator(v21, 1);
    uint64_t v16 = mlir::ValueRange::dereference_iterator(v21, 2);
    uint64_t v17 = mlir::ValueRange::dereference_iterator(v21, 3);
    {
      uint64_t v18 = v20;
      uint64_t v19 = *(unsigned int *)(a11 + 8);
      if (v19 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
        LODWORD(v19) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v19) = v18;
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::mps::BatchToSpaceOp::verify(mlir::mps::_anonymous_namespace_ **this)
{
  v224[6] = *MEMORY[0x1E4F143B8];
  int64_t v204 = *this;
  uint64_t v1 = *((void *)v204 + 9);
  unint64_t v2 = *(void *)(*(void *)(v1 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = *(void **)(*(void *)v2 + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v2 = 0;
  }
  uint64_t v202 = 0;
  unint64_t v203 = v2;
  uint64_t v200 = 0;
  uint64_t v201 = 0;
  uint64_t v199 = 0;
  uint64_t v5 = *(uint64_t ***)(v1 + 88);
  uint64_t v208 = 0;
  v209[0] = 0;
  uint64_t v219 = (uint64_t **)&v208;
  v222 = v5;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v222);
  if (!DefiningOp) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v219, DefiningOp)) {
    return 1;
  }
  unint64_t SingleInt = mlir::getSingleIntValue<long long>(v208, v209[0]);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = SingleInt;
  uint64_t v10 = *(void *)(*((void *)v204 + 9) + 56);
  v222 = (uint64_t **)&v201;
  uint64_t v208 = v10;
  uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)&v208);
  if (!v11) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v222, v11)) {
    return 1;
  }
  uint64_t v12 = *(void *)(*((void *)v204 + 9) + 120);
  uint64_t v219 = (uint64_t **)&v199;
  uint64_t v208 = v12;
  uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v208);
  if (!v13 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v219, v13)) {
    return 1;
  }
  v222 = (uint64_t **)v224;
  uint64_t v223 = 0x600000000;
  uint64_t v219 = (uint64_t **)v221;
  uint64_t v220 = 0x600000000;
  mlir::getIntValues<long long>(v201, v202, (uint64_t)&v222, 1);
  mlir::getIntValues<long long>(v199, v200, (uint64_t)&v219, 1);
  if (v223 != v220)
  {
    __int16 v198 = 259;
    mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
    if (v208)
    {
      mlir::Diagnostic::operator<<((uint64_t)v209, *(void *)(*((void *)v204 + 9) + 56));
      if (v208)
      {
        int v205 = 3;
        uint64_t v207 = 43;
        uint64_t v46 = &v205;
        uint64_t v47 = (char *)v210;
        if (v211 >= v212)
        {
          unint64_t v150 = v211 + 1;
          if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
          {
            int64_t v177 = (char *)&v205 - (unsigned char *)v210;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v150, 24);
            uint64_t v47 = (char *)v210;
            uint64_t v46 = (int *)((char *)v210 + v177);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v150, 24);
            uint64_t v46 = &v205;
            uint64_t v47 = (char *)v210;
          }
        }
        int64_t v48 = &v47[24 * v211];
        long long v49 = *(_OWORD *)v46;
        *((void *)v48 + 2) = *((void *)v46 + 2);
        *(_OWORD *)int64_t v48 = v49;
        ++v211;
        if (v208) {
          mlir::Diagnostic::operator<<((uint64_t)v209, *(void *)(*((void *)v204 + 9) + 120));
        }
      }
    }
    uint64_t v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
    if (v208) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
    }
    if (v218)
    {
      long long v50 = (void **)__p;
      if (__p)
      {
        uint64_t v51 = v217;
        uint64_t v52 = __p;
        if (v217 != __p)
        {
          do
            uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          uint64_t v52 = __p;
        }
        uint64_t v217 = v50;
        operator delete(v52);
      }
      uint64_t v42 = v214;
      if (!v214) {
        goto LABEL_141;
      }
      long long v53 = v215;
      char v44 = v214;
      if (v215 == v214) {
        goto LABEL_140;
      }
      do
      {
        long long v55 = (void *)*--v53;
        long long v54 = v55;
        *long long v53 = 0;
        if (v55) {
          operator delete[](v54);
        }
      }
      while (v53 != v42);
      goto LABEL_139;
    }
    goto LABEL_143;
  }
  if (*(_UNKNOWN **)(*(void *)v203 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v203);
    uint64_t v15 = v14;
    uint64_t v196 = 0;
    {
      v195[0] = 0;
      v195[1] = 0;
      long long v194 = (uint64_t *)v195;
      {
        if (!v195[0]) {
          goto LABEL_27;
        }
        uint64_t v17 = v196;
        uint64_t v18 = v195;
        uint64_t v19 = v195[0];
        do
        {
          uint64_t v20 = v19;
          unint64_t v21 = v18;
          uint64_t v22 = v19[4];
          if (v22 >= v196) {
            uint64_t v18 = (void **)v19;
          }
          else {
            ++v19;
          }
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
        if (v18 == v195) {
          goto LABEL_27;
        }
        if (v22 < v196) {
          uint64_t v20 = v21;
        }
        if (v196 < v20[4])
        {
LABEL_27:
          std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v194, v195[0]);
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v203);
          if (v223)
          {
            char v24 = 0;
            uint64_t v25 = 0;
            uint64_t v26 = 0;
            uint64_t v27 = 1;
            do
            {
              uint64_t v28 = (uint64_t)v219[(void)v25];
              if (v28 <= 0)
              {
                unint64_t v91 = (char *)v222[(void)v25] + ((unint64_t)v15 & ((uint64_t)v222[(void)v25] >> 63));
                uint64_t v92 = *(const char **)(Value + 8 * (void)v91);
                __int16 v198 = 259;
                mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
                if (v208)
                {
                  int v205 = 5;
                  v206 = v25;
                  unsigned int v93 = &v205;
                  long long v94 = (char *)v210;
                  if (v211 >= v212)
                  {
                    unint64_t v151 = v211 + 1;
                    if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
                    {
                      int64_t v178 = (char *)&v205 - (unsigned char *)v210;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v151, 24);
                      long long v94 = (char *)v210;
                      unsigned int v93 = (int *)((char *)v210 + v178);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v151, 24);
                      unsigned int v93 = &v205;
                      long long v94 = (char *)v210;
                    }
                  }
                  long long v95 = &v94[24 * v211];
                  long long v96 = *(_OWORD *)v93;
                  *((void *)v95 + 2) = *((void *)v93 + 2);
                  *(_OWORD *)long long v95 = v96;
                  uint64_t v97 = ++v211;
                  if (v208)
                  {
                    int v205 = 3;
                    v206 = "] = ";
                    uint64_t v207 = 4;
                    uint64_t v98 = &v205;
                    long long v99 = (char *)v210;
                    if (v97 >= v212)
                    {
                      unint64_t v153 = v97 + 1;
                      if (v210 <= &v205 && (char *)v210 + 24 * v97 > (char *)&v205)
                      {
                        int64_t v180 = (char *)&v205 - (unsigned char *)v210;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v153, 24);
                        long long v99 = (char *)v210;
                        uint64_t v98 = (int *)((char *)v210 + v180);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v153, 24);
                        uint64_t v98 = &v205;
                        long long v99 = (char *)v210;
                      }
                    }
                    long long v100 = &v99[24 * v211];
                    long long v101 = *(_OWORD *)v98;
                    *((void *)v100 + 2) = *((void *)v98 + 2);
                    *(_OWORD *)long long v100 = v101;
                    uint64_t v102 = ++v211;
                    if (v208)
                    {
                      int v205 = 2;
                      v206 = (const char *)v28;
                      uint64_t v103 = &v205;
                      long long v104 = (char *)v210;
                      if (v102 >= v212)
                      {
                        unint64_t v157 = v102 + 1;
                        if (v210 <= &v205 && (char *)v210 + 24 * v102 > (char *)&v205)
                        {
                          int64_t v183 = (char *)&v205 - (unsigned char *)v210;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v157, 24);
                          long long v104 = (char *)v210;
                          uint64_t v103 = (int *)((char *)v210 + v183);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v157, 24);
                          uint64_t v103 = &v205;
                          long long v104 = (char *)v210;
                        }
                      }
                      long long v105 = &v104[24 * v211];
                      long long v106 = *(_OWORD *)v103;
                      *((void *)v105 + 2) = *((void *)v103 + 2);
                      *(_OWORD *)long long v105 = v106;
                      uint64_t v107 = ++v211;
                      if (v208)
                      {
                        int v205 = 3;
                        v206 = " for input size[";
                        uint64_t v207 = 16;
                        char v108 = &v205;
                        unint64_t v109 = (char *)v210;
                        if (v107 >= v212)
                        {
                          unint64_t v161 = v107 + 1;
                          BOOL v162 = (char *)v210 + 24 * v107 > (char *)&v205;
                          if (v210 <= &v205 && v162)
                          {
                            int64_t v186 = (char *)&v205 - (unsigned char *)v210;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v161, 24);
                            unint64_t v109 = (char *)v210;
                            char v108 = (int *)((char *)v210 + v186);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v161, 24);
                            char v108 = &v205;
                            unint64_t v109 = (char *)v210;
                          }
                        }
                        BOOL v110 = &v109[24 * v211];
                        long long v111 = *(_OWORD *)v108;
                        *((void *)v110 + 2) = *((void *)v108 + 2);
                        *(_OWORD *)BOOL v110 = v111;
                        uint64_t v112 = ++v211;
                        if (v208)
                        {
                          int v205 = 2;
                          v206 = v91;
                          uint64_t v113 = &v205;
                          long long v114 = (char *)v210;
                          if (v112 >= v212)
                          {
                            unint64_t v167 = v112 + 1;
                            BOOL v168 = (char *)v210 + 24 * v112 > (char *)&v205;
                            if (v210 <= &v205 && v168)
                            {
                              int64_t v189 = (char *)&v205 - (unsigned char *)v210;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v167, 24);
                              long long v114 = (char *)v210;
                              uint64_t v113 = (int *)((char *)v210 + v189);
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v167, 24);
                              uint64_t v113 = &v205;
                              long long v114 = (char *)v210;
                            }
                          }
                          long long v115 = &v114[24 * v211];
                          long long v116 = *(_OWORD *)v113;
                          *((void *)v115 + 2) = *((void *)v113 + 2);
                          *(_OWORD *)long long v115 = v116;
                          uint64_t v117 = ++v211;
                          if (v208)
                          {
                            int v205 = 3;
                            v206 = "] = ";
                            uint64_t v207 = 4;
                            uint64_t v118 = &v205;
                            long long v119 = (char *)v210;
                            if (v117 >= v212)
                            {
                              unint64_t v171 = v117 + 1;
                              BOOL v172 = (char *)v210 + 24 * v117 > (char *)&v205;
                              if (v210 <= &v205 && v172)
                              {
                                int64_t v191 = (char *)&v205 - (unsigned char *)v210;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v171, 24);
                                long long v119 = (char *)v210;
                                uint64_t v118 = (int *)((char *)v210 + v191);
                              }
                              else
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v171, 24);
                                uint64_t v118 = &v205;
                                long long v119 = (char *)v210;
                              }
                            }
                            long long v120 = &v119[24 * v211];
                            long long v121 = *(_OWORD *)v118;
                            *((void *)v120 + 2) = *((void *)v118 + 2);
                            *(_OWORD *)long long v120 = v121;
                            uint64_t v122 = ++v211;
                            if (v208)
                            {
                              int v205 = 2;
                              v206 = v92;
                              BOOL v123 = &v205;
                              long long v124 = (char *)v210;
                              if (v122 >= v212)
                              {
                                unint64_t v175 = v122 + 1;
                                BOOL v176 = (char *)v210 + 24 * v122 > (char *)&v205;
                                if (v210 <= &v205 && v176)
                                {
                                  int64_t v193 = (char *)&v205 - (unsigned char *)v210;
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v175, 24);
                                  long long v124 = (char *)v210;
                                  BOOL v123 = (int *)((char *)v210 + v193);
                                }
                                else
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v175, 24);
                                  BOOL v123 = &v205;
                                  long long v124 = (char *)v210;
                                }
                              }
                              long long v125 = &v124[24 * v211];
                              long long v126 = *(_OWORD *)v123;
                              *((void *)v125 + 2) = *((void *)v123 + 2);
                              *(_OWORD *)long long v125 = v126;
                              ++v211;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                uint64_t v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
                if (v208) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
                }
                if (!v218) {
                  goto LABEL_143;
                }
                unint64_t v127 = (void **)__p;
                if (__p)
                {
                  BOOL v128 = v217;
                  unint64_t v129 = __p;
                  if (v217 != __p)
                  {
                    do
                      BOOL v128 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v128 - 1);
                    while (v128 != v127);
                    unint64_t v129 = __p;
                  }
                  uint64_t v217 = v127;
                  operator delete(v129);
                }
                uint64_t v42 = v214;
                if (!v214) {
                  goto LABEL_141;
                }
                BOOL v130 = v215;
                char v44 = v214;
                if (v215 == v214) {
                  goto LABEL_140;
                }
                do
                {
                  BOOL v132 = (void *)*--v130;
                  unint64_t v131 = v132;
                  void *v130 = 0;
                  if (v132) {
                    operator delete[](v131);
                  }
                }
                while (v130 != v42);
                goto LABEL_139;
              }
              if (v28 != 1) {
                char v24 = (const char *)++v26;
              }
              v27 *= v28;
              ++v25;
            }
            while ((const char *)v223 != v25);
            if (v26 < 4 || !*((void *)v204 + 2 * (((unint64_t)*((unsigned int *)v204 + 11) >> 23) & 1) + 8)) {
              goto LABEL_81;
            }
            __int16 v198 = 259;
            mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
            if (v208)
            {
              int v205 = 3;
              v206 = "axes - got:  ";
              uint64_t v207 = 13;
              uint64_t v29 = &v205;
              uint64_t v30 = (char *)v210;
              if (v211 >= v212)
              {
                unint64_t v160 = v211 + 1;
                if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
                {
                  int64_t v185 = (char *)&v205 - (unsigned char *)v210;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v160, 24);
                  uint64_t v30 = (char *)v210;
                  uint64_t v29 = (int *)((char *)v210 + v185);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v160, 24);
                  uint64_t v29 = &v205;
                  uint64_t v30 = (char *)v210;
                }
              }
              uint64_t v31 = &v30[24 * v211];
              long long v32 = *(_OWORD *)v29;
              *((void *)v31 + 2) = *((void *)v29 + 2);
              *(_OWORD *)uint64_t v31 = v32;
              uint64_t v33 = ++v211;
              if (v208)
              {
                int v205 = 2;
                v206 = v24;
                unint64_t v34 = &v205;
                uint64_t v35 = (char *)v210;
                if (v33 >= v212)
                {
                  unint64_t v165 = v33 + 1;
                  BOOL v166 = (char *)v210 + 24 * v33 > (char *)&v205;
                  if (v210 <= &v205 && v166)
                  {
                    int64_t v188 = (char *)&v205 - (unsigned char *)v210;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v165, 24);
                    uint64_t v35 = (char *)v210;
                    unint64_t v34 = (int *)((char *)v210 + v188);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v165, 24);
                    unint64_t v34 = &v205;
                    uint64_t v35 = (char *)v210;
                  }
                }
                uint64_t v36 = &v35[24 * v211];
                long long v37 = *(_OWORD *)v34;
                *((void *)v36 + 2) = *((void *)v34 + 2);
                *(_OWORD *)uint64_t v36 = v37;
                ++v211;
              }
            }
            uint64_t v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
            if (v208) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
            }
            if (!v218) {
              goto LABEL_143;
            }
            uint64_t v39 = (void **)__p;
            if (__p)
            {
              uint64_t v40 = v217;
              uint64_t v41 = __p;
              if (v217 != __p)
              {
                do
                  uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
                while (v40 != v39);
                uint64_t v41 = __p;
              }
              uint64_t v217 = v39;
              operator delete(v41);
            }
            uint64_t v42 = v214;
            if (!v214) {
              goto LABEL_141;
            }
            unint64_t v43 = v215;
            char v44 = v214;
            if (v215 == v214) {
              goto LABEL_140;
            }
            do
            {
              unsigned int v58 = (void *)*--v43;
              uint64_t v57 = v58;
              *unint64_t v43 = 0;
              if (v58) {
                operator delete[](v57);
              }
            }
            while (v43 != v42);
            goto LABEL_139;
          }
          uint64_t v27 = 1;
LABEL_81:
          uint64_t v59 = v196;
          uint64_t v60 = *(void *)(Value + 8 * v196);
          if (v60 != 0x8000000000000000 && v60 % v27)
          {
            __int16 v198 = 259;
            mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
            if (v208)
            {
              int v205 = 2;
              v206 = (const char *)v27;
              uint64_t v61 = &v205;
              char v62 = (char *)v210;
              if (v211 >= v212)
              {
                unint64_t v154 = v211 + 1;
                if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
                {
                  int64_t v181 = (char *)&v205 - (unsigned char *)v210;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v154, 24);
                  char v62 = (char *)v210;
                  uint64_t v61 = (int *)((char *)v210 + v181);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v154, 24);
                  uint64_t v61 = &v205;
                  char v62 = (char *)v210;
                }
              }
              long long v63 = &v62[24 * v211];
              long long v64 = *(_OWORD *)v61;
              *((void *)v63 + 2) = *((void *)v61 + 2);
              *(_OWORD *)long long v63 = v64;
              uint64_t v65 = ++v211;
              if (v208)
              {
                int v205 = 3;
                v206 = " for input[";
                uint64_t v207 = 11;
                uint64_t v66 = &v205;
                unint64_t v67 = (char *)v210;
                if (v65 >= v212)
                {
                  unint64_t v158 = v65 + 1;
                  BOOL v159 = (char *)v210 + 24 * v65 > (char *)&v205;
                  if (v210 <= &v205 && v159)
                  {
                    int64_t v184 = (char *)&v205 - (unsigned char *)v210;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v158, 24);
                    unint64_t v67 = (char *)v210;
                    uint64_t v66 = (int *)((char *)v210 + v184);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v158, 24);
                    uint64_t v66 = &v205;
                    unint64_t v67 = (char *)v210;
                  }
                }
                uint64_t v68 = &v67[24 * v211];
                long long v69 = *(_OWORD *)v66;
                *((void *)v68 + 2) = *((void *)v66 + 2);
                *(_OWORD *)uint64_t v68 = v69;
                uint64_t v70 = ++v211;
                if (v208)
                {
                  int v205 = 2;
                  v206 = (const char *)v59;
                  unint64_t v71 = &v205;
                  long long v72 = (char *)v210;
                  if (v70 >= v212)
                  {
                    unint64_t v163 = v70 + 1;
                    BOOL v164 = (char *)v210 + 24 * v70 > (char *)&v205;
                    if (v210 <= &v205 && v164)
                    {
                      int64_t v187 = (char *)&v205 - (unsigned char *)v210;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v163, 24);
                      long long v72 = (char *)v210;
                      unint64_t v71 = (int *)((char *)v210 + v187);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v163, 24);
                      unint64_t v71 = &v205;
                      long long v72 = (char *)v210;
                    }
                  }
                  long long v73 = &v72[24 * v211];
                  long long v74 = *(_OWORD *)v71;
                  *((void *)v73 + 2) = *((void *)v71 + 2);
                  *(_OWORD *)long long v73 = v74;
                  uint64_t v75 = ++v211;
                  if (v208)
                  {
                    int v205 = 3;
                    v206 = "] = ";
                    uint64_t v207 = 4;
                    uint64_t v76 = &v205;
                    long long v77 = (char *)v210;
                    if (v75 >= v212)
                    {
                      unint64_t v169 = v75 + 1;
                      BOOL v170 = (char *)v210 + 24 * v75 > (char *)&v205;
                      if (v210 <= &v205 && v170)
                      {
                        int64_t v190 = (char *)&v205 - (unsigned char *)v210;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v169, 24);
                        long long v77 = (char *)v210;
                        uint64_t v76 = (int *)((char *)v210 + v190);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v169, 24);
                        uint64_t v76 = &v205;
                        long long v77 = (char *)v210;
                      }
                    }
                    long long v78 = &v77[24 * v211];
                    long long v79 = *(_OWORD *)v76;
                    *((void *)v78 + 2) = *((void *)v76 + 2);
                    *(_OWORD *)long long v78 = v79;
                    uint64_t v80 = ++v211;
                    if (v208)
                    {
                      int v205 = 2;
                      v206 = (const char *)v60;
                      uint64_t v81 = &v205;
                      long long v82 = (char *)v210;
                      if (v80 >= v212)
                      {
                        unint64_t v173 = v80 + 1;
                        BOOL v174 = (char *)v210 + 24 * v80 > (char *)&v205;
                        if (v210 <= &v205 && v174)
                        {
                          int64_t v192 = (char *)&v205 - (unsigned char *)v210;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v173, 24);
                          long long v82 = (char *)v210;
                          uint64_t v81 = (int *)((char *)v210 + v192);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v173, 24);
                          uint64_t v81 = &v205;
                          long long v82 = (char *)v210;
                        }
                      }
                      long long v83 = &v82[24 * v211];
                      long long v84 = *(_OWORD *)v81;
                      *((void *)v83 + 2) = *((void *)v81 + 2);
                      *(_OWORD *)long long v83 = v84;
                      ++v211;
                    }
                  }
                }
              }
            }
            uint64_t v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
            if (v208) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
            }
            if (v218)
            {
              char v85 = (void **)__p;
              if (__p)
              {
                uint64_t v86 = v217;
                uint64_t v87 = __p;
                if (v217 != __p)
                {
                  do
                    uint64_t v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
                  while (v86 != v85);
                  uint64_t v87 = __p;
                }
                uint64_t v217 = v85;
                operator delete(v87);
              }
              uint64_t v42 = v214;
              if (!v214) {
                goto LABEL_141;
              }
              int v88 = v215;
              char v44 = v214;
              if (v215 == v214)
              {
LABEL_140:
                uint64_t v215 = v42;
                operator delete(v44);
LABEL_141:
                if (v210 != v213) {
                  free(v210);
                }
                goto LABEL_143;
              }
              do
              {
                uint64_t v90 = (void *)*--v88;
                uint64_t v89 = v90;
                void *v88 = 0;
                if (v90) {
                  operator delete[](v89);
                }
              }
              while (v88 != v42);
LABEL_139:
              char v44 = v214;
              goto LABEL_140;
            }
LABEL_143:
            uint64_t v56 = v219;
            if (v219 == (uint64_t **)v221) {
              goto LABEL_145;
            }
            goto LABEL_144;
          }
          goto LABEL_105;
        }
        __int16 v198 = 259;
        mlir::OpState::emitOpError((uint64_t **)&v204, v197, (uint64_t)&v208);
        if (v208)
        {
          int v205 = 2;
          v206 = (const char *)v17;
          int64_t v133 = &v205;
          long long v134 = (char *)v210;
          if (v211 >= v212)
          {
            unint64_t v152 = v211 + 1;
            if (v210 <= &v205 && (char *)v210 + 24 * v211 > (char *)&v205)
            {
              int64_t v179 = (char *)&v205 - (unsigned char *)v210;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v152, 24);
              long long v134 = (char *)v210;
              int64_t v133 = (int *)((char *)v210 + v179);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v152, 24);
              int64_t v133 = &v205;
              long long v134 = (char *)v210;
            }
          }
          long long v135 = &v134[24 * v211];
          long long v136 = *(_OWORD *)v133;
          *((void *)v135 + 2) = *((void *)v133 + 2);
          *(_OWORD *)long long v135 = v136;
          uint64_t v137 = ++v211;
          if (v208)
          {
            int v205 = 3;
            uint64_t v207 = 36;
            int64_t v138 = &v205;
            long long v139 = (char *)v210;
            if (v137 >= v212)
            {
              unint64_t v155 = v137 + 1;
              BOOL v156 = (char *)v210 + 24 * v137 > (char *)&v205;
              if (v210 <= &v205 && v156)
              {
                int64_t v182 = (char *)&v205 - (unsigned char *)v210;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v155, 24);
                long long v139 = (char *)v210;
                int64_t v138 = (int *)((char *)v210 + v182);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v210, v213, v155, 24);
                int64_t v138 = &v205;
                long long v139 = (char *)v210;
              }
            }
            long long v140 = &v139[24 * v211];
            long long v141 = *(_OWORD *)v138;
            *((void *)v140 + 2) = *((void *)v138 + 2);
            *(_OWORD *)long long v140 = v141;
            ++v211;
            if (v208) {
              mlir::Diagnostic::operator<<((uint64_t)v209, *(void *)(*((void *)v204 + 9) + 56));
            }
          }
        }
        uint64_t v38 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v208);
        if (v208) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v208);
        }
        if (v218)
        {
          unint64_t v142 = (void **)__p;
          if (__p)
          {
            uint64_t v143 = v217;
            __int16 v144 = __p;
            if (v217 != __p)
            {
              do
                uint64_t v143 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v143 - 1);
              while (v143 != v142);
              __int16 v144 = __p;
            }
            uint64_t v217 = v142;
            operator delete(v144);
          }
          uint64_t v145 = v214;
          if (v214)
          {
            uint64_t v146 = v215;
            uint64_t v147 = v214;
            if (v215 != v214)
            {
              do
              {
                long long v149 = (void *)*--v146;
                uint64_t v148 = v149;
                void *v146 = 0;
                if (v149) {
                  operator delete[](v148);
                }
              }
              while (v146 != v145);
              uint64_t v147 = v214;
            }
            uint64_t v215 = v145;
            operator delete(v147);
          }
          if (v210 != v213) {
            free(v210);
          }
        }
      }
      else
      {
        uint64_t v38 = 0;
      }
      std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v194, v195[0]);
      uint64_t v56 = v219;
      if (v219 == (uint64_t **)v221) {
        goto LABEL_145;
      }
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v56 = v219;
      if (v219 == (uint64_t **)v221) {
        goto LABEL_145;
      }
    }
LABEL_144:
    free(v56);
    goto LABEL_145;
  }
LABEL_105:
  uint64_t v38 = 1;
  uint64_t v56 = v219;
  if (v219 != (uint64_t **)v221) {
    goto LABEL_144;
  }
LABEL_145:
  if (v222 != v224) {
    free(v222);
  }
  return v38;
}

uint64_t mlir::mps::SpaceToBatchOp::verify(mlir::mps::_anonymous_namespace_ **this)
{
  v178[6] = *MEMORY[0x1E4F143B8];
  unint64_t v158 = *this;
  uint64_t v1 = *((void *)v158 + 9);
  unint64_t v2 = *(void *)(*(void *)(v1 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = *(void **)(*(void *)v2 + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v2 = 0;
  }
  uint64_t v156 = 0;
  unint64_t v157 = v2;
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  uint64_t v153 = 0;
  uint64_t v5 = *(uint64_t ***)(v1 + 88);
  uint64_t v162 = 0;
  v163[0] = 0;
  unint64_t v173 = (uint64_t **)&v162;
  BOOL v176 = v5;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v176);
  if (!DefiningOp) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v173, DefiningOp)) {
    return 1;
  }
  unint64_t SingleInt = mlir::getSingleIntValue<long long>(v162, v163[0]);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = SingleInt;
  uint64_t v10 = *(void *)(*((void *)v158 + 9) + 56);
  BOOL v176 = (uint64_t **)&v155;
  uint64_t v162 = v10;
  uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)&v162);
  if (!v11) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v176, v11)) {
    return 1;
  }
  uint64_t v12 = *(void *)(*((void *)v158 + 9) + 120);
  unint64_t v173 = (uint64_t **)&v153;
  uint64_t v162 = v12;
  uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v162);
  if (!v13 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v173, v13)) {
    return 1;
  }
  BOOL v176 = (uint64_t **)v178;
  uint64_t v177 = 0x600000000;
  unint64_t v173 = (uint64_t **)v175;
  uint64_t v174 = 0x600000000;
  mlir::getIntValues<long long>(v155, v156, (uint64_t)&v176, 1);
  mlir::getIntValues<long long>(v153, v154, (uint64_t)&v173, 1);
  if (v177 != v174)
  {
    __int16 v152 = 259;
    mlir::OpState::emitOpError((uint64_t **)&v158, v151, (uint64_t)&v162);
    if (v162)
    {
      mlir::Diagnostic::operator<<((uint64_t)v163, *(void *)(*((void *)v158 + 9) + 56));
      if (v162)
      {
        int v159 = 3;
        uint64_t v161 = 43;
        long long v72 = &v159;
        long long v73 = (char *)v164;
        if (v165 >= v166)
        {
          unint64_t v116 = v165 + 1;
          if (v164 <= &v159 && (char *)v164 + 24 * v165 > (char *)&v159)
          {
            int64_t v136 = (char *)&v159 - (unsigned char *)v164;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v116, 24);
            long long v73 = (char *)v164;
            long long v72 = (int *)((char *)v164 + v136);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v116, 24);
            long long v72 = &v159;
            long long v73 = (char *)v164;
          }
        }
        long long v74 = &v73[24 * v165];
        long long v75 = *(_OWORD *)v72;
        *((void *)v74 + 2) = *((void *)v72 + 2);
        *(_OWORD *)long long v74 = v75;
        ++v165;
        if (v162) {
          mlir::Diagnostic::operator<<((uint64_t)v163, *(void *)(*((void *)v158 + 9) + 120));
        }
      }
    }
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v162);
    if (v162) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
    }
    if (!v172) {
      goto LABEL_114;
    }
    uint64_t v76 = (void **)__p;
    if (__p)
    {
      long long v77 = v171;
      long long v78 = __p;
      if (v171 != __p)
      {
        do
          long long v77 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v77 - 1);
        while (v77 != v76);
        long long v78 = __p;
      }
      unint64_t v171 = v76;
      operator delete(v78);
    }
    long long v69 = v168;
    if (!v168) {
      goto LABEL_112;
    }
    long long v79 = v169;
    unint64_t v71 = v168;
    if (v169 == v168)
    {
LABEL_111:
      unint64_t v169 = v69;
      operator delete(v71);
LABEL_112:
      if (v164 != v167) {
        free(v164);
      }
      goto LABEL_114;
    }
    do
    {
      uint64_t v81 = (void *)*--v79;
      uint64_t v80 = v81;
      *long long v79 = 0;
      if (v81) {
        operator delete[](v80);
      }
    }
    while (v79 != v69);
LABEL_110:
    unint64_t v71 = v168;
    goto LABEL_111;
  }
  if (*(_UNKNOWN **)(*(void *)v157 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    goto LABEL_106;
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v157);
  uint64_t v15 = v14;
  unint64_t v150 = 0;
  {
    v149[0] = 0;
    v149[1] = 0;
    uint64_t v148 = (uint64_t *)v149;
    {
      if (!v149[0]) {
        goto LABEL_27;
      }
      uint64_t v17 = v150;
      uint64_t v18 = v149;
      uint64_t v19 = v149[0];
      do
      {
        uint64_t v20 = v19;
        unint64_t v21 = v18;
        uint64_t v22 = v19[4];
        if (v22 >= (uint64_t)v150) {
          uint64_t v18 = (void **)v19;
        }
        else {
          ++v19;
        }
        uint64_t v19 = (void *)*v19;
      }
      while (v19);
      if (v18 == v149) {
        goto LABEL_27;
      }
      if (v22 < (uint64_t)v150) {
        uint64_t v20 = v21;
      }
      if ((uint64_t)v150 < v20[4])
      {
LABEL_27:
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v148, v149[0]);
        uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v157);
        if (v177)
        {
          char v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          do
          {
            uint64_t v29 = (uint64_t)v173[(void)v25];
            uint64_t v30 = (char *)v176[(void)v25] + ((unint64_t)v15 & ((uint64_t)v176[(void)v25] >> 63));
            uint64_t v31 = *(void *)(Value + 8 * (void)v30);
            if (v29 < 1 || v31 != 0x8000000000000000 && v31 % v29)
            {
              __int16 v152 = 259;
              mlir::OpState::emitOpError((uint64_t **)&v158, v151, (uint64_t)&v162);
              if (v162)
              {
                int v159 = 5;
                unint64_t v160 = v25;
                long long v32 = &v159;
                uint64_t v33 = (char *)v164;
                if (v165 >= v166)
                {
                  unint64_t v117 = v165 + 1;
                  if (v164 <= &v159 && (char *)v164 + 24 * v165 > (char *)&v159)
                  {
                    int64_t v137 = (char *)&v159 - (unsigned char *)v164;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v117, 24);
                    uint64_t v33 = (char *)v164;
                    long long v32 = (int *)((char *)v164 + v137);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v117, 24);
                    long long v32 = &v159;
                    uint64_t v33 = (char *)v164;
                  }
                }
                unint64_t v34 = &v33[24 * v165];
                long long v35 = *(_OWORD *)v32;
                *((void *)v34 + 2) = *((void *)v32 + 2);
                *(_OWORD *)unint64_t v34 = v35;
                uint64_t v36 = ++v165;
                if (v162)
                {
                  int v159 = 3;
                  unint64_t v160 = "] = ";
                  uint64_t v161 = 4;
                  long long v37 = &v159;
                  uint64_t v38 = (char *)v164;
                  if (v36 >= v166)
                  {
                    unint64_t v119 = v36 + 1;
                    BOOL v120 = (char *)v164 + 24 * v36 > (char *)&v159;
                    if (v164 <= &v159 && v120)
                    {
                      int64_t v139 = (char *)&v159 - (unsigned char *)v164;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v119, 24);
                      uint64_t v38 = (char *)v164;
                      long long v37 = (int *)((char *)v164 + v139);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v119, 24);
                      long long v37 = &v159;
                      uint64_t v38 = (char *)v164;
                    }
                  }
                  uint64_t v39 = &v38[24 * v165];
                  long long v40 = *(_OWORD *)v37;
                  *((void *)v39 + 2) = *((void *)v37 + 2);
                  *(_OWORD *)uint64_t v39 = v40;
                  uint64_t v41 = ++v165;
                  if (v162)
                  {
                    int v159 = 2;
                    unint64_t v160 = (const char *)v29;
                    uint64_t v42 = &v159;
                    unint64_t v43 = (char *)v164;
                    if (v41 >= v166)
                    {
                      unint64_t v123 = v41 + 1;
                      BOOL v124 = (char *)v164 + 24 * v41 > (char *)&v159;
                      if (v164 <= &v159 && v124)
                      {
                        int64_t v141 = (char *)&v159 - (unsigned char *)v164;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v123, 24);
                        unint64_t v43 = (char *)v164;
                        uint64_t v42 = (int *)((char *)v164 + v141);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v123, 24);
                        uint64_t v42 = &v159;
                        unint64_t v43 = (char *)v164;
                      }
                    }
                    char v44 = &v43[24 * v165];
                    long long v45 = *(_OWORD *)v42;
                    *((void *)v44 + 2) = *((void *)v42 + 2);
                    *(_OWORD *)char v44 = v45;
                    uint64_t v46 = ++v165;
                    if (v162)
                    {
                      int v159 = 3;
                      unint64_t v160 = " for input size[";
                      uint64_t v161 = 16;
                      uint64_t v47 = &v159;
                      int64_t v48 = (char *)v164;
                      if (v46 >= v166)
                      {
                        unint64_t v125 = v46 + 1;
                        BOOL v126 = (char *)v164 + 24 * v46 > (char *)&v159;
                        if (v164 <= &v159 && v126)
                        {
                          int64_t v142 = (char *)&v159 - (unsigned char *)v164;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v125, 24);
                          int64_t v48 = (char *)v164;
                          uint64_t v47 = (int *)((char *)v164 + v142);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v125, 24);
                          uint64_t v47 = &v159;
                          int64_t v48 = (char *)v164;
                        }
                      }
                      long long v49 = &v48[24 * v165];
                      long long v50 = *(_OWORD *)v47;
                      *((void *)v49 + 2) = *((void *)v47 + 2);
                      *(_OWORD *)long long v49 = v50;
                      uint64_t v51 = ++v165;
                      if (v162)
                      {
                        int v159 = 2;
                        unint64_t v160 = v30;
                        uint64_t v52 = &v159;
                        long long v53 = (char *)v164;
                        if (v51 >= v166)
                        {
                          unint64_t v128 = v51 + 1;
                          BOOL v129 = (char *)v164 + 24 * v51 > (char *)&v159;
                          if (v164 <= &v159 && v129)
                          {
                            int64_t v144 = (char *)&v159 - (unsigned char *)v164;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v128, 24);
                            long long v53 = (char *)v164;
                            uint64_t v52 = (int *)((char *)v164 + v144);
                          }
                          else
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v128, 24);
                            uint64_t v52 = &v159;
                            long long v53 = (char *)v164;
                          }
                        }
                        long long v54 = &v53[24 * v165];
                        long long v55 = *(_OWORD *)v52;
                        *((void *)v54 + 2) = *((void *)v52 + 2);
                        *(_OWORD *)long long v54 = v55;
                        uint64_t v56 = ++v165;
                        if (v162)
                        {
                          int v159 = 3;
                          unint64_t v160 = "] = ";
                          uint64_t v161 = 4;
                          uint64_t v57 = &v159;
                          unsigned int v58 = (char *)v164;
                          if (v56 >= v166)
                          {
                            unint64_t v132 = v56 + 1;
                            BOOL v133 = (char *)v164 + 24 * v56 > (char *)&v159;
                            if (v164 <= &v159 && v133)
                            {
                              int64_t v146 = (char *)&v159 - (unsigned char *)v164;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v132, 24);
                              unsigned int v58 = (char *)v164;
                              uint64_t v57 = (int *)((char *)v164 + v146);
                            }
                            else
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v132, 24);
                              uint64_t v57 = &v159;
                              unsigned int v58 = (char *)v164;
                            }
                          }
                          uint64_t v59 = &v58[24 * v165];
                          long long v60 = *(_OWORD *)v57;
                          *((void *)v59 + 2) = *((void *)v57 + 2);
                          *(_OWORD *)uint64_t v59 = v60;
                          uint64_t v61 = ++v165;
                          if (v162)
                          {
                            int v159 = 2;
                            unint64_t v160 = (const char *)v31;
                            char v62 = &v159;
                            long long v63 = (char *)v164;
                            if (v61 >= v166)
                            {
                              unint64_t v134 = v61 + 1;
                              BOOL v135 = (char *)v164 + 24 * v61 > (char *)&v159;
                              if (v164 <= &v159 && v135)
                              {
                                int64_t v147 = (char *)&v159 - (unsigned char *)v164;
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v134, 24);
                                long long v63 = (char *)v164;
                                char v62 = (int *)((char *)v164 + v147);
                              }
                              else
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v134, 24);
                                char v62 = &v159;
                                long long v63 = (char *)v164;
                              }
                            }
                            long long v64 = &v63[24 * v165];
                            long long v65 = *(_OWORD *)v62;
                            *((void *)v64 + 2) = *((void *)v62 + 2);
                            *(_OWORD *)long long v64 = v65;
                            ++v165;
                          }
                        }
                      }
                    }
                  }
                }
              }
              uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v162);
              if (v162) {
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
              }
              if (!v172) {
                goto LABEL_114;
              }
              uint64_t v66 = (void **)__p;
              if (__p)
              {
                unint64_t v67 = v171;
                uint64_t v68 = __p;
                if (v171 != __p)
                {
                  do
                    unint64_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
                  while (v67 != v66);
                  uint64_t v68 = __p;
                }
                unint64_t v171 = v66;
                operator delete(v68);
              }
              long long v69 = v168;
              if (!v168) {
                goto LABEL_112;
              }
              uint64_t v70 = v169;
              unint64_t v71 = v168;
              if (v169 == v168) {
                goto LABEL_111;
              }
              do
              {
                long long v83 = (void *)*--v70;
                long long v82 = v83;
                void *v70 = 0;
                if (v83) {
                  operator delete[](v82);
                }
              }
              while (v70 != v69);
              goto LABEL_110;
            }
            if ((unint64_t)v29 > 1) {
              char v24 = (const char *)++v26;
            }
            ++v25;
          }
          while ((const char *)v177 != v25);
          if (v26 < 4 || !*((void *)v158 + 2 * (((unint64_t)*((unsigned int *)v158 + 11) >> 23) & 1) + 8)) {
            goto LABEL_106;
          }
          __int16 v152 = 259;
          mlir::OpState::emitOpError((uint64_t **)&v158, v151, (uint64_t)&v162);
          if (v162)
          {
            int v159 = 3;
            unint64_t v160 = "axes - got:  ";
            uint64_t v161 = 13;
            long long v84 = &v159;
            char v85 = (char *)v164;
            if (v165 >= v166)
            {
              unint64_t v127 = v165 + 1;
              if (v164 <= &v159 && (char *)v164 + 24 * v165 > (char *)&v159)
              {
                int64_t v143 = (char *)&v159 - (unsigned char *)v164;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v127, 24);
                char v85 = (char *)v164;
                long long v84 = (int *)((char *)v164 + v143);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v127, 24);
                long long v84 = &v159;
                char v85 = (char *)v164;
              }
            }
            uint64_t v86 = &v85[24 * v165];
            long long v87 = *(_OWORD *)v84;
            *((void *)v86 + 2) = *((void *)v84 + 2);
            *(_OWORD *)uint64_t v86 = v87;
            uint64_t v88 = ++v165;
            if (v162)
            {
              int v159 = 2;
              unint64_t v160 = v24;
              uint64_t v89 = &v159;
              uint64_t v90 = (char *)v164;
              if (v88 >= v166)
              {
                unint64_t v130 = v88 + 1;
                BOOL v131 = (char *)v164 + 24 * v88 > (char *)&v159;
                if (v164 <= &v159 && v131)
                {
                  int64_t v145 = (char *)&v159 - (unsigned char *)v164;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v130, 24);
                  uint64_t v90 = (char *)v164;
                  uint64_t v89 = (int *)((char *)v164 + v145);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v130, 24);
                  uint64_t v89 = &v159;
                  uint64_t v90 = (char *)v164;
                }
              }
              unint64_t v91 = &v90[24 * v165];
              long long v92 = *(_OWORD *)v89;
              *((void *)v91 + 2) = *((void *)v89 + 2);
              *(_OWORD *)unint64_t v91 = v92;
              ++v165;
            }
          }
          uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v162);
          if (v162) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
          }
          if (!v172) {
            goto LABEL_114;
          }
          unsigned int v93 = (void **)__p;
          if (__p)
          {
            long long v94 = v171;
            long long v95 = __p;
            if (v171 != __p)
            {
              do
                long long v94 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v94 - 1);
              while (v94 != v93);
              long long v95 = __p;
            }
            unint64_t v171 = v93;
            operator delete(v95);
          }
          long long v69 = v168;
          if (!v168) {
            goto LABEL_112;
          }
          long long v96 = v169;
          unint64_t v71 = v168;
          if (v169 == v168) {
            goto LABEL_111;
          }
          do
          {
            uint64_t v98 = (void *)*--v96;
            uint64_t v97 = v98;
            void *v96 = 0;
            if (v98) {
              operator delete[](v97);
            }
          }
          while (v96 != v69);
          goto LABEL_110;
        }
LABEL_106:
        uint64_t v27 = 1;
        goto LABEL_114;
      }
      __int16 v152 = 259;
      mlir::OpState::emitOpError((uint64_t **)&v158, v151, (uint64_t)&v162);
      if (v162)
      {
        int v159 = 2;
        unint64_t v160 = v17;
        long long v99 = &v159;
        long long v100 = (char *)v164;
        if (v165 >= v166)
        {
          unint64_t v118 = v165 + 1;
          if (v164 <= &v159 && (char *)v164 + 24 * v165 > (char *)&v159)
          {
            int64_t v138 = (char *)&v159 - (unsigned char *)v164;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v118, 24);
            long long v100 = (char *)v164;
            long long v99 = (int *)((char *)v164 + v138);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v118, 24);
            long long v99 = &v159;
            long long v100 = (char *)v164;
          }
        }
        long long v101 = &v100[24 * v165];
        long long v102 = *(_OWORD *)v99;
        *((void *)v101 + 2) = *((void *)v99 + 2);
        *(_OWORD *)long long v101 = v102;
        uint64_t v103 = ++v165;
        if (v162)
        {
          int v159 = 3;
          uint64_t v161 = 36;
          long long v104 = &v159;
          long long v105 = (char *)v164;
          if (v103 >= v166)
          {
            unint64_t v121 = v103 + 1;
            BOOL v122 = (char *)v164 + 24 * v103 > (char *)&v159;
            if (v164 <= &v159 && v122)
            {
              int64_t v140 = (char *)&v159 - (unsigned char *)v164;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v121, 24);
              long long v105 = (char *)v164;
              long long v104 = (int *)((char *)v164 + v140);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, v167, v121, 24);
              long long v104 = &v159;
              long long v105 = (char *)v164;
            }
          }
          long long v106 = &v105[24 * v165];
          long long v107 = *(_OWORD *)v104;
          *((void *)v106 + 2) = *((void *)v104 + 2);
          *(_OWORD *)long long v106 = v107;
          ++v165;
          if (v162) {
            mlir::Diagnostic::operator<<((uint64_t)v163, *(void *)(*((void *)v158 + 9) + 56));
          }
        }
      }
      uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v162);
      if (v162) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v162);
      }
      if (v172)
      {
        char v108 = (void **)__p;
        if (__p)
        {
          unint64_t v109 = v171;
          BOOL v110 = __p;
          if (v171 != __p)
          {
            do
              unint64_t v109 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v109 - 1);
            while (v109 != v108);
            BOOL v110 = __p;
          }
          unint64_t v171 = v108;
          operator delete(v110);
        }
        long long v111 = v168;
        if (v168)
        {
          uint64_t v112 = v169;
          uint64_t v113 = v168;
          if (v169 != v168)
          {
            do
            {
              long long v115 = (void *)*--v112;
              long long v114 = v115;
              void *v112 = 0;
              if (v115) {
                operator delete[](v114);
              }
            }
            while (v112 != v111);
            uint64_t v113 = v168;
          }
          unint64_t v169 = v111;
          operator delete(v113);
        }
        if (v164 != v167) {
          free(v164);
        }
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v148, v149[0]);
  }
  else
  {
    uint64_t v27 = 0;
  }
LABEL_114:
  if (v173 != (uint64_t **)v175) {
    free(v173);
  }
  if (v176 != v178) {
    free(v176);
  }
  return v27;
}

uint64_t mlir::mps::GetCoordOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = v35;
  uint64_t v34 = 0x400000000;
  if (a7) {
    uint64_t v14 = (void *)*a7;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v25 = a6;
  v26[0] = 0;
  char v27 = 0;
  uint64_t v28 = v14;
  uint64_t v29 = a9;
  uint64_t v30 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v25);
    if (v27) {
      char v27 = 0;
    }
    mlir::OperationName::OperationName(v26, "mps.get_coordinates", 19, Context);
    char v27 = 1;
  }
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v36 = a4;
  uint64_t v37 = 0;
  uint64_t v16 = mlir::ValueRange::dereference_iterator(&v36, 0);
  uint64_t v36 = v28;
  if (v28)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
    uint64_t v18 = (void *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v18) {
      uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v36 = v18;
    uint64_t v37 = v19;
    uint64_t v22 = *(void **)(*(void *)Value + 136);
    if (v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id
      || Value != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36))
    {
      uint64_t v23 = mlir::IntegerType::get(a1, 0x20u, 1u);
      uint64_t v20 = mlir::UnrankedTensorType::get(v23);
      uint64_t v21 = *(unsigned int *)(a11 + 8);
      if (v21 < *(_DWORD *)(a11 + 12)) {
        goto LABEL_30;
      }
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t Value = mlir::IntegerType::get(a1, 0x20u, 1u);
  }
  if (mlir::matchConstantWithIntVector<long long>(v16, (uint64_t)&v33))
  {
    uint64_t v20 = mlir::RankedTensorType::get((uint64_t)v33, v34, Value, 0);
    uint64_t v21 = *(unsigned int *)(a11 + 8);
    if (v21 < *(_DWORD *)(a11 + 12)) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v20 = mlir::UnrankedTensorType::get(Value);
    uint64_t v21 = *(unsigned int *)(a11 + 8);
    if (v21 < *(_DWORD *)(a11 + 12)) {
      goto LABEL_30;
    }
  }
LABEL_34:
  llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
  LODWORD(v21) = *(_DWORD *)(a11 + 8);
LABEL_30:
  *(void *)(*(void *)a11 + 8 * v21) = v20;
  ++*(_DWORD *)(a11 + 8);
  if (v33 != v35) {
    free(v33);
  }
  return 1;
}

uint64_t mlir::mps::GetCoordOp::verify(uint64_t **this)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *this;
  unint64_t v3 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    unint64_t v2 = *this;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *((_DWORD *)v2 + 11);
  v89[0] = v3;
  v89[1] = v4;
  uint64_t v93 = v2[2 * ((v5 >> 23) & 1) + 8];
  if (v93)
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v93);
    uint64_t v7 = *(void **)(*(void *)Value + 136);
    if (v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v7 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      __int16 v88 = 257;
      mlir::OpState::emitOpError(this, v87, (uint64_t)&v93);
      if (v93)
      {
        LODWORD(v90) = 3;
        unint64_t v91 = "Optional return type cannot be a float type.";
        uint64_t v92 = 44;
        uint64_t v19 = &v90;
        uint64_t v20 = (char *)v95;
        if (v96 >= v97)
        {
          unint64_t v75 = v96 + 1;
          if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
          {
            int64_t v82 = (char *)&v90 - (unsigned char *)v95;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v75, 24);
            uint64_t v20 = (char *)v95;
            uint64_t v19 = (uint64_t ***)((char *)v95 + v82);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v75, 24);
            uint64_t v19 = &v90;
            uint64_t v20 = (char *)v95;
          }
        }
        uint64_t v21 = &v20[24 * v96];
        long long v22 = *(_OWORD *)v19;
        *((void *)v21 + 2) = v19[2];
        *(_OWORD *)uint64_t v21 = v22;
        ++v96;
      }
      uint64_t v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v93);
      if (v93) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
      }
      if (v103)
      {
        char v24 = (void **)__p;
        if (__p)
        {
          uint64_t v25 = v102;
          uint64_t v26 = __p;
          if (v102 != __p)
          {
            do
              uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
            while (v25 != v24);
            uint64_t v26 = __p;
          }
          long long v102 = v24;
          operator delete(v26);
        }
        char v27 = v99;
        if (!v99) {
          goto LABEL_109;
        }
        uint64_t v28 = v100;
        uint64_t v29 = v99;
        if (v100 == v99) {
          goto LABEL_108;
        }
        do
        {
          uint64_t v31 = (void *)*--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        goto LABEL_107;
      }
      return v23;
    }
    if (Value != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v89))
    {
      __int16 v88 = 257;
      mlir::OpState::emitOpError(this, v87, (uint64_t)&v93);
      if (v93)
      {
        LODWORD(v90) = 3;
        unint64_t v91 = "Mismatch of optional return type and operand element type.";
        uint64_t v92 = 58;
        uint64_t v32 = &v90;
        uint64_t v33 = (char *)v95;
        if (v96 >= v97)
        {
          unint64_t v79 = v96 + 1;
          if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
          {
            int64_t v85 = (char *)&v90 - (unsigned char *)v95;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v79, 24);
            uint64_t v33 = (char *)v95;
            uint64_t v32 = (uint64_t ***)((char *)v95 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v79, 24);
            uint64_t v32 = &v90;
            uint64_t v33 = (char *)v95;
          }
        }
        uint64_t v34 = &v33[24 * v96];
        long long v35 = *(_OWORD *)v32;
        *((void *)v34 + 2) = v32[2];
        *(_OWORD *)uint64_t v34 = v35;
        ++v96;
      }
      uint64_t v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v93);
      if (v93) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
      }
      if (v103)
      {
        uint64_t v36 = (void **)__p;
        if (__p)
        {
          uint64_t v37 = v102;
          uint64_t v38 = __p;
          if (v102 != __p)
          {
            do
              uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            uint64_t v38 = __p;
          }
          long long v102 = v36;
          operator delete(v38);
        }
        char v27 = v99;
        if (!v99) {
          goto LABEL_109;
        }
        uint64_t v39 = v100;
        uint64_t v29 = v99;
        if (v100 == v99)
        {
LABEL_108:
          long long v100 = v27;
          operator delete(v29);
LABEL_109:
          if (v95 != v98) {
            free(v95);
          }
          return v23;
        }
        do
        {
          long long v53 = (void *)*--v39;
          uint64_t v52 = v53;
          *uint64_t v39 = 0;
          if (v53) {
            operator delete[](v52);
          }
        }
        while (v39 != v27);
LABEL_107:
        uint64_t v29 = v99;
        goto LABEL_108;
      }
      return v23;
    }
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89)) {
    return 1;
  }
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  if (v41)
  {
    uint64_t v42 = 8 * v41;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v42 -= 8;
      if (!v42) {
        goto LABEL_77;
      }
    }
    return 1;
  }
LABEL_77:
  unint64_t v43 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
  uint64_t NumElements = mlir::ShapedType::getNumElements(v43, v44);
  uint64_t v46 = *(const void ***)((*this)[9] + 56);
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v90 = (uint64_t **)&v93;
  v87[0] = v46;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v87);
  if (!DefiningOp) {
    return 1;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v90, DefiningOp)) {
    return 1;
  }
  int64_t SingleInt = mlir::getSingleIntValue<long long>(v93, v94);
  if (!v49) {
    return 1;
  }
  long long v50 = (const char *)SingleInt;
  uint64_t v51 = (NumElements & (SingleInt >> 63)) + SingleInt;
  if (v51 >= 0 && NumElements > v51) {
    return 1;
  }
  __int16 v88 = 257;
  mlir::OpState::emitOpError(this, v87, (uint64_t)&v93);
  if (v93)
  {
    LODWORD(v90) = 3;
    unint64_t v91 = "invalid axis: ";
    uint64_t v92 = 14;
    long long v54 = &v90;
    long long v55 = (char *)v95;
    if (v96 >= v97)
    {
      unint64_t v76 = v96 + 1;
      if (v95 <= &v90 && (char *)v95 + 24 * v96 > (char *)&v90)
      {
        int64_t v83 = (char *)&v90 - (unsigned char *)v95;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v76, 24);
        long long v55 = (char *)v95;
        long long v54 = (uint64_t ***)((char *)v95 + v83);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v76, 24);
        long long v54 = &v90;
        long long v55 = (char *)v95;
      }
    }
    uint64_t v56 = &v55[24 * v96];
    long long v57 = *(_OWORD *)v54;
    *((void *)v56 + 2) = v54[2];
    *(_OWORD *)uint64_t v56 = v57;
    uint64_t v58 = ++v96;
    if (v93)
    {
      LODWORD(v90) = 2;
      unint64_t v91 = v50;
      uint64_t v59 = &v90;
      long long v60 = (char *)v95;
      if (v58 >= v97)
      {
        unint64_t v77 = v58 + 1;
        BOOL v78 = (char *)v95 + 24 * v58 > (char *)&v90;
        if (v95 <= &v90 && v78)
        {
          int64_t v84 = (char *)&v90 - (unsigned char *)v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v77, 24);
          long long v60 = (char *)v95;
          uint64_t v59 = (uint64_t ***)((char *)v95 + v84);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v77, 24);
          uint64_t v59 = &v90;
          long long v60 = (char *)v95;
        }
      }
      uint64_t v61 = &v60[24 * v96];
      long long v62 = *(_OWORD *)v59;
      *((void *)v61 + 2) = v59[2];
      *(_OWORD *)uint64_t v61 = v62;
      uint64_t v63 = ++v96;
      if (v93)
      {
        LODWORD(v90) = 3;
        unint64_t v91 = ".";
        uint64_t v92 = 1;
        long long v64 = &v90;
        long long v65 = (char *)v95;
        if (v63 >= v97)
        {
          unint64_t v80 = v63 + 1;
          BOOL v81 = (char *)v95 + 24 * v63 > (char *)&v90;
          if (v95 <= &v90 && v81)
          {
            int64_t v86 = (char *)&v90 - (unsigned char *)v95;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v80, 24);
            long long v65 = (char *)v95;
            long long v64 = (uint64_t ***)((char *)v95 + v86);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v80, 24);
            long long v64 = &v90;
            long long v65 = (char *)v95;
          }
        }
        uint64_t v66 = &v65[24 * v96];
        long long v67 = *(_OWORD *)v64;
        *((void *)v66 + 2) = v64[2];
        *(_OWORD *)uint64_t v66 = v67;
        ++v96;
      }
    }
  }
  uint64_t v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v93);
  if (v93) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  }
  if (v103)
  {
    uint64_t v68 = (void **)__p;
    if (__p)
    {
      long long v69 = v102;
      uint64_t v70 = __p;
      if (v102 != __p)
      {
        do
          long long v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
        while (v69 != v68);
        uint64_t v70 = __p;
      }
      long long v102 = v68;
      operator delete(v70);
    }
    char v27 = v99;
    if (!v99) {
      goto LABEL_109;
    }
    unint64_t v71 = v100;
    uint64_t v29 = v99;
    if (v100 == v99) {
      goto LABEL_108;
    }
    do
    {
      long long v73 = (void *)*--v71;
      long long v72 = v73;
      *unint64_t v71 = 0;
      if (v73) {
        operator delete[](v72);
      }
    }
    while (v71 != v27);
    goto LABEL_107;
  }
  return v23;
}

uint64_t mlir::mps::GetCoordOp::getResultType(mlir::mps::GetCoordOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v2) {
    return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v2);
  }
  else {
    return 0;
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties>(void *a1)
{
  uint64_t result = a1[32];
  if (!result)
  {
    unint64_t v3 = operator new(8uLL);
    *unint64_t v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v13;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v13;
    {
      if (v5)
      {
        uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties]";
        unint64_t v14 = 109;
        unint64_t v6 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
        if (v14 >= v6) {
          unint64_t v7 = v6;
        }
        else {
          unint64_t v7 = v14;
        }
        char v8 = &v13[v7];
        unint64_t v9 = v14 - v7;
        if (v14 - v7 >= 0x12) {
          uint64_t v10 = 18;
        }
        else {
          uint64_t v10 = v14 - v7;
        }
        unint64_t v11 = v9 - v10;
        if (v11 >= v11 - 1) {
          uint64_t v12 = v11 - 1;
        }
        else {
          uint64_t v12 = v11;
        }
        mlir::detail::TypeIDResolver<mlir::mps::detail::GetCoordOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      }
    }
    a1[33] = v4[7];
    return a1[32];
  }
  return result;
}

void mlir::mps::GetCoordOp::downgradeToVersion(uint64_t **a1@<X0>, _DWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *a1;
  v26[0] = &unk_1EC9CA678;
  v26[1] = 0x200000001;
  int v27 = 1;
  int v7 = a2[2];
  if (v7 && (v7 != 1 || (unsigned int v8 = a2[3], v8 >= 2) && (v8 != 2 || a2[4]))
    || (uint64_t v25 = v6[2 * (((unint64_t)*((unsigned int *)v6 + 11) >> 23) & 1) + 8]) == 0
    || (v28[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25),
        mlir::Type::isSignedInteger((mlir::Type *)v28, 32)))
  {
    uint64_t v17 = *((unsigned int *)v6 + 9);
    uint64_t v18 = v6 - 2;
    if (!v17) {
      uint64_t v18 = 0;
    }
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v17;
    *(unsigned char *)(a3 + 16) = 1;
  }
  else
  {
    v19[0] = "failed to downgrade: requested target version is {0}, but return type other than si32 is only supported from version {1}";
    v19[1] = 120;
    void v19[2] = v22;
    v19[3] = 2;
    v20[0] = &unk_1EC9A4798;
    v20[1] = a2;
    v21[0] = &unk_1EC9A4828;
    v21[1] = v26;
    v22[0] = v20;
    v22[1] = v21;
    __int16 v24 = 263;
    uint64_t v23 = (const void **)v19;
    mlir::OpState::emitOpError(a1, &v23, (uint64_t)v28);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v28[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v28);
    }
    if (v35)
    {
      unint64_t v9 = (void **)__p;
      if (__p)
      {
        uint64_t v10 = v34;
        unint64_t v11 = __p;
        if (v34 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          unint64_t v11 = __p;
        }
        uint64_t v34 = v9;
        operator delete(v11);
      }
      uint64_t v12 = v31;
      if (v31)
      {
        uint64_t v13 = v32;
        unint64_t v14 = v31;
        if (v32 != v31)
        {
          do
          {
            uint64_t v16 = (void *)*--v13;
            uint64_t v15 = v16;
            *uint64_t v13 = 0;
            if (v16) {
              operator delete[](v15);
            }
          }
          while (v13 != v12);
          unint64_t v14 = v31;
        }
        uint64_t v32 = v12;
        operator delete(v14);
      }
      if (v29 != &v30) {
        free(v29);
      }
    }
  }
}

uint64_t mlir::mps::RandomUniformOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    unint64_t v13 = *a7;
    uint64_t v20 = a6;
    v21[0] = 0;
    char v22 = 0;
    unint64_t v23 = v13;
    uint64_t v24 = a9;
    uint64_t v25 = a10;
    if (!a6) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v20 = a6;
    v21[0] = 0;
    char v22 = 0;
    unint64_t v23 = 0;
    uint64_t v24 = a9;
    uint64_t v25 = a10;
    if (!a6) {
      goto LABEL_8;
    }
  }
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v20);
  if (v22) {
    char v22 = 0;
  }
  mlir::OperationName::OperationName(v21, "mps.random_uniform", 18, Context);
  char v22 = 1;
LABEL_8:
  unint64_t v26 = a4;
  uint64_t v27 = a5;
  unint64_t v28 = a4;
  uint64_t v29 = 1;
  unint64_t v28 = mlir::ValueRange::offset_base(&v28, 1);
  uint64_t v29 = 0;
  uint64_t v15 = mlir::ValueRange::dereference_iterator(&v28, 0);
  unint64_t v28 = v23;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v28);
  uint64_t TensorType = mlir::mps::getTensorType(v15, Value);
  uint64_t v18 = *(unsigned int *)(a11 + 8);
  if (v18 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v18 + 1, 8);
    LODWORD(v18) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v18) = TensorType;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::getTensorType(uint64_t a1, uint64_t a2)
{
  void v25[4] = *MEMORY[0x1E4F143B8];
  unint64_t v23 = v25;
  uint64_t v24 = 0x400000000;
  if (mlir::matchConstantWithIntVector<long long>(a1, (uint64_t)&v23))
  {
    uint64_t v4 = mlir::RankedTensorType::get((uint64_t)v23, v24, a2, 0);
LABEL_17:
    uint64_t v16 = v4;
    goto LABEL_18;
  }
  unint64_t v5 = *(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void **)(*(void *)v5 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v5 = 0;
  }
  unint64_t v18 = v5;
  if (!v5 || !mlir::TensorType::hasRank((mlir::TensorType *)&v18))
  {
LABEL_16:
    uint64_t v4 = mlir::UnrankedTensorType::get(a2);
    goto LABEL_17;
  }
  uint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    while (*Value != 0x8000000000000000)
    {
      ++Value;
      v10 -= 8;
      if (!v10) {
        goto LABEL_14;
      }
    }
    goto LABEL_16;
  }
LABEL_14:
  unint64_t v11 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18);
  unint64_t NumElements = mlir::ShapedType::getNumElements(v11, v12);
  unint64_t v14 = NumElements;
  __b = v22;
  int v21 = 4;
  if (NumElements < 5)
  {
    if (NumElements) {
      memset_pattern16(v22, &unk_1811000C0, 8 * NumElements);
    }
    uint64_t v15 = v22;
  }
  else
  {
    int v20 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v22, NumElements, 8);
    uint64_t v15 = __b;
    memset_pattern16(__b, &unk_1811000C0, 8 * v14);
  }
  int v20 = v14;
  uint64_t v16 = mlir::RankedTensorType::get((uint64_t)v15, v14, a2, 0);
  if (__b != v22) {
    free(__b);
  }
LABEL_18:
  if (v23 != v25) {
    free(v23);
  }
  return v16;
}

uint64_t mlir::mps::RandomNormalOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    long long v13 = *a7;
    long long v14 = a7[1];
  }
  else
  {
    long long v13 = 0uLL;
    long long v14 = 0uLL;
  }
  uint64_t v21 = a6;
  v22[0] = 0;
  char v23 = 0;
  long long v24 = v13;
  long long v25 = v14;
  uint64_t v26 = a9;
  uint64_t v27 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v21);
    if (v23) {
      char v23 = 0;
    }
    mlir::OperationName::OperationName(v22, "mps.random_normal", 17, Context);
    char v23 = 1;
  }
  unint64_t v28 = a4;
  uint64_t v29 = a5;
  unint64_t v30 = a4;
  uint64_t v31 = 1;
  unint64_t v30 = mlir::ValueRange::offset_base(&v30, 1);
  uint64_t v31 = 0;
  uint64_t v16 = mlir::ValueRange::dereference_iterator(&v30, 0);
  unint64_t v30 = *((void *)&v24 + 1);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v30);
  uint64_t TensorType = mlir::mps::getTensorType(v16, Value);
  uint64_t v19 = *(unsigned int *)(a11 + 8);
  if (v19 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v19) = TensorType;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::RandomTruncatedNormalOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    long long v13 = *a7;
    long long v14 = a7[1];
    long long v15 = a7[2];
  }
  else
  {
    long long v13 = 0uLL;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
  }
  uint64_t v22 = a6;
  v23[0] = 0;
  char v24 = 0;
  long long v25 = v13;
  long long v26 = v14;
  long long v27 = v15;
  uint64_t v28 = a9;
  uint64_t v29 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v22);
    if (v24) {
      char v24 = 0;
    }
    mlir::OperationName::OperationName(v23, "mps.random_truncated_normal", 27, Context);
    char v24 = 1;
  }
  unint64_t v30 = a4;
  uint64_t v31 = a5;
  unint64_t v32 = a4;
  uint64_t v33 = 1;
  unint64_t v32 = mlir::ValueRange::offset_base(&v32, 1);
  uint64_t v33 = 0;
  uint64_t v17 = mlir::ValueRange::dereference_iterator(&v32, 0);
  unint64_t v32 = *((void *)&v26 + 1);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v32);
  uint64_t TensorType = mlir::mps::getTensorType(v17, Value);
  uint64_t v20 = *(unsigned int *)(a11 + 8);
  if (v20 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v20) = TensorType;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::PadOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v71[4] = *MEMORY[0x1E4F143B8];
  uint64_t v67 = a4;
  unint64_t v68 = a5;
  if (a7) {
    uint64_t v16 = *a7;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v59 = a6;
  v60[0] = 0;
  char v61 = 0;
  uint64_t v62 = v16;
  uint64_t v63 = a9;
  unint64_t v17 = a5;
  uint64_t v64 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61) {
      char v61 = 0;
    }
    mlir::OperationName::OperationName(v60, "mps.pad", 7, Context);
    char v61 = 1;
    unint64_t v17 = v68;
  }
  uint64_t v65 = a4;
  unint64_t v66 = a5;
  if (v17 >= 3)
  {
    uint64_t v19 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::PadOpAdaptor::verify((uint64_t)&v59, v19))
    {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v67, 0);
      *(_OWORD *)__p = 0u;
      long long v58 = 0u;
      *(_OWORD *)uint64_t v56 = 0u;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = (uint64_t **)&v50;
      long long v69 = (void *)mlir::ValueRange::dereference_iterator(&v67, 1);
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v69);
      if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v52, DefiningOp))
      {
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v22 = (uint64_t **)mlir::UnrankedTensorType::get(ElementTypeOrSelf);
        goto LABEL_33;
      }
      uint64_t v22 = (uint64_t **)(*(void *)(mlir::ValueRange::dereference_iterator(&v67, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(*v22 + 1)))
      {
        uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(*v22 + 1));
        uint64_t v52 = v22;
        uint64_t v53 = v23;
        if (v22)
        {
          if ((_UNKNOWN *)(*v22)[17] == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
            goto LABEL_33;
          }
          long long v69 = v71;
          uint64_t v70 = 0x400000000;
          uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v52);
          long long v25 = v56[0];
          long long v26 = v56[1];
          unint64_t v27 = (char *)v56[1] - (char *)v56[0];
          unint64_t v28 = ((char *)v56[1] - (char *)v56[0]) >> 3;
          uint64_t v29 = __p[1];
          long long v54 = (char *)v28;
          long long v55 = v30;
          if (v30 == (char *)v28)
          {
            uint64_t v31 = ArgAttrsAttr;
            uint64_t v32 = v70;
            if (v28 != v70)
            {
              if (v28 >= v70)
              {
                if (v28 > HIDWORD(v70))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, ((char *)v56[1] - (char *)v56[0]) >> 3, 8);
                  uint64_t v32 = v70;
                }
                if (v28 != v32) {
                  bzero(&v69[v32], 8 * (v28 - v32));
                }
              }
              LODWORD(v70) = v27 >> 3;
            }
            if (v26 != v25)
            {
              uint64_t v33 = 0;
              uint64_t v34 = v69;
              do
              {
                uint64_t v39 = *(void *)(v31 + 8 * v33);
                unint64_t v40 = 0x8000000000000000;
                if (v39 != 0x8000000000000000) {
                  unint64_t v40 = v25[v33] + v39 + v29[v33];
                }
                v34[v33++] = v40;
              }
              while (v28 > v33);
            }
          }
          else if (!mlir::emitOptionalError<char const(&)[16],unsigned long &,char const(&)[29],unsigned long &,char const(&)[2]>((uint64_t)a2, a3, "paddings rank (", &v54, ") doesn't match input rank (", &v55, ")"))
          {
            uint64_t v22 = 0;
            char v45 = 0;
            char v49 = v69;
            if (v69 == v71)
            {
LABEL_45:
              if (!v45)
              {
LABEL_46:
                uint64_t v38 = 0;
                unint64_t v43 = __p[1];
                if (!__p[1])
                {
LABEL_37:
                  if (v56[0])
                  {
                    v56[1] = v56[0];
                    operator delete(v56[0]);
                  }
                  return v38;
                }
LABEL_36:
                *(void *)&long long v58 = v43;
                operator delete(v43);
                goto LABEL_37;
              }
LABEL_33:
              unsigned int v42 = *(_DWORD *)(a11 + 8);
              if (v42 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v42 + 1, 8);
                unsigned int v42 = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v42) = v22;
              ++*(_DWORD *)(a11 + 8);
              uint64_t v38 = 1;
              unint64_t v43 = __p[1];
              if (!__p[1]) {
                goto LABEL_37;
              }
              goto LABEL_36;
            }
LABEL_44:
            free(v49);
            goto LABEL_45;
          }
          uint64_t v46 = (uint64_t)v69;
          uint64_t v47 = v70;
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
          uint64_t v22 = (uint64_t **)mlir::RankedTensorType::get(v46, v47, OperandRange, 0);
          char v45 = 1;
          char v49 = v69;
          if (v69 == v71) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v52 = 0;
        uint64_t v53 = 0;
      }
      char v45 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot pad a non-shaped type");
      goto LABEL_45;
    }
  }
  uint64_t v35 = mlir::Float32Type::get(this, a2);
  uint64_t v36 = mlir::UnrankedTensorType::get(v35);
  uint64_t v37 = *(unsigned int *)(a11 + 8);
  if (v37 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
    LODWORD(v37) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v37) = v36;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::PadOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24)) {
    return 1;
  }
  uint64_t v12 = "'mps.pad' op requires attribute 'paddingMode'";
  __int16 v13 = 259;
  mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  }
  if (v21)
  {
    uint64_t v4 = (void **)__p;
    if (__p)
    {
      unint64_t v5 = v20;
      unint64_t v6 = __p;
      if (v20 != __p)
      {
        do
          unint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        unint64_t v6 = __p;
      }
      uint64_t v20 = v4;
      operator delete(v6);
    }
    int v7 = v17;
    if (v17)
    {
      unsigned int v8 = v18;
      uint64_t v9 = v17;
      if (v18 != v17)
      {
        do
        {
          unint64_t v11 = (void *)*--v8;
          uint64_t v10 = v11;
          *unsigned int v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
        uint64_t v9 = v17;
      }
      unint64_t v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16) {
      free(v15);
    }
  }
  return v2;
}

uint64_t mlir::mps::anonymous namespace'::getPaddingValues(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  v29[8] = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  int ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v25);
  uint64_t v28 = v8;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (v10 == 2)
  {
    unint64_t v11 = (unint64_t *)ArgAttrsAttr;
    if (*(void *)(ArgAttrsAttr + 8) == 2)
    {
      int ArgOperands = v29;
      uint64_t v28 = 0x800000000;
      mlir::getIntValues<long long>(v25, v26, (uint64_t)&ArgOperands, 1);
      unint64_t v12 = *v11;
      uint64_t v13 = *a3;
      unint64_t v14 = (a3[1] - *a3) >> 3;
      if ((uint64_t)v12 <= 0)
      {
        if (v12 <= v14)
        {
          if (v12 < v14) {
            a3[1] = v13 + 8 * v12;
          }
        }
        else
        {
          std::vector<long long>::__append((uint64_t)a3, v12 - v14);
        }
        uint64_t v23 = a3[3];
        unint64_t v24 = (a3[4] - v23) >> 3;
        if (v12 <= v24)
        {
          if (v12 < v24) {
            a3[4] = v23 + 8 * v12;
          }
        }
        else
        {
          std::vector<long long>::__append((uint64_t)(a3 + 3), v12 - v24);
        }
        unint64_t v18 = ArgOperands;
        if (ArgOperands == v29) {
          return 1;
        }
      }
      else
      {
        if (v12 <= v14)
        {
          if (v12 < v14) {
            a3[1] = v13 + 8 * v12;
          }
        }
        else
        {
          std::vector<long long>::__append((uint64_t)a3, v12 - v14);
          uint64_t v13 = *a3;
        }
        int v16 = 0;
        uint64_t v17 = 0;
        unint64_t v18 = ArgOperands;
        do
        {
          *(void *)(v13 + 8 * v17++) = v18[v16];
          v16 += 2;
        }
        while ((uint64_t)v12 > v17);
        uint64_t v19 = a3[3];
        unint64_t v20 = (a3[4] - v19) >> 3;
        if (v12 <= v20)
        {
          if (v12 < v20) {
            a3[4] = v19 + 8 * v12;
          }
        }
        else
        {
          std::vector<long long>::__append((uint64_t)(a3 + 3), v12 - v20);
          unint64_t v18 = ArgOperands;
          uint64_t v19 = a3[3];
        }
        uint64_t v21 = 0;
        unsigned int v22 = 1;
        do
        {
          *(void *)(v19 + 8 * v21++) = v18[v22];
          v22 += 2;
        }
        while ((uint64_t)v12 > v21);
        if (v18 == v29) {
          return 1;
        }
      }
      free(v18);
      return 1;
    }
  }
  return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "invalid shape for paddings tensor");
}

uint64_t mlir::mps::PadOp::verify(uint64_t **this)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
  {
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v70)) {
      goto LABEL_5;
    }
    return 1;
  }
  uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  uint64_t v70 = v2;
  uint64_t v71 = v3;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v70)) {
    return 1;
  }
LABEL_5:
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v4 = *(void *)((*this)[9] + 56);
  *(void *)&long long v85 = &v68;
  v75[0] = v4;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v75);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v85, DefiningOp)) {
    return 1;
  }
  int v6 = *(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
  if (!v6 || v6 == 3) {
    return 1;
  }
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
  uint64_t v12 = v11;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v85 = 0u;
  {
    if (v12 < 1)
    {
LABEL_28:
      uint64_t v8 = 1;
    }
    else
    {
      unint64_t v14 = 0;
      if (v6 == 1) {
        uint64_t v15 = -1;
      }
      else {
        uint64_t v15 = 0;
      }
      while (1)
      {
        int v16 = *(void *)(v85 + 8 * (void)v14) <= *(void *)(*((void *)&v86 + 1) + 8 * (void)v14)
            ? *(const char **)(*((void *)&v86 + 1) + 8 * (void)v14)
            : *(const char **)(v85 + 8 * (void)v14);
        uint64_t v17 = *(void *)(ArgAttrsAttr + 8 * (void)v14);
        unint64_t v18 = (const char *)(v17 + v15);
        if (v17 != 0x8000000000000000 && (uint64_t)v16 > (uint64_t)v18) {
          break;
        }
        if ((const char *)v12 == ++v14) {
          goto LABEL_28;
        }
      }
      unint64_t v66 = (const void **)"padding values too large at axis ";
      __int16 v67 = 259;
      mlir::OpState::emitOpError(this, &v66, (uint64_t)v75);
      if (v75[0])
      {
        int v72 = 2;
        long long v73 = v14;
        unint64_t v20 = &v72;
        uint64_t v21 = (char *)v76;
        if (v77 >= v78)
        {
          unint64_t v52 = v77 + 1;
          if (v76 <= &v72 && (char *)v76 + 24 * v77 > (char *)&v72)
          {
            int64_t v61 = (char *)&v72 - (unsigned char *)v76;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v52, 24);
            uint64_t v21 = (char *)v76;
            unint64_t v20 = (int *)((char *)v76 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v52, 24);
            unint64_t v20 = &v72;
            uint64_t v21 = (char *)v76;
          }
        }
        unsigned int v22 = &v21[24 * v77];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = *((void *)v20 + 2);
        *(_OWORD *)unsigned int v22 = v23;
        uint64_t v24 = ++v77;
        if (v75[0])
        {
          int v72 = 3;
          long long v73 = ", max padding is ";
          uint64_t v74 = 17;
          uint64_t v25 = &v72;
          uint64_t v26 = (char *)v76;
          if (v24 >= v78)
          {
            unint64_t v53 = v24 + 1;
            BOOL v54 = (char *)v76 + 24 * v24 > (char *)&v72;
            if (v76 <= &v72 && v54)
            {
              int64_t v62 = (char *)&v72 - (unsigned char *)v76;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v53, 24);
              uint64_t v26 = (char *)v76;
              uint64_t v25 = (int *)((char *)v76 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v53, 24);
              uint64_t v25 = &v72;
              uint64_t v26 = (char *)v76;
            }
          }
          unint64_t v27 = &v26[24 * v77];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)unint64_t v27 = v28;
          uint64_t v29 = ++v77;
          if (v75[0])
          {
            int v72 = 2;
            long long v73 = v18;
            unint64_t v30 = &v72;
            uint64_t v31 = (char *)v76;
            if (v29 >= v78)
            {
              unint64_t v55 = v29 + 1;
              BOOL v56 = (char *)v76 + 24 * v29 > (char *)&v72;
              if (v76 <= &v72 && v56)
              {
                int64_t v63 = (char *)&v72 - (unsigned char *)v76;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v55, 24);
                uint64_t v31 = (char *)v76;
                unint64_t v30 = (int *)((char *)v76 + v63);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v55, 24);
                unint64_t v30 = &v72;
                uint64_t v31 = (char *)v76;
              }
            }
            uint64_t v32 = &v31[24 * v77];
            long long v33 = *(_OWORD *)v30;
            *((void *)v32 + 2) = *((void *)v30 + 2);
            *(_OWORD *)uint64_t v32 = v33;
            uint64_t v34 = ++v77;
            if (v75[0])
            {
              int v72 = 3;
              long long v73 = ", got ";
              uint64_t v74 = 6;
              uint64_t v35 = &v72;
              uint64_t v36 = (char *)v76;
              if (v34 >= v78)
              {
                unint64_t v57 = v34 + 1;
                BOOL v58 = (char *)v76 + 24 * v34 > (char *)&v72;
                if (v76 <= &v72 && v58)
                {
                  int64_t v64 = (char *)&v72 - (unsigned char *)v76;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v57, 24);
                  uint64_t v36 = (char *)v76;
                  uint64_t v35 = (int *)((char *)v76 + v64);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v57, 24);
                  uint64_t v35 = &v72;
                  uint64_t v36 = (char *)v76;
                }
              }
              uint64_t v37 = &v36[24 * v77];
              long long v38 = *(_OWORD *)v35;
              *((void *)v37 + 2) = *((void *)v35 + 2);
              *(_OWORD *)uint64_t v37 = v38;
              uint64_t v39 = ++v77;
              if (v75[0])
              {
                int v72 = 2;
                long long v73 = v16;
                unint64_t v40 = &v72;
                uint64_t v41 = (char *)v76;
                if (v39 >= v78)
                {
                  unint64_t v59 = v39 + 1;
                  BOOL v60 = (char *)v76 + 24 * v39 > (char *)&v72;
                  if (v76 <= &v72 && v60)
                  {
                    int64_t v65 = (char *)&v72 - (unsigned char *)v76;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v59, 24);
                    uint64_t v41 = (char *)v76;
                    unint64_t v40 = (int *)((char *)v76 + v65);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v59, 24);
                    unint64_t v40 = &v72;
                    uint64_t v41 = (char *)v76;
                  }
                }
                unsigned int v42 = &v41[24 * v77];
                long long v43 = *(_OWORD *)v40;
                *((void *)v42 + 2) = *((void *)v40 + 2);
                *(_OWORD *)unsigned int v42 = v43;
                ++v77;
              }
            }
          }
        }
      }
      uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v75);
      if (v75[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v75);
      }
      if (v84)
      {
        uint64_t v44 = (void **)__p;
        if (__p)
        {
          char v45 = v83;
          uint64_t v46 = __p;
          if (v83 != __p)
          {
            do
              char v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
            while (v45 != v44);
            uint64_t v46 = __p;
          }
          int64_t v83 = v44;
          operator delete(v46);
        }
        uint64_t v47 = v80;
        if (v80)
        {
          int64_t v48 = v81;
          char v49 = v80;
          if (v81 != v80)
          {
            do
            {
              uint64_t v51 = (void *)*--v48;
              uint64_t v50 = v51;
              *int64_t v48 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v48 != v47);
            char v49 = v80;
          }
          BOOL v81 = v47;
          operator delete(v49);
        }
        if (v76 != v79) {
          free(v76);
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (*((void *)&v86 + 1))
  {
    *(void *)&long long v87 = *((void *)&v86 + 1);
    operator delete(*((void **)&v86 + 1));
  }
  if ((void)v85)
  {
    *((void *)&v85 + 1) = v85;
    operator delete((void *)v85);
  }
  return v8;
}

uint64_t mlir::mps::PadGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v58[4] = *MEMORY[0x1E4F143B8];
  v55[0] = a4;
  v55[1] = a5;
  if (a5 == 3)
  {
    uint64_t v13 = mlir::ValueRange::dereference_iterator(v55, 0);
    uint64_t v14 = mlir::ValueRange::dereference_iterator(v55, 1);
    *(_OWORD *)__p = 0u;
    long long v54 = 0u;
    *(_OWORD *)unint64_t v52 = 0u;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v46 = (uint64_t **)&v42;
    BOOL v56 = (char *)mlir::ValueRange::dereference_iterator(v55, 2);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v56);
    if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v46, DefiningOp))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v17 = (uint64_t **)mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      goto LABEL_26;
    }
      goto LABEL_54;
    uint64_t v16 = *(void *)(v13 + 8);
    uint64_t v17 = (uint64_t **)(*(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(*v17 + 1)))
    {
      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(*v17 + 1));
      uint64_t v46 = v17;
      uint64_t v47 = v18;
      if (v17)
      {
        unint64_t v19 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v19 + 8))
        {
          uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v19 + 8);
          unint64_t v44 = v19;
          uint64_t v45 = v20;
          if (v19)
          {
            if ((_UNKNOWN *)(*v17)[17] == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
            {
              char v35 = 1;
              goto LABEL_53;
            }
            if (*(_UNKNOWN **)(*(void *)v19 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
            {
              char v35 = 1;
              uint64_t v17 = (uint64_t **)v19;
              goto LABEL_53;
            }
            BOOL v56 = (char *)v58;
            uint64_t v57 = 0x400000000;
            uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
            unint64_t v23 = v22;
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
            int64_t v50 = ((char *)v52[1] - (char *)v52[0]) >> 3;
            uint64_t v51 = (char *)v23;
            uint64_t v49 = (uint64_t)(v54 - (unint64_t)__p[1]) >> 3;
            if (v23 == v50)
            {
              if (v23 == (uint64_t)(v54 - (unint64_t)__p[1]) >> 3)
              {
                uint64_t v24 = v57;
                if (v23 != v57)
                {
                  if (v23 >= v57)
                  {
                    if (v23 > HIDWORD(v57))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, v23, 8);
                      uint64_t v24 = v57;
                    }
                    if (v23 != v24) {
                      bzero(&v56[8 * v24], 8 * (v23 - v24));
                    }
                  }
                  LODWORD(v57) = v23;
                  LODWORD(v24) = v23;
                }
                if (!v23) {
                  goto LABEL_48;
                }
                unint64_t v25 = 0;
                uint64_t v26 = v56;
                unsigned int v27 = 1;
                long long v28 = v52[0];
                uint64_t v29 = __p[1];
                while (1)
                {
                  while (1)
                  {
                    uint64_t v36 = *(void *)(ArgAttrsAttr + 8 * v25);
                    if (v36 != 0x8000000000000000) {
                      break;
                    }
                    v26[v25] = 0x8000000000000000;
                    unint64_t v25 = v27++;
                    if (v23 <= v25) {
                      goto LABEL_48;
                    }
                  }
                  int64_t v48 = (char *)(v29[v25] + v28[v25]);
                  BOOL v37 = v36 < (uint64_t)v48;
                  uint64_t v38 = v36 - (void)v48;
                  if (v37) {
                    break;
                  }
                  v26[v25] = v38;
                  unint64_t v25 = v27++;
                  if (v23 <= v25) {
                    goto LABEL_48;
                  }
                }
                if (!mlir::emitOptionalError<char const(&)[21],long long const&,char const(&)[37],long long const&,char const(&)[2]>(a2, a3, "gradient dimension (", (char **)(ArgAttrsAttr + 8 * v25), ")is smaller than the total padding (", &v48, ")"))goto LABEL_50; {
LABEL_47:
                }
                LODWORD(v24) = v57;
LABEL_48:
                uint64_t v39 = (uint64_t)v56;
                uint64_t v40 = v24;
                uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v44);
                uint64_t v17 = (uint64_t **)mlir::RankedTensorType::get(v39, v40, OperandRange, 0);
                char v35 = 1;
                goto LABEL_51;
              }
              if (mlir::emitOptionalError<char const(&)[18],unsigned long &,char const(&)[3],unsigned long &>(a2, a3, "pad rank mismatch", &v51, ", ", (char **)&v49))goto LABEL_47; {
            }
              }
            else if (mlir::emitOptionalError<char const(&)[18],unsigned long &,char const(&)[3],unsigned long &>(a2, a3, "pad rank mismatch", &v51, ", ", (char **)&v50))
            {
              goto LABEL_47;
            }
LABEL_50:
            uint64_t v17 = 0;
            char v35 = 0;
LABEL_51:
            if (v56 != (char *)v58) {
              free(v56);
            }
LABEL_53:
            if (!v35)
            {
LABEL_54:
              uint64_t v33 = 0;
              uint64_t v34 = __p[1];
              if (!__p[1]) {
                goto LABEL_30;
              }
              goto LABEL_29;
            }
LABEL_26:
            unsigned int v32 = *(_DWORD *)(a11 + 8);
            if (v32 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v32 + 1, 8);
              unsigned int v32 = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v32) = v17;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v33 = 1;
            uint64_t v34 = __p[1];
            if (!__p[1]) {
              goto LABEL_30;
            }
LABEL_29:
            *(void *)&long long v54 = v34;
            operator delete(v34);
LABEL_30:
            if (v52[0])
            {
              v52[1] = v52[0];
              operator delete(v52[0]);
            }
            return v33;
          }
        }
        else
        {
          unint64_t v44 = 0;
          uint64_t v45 = 0;
        }
        char v35 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot calculate the pad gradient a non-shaped type");
        uint64_t v17 = 0;
        goto LABEL_53;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    char v35 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot calculate the pad gradient a non-shaped type");
    goto LABEL_53;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::SampleGridOp::verify(uint64_t **this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *this;
  uint64_t v2 = (*this)[9];
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(*(void *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v3 = 0;
  }
  int v6 = (const void **)(*(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  int v7 = (void *)*((void *)*v6 + 17);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    int v6 = 0;
  }
  if (v3) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (HIBYTE(*((_DWORD *)v1 + 11))) {
      unint64_t v19 = v1 + 10;
    }
    else {
      unint64_t v19 = 0;
    }
    unsigned int v20 = *(_DWORD *)(v19[1] + 8);
    uint64_t v21 = v1[3];
    v31[0] = v3;
    v29[0] = v6;
    if (mlir::TensorType::hasRank((mlir::TensorType *)v31)
      && (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v31), v22 != 4))
    {
      if (!mlir::emitOptionalError<char const(&)[39]>(v21, 1, "input rank should be 4")) {
        return 0;
      }
    }
    else if (v20 >= 2)
    {
      if (!mlir::emitOptionalError<char const(&)[39]>(v21, 1, "unsupported layout")) {
        return 0;
      }
    }
    else
    {
      if (!mlir::TensorType::hasRank((mlir::TensorType *)v29)) {
        goto LABEL_40;
      }
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v29);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v29);
      if (v24 == 4)
      {
        uint64_t v25 = *(void *)(Value + 24);
        if (v25 == 0x8000000000000000 || v25 == 2)
        {
LABEL_40:
          if (mlir::TensorType::hasRank((mlir::TensorType *)v31) && mlir::TensorType::hasRank((mlir::TensorType *)v29))
          {
            uint64_t v26 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v31);
            uint64_t v27 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v29);
            if (v27 != 0x8000000000000000
              && *v26 != 0x8000000000000000
              && *v26 != v27
              && !mlir::emitOptionalError<char const(&)[39]>(v21, 1, "batch dimensions of input and coordinates do not match"))
            {
              return 0;
            }
          }
          return 1;
        }
        if (!mlir::emitOptionalError<char const(&)[39]>(v21, 1, "coordinates should have 2 channels")) {
          return 0;
        }
      }
      else if (!mlir::emitOptionalError<char const(&)[39]>(v21, 1, "coordinates rank should be 4"))
      {
        return 0;
      }
    }
    return 1;
  }
  v29[0] = (const void **)"cannot sample a non-tensor type";
  __int16 v30 = 259;
  mlir::OpState::emitOpError(this, v29, (uint64_t)v31);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
  if (v31[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
  }
  if (v38)
  {
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v37;
      uint64_t v13 = __p;
      if (v37 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      BOOL v37 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v34;
    if (v34)
    {
      uint64_t v15 = v35;
      uint64_t v16 = v34;
      if (v35 != v34)
      {
        do
        {
          uint64_t v18 = (void *)*--v15;
          uint64_t v17 = v18;
          *uint64_t v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v34;
      }
      char v35 = v14;
      operator delete(v16);
    }
    if (v32 != &v33) {
      free(v32);
    }
  }
  return v10;
}

uint64_t mlir::mps::SampleGridOp::getLayout(mlir::mps::SampleGridOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(unsigned int *)(*(void *)(v1 + 8) + 8);
}

uint64_t mlir::mps::SampleGridOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v68[4] = *MEMORY[0x1E4F143B8];
  v65[0] = a4;
  v65[1] = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
    uint64_t v19 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v19 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v54 = a6;
  v55[0] = 0;
  char v56 = 0;
  long long v57 = v16;
  long long v58 = v17;
  long long v59 = v18;
  uint64_t v60 = v19;
  uint64_t v61 = a9;
  uint64_t v62 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v54);
    if (v56) {
      char v56 = 0;
    }
    mlir::OperationName::OperationName(v55, "mps.sample_grid", 15, Context);
    char v56 = 1;
  }
  uint64_t v63 = a4;
  unint64_t v64 = a5;
  if (a5 >= 3
    && (uint64_t v21 = mlir::UnknownLoc::get(this, a2), mlir::mps::SampleGridOpAdaptor::verify(&v54, v21)))
  {
    uint64_t v22 = mlir::ValueRange::dereference_iterator(v65, 0);
    unint64_t v23 = *(void **)(*(void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v23 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v23 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v25 = *(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      unint64_t v25 = 0;
    }
    unint64_t v26 = *(void *)(mlir::ValueRange::dereference_iterator(v65, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = *(void **)(*(void *)v26 + 136);
    if (v27 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v27 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v26 = 0;
    }
    if (v25) {
      BOOL v29 = v26 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (v29) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot sample a non-tensor type");
    }
    uint64_t v34 = *(int *)(*((void *)&v57 + 1) + 8);
    unint64_t v52 = v26;
    unint64_t v53 = v25;
    v34 *= 8;
    uint64_t v35 = *(void *)((char *)qword_181126080 + v34);
    uint64_t v36 = *(void *)((char *)qword_1811260B8 + v34);
    uint64_t v37 = *(void *)((char *)qword_1811260F0 + v34);
    uint64_t v38 = *(void *)((char *)qword_181126128 + v34);
    unint64_t v66 = v68;
    memset_pattern16(v68, &unk_1811000C0, 0x20uLL);
    uint64_t v67 = 0x400000004;
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v53))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
      if (v40 >= 4)
      {
        uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
        v66[v35] = *(void *)(Value + 8 * v35);
        uint64_t v42 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
        v66[v38] = *(void *)(v42 + 8 * v38);
      }
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v52))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
      uint64_t v43 = (uint64_t)v66;
      if (v44 >= 4)
      {
        if (v66[v35] == 0x8000000000000000)
        {
          uint64_t v45 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
          v66[v35] = *v45;
        }
        uint64_t v46 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
        v66[v36] = *(void *)(v46 + 8);
        uint64_t v47 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
        uint64_t v43 = (uint64_t)v66;
        v66[v37] = *(void *)(v47 + 16);
      }
    }
    else
    {
      uint64_t v43 = (uint64_t)v66;
    }
    uint64_t v48 = v67;
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v53);
    uint64_t v50 = mlir::RankedTensorType::get(v43, v48, ElementType, 0);
    if (v66 != v68) {
      free(v66);
    }
    uint64_t v51 = *(unsigned int *)(a11 + 8);
    if (v51 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v51 + 1, 8);
      LODWORD(v51) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v51) = v50;
  }
  else
  {
    uint64_t v31 = mlir::Float32Type::get(this, a2);
    uint64_t v32 = mlir::UnrankedTensorType::get(v31);
    uint64_t v33 = *(unsigned int *)(a11 + 8);
    if (v33 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
      LODWORD(v33) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v33) = v32;
  }
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::SampleGridOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a1[4])
  {
    if (a1[7])
    {
      if (a1[9]) {
        return 1;
      }
      v24[0] = "'mps.sample_grid' op requires attribute 'sampling_mode'";
      __int16 v25 = 259;
      mlir::emitError(a2, (uint64_t)v24, (uint64_t)v26);
      uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
      if (v26[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
      }
      if (v33)
      {
        long long v17 = (void **)__p;
        if (__p)
        {
          long long v18 = v32;
          uint64_t v19 = __p;
          if (v32 != __p)
          {
            do
              long long v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
            while (v18 != v17);
            uint64_t v19 = __p;
          }
          uint64_t v32 = v17;
          operator delete(v19);
        }
        int v6 = v29;
        if (!v29) {
          goto LABEL_49;
        }
        unsigned int v20 = v30;
        uint64_t v8 = v29;
        if (v30 == v29)
        {
LABEL_48:
          __int16 v30 = v6;
          operator delete(v8);
LABEL_49:
          if (v27 != &v28) {
            free(v27);
          }
          return v2;
        }
        do
        {
          uint64_t v22 = (void *)*--v20;
          uint64_t v21 = v22;
          *unsigned int v20 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v20 != v6);
LABEL_47:
        uint64_t v8 = v29;
        goto LABEL_48;
      }
    }
    else
    {
      v24[0] = "'mps.sample_grid' op requires attribute 'padding_mode'";
      __int16 v25 = 259;
      mlir::emitError(a2, (uint64_t)v24, (uint64_t)v26);
      uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
      if (v26[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
      }
      if (v33)
      {
        uint64_t v11 = (void **)__p;
        if (__p)
        {
          uint64_t v12 = v32;
          uint64_t v13 = __p;
          if (v32 != __p)
          {
            do
              uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
            while (v12 != v11);
            uint64_t v13 = __p;
          }
          uint64_t v32 = v11;
          operator delete(v13);
        }
        int v6 = v29;
        if (!v29) {
          goto LABEL_49;
        }
        uint64_t v14 = v30;
        uint64_t v8 = v29;
        if (v30 == v29) {
          goto LABEL_48;
        }
        do
        {
          long long v16 = (void *)*--v14;
          uint64_t v15 = v16;
          void *v14 = 0;
          if (v16) {
            operator delete[](v15);
          }
        }
        while (v14 != v6);
        goto LABEL_47;
      }
    }
  }
  else
  {
    v24[0] = "'mps.sample_grid' op requires attribute 'layout'";
    __int16 v25 = 259;
    mlir::emitError(a2, (uint64_t)v24, (uint64_t)v26);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      unint64_t v3 = (void **)__p;
      if (__p)
      {
        uint64_t v4 = v32;
        unint64_t v5 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
          while (v4 != v3);
          unint64_t v5 = __p;
        }
        uint64_t v32 = v3;
        operator delete(v5);
      }
      int v6 = v29;
      if (!v29) {
        goto LABEL_49;
      }
      int v7 = v30;
      uint64_t v8 = v29;
      if (v30 == v29) {
        goto LABEL_48;
      }
      do
      {
        uint64_t v10 = (void *)*--v7;
        BOOL v9 = v10;
        *int v7 = 0;
        if (v10) {
          operator delete[](v9);
        }
      }
      while (v7 != v6);
      goto LABEL_47;
    }
  }
  return v2;
}

uint64_t mlir::mps::CostVolumeOp::verify(uint64_t **this)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*this)[9];
  unint64_t v3 = (void *)(*(void *)(v2[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v2 = (void *)(*this)[9];
    unsigned int v97 = v3;
    uint64_t v98 = v4;
    unint64_t v5 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    long long v95 = v5;
    uint64_t v96 = 0;
    uint64_t v8 = (void *)(*(void *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  unsigned int v97 = 0;
  uint64_t v98 = 0;
  unint64_t v5 = (void *)(*(void *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  uint64_t v7 = (*this)[9];
  long long v95 = v5;
  uint64_t v96 = v6;
  uint64_t v8 = (void *)(*(void *)(*(void *)(v7 + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v8)
  {
LABEL_4:
    uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v9 = 0;
LABEL_8:
  v94[0] = v8;
  v94[1] = v9;
  uint64_t v10 = operator new(0x20uLL);
  memset_pattern16(v10, &unk_1811000C0, 0x20uLL);
  uint64_t ArgAttrsAttr = (uint64_t)v10;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v97))
  {
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v97);
    uint64_t v12 = (uint64_t)v10;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v95))
    {
LABEL_10:
      uint64_t v13 = v10;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v94)) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = (uint64_t)v10;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v95)) {
      goto LABEL_10;
    }
  }
  uint64_t v12 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v95);
  uint64_t v13 = v10;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v94)) {
LABEL_11:
  }
    uint64_t v13 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v94);
LABEL_12:
  unint64_t v14 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v14 = 0;
  }
  v92[0] = *(const void ***)(v14 + 40);
  mlir::IntegerAttr::getValue(v92, (llvm::APInt *)&__p);
  if (v100 > 0x40)
  {
    uint64_t v15 = *(void **)__p;
    operator delete[](__p);
  }
  else
  {
    uint64_t v15 = __p;
  }
  unint64_t v16 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v16 = 0;
  }
  v92[0] = *(const void ***)(v16 + 48);
  mlir::IntegerAttr::getValue(v92, (llvm::APInt *)&__p);
  if (v100 > 0x40)
  {
    long long v17 = *(void **)__p;
    operator delete[](__p);
    if (!v15) {
      goto LABEL_53;
    }
  }
  else
  {
    long long v17 = __p;
    if (!v15)
    {
LABEL_53:
      v92[0] = (const void **)"window_height and window_width should be positive";
      __int16 v93 = 259;
      mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
      uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (v107)
      {
        uint64_t v43 = (void **)v105;
        if (v105)
        {
          unint64_t v44 = v106;
          uint64_t v45 = v105;
          if (v106 != v105)
          {
            do
              unint64_t v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
            while (v44 != v43);
            uint64_t v45 = v105;
          }
          long long v106 = v43;
          operator delete(v45);
        }
        unint64_t v40 = v103;
        if (!v103) {
          goto LABEL_176;
        }
        uint64_t v46 = v104;
        uint64_t v42 = v103;
        if (v104 == v103)
        {
LABEL_175:
          uint64_t v104 = v40;
          operator delete(v42);
LABEL_176:
          if (v101 != &v102) {
            free(v101);
          }
          goto LABEL_178;
        }
        do
        {
          uint64_t v48 = (void *)*--v46;
          uint64_t v47 = v48;
          *uint64_t v46 = 0;
          if (v48) {
            operator delete[](v47);
          }
        }
        while (v46 != v40);
LABEL_174:
        uint64_t v42 = v103;
        goto LABEL_175;
      }
      goto LABEL_178;
    }
  }
  if (!v17) {
    goto LABEL_53;
  }
  unint64_t v18 = ((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1;
  uint64_t v19 = (void **)&(*this)[2 * v18 + 8];
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v20 = (uint64_t)&(*this)[2 * v18 + 8];
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(int *)(*(void *)(v20 + 8) + 8);
  uint64_t v22 = qword_1811260F0[v21];
  uint64_t v23 = qword_1811260B8[v21];
  uint64_t v24 = qword_181126080[v21];
  uint64_t v25 = *(void *)(v12 + 8 * v24);
  uint64_t v26 = 8 * qword_181126128[v21];
  uint64_t v27 = *(void *)(v12 + v26);
  uint64_t v28 = *(void *)(ArgAttrsAttr + v26);
  uint64_t v29 = *(void *)(ArgAttrsAttr + 8 * v23);
  uint64_t v30 = *(void *)(ArgAttrsAttr + 8 * v22);
  uint64_t v32 = v13[2];
  uint64_t v31 = v13[3];
  uint64_t v33 = v13[1];
  if (v25 != 0x8000000000000000)
  {
    uint64_t v51 = *(void *)(ArgAttrsAttr + 8 * v24);
    if (v51 != 0x8000000000000000 && v25 != v51)
    {
      v92[0] = (const void **)"Batch size in input and ref should be the same";
      __int16 v93 = 259;
      mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
      uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (v107)
      {
        long long v59 = (void **)v105;
        if (v105)
        {
          uint64_t v60 = v106;
          uint64_t v61 = v105;
          if (v106 != v105)
          {
            do
              uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            uint64_t v61 = v105;
          }
          long long v106 = v59;
          operator delete(v61);
        }
        unint64_t v40 = v103;
        if (!v103) {
          goto LABEL_176;
        }
        uint64_t v62 = v104;
        uint64_t v42 = v103;
        if (v104 == v103) {
          goto LABEL_175;
        }
        do
        {
          unint64_t v64 = (void *)*--v62;
          uint64_t v63 = v64;
          void *v62 = 0;
          if (v64) {
            operator delete[](v63);
          }
        }
        while (v62 != v40);
        goto LABEL_174;
      }
      goto LABEL_178;
    }
    if (*v13 != 0x8000000000000000 && v25 != *v13)
    {
      v92[0] = (const void **)"Batch size in input and coordinates should be the same";
      __int16 v93 = 259;
      mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
      uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (v107)
      {
        unint64_t v53 = (void **)v105;
        if (v105)
        {
          uint64_t v54 = v106;
          unint64_t v55 = v105;
          if (v106 != v105)
          {
            do
              uint64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
            while (v54 != v53);
            unint64_t v55 = v105;
          }
          long long v106 = v53;
          operator delete(v55);
        }
        unint64_t v40 = v103;
        if (!v103) {
          goto LABEL_176;
        }
        char v56 = v104;
        uint64_t v42 = v103;
        if (v104 == v103) {
          goto LABEL_175;
        }
        do
        {
          long long v58 = (void *)*--v56;
          long long v57 = v58;
          *char v56 = 0;
          if (v58) {
            operator delete[](v57);
          }
        }
        while (v56 != v40);
        goto LABEL_174;
      }
      goto LABEL_178;
    }
  }
  if (v27 == 0x8000000000000000 || v28 == 0x8000000000000000 || v27 == v28)
  {
    if (v31 != 0x8000000000000000)
    {
      if (v31 == 1)
      {
        __p = *v19;
        if (!__p)
        {
          v92[0] = (const void **)"BoolAttr coord_is_x_only should be specified when C2 = 1";
          __int16 v93 = 259;
          mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
          uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
          if (__p) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
          }
          if (v107)
          {
            long long v85 = (void **)v105;
            if (v105)
            {
              long long v86 = v106;
              long long v87 = v105;
              if (v106 != v105)
              {
                do
                  long long v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
                while (v86 != v85);
                long long v87 = v105;
              }
              long long v106 = v85;
              operator delete(v87);
            }
            unint64_t v40 = v103;
            if (!v103) {
              goto LABEL_176;
            }
            uint64_t v88 = v104;
            uint64_t v42 = v103;
            if (v104 == v103) {
              goto LABEL_175;
            }
            do
            {
              uint64_t v90 = (void *)*--v88;
              uint64_t v89 = v90;
              void *v88 = 0;
              if (v90) {
                operator delete[](v89);
              }
            }
            while (v88 != v40);
            goto LABEL_174;
          }
          goto LABEL_178;
        }
        mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
      }
      else if (v31 != 2)
      {
        v92[0] = (const void **)"Channel size in coordinates should be 1 or 2";
        __int16 v93 = 259;
        mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
        uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        }
        if (v107)
        {
          uint64_t v37 = (void **)v105;
          if (v105)
          {
            uint64_t v38 = v106;
            uint64_t v39 = v105;
            if (v106 != v105)
            {
              do
                uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
              while (v38 != v37);
              uint64_t v39 = v105;
            }
            long long v106 = v37;
            operator delete(v39);
          }
          unint64_t v40 = v103;
          if (!v103) {
            goto LABEL_176;
          }
          uint64_t v41 = v104;
          uint64_t v42 = v103;
          if (v104 == v103) {
            goto LABEL_175;
          }
          do
          {
            uint64_t v50 = (void *)*--v41;
            uint64_t v49 = v50;
            *uint64_t v41 = 0;
            if (v50) {
              operator delete[](v49);
            }
          }
          while (v41 != v40);
          goto LABEL_174;
        }
        goto LABEL_178;
      }
    }
    if (v29 == 0x8000000000000000 || v33 == 0x8000000000000000 || v29 == v33)
    {
      uint64_t v36 = 1;
      if (v30 != 0x8000000000000000 && v32 != 0x8000000000000000 && v30 != v32)
      {
        v92[0] = (const void **)"W in ref and coordinates should be the same";
        __int16 v93 = 259;
        mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
        uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
        if (__p) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
        }
        if (v107)
        {
          long long v73 = (void **)v105;
          if (v105)
          {
            uint64_t v74 = v106;
            unint64_t v75 = v105;
            if (v106 != v105)
            {
              do
                uint64_t v74 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v74 - 1);
              while (v74 != v73);
              unint64_t v75 = v105;
            }
            long long v106 = v73;
            operator delete(v75);
          }
          unint64_t v40 = v103;
          if (!v103) {
            goto LABEL_176;
          }
          unint64_t v76 = v104;
          uint64_t v42 = v103;
          if (v104 == v103) {
            goto LABEL_175;
          }
          do
          {
            unsigned int v78 = (void *)*--v76;
            unsigned int v77 = v78;
            void *v76 = 0;
            if (v78) {
              operator delete[](v77);
            }
          }
          while (v76 != v40);
          goto LABEL_174;
        }
      }
    }
    else
    {
      v92[0] = (const void **)"H in ref and coordinates should be the same";
      __int16 v93 = 259;
      mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
      uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      }
      if (v107)
      {
        unint64_t v79 = (void **)v105;
        if (v105)
        {
          unint64_t v80 = v106;
          BOOL v81 = v105;
          if (v106 != v105)
          {
            do
              unint64_t v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
            while (v80 != v79);
            BOOL v81 = v105;
          }
          long long v106 = v79;
          operator delete(v81);
        }
        unint64_t v40 = v103;
        if (!v103) {
          goto LABEL_176;
        }
        int64_t v82 = v104;
        uint64_t v42 = v103;
        if (v104 == v103) {
          goto LABEL_175;
        }
        do
        {
          char v84 = (void *)*--v82;
          int64_t v83 = v84;
          void *v82 = 0;
          if (v84) {
            operator delete[](v83);
          }
        }
        while (v82 != v40);
        goto LABEL_174;
      }
    }
    goto LABEL_178;
  }
  v92[0] = (const void **)"Channel size in input and ref should be the same";
  __int16 v93 = 259;
  mlir::OpState::emitOpError(this, v92, (uint64_t)&__p);
  uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  }
  if (v107)
  {
    int64_t v65 = (void **)v105;
    if (v105)
    {
      unint64_t v66 = v106;
      uint64_t v67 = v105;
      if (v106 != v105)
      {
        do
          unint64_t v66 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v66 - 1);
        while (v66 != v65);
        uint64_t v67 = v105;
      }
      long long v106 = v65;
      operator delete(v67);
    }
    unint64_t v40 = v103;
    if (!v103) {
      goto LABEL_176;
    }
    uint64_t v68 = v104;
    uint64_t v42 = v103;
    if (v104 == v103) {
      goto LABEL_175;
    }
    do
    {
      uint64_t v70 = (void *)*--v68;
      uint64_t v69 = v70;
      *uint64_t v68 = 0;
      if (v70) {
        operator delete[](v69);
      }
    }
    while (v68 != v40);
    goto LABEL_174;
  }
LABEL_178:
  operator delete(v10);
  return v36;
}

void *mlir::mps::CostVolumeOp::getWindowHeight(mlir::mps::CostVolumeOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v6 = *(void *)(v1 + 40);
  mlir::IntegerAttr::getValue(&v6, (llvm::APInt *)&__p);
  if (v5 <= 0x40) {
    return __p;
  }
  uint64_t v3 = *(void *)__p;
  operator delete[](__p);
  return (void *)v3;
}

void *mlir::mps::CostVolumeOp::getWindowWidth(mlir::mps::CostVolumeOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v6 = *(void *)(v1 + 48);
  mlir::IntegerAttr::getValue(&v6, (llvm::APInt *)&__p);
  if (v5 <= 0x40) {
    return __p;
  }
  uint64_t v3 = *(void *)__p;
  operator delete[](__p);
  return (void *)v3;
}

uint64_t mlir::mps::CostVolumeOp::getCoordIsXOnly(mlir::mps::CostVolumeOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v2) {
    return mlir::BoolAttr::getValue((mlir::BoolAttr *)&v2) | 0x100u;
  }
  else {
    return 0;
  }
}

uint64_t mlir::mps::CostVolumeOp::inferReturnTypes(mlir::UnknownLoc *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  unint64_t v80 = v82;
  memset_pattern16(v82, &unk_1811000C0, 0x20uLL);
  uint64_t v81 = 0x400000004;
  if (a7)
  {
    uint64_t v17 = *a7;
    long long v18 = *(_OWORD *)(a7 + 1);
    long long v19 = *(_OWORD *)(a7 + 3);
    long long v20 = *(_OWORD *)(a7 + 5);
  }
  else
  {
    uint64_t v17 = 0;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
    long long v20 = 0uLL;
  }
  uint64_t v69 = a6;
  v70[0] = 0;
  char v71 = 0;
  uint64_t v72 = v17;
  long long v73 = v18;
  long long v74 = v19;
  long long v75 = v20;
  uint64_t v76 = a9;
  uint64_t v77 = a10;
  if (!a6)
  {
    uint64_t v22 = v18;
    unint64_t v78 = a4;
    uint64_t v79 = a5;
    if ((void)v18) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v24 = 0;
    uint64_t v27 = 1;
    uint64_t v26 = 3;
    uint64_t v25 = 2;
    unint64_t v28 = v75;
    if (!(void)v75) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v69);
  if (v71) {
    char v71 = 0;
  }
  mlir::OperationName::OperationName(v70, "mps.cost_volume", 15, Context);
  char v71 = 1;
  uint64_t v22 = v73;
  unint64_t v78 = a4;
  uint64_t v79 = a5;
  if (!(void)v73) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v23 = 8 * *(int *)(v22 + 8);
  uint64_t v24 = *(void *)((char *)&unk_181126080 + v23);
  uint64_t v25 = *(void *)((char *)&unk_1811260B8 + v23);
  uint64_t v26 = *(void *)((char *)&unk_1811260F0 + v23);
  uint64_t v27 = *(void *)((char *)&unk_181126128 + v23);
  unint64_t v28 = v75;
  if (!(void)v75) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v29 = *(void **)(*(void *)v28 + 136);
  if (v29 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    unint64_t v28 = 0;
  }
  unint64_t v83 = v28;
  if (v29 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || (unint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83),
        !mlir::Type::isUnsignedInteger((mlir::Type *)&Value)))
  {
LABEL_18:
    uint64_t UInt = 1;
    uint64_t v31 = a11;
    unint64_t v32 = *((void *)&v75 + 1);
    if (!*((void *)&v75 + 1)) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  uint64_t UInt = (uint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v83);
  uint64_t v31 = a11;
  unint64_t v32 = *((void *)&v75 + 1);
  if (!*((void *)&v75 + 1)) {
    goto LABEL_25;
  }
LABEL_19:
  uint64_t v33 = *(void **)(*(void *)v32 + 136);
  if (v33 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    unint64_t v32 = 0;
  }
  unint64_t v83 = v32;
  if (v33 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || (unint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83),
        !mlir::Type::isUnsignedInteger((mlir::Type *)&Value)))
  {
LABEL_25:
    v80[v27] = UInt;
    if (a5 != 3) {
      goto LABEL_29;
    }
LABEL_26:
    uint64_t v35 = mlir::UnknownLoc::get(a1, v16);
    if (!mlir::mps::CostVolumeOpAdaptor::verify(&v69, v35)) {
      goto LABEL_29;
    }
    unint64_t v83 = v78;
    uint64_t v84 = 1;
    unint64_t v83 = mlir::ValueRange::offset_base(&v83, 1);
    uint64_t v84 = 0;
    unint64_t Value = *(void *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v83 = v78;
    uint64_t v84 = 0;
    unint64_t v64 = *(void *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    mlir::ValueRange::ValueRange(v65, (uint64_t)&Value, 2uLL);
    unint64_t v83 = v78;
    uint64_t v84 = 0;
    uint64_t v37 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8);
    if (v38) {
      uint64_t v38 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8);
    }
    else {
      uint64_t v37 = 0;
    }
    unint64_t Value = (unint64_t)v37;
    unint64_t v64 = v38;
    unint64_t v83 = v78;
    uint64_t v84 = 1;
    unint64_t v83 = mlir::ValueRange::offset_base(&v83, 1);
    uint64_t v84 = 0;
    uint64_t v47 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v47 + 8);
    if (v48) {
      uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v47 + 8);
    }
    else {
      uint64_t v47 = 0;
    }
    v62[0] = v47;
    v62[1] = v48;
    unint64_t v83 = v78;
    uint64_t v84 = 2;
    unint64_t v83 = mlir::ValueRange::offset_base(&v83, 2);
    uint64_t v84 = 0;
    uint64_t v49 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v83, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v49 + 8))
    {
      uint64_t v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v49 + 8);
      unint64_t v83 = (unint64_t)v49;
      uint64_t v84 = v50;
      if (!Value) {
        goto LABEL_53;
      }
    }
    else
    {
      unint64_t v83 = 0;
      uint64_t v84 = 0;
      if (!Value) {
        goto LABEL_53;
      }
    }
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Value)
      && *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value)
                   + 8 * v24) != 0x8000000000000000)
    {
      uint64_t v52 = v24;
      p_unint64_t Value = (mlir::CallableOpInterface *)&Value;
      goto LABEL_62;
    }
LABEL_53:
    if (!v47
      || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v62)
      || *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v62)
                   + 8 * v24) == 0x8000000000000000)
    {
      if (!v83
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v83)
        || *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83) == 0x8000000000000000)
      {
LABEL_64:
        if (!Value
          || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Value)
          || (uint64_t v54 = &Value,
              uint64_t v55 = v25,
              *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value) + 8 * v25) == 0x8000000000000000))
        {
          if (!v83
            || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v83)
            || (uint64_t v54 = &v83,
                *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83) + 8) == 0x8000000000000000))
          {
LABEL_72:
            if (!Value
              || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Value)
              || (long long v57 = &Value,
                  uint64_t v58 = v26,
                  *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value) + 8 * v26) == 0x8000000000000000))
            {
              if (!v83
                || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v83)
                || (long long v57 = &v83,
                    *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83) + 16) == 0x8000000000000000))
              {
LABEL_80:
                uint64_t v60 = mlir::RankedTensorType::get((uint64_t)v80, v81, v36, 0);
                uint64_t v61 = *(unsigned int *)(v31 + 8);
                if (v61 >= *(_DWORD *)(v31 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v31, (void *)(v31 + 16), v61 + 1, 8);
                  LODWORD(v61) = *(_DWORD *)(v31 + 8);
                }
                *(void *)(*(void *)v31 + 8 * v61) = v60;
                ++*(_DWORD *)(v31 + 8);
                uint64_t v45 = v80;
                if (v80 != (void *)v82) {
                  goto LABEL_41;
                }
                return 1;
              }
              uint64_t v58 = 2;
            }
            uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
            v80[v26] = *(void *)(ArgAttrsAttr + 8 * v58);
            goto LABEL_80;
          }
          uint64_t v55 = 1;
        }
        uint64_t v56 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v54);
        v80[v25] = *(void *)(v56 + 8 * v55);
        goto LABEL_72;
      }
      uint64_t v51 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83);
LABEL_63:
      v80[v24] = *v51;
      goto LABEL_64;
    }
    uint64_t v52 = v24;
    p_unint64_t Value = (mlir::CallableOpInterface *)v62;
LABEL_62:
    uint64_t v51 = (void *)(mlir::CallableOpInterface::getArgAttrsAttr(p_Value) + 8 * v52);
    goto LABEL_63;
  }
  uint64_t v34 = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v83);
  v80[v27] = (void)v34 * UInt;
  if (a5 == 3) {
    goto LABEL_26;
  }
LABEL_29:
  unint64_t v66 = v68;
  uint64_t v67 = 0x400000000;
  int v39 = v81;
  if (!v81) {
    goto LABEL_36;
  }
  if (v81 < 5)
  {
    uint64_t v41 = v68;
    unsigned int v40 = v81;
    goto LABEL_34;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v81, 8);
  unsigned int v40 = v81;
  if (v81)
  {
    uint64_t v41 = v66;
LABEL_34:
    memcpy(v41, v80, 8 * v40);
  }
  LODWORD(v67) = v39;
LABEL_36:
  uint64_t v42 = mlir::Float32Type::get(a1, v16);
  uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v66, v67, v42, 0);
  uint64_t v44 = *(unsigned int *)(v31 + 8);
  if (v44 >= *(_DWORD *)(v31 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v31, (void *)(v31 + 16), v44 + 1, 8);
    LODWORD(v44) = *(_DWORD *)(v31 + 8);
  }
  *(void *)(*(void *)v31 + 8 * v44) = v43;
  ++*(_DWORD *)(v31 + 8);
  if (v66 != v68) {
    free(v66);
  }
  uint64_t v45 = v80;
  if (v80 != (void *)v82) {
LABEL_41:
  }
    free(v45);
  return 1;
}

void *mlir::mps::anonymous namespace'::getUnsignedIntegerOr(uint64_t a1, uint64_t a2)
{
  if (a1
    && ((uint64_t v3 = *(void **)(*(void *)a1 + 136),
         BOOL v4 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id,
         v3 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      ? (uint64_t v5 = 0)
      : (uint64_t v5 = a1),
        (uint64_t v8 = v5, v4)
     && (uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v8),
         mlir::Type::isUnsignedInteger((mlir::Type *)&Value))))
  {
    return mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v8);
  }
  else
  {
    return (void *)a2;
  }
}

uint64_t mlir::mps::CostVolumeOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[9];
  if (a1[8]
    && (v27[0] = a1[8],
        v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27),
        !mlir::Type::isUnsignedInteger((mlir::Type *)v29, 64)))
  {
    v27[0] = "'mps.cost_volume' op attribute 'window_height' failed to satisfy constraint: 64-bit unsigned integer attribute";
    __int16 v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    }
    if (v36)
    {
      uint64_t v6 = (void **)__p;
      if (__p)
      {
        uint64_t v7 = v35;
        uint64_t v8 = __p;
        if (v35 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          uint64_t v8 = __p;
        }
        uint64_t v35 = v6;
        operator delete(v8);
      }
      uint64_t v9 = v32;
      if (!v32) {
        goto LABEL_52;
      }
      uint64_t v10 = v33;
      uint64_t v11 = v32;
      if (v33 == v32) {
        goto LABEL_51;
      }
      do
      {
        uint64_t v13 = (void *)*--v10;
        uint64_t v12 = v13;
        *uint64_t v10 = 0;
        if (v13) {
          operator delete[](v12);
        }
      }
      while (v10 != v9);
      goto LABEL_50;
    }
  }
  else if (v4 {
         && (v27[0] = v4,
  }
             v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27),
             !mlir::Type::isUnsignedInteger((mlir::Type *)v29, 64)))
  {
    v27[0] = "'mps.cost_volume' op attribute 'window_width' failed to satisfy constraint: 64-bit unsigned integer attribute";
    __int16 v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    }
    if (v36)
    {
      unint64_t v14 = (void **)__p;
      if (__p)
      {
        uint64_t v15 = v35;
        unint64_t v16 = __p;
        if (v35 != __p)
        {
          do
            uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          unint64_t v16 = __p;
        }
        uint64_t v35 = v14;
        operator delete(v16);
      }
      uint64_t v9 = v32;
      if (!v32) {
        goto LABEL_52;
      }
      uint64_t v17 = v33;
      uint64_t v11 = v32;
      if (v33 == v32) {
        goto LABEL_51;
      }
      do
      {
        long long v19 = (void *)*--v17;
        long long v18 = v19;
        *uint64_t v17 = 0;
        if (v19) {
          operator delete[](v18);
        }
      }
      while (v17 != v9);
      goto LABEL_50;
    }
  }
  else
  {
    if (!v3 || *(_DWORD *)(v3 + 8) < 2u) {
      return 1;
    }
    v27[0] = "'mps.cost_volume' op attribute 'data_layout' failed to satisfy constraint: valid TensorDataLayout is NHWC or NCHW";
    __int16 v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    }
    if (v36)
    {
      long long v20 = (void **)__p;
      if (__p)
      {
        uint64_t v21 = v35;
        uint64_t v22 = __p;
        if (v35 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        uint64_t v35 = v20;
        operator delete(v22);
      }
      uint64_t v9 = v32;
      if (!v32) {
        goto LABEL_52;
      }
      uint64_t v23 = v33;
      uint64_t v11 = v32;
      if (v33 == v32)
      {
LABEL_51:
        uint64_t v33 = v9;
        operator delete(v11);
LABEL_52:
        if (v30 != &v31) {
          free(v30);
        }
        return v5;
      }
      do
      {
        uint64_t v25 = (void *)*--v23;
        uint64_t v24 = v25;
        *uint64_t v23 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v23 != v9);
LABEL_50:
      uint64_t v11 = v32;
      goto LABEL_51;
    }
  }
  return v5;
}

uint64_t mlir::mps::anonymous namespace'::inferMixedPrecisionResultElementType(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
LABEL_11:
    unint64_t v16 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    return mlir::getElementTypeOrSelf(v16);
  }
  int v4 = 0;
  int v5 = 0;
  char v6 = 0;
  for (uint64_t i = 0; i != a2; ++i)
  {
    uint64_t v8 = (void *)mlir::TypeRange::dereference_iterator(a1, i);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
    unint64_t Value = ElementTypeOrSelf;
    if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      uint64_t v17 = ElementTypeOrSelf;
      unint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
      char v6 = 1;
    }
    v4 |= mlir::Type::isBF16((mlir::Type *)&Value);
    v5 |= mlir::Type::isF32((mlir::Type *)&Value);
  }
  if ((v6 & 1) == 0)
  {
    if (v4 & v5)
    {
      unint64_t Value = mlir::TypeRange::dereference_iterator(a1, 0);
      uint64_t Context = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)&Value);
      return mlir::Float32Type::get(Context, v14);
    }
    goto LABEL_11;
  }
  unint64_t Value = mlir::TypeRange::dereference_iterator(a1, 0);
  uint64_t v10 = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)&Value);
  if (v5) {
    uint64_t v12 = mlir::Float32Type::get(v10, v11);
  }
  else {
    uint64_t v12 = mlir::Float16Type::get(v10, v11);
  }
  return mlir::ComplexType::get(v12);
}

uint64_t mlir::mps::SampleGridDataGradientOp::verify(uint64_t **this)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  uint64_t v3 = (void *)(*this)[9];
  int v4 = *(void **)(*(void *)(*(void *)(v3[3] + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    char v6 = (const void **)(*(void *)(v3[3] + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    char v6 = 0;
  }
  uint64_t v7 = *(void **)(*(void *)(*(void *)(v3[7] + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v9 = *(void *)(v3[7] + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = v3[11];
  unint64_t v11 = *(void *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void **)(*(void *)v11 + 136);
  BOOL v14 = v12 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     && v12 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (v6) {
    BOOL v15 = v9 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15 && v11 != 0 && !v14)
  {
    uint64_t v48 = &v50;
    uint64_t v49 = 0x400000000;
    uint64_t v27 = v2[3];
    uint64_t v18 = 1;
    if (!mlir::matchConstantWithIntVector<long long>(v10, (uint64_t)&v48)) {
      goto LABEL_93;
    }
    if (v49 != 4)
    {
      if (!mlir::emitOptionalError<char const(&)[39]>(v27, 1, "unexpected output shape passed")) {
        goto LABEL_92;
      }
      __int16 v28 = v48;
      uint64_t v29 = (*this)[3];
      v45[0] = v6;
      unint64_t v47 = v9;
      if (v49 != 4)
      {
        char v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "outputShape must have 4 values");
        goto LABEL_91;
      }
LABEL_52:
      if (mlir::TensorType::hasRank((mlir::TensorType *)v45))
      {
        unint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v45);
        if (v31 != 4)
        {
          uint64_t v34 = "incoming gradient rank should be 4";
          goto LABEL_67;
        }
        if (*v28 != 0x8000000000000000 && *Value != 0x8000000000000000 && *Value != *v28)
        {
          char v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "batch dimensions of the incoming gradient do not match the outputShape");
          goto LABEL_91;
        }
        uint64_t v35 = v28[3];
        if (v35 != 0x8000000000000000)
        {
          uint64_t v36 = Value[3];
          if (v36 != 0x8000000000000000 && v36 != v35)
          {
            char v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "the number of channels of the incoming gradient does not match the outputShape");
            goto LABEL_91;
          }
        }
      }
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v47)) {
        goto LABEL_81;
      }
      uint64_t v37 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v47);
      if (v38 != 4)
      {
        char v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "coordinates rank should be 4");
LABEL_91:
        if (!v32)
        {
          uint64_t v18 = 0;
          uint64_t v33 = v48;
          if (v48 == &v50) {
            return v18;
          }
          goto LABEL_94;
        }
        goto LABEL_92;
      }
      uint64_t v39 = v37[3];
      if (v39 == 0x8000000000000000 || v39 == 2)
      {
        if (*v28 != 0x8000000000000000 && *v37 != 0x8000000000000000 && *v37 != *v28)
        {
          char v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "batch dimensions of the coordinates donot match the outputShape");
          goto LABEL_91;
        }
LABEL_81:
        if (mlir::TensorType::hasRank((mlir::TensorType *)v45) && mlir::TensorType::hasRank((mlir::TensorType *)&v47))
        {
          if ((unsigned int v40 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v45),
                uint64_t v41 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v47),
                *v40 != 0x8000000000000000)
            && *v40 != *v41
            || (uint64_t v42 = v40[1], v42 != 0x8000000000000000) && v42 != v41[1]
            || (uint64_t v43 = v40[2], v43 != 0x8000000000000000) && v43 != v41[2])
          {
            char v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, "dimensions of incoming gradient and coordinates do not match");
            goto LABEL_91;
          }
        }
LABEL_92:
        uint64_t v18 = 1;
LABEL_93:
        uint64_t v33 = v48;
        if (v48 == &v50) {
          return v18;
        }
LABEL_94:
        free(v33);
        return v18;
      }
      uint64_t v34 = "coordinates should have 2 channels";
LABEL_67:
      char v32 = mlir::emitOptionalError<char const(&)[39]>(v29, 1, v34);
      goto LABEL_91;
    }
    __int16 v28 = v48;
    if (*(void *)v48 == -1)
    {
      *(void *)uint64_t v48 = 0x8000000000000000;
      if (v28[1] != -1)
      {
LABEL_47:
        if (v28[2] != -1) {
          goto LABEL_48;
        }
        goto LABEL_64;
      }
    }
    else if (*((void *)v48 + 1) != -1)
    {
      goto LABEL_47;
    }
    v28[1] = 0x8000000000000000;
    if (v28[2] != -1)
    {
LABEL_48:
      if (v28[3] != -1)
      {
LABEL_49:
        uint64_t v29 = (*this)[3];
        v45[0] = v6;
        unint64_t v47 = v9;
        goto LABEL_52;
      }
LABEL_65:
      void v28[3] = 0x8000000000000000;
      goto LABEL_49;
    }
LABEL_64:
    v28[2] = 0x8000000000000000;
    if (v28[3] != -1) {
      goto LABEL_49;
    }
    goto LABEL_65;
  }
  v45[0] = (const void **)"cannot sample a non-tensor type";
  __int16 v46 = 259;
  mlir::OpState::emitOpError(this, v45, (uint64_t)&v48);
  uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v48);
  if (v48) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v48);
  }
  if (v57)
  {
    long long v19 = (void **)__p;
    if (__p)
    {
      long long v20 = v56;
      uint64_t v21 = __p;
      if (v56 != __p)
      {
        do
          long long v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v56 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v53;
    if (v53)
    {
      uint64_t v23 = v54;
      uint64_t v24 = v53;
      if (v54 != v53)
      {
        do
        {
          uint64_t v26 = (void *)*--v23;
          uint64_t v25 = v26;
          *uint64_t v23 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v53;
      }
      uint64_t v54 = v22;
      operator delete(v24);
    }
    uint64_t v33 = v51;
    if (v51 != &v52) {
      goto LABEL_94;
    }
  }
  return v18;
}

uint64_t mlir::mps::SampleGridDataGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v40[4] = *MEMORY[0x1E4F143B8];
  v37[0] = a4;
  v37[1] = a5;
  if (a5 == 3)
  {
    uint64_t v13 = mlir::ValueRange::dereference_iterator(v37, 0);
    BOOL v14 = *(void **)(*(void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v16 = *(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(v37, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void **)(*(void *)v17 + 136);
    BOOL v20 = v18 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       && v18 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
    uint64_t v21 = mlir::ValueRange::dereference_iterator(v37, 2);
    if (v16) {
      BOOL v22 = v17 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22 || v20) {
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot sample a non-tensor type");
    }
    unint64_t v36 = v16;
    uint64_t v38 = v40;
    uint64_t v39 = 0x400000000;
    if (mlir::matchConstantWithIntVector<long long>(v21, (uint64_t)&v38))
    {
      if (v39 == 4)
      {
        uint64_t v25 = v38;
        if (*(void *)v38 == -1)
        {
          *(void *)uint64_t v38 = 0x8000000000000000;
          if (v25[1] != -1)
          {
LABEL_29:
            if (v25[2] != -1) {
              goto LABEL_30;
            }
            goto LABEL_37;
          }
        }
        else if (*((void *)v38 + 1) != -1)
        {
          goto LABEL_29;
        }
        v25[1] = 0x8000000000000000;
        if (v25[2] != -1)
        {
LABEL_30:
          if (v25[3] == -1) {
            goto LABEL_38;
          }
          goto LABEL_39;
        }
LABEL_37:
        void v25[2] = 0x8000000000000000;
        if (v25[3] == -1) {
LABEL_38:
        }
          v25[3] = 0x8000000000000000;
LABEL_39:
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v36))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
          if (v29 == 4)
          {
            if (*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36) != 0x8000000000000000
              && *(void *)v38 == 0x8000000000000000)
            {
              unint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
              *(void *)uint64_t v38 = *Value;
            }
            if (*(void *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36) + 24) != 0x8000000000000000
              && *((void *)v38 + 3) == 0x8000000000000000)
            {
              uint64_t v31 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v36);
              *((void *)v38 + 3) = *(void *)(v31 + 24);
            }
          }
        }
        char v32 = v38;
        uint64_t v33 = v39;
        uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v36);
        uint64_t v27 = mlir::RankedTensorType::get((uint64_t)v32, v33, ElementType, 0);
        __int16 v28 = v38;
        if (v38 == v40) {
          goto LABEL_49;
        }
LABEL_48:
        free(v28);
LABEL_49:
        uint64_t v35 = *(unsigned int *)(a11 + 8);
        if (v35 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
          LODWORD(v35) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v35) = v27;
        ++*(_DWORD *)(a11 + 8);
        return 1;
      }
      if (mlir::emitOptionalError<char const(&)[39]>(a2, a3, "unexpected output shape passed")) {
        goto LABEL_39;
      }
    }
    uint64_t v26 = mlir::TensorType::getElementType((mlir::TensorType *)&v36);
    uint64_t v27 = mlir::UnrankedTensorType::get(v26);
    __int16 v28 = v38;
    if (v38 == v40) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::LocalConvolutionOp::verify(uint64_t **this)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  int v4 = *(void **)(*(void *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v3 = 0;
  }
  unint64_t v51 = v3;
  unint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v6 = 0;
  }
  unint64_t v50 = v6;
  if (v3) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    BOOL hasRank = mlir::TensorType::hasRank((mlir::TensorType *)&v51);
    if (!hasRank || !mlir::TensorType::hasRank((mlir::TensorType *)&v50)) {
      return 1;
    }
    uint64_t v20 = *(int *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
    if (v20 >= 6 || ((0x33u >> v20) & 1) == 0)
    {
      v52[0] = (const void **)"unsupported data layout";
      __int16 v54 = 259;
      mlir::OpState::emitOpError(this, v52, (uint64_t)v55);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
      if (v55[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
      }
      if (!v62) {
        return v10;
      }
      uint64_t v21 = (void **)__p;
      if (__p)
      {
        BOOL v22 = v61;
        uint64_t v23 = __p;
        if (v61 != __p)
        {
          do
            BOOL v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          uint64_t v23 = __p;
        }
        uint64_t v61 = v21;
        operator delete(v23);
      }
      BOOL v14 = v58;
      if (!v58) {
        goto LABEL_51;
      }
      uint64_t v24 = v59;
      unint64_t v16 = v58;
      if (v59 == v58) {
        goto LABEL_50;
      }
      do
      {
        uint64_t v26 = (void *)*--v24;
        uint64_t v25 = v26;
        *uint64_t v24 = 0;
        if (v26) {
          operator delete[](v25);
        }
      }
      while (v24 != v14);
      goto LABEL_49;
    }
    uint64_t v29 = v20;
    uint64_t v30 = qword_181126160[v29];
    uint64_t v31 = *(void *)((char *)&unk_181126050 + v29 * 8);
    unint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
    uint64_t v34 = v33;
    uint64_t v35 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
    if (v36 == v30)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50);
      if (v37 == v30)
      {
        v52[0] = (const void **)v53;
        v52[1] = (const void **)0x400000000;
        unint64_t v38 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          unint64_t v38 = 0;
        }
        uint64_t v39 = *(void **)(v38 + 16);
        if (v39) {
          uint64_t v40 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v39 + 8);
        }
        else {
          uint64_t v40 = 0;
        }
        mlir::getIntValues<long long>((uint64_t)v39, v40, (uint64_t)v52, 1);
        uint64_t v42 = v35[v31];
        if (v42 == 0x8000000000000000 || (uint64_t)v52[0][1] * (uint64_t)*v52[0] == v42)
        {
          if (!v34)
          {
LABEL_82:
            uint64_t v10 = 1;
LABEL_83:
            uint64_t v27 = v52[0];
            if ((unsigned char *)v52[0] == v53) {
              return v10;
            }
            goto LABEL_52;
          }
          while (1)
          {
            if (v31)
            {
              uint64_t v44 = *v35;
              BOOL v45 = *Value == 0x8000000000000000 || *Value == v44;
              if (!v45 && v44 != 0x8000000000000000) {
                break;
              }
            }
            --v31;
            ++Value;
            ++v35;
            if (!--v34) {
              goto LABEL_82;
            }
          }
          unint64_t v47 = "weight shape does not match input shape";
        }
        else
        {
          unint64_t v47 = "weight channel count doesn't match kernel size";
        }
        uint64_t v48 = (const void **)v47;
        __int16 v49 = 259;
        mlir::OpState::emitOpError(this, &v48, (uint64_t)v55);
        uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v55);
        goto LABEL_83;
      }
      uint64_t v41 = "weight rank does not match data_layout";
    }
    else
    {
      uint64_t v41 = "input rank does not match data_layout";
    }
    v52[0] = (const void **)v41;
    __int16 v54 = 259;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v55);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v55);
    return v10;
  }
  v52[0] = (const void **)"cannot convolve a non-tensor type";
  __int16 v54 = 259;
  mlir::OpState::emitOpError(this, v52, (uint64_t)v55);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
  if (v55[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
  }
  if (!v62) {
    return v10;
  }
  unint64_t v11 = (void **)__p;
  if (__p)
  {
    uint64_t v12 = v61;
    uint64_t v13 = __p;
    if (v61 != __p)
    {
      do
        uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v61 = v11;
    operator delete(v13);
  }
  BOOL v14 = v58;
  if (v58)
  {
    BOOL v15 = v59;
    unint64_t v16 = v58;
    if (v59 == v58) {
      goto LABEL_50;
    }
    do
    {
      uint64_t v18 = (void *)*--v15;
      unint64_t v17 = v18;
      *BOOL v15 = 0;
      if (v18) {
        operator delete[](v17);
      }
    }
    while (v15 != v14);
LABEL_49:
    unint64_t v16 = v58;
LABEL_50:
    long long v59 = v14;
    operator delete(v16);
  }
LABEL_51:
  uint64_t v27 = (const void **)v56;
  if (v56 != &v57) {
LABEL_52:
  }
    free(v27);
  return v10;
}

uint64_t mlir::mps::anonymous namespace'::inferMixedPrecisionResultTypeFromZerothOperand(mlir::Float32Type *a1, mlir::MLIRContext *a2, int64_t a3, uint64_t a4)
{
  unint64_t v30[2] = *MEMORY[0x1E4F143B8];
  v30[0] = a2;
  v30[1] = a3;
  if (a3 > 0)
  {
    uint64_t v27 = v29;
    uint64_t v28 = 0x200000000;
    if ((unint64_t)a3 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, a3, 8);
    }
    uint64_t v7 = 0;
    uint64_t v23 = a2;
    uint64_t v24 = 0;
    do
    {
      uint64_t v8 = *(void *)(mlir::ValueRange::dereference_iterator(&v23, v7) + 8);
      uint64_t v9 = v28;
      if (v28 >= (unint64_t)HIDWORD(v28))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
        uint64_t v9 = v28;
      }
      *((void *)v27 + v9) = v8 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v10 = (v28 + 1);
      LODWORD(v28) = v28 + 1;
      uint64_t v7 = ++v24;
    }
    while (v23 != a2 || v7 != a3);
    mlir::ValueRange::ValueRange(v26, (uint64_t)v27, v10);
    unint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(v30, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    BOOL v14 = *(void **)(*(void *)v13 + 136);
    if (v14 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v14 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v13 = 0;
    }
    unint64_t v22 = v13;
    if (v13)
    {
      LOBYTE(v23) = 0;
      char v25 = 0;
      uint64_t v16 = mlir::TensorType::cloneWith((uint64_t)&v22, (uint64_t)&v23, v12);
      unsigned int v17 = *(_DWORD *)(a4 + 8);
      if (v17 < *(_DWORD *)(a4 + 12)) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v16 = mlir::UnrankedTensorType::get(v12);
      unsigned int v17 = *(_DWORD *)(a4 + 8);
      if (v17 < *(_DWORD *)(a4 + 12)) {
        goto LABEL_19;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v17 + 1, 8);
    unsigned int v17 = *(_DWORD *)(a4 + 8);
LABEL_19:
    *(void *)(*(void *)a4 + 8 * v17) = v16;
    ++*(_DWORD *)(a4 + 8);
    if (v27 != v29) {
      free(v27);
    }
    return 1;
  }
  uint64_t v18 = mlir::Float32Type::get(a1, a2);
  uint64_t v19 = mlir::UnrankedTensorType::get(v18);
  uint64_t v20 = *(unsigned int *)(a4 + 8);
  if (v20 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * v20) = v19;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t mlir::mps::LocalConvolutionDataGradientOp::verify(uint64_t **this)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *this;
  unsigned int v3 = *((_DWORD *)*this + 11);
  uint64_t v4 = (*this)[9];
  unint64_t v5 = *(void *)(*(void *)(v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void **)(*(void *)v5 + 136);
  if (v6 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v6 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v5 = 0;
  }
  unint64_t v54 = v5;
  unint64_t v8 = *(void *)(*(void *)(v4 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void **)(*(void *)v8 + 136);
  if (v9 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v9 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v8 = 0;
  }
  unint64_t v53 = v8;
  if (v5) {
    BOOL v11 = v8 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v22 = v2[10];
    uint64_t v21 = v2 + 10;
    uint64_t v23 = *(int *)(v22 + 8);
    if (v23 >= 6 || ((0x33u >> v23) & 1) == 0)
    {
      v55[0] = (const void **)"unsupported data layout";
      __int16 v57 = 259;
      mlir::OpState::emitOpError(this, v55, (uint64_t)v58);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
      if (v58[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
      }
      if (!v65) {
        return v12;
      }
      uint64_t v24 = (void **)__p;
      if (__p)
      {
        char v25 = v64;
        uint64_t v26 = __p;
        if (v64 != __p)
        {
          do
            char v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          uint64_t v26 = __p;
        }
        unint64_t v64 = v24;
        operator delete(v26);
      }
      uint64_t v16 = v61;
      if (!v61) {
        goto LABEL_48;
      }
      uint64_t v27 = v62;
      uint64_t v18 = v61;
      if (v62 == v61) {
        goto LABEL_47;
      }
      do
      {
        uint64_t v29 = (void *)*--v27;
        uint64_t v28 = v29;
        void *v27 = 0;
        if (v29) {
          operator delete[](v28);
        }
      }
      while (v27 != v16);
      goto LABEL_46;
    }
    uint64_t v32 = v23;
    uint64_t v33 = qword_181126160[v32];
    uint64_t v34 = *(void *)((char *)&unk_181126050 + v32 * 8);
    v55[0] = (const void **)v56;
    v55[1] = (const void **)0x400000000;
    if (!HIBYTE(v3)) {
      uint64_t v21 = 0;
    }
    uint64_t v35 = (void *)v21[2];
    if (v35) {
      uint64_t v36 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v35 + 8);
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v12 = 1;
    mlir::getIntValues<long long>((uint64_t)v35, v36, (uint64_t)v55, 1);
    uint64_t v37 = (uint64_t)*v55[0];
    unint64_t v38 = v55[0][1];
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v54) && mlir::TensorType::hasRank((mlir::TensorType *)&v53))
    {
      unint64_t Value = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
      uint64_t v41 = v40;
      uint64_t v42 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
      if (v43 == v33)
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v53);
        if (v44 == v33)
        {
          uint64_t v45 = v42[v34];
          if (v45 == 0x8000000000000000 || (void)v38 * v37 == v45)
          {
            if (!v41) {
              goto LABEL_80;
            }
            while (1)
            {
              if (v34)
              {
                uint64_t v47 = *v42;
                BOOL v48 = *Value == 0x8000000000000000 || *Value == v47;
                if (!v48 && v47 != 0x8000000000000000) {
                  break;
                }
              }
              --v34;
              ++Value;
              ++v42;
              if (!--v41) {
                goto LABEL_80;
              }
            }
            unint64_t v50 = "weight shape does not match gradient shape";
          }
          else
          {
            unint64_t v50 = "weight channel count doesn't match kernel size";
          }
        }
        else
        {
          unint64_t v50 = "weight rank does not match data_layout";
        }
      }
      else
      {
        unint64_t v50 = "gradient rank does not match data_layout";
      }
      unint64_t v51 = (const void **)v50;
      __int16 v52 = 259;
      mlir::OpState::emitOpError(this, &v51, (uint64_t)v58);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v58);
    }
LABEL_80:
    uint64_t v30 = v55[0];
    if ((unsigned char *)v55[0] == v56) {
      return v12;
    }
    goto LABEL_49;
  }
  v55[0] = (const void **)"cannot convolve a non-tensor type";
  __int16 v57 = 259;
  mlir::OpState::emitOpError(this, v55, (uint64_t)v58);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v58);
  if (v58[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v58);
  }
  if (!v65) {
    return v12;
  }
  unint64_t v13 = (void **)__p;
  if (__p)
  {
    BOOL v14 = v64;
    BOOL v15 = __p;
    if (v64 != __p)
    {
      do
        BOOL v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
      while (v14 != v13);
      BOOL v15 = __p;
    }
    unint64_t v64 = v13;
    operator delete(v15);
  }
  uint64_t v16 = v61;
  if (v61)
  {
    unsigned int v17 = v62;
    uint64_t v18 = v61;
    if (v62 == v61) {
      goto LABEL_47;
    }
    do
    {
      uint64_t v20 = (void *)*--v17;
      uint64_t v19 = v20;
      *unsigned int v17 = 0;
      if (v20) {
        operator delete[](v19);
      }
    }
    while (v17 != v16);
LABEL_46:
    uint64_t v18 = v61;
LABEL_47:
    char v62 = v16;
    operator delete(v18);
  }
LABEL_48:
  uint64_t v30 = (const void **)v59;
  if (v59 != &v60) {
LABEL_49:
  }
    free(v30);
  return v12;
}

uint64_t mlir::mps::LocalConvolutionWeightGradientOp::verify(uint64_t **this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  unint64_t v3 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(*(void *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v3 = 0;
  }
  unint64_t v45 = v3;
  unint64_t v6 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v6 = 0;
  }
  unint64_t v44 = v6;
  if (v3) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    BOOL hasRank = mlir::TensorType::hasRank((mlir::TensorType *)&v45);
    if (!hasRank || !mlir::TensorType::hasRank((mlir::TensorType *)&v44)) {
      return 1;
    }
    uint64_t v20 = *(int *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
    if (v20 >= 6 || ((0x33u >> v20) & 1) == 0)
    {
      v42[0] = (const void **)"unsupported data layout";
      __int16 v43 = 259;
      mlir::OpState::emitOpError(this, v42, (uint64_t)v46);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
      if (v46[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
      }
      if (v53)
      {
        uint64_t v21 = (void **)__p;
        if (__p)
        {
          uint64_t v22 = v52;
          uint64_t v23 = __p;
          if (v52 != __p)
          {
            do
              uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            uint64_t v23 = __p;
          }
          __int16 v52 = v21;
          operator delete(v23);
        }
        BOOL v14 = v49;
        if (!v49) {
          goto LABEL_50;
        }
        uint64_t v24 = v50;
        uint64_t v16 = v49;
        if (v50 == v49)
        {
LABEL_49:
          unint64_t v50 = v14;
          operator delete(v16);
LABEL_50:
          if (v47 != &v48) {
            free(v47);
          }
          return v10;
        }
        do
        {
          uint64_t v26 = (void *)*--v24;
          char v25 = v26;
          *uint64_t v24 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v24 != v14);
LABEL_48:
        uint64_t v16 = v49;
        goto LABEL_49;
      }
      return v10;
    }
    uint64_t v27 = qword_181126160[v20];
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
    if (v28 == v27)
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
      if (v29 == v27)
      {
        unint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
        uint64_t v32 = v31;
        uint64_t v33 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v44);
        if (v32)
        {
          uint64_t v10 = 1;
          while (1)
          {
            uint64_t v35 = *Value++;
            uint64_t v34 = v35;
            uint64_t v37 = *v33++;
            uint64_t v36 = v37;
            BOOL v38 = v34 == 0x8000000000000000 || v34 == v36;
            if (!v38 && v36 != 0x8000000000000000) {
              break;
            }
            if (!--v32) {
              return v10;
            }
          }
          uint64_t v41 = "gradient shape does not match input shape";
          goto LABEL_70;
        }
        return 1;
      }
      uint64_t v41 = "gradient rank does not match data_layout";
    }
    else
    {
      uint64_t v41 = "input rank does not match data_layout";
    }
LABEL_70:
    v42[0] = (const void **)v41;
    __int16 v43 = 259;
    mlir::OpState::emitOpError(this, v42, (uint64_t)v46);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v46);
    return v10;
  }
  v42[0] = (const void **)"cannot convolve a non-tensor type";
  __int16 v43 = 259;
  mlir::OpState::emitOpError(this, v42, (uint64_t)v46);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v46);
  if (v46[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v46);
  }
  if (v53)
  {
    BOOL v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v52;
      unint64_t v13 = __p;
      if (v52 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        unint64_t v13 = __p;
      }
      __int16 v52 = v11;
      operator delete(v13);
    }
    BOOL v14 = v49;
    if (!v49) {
      goto LABEL_50;
    }
    BOOL v15 = v50;
    uint64_t v16 = v49;
    if (v50 == v49) {
      goto LABEL_49;
    }
    do
    {
      uint64_t v18 = (void *)*--v15;
      unsigned int v17 = v18;
      *BOOL v15 = 0;
      if (v18) {
        operator delete[](v17);
      }
    }
    while (v15 != v14);
    goto LABEL_48;
  }
  return v10;
}

uint64_t mlir::mps::LocalConvolutionWeightGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v81[2] = *MEMORY[0x1E4F143B8];
  uint64_t v76 = a4;
  unint64_t v77 = a5;
  if (a7)
  {
    long long v16 = *a7;
    unsigned int v17 = (void *)*((void *)a7 + 2);
  }
  else
  {
    unsigned int v17 = 0;
    long long v16 = 0uLL;
  }
  uint64_t v67 = a6;
  v68[0] = 0;
  char v69 = 0;
  long long v70 = v16;
  char v71 = v17;
  uint64_t v72 = a9;
  unint64_t v18 = a5;
  uint64_t v73 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v69) {
      char v69 = 0;
    }
    mlir::OperationName::OperationName(v68, "mps.local_convolution_weight_gradient", 37, Context);
    char v69 = 1;
    unint64_t v18 = v77;
  }
  uint64_t v74 = a4;
  unint64_t v75 = a5;
  if (v18 < 2
    || (uint64_t v20 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::LocalConvolutionWeightGradientOpAdaptor::verify(&v67, v20)))
  {
    uint64_t v31 = mlir::Float32Type::get(this, a2);
    uint64_t v32 = mlir::UnrankedTensorType::get(v31);
    uint64_t v33 = *(unsigned int *)(a11 + 8);
    if (v33 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
      LODWORD(v33) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v33) = v32;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  uint64_t v21 = mlir::ValueRange::dereference_iterator(&v76, 0);
  uint64_t v22 = *(void **)(*(void *)(*(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v22 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v22 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    uint64_t v24 = (void *)(*(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v25 = mlir::ValueRange::dereference_iterator(&v76, 1);
  uint64_t v26 = *(void **)(*(void *)(*(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
  if (v26 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || v26 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v28 = *(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v28 = 0;
  }
  if (v28) {
    BOOL v29 = v24 == 0;
  }
  else {
    BOOL v29 = 1;
  }
  if (v29) {
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot convolve a non-tensor type");
  }
  uint64_t v35 = v70;
  uint64_t v36 = (uint64_t)v71;
  v65[0] = v66;
  v65[1] = (void *)0x400000000;
  if (v71) {
    uint64_t v37 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v71 + 8);
  }
  else {
    uint64_t v37 = 0;
  }
  mlir::getIntValues<long long>(v36, v37, (uint64_t)v65, 1);
  uint64_t v61 = *((void *)v65[0] + 1);
  uint64_t v62 = *(void *)v65[0];
  uint64_t v38 = *(int *)(v35 + 8);
  unint64_t v63 = v28;
  unint64_t v64 = v24;
  uint64_t v39 = qword_181126080[v38];
  uint64_t v40 = qword_1811260B8[v38];
  uint64_t v41 = qword_1811260F0[v38];
  uint64_t v60 = qword_181126128[v38];
  unint64_t v78 = v24;
  unint64_t v79 = v28;
  mlir::ValueRange::ValueRange(v81, (uint64_t)&v78, 2uLL);
  if v38 < 6 && ((0x33u >> v38))
  {
    uint64_t v47 = v42;
    uint64_t v48 = qword_181126160[v38];
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v63) && !mlir::TensorType::hasRank((mlir::TensorType *)&v64))
    {
      uint64_t v44 = mlir::UnrankedTensorType::get(v47);
      uint64_t v45 = *(unsigned int *)(a11 + 8);
      if (v45 < *(_DWORD *)(a11 + 12)) {
        goto LABEL_40;
      }
      goto LABEL_58;
    }
    unint64_t v78 = v80;
    HIDWORD(v79) = 4;
    memset_pattern16(v80, &unk_1811000C0, 8 * v48);
    LODWORD(v79) = v48;
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v63))
    {
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63);
      if (v50 != v48)
      {
        char v59 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input rank doesn't match data layout");
        goto LABEL_61;
      }
      unint64_t v51 = v78;
      v78[v39] = *(void *)(Value + 8 * v39);
      v51[v40] = *(void *)(Value + 8 * v40);
      v51[v41] = *(void *)(Value + 8 * v41);
    }
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v64))
    {
      uint64_t v56 = v78;
      goto LABEL_56;
    }
    uint64_t v52 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v64);
    if (v53 == v48)
    {
      uint64_t v54 = v52;
      uint64_t v55 = *(void *)(v52 + 8 * v39);
      uint64_t v56 = v78;
      if (v55 == 0x8000000000000000)
      {
        uint64_t v57 = *(void *)(v54 + 8 * v40);
        if (v57 == 0x8000000000000000) {
          goto LABEL_53;
        }
      }
      else
      {
        v78[v39] = v55;
        uint64_t v57 = *(void *)(v54 + 8 * v40);
        if (v57 == 0x8000000000000000)
        {
LABEL_53:
          uint64_t v58 = *(void *)(v54 + 8 * v41);
          if (v58 != 0x8000000000000000) {
            goto LABEL_66;
          }
          goto LABEL_56;
        }
      }
      v56[v40] = v57;
      uint64_t v58 = *(void *)(v54 + 8 * v41);
      if (v58 != 0x8000000000000000) {
LABEL_66:
      }
        v56[v41] = v58;
LABEL_56:
      v56[v60] = v61 * v62;
      uint64_t v44 = mlir::RankedTensorType::get((uint64_t)v56, v79, v47, 0);
      char v43 = 1;
      goto LABEL_62;
    }
    char v59 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "gradient rank doesn't match data layout");
LABEL_61:
    char v43 = v59;
    uint64_t v44 = 0;
LABEL_62:
    if (v78 != (void *)v80) {
      free(v78);
    }
    goto LABEL_38;
  }
  char v43 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "invalid tensorDataLayout");
  uint64_t v44 = 0;
LABEL_38:
  if (v43)
  {
    uint64_t v45 = *(unsigned int *)(a11 + 8);
    if (v45 < *(_DWORD *)(a11 + 12)) {
      goto LABEL_40;
    }
LABEL_58:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v45 + 1, 8);
    LODWORD(v45) = *(_DWORD *)(a11 + 8);
LABEL_40:
    *(void *)(*(void *)a11 + 8 * v45) = v44;
    ++*(_DWORD *)(a11 + 8);
    uint64_t v30 = 1;
    __int16 v46 = v65[0];
    if (v65[0] == v66) {
      return v30;
    }
    goto LABEL_43;
  }
  uint64_t v30 = 0;
  __int16 v46 = v65[0];
  if (v65[0] != v66) {
LABEL_43:
  }
    free(v46);
  return v30;
}

uint64_t mlir::mps::LocalConvolutionWeightGradientOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    unint64_t v3 = (const char *)a1[4];
    if (v3)
    {
      uint64_t v4 = (const char *)a1[5];
      if (v4)
      {
        uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
        uint64_t v55 = v4;
        uint64_t v56 = v5;
        Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
        uint64_t v7 = Type;
        if (Type) {
          Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
        }
        char v59 = v7;
        uint64_t v60 = Type;
        uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
        uint64_t v58 = 2;
        if (v9 == 1
          && *ArgAttrsAttr == v58
          && (unint64_t v51 = v4,
              uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51),
              uint64_t v53 = v10,
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
          uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
          uint64_t v55 = v3;
          uint64_t v56 = v11;
          uint64_t v12 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
          unint64_t v13 = v12;
          if (v12) {
            uint64_t v12 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
          }
          char v59 = v13;
          uint64_t v60 = v12;
          BOOL v14 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v59);
          uint64_t v58 = 2;
          if (v15 == 1 && *v14 == v58)
          {
            unint64_t v51 = v3;
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v51);
            uint64_t v53 = v16;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
              return 1;
            }
          }
          uint64_t v55 = "'mps.local_convolution_weight_gradient' op attribute 'dilation_rates' failed to satisfy constraint: ui64"
                " elements attribute of shape {2}";
          __int16 v57 = 259;
          mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
          uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
          if (v59) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
          }
          if (v67)
          {
            uint64_t v44 = (void **)__p;
            if (__p)
            {
              uint64_t v45 = v66;
              __int16 v46 = __p;
              if (v66 != __p)
              {
                do
                  uint64_t v45 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v45 - 1);
                while (v45 != v44);
                __int16 v46 = __p;
              }
              uint64_t v66 = v44;
              operator delete(v46);
            }
            uint64_t v21 = v63;
            if (!v63) {
              goto LABEL_87;
            }
            uint64_t v47 = v64;
            uint64_t v23 = v63;
            if (v64 == v63)
            {
LABEL_86:
              unint64_t v64 = v21;
              operator delete(v23);
LABEL_87:
              if (v61 != &v62) {
                free(v61);
              }
              return v17;
            }
            do
            {
              __int16 v49 = (void *)*--v47;
              uint64_t v48 = v49;
              *uint64_t v47 = 0;
              if (v49) {
                operator delete[](v48);
              }
            }
            while (v47 != v21);
LABEL_85:
            uint64_t v23 = v63;
            goto LABEL_86;
          }
        }
        else
        {
          uint64_t v55 = "'mps.local_convolution_weight_gradient' op attribute 'kernel_sizes' failed to satisfy constraint: ui64 e"
                "lements attribute of shape {2}";
          __int16 v57 = 259;
          mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
          uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
          if (v59) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
          }
          if (v67)
          {
            uint64_t v32 = (void **)__p;
            if (__p)
            {
              uint64_t v33 = v66;
              uint64_t v34 = __p;
              if (v66 != __p)
              {
                do
                  uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
                while (v33 != v32);
                uint64_t v34 = __p;
              }
              uint64_t v66 = v32;
              operator delete(v34);
            }
            uint64_t v21 = v63;
            if (!v63) {
              goto LABEL_87;
            }
            uint64_t v35 = v64;
            uint64_t v23 = v63;
            if (v64 == v63) {
              goto LABEL_86;
            }
            do
            {
              uint64_t v37 = (void *)*--v35;
              uint64_t v36 = v37;
              *uint64_t v35 = 0;
              if (v37) {
                operator delete[](v36);
              }
            }
            while (v35 != v21);
            goto LABEL_85;
          }
        }
      }
      else
      {
        uint64_t v55 = "'mps.local_convolution_weight_gradient' op requires attribute 'kernel_sizes'";
        __int16 v57 = 259;
        mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
        uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
        if (v59) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
        }
        if (v67)
        {
          uint64_t v38 = (void **)__p;
          if (__p)
          {
            uint64_t v39 = v66;
            uint64_t v40 = __p;
            if (v66 != __p)
            {
              do
                uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
              while (v39 != v38);
              uint64_t v40 = __p;
            }
            uint64_t v66 = v38;
            operator delete(v40);
          }
          uint64_t v21 = v63;
          if (!v63) {
            goto LABEL_87;
          }
          uint64_t v41 = v64;
          uint64_t v23 = v63;
          if (v64 == v63) {
            goto LABEL_86;
          }
          do
          {
            char v43 = (void *)*--v41;
            uint64_t v42 = v43;
            *uint64_t v41 = 0;
            if (v43) {
              operator delete[](v42);
            }
          }
          while (v41 != v21);
          goto LABEL_85;
        }
      }
    }
    else
    {
      uint64_t v55 = "'mps.local_convolution_weight_gradient' op requires attribute 'dilation_rates'";
      __int16 v57 = 259;
      mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
      if (v59) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
      }
      if (v67)
      {
        uint64_t v26 = (void **)__p;
        if (__p)
        {
          uint64_t v27 = v66;
          unint64_t v28 = __p;
          if (v66 != __p)
          {
            do
              uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            unint64_t v28 = __p;
          }
          uint64_t v66 = v26;
          operator delete(v28);
        }
        uint64_t v21 = v63;
        if (!v63) {
          goto LABEL_87;
        }
        BOOL v29 = v64;
        uint64_t v23 = v63;
        if (v64 == v63) {
          goto LABEL_86;
        }
        do
        {
          uint64_t v31 = (void *)*--v29;
          uint64_t v30 = v31;
          *BOOL v29 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v29 != v21);
        goto LABEL_85;
      }
    }
  }
  else
  {
    uint64_t v55 = "'mps.local_convolution_weight_gradient' op requires attribute 'data_layout'";
    __int16 v57 = 259;
    mlir::emitError(a2, (uint64_t)&v55, (uint64_t)&v59);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v59);
    if (v59) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v59);
    }
    if (v67)
    {
      unint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v66;
        uint64_t v20 = __p;
        if (v66 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          uint64_t v20 = __p;
        }
        uint64_t v66 = v18;
        operator delete(v20);
      }
      uint64_t v21 = v63;
      if (!v63) {
        goto LABEL_87;
      }
      uint64_t v22 = v64;
      uint64_t v23 = v63;
      if (v64 == v63) {
        goto LABEL_86;
      }
      do
      {
        uint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        void *v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
      goto LABEL_85;
    }
  }
  return v17;
}

uint64_t mlir::mps::anonymous namespace'::verifyTileOp(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7)
  {
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    BOOL v129 = v7;
    uint64_t v130 = v8;
    uint64_t v9 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v129 = 0;
    uint64_t v130 = 0;
    uint64_t v9 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
      unint64_t v127 = v9;
      uint64_t v128 = v10;
      if (a4) {
        goto LABEL_4;
      }
LABEL_9:
      unint64_t v125 = 0;
      uint64_t v126 = 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127)) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
  }
  unint64_t v127 = v9;
  uint64_t v128 = 0;
  if (!a4) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v11 = (void *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v11)
  {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    unint64_t v125 = v11;
    uint64_t v126 = v12;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127)) {
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v125 = 0;
    uint64_t v126 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127)) {
      goto LABEL_16;
    }
  }
LABEL_12:
  uint64_t ArgAttrsAttr = (const char **)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127);
  if (v14 != 1)
  {
    __int16 v137 = 259;
    mlir::Operation::emitOpError(a1, (const void ***)&v134, (uint64_t)v138);
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v138);
    if (v138[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v138);
    }
    if (!v147) {
      return v21;
    }
    uint64_t v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v146;
      uint64_t v26 = __p;
      if (v146 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      int64_t v146 = v24;
      operator delete(v26);
    }
    uint64_t v27 = v143;
    if (v143)
    {
      unint64_t v28 = v144;
      BOOL v29 = v143;
      if (v144 == v143) {
        goto LABEL_112;
      }
      do
      {
        uint64_t v31 = (void *)*--v28;
        uint64_t v30 = v31;
        void *v28 = 0;
        if (v31) {
          operator delete[](v30);
        }
      }
      while (v28 != v27);
LABEL_111:
      BOOL v29 = v143;
LABEL_112:
      int64_t v144 = v27;
      operator delete(v29);
    }
LABEL_113:
    uint64_t v22 = v139;
    if (v139 == v142) {
      return v21;
    }
    goto LABEL_27;
  }
  uint64_t v15 = ArgAttrsAttr;
  if (*ArgAttrsAttr != (const char *)0x8000000000000000)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v129))
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v129);
      if (v16 != *v15)
      {
        __int16 v137 = 259;
        mlir::Operation::emitOpError(a1, (const void ***)&v134, (uint64_t)v138);
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v129);
        if (v138[0])
        {
          LODWORD(v121) = 2;
          BOOL v122 = v76;
          unint64_t v77 = &v121;
          unint64_t v78 = (char *)v139;
          if (v140 >= v141)
          {
            unint64_t v105 = v140 + 1;
            if (v139 <= &v121 && (char *)v139 + 24 * v140 > (char *)&v121)
            {
              int64_t v117 = (char *)&v121 - (unsigned char *)v139;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v105, 24);
              unint64_t v78 = (char *)v139;
              unint64_t v77 = (const void ***)((char *)v139 + v117);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v105, 24);
              unint64_t v77 = &v121;
              unint64_t v78 = (char *)v139;
            }
          }
          unint64_t v79 = &v78[24 * v140];
          long long v80 = *(_OWORD *)v77;
          *((void *)v79 + 2) = v77[2];
          *(_OWORD *)unint64_t v79 = v80;
          uint64_t v81 = ++v140;
          if (v138[0])
          {
            LODWORD(v121) = 3;
            uint64_t v123 = 35;
            int64_t v82 = &v121;
            unint64_t v83 = (char *)v139;
            if (v81 >= v141)
            {
              unint64_t v108 = v81 + 1;
              BOOL v109 = (char *)v139 + 24 * v81 > (char *)&v121;
              if (v139 <= &v121 && v109)
              {
                int64_t v119 = (char *)&v121 - (unsigned char *)v139;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v108, 24);
                unint64_t v83 = (char *)v139;
                int64_t v82 = (const void ***)((char *)v139 + v119);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v108, 24);
                int64_t v82 = &v121;
                unint64_t v83 = (char *)v139;
              }
            }
            uint64_t v84 = &v83[24 * v140];
            long long v85 = *(_OWORD *)v82;
            *((void *)v84 + 2) = v82[2];
            *(_OWORD *)uint64_t v84 = v85;
            uint64_t v86 = ++v140;
            if (v138[0])
            {
              long long v87 = *v15;
              LODWORD(v121) = 2;
              BOOL v122 = v87;
              uint64_t v88 = &v121;
              uint64_t v89 = (char *)v139;
              if (v86 >= v141)
              {
                unint64_t v110 = v86 + 1;
                BOOL v111 = (char *)v139 + 24 * v86 > (char *)&v121;
                if (v139 <= &v121 && v111)
                {
                  int64_t v120 = (char *)&v121 - (unsigned char *)v139;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v110, 24);
                  uint64_t v89 = (char *)v139;
                  uint64_t v88 = (const void ***)((char *)v139 + v120);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v110, 24);
                  uint64_t v88 = &v121;
                  uint64_t v89 = (char *)v139;
                }
              }
              uint64_t v90 = &v89[24 * v140];
              long long v91 = *(_OWORD *)v88;
              *((void *)v90 + 2) = v88[2];
              *(_OWORD *)uint64_t v90 = v91;
              ++v140;
            }
          }
        }
        uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v138);
        if (v138[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v138);
        }
        if (!v147) {
          return v21;
        }
        uint64_t v92 = (void **)__p;
        if (__p)
        {
          __int16 v93 = v146;
          uint64_t v94 = __p;
          if (v146 != __p)
          {
            do
              __int16 v93 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v93 - 1);
            while (v93 != v92);
            uint64_t v94 = __p;
          }
          int64_t v146 = v92;
          operator delete(v94);
        }
        uint64_t v27 = v143;
        if (v143)
        {
          long long v95 = v144;
          BOOL v29 = v143;
          if (v144 == v143) {
            goto LABEL_112;
          }
          do
          {
            unsigned int v97 = (void *)*--v95;
            uint64_t v96 = v97;
            *long long v95 = 0;
            if (v97) {
              operator delete[](v96);
            }
          }
          while (v95 != v27);
          goto LABEL_111;
        }
        goto LABEL_113;
      }
    }
  }
LABEL_16:
  unint64_t v134 = v136;
  uint64_t v135 = 0x400000000;
  if (mlir::matchConstantWithIntVector<long long>(a3, (uint64_t)&v134) && v135)
  {
    uint64_t v17 = 0;
    while ((*((void *)v134 + (void)v17) & 0x8000000000000000) == 0)
    {
      if ((const char *)v135 == ++v17) {
        goto LABEL_21;
      }
    }
    __int16 v124 = 259;
    mlir::Operation::emitOpError(a1, &v121, (uint64_t)v138);
    if (v138[0])
    {
      uint64_t v32 = (const char *)*((void *)v134 + (void)v17);
      int v131 = 2;
      unint64_t v132 = v32;
      uint64_t v33 = &v131;
      uint64_t v34 = (char *)v139;
      if (v140 >= v141)
      {
        unint64_t v98 = v140 + 1;
        if (v139 <= &v131 && (char *)v139 + 24 * v140 > (char *)&v131)
        {
          int64_t v112 = (char *)&v131 - (unsigned char *)v139;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v98, 24);
          uint64_t v34 = (char *)v139;
          uint64_t v33 = (int *)((char *)v139 + v112);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v98, 24);
          uint64_t v33 = &v131;
          uint64_t v34 = (char *)v139;
        }
      }
      uint64_t v35 = &v34[24 * v140];
      long long v36 = *(_OWORD *)v33;
      *((void *)v35 + 2) = *((void *)v33 + 2);
      *(_OWORD *)uint64_t v35 = v36;
      uint64_t v37 = ++v140;
      if (v138[0])
      {
        int v131 = 3;
        unint64_t v132 = " at index ";
        uint64_t v133 = 10;
        uint64_t v38 = &v131;
        uint64_t v39 = (char *)v139;
        if (v37 >= v141)
        {
          unint64_t v99 = v37 + 1;
          BOOL v100 = (char *)v139 + 24 * v37 > (char *)&v131;
          if (v139 <= &v131 && v100)
          {
            int64_t v113 = (char *)&v131 - (unsigned char *)v139;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v99, 24);
            uint64_t v39 = (char *)v139;
            uint64_t v38 = (int *)((char *)v139 + v113);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v99, 24);
            uint64_t v38 = &v131;
            uint64_t v39 = (char *)v139;
          }
        }
        uint64_t v40 = &v39[24 * v140];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = *((void *)v38 + 2);
        *(_OWORD *)uint64_t v40 = v41;
        uint64_t v42 = ++v140;
        if (v138[0])
        {
          int v131 = 5;
          unint64_t v132 = v17;
          char v43 = &v131;
          uint64_t v44 = (char *)v139;
          if (v42 >= v141)
          {
            unint64_t v101 = v42 + 1;
            BOOL v102 = (char *)v139 + 24 * v42 > (char *)&v131;
            if (v139 <= &v131 && v102)
            {
              int64_t v114 = (char *)&v131 - (unsigned char *)v139;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v101, 24);
              uint64_t v44 = (char *)v139;
              char v43 = (int *)((char *)v139 + v114);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v101, 24);
              char v43 = &v131;
              uint64_t v44 = (char *)v139;
            }
          }
          uint64_t v45 = &v44[24 * v140];
          long long v46 = *(_OWORD *)v43;
          *((void *)v45 + 2) = *((void *)v43 + 2);
          *(_OWORD *)uint64_t v45 = v46;
          ++v140;
        }
      }
    }
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v138);
    if (v138[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v138);
    }
    if (v147)
    {
      uint64_t v47 = (void **)__p;
      if (__p)
      {
        uint64_t v48 = v146;
        __int16 v49 = __p;
        if (v146 != __p)
        {
          do
            uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
          while (v48 != v47);
          __int16 v49 = __p;
        }
        int64_t v146 = v47;
        operator delete(v49);
      }
      uint64_t v50 = v143;
      if (!v143) {
        goto LABEL_88;
      }
      unint64_t v51 = v144;
      uint64_t v52 = v143;
      if (v144 == v143) {
        goto LABEL_87;
      }
      do
      {
        uint64_t v54 = (void *)*--v51;
        uint64_t v53 = v54;
        *unint64_t v51 = 0;
        if (v54) {
          operator delete[](v53);
        }
      }
      while (v51 != v50);
      goto LABEL_86;
    }
  }
  else
  {
LABEL_21:
    if (!v125
      || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v125)
      || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v129)
      || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125),
          uint64_t v19 = v18,
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v129),
          v19 == v20))
    {
      uint64_t v21 = 1;
      goto LABEL_26;
    }
    __int16 v124 = 259;
    mlir::Operation::emitOpError(a1, &v121, (uint64_t)v138);
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v129);
    if (v138[0])
    {
      int v131 = 2;
      unint64_t v132 = v55;
      uint64_t v56 = &v131;
      __int16 v57 = (char *)v139;
      if (v140 >= v141)
      {
        unint64_t v103 = v140 + 1;
        if (v139 <= &v131 && (char *)v139 + 24 * v140 > (char *)&v131)
        {
          int64_t v115 = (char *)&v131 - (unsigned char *)v139;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v103, 24);
          __int16 v57 = (char *)v139;
          uint64_t v56 = (int *)((char *)v139 + v115);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v103, 24);
          uint64_t v56 = &v131;
          __int16 v57 = (char *)v139;
        }
      }
      uint64_t v58 = &v57[24 * v140];
      long long v59 = *(_OWORD *)v56;
      *((void *)v58 + 2) = *((void *)v56 + 2);
      *(_OWORD *)uint64_t v58 = v59;
      uint64_t v60 = ++v140;
      if (v138[0])
      {
        int v131 = 3;
        uint64_t v133 = 26;
        uint64_t v61 = &v131;
        uint64_t v62 = (char *)v139;
        if (v60 >= v141)
        {
          unint64_t v106 = v60 + 1;
          BOOL v107 = (char *)v139 + 24 * v60 > (char *)&v131;
          if (v139 <= &v131 && v107)
          {
            int64_t v118 = (char *)&v131 - (unsigned char *)v139;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v106, 24);
            uint64_t v62 = (char *)v139;
            uint64_t v61 = (int *)((char *)v139 + v118);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v106, 24);
            uint64_t v61 = &v131;
            uint64_t v62 = (char *)v139;
          }
        }
        unint64_t v63 = &v62[24 * v140];
        long long v64 = *(_OWORD *)v61;
        *((void *)v63 + 2) = *((void *)v61 + 2);
        *(_OWORD *)unint64_t v63 = v64;
        ++v140;
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125);
    if (v138[0])
    {
      int v131 = 2;
      unint64_t v132 = v65;
      uint64_t v66 = &v131;
      char v67 = (char *)v139;
      if (v140 >= v141)
      {
        unint64_t v104 = v140 + 1;
        if (v139 <= &v131 && (char *)v139 + 24 * v140 > (char *)&v131)
        {
          int64_t v116 = (char *)&v131 - (unsigned char *)v139;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v104, 24);
          char v67 = (char *)v139;
          uint64_t v66 = (int *)((char *)v139 + v116);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v142, v104, 24);
          uint64_t v66 = &v131;
          char v67 = (char *)v139;
        }
      }
      uint64_t v68 = &v67[24 * v140];
      long long v69 = *(_OWORD *)v66;
      *((void *)v68 + 2) = *((void *)v66 + 2);
      *(_OWORD *)uint64_t v68 = v69;
      ++v140;
    }
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v138);
    if (v138[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v138);
    }
    if (v147)
    {
      long long v70 = (void **)__p;
      if (__p)
      {
        char v71 = v146;
        uint64_t v72 = __p;
        if (v146 != __p)
        {
          do
            char v71 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v71 - 1);
          while (v71 != v70);
          uint64_t v72 = __p;
        }
        int64_t v146 = v70;
        operator delete(v72);
      }
      uint64_t v50 = v143;
      if (!v143) {
        goto LABEL_88;
      }
      uint64_t v73 = v144;
      uint64_t v52 = v143;
      if (v144 == v143)
      {
LABEL_87:
        int64_t v144 = v50;
        operator delete(v52);
LABEL_88:
        if (v139 != v142) {
          free(v139);
        }
        goto LABEL_26;
      }
      do
      {
        unint64_t v75 = (void *)*--v73;
        uint64_t v74 = v75;
        *uint64_t v73 = 0;
        if (v75) {
          operator delete[](v74);
        }
      }
      while (v73 != v50);
LABEL_86:
      uint64_t v52 = v143;
      goto LABEL_87;
    }
  }
LABEL_26:
  uint64_t v22 = v134;
  if (v134 != v136) {
LABEL_27:
  }
    free(v22);
  return v21;
}

uint64_t mlir::mps::TileOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v42[4] = *MEMORY[0x1E4F143B8];
  v36[0] = a4;
  v36[1] = a5;
  uint64_t v11 = mlir::ValueRange::dereference_iterator(v36, 0);
  uint64_t v12 = mlir::ValueRange::dereference_iterator(v36, 1);
  unint64_t v13 = (void *)(*(void *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8))
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
LABEL_19:
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v13);
    uint64_t v29 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    goto LABEL_25;
  }
  uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
  uint64_t v34 = v13;
  uint64_t v35 = v14;
  if (!v13 || *(_UNKNOWN **)(*v13 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    goto LABEL_19;
  }
  uint64_t v40 = v42;
  uint64_t v41 = 0x400000000;
  if (!mlir::matchConstantWithIntVector<long long>(v12, (uint64_t)&v40) && v41) {
    LODWORD(v41) = 0;
  }
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v34);
  uint64_t v37 = v39;
  uint64_t v38 = 0x400000000;
  if (v16)
  {
    uint64_t v17 = ArgAttrsAttr;
    unint64_t v18 = v16;
    if (v16 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v16, 8);
      uint64_t v19 = v38;
      uint64_t v21 = v37;
      int v20 = v38;
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 0;
      uint64_t v21 = v39;
    }
    memset_pattern16(&v21[8 * v19], &unk_1811000C0, 8 * v18);
    unsigned int v22 = v20 + v18;
    LODWORD(v38) = v20 + v18;
    if (v18 == v41)
    {
      uint64_t v23 = 0;
      uint64_t v24 = v40;
      do
      {
        uint64_t v26 = *(void *)(v17 + 8 * v23);
        uint64_t v25 = 0x8000000000000000;
        if (v26 != 0x8000000000000000)
        {
          uint64_t v27 = v24[v23];
          if (v27 < 0) {
            uint64_t v25 = 0x8000000000000000;
          }
          else {
            uint64_t v25 = (v27 * v26) & ~((v27 * v26) >> 63);
          }
        }
        *(void *)&v21[8 * v23++] = v25;
      }
      while (v18 != v23);
    }
  }
  else
  {
    unsigned int v22 = 0;
    uint64_t v21 = v39;
  }
  uint64_t v30 = v22;
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v34);
  uint64_t v29 = mlir::RankedTensorType::get((uint64_t)v21, v30, OperandRange, 0);
  if (v37 != v39) {
    free(v37);
  }
  if (v40 != v42) {
    free(v40);
  }
LABEL_25:
  uint64_t v32 = *(unsigned int *)(a11 + 8);
  if (v32 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v32) = v29;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::anonymous namespace'::inferReturnTypesForGradient(uint64_t a1, void *a2, uint64_t a3)
{
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a1 + 8))
  {
    uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a1 + 8);
    uint64_t v13 = a1;
    uint64_t v14 = v6;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a2);
    if (a1 && *(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v13);
      uint64_t v10 = mlir::RankedTensorType::get(ArgAttrsAttr, v9, ElementTypeOrSelf, 0);
      uint64_t v11 = *(unsigned int *)(a3 + 8);
      if (v11 >= *(_DWORD *)(a3 + 12)) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a2);
  }
  uint64_t v10 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
  uint64_t v11 = *(unsigned int *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12))
  {
LABEL_10:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
LABEL_9:
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

uint64_t mlir::mps::CastOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  v36[0] = a4;
  v36[1] = a5;
  if (a7) {
    uint64_t v14 = *a7;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v28 = a6;
  v29[0] = 0;
  char v30 = 0;
  uint64_t v31 = v14;
  uint64_t v32 = a9;
  uint64_t v33 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v28);
    if (v30) {
      char v30 = 0;
    }
    mlir::OperationName::OperationName(v29, "mps.cast", 8, Context);
    char v30 = 1;
  }
  unint64_t v34 = a4;
  uint64_t v35 = a5;
  if (a5)
  {
    uint64_t v16 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::CastOpAdaptor::verify((uint64_t)&v28, v16))
    {
      long long v37 = v34;
      uint64_t v17 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8))
      {
        uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
        uint64_t v26 = v17;
        uint64_t v27 = v18;
        if (v17)
        {
          *(void *)&long long v37 = v31;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v37);
          LOBYTE(v37) = 0;
          char v38 = 0;
          unint64_t v20 = mlir::ShapedType::cloneWith((uint64_t *)&v26, &v37, Value);
          unsigned int v21 = *(_DWORD *)(a11 + 8);
          if (v21 < *(_DWORD *)(a11 + 12))
          {
LABEL_13:
            *(void *)(*(void *)a11 + 8 * v21) = v20;
            goto LABEL_17;
          }
LABEL_20:
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
          unsigned int v21 = *(_DWORD *)(a11 + 8);
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
      }
      unint64_t v20 = *(void *)(mlir::ValueRange::dereference_iterator(v36, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v21 = *(_DWORD *)(a11 + 8);
      if (v21 < *(_DWORD *)(a11 + 12)) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
  }
  uint64_t v22 = mlir::Float32Type::get(this, a2);
  uint64_t v23 = mlir::UnrankedTensorType::get(v22);
  uint64_t v24 = *(unsigned int *)(a11 + 8);
  if (v24 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v24 + 1, 8);
    LODWORD(v24) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v24) = v23;
LABEL_17:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::CastOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    v14[0] = *(void *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    uint64_t v12 = "'mps.cast' op requires attribute 'resultElementType'";
    __int16 v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    }
    if (v21)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v20;
        uint64_t v6 = __p;
        if (v20 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        unint64_t v20 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v17;
      if (v17)
      {
        uint64_t v8 = v18;
        uint64_t v9 = v17;
        if (v18 != v17)
        {
          do
          {
            uint64_t v11 = (void *)*--v8;
            uint64_t v10 = v11;
            *uint64_t v8 = 0;
            if (v11) {
              operator delete[](v10);
            }
          }
          while (v8 != v7);
          uint64_t v9 = v17;
        }
        uint64_t v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16) {
        free(v15);
      }
    }
  }
  return v2;
}

uint64_t mlir::mps::detail::CastOpGenericAdaptorBase::getResultElementType(mlir::mps::detail::CastOpGenericAdaptorBase *this)
{
  uint64_t v2 = *((void *)this + 3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v2);
}

uint64_t mlir::mps::ReinterpretCastOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v51[2] = *MEMORY[0x1E4F143B8];
  v51[0] = a4;
  v51[1] = a5;
  if (a7) {
    uint64_t v14 = *a7;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v43 = a6;
  v44[0] = 0;
  char v45 = 0;
  long long v46 = v14;
  uint64_t v47 = a9;
  uint64_t v48 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v43);
    if (v45) {
      char v45 = 0;
    }
    mlir::OperationName::OperationName(v44, "mps.reinterpret_cast", 20, Context);
    char v45 = 1;
  }
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  if (!a5
    || (uint64_t v16 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::ReinterpretCastOpAdaptor::verify((uint64_t)&v43, v16)))
  {
    uint64_t v19 = mlir::Float32Type::get(this, a2);
    uint64_t v20 = mlir::UnrankedTensorType::get(v19);
    uint64_t v21 = *(unsigned int *)(a11 + 8);
    if (v21 >= *(_DWORD *)(a11 + 12))
    {
LABEL_22:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(a11 + 8);
    }
LABEL_13:
    *(void *)(*(void *)a11 + 8 * v21) = v20;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  uint64_t v17 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v51, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
  if (v18) {
    uint64_t v18 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  v39[0] = v17;
  v39[1] = v18;
  uint64_t v40 = v46;
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v40);
  if (!v17 || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39) & 1) == 0)
  {
    uint64_t v20 = mlir::UnrankedTensorType::get((uint64_t)Value);
    uint64_t v21 = *(unsigned int *)(a11 + 8);
    if (v21 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_22;
    }
    goto LABEL_13;
  }
  uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  uint64_t v25 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  uint64_t v27 = (unsigned char *)(v25 + 8 * v26);
  uint64_t v40 = v42;
  uint64_t v41 = 0x400000000;
  uint64_t v28 = v27 - ArgAttrsAttr;
  if ((unint64_t)(v27 - ArgAttrsAttr) < 0x21)
  {
    unsigned int v29 = 0;
    if (v27 == ArgAttrsAttr) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v42, v28 >> 3, 8);
  unsigned int v29 = v41;
  if (v27 != ArgAttrsAttr)
  {
LABEL_24:
    memcpy((char *)v40 + 8 * v29, ArgAttrsAttr, v27 - ArgAttrsAttr);
    unsigned int v29 = v41;
  }
LABEL_25:
  LODWORD(v41) = v29 + ((unint64_t)v28 >> 3);
  unint64_t ElementBitWidth = mlir::mps::getElementBitWidth(v39[0]);
  unint64_t v31 = mlir::mps::getElementBitWidth(Value);
  uint64_t v32 = v40;
  uint64_t v33 = v41;
  unint64_t v34 = (char *)v40 + 8 * v41;
  unint64_t v35 = *((void *)v34 - 1);
  if (v35 != 0x8000000000000000)
  {
    if (ElementBitWidth > v31)
    {
      unint64_t v36 = ElementBitWidth / v31 * v35;
LABEL_30:
      *((void *)v34 - 1) = v36;
      goto LABEL_31;
    }
    if (ElementBitWidth < v31)
    {
      unint64_t v36 = v35 / (v31 / ElementBitWidth);
      goto LABEL_30;
    }
  }
LABEL_31:
  uint64_t v37 = mlir::RankedTensorType::get((uint64_t)v32, v33, (uint64_t)Value, 0);
  uint64_t v38 = *(unsigned int *)(a11 + 8);
  if (v38 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v38) = v37;
  ++*(_DWORD *)(a11 + 8);
  if (v40 != v42) {
    free(v40);
  }
  return 1;
}

uint64_t mlir::mps::ReinterpretCastOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 24))
  {
    v14[0] = *(void *)(a1 + 24);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v14);
    return 1;
  }
  else
  {
    uint64_t v12 = "'mps.reinterpret_cast' op requires attribute 'result_element_type'";
    __int16 v13 = 259;
    mlir::emitError(a2, (uint64_t)&v12, (uint64_t)v14);
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
    if (v14[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
    }
    if (v21)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v20;
        uint64_t v6 = __p;
        if (v20 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        uint64_t v20 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v17;
      if (v17)
      {
        uint64_t v8 = v18;
        uint64_t v9 = v17;
        if (v18 != v17)
        {
          do
          {
            uint64_t v11 = (void *)*--v8;
            uint64_t v10 = v11;
            *uint64_t v8 = 0;
            if (v11) {
              operator delete[](v10);
            }
          }
          while (v8 != v7);
          uint64_t v9 = v17;
        }
        uint64_t v18 = v7;
        operator delete(v9);
      }
      if (v15 != &v16) {
        free(v15);
      }
    }
  }
  return v2;
}

uint64_t mlir::mps::ReinterpretCastOp::verify(uint64_t **this)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2) {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  v30[0] = v2;
  v30[1] = v3;
  uint64_t OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v30);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30)) {
    return 1;
  }
  unint64_t ElementBitWidth = mlir::mps::getElementBitWidth(OperandRange);
  v33[0] = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v33);
  unint64_t v7 = mlir::mps::getElementBitWidth(Value);
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
  if (ElementBitWidth >= v7) {
    return 1;
  }
  unint64_t v10 = *(void *)(ArgAttrsAttr + 8 * v9 - 8);
  if (v10 == 0x8000000000000000) {
    return 1;
  }
  unint64_t v11 = v7 / ElementBitWidth;
  if (!(v10 % v11)) {
    return 1;
  }
  uint64_t v28 = (const void **)"innermost dimension needs to be divisible by ";
  __int16 v29 = 259;
  mlir::OpState::emitOpError(this, &v28, (uint64_t)v33);
  if (v33[0])
  {
    int v31 = 5;
    unint64_t v32 = v11;
    uint64_t v12 = &v31;
    __int16 v13 = (char *)v34;
    if (v35 >= v36)
    {
      unint64_t v26 = v35 + 1;
      if (v34 <= &v31 && (char *)v34 + 24 * v35 > (char *)&v31)
      {
        int64_t v27 = (char *)&v31 - (unsigned char *)v34;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v26, 24);
        __int16 v13 = (char *)v34;
        uint64_t v12 = (int *)((char *)v34 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v26, 24);
        uint64_t v12 = &v31;
        __int16 v13 = (char *)v34;
      }
    }
    uint64_t v14 = &v13[24 * v35];
    long long v15 = *(_OWORD *)v12;
    *((void *)v14 + 2) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v14 = v15;
    ++v35;
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
  if (v33[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
  }
  if (v42)
  {
    uint64_t v17 = (void **)__p;
    if (__p)
    {
      uint64_t v18 = v41;
      uint64_t v19 = __p;
      if (v41 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        uint64_t v19 = __p;
      }
      uint64_t v41 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v38;
    if (v38)
    {
      char v21 = v39;
      uint64_t v22 = v38;
      if (v39 != v38)
      {
        do
        {
          uint64_t v25 = (void *)*--v21;
          uint64_t v24 = v25;
          *char v21 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v38;
      }
      uint64_t v39 = v20;
      operator delete(v22);
    }
    if (v34 != v37) {
      free(v34);
    }
  }
  return v16;
}

uint64_t mlir::mps::ShapeOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  v25[0] = a4;
  v25[1] = a5;
  if (a5 == 1)
  {
    __int16 v13 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8))
    {
      uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
      uint64_t v22 = v13;
      uint64_t v23 = v14;
      if (v13)
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v22)) {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v22);
        }
        else {
          unint64_t v15 = 0x8000000000000000;
        }
        unint64_t v21 = v15;
        unint64_t v24 = *(void *)(mlir::ValueRange::dereference_iterator(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
        uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v24);
        uint64_t v18 = mlir::IntegerType::get(Context, 0x20u, 1u);
        uint64_t v19 = mlir::RankedTensorType::get((uint64_t)&v21, 1, v18, 0);
        uint64_t v20 = *(unsigned int *)(a11 + 8);
        if (v20 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v20 + 1, 8);
          LODWORD(v20) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v20) = v19;
        ++*(_DWORD *)(a11 + 8);
        return 1;
      }
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
    }
    unint64_t v24 = *(void *)(mlir::ValueRange::dereference_iterator(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    return mlir::emitOptionalError<char const(&)[17],mlir::Type>(a2, a3, "unexpected type ", (uint64_t *)&v24);
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::emitOptionalError<char const(&)[17],mlir::Type>(uint64_t a1, char a2, char *a3, uint64_t *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v16);
  if (v16) {
    mlir::Diagnostic::append<char const(&)[5],mlir::Type>((uint64_t)&v17, a3, a4);
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
  if (v16) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
  }
  if (v24)
  {
    unint64_t v7 = (void **)__p;
    if (__p)
    {
      uint64_t v8 = v23;
      uint64_t v9 = __p;
      if (v23 != __p)
      {
        do
          uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      uint64_t v23 = v7;
      operator delete(v9);
    }
    unint64_t v10 = v20;
    if (v20)
    {
      unint64_t v11 = v21;
      uint64_t v12 = v20;
      if (v21 != v20)
      {
        do
        {
          uint64_t v14 = (void *)*--v11;
          __int16 v13 = v14;
          *unint64_t v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        uint64_t v12 = v20;
      }
      unint64_t v21 = v10;
      operator delete(v12);
    }
    if (v18 != &v19) {
      free(v18);
    }
  }
  return v6;
}

uint64_t mlir::mps::RankOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v18[2] = *MEMORY[0x1E4F143B8];
  v18[0] = a4;
  v18[1] = a5;
  if (a5 == 1)
  {
    uint64_t v16 = 1;
    unint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(v18, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v17);
    uint64_t v12 = mlir::IntegerType::get(Context, 0x20u, 1u);
    uint64_t v13 = mlir::RankedTensorType::get((uint64_t)&v16, 1, v12, 0);
    uint64_t v14 = *(unsigned int *)(a11 + 8);
    if (v14 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v14 + 1, 8);
      LODWORD(v14) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v14) = v13;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::mps::DimensionSizeOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v32[2] = *MEMORY[0x1E4F143B8];
  v32[0] = a4;
  v32[1] = a5;
  if (a5 == 2)
  {
    unint64_t v11 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v32, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    if (v12) {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    }
    else {
      unint64_t v11 = 0;
    }
    v27[0] = v11;
    v27[1] = v12;
    uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v27);
    uint64_t v16 = v14;
    __int16 v29 = v31;
    uint64_t v30 = 0x600000000;
    size_t v17 = 8 * v14;
    if ((unint64_t)(8 * v14) < 0x31)
    {
      unsigned int v18 = 0;
      if (!v14)
      {
LABEL_13:
        unsigned int v19 = v18 + (v17 >> 3);
        LODWORD(v30) = v19;
        if (!v19)
        {
          if (HIDWORD(v30))
          {
            uint64_t v20 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, 1uLL, 8);
            uint64_t v20 = v30;
          }
          *((void *)v29 + v20) = 1;
          unsigned int v19 = v30 + 1;
          LODWORD(v30) = v30 + 1;
        }
        unint64_t v21 = v29;
        uint64_t v22 = v19;
        unint64_t v28 = *(void *)(mlir::ValueRange::dereference_iterator(v32, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
        uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v28);
        uint64_t v24 = mlir::IntegerType::get(Context, 0x20u, 1u);
        uint64_t v25 = mlir::RankedTensorType::get((uint64_t)v21, v22, v24, 0);
        uint64_t v26 = *(unsigned int *)(a11 + 8);
        if (v26 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
          LODWORD(v26) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v26) = v25;
        ++*(_DWORD *)(a11 + 8);
        if (v29 != v31) {
          free(v29);
        }
        return 1;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, (8 * v14) >> 3, 8);
      unsigned int v18 = v30;
      if (!v16) {
        goto LABEL_13;
      }
    }
    memcpy((char *)v29 + 8 * v18, ArgAttrsAttr, v17);
    unsigned int v18 = v30;
    goto LABEL_13;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::DynamicShapeCastOp::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    uint64_t v14 = mlir::Float32Type::get(a1, a2);
    uint64_t v15 = mlir::UnrankedTensorType::get(v14);
    uint64_t v16 = *(unsigned int *)(a11 + 8);
    if (v16 >= *(_DWORD *)(a11 + 12))
    {
LABEL_30:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v16 + 1, 8);
      LODWORD(v16) = *(_DWORD *)(a11 + 8);
    }
LABEL_6:
    *(void *)(*(void *)a11 + 8 * v16) = v15;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  if (a7)
  {
    uint64_t v13 = *a7;
    uint64_t v61 = a6;
    v62[0] = 0;
    char v63 = 0;
    uint64_t v64 = v13;
    uint64_t v65 = a9;
    uint64_t v66 = a10;
    if (!a6) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v61 = a6;
    v62[0] = 0;
    char v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = a9;
    uint64_t v66 = a10;
    if (!a6) {
      goto LABEL_13;
    }
  }
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v61);
  if (v63) {
    char v63 = 0;
  }
  mlir::OperationName::OperationName(v62, "mps.dynamic_shape_cast", 22, Context);
  char v63 = 1;
LABEL_13:
  char v67 = a4;
  uint64_t v68 = a5;
  uint64_t v58 = a4;
  uint64_t v59 = 0;
  uint64_t v20 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v58, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8))
  {
    unint64_t v51 = 0;
    uint64_t v52 = 0;
LABEL_29:
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(0);
    uint64_t v15 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v16 = *(unsigned int *)(a11 + 8);
    if (v16 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_30;
    }
    goto LABEL_6;
  }
  uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  unint64_t v51 = v20;
  uint64_t v52 = v21;
  if (!v20) {
    goto LABEL_29;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51) || v64)
  {
    uint64_t v38 = mlir::getElementTypeOrSelf(v51);
    uint64_t v15 = mlir::UnrankedTensorType::get(v38);
    uint64_t v16 = *(unsigned int *)(a11 + 8);
    if (v16 < *(_DWORD *)(a11 + 12)) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
  if (!v22)
  {
    uint64_t v39 = v68;
    uint64_t v58 = v67;
    uint64_t v59 = 1;
    uint64_t v40 = (void *)mlir::ValueRange::offset_base(&v58, 1);
    if (v39 != v59)
    {
      uint64_t v58 = v40;
      uint64_t v59 = 0;
      if (mlir::ValueRange::dereference_iterator(&v58, 0))
      {
        uint64_t v41 = mlir::getElementTypeOrSelf(v51);
        return mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v41);
      }
    }
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, (uint64_t)v51);
    return 1;
  }
  uint64_t v58 = v60;
  uint64_t v59 = 0x600000000;
  uint64_t v23 = v68;
  __b = v67;
  uint64_t v56 = 1;
  uint64_t v24 = (void *)mlir::ValueRange::offset_base(&__b, 1);
  if (v23 == v56)
  {
    if (mlir::matchConstantWithIntVector<long long>(0, (uint64_t)&v58)) {
      goto LABEL_20;
    }
LABEL_37:
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    unint64_t v44 = v43;
    __b = v57;
    HIDWORD(v56) = 6;
    if (v43 < 7)
    {
      if (v43) {
        memset_pattern16(v57, &unk_1811000C0, 8 * v43);
      }
      char v45 = v57;
    }
    else
    {
      LODWORD(v56) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v57, v43, 8);
      char v45 = __b;
      memset_pattern16(__b, &unk_1811000C0, 8 * v44);
    }
    LODWORD(v56) = v44;
    *(void *)&long long v53 = v45;
    *((void *)&v53 + 1) = v44;
    char v54 = 1;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
    uint64_t v49 = mlir::ShapedType::cloneWith((uint64_t *)&v51, &v53, OperandRange);
    uint64_t v50 = *(unsigned int *)(a11 + 8);
    if (v50 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
      LODWORD(v50) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v50) = v49;
    ++*(_DWORD *)(a11 + 8);
    if (__b != v57) {
      free(__b);
    }
    uint64_t v17 = 1;
    goto LABEL_50;
  }
  __b = v24;
  uint64_t v56 = 0;
  uint64_t v42 = mlir::ValueRange::dereference_iterator(&__b, 0);
  if (!mlir::matchConstantWithIntVector<long long>(v42, (uint64_t)&v58)) {
    goto LABEL_37;
  }
LABEL_20:
  __b = v57;
  uint64_t v56 = 0x600000000;
  uint64_t v25 = (uint64_t *)v58;
  uint64_t v26 = v59;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
  {
    uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    uint64_t v29 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    llvm::SmallVector<long long,6u>::SmallVector<long long const*,void>(&v53, ArgAttrsAttr, (unsigned char *)(v29 + 8 * v30));
    uint64_t v31 = v53;
    if (v56)
    {
      unint64_t v32 = (uint64_t *)__b;
      uint64_t v33 = 8 * v56;
      do
      {
        uint64_t v34 = *v32++;
        *(void *)(v31 + 8 * v34) = 0x8000000000000000;
        v33 -= 8;
      }
      while (v33);
    }
    uint64_t v35 = mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&v51, v31, DWORD2(v53));
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v35);
    if ((char *)v53 != &v54) {
      free((void *)v53);
    }
    uint64_t v17 = 1;
    unsigned int v36 = __b;
    if (__b == v57) {
      goto LABEL_50;
    }
  }
  else
  {
    long long v53 = (unint64_t)v67;
    uint64_t v46 = mlir::ValueRange::dereference_iterator(&v53, 0);
    uint64_t v47 = mlir::getElementTypeOrSelf(v46);
    uint64_t v17 = mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, v47);
    unsigned int v36 = __b;
    if (__b == v57) {
      goto LABEL_50;
    }
  }
  free(v36);
LABEL_50:
  if (v58 != v60) {
    free(v58);
  }
  return v17;
}

uint64_t mlir::mps::anonymous namespace'::getPositiveAxes(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7)
{
  v73[6] = *MEMORY[0x1E4F143B8];
  char v71 = (const char **)v73;
  uint64_t v72 = 0x600000000;
  if (a2)
  {
    uint64_t v56 = (void *)(a4 + 16);
    uint64_t v13 = 8 * a2;
    do
    {
      uint64_t v17 = *a1;
      if (v19)
      {
        unint64_t v14 = PositiveAxis;
        unint64_t v15 = *(unsigned int *)(a4 + 8);
        if (v15 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v56, v15 + 1, 8);
          unint64_t v15 = *(unsigned int *)(a4 + 8);
        }
        uint64_t v16 = (const char ***)a4;
      }
      else
      {
        unint64_t v15 = v72;
        uint64_t v16 = &v71;
        if (v72 >= (unint64_t)HIDWORD(v72))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v72 + 1, 8);
          unint64_t v15 = v72;
        }
        unint64_t v14 = v17;
      }
      (*v16)[v15] = (const char *)v14;
      ++*((_DWORD *)v16 + 2);
      ++a1;
      v13 -= 8;
    }
    while (v13);
    if (v72)
    {
      if (a6)
      {
        __int16 v57 = "invalid axes: ";
        __int16 v60 = 259;
        mlir::emitError(a5, (uint64_t)&v57, (uint64_t)v61);
        uint64_t v20 = v72;
        if (v72)
        {
          uint64_t v21 = v71;
          if (v61[0])
          {
            uint64_t v22 = *v71;
            LODWORD(v57) = 2;
            uint64_t v58 = v22;
            uint64_t v23 = &v57;
            uint64_t v24 = (char *)v62;
            if (v63 >= v64)
            {
              unint64_t v54 = v63 + 1;
              if (v62 <= &v57 && (char *)v62 + 24 * v63 > (char *)&v57)
              {
                int64_t v55 = (char *)&v57 - (unsigned char *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v54, 24);
                uint64_t v24 = (char *)v62;
                uint64_t v23 = (const char **)((char *)v62 + v55);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v54, 24);
                uint64_t v23 = &v57;
                uint64_t v24 = (char *)v62;
              }
            }
            uint64_t v25 = &v24[24 * v63];
            long long v26 = *(_OWORD *)v23;
            *((void *)v25 + 2) = v23[2];
            *(_OWORD *)uint64_t v25 = v26;
            ++v63;
          }
          if (v20 != 1 && v61[0])
          {
            uint64_t v27 = v21 + 1;
            uint64_t v28 = 8 * v20 - 16;
LABEL_21:
            LODWORD(v57) = 3;
            uint64_t v58 = ", ";
            uint64_t v59 = 2;
            uint64_t v29 = (char *)v62;
            if (v63 >= v64)
            {
              unint64_t v39 = v63 + 1;
              if (v62 <= &v57 && (char *)v62 + 24 * v63 > (char *)&v57)
              {
                int64_t v42 = (char *)&v57 - (unsigned char *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v39, 24);
                uint64_t v29 = (char *)v62;
                uint64_t v30 = (const char **)((char *)v62 + v42);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v39, 24);
                uint64_t v30 = &v57;
                uint64_t v29 = (char *)v62;
              }
            }
            else
            {
              uint64_t v30 = &v57;
            }
            uint64_t v31 = &v29[24 * v63];
            long long v32 = *(_OWORD *)v30;
            *((void *)v31 + 2) = v30[2];
            *(_OWORD *)uint64_t v31 = v32;
            uint64_t v33 = ++v63;
            if (v61[0])
            {
              uint64_t v34 = *v27;
              LODWORD(v57) = 2;
              uint64_t v58 = v34;
              uint64_t v35 = (char *)v62;
              if (v33 >= v64)
              {
                unint64_t v40 = v33 + 1;
                BOOL v41 = (char *)v62 + 24 * v33 > (char *)&v57;
                if (v62 <= &v57 && v41)
                {
                  int64_t v43 = (char *)&v57 - (unsigned char *)v62;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v40, 24);
                  uint64_t v35 = (char *)v62;
                  unsigned int v36 = (const char **)((char *)v62 + v43);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v40, 24);
                  unsigned int v36 = &v57;
                  uint64_t v35 = (char *)v62;
                }
              }
              else
              {
                unsigned int v36 = &v57;
              }
              uint64_t v37 = &v35[24 * v63];
              long long v38 = *(_OWORD *)v36;
              *((void *)v37 + 2) = v36[2];
              *(_OWORD *)uint64_t v37 = v38;
              ++v63;
            }
            while (v28)
            {
              ++v27;
              v28 -= 8;
              if (v61[0]) {
                goto LABEL_21;
              }
            }
          }
        }
        uint64_t v44 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v61);
        if (v61[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
        }
        if (v70)
        {
          char v45 = (void **)__p;
          if (__p)
          {
            uint64_t v46 = v69;
            uint64_t v47 = __p;
            if (v69 != __p)
            {
              do
                uint64_t v46 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v46 - 1);
              while (v46 != v45);
              uint64_t v47 = __p;
            }
            uint64_t v69 = v45;
            operator delete(v47);
          }
          uint64_t v48 = v66;
          if (v66)
          {
            uint64_t v49 = v67;
            uint64_t v50 = v66;
            if (v67 != v66)
            {
              do
              {
                uint64_t v52 = (void *)*--v49;
                unint64_t v51 = v52;
                void *v49 = 0;
                if (v52) {
                  operator delete[](v51);
                }
              }
              while (v49 != v48);
              uint64_t v50 = v66;
            }
            char v67 = v48;
            operator delete(v50);
          }
          if (v62 != v65) {
            free(v62);
          }
        }
      }
      else
      {
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 1;
    }
  }
  else
  {
    uint64_t v44 = 1;
  }
  if (v71 != v73) {
    free(v71);
  }
  return v44;
}

uint64_t mlir::mps::DynamicShapeCastOp::verify(uint64_t **this)
{
  void v35[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v21)) {
      goto LABEL_5;
    }
    return 1;
  }
  uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
  uint64_t v21 = v2;
  uint64_t v22 = v3;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v21)) {
    return 1;
  }
LABEL_5:
  uint64_t v4 = *this;
  if ((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]) {
    return 1;
  }
  uint64_t v33 = v35;
  uint64_t v34 = 0x600000000;
  if (*((_DWORD *)v4 + 17) == 1)
  {
    if (mlir::matchConstantWithIntVector<long long>(0, (uint64_t)&v33)) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v5 = 1;
    unint64_t v10 = v33;
    if (v33 == v35) {
      return v5;
    }
LABEL_18:
    free(v10);
    return v5;
  }
  if (!mlir::matchConstantWithIntVector<long long>(*(void *)(v4[9] + 56), (uint64_t)&v33)) {
    goto LABEL_17;
  }
LABEL_10:
  v31[0] = v32;
  v31[1] = (void *)0x600000000;
  unint64_t v7 = v33;
  uint64_t v8 = v34;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v21);
  {
    uint64_t v5 = 1;
  }
  else
  {
    char v19 = (const void **)"failed: could not extract valid positive axes values for the op";
    __int16 v20 = 259;
    mlir::OpState::emitOpError(this, &v19, (uint64_t)v23);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
    if (v23[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
    }
    if (v30)
    {
      unint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v29;
        uint64_t v13 = __p;
        if (v29 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          uint64_t v13 = __p;
        }
        uint64_t v29 = v11;
        operator delete(v13);
      }
      unint64_t v14 = v26;
      if (v26)
      {
        unint64_t v15 = v27;
        uint64_t v16 = v26;
        if (v27 != v26)
        {
          do
          {
            unsigned int v18 = (void *)*--v15;
            uint64_t v17 = v18;
            *unint64_t v15 = 0;
            if (v18) {
              operator delete[](v17);
            }
          }
          while (v15 != v14);
          uint64_t v16 = v26;
        }
        uint64_t v27 = v14;
        operator delete(v16);
      }
      if (v24 != &v25) {
        free(v24);
      }
    }
  }
  if (v31[0] != v32) {
    free(v31[0]);
  }
  unint64_t v10 = v33;
  if (v33 != v35) {
    goto LABEL_18;
  }
  return v5;
}

uint64_t mlir::mps::BroadcastToOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v41[2] = *MEMORY[0x1E4F143B8];
  v41[0] = a4;
  v41[1] = a5;
  if (a5 == 2)
  {
    unint64_t v11 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v41, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    if (v12) {
      uint64_t v12 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    }
    else {
      unint64_t v11 = 0;
    }
    v34[0] = v11;
    v34[1] = v12;
    uint64_t v14 = mlir::ValueRange::dereference_iterator(v41, 1);
    long long v38 = v40;
    uint64_t v39 = 0x600000000;
    if (v11
      && (uint64_t v15 = v14, mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v34))
      && mlir::matchConstantWithIntVector<long long>(v15, (uint64_t)&v38))
    {
      uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v34);
      uint64_t v35 = v37;
      uint64_t v36 = 0x600000000;
      if (v17 <= v39) {
        unint64_t v18 = v39;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        uint64_t v19 = ArgAttrsAttr;
        unint64_t v20 = v17;
        if (v18 < 7)
        {
          uint64_t v21 = 0;
          uint64_t v22 = v37;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v18, 8);
          uint64_t v21 = v36;
          uint64_t v22 = v35;
        }
        if (v18 != v21) {
          bzero(&v22[8 * v21], 8 * (v18 - v21));
        }
        LODWORD(v36) = v18;
        if (v18)
        {
          uint64_t v27 = 0;
          unint64_t v18 = v18;
          uint64_t v28 = (char *)v38 + 8 * v39 - 8;
          uint64_t v29 = v39 - 1;
          while (1)
          {
            if ((uint64_t)(v20 - 1 + v27) < 0)
            {
              uint64_t v30 = 1;
              if (((v29 + v27) & 0x8000000000000000) == 0)
              {
LABEL_34:
                uint64_t v31 = *(void *)&v28[8 * v27];
                if (v31 == 0x8000000000000000) {
                  uint64_t v32 = v30;
                }
                else {
                  uint64_t v32 = *(void *)&v28[8 * v27];
                }
                if (v31 != 1) {
                  uint64_t v30 = v32;
                }
              }
            }
            else
            {
              uint64_t v30 = *(void *)(v19 + 8 * v20 - 8 + 8 * v27);
              if (((v29 + v27) & 0x8000000000000000) == 0) {
                goto LABEL_34;
              }
            }
            *(void *)&v22[8 * v18 - 8 + 8 * v27--] = v30;
            if (-(uint64_t)v18 == v27) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v18 = 0;
      }
      else
      {
        uint64_t v22 = v37;
      }
LABEL_41:
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v34[0]);
      uint64_t v25 = mlir::RankedTensorType::get((uint64_t)v22, v18, ElementTypeOrSelf, 0);
      if (v35 != v37) {
        free(v35);
      }
    }
    else
    {
      uint64_t v23 = mlir::ValueRange::dereference_iterator(v41, 0);
      uint64_t v24 = mlir::getElementTypeOrSelf((void *)(*(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v25 = mlir::UnrankedTensorType::get(v24);
    }
    uint64_t v26 = *(unsigned int *)(a11 + 8);
    if (v26 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
      LODWORD(v26) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v26) = v25;
    ++*(_DWORD *)(a11 + 8);
    if (v38 != v40) {
      free(v38);
    }
    return 1;
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::mps::BroadcastGradientArgsOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v53[2] = *MEMORY[0x1E4F143B8];
  v53[0] = a4;
  v53[1] = a5;
  if (a5 == 2)
  {
    uint64_t v12 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v53, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
    if (v13) {
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v50 = v12;
    uint64_t v51 = v13;
    uint64_t v15 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v53, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
    {
      uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
      uint64_t v48 = v15;
      uint64_t v49 = v16;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50))
      {
LABEL_33:
        v52[0] = (char *)0x8000000000000000;
        uint64_t v43 = mlir::IntegerType::get(a1, 0x20u, 1u);
        uint64_t v44 = mlir::RankedTensorType::get((uint64_t)v52, 1, v43, 0);
        char v45 = 0;
        uint64_t v46 = *(unsigned int *)(a11 + 8);
        if (v46 < *(_DWORD *)(a11 + 12)) {
          goto LABEL_34;
        }
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v50)) {
        goto LABEL_33;
      }
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v48)) {
      goto LABEL_33;
    }
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v50);
    if (!v18)
    {
LABEL_23:
      uint64_t v30 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v48);
      if (!v31) {
        goto LABEL_37;
      }
      unint64_t v32 = (v31 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v32 >= 3)
      {
        unint64_t v35 = v32 + 1;
        uint64_t v36 = (v32 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v34 = (uint64_t *)(v30 + 8 * v36);
        uint64_t v37 = (int64x2_t *)(v30 + 16);
        int64x2_t v38 = 0uLL;
        int64x2_t v39 = vdupq_n_s64(0x8000000000000000);
        uint64_t v40 = v36;
        int64x2_t v41 = 0uLL;
        do
        {
          int64x2_t v38 = vsubq_s64(v38, vceqq_s64(v37[-1], v39));
          int64x2_t v41 = vsubq_s64(v41, vceqq_s64(*v37, v39));
          v37 += 2;
          v40 -= 4;
        }
        while (v40);
        uint64_t v33 = vaddvq_s64(vaddq_s64(v41, v38));
        if (v35 == v36) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = (uint64_t *)v30;
      }
      do
      {
        uint64_t v42 = *v34++;
        if (v42 == 0x8000000000000000) {
          ++v33;
        }
      }
      while (v34 != (uint64_t *)(v30 + 8 * v31));
LABEL_32:
      if (v33) {
        goto LABEL_33;
      }
LABEL_37:
      mlir::mps::getBroadcastGradientArgs((uint64_t)v50, v51, (uint64_t)v48, v49, v52);
      char v45 = v52[0];
      v52[0] = (char *)((v52[1] - v52[0]) >> 3);
      uint64_t v47 = mlir::IntegerType::get(a1, 0x20u, 1u);
      uint64_t v44 = mlir::RankedTensorType::get((uint64_t)v52, 1, v47, 0);
      uint64_t v46 = *(unsigned int *)(a11 + 8);
      if (v46 < *(_DWORD *)(a11 + 12))
      {
LABEL_34:
        *(void *)(*(void *)a11 + 8 * v46) = v44;
        ++*(_DWORD *)(a11 + 8);
        if (!v45) {
          return 1;
        }
LABEL_35:
        operator delete(v45);
        return 1;
      }
LABEL_38:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
      *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v44;
      if (!v45) {
        return 1;
      }
      goto LABEL_35;
    }
    unint64_t v19 = (v18 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v19 >= 3)
    {
      unint64_t v22 = v19 + 1;
      uint64_t v23 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v21 = (uint64_t *)(ArgAttrsAttr + 8 * v23);
      uint64_t v24 = (int64x2_t *)(ArgAttrsAttr + 16);
      int64x2_t v25 = 0uLL;
      int64x2_t v26 = vdupq_n_s64(0x8000000000000000);
      uint64_t v27 = v23;
      int64x2_t v28 = 0uLL;
      do
      {
        int64x2_t v25 = vsubq_s64(v25, vceqq_s64(v24[-1], v26));
        int64x2_t v28 = vsubq_s64(v28, vceqq_s64(*v24, v26));
        v24 += 2;
        v27 -= 4;
      }
      while (v27);
      uint64_t v20 = vaddvq_s64(vaddq_s64(v28, v25));
      if (v22 == v23) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = (uint64_t *)ArgAttrsAttr;
    }
    do
    {
      uint64_t v29 = *v21++;
      if (v29 == 0x8000000000000000) {
        ++v20;
      }
    }
    while (v21 != (uint64_t *)(ArgAttrsAttr + 8 * v18));
LABEL_22:
    if (v20) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::ExpandDimsOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v63[2] = *MEMORY[0x1E4F143B8];
  v63[0] = a4;
  v63[1] = a5;
  if (a5 == 2)
  {
    uint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(v63, 0) + 8);
    unint64_t v14 = *(void *)(mlir::ValueRange::dereference_iterator(v63, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8))
    {
      uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8);
      unint64_t v55 = v14;
      uint64_t v56 = v15;
      if (v14)
      {
        uint64_t v16 = (void *)(v13 & 0xFFFFFFFFFFFFFFF8);
        if (*(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
          goto LABEL_60;
        }
        __int16 v60 = v62;
        uint64_t v61 = 0x400000000;
        uint64_t v17 = mlir::ValueRange::dereference_iterator(v63, 1);
        if (mlir::matchConstantWithIntVector<long long>(v17, (uint64_t)&v60))
        {
          unint64_t v50 = v13 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v18 = v61;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
          __int16 v57 = v59;
          uint64_t v58 = 0x400000000;
          int64_t v20 = v19 + v18;
          if (v19 + v18)
          {
            if ((unint64_t)v20 < 5)
            {
              uint64_t v21 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v20, 8);
              uint64_t v21 = v58;
            }
            if (v20 != v21) {
              bzero((char *)v57 + 8 * v21, 8 * (v20 - v21));
            }
            LODWORD(v58) = v20;
          }
          long long v53 = 0;
          uint64_t v54 = 0;
          uint64_t v52 = &v53;
          if (v61)
          {
            int64x2_t v28 = (char **)v60;
            uint64_t v29 = (char **)((char *)v60 + 8 * v61);
            while (1)
            {
              uint64_t v51 = (uint64_t)*v28;
              uint64_t v30 = (char *)((v20 & (v51 >> 63)) + v51);
              if ((uint64_t)v30 < 0 || (uint64_t)v30 >= v20) {
                break;
              }
              uint64_t v31 = v53;
              unint64_t v32 = &v53;
              uint64_t v33 = &v53;
              if (v53)
              {
                uint64_t v34 = v53;
                do
                {
                  uint64_t v35 = v34[4];
                  if ((uint64_t)v30 >= v35)
                  {
                    if (v35 >= (uint64_t)v30)
                    {
                      uint64_t v46 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "axis must be unique");
                      goto LABEL_53;
                    }
                    ++v34;
                  }
                  uint64_t v34 = (uint64_t *)*v34;
                }
                while (v34);
                while (1)
                {
                  while (1)
                  {
                    uint64_t v33 = (uint64_t **)v31;
                    uint64_t v36 = v31[4];
                    if ((uint64_t)v30 >= v36) {
                      break;
                    }
                    uint64_t v31 = *v33;
                    unint64_t v32 = v33;
                    if (!*v33) {
                      goto LABEL_37;
                    }
                  }
                  if (v36 >= (uint64_t)v30) {
                    break;
                  }
                  uint64_t v31 = v33[1];
                  if (!v31)
                  {
                    unint64_t v32 = v33 + 1;
                    goto LABEL_37;
                  }
                }
              }
              else
              {
LABEL_37:
                uint64_t v37 = (uint64_t *)operator new(0x28uLL);
                v37[4] = (uint64_t)v30;
                uint64_t *v37 = 0;
                v37[1] = 0;
                void v37[2] = (uint64_t)v33;
                *unint64_t v32 = v37;
                if (*v52)
                {
                  uint64_t v52 = (uint64_t **)*v52;
                  int64x2_t v38 = *v32;
                }
                else
                {
                  int64x2_t v38 = v37;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v53, v38);
                ++v54;
              }
              if (++v28 == v29) {
                goto LABEL_42;
              }
            }
            uint64_t v46 = mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[8],char const(&)[42]>(a2, a3, "invalid axis: ", (char **)&v51, ", axis ", "must be in range -|rank| <= axis < |rank|");
LABEL_53:
            uint64_t v23 = v46;
            int v27 = 1;
            uint64_t v16 = (void *)v50;
          }
          else
          {
LABEL_42:
            int64x2_t v39 = v52;
            uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
            if (v20 >= 1)
            {
              int64x2_t v41 = 0;
              uint64_t v42 = v57;
              do
              {
                if (v39 == &v53 || v39[4] != v41)
                {
                  uint64_t v43 = *ArgAttrsAttr++;
                  v42[(void)v41] = v43;
                }
                else
                {
                  v42[(void)v41] = 1;
                  uint64_t v44 = v39[1];
                  if (v44)
                  {
                    do
                    {
                      int64x2_t v39 = (uint64_t **)v44;
                      uint64_t v44 = (uint64_t *)*v44;
                    }
                    while (v44);
                  }
                  else
                  {
                    do
                    {
                      char v45 = (uint64_t *)v39;
                      int64x2_t v39 = (uint64_t **)v39[2];
                    }
                    while (*v39 != v45);
                  }
                }
                int64x2_t v41 = (uint64_t *)((char *)v41 + 1);
              }
              while (v41 != (uint64_t *)v20);
            }
            uint64_t v47 = v57;
            uint64_t v23 = v58;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v55);
            uint64_t v16 = (void *)mlir::RankedTensorType::get((uint64_t)v47, v23, OperandRange, 0);
            int v27 = 0;
          }
          std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v52, v53);
          if (v57 != v59) {
            free(v57);
          }
        }
        else
        {
          uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
          uint64_t v25 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
          uint64_t v26 = *(unsigned int *)(a11 + 8);
          if (v26 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
            LODWORD(v26) = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v26) = v25;
          ++*(_DWORD *)(a11 + 8);
          int v27 = 1;
          uint64_t v23 = 1;
        }
        if (v60 != v62) {
          free(v60);
        }
        if (!v27)
        {
LABEL_60:
          uint64_t v49 = *(unsigned int *)(a11 + 8);
          if (v49 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v49 + 1, 8);
            LODWORD(v49) = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v49) = v16;
          ++*(_DWORD *)(a11 + 8);
          return 1;
        }
        return v23;
      }
    }
    else
    {
      unint64_t v55 = 0;
      uint64_t v56 = 0;
    }
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot exapnd_dims a non-shaped type");
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[8],char const(&)[42]>(uint64_t a1, char a2, char *a3, char **a4, char *a5, const char *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v20);
  if (v20) {
    mlir::Diagnostic::append<char const(&)[15],long long &,char const(&)[8],char const(&)[42]>((uint64_t)&v21, a3, a4, a5, a6);
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v28)
  {
    unint64_t v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v27;
      uint64_t v13 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      int v27 = v11;
      operator delete(v13);
    }
    unint64_t v14 = v24;
    if (v24)
    {
      uint64_t v15 = v25;
      uint64_t v16 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v18 = (void *)*--v15;
          uint64_t v17 = v18;
          *uint64_t v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v24;
      }
      uint64_t v25 = v14;
      operator delete(v16);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v10;
}

BOOL mlir::mps::ExpandDimsOp::verify(mlir::mps::_anonymous_namespace_ **this)
{
  uint64_t v2 = (void *)(*(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
  {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    uint64_t v19 = v2;
    uint64_t v20 = v3;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19)) {
      return 1;
    }
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19)) {
      return 1;
    }
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v4 = *(uint64_t **)(*((void *)*this + 9) + 56);
  uint64_t v16 = (uint64_t **)&v17;
  unint64_t v14 = v4;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v14);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v16, DefiningOp))
  {
    v15[0] = 0;
    v15[1] = 0;
    unint64_t v14 = (uint64_t *)v15;
    uint64_t v6 = *this;
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v19);
    uint64_t v10 = v9;
    uint64_t NumElements = mlir::ElementsAttr::getNumElements(v17, v18);
    std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v14, v15[0]);
    return v12;
  }
  return 1;
}

uint64_t mlir::mps::SqueezeOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v100 = a4;
  uint64_t v101 = a5;
  uint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(&v100, 0) + 8);
  unint64_t v14 = *(void *)(mlir::ValueRange::dereference_iterator(&v100, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8))
  {
    unint64_t v89 = 0;
    uint64_t v90 = 0;
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot squeeze a non-shaped type");
  }
  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8);
  unint64_t v89 = v14;
  uint64_t v90 = v15;
  if (!v14) {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot squeeze a non-shaped type");
  }
  uint64_t v16 = (void *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if (*(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    goto LABEL_108;
  }
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89);
  __b = v99;
  uint64_t v98 = 0x400000000;
  if (v101 != 2)
  {
    uint64_t v46 = v17;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v89))
    {
      uint64_t v47 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89);
      if (!v48)
      {
LABEL_54:
        if (v46)
        {
          uint64_t v50 = 8 * v46;
          do
          {
            uint64_t v51 = *ArgAttrsAttr;
            if (*ArgAttrsAttr != 1)
            {
              uint64_t v52 = v98;
              if (v98 >= (unint64_t)HIDWORD(v98))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v99, v98 + 1, 8);
                uint64_t v52 = v98;
              }
              *((void *)__b + v52) = v51;
              LODWORD(v98) = v98 + 1;
            }
            ++ArgAttrsAttr;
            v50 -= 8;
          }
          while (v50);
        }
        goto LABEL_105;
      }
      uint64_t v49 = 8 * v48;
      while (*v47 != 0x8000000000000000)
      {
        ++v47;
        v49 -= 8;
        if (!v49) {
          goto LABEL_54;
        }
      }
    }
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v89);
    uint64_t v54 = mlir::UnrankedTensorType::get(OperandRange);
    uint64_t v55 = *(unsigned int *)(a11 + 8);
    if (v55 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
      LODWORD(v55) = *(_DWORD *)(a11 + 8);
    }
    LODWORD(v19) = 0;
    *(void *)(*(void *)a11 + 8 * v55) = v54;
    ++*(_DWORD *)(a11 + 8);
    a3 = 1;
    uint64_t v56 = __b;
    if (__b == v99) {
      goto LABEL_107;
    }
LABEL_106:
    free(v56);
    goto LABEL_107;
  }
  uint64_t v19 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v100, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
  {
    LODWORD(v19) = 0;
    long long v87 = 0;
    uint64_t v88 = 0;
LABEL_66:
    a3 = mlir::emitOptionalError<char const(&)[39]>(a2, a3, "axes must be a shaped type");
    uint64_t v56 = __b;
    if (__b != v99) {
      goto LABEL_106;
    }
    goto LABEL_107;
  }
  uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  long long v87 = v19;
  uint64_t v88 = v20;
  if (!v19) {
    goto LABEL_66;
  }
  uint64_t v94 = v96;
  uint64_t v95 = 0x400000000;
  uint64_t v21 = mlir::ValueRange::dereference_iterator(&v100, 1);
  if (!mlir::matchConstantWithIntVector<long long>(v21, (uint64_t)&v94))
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v87))
    {
      uint64_t v68 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v87);
      if (!v69)
      {
LABEL_92:
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89);
        uint64_t v72 = v71;
        uint64_t v73 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v87);
        uint64_t NumElements = mlir::ShapedType::getNumElements(v73, v74);
        unint64_t v76 = v72 - NumElements;
        if (v72 - NumElements < 0)
        {
          a3 = mlir::emitOptionalError<char const(&)[30],char const(&)[27]>(a2, a3, "number of squeezed axes must ", "be less than rank of input");
          goto LABEL_102;
        }
        uint64_t v77 = NumElements;
        LODWORD(v98) = 0;
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&__b, v76);
        if (v72 == v77)
        {
          char v66 = 1;
          char v67 = v94;
          if (v94 != v96) {
            goto LABEL_103;
          }
          goto LABEL_104;
        }
        memset_pattern16(__b, &unk_1811000C0, 8 * v76);
        char v66 = 1;
        char v67 = v94;
        if (v94 == v96) {
          goto LABEL_104;
        }
        goto LABEL_103;
      }
      uint64_t v70 = 8 * v69;
      while (*v68 != 0x8000000000000000)
      {
        ++v68;
        v70 -= 8;
        if (!v70) {
          goto LABEL_92;
        }
      }
    }
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v16);
    uint64_t v79 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v79);
    char v66 = 0;
    a3 = 1;
    char v67 = v94;
    if (v94 != v96) {
      goto LABEL_103;
    }
    goto LABEL_104;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v89);
  uint64_t v23 = v22;
  uint64_t v91 = 1;
  memset_pattern16(&v92, &unk_1811011A0, 0x20uLL);
  if (!v95)
  {
LABEL_68:
    LODWORD(v98) = 0;
    if (v23 >= 1)
    {
      unsigned int v57 = 0;
      uint64_t v58 = 0;
      a3 = 37;
      do
      {
        if (v91)
        {
          uint64_t v59 = &v92;
          int v60 = 3;
          unsigned int v61 = (37 * v58) & 3;
          uint64_t v62 = (uint64_t)*(&v92 + v61);
          if (v58 != v62) {
            goto LABEL_75;
          }
        }
        else
        {
          if (!v93) {
            goto LABEL_79;
          }
          uint64_t v59 = v92;
          int v60 = v93 - 1;
          unsigned int v61 = (v93 - 1) & (37 * v58);
          uint64_t v62 = *((void *)v92 + v61);
          if (v58 != v62)
          {
LABEL_75:
            int v63 = 1;
            while (v62 != 0x7FFFFFFFFFFFFFFFLL)
            {
              unsigned int v64 = v61 + v63++;
              unsigned int v61 = v64 & v60;
              uint64_t v62 = v59[v61];
              if (v58 == v62) {
                goto LABEL_82;
              }
            }
LABEL_79:
            uint64_t v65 = *ArgAttrsAttr;
            if (v57 >= HIDWORD(v98))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v99, v57 + 1, 8);
              unsigned int v57 = v98;
            }
            *((void *)__b + v57) = v65;
            unsigned int v57 = v98 + 1;
            LODWORD(v98) = v98 + 1;
          }
        }
LABEL_82:
        ++v58;
        ++ArgAttrsAttr;
      }
      while (v58 != v23);
    }
    if ((v91 & 1) == 0) {
      llvm::deallocate_buffer(v92, (void *)(8 * v93));
    }
    char v66 = 1;
    char v67 = v94;
    if (v94 == v96) {
      goto LABEL_104;
    }
LABEL_103:
    free(v67);
    goto LABEL_104;
  }
  uint64_t v24 = (char **)v94;
  uint64_t v25 = (char **)((char *)v94 + 8 * v95);
  while (1)
  {
    uint64_t v86 = (uint64_t)*v24;
    uint64_t v30 = (v23 & (v86 >> 63)) + v86;
    long long v85 = (char *)v30;
    if (v30 < 0 || v23 <= v30)
    {
      a3 = mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[8],char const(&)[42]>(a2, a3, "invalid axis: ", (char **)&v86, ", axis must be in range ", "-|rank| <= axis < |rank|");
      if (v91) {
        goto LABEL_102;
      }
LABEL_100:
      llvm::deallocate_buffer(v92, (void *)(8 * v93));
    }
    if ((v91 & 1) == 0) {
      break;
    }
    uint64_t v26 = &v92;
    int v27 = 3;
    unsigned int v28 = (37 * v30) & 3;
    uint64_t v29 = (char *)*(&v92 + v28);
    if ((char *)v30 != v29) {
      goto LABEL_19;
    }
LABEL_33:
    if (++v24 == v25) {
      goto LABEL_68;
    }
  }
  if (!v93) {
    goto LABEL_23;
  }
  uint64_t v26 = v92;
  int v27 = v93 - 1;
  unsigned int v28 = (v93 - 1) & (37 * v30);
  uint64_t v29 = (char *)*((void *)v92 + v28);
  if ((char *)v30 == v29) {
    goto LABEL_33;
  }
LABEL_19:
  int v31 = 1;
  while (v29 != (char *)0x7FFFFFFFFFFFFFFFLL)
  {
    unsigned int v32 = v28 + v31++;
    unsigned int v28 = v32 & v27;
    uint64_t v29 = (char *)v26[v28];
    if ((char *)v30 == v29) {
      goto LABEL_33;
    }
  }
LABEL_23:
  uint64_t v33 = ArgAttrsAttr[v30];
  if (v33 == 1 || v33 == 0x8000000000000000)
  {
    if (v91)
    {
      int v35 = 4;
      uint64_t v36 = (char *)&v92;
    }
    else
    {
      int v35 = v93;
      if (!v93)
      {
        int64x2_t v41 = 0;
        goto LABEL_36;
      }
      uint64_t v36 = (char *)v92;
    }
    int v37 = v35 - 1;
    unsigned int v38 = v37 & (37 * v30);
    int64x2_t v39 = (char **)&v36[8 * v38];
    uint64_t v40 = *v39;
    if ((char *)v30 == *v39) {
      goto LABEL_33;
    }
    uint64_t v42 = 0;
    int v43 = 1;
    while (v40 != (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      if (v42) {
        BOOL v44 = 0;
      }
      else {
        BOOL v44 = v40 == (char *)0x8000000000000000;
      }
      if (v44) {
        uint64_t v42 = v39;
      }
      unsigned int v45 = v38 + v43++;
      unsigned int v38 = v45 & v37;
      int64x2_t v39 = (char **)&v36[8 * v38];
      uint64_t v40 = *v39;
      if ((char *)v30 == *v39) {
        goto LABEL_33;
      }
    }
    if (v42) {
      int64x2_t v41 = v42;
    }
    else {
      int64x2_t v41 = v39;
    }
LABEL_36:
    llvm::DenseMapBase<llvm::SmallDenseMap<long long,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>,long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseSetPair<long long>>::InsertIntoBucket<long long const&,llvm::detail::DenseSetEmpty&>((uint64_t)&v91, v41, &v85);
    goto LABEL_33;
  }
  a3 = mlir::emitOptionalError<char const(&)[35],char const(&)[13],long long &,char const(&)[6],long long const&>(a2, a3, "squeezed axis must have length 1, ", "input.shape[", &v85, "] == ", (char **)&ArgAttrsAttr[v30]);
  if ((v91 & 1) == 0) {
    goto LABEL_100;
  }
LABEL_102:
  char v66 = 0;
  char v67 = v94;
  if (v94 != v96) {
    goto LABEL_103;
  }
LABEL_104:
  if ((v66 & 1) == 0)
  {
    LODWORD(v19) = 0;
    uint64_t v56 = __b;
    if (__b == v99) {
      goto LABEL_107;
    }
    goto LABEL_106;
  }
LABEL_105:
  long long v80 = __b;
  uint64_t v81 = v98;
  uint64_t v82 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v89);
  uint64_t v16 = (void *)mlir::RankedTensorType::get((uint64_t)v80, v81, v82, 0);
  LODWORD(v19) = 1;
  uint64_t v56 = __b;
  if (__b != v99) {
    goto LABEL_106;
  }
LABEL_107:
  if (v19)
  {
LABEL_108:
    uint64_t v83 = *(unsigned int *)(a11 + 8);
    if (v83 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v83 + 1, 8);
      LODWORD(v83) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v83) = v16;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  return a3;
}

uint64_t mlir::emitOptionalError<char const(&)[30],char const(&)[27]>(uint64_t a1, char a2, char *a3, const char *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v16);
  if (v16) {
    mlir::Diagnostic::append<char const(&)[45],char const(&)[25]>((uint64_t)&v17, a3, a4);
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v16);
  if (v16) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v16);
  }
  if (v24)
  {
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      uint64_t v8 = v23;
      uint64_t v9 = __p;
      if (v23 != __p)
      {
        do
          uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      uint64_t v23 = v7;
      operator delete(v9);
    }
    uint64_t v10 = v20;
    if (v20)
    {
      unint64_t v11 = v21;
      BOOL v12 = v20;
      if (v21 != v20)
      {
        do
        {
          unint64_t v14 = (void *)*--v11;
          uint64_t v13 = v14;
          *unint64_t v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        BOOL v12 = v20;
      }
      uint64_t v21 = v10;
      operator delete(v12);
    }
    if (v18 != &v19) {
      free(v18);
    }
  }
  return v6;
}

uint64_t mlir::emitOptionalError<char const(&)[35],char const(&)[13],long long &,char const(&)[6],long long const&>(uint64_t a1, char a2, char *a3, char *a4, char **a5, char *a6, char **a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)&v22);
  if (v22) {
    mlir::Diagnostic::append<char const(&)[39],char const(&)[29],long long &,char const(&)[4],long long>((uint64_t)&v23, a3, a4, a5, a6, a7);
  }
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v22);
  if (v22) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
  }
  if (v30)
  {
    uint64_t v13 = (void **)__p;
    if (__p)
    {
      unint64_t v14 = v29;
      uint64_t v15 = __p;
      if (v29 != __p)
      {
        do
          unint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
        while (v14 != v13);
        uint64_t v15 = __p;
      }
      uint64_t v29 = v13;
      operator delete(v15);
    }
    uint64_t v16 = v26;
    if (v26)
    {
      uint64_t v17 = v27;
      uint64_t v18 = v26;
      if (v27 != v26)
      {
        do
        {
          uint64_t v20 = (void *)*--v17;
          uint64_t v19 = v20;
          *uint64_t v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        uint64_t v18 = v26;
      }
      int v27 = v16;
      operator delete(v18);
    }
    if (v24 != &v25) {
      free(v24);
    }
  }
  return v12;
}

uint64_t mlir::mps::SqueezeOp::verify(uint64_t **this)
{
  v67[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v2)
  {
    uint64_t v3 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8);
    uint64_t v47 = v2;
    uint64_t v48 = v3;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v47)) {
      goto LABEL_5;
    }
    return 1;
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v47)) {
    return 1;
  }
LABEL_5:
  if (*((_DWORD *)*this + 17) == 1 || !*(void *)((*this)[9] + 56)) {
    return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v47);
  uint64_t v5 = v4;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v47);
  uint64_t v65 = v67;
  uint64_t v66 = 0x400000000;
  if (*((_DWORD *)*this + 17) == 1)
  {
    if (mlir::matchConstantWithIntVector<long long>(0, (uint64_t)&v65))
    {
LABEL_9:
      uint64_t v62 = v64;
      uint64_t v63 = 0x400000000;
      {
        if (v63)
        {
          uint64_t v7 = v62;
          uint64_t v8 = 8 * v63;
          while (1)
          {
            uint64_t v9 = (const char *)*v7;
            uint64_t v10 = *(void *)(ArgAttrsAttr + 8 * *v7);
            if (v10 != 0x8000000000000000 && v10 != 1) {
              break;
            }
            ++v7;
            v8 -= 8;
            if (!v8) {
              goto LABEL_18;
            }
          }
          unsigned int v45 = (const void **)"squeezed axis must have length 1, input.shape[";
          __int16 v46 = 259;
          mlir::OpState::emitOpError(this, &v45, (uint64_t)v52);
          if (v52[0])
          {
            int v49 = 2;
            uint64_t v50 = v9;
            unint64_t v14 = &v49;
            uint64_t v15 = (char *)v53;
            if (v54 >= v55)
            {
              unint64_t v37 = v54 + 1;
              if (v53 <= &v49 && (char *)v53 + 24 * v54 > (char *)&v49)
              {
                int64_t v42 = (char *)&v49 - (unsigned char *)v53;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v37, 24);
                uint64_t v15 = (char *)v53;
                unint64_t v14 = (int *)((char *)v53 + v42);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v37, 24);
                unint64_t v14 = &v49;
                uint64_t v15 = (char *)v53;
              }
            }
            uint64_t v16 = &v15[24 * v54];
            long long v17 = *(_OWORD *)v14;
            *((void *)v16 + 2) = *((void *)v14 + 2);
            *(_OWORD *)uint64_t v16 = v17;
            uint64_t v18 = ++v54;
            if (v52[0])
            {
              int v49 = 3;
              uint64_t v50 = "] == ";
              uint64_t v51 = 5;
              uint64_t v19 = &v49;
              uint64_t v20 = (char *)v53;
              if (v18 >= v55)
              {
                unint64_t v38 = v18 + 1;
                BOOL v39 = (char *)v53 + 24 * v18 > (char *)&v49;
                if (v53 <= &v49 && v39)
                {
                  int64_t v43 = (char *)&v49 - (unsigned char *)v53;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v38, 24);
                  uint64_t v20 = (char *)v53;
                  uint64_t v19 = (int *)((char *)v53 + v43);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v38, 24);
                  uint64_t v19 = &v49;
                  uint64_t v20 = (char *)v53;
                }
              }
              uint64_t v21 = &v20[24 * v54];
              long long v22 = *(_OWORD *)v19;
              *((void *)v21 + 2) = *((void *)v19 + 2);
              *(_OWORD *)uint64_t v21 = v22;
              uint64_t v23 = ++v54;
              if (v52[0])
              {
                char v24 = *(const char **)(ArgAttrsAttr + 8 * (void)v9);
                int v49 = 2;
                uint64_t v50 = v24;
                uint64_t v25 = &v49;
                uint64_t v26 = (char *)v53;
                if (v23 >= v55)
                {
                  unint64_t v40 = v23 + 1;
                  BOOL v41 = (char *)v53 + 24 * v23 > (char *)&v49;
                  if (v53 <= &v49 && v41)
                  {
                    int64_t v44 = (char *)&v49 - (unsigned char *)v53;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
                    uint64_t v26 = (char *)v53;
                    uint64_t v25 = (int *)((char *)v53 + v44);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
                    uint64_t v25 = &v49;
                    uint64_t v26 = (char *)v53;
                  }
                }
                int v27 = &v26[24 * v54];
                long long v28 = *(_OWORD *)v25;
                *((void *)v27 + 2) = *((void *)v25 + 2);
                *(_OWORD *)int v27 = v28;
                ++v54;
              }
            }
          }
          uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
          if (v52[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
          }
          if (v61)
          {
            uint64_t v29 = (void **)__p;
            if (__p)
            {
              char v30 = v60;
              uint64_t v31 = __p;
              if (v60 != __p)
              {
                do
                  char v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
                while (v30 != v29);
                uint64_t v31 = __p;
              }
              int v60 = v29;
              operator delete(v31);
            }
            unsigned int v32 = v57;
            if (v57)
            {
              uint64_t v33 = v58;
              uint64_t v34 = v57;
              if (v58 != v57)
              {
                do
                {
                  uint64_t v36 = (void *)*--v33;
                  int v35 = v36;
                  *uint64_t v33 = 0;
                  if (v36) {
                    operator delete[](v35);
                  }
                }
                while (v33 != v32);
                uint64_t v34 = v57;
              }
              uint64_t v58 = v32;
              operator delete(v34);
            }
            if (v53 != v56) {
              free(v53);
            }
          }
        }
        else
        {
LABEL_18:
          uint64_t v12 = 1;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (v62 != v64) {
        free(v62);
      }
      goto LABEL_26;
    }
  }
  else if (mlir::matchConstantWithIntVector<long long>(*(void *)((*this)[9] + 56), (uint64_t)&v65))
  {
    goto LABEL_9;
  }
  uint64_t v12 = 1;
LABEL_26:
  if (v65 != v67) {
    free(v65);
  }
  return v12;
}

uint64_t mlir::mps::Flatten2DOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v53[2] = *MEMORY[0x1E4F143B8];
  v53[0] = a4;
  v53[1] = a5;
  if (a5 == 2)
  {
    uint64_t v13 = mlir::ValueRange::dereference_iterator(v53, 0);
    unint64_t v14 = *(void **)(*(void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v16 = *(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v42 = v16;
    if (!v16) {
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "cannot Flatten2D a non-tensor input type.");
    }
    uint64_t v50 = v52;
    uint64_t v51 = 0x200000002;
    uint64_t v17 = mlir::ValueRange::dereference_iterator(v53, 1);
    unint64_t v45 = v16;
    v52[0] = 0x8000000000000000;
    v52[1] = 0x8000000000000000;
    if (*(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v45);
      uint64_t v20 = (uint64_t)v19;
      int64_t v44 = v19;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      __int16 v46 = (uint64_t **)&v47;
      uint64_t v49 = v17;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v49);
      if (DefiningOp)
      {
        if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v46, DefiningOp))
        {
          int64_t SingleInt = mlir::getSingleIntValue<long long>(v47, v48);
          v43[0] = (char *)SingleInt;
          v43[1] = v23;
          if ((_BYTE)v23)
          {
            if (v20 <= 1) {
              uint64_t v24 = 1;
            }
            else {
              uint64_t v24 = v20;
            }
            unint64_t v25 = (v24 & (SingleInt >> 63)) + SingleInt;
            unint64_t v26 = 2;
            if (v20 > 2) {
              unint64_t v26 = v20;
            }
            if ((v25 & 0x8000000000000000) != 0 || v26 < v25)
            {
              if (!mlir::emitOptionalError<char const(&)[15],long long &,char const(&)[21],long long &>(a2, a3, "invalid axis (", v43, ") for shape of rank ", &v44))
              {
                uint64_t v34 = 0;
LABEL_41:
                if (v50 != v52) {
                  free(v50);
                }
                return v34;
              }
            }
            else
            {
              int v27 = v50;
              *(int64x2_t *)uint64_t v50 = vdupq_n_s64(1uLL);
              if (v25)
              {
                uint64_t v28 = 1;
                uint64_t v29 = (uint64_t *)Value;
                unint64_t v30 = v25;
                while (1)
                {
                  uint64_t v32 = *v29++;
                  uint64_t v31 = v32;
                  if (v32 == 0x8000000000000000) {
                    break;
                  }
                  v28 *= v31;
                  void *v27 = v28;
                  if (!--v30) {
                    goto LABEL_32;
                  }
                }
                void *v27 = 0x8000000000000000;
              }
LABEL_32:
              if ((uint64_t)v25 < v20)
              {
                uint64_t v35 = 1;
                while (1)
                {
                  uint64_t v36 = *(void *)(Value + 8 * v25);
                  if (v36 == 0x8000000000000000) {
                    break;
                  }
                  v35 *= v36;
                  v27[1] = v35;
                  if ((uint64_t)++v25 >= v20) {
                    goto LABEL_38;
                  }
                }
                v27[1] = 0x8000000000000000;
              }
            }
          }
        }
      }
    }
LABEL_38:
    unint64_t v37 = v50;
    uint64_t v38 = v51;
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v42);
    uint64_t v40 = mlir::RankedTensorType::get((uint64_t)v37, v38, ElementType, 0);
    uint64_t v41 = *(unsigned int *)(a11 + 8);
    if (v41 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
      LODWORD(v41) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v41) = v40;
    ++*(_DWORD *)(a11 + 8);
    uint64_t v34 = 1;
    goto LABEL_41;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::ReductionAndOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  unint64_t v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_and", 17, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    long long v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    unsigned int v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          uint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          uint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionArgMaxOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v60 = a6;
  v61[0] = 0;
  char v62 = 0;
  unint64_t v63 = v16;
  uint64_t v64 = a9;
  uint64_t v65 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62) {
      char v62 = 0;
    }
    mlir::OperationName::OperationName(v61, "mps.reduction_argmax", 20, Context);
    char v62 = 1;
  }
  uint64_t v66 = a4;
  unint64_t v67 = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v63;
    uint64_t v19 = v66;
    unint64_t v20 = v67;
    uint64_t ElementTypeOrSelf = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
    uint64_t v74 = v19;
    unint64_t v75 = v20;
    uint64_t v22 = mlir::ValueRange::dereference_iterator(&v74, 0);
    uint64_t v23 = 0;
    if (v75 >= 2) {
      uint64_t v23 = mlir::ValueRange::dereference_iterator(&v74, 1);
    }
    uint64_t v24 = (void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v25 = *(void **)(*v24 + 136);
    if (v25 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v25 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v24 = 0;
    }
    uint64_t v59 = v24;
    if (!v24) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = ElementTypeOrSelf;
    if (ElementTypeOrSelf)
    {
      if (v23) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v59);
      if (v23)
      {
LABEL_19:
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v59))
        {
          unint64_t v28 = *(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v29 = *(void **)(*(void *)v28 + 136);
          if (v29 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
            && v29 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
          {
            unint64_t v28 = 0;
          }
          unint64_t v58 = v28;
          if (!v28) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
          }
          if (mlir::TensorType::hasRank((mlir::TensorType *)&v58))
          {
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
            if (v31 >= 2) {
              return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
            }
          }
          __b = v73;
          uint64_t v72 = 0x600000000;
          if (mlir::matchConstantWithIntVector<long long>(v23, (uint64_t)&__b))
          {
            uint64_t v68 = v70;
            uint64_t v69 = 0x600000000;
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
            {
              uint64_t v43 = v68;
              uint64_t v44 = v69;
              if (!ElementTypeOrSelf) {
                uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v59);
              }
              uint64_t v45 = mlir::RankedTensorType::get((uint64_t)v43, v44, ElementTypeOrSelf, 0);
              uint64_t v46 = *(unsigned int *)(a11 + 8);
              if (v46 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
                LODWORD(v46) = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v46) = v45;
              ++*(_DWORD *)(a11 + 8);
              uint64_t v32 = 1;
            }
            else
            {
              uint64_t v32 = 0;
            }
            if (v68 != v70) {
              free(v68);
            }
            goto LABEL_80;
          }
          if (!mlir::TensorType::hasRank((mlir::TensorType *)&v58)) {
            goto LABEL_62;
          }
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
          if (!v47) {
            goto LABEL_72;
          }
          if (v47 == 1)
          {
            BOOL v48 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58) == 1;
            if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58))
            {
              unint64_t v49 = v59;
LABEL_66:
              uint64_t v50 = *(unsigned int *)(a11 + 8);
              if (v50 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
                LODWORD(v50) = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v50) = v49;
              ++*(_DWORD *)(a11 + 8);
              goto LABEL_79;
            }
          }
          else
          {
LABEL_62:
            BOOL v48 = 0;
          }
          if (!v18 && !v48)
          {
            unint64_t v49 = (void *)mlir::UnrankedTensorType::get(ElementType);
            goto LABEL_66;
          }
LABEL_72:
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
          unint64_t v52 = (__PAIR128__(v51, v18) - 1) >> 64;
          if (v51 == (v18 == 0))
          {
            uint64_t v54 = 0;
          }
          else
          {
            if (v52 >> 61) {
              abort();
            }
            size_t v53 = 8 * v52;
            uint64_t v54 = (char *)operator new(8 * v52);
            memset_pattern16(v54, &unk_1811000C0, v53);
            unint64_t v52 = (unint64_t)&v54[v53];
          }
          uint64_t v55 = mlir::RankedTensorType::get((uint64_t)v54, (uint64_t)(v52 - (void)v54) >> 3, ElementType, 0);
          uint64_t v56 = v55;
          uint64_t v57 = *(unsigned int *)(a11 + 8);
          if (v57 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v57 + 1, 8);
            *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v56;
            if (!v54) {
              goto LABEL_79;
            }
          }
          else
          {
            *(void *)(*(void *)a11 + 8 * v57) = v55;
            ++*(_DWORD *)(a11 + 8);
            if (!v54)
            {
LABEL_79:
              uint64_t v32 = 1;
LABEL_80:
              if (__b != v73) {
                free(__b);
              }
              return v32;
            }
          }
          operator delete(v54);
          goto LABEL_79;
        }
LABEL_36:
        uint64_t v33 = ElementType;
        goto LABEL_37;
      }
    }
    if (!v18)
    {
      uint64_t v37 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
      goto LABEL_38;
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v59))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      unint64_t v35 = v34;
      __b = v73;
      HIDWORD(v72) = 4;
      if (v34 < 5)
      {
        if (v34) {
          memset_pattern16(v73, &unk_1810FE350, 8 * v34);
        }
        uint64_t v36 = v73;
      }
      else
      {
        LODWORD(v72) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v73, v34, 8);
        uint64_t v36 = __b;
        memset_pattern16(__b, &unk_1810FE350, 8 * v35);
      }
      LODWORD(v72) = v35;
      uint64_t v38 = mlir::RankedTensorType::get((uint64_t)v36, v35, ElementType, 0);
      if (__b != v73) {
        free(__b);
      }
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  uint64_t v33 = mlir::Float32Type::get(this, a2);
LABEL_37:
  uint64_t v37 = mlir::UnrankedTensorType::get(v33);
LABEL_38:
  uint64_t v38 = v37;
LABEL_39:
  uint64_t v39 = *(unsigned int *)(a11 + 8);
  if (v39 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
    LODWORD(v39) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v39) = v38;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionArgMinOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v60 = a6;
  v61[0] = 0;
  char v62 = 0;
  unint64_t v63 = v16;
  uint64_t v64 = a9;
  uint64_t v65 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v60);
    if (v62) {
      char v62 = 0;
    }
    mlir::OperationName::OperationName(v61, "mps.reduction_argmin", 20, Context);
    char v62 = 1;
  }
  uint64_t v66 = a4;
  unint64_t v67 = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v63;
    uint64_t v19 = v66;
    unint64_t v20 = v67;
    uint64_t ElementTypeOrSelf = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
    uint64_t v74 = v19;
    unint64_t v75 = v20;
    uint64_t v22 = mlir::ValueRange::dereference_iterator(&v74, 0);
    uint64_t v23 = 0;
    if (v75 >= 2) {
      uint64_t v23 = mlir::ValueRange::dereference_iterator(&v74, 1);
    }
    uint64_t v24 = (void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v25 = *(void **)(*v24 + 136);
    if (v25 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v25 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v24 = 0;
    }
    uint64_t v59 = v24;
    if (!v24) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = ElementTypeOrSelf;
    if (ElementTypeOrSelf)
    {
      if (v23) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v59);
      if (v23)
      {
LABEL_19:
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v59))
        {
          unint64_t v28 = *(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v29 = *(void **)(*(void *)v28 + 136);
          if (v29 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
            && v29 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
          {
            unint64_t v28 = 0;
          }
          unint64_t v58 = v28;
          if (!v28) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
          }
          if (mlir::TensorType::hasRank((mlir::TensorType *)&v58))
          {
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
            if (v31 >= 2) {
              return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
            }
          }
          __b = v73;
          uint64_t v72 = 0x600000000;
          if (mlir::matchConstantWithIntVector<long long>(v23, (uint64_t)&__b))
          {
            uint64_t v68 = v70;
            uint64_t v69 = 0x600000000;
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
            {
              uint64_t v43 = v68;
              uint64_t v44 = v69;
              if (!ElementTypeOrSelf) {
                uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v59);
              }
              uint64_t v45 = mlir::RankedTensorType::get((uint64_t)v43, v44, ElementTypeOrSelf, 0);
              uint64_t v46 = *(unsigned int *)(a11 + 8);
              if (v46 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
                LODWORD(v46) = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v46) = v45;
              ++*(_DWORD *)(a11 + 8);
              uint64_t v32 = 1;
            }
            else
            {
              uint64_t v32 = 0;
            }
            if (v68 != v70) {
              free(v68);
            }
            goto LABEL_80;
          }
          if (!mlir::TensorType::hasRank((mlir::TensorType *)&v58)) {
            goto LABEL_62;
          }
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
          if (!v47) {
            goto LABEL_72;
          }
          if (v47 == 1)
          {
            BOOL v48 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58) == 1;
            if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58))
            {
              unint64_t v49 = v59;
LABEL_66:
              uint64_t v50 = *(unsigned int *)(a11 + 8);
              if (v50 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
                LODWORD(v50) = *(_DWORD *)(a11 + 8);
              }
              *(void *)(*(void *)a11 + 8 * v50) = v49;
              ++*(_DWORD *)(a11 + 8);
              goto LABEL_79;
            }
          }
          else
          {
LABEL_62:
            BOOL v48 = 0;
          }
          if (!v18 && !v48)
          {
            unint64_t v49 = (void *)mlir::UnrankedTensorType::get(ElementType);
            goto LABEL_66;
          }
LABEL_72:
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
          unint64_t v52 = (__PAIR128__(v51, v18) - 1) >> 64;
          if (v51 == (v18 == 0))
          {
            uint64_t v54 = 0;
          }
          else
          {
            if (v52 >> 61) {
              abort();
            }
            size_t v53 = 8 * v52;
            uint64_t v54 = (char *)operator new(8 * v52);
            memset_pattern16(v54, &unk_1811000C0, v53);
            unint64_t v52 = (unint64_t)&v54[v53];
          }
          uint64_t v55 = mlir::RankedTensorType::get((uint64_t)v54, (uint64_t)(v52 - (void)v54) >> 3, ElementType, 0);
          uint64_t v56 = v55;
          uint64_t v57 = *(unsigned int *)(a11 + 8);
          if (v57 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v57 + 1, 8);
            *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v56;
            if (!v54) {
              goto LABEL_79;
            }
          }
          else
          {
            *(void *)(*(void *)a11 + 8 * v57) = v55;
            ++*(_DWORD *)(a11 + 8);
            if (!v54)
            {
LABEL_79:
              uint64_t v32 = 1;
LABEL_80:
              if (__b != v73) {
                free(__b);
              }
              return v32;
            }
          }
          operator delete(v54);
          goto LABEL_79;
        }
LABEL_36:
        uint64_t v33 = ElementType;
        goto LABEL_37;
      }
    }
    if (!v18)
    {
      uint64_t v37 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
      goto LABEL_38;
    }
    if (mlir::TensorType::hasRank((mlir::TensorType *)&v59))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      unint64_t v35 = v34;
      __b = v73;
      HIDWORD(v72) = 4;
      if (v34 < 5)
      {
        if (v34) {
          memset_pattern16(v73, &unk_1810FE350, 8 * v34);
        }
        uint64_t v36 = v73;
      }
      else
      {
        LODWORD(v72) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v73, v34, 8);
        uint64_t v36 = __b;
        memset_pattern16(__b, &unk_1810FE350, 8 * v35);
      }
      LODWORD(v72) = v35;
      uint64_t v38 = mlir::RankedTensorType::get((uint64_t)v36, v35, ElementType, 0);
      if (__b != v73) {
        free(__b);
      }
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  uint64_t v33 = mlir::Float32Type::get(this, a2);
LABEL_37:
  uint64_t v37 = mlir::UnrankedTensorType::get(v33);
LABEL_38:
  uint64_t v38 = v37;
LABEL_39:
  uint64_t v39 = *(unsigned int *)(a11 + 8);
  if (v39 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
    LODWORD(v39) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v39) = v38;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionLogSumExpOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  unint64_t v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_logsumexp", 23, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    uint64_t v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          unint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          unint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionMaxOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  long long v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_max", 17, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    uint64_t v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          unint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          unint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionMeanOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  unint64_t v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_mean", 18, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    uint64_t v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          unint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          unint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionMinOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    long long v16 = *a7;
  }
  else {
    long long v16 = 0uLL;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  long long v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_min", 17, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    uint64_t v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          unint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          unint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionOrOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  unint64_t v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_or", 16, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    uint64_t v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          unint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          unint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionSumOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  unint64_t v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_sum", 17, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    uint64_t v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          unint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          unint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionVarianceOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  unint64_t v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_variance", 22, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    uint64_t v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          unint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          unint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::ReductionProdOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unint64_t v16 = *a7;
  }
  else {
    unint64_t v16 = 0;
  }
  uint64_t v58 = a6;
  v59[0] = 0;
  char v60 = 0;
  unint64_t v61 = v16;
  uint64_t v62 = a9;
  uint64_t v63 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v58);
    if (v60) {
      char v60 = 0;
    }
    mlir::OperationName::OperationName(v59, "mps.reduction_prod", 18, Context);
    char v60 = 1;
  }
  *(void *)&long long v64 = a4;
  *((void *)&v64 + 1) = a5;
  if (a5)
  {
    mlir::UnknownLoc::get(this, a2);
    unint64_t v18 = v61;
    long long v71 = v64;
    uint64_t v19 = mlir::ValueRange::dereference_iterator(&v71, 0);
    uint64_t v20 = 0;
    if (*((void *)&v71 + 1) >= 2uLL) {
      uint64_t v20 = mlir::ValueRange::dereference_iterator(&v71, 1);
    }
    uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = *(void **)(*v21 + 136);
    if (v22 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      && v22 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v21 = 0;
    }
    uint64_t v57 = v21;
    if (!v21) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "input type must be a tensor type");
    }
    uint64_t ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v57);
    if (v20)
    {
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        unint64_t v25 = *(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v26 = *(void **)(*(void *)v25 + 136);
        if (v26 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v26 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          unint64_t v25 = 0;
        }
        unint64_t v56 = v25;
        if (!v25) {
          return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes type must be a tensor type");
        }
        if (mlir::TensorType::hasRank((mlir::TensorType *)&v56))
        {
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
          if (v28 >= 2) {
            return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "axes tensor must have rank 0 or 1");
          }
        }
        __b = v70;
        uint64_t v69 = 0x600000000;
        if (mlir::matchConstantWithIntVector<long long>(v20, (uint64_t)&__b))
        {
          uint64_t v65 = v67;
          uint64_t v66 = 0x600000000;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
          {
            uint64_t v40 = v65;
            uint64_t v41 = v66;
            uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v57);
            uint64_t v43 = mlir::RankedTensorType::get((uint64_t)v40, v41, ElementTypeOrSelf, 0);
            uint64_t v44 = *(unsigned int *)(a11 + 8);
            if (v44 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v44 + 1, 8);
              LODWORD(v44) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v44) = v43;
            ++*(_DWORD *)(a11 + 8);
            uint64_t v29 = 1;
          }
          else
          {
            uint64_t v29 = 0;
          }
          if (v65 != v67) {
            free(v65);
          }
          goto LABEL_76;
        }
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v56)) {
          goto LABEL_58;
        }
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
        if (!v45) {
          goto LABEL_68;
        }
        if (v45 == 1)
        {
          BOOL v46 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56) == 1;
          if (!*(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
          {
            uint64_t v47 = v57;
LABEL_62:
            uint64_t v48 = *(unsigned int *)(a11 + 8);
            if (v48 >= *(_DWORD *)(a11 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v48 + 1, 8);
              LODWORD(v48) = *(_DWORD *)(a11 + 8);
            }
            *(void *)(*(void *)a11 + 8 * v48) = v47;
            ++*(_DWORD *)(a11 + 8);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_58:
          BOOL v46 = 0;
        }
        if (!v18 && !v46)
        {
          uint64_t v47 = (void *)mlir::UnrankedTensorType::get(ElementType);
          goto LABEL_62;
        }
LABEL_68:
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v50 = (__PAIR128__(v49, v18) - 1) >> 64;
        if (v49 == (v18 == 0))
        {
          unint64_t v52 = 0;
        }
        else
        {
          if (v50 >> 61) {
            abort();
          }
          size_t v51 = 8 * v50;
          unint64_t v52 = (char *)operator new(8 * v50);
          memset_pattern16(v52, &unk_1811000C0, v51);
          unint64_t v50 = (unint64_t)&v52[v51];
        }
        uint64_t v53 = mlir::RankedTensorType::get((uint64_t)v52, (uint64_t)(v50 - (void)v52) >> 3, ElementType, 0);
        uint64_t v54 = v53;
        uint64_t v55 = *(unsigned int *)(a11 + 8);
        if (v55 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v55 + 1, 8);
          *(void *)(*(void *)a11 + 8 * (*(_DWORD *)(a11 + 8))++) = v54;
          if (!v52) {
            goto LABEL_75;
          }
        }
        else
        {
          *(void *)(*(void *)a11 + 8 * v55) = v53;
          ++*(_DWORD *)(a11 + 8);
          if (!v52)
          {
LABEL_75:
            uint64_t v29 = 1;
LABEL_76:
            if (__b != v70) {
              free(__b);
            }
            return v29;
          }
        }
        operator delete(v52);
        goto LABEL_75;
      }
    }
    else
    {
      if (!v18)
      {
        uint64_t v34 = mlir::RankedTensorType::get(0, 0, ElementType, 0);
        goto LABEL_36;
      }
      if (mlir::TensorType::hasRank((mlir::TensorType *)&v57))
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
        unint64_t v32 = v31;
        __b = v70;
        HIDWORD(v69) = 4;
        if (v31 < 5)
        {
          if (v31) {
            memset_pattern16(v70, &unk_1810FE350, 8 * v31);
          }
          uint64_t v33 = v70;
        }
        else
        {
          LODWORD(v69) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v70, v31, 8);
          uint64_t v33 = __b;
          memset_pattern16(__b, &unk_1810FE350, 8 * v32);
        }
        LODWORD(v69) = v32;
        uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v33, v32, ElementType, 0);
        if (__b != v70) {
          free(__b);
        }
        goto LABEL_37;
      }
    }
    uint64_t v30 = ElementType;
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v34 = mlir::UnrankedTensorType::get(v30);
LABEL_36:
  uint64_t v35 = v34;
LABEL_37:
  uint64_t v36 = *(unsigned int *)(a11 + 8);
  if (v36 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
    LODWORD(v36) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v36) = v35;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::SortOp::inferReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v41[2] = *MEMORY[0x1E4F143B8];
  v41[0] = a4;
  v41[1] = a5;
  if (a5)
  {
    uint64_t v12 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v41, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8))
    {
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
      uint64_t v39 = v12;
      uint64_t v40 = v13;
      if (v12 && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v39) & 1) != 0)
      {
        uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v39);
        uint64_t v22 = v21;
        uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v39);
        uint64_t v24 = mlir::RankedTensorType::get(ArgAttrsAttr, v22, ElementTypeOrSelf, 0);
        uint64_t v25 = *(unsigned int *)(a11 + 8);
        if (v25 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
          LODWORD(v25) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v25) = v24;
        ++*(_DWORD *)(a11 + 8);
        uint64_t v26 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v39);
        uint64_t v28 = v27;
        uint64_t v29 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
        uint64_t v30 = mlir::RankedTensorType::get(v26, v28, v29, 0);
LABEL_18:
        uint64_t v36 = v30;
        unsigned int v37 = *(_DWORD *)(a11 + 8);
        if (v37 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
          unsigned int v37 = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v37) = v36;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v31 = mlir::ValueRange::dereference_iterator(v41, 0);
    uint64_t v32 = mlir::getElementTypeOrSelf(v31);
    uint64_t v33 = mlir::UnrankedTensorType::get(v32);
    uint64_t v34 = *(unsigned int *)(a11 + 8);
    if (v34 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v34) = v33;
    ++*(_DWORD *)(a11 + 8);
    uint64_t v35 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
    uint64_t v30 = mlir::UnrankedTensorType::get(v35);
    goto LABEL_18;
  }
  uint64_t v14 = mlir::Float32Type::get(this, a2);
  uint64_t v15 = mlir::UnrankedTensorType::get(v14);
  uint64_t v16 = *(unsigned int *)(a11 + 8);
  if (v16 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v16) = v15;
  ++*(_DWORD *)(a11 + 8);
  uint64_t v17 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
  uint64_t v18 = mlir::UnrankedTensorType::get(v17);
  uint64_t v19 = *(unsigned int *)(a11 + 8);
  if (v19 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v19 + 1, 8);
    LODWORD(v19) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v19) = v18;
LABEL_21:
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::NormalizationOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v36[2] = *MEMORY[0x1E4F143B8];
  v36[0] = a4;
  v36[1] = a5;
  if (a5 == 5)
  {
    unint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(v36, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = *(void *)(mlir::ValueRange::dereference_iterator(v36, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = *(void *)(mlir::ValueRange::dereference_iterator(v36, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = *(void *)(mlir::ValueRange::dereference_iterator(v36, 3) + 8) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(v36, 4) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = v35;
    v35[0] = v13;
    v35[1] = v14;
    v35[2] = v15;
    v35[3] = v16;
    void v35[4] = v17;
    uint64_t v34 = 0x600000005;
    uint64_t v30 = v32;
    uint64_t v31 = 0x300000000;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, 5uLL, 16);
    int v18 = v31;
    uint64_t v19 = v30;
    uint64_t v20 = (char *)v30 + 16 * v31;
    void v20[2] = xmmword_1E4FC0180;
    v20[3] = *(_OWORD *)&off_1E4FC0190;
    *uint64_t v20 = xmmword_1E4FC0160;
    v20[1] = *(_OWORD *)&off_1E4FC0170;
    v20[4] = xmmword_1E4FC01A0;
    uint64_t v21 = (v18 + 5);
    LODWORD(v31) = v18 + 5;
    mlir::ValueRange::ValueRange(v29, (uint64_t)v33, v34);
    if (v23)
    {
      uint64_t v24 = BroadcastedOperandsType;
      uint64_t v25 = *(unsigned int *)(a11 + 8);
      if (v25 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
        LODWORD(v25) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v25) = v24;
      ++*(_DWORD *)(a11 + 8);
      uint64_t v26 = 1;
      uint64_t v27 = v30;
      if (v30 == v32) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = v30;
      if (v30 == v32) {
        goto LABEL_7;
      }
    }
    free(v27);
LABEL_7:
    if (v33 != v35) {
      free(v33);
    }
    return v26;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

void *mlir::mps::anonymous namespace'::getBroadcastedOperandsType(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v11 = (void *)mlir::TypeRange::dereference_iterator(a5, 0);
  uint64_t v19 = v11;
  if (a6 >= 2)
  {
    uint64_t v12 = 1;
    unint64_t v13 = (void *)mlir::TypeRange::dereference_iterator(a5, 1);
    uint64_t BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v11, v13, 0);
    if (BroadcastedType)
    {
      uint64_t v15 = 2;
      while (1)
      {
        unint64_t v11 = (void *)BroadcastedType;
        if (a6 == v15) {
          break;
        }
        unint64_t v16 = (void *)mlir::TypeRange::dereference_iterator(a5, v15);
        uint64_t BroadcastedType = mlir::OpTrait::util::getBroadcastedType(v11, v16, 0);
        ++v15;
        if (!BroadcastedType)
        {
          uint64_t v12 = v15 - 1;
          goto LABEL_8;
        }
      }
      uint64_t v19 = (void *)BroadcastedType;
    }
    else
    {
      unint64_t v11 = v19;
LABEL_8:
      uint64_t v19 = v11;
      unint64_t v18 = mlir::TypeRange::dereference_iterator(a5, v12);
      mlir::emitOptionalError<char const(&)[13],mlir::Type &,char const(&)[6],llvm::StringRef const&,char const(&)[7],mlir::Type,char const(&)[30]>(a1, a2, "output type ", (uint64_t *)&v19, " and ", a3 + 16 * v12, " type ", (uint64_t *)&v18, " are not broadcast compatible");
      return 0;
    }
  }
  return v11;
}

uint64_t mlir::mps::NormalizationOp::verify(uint64_t **this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8)
    && (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v2 + 8), v2))
  {
    uint64_t v3 = (void *)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8)
      && (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8), v3))
    {
      uint64_t v4 = (void *)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8)
        && (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8), v4))
      {
        uint64_t v5 = (void *)(*(void *)(*(void *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8)
          && (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8), v5))
        {
          uint64_t v6 = (void *)(*(void *)(*(void *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8))
          {
            mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
            if (v6)
            {
              uint64_t v53 = &v55;
              uint64_t v55 = v2;
              unint64_t v56 = v3;
              uint64_t v57 = v4;
              v58[0] = v5;
              v58[1] = v6;
              uint64_t v54 = 0x600000005;
              unint64_t v49 = v51;
              uint64_t v50 = 0x300000000;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v51, 5uLL, 16);
              int v7 = v50;
              uint64_t v8 = v49;
              uint64_t v9 = (char *)v49 + 16 * v50;
              v9[2] = xmmword_1E4FC0180;
              v9[3] = *(_OWORD *)&off_1E4FC0190;
              *uint64_t v9 = xmmword_1E4FC0160;
              v9[1] = *(_OWORD *)&off_1E4FC0170;
              v9[4] = xmmword_1E4FC01A0;
              uint64_t v10 = (v7 + 5);
              LODWORD(v50) = v7 + 5;
              uint64_t v11 = (*this)[3];
              mlir::ValueRange::ValueRange(v48, (uint64_t)v53, v54);
              uint64_t v13 = v12;
              if (v49 != v51) {
                free(v49);
              }
              unint64_t v14 = v53;
              if (v53 == &v55) {
                return v13;
              }
LABEL_88:
              free(v14);
              return v13;
            }
          }
          unint64_t v49 = "invalid type for beta.";
          __int16 v52 = 259;
          mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
          uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
          if (v53) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
          }
          if (v63)
          {
            uint64_t v41 = (void **)__p;
            if (__p)
            {
              uint64_t v42 = v62;
              uint64_t v43 = __p;
              if (v62 != __p)
              {
                do
                  uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
                while (v42 != v41);
                uint64_t v43 = __p;
              }
              uint64_t v62 = v41;
              operator delete(v43);
            }
            unint64_t v18 = v59;
            if (v59)
            {
              uint64_t v44 = v60;
              uint64_t v20 = v59;
              if (v60 == v59) {
                goto LABEL_86;
              }
              do
              {
                BOOL v46 = (void *)*--v44;
                uint64_t v45 = v46;
                *uint64_t v44 = 0;
                if (v46) {
                  operator delete[](v45);
                }
              }
              while (v44 != v18);
              goto LABEL_85;
            }
            goto LABEL_87;
          }
        }
        else
        {
          unint64_t v49 = "invalid type for gamma.";
          __int16 v52 = 259;
          mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
          uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
          if (v53) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
          }
          if (v63)
          {
            uint64_t v35 = (void **)__p;
            if (__p)
            {
              uint64_t v36 = v62;
              unsigned int v37 = __p;
              if (v62 != __p)
              {
                do
                  uint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
                while (v36 != v35);
                unsigned int v37 = __p;
              }
              uint64_t v62 = v35;
              operator delete(v37);
            }
            unint64_t v18 = v59;
            if (v59)
            {
              uint64_t v38 = v60;
              uint64_t v20 = v59;
              if (v60 == v59) {
                goto LABEL_86;
              }
              do
              {
                uint64_t v40 = (void *)*--v38;
                uint64_t v39 = v40;
                *uint64_t v38 = 0;
                if (v40) {
                  operator delete[](v39);
                }
              }
              while (v38 != v18);
              goto LABEL_85;
            }
            goto LABEL_87;
          }
        }
      }
      else
      {
        unint64_t v49 = "invalid type for variance.";
        __int16 v52 = 259;
        mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
        uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
        if (v53) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
        }
        if (v63)
        {
          uint64_t v29 = (void **)__p;
          if (__p)
          {
            uint64_t v30 = v62;
            uint64_t v31 = __p;
            if (v62 != __p)
            {
              do
                uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
              while (v30 != v29);
              uint64_t v31 = __p;
            }
            uint64_t v62 = v29;
            operator delete(v31);
          }
          unint64_t v18 = v59;
          if (v59)
          {
            uint64_t v32 = v60;
            uint64_t v20 = v59;
            if (v60 == v59) {
              goto LABEL_86;
            }
            do
            {
              uint64_t v34 = (void *)*--v32;
              uint64_t v33 = v34;
              *uint64_t v32 = 0;
              if (v34) {
                operator delete[](v33);
              }
            }
            while (v32 != v18);
            goto LABEL_85;
          }
          goto LABEL_87;
        }
      }
    }
    else
    {
      unint64_t v49 = "invalid type for mean.";
      __int16 v52 = 259;
      mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
      if (v53) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
      }
      if (v63)
      {
        char v23 = (void **)__p;
        if (__p)
        {
          uint64_t v24 = v62;
          uint64_t v25 = __p;
          if (v62 != __p)
          {
            do
              uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            uint64_t v25 = __p;
          }
          uint64_t v62 = v23;
          operator delete(v25);
        }
        unint64_t v18 = v59;
        if (v59)
        {
          uint64_t v26 = v60;
          uint64_t v20 = v59;
          if (v60 == v59) {
            goto LABEL_86;
          }
          do
          {
            uint64_t v28 = (void *)*--v26;
            uint64_t v27 = v28;
            *uint64_t v26 = 0;
            if (v28) {
              operator delete[](v27);
            }
          }
          while (v26 != v18);
          goto LABEL_85;
        }
        goto LABEL_87;
      }
    }
  }
  else
  {
    unint64_t v49 = "invalid type for input.";
    __int16 v52 = 259;
    mlir::OpState::emitOpError(this, (const void ***)&v49, (uint64_t)&v53);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v53);
    if (v53) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v53);
    }
    if (v63)
    {
      uint64_t v15 = (void **)__p;
      if (__p)
      {
        unint64_t v16 = v62;
        unint64_t v17 = __p;
        if (v62 != __p)
        {
          do
            unint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          unint64_t v17 = __p;
        }
        uint64_t v62 = v15;
        operator delete(v17);
      }
      unint64_t v18 = v59;
      if (v59)
      {
        uint64_t v19 = v60;
        uint64_t v20 = v59;
        if (v60 == v59) {
          goto LABEL_86;
        }
        do
        {
          uint64_t v22 = (void *)*--v19;
          uint64_t v21 = v22;
          *uint64_t v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
LABEL_85:
        uint64_t v20 = v59;
LABEL_86:
        char v60 = v18;
        operator delete(v20);
      }
LABEL_87:
      unint64_t v14 = v56;
      if (v56 == v58) {
        return v13;
      }
      goto LABEL_88;
    }
  }
  return v13;
}

uint64_t mlir::mps::InstanceNormOp::verify(uint64_t **this)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(*(void *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v3 = 0;
  }
  unint64_t v42 = v3;
  unint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  int v7 = *(void **)(*(void *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v6 = 0;
  }
  unint64_t v41 = v6;
  if (v3) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    uint64_t v43 = (const void **)"input and axes type must be a tensor type";
    __int16 v46 = 259;
    mlir::OpState::emitOpError(this, &v43, (uint64_t)v47);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
    if (v47[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
    if (!v55) {
      return v10;
    }
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v54;
      uint64_t v13 = __p;
      if (v54 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      uint64_t v54 = v11;
      operator delete(v13);
    }
    unint64_t v14 = v51;
    if (!v51) {
      goto LABEL_60;
    }
    uint64_t v15 = v52;
    unint64_t v16 = v51;
    if (v52 == v51) {
      goto LABEL_59;
    }
    do
    {
      unint64_t v18 = (void *)*--v15;
      unint64_t v17 = v18;
      *uint64_t v15 = 0;
      if (v18) {
        operator delete[](v17);
      }
    }
    while (v15 != v14);
    goto LABEL_58;
  }
  if (mlir::TensorType::hasRank((mlir::TensorType *)&v41))
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
    if (v20 >= 2)
    {
      uint64_t v43 = (const void **)"axes tensor must have rank 0 or 1";
      __int16 v46 = 259;
      mlir::OpState::emitOpError(this, &v43, (uint64_t)v47);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
      if (!v55) {
        return v10;
      }
      uint64_t v21 = (void **)__p;
      if (__p)
      {
        uint64_t v22 = v54;
        char v23 = __p;
        if (v54 != __p)
        {
          do
            uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          char v23 = __p;
        }
        uint64_t v54 = v21;
        operator delete(v23);
      }
      unint64_t v14 = v51;
      if (!v51) {
        goto LABEL_60;
      }
      uint64_t v24 = v52;
      unint64_t v16 = v51;
      if (v52 == v51)
      {
LABEL_59:
        __int16 v52 = v14;
        operator delete(v16);
LABEL_60:
        uint64_t v35 = (const void **)v49;
        if (v49 != &v50)
        {
LABEL_61:
          free(v35);
          return v10;
        }
        return v10;
      }
      do
      {
        uint64_t v26 = (void *)*--v24;
        uint64_t v25 = v26;
        *uint64_t v24 = 0;
        if (v26) {
          operator delete[](v25);
        }
      }
      while (v24 != v14);
LABEL_58:
      unint64_t v16 = v51;
      goto LABEL_59;
    }
  }
  if (!mlir::TensorType::hasRank((mlir::TensorType *)&v41)
    || !mlir::TensorType::hasRank((mlir::TensorType *)&v42)
    || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41), v27 < 1)
    || (uint64_t v28 = *(void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41),
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42),
        v28 <= v29))
  {
    uint64_t v43 = (const void **)v45;
    uint64_t v44 = 0x400000000;
    if (!mlir::TensorType::hasRank((mlir::TensorType *)&v42)
      || !mlir::matchConstantWithIntVector<long long>(*(void *)((*this)[9] + 56), (uint64_t)&v43))
    {
      goto LABEL_56;
    }
    v47[0] = &v48;
    v47[1] = (void *)0x600000000;
    uint64_t v31 = (uint64_t *)v43;
    uint64_t v32 = v44;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
    if (v47[0] != &v48) {
      free(v47[0]);
    }
    if (!PositiveAxes)
    {
      uint64_t v10 = 0;
      uint64_t v35 = v43;
      if (v43 == (const void **)v45) {
        return v10;
      }
    }
    else
    {
LABEL_56:
      uint64_t v10 = 1;
      uint64_t v35 = v43;
      if (v43 == (const void **)v45) {
        return v10;
      }
    }
    goto LABEL_61;
  }
  uint64_t v38 = *(const char **)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v41);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v42);
  unsigned int v37 = v30;
  llvm::formatv<long long,long long>("axes tensor shape {0} is incompatible with input rank of {1}", &v38, &v37, (const char **)&v43);
  __int16 v40 = 263;
  uint64_t v39 = &v43;
  mlir::OpState::emitOpError(this, (const void ***)&v39, (uint64_t)v47);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v47);
  return v10;
}

const char *llvm::formatv<long long,long long>@<X0>(const char *__s@<X0>, const char **a2@<X1>, const char **a3@<X2>, const char **a4@<X8>)
{
  unint64_t v6 = __s;
  if (__s) {
    __s = (const char *)strlen(__s);
  }
  uint64_t v8 = *a2;
  BOOL v9 = *a3;
  *a4 = v6;
  a4[1] = __s;
  a4[8] = (const char *)(a4 + 4);
  a4[2] = (const char *)(a4 + 8);
  a4[3] = (const char *)2;
  a4[4] = (const char *)&unk_1EC9A4708;
  a4[5] = v8;
  a4[6] = (const char *)&unk_1EC9A4708;
  a4[7] = v9;
  a4[9] = (const char *)(a4 + 6);
  return __s;
}

uint64_t mlir::mps::inferConv2DParams(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, unsigned int *a13, uint64_t a14, uint64_t a15)
{
  v125[4] = *MEMORY[0x1E4F143B8];
  uint64_t v123 = v125;
  uint64_t v124 = 0x400000000;
  int64_t v120 = v122;
  uint64_t v121 = 0x400000000;
  int64_t v117 = v119;
  uint64_t v118 = 0x800000000;
  if (a5) {
    mlir::getIntValues<long long>(a5, a6, (uint64_t)&v123, 1);
  }
  if (a7) {
    mlir::getIntValues<long long>(a7, a8, (uint64_t)&v120, 1);
  }
  if (a9) {
    mlir::getIntValues<long long>(a9, a10, (uint64_t)&v117, 1);
  }
  if (!v121)
  {
LABEL_11:
    uint64_t v22 = a15;
    uint64_t v23 = (uint64_t)a13;
    if (a11 != 1)
    {
      if (a11)
      {
        uint64_t v32 = mlir::emitOptionalError<char const(&)[39]>(a1, a2, "Unsupported dataLayout");
        uint64_t v33 = v117;
        if (v117 == v119) {
          goto LABEL_145;
        }
        goto LABEL_144;
      }
      uint64_t v24 = a13[2];
      if (v24 == 4)
      {
        uint64_t v25 = *(unsigned int *)(a14 + 8);
        BOOL v26 = v25 > 2;
        if (v25 == 2) {
          goto LABEL_15;
        }
LABEL_45:
        if (v26)
        {
          *(_DWORD *)(a14 + 8) = 2;
          uint64_t v27 = *(unsigned int *)(v22 + 8);
          BOOL v28 = v27 > 2;
          if (v27 != 2) {
            goto LABEL_59;
          }
        }
        else
        {
          uint64_t v110 = v23;
          uint64_t v48 = v25;
          int v49 = v25;
          if (*(_DWORD *)(a14 + 12) <= 1u)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a14, (void *)(a14 + 16), 2uLL, 8);
            uint64_t v48 = *(unsigned int *)(a14 + 8);
            int v49 = *(_DWORD *)(a14 + 8);
          }
          memset_pattern16((void *)(*(void *)a14 + 8 * v48), &unk_1810FE350, 16 - 8 * v25);
          uint64_t v23 = v110;
          *(_DWORD *)(a14 + 8) = v49 - v25 + 2;
          uint64_t v27 = *(unsigned int *)(v22 + 8);
          BOOL v28 = v27 > 2;
          if (v27 != 2) {
            goto LABEL_59;
          }
        }
LABEL_16:
        if (*(_DWORD *)(a12 + 12) <= 3u) {
          goto LABEL_17;
        }
LABEL_72:
        if (!a4) {
          goto LABEL_77;
        }
        goto LABEL_73;
      }
      if (v24 <= 4)
      {
        uint64_t v42 = a13[2];
        unsigned int v43 = a13[2];
        if (a13[3] <= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a13, a13 + 4, 4uLL, 8);
          uint64_t v23 = (uint64_t)a13;
          uint64_t v42 = a13[2];
          unsigned int v43 = a13[2];
        }
        uint64_t v44 = v23;
        bzero((void *)(*(void *)v23 + 8 * v42), 32 - 8 * v24);
        uint64_t v23 = v44;
        uint64_t v22 = a15;
        *(_DWORD *)(v23 + 8) = v43 - v24 + 4;
        uint64_t v25 = *(unsigned int *)(a14 + 8);
        BOOL v26 = v25 > 2;
        if (v25 != 2) {
          goto LABEL_45;
        }
      }
      else
      {
        a13[2] = 4;
        uint64_t v25 = *(unsigned int *)(a14 + 8);
        BOOL v26 = v25 > 2;
        if (v25 != 2) {
          goto LABEL_45;
        }
      }
LABEL_15:
      uint64_t v27 = *(unsigned int *)(v22 + 8);
      BOOL v28 = v27 > 2;
      if (v27 == 2) {
        goto LABEL_16;
      }
LABEL_59:
      if (v28)
      {
        *(_DWORD *)(v22 + 8) = 2;
        if (*(_DWORD *)(a12 + 12) > 3u) {
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v112 = v23;
        uint64_t v53 = v27;
        int v54 = v27;
        if (*(_DWORD *)(v22 + 12) <= 1u)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v22, (void *)(v22 + 16), 2uLL, 8);
          uint64_t v53 = *(unsigned int *)(v22 + 8);
          int v54 = *(_DWORD *)(v22 + 8);
        }
        memset_pattern16((void *)(*(void *)v22 + 8 * v53), &unk_1810FE350, 16 - 8 * v27);
        uint64_t v23 = v112;
        *(_DWORD *)(v22 + 8) = v54 - v27 + 2;
        if (*(_DWORD *)(a12 + 12) > 3u) {
          goto LABEL_72;
        }
      }
LABEL_17:
      uint64_t v29 = v23;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a12, (void *)(a12 + 16), 4uLL, 8);
      uint64_t v23 = v29;
      if (!a4) {
        goto LABEL_77;
      }
LABEL_73:
      char v55 = (void *)(a12 + 16);
      unsigned int v56 = *(_DWORD *)(a12 + 8);
      uint64_t v57 = 8 * a4;
      do
      {
        uint64_t v58 = *a3;
        if (v56 >= *(_DWORD *)(a12 + 12))
        {
          uint64_t v109 = v22;
          uint64_t v113 = v23;
          uint64_t v59 = v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a12, v55, v56 + 1, 8);
          char v55 = v59;
          uint64_t v23 = v113;
          uint64_t v22 = v109;
          unsigned int v56 = *(_DWORD *)(a12 + 8);
        }
        *(void *)(*(void *)a12 + 8 * v56) = v58;
        unsigned int v56 = *(_DWORD *)(a12 + 8) + 1;
        *(_DWORD *)(a12 + 8) = v56;
        ++a3;
        v57 -= 8;
      }
      while (v57);
LABEL_77:
      if (a5 && v124)
      {
        uint64_t v60 = 0;
        unint64_t v61 = v123;
        uint64_t v62 = *(void **)a14;
        uint64_t v63 = *(void *)a14 + 8;
        uint64_t v64 = 8 * v124;
        while (2)
        {
          uint64_t v66 = v61[v60];
          uint64_t v65 = v62;
          switch((int)v60)
          {
            case 0:
              if (v66 == 1) {
                goto LABEL_82;
              }
              uint64_t v30 = "stride != 1 not supported for dim 3 of NCHW";
              goto LABEL_20;
            case 1:
              if (v66 == 1) {
                goto LABEL_82;
              }
              uint64_t v30 = "stride != 1 not supported for dim 2 of NCHW";
              goto LABEL_20;
            case 2:
              goto LABEL_81;
            case 3:
              uint64_t v65 = (void *)v63;
LABEL_81:
              void *v65 = v66;
LABEL_82:
              ++v60;
              v64 -= 8;
              if (v64) {
                continue;
              }
              goto LABEL_88;
            default:
              uint64_t v30 = "stride attr num dimensions should be <= 4";
              goto LABEL_20;
          }
        }
      }
LABEL_88:
      if (a7 && v121)
      {
        uint64_t v67 = 0;
        uint64_t v68 = v120;
        uint64_t v69 = *(void **)v22;
        uint64_t v70 = *(void *)v22 + 8;
        uint64_t v71 = 8 * v121;
        while (2)
        {
          uint64_t v73 = v68[v67];
          uint64_t v72 = v69;
          switch((int)v67)
          {
            case 0:
              if (v73 != 1) {
                goto LABEL_153;
              }
              goto LABEL_93;
            case 1:
              if (v73 == 1) {
                goto LABEL_93;
              }
              uint64_t v30 = "dilationRate != 1 not supported for dim 2";
              goto LABEL_20;
            case 2:
              goto LABEL_92;
            case 3:
              uint64_t v72 = (void *)v70;
LABEL_92:
              void *v72 = v73;
LABEL_93:
              ++v67;
              v71 -= 8;
              if (v71) {
                continue;
              }
              goto LABEL_99;
            default:
              goto LABEL_152;
          }
        }
      }
LABEL_99:
      if (a9 && v118)
      {
        uint64_t v74 = 0;
        unint64_t v75 = v117;
        uint64_t v76 = *(void **)v23;
        uint64_t v77 = *(void *)v23 + 24;
        uint64_t v78 = *(void *)v23 + 16;
        uint64_t v79 = *(void *)v23 + 8;
        uint64_t v80 = 8 * v118;
        do
        {
          uint64_t v81 = v76;
          switch((int)v74)
          {
            case 4:
              goto LABEL_103;
            case 5:
              uint64_t v81 = (void *)v79;
              goto LABEL_103;
            case 6:
              uint64_t v81 = (void *)v78;
              goto LABEL_103;
            case 7:
              uint64_t v81 = (void *)v77;
LABEL_103:
              *uint64_t v81 = *(void *)&v75[8 * v74];
              break;
            default:
              break;
          }
          ++v74;
          v80 -= 8;
        }
        while (v80);
        goto LABEL_150;
      }
      goto LABEL_143;
    }
    unsigned int v34 = *(_DWORD *)(a12 + 8);
    if (v34 == 4)
    {
      uint64_t v35 = a13[2];
      BOOL v36 = v35 > 4;
      if (v35 == 4) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v34 <= 4)
      {
        if (*(_DWORD *)(a12 + 12) > 3u
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a12, (void *)(a12 + 16), 4uLL, 8),
              uint64_t v23 = (uint64_t)a13,
              unsigned int v34 = *(_DWORD *)(a12 + 8),
              v34 != 4))
        {
          uint64_t v41 = v23;
          bzero((void *)(*(void *)a12 + 8 * v34), 32 - 8 * v34);
          uint64_t v23 = v41;
        }
      }
      *(_DWORD *)(a12 + 8) = 4;
      uint64_t v35 = *(unsigned int *)(v23 + 8);
      BOOL v36 = v35 > 4;
      if (v35 == 4)
      {
LABEL_25:
        uint64_t v37 = *(unsigned int *)(a14 + 8);
        BOOL v38 = v37 > 2;
        if (v37 == 2) {
          goto LABEL_26;
        }
LABEL_52:
        if (v38)
        {
          *(_DWORD *)(a14 + 8) = 2;
          uint64_t v39 = *(unsigned int *)(v22 + 8);
          BOOL v40 = v39 > 2;
          if (v39 == 2) {
            goto LABEL_112;
          }
        }
        else
        {
          uint64_t v111 = v23;
          uint64_t v50 = v37;
          int v51 = v37;
          if (*(_DWORD *)(a14 + 12) <= 1u)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a14, (void *)(a14 + 16), 2uLL, 8);
            uint64_t v50 = *(unsigned int *)(a14 + 8);
            int v51 = *(_DWORD *)(a14 + 8);
          }
          memset_pattern16((void *)(*(void *)a14 + 8 * v50), &unk_1810FE350, 16 - 8 * v37);
          uint64_t v23 = v111;
          *(_DWORD *)(a14 + 8) = v51 - v37 + 2;
          uint64_t v39 = *(unsigned int *)(v22 + 8);
          BOOL v40 = v39 > 2;
          if (v39 == 2)
          {
LABEL_112:
            uint64_t v84 = *(uint64_t **)a12;
            uint64_t *v84 = *a3;
            v84[1] = a3[3];
            unint64_t v84[2] = a3[1];
            v84[3] = a3[2];
            if (a5 && v124)
            {
              uint64_t v85 = 0;
              uint64_t v86 = v123;
              long long v87 = *(void **)a14;
              uint64_t v88 = *(void *)a14 + 8;
              uint64_t v89 = 8 * v124;
              while (1)
              {
                uint64_t v91 = v86[v85];
                uint64_t v90 = v87;
                switch((int)v85)
                {
                  case 0:
                    if (v91 == 1) {
                      goto LABEL_117;
                    }
                    uint64_t v30 = "stride != 1 not supported for dim 3";
                    goto LABEL_20;
                  case 1:
                    goto LABEL_116;
                  case 2:
                    uint64_t v90 = (void *)v88;
LABEL_116:
                    void *v90 = v91;
                    goto LABEL_117;
                  case 3:
                    if (v91 != 1)
                    {
                      uint64_t v30 = "stride != 1 not supported for dim 0";
                      goto LABEL_20;
                    }
LABEL_117:
                    ++v85;
                    v89 -= 8;
                    if (!v89) {
                      goto LABEL_123;
                    }
                    break;
                  default:
                    uint64_t v31 = mlir::emitOptionalError<char const(&)[39]>(a1, a2, "stride num dimensions should be <= 4");
                    goto LABEL_21;
                }
              }
            }
LABEL_123:
            if (a7 && v121)
            {
              uint64_t v92 = 0;
              unsigned int v93 = v120;
              uint64_t v94 = *(void **)v22;
              uint64_t v95 = *(void *)v22 + 8;
              uint64_t v96 = 8 * v121;
              while (1)
              {
                uint64_t v98 = v93[v92];
                unsigned int v97 = v94;
                switch((int)v92)
                {
                  case 0:
                    if (v98 == 1) {
                      goto LABEL_128;
                    }
LABEL_153:
                    uint64_t v30 = "dilationRate != 1 not supported for dim 3";
                    goto LABEL_20;
                  case 1:
                    goto LABEL_127;
                  case 2:
                    unsigned int v97 = (void *)v95;
LABEL_127:
                    *unsigned int v97 = v98;
                    goto LABEL_128;
                  case 3:
                    if (v98 != 1)
                    {
                      uint64_t v30 = "dilationRate != 1 not supported for dim 0";
                      goto LABEL_20;
                    }
LABEL_128:
                    ++v92;
                    v96 -= 8;
                    if (!v96) {
                      goto LABEL_134;
                    }
                    break;
                  default:
LABEL_152:
                    uint64_t v31 = mlir::emitOptionalError<char const(&)[43]>(a1, a2, "dilationRate num dimensions should be <= 4");
                    goto LABEL_21;
                }
              }
            }
LABEL_134:
            if (a9 && v118)
            {
              uint64_t v99 = 0;
              uint64_t v100 = v117;
              uint64_t v101 = *(void **)v23;
              uint64_t v102 = *(void *)v23 + 24;
              uint64_t v103 = *(void *)v23 + 16;
              uint64_t v104 = *(void *)v23 + 8;
              uint64_t v105 = 8 * v118;
              do
              {
                unint64_t v106 = v101;
                switch((int)v99)
                {
                  case 2:
                    goto LABEL_138;
                  case 3:
                    unint64_t v106 = (void *)v104;
                    goto LABEL_138;
                  case 4:
                    unint64_t v106 = (void *)v103;
                    goto LABEL_138;
                  case 5:
                    unint64_t v106 = (void *)v102;
LABEL_138:
                    void *v106 = *(void *)&v100[8 * v99];
                    break;
                  default:
                    break;
                }
                ++v99;
                v105 -= 8;
              }
              while (v105);
LABEL_150:
              uint64_t v32 = 1;
              uint64_t v33 = v117;
              if (v117 == v119) {
                goto LABEL_145;
              }
LABEL_144:
              free(v33);
              goto LABEL_145;
            }
LABEL_143:
            uint64_t v32 = 1;
            uint64_t v33 = v117;
            if (v117 == v119) {
              goto LABEL_145;
            }
            goto LABEL_144;
          }
        }
LABEL_66:
        if (v40)
        {
          int v52 = 2;
        }
        else
        {
          uint64_t v114 = v23;
          uint64_t v82 = v39;
          int v83 = v39;
          if (*(_DWORD *)(v22 + 12) <= 1u)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v22, (void *)(v22 + 16), 2uLL, 8);
            uint64_t v82 = *(unsigned int *)(v22 + 8);
            int v83 = *(_DWORD *)(v22 + 8);
          }
          memset_pattern16((void *)(*(void *)v22 + 8 * v82), &unk_1810FE350, 16 - 8 * v39);
          int v52 = v83 - v39 + 2;
          uint64_t v23 = v114;
        }
        *(_DWORD *)(v22 + 8) = v52;
        goto LABEL_112;
      }
    }
    if (v36)
    {
      *(_DWORD *)(v23 + 8) = 4;
      uint64_t v37 = *(unsigned int *)(a14 + 8);
      BOOL v38 = v37 > 2;
      if (v37 != 2) {
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v45 = v35;
      int v46 = v35;
      if (*(_DWORD *)(v23 + 12) <= 3u)
      {
        uint64_t v108 = v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v23, (void *)(v23 + 16), 4uLL, 8);
        uint64_t v23 = v108;
        uint64_t v45 = *(unsigned int *)(v108 + 8);
        int v46 = *(_DWORD *)(v108 + 8);
      }
      uint64_t v47 = v23;
      bzero((void *)(*(void *)v23 + 8 * v45), 32 - 8 * v35);
      uint64_t v23 = v47;
      uint64_t v22 = a15;
      *(_DWORD *)(v23 + 8) = v46 - v35 + 4;
      uint64_t v37 = *(unsigned int *)(a14 + 8);
      BOOL v38 = v37 > 2;
      if (v37 != 2) {
        goto LABEL_52;
      }
    }
LABEL_26:
    uint64_t v39 = *(unsigned int *)(v22 + 8);
    BOOL v40 = v39 > 2;
    if (v39 == 2) {
      goto LABEL_112;
    }
    goto LABEL_66;
  }
  uint64_t v20 = (uint64_t *)v120;
  uint64_t v21 = 8 * v121;
  while (*v20 > 0)
  {
    ++v20;
    v21 -= 8;
    if (!v21) {
      goto LABEL_11;
    }
  }
  uint64_t v30 = "dilationRate must be > 0 for all dimensions";
LABEL_20:
  uint64_t v31 = mlir::emitOptionalError<char const(&)[39]>(a1, a2, v30);
LABEL_21:
  uint64_t v32 = v31;
  uint64_t v33 = v117;
  if (v117 != v119) {
    goto LABEL_144;
  }
LABEL_145:
  if (v120 != v122) {
    free(v120);
  }
  if (v123 != v125) {
    free(v123);
  }
  return v32;
}

uint64_t mlir::mps::Conv2DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v93 = a4;
  unint64_t v94 = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
    uint64_t v19 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v19 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v82 = a6;
  v83[0] = 0;
  char v84 = 0;
  long long v85 = v16;
  long long v86 = v17;
  long long v87 = v18;
  uint64_t v88 = v19;
  uint64_t v89 = a9;
  unint64_t v20 = a5;
  uint64_t v90 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v82);
    if (v84) {
      char v84 = 0;
    }
    mlir::OperationName::OperationName(v83, "mps.conv_2d", 11, Context);
    char v84 = 1;
    unint64_t v20 = v94;
  }
  uint64_t v91 = a4;
  unint64_t v92 = a5;
  if (v20 >= 2
    && (uint64_t v22 = mlir::UnknownLoc::get(this, a2), mlir::mps::Conv2DOpAdaptor::verify(&v82, v22)))
  {
    uint64_t v24 = (void *)*((void *)&v85 + 1);
    uint64_t v23 = (void *)v86;
    uint64_t v25 = (void *)*((void *)&v87 + 1);
    v80[0] = *((void **)&v86 + 1);
    mlir::IntegerAttr::getValue(v80, (llvm::APInt *)__p);
    if (LODWORD(__p[1]) > 0x40)
    {
      unint64_t v61 = *(void **)__p[0];
      operator delete[](__p[0]);
    }
    else
    {
      unint64_t v61 = __p[0];
    }
    int v29 = *(_DWORD *)(v85 + 8);
    int v59 = *(_DWORD *)(v88 + 8);
    int v60 = *(_DWORD *)(v87 + 8);
    uint64_t v30 = mlir::ValueRange::dereference_iterator(&v93, 0);
    uint64_t v58 = mlir::ValueRange::dereference_iterator(&v93, 1);
    uint64_t v31 = (void *)(*(void *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8))
    {
      uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
      uint64_t v72 = v31;
      uint64_t v73 = v32;
      if (v31 && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v72) & 1) != 0)
      {
        uint64_t ArgAttrsAttr = operator new(0x20uLL);
        unsigned int v34 = ArgAttrsAttr;
        *uint64_t ArgAttrsAttr = 0u;
        ArgAttrsAttr[1] = 0u;
        if (v72)
        {
          uint64_t ArgAttrsAttr = (_OWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v72);
          if (v35 != 4)
          {
            uint64_t v36 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2DOp input should be rank 4");
LABEL_50:
            operator delete(v34);
            return v36;
          }
        }
        unsigned int v56 = (uint64_t *)ArgAttrsAttr;
        v80[0] = v81;
        v80[1] = (void *)0x400000000;
        v78[0] = v79;
        v78[1] = (void *)0x400000000;
        v76[0] = v77;
        v76[1] = (void *)0x200000000;
        v74[0] = v75;
        v74[1] = (void *)0x200000000;
        if (v25)
        {
          uint64_t v55 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8);
          uint64_t v57 = v34;
          if (v24) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v57 = v34;
          if (v24)
          {
LABEL_33:
            uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v24 + 8);
            if (v23)
            {
LABEL_34:
              uint64_t v43 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v23 + 8);
              goto LABEL_38;
            }
LABEL_37:
            uint64_t v43 = 0;
            if (!mlir::mps::inferConv2DParams((uint64_t)a2, a3, v56, 4, (uint64_t)v25, v55, (uint64_t)v24, v42, (uint64_t)v23, v43, v29, (uint64_t)v80, (unsigned int *)v78, (uint64_t)v76, (uint64_t)v74))goto LABEL_41; {
LABEL_38:
            }
            unint64_t v44 = *((void *)v78[0] + 2);
            unint64_t v45 = *((void *)v78[0] + 3);
            unint64_t v46 = *(void *)v78[0];
            unint64_t v47 = *((void *)v78[0] + 1);
            unint64_t v49 = *(void *)v76[0];
            unint64_t v48 = *((void *)v76[0] + 1);
            uint64_t v51 = *(void *)v74[0];
            uint64_t v50 = *((void *)v74[0] + 1);
            uint64_t v71 = 0;
            long long v69 = 0u;
            long long v70 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            *(_OWORD *)__p = 0u;
            long long v64 = 0u;
            mlir::mps::buildConv2DDescriptor(v30, v58, (uint64_t)v61, v48, v49, v50, v51, v44, (uint64_t)__p, v45, v46, v47, v60, v29, v59, 0, 0, 0, 0);
            uint64_t v62 = 0;
            int v52 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v93, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v53 = mlir::ValueRange::dereference_iterator(&v93, 1);
            {
              llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)a11, v62);
              uint64_t v36 = 1;
            }
            else
            {
LABEL_41:
              uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v30);
            }
            unsigned int v34 = v57;
            if (v74[0] != v75) {
              free(v74[0]);
            }
            if (v76[0] != v77) {
              free(v76[0]);
            }
            if (v78[0] != v79) {
              free(v78[0]);
            }
            if (v80[0] != v81) {
              free(v80[0]);
            }
            goto LABEL_50;
          }
        }
        uint64_t v42 = 0;
        if (v23) {
          goto LABEL_34;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v72 = 0;
      uint64_t v73 = 0;
    }
    uint64_t v37 = mlir::getElementTypeOrSelf(v30);
    if (!v37) {
      uint64_t v37 = mlir::Float32Type::get(this, v38);
    }
    uint64_t v39 = mlir::UnrankedTensorType::get(v37);
    unsigned int v40 = a11[2];
    if (v40 >= a11[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v40 + 1, 8);
      unsigned int v40 = a11[2];
    }
    *(void *)(*(void *)a11 + 8 * v40) = v39;
  }
  else
  {
    uint64_t v26 = mlir::Float32Type::get(this, a2);
    uint64_t v27 = mlir::UnrankedTensorType::get(v26);
    uint64_t v28 = a11[2];
    if (v28 >= a11[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, v28 + 1, 8);
      LODWORD(v28) = a11[2];
    }
    *(void *)(*(void *)a11 + 8 * v28) = v27;
  }
  ++a11[2];
  return 1;
}

uint64_t mlir::mps::Conv2DOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    unint64_t v3 = (const char *)a1[4];
    if (v3)
    {
      uint64_t v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            uint64_t v5 = (const char *)a1[8];
            if (v5)
            {
              if (a1[9])
              {
                uint64_t v62 = (const char *)a1[6];
                uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
                  uint64_t v62 = v5;
                  uint64_t v63 = v6;
                  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  uint64_t v8 = Type;
                  if (Type) {
                    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  }
                  uint64_t Value = (uint64_t)v8;
                  long long v68 = Type;
                  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v65[0] = 4;
                  if (v10 == 1
                    && *ArgAttrsAttr == v65[0]
                    && (int v60 = v5,
                        *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                        *((void *)&v66 + 1) = v11,
                        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                  {
                    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
                    uint64_t v62 = v3;
                    uint64_t v63 = v12;
                    uint64_t v13 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                    unint64_t v14 = v13;
                    if (v13) {
                      uint64_t v13 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                    }
                    uint64_t Value = (uint64_t)v14;
                    long long v68 = v13;
                    uint64_t v15 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v65[0] = 4;
                    if (v16 == 1
                      && *v15 == v65[0]
                      && (int v60 = v3,
                          *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                          *((void *)&v66 + 1) = v17,
                          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                    {
                      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                      uint64_t v62 = v4;
                      uint64_t v63 = v18;
                      uint64_t v19 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                      unint64_t v20 = v19;
                      if (v19) {
                        uint64_t v19 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                      }
                      uint64_t Value = (uint64_t)v20;
                      long long v68 = v19;
                      uint64_t v21 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      long long v66 = xmmword_18110B5E0;
                      if (v22 == 2 && *v21 == (void)v66 && v21[1] == *((void *)&v66 + 1))
                      {
                        int v60 = v4;
                        v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                        v65[1] = v24;
                        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
                          return 1;
                        }
                      }
                      int v59 = "'mps.conv_2d' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements at"
                            "tribute of shape {4, 2}";
                    }
                    else
                    {
                      int v59 = "'mps.conv_2d' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attr"
                            "ibute of shape {4}";
                    }
                  }
                  else
                  {
                    int v59 = "'mps.conv_2d' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
                  }
                }
                else
                {
                  int v59 = "'mps.conv_2d' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned integer attribute";
                }
              }
              else
              {
                int v59 = "'mps.conv_2d' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              int v59 = "'mps.conv_2d' op requires attribute 'strides'";
            }
            uint64_t v62 = v59;
            __int16 v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
            uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v25;
          }
          uint64_t v62 = "'mps.conv_2d' op requires attribute 'padding_style'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v75)
          {
            int v52 = (void **)__p;
            if (__p)
            {
              uint64_t v53 = v74;
              int v54 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                int v54 = __p;
              }
              uint64_t v74 = v52;
              operator delete(v54);
            }
            int v29 = v71;
            if (!v71) {
              goto LABEL_101;
            }
            uint64_t v55 = v72;
            uint64_t v31 = v71;
            if (v72 == v71)
            {
LABEL_100:
              uint64_t v72 = v29;
              operator delete(v31);
LABEL_101:
              if (v69 != &v70) {
                free(v69);
              }
              return v25;
            }
            do
            {
              uint64_t v57 = (void *)*--v55;
              unsigned int v56 = v57;
              *uint64_t v55 = 0;
              if (v57) {
                operator delete[](v56);
              }
            }
            while (v55 != v29);
LABEL_99:
            uint64_t v31 = v71;
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v62 = "'mps.conv_2d' op requires attribute 'groups'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v75)
          {
            unint64_t v46 = (void **)__p;
            if (__p)
            {
              unint64_t v47 = v74;
              unint64_t v48 = __p;
              if (v74 != __p)
              {
                do
                  unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                unint64_t v48 = __p;
              }
              uint64_t v74 = v46;
              operator delete(v48);
            }
            int v29 = v71;
            if (!v71) {
              goto LABEL_101;
            }
            unint64_t v49 = v72;
            uint64_t v31 = v71;
            if (v72 == v71) {
              goto LABEL_100;
            }
            do
            {
              uint64_t v51 = (void *)*--v49;
              uint64_t v50 = v51;
              void *v49 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v49 != v29);
            goto LABEL_99;
          }
        }
      }
      else
      {
        uint64_t v62 = "'mps.conv_2d' op requires attribute 'explicit_padding'";
        __int16 v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
        uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        }
        if (v75)
        {
          unsigned int v40 = (void **)__p;
          if (__p)
          {
            uint64_t v41 = v74;
            uint64_t v42 = __p;
            if (v74 != __p)
            {
              do
                uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              uint64_t v42 = __p;
            }
            uint64_t v74 = v40;
            operator delete(v42);
          }
          int v29 = v71;
          if (!v71) {
            goto LABEL_101;
          }
          uint64_t v43 = v72;
          uint64_t v31 = v71;
          if (v72 == v71) {
            goto LABEL_100;
          }
          do
          {
            unint64_t v45 = (void *)*--v43;
            unint64_t v44 = v45;
            *uint64_t v43 = 0;
            if (v45) {
              operator delete[](v44);
            }
          }
          while (v43 != v29);
          goto LABEL_99;
        }
      }
    }
    else
    {
      uint64_t v62 = "'mps.conv_2d' op requires attribute 'dilation_rates'";
      __int16 v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v75)
      {
        unsigned int v34 = (void **)__p;
        if (__p)
        {
          uint64_t v35 = v74;
          uint64_t v36 = __p;
          if (v74 != __p)
          {
            do
              uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            uint64_t v36 = __p;
          }
          uint64_t v74 = v34;
          operator delete(v36);
        }
        int v29 = v71;
        if (!v71) {
          goto LABEL_101;
        }
        uint64_t v37 = v72;
        uint64_t v31 = v71;
        if (v72 == v71) {
          goto LABEL_100;
        }
        do
        {
          uint64_t v39 = (void *)*--v37;
          BOOL v38 = v39;
          void *v37 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v37 != v29);
        goto LABEL_99;
      }
    }
  }
  else
  {
    uint64_t v62 = "'mps.conv_2d' op requires attribute 'data_layout'";
    __int16 v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    }
    if (v75)
    {
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        uint64_t v27 = v74;
        uint64_t v28 = __p;
        if (v74 != __p)
        {
          do
            uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        uint64_t v74 = v26;
        operator delete(v28);
      }
      int v29 = v71;
      if (!v71) {
        goto LABEL_101;
      }
      uint64_t v30 = v72;
      uint64_t v31 = v71;
      if (v72 == v71) {
        goto LABEL_100;
      }
      do
      {
        uint64_t v33 = (void *)*--v30;
        uint64_t v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v30 != v29);
      goto LABEL_99;
    }
  }
  return v25;
}

uint64_t mlir::mps::anonymous namespace'::inferConv2DReturnType(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  void v24[2] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  mlir::ValueRange::ValueRange(v24, (uint64_t)&v21, 2uLL);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a3 + 8))
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2D a non-shaped inputType");
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a3 + 8);
  uint64_t v19 = a3;
  uint64_t v20 = v13;
  if (!a3) {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2D a non-shaped inputType");
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a4 + 8)) {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2D a non-shaped weightsType");
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a4 + 8);
  if (*(_UNKNOWN **)(*(void *)a3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    *a6 = mlir::UnrankedTensorType::get(v12);
    return 1;
  }
  else
  {
    uint64_t v21 = v23;
    uint64_t v22 = 0x400000000;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v19);
    {
      *a6 = mlir::RankedTensorType::get((uint64_t)v21, v22, v12, 0);
      uint64_t v16 = 1;
      uint64_t v17 = v21;
      if (v21 == v23) {
        return v16;
      }
      goto LABEL_14;
    }
    uint64_t v16 = 0;
    uint64_t v17 = v21;
    if (v21 != v23) {
LABEL_14:
    }
      free(v17);
  }
  return v16;
}

uint64_t mlir::mps::Conv2DDataGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v109[2] = *MEMORY[0x1E4F143B8];
  uint64_t v85 = a4;
  unint64_t v86 = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
    uint64_t v19 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v19 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v74 = a6;
  v75[0] = 0;
  char v76 = 0;
  long long v77 = v16;
  long long v78 = v17;
  long long v79 = v18;
  uint64_t v80 = v19;
  uint64_t v81 = a9;
  unint64_t v20 = a5;
  uint64_t v82 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v74);
    if (v76) {
      char v76 = 0;
    }
    mlir::OperationName::OperationName(v75, "mps.conv_2d_data_gradient", 25, Context);
    char v76 = 1;
    unint64_t v20 = v86;
  }
  uint64_t v83 = a4;
  unint64_t v84 = a5;
  if (v20 < 2
    || (uint64_t v22 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::Conv2DDataGradientOpAdaptor::verify(&v74, v22)))
  {
    uint64_t v32 = mlir::Float32Type::get(this, a2);
LABEL_28:
    uint64_t v42 = mlir::UnrankedTensorType::get(v32);
    goto LABEL_29;
  }
  uint64_t v23 = mlir::ValueRange::dereference_iterator(&v85, 0);
  uint64_t v24 = mlir::ValueRange::dereference_iterator(&v85, 1);
  uint64_t v25 = 0;
  if (v86 == 3) {
    uint64_t v25 = mlir::ValueRange::dereference_iterator(&v85, 2);
  }
  uint64_t v26 = v77;
  long long v27 = v78;
  long long v68 = (void *)*((void *)&v77 + 1);
  uint64_t v66 = v80;
  long long v67 = v79;
  uint64_t v28 = (void *)(*(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = (void *)(*(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v30) {
      goto LABEL_14;
    }
LABEL_17:
    uint64_t v31 = 0;
    goto LABEL_18;
  }
  uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8);
  uint64_t v30 = (void *)(*(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
LABEL_18:
  *(void *)&long long v73 = v28;
  *((void *)&v73 + 1) = v29;
  v72[0] = v30;
  v72[1] = v31;
  long long v71 = v73;
  unint64_t v92 = v28;
  uint64_t v93 = (uint64_t)v30;
  mlir::ValueRange::ValueRange(v109, (uint64_t)&v92, 2uLL);
  if (!v28
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)
    || !v72[0]
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v72) & 1) == 0)
  {
    uint64_t v32 = v33;
    goto LABEL_28;
  }
  unint64_t v106 = (uint64_t *)v108;
  uint64_t v107 = 0x400000000;
  if (!v25)
  {
    uint64_t v70 = *((void *)&v27 + 1);
    unint64_t v47 = v105;
    uint64_t v103 = v105;
    memset(v105, 0, sizeof(v105));
    uint64_t v104 = 0x400000004;
    if ((void)v71)
    {
      uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
      if (v49 != 4)
      {
        char v50 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2DDataGradientOp input should be rank 4");
        uint64_t v42 = 0;
LABEL_99:
        uint64_t v55 = v103;
        goto LABEL_100;
      }
      __int16 v64 = (uint64_t *)ArgAttrsAttr;
    }
    else
    {
      __int16 v64 = (uint64_t *)v105;
    }
    v101[0] = v102;
    v101[1] = (void *)0x400000000;
    v99[0] = v100;
    v99[1] = (void *)0x400000000;
    v97[0] = v98;
    v97[1] = (void *)0x200000000;
    v95[0] = v96;
    v95[1] = (void *)0x200000000;
    if (v26) {
      int v51 = *(_DWORD *)(v26 + 8);
    }
    else {
      int v51 = 1;
    }
    int v65 = v51;
    if (*((void *)&v67 + 1))
    {
      uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((void **)&v67 + 1) + 8);
    }
    else
    {
      *((void *)&v67 + 1) = 0;
      uint64_t v56 = 0;
    }
    if (v68)
    {
      uint64_t v57 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v68 + 8);
    }
    else
    {
      long long v68 = 0;
      uint64_t v57 = 0;
    }
    if ((void)v27) {
      uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v27 + 8);
    }
    else {
      uint64_t v58 = 0;
    }
    if (mlir::mps::inferConv2DParams((uint64_t)a2, a3, v64, 4, *((uint64_t *)&v67 + 1), v56, (uint64_t)v68, v57, v27, v58, v65, (uint64_t)v101, (unsigned int *)v99, (uint64_t)v97, (uint64_t)v95))
    {
      if (v70) {
        uint64_t UInt = (uint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v70);
      }
      else {
        uint64_t UInt = 1;
      }
      if (v66) {
        int v60 = *(_DWORD *)(v66 + 8);
      }
      else {
        int v60 = 3;
      }
      if ((void)v67) {
        int v61 = *(_DWORD *)(v67 + 8);
      }
      else {
        int v61 = 2;
      }
      v69[0] = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v72);
      v69[1] = v62;
      if (v62 == 4)
      {
        mlir::mps::ShapeWithLayout::ShapeWithLayout((uint64_t)&v92, (uint64_t)v69, v60);
        uint64_t v89 = v91;
        uint64_t v90 = 0x400000000;
        mlir::mps::ShapeWithLayout::ShapeWithLayout((uint64_t)v87, (uint64_t)&v92);
        if (v87[0] != &v88) {
          free(v87[0]);
        }
        if (v63)
        {
          uint64_t v42 = mlir::RankedTensorType::get((uint64_t)v89, v90, v33, 0);
          char v50 = 1;
        }
        else
        {
          uint64_t v42 = 0;
          char v50 = 0;
        }
        unint64_t v47 = v105;
        if (v89 != v91) {
          free(v89);
        }
        if (v92 != v94) {
          free(v92);
        }
      }
      else
      {
        char v50 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2dGradient weights should be rank 4");
        uint64_t v42 = 0;
        unint64_t v47 = v105;
      }
    }
    else
    {
      uint64_t v42 = 0;
      char v50 = 0;
    }
    if (v95[0] != v96) {
      free(v95[0]);
    }
    if (v97[0] != v98) {
      free(v97[0]);
    }
    if (v99[0] != v100) {
      free(v99[0]);
    }
    if (v101[0] != v102) {
      free(v101[0]);
    }
    goto LABEL_99;
  }
  if (!mlir::matchConstantWithIntVector<long long>(v25, (uint64_t)&v106))
  {
    uint64_t v42 = mlir::UnrankedTensorType::get(v33);
    char v50 = 1;
    goto LABEL_102;
  }
  uint64_t v34 = v107;
  if (!v107) {
    goto LABEL_50;
  }
  uint64_t v35 = v106;
  unint64_t v36 = (v107 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v37 = v106;
  if (v36 >= 3)
  {
    unint64_t v38 = v36 + 1;
    uint64_t v37 = &v106[v38 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v39 = (int64x2_t *)(v106 + 2);
    v40.i64[0] = -1;
    v40.i64[1] = -1;
    uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      int32x2_t v45 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if (v45.i8[0])
      {
        v39[-1].i64[0] = 0x8000000000000000;
        if ((v45.i8[4] & 1) == 0) {
          goto LABEL_35;
        }
      }
      else if ((v45.i8[4] & 1) == 0)
      {
LABEL_35:
        int32x2_t v46 = vmovn_s64(vceqq_s64(*v39, v40));
        if (v46.i8[0]) {
          goto LABEL_36;
        }
        goto LABEL_40;
      }
      v39[-1].i64[1] = 0x8000000000000000;
      int32x2_t v46 = vmovn_s64(vceqq_s64(*v39, v40));
      if (v46.i8[0])
      {
LABEL_36:
        v39->i64[0] = 0x8000000000000000;
        if (v46.i8[4]) {
          goto LABEL_41;
        }
        goto LABEL_32;
      }
LABEL_40:
      if (v46.i8[4]) {
LABEL_41:
      }
        v39->i64[1] = 0x8000000000000000;
LABEL_32:
      v39 += 2;
      v41 -= 4;
      if (!v41)
      {
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_50;
        }
        break;
      }
    }
  }
  int v54 = &v35[v34];
  do
  {
    if (*v37 == -1) {
      uint64_t *v37 = 0x8000000000000000;
    }
    ++v37;
  }
  while (v37 != v54);
LABEL_50:
  int v52 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
  unint64_t v47 = v94;
  unint64_t v92 = v94;
  uint64_t v93 = 0x400000000;
  {
    uint64_t v42 = mlir::RankedTensorType::get((uint64_t)v92, v93, v33, 0);
    char v50 = 1;
  }
  else
  {
    uint64_t v42 = 0;
    char v50 = 0;
  }
  uint64_t v55 = v92;
LABEL_100:
  if (v55 != v47) {
    free(v55);
  }
LABEL_102:
  if (v106 != (uint64_t *)v108) {
    free(v106);
  }
  if (!v50) {
    return 0;
  }
LABEL_29:
  unsigned int v43 = *(_DWORD *)(a11 + 8);
  if (v43 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v43 + 1, 8);
    unsigned int v43 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v43) = v42;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::Conv2DDataGradientOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    unint64_t v3 = (const char *)a1[4];
    if (v3)
    {
      uint64_t v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            uint64_t v5 = (const char *)a1[8];
            if (v5)
            {
              if (a1[9])
              {
                uint64_t v62 = (const char *)a1[6];
                uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
                  uint64_t v62 = v5;
                  uint64_t v63 = v6;
                  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  uint64_t v8 = Type;
                  if (Type) {
                    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  }
                  uint64_t Value = (uint64_t)v8;
                  long long v68 = Type;
                  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v65[0] = 4;
                  if (v10 == 1
                    && *ArgAttrsAttr == v65[0]
                    && (int v60 = v5,
                        *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                        *((void *)&v66 + 1) = v11,
                        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                  {
                    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
                    uint64_t v62 = v3;
                    uint64_t v63 = v12;
                    uint64_t v13 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                    unint64_t v14 = v13;
                    if (v13) {
                      uint64_t v13 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                    }
                    uint64_t Value = (uint64_t)v14;
                    long long v68 = v13;
                    uint64_t v15 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v65[0] = 4;
                    if (v16 == 1
                      && *v15 == v65[0]
                      && (int v60 = v3,
                          *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                          *((void *)&v66 + 1) = v17,
                          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                    {
                      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                      uint64_t v62 = v4;
                      uint64_t v63 = v18;
                      uint64_t v19 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                      unint64_t v20 = v19;
                      if (v19) {
                        uint64_t v19 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                      }
                      uint64_t Value = (uint64_t)v20;
                      long long v68 = v19;
                      uint64_t v21 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      long long v66 = xmmword_18110B5E0;
                      if (v22 == 2 && *v21 == (void)v66 && v21[1] == *((void *)&v66 + 1))
                      {
                        int v60 = v4;
                        v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                        v65[1] = v24;
                        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
                          return 1;
                        }
                      }
                      int v59 = "'mps.conv_2d_data_gradient' op attribute 'explicit_padding' failed to satisfy constraint: ui"
                            "64 elements attribute of shape {4, 2}";
                    }
                    else
                    {
                      int v59 = "'mps.conv_2d_data_gradient' op attribute 'dilation_rates' failed to satisfy constraint: ui64"
                            " elements attribute of shape {4}";
                    }
                  }
                  else
                  {
                    int v59 = "'mps.conv_2d_data_gradient' op attribute 'strides' failed to satisfy constraint: ui64 elements"
                          " attribute of shape {4}";
                  }
                }
                else
                {
                  int v59 = "'mps.conv_2d_data_gradient' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned "
                        "integer attribute";
                }
              }
              else
              {
                int v59 = "'mps.conv_2d_data_gradient' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              int v59 = "'mps.conv_2d_data_gradient' op requires attribute 'strides'";
            }
            uint64_t v62 = v59;
            __int16 v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
            uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v25;
          }
          uint64_t v62 = "'mps.conv_2d_data_gradient' op requires attribute 'padding_style'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v75)
          {
            int v52 = (void **)__p;
            if (__p)
            {
              uint64_t v53 = v74;
              int v54 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                int v54 = __p;
              }
              uint64_t v74 = v52;
              operator delete(v54);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_101;
            }
            uint64_t v55 = v72;
            uint64_t v31 = v71;
            if (v72 == v71)
            {
LABEL_100:
              uint64_t v72 = v29;
              operator delete(v31);
LABEL_101:
              if (v69 != &v70) {
                free(v69);
              }
              return v25;
            }
            do
            {
              uint64_t v57 = (void *)*--v55;
              uint64_t v56 = v57;
              *uint64_t v55 = 0;
              if (v57) {
                operator delete[](v56);
              }
            }
            while (v55 != v29);
LABEL_99:
            uint64_t v31 = v71;
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v62 = "'mps.conv_2d_data_gradient' op requires attribute 'groups'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v75)
          {
            int32x2_t v46 = (void **)__p;
            if (__p)
            {
              unint64_t v47 = v74;
              unint64_t v48 = __p;
              if (v74 != __p)
              {
                do
                  unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                unint64_t v48 = __p;
              }
              uint64_t v74 = v46;
              operator delete(v48);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_101;
            }
            uint64_t v49 = v72;
            uint64_t v31 = v71;
            if (v72 == v71) {
              goto LABEL_100;
            }
            do
            {
              int v51 = (void *)*--v49;
              char v50 = v51;
              void *v49 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v49 != v29);
            goto LABEL_99;
          }
        }
      }
      else
      {
        uint64_t v62 = "'mps.conv_2d_data_gradient' op requires attribute 'explicit_padding'";
        __int16 v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
        uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        }
        if (v75)
        {
          int64x2_t v40 = (void **)__p;
          if (__p)
          {
            uint64_t v41 = v74;
            uint64_t v42 = __p;
            if (v74 != __p)
            {
              do
                uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              uint64_t v42 = __p;
            }
            uint64_t v74 = v40;
            operator delete(v42);
          }
          uint64_t v29 = v71;
          if (!v71) {
            goto LABEL_101;
          }
          unsigned int v43 = v72;
          uint64_t v31 = v71;
          if (v72 == v71) {
            goto LABEL_100;
          }
          do
          {
            int32x2_t v45 = (void *)*--v43;
            unint64_t v44 = v45;
            *unsigned int v43 = 0;
            if (v45) {
              operator delete[](v44);
            }
          }
          while (v43 != v29);
          goto LABEL_99;
        }
      }
    }
    else
    {
      uint64_t v62 = "'mps.conv_2d_data_gradient' op requires attribute 'dilation_rates'";
      __int16 v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v75)
      {
        uint64_t v34 = (void **)__p;
        if (__p)
        {
          uint64_t v35 = v74;
          unint64_t v36 = __p;
          if (v74 != __p)
          {
            do
              uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            unint64_t v36 = __p;
          }
          uint64_t v74 = v34;
          operator delete(v36);
        }
        uint64_t v29 = v71;
        if (!v71) {
          goto LABEL_101;
        }
        uint64_t v37 = v72;
        uint64_t v31 = v71;
        if (v72 == v71) {
          goto LABEL_100;
        }
        do
        {
          uint64_t v39 = (void *)*--v37;
          unint64_t v38 = v39;
          void *v37 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v37 != v29);
        goto LABEL_99;
      }
    }
  }
  else
  {
    uint64_t v62 = "'mps.conv_2d_data_gradient' op requires attribute 'data_layout'";
    __int16 v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    }
    if (v75)
    {
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        long long v27 = v74;
        uint64_t v28 = __p;
        if (v74 != __p)
        {
          do
            long long v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        uint64_t v74 = v26;
        operator delete(v28);
      }
      uint64_t v29 = v71;
      if (!v71) {
        goto LABEL_101;
      }
      uint64_t v30 = v72;
      uint64_t v31 = v71;
      if (v72 == v71) {
        goto LABEL_100;
      }
      do
      {
        uint64_t v33 = (void *)*--v30;
        uint64_t v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v30 != v29);
      goto LABEL_99;
    }
  }
  return v25;
}

uint64_t mlir::mps::Conv2DWeightsGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v109[2] = *MEMORY[0x1E4F143B8];
  uint64_t v85 = a4;
  unint64_t v86 = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
    uint64_t v19 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v19 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v74 = a6;
  v75[0] = 0;
  char v76 = 0;
  long long v77 = v16;
  long long v78 = v17;
  long long v79 = v18;
  uint64_t v80 = v19;
  uint64_t v81 = a9;
  unint64_t v20 = a5;
  uint64_t v82 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v74);
    if (v76) {
      char v76 = 0;
    }
    mlir::OperationName::OperationName(v75, "mps.conv_2d_weights_gradient", 28, Context);
    char v76 = 1;
    unint64_t v20 = v86;
  }
  uint64_t v83 = a4;
  unint64_t v84 = a5;
  if (v20 < 3
    || (uint64_t v22 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::Conv2DWeightsGradientOpAdaptor::verify(&v74, v22)))
  {
    uint64_t v32 = mlir::Float32Type::get(this, a2);
LABEL_26:
    uint64_t v42 = mlir::UnrankedTensorType::get(v32);
    goto LABEL_27;
  }
  uint64_t v23 = mlir::ValueRange::dereference_iterator(&v85, 0);
  uint64_t v24 = mlir::ValueRange::dereference_iterator(&v85, 1);
  uint64_t v25 = mlir::ValueRange::dereference_iterator(&v85, 2);
  uint64_t v26 = v77;
  long long v27 = v78;
  long long v68 = (void *)*((void *)&v77 + 1);
  uint64_t v66 = v80;
  long long v67 = v79;
  uint64_t v28 = (void *)(*(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v28)
  {
    uint64_t v29 = 0;
    uint64_t v30 = (void *)(*(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v30) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v31 = 0;
    goto LABEL_16;
  }
  uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8);
  uint64_t v30 = (void *)(*(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v30) {
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v30 + 8);
LABEL_16:
  *(void *)&long long v73 = v28;
  *((void *)&v73 + 1) = v29;
  v72[0] = v30;
  v72[1] = v31;
  long long v71 = v73;
  unint64_t v92 = v28;
  uint64_t v93 = (uint64_t)v30;
  mlir::ValueRange::ValueRange(v109, (uint64_t)&v92, 2uLL);
  if (!v28
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71)
    || !v72[0]
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v72) & 1) == 0)
  {
    uint64_t v32 = v33;
    goto LABEL_26;
  }
  unint64_t v106 = (uint64_t *)v108;
  uint64_t v107 = 0x400000000;
  if (!v25)
  {
    uint64_t v70 = *((void *)&v27 + 1);
    unint64_t v47 = v105;
    uint64_t v103 = v105;
    memset(v105, 0, sizeof(v105));
    uint64_t v104 = 0x400000004;
    if ((void)v71)
    {
      uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
      if (v49 != 4)
      {
        char v50 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2DDataGradientOp input should be rank 4");
        uint64_t v42 = 0;
LABEL_97:
        uint64_t v55 = v103;
        goto LABEL_98;
      }
      __int16 v64 = (uint64_t *)ArgAttrsAttr;
    }
    else
    {
      __int16 v64 = (uint64_t *)v105;
    }
    v101[0] = v102;
    v101[1] = (void *)0x400000000;
    v99[0] = v100;
    v99[1] = (void *)0x400000000;
    v97[0] = v98;
    v97[1] = (void *)0x200000000;
    v95[0] = v96;
    v95[1] = (void *)0x200000000;
    if (v26) {
      int v51 = *(_DWORD *)(v26 + 8);
    }
    else {
      int v51 = 1;
    }
    int v65 = v51;
    if (*((void *)&v67 + 1))
    {
      uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((void **)&v67 + 1) + 8);
    }
    else
    {
      *((void *)&v67 + 1) = 0;
      uint64_t v56 = 0;
    }
    if (v68)
    {
      uint64_t v57 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v68 + 8);
    }
    else
    {
      long long v68 = 0;
      uint64_t v57 = 0;
    }
    if ((void)v27) {
      uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v27 + 8);
    }
    else {
      uint64_t v58 = 0;
    }
    if (mlir::mps::inferConv2DParams((uint64_t)a2, a3, v64, 4, *((uint64_t *)&v67 + 1), v56, (uint64_t)v68, v57, v27, v58, v65, (uint64_t)v101, (unsigned int *)v99, (uint64_t)v97, (uint64_t)v95))
    {
      if (v70) {
        uint64_t UInt = (uint64_t)mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v70);
      }
      else {
        uint64_t UInt = 1;
      }
      if (v66) {
        int v60 = *(_DWORD *)(v66 + 8);
      }
      else {
        int v60 = 3;
      }
      if ((void)v67) {
        int v61 = *(_DWORD *)(v67 + 8);
      }
      else {
        int v61 = 2;
      }
      v69[0] = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v72);
      v69[1] = v62;
      if (v62 == 4)
      {
        mlir::mps::ShapeWithLayout::ShapeWithLayout((uint64_t)&v92, (uint64_t)v69, v60);
        uint64_t v89 = v91;
        uint64_t v90 = 0x400000000;
        mlir::mps::ShapeWithLayout::ShapeWithLayout((uint64_t)v87, (uint64_t)&v92);
        if (v87[0] != &v88) {
          free(v87[0]);
        }
        if (v63)
        {
          uint64_t v42 = mlir::RankedTensorType::get((uint64_t)v89, v90, v33, 0);
          char v50 = 1;
        }
        else
        {
          uint64_t v42 = 0;
          char v50 = 0;
        }
        unint64_t v47 = v105;
        if (v89 != v91) {
          free(v89);
        }
        if (v92 != v94) {
          free(v92);
        }
      }
      else
      {
        char v50 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Conv2dGradient weights should be rank 4");
        uint64_t v42 = 0;
        unint64_t v47 = v105;
      }
    }
    else
    {
      uint64_t v42 = 0;
      char v50 = 0;
    }
    if (v95[0] != v96) {
      free(v95[0]);
    }
    if (v97[0] != v98) {
      free(v97[0]);
    }
    if (v99[0] != v100) {
      free(v99[0]);
    }
    if (v101[0] != v102) {
      free(v101[0]);
    }
    goto LABEL_97;
  }
  if (!mlir::matchConstantWithIntVector<long long>(v25, (uint64_t)&v106))
  {
    uint64_t v42 = mlir::UnrankedTensorType::get(v33);
    char v50 = 1;
    goto LABEL_100;
  }
  uint64_t v34 = v107;
  if (!v107) {
    goto LABEL_48;
  }
  uint64_t v35 = v106;
  unint64_t v36 = (v107 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v37 = v106;
  if (v36 >= 3)
  {
    unint64_t v38 = v36 + 1;
    uint64_t v37 = &v106[v38 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v39 = (int64x2_t *)(v106 + 2);
    v40.i64[0] = -1;
    v40.i64[1] = -1;
    uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      int32x2_t v45 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if (v45.i8[0])
      {
        v39[-1].i64[0] = 0x8000000000000000;
        if ((v45.i8[4] & 1) == 0) {
          goto LABEL_33;
        }
      }
      else if ((v45.i8[4] & 1) == 0)
      {
LABEL_33:
        int32x2_t v46 = vmovn_s64(vceqq_s64(*v39, v40));
        if (v46.i8[0]) {
          goto LABEL_34;
        }
        goto LABEL_38;
      }
      v39[-1].i64[1] = 0x8000000000000000;
      int32x2_t v46 = vmovn_s64(vceqq_s64(*v39, v40));
      if (v46.i8[0])
      {
LABEL_34:
        v39->i64[0] = 0x8000000000000000;
        if (v46.i8[4]) {
          goto LABEL_39;
        }
        goto LABEL_30;
      }
LABEL_38:
      if (v46.i8[4]) {
LABEL_39:
      }
        v39->i64[1] = 0x8000000000000000;
LABEL_30:
      v39 += 2;
      v41 -= 4;
      if (!v41)
      {
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_48;
        }
        break;
      }
    }
  }
  int v54 = &v35[v34];
  do
  {
    if (*v37 == -1) {
      uint64_t *v37 = 0x8000000000000000;
    }
    ++v37;
  }
  while (v37 != v54);
LABEL_48:
  int v52 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
  unint64_t v47 = v94;
  unint64_t v92 = v94;
  uint64_t v93 = 0x400000000;
  {
    uint64_t v42 = mlir::RankedTensorType::get((uint64_t)v92, v93, v33, 0);
    char v50 = 1;
  }
  else
  {
    uint64_t v42 = 0;
    char v50 = 0;
  }
  uint64_t v55 = v92;
LABEL_98:
  if (v55 != v47) {
    free(v55);
  }
LABEL_100:
  if (v106 != (uint64_t *)v108) {
    free(v106);
  }
  if (!v50) {
    return 0;
  }
LABEL_27:
  unsigned int v43 = *(_DWORD *)(a11 + 8);
  if (v43 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v43 + 1, 8);
    unsigned int v43 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v43) = v42;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::Conv2DWeightsGradientOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    unint64_t v3 = (const char *)a1[4];
    if (v3)
    {
      uint64_t v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            uint64_t v5 = (const char *)a1[8];
            if (v5)
            {
              if (a1[9])
              {
                uint64_t v62 = (const char *)a1[6];
                uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
                  uint64_t v62 = v5;
                  uint64_t v63 = v6;
                  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  uint64_t v8 = Type;
                  if (Type) {
                    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  }
                  uint64_t Value = (uint64_t)v8;
                  long long v68 = Type;
                  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v65[0] = 4;
                  if (v10 == 1
                    && *ArgAttrsAttr == v65[0]
                    && (int v60 = v5,
                        *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                        *((void *)&v66 + 1) = v11,
                        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                  {
                    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
                    uint64_t v62 = v3;
                    uint64_t v63 = v12;
                    uint64_t v13 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                    unint64_t v14 = v13;
                    if (v13) {
                      uint64_t v13 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                    }
                    uint64_t Value = (uint64_t)v14;
                    long long v68 = v13;
                    uint64_t v15 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v65[0] = 4;
                    if (v16 == 1
                      && *v15 == v65[0]
                      && (int v60 = v3,
                          *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                          *((void *)&v66 + 1) = v17,
                          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                    {
                      uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                      uint64_t v62 = v4;
                      uint64_t v63 = v18;
                      uint64_t v19 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                      unint64_t v20 = v19;
                      if (v19) {
                        uint64_t v19 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                      }
                      uint64_t Value = (uint64_t)v20;
                      long long v68 = v19;
                      uint64_t v21 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      long long v66 = xmmword_18110B5E0;
                      if (v22 == 2 && *v21 == (void)v66 && v21[1] == *((void *)&v66 + 1))
                      {
                        int v60 = v4;
                        v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                        v65[1] = v24;
                        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                        if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
                          return 1;
                        }
                      }
                      int v59 = "'mps.conv_2d_weights_gradient' op attribute 'explicit_padding' failed to satisfy constraint:"
                            " ui64 elements attribute of shape {4, 2}";
                    }
                    else
                    {
                      int v59 = "'mps.conv_2d_weights_gradient' op attribute 'dilation_rates' failed to satisfy constraint: u"
                            "i64 elements attribute of shape {4}";
                    }
                  }
                  else
                  {
                    int v59 = "'mps.conv_2d_weights_gradient' op attribute 'strides' failed to satisfy constraint: ui64 eleme"
                          "nts attribute of shape {4}";
                  }
                }
                else
                {
                  int v59 = "'mps.conv_2d_weights_gradient' op attribute 'groups' failed to satisfy constraint: 64-bit unsign"
                        "ed integer attribute";
                }
              }
              else
              {
                int v59 = "'mps.conv_2d_weights_gradient' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              int v59 = "'mps.conv_2d_weights_gradient' op requires attribute 'strides'";
            }
            uint64_t v62 = v59;
            __int16 v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
            uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v25;
          }
          uint64_t v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'padding_style'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v75)
          {
            int v52 = (void **)__p;
            if (__p)
            {
              uint64_t v53 = v74;
              int v54 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                int v54 = __p;
              }
              uint64_t v74 = v52;
              operator delete(v54);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_101;
            }
            uint64_t v55 = v72;
            uint64_t v31 = v71;
            if (v72 == v71)
            {
LABEL_100:
              uint64_t v72 = v29;
              operator delete(v31);
LABEL_101:
              if (v69 != &v70) {
                free(v69);
              }
              return v25;
            }
            do
            {
              uint64_t v57 = (void *)*--v55;
              uint64_t v56 = v57;
              *uint64_t v55 = 0;
              if (v57) {
                operator delete[](v56);
              }
            }
            while (v55 != v29);
LABEL_99:
            uint64_t v31 = v71;
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'groups'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v75)
          {
            int32x2_t v46 = (void **)__p;
            if (__p)
            {
              unint64_t v47 = v74;
              unint64_t v48 = __p;
              if (v74 != __p)
              {
                do
                  unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                unint64_t v48 = __p;
              }
              uint64_t v74 = v46;
              operator delete(v48);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_101;
            }
            uint64_t v49 = v72;
            uint64_t v31 = v71;
            if (v72 == v71) {
              goto LABEL_100;
            }
            do
            {
              int v51 = (void *)*--v49;
              char v50 = v51;
              void *v49 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v49 != v29);
            goto LABEL_99;
          }
        }
      }
      else
      {
        uint64_t v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'explicit_padding'";
        __int16 v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
        uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        }
        if (v75)
        {
          int64x2_t v40 = (void **)__p;
          if (__p)
          {
            uint64_t v41 = v74;
            uint64_t v42 = __p;
            if (v74 != __p)
            {
              do
                uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              uint64_t v42 = __p;
            }
            uint64_t v74 = v40;
            operator delete(v42);
          }
          uint64_t v29 = v71;
          if (!v71) {
            goto LABEL_101;
          }
          unsigned int v43 = v72;
          uint64_t v31 = v71;
          if (v72 == v71) {
            goto LABEL_100;
          }
          do
          {
            int32x2_t v45 = (void *)*--v43;
            unint64_t v44 = v45;
            *unsigned int v43 = 0;
            if (v45) {
              operator delete[](v44);
            }
          }
          while (v43 != v29);
          goto LABEL_99;
        }
      }
    }
    else
    {
      uint64_t v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'dilation_rates'";
      __int16 v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v75)
      {
        uint64_t v34 = (void **)__p;
        if (__p)
        {
          uint64_t v35 = v74;
          unint64_t v36 = __p;
          if (v74 != __p)
          {
            do
              uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            unint64_t v36 = __p;
          }
          uint64_t v74 = v34;
          operator delete(v36);
        }
        uint64_t v29 = v71;
        if (!v71) {
          goto LABEL_101;
        }
        uint64_t v37 = v72;
        uint64_t v31 = v71;
        if (v72 == v71) {
          goto LABEL_100;
        }
        do
        {
          uint64_t v39 = (void *)*--v37;
          unint64_t v38 = v39;
          void *v37 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v37 != v29);
        goto LABEL_99;
      }
    }
  }
  else
  {
    uint64_t v62 = "'mps.conv_2d_weights_gradient' op requires attribute 'data_layout'";
    __int16 v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&Value);
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    }
    if (v75)
    {
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        long long v27 = v74;
        uint64_t v28 = __p;
        if (v74 != __p)
        {
          do
            long long v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        uint64_t v74 = v26;
        operator delete(v28);
      }
      uint64_t v29 = v71;
      if (!v71) {
        goto LABEL_101;
      }
      uint64_t v30 = v72;
      uint64_t v31 = v71;
      if (v72 == v71) {
        goto LABEL_100;
      }
      do
      {
        uint64_t v33 = (void *)*--v30;
        uint64_t v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v30 != v29);
      goto LABEL_99;
    }
  }
  return v25;
}

void mlir::mps::getSpatialPaddingValues(void *a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  uint64_t v4 = a3 + 2;
  if (a2 == 7)
  {
    uint64_t v6 = a1[8];
    uint64_t v5 = a1[9];
    uint64_t v7 = a1[6];
    uint64_t v8 = a1[7];
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
  }
  else
  {
    uint64_t v6 = a1[6];
    uint64_t v5 = a1[7];
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = a1[2];
    uint64_t v10 = a1[3];
  }
  *a3 = v4;
  a3[1] = 0x500000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v4, 6uLL, 8);
  uint64_t v11 = (void *)(*a3 + 8 * *((unsigned int *)a3 + 2));
  *uint64_t v11 = v6;
  v11[1] = v5;
  void v11[2] = v7;
  v11[3] = v8;
  v11[4] = v9;
  v11[5] = v10;
  *((_DWORD *)a3 + 2) += 6;
}

int8x16_t mlir::mps::getSpatialValues@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  switch(a3)
  {
    case 8:
      uint64_t v7 = a1 + 8 * a2;
      uint64_t v5 = *(void *)(v7 - 16);
      int8x16_t v6 = *(int8x16_t *)(v7 - 32);
      break;
    case 10:
      uint64_t v8 = a1 + 8 * a2;
      uint64_t v5 = *(void *)(v8 - 24);
      int8x16_t v6 = *(int8x16_t *)(v8 - 40);
      break;
    default:
      uint64_t v4 = a1 + 8 * a2;
      uint64_t v5 = *(void *)(v4 - 8);
      int8x16_t v6 = *(int8x16_t *)(v4 - 24);
      break;
  }
  *(void *)(a4 + 16) = v5;
  *(void *)a4 = a4 + 16;
  *(_DWORD *)(a4 + 8) = 3;
  *(_DWORD *)(a4 + 12) = 3;
  int8x16_t result = vextq_s8(v6, v6, 8uLL);
  *(int8x16_t *)(a4 + 24) = result;
  return result;
}

void mlir::mps::computeSpatialPaddings(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X4>, uint64_t *a5@<X6>, uint64_t a6@<X8>, const void *a7, unint64_t a8, int a9)
{
  switch(a9)
  {
    case 1:
      *(void *)a6 = a6 + 16;
      *(_DWORD *)(a6 + 12) = 6;
      if (a8 < 7)
      {
        if (!a8) {
          goto LABEL_27;
        }
        uint64_t v17 = (unint64_t *)(a6 + 16);
        size_t v18 = 8 * a8;
      }
      else
      {
        *(_DWORD *)(a6 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), a8, 8);
        uint64_t v17 = *(unint64_t **)a6;
        size_t v18 = 8 * a8;
      }
      bzero(v17, v18);
LABEL_27:
      *(_DWORD *)(a6 + 8) = a8;
      return;
    case 2:
    case 4:
      uint64_t v15 = (unint64_t *)(a6 + 16);
      *(void *)a6 = a6 + 16;
      *(_DWORD *)(a6 + 12) = 6;
      if (a8 < 7)
      {
        if (!a8) {
          goto LABEL_11;
        }
      }
      else
      {
        *(_DWORD *)(a6 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), a8, 8);
        uint64_t v15 = *(unint64_t **)a6;
      }
      bzero(v15, 8 * a8);
LABEL_11:
      *(_DWORD *)(a6 + 8) = a8;
      if (!a2) {
        return;
      }
      uint64_t v19 = 8 * a2;
      unint64_t v20 = a1;
      break;
    case 3:
      __break(1u);
      JUMPOUT(0x1809CD010);
    default:
      *(void *)a6 = a6 + 16;
      *(void *)(a6 + 8) = 0x600000000;
      if (8 * a8 < 0x31)
      {
        unsigned int v16 = 0;
        if (!a8) {
          goto LABEL_23;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), (uint64_t)(8 * a8) >> 3, 8);
        unsigned int v16 = *(_DWORD *)(a6 + 8);
        if (!a8) {
          goto LABEL_23;
        }
      }
      memcpy((void *)(*(void *)a6 + 8 * v16), a7, 8 * a8);
      unsigned int v16 = *(_DWORD *)(a6 + 8);
LABEL_23:
      *(_DWORD *)(a6 + 8) = v16 + a8;
      return;
  }
  while (*v20)
  {
    ++v20;
    v19 -= 8;
    if (!v19)
    {
      uint64_t v21 = v15 + 1;
      do
      {
        uint64_t v23 = *a3++;
        uint64_t v22 = v23;
        uint64_t v24 = *a5++;
        uint64_t v25 = (v22 - 1) * v24;
        uint64_t v27 = *a1++;
        uint64_t v26 = v27;
        uint64_t v29 = *a4++;
        uint64_t v28 = v29;
        uint64_t v30 = v26 % v29;
        if (!v30) {
          uint64_t v30 = v28;
        }
        unint64_t v31 = (v25 - v30 + 1) & ~((v25 - v30 + 1) >> 63);
        unint64_t v32 = v31 >> 1;
        unint64_t v33 = v31 - (v31 >> 1);
        *(v21 - 1) = v32;
        *uint64_t v21 = v33;
        if (a9 == 4)
        {
          *(v21 - 1) = v33;
          *uint64_t v21 = v32;
        }
        v21 += 2;
        --a2;
      }
      while (a2);
      return;
    }
  }
}

void mlir::mps::computeConvResultSpatialShape(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X4>, void *a5@<X6>, void *a6@<X8>, uint64_t a7)
{
  unint64_t v7 = a2;
  *a6 = a6 + 2;
  a6[1] = 0x300000000;
  if (!a2) {
    return;
  }
  if (a2 < 4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a7;
    unint64_t v15 = a2;
    goto LABEL_6;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a6, a6 + 2, a2, 8);
  uint64_t v13 = *((unsigned int *)a6 + 2);
  uint64_t v14 = a7;
  unint64_t v15 = v7 - v13;
  if (v7 != v13) {
LABEL_6:
  }
    bzero((void *)(*a6 + 8 * v13), 8 * v15);
  *((_DWORD *)a6 + 2) = v7;
  unsigned int v16 = (uint64_t *)*a6;
  uint64_t v17 = (void *)(v14 + 8);
  do
  {
    uint64_t v19 = *a3++;
    uint64_t v18 = v19;
    uint64_t v21 = *a1++;
    uint64_t v20 = v21;
    BOOL v22 = v21 == 0x8000000000000000 || v18 == 0x8000000000000000;
    uint64_t v23 = 0x8000000000000000;
    if (!v22) {
      uint64_t v23 = (*(v17 - 1) + v20 + *v17 + *a4 + ~(*a5 * (v18 - 1))) / *a4;
    }
    *v16++ = v23;
    v17 += 2;
    ++a5;
    ++a4;
    --v7;
  }
  while (v7);
}

void mlir::mps::convertNCDHWShapeToLayout(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 != 7)
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[1];
    long long v11 = *((_OWORD *)a1 + 1);
    *(void *)(a4 + 16) = *a1;
    *(void *)a4 = a4 + 16;
    *(_OWORD *)(a4 + 24) = v11;
    *(void *)(a4 + 40) = v9;
    *(void *)(a4 + 48) = v10;
    *(void *)(a4 + 8) = 0x500000005;
    return;
  }
  size_t v7 = 8 * a2;
  *(void *)a4 = a4 + 16;
  *(void *)(a4 + 8) = 0x500000000;
  if ((unint64_t)(8 * a2) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), (8 * a2) >> 3, 8);
    unsigned int v8 = *(_DWORD *)(a4 + 8);
    if (!a2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unsigned int v8 = 0;
  if (a2)
  {
LABEL_7:
    memcpy((void *)(*(void *)a4 + 8 * v8), a1, v7);
    unsigned int v8 = *(_DWORD *)(a4 + 8);
  }
LABEL_8:
  *(_DWORD *)(a4 + 8) = v8 + (v7 >> 3);
}

void *llvm::SmallVector<long long,5u>::SmallVector<long long const*,void>(void *a1, unsigned char *a2, unsigned char *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  int64_t v6 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 3, 8);
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (a2 == a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v7 = 0;
  if (a2 != a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    unsigned int v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 3);
  return a1;
}

uint64_t mlir::mps::Conv3DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v102 = a4;
  unint64_t v103 = a5;
  if (a7)
  {
    long long v14 = *a7;
    long long v15 = a7[1];
    long long v16 = a7[2];
    uint64_t v17 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v17 = 0;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
  }
  uint64_t v91 = a6;
  v92[0] = 0;
  char v93 = 0;
  long long v94 = v14;
  long long v95 = v15;
  long long v96 = v16;
  uint64_t v97 = v17;
  uint64_t v98 = a9;
  unint64_t v18 = a5;
  uint64_t v99 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v91);
    if (v93) {
      char v93 = 0;
    }
    mlir::OperationName::OperationName(v92, "mps.conv_3d", 11, Context);
    char v93 = 1;
    unint64_t v18 = v103;
  }
  uint64_t v100 = a4;
  unint64_t v101 = a5;
  if (v18 < 2
    || (uint64_t v20 = mlir::UnknownLoc::get(this, a2), !mlir::mps::Conv3DOpAdaptor::verify(&v91, v20)))
  {
    uint64_t v27 = mlir::Float32Type::get(this, a2);
    uint64_t v28 = mlir::UnrankedTensorType::get(v27);
    uint64_t v29 = *(unsigned int *)(a11 + 8);
    if (v29 >= *(_DWORD *)(a11 + 12))
    {
LABEL_28:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v29 + 1, 8);
      LODWORD(v29) = *(_DWORD *)(a11 + 8);
    }
LABEL_13:
    *(void *)(*(void *)a11 + 8 * v29) = v28;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  uint64_t v21 = mlir::ValueRange::dereference_iterator(&v102, 0);
  uint64_t v22 = mlir::ValueRange::dereference_iterator(&v102, 1);
  unint64_t v23 = *(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v72 = (void *)(*(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v73 = v23;
  mlir::ValueRange::ValueRange(v90, (uint64_t)&v72, 2uLL);
  uint64_t v25 = (void *)(*(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  if (v26) {
    uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v25 + 8);
  }
  else {
    uint64_t v25 = 0;
  }
  v59[0] = v25;
  v59[1] = v26;
  unint64_t v31 = (void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8))
  {
    uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v31 + 8);
    uint64_t v57 = v31;
    uint64_t v58 = v32;
    if (!v59[0]) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    if (!v59[0]) {
      goto LABEL_27;
    }
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v59)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59), v33 < 5)
    || !v57
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v57)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v57), v34 != 5))
  {
LABEL_27:
    uint64_t v28 = mlir::UnrankedTensorType::get(v24);
    uint64_t v29 = *(unsigned int *)(a11 + 8);
    if (v29 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_28;
    }
    goto LABEL_13;
  }
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
  mlir::mps::getSpatialValues(ArgAttrsAttr, v36, *(_DWORD *)(v94 + 8), (uint64_t)&v87);
  uint64_t v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v57);
  mlir::mps::getSpatialValues(v37, v38, *(_DWORD *)(v97 + 8), (uint64_t)&v85);
  uint64_t v82 = v84;
  uint64_t v83 = 0x500000000;
  uint64_t v39 = *((void *)&v96 + 1);
  if (*((void *)&v96 + 1)) {
    uint64_t v40 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((void **)&v96 + 1) + 8);
  }
  else {
    uint64_t v40 = 0;
  }
  mlir::getIntValues<long long>(v39, v40, (uint64_t)&v82, 1);
  mlir::mps::getSpatialValues((uint64_t)v82, v83, *(_DWORD *)(v94 + 8), (uint64_t)&v80);
  long long v77 = v79;
  uint64_t v78 = 0x500000000;
  uint64_t v41 = *((void *)&v94 + 1);
  if (*((void *)&v94 + 1)) {
    uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((void **)&v94 + 1) + 8);
  }
  else {
    uint64_t v42 = 0;
  }
  mlir::getIntValues<long long>(v41, v42, (uint64_t)&v77, 1);
  mlir::mps::getSpatialValues((uint64_t)v77, v78, *(_DWORD *)(v94 + 8), (uint64_t)&v75);
  uint64_t v72 = v74;
  uint64_t v73 = 0xA00000000;
  uint64_t v43 = v95;
  if ((void)v95) {
    uint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v95 + 8);
  }
  else {
    uint64_t v44 = 0;
  }
  mlir::getIntValues<long long>(v43, v44, (uint64_t)&v72, 1);
  mlir::mps::getSpatialPaddingValues(v72, *(_DWORD *)(v94 + 8), &v69);
  mlir::mps::computeSpatialPaddings((uint64_t *)v87, v88, (uint64_t *)v85, (uint64_t *)v80, (uint64_t *)v75, (uint64_t)&v66, v69, v70, *(_DWORD *)(v96 + 8));
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v69, (uint64_t)&v66);
  if (v66 != v68) {
    free(v66);
  }
  mlir::mps::computeConvResultSpatialShape((uint64_t *)v87, v88, (uint64_t *)v85, v80, v75, &v64, (uint64_t)v69);
  uint64_t v45 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
  unint64_t v47 = *(void **)(v45 + 8 * v46 - 40);
  uint64_t v48 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v57);
  uint64_t v50 = -5;
  if (*(_DWORD *)(v97 + 8) == 10) {
    uint64_t v50 = -1;
  }
  int v51 = *(void **)(v48 + 8 * (v50 + v49));
  v62[0] = v47;
  v62[1] = v51;
  v63[0] = *((void *)v64 + 2);
  v63[1] = *((void *)v64 + 1);
  v63[2] = *(void *)v64;
  llvm::SmallVector<long long,5u>::SmallVector<long long,void>(&v66, v62, 5);
  mlir::mps::convertNCDHWShapeToLayout(v66, v67, *(_DWORD *)(v94 + 8), (uint64_t)v62);
  llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v66, (uint64_t)v62);
  if (v62[0] != v63) {
    free(v62[0]);
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
  if (v52 >= 6)
  {
    llvm::SmallVector<long long,5u>::SmallVector(v62, (uint64_t)&v66);
    uint64_t v53 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
    uint64_t v54 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v59);
    llvm::SmallVector<long long,5u>::SmallVector<long long const*,void>(v60, v53, (unsigned char *)(v54 + 8 * v55 - 40));
    llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v66, (uint64_t)v60);
    if (v60[0] != &v61) {
      free(v60[0]);
    }
    llvm::SmallVectorImpl<long long>::append((uint64_t)&v66, (uint64_t)v62);
    if (v62[0] != v63) {
      free(v62[0]);
    }
  }
  uint64_t v56 = mlir::RankedTensorType::get((uint64_t)v66, v67, v24, 0);
  llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v56);
  if (v66 != v68) {
    free(v66);
  }
  if (v64 != &v65) {
    free(v64);
  }
  if (v69 != &v71) {
    free(v69);
  }
  if (v72 != v74) {
    free(v72);
  }
  if (v75 != &v76) {
    free(v75);
  }
  if (v77 != v79) {
    free(v77);
  }
  if (v80 != &v81) {
    free(v80);
  }
  if (v82 != v84) {
    free(v82);
  }
  if (v85 != &v86) {
    free(v85);
  }
  if (v87 != &v89) {
    free(v87);
  }
  return 1;
}

uint64_t mlir::mps::Conv3DOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = (const char *)a1[4];
    if (v4)
    {
      uint64_t v5 = (const char *)a1[5];
      if (v5)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            int64_t v6 = (const char *)a1[8];
            if (v6)
            {
              uint64_t v7 = a1[9];
              if (v7)
              {
                uint64_t v65 = (const char *)a1[6];
                uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
                  uint64_t v65 = v6;
                  uint64_t v66 = v8;
                  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                  uint64_t v10 = Type;
                  if (Type) {
                    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  }
                  uint64_t Value = (uint64_t)v10;
                  uint64_t v71 = Type;
                  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v68[0] = 5;
                  if (v12 == 1
                    && *ArgAttrsAttr == v68[0]
                    && (uint64_t OperandRange = v6,
                        llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                    && (uint64_t v62 = v6,
                        *(void *)&long long v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                        *((void *)&v69 + 1) = v13,
                        uint64_t v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                  {
                    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                    uint64_t v65 = v4;
                    uint64_t v66 = v14;
                    long long v15 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                    long long v16 = v15;
                    if (v15) {
                      long long v15 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
                    }
                    uint64_t Value = (uint64_t)v16;
                    uint64_t v71 = v15;
                    uint64_t v17 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v68[0] = 5;
                    if (v18 == 1
                      && *v17 == v68[0]
                      && (uint64_t OperandRange = v4,
                          llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                      && (uint64_t v62 = v4,
                          *(void *)&long long v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                          *((void *)&v69 + 1) = v19,
                          uint64_t v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                    {
                      uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
                      uint64_t v65 = v5;
                      uint64_t v66 = v20;
                      uint64_t v21 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                      uint64_t v22 = v21;
                      if (v21) {
                        uint64_t v21 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
                      }
                      uint64_t Value = (uint64_t)v22;
                      uint64_t v71 = v21;
                      unint64_t v23 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      long long v69 = xmmword_1810FE2F0;
                      if (v24 == 2
                        && (*v23 == (void)v69 ? (BOOL v25 = v23[1] == *((void *)&v69 + 1)) : (BOOL v25 = 0),
                            v25
                         && (uint64_t v63 = (uint64_t)v5,
                             v68[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63),
                             v68[1] = v26,
                             uint64_t OperandRange = (const char *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68),
                             mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))))
                      {
                        if ((*(_DWORD *)(v3 + 8) - 7) >= 2)
                        {
                          uint64_t v61 = "'mps.conv_3d' op attribute 'data_layout' failed to satisfy constraint: valid TensorDataL"
                                "ayout is one of NDHWC or NCDHW";
                        }
                        else
                        {
                          if ((*(_DWORD *)(v7 + 8) - 9) < 2) {
                            return 1;
                          }
                          uint64_t v61 = "'mps.conv_3d' op attribute 'weights_layout' failed to satisfy constraint: valid TensorDa"
                                "taLayout is one of DHWIO or OIDHW";
                        }
                      }
                      else
                      {
                        uint64_t v61 = "'mps.conv_3d' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements "
                              "attribute of shape {5, 2}";
                      }
                    }
                    else
                    {
                      uint64_t v61 = "'mps.conv_3d' op attribute 'dilation_rates' failed to satisfy constraint: positive ui64 elem"
                            "ents attribute of shape {5}";
                    }
                  }
                  else
                  {
                    uint64_t v61 = "'mps.conv_3d' op attribute 'strides' failed to satisfy constraint: positive ui64 elements attr"
                          "ibute of shape {5}";
                  }
                }
                else
                {
                  uint64_t v61 = "'mps.conv_3d' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned integer attribute";
                }
              }
              else
              {
                uint64_t v61 = "'mps.conv_3d' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              uint64_t v61 = "'mps.conv_3d' op requires attribute 'strides'";
            }
            uint64_t v65 = v61;
            __int16 v67 = 259;
            mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
            uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v27;
          }
          uint64_t v65 = "'mps.conv_3d' op requires attribute 'padding_style'";
          __int16 v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v78)
          {
            uint64_t v54 = (void **)__p;
            if (__p)
            {
              uint64_t v55 = v77;
              uint64_t v56 = __p;
              if (v77 != __p)
              {
                do
                  uint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
                while (v55 != v54);
                uint64_t v56 = __p;
              }
              long long v77 = v54;
              operator delete(v56);
            }
            unint64_t v31 = v74;
            if (!v74) {
              goto LABEL_105;
            }
            uint64_t v57 = v75;
            uint64_t v33 = v74;
            if (v75 == v74)
            {
LABEL_104:
              char v75 = v31;
              operator delete(v33);
LABEL_105:
              if (v72 != &v73) {
                free(v72);
              }
              return v27;
            }
            do
            {
              int v59 = (void *)*--v57;
              uint64_t v58 = v59;
              *uint64_t v57 = 0;
              if (v59) {
                operator delete[](v58);
              }
            }
            while (v57 != v31);
LABEL_103:
            uint64_t v33 = v74;
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v65 = "'mps.conv_3d' op requires attribute 'groups'";
          __int16 v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v78)
          {
            uint64_t v48 = (void **)__p;
            if (__p)
            {
              uint64_t v49 = v77;
              uint64_t v50 = __p;
              if (v77 != __p)
              {
                do
                  uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
                while (v49 != v48);
                uint64_t v50 = __p;
              }
              long long v77 = v48;
              operator delete(v50);
            }
            unint64_t v31 = v74;
            if (!v74) {
              goto LABEL_105;
            }
            int v51 = v75;
            uint64_t v33 = v74;
            if (v75 == v74) {
              goto LABEL_104;
            }
            do
            {
              uint64_t v53 = (void *)*--v51;
              uint64_t v52 = v53;
              *int v51 = 0;
              if (v53) {
                operator delete[](v52);
              }
            }
            while (v51 != v31);
            goto LABEL_103;
          }
        }
      }
      else
      {
        uint64_t v65 = "'mps.conv_3d' op requires attribute 'explicit_padding'";
        __int16 v67 = 259;
        mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
        uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        }
        if (v78)
        {
          uint64_t v42 = (void **)__p;
          if (__p)
          {
            uint64_t v43 = v77;
            uint64_t v44 = __p;
            if (v77 != __p)
            {
              do
                uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
              while (v43 != v42);
              uint64_t v44 = __p;
            }
            long long v77 = v42;
            operator delete(v44);
          }
          unint64_t v31 = v74;
          if (!v74) {
            goto LABEL_105;
          }
          uint64_t v45 = v75;
          uint64_t v33 = v74;
          if (v75 == v74) {
            goto LABEL_104;
          }
          do
          {
            unint64_t v47 = (void *)*--v45;
            uint64_t v46 = v47;
            *uint64_t v45 = 0;
            if (v47) {
              operator delete[](v46);
            }
          }
          while (v45 != v31);
          goto LABEL_103;
        }
      }
    }
    else
    {
      uint64_t v65 = "'mps.conv_3d' op requires attribute 'dilation_rates'";
      __int16 v67 = 259;
      mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
      uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v78)
      {
        uint64_t v36 = (void **)__p;
        if (__p)
        {
          uint64_t v37 = v77;
          uint64_t v38 = __p;
          if (v77 != __p)
          {
            do
              uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            uint64_t v38 = __p;
          }
          long long v77 = v36;
          operator delete(v38);
        }
        unint64_t v31 = v74;
        if (!v74) {
          goto LABEL_105;
        }
        uint64_t v39 = v75;
        uint64_t v33 = v74;
        if (v75 == v74) {
          goto LABEL_104;
        }
        do
        {
          uint64_t v41 = (void *)*--v39;
          uint64_t v40 = v41;
          *uint64_t v39 = 0;
          if (v41) {
            operator delete[](v40);
          }
        }
        while (v39 != v31);
        goto LABEL_103;
      }
    }
  }
  else
  {
    uint64_t v65 = "'mps.conv_3d' op requires attribute 'data_layout'";
    __int16 v67 = 259;
    mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    }
    if (v78)
    {
      uint64_t v28 = (void **)__p;
      if (__p)
      {
        uint64_t v29 = v77;
        uint64_t v30 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          uint64_t v30 = __p;
        }
        long long v77 = v28;
        operator delete(v30);
      }
      unint64_t v31 = v74;
      if (!v74) {
        goto LABEL_105;
      }
      uint64_t v32 = v75;
      uint64_t v33 = v74;
      if (v75 == v74) {
        goto LABEL_104;
      }
      do
      {
        uint64_t v35 = (void *)*--v32;
        uint64_t v34 = v35;
        *uint64_t v32 = 0;
        if (v35) {
          operator delete[](v34);
        }
      }
      while (v32 != v31);
      goto LABEL_103;
    }
  }
  return v27;
}

void *llvm::SmallVector<long long,5u>::SmallVector(void *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 2;
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  if (a1 != (void *)a2)
  {
    unint64_t v5 = *(unsigned int *)(a2 + 8);
    if (v5)
    {
      if (v5 < 6)
      {
        unsigned int v6 = *(_DWORD *)(a2 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v5, 8);
        unsigned int v6 = *(_DWORD *)(a2 + 8);
        if (!v6)
        {
LABEL_8:
          *((_DWORD *)a1 + 2) = v5;
          return a1;
        }
        uint64_t v3 = (void *)*a1;
      }
      memcpy(v3, *(const void **)a2, 8 * v6);
      goto LABEL_8;
    }
  }
  return a1;
}

void llvm::SmallVectorImpl<long long>::append(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 + v4 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5 + v4, 8);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  if (v4)
  {
    memcpy((void *)(*(void *)a1 + 8 * v5), v3, 8 * v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v5 + v4;
}

uint64_t mlir::mps::verifyConvolutionInputChannels(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 1;
  if (a3 && a6)
  {
    uint64_t v9 = -4;
    if (a4 != 7) {
      uint64_t v9 = -1;
    }
    uint64_t v10 = *(void *)(a2 + 8 * (v9 + a3));
    if (v10 != 0x8000000000000000)
    {
      uint64_t v11 = 8;
      if (a7 == 10) {
        uint64_t v11 = 24;
      }
      uint64_t v12 = *(void *)(a5 + v11);
      if (v12 != 0x8000000000000000 && v12 * a8 != v10)
      {
        unint64_t v23 = (const void **)"failed: inputChannels must be equal to groups * inputWeightChannels";
        __int16 v24 = 259;
        mlir::Operation::emitOpError(a1, &v23, (uint64_t)v25);
        uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
        if (v25[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
        }
        if (v32)
        {
          uint64_t v14 = (void **)__p;
          if (__p)
          {
            long long v15 = v31;
            long long v16 = __p;
            if (v31 != __p)
            {
              do
                long long v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              long long v16 = __p;
            }
            unint64_t v31 = v14;
            operator delete(v16);
          }
          uint64_t v17 = v28;
          if (v28)
          {
            uint64_t v18 = v29;
            uint64_t v19 = v28;
            if (v29 != v28)
            {
              do
              {
                uint64_t v21 = (void *)*--v18;
                uint64_t v20 = v21;
                *uint64_t v18 = 0;
                if (v21) {
                  operator delete[](v20);
                }
              }
              while (v18 != v17);
              uint64_t v19 = v28;
            }
            uint64_t v29 = v17;
            operator delete(v19);
          }
          if (v26 != &v27) {
            free(v26);
          }
        }
      }
    }
  }
  return v8;
}

uint64_t mlir::mps::verifyConvolutionOutputChannels(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, unint64_t a8)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 1;
  if (!a3) {
    return v8;
  }
  if (!a6) {
    return v8;
  }
  unint64_t v9 = *(void *)(a5 + 32 * (a7 == 10));
  if (v9 == 0x8000000000000000) {
    return v8;
  }
  uint64_t v10 = -4;
  if (a4 != 7) {
    uint64_t v10 = -1;
  }
  uint64_t v11 = *(void *)(a2 + 8 * (v10 + a3));
  if (v11 == 0x8000000000000000 || v9 == v11)
  {
    if (v9 % a8)
    {
      v28[0] = (const void **)"failed: weights output channels needs to be divisible by groups";
      __int16 v29 = 259;
      mlir::Operation::emitOpError(a1, v28, (uint64_t)v30);
      uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
      if (v30[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
      }
      if (v37)
      {
        uint64_t v13 = (void **)__p;
        if (__p)
        {
          uint64_t v14 = v36;
          long long v15 = __p;
          if (v36 != __p)
          {
            do
              uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
            while (v14 != v13);
            long long v15 = __p;
          }
          uint64_t v36 = v13;
          operator delete(v15);
        }
        long long v16 = v33;
        if (!v33) {
          goto LABEL_42;
        }
        uint64_t v17 = v34;
        uint64_t v18 = v33;
        if (v34 == v33) {
          goto LABEL_41;
        }
        do
        {
          uint64_t v20 = (void *)*--v17;
          uint64_t v19 = v20;
          *uint64_t v17 = 0;
          if (v20) {
            operator delete[](v19);
          }
        }
        while (v17 != v16);
        goto LABEL_40;
      }
    }
  }
  else
  {
    v28[0] = (const void **)"failed: weights output channels are inconsistent with those of the operands or result";
    __int16 v29 = 259;
    mlir::Operation::emitOpError(a1, v28, (uint64_t)v30);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    }
    if (v37)
    {
      uint64_t v21 = (void **)__p;
      if (__p)
      {
        uint64_t v22 = v36;
        unint64_t v23 = __p;
        if (v36 != __p)
        {
          do
            uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          unint64_t v23 = __p;
        }
        uint64_t v36 = v21;
        operator delete(v23);
      }
      long long v16 = v33;
      if (!v33) {
        goto LABEL_42;
      }
      __int16 v24 = v34;
      uint64_t v18 = v33;
      if (v34 == v33)
      {
LABEL_41:
        uint64_t v34 = v16;
        operator delete(v18);
LABEL_42:
        if (v31 != &v32) {
          free(v31);
        }
        return v8;
      }
      do
      {
        uint64_t v26 = (void *)*--v24;
        BOOL v25 = v26;
        *__int16 v24 = 0;
        if (v26) {
          operator delete[](v25);
        }
      }
      while (v24 != v16);
LABEL_40:
      uint64_t v18 = v33;
      goto LABEL_41;
    }
  }
  return v8;
}

uint64_t mlir::mps::Conv3DOp::verify(uint64_t **this)
{
  v100[6] = *MEMORY[0x1E4F143B8];
  v99[0] = v100;
  v99[1] = (void *)0x600000000;
  unint64_t v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v2 = 0;
  }
  uint64_t v3 = *(void **)(v2 + 16);
  if (v3) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  mlir::getIntValues<long long>((uint64_t)v3, v4, (uint64_t)v99, 1);
  unint64_t v5 = *((unsigned int *)*this + 11);
  uint64_t v6 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v7 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(_DWORD *)(*(void *)(v7 + 32) + 8);
  if (v8 == 3) {
    goto LABEL_21;
  }
  if (v8) {
    goto LABEL_35;
  }
  uint64_t v9 = *(void *)v99[0];
  if (*(_DWORD *)(*(void *)v6 + 8) == 7)
  {
    if (!v9 && !*((void *)v99[0] + 1) && !*((void *)v99[0] + 2))
    {
      uint64_t v10 = 3;
      goto LABEL_20;
    }
LABEL_21:
    v88[0] = (const void **)"failed: explicit padding incompatible with with given tensor data layout.";
    v89[8] = 259;
    mlir::OpState::emitOpError(this, v88, (uint64_t)&v90);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
    if (v90) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    }
    if (v98)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v97;
        uint64_t v14 = __p;
        if (v97 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v97 = v12;
        operator delete(v14);
      }
      long long v15 = v94;
      if (v94)
      {
        long long v16 = v95;
        uint64_t v17 = v94;
        if (v95 != v94)
        {
          do
          {
            uint64_t v19 = (void *)*--v16;
            uint64_t v18 = v19;
            *long long v16 = 0;
            if (v19) {
              operator delete[](v18);
            }
          }
          while (v16 != v15);
          uint64_t v17 = v94;
        }
        long long v95 = v15;
        operator delete(v17);
      }
      uint64_t v22 = (const void **)v92;
      if (v92 != v93) {
        goto LABEL_40;
      }
    }
    goto LABEL_41;
  }
  if (v9 || *((void *)v99[0] + 1) || *((void *)v99[0] + 8)) {
    goto LABEL_21;
  }
  uint64_t v10 = 9;
LABEL_20:
  if (*((void *)v99[0] + v10)) {
    goto LABEL_21;
  }
LABEL_35:
  v88[0] = (const void **)v89;
  v88[1] = (const void **)0x600000000;
  uint64_t v20 = *(void **)(v7 + 40);
  if (v20) {
    uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v20 + 8);
  }
  else {
    uint64_t v21 = 0;
  }
  mlir::getIntValues<long long>((uint64_t)v20, v21, (uint64_t)v88, 1);
  if (*v88[0] == (const void *)1)
  {
    unint64_t v24 = *((unsigned int *)*this + 11);
    uint64_t v25 = (uint64_t)&(*this)[2 * ((v24 >> 23) & 1)];
    uint64_t v27 = *(void *)(v25 + 64);
    uint64_t v26 = v25 + 64;
    uint64_t v28 = 4;
    if (*(_DWORD *)(v27 + 8) == 7) {
      uint64_t v28 = 1;
    }
    if (v88[0][v28] == (const void *)1)
    {
      v86[0] = (const void **)v87;
      v86[1] = (const void **)0x600000000;
      if (BYTE3(v24)) {
        uint64_t v29 = v26;
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = *(void **)(v29 + 8);
      if (v30) {
        uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
      }
      else {
        uint64_t v31 = 0;
      }
      mlir::getIntValues<long long>((uint64_t)v30, v31, (uint64_t)v86, 1);
      if (*v86[0] != (const void *)1) {
        goto LABEL_81;
      }
      uint64_t v41 = *this;
      uint64_t v42 = 4;
      if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8) == 7) {
        uint64_t v42 = 1;
      }
      if (v86[0][v42] == (const void *)1)
      {
        uint64_t v43 = v41[9];
        uint64_t v44 = (const void **)(*(void *)(*(void *)(v43 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v44)
        {
          uint64_t v45 = (const void **)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v44 + 8);
          uint64_t v41 = *this;
          uint64_t v43 = (*this)[9];
        }
        else
        {
          uint64_t v45 = 0;
        }
        v83[0] = v44;
        v83[1] = v45;
        uint64_t v54 = (void *)(*(void *)(*(void *)(v43 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v54)
        {
          uint64_t v55 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v54 + 8);
          uint64_t v41 = *this;
        }
        else
        {
          uint64_t v55 = 0;
        }
        v82[0] = v54;
        v82[1] = v55;
        uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83);
        uint64_t v78 = v57;
        uint64_t v79 = ArgAttrsAttr;
        int v58 = *(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
        uint64_t v59 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v82);
        uint64_t v61 = v60;
        unint64_t v62 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          unint64_t v62 = 0;
        }
        int v63 = *(_DWORD *)(*(void *)(v62 + 48) + 8);
        v81[0] = *(void *)(v62 + 24);
        mlir::IntegerAttr::getValue(v81, (llvm::APInt *)&v90);
        if (v91 > 0x40)
        {
          __int16 v64 = *(void **)v90;
          operator delete[](v90);
        }
        else
        {
          __int16 v64 = v90;
        }
        if (mlir::mps::verifyConvolutionInputChannels(v41, v79, v78, v58, v59, v61, v63, (uint64_t)v64))
        {
          if (*((_DWORD *)*this + 9)) {
            uint64_t v65 = (uint64_t)(*this - 2);
          }
          else {
            uint64_t v65 = 0;
          }
          uint64_t v66 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v65, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (v66) {
            uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v66 + 8);
          }
          else {
            uint64_t v67 = 0;
          }
          v81[0] = v66;
          v81[1] = v67;
          uint64_t v80 = *this;
          uint64_t v68 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v81);
          uint64_t v70 = v69;
          int v71 = *(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
          uint64_t v72 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v82);
          uint64_t v74 = v73;
          unint64_t v75 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
          if (!HIBYTE(*((_DWORD *)*this + 11))) {
            unint64_t v75 = 0;
          }
          int v76 = *(_DWORD *)(*(void *)(v75 + 48) + 8);
          uint64_t v85 = *(void *)(v75 + 24);
          mlir::IntegerAttr::getValue(&v85, (llvm::APInt *)&v90);
          if (v91 > 0x40)
          {
            long long v77 = *(void **)v90;
            operator delete[](v90);
          }
          else
          {
            long long v77 = v90;
          }
          uint64_t v11 = mlir::mps::verifyConvolutionOutputChannels(v80, v68, v70, v71, v72, v74, v76, (unint64_t)v77);
        }
        else
        {
          uint64_t v11 = 0;
        }
      }
      else
      {
LABEL_81:
        v83[0] = (const void **)"failed: dilation values incompatible with given tensor layout.";
        __int16 v84 = 259;
        mlir::OpState::emitOpError(this, v83, (uint64_t)&v90);
        uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
        if (v90) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
        }
        if (v98)
        {
          uint64_t v46 = (void **)__p;
          if (__p)
          {
            unint64_t v47 = v97;
            uint64_t v48 = __p;
            if (v97 != __p)
            {
              do
                unint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
              while (v47 != v46);
              uint64_t v48 = __p;
            }
            uint64_t v97 = v46;
            operator delete(v48);
          }
          uint64_t v49 = v94;
          if (v94)
          {
            uint64_t v50 = v95;
            int v51 = v94;
            if (v95 != v94)
            {
              do
              {
                uint64_t v53 = (void *)*--v50;
                uint64_t v52 = v53;
                void *v50 = 0;
                if (v53) {
                  operator delete[](v52);
                }
              }
              while (v50 != v49);
              int v51 = v94;
            }
            long long v95 = v49;
            operator delete(v51);
          }
          if (v92 != v93) {
            free(v92);
          }
        }
      }
      uint64_t v40 = v86[0];
      if ((_WORD *)v86[0] == v87) {
        goto LABEL_72;
      }
LABEL_71:
      free(v40);
      goto LABEL_72;
    }
  }
  v86[0] = (const void **)"failed: strides incompatible with given tensor data layout.";
  v87[8] = 259;
  mlir::OpState::emitOpError(this, v86, (uint64_t)&v90);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
  if (v90) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
  }
  if (v98)
  {
    uint64_t v32 = (void **)__p;
    if (__p)
    {
      uint64_t v33 = v97;
      uint64_t v34 = __p;
      if (v97 != __p)
      {
        do
          uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        uint64_t v34 = __p;
      }
      uint64_t v97 = v32;
      operator delete(v34);
    }
    uint64_t v35 = v94;
    if (v94)
    {
      uint64_t v36 = v95;
      char v37 = v94;
      if (v95 != v94)
      {
        do
        {
          uint64_t v39 = (void *)*--v36;
          uint64_t v38 = v39;
          *uint64_t v36 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v36 != v35);
        char v37 = v94;
      }
      long long v95 = v35;
      operator delete(v37);
    }
    uint64_t v40 = (const void **)v92;
    if (v92 != v93) {
      goto LABEL_71;
    }
  }
LABEL_72:
  uint64_t v22 = v88[0];
  if ((_WORD *)v88[0] != v89) {
LABEL_40:
  }
    free(v22);
LABEL_41:
  if (v99[0] != v100) {
    free(v99[0]);
  }
  return v11;
}

uint64_t mlir::mps::Conv3DOp::getPaddingStyle(mlir::mps::Conv3DOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(unsigned int *)(*(void *)(v1 + 32) + 8);
}

uint64_t mlir::mps::Conv3DOp::getStrides(mlir::mps::Conv3DOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 40);
}

uint64_t mlir::mps::Conv3DOp::getWeightsLayout(mlir::mps::Conv3DOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(unsigned int *)(*(void *)(v1 + 48) + 8);
}

void *mlir::mps::Conv3DOp::getGroups(mlir::mps::Conv3DOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  uint64_t v6 = *(void *)(v1 + 24);
  mlir::IntegerAttr::getValue(&v6, (llvm::APInt *)&__p);
  if (v5 <= 0x40) {
    return __p;
  }
  uint64_t v3 = *(void *)__p;
  operator delete[](__p);
  return (void *)v3;
}

uint64_t mlir::mps::get5DElementsAttrFrom3DSpatialValues(mlir::Builder *a1, uint64_t *a2, uint64_t a3, int a4)
{
  v17[5] = *MEMORY[0x1E4F143B8];
  long long v15 = v17;
  uint64_t v5 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v6 = *a2;
  if (a4 == 7) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a2[2];
  }
  if (a4 != 7)
  {
    uint64_t v4 = a2[1];
    uint64_t v5 = *a2;
    uint64_t v6 = 1;
  }
  v17[0] = 1;
  v17[1] = v7;
  void v17[2] = v4;
  void v17[3] = v5;
  v17[4] = v6;
  uint64_t v16 = 0x500000005;
  uint64_t v14 = 5;
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  uint64_t v9 = (void *)mlir::RankedTensorType::get((uint64_t)&v14, 1, IntegerType, 0);
  uint64_t v10 = v9;
  if (v9) {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = mlir::DenseElementsAttr::getFromRawBuffer(v10, v11, v15, 8 * v16, 8, 1, 0);
  if (v15 != v17) {
    free(v15);
  }
  return v12;
}

uint64_t mlir::mps::get5DElementsAttrFrom3DPaddingValues(mlir::Builder *a1, uint64_t *a2, uint64_t a3, int a4)
{
  v23[5] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = v23;
  uint64_t v7 = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v22 = 0x500000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, 0xAuLL, 8);
  int v12 = v22;
  uint64_t v13 = (char *)v21 + 8 * v22;
  if (a4 == 7)
  {
    *(_OWORD *)uint64_t v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    *((void *)v13 + 4) = v7;
    *((void *)v13 + 5) = v6;
    *((void *)v13 + 6) = v9;
    *((void *)v13 + 7) = v8;
    *((void *)v13 + 8) = v11;
    *((void *)v13 + 9) = v10;
  }
  else
  {
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v7;
    *((void *)v13 + 3) = v6;
    *((void *)v13 + 4) = v9;
    *((void *)v13 + 5) = v8;
    *((void *)v13 + 6) = v11;
    *((void *)v13 + 7) = v10;
    *((void *)v13 + 8) = 0;
    *((void *)v13 + 9) = 0;
  }
  LODWORD(v22) = v12 + 10;
  long long v20 = xmmword_1810FE2F0;
  uint64_t IntegerType = mlir::Builder::getIntegerType(a1, 0x40u, 0);
  long long v15 = (void *)mlir::RankedTensorType::get((uint64_t)&v20, 2, IntegerType, 0);
  uint64_t v16 = v15;
  if (v15) {
    uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = mlir::DenseElementsAttr::getFromRawBuffer(v16, v17, v21, 8 * v22, 8, 1, 0);
  if (v21 != v23) {
    free(v21);
  }
  return v18;
}

void mlir::mps::computeConv3DTransposeResultSpatialShape(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X4>, void *a5@<X6>, void *a6@<X8>, uint64_t a7)
{
  unint64_t v7 = a2;
  *a6 = a6 + 2;
  a6[1] = 0x300000000;
  if (!a2) {
    return;
  }
  if (a2 < 4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a7;
    unint64_t v15 = a2;
    goto LABEL_6;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a6, a6 + 2, a2, 8);
  uint64_t v13 = *((unsigned int *)a6 + 2);
  uint64_t v14 = a7;
  unint64_t v15 = v7 - v13;
  if (v7 != v13) {
LABEL_6:
  }
    bzero((void *)(*a6 + 8 * v13), 8 * v15);
  *((_DWORD *)a6 + 2) = v7;
  uint64_t v16 = (uint64_t *)*a6;
  uint64_t v17 = (void *)(v14 + 8);
  do
  {
    uint64_t v19 = *a3++;
    uint64_t v18 = v19;
    uint64_t v21 = *a1++;
    uint64_t v20 = v21;
    BOOL v22 = v21 == 0x8000000000000000 || v18 == 0x8000000000000000;
    uint64_t v23 = 0x8000000000000000;
    if (!v22) {
      uint64_t v23 = *a4 * (v20 - 1) + *a5 * (v18 - 1) - (*(v17 - 1) + *v17) + 1;
    }
    *v16++ = v23;
    v17 += 2;
    ++a5;
    ++a4;
    --v7;
  }
  while (v7);
}

uint64_t mlir::mps::Conv3DDataGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v116 = a4;
  unint64_t v117 = a5;
  if (a7)
  {
    long long v14 = *a7;
    long long v15 = a7[1];
    long long v16 = a7[2];
    uint64_t v17 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v17 = 0;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
  }
  uint64_t v105 = a6;
  v106[0] = 0;
  char v107 = 0;
  long long v108 = v14;
  long long v109 = v15;
  long long v110 = v16;
  uint64_t v111 = v17;
  uint64_t v112 = a9;
  unint64_t v18 = a5;
  uint64_t v113 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v105);
    if (v107) {
      char v107 = 0;
    }
    mlir::OperationName::OperationName(v106, "mps.conv_3d_data_gradient", 25, Context);
    char v107 = 1;
    unint64_t v18 = v117;
  }
  uint64_t v114 = a4;
  unint64_t v115 = a5;
  if (v18 >= 2)
  {
    uint64_t v20 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mps::Conv3DDataGradientOpAdaptor::verify(&v105, v20))
    {
      uint64_t v21 = mlir::ValueRange::dereference_iterator(&v116, 0);
      uint64_t v22 = mlir::ValueRange::dereference_iterator(&v116, 1);
      uint64_t v23 = 0;
      if (v117 >= 3) {
        uint64_t v23 = mlir::ValueRange::dereference_iterator(&v116, 2);
      }
      unint64_t v24 = *(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = (void *)(*(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v84 = v24;
      mlir::ValueRange::ValueRange(v104, (uint64_t)&v83, 2uLL);
      unint64_t v101 = v103;
      uint64_t v102 = 0x500000000;
      if (v23 && mlir::matchConstantWithIntVector<long long>(v23, (uint64_t)&v101))
      {
        uint64_t v26 = (char *)v101;
        uint64_t v27 = v102;
        if (!v102) {
          goto LABEL_50;
        }
        unint64_t v28 = (v102 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v29 = (char *)v101;
        if (v28 >= 3)
        {
          unint64_t v30 = v28 + 1;
          uint64_t v29 = (char *)v101 + 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v31 = (int64x2_t *)((char *)v101 + 16);
          v32.i64[0] = -1;
          v32.i64[1] = -1;
          uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          while (1)
          {
            int32x2_t v34 = vmovn_s64(vceqq_s64(v31[-1], v32));
            if (v34.i8[0])
            {
              v31[-1].i64[0] = 0x8000000000000000;
              if ((v34.i8[4] & 1) == 0)
              {
LABEL_20:
                int32x2_t v35 = vmovn_s64(vceqq_s64(*v31, v32));
                if ((v35.i8[0] & 1) == 0) {
                  goto LABEL_21;
                }
                goto LABEL_25;
              }
            }
            else if ((v34.i8[4] & 1) == 0)
            {
              goto LABEL_20;
            }
            v31[-1].i64[1] = 0x8000000000000000;
            int32x2_t v35 = vmovn_s64(vceqq_s64(*v31, v32));
            if ((v35.i8[0] & 1) == 0)
            {
LABEL_21:
              if (v35.i8[4]) {
                goto LABEL_26;
              }
              goto LABEL_17;
            }
LABEL_25:
            v31->i64[0] = 0x8000000000000000;
            if (v35.i8[4]) {
LABEL_26:
            }
              v31->i64[1] = 0x8000000000000000;
LABEL_17:
            v31 += 2;
            v33 -= 4;
            if (!v33)
            {
              if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_50;
              }
              goto LABEL_54;
            }
          }
        }
        do
        {
LABEL_54:
          if (*(void *)v29 == -1) {
            *(void *)uint64_t v29 = 0x8000000000000000;
          }
          v29 += 8;
        }
        while (v29 != &v26[8 * v27]);
LABEL_50:
        uint64_t v51 = mlir::RankedTensorType::get((uint64_t)v26, v27, v25, 0);
        uint64_t v52 = *(unsigned int *)(a11 + 8);
        if (v52 < *(_DWORD *)(a11 + 12)) {
          goto LABEL_45;
        }
        goto LABEL_51;
      }
      uint64_t v39 = (void *)(*(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v40 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
      if (v40) {
        uint64_t v40 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
      }
      else {
        uint64_t v39 = 0;
      }
      v73[0] = v39;
      v73[1] = v40;
      uint64_t v41 = (void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v41 + 8))
      {
        uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v41 + 8);
        int v71 = v41;
        uint64_t v72 = v42;
        if (!v73[0]) {
          goto LABEL_44;
        }
      }
      else
      {
        int v71 = 0;
        uint64_t v72 = 0;
        if (!v73[0]) {
          goto LABEL_44;
        }
      }
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v73))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
        if (v43 >= 5)
        {
          if (v71)
          {
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v71))
            {
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
              if (v44 == 5)
              {
                uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                mlir::mps::getSpatialValues(ArgAttrsAttr, v46, *(_DWORD *)(v108 + 8), (uint64_t)&v98);
                uint64_t v47 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
                mlir::mps::getSpatialValues(v47, v48, *(_DWORD *)(v111 + 8), (uint64_t)&v96);
                char v93 = v95;
                uint64_t v94 = 0x500000000;
                uint64_t v49 = *((void *)&v110 + 1);
                if (*((void *)&v110 + 1)) {
                  uint64_t v50 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((void **)&v110 + 1) + 8);
                }
                else {
                  uint64_t v50 = 0;
                }
                mlir::getIntValues<long long>(v49, v50, (uint64_t)&v93, 1);
                mlir::mps::getSpatialValues((uint64_t)v93, v94, *(_DWORD *)(v108 + 8), (uint64_t)&v91);
                unsigned int v88 = v90;
                uint64_t v89 = 0x500000000;
                uint64_t v54 = *((void *)&v108 + 1);
                if (*((void *)&v108 + 1)) {
                  uint64_t v55 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((void **)&v108 + 1) + 8);
                }
                else {
                  uint64_t v55 = 0;
                }
                mlir::getIntValues<long long>(v54, v55, (uint64_t)&v88, 1);
                mlir::mps::getSpatialValues((uint64_t)v88, v89, *(_DWORD *)(v108 + 8), (uint64_t)&v86);
                uint64_t v83 = v85;
                uint64_t v84 = 0xA00000000;
                uint64_t v56 = v109;
                if ((void)v109) {
                  uint64_t v57 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v109 + 8);
                }
                else {
                  uint64_t v57 = 0;
                }
                mlir::getIntValues<long long>(v56, v57, (uint64_t)&v83, 1);
                mlir::mps::getSpatialPaddingValues(v83, *(_DWORD *)(v108 + 8), &v80);
                mlir::mps::computeSpatialPaddings((uint64_t *)v98, v99, (uint64_t *)v96, (uint64_t *)v91, (uint64_t *)v86, (uint64_t)v78, v80, v81, *(_DWORD *)(v110 + 8));
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v80, (uint64_t)v78);
                if (v78[0] != v79) {
                  free(v78[0]);
                }
                v78[0] = v79;
                v78[1] = (void *)0x500000000;
                mlir::mps::computeConv3DTransposeResultSpatialShape((uint64_t *)v98, v99, (uint64_t *)v96, v91, v86, __src, (uint64_t)v80);
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)v78, (uint64_t)__src);
                if (__src[0] != v77) {
                  free(__src[0]);
                }
                uint64_t v58 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                uint64_t v60 = *(void **)(v58 + 8 * v59 - 40);
                uint64_t v61 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v71);
                uint64_t v63 = -4;
                if (*(_DWORD *)(v111 + 8) == 10) {
                  uint64_t v63 = -2;
                }
                uint64_t v64 = *(void *)(v61 + 8 * (v63 + v62));
                Groups = mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase::getGroups((mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase *)&v105);
                __src[0] = v60;
                __src[1] = (void *)((void)Groups * v64);
                v77[0] = *((void *)v78[0] + 2);
                v77[1] = *((void *)v78[0] + 1);
                v77[2] = *(void *)v78[0];
                llvm::SmallVector<long long,4u>::operator=((uint64_t)&v101, __src, 5);
                mlir::mps::convertNCDHWShapeToLayout(v101, v102, *(_DWORD *)(v108 + 8), (uint64_t)__src);
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v101, (uint64_t)__src);
                if (__src[0] != v77) {
                  free(__src[0]);
                }
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                if (v66 >= 6)
                {
                  llvm::SmallVector<long long,5u>::SmallVector(__src, (uint64_t)&v101);
                  uint64_t v67 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                  uint64_t v68 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
                  llvm::SmallVector<long long,5u>::SmallVector<long long const*,void>(v74, v67, (unsigned char *)(v68 + 8 * v69 - 40));
                  llvm::SmallVectorImpl<llvm::SMLoc>::operator=((uint64_t)&v101, (uint64_t)v74);
                  if (v74[0] != &v75) {
                    free(v74[0]);
                  }
                  llvm::SmallVectorImpl<long long>::append((uint64_t)&v101, (uint64_t)__src);
                  if (__src[0] != v77) {
                    free(__src[0]);
                  }
                }
                uint64_t v70 = mlir::RankedTensorType::get((uint64_t)v101, v102, v25, 0);
                llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v70);
                if (v78[0] != v79) {
                  free(v78[0]);
                }
                if (v80 != &v82) {
                  free(v80);
                }
                if (v83 != v85) {
                  free(v83);
                }
                if (v86 != &v87) {
                  free(v86);
                }
                if (v88 != v90) {
                  free(v88);
                }
                if (v91 != &v92) {
                  free(v91);
                }
                if (v93 != v95) {
                  free(v93);
                }
                if (v96 != &v97) {
                  free(v96);
                }
                if (v98 != &v100) {
                  free(v98);
                }
                goto LABEL_46;
              }
            }
          }
        }
      }
LABEL_44:
      uint64_t v51 = mlir::UnrankedTensorType::get(v25);
      uint64_t v52 = *(unsigned int *)(a11 + 8);
      if (v52 < *(_DWORD *)(a11 + 12))
      {
LABEL_45:
        *(void *)(*(void *)a11 + 8 * v52) = v51;
        ++*(_DWORD *)(a11 + 8);
LABEL_46:
        if (v101 != v103) {
          free(v101);
        }
        return 1;
      }
LABEL_51:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v52 + 1, 8);
      LODWORD(v52) = *(_DWORD *)(a11 + 8);
      goto LABEL_45;
    }
  }
  uint64_t v36 = mlir::Float32Type::get(this, a2);
  uint64_t v37 = mlir::UnrankedTensorType::get(v36);
  uint64_t v38 = *(unsigned int *)(a11 + 8);
  if (v38 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v38 + 1, 8);
    LODWORD(v38) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v38) = v37;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::Conv3DDataGradientOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = (const char *)a1[4];
    if (v4)
    {
      uint64_t v5 = (const char *)a1[5];
      if (v5)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            uint64_t v6 = (const char *)a1[8];
            if (v6)
            {
              uint64_t v7 = a1[9];
              if (v7)
              {
                uint64_t v65 = (const char *)a1[6];
                uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
                  uint64_t v65 = v6;
                  uint64_t v66 = v8;
                  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                  uint64_t v10 = Type;
                  if (Type) {
                    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  }
                  uint64_t Value = (uint64_t)v10;
                  int v71 = Type;
                  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v68[0] = 5;
                  if (v12 == 1
                    && *ArgAttrsAttr == v68[0]
                    && (uint64_t OperandRange = v6,
                        llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                    && (uint64_t v62 = v6,
                        *(void *)&long long v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                        *((void *)&v69 + 1) = v13,
                        uint64_t v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                  {
                    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                    uint64_t v65 = v4;
                    uint64_t v66 = v14;
                    long long v15 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                    long long v16 = v15;
                    if (v15) {
                      long long v15 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
                    }
                    uint64_t Value = (uint64_t)v16;
                    int v71 = v15;
                    uint64_t v17 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v68[0] = 5;
                    if (v18 == 1
                      && *v17 == v68[0]
                      && (uint64_t OperandRange = v4,
                          llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                      && (uint64_t v62 = v4,
                          *(void *)&long long v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                          *((void *)&v69 + 1) = v19,
                          uint64_t v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                    {
                      uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
                      uint64_t v65 = v5;
                      uint64_t v66 = v20;
                      uint64_t v21 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                      uint64_t v22 = v21;
                      if (v21) {
                        uint64_t v21 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
                      }
                      uint64_t Value = (uint64_t)v22;
                      int v71 = v21;
                      uint64_t v23 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      long long v69 = xmmword_1810FE2F0;
                      if (v24 == 2
                        && (*v23 == (void)v69 ? (BOOL v25 = v23[1] == *((void *)&v69 + 1)) : (BOOL v25 = 0),
                            v25
                         && (uint64_t v63 = (uint64_t)v5,
                             v68[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63),
                             v68[1] = v26,
                             uint64_t OperandRange = (const char *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68),
                             mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))))
                      {
                        if ((*(_DWORD *)(v3 + 8) - 7) >= 2)
                        {
                          uint64_t v61 = "'mps.conv_3d_data_gradient' op attribute 'data_layout' failed to satisfy constraint: val"
                                "id TensorDataLayout is one of NDHWC or NCDHW";
                        }
                        else
                        {
                          if ((*(_DWORD *)(v7 + 8) - 9) < 2) {
                            return 1;
                          }
                          uint64_t v61 = "'mps.conv_3d_data_gradient' op attribute 'weights_layout' failed to satisfy constraint: "
                                "valid TensorDataLayout is one of DHWIO or OIDHW";
                        }
                      }
                      else
                      {
                        uint64_t v61 = "'mps.conv_3d_data_gradient' op attribute 'explicit_padding' failed to satisfy constraint: "
                              "ui64 elements attribute of shape {5, 2}";
                      }
                    }
                    else
                    {
                      uint64_t v61 = "'mps.conv_3d_data_gradient' op attribute 'dilation_rates' failed to satisfy constraint: posi"
                            "tive ui64 elements attribute of shape {5}";
                    }
                  }
                  else
                  {
                    uint64_t v61 = "'mps.conv_3d_data_gradient' op attribute 'strides' failed to satisfy constraint: positive ui64"
                          " elements attribute of shape {5}";
                  }
                }
                else
                {
                  uint64_t v61 = "'mps.conv_3d_data_gradient' op attribute 'groups' failed to satisfy constraint: 64-bit unsigned "
                        "integer attribute";
                }
              }
              else
              {
                uint64_t v61 = "'mps.conv_3d_data_gradient' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              uint64_t v61 = "'mps.conv_3d_data_gradient' op requires attribute 'strides'";
            }
            uint64_t v65 = v61;
            __int16 v67 = 259;
            mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
            uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v27;
          }
          uint64_t v65 = "'mps.conv_3d_data_gradient' op requires attribute 'padding_style'";
          __int16 v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v78)
          {
            uint64_t v54 = (void **)__p;
            if (__p)
            {
              uint64_t v55 = v77;
              uint64_t v56 = __p;
              if (v77 != __p)
              {
                do
                  uint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
                while (v55 != v54);
                uint64_t v56 = __p;
              }
              long long v77 = v54;
              operator delete(v56);
            }
            uint64_t v31 = v74;
            if (!v74) {
              goto LABEL_105;
            }
            uint64_t v57 = v75;
            uint64_t v33 = v74;
            if (v75 == v74)
            {
LABEL_104:
              uint64_t v75 = v31;
              operator delete(v33);
LABEL_105:
              if (v72 != &v73) {
                free(v72);
              }
              return v27;
            }
            do
            {
              uint64_t v59 = (void *)*--v57;
              uint64_t v58 = v59;
              *uint64_t v57 = 0;
              if (v59) {
                operator delete[](v58);
              }
            }
            while (v57 != v31);
LABEL_103:
            uint64_t v33 = v74;
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v65 = "'mps.conv_3d_data_gradient' op requires attribute 'groups'";
          __int16 v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v78)
          {
            uint64_t v48 = (void **)__p;
            if (__p)
            {
              uint64_t v49 = v77;
              uint64_t v50 = __p;
              if (v77 != __p)
              {
                do
                  uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
                while (v49 != v48);
                uint64_t v50 = __p;
              }
              long long v77 = v48;
              operator delete(v50);
            }
            uint64_t v31 = v74;
            if (!v74) {
              goto LABEL_105;
            }
            uint64_t v51 = v75;
            uint64_t v33 = v74;
            if (v75 == v74) {
              goto LABEL_104;
            }
            do
            {
              uint64_t v53 = (void *)*--v51;
              uint64_t v52 = v53;
              *uint64_t v51 = 0;
              if (v53) {
                operator delete[](v52);
              }
            }
            while (v51 != v31);
            goto LABEL_103;
          }
        }
      }
      else
      {
        uint64_t v65 = "'mps.conv_3d_data_gradient' op requires attribute 'explicit_padding'";
        __int16 v67 = 259;
        mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
        uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        }
        if (v78)
        {
          uint64_t v42 = (void **)__p;
          if (__p)
          {
            uint64_t v43 = v77;
            uint64_t v44 = __p;
            if (v77 != __p)
            {
              do
                uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
              while (v43 != v42);
              uint64_t v44 = __p;
            }
            long long v77 = v42;
            operator delete(v44);
          }
          uint64_t v31 = v74;
          if (!v74) {
            goto LABEL_105;
          }
          uint64_t v45 = v75;
          uint64_t v33 = v74;
          if (v75 == v74) {
            goto LABEL_104;
          }
          do
          {
            uint64_t v47 = (void *)*--v45;
            uint64_t v46 = v47;
            *uint64_t v45 = 0;
            if (v47) {
              operator delete[](v46);
            }
          }
          while (v45 != v31);
          goto LABEL_103;
        }
      }
    }
    else
    {
      uint64_t v65 = "'mps.conv_3d_data_gradient' op requires attribute 'dilation_rates'";
      __int16 v67 = 259;
      mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
      uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v78)
      {
        uint64_t v36 = (void **)__p;
        if (__p)
        {
          uint64_t v37 = v77;
          uint64_t v38 = __p;
          if (v77 != __p)
          {
            do
              uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            uint64_t v38 = __p;
          }
          long long v77 = v36;
          operator delete(v38);
        }
        uint64_t v31 = v74;
        if (!v74) {
          goto LABEL_105;
        }
        uint64_t v39 = v75;
        uint64_t v33 = v74;
        if (v75 == v74) {
          goto LABEL_104;
        }
        do
        {
          uint64_t v41 = (void *)*--v39;
          uint64_t v40 = v41;
          *uint64_t v39 = 0;
          if (v41) {
            operator delete[](v40);
          }
        }
        while (v39 != v31);
        goto LABEL_103;
      }
    }
  }
  else
  {
    uint64_t v65 = "'mps.conv_3d_data_gradient' op requires attribute 'data_layout'";
    __int16 v67 = 259;
    mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    }
    if (v78)
    {
      unint64_t v28 = (void **)__p;
      if (__p)
      {
        uint64_t v29 = v77;
        unint64_t v30 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          unint64_t v30 = __p;
        }
        long long v77 = v28;
        operator delete(v30);
      }
      uint64_t v31 = v74;
      if (!v74) {
        goto LABEL_105;
      }
      int64x2_t v32 = v75;
      uint64_t v33 = v74;
      if (v75 == v74) {
        goto LABEL_104;
      }
      do
      {
        int32x2_t v35 = (void *)*--v32;
        int32x2_t v34 = v35;
        *int64x2_t v32 = 0;
        if (v35) {
          operator delete[](v34);
        }
      }
      while (v32 != v31);
      goto LABEL_103;
    }
  }
  return v27;
}

void *mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase::getGroups(mlir::mps::detail::Conv3DDataGradientOpGenericAdaptorBase *this)
{
  uint64_t v5 = *((void *)this + 6);
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40) {
    return __p;
  }
  uint64_t v2 = *(void *)__p;
  operator delete[](__p);
  return (void *)v2;
}

uint64_t mlir::mps::verifyConvolutionBatches(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 1;
  if (!a3 || !a5) {
    return v5;
  }
  if (a3 == a5)
  {
    uint64_t v6 = a3 - 4;
    if (a3 != 4)
    {
      while (1)
      {
        uint64_t v8 = *a2++;
        uint64_t v7 = v8;
        uint64_t v35 = v8;
        uint64_t v10 = *a4++;
        uint64_t v9 = v10;
        uint64_t v34 = v10;
        BOOL v11 = v35 == 0x8000000000000000 || v9 == 0x8000000000000000;
        if (!v11 && v7 != v9) {
          break;
        }
        if (!--v6) {
          return 1;
        }
      }
      v28[0] = (const void **)"failed: input batch {0} differs from output batch {1}";
      v28[1] = (const void **)53;
      v28[2] = (const void **)v31;
      void v28[3] = (const void **)2;
      v29[0] = &unk_1EC9A4648;
      v29[1] = &v35;
      v30[0] = &unk_1EC9A4648;
      v30[1] = &v34;
      v31[0] = v29;
      v31[1] = v30;
      __int16 v33 = 263;
      int64x2_t v32 = v28;
      mlir::Operation::emitOpError(a1, (const void ***)&v32, (uint64_t)v36);
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
      if (v36[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
      }
      if (v43)
      {
        uint64_t v21 = (void **)__p;
        if (__p)
        {
          uint64_t v22 = v42;
          uint64_t v23 = __p;
          if (v42 != __p)
          {
            do
              uint64_t v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
            while (v22 != v21);
            uint64_t v23 = __p;
          }
          uint64_t v42 = v21;
          operator delete(v23);
        }
        long long v16 = v39;
        if (!v39) {
          goto LABEL_45;
        }
        uint64_t v24 = v40;
        uint64_t v18 = v39;
        if (v40 == v39)
        {
LABEL_44:
          uint64_t v40 = v16;
          operator delete(v18);
LABEL_45:
          if (v37 != &v38) {
            free(v37);
          }
          return v5;
        }
        do
        {
          uint64_t v26 = (void *)*--v24;
          BOOL v25 = v26;
          *uint64_t v24 = 0;
          if (v26) {
            operator delete[](v25);
          }
        }
        while (v24 != v16);
LABEL_43:
        uint64_t v18 = v39;
        goto LABEL_44;
      }
    }
  }
  else
  {
    v28[0] = (const void **)"failed: number of batches are inconsistent between input and output";
    LOWORD(v29[0]) = 259;
    mlir::Operation::emitOpError(a1, v28, (uint64_t)v36);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v36);
    if (v36[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v36);
    }
    if (v43)
    {
      uint64_t v13 = (void **)__p;
      if (__p)
      {
        uint64_t v14 = v42;
        long long v15 = __p;
        if (v42 != __p)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          long long v15 = __p;
        }
        uint64_t v42 = v13;
        operator delete(v15);
      }
      long long v16 = v39;
      if (!v39) {
        goto LABEL_45;
      }
      uint64_t v17 = v40;
      uint64_t v18 = v39;
      if (v40 == v39) {
        goto LABEL_44;
      }
      do
      {
        uint64_t v20 = (void *)*--v17;
        uint64_t v19 = v20;
        *uint64_t v17 = 0;
        if (v20) {
          operator delete[](v19);
        }
      }
      while (v17 != v16);
      goto LABEL_43;
    }
  }
  return v5;
}

uint64_t mlir::mps::Conv3DDataGradientOp::verify(uint64_t **this)
{
  v119[6] = *MEMORY[0x1E4F143B8];
  v118[0] = v119;
  v118[1] = (void *)0x600000000;
  unint64_t v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v2 = 0;
  }
  uint64_t v3 = *(void **)(v2 + 16);
  if (v3) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  mlir::getIntValues<long long>((uint64_t)v3, v4, (uint64_t)v118, 1);
  unint64_t v5 = *((unsigned int *)*this + 11);
  uint64_t v6 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v7 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(_DWORD *)(*(void *)(v7 + 32) + 8);
  if (v8 == 3) {
    goto LABEL_21;
  }
  if (v8) {
    goto LABEL_35;
  }
  uint64_t v9 = *(void *)v118[0];
  if (*(_DWORD *)(*(void *)v6 + 8) == 7)
  {
    if (!v9 && !*((void *)v118[0] + 1) && !*((void *)v118[0] + 2))
    {
      uint64_t v10 = 3;
      goto LABEL_20;
    }
LABEL_21:
    v106[0] = (const void **)"failed: explicit padding incompatible with with given tensor data layout.";
    v107[8] = 259;
    mlir::OpState::emitOpError(this, v106, (uint64_t)&v108);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v108);
    if (v108) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v108);
    }
    if (v117)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v116;
        uint64_t v14 = __p;
        if (v116 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        uint64_t v116 = v12;
        operator delete(v14);
      }
      long long v15 = v113;
      if (v113)
      {
        long long v16 = v114;
        uint64_t v17 = v113;
        if (v114 != v113)
        {
          do
          {
            uint64_t v19 = (void *)*--v16;
            uint64_t v18 = v19;
            *long long v16 = 0;
            if (v19) {
              operator delete[](v18);
            }
          }
          while (v16 != v15);
          uint64_t v17 = v113;
        }
        uint64_t v114 = v15;
        operator delete(v17);
      }
      uint64_t v22 = (const void **)v111;
      if (v111 != v112) {
        goto LABEL_40;
      }
    }
    goto LABEL_41;
  }
  if (v9 || *((void *)v118[0] + 1) || *((void *)v118[0] + 8)) {
    goto LABEL_21;
  }
  uint64_t v10 = 9;
LABEL_20:
  if (*((void *)v118[0] + v10)) {
    goto LABEL_21;
  }
LABEL_35:
  v106[0] = (const void **)v107;
  v106[1] = (const void **)0x600000000;
  uint64_t v20 = *(void **)(v7 + 40);
  if (v20) {
    uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v20 + 8);
  }
  else {
    uint64_t v21 = 0;
  }
  mlir::getIntValues<long long>((uint64_t)v20, v21, (uint64_t)v106, 1);
  if (*v106[0] == (const void *)1)
  {
    unint64_t v24 = *((unsigned int *)*this + 11);
    uint64_t v25 = (uint64_t)&(*this)[2 * ((v24 >> 23) & 1)];
    uint64_t v27 = *(void *)(v25 + 64);
    uint64_t v26 = v25 + 64;
    uint64_t v28 = 4;
    if (*(_DWORD *)(v27 + 8) == 7) {
      uint64_t v28 = 1;
    }
    if (v106[0][v28] == (const void *)1)
    {
      v104[0] = (const void **)v105;
      v104[1] = (const void **)0x600000000;
      if (BYTE3(v24)) {
        uint64_t v29 = v26;
      }
      else {
        uint64_t v29 = 0;
      }
      unint64_t v30 = *(void **)(v29 + 8);
      if (v30) {
        uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
      }
      else {
        uint64_t v31 = 0;
      }
      mlir::getIntValues<long long>((uint64_t)v30, v31, (uint64_t)v104, 1);
      if (*v104[0] != (const void *)1) {
        goto LABEL_81;
      }
      uint64_t v41 = *this;
      uint64_t v42 = 4;
      if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8) == 7) {
        uint64_t v42 = 1;
      }
      if (v104[0][v42] == (const void *)1)
      {
        uint64_t v43 = v41[9];
        uint64_t v44 = (void *)(*(void *)(*(void *)(v43 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v44)
        {
          uint64_t v45 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v44 + 8);
          uint64_t v41 = *this;
          uint64_t v43 = (*this)[9];
        }
        else
        {
          uint64_t v45 = 0;
        }
        v99[0] = v44;
        v99[1] = v45;
        uint64_t v55 = (void *)(*(void *)(*(void *)(v43 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v55)
        {
          uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v55 + 8);
          uint64_t v41 = *this;
        }
        else
        {
          uint64_t v56 = 0;
        }
        v98[0] = v55;
        v98[1] = v56;
        int v57 = *((_DWORD *)v41 + 9);
        uint64_t v58 = v41 - 2;
        if (v57) {
          uint64_t v59 = (uint64_t)v58;
        }
        else {
          uint64_t v59 = 0;
        }
        uint64_t v60 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v59, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v60) {
          uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v60 + 8);
        }
        else {
          uint64_t v61 = 0;
        }
        v97[0] = v60;
        v97[1] = v61;
        uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
        uint64_t v63 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
        uint64_t v65 = (unsigned char *)(v63 + 8 * v64);
        long long v108 = &v110;
        uint64_t v109 = 0x500000000;
        uint64_t v66 = v65 - ArgAttrsAttr;
        if ((unint64_t)(v65 - ArgAttrsAttr) < 0x29)
        {
          int v67 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, &v110, v66 >> 3, 8);
          int v67 = v109;
        }
        if (v65 != ArgAttrsAttr)
        {
          memcpy(&v108[v67], ArgAttrsAttr, v65 - ArgAttrsAttr);
          int v67 = v109;
        }
        LODWORD(v109) = v67 + ((unint64_t)v66 >> 3);
        if (*((_DWORD *)*this + 17) != 2)
        {
          if (*(void *)((*this)[9] + 88))
          {
            uint64_t v100 = *(void *)((*this)[9] + 88);
            uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v100);
            if (DefiningOp)
            {
              uint64_t v69 = DefiningOp;
              if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48)))
              {
                unint64_t v101 = v103;
                uint64_t v102 = 0x100000000;
                mlir::Operation::fold(v69, 0, 0, (uint64_t)&v101);
                uint64_t v70 = (void *)(*(void *)v101 & 0xFFFFFFFFFFFFFFF8);
                int v71 = mlir::DenseIntElementsAttr::classof((uint64_t)v70) & (v70 != 0);
                if (!v71) {
                  uint64_t v70 = 0;
                }
                if (v101 != v103) {
                  free(v101);
                }
                if (v71)
                {
                  LODWORD(v109) = 0;
                  if (v70) {
                    uint64_t v72 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v70 + 8);
                  }
                  else {
                    uint64_t v72 = 0;
                  }
                  mlir::getIntValues<long long>((uint64_t)v70, v72, (uint64_t)&v108, 1);
                }
              }
            }
          }
        }
        uint64_t v73 = *this;
        long long v95 = v108;
        uint64_t v74 = v109;
        int v75 = *(_DWORD *)(v73[2 * (((unint64_t)*((unsigned int *)v73 + 11) >> 23) & 1) + 8] + 8);
        uint64_t v76 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v98);
        uint64_t v78 = v77;
        unint64_t v79 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          unint64_t v79 = 0;
        }
        int v80 = *(_DWORD *)(*(void *)(v79 + 48) + 8);
        uint64_t v100 = *(void *)(v79 + 24);
        mlir::IntegerAttr::getValue(&v100, (llvm::APInt *)&v101);
        if (v102 > 0x40)
        {
          unsigned int v81 = *(void **)v101;
          operator delete[](v101);
        }
        else
        {
          unsigned int v81 = v101;
        }
        if (!mlir::mps::verifyConvolutionInputChannels(v73, (uint64_t)v95, v74, v75, v76, v78, v80, (uint64_t)v81))goto LABEL_142; {
        long long v96 = *this;
        }
        uint64_t v82 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v99);
        uint64_t v84 = v83;
        int v85 = *(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8);
        uint64_t v86 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v98);
        uint64_t v88 = v87;
        unint64_t v89 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          unint64_t v89 = 0;
        }
        int v90 = *(_DWORD *)(*(void *)(v89 + 48) + 8);
        uint64_t v100 = *(void *)(v89 + 24);
        mlir::IntegerAttr::getValue(&v100, (llvm::APInt *)&v101);
        if (v102 > 0x40)
        {
          unsigned int v91 = *(void **)v101;
          operator delete[](v101);
        }
        else
        {
          unsigned int v91 = v101;
        }
        if (mlir::mps::verifyConvolutionOutputChannels(v96, v82, v84, v85, v86, v88, v90, (unint64_t)v91))
        {
          uint64_t v92 = *this;
          char v93 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v99);
          uint64_t v11 = mlir::mps::verifyConvolutionBatches(v92, v93, v94, v108, v109);
        }
        else
        {
LABEL_142:
          uint64_t v11 = 0;
        }
        uint64_t v54 = v108;
        if (v108 == &v110) {
          goto LABEL_99;
        }
      }
      else
      {
LABEL_81:
        unint64_t v101 = "failed: dilation values incompatible with given tensor layout.";
        char v103[8] = 259;
        mlir::OpState::emitOpError(this, (const void ***)&v101, (uint64_t)&v108);
        uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v108);
        if (v108) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v108);
        }
        if (!v117) {
          goto LABEL_99;
        }
        uint64_t v46 = (void **)__p;
        if (__p)
        {
          uint64_t v47 = v116;
          uint64_t v48 = __p;
          if (v116 != __p)
          {
            do
              uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
            while (v47 != v46);
            uint64_t v48 = __p;
          }
          uint64_t v116 = v46;
          operator delete(v48);
        }
        uint64_t v49 = v113;
        if (v113)
        {
          uint64_t v50 = v114;
          uint64_t v51 = v113;
          if (v114 != v113)
          {
            do
            {
              uint64_t v53 = (void *)*--v50;
              uint64_t v52 = v53;
              void *v50 = 0;
              if (v53) {
                operator delete[](v52);
              }
            }
            while (v50 != v49);
            uint64_t v51 = v113;
          }
          uint64_t v114 = v49;
          operator delete(v51);
        }
        uint64_t v54 = (uint64_t *)v111;
        if (v111 == v112)
        {
LABEL_99:
          uint64_t v40 = v104[0];
          if ((_WORD *)v104[0] == v105) {
            goto LABEL_72;
          }
LABEL_71:
          free(v40);
          goto LABEL_72;
        }
      }
      free(v54);
      goto LABEL_99;
    }
  }
  v104[0] = (const void **)"failed: strides incompatible with given tensor data layout.";
  v105[8] = 259;
  mlir::OpState::emitOpError(this, v104, (uint64_t)&v108);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v108);
  if (v108) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v108);
  }
  if (v117)
  {
    int64x2_t v32 = (void **)__p;
    if (__p)
    {
      __int16 v33 = v116;
      uint64_t v34 = __p;
      if (v116 != __p)
      {
        do
          __int16 v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        uint64_t v34 = __p;
      }
      uint64_t v116 = v32;
      operator delete(v34);
    }
    uint64_t v35 = v113;
    if (v113)
    {
      uint64_t v36 = v114;
      uint64_t v37 = v113;
      if (v114 != v113)
      {
        do
        {
          uint64_t v39 = (void *)*--v36;
          uint64_t v38 = v39;
          *uint64_t v36 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v36 != v35);
        uint64_t v37 = v113;
      }
      uint64_t v114 = v35;
      operator delete(v37);
    }
    uint64_t v40 = (const void **)v111;
    if (v111 != v112) {
      goto LABEL_71;
    }
  }
LABEL_72:
  uint64_t v22 = v106[0];
  if ((_WORD *)v106[0] != v107) {
LABEL_40:
  }
    free(v22);
LABEL_41:
  if (v118[0] != v119) {
    free(v118[0]);
  }
  return v11;
}

uint64_t mlir::mps::Conv3DWeightsGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v60[2] = *MEMORY[0x1E4F143B8];
  v60[0] = a4;
  v60[1] = a5;
  if (a7)
  {
    long long v14 = *a7;
    long long v15 = a7[1];
    long long v16 = a7[2];
    uint64_t v17 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v17 = 0;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
  }
  uint64_t v49 = a6;
  v50[0] = 0;
  char v51 = 0;
  long long v52 = v14;
  long long v53 = v15;
  long long v54 = v16;
  uint64_t v55 = v17;
  uint64_t v56 = a9;
  uint64_t v57 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v49);
    if (v51) {
      char v51 = 0;
    }
    mlir::OperationName::OperationName(v50, "mps.conv_3d_weights_gradient", 28, Context);
    char v51 = 1;
  }
  uint64_t v58 = a4;
  unint64_t v59 = a5;
  if (a5 < 3
    || (uint64_t v19 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::Conv3DWeightsGradientOpAdaptor::verify(&v49, v19)))
  {
    uint64_t v36 = mlir::Float32Type::get(this, a2);
    uint64_t v37 = mlir::UnrankedTensorType::get(v36);
    uint64_t v38 = *(unsigned int *)(a11 + 8);
    if (v38 >= *(_DWORD *)(a11 + 12))
    {
LABEL_35:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v38 + 1, 8);
      LODWORD(v38) = *(_DWORD *)(a11 + 8);
    }
LABEL_22:
    *(void *)(*(void *)a11 + 8 * v38) = v37;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  uint64_t v45 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v60, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v46 = *(void *)(mlir::ValueRange::dereference_iterator(v60, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v48, (uint64_t)&v45, 2uLL);
  uint64_t v45 = v58;
  unint64_t v46 = 2;
  uint64_t v45 = (void *)mlir::ValueRange::offset_base(&v45, 2);
  unint64_t v46 = 0;
  uint64_t v44 = mlir::ValueRange::dereference_iterator(&v45, 0);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v44);
  if (!DefiningOp) {
    goto LABEL_34;
  }
  uint64_t v22 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_34;
  }
  uint64_t v45 = v47;
  unint64_t v46 = 0x100000000;
  mlir::Operation::fold(v22, 0, 0, (uint64_t)&v45);
  uint64_t v23 = *(void *)v45;
  char v24 = mlir::DenseIntElementsAttr::classof(*(void *)v45 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(v23 & 0xFFFFFFFFFFFFFFF8);
  if (v25) {
    char v26 = v24;
  }
  else {
    char v26 = 0;
  }
  if (v45 != v47) {
    free(v45);
  }
  if ((v26 & 1) == 0)
  {
LABEL_34:
    uint64_t v37 = mlir::UnrankedTensorType::get(v20);
    uint64_t v38 = *(unsigned int *)(a11 + 8);
    if (v38 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_35;
    }
    goto LABEL_22;
  }
  uint64_t v45 = v47;
  unint64_t v46 = 0x500000000;
  uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8);
  mlir::getIntValues<long long>((uint64_t)v25, v27, (uint64_t)&v45, 1);
  uint64_t v28 = (char *)v45;
  uint64_t v29 = v46;
  if (!v46) {
    goto LABEL_37;
  }
  unint64_t v30 = (v46 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v31 = (char *)v45;
  if (v30 >= 3)
  {
    unint64_t v32 = v30 + 1;
    uint64_t v31 = (char *)v45 + 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    __int16 v33 = (int64x2_t *)((char *)v45 + 16);
    v34.i64[0] = -1;
    v34.i64[1] = -1;
    uint64_t v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      int32x2_t v40 = vmovn_s64(vceqq_s64(v33[-1], v34));
      if (v40.i8[0])
      {
        v33[-1].i64[0] = 0x8000000000000000;
        if ((v40.i8[4] & 1) == 0)
        {
LABEL_27:
          int32x2_t v41 = vmovn_s64(vceqq_s64(*v33, v34));
          if ((v41.i8[0] & 1) == 0) {
            goto LABEL_28;
          }
          goto LABEL_32;
        }
      }
      else if ((v40.i8[4] & 1) == 0)
      {
        goto LABEL_27;
      }
      v33[-1].i64[1] = 0x8000000000000000;
      int32x2_t v41 = vmovn_s64(vceqq_s64(*v33, v34));
      if ((v41.i8[0] & 1) == 0)
      {
LABEL_28:
        if (v41.i8[4]) {
          goto LABEL_33;
        }
        goto LABEL_24;
      }
LABEL_32:
      v33->i64[0] = 0x8000000000000000;
      if (v41.i8[4]) {
LABEL_33:
      }
        v33->i64[1] = 0x8000000000000000;
LABEL_24:
      v33 += 2;
      v35 -= 4;
      if (!v35)
      {
        if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_37;
        }
        goto LABEL_43;
      }
    }
  }
  do
  {
LABEL_43:
    if (*(void *)v31 == -1) {
      *(void *)uint64_t v31 = 0x8000000000000000;
    }
    v31 += 8;
  }
  while (v31 != &v28[8 * v29]);
LABEL_37:
  uint64_t v42 = mlir::RankedTensorType::get((uint64_t)v28, v29, v20, 0);
  uint64_t v43 = *(unsigned int *)(a11 + 8);
  if (v43 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v43 + 1, 8);
    LODWORD(v43) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v43) = v42;
  ++*(_DWORD *)(a11 + 8);
  if (v45 != v47) {
    free(v45);
  }
  return 1;
}

uint64_t mlir::mps::Conv3DWeightsGradientOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = (const char *)a1[4];
    if (v4)
    {
      unint64_t v5 = (const char *)a1[5];
      if (v5)
      {
        if (a1[6])
        {
          if (a1[7])
          {
            uint64_t v6 = (const char *)a1[8];
            if (v6)
            {
              uint64_t v7 = a1[9];
              if (v7)
              {
                uint64_t v65 = (const char *)a1[6];
                uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
                if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64))
                {
                  uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
                  uint64_t v65 = v6;
                  uint64_t v66 = v8;
                  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                  uint64_t v10 = Type;
                  if (Type) {
                    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
                  }
                  uint64_t Value = (uint64_t)v10;
                  int v71 = Type;
                  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                  v68[0] = 5;
                  if (v12 == 1
                    && *ArgAttrsAttr == v68[0]
                    && (uint64_t OperandRange = v6,
                        llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                    && (uint64_t v62 = v6,
                        *(void *)&long long v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                        *((void *)&v69 + 1) = v13,
                        uint64_t v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                        mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                  {
                    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                    uint64_t v65 = v4;
                    uint64_t v66 = v14;
                    long long v15 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                    long long v16 = v15;
                    if (v15) {
                      long long v15 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
                    }
                    uint64_t Value = (uint64_t)v16;
                    int v71 = v15;
                    uint64_t v17 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                    v68[0] = 5;
                    if (v18 == 1
                      && *v17 == v68[0]
                      && (uint64_t OperandRange = v4,
                          llvm::all_of<mlir::DenseIntElementsAttr,mlir::mps::Conv3DDataGradientOpAdaptor::verify(mlir::Location)::$_0>((uint64_t *)&OperandRange))
                      && (uint64_t v62 = v4,
                          *(void *)&long long v69 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                          *((void *)&v69 + 1) = v19,
                          uint64_t v63 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
                          mlir::Type::isUnsignedInteger((mlir::Type *)&v63, 64)))
                    {
                      uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
                      uint64_t v65 = v5;
                      uint64_t v66 = v20;
                      uint64_t v21 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v65);
                      uint64_t v22 = v21;
                      if (v21) {
                        uint64_t v21 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
                      }
                      uint64_t Value = (uint64_t)v22;
                      int v71 = v21;
                      uint64_t v23 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
                      long long v69 = xmmword_1810FE2F0;
                      if (v24 == 2
                        && (*v23 == (void)v69 ? (BOOL v25 = v23[1] == *((void *)&v69 + 1)) : (BOOL v25 = 0),
                            v25
                         && (uint64_t v63 = (uint64_t)v5,
                             v68[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63),
                             v68[1] = v26,
                             uint64_t OperandRange = (const char *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v68),
                             mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))))
                      {
                        if ((*(_DWORD *)(v3 + 8) - 7) >= 2)
                        {
                          uint64_t v61 = "'mps.conv_3d_weights_gradient' op attribute 'data_layout' failed to satisfy constraint: "
                                "valid TensorDataLayout is one of NDHWC or NCDHW";
                        }
                        else
                        {
                          if ((*(_DWORD *)(v7 + 8) - 9) < 2) {
                            return 1;
                          }
                          uint64_t v61 = "'mps.conv_3d_weights_gradient' op attribute 'weights_layout' failed to satisfy constrain"
                                "t: valid TensorDataLayout is one of DHWIO or OIDHW";
                        }
                      }
                      else
                      {
                        uint64_t v61 = "'mps.conv_3d_weights_gradient' op attribute 'explicit_padding' failed to satisfy constrain"
                              "t: ui64 elements attribute of shape {5, 2}";
                      }
                    }
                    else
                    {
                      uint64_t v61 = "'mps.conv_3d_weights_gradient' op attribute 'dilation_rates' failed to satisfy constraint: p"
                            "ositive ui64 elements attribute of shape {5}";
                    }
                  }
                  else
                  {
                    uint64_t v61 = "'mps.conv_3d_weights_gradient' op attribute 'strides' failed to satisfy constraint: positive u"
                          "i64 elements attribute of shape {5}";
                  }
                }
                else
                {
                  uint64_t v61 = "'mps.conv_3d_weights_gradient' op attribute 'groups' failed to satisfy constraint: 64-bit unsign"
                        "ed integer attribute";
                }
              }
              else
              {
                uint64_t v61 = "'mps.conv_3d_weights_gradient' op requires attribute 'weights_layout'";
              }
            }
            else
            {
              uint64_t v61 = "'mps.conv_3d_weights_gradient' op requires attribute 'strides'";
            }
            uint64_t v65 = v61;
            __int16 v67 = 259;
            mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
            uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&Value);
            return v27;
          }
          uint64_t v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'padding_style'";
          __int16 v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v78)
          {
            long long v54 = (void **)__p;
            if (__p)
            {
              uint64_t v55 = v77;
              uint64_t v56 = __p;
              if (v77 != __p)
              {
                do
                  uint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
                while (v55 != v54);
                uint64_t v56 = __p;
              }
              uint64_t v77 = v54;
              operator delete(v56);
            }
            uint64_t v31 = v74;
            if (!v74) {
              goto LABEL_105;
            }
            uint64_t v57 = v75;
            __int16 v33 = v74;
            if (v75 == v74)
            {
LABEL_104:
              int v75 = v31;
              operator delete(v33);
LABEL_105:
              if (v72 != &v73) {
                free(v72);
              }
              return v27;
            }
            do
            {
              unint64_t v59 = (void *)*--v57;
              uint64_t v58 = v59;
              *uint64_t v57 = 0;
              if (v59) {
                operator delete[](v58);
              }
            }
            while (v57 != v31);
LABEL_103:
            __int16 v33 = v74;
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'groups'";
          __int16 v67 = 259;
          mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
          uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v78)
          {
            uint64_t v48 = (void **)__p;
            if (__p)
            {
              uint64_t v49 = v77;
              uint64_t v50 = __p;
              if (v77 != __p)
              {
                do
                  uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
                while (v49 != v48);
                uint64_t v50 = __p;
              }
              uint64_t v77 = v48;
              operator delete(v50);
            }
            uint64_t v31 = v74;
            if (!v74) {
              goto LABEL_105;
            }
            char v51 = v75;
            __int16 v33 = v74;
            if (v75 == v74) {
              goto LABEL_104;
            }
            do
            {
              long long v53 = (void *)*--v51;
              long long v52 = v53;
              *char v51 = 0;
              if (v53) {
                operator delete[](v52);
              }
            }
            while (v51 != v31);
            goto LABEL_103;
          }
        }
      }
      else
      {
        uint64_t v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'explicit_padding'";
        __int16 v67 = 259;
        mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
        uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        }
        if (v78)
        {
          uint64_t v42 = (void **)__p;
          if (__p)
          {
            uint64_t v43 = v77;
            uint64_t v44 = __p;
            if (v77 != __p)
            {
              do
                uint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
              while (v43 != v42);
              uint64_t v44 = __p;
            }
            uint64_t v77 = v42;
            operator delete(v44);
          }
          uint64_t v31 = v74;
          if (!v74) {
            goto LABEL_105;
          }
          uint64_t v45 = v75;
          __int16 v33 = v74;
          if (v75 == v74) {
            goto LABEL_104;
          }
          do
          {
            uint64_t v47 = (void *)*--v45;
            unint64_t v46 = v47;
            *uint64_t v45 = 0;
            if (v47) {
              operator delete[](v46);
            }
          }
          while (v45 != v31);
          goto LABEL_103;
        }
      }
    }
    else
    {
      uint64_t v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'dilation_rates'";
      __int16 v67 = 259;
      mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
      uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v78)
      {
        uint64_t v36 = (void **)__p;
        if (__p)
        {
          uint64_t v37 = v77;
          uint64_t v38 = __p;
          if (v77 != __p)
          {
            do
              uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
            while (v37 != v36);
            uint64_t v38 = __p;
          }
          uint64_t v77 = v36;
          operator delete(v38);
        }
        uint64_t v31 = v74;
        if (!v74) {
          goto LABEL_105;
        }
        uint64_t v39 = v75;
        __int16 v33 = v74;
        if (v75 == v74) {
          goto LABEL_104;
        }
        do
        {
          int32x2_t v41 = (void *)*--v39;
          int32x2_t v40 = v41;
          *uint64_t v39 = 0;
          if (v41) {
            operator delete[](v40);
          }
        }
        while (v39 != v31);
        goto LABEL_103;
      }
    }
  }
  else
  {
    uint64_t v65 = "'mps.conv_3d_weights_gradient' op requires attribute 'data_layout'";
    __int16 v67 = 259;
    mlir::emitError(a2, (uint64_t)&v65, (uint64_t)&Value);
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    }
    if (v78)
    {
      uint64_t v28 = (void **)__p;
      if (__p)
      {
        uint64_t v29 = v77;
        unint64_t v30 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          unint64_t v30 = __p;
        }
        uint64_t v77 = v28;
        operator delete(v30);
      }
      uint64_t v31 = v74;
      if (!v74) {
        goto LABEL_105;
      }
      unint64_t v32 = v75;
      __int16 v33 = v74;
      if (v75 == v74) {
        goto LABEL_104;
      }
      do
      {
        uint64_t v35 = (void *)*--v32;
        int64x2_t v34 = v35;
        *unint64_t v32 = 0;
        if (v35) {
          operator delete[](v34);
        }
      }
      while (v32 != v31);
      goto LABEL_103;
    }
  }
  return v27;
}

uint64_t mlir::mps::Conv3DWeightsGradientOp::verify(uint64_t **this)
{
  void v125[6] = *MEMORY[0x1E4F143B8];
  v124[0] = v125;
  v124[1] = (void *)0x600000000;
  unint64_t v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v2 = 0;
  }
  uint64_t v3 = *(void **)(v2 + 16);
  if (v3) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  mlir::getIntValues<long long>((uint64_t)v3, v4, (uint64_t)v124, 1);
  unint64_t v5 = *((unsigned int *)*this + 11);
  uint64_t v6 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v7 = (uint64_t)&(*this)[2 * ((v5 >> 23) & 1) + 8];
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(_DWORD *)(*(void *)(v7 + 32) + 8);
  if (v8 == 3) {
    goto LABEL_21;
  }
  if (v8) {
    goto LABEL_35;
  }
  uint64_t v9 = *(void *)v124[0];
  if (*(_DWORD *)(*(void *)v6 + 8) == 7)
  {
    if (!v9 && !*((void *)v124[0] + 1) && !*((void *)v124[0] + 2))
    {
      uint64_t v10 = 3;
      goto LABEL_20;
    }
LABEL_21:
    v112[0] = (const void **)"failed: explicit padding incompatible with with given tensor data layout.";
    char v113[8] = 259;
    mlir::OpState::emitOpError(this, v112, (uint64_t)&v114);
    uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v114);
    if (v114) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v114);
    }
    if (v123)
    {
      uint64_t v12 = (void **)__p;
      if (__p)
      {
        uint64_t v13 = v122;
        uint64_t v14 = __p;
        if (v122 != __p)
        {
          do
            uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          uint64_t v14 = __p;
        }
        BOOL v122 = v12;
        operator delete(v14);
      }
      long long v15 = v119;
      if (v119)
      {
        long long v16 = v120;
        uint64_t v17 = v119;
        if (v120 != v119)
        {
          do
          {
            uint64_t v19 = (void *)*--v16;
            uint64_t v18 = v19;
            *long long v16 = 0;
            if (v19) {
              operator delete[](v18);
            }
          }
          while (v16 != v15);
          uint64_t v17 = v119;
        }
        int64_t v120 = v15;
        operator delete(v17);
      }
      uint64_t v22 = (const void **)v117;
      if (v117 != v118) {
        goto LABEL_40;
      }
    }
    goto LABEL_41;
  }
  if (v9 || *((void *)v124[0] + 1) || *((void *)v124[0] + 8)) {
    goto LABEL_21;
  }
  uint64_t v10 = 9;
LABEL_20:
  if (*((void *)v124[0] + v10)) {
    goto LABEL_21;
  }
LABEL_35:
  v112[0] = (const void **)v113;
  v112[1] = (const void **)0x600000000;
  uint64_t v20 = *(void **)(v7 + 40);
  if (v20) {
    uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v20 + 8);
  }
  else {
    uint64_t v21 = 0;
  }
  mlir::getIntValues<long long>((uint64_t)v20, v21, (uint64_t)v112, 1);
  if (*v112[0] == (const void *)1)
  {
    unint64_t v24 = *((unsigned int *)*this + 11);
    uint64_t v25 = (uint64_t)&(*this)[2 * ((v24 >> 23) & 1)];
    uint64_t v27 = *(void *)(v25 + 64);
    uint64_t v26 = v25 + 64;
    uint64_t v28 = 4;
    if (*(_DWORD *)(v27 + 8) == 7) {
      uint64_t v28 = 1;
    }
    if (v112[0][v28] == (const void *)1)
    {
      v110[0] = (const void **)v111;
      v110[1] = (const void **)0x600000000;
      if (BYTE3(v24)) {
        uint64_t v29 = v26;
      }
      else {
        uint64_t v29 = 0;
      }
      unint64_t v30 = *(void **)(v29 + 8);
      if (v30) {
        uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8);
      }
      else {
        uint64_t v31 = 0;
      }
      mlir::getIntValues<long long>((uint64_t)v30, v31, (uint64_t)v110, 1);
      if (*v110[0] != (const void *)1) {
        goto LABEL_84;
      }
      int32x2_t v41 = *this;
      uint64_t v42 = 4;
      if (*(_DWORD *)((*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8] + 8) == 7) {
        uint64_t v42 = 1;
      }
      if (v110[0][v42] == (const void *)1)
      {
        int v43 = *((_DWORD *)v41 + 9);
        uint64_t v44 = v41 - 2;
        if (v43) {
          uint64_t v45 = (uint64_t)v44;
        }
        else {
          uint64_t v45 = 0;
        }
        unint64_t v46 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v45, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v46) {
          uint64_t v47 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v46 + 8);
        }
        else {
          uint64_t v47 = 0;
        }
        v105[0] = v46;
        v105[1] = v47;
        uint64_t ArgAttrsAttr = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v105);
        uint64_t v58 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v105);
        uint64_t v60 = (unsigned char *)(v58 + 8 * v59);
        uint64_t v114 = &v116;
        uint64_t v115 = 0x500000000;
        uint64_t v61 = v60 - ArgAttrsAttr;
        if ((unint64_t)(v60 - ArgAttrsAttr) < 0x29)
        {
          int v62 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, &v116, v61 >> 3, 8);
          int v62 = v115;
        }
        if (v60 != ArgAttrsAttr)
        {
          memcpy(&v114[v62], ArgAttrsAttr, v60 - ArgAttrsAttr);
          int v62 = v115;
        }
        LODWORD(v115) = v62 + ((unint64_t)v61 >> 3);
        v104[0] = *(void *)((*this)[9] + 88);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v104);
        if (DefiningOp)
        {
          uint64_t v64 = DefiningOp;
          if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48)))
          {
            char v107 = v109;
            uint64_t v108 = 0x100000000;
            mlir::Operation::fold(v64, 0, 0, (uint64_t)&v107);
            uint64_t v65 = (void *)(*(void *)v107 & 0xFFFFFFFFFFFFFFF8);
            int v66 = mlir::DenseIntElementsAttr::classof((uint64_t)v65) & (v65 != 0);
            if (!v66) {
              uint64_t v65 = 0;
            }
            if (v107 != v109) {
              free(v107);
            }
            if (v66)
            {
              LODWORD(v115) = 0;
              if (v65) {
                uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v65 + 8);
              }
              else {
                uint64_t v67 = 0;
              }
              mlir::getIntValues<long long>((uint64_t)v65, v67, (uint64_t)&v114, 1);
            }
          }
        }
        uint64_t v68 = *this;
        uint64_t v69 = (*this)[9];
        uint64_t v70 = (void *)(*(void *)(*(void *)(v69 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v70)
        {
          uint64_t v71 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v70 + 8);
          uint64_t v68 = *this;
          uint64_t v69 = (*this)[9];
        }
        else
        {
          uint64_t v71 = 0;
        }
        v104[0] = v70;
        v104[1] = v71;
        uint64_t v72 = (void *)(*(void *)(*(void *)(v69 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (v72)
        {
          uint64_t v73 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v72 + 8);
          uint64_t v68 = *this;
        }
        else
        {
          uint64_t v73 = 0;
        }
        v103[0] = v72;
        v103[1] = v73;
        uint64_t v74 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v104);
        uint64_t v101 = v75;
        unint64_t v76 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)];
        uint64_t v78 = *(void *)(v76 + 64);
        unint64_t v77 = v76 + 64;
        int v79 = *(_DWORD *)(v78 + 8);
        uint64_t v80 = (uint64_t)v114;
        uint64_t v81 = v115;
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          unint64_t v77 = 0;
        }
        int v82 = *(_DWORD *)(*(void *)(v77 + 48) + 8);
        uint64_t v106 = *(void *)(v77 + 24);
        mlir::IntegerAttr::getValue(&v106, (llvm::APInt *)&v107);
        if (v108 > 0x40)
        {
          uint64_t v83 = *(void **)v107;
          operator delete[](v107);
        }
        else
        {
          uint64_t v83 = v107;
        }
        if (!mlir::mps::verifyConvolutionOutputChannels(v68, v74, v101, v79, v80, v81, v82, (unint64_t)v83))goto LABEL_140; {
        uint64_t v102 = *this;
        }
        uint64_t v84 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v103);
        uint64_t v86 = v85;
        unint64_t v87 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)];
        uint64_t v89 = *(void *)(v87 + 64);
        unint64_t v88 = v87 + 64;
        int v90 = *(_DWORD *)(v89 + 8);
        uint64_t v91 = (uint64_t)v114;
        uint64_t v92 = v115;
        if (!HIBYTE(*((_DWORD *)*this + 11))) {
          unint64_t v88 = 0;
        }
        int v93 = *(_DWORD *)(*(void *)(v88 + 48) + 8);
        uint64_t v106 = *(void *)(v88 + 24);
        mlir::IntegerAttr::getValue(&v106, (llvm::APInt *)&v107);
        if (v108 > 0x40)
        {
          uint64_t v94 = *(void **)v107;
          operator delete[](v107);
        }
        else
        {
          uint64_t v94 = v107;
        }
        if (mlir::mps::verifyConvolutionInputChannels(v102, v84, v86, v90, v91, v92, v93, (uint64_t)v94))
        {
          long long v95 = *this;
          long long v96 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v103);
          uint64_t v98 = v97;
          unsigned int v99 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v104);
          uint64_t v11 = mlir::mps::verifyConvolutionBatches(v95, v96, v98, v99, v100);
        }
        else
        {
LABEL_140:
          uint64_t v11 = 0;
        }
        uint64_t v56 = v114;
        if (v114 == &v116) {
          goto LABEL_102;
        }
      }
      else
      {
LABEL_84:
        char v107 = "failed: dilation values incompatible with given tensor layout.";
        v109[8] = 259;
        mlir::OpState::emitOpError(this, (const void ***)&v107, (uint64_t)&v114);
        uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v114);
        if (v114) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v114);
        }
        if (!v123) {
          goto LABEL_102;
        }
        uint64_t v48 = (void **)__p;
        if (__p)
        {
          uint64_t v49 = v122;
          uint64_t v50 = __p;
          if (v122 != __p)
          {
            do
              uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
            while (v49 != v48);
            uint64_t v50 = __p;
          }
          BOOL v122 = v48;
          operator delete(v50);
        }
        char v51 = v119;
        if (v119)
        {
          long long v52 = v120;
          long long v53 = v119;
          if (v120 != v119)
          {
            do
            {
              uint64_t v55 = (void *)*--v52;
              long long v54 = v55;
              void *v52 = 0;
              if (v55) {
                operator delete[](v54);
              }
            }
            while (v52 != v51);
            long long v53 = v119;
          }
          int64_t v120 = v51;
          operator delete(v53);
        }
        uint64_t v56 = v117;
        if (v117 == v118)
        {
LABEL_102:
          int32x2_t v40 = v110[0];
          if ((_WORD *)v110[0] == v111) {
            goto LABEL_72;
          }
LABEL_71:
          free(v40);
          goto LABEL_72;
        }
      }
      free(v56);
      goto LABEL_102;
    }
  }
  v110[0] = (const void **)"failed: strides incompatible with given tensor data layout.";
  v111[8] = 259;
  mlir::OpState::emitOpError(this, v110, (uint64_t)&v114);
  uint64_t v11 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v114);
  if (v114) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v114);
  }
  if (v123)
  {
    unint64_t v32 = (void **)__p;
    if (__p)
    {
      __int16 v33 = v122;
      int64x2_t v34 = __p;
      if (v122 != __p)
      {
        do
          __int16 v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        int64x2_t v34 = __p;
      }
      BOOL v122 = v32;
      operator delete(v34);
    }
    uint64_t v35 = v119;
    if (v119)
    {
      uint64_t v36 = v120;
      uint64_t v37 = v119;
      if (v120 != v119)
      {
        do
        {
          uint64_t v39 = (void *)*--v36;
          uint64_t v38 = v39;
          *uint64_t v36 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v36 != v35);
        uint64_t v37 = v119;
      }
      int64_t v120 = v35;
      operator delete(v37);
    }
    int32x2_t v40 = (const void **)v117;
    if (v117 != v118) {
      goto LABEL_71;
    }
  }
LABEL_72:
  uint64_t v22 = v112[0];
  if ((_WORD *)v112[0] != v113) {
LABEL_40:
  }
    free(v22);
LABEL_41:
  if (v124[0] != v125) {
    free(v124[0]);
  }
  return v11;
}

uint64_t mlir::mps::DepthwiseConv2DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v91 = a4;
  unint64_t v92 = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
  }
  else
  {
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v81 = a6;
  v82[0] = 0;
  char v83 = 0;
  long long v84 = v16;
  long long v85 = v17;
  long long v86 = v18;
  unint64_t v19 = a5;
  uint64_t v87 = a9;
  uint64_t v88 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v81);
    if (v83) {
      char v83 = 0;
    }
    mlir::OperationName::OperationName(v82, "mps.depthwise_conv_2d", 21, Context);
    char v83 = 1;
    unint64_t v19 = v92;
  }
  uint64_t v89 = a4;
  unint64_t v90 = a5;
  if (v19 < 2
    || (uint64_t v21 = mlir::UnknownLoc::get(this, a2), !mlir::mps::DepthwiseConv2DOpAdaptor::verify(&v81, v21)))
  {
    uint64_t v32 = mlir::Float32Type::get(this, a2);
    uint64_t v33 = mlir::UnrankedTensorType::get(v32);
    uint64_t v34 = *(unsigned int *)(a11 + 8);
    if (v34 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v34) = v33;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  long long v22 = v85;
  long long v23 = v84;
  long long v24 = v86;
  uint64_t v25 = mlir::ValueRange::dereference_iterator(&v91, 0);
  uint64_t v26 = mlir::ValueRange::dereference_iterator(&v91, 1);
  unint64_t v27 = *(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v27 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    unint64_t v27 = 0;
  }
  unint64_t v71 = v27;
  if (v27)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    if (v28 != 4) {
      return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "DepthwiseConv2DOp input should be rank 4");
    }
  }
  uint64_t v78 = v80;
  uint64_t v79 = 0x400000000;
  uint64_t v75 = v77;
  uint64_t v76 = 0x400000000;
  uint64_t v72 = v74;
  uint64_t v73 = 0x400000000;
  if ((void)v24)
  {
    uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v24 + 8);
    mlir::getIntValues<long long>(v24, v29, (uint64_t)&v78, 1);
    if (*((void *)&v23 + 1)) {
      goto LABEL_16;
    }
LABEL_24:
    mlir::getIntValues<long long>(*((uint64_t *)&v23 + 1), 0, (uint64_t)&v75, 1);
    if ((void)v22) {
      goto LABEL_17;
    }
LABEL_25:
    uint64_t v31 = 0;
    goto LABEL_26;
  }
  mlir::getIntValues<long long>(0, 0, (uint64_t)&v78, 1);
  if (!*((void *)&v23 + 1)) {
    goto LABEL_24;
  }
LABEL_16:
  uint64_t v30 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(**((void **)&v23 + 1) + 8);
  mlir::getIntValues<long long>(*((uint64_t *)&v23 + 1), v30, (uint64_t)&v75, 1);
  if (!(void)v22) {
    goto LABEL_25;
  }
LABEL_17:
  uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v22 + 8);
LABEL_26:
  mlir::getIntValues<long long>(v22, v31, (uint64_t)&v72, 1);
  int v37 = *(_DWORD *)(v23 + 8);
  if (v37 != 1)
  {
    if (v37)
    {
      uint64_t v47 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "Unsupported dataLayout");
      goto LABEL_94;
    }
    if (v79)
    {
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      uint64_t v41 = 8 * v79;
      while (2)
      {
        unint64_t v42 = *((void *)v78 + v38);
        switch((int)v38)
        {
          case 0:
            BOOL v43 = v42 == 1;
            unint64_t v42 = v39;
            if (v43) {
              goto LABEL_31;
            }
            uint64_t v67 = "stride != 1 not supported for dim 3 of NCHW";
            goto LABEL_93;
          case 1:
            BOOL v43 = v42 == 1;
            unint64_t v42 = v39;
            if (v43) {
              goto LABEL_31;
            }
            uint64_t v67 = "stride != 1 not supported for dim 2 of NCHW";
            goto LABEL_93;
          case 2:
            goto LABEL_31;
          case 3:
            unint64_t v40 = *((void *)v78 + v38);
            unint64_t v42 = v39;
LABEL_31:
            ++v38;
            unint64_t v39 = v42;
            v41 -= 8;
            if (v41) {
              continue;
            }
            goto LABEL_48;
          default:
            uint64_t v67 = "stride attr num dimensions should be <= 4";
            goto LABEL_93;
        }
      }
    }
    unint64_t v40 = 0;
    unint64_t v42 = 0;
LABEL_48:
    if (v76)
    {
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 8 * v76;
      while (2)
      {
        uint64_t v52 = *((void *)v75 + v48);
        switch((int)v48)
        {
          case 0:
            BOOL v43 = v52 == 1;
            uint64_t v52 = v49;
            if (!v43) {
              goto LABEL_90;
            }
            goto LABEL_51;
          case 1:
            BOOL v43 = v52 == 1;
            uint64_t v52 = v49;
            if (v43) {
              goto LABEL_51;
            }
            uint64_t v67 = "dilationRate != 1 not supported for dim 2";
            goto LABEL_93;
          case 2:
            goto LABEL_51;
          case 3:
            uint64_t v50 = *((void *)v75 + v48);
            uint64_t v52 = v49;
LABEL_51:
            ++v48;
            uint64_t v49 = v52;
            v51 -= 8;
            if (v51) {
              continue;
            }
            goto LABEL_68;
          default:
            goto LABEL_89;
        }
      }
    }
    uint64_t v50 = 0;
    uint64_t v52 = 0;
LABEL_68:
    if (v73)
    {
      uint64_t v56 = 0;
      unint64_t v57 = 0;
      unint64_t v58 = 0;
      unint64_t v59 = 0;
      unint64_t v60 = 0;
      uint64_t v61 = 8 * v73;
      uint64_t v62 = *((void *)&v24 + 1);
      do
      {
        switch((int)v56)
        {
          case 4:
            unint64_t v59 = *((void *)v72 + v56);
            break;
          case 5:
            unint64_t v60 = *((void *)v72 + v56);
            break;
          case 6:
            unint64_t v57 = *((void *)v72 + v56);
            break;
          case 7:
            unint64_t v58 = *((void *)v72 + v56);
            break;
          default:
            break;
        }
        ++v56;
        v61 -= 8;
      }
      while (v61);
      goto LABEL_86;
    }
LABEL_85:
    unint64_t v60 = 0;
    unint64_t v59 = 0;
    unint64_t v58 = 0;
    unint64_t v57 = 0;
    uint64_t v62 = *((void *)&v24 + 1);
LABEL_86:
    uint64_t v70 = 0;
    memset(v69, 0, sizeof(v69));
    mlir::mps::buildConv2DDescriptor(v25, v26, 1, v40, v42, v50, v52, v57, (uint64_t)v69, v58, v59, v60, *(_DWORD *)(*((void *)&v22 + 1) + 8), v37, *(_DWORD *)(v62 + 8), 0, 0, 0, 1);
    uint64_t v68 = 0;
    uint64_t v65 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v91, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v66 = mlir::ValueRange::dereference_iterator(&v91, 1);
    {
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v68);
      uint64_t v35 = 1;
    }
    else
    {
      uint64_t v35 = 0;
    }
    goto LABEL_95;
  }
  if (v79)
  {
    uint64_t v44 = 0;
    unint64_t v45 = 0;
    unint64_t v40 = 0;
    uint64_t v46 = 8 * v79;
    while (2)
    {
      unint64_t v42 = *((void *)v78 + v44);
      switch((int)v44)
      {
        case 0:
          BOOL v43 = v42 == 1;
          unint64_t v42 = v45;
          if (v43) {
            goto LABEL_40;
          }
          uint64_t v67 = "stride != 1 not supported for dim 3";
          goto LABEL_93;
        case 1:
          goto LABEL_40;
        case 2:
          unint64_t v40 = *((void *)v78 + v44);
          unint64_t v42 = v45;
          goto LABEL_40;
        case 3:
          BOOL v43 = v42 == 1;
          unint64_t v42 = v45;
          if (!v43)
          {
            uint64_t v67 = "stride != 1 not supported for dim 0";
            goto LABEL_93;
          }
LABEL_40:
          ++v44;
          unint64_t v45 = v42;
          v46 -= 8;
          if (v46) {
            continue;
          }
          goto LABEL_58;
        default:
          uint64_t v47 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "stride num dimensions should be <= 4");
          goto LABEL_94;
      }
    }
  }
  unint64_t v40 = 0;
  unint64_t v42 = 0;
LABEL_58:
  if (!v76)
  {
    uint64_t v50 = 0;
    uint64_t v52 = 0;
LABEL_77:
    if (v73)
    {
      uint64_t v63 = 0;
      unint64_t v57 = 0;
      unint64_t v58 = 0;
      unint64_t v59 = 0;
      unint64_t v60 = 0;
      uint64_t v64 = 8 * v73;
      uint64_t v62 = *((void *)&v24 + 1);
      do
      {
        switch((int)v63)
        {
          case 2:
            unint64_t v59 = *((void *)v72 + v63);
            break;
          case 3:
            unint64_t v60 = *((void *)v72 + v63);
            break;
          case 4:
            unint64_t v57 = *((void *)v72 + v63);
            break;
          case 5:
            unint64_t v58 = *((void *)v72 + v63);
            break;
          default:
            break;
        }
        ++v63;
        v64 -= 8;
      }
      while (v64);
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v50 = 0;
  uint64_t v55 = 8 * v76;
  while (2)
  {
    uint64_t v52 = *((void *)v75 + v53);
    switch((int)v53)
    {
      case 0:
        BOOL v43 = v52 == 1;
        uint64_t v52 = v54;
        if (v43) {
          goto LABEL_61;
        }
LABEL_90:
        uint64_t v67 = "dilationRate != 1 not supported for dim 3";
        goto LABEL_93;
      case 1:
        goto LABEL_61;
      case 2:
        uint64_t v50 = *((void *)v75 + v53);
        uint64_t v52 = v54;
        goto LABEL_61;
      case 3:
        BOOL v43 = v52 == 1;
        uint64_t v52 = v54;
        if (v43)
        {
LABEL_61:
          ++v53;
          uint64_t v54 = v52;
          v55 -= 8;
          if (!v55) {
            goto LABEL_77;
          }
          continue;
        }
        uint64_t v67 = "dilationRate != 1 not supported for dim 0";
LABEL_93:
        uint64_t v47 = mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, v67);
LABEL_94:
        uint64_t v35 = v47;
LABEL_95:
        if (v72 != v74) {
          free(v72);
        }
        if (v75 != v77) {
          free(v75);
        }
        if (v78 != v80) {
          free(v78);
        }
        return v35;
      default:
LABEL_89:
        uint64_t v47 = mlir::emitOptionalError<char const(&)[43]>((uint64_t)a2, a3, "dilationRate num dimensions should be <= 4");
        goto LABEL_94;
    }
  }
}

uint64_t mlir::mps::DepthwiseConv2DOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    uint64_t v3 = (const char *)a1[4];
    if (v3)
    {
      uint64_t v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          unint64_t v5 = (const char *)a1[7];
          if (v5)
          {
            if (a1[8])
            {
              uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
              uint64_t v62 = v5;
              uint64_t v63 = v6;
              Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
              int v8 = Type;
              if (Type) {
                Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
              }
              uint64_t v67 = v8;
              uint64_t v68 = Type;
              uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
              v65[0] = 4;
              if (v10 == 1
                && *ArgAttrsAttr == v65[0]
                && (unint64_t v60 = v5,
                    *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                    *((void *)&v66 + 1) = v11,
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
                uint64_t v62 = v3;
                uint64_t v63 = v12;
                uint64_t v13 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                uint64_t v14 = v13;
                if (v13) {
                  uint64_t v13 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                }
                uint64_t v67 = v14;
                uint64_t v68 = v13;
                long long v15 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                v65[0] = 4;
                if (v16 == 1
                  && *v15 == v65[0]
                  && (unint64_t v60 = v3,
                      *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                      *((void *)&v66 + 1) = v17,
                      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                  uint64_t v62 = v4;
                  uint64_t v63 = v18;
                  unint64_t v19 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  uint64_t v20 = v19;
                  if (v19) {
                    unint64_t v19 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                  }
                  uint64_t v67 = v20;
                  uint64_t v68 = v19;
                  uint64_t v21 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                  long long v66 = xmmword_18110B5E0;
                  if (v22 == 2 && *v21 == (void)v66 && v21[1] == *((void *)&v66 + 1))
                  {
                    unint64_t v60 = v4;
                    v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                    v65[1] = v24;
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
                      return 1;
                    }
                  }
                  unint64_t v59 = "'mps.depthwise_conv_2d' op attribute 'explicit_padding' failed to satisfy constraint: ui64 eleme"
                        "nts attribute of shape {4, 2}";
                }
                else
                {
                  unint64_t v59 = "'mps.depthwise_conv_2d' op attribute 'dilation_rates' failed to satisfy constraint: ui64 element"
                        "s attribute of shape {4}";
                }
              }
              else
              {
                unint64_t v59 = "'mps.depthwise_conv_2d' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
              }
            }
            else
            {
              unint64_t v59 = "'mps.depthwise_conv_2d' op requires attribute 'weights_layout'";
            }
            uint64_t v62 = v59;
            __int16 v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
            uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v67);
            return v25;
          }
          uint64_t v62 = "'mps.depthwise_conv_2d' op requires attribute 'strides'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          }
          if (v75)
          {
            uint64_t v52 = (void **)__p;
            if (__p)
            {
              uint64_t v53 = v74;
              uint64_t v54 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                uint64_t v54 = __p;
              }
              uint64_t v74 = v52;
              operator delete(v54);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_99;
            }
            uint64_t v55 = v72;
            uint64_t v31 = v71;
            if (v72 == v71)
            {
LABEL_98:
              uint64_t v72 = v29;
              operator delete(v31);
LABEL_99:
              if (v69 != &v70) {
                free(v69);
              }
              return v25;
            }
            do
            {
              unint64_t v57 = (void *)*--v55;
              uint64_t v56 = v57;
              *uint64_t v55 = 0;
              if (v57) {
                operator delete[](v56);
              }
            }
            while (v55 != v29);
LABEL_97:
            uint64_t v31 = v71;
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v62 = "'mps.depthwise_conv_2d' op requires attribute 'padding_style'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          }
          if (v75)
          {
            uint64_t v46 = (void **)__p;
            if (__p)
            {
              uint64_t v47 = v74;
              uint64_t v48 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                uint64_t v48 = __p;
              }
              uint64_t v74 = v46;
              operator delete(v48);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_99;
            }
            uint64_t v49 = v72;
            uint64_t v31 = v71;
            if (v72 == v71) {
              goto LABEL_98;
            }
            do
            {
              uint64_t v51 = (void *)*--v49;
              uint64_t v50 = v51;
              void *v49 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v49 != v29);
            goto LABEL_97;
          }
        }
      }
      else
      {
        uint64_t v62 = "'mps.depthwise_conv_2d' op requires attribute 'explicit_padding'";
        __int16 v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
        uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
        if (v67) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
        }
        if (v75)
        {
          unint64_t v40 = (void **)__p;
          if (__p)
          {
            uint64_t v41 = v74;
            unint64_t v42 = __p;
            if (v74 != __p)
            {
              do
                uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              unint64_t v42 = __p;
            }
            uint64_t v74 = v40;
            operator delete(v42);
          }
          uint64_t v29 = v71;
          if (!v71) {
            goto LABEL_99;
          }
          BOOL v43 = v72;
          uint64_t v31 = v71;
          if (v72 == v71) {
            goto LABEL_98;
          }
          do
          {
            unint64_t v45 = (void *)*--v43;
            uint64_t v44 = v45;
            *BOOL v43 = 0;
            if (v45) {
              operator delete[](v44);
            }
          }
          while (v43 != v29);
          goto LABEL_97;
        }
      }
    }
    else
    {
      uint64_t v62 = "'mps.depthwise_conv_2d' op requires attribute 'dilation_rates'";
      __int16 v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
      if (v67) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
      }
      if (v75)
      {
        uint64_t v34 = (void **)__p;
        if (__p)
        {
          uint64_t v35 = v74;
          uint64_t v36 = __p;
          if (v74 != __p)
          {
            do
              uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            uint64_t v36 = __p;
          }
          uint64_t v74 = v34;
          operator delete(v36);
        }
        uint64_t v29 = v71;
        if (!v71) {
          goto LABEL_99;
        }
        int v37 = v72;
        uint64_t v31 = v71;
        if (v72 == v71) {
          goto LABEL_98;
        }
        do
        {
          unint64_t v39 = (void *)*--v37;
          uint64_t v38 = v39;
          void *v37 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v37 != v29);
        goto LABEL_97;
      }
    }
  }
  else
  {
    uint64_t v62 = "'mps.depthwise_conv_2d' op requires attribute 'data_layout'";
    __int16 v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
    if (v67) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
    }
    if (v75)
    {
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        unint64_t v27 = v74;
        uint64_t v28 = __p;
        if (v74 != __p)
        {
          do
            unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        uint64_t v74 = v26;
        operator delete(v28);
      }
      uint64_t v29 = v71;
      if (!v71) {
        goto LABEL_99;
      }
      uint64_t v30 = v72;
      uint64_t v31 = v71;
      if (v72 == v71) {
        goto LABEL_98;
      }
      do
      {
        uint64_t v33 = (void *)*--v30;
        uint64_t v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v30 != v29);
      goto LABEL_97;
    }
  }
  return v25;
}

uint64_t mlir::mps::DepthwiseConv2DDataGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v39[2] = *MEMORY[0x1E4F143B8];
  v39[0] = a4;
  v39[1] = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
  }
  else
  {
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v29 = a6;
  v30[0] = 0;
  char v31 = 0;
  long long v32 = v16;
  long long v33 = v17;
  long long v34 = v18;
  uint64_t v35 = a9;
  uint64_t v36 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31) {
      char v31 = 0;
    }
    mlir::OperationName::OperationName(v30, "mps.depthwise_conv_2d_data_gradient", 35, Context);
    char v31 = 1;
  }
  uint64_t v37 = a4;
  unint64_t v38 = a5;
  if (a5 >= 3
    && (uint64_t v20 = mlir::UnknownLoc::get(this, a2),
        mlir::mps::DepthwiseConv2DDataGradientOpAdaptor::verify(&v29, v20)))
  {
    uint64_t v21 = mlir::ValueRange::dereference_iterator(v39, 0);
    uint64_t v22 = mlir::ValueRange::dereference_iterator(v39, 1);
    uint64_t v23 = mlir::ValueRange::dereference_iterator(v39, 2);
    uint64_t v28 = 0;
    uint64_t v24 = v28;
  }
  else
  {
    uint64_t v25 = mlir::Float32Type::get(this, a2);
    uint64_t v24 = mlir::UnrankedTensorType::get(v25);
  }
  uint64_t v26 = *(unsigned int *)(a11 + 8);
  if (v26 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v26) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthwiseConv2DDataGradientOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    uint64_t v3 = (const char *)a1[4];
    if (v3)
    {
      uint64_t v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          unint64_t v5 = (const char *)a1[7];
          if (v5)
          {
            if (a1[8])
            {
              uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
              uint64_t v62 = v5;
              uint64_t v63 = v6;
              Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
              int v8 = Type;
              if (Type) {
                Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
              }
              uint64_t v67 = v8;
              uint64_t v68 = Type;
              uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
              v65[0] = 4;
              if (v10 == 1
                && *ArgAttrsAttr == v65[0]
                && (unint64_t v60 = v5,
                    *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                    *((void *)&v66 + 1) = v11,
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
                uint64_t v62 = v3;
                uint64_t v63 = v12;
                uint64_t v13 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                uint64_t v14 = v13;
                if (v13) {
                  uint64_t v13 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                }
                uint64_t v67 = v14;
                uint64_t v68 = v13;
                long long v15 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                v65[0] = 4;
                if (v16 == 1
                  && *v15 == v65[0]
                  && (unint64_t v60 = v3,
                      *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                      *((void *)&v66 + 1) = v17,
                      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                  uint64_t v62 = v4;
                  uint64_t v63 = v18;
                  unint64_t v19 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  uint64_t v20 = v19;
                  if (v19) {
                    unint64_t v19 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                  }
                  uint64_t v67 = v20;
                  uint64_t v68 = v19;
                  uint64_t v21 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                  long long v66 = xmmword_18110B5E0;
                  if (v22 == 2 && *v21 == (void)v66 && v21[1] == *((void *)&v66 + 1))
                  {
                    unint64_t v60 = v4;
                    v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                    v65[1] = v24;
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
                      return 1;
                    }
                  }
                  unint64_t v59 = "'mps.depthwise_conv_2d_data_gradient' op attribute 'explicit_padding' failed to satisfy constrai"
                        "nt: ui64 elements attribute of shape {4, 2}";
                }
                else
                {
                  unint64_t v59 = "'mps.depthwise_conv_2d_data_gradient' op attribute 'dilation_rates' failed to satisfy constraint"
                        ": ui64 elements attribute of shape {4}";
                }
              }
              else
              {
                unint64_t v59 = "'mps.depthwise_conv_2d_data_gradient' op attribute 'strides' failed to satisfy constraint: ui64 el"
                      "ements attribute of shape {4}";
              }
            }
            else
            {
              unint64_t v59 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'weights_layout'";
            }
            uint64_t v62 = v59;
            __int16 v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
            uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v67);
            return v25;
          }
          uint64_t v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'strides'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          }
          if (v75)
          {
            uint64_t v52 = (void **)__p;
            if (__p)
            {
              uint64_t v53 = v74;
              uint64_t v54 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                uint64_t v54 = __p;
              }
              uint64_t v74 = v52;
              operator delete(v54);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_99;
            }
            uint64_t v55 = v72;
            char v31 = v71;
            if (v72 == v71)
            {
LABEL_98:
              uint64_t v72 = v29;
              operator delete(v31);
LABEL_99:
              if (v69 != &v70) {
                free(v69);
              }
              return v25;
            }
            do
            {
              unint64_t v57 = (void *)*--v55;
              uint64_t v56 = v57;
              *uint64_t v55 = 0;
              if (v57) {
                operator delete[](v56);
              }
            }
            while (v55 != v29);
LABEL_97:
            char v31 = v71;
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'padding_style'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          }
          if (v75)
          {
            uint64_t v46 = (void **)__p;
            if (__p)
            {
              uint64_t v47 = v74;
              uint64_t v48 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                uint64_t v48 = __p;
              }
              uint64_t v74 = v46;
              operator delete(v48);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_99;
            }
            uint64_t v49 = v72;
            char v31 = v71;
            if (v72 == v71) {
              goto LABEL_98;
            }
            do
            {
              uint64_t v51 = (void *)*--v49;
              uint64_t v50 = v51;
              void *v49 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v49 != v29);
            goto LABEL_97;
          }
        }
      }
      else
      {
        uint64_t v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'explicit_padding'";
        __int16 v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
        uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
        if (v67) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
        }
        if (v75)
        {
          unint64_t v40 = (void **)__p;
          if (__p)
          {
            uint64_t v41 = v74;
            unint64_t v42 = __p;
            if (v74 != __p)
            {
              do
                uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              unint64_t v42 = __p;
            }
            uint64_t v74 = v40;
            operator delete(v42);
          }
          uint64_t v29 = v71;
          if (!v71) {
            goto LABEL_99;
          }
          BOOL v43 = v72;
          char v31 = v71;
          if (v72 == v71) {
            goto LABEL_98;
          }
          do
          {
            unint64_t v45 = (void *)*--v43;
            uint64_t v44 = v45;
            *BOOL v43 = 0;
            if (v45) {
              operator delete[](v44);
            }
          }
          while (v43 != v29);
          goto LABEL_97;
        }
      }
    }
    else
    {
      uint64_t v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'dilation_rates'";
      __int16 v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
      if (v67) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
      }
      if (v75)
      {
        long long v34 = (void **)__p;
        if (__p)
        {
          uint64_t v35 = v74;
          uint64_t v36 = __p;
          if (v74 != __p)
          {
            do
              uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            uint64_t v36 = __p;
          }
          uint64_t v74 = v34;
          operator delete(v36);
        }
        uint64_t v29 = v71;
        if (!v71) {
          goto LABEL_99;
        }
        uint64_t v37 = v72;
        char v31 = v71;
        if (v72 == v71) {
          goto LABEL_98;
        }
        do
        {
          unint64_t v39 = (void *)*--v37;
          unint64_t v38 = v39;
          void *v37 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v37 != v29);
        goto LABEL_97;
      }
    }
  }
  else
  {
    uint64_t v62 = "'mps.depthwise_conv_2d_data_gradient' op requires attribute 'data_layout'";
    __int16 v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
    if (v67) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
    }
    if (v75)
    {
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        unint64_t v27 = v74;
        uint64_t v28 = __p;
        if (v74 != __p)
        {
          do
            unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        uint64_t v74 = v26;
        operator delete(v28);
      }
      uint64_t v29 = v71;
      if (!v71) {
        goto LABEL_99;
      }
      uint64_t v30 = v72;
      char v31 = v71;
      if (v72 == v71) {
        goto LABEL_98;
      }
      do
      {
        long long v33 = (void *)*--v30;
        long long v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v30 != v29);
      goto LABEL_97;
    }
  }
  return v25;
}

uint64_t mlir::mps::anonymous namespace'::inferDepthwiseConv2DDataGradReturnType(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  void v36[2] = *MEMORY[0x1E4F143B8];
  __src = a3;
  uint64_t v34 = a4;
  mlir::ValueRange::ValueRange(v36, (uint64_t)&__src, 2uLL);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a3 + 8)) {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2DDataGrad a non-shaped inputType");
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a3 + 8);
  if (!a3) {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2DDataGrad a non-shaped inputType");
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a4 + 8)) {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2DDataGrad a non-shaped weightsType");
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)a4 + 8);
  if (!a4) {
    return mlir::emitOptionalError<char const(&)[39]>(a1, a2, "cannot conv2DDataGrad a non-shaped weightsType");
  }
  if (*(_UNKNOWN **)(*(void *)a3 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    *a6 = mlir::UnrankedTensorType::get(v12);
    return 1;
  }
  __src = v35;
  uint64_t v34 = 0x400000000;
  if (mlir::matchConstantWithIntVector<long long>(a5, (uint64_t)&__src))
  {
    if (v34 == 4)
    {
      uint64_t v13 = __src;
      if (*(void *)__src == -1)
      {
        *(void *)__src = 0x8000000000000000;
        if (v13[1] != -1)
        {
LABEL_11:
          if (v13[2] != -1) {
            goto LABEL_12;
          }
          goto LABEL_42;
        }
      }
      else if (*((void *)__src + 1) != -1)
      {
        goto LABEL_11;
      }
      v13[1] = 0x8000000000000000;
      if (v13[2] != -1)
      {
LABEL_12:
        if (v13[3] != -1)
        {
LABEL_13:
          uint64_t v30 = v32;
          uint64_t v31 = 0x400000000;
          int v14 = 4;
          goto LABEL_14;
        }
LABEL_43:
        v13[3] = 0x8000000000000000;
        goto LABEL_13;
      }
LABEL_42:
      void v13[2] = 0x8000000000000000;
      if (v13[3] != -1) {
        goto LABEL_13;
      }
      goto LABEL_43;
    }
    if (mlir::emitOptionalError<char const(&)[39]>(a1, a2, "unexpected output shape passed"))
    {
      int v14 = v34;
      uint64_t v30 = v32;
      uint64_t v31 = 0x400000000;
      if (!v34)
      {
LABEL_17:
        uint64_t v26 = a3;
        uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v26);
        uint64_t v27 = 0x400000000;
        unint64_t v25 = v31;
        uint64_t v26 = &v28;
        if (v31 == 4)
        {
          uint64_t v18 = (uint64_t *)Value;
          unint64_t v19 = &v28;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v28 = *(_OWORD *)v30;
          long long v29 = *((_OWORD *)v30 + 1);
          LODWORD(v27) = 4;
          if (*(void *)v30 == 0x8000000000000000)
          {
            uint64_t v20 = *v18;
            if (v20 >= 1) {
              *(void *)&long long v28 = v20;
            }
          }
          uint64_t v21 = 4;
        }
        else
        {
          if (!mlir::emitOptionalError<char const(&)[19],unsigned long &,char const(&)[11]>(a1, a2, "conv2D input rank ", (char **)&v25, "must be 4 "))
          {
            uint64_t v22 = 0;
            uint64_t v23 = v26;
            if (v26 == &v28)
            {
LABEL_35:
              if (v30 != v32) {
                free(v30);
              }
              goto LABEL_37;
            }
LABEL_34:
            free(v23);
            goto LABEL_35;
          }
          unint64_t v19 = (long long *)v26;
          uint64_t v21 = v27;
        }
        *a6 = mlir::RankedTensorType::get((uint64_t)v19, v21, v12, 0);
        uint64_t v22 = 1;
        uint64_t v23 = v26;
        if (v26 == &v28) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      if (v34 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v34, 8);
        unsigned int v16 = v34;
        if (!v34) {
          goto LABEL_16;
        }
        long long v15 = v30;
LABEL_15:
        memcpy(v15, __src, 8 * v16);
LABEL_16:
        LODWORD(v31) = v14;
        goto LABEL_17;
      }
LABEL_14:
      long long v15 = v32;
      unsigned int v16 = v14;
      goto LABEL_15;
    }
  }
  *a6 = mlir::UnrankedTensorType::get(v12);
  uint64_t v22 = 1;
LABEL_37:
  if (__src != v35) {
    free(__src);
  }
  return v22;
}

uint64_t mlir::mps::DepthwiseConv2DWeightsGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v39[2] = *MEMORY[0x1E4F143B8];
  v39[0] = a4;
  v39[1] = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
  }
  else
  {
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  uint64_t v29 = a6;
  v30[0] = 0;
  char v31 = 0;
  long long v32 = v16;
  long long v33 = v17;
  long long v34 = v18;
  uint64_t v35 = a9;
  uint64_t v36 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31) {
      char v31 = 0;
    }
    mlir::OperationName::OperationName(v30, "mps.depthwise_conv_2d_weights_gradient", 38, Context);
    char v31 = 1;
  }
  uint64_t v37 = a4;
  unint64_t v38 = a5;
  if (a5 >= 3
    && (uint64_t v20 = mlir::UnknownLoc::get(this, a2),
        mlir::mps::DepthwiseConv2DWeightsGradientOpAdaptor::verify(&v29, v20)))
  {
    uint64_t v21 = mlir::ValueRange::dereference_iterator(v39, 0);
    uint64_t v22 = mlir::ValueRange::dereference_iterator(v39, 1);
    uint64_t v23 = mlir::ValueRange::dereference_iterator(v39, 2);
    uint64_t v28 = 0;
    uint64_t v24 = v28;
  }
  else
  {
    uint64_t v25 = mlir::Float32Type::get(this, a2);
    uint64_t v24 = mlir::UnrankedTensorType::get(v25);
  }
  uint64_t v26 = *(unsigned int *)(a11 + 8);
  if (v26 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
    LODWORD(v26) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v26) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthwiseConv2DWeightsGradientOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    uint64_t v3 = (const char *)a1[4];
    if (v3)
    {
      uint64_t v4 = (const char *)a1[5];
      if (v4)
      {
        if (a1[6])
        {
          unint64_t v5 = (const char *)a1[7];
          if (v5)
          {
            if (a1[8])
            {
              uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
              uint64_t v62 = v5;
              uint64_t v63 = v6;
              Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
              int v8 = Type;
              if (Type) {
                Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
              }
              uint64_t v67 = v8;
              uint64_t v68 = Type;
              uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
              v65[0] = 4;
              if (v10 == 1
                && *ArgAttrsAttr == v65[0]
                && (unint64_t v60 = v5,
                    *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                    *((void *)&v66 + 1) = v11,
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
                uint64_t v62 = v3;
                uint64_t v63 = v12;
                uint64_t v13 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                int v14 = v13;
                if (v13) {
                  uint64_t v13 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
                }
                uint64_t v67 = v14;
                uint64_t v68 = v13;
                long long v15 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                v65[0] = 4;
                if (v16 == 1
                  && *v15 == v65[0]
                  && (unint64_t v60 = v3,
                      *(void *)&long long v66 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60),
                      *((void *)&v66 + 1) = v17,
                      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                  uint64_t v62 = v4;
                  uint64_t v63 = v18;
                  unint64_t v19 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v62);
                  uint64_t v20 = v19;
                  if (v19) {
                    unint64_t v19 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
                  }
                  uint64_t v67 = v20;
                  uint64_t v68 = v19;
                  uint64_t v21 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v67);
                  long long v66 = xmmword_18110B5E0;
                  if (v22 == 2 && *v21 == (void)v66 && v21[1] == *((void *)&v66 + 1))
                  {
                    unint64_t v60 = v4;
                    v65[0] = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v60);
                    v65[1] = v24;
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v65);
                    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
                      return 1;
                    }
                  }
                  unint64_t v59 = "'mps.depthwise_conv_2d_weights_gradient' op attribute 'explicit_padding' failed to satisfy const"
                        "raint: ui64 elements attribute of shape {4, 2}";
                }
                else
                {
                  unint64_t v59 = "'mps.depthwise_conv_2d_weights_gradient' op attribute 'dilation_rates' failed to satisfy constra"
                        "int: ui64 elements attribute of shape {4}";
                }
              }
              else
              {
                unint64_t v59 = "'mps.depthwise_conv_2d_weights_gradient' op attribute 'strides' failed to satisfy constraint: ui64"
                      " elements attribute of shape {4}";
              }
            }
            else
            {
              unint64_t v59 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'weights_layout'";
            }
            uint64_t v62 = v59;
            __int16 v64 = 259;
            mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
            uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v67);
            return v25;
          }
          uint64_t v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'strides'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          }
          if (v75)
          {
            uint64_t v52 = (void **)__p;
            if (__p)
            {
              uint64_t v53 = v74;
              uint64_t v54 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                uint64_t v54 = __p;
              }
              uint64_t v74 = v52;
              operator delete(v54);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_99;
            }
            uint64_t v55 = v72;
            char v31 = v71;
            if (v72 == v71)
            {
LABEL_98:
              uint64_t v72 = v29;
              operator delete(v31);
LABEL_99:
              if (v69 != &v70) {
                free(v69);
              }
              return v25;
            }
            do
            {
              unint64_t v57 = (void *)*--v55;
              uint64_t v56 = v57;
              *uint64_t v55 = 0;
              if (v57) {
                operator delete[](v56);
              }
            }
            while (v55 != v29);
LABEL_97:
            char v31 = v71;
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'padding_style'";
          __int16 v64 = 259;
          mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
          if (v67) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
          }
          if (v75)
          {
            uint64_t v46 = (void **)__p;
            if (__p)
            {
              uint64_t v47 = v74;
              uint64_t v48 = __p;
              if (v74 != __p)
              {
                do
                  uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                uint64_t v48 = __p;
              }
              uint64_t v74 = v46;
              operator delete(v48);
            }
            uint64_t v29 = v71;
            if (!v71) {
              goto LABEL_99;
            }
            uint64_t v49 = v72;
            char v31 = v71;
            if (v72 == v71) {
              goto LABEL_98;
            }
            do
            {
              uint64_t v51 = (void *)*--v49;
              uint64_t v50 = v51;
              void *v49 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v49 != v29);
            goto LABEL_97;
          }
        }
      }
      else
      {
        uint64_t v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'explicit_padding'";
        __int16 v64 = 259;
        mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
        uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
        if (v67) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
        }
        if (v75)
        {
          unint64_t v40 = (void **)__p;
          if (__p)
          {
            uint64_t v41 = v74;
            unint64_t v42 = __p;
            if (v74 != __p)
            {
              do
                uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              unint64_t v42 = __p;
            }
            uint64_t v74 = v40;
            operator delete(v42);
          }
          uint64_t v29 = v71;
          if (!v71) {
            goto LABEL_99;
          }
          BOOL v43 = v72;
          char v31 = v71;
          if (v72 == v71) {
            goto LABEL_98;
          }
          do
          {
            unint64_t v45 = (void *)*--v43;
            uint64_t v44 = v45;
            *BOOL v43 = 0;
            if (v45) {
              operator delete[](v44);
            }
          }
          while (v43 != v29);
          goto LABEL_97;
        }
      }
    }
    else
    {
      uint64_t v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'dilation_rates'";
      __int16 v64 = 259;
      mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
      if (v67) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
      }
      if (v75)
      {
        long long v34 = (void **)__p;
        if (__p)
        {
          uint64_t v35 = v74;
          uint64_t v36 = __p;
          if (v74 != __p)
          {
            do
              uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            uint64_t v36 = __p;
          }
          uint64_t v74 = v34;
          operator delete(v36);
        }
        uint64_t v29 = v71;
        if (!v71) {
          goto LABEL_99;
        }
        uint64_t v37 = v72;
        char v31 = v71;
        if (v72 == v71) {
          goto LABEL_98;
        }
        do
        {
          unint64_t v39 = (void *)*--v37;
          unint64_t v38 = v39;
          void *v37 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v37 != v29);
        goto LABEL_97;
      }
    }
  }
  else
  {
    uint64_t v62 = "'mps.depthwise_conv_2d_weights_gradient' op requires attribute 'data_layout'";
    __int16 v64 = 259;
    mlir::emitError(a2, (uint64_t)&v62, (uint64_t)&v67);
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v67);
    if (v67) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v67);
    }
    if (v75)
    {
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        uint64_t v27 = v74;
        uint64_t v28 = __p;
        if (v74 != __p)
        {
          do
            uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        uint64_t v74 = v26;
        operator delete(v28);
      }
      uint64_t v29 = v71;
      if (!v71) {
        goto LABEL_99;
      }
      uint64_t v30 = v72;
      char v31 = v71;
      if (v72 == v71) {
        goto LABEL_98;
      }
      do
      {
        long long v33 = (void *)*--v30;
        long long v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v30 != v29);
      goto LABEL_97;
    }
  }
  return v25;
}

uint64_t mlir::mps::DepthwiseConv3DOp::verify(mlir::mps::DepthwiseConv3DOp *this)
{
  uint64_t v326 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(*(void *)this + 47);
  uint64_t v3 = *(void *)(*(void *)this + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 56);
  int64_t v307 = *(uint64_t **)this;
  uint64_t v6 = v307 + 10;
  if (!v2) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v6[4];
  uint64_t v9 = v6[1];
  uint64_t v8 = v6[2];
  uint64_t v305 = v9;
  uint64_t v306 = v7;
  uint64_t v304 = v8;
  if (v7 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v306) == 3)
  {
    uint64_t v288 = v4;
    uint64_t v291 = v5;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v294, v306, 0);
    uint64_t v1 = v306;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v306);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v301, v1, NumElements);
    while (1)
    {
      BOOL v11 = v294 == v301 && v295 == v302;
      if (v11 && v296 == v303) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v294, (llvm::APInt *)&v299);
      if (v300 > 0x40)
      {
        uint64_t v12 = *(void *)v299;
        if (*(uint64_t *)v299 > 0)
        {
LABEL_18:
          if (v300 < 0x41) {
            goto LABEL_48;
          }
LABEL_46:
          if (v299) {
            operator delete[](v299);
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t)((void)v299 << -(char)v300) >> -(char)v300;
        if (v12 > 0) {
          goto LABEL_18;
        }
      }
      __int16 v314 = 259;
      mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
      if (v300 > 0x40)
      {
        uint64_t v13 = *(void *)v299;
        if (!v315) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t)((void)v299 << -(char)v300) >> -(char)v300;
        if (!v315) {
          goto LABEL_27;
        }
      }
      LODWORD(v308) = 2;
      int64_t v309 = (const char *)v13;
      int v14 = (char *)v317;
      if (v318 >= v319)
      {
        unint64_t v31 = v318 + 1;
        if (v317 <= &v308 && (char *)v317 + 24 * v318 > (char *)&v308)
        {
          int64_t v34 = (char *)&v308 - (unsigned char *)v317;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v31, 24);
          int v14 = (char *)v317;
          long long v15 = (unint64_t *)((char *)v317 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v31, 24);
          long long v15 = &v308;
          int v14 = (char *)v317;
        }
      }
      else
      {
        long long v15 = &v308;
      }
      uint64_t v16 = &v14[24 * v318];
      long long v17 = *(_OWORD *)v15;
      *((void *)v16 + 2) = v15[2];
      *(_OWORD *)uint64_t v16 = v17;
      uint64_t v18 = ++v318;
      if (v315)
      {
        LODWORD(v308) = 3;
        int64_t v309 = ", all values should be positive.";
        uint64_t v310 = 32;
        unint64_t v19 = (char *)v317;
        if (v18 >= v319)
        {
          unint64_t v32 = v18 + 1;
          BOOL v33 = (char *)v317 + 24 * v18 > (char *)&v308;
          if (v317 <= &v308 && v33)
          {
            int64_t v35 = (char *)&v308 - (unsigned char *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v32, 24);
            unint64_t v19 = (char *)v317;
            uint64_t v20 = (unint64_t *)((char *)v317 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v32, 24);
            uint64_t v20 = &v308;
            unint64_t v19 = (char *)v317;
          }
        }
        else
        {
          uint64_t v20 = &v308;
        }
        uint64_t v21 = &v19[24 * v318];
        long long v22 = *(_OWORD *)v20;
        *((void *)v21 + 2) = v20[2];
        *(_OWORD *)uint64_t v21 = v22;
        ++v318;
      }
LABEL_27:
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
      if (v315) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
      }
      if (v325)
      {
        uint64_t v23 = (void **)__p;
        if (__p)
        {
          uint64_t v24 = v324;
          uint64_t v25 = __p;
          if (v324 != __p)
          {
            do
              uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
            while (v24 != v23);
            uint64_t v25 = __p;
          }
          int64_t v324 = v23;
          operator delete(v25);
        }
        uint64_t v26 = v321;
        if (v321)
        {
          uint64_t v27 = v322;
          uint64_t v28 = v321;
          if (v322 != v321)
          {
            do
            {
              uint64_t v30 = (void *)*--v27;
              uint64_t v29 = v30;
              void *v27 = 0;
              if (v30) {
                operator delete[](v29);
              }
            }
            while (v27 != v26);
            uint64_t v28 = v321;
          }
          int64_t v322 = v26;
          operator delete(v28);
        }
        if (v317 != v320) {
          free(v317);
        }
      }
      if (v300 >= 0x41) {
        goto LABEL_46;
      }
LABEL_48:
      if (v12 < 1) {
        return v1;
      }
      ++v296;
    }
    uint64_t v4 = v288;
    uint64_t v5 = v291;
    if (!v305) {
      goto LABEL_116;
    }
LABEL_59:
    if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v305) == 3)
    {
      uint64_t v289 = v4;
      uint64_t v292 = v5;
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v294, v305, 0);
      uint64_t v36 = v305;
      uint64_t v37 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v305);
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v301, v36, v37);
      while (1)
      {
        BOOL v38 = v294 == v301 && v295 == v302;
        if (v38 && v296 == v303)
        {
          uint64_t v4 = v289;
          uint64_t v5 = v292;
          break;
        }
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v294, (llvm::APInt *)&v299);
        if (v300 > 0x40)
        {
          uint64_t v39 = *(void *)v299;
          if (*(uint64_t *)v299 > 0)
          {
LABEL_73:
            if (v300 < 0x41) {
              goto LABEL_103;
            }
LABEL_101:
            if (v299) {
              operator delete[](v299);
            }
            goto LABEL_103;
          }
        }
        else
        {
          uint64_t v39 = (uint64_t)((void)v299 << -(char)v300) >> -(char)v300;
          if (v39 > 0) {
            goto LABEL_73;
          }
        }
        __int16 v314 = 259;
        mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
        if (v300 > 0x40)
        {
          uint64_t v40 = *(void *)v299;
          if (!v315) {
            goto LABEL_82;
          }
        }
        else
        {
          uint64_t v40 = (uint64_t)((void)v299 << -(char)v300) >> -(char)v300;
          if (!v315) {
            goto LABEL_82;
          }
        }
        LODWORD(v308) = 2;
        int64_t v309 = (const char *)v40;
        uint64_t v41 = (char *)v317;
        if (v318 >= v319)
        {
          unint64_t v58 = v318 + 1;
          if (v317 <= &v308 && (char *)v317 + 24 * v318 > (char *)&v308)
          {
            int64_t v61 = (char *)&v308 - (unsigned char *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v58, 24);
            uint64_t v41 = (char *)v317;
            unint64_t v42 = (unint64_t *)((char *)v317 + v61);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v58, 24);
            unint64_t v42 = &v308;
            uint64_t v41 = (char *)v317;
          }
        }
        else
        {
          unint64_t v42 = &v308;
        }
        BOOL v43 = &v41[24 * v318];
        long long v44 = *(_OWORD *)v42;
        *((void *)v43 + 2) = v42[2];
        *(_OWORD *)BOOL v43 = v44;
        uint64_t v45 = ++v318;
        if (v315)
        {
          LODWORD(v308) = 3;
          int64_t v309 = ", all values should be positive.";
          uint64_t v310 = 32;
          uint64_t v46 = (char *)v317;
          if (v45 >= v319)
          {
            unint64_t v59 = v45 + 1;
            BOOL v60 = (char *)v317 + 24 * v45 > (char *)&v308;
            if (v317 <= &v308 && v60)
            {
              int64_t v62 = (char *)&v308 - (unsigned char *)v317;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v59, 24);
              uint64_t v46 = (char *)v317;
              uint64_t v47 = (unint64_t *)((char *)v317 + v62);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v59, 24);
              uint64_t v47 = &v308;
              uint64_t v46 = (char *)v317;
            }
          }
          else
          {
            uint64_t v47 = &v308;
          }
          uint64_t v48 = &v46[24 * v318];
          long long v49 = *(_OWORD *)v47;
          *((void *)v48 + 2) = v47[2];
          *(_OWORD *)uint64_t v48 = v49;
          ++v318;
        }
LABEL_82:
        uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
        if (v315) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
        }
        if (v325)
        {
          uint64_t v50 = (void **)__p;
          if (__p)
          {
            uint64_t v51 = v324;
            uint64_t v52 = __p;
            if (v324 != __p)
            {
              do
                uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
              while (v51 != v50);
              uint64_t v52 = __p;
            }
            int64_t v324 = v50;
            operator delete(v52);
          }
          uint64_t v53 = v321;
          if (v321)
          {
            uint64_t v54 = v322;
            uint64_t v55 = v321;
            if (v322 != v321)
            {
              do
              {
                unint64_t v57 = (void *)*--v54;
                uint64_t v56 = v57;
                void *v54 = 0;
                if (v57) {
                  operator delete[](v56);
                }
              }
              while (v54 != v53);
              uint64_t v55 = v321;
            }
            int64_t v322 = v53;
            operator delete(v55);
          }
          if (v317 != v320) {
            free(v317);
          }
        }
        if (v300 >= 0x41) {
          goto LABEL_101;
        }
LABEL_103:
        if (v39 < 1) {
          return v1;
        }
        ++v296;
      }
    }
  }
  else if (v305)
  {
    goto LABEL_59;
  }
LABEL_116:
  if (v304 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v304) == 6)
  {
    uint64_t v290 = v4;
    uint64_t v293 = v5;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v294, v304, 0);
    uint64_t v63 = v304;
    uint64_t v64 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v304);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v301, v63, v64);
    while (1)
    {
      BOOL v65 = v294 == v301 && v295 == v302;
      if (v65 && v296 == v303)
      {
        uint64_t v4 = v290;
        uint64_t v5 = v293;
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v294, (llvm::APInt *)&v299);
      if (v300 > 0x40)
      {
        uint64_t v66 = *(void *)v299;
        if ((*(void *)v299 & 0x8000000000000000) == 0)
        {
LABEL_131:
          if (v300 < 0x41) {
            goto LABEL_161;
          }
LABEL_159:
          if (v299) {
            operator delete[](v299);
          }
          goto LABEL_161;
        }
      }
      else
      {
        uint64_t v66 = (uint64_t)((void)v299 << -(char)v300) >> -(char)v300;
        if ((v66 & 0x8000000000000000) == 0) {
          goto LABEL_131;
        }
      }
      __int16 v314 = 259;
      mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
      if (v300 > 0x40)
      {
        uint64_t v67 = *(void *)v299;
        if (!v315) {
          goto LABEL_140;
        }
      }
      else
      {
        uint64_t v67 = (uint64_t)((void)v299 << -(char)v300) >> -(char)v300;
        if (!v315) {
          goto LABEL_140;
        }
      }
      LODWORD(v308) = 2;
      int64_t v309 = (const char *)v67;
      uint64_t v68 = (char *)v317;
      if (v318 >= v319)
      {
        unint64_t v85 = v318 + 1;
        if (v317 <= &v308 && (char *)v317 + 24 * v318 > (char *)&v308)
        {
          int64_t v88 = (char *)&v308 - (unsigned char *)v317;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v85, 24);
          uint64_t v68 = (char *)v317;
          uint64_t v69 = (unint64_t *)((char *)v317 + v88);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v85, 24);
          uint64_t v69 = &v308;
          uint64_t v68 = (char *)v317;
        }
      }
      else
      {
        uint64_t v69 = &v308;
      }
      uint64_t v70 = &v68[24 * v318];
      long long v71 = *(_OWORD *)v69;
      *((void *)v70 + 2) = v69[2];
      *(_OWORD *)uint64_t v70 = v71;
      uint64_t v72 = ++v318;
      if (v315)
      {
        LODWORD(v308) = 3;
        int64_t v309 = ", all values should be non-negative.";
        uint64_t v310 = 36;
        uint64_t v73 = (char *)v317;
        if (v72 >= v319)
        {
          unint64_t v86 = v72 + 1;
          BOOL v87 = (char *)v317 + 24 * v72 > (char *)&v308;
          if (v317 <= &v308 && v87)
          {
            int64_t v89 = (char *)&v308 - (unsigned char *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v86, 24);
            uint64_t v73 = (char *)v317;
            uint64_t v74 = (unint64_t *)((char *)v317 + v89);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v86, 24);
            uint64_t v74 = &v308;
            uint64_t v73 = (char *)v317;
          }
        }
        else
        {
          uint64_t v74 = &v308;
        }
        char v75 = &v73[24 * v318];
        long long v76 = *(_OWORD *)v74;
        *((void *)v75 + 2) = v74[2];
        *(_OWORD *)char v75 = v76;
        ++v318;
      }
LABEL_140:
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
      if (v315) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
      }
      if (v325)
      {
        unint64_t v77 = (void **)__p;
        if (__p)
        {
          uint64_t v78 = v324;
          uint64_t v79 = __p;
          if (v324 != __p)
          {
            do
              uint64_t v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
            while (v78 != v77);
            uint64_t v79 = __p;
          }
          int64_t v324 = v77;
          operator delete(v79);
        }
        uint64_t v80 = v321;
        if (v321)
        {
          uint64_t v81 = v322;
          int v82 = v321;
          if (v322 != v321)
          {
            do
            {
              long long v84 = (void *)*--v81;
              char v83 = v84;
              *uint64_t v81 = 0;
              if (v84) {
                operator delete[](v83);
              }
            }
            while (v81 != v80);
            int v82 = v321;
          }
          int64_t v322 = v80;
          operator delete(v82);
        }
        if (v317 != v320) {
          free(v317);
        }
      }
      if (v300 >= 0x41) {
        goto LABEL_159;
      }
LABEL_161:
      if (v66 < 0) {
        return v1;
      }
      ++v296;
    }
  }
  int64_t v311 = (void *)v307[2 * (((unint64_t)*((unsigned int *)v307 + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(&v311, (llvm::APInt *)&v315);
  if (v316 > 0x40)
  {
    uint64_t v90 = *(void *)v315;
    operator delete[](v315);
    if (!v4)
    {
LABEL_197:
      unint64_t v308 = 0;
      goto LABEL_198;
    }
  }
  else
  {
    uint64_t v90 = (uint64_t)((void)v315 << -(uint64_t)v316) >> -(uint64_t)v316;
    if (!v4) {
      goto LABEL_197;
    }
  }
  unint64_t v91 = *(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v91) {
    goto LABEL_197;
  }
  unint64_t v92 = *(void **)(*(void *)v91 + 136);
  if (v92 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    unint64_t v91 = 0;
  }
  unint64_t v308 = v91;
  if (v92 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v308);
    uint64_t v94 = (const char *)v93;
    if (v93 <= 3)
    {
      __int16 v314 = 259;
      mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
      if (v315)
      {
        LODWORD(v294) = 2;
        unint64_t v295 = v94;
        long long v95 = &v294;
        long long v96 = (char *)v317;
        if (v318 >= v319)
        {
          unint64_t v239 = v318 + 1;
          if (v317 <= &v294 && (char *)v317 + 24 * v318 > (char *)&v294)
          {
            int64_t v271 = (char *)&v294 - (unsigned char *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v239, 24);
            long long v96 = (char *)v317;
            long long v95 = (const void ***)((char *)v317 + v271);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v239, 24);
            long long v95 = &v294;
            long long v96 = (char *)v317;
          }
        }
        uint64_t v97 = &v96[24 * v318];
        long long v98 = *(_OWORD *)v95;
        *((void *)v97 + 2) = v95[2];
        *(_OWORD *)uint64_t v97 = v98;
        uint64_t v99 = ++v318;
        if (v315)
        {
          LODWORD(v294) = 3;
          unint64_t v295 = ".";
          uint64_t v296 = 1;
          uint64_t v100 = &v294;
          uint64_t v101 = (char *)v317;
          if (v99 >= v319)
          {
            unint64_t v246 = v99 + 1;
            BOOL v247 = (char *)v317 + 24 * v99 > (char *)&v294;
            if (v317 <= &v294 && v247)
            {
              int64_t v276 = (char *)&v294 - (unsigned char *)v317;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v246, 24);
              uint64_t v101 = (char *)v317;
              uint64_t v100 = (const void ***)((char *)v317 + v276);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v246, 24);
              uint64_t v100 = &v294;
              uint64_t v101 = (char *)v317;
            }
          }
          uint64_t v102 = &v101[24 * v318];
          long long v103 = *(_OWORD *)v100;
          *((void *)v102 + 2) = v100[2];
          *(_OWORD *)uint64_t v102 = v103;
          ++v318;
        }
      }
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
      if (v315) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
      }
      if (!v325) {
        return v1;
      }
      uint64_t v104 = (void **)__p;
      if (__p)
      {
        uint64_t v105 = v324;
        uint64_t v106 = __p;
        if (v324 != __p)
        {
          do
            uint64_t v105 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v105 - 1);
          while (v105 != v104);
          uint64_t v106 = __p;
        }
        int64_t v324 = v104;
        operator delete(v106);
      }
      char v107 = v321;
      if (!v321) {
        goto LABEL_338;
      }
      uint64_t v108 = v322;
      uint64_t v109 = v321;
      if (v322 == v321) {
        goto LABEL_337;
      }
      do
      {
        uint64_t v128 = (void *)*--v108;
        unint64_t v127 = v128;
        void *v108 = 0;
        if (v128) {
          operator delete[](v127);
        }
      }
      while (v108 != v107);
      goto LABEL_336;
    }
    if ((v90 & 0x80000000) != 0) {
      uint64_t v211 = 0;
    }
    else {
      uint64_t v211 = v93;
    }
    if ((unint64_t)((int)v90 - v211) <= 0xFFFFFFFFFFFFFFFBLL)
    {
      __int16 v314 = 259;
      mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
      if (v315)
      {
        LODWORD(v294) = 2;
        unint64_t v295 = (const char *)(int)v90;
        unsigned int v212 = &v294;
        long long v213 = (char *)v317;
        if (v318 >= v319)
        {
          unint64_t v256 = v318 + 1;
          if (v317 <= &v294 && (char *)v317 + 24 * v318 > (char *)&v294)
          {
            int64_t v281 = (char *)&v294 - (unsigned char *)v317;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v256, 24);
            long long v213 = (char *)v317;
            unsigned int v212 = (const void ***)((char *)v317 + v281);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v256, 24);
            unsigned int v212 = &v294;
            long long v213 = (char *)v317;
          }
        }
        uint64_t v214 = &v213[24 * v318];
        long long v215 = *(_OWORD *)v212;
        *((void *)v214 + 2) = v212[2];
        *(_OWORD *)uint64_t v214 = v215;
        uint64_t v216 = ++v318;
        if (v315)
        {
          LODWORD(v294) = 3;
          unint64_t v295 = " for input rank ";
          uint64_t v296 = 16;
          uint64_t v217 = &v294;
          char v218 = (char *)v317;
          if (v216 >= v319)
          {
            unint64_t v261 = v216 + 1;
            BOOL v262 = (char *)v317 + 24 * v216 > (char *)&v294;
            if (v317 <= &v294 && v262)
            {
              int64_t v284 = (char *)&v294 - (unsigned char *)v317;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v261, 24);
              char v218 = (char *)v317;
              uint64_t v217 = (const void ***)((char *)v317 + v284);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v261, 24);
              uint64_t v217 = &v294;
              char v218 = (char *)v317;
            }
          }
          uint64_t v219 = &v218[24 * v318];
          long long v220 = *(_OWORD *)v217;
          *((void *)v219 + 2) = v217[2];
          *(_OWORD *)uint64_t v219 = v220;
          uint64_t v221 = ++v318;
          if (v315)
          {
            LODWORD(v294) = 2;
            unint64_t v295 = v94;
            v222 = &v294;
            uint64_t v223 = (char *)v317;
            if (v221 >= v319)
            {
              unint64_t v265 = v221 + 1;
              BOOL v266 = (char *)v317 + 24 * v221 > (char *)&v294;
              if (v317 <= &v294 && v266)
              {
                int64_t v286 = (char *)&v294 - (unsigned char *)v317;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v265, 24);
                uint64_t v223 = (char *)v317;
                v222 = (const void ***)((char *)v317 + v286);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v265, 24);
                v222 = &v294;
                uint64_t v223 = (char *)v317;
              }
            }
            uint64_t v224 = &v223[24 * v318];
            long long v225 = *(_OWORD *)v222;
            *((void *)v224 + 2) = v222[2];
            *(_OWORD *)uint64_t v224 = v225;
            uint64_t v226 = ++v318;
            if (v315)
            {
              LODWORD(v294) = 3;
              unint64_t v295 = ".";
              uint64_t v296 = 1;
              uint64_t v227 = &v294;
              long long v228 = (char *)v317;
              if (v226 >= v319)
              {
                unint64_t v267 = v226 + 1;
                BOOL v268 = (char *)v317 + 24 * v226 > (char *)&v294;
                if (v317 <= &v294 && v268)
                {
                  int64_t v287 = (char *)&v294 - (unsigned char *)v317;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v267, 24);
                  long long v228 = (char *)v317;
                  uint64_t v227 = (const void ***)((char *)v317 + v287);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v267, 24);
                  uint64_t v227 = &v294;
                  long long v228 = (char *)v317;
                }
              }
              uint64_t v229 = &v228[24 * v318];
              long long v230 = *(_OWORD *)v227;
              *((void *)v229 + 2) = v227[2];
              *(_OWORD *)uint64_t v229 = v230;
              ++v318;
            }
          }
        }
      }
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
      if (v315) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
      }
      if (!v325) {
        return v1;
      }
      uint64_t v231 = (void **)__p;
      if (__p)
      {
        v232 = v324;
        long long v233 = __p;
        if (v324 != __p)
        {
          do
            v232 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v232 - 1);
          while (v232 != v231);
          long long v233 = __p;
        }
        int64_t v324 = v231;
        operator delete(v233);
      }
      char v107 = v321;
      if (!v321) {
        goto LABEL_338;
      }
      uint64_t v234 = v322;
      uint64_t v109 = v321;
      if (v322 == v321) {
        goto LABEL_337;
      }
      do
      {
        unint64_t v236 = (void *)*--v234;
        uint64_t v235 = v236;
        void *v234 = 0;
        if (v236) {
          operator delete[](v235);
        }
      }
      while (v234 != v107);
LABEL_336:
      uint64_t v109 = v321;
LABEL_337:
      int64_t v322 = v107;
      operator delete(v109);
      goto LABEL_338;
    }
  }
LABEL_198:
  unint64_t v299 = 0;
  if (!v5 || (unint64_t v110 = *(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    unint64_t v298 = 0;
    goto LABEL_224;
  }
  uint64_t v111 = *(void **)(*(void *)v110 + 136);
  if (v111 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    unint64_t v110 = 0;
  }
  unint64_t v298 = v110;
  if (v111 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v298), v112 == 4))
  {
LABEL_224:
    int64_t v311 = v313;
    uint64_t v312 = 0x500000000;
    if (mlir::matchConstantWithIntVector<long long>(0, (uint64_t)&v311))
    {
      if (v5)
      {
        if (v308)
        {
          uint64_t v129 = v312;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v308);
          if (v130 != v129)
          {
            __int16 v297 = 259;
            mlir::OpState::emitOpError(&v307, &v294, (uint64_t)&v315);
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v308);
            if (v315)
            {
              LODWORD(v301) = 5;
              BOOL v302 = v165;
              unsigned int v166 = &v301;
              unint64_t v167 = (char *)v317;
              if (v318 >= v319)
              {
                unint64_t v237 = v318 + 1;
                if (v317 <= &v301 && (char *)v317 + 24 * v318 > (char *)&v301)
                {
                  int64_t v269 = (char *)&v301 - (unsigned char *)v317;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v237, 24);
                  unint64_t v167 = (char *)v317;
                  unsigned int v166 = (const void ***)((char *)v317 + v269);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v237, 24);
                  unsigned int v166 = &v301;
                  unint64_t v167 = (char *)v317;
                }
              }
              BOOL v168 = &v167[24 * v318];
              long long v169 = *(_OWORD *)v166;
              *((void *)v168 + 2) = v166[2];
              *(_OWORD *)BOOL v168 = v169;
              uint64_t v170 = ++v318;
              if (v315)
              {
                LODWORD(v301) = 3;
                uint64_t v303 = 35;
                unint64_t v171 = &v301;
                char v172 = (char *)v317;
                if (v170 >= v319)
                {
                  unint64_t v242 = v170 + 1;
                  BOOL v243 = (char *)v317 + 24 * v170 > (char *)&v301;
                  if (v317 <= &v301 && v243)
                  {
                    int64_t v274 = (char *)&v301 - (unsigned char *)v317;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v242, 24);
                    char v172 = (char *)v317;
                    unint64_t v171 = (const void ***)((char *)v317 + v274);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v242, 24);
                    unint64_t v171 = &v301;
                    char v172 = (char *)v317;
                  }
                }
                unint64_t v173 = &v172[24 * v318];
                long long v174 = *(_OWORD *)v171;
                *((void *)v173 + 2) = v171[2];
                *(_OWORD *)unint64_t v173 = v174;
                uint64_t v175 = ++v318;
                if (v315)
                {
                  LODWORD(v301) = 5;
                  BOOL v302 = (const char *)v312;
                  BOOL v176 = &v301;
                  uint64_t v177 = (char *)v317;
                  if (v175 >= v319)
                  {
                    unint64_t v252 = v175 + 1;
                    BOOL v253 = (char *)v317 + 24 * v175 > (char *)&v301;
                    if (v317 <= &v301 && v253)
                    {
                      int64_t v279 = (char *)&v301 - (unsigned char *)v317;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v252, 24);
                      uint64_t v177 = (char *)v317;
                      BOOL v176 = (const void ***)((char *)v317 + v279);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v252, 24);
                      BOOL v176 = &v301;
                      uint64_t v177 = (char *)v317;
                    }
                  }
                  int64_t v178 = &v177[24 * v318];
                  long long v179 = *(_OWORD *)v176;
                  *((void *)v178 + 2) = v176[2];
                  *(_OWORD *)int64_t v178 = v179;
                  uint64_t v180 = ++v318;
                  if (v315)
                  {
                    LODWORD(v301) = 3;
                    BOOL v302 = " values.";
                    uint64_t v303 = 8;
                    int64_t v181 = &v301;
                    int64_t v182 = (char *)v317;
                    if (v180 >= v319)
                    {
                      unint64_t v259 = v180 + 1;
                      BOOL v260 = (char *)v317 + 24 * v180 > (char *)&v301;
                      if (v317 <= &v301 && v260)
                      {
                        int64_t v283 = (char *)&v301 - (unsigned char *)v317;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v259, 24);
                        int64_t v182 = (char *)v317;
                        int64_t v181 = (const void ***)((char *)v317 + v283);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v259, 24);
                        int64_t v181 = &v301;
                        int64_t v182 = (char *)v317;
                      }
                    }
                    int64_t v183 = &v182[24 * v318];
                    long long v184 = *(_OWORD *)v181;
                    *((void *)v183 + 2) = v181[2];
                    *(_OWORD *)int64_t v183 = v184;
                    ++v318;
                  }
                }
              }
            }
            uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
            if (v315) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
            }
            if (v325)
            {
              int64_t v185 = (void **)__p;
              if (__p)
              {
                int64_t v186 = v324;
                int64_t v187 = __p;
                if (v324 != __p)
                {
                  do
                    int64_t v186 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v186 - 1);
                  while (v186 != v185);
                  int64_t v187 = __p;
                }
                int64_t v324 = v185;
                operator delete(v187);
              }
              uint64_t v156 = v321;
              if (!v321) {
                goto LABEL_334;
              }
              int64_t v188 = v322;
              unint64_t v158 = v321;
              if (v322 == v321) {
                goto LABEL_333;
              }
              do
              {
                int64_t v190 = (void *)*--v188;
                int64_t v189 = v190;
                void *v188 = 0;
                if (v190) {
                  operator delete[](v189);
                }
              }
              while (v188 != v156);
              goto LABEL_332;
            }
LABEL_258:
            unint64_t v163 = v311;
            if (v311 != v313)
            {
LABEL_259:
              free(v163);
              return v1;
            }
            return v1;
          }
        }
        if (v299)
        {
          uint64_t v131 = v312;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v299);
          if (v132 != v131)
          {
            __int16 v297 = 259;
            mlir::OpState::emitOpError(&v307, &v294, (uint64_t)&v315);
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v299);
            if (v315)
            {
              LODWORD(v301) = 5;
              BOOL v302 = v133;
              unint64_t v134 = &v301;
              uint64_t v135 = (char *)v317;
              if (v318 >= v319)
              {
                unint64_t v240 = v318 + 1;
                if (v317 <= &v301 && (char *)v317 + 24 * v318 > (char *)&v301)
                {
                  int64_t v272 = (char *)&v301 - (unsigned char *)v317;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v240, 24);
                  uint64_t v135 = (char *)v317;
                  unint64_t v134 = (const void ***)((char *)v317 + v272);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v240, 24);
                  unint64_t v134 = &v301;
                  uint64_t v135 = (char *)v317;
                }
              }
              int64_t v136 = &v135[24 * v318];
              long long v137 = *(_OWORD *)v134;
              *((void *)v136 + 2) = v134[2];
              *(_OWORD *)int64_t v136 = v137;
              uint64_t v138 = ++v318;
              if (v315)
              {
                LODWORD(v301) = 3;
                uint64_t v303 = 38;
                int64_t v139 = &v301;
                unsigned int v140 = (char *)v317;
                if (v138 >= v319)
                {
                  unint64_t v248 = v138 + 1;
                  BOOL v249 = (char *)v317 + 24 * v138 > (char *)&v301;
                  if (v317 <= &v301 && v249)
                  {
                    int64_t v277 = (char *)&v301 - (unsigned char *)v317;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v248, 24);
                    unsigned int v140 = (char *)v317;
                    int64_t v139 = (const void ***)((char *)v317 + v277);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v248, 24);
                    int64_t v139 = &v301;
                    unsigned int v140 = (char *)v317;
                  }
                }
                unsigned int v141 = &v140[24 * v318];
                long long v142 = *(_OWORD *)v139;
                *((void *)v141 + 2) = v139[2];
                *(_OWORD *)unsigned int v141 = v142;
                uint64_t v143 = ++v318;
                if (v315)
                {
                  LODWORD(v301) = 5;
                  BOOL v302 = (const char *)v312;
                  int64_t v144 = &v301;
                  int64_t v145 = (char *)v317;
                  if (v143 >= v319)
                  {
                    unint64_t v257 = v143 + 1;
                    BOOL v258 = (char *)v317 + 24 * v143 > (char *)&v301;
                    if (v317 <= &v301 && v258)
                    {
                      int64_t v282 = (char *)&v301 - (unsigned char *)v317;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v257, 24);
                      int64_t v145 = (char *)v317;
                      int64_t v144 = (const void ***)((char *)v317 + v282);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v257, 24);
                      int64_t v144 = &v301;
                      int64_t v145 = (char *)v317;
                    }
                  }
                  int64_t v146 = &v145[24 * v318];
                  long long v147 = *(_OWORD *)v144;
                  *((void *)v146 + 2) = v144[2];
                  *(_OWORD *)int64_t v146 = v147;
                  uint64_t v148 = ++v318;
                  if (v315)
                  {
                    LODWORD(v301) = 3;
                    BOOL v302 = " values.";
                    uint64_t v303 = 8;
                    long long v149 = &v301;
                    unint64_t v150 = (char *)v317;
                    if (v148 >= v319)
                    {
                      unint64_t v263 = v148 + 1;
                      BOOL v264 = (char *)v317 + 24 * v148 > (char *)&v301;
                      if (v317 <= &v301 && v264)
                      {
                        int64_t v285 = (char *)&v301 - (unsigned char *)v317;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v263, 24);
                        unint64_t v150 = (char *)v317;
                        long long v149 = (const void ***)((char *)v317 + v285);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v263, 24);
                        long long v149 = &v301;
                        unint64_t v150 = (char *)v317;
                      }
                    }
                    unint64_t v151 = &v150[24 * v318];
                    long long v152 = *(_OWORD *)v149;
                    *((void *)v151 + 2) = v149[2];
                    *(_OWORD *)unint64_t v151 = v152;
                    ++v318;
                  }
                }
              }
            }
            uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
            if (v315) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
            }
            if (v325)
            {
              uint64_t v153 = (void **)__p;
              if (__p)
              {
                uint64_t v154 = v324;
                uint64_t v155 = __p;
                if (v324 != __p)
                {
                  do
                    uint64_t v154 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v154 - 1);
                  while (v154 != v153);
                  uint64_t v155 = __p;
                }
                int64_t v324 = v153;
                operator delete(v155);
              }
              uint64_t v156 = v321;
              if (!v321) {
                goto LABEL_334;
              }
              unint64_t v157 = v322;
              unint64_t v158 = v321;
              if (v322 == v321)
              {
LABEL_333:
                int64_t v322 = v156;
                operator delete(v158);
LABEL_334:
                if (v317 != v320) {
                  free(v317);
                }
                goto LABEL_258;
              }
              do
              {
                unint64_t v160 = (void *)*--v157;
                int v159 = v160;
                *unint64_t v157 = 0;
                if (v160) {
                  operator delete[](v159);
                }
              }
              while (v157 != v156);
LABEL_332:
              unint64_t v158 = v321;
              goto LABEL_333;
            }
            goto LABEL_258;
          }
        }
      }
      else if (v312 != 4)
      {
        __int16 v297 = 259;
        mlir::OpState::emitOpError(&v307, &v294, (uint64_t)&v315);
        if (v315)
        {
          LODWORD(v301) = 3;
          uint64_t v303 = 21;
          int64_t v191 = &v301;
          int64_t v192 = (char *)v317;
          if (v318 >= v319)
          {
            unint64_t v238 = v318 + 1;
            if (v317 <= &v301 && (char *)v317 + 24 * v318 > (char *)&v301)
            {
              int64_t v270 = (char *)&v301 - (unsigned char *)v317;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v238, 24);
              int64_t v192 = (char *)v317;
              int64_t v191 = (const void ***)((char *)v317 + v270);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v238, 24);
              int64_t v191 = &v301;
              int64_t v192 = (char *)v317;
            }
          }
          int64_t v193 = &v192[24 * v318];
          long long v194 = *(_OWORD *)v191;
          *((void *)v193 + 2) = v191[2];
          *(_OWORD *)int64_t v193 = v194;
          uint64_t v195 = ++v318;
          if (v315)
          {
            LODWORD(v301) = 5;
            BOOL v302 = (const char *)v312;
            uint64_t v196 = &v301;
            long long v197 = (char *)v317;
            if (v195 >= v319)
            {
              unint64_t v244 = v195 + 1;
              BOOL v245 = (char *)v317 + 24 * v195 > (char *)&v301;
              if (v317 <= &v301 && v245)
              {
                int64_t v275 = (char *)&v301 - (unsigned char *)v317;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v244, 24);
                long long v197 = (char *)v317;
                uint64_t v196 = (const void ***)((char *)v317 + v275);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v244, 24);
                uint64_t v196 = &v301;
                long long v197 = (char *)v317;
              }
            }
            __int16 v198 = &v197[24 * v318];
            long long v199 = *(_OWORD *)v196;
            *((void *)v198 + 2) = v196[2];
            *(_OWORD *)__int16 v198 = v199;
            uint64_t v200 = ++v318;
            if (v315)
            {
              LODWORD(v301) = 3;
              BOOL v302 = " values.";
              uint64_t v303 = 8;
              uint64_t v201 = &v301;
              uint64_t v202 = (char *)v317;
              if (v200 >= v319)
              {
                unint64_t v254 = v200 + 1;
                BOOL v255 = (char *)v317 + 24 * v200 > (char *)&v301;
                if (v317 <= &v301 && v255)
                {
                  int64_t v280 = (char *)&v301 - (unsigned char *)v317;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v254, 24);
                  uint64_t v202 = (char *)v317;
                  uint64_t v201 = (const void ***)((char *)v317 + v280);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v254, 24);
                  uint64_t v201 = &v301;
                  uint64_t v202 = (char *)v317;
                }
              }
              unint64_t v203 = &v202[24 * v318];
              long long v204 = *(_OWORD *)v201;
              *((void *)v203 + 2) = v201[2];
              *(_OWORD *)unint64_t v203 = v204;
              ++v318;
            }
          }
        }
        uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
        if (v315) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
        }
        if (v325)
        {
          int v205 = (void **)__p;
          if (__p)
          {
            v206 = v324;
            uint64_t v207 = __p;
            if (v324 != __p)
            {
              do
                v206 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v206 - 1);
              while (v206 != v205);
              uint64_t v207 = __p;
            }
            int64_t v324 = v205;
            operator delete(v207);
          }
          uint64_t v156 = v321;
          if (!v321) {
            goto LABEL_334;
          }
          uint64_t v208 = v322;
          unint64_t v158 = v321;
          if (v322 == v321) {
            goto LABEL_333;
          }
          do
          {
            v210 = (void *)*--v208;
            uint64_t v209 = v210;
            void *v208 = 0;
            if (v210) {
              operator delete[](v209);
            }
          }
          while (v208 != v156);
          goto LABEL_332;
        }
        goto LABEL_258;
      }
    }
    uint64_t v1 = 1;
    goto LABEL_258;
  }
  __int16 v314 = 259;
  mlir::OpState::emitOpError(&v307, (const void ***)&v311, (uint64_t)&v315);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v298);
  if (v315)
  {
    LODWORD(v294) = 5;
    unint64_t v295 = v113;
    uint64_t v114 = &v294;
    uint64_t v115 = (char *)v317;
    if (v318 >= v319)
    {
      unint64_t v241 = v318 + 1;
      if (v317 <= &v294 && (char *)v317 + 24 * v318 > (char *)&v294)
      {
        int64_t v273 = (char *)&v294 - (unsigned char *)v317;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v241, 24);
        uint64_t v115 = (char *)v317;
        uint64_t v114 = (const void ***)((char *)v317 + v273);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v241, 24);
        uint64_t v114 = &v294;
        uint64_t v115 = (char *)v317;
      }
    }
    uint64_t v116 = &v115[24 * v318];
    long long v117 = *(_OWORD *)v114;
    *((void *)v116 + 2) = v114[2];
    *(_OWORD *)uint64_t v116 = v117;
    uint64_t v118 = ++v318;
    if (v315)
    {
      LODWORD(v294) = 3;
      unint64_t v295 = ".";
      uint64_t v296 = 1;
      int64_t v119 = &v294;
      int64_t v120 = (char *)v317;
      if (v118 >= v319)
      {
        unint64_t v250 = v118 + 1;
        BOOL v251 = (char *)v317 + 24 * v118 > (char *)&v294;
        if (v317 <= &v294 && v251)
        {
          int64_t v278 = (char *)&v294 - (unsigned char *)v317;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v250, 24);
          int64_t v120 = (char *)v317;
          int64_t v119 = (const void ***)((char *)v317 + v278);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v317, v320, v250, 24);
          int64_t v119 = &v294;
          int64_t v120 = (char *)v317;
        }
      }
      uint64_t v121 = &v120[24 * v318];
      long long v122 = *(_OWORD *)v119;
      *((void *)v121 + 2) = v119[2];
      *(_OWORD *)uint64_t v121 = v122;
      ++v318;
    }
  }
  uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v315);
  if (v315) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v315);
  }
  if (v325)
  {
    char v123 = (void **)__p;
    if (__p)
    {
      uint64_t v124 = v324;
      unint64_t v125 = __p;
      if (v324 != __p)
      {
        do
          uint64_t v124 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v124 - 1);
        while (v124 != v123);
        unint64_t v125 = __p;
      }
      int64_t v324 = v123;
      operator delete(v125);
    }
    char v107 = v321;
    if (v321)
    {
      uint64_t v126 = v322;
      uint64_t v109 = v321;
      if (v322 == v321) {
        goto LABEL_337;
      }
      do
      {
        uint64_t v162 = (void *)*--v126;
        uint64_t v161 = v162;
        void *v126 = 0;
        if (v162) {
          operator delete[](v161);
        }
      }
      while (v126 != v107);
      goto LABEL_336;
    }
LABEL_338:
    unint64_t v163 = v317;
    if (v317 == v320) {
      return v1;
    }
    goto LABEL_259;
  }
  return v1;
}

uint64_t mlir::mps::DepthwiseConv3DOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v207[8] = *MEMORY[0x1E4F143B8];
  uint64_t v180 = a4;
  unint64_t v181 = a5;
  if (a7)
  {
    long long v14 = *a7;
    long long v15 = a7[1];
    uint64_t v16 = *((void *)a7 + 4);
  }
  else
  {
    uint64_t v16 = 0;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
  }
  uint64_t v170 = a6;
  v171[0] = 0;
  char v172 = 0;
  long long v173 = v14;
  long long v174 = v15;
  uint64_t v175 = v16;
  uint64_t v176 = a9;
  unint64_t v17 = a5;
  uint64_t v177 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v170);
    if (v172) {
      char v172 = 0;
    }
    mlir::OperationName::OperationName(v171, "mps.depthwise_conv_3d", 21, Context);
    char v172 = 1;
    unint64_t v17 = v181;
  }
  uint64_t v178 = a4;
  unint64_t v179 = a5;
  if (v17 < 2
    || (uint64_t v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::DepthwiseConv3DOpAdaptor::verify(&v170, v19)))
  {
    uint64_t v31 = mlir::Float32Type::get(this, a2);
LABEL_24:
    uint64_t v38 = mlir::UnrankedTensorType::get(v31);
    goto LABEL_25;
  }
  uint64_t v20 = mlir::ValueRange::dereference_iterator(&v180, 0);
  unint64_t v22 = *(void *)(mlir::ValueRange::dereference_iterator(&v180, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  long long v23 = v173;
  long long v24 = v174;
  uint64_t v25 = v175;
  int v205 = (void *)(*(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = v205;
  uint64_t v206 = v22;
  mlir::ValueRange::ValueRange(v204, (uint64_t)&v205, 2uLL);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8))
  {
    uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
    BOOL v164 = v21;
    uint64_t v165 = v27;
    uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
    if (v28) {
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v164 = 0;
    uint64_t v165 = 0;
    uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
    if (v28)
    {
LABEL_12:
      uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v22 + 8);
      unint64_t v162 = v22;
      uint64_t v163 = v29;
      uint64_t v30 = v164;
      if (!v164) {
        goto LABEL_23;
      }
      goto LABEL_17;
    }
  }
  unint64_t v22 = 0;
  unint64_t v162 = 0;
  uint64_t v163 = v28;
  uint64_t v30 = v164;
  if (!v164)
  {
LABEL_23:
    uint64_t v31 = v26;
    goto LABEL_24;
  }
LABEL_17:
  if (*(_UNKNOWN **)(*v30 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || !v22
    || *(_UNKNOWN **)(*(void *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_23;
  }
  uint64_t v201 = v203;
  uint64_t v202 = 0x500000000;
  __int16 v198 = v200;
  uint64_t v199 = 0x500000000;
  uint64_t v195 = v197;
  uint64_t v196 = 0x600000000;
  int64_t v192 = v194;
  uint64_t v193 = 0x300000000;
  int64_t v189 = v191;
  uint64_t v190 = 0x300000000;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v164);
  int64_t v34 = v33;
  uint64_t v168 = *((void *)&v23 + 1);
  uint64_t v169 = v25;
  uint64_t v166 = v23;
  uint64_t v167 = v24;
  if ((void)v23)
  {
    uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v166);
    unsigned int v36 = v196;
    BOOL v37 = v196 > 6;
    if (v196 == 6) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t Int = -4;
    unsigned int v36 = v196;
    BOOL v37 = v196 > 6;
    if (v196 == 6) {
      goto LABEL_34;
    }
  }
  if (!v37)
  {
    if (HIDWORD(v196) > 5
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v195, v197, 6uLL, 8), unsigned int v36 = v196, v196 != 6))
    {
      bzero((char *)v195 + 8 * v36, 48 - 8 * v36);
    }
  }
  LODWORD(v196) = 6;
LABEL_34:
  uint64_t v41 = v193;
  if (v193 == 3)
  {
    uint64_t v42 = v190;
    BOOL v43 = v190 > 3;
    if (v190 == 3) {
      goto LABEL_36;
    }
  }
  else
  {
    if (v193 <= 3)
    {
      uint64_t v50 = v193;
      int v51 = v193;
      if (HIDWORD(v193) <= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v192, v194, 3uLL, 8);
        uint64_t v50 = v193;
        int v51 = v193;
      }
      memset_pattern16((char *)v192 + 8 * v50, &unk_1810FE350, 24 - 8 * v41);
      int v49 = v51 - v41 + 3;
    }
    else
    {
      int v49 = 3;
    }
    LODWORD(v193) = v49;
    uint64_t v42 = v190;
    BOOL v43 = v190 > 3;
    if (v190 == 3)
    {
LABEL_36:
      unsigned int v44 = v202;
      BOOL v45 = v202 > 5;
      if (v202 == 5) {
        goto LABEL_37;
      }
      goto LABEL_53;
    }
  }
  if (v43)
  {
    int v52 = 3;
  }
  else
  {
    uint64_t v53 = v42;
    int v54 = v42;
    if (HIDWORD(v190) <= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, v191, 3uLL, 8);
      uint64_t v53 = v190;
      int v54 = v190;
    }
    memset_pattern16((char *)v189 + 8 * v53, &unk_1810FE350, 24 - 8 * v42);
    int v52 = v54 - v42 + 3;
  }
  LODWORD(v190) = v52;
  unsigned int v44 = v202;
  BOOL v45 = v202 > 5;
  if (v202 == 5)
  {
LABEL_37:
    unsigned int v46 = v199;
    BOOL v47 = v199 > 5;
    if (v199 == 5) {
      goto LABEL_38;
    }
    goto LABEL_58;
  }
LABEL_53:
  if (!v45)
  {
    if (HIDWORD(v202) > 4
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v201, v203, 5uLL, 8), unsigned int v44 = v202, v202 != 5))
    {
      bzero((char *)v201 + 8 * v44, 40 - 8 * v44);
    }
  }
  LODWORD(v202) = 5;
  unsigned int v46 = v199;
  BOOL v47 = v199 > 5;
  if (v199 == 5)
  {
LABEL_38:
    int64_t v48 = v34 - 4;
    if (v34 < 4) {
      goto LABEL_98;
    }
    goto LABEL_63;
  }
LABEL_58:
  if (!v47)
  {
    if (HIDWORD(v199) > 4
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v200, 5uLL, 8), unsigned int v46 = v199, v199 != 5))
    {
      bzero((char *)v198 + 8 * v46, 40 - 8 * v46);
    }
  }
  LODWORD(v199) = 5;
  int64_t v48 = v34 - 4;
  if (v34 >= 4)
  {
LABEL_63:
    int64_t v55 = (v34 & (Int >> 63)) + Int;
    if (v55 >= v34 || v55 < v48) {
      int64_t v57 = v48;
    }
    else {
      int64_t v57 = (v34 & (Int >> 63)) + Int;
    }
    if (v34 != 5)
    {
      if ((unint64_t)v34 >= 5)
      {
        if (v34 <= (unint64_t)HIDWORD(v199))
        {
          uint64_t v58 = 5;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v200, v34, 8);
          uint64_t v58 = v199;
        }
        if (v34 != v58) {
          bzero((char *)v198 + 8 * v58, 8 * (v34 - v58));
        }
      }
      LODWORD(v199) = v34;
    }
    unint64_t v59 = v198;
    int64_t v60 = v34 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v61 = vdupq_n_s64(v57);
    int64x2_t v62 = vdupq_n_s64(v48);
    int64x2_t v63 = (int64x2_t)xmmword_1810FE2E0;
    uint64_t v64 = (int8x16_t *)((char *)v198 + 16);
    int64x2_t v65 = vdupq_n_s64(2uLL);
    int64x2_t v66 = vdupq_n_s64(1uLL);
    int64x2_t v67 = vdupq_n_s64(3uLL);
    int64x2_t v68 = vdupq_n_s64(4uLL);
    unint64_t v69 = v34 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v70 = vaddq_s64(v63, v65);
      v64[-1] = vbslq_s8(vorrq_s8((int8x16_t)vcgtq_s64(v63, v61), (int8x16_t)vcgtq_s64(v62, v63)), (int8x16_t)v63, vbslq_s8((int8x16_t)vcgtq_s64(v61, v63), (int8x16_t)vaddq_s64(v63, v66), (int8x16_t)v62));
      int8x16_t *v64 = vbslq_s8(vorrq_s8((int8x16_t)vcgtq_s64(v70, v61), (int8x16_t)vcgtq_s64(v62, v70)), (int8x16_t)v70, vbslq_s8((int8x16_t)vcgtq_s64(v61, v70), (int8x16_t)vaddq_s64(v63, v67), (int8x16_t)v62));
      int64x2_t v63 = vaddq_s64(v63, v68);
      v64 += 2;
      v69 -= 4;
    }
    while (v69);
    for (; v34 != v60; ++v60)
    {
      if (v60 < v57) {
        int64_t v71 = v60 + 1;
      }
      else {
        int64_t v71 = v48;
      }
      if (v60 < v48 || v60 > v57) {
        int64_t v71 = v60;
      }
      v59[v60] = v71;
    }
    uint64_t v73 = v202;
    if (v34 != v202)
    {
      if (v34 >= (unint64_t)v202)
      {
        if (v34 > (unint64_t)HIDWORD(v202))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v201, v203, v34, 8);
          uint64_t v73 = v202;
        }
        if (v34 != v73) {
          bzero((char *)v201 + 8 * v73, 8 * (v34 - v73));
        }
      }
      LODWORD(v202) = v34;
    }
    uint64_t v74 = (uint64_t *)v198;
    char v75 = v201;
    int64_t v76 = v34;
    do
    {
      uint64_t v78 = *ArgAttrsAttr++;
      uint64_t v77 = v78;
      uint64_t v79 = *v74++;
      v75[v79] = v77;
      --v76;
    }
    while (v76);
  }
LABEL_98:
  if (v169 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v169) == 3)
  {
    LODWORD(v193) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v205, v169, 0);
    uint64_t v80 = v169;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v169);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v182, v80, NumElements);
    while (1)
    {
      BOOL v82 = v205 == v182 && v206 == v183;
      if (v82 && v207[0] == v184[0]) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v205, (llvm::APInt *)&__p);
      if (v186 > 0x40) {
        uint64_t v83 = *(void *)__p;
      }
      else {
        uint64_t v83 = (uint64_t)((void)__p << -(uint64_t)v186) >> -(uint64_t)v186;
      }
      uint64_t v84 = v193;
      if (v193 >= (unint64_t)HIDWORD(v193))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v192, v194, v193 + 1, 8);
        uint64_t v84 = v193;
      }
      *((void *)v192 + v84) = v83;
      LODWORD(v193) = v193 + 1;
      if (v186 >= 0x41 && __p) {
        operator delete[](__p);
      }
      ++v207[0];
    }
  }
  if (*((void *)&v23 + 1) && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v168) == 3)
  {
    LODWORD(v190) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v205, v168, 0);
    uint64_t v85 = v168;
    uint64_t v86 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v168);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v182, v85, v86);
    while (1)
    {
      BOOL v87 = v205 == v182 && v206 == v183;
      if (v87 && v207[0] == v184[0]) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v205, (llvm::APInt *)&__p);
      if (v186 > 0x40) {
        uint64_t v88 = *(void *)__p;
      }
      else {
        uint64_t v88 = (uint64_t)((void)__p << -(uint64_t)v186) >> -(uint64_t)v186;
      }
      uint64_t v89 = v190;
      if (v190 >= (unint64_t)HIDWORD(v190))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v189, v191, v190 + 1, 8);
        uint64_t v89 = v190;
      }
      *((void *)v189 + v89) = v88;
      LODWORD(v190) = v190 + 1;
      if (v186 >= 0x41 && __p) {
        operator delete[](__p);
      }
      ++v207[0];
    }
  }
  if ((void)v24 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v167) == 6)
  {
    LODWORD(v196) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v205, v167, 0);
    uint64_t v90 = v167;
    uint64_t v91 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v167);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v182, v90, v91);
    while (1)
    {
      BOOL v92 = v205 == v182 && v206 == v183;
      if (v92 && v207[0] == v184[0]) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v205, (llvm::APInt *)&__p);
      if (v186 > 0x40) {
        uint64_t v93 = *(void *)__p;
      }
      else {
        uint64_t v93 = (uint64_t)((void)__p << -(uint64_t)v186) >> -(uint64_t)v186;
      }
      uint64_t v94 = v196;
      if (v196 >= (unint64_t)HIDWORD(v196))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v195, v197, v196 + 1, 8);
        uint64_t v94 = v196;
      }
      *((void *)v195 + v94) = v93;
      LODWORD(v196) = v196 + 1;
      if (v186 >= 0x41 && __p) {
        operator delete[](__p);
      }
      ++v207[0];
    }
  }
  if (*((void *)&v24 + 1)) {
    int v95 = *(_DWORD *)(*((void *)&v24 + 1) + 8);
  }
  else {
    int v95 = 2;
  }
  uint64_t v96 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v162);
  __p = &v187;
  long long v187 = 0u;
  long long v188 = 0u;
  uint64_t v186 = 0x400000004;
  if (Int >= 0) {
    int64_t v98 = v34;
  }
  else {
    int64_t v98 = 0;
  }
  if (v97 == 4)
  {
    unint64_t v99 = Int - v98 + 4;
    if (v99 <= 3)
    {
      *(void *)&long long v187 = *(void *)(v96 + 8 * v99);
      *((void *)&v187 + 1) = *(void *)(v96 + 8 * (v99 == 0));
      uint64_t v100 = 8;
      if (v99 <= 1) {
        uint64_t v100 = 16;
      }
      *(void *)&long long v188 = *(void *)(v96 + v100);
      BOOL v37 = v99 > 2;
      uint64_t v101 = 24;
      if (v37) {
        uint64_t v101 = 16;
      }
      *((void *)&v188 + 1) = *(void *)(v96 + v101);
    }
  }
  int64_t v182 = v184;
  uint64_t v183 = 0x500000000;
  unint64_t v102 = v202;
  int v205 = v207;
  uint64_t v206 = 0x800000000;
  if (!v202)
  {
    unint64_t v105 = -4;
    uint64_t v106 = v201;
    uint64_t v104 = (char *)v207;
LABEL_173:
    unint64_t v107 = 0;
    if (v105 < 4 || (unint64_t)(v104 - v106) < 0x20) {
      goto LABEL_178;
    }
    uint64_t v108 = 0;
    unint64_t v107 = v105 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v109 = v105 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v110 = *(_OWORD *)&v106[v108 + 16];
      uint64_t v111 = &v104[v108];
      *(_OWORD *)uint64_t v111 = *(_OWORD *)&v106[v108];
      *((_OWORD *)v111 + 1) = v110;
      v108 += 32;
      v109 -= 4;
    }
    while (v109);
    while (v105 != v107)
    {
LABEL_178:
      *(void *)&v104[8 * v107] = *(void *)&v106[8 * v107];
      ++v107;
    }
    goto LABEL_179;
  }
  if (v202 < 9)
  {
    uint64_t v103 = 0;
    uint64_t v104 = (char *)v207;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v205, v207, v202, 8);
    uint64_t v103 = v206;
    uint64_t v104 = (char *)v205;
  }
  if (v102 != v103) {
    bzero(&v104[8 * v103], 8 * (v102 - v103));
  }
  LODWORD(v206) = v102;
  uint64_t v106 = v201;
  unint64_t v105 = v102 - 4;
  if (v102 != 4) {
    goto LABEL_173;
  }
LABEL_179:
  unint64_t v112 = v102 - 3;
  uint64_t v113 = __p;
  *(void *)&v104[8 * v105] = *(void *)__p;
  uint64_t v114 = v192;
  if (v95 == 2 || v95 == 4)
  {
    uint64_t v115 = *(void *)&v106[8 * v112];
    if (*(uint64_t *)v192 <= 1) {
      uint64_t v116 = 1;
    }
    else {
      uint64_t v116 = *(void *)v192;
    }
    uint64_t v117 = *(void *)&v106[8 * v112];
    if ((unint64_t)v116 >= 2)
    {
      uint64_t v117 = 0x8000000000000000;
      if (v115 != 0x8000000000000000)
      {
        uint64_t v117 = v115 / v116;
        if (v115 / v116 * v116 != v115) {
          v117 += v115 >= 0;
        }
      }
    }
    *(void *)&v104[8 * v112] = v117;
    uint64_t v118 = *(void *)&v106[8 * v102 - 16];
    if ((uint64_t)v114[1] <= 1) {
      uint64_t v119 = 1;
    }
    else {
      uint64_t v119 = v114[1];
    }
    uint64_t v120 = *(void *)&v106[8 * v102 - 16];
    if ((unint64_t)v119 >= 2)
    {
      uint64_t v120 = 0x8000000000000000;
      if (v118 != 0x8000000000000000)
      {
        uint64_t v120 = v118 / v119;
        if (v118 / v119 * v119 != v118) {
          v120 += v118 >= 0;
        }
      }
    }
    *(void *)&v104[8 * v102 - 16] = v120;
    unint64_t v121 = v102 - 1;
    uint64_t v122 = *(void *)&v106[8 * v102 - 8];
    uint64_t v123 = v114[2];
    if (v123 <= 1) {
      uint64_t v123 = 1;
    }
    if ((unint64_t)v123 >= 2)
    {
      if (v122 == 0x8000000000000000)
      {
        uint64_t v122 = 0x8000000000000000;
      }
      else if (v122 / v123 * v123 == v122)
      {
        v122 /= v123;
      }
      else
      {
        uint64_t v122 = v122 / v123 + (v122 >= 0);
      }
    }
  }
  else
  {
    uint64_t v124 = v189;
    uint64_t v125 = *(void *)&v106[8 * v112];
    uint64_t v126 = v195;
    uint64_t v127 = v113[1];
    uint64_t v128 = 0x8000000000000000;
    BOOL v129 = v127 == 0x8000000000000000 || v125 == 0x8000000000000000;
    uint64_t v130 = 0x8000000000000000;
    if (!v129)
    {
      uint64_t v131 = *((void *)v195 + 1) & ~(*((uint64_t *)v195 + 1) >> 63);
      uint64_t v132 = *(void *)v195 & ~(*(uint64_t *)v195 >> 63);
      uint64_t v133 = *(void *)v189;
      if (*(uint64_t *)v189 <= 1) {
        uint64_t v133 = 1;
      }
      uint64_t v134 = *(void *)v192;
      if (*(uint64_t *)v192 <= 1) {
        uint64_t v134 = 1;
      }
      if (v95 == 1)
      {
        uint64_t v131 = 0;
        uint64_t v132 = 0;
      }
      uint64_t v135 = v131 + v125 + v132 + v134 + ~(v133 * (v127 - 1));
      uint64_t v136 = v135 / v134;
      if (v135 / v134 * v134 == v135) {
        uint64_t v137 = 0;
      }
      else {
        uint64_t v137 = v135 >> 63;
      }
      uint64_t v130 = (v137 + v136) & ~((v137 + v136) >> 63);
    }
    *(void *)&v104[8 * v112] = v130;
    uint64_t v138 = *(void *)&v106[8 * v102 - 16];
    uint64_t v139 = v113[2];
    if (v139 != 0x8000000000000000 && v138 != 0x8000000000000000)
    {
      uint64_t v141 = v126[3] & ~((uint64_t)v126[3] >> 63);
      uint64_t v142 = v126[2] & ~((uint64_t)v126[2] >> 63);
      uint64_t v143 = v124[1];
      if (v143 <= 1) {
        uint64_t v143 = 1;
      }
      uint64_t v144 = v114[1];
      if (v144 <= 1) {
        uint64_t v144 = 1;
      }
      if (v95 == 1)
      {
        uint64_t v141 = 0;
        uint64_t v142 = 0;
      }
      uint64_t v145 = v141 + v138 + v142 + v144 + ~(v143 * (v139 - 1));
      uint64_t v146 = v145 / v144;
      if (v145 / v144 * v144 == v145) {
        uint64_t v147 = 0;
      }
      else {
        uint64_t v147 = v145 >> 63;
      }
      uint64_t v128 = (v147 + v146) & ~((v147 + v146) >> 63);
    }
    *(void *)&v104[8 * v102 - 16] = v128;
    unint64_t v121 = v102 - 1;
    uint64_t v148 = v113[3];
    uint64_t v122 = 0x8000000000000000;
    if (v148 != 0x8000000000000000)
    {
      uint64_t v149 = *(void *)&v106[8 * v121];
      if (v149 != 0x8000000000000000)
      {
        uint64_t v150 = v126[5] & ~((uint64_t)v126[5] >> 63);
        uint64_t v151 = v126[4] & ~((uint64_t)v126[4] >> 63);
        uint64_t v152 = v124[2];
        if (v152 <= 1) {
          uint64_t v152 = 1;
        }
        uint64_t v153 = v114[2];
        if (v153 <= 1) {
          uint64_t v153 = 1;
        }
        if (v95 == 1)
        {
          uint64_t v150 = 0;
          uint64_t v151 = 0;
        }
        uint64_t v154 = v150 + v149 + v151 + v153 + ~(v152 * (v148 - 1));
        uint64_t v155 = v154 / v153;
        if (v154 / v153 * v153 == v154) {
          uint64_t v156 = 0;
        }
        else {
          uint64_t v156 = v154 >> 63;
        }
        uint64_t v122 = (v156 + v155) & ~((v156 + v155) >> 63);
      }
    }
  }
  *(void *)&v104[8 * v121] = v122;
  unsigned int v157 = v183;
  if (v183 != v102)
  {
    if (v183 <= v102)
    {
      if (HIDWORD(v183) < v102)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v182, v184, v102, 8);
        unsigned int v157 = v183;
      }
      if (v157 != v102) {
        bzero((char *)v182 + 8 * v157, 8 * (v102 - v157));
      }
    }
    LODWORD(v183) = v102;
    uint64_t v104 = (char *)v205;
  }
  if (v102)
  {
    unint64_t v158 = (uint64_t *)v198;
    int v159 = v182;
    unint64_t v160 = v102;
    do
    {
      uint64_t v161 = *v158++;
      *v159++ = *(void *)&v104[8 * v161];
      --v160;
    }
    while (v160);
  }
  if (v104 != (char *)v207)
  {
    free(v104);
    unint64_t v102 = v183;
  }
  uint64_t v38 = mlir::RankedTensorType::get((uint64_t)v182, v102, v26, 0);
  if (v182 != v184) {
    free(v182);
  }
  if (__p != &v187) {
    free(__p);
  }
  if (v189 != v191) {
    free(v189);
  }
  if (v192 != v194) {
    free(v192);
  }
  if (v195 != v197) {
    free(v195);
  }
  if (v198 != v200) {
    free(v198);
  }
  if (v201 != v203) {
    free(v201);
  }
LABEL_25:
  unsigned int v39 = *(_DWORD *)(a11 + 8);
  if (v39 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
    unsigned int v39 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v39) = v38;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthwiseConv3DOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (const char *)a1[4];
  if (v3)
  {
    uint64_t v4 = (const char *)a1[5];
    if (v4)
    {
      if (a1[6])
      {
        uint64_t v5 = (const char *)a1[7];
        if (v5)
        {
          uint64_t v6 = (const char *)a1[3];
          uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
          int64x2_t v66 = v5;
          uint64_t v67 = v7;
          Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
          uint64_t v9 = Type;
          if (Type) {
            Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
          }
          uint64_t v70 = (uint64_t)v9;
          int64_t v71 = Type;
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
          uint64_t v69 = 3;
          if (v11 == 1 && *ArgAttrsAttr == v69)
          {
            int64x2_t v62 = v5;
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62);
            uint64_t v64 = v12;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
            {
              uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
              int64x2_t v66 = v3;
              uint64_t v67 = v13;
              long long v14 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
              long long v15 = v14;
              if (v14) {
                long long v14 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8);
              }
              uint64_t v70 = (uint64_t)v15;
              int64_t v71 = v14;
              uint64_t v16 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
              uint64_t v69 = 3;
              if (v17 == 1
                && *v16 == v69
                && (int64x2_t v62 = v3,
                    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                    uint64_t v64 = v18,
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                int64x2_t v66 = v4;
                uint64_t v67 = v19;
                uint64_t v20 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
                uint64_t v21 = v20;
                if (v20) {
                  uint64_t v20 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
                }
                uint64_t v70 = (uint64_t)v21;
                int64_t v71 = v20;
                unint64_t v22 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
                uint64_t v69 = 6;
                if (v23 == 1
                  && *v22 == v69
                  && (int64x2_t v62 = v4,
                      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                      uint64_t v64 = v24,
                      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  if (!v6) {
                    return 1;
                  }
                  int64x2_t v66 = v6;
                  uint64_t v70 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
                  if (mlir::Type::isSignedInteger((mlir::Type *)&v70, 32)) {
                    return 1;
                  }
                  int64x2_t v61 = "'mps.depthwise_conv_3d' op attribute 'channelAxis' failed to satisfy constraint: 32-bit signed i"
                        "nteger attribute";
                }
                else
                {
                  int64x2_t v61 = "'mps.depthwise_conv_3d' op attribute 'explicit_padding' failed to satisfy constraint: ui64 eleme"
                        "nts attribute of shape {6}";
                }
              }
              else
              {
                int64x2_t v61 = "'mps.depthwise_conv_3d' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements "
                      "attribute of shape {3}";
              }
              int64x2_t v66 = v61;
              __int16 v68 = 259;
              mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
              uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
              mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v70);
              return v25;
            }
          }
          int64x2_t v66 = "'mps.depthwise_conv_3d' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {3}";
          __int16 v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
          if (v70) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
          }
          if (v78)
          {
            unsigned int v46 = (void **)__p;
            if (__p)
            {
              BOOL v47 = v77;
              int64_t v48 = __p;
              if (v77 != __p)
              {
                do
                  BOOL v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                int64_t v48 = __p;
              }
              uint64_t v77 = v46;
              operator delete(v48);
            }
            uint64_t v29 = v74;
            if (!v74) {
              goto LABEL_81;
            }
            int v49 = v75;
            uint64_t v31 = v74;
            if (v75 == v74)
            {
LABEL_80:
              char v75 = v29;
              operator delete(v31);
LABEL_81:
              if (v72 != v73) {
                free(v72);
              }
              return v25;
            }
            do
            {
              int v51 = (void *)*--v49;
              uint64_t v50 = v51;
              void *v49 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v49 != v29);
LABEL_79:
            uint64_t v31 = v74;
            goto LABEL_80;
          }
        }
        else
        {
          int64x2_t v66 = "'mps.depthwise_conv_3d' op requires attribute 'strides'";
          __int16 v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
          if (v70) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
          }
          if (v78)
          {
            int v52 = (void **)__p;
            if (__p)
            {
              uint64_t v53 = v77;
              int v54 = __p;
              if (v77 != __p)
              {
                do
                  uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                int v54 = __p;
              }
              uint64_t v77 = v52;
              operator delete(v54);
            }
            int64_t v55 = v74;
            if (v74)
            {
              uint64_t v56 = v75;
              int64_t v57 = v74;
              if (v75 != v74)
              {
                do
                {
                  unint64_t v59 = (void *)*--v56;
                  uint64_t v58 = v59;
                  *uint64_t v56 = 0;
                  if (v59) {
                    operator delete[](v58);
                  }
                }
                while (v56 != v55);
                int64_t v57 = v74;
              }
              char v75 = v55;
              operator delete(v57);
            }
            if (v72 != v73) {
              free(v72);
            }
          }
        }
      }
      else
      {
        int64x2_t v66 = "'mps.depthwise_conv_3d' op requires attribute 'padding_style'";
        __int16 v68 = 259;
        mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
        uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
        if (v70) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
        }
        if (v78)
        {
          uint64_t v40 = (void **)__p;
          if (__p)
          {
            uint64_t v41 = v77;
            uint64_t v42 = __p;
            if (v77 != __p)
            {
              do
                uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              uint64_t v42 = __p;
            }
            uint64_t v77 = v40;
            operator delete(v42);
          }
          uint64_t v29 = v74;
          if (!v74) {
            goto LABEL_81;
          }
          BOOL v43 = v75;
          uint64_t v31 = v74;
          if (v75 == v74) {
            goto LABEL_80;
          }
          do
          {
            BOOL v45 = (void *)*--v43;
            unsigned int v44 = v45;
            *BOOL v43 = 0;
            if (v45) {
              operator delete[](v44);
            }
          }
          while (v43 != v29);
          goto LABEL_79;
        }
      }
    }
    else
    {
      int64x2_t v66 = "'mps.depthwise_conv_3d' op requires attribute 'explicit_padding'";
      __int16 v68 = 259;
      mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
      if (v70) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
      }
      if (v78)
      {
        int64_t v34 = (void **)__p;
        if (__p)
        {
          int64_t v35 = v77;
          unsigned int v36 = __p;
          if (v77 != __p)
          {
            do
              int64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            unsigned int v36 = __p;
          }
          uint64_t v77 = v34;
          operator delete(v36);
        }
        uint64_t v29 = v74;
        if (!v74) {
          goto LABEL_81;
        }
        BOOL v37 = v75;
        uint64_t v31 = v74;
        if (v75 == v74) {
          goto LABEL_80;
        }
        do
        {
          unsigned int v39 = (void *)*--v37;
          uint64_t v38 = v39;
          void *v37 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v37 != v29);
        goto LABEL_79;
      }
    }
  }
  else
  {
    int64x2_t v66 = "'mps.depthwise_conv_3d' op requires attribute 'dilation_rates'";
    __int16 v68 = 259;
    mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
    if (v70) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
    }
    if (v78)
    {
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        uint64_t v27 = v77;
        uint64_t v28 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          uint64_t v28 = __p;
        }
        uint64_t v77 = v26;
        operator delete(v28);
      }
      uint64_t v29 = v74;
      if (!v74) {
        goto LABEL_81;
      }
      uint64_t v30 = v75;
      uint64_t v31 = v74;
      if (v75 == v74) {
        goto LABEL_80;
      }
      do
      {
        int64_t v33 = (void *)*--v30;
        unint64_t v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v30 != v29);
      goto LABEL_79;
    }
  }
  return v25;
}

uint64_t mlir::mps::DepthwiseConv3DDataGradientOp::verify(mlir::mps::DepthwiseConv3DDataGradientOp *this)
{
  uint64_t v328 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)this;
  unsigned int v3 = *(_DWORD *)(*(void *)this + 44);
  uint64_t v4 = *(void **)(*(void *)this + 72);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[7];
  if (*(_DWORD *)(*(void *)this + 68) == 2) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4[11];
  }
  int64_t v309 = *(uint64_t **)this;
  uint64_t v8 = (void *)(v2 + 80);
  if (!HIBYTE(v3)) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v8[4];
  uint64_t v11 = v8[1];
  uint64_t v10 = v8[2];
  uint64_t v307 = v11;
  uint64_t v308 = v9;
  uint64_t v306 = v10;
  if (v9 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v308) == 3)
  {
    uint64_t v290 = v5;
    uint64_t v293 = v7;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v296, v308, 0);
    uint64_t v1 = v308;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v308);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v303, v1, NumElements);
    while (1)
    {
      BOOL v13 = v296 == v303 && v297 == v304;
      if (v13 && v298 == v305) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v296, (llvm::APInt *)&v301);
      if (v302 > 0x40)
      {
        uint64_t v14 = *(void *)v301;
        if (*(uint64_t *)v301 > 0)
        {
LABEL_21:
          if (v302 < 0x41) {
            goto LABEL_51;
          }
LABEL_49:
          if (v301) {
            operator delete[](v301);
          }
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t)((void)v301 << -(char)v302) >> -(char)v302;
        if (v14 > 0) {
          goto LABEL_21;
        }
      }
      __int16 v316 = 259;
      mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
      if (v302 > 0x40)
      {
        uint64_t v15 = *(void *)v301;
        if (!v317) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v15 = (uint64_t)((void)v301 << -(char)v302) >> -(char)v302;
        if (!v317) {
          goto LABEL_30;
        }
      }
      LODWORD(v310) = 2;
      int64_t v311 = (const char *)v15;
      uint64_t v16 = (char *)v319;
      if (v320 >= v321)
      {
        unint64_t v33 = v320 + 1;
        if (v319 <= &v310 && (char *)v319 + 24 * v320 > (char *)&v310)
        {
          int64_t v36 = (char *)&v310 - (unsigned char *)v319;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v33, 24);
          uint64_t v16 = (char *)v319;
          uint64_t v17 = (char *)v319 + v36;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v33, 24);
          uint64_t v17 = (char *)&v310;
          uint64_t v16 = (char *)v319;
        }
      }
      else
      {
        uint64_t v17 = (char *)&v310;
      }
      uint64_t v18 = &v16[24 * v320];
      long long v19 = *(_OWORD *)v17;
      *((void *)v18 + 2) = *((void *)v17 + 2);
      *(_OWORD *)uint64_t v18 = v19;
      uint64_t v20 = ++v320;
      if (v317)
      {
        LODWORD(v310) = 3;
        int64_t v311 = ", all values should be positive.";
        uint64_t v312 = 32;
        uint64_t v21 = (char *)v319;
        if (v20 >= v321)
        {
          unint64_t v34 = v20 + 1;
          BOOL v35 = (char *)v319 + 24 * v20 > (char *)&v310;
          if (v319 <= &v310 && v35)
          {
            int64_t v37 = (char *)&v310 - (unsigned char *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v34, 24);
            uint64_t v21 = (char *)v319;
            unint64_t v22 = (char *)v319 + v37;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v34, 24);
            unint64_t v22 = (char *)&v310;
            uint64_t v21 = (char *)v319;
          }
        }
        else
        {
          unint64_t v22 = (char *)&v310;
        }
        uint64_t v23 = &v21[24 * v320];
        long long v24 = *(_OWORD *)v22;
        *((void *)v23 + 2) = *((void *)v22 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v320;
      }
LABEL_30:
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
      if (v317) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
      }
      if (v327)
      {
        uint64_t v25 = (void **)__p;
        if (__p)
        {
          uint64_t v26 = v326;
          uint64_t v27 = __p;
          if (v326 != __p)
          {
            do
              uint64_t v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            uint64_t v27 = __p;
          }
          uint64_t v326 = v25;
          operator delete(v27);
        }
        uint64_t v28 = v323;
        if (v323)
        {
          uint64_t v29 = v324;
          uint64_t v30 = v323;
          if (v324 != v323)
          {
            do
            {
              unint64_t v32 = (void *)*--v29;
              uint64_t v31 = v32;
              *uint64_t v29 = 0;
              if (v32) {
                operator delete[](v31);
              }
            }
            while (v29 != v28);
            uint64_t v30 = v323;
          }
          int64_t v324 = v28;
          operator delete(v30);
        }
        if (v319 != v322) {
          free(v319);
        }
      }
      if (v302 >= 0x41) {
        goto LABEL_49;
      }
LABEL_51:
      if (v14 < 1) {
        return v1;
      }
      ++v298;
    }
    uint64_t v7 = v293;
    uint64_t v5 = v290;
    if (!v307) {
      goto LABEL_119;
    }
LABEL_62:
    if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v307) == 3)
    {
      uint64_t v291 = v5;
      uint64_t v294 = v7;
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v296, v307, 0);
      uint64_t v38 = v307;
      uint64_t v39 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v307);
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v303, v38, v39);
      while (1)
      {
        BOOL v40 = v296 == v303 && v297 == v304;
        if (v40 && v298 == v305)
        {
          uint64_t v7 = v294;
          uint64_t v5 = v291;
          break;
        }
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v296, (llvm::APInt *)&v301);
        if (v302 > 0x40)
        {
          uint64_t v41 = *(void *)v301;
          if (*(uint64_t *)v301 > 0)
          {
LABEL_76:
            if (v302 < 0x41) {
              goto LABEL_106;
            }
LABEL_104:
            if (v301) {
              operator delete[](v301);
            }
            goto LABEL_106;
          }
        }
        else
        {
          uint64_t v41 = (uint64_t)((void)v301 << -(char)v302) >> -(char)v302;
          if (v41 > 0) {
            goto LABEL_76;
          }
        }
        __int16 v316 = 259;
        mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
        if (v302 > 0x40)
        {
          uint64_t v42 = *(void *)v301;
          if (!v317) {
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v42 = (uint64_t)((void)v301 << -(char)v302) >> -(char)v302;
          if (!v317) {
            goto LABEL_85;
          }
        }
        LODWORD(v310) = 2;
        int64_t v311 = (const char *)v42;
        BOOL v43 = (char *)v319;
        if (v320 >= v321)
        {
          unint64_t v60 = v320 + 1;
          if (v319 <= &v310 && (char *)v319 + 24 * v320 > (char *)&v310)
          {
            int64_t v63 = (char *)&v310 - (unsigned char *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v60, 24);
            BOOL v43 = (char *)v319;
            unsigned int v44 = (char *)v319 + v63;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v60, 24);
            unsigned int v44 = (char *)&v310;
            BOOL v43 = (char *)v319;
          }
        }
        else
        {
          unsigned int v44 = (char *)&v310;
        }
        BOOL v45 = &v43[24 * v320];
        long long v46 = *(_OWORD *)v44;
        *((void *)v45 + 2) = *((void *)v44 + 2);
        *(_OWORD *)BOOL v45 = v46;
        uint64_t v47 = ++v320;
        if (v317)
        {
          LODWORD(v310) = 3;
          int64_t v311 = ", all values should be positive.";
          uint64_t v312 = 32;
          int64_t v48 = (char *)v319;
          if (v47 >= v321)
          {
            unint64_t v61 = v47 + 1;
            BOOL v62 = (char *)v319 + 24 * v47 > (char *)&v310;
            if (v319 <= &v310 && v62)
            {
              int64_t v64 = (char *)&v310 - (unsigned char *)v319;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v61, 24);
              int64_t v48 = (char *)v319;
              int v49 = (char *)v319 + v64;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v61, 24);
              int v49 = (char *)&v310;
              int64_t v48 = (char *)v319;
            }
          }
          else
          {
            int v49 = (char *)&v310;
          }
          uint64_t v50 = &v48[24 * v320];
          long long v51 = *(_OWORD *)v49;
          *((void *)v50 + 2) = *((void *)v49 + 2);
          *(_OWORD *)uint64_t v50 = v51;
          ++v320;
        }
LABEL_85:
        uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
        if (v317) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
        }
        if (v327)
        {
          int v52 = (void **)__p;
          if (__p)
          {
            uint64_t v53 = v326;
            int v54 = __p;
            if (v326 != __p)
            {
              do
                uint64_t v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
              while (v53 != v52);
              int v54 = __p;
            }
            uint64_t v326 = v52;
            operator delete(v54);
          }
          int64_t v55 = v323;
          if (v323)
          {
            uint64_t v56 = v324;
            int64_t v57 = v323;
            if (v324 != v323)
            {
              do
              {
                unint64_t v59 = (void *)*--v56;
                uint64_t v58 = v59;
                *uint64_t v56 = 0;
                if (v59) {
                  operator delete[](v58);
                }
              }
              while (v56 != v55);
              int64_t v57 = v323;
            }
            int64_t v324 = v55;
            operator delete(v57);
          }
          if (v319 != v322) {
            free(v319);
          }
        }
        if (v302 >= 0x41) {
          goto LABEL_104;
        }
LABEL_106:
        if (v41 < 1) {
          return v1;
        }
        ++v298;
      }
    }
  }
  else if (v307)
  {
    goto LABEL_62;
  }
LABEL_119:
  if (v306 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v306) == 6)
  {
    uint64_t v292 = v5;
    uint64_t v295 = v7;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v296, v306, 0);
    uint64_t v65 = v306;
    uint64_t v66 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v306);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v303, v65, v66);
    while (1)
    {
      BOOL v67 = v296 == v303 && v297 == v304;
      if (v67 && v298 == v305)
      {
        uint64_t v7 = v295;
        uint64_t v5 = v292;
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v296, (llvm::APInt *)&v301);
      if (v302 > 0x40)
      {
        uint64_t v68 = *(void *)v301;
        if ((*(void *)v301 & 0x8000000000000000) == 0)
        {
LABEL_134:
          if (v302 < 0x41) {
            goto LABEL_164;
          }
LABEL_162:
          if (v301) {
            operator delete[](v301);
          }
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v68 = (uint64_t)((void)v301 << -(char)v302) >> -(char)v302;
        if ((v68 & 0x8000000000000000) == 0) {
          goto LABEL_134;
        }
      }
      __int16 v316 = 259;
      mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
      if (v302 > 0x40)
      {
        uint64_t v69 = *(void *)v301;
        if (!v317) {
          goto LABEL_143;
        }
      }
      else
      {
        uint64_t v69 = (uint64_t)((void)v301 << -(char)v302) >> -(char)v302;
        if (!v317) {
          goto LABEL_143;
        }
      }
      LODWORD(v310) = 2;
      int64_t v311 = (const char *)v69;
      uint64_t v70 = (char *)v319;
      if (v320 >= v321)
      {
        unint64_t v87 = v320 + 1;
        if (v319 <= &v310 && (char *)v319 + 24 * v320 > (char *)&v310)
        {
          int64_t v90 = (char *)&v310 - (unsigned char *)v319;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v87, 24);
          uint64_t v70 = (char *)v319;
          int64_t v71 = (char *)v319 + v90;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v87, 24);
          int64_t v71 = (char *)&v310;
          uint64_t v70 = (char *)v319;
        }
      }
      else
      {
        int64_t v71 = (char *)&v310;
      }
      uint64_t v72 = &v70[24 * v320];
      long long v73 = *(_OWORD *)v71;
      *((void *)v72 + 2) = *((void *)v71 + 2);
      *(_OWORD *)uint64_t v72 = v73;
      uint64_t v74 = ++v320;
      if (v317)
      {
        LODWORD(v310) = 3;
        int64_t v311 = ", all values should be non-negative.";
        uint64_t v312 = 36;
        char v75 = (char *)v319;
        if (v74 >= v321)
        {
          unint64_t v88 = v74 + 1;
          BOOL v89 = (char *)v319 + 24 * v74 > (char *)&v310;
          if (v319 <= &v310 && v89)
          {
            int64_t v91 = (char *)&v310 - (unsigned char *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v88, 24);
            char v75 = (char *)v319;
            int64_t v76 = (char *)v319 + v91;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v88, 24);
            int64_t v76 = (char *)&v310;
            char v75 = (char *)v319;
          }
        }
        else
        {
          int64_t v76 = (char *)&v310;
        }
        uint64_t v77 = &v75[24 * v320];
        long long v78 = *(_OWORD *)v76;
        *((void *)v77 + 2) = *((void *)v76 + 2);
        *(_OWORD *)uint64_t v77 = v78;
        ++v320;
      }
LABEL_143:
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
      if (v317) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
      }
      if (v327)
      {
        uint64_t v79 = (void **)__p;
        if (__p)
        {
          uint64_t v80 = v326;
          uint64_t v81 = __p;
          if (v326 != __p)
          {
            do
              uint64_t v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
            while (v80 != v79);
            uint64_t v81 = __p;
          }
          uint64_t v326 = v79;
          operator delete(v81);
        }
        BOOL v82 = v323;
        if (v323)
        {
          uint64_t v83 = v324;
          uint64_t v84 = v323;
          if (v324 != v323)
          {
            do
            {
              uint64_t v86 = (void *)*--v83;
              uint64_t v85 = v86;
              *uint64_t v83 = 0;
              if (v86) {
                operator delete[](v85);
              }
            }
            while (v83 != v82);
            uint64_t v84 = v323;
          }
          int64_t v324 = v82;
          operator delete(v84);
        }
        if (v319 != v322) {
          free(v319);
        }
      }
      if (v302 >= 0x41) {
        goto LABEL_162;
      }
LABEL_164:
      if (v68 < 0) {
        return v1;
      }
      ++v298;
    }
  }
  int64_t v313 = (void *)v309[2 * (((unint64_t)*((unsigned int *)v309 + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(&v313, (llvm::APInt *)&v317);
  if (v318 > 0x40)
  {
    uint64_t v92 = *(void *)v317;
    operator delete[](v317);
    uint64_t v310 = 0;
    if (!v5)
    {
LABEL_200:
      unint64_t v301 = 0;
      goto LABEL_201;
    }
  }
  else
  {
    uint64_t v92 = (uint64_t)((void)v317 << -(uint64_t)v318) >> -(uint64_t)v318;
    uint64_t v310 = 0;
    if (!v5) {
      goto LABEL_200;
    }
  }
  uint64_t v93 = (void *)(*(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v93) {
    goto LABEL_200;
  }
  uint64_t v94 = *(void **)(*(void *)v93 + 136);
  if (v94 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    uint64_t v93 = 0;
  }
  unint64_t v301 = v93;
  if (v94 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v301);
    uint64_t v96 = (const char *)v95;
    if (v95 <= 3)
    {
      __int16 v316 = 259;
      mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
      if (v317)
      {
        LODWORD(v296) = 2;
        __int16 v297 = v96;
        uint64_t v97 = &v296;
        int64_t v98 = (char *)v319;
        if (v320 >= v321)
        {
          unint64_t v241 = v320 + 1;
          if (v319 <= &v296 && (char *)v319 + 24 * v320 > (char *)&v296)
          {
            int64_t v273 = (char *)&v296 - (unsigned char *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v241, 24);
            int64_t v98 = (char *)v319;
            uint64_t v97 = (const void ***)((char *)v319 + v273);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v241, 24);
            uint64_t v97 = &v296;
            int64_t v98 = (char *)v319;
          }
        }
        unint64_t v99 = &v98[24 * v320];
        long long v100 = *(_OWORD *)v97;
        *((void *)v99 + 2) = v97[2];
        *(_OWORD *)unint64_t v99 = v100;
        uint64_t v101 = ++v320;
        if (v317)
        {
          LODWORD(v296) = 3;
          __int16 v297 = ".";
          uint64_t v298 = 1;
          unint64_t v102 = &v296;
          uint64_t v103 = (char *)v319;
          if (v101 >= v321)
          {
            unint64_t v248 = v101 + 1;
            BOOL v249 = (char *)v319 + 24 * v101 > (char *)&v296;
            if (v319 <= &v296 && v249)
            {
              int64_t v278 = (char *)&v296 - (unsigned char *)v319;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v248, 24);
              uint64_t v103 = (char *)v319;
              unint64_t v102 = (const void ***)((char *)v319 + v278);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v248, 24);
              unint64_t v102 = &v296;
              uint64_t v103 = (char *)v319;
            }
          }
          uint64_t v104 = &v103[24 * v320];
          long long v105 = *(_OWORD *)v102;
          *((void *)v104 + 2) = v102[2];
          *(_OWORD *)uint64_t v104 = v105;
          ++v320;
        }
      }
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
      if (v317) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
      }
      if (!v327) {
        return v1;
      }
      uint64_t v106 = (void **)__p;
      if (__p)
      {
        unint64_t v107 = v326;
        uint64_t v108 = __p;
        if (v326 != __p)
        {
          do
            unint64_t v107 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v107 - 1);
          while (v107 != v106);
          uint64_t v108 = __p;
        }
        uint64_t v326 = v106;
        operator delete(v108);
      }
      unint64_t v109 = v323;
      if (!v323) {
        goto LABEL_341;
      }
      long long v110 = v324;
      uint64_t v111 = v323;
      if (v324 == v323) {
        goto LABEL_340;
      }
      do
      {
        uint64_t v130 = (void *)*--v110;
        BOOL v129 = v130;
        void *v110 = 0;
        if (v130) {
          operator delete[](v129);
        }
      }
      while (v110 != v109);
      goto LABEL_339;
    }
    if ((v92 & 0x80000000) != 0) {
      uint64_t v213 = 0;
    }
    else {
      uint64_t v213 = v95;
    }
    if ((unint64_t)((int)v92 - v213) <= 0xFFFFFFFFFFFFFFFBLL)
    {
      __int16 v316 = 259;
      mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
      if (v317)
      {
        LODWORD(v296) = 2;
        __int16 v297 = (const char *)(int)v92;
        uint64_t v214 = &v296;
        long long v215 = (char *)v319;
        if (v320 >= v321)
        {
          unint64_t v258 = v320 + 1;
          if (v319 <= &v296 && (char *)v319 + 24 * v320 > (char *)&v296)
          {
            int64_t v283 = (char *)&v296 - (unsigned char *)v319;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v258, 24);
            long long v215 = (char *)v319;
            uint64_t v214 = (const void ***)((char *)v319 + v283);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v258, 24);
            uint64_t v214 = &v296;
            long long v215 = (char *)v319;
          }
        }
        uint64_t v216 = &v215[24 * v320];
        long long v217 = *(_OWORD *)v214;
        *((void *)v216 + 2) = v214[2];
        *(_OWORD *)uint64_t v216 = v217;
        uint64_t v218 = ++v320;
        if (v317)
        {
          LODWORD(v296) = 3;
          __int16 v297 = " for input gradient rank ";
          uint64_t v298 = 25;
          uint64_t v219 = &v296;
          long long v220 = (char *)v319;
          if (v218 >= v321)
          {
            unint64_t v263 = v218 + 1;
            BOOL v264 = (char *)v319 + 24 * v218 > (char *)&v296;
            if (v319 <= &v296 && v264)
            {
              int64_t v286 = (char *)&v296 - (unsigned char *)v319;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v263, 24);
              long long v220 = (char *)v319;
              uint64_t v219 = (const void ***)((char *)v319 + v286);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v263, 24);
              uint64_t v219 = &v296;
              long long v220 = (char *)v319;
            }
          }
          uint64_t v221 = &v220[24 * v320];
          long long v222 = *(_OWORD *)v219;
          *((void *)v221 + 2) = v219[2];
          *(_OWORD *)uint64_t v221 = v222;
          uint64_t v223 = ++v320;
          if (v317)
          {
            LODWORD(v296) = 2;
            __int16 v297 = v96;
            uint64_t v224 = &v296;
            long long v225 = (char *)v319;
            if (v223 >= v321)
            {
              unint64_t v267 = v223 + 1;
              BOOL v268 = (char *)v319 + 24 * v223 > (char *)&v296;
              if (v319 <= &v296 && v268)
              {
                int64_t v288 = (char *)&v296 - (unsigned char *)v319;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v267, 24);
                long long v225 = (char *)v319;
                uint64_t v224 = (const void ***)((char *)v319 + v288);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v267, 24);
                uint64_t v224 = &v296;
                long long v225 = (char *)v319;
              }
            }
            uint64_t v226 = &v225[24 * v320];
            long long v227 = *(_OWORD *)v224;
            *((void *)v226 + 2) = v224[2];
            *(_OWORD *)uint64_t v226 = v227;
            uint64_t v228 = ++v320;
            if (v317)
            {
              LODWORD(v296) = 3;
              __int16 v297 = ".";
              uint64_t v298 = 1;
              uint64_t v229 = &v296;
              long long v230 = (char *)v319;
              if (v228 >= v321)
              {
                unint64_t v269 = v228 + 1;
                BOOL v270 = (char *)v319 + 24 * v228 > (char *)&v296;
                if (v319 <= &v296 && v270)
                {
                  int64_t v289 = (char *)&v296 - (unsigned char *)v319;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v269, 24);
                  long long v230 = (char *)v319;
                  uint64_t v229 = (const void ***)((char *)v319 + v289);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v269, 24);
                  uint64_t v229 = &v296;
                  long long v230 = (char *)v319;
                }
              }
              uint64_t v231 = &v230[24 * v320];
              long long v232 = *(_OWORD *)v229;
              *((void *)v231 + 2) = v229[2];
              *(_OWORD *)uint64_t v231 = v232;
              ++v320;
            }
          }
        }
      }
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
      if (v317) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
      }
      if (!v327) {
        return v1;
      }
      long long v233 = (void **)__p;
      if (__p)
      {
        uint64_t v234 = v326;
        uint64_t v235 = __p;
        if (v326 != __p)
        {
          do
            uint64_t v234 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v234 - 1);
          while (v234 != v233);
          uint64_t v235 = __p;
        }
        uint64_t v326 = v233;
        operator delete(v235);
      }
      unint64_t v109 = v323;
      if (!v323) {
        goto LABEL_341;
      }
      unint64_t v236 = v324;
      uint64_t v111 = v323;
      if (v324 == v323) {
        goto LABEL_340;
      }
      do
      {
        unint64_t v238 = (void *)*--v236;
        unint64_t v237 = v238;
        void *v236 = 0;
        if (v238) {
          operator delete[](v237);
        }
      }
      while (v236 != v109);
LABEL_339:
      uint64_t v111 = v323;
LABEL_340:
      int64_t v324 = v109;
      operator delete(v111);
      goto LABEL_341;
    }
  }
LABEL_201:
  if (!v6 || (unint64_t v112 = *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    unint64_t v300 = 0;
    goto LABEL_227;
  }
  uint64_t v113 = *(void **)(*(void *)v112 + 136);
  if (v113 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    unint64_t v112 = 0;
  }
  unint64_t v300 = v112;
  if (v113 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v300), v114 == 4))
  {
LABEL_227:
    int64_t v313 = v315;
    uint64_t v314 = 0x500000000;
    if (mlir::matchConstantWithIntVector<long long>(v7, (uint64_t)&v313))
    {
      if (v6)
      {
        if (v310)
        {
          uint64_t v131 = v314;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v310);
          if (v132 != v131)
          {
            __int16 v299 = 259;
            mlir::OpState::emitOpError(&v309, &v296, (uint64_t)&v317);
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v310);
            if (v317)
            {
              LODWORD(v303) = 5;
              uint64_t v304 = v167;
              uint64_t v168 = &v303;
              uint64_t v169 = (char *)v319;
              if (v320 >= v321)
              {
                unint64_t v239 = v320 + 1;
                if (v319 <= &v303 && (char *)v319 + 24 * v320 > (char *)&v303)
                {
                  int64_t v271 = (char *)&v303 - (unsigned char *)v319;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v239, 24);
                  uint64_t v169 = (char *)v319;
                  uint64_t v168 = (const void ***)((char *)v319 + v271);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v239, 24);
                  uint64_t v168 = &v303;
                  uint64_t v169 = (char *)v319;
                }
              }
              uint64_t v170 = &v169[24 * v320];
              long long v171 = *(_OWORD *)v168;
              *((void *)v170 + 2) = v168[2];
              *(_OWORD *)uint64_t v170 = v171;
              uint64_t v172 = ++v320;
              if (v317)
              {
                LODWORD(v303) = 3;
                uint64_t v305 = 35;
                long long v173 = &v303;
                long long v174 = (char *)v319;
                if (v172 >= v321)
                {
                  unint64_t v244 = v172 + 1;
                  BOOL v245 = (char *)v319 + 24 * v172 > (char *)&v303;
                  if (v319 <= &v303 && v245)
                  {
                    int64_t v276 = (char *)&v303 - (unsigned char *)v319;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v244, 24);
                    long long v174 = (char *)v319;
                    long long v173 = (const void ***)((char *)v319 + v276);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v244, 24);
                    long long v173 = &v303;
                    long long v174 = (char *)v319;
                  }
                }
                uint64_t v175 = &v174[24 * v320];
                long long v176 = *(_OWORD *)v173;
                *((void *)v175 + 2) = v173[2];
                *(_OWORD *)uint64_t v175 = v176;
                uint64_t v177 = ++v320;
                if (v317)
                {
                  LODWORD(v303) = 5;
                  uint64_t v304 = (const char *)v314;
                  uint64_t v178 = &v303;
                  unint64_t v179 = (char *)v319;
                  if (v177 >= v321)
                  {
                    unint64_t v254 = v177 + 1;
                    BOOL v255 = (char *)v319 + 24 * v177 > (char *)&v303;
                    if (v319 <= &v303 && v255)
                    {
                      int64_t v281 = (char *)&v303 - (unsigned char *)v319;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v254, 24);
                      unint64_t v179 = (char *)v319;
                      uint64_t v178 = (const void ***)((char *)v319 + v281);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v254, 24);
                      uint64_t v178 = &v303;
                      unint64_t v179 = (char *)v319;
                    }
                  }
                  uint64_t v180 = &v179[24 * v320];
                  long long v181 = *(_OWORD *)v178;
                  *((void *)v180 + 2) = v178[2];
                  *(_OWORD *)uint64_t v180 = v181;
                  uint64_t v182 = ++v320;
                  if (v317)
                  {
                    LODWORD(v303) = 3;
                    uint64_t v304 = " values.";
                    uint64_t v305 = 8;
                    uint64_t v183 = &v303;
                    long long v184 = (char *)v319;
                    if (v182 >= v321)
                    {
                      unint64_t v261 = v182 + 1;
                      BOOL v262 = (char *)v319 + 24 * v182 > (char *)&v303;
                      if (v319 <= &v303 && v262)
                      {
                        int64_t v285 = (char *)&v303 - (unsigned char *)v319;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v261, 24);
                        long long v184 = (char *)v319;
                        uint64_t v183 = (const void ***)((char *)v319 + v285);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v261, 24);
                        uint64_t v183 = &v303;
                        long long v184 = (char *)v319;
                      }
                    }
                    int64_t v185 = &v184[24 * v320];
                    long long v186 = *(_OWORD *)v183;
                    *((void *)v185 + 2) = v183[2];
                    *(_OWORD *)int64_t v185 = v186;
                    ++v320;
                  }
                }
              }
            }
            uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
            if (v317) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
            }
            if (v327)
            {
              long long v187 = (void **)__p;
              if (__p)
              {
                long long v188 = v326;
                int64_t v189 = __p;
                if (v326 != __p)
                {
                  do
                    long long v188 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v188 - 1);
                  while (v188 != v187);
                  int64_t v189 = __p;
                }
                uint64_t v326 = v187;
                operator delete(v189);
              }
              unint64_t v158 = v323;
              if (!v323) {
                goto LABEL_337;
              }
              uint64_t v190 = v324;
              unint64_t v160 = v323;
              if (v324 == v323) {
                goto LABEL_336;
              }
              do
              {
                int64_t v192 = (void *)*--v190;
                int64_t v191 = v192;
                void *v190 = 0;
                if (v192) {
                  operator delete[](v191);
                }
              }
              while (v190 != v158);
              goto LABEL_335;
            }
LABEL_261:
            uint64_t v165 = v313;
            if (v313 != v315)
            {
LABEL_262:
              free(v165);
              return v1;
            }
            return v1;
          }
        }
        if (v301)
        {
          uint64_t v133 = v314;
          mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v301);
          if (v134 != v133)
          {
            __int16 v299 = 259;
            mlir::OpState::emitOpError(&v309, &v296, (uint64_t)&v317);
            mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v301);
            if (v317)
            {
              LODWORD(v303) = 5;
              uint64_t v304 = v135;
              uint64_t v136 = &v303;
              uint64_t v137 = (char *)v319;
              if (v320 >= v321)
              {
                unint64_t v242 = v320 + 1;
                if (v319 <= &v303 && (char *)v319 + 24 * v320 > (char *)&v303)
                {
                  int64_t v274 = (char *)&v303 - (unsigned char *)v319;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v242, 24);
                  uint64_t v137 = (char *)v319;
                  uint64_t v136 = (const void ***)((char *)v319 + v274);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v242, 24);
                  uint64_t v136 = &v303;
                  uint64_t v137 = (char *)v319;
                }
              }
              uint64_t v138 = &v137[24 * v320];
              long long v139 = *(_OWORD *)v136;
              *((void *)v138 + 2) = v136[2];
              *(_OWORD *)uint64_t v138 = v139;
              uint64_t v140 = ++v320;
              if (v317)
              {
                LODWORD(v303) = 3;
                uint64_t v305 = 38;
                uint64_t v141 = &v303;
                uint64_t v142 = (char *)v319;
                if (v140 >= v321)
                {
                  unint64_t v250 = v140 + 1;
                  BOOL v251 = (char *)v319 + 24 * v140 > (char *)&v303;
                  if (v319 <= &v303 && v251)
                  {
                    int64_t v279 = (char *)&v303 - (unsigned char *)v319;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v250, 24);
                    uint64_t v142 = (char *)v319;
                    uint64_t v141 = (const void ***)((char *)v319 + v279);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v250, 24);
                    uint64_t v141 = &v303;
                    uint64_t v142 = (char *)v319;
                  }
                }
                uint64_t v143 = &v142[24 * v320];
                long long v144 = *(_OWORD *)v141;
                *((void *)v143 + 2) = v141[2];
                *(_OWORD *)uint64_t v143 = v144;
                uint64_t v145 = ++v320;
                if (v317)
                {
                  LODWORD(v303) = 5;
                  uint64_t v304 = (const char *)v314;
                  uint64_t v146 = &v303;
                  uint64_t v147 = (char *)v319;
                  if (v145 >= v321)
                  {
                    unint64_t v259 = v145 + 1;
                    BOOL v260 = (char *)v319 + 24 * v145 > (char *)&v303;
                    if (v319 <= &v303 && v260)
                    {
                      int64_t v284 = (char *)&v303 - (unsigned char *)v319;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v259, 24);
                      uint64_t v147 = (char *)v319;
                      uint64_t v146 = (const void ***)((char *)v319 + v284);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v259, 24);
                      uint64_t v146 = &v303;
                      uint64_t v147 = (char *)v319;
                    }
                  }
                  uint64_t v148 = &v147[24 * v320];
                  long long v149 = *(_OWORD *)v146;
                  *((void *)v148 + 2) = v146[2];
                  *(_OWORD *)uint64_t v148 = v149;
                  uint64_t v150 = ++v320;
                  if (v317)
                  {
                    LODWORD(v303) = 3;
                    uint64_t v304 = " values.";
                    uint64_t v305 = 8;
                    uint64_t v151 = &v303;
                    uint64_t v152 = (char *)v319;
                    if (v150 >= v321)
                    {
                      unint64_t v265 = v150 + 1;
                      BOOL v266 = (char *)v319 + 24 * v150 > (char *)&v303;
                      if (v319 <= &v303 && v266)
                      {
                        int64_t v287 = (char *)&v303 - (unsigned char *)v319;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v265, 24);
                        uint64_t v152 = (char *)v319;
                        uint64_t v151 = (const void ***)((char *)v319 + v287);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v265, 24);
                        uint64_t v151 = &v303;
                        uint64_t v152 = (char *)v319;
                      }
                    }
                    uint64_t v153 = &v152[24 * v320];
                    long long v154 = *(_OWORD *)v151;
                    *((void *)v153 + 2) = v151[2];
                    *(_OWORD *)uint64_t v153 = v154;
                    ++v320;
                  }
                }
              }
            }
            uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
            if (v317) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
            }
            if (v327)
            {
              uint64_t v155 = (void **)__p;
              if (__p)
              {
                uint64_t v156 = v326;
                unsigned int v157 = __p;
                if (v326 != __p)
                {
                  do
                    uint64_t v156 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v156 - 1);
                  while (v156 != v155);
                  unsigned int v157 = __p;
                }
                uint64_t v326 = v155;
                operator delete(v157);
              }
              unint64_t v158 = v323;
              if (!v323) {
                goto LABEL_337;
              }
              int v159 = v324;
              unint64_t v160 = v323;
              if (v324 == v323)
              {
LABEL_336:
                int64_t v324 = v158;
                operator delete(v160);
LABEL_337:
                if (v319 != v322) {
                  free(v319);
                }
                goto LABEL_261;
              }
              do
              {
                unint64_t v162 = (void *)*--v159;
                uint64_t v161 = v162;
                *int v159 = 0;
                if (v162) {
                  operator delete[](v161);
                }
              }
              while (v159 != v158);
LABEL_335:
              unint64_t v160 = v323;
              goto LABEL_336;
            }
            goto LABEL_261;
          }
        }
      }
      else if (v314 != 4)
      {
        __int16 v299 = 259;
        mlir::OpState::emitOpError(&v309, &v296, (uint64_t)&v317);
        if (v317)
        {
          LODWORD(v303) = 3;
          uint64_t v305 = 21;
          uint64_t v193 = &v303;
          long long v194 = (char *)v319;
          if (v320 >= v321)
          {
            unint64_t v240 = v320 + 1;
            if (v319 <= &v303 && (char *)v319 + 24 * v320 > (char *)&v303)
            {
              int64_t v272 = (char *)&v303 - (unsigned char *)v319;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v240, 24);
              long long v194 = (char *)v319;
              uint64_t v193 = (const void ***)((char *)v319 + v272);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v240, 24);
              uint64_t v193 = &v303;
              long long v194 = (char *)v319;
            }
          }
          uint64_t v195 = &v194[24 * v320];
          long long v196 = *(_OWORD *)v193;
          *((void *)v195 + 2) = v193[2];
          *(_OWORD *)uint64_t v195 = v196;
          uint64_t v197 = ++v320;
          if (v317)
          {
            LODWORD(v303) = 5;
            uint64_t v304 = (const char *)v314;
            __int16 v198 = &v303;
            uint64_t v199 = (char *)v319;
            if (v197 >= v321)
            {
              unint64_t v246 = v197 + 1;
              BOOL v247 = (char *)v319 + 24 * v197 > (char *)&v303;
              if (v319 <= &v303 && v247)
              {
                int64_t v277 = (char *)&v303 - (unsigned char *)v319;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v246, 24);
                uint64_t v199 = (char *)v319;
                __int16 v198 = (const void ***)((char *)v319 + v277);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v246, 24);
                __int16 v198 = &v303;
                uint64_t v199 = (char *)v319;
              }
            }
            uint64_t v200 = &v199[24 * v320];
            long long v201 = *(_OWORD *)v198;
            *((void *)v200 + 2) = v198[2];
            *(_OWORD *)uint64_t v200 = v201;
            uint64_t v202 = ++v320;
            if (v317)
            {
              LODWORD(v303) = 3;
              uint64_t v304 = " values.";
              uint64_t v305 = 8;
              unint64_t v203 = &v303;
              long long v204 = (char *)v319;
              if (v202 >= v321)
              {
                unint64_t v256 = v202 + 1;
                BOOL v257 = (char *)v319 + 24 * v202 > (char *)&v303;
                if (v319 <= &v303 && v257)
                {
                  int64_t v282 = (char *)&v303 - (unsigned char *)v319;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v256, 24);
                  long long v204 = (char *)v319;
                  unint64_t v203 = (const void ***)((char *)v319 + v282);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v256, 24);
                  unint64_t v203 = &v303;
                  long long v204 = (char *)v319;
                }
              }
              int v205 = &v204[24 * v320];
              long long v206 = *(_OWORD *)v203;
              *((void *)v205 + 2) = v203[2];
              *(_OWORD *)int v205 = v206;
              ++v320;
            }
          }
        }
        uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
        if (v317) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
        }
        if (v327)
        {
          uint64_t v207 = (void **)__p;
          if (__p)
          {
            uint64_t v208 = v326;
            uint64_t v209 = __p;
            if (v326 != __p)
            {
              do
                uint64_t v208 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v208 - 1);
              while (v208 != v207);
              uint64_t v209 = __p;
            }
            uint64_t v326 = v207;
            operator delete(v209);
          }
          unint64_t v158 = v323;
          if (!v323) {
            goto LABEL_337;
          }
          v210 = v324;
          unint64_t v160 = v323;
          if (v324 == v323) {
            goto LABEL_336;
          }
          do
          {
            unsigned int v212 = (void *)*--v210;
            uint64_t v211 = v212;
            void *v210 = 0;
            if (v212) {
              operator delete[](v211);
            }
          }
          while (v210 != v158);
          goto LABEL_335;
        }
        goto LABEL_261;
      }
    }
    uint64_t v1 = 1;
    goto LABEL_261;
  }
  __int16 v316 = 259;
  mlir::OpState::emitOpError(&v309, (const void ***)&v313, (uint64_t)&v317);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v300);
  if (v317)
  {
    LODWORD(v296) = 5;
    __int16 v297 = v115;
    uint64_t v116 = &v296;
    uint64_t v117 = (char *)v319;
    if (v320 >= v321)
    {
      unint64_t v243 = v320 + 1;
      if (v319 <= &v296 && (char *)v319 + 24 * v320 > (char *)&v296)
      {
        int64_t v275 = (char *)&v296 - (unsigned char *)v319;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v243, 24);
        uint64_t v117 = (char *)v319;
        uint64_t v116 = (const void ***)((char *)v319 + v275);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v243, 24);
        uint64_t v116 = &v296;
        uint64_t v117 = (char *)v319;
      }
    }
    uint64_t v118 = &v117[24 * v320];
    long long v119 = *(_OWORD *)v116;
    *((void *)v118 + 2) = v116[2];
    *(_OWORD *)uint64_t v118 = v119;
    uint64_t v120 = ++v320;
    if (v317)
    {
      LODWORD(v296) = 3;
      __int16 v297 = ".";
      uint64_t v298 = 1;
      unint64_t v121 = &v296;
      uint64_t v122 = (char *)v319;
      if (v120 >= v321)
      {
        unint64_t v252 = v120 + 1;
        BOOL v253 = (char *)v319 + 24 * v120 > (char *)&v296;
        if (v319 <= &v296 && v253)
        {
          int64_t v280 = (char *)&v296 - (unsigned char *)v319;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v252, 24);
          uint64_t v122 = (char *)v319;
          unint64_t v121 = (const void ***)((char *)v319 + v280);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v319, v322, v252, 24);
          unint64_t v121 = &v296;
          uint64_t v122 = (char *)v319;
        }
      }
      uint64_t v123 = &v122[24 * v320];
      long long v124 = *(_OWORD *)v121;
      *((void *)v123 + 2) = v121[2];
      *(_OWORD *)uint64_t v123 = v124;
      ++v320;
    }
  }
  uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v317);
  if (v317) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v317);
  }
  if (v327)
  {
    uint64_t v125 = (void **)__p;
    if (__p)
    {
      uint64_t v126 = v326;
      uint64_t v127 = __p;
      if (v326 != __p)
      {
        do
          uint64_t v126 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v126 - 1);
        while (v126 != v125);
        uint64_t v127 = __p;
      }
      uint64_t v326 = v125;
      operator delete(v127);
    }
    unint64_t v109 = v323;
    if (v323)
    {
      uint64_t v128 = v324;
      uint64_t v111 = v323;
      if (v324 == v323) {
        goto LABEL_340;
      }
      do
      {
        BOOL v164 = (void *)*--v128;
        uint64_t v163 = v164;
        void *v128 = 0;
        if (v164) {
          operator delete[](v163);
        }
      }
      while (v128 != v109);
      goto LABEL_339;
    }
LABEL_341:
    uint64_t v165 = v319;
    if (v319 == v322) {
      return v1;
    }
    goto LABEL_262;
  }
  return v1;
}

uint64_t mlir::mps::DepthwiseConv3DDataGradientOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v208[8] = *MEMORY[0x1E4F143B8];
  uint64_t v178 = a4;
  unint64_t v179 = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    uint64_t v18 = *((void *)a7 + 4);
  }
  else
  {
    uint64_t v18 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
  }
  uint64_t v168 = a6;
  v169[0] = 0;
  char v170 = 0;
  long long v171 = v16;
  long long v172 = v17;
  uint64_t v173 = v18;
  uint64_t v174 = a9;
  unint64_t v19 = a5;
  uint64_t v175 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v168);
    if (v170) {
      char v170 = 0;
    }
    mlir::OperationName::OperationName(v169, "mps.depthwise_conv_3d_data_gradient", 35, Context);
    char v170 = 1;
    unint64_t v19 = v179;
  }
  uint64_t v176 = a4;
  unint64_t v177 = a5;
  if (v19 < 2
    || (uint64_t v21 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::DepthwiseConv3DDataGradientOpAdaptor::verify(&v168, v21)))
  {
    uint64_t v32 = mlir::Float32Type::get(this, a2);
LABEL_28:
    uint64_t v42 = mlir::UnrankedTensorType::get(v32);
    goto LABEL_29;
  }
  uint64_t v22 = mlir::ValueRange::dereference_iterator(&v178, 0);
  uint64_t v23 = mlir::ValueRange::dereference_iterator(&v178, 1);
  uint64_t v24 = 0;
  if (v179 == 3) {
    uint64_t v24 = mlir::ValueRange::dereference_iterator(&v178, 2);
  }
  uint64_t v25 = v171;
  uint64_t v160 = v172;
  uint64_t v161 = *((void *)&v171 + 1);
  uint64_t v26 = v173;
  uint64_t v159 = *((void *)&v172 + 1);
  unint64_t v28 = *(void *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  long long v206 = (void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = v206;
  uint64_t v207 = v28;
  mlir::ValueRange::ValueRange(v205, (uint64_t)&v206, 2uLL);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
    uint64_t v30 = v27;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v28 + 8)) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v30 = 0;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v28 + 8))
    {
LABEL_14:
      mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v28 + 8);
      unint64_t v31 = v28;
      if (!v30) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
  }
  unint64_t v31 = 0;
  if (!v30)
  {
LABEL_27:
    uint64_t v32 = v29;
    goto LABEL_28;
  }
LABEL_19:
  unint64_t v33 = *(void **)(*v30 + 136);
  if (v33 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || !v31
    || *(_UNKNOWN **)(*(void *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_27;
  }
  uint64_t v202 = v204;
  uint64_t v203 = 0x500000000;
  if (!v24)
  {
    if (v33 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      uint64_t v47 = v30;
    }
    else {
      uint64_t v47 = 0;
    }
    uint64_t v163 = v47;
    if (*(_UNKNOWN **)(*(void *)v28 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      unint64_t v48 = v28;
    }
    else {
      unint64_t v48 = 0;
    }
    unint64_t v162 = v48;
    uint64_t Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v163);
    int64_t v51 = v50;
    uint64_t v199 = v201;
    uint64_t v200 = 0x500000000;
    long long v196 = v198;
    uint64_t v197 = 0x500000000;
    uint64_t v193 = v195;
    uint64_t v194 = 0x600000000;
    uint64_t v190 = v192;
    uint64_t v191 = 0x300000000;
    long long v187 = v189;
    uint64_t v188 = 0x300000000;
    uint64_t v166 = v161;
    uint64_t v167 = v26;
    uint64_t v164 = v25;
    uint64_t v165 = v160;
    if (v25)
    {
      uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v164);
      unsigned int v53 = v194;
      if (v194 == 6)
      {
        uint64_t v54 = v159;
        goto LABEL_68;
      }
      uint64_t v54 = v159;
      if (v194 > 6
        || HIDWORD(v194) <= 5
        && (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, v195, 6uLL, 8), unsigned int v53 = v194,
                                                                                            v194 == 6))
      {
LABEL_67:
        LODWORD(v194) = 6;
LABEL_68:
        uint64_t v59 = v191;
        if (v191 == 3)
        {
          uint64_t v60 = v188;
          BOOL v61 = v188 > 3;
          if (v188 == 3) {
            goto LABEL_70;
          }
        }
        else
        {
          if (v191 <= 3)
          {
            uint64_t v68 = v191;
            int v69 = v191;
            if (HIDWORD(v191) <= 2)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v192, 3uLL, 8);
              uint64_t v68 = v191;
              int v69 = v191;
            }
            memset_pattern16((char *)v190 + 8 * v68, &unk_1810FE350, 24 - 8 * v59);
            int v67 = v69 - v59 + 3;
          }
          else
          {
            int v67 = 3;
          }
          LODWORD(v191) = v67;
          uint64_t v60 = v188;
          BOOL v61 = v188 > 3;
          if (v188 == 3)
          {
LABEL_70:
            unsigned int v62 = v200;
            BOOL v63 = v200 > 5;
            if (v200 == 5) {
              goto LABEL_71;
            }
            goto LABEL_87;
          }
        }
        if (v61)
        {
          int v70 = 3;
        }
        else
        {
          uint64_t v71 = v60;
          int v72 = v60;
          if (HIDWORD(v188) <= 2)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, 3uLL, 8);
            uint64_t v71 = v188;
            int v72 = v188;
          }
          memset_pattern16((char *)v187 + 8 * v71, &unk_1810FE350, 24 - 8 * v60);
          int v70 = v72 - v60 + 3;
        }
        LODWORD(v188) = v70;
        unsigned int v62 = v200;
        BOOL v63 = v200 > 5;
        if (v200 == 5)
        {
LABEL_71:
          unsigned int v64 = v197;
          BOOL v65 = v197 > 5;
          if (v197 == 5) {
            goto LABEL_72;
          }
          goto LABEL_92;
        }
LABEL_87:
        if (!v63)
        {
          if (HIDWORD(v200) > 4
            || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v201, 5uLL, 8),
                unsigned int v62 = v200,
                v200 != 5))
          {
            bzero((char *)v199 + 8 * v62, 40 - 8 * v62);
          }
        }
        LODWORD(v200) = 5;
        unsigned int v64 = v197;
        BOOL v65 = v197 > 5;
        if (v197 == 5)
        {
LABEL_72:
          int64_t v66 = v51 - 4;
          if (v51 < 4)
          {
LABEL_132:
            if (v167 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v167) == 3)
            {
              LODWORD(v191) = 0;
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v206, v167, 0);
              uint64_t v98 = v167;
              uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v167);
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v180, v98, NumElements);
              while (1)
              {
                BOOL v100 = v206 == v180 && v207 == v181;
                if (v100 && v208[0] == v182[0]) {
                  break;
                }
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v206, (llvm::APInt *)&__p);
                if (v184 > 0x40) {
                  uint64_t v101 = *(void *)__p;
                }
                else {
                  uint64_t v101 = (uint64_t)((void)__p << -(uint64_t)v184) >> -(uint64_t)v184;
                }
                uint64_t v102 = v191;
                if (v191 >= (unint64_t)HIDWORD(v191))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v190, v192, v191 + 1, 8);
                  uint64_t v102 = v191;
                }
                *((void *)v190 + v102) = v101;
                LODWORD(v191) = v191 + 1;
                if (v184 >= 0x41 && __p) {
                  operator delete[](__p);
                }
                ++v208[0];
              }
            }
            if (v161 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v166) == 3)
            {
              LODWORD(v188) = 0;
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v206, v166, 0);
              uint64_t v103 = v166;
              uint64_t v104 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v166);
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v180, v103, v104);
              while (1)
              {
                BOOL v105 = v206 == v180 && v207 == v181;
                if (v105 && v208[0] == v182[0]) {
                  break;
                }
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v206, (llvm::APInt *)&__p);
                if (v184 > 0x40) {
                  uint64_t v106 = *(void *)__p;
                }
                else {
                  uint64_t v106 = (uint64_t)((void)__p << -(uint64_t)v184) >> -(uint64_t)v184;
                }
                uint64_t v107 = v188;
                if (v188 >= (unint64_t)HIDWORD(v188))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v189, v188 + 1, 8);
                  uint64_t v107 = v188;
                }
                *((void *)v187 + v107) = v106;
                LODWORD(v188) = v188 + 1;
                if (v184 >= 0x41 && __p) {
                  operator delete[](__p);
                }
                ++v208[0];
              }
            }
            if (v160 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v165) == 6)
            {
              LODWORD(v194) = 0;
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v206, v165, 0);
              uint64_t v108 = v165;
              uint64_t v109 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v165);
              mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v180, v108, v109);
              while (1)
              {
                BOOL v110 = v206 == v180 && v207 == v181;
                if (v110 && v208[0] == v182[0]) {
                  break;
                }
                mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v206, (llvm::APInt *)&__p);
                if (v184 > 0x40) {
                  uint64_t v111 = *(void *)__p;
                }
                else {
                  uint64_t v111 = (uint64_t)((void)__p << -(uint64_t)v184) >> -(uint64_t)v184;
                }
                uint64_t v112 = v194;
                if (v194 >= (unint64_t)HIDWORD(v194))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v193, v195, v194 + 1, 8);
                  uint64_t v112 = v194;
                }
                *((void *)v193 + v112) = v111;
                LODWORD(v194) = v194 + 1;
                if (v184 >= 0x41 && __p) {
                  operator delete[](__p);
                }
                ++v208[0];
              }
            }
            if (v54) {
              int v113 = *(_DWORD *)(v54 + 8);
            }
            else {
              int v113 = 2;
            }
            uint64_t v114 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v162);
            __p = &v185;
            long long v185 = xmmword_181119FA8;
            long long v186 = unk_181119FB8;
            uint64_t v184 = 0x400000004;
            if (Int >= 0) {
              int64_t v116 = v51;
            }
            else {
              int64_t v116 = 0;
            }
            if (v115 == 4)
            {
              unint64_t v117 = Int - v116 + 4;
              if (v117 <= 3)
              {
                *(void *)&long long v185 = *(void *)(v114 + 8 * v117);
                *((void *)&v185 + 1) = *(void *)(v114 + 8 * (v117 == 0));
                uint64_t v118 = 8;
                if (v117 <= 1) {
                  uint64_t v118 = 16;
                }
                *(void *)&long long v186 = *(void *)(v114 + v118);
                BOOL v61 = v117 > 2;
                uint64_t v119 = 24;
                if (v61) {
                  uint64_t v119 = 16;
                }
                *((void *)&v186 + 1) = *(void *)(v114 + v119);
              }
            }
            uint64_t v180 = v182;
            uint64_t v181 = 0x500000000;
            unint64_t v120 = v200;
            long long v206 = v208;
            uint64_t v207 = 0x800000000;
            if (v200)
            {
              if (v200 < 9)
              {
                uint64_t v121 = 0;
                uint64_t v122 = v208;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v208, v200, 8);
                uint64_t v121 = v207;
                uint64_t v122 = v206;
              }
              if (v120 != v121) {
                bzero(&v122[v121], 8 * (v120 - v121));
              }
              LODWORD(v207) = v120;
              if (v120 >= 4)
              {
                unint64_t v123 = v120 - 3;
                long long v124 = v199;
                unint64_t v125 = v120 - 4;
                if (v120 != 4)
                {
                  unint64_t v126 = 0;
                  if (v125 < 4) {
                    goto LABEL_212;
                  }
                  if ((unint64_t)((char *)v122 - (unsigned char *)v199) < 0x20) {
                    goto LABEL_212;
                  }
                  unint64_t v126 = v125 & 0xFFFFFFFFFFFFFFFCLL;
                  uint64_t v127 = (long long *)((char *)v199 + 16);
                  uint64_t v128 = v122 + 2;
                  unint64_t v129 = v125 & 0xFFFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v130 = *v127;
                    *(v128 - 1) = *(v127 - 1);
                    _OWORD *v128 = v130;
                    v127 += 2;
                    v128 += 2;
                    v129 -= 4;
                  }
                  while (v129);
                  if (v125 != v126)
                  {
LABEL_212:
                    uint64_t v131 = v120 - v126 - 4;
                    uint64_t v132 = v126;
                    uint64_t v133 = &v122[v126];
                    uint64_t v134 = &v124[v132];
                    do
                    {
                      uint64_t v135 = *v134++;
                      *v133++ = v135;
                      --v131;
                    }
                    while (v131);
                  }
                }
                uint64_t v136 = __p;
                v122[v125] = *(void *)__p;
                uint64_t v137 = v190;
                uint64_t v138 = v187;
                long long v139 = v193;
                uint64_t v140 = v124[v123];
                uint64_t v141 = 0x8000000000000000;
                uint64_t v142 = 0x8000000000000000;
                if (v140 != 0x8000000000000000)
                {
                  uint64_t v143 = v136[1];
                  uint64_t v144 = *(void *)v190;
                  uint64_t v145 = *(void *)v187 * (v143 - 1) + 1;
                  switch(v113)
                  {
                    case 0:
                      uint64_t v142 = 0x8000000000000000;
                      if (v143 != 0x8000000000000000)
                      {
                        uint64_t v140 = v145 + v144 * (v140 - 1) - (*(void *)v193 + *((void *)v193 + 1));
                        goto LABEL_222;
                      }
                      break;
                    case 1:
                      uint64_t v140 = v145 + v144 * (v140 - 1);
                      if (v143 == 0x8000000000000000) {
                        uint64_t v140 = 0x8000000000000000;
                      }
                      goto LABEL_221;
                    case 2:
                    case 4:
                      v140 *= v144;
                      goto LABEL_221;
                    default:
LABEL_221:
                      uint64_t v142 = v140;
                      if (v143 != 0x8000000000000000) {
LABEL_222:
                      }
                        uint64_t v142 = v140 & ~(v140 >> 63);
                      break;
                  }
                }
                v122[v123] = v142;
                uint64_t v146 = v124[v120 - 2];
                if (v146 != 0x8000000000000000)
                {
                  uint64_t v147 = v136[2];
                  uint64_t v148 = v137[1];
                  uint64_t v149 = v138[1] * (v147 - 1) + 1;
                  switch(v113)
                  {
                    case 0:
                      uint64_t v141 = 0x8000000000000000;
                      if (v147 != 0x8000000000000000)
                      {
                        uint64_t v146 = v149 + v148 * (v146 - 1) - (v139[2] + v139[3]);
                        goto LABEL_232;
                      }
                      break;
                    case 1:
                      if (v147 == 0x8000000000000000) {
                        uint64_t v146 = 0x8000000000000000;
                      }
                      else {
                        uint64_t v146 = v149 + v148 * (v146 - 1);
                      }
                      goto LABEL_231;
                    case 2:
                    case 4:
                      v146 *= v148;
                      goto LABEL_231;
                    default:
LABEL_231:
                      uint64_t v141 = v146;
                      if (v147 != 0x8000000000000000) {
LABEL_232:
                      }
                        uint64_t v141 = v146 & ~(v146 >> 63);
                      break;
                  }
                }
                v122[v120 - 2] = v141;
                uint64_t v150 = v124[v120 - 1];
                uint64_t v151 = 0x8000000000000000;
                if (v150 != 0x8000000000000000)
                {
                  uint64_t v152 = v136[3];
                  uint64_t v153 = v137[2];
                  uint64_t v154 = v138[2] * (v152 - 1) + 1;
                  switch(v113)
                  {
                    case 0:
                      uint64_t v151 = 0x8000000000000000;
                      if (v152 != 0x8000000000000000)
                      {
                        uint64_t v150 = v154 + v153 * (v150 - 1) - (v139[4] + v139[5]);
                        goto LABEL_241;
                      }
                      break;
                    case 1:
                      uint64_t v150 = v154 + v153 * (v150 - 1);
                      if (v152 == 0x8000000000000000) {
                        uint64_t v150 = 0x8000000000000000;
                      }
                      goto LABEL_240;
                    case 2:
                    case 4:
                      v150 *= v153;
                      goto LABEL_240;
                    default:
LABEL_240:
                      uint64_t v151 = v150;
                      if (v152 != 0x8000000000000000) {
LABEL_241:
                      }
                        uint64_t v151 = v150 & ~(v150 >> 63);
                      break;
                  }
                }
                v122[v120 - 1] = v151;
                unsigned int v155 = v181;
                if (v181 != v120)
                {
                  if (v181 <= v120)
                  {
                    if (HIDWORD(v181) < v120)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v180, v182, v120, 8);
                      unsigned int v155 = v181;
                    }
                    if (v155 != v120) {
                      bzero((char *)v180 + 8 * v155, 8 * (v120 - v155));
                    }
                  }
                  LODWORD(v181) = v120;
                  uint64_t v122 = v206;
                }
                uint64_t v156 = (uint64_t *)v196;
                unsigned int v157 = v180;
                do
                {
                  uint64_t v158 = *v156++;
                  *v157++ = v122[v158];
                  --v120;
                }
                while (v120);
              }
              if (v122 != v208) {
                free(v122);
              }
            }
            uint64_t v42 = mlir::RankedTensorType::get((uint64_t)v180, v181, v29, 0);
            if (v180 != v182) {
              free(v180);
            }
            if (__p != &v185) {
              free(__p);
            }
            if (v187 != v189) {
              free(v187);
            }
            if (v190 != v192) {
              free(v190);
            }
            if (v193 != v195) {
              free(v193);
            }
            if (v196 != v198) {
              free(v196);
            }
            if (v199 != v201) {
              free(v199);
            }
            uint64_t v55 = 1;
            goto LABEL_268;
          }
LABEL_97:
          int64_t v73 = (v51 & (Int >> 63)) + Int;
          if (v73 >= v51 || v73 < v66) {
            int64_t v75 = v66;
          }
          else {
            int64_t v75 = (v51 & (Int >> 63)) + Int;
          }
          if (v51 != 5)
          {
            if ((unint64_t)v51 >= 5)
            {
              if (v51 <= (unint64_t)HIDWORD(v197))
              {
                uint64_t v76 = 5;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, v198, v51, 8);
                uint64_t v76 = v197;
              }
              if (v51 != v76) {
                bzero((char *)v196 + 8 * v76, 8 * (v51 - v76));
              }
            }
            LODWORD(v197) = v51;
          }
          uint64_t v77 = v196;
          int64_t v78 = v51 & 0xFFFFFFFFFFFFFFFCLL;
          int64x2_t v79 = vdupq_n_s64(v75);
          int64x2_t v80 = vdupq_n_s64(v66);
          int64x2_t v81 = (int64x2_t)xmmword_1810FE2E0;
          BOOL v82 = (int8x16_t *)((char *)v196 + 16);
          int64x2_t v83 = vdupq_n_s64(2uLL);
          int64x2_t v84 = vdupq_n_s64(1uLL);
          int64x2_t v85 = vdupq_n_s64(3uLL);
          int64x2_t v86 = vdupq_n_s64(4uLL);
          unint64_t v87 = v51 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            int64x2_t v88 = vaddq_s64(v81, v83);
            v82[-1] = vbslq_s8(vorrq_s8((int8x16_t)vcgtq_s64(v81, v79), (int8x16_t)vcgtq_s64(v80, v81)), (int8x16_t)v81, vbslq_s8((int8x16_t)vcgtq_s64(v79, v81), (int8x16_t)vaddq_s64(v81, v84), (int8x16_t)v80));
            int8x16_t *v82 = vbslq_s8(vorrq_s8((int8x16_t)vcgtq_s64(v88, v79), (int8x16_t)vcgtq_s64(v80, v88)), (int8x16_t)v88, vbslq_s8((int8x16_t)vcgtq_s64(v79, v88), (int8x16_t)vaddq_s64(v81, v85), (int8x16_t)v80));
            int64x2_t v81 = vaddq_s64(v81, v86);
            v82 += 2;
            v87 -= 4;
          }
          while (v87);
          for (; v51 != v78; ++v78)
          {
            if (v78 < v75) {
              int64_t v89 = v78 + 1;
            }
            else {
              int64_t v89 = v66;
            }
            if (v78 < v66 || v78 > v75) {
              int64_t v89 = v78;
            }
            v77[v78] = v89;
          }
          uint64_t v91 = v200;
          if (v51 != v200)
          {
            if (v51 >= (unint64_t)v200)
            {
              if (v51 > (unint64_t)HIDWORD(v200))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, v201, v51, 8);
                uint64_t v91 = v200;
              }
              if (v51 != v91) {
                bzero((char *)v199 + 8 * v91, 8 * (v51 - v91));
              }
            }
            LODWORD(v200) = v51;
          }
          uint64_t v92 = (uint64_t *)v196;
          uint64_t v93 = v199;
          int64_t v94 = v51;
          do
          {
            uint64_t v96 = *Value++;
            uint64_t v95 = v96;
            uint64_t v97 = *v92++;
            v93[v97] = v95;
            --v94;
          }
          while (v94);
          goto LABEL_132;
        }
LABEL_92:
        if (!v65)
        {
          if (HIDWORD(v197) > 4
            || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, v198, 5uLL, 8),
                unsigned int v64 = v197,
                v197 != 5))
          {
            bzero((char *)v196 + 8 * v64, 40 - 8 * v64);
          }
        }
        LODWORD(v197) = 5;
        int64_t v66 = v51 - 4;
        if (v51 < 4) {
          goto LABEL_132;
        }
        goto LABEL_97;
      }
    }
    else
    {
      unsigned int v53 = 0;
      uint64_t Int = -4;
      uint64_t v54 = v159;
    }
    bzero((char *)v193 + 8 * v53, 48 - 8 * v53);
    goto LABEL_67;
  }
  if (!mlir::matchConstantWithIntVector<long long>(v24, (uint64_t)&v202))
  {
    uint64_t v42 = mlir::UnrankedTensorType::get(v29);
    uint64_t v55 = 1;
    goto LABEL_268;
  }
  uint64_t v34 = v203;
  if (!v203) {
    goto LABEL_55;
  }
  BOOL v35 = (char *)v202;
  unint64_t v36 = (v203 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  int64_t v37 = (char *)v202;
  if (v36 < 3) {
    goto LABEL_57;
  }
  unint64_t v38 = v36 + 1;
  int64_t v37 = (char *)v202 + 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v39 = (int64x2_t *)((char *)v202 + 16);
  v40.i64[0] = -1;
  v40.i64[1] = -1;
  uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    int32x2_t v45 = vmovn_s64(vceqq_s64(v39[-1], v40));
    if (v45.i8[0])
    {
      v39[-1].i64[0] = 0x8000000000000000;
      if ((v45.i8[4] & 1) == 0)
      {
LABEL_35:
        int32x2_t v46 = vmovn_s64(vceqq_s64(*v39, v40));
        if (v46.i8[0]) {
          goto LABEL_40;
        }
        goto LABEL_36;
      }
    }
    else if ((v45.i8[4] & 1) == 0)
    {
      goto LABEL_35;
    }
    v39[-1].i64[1] = 0x8000000000000000;
    int32x2_t v46 = vmovn_s64(vceqq_s64(*v39, v40));
    if (v46.i8[0])
    {
LABEL_40:
      v39->i64[0] = 0x8000000000000000;
      if ((v46.i8[4] & 1) == 0) {
        goto LABEL_32;
      }
      goto LABEL_41;
    }
LABEL_36:
    if ((v46.i8[4] & 1) == 0) {
      goto LABEL_32;
    }
LABEL_41:
    v39->i64[1] = 0x8000000000000000;
LABEL_32:
    v39 += 2;
    v41 -= 4;
  }
  while (v41);
  if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_55;
  }
LABEL_57:
  uint64_t v58 = &v35[8 * v34];
  do
  {
    if (*(void *)v37 == -1) {
      *(void *)int64_t v37 = 0x8000000000000000;
    }
    v37 += 8;
  }
  while (v37 != v58);
LABEL_55:
  long long v206 = v27;
  uint64_t v56 = (void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v206);
  long long v206 = v208;
  uint64_t v207 = 0x500000000;
  {
    uint64_t v42 = mlir::RankedTensorType::get((uint64_t)v206, v207, v29, 0);
    uint64_t v55 = 1;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v55 = 0;
  }
  if (v206 != v208) {
    free(v206);
  }
LABEL_268:
  if (v202 != v204) {
    free(v202);
  }
  if (!v55) {
    return 0;
  }
LABEL_29:
  unsigned int v43 = *(_DWORD *)(a11 + 8);
  if (v43 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v43 + 1, 8);
    unsigned int v43 = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v43) = v42;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DepthwiseConv3DDataGradientOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = (const char *)a1[4];
  if (v3)
  {
    uint64_t v4 = (const char *)a1[5];
    if (v4)
    {
      if (a1[6])
      {
        uint64_t v5 = (const char *)a1[7];
        if (v5)
        {
          uint64_t v6 = (const char *)a1[3];
          uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
          int64_t v66 = v5;
          uint64_t v67 = v7;
          Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
          uint64_t v9 = Type;
          if (Type) {
            Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
          }
          uint64_t v70 = (uint64_t)v9;
          uint64_t v71 = Type;
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
          uint64_t v69 = 3;
          if (v11 == 1 && *ArgAttrsAttr == v69)
          {
            unsigned int v62 = v5;
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62);
            uint64_t v64 = v12;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
            {
              uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
              int64_t v66 = v3;
              uint64_t v67 = v13;
              uint64_t v14 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
              uint64_t v15 = v14;
              if (v14) {
                uint64_t v14 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8);
              }
              uint64_t v70 = (uint64_t)v15;
              uint64_t v71 = v14;
              long long v16 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
              uint64_t v69 = 3;
              if (v17 == 1
                && *v16 == v69
                && (unsigned int v62 = v3,
                    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                    uint64_t v64 = v18,
                    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
                    mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
              {
                uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
                int64_t v66 = v4;
                uint64_t v67 = v19;
                uint64_t v20 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
                uint64_t v21 = v20;
                if (v20) {
                  uint64_t v20 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
                }
                uint64_t v70 = (uint64_t)v21;
                uint64_t v71 = v20;
                uint64_t v22 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
                uint64_t v69 = 6;
                if (v23 == 1
                  && *v22 == v69
                  && (unsigned int v62 = v4,
                      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62),
                      uint64_t v64 = v24,
                      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
                      mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
                {
                  if (!v6) {
                    return 1;
                  }
                  int64_t v66 = v6;
                  uint64_t v70 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
                  if (mlir::Type::isSignedInteger((mlir::Type *)&v70, 32)) {
                    return 1;
                  }
                  BOOL v61 = "'mps.depthwise_conv_3d_data_gradient' op attribute 'channelAxis' failed to satisfy constraint: 3"
                        "2-bit signed integer attribute";
                }
                else
                {
                  BOOL v61 = "'mps.depthwise_conv_3d_data_gradient' op attribute 'explicit_padding' failed to satisfy constrai"
                        "nt: ui64 elements attribute of shape {6}";
                }
              }
              else
              {
                BOOL v61 = "'mps.depthwise_conv_3d_data_gradient' op attribute 'dilation_rates' failed to satisfy constraint: "
                      "ui64 elements attribute of shape {3}";
              }
              int64_t v66 = v61;
              __int16 v68 = 259;
              mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
              uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
              mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v70);
              return v25;
            }
          }
          int64_t v66 = "'mps.depthwise_conv_3d_data_gradient' op attribute 'strides' failed to satisfy constraint: ui64 elements"
                " attribute of shape {3}";
          __int16 v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
          if (v70) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
          }
          if (v78)
          {
            int32x2_t v46 = (void **)__p;
            if (__p)
            {
              uint64_t v47 = v77;
              unint64_t v48 = __p;
              if (v77 != __p)
              {
                do
                  uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
                while (v47 != v46);
                unint64_t v48 = __p;
              }
              uint64_t v77 = v46;
              operator delete(v48);
            }
            uint64_t v29 = v74;
            if (!v74) {
              goto LABEL_81;
            }
            int v49 = v75;
            unint64_t v31 = v74;
            if (v75 == v74)
            {
LABEL_80:
              int64_t v75 = v29;
              operator delete(v31);
LABEL_81:
              if (v72 != v73) {
                free(v72);
              }
              return v25;
            }
            do
            {
              int64_t v51 = (void *)*--v49;
              int64_t v50 = v51;
              void *v49 = 0;
              if (v51) {
                operator delete[](v50);
              }
            }
            while (v49 != v29);
LABEL_79:
            unint64_t v31 = v74;
            goto LABEL_80;
          }
        }
        else
        {
          int64_t v66 = "'mps.depthwise_conv_3d_data_gradient' op requires attribute 'strides'";
          __int16 v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
          uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
          if (v70) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
          }
          if (v78)
          {
            int v52 = (void **)__p;
            if (__p)
            {
              unsigned int v53 = v77;
              uint64_t v54 = __p;
              if (v77 != __p)
              {
                do
                  unsigned int v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                uint64_t v54 = __p;
              }
              uint64_t v77 = v52;
              operator delete(v54);
            }
            uint64_t v55 = v74;
            if (v74)
            {
              uint64_t v56 = v75;
              uint64_t v57 = v74;
              if (v75 != v74)
              {
                do
                {
                  uint64_t v59 = (void *)*--v56;
                  uint64_t v58 = v59;
                  *uint64_t v56 = 0;
                  if (v59) {
                    operator delete[](v58);
                  }
                }
                while (v56 != v55);
                uint64_t v57 = v74;
              }
              int64_t v75 = v55;
              operator delete(v57);
            }
            if (v72 != v73) {
              free(v72);
            }
          }
        }
      }
      else
      {
        int64_t v66 = "'mps.depthwise_conv_3d_data_gradient' op requires attribute 'padding_style'";
        __int16 v68 = 259;
        mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
        uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
        if (v70) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
        }
        if (v78)
        {
          int64x2_t v40 = (void **)__p;
          if (__p)
          {
            uint64_t v41 = v77;
            uint64_t v42 = __p;
            if (v77 != __p)
            {
              do
                uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
              while (v41 != v40);
              uint64_t v42 = __p;
            }
            uint64_t v77 = v40;
            operator delete(v42);
          }
          uint64_t v29 = v74;
          if (!v74) {
            goto LABEL_81;
          }
          unsigned int v43 = v75;
          unint64_t v31 = v74;
          if (v75 == v74) {
            goto LABEL_80;
          }
          do
          {
            int32x2_t v45 = (void *)*--v43;
            unsigned int v44 = v45;
            *unsigned int v43 = 0;
            if (v45) {
              operator delete[](v44);
            }
          }
          while (v43 != v29);
          goto LABEL_79;
        }
      }
    }
    else
    {
      int64_t v66 = "'mps.depthwise_conv_3d_data_gradient' op requires attribute 'explicit_padding'";
      __int16 v68 = 259;
      mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
      uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
      if (v70) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
      }
      if (v78)
      {
        uint64_t v34 = (void **)__p;
        if (__p)
        {
          BOOL v35 = v77;
          unint64_t v36 = __p;
          if (v77 != __p)
          {
            do
              BOOL v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
            while (v35 != v34);
            unint64_t v36 = __p;
          }
          uint64_t v77 = v34;
          operator delete(v36);
        }
        uint64_t v29 = v74;
        if (!v74) {
          goto LABEL_81;
        }
        int64_t v37 = v75;
        unint64_t v31 = v74;
        if (v75 == v74) {
          goto LABEL_80;
        }
        do
        {
          uint64_t v39 = (void *)*--v37;
          unint64_t v38 = v39;
          void *v37 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v37 != v29);
        goto LABEL_79;
      }
    }
  }
  else
  {
    int64_t v66 = "'mps.depthwise_conv_3d_data_gradient' op requires attribute 'dilation_rates'";
    __int16 v68 = 259;
    mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&v70);
    uint64_t v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v70);
    if (v70) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v70);
    }
    if (v78)
    {
      uint64_t v26 = (void **)__p;
      if (__p)
      {
        uint64_t v27 = v77;
        unint64_t v28 = __p;
        if (v77 != __p)
        {
          do
            uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          unint64_t v28 = __p;
        }
        uint64_t v77 = v26;
        operator delete(v28);
      }
      uint64_t v29 = v74;
      if (!v74) {
        goto LABEL_81;
      }
      uint64_t v30 = v75;
      unint64_t v31 = v74;
      if (v75 == v74) {
        goto LABEL_80;
      }
      do
      {
        unint64_t v33 = (void *)*--v30;
        uint64_t v32 = v33;
        *uint64_t v30 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v30 != v29);
      goto LABEL_79;
    }
  }
  return v25;
}

uint64_t mlir::mps::DepthwiseConv3DWeightsGradientOp::verify(mlir::mps::DepthwiseConv3DWeightsGradientOp *this)
{
  uint64_t v285 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(*(void *)this + 47);
  unsigned int v3 = *(void **)(*(void *)this + 72);
  uint64_t v4 = v3[7];
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[11];
  BOOL v266 = *(uint64_t **)this;
  uint64_t v7 = v266 + 10;
  if (!v2) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = v7[4];
  uint64_t v10 = v7[1];
  uint64_t v9 = v7[2];
  uint64_t v264 = v10;
  uint64_t v265 = v8;
  uint64_t v263 = v9;
  if (v8 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v265) == 3)
  {
    uint64_t v251 = v4;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v254, v265, 0);
    uint64_t v1 = v265;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v265);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v260, v1, NumElements);
    while (1)
    {
      BOOL v12 = v254 == v260 && v255 == v261;
      if (v12 && v256 == v262) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v254, (llvm::APInt *)&v258);
      if (v259 > 0x40)
      {
        uint64_t v13 = *(void *)v258;
        if (*(uint64_t *)v258 > 0)
        {
LABEL_14:
          if (v259 < 0x41) {
            goto LABEL_48;
          }
LABEL_46:
          if (v258) {
            operator delete[](v258);
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t)((void)v258 << -(char)v259) >> -(char)v259;
        if (v13 > 0) {
          goto LABEL_14;
        }
      }
      __int16 v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v259 > 0x40)
      {
        uint64_t v14 = *(void *)v258;
        if (!v274) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t)((void)v258 << -(char)v259) >> -(char)v259;
        if (!v274) {
          goto LABEL_27;
        }
      }
      LODWORD(v267) = 2;
      BOOL v268 = (const char *)v14;
      uint64_t v15 = (char *)v276;
      if (v277 >= v278)
      {
        unint64_t v32 = v277 + 1;
        if (v276 <= &v267 && (char *)v276 + 24 * v277 > (char *)&v267)
        {
          int64_t v35 = (char *)&v267 - (unsigned char *)v276;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v32, 24);
          uint64_t v15 = (char *)v276;
          long long v16 = (unint64_t *)((char *)v276 + v35);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v32, 24);
          long long v16 = &v267;
          uint64_t v15 = (char *)v276;
        }
      }
      else
      {
        long long v16 = &v267;
      }
      uint64_t v17 = &v15[24 * v277];
      long long v18 = *(_OWORD *)v16;
      *((void *)v17 + 2) = v16[2];
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v277;
      if (v274)
      {
        LODWORD(v267) = 3;
        BOOL v268 = ", all values should be positive.";
        uint64_t v269 = 32;
        uint64_t v20 = (char *)v276;
        if (v19 >= v278)
        {
          unint64_t v33 = v19 + 1;
          BOOL v34 = (char *)v276 + 24 * v19 > (char *)&v267;
          if (v276 <= &v267 && v34)
          {
            int64_t v36 = (char *)&v267 - (unsigned char *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v33, 24);
            uint64_t v20 = (char *)v276;
            uint64_t v21 = (unint64_t *)((char *)v276 + v36);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v33, 24);
            uint64_t v21 = &v267;
            uint64_t v20 = (char *)v276;
          }
        }
        else
        {
          uint64_t v21 = &v267;
        }
        uint64_t v22 = &v20[24 * v277];
        long long v23 = *(_OWORD *)v21;
        *((void *)v22 + 2) = v21[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v277;
      }
LABEL_27:
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      }
      if (v284)
      {
        uint64_t v24 = (void **)__p;
        if (__p)
        {
          uint64_t v25 = v283;
          uint64_t v26 = __p;
          if (v283 != __p)
          {
            do
              uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
            while (v25 != v24);
            uint64_t v26 = __p;
          }
          int64_t v283 = v24;
          operator delete(v26);
        }
        uint64_t v27 = v280;
        if (v280)
        {
          unint64_t v28 = v281;
          uint64_t v29 = v280;
          if (v281 != v280)
          {
            do
            {
              unint64_t v31 = (void *)*--v28;
              uint64_t v30 = v31;
              void *v28 = 0;
              if (v31) {
                operator delete[](v30);
              }
            }
            while (v28 != v27);
            uint64_t v29 = v280;
          }
          int64_t v281 = v27;
          operator delete(v29);
        }
        if (v276 != v279) {
          free(v276);
        }
      }
      if (v259 >= 0x41) {
        goto LABEL_46;
      }
LABEL_48:
      if (v13 < 1) {
        return v1;
      }
      ++v256;
    }
    uint64_t v4 = v251;
    if (!v264) {
      goto LABEL_116;
    }
LABEL_59:
    if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v264) == 3)
    {
      uint64_t v252 = v4;
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v254, v264, 0);
      uint64_t v37 = v264;
      uint64_t v38 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v264);
      mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v260, v37, v38);
      while (1)
      {
        BOOL v39 = v254 == v260 && v255 == v261;
        if (v39 && v256 == v262)
        {
          uint64_t v4 = v252;
          break;
        }
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v254, (llvm::APInt *)&v258);
        if (v259 > 0x40)
        {
          uint64_t v40 = *(void *)v258;
          if (*(uint64_t *)v258 > 0)
          {
LABEL_69:
            if (v259 < 0x41) {
              goto LABEL_103;
            }
LABEL_101:
            if (v258) {
              operator delete[](v258);
            }
            goto LABEL_103;
          }
        }
        else
        {
          uint64_t v40 = (uint64_t)((void)v258 << -(char)v259) >> -(char)v259;
          if (v40 > 0) {
            goto LABEL_69;
          }
        }
        __int16 v273 = 259;
        mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
        if (v259 > 0x40)
        {
          uint64_t v41 = *(void *)v258;
          if (!v274) {
            goto LABEL_82;
          }
        }
        else
        {
          uint64_t v41 = (uint64_t)((void)v258 << -(char)v259) >> -(char)v259;
          if (!v274) {
            goto LABEL_82;
          }
        }
        LODWORD(v267) = 2;
        BOOL v268 = (const char *)v41;
        uint64_t v42 = (char *)v276;
        if (v277 >= v278)
        {
          unint64_t v59 = v277 + 1;
          if (v276 <= &v267 && (char *)v276 + 24 * v277 > (char *)&v267)
          {
            int64_t v62 = (char *)&v267 - (unsigned char *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v59, 24);
            uint64_t v42 = (char *)v276;
            unsigned int v43 = (unint64_t *)((char *)v276 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v59, 24);
            unsigned int v43 = &v267;
            uint64_t v42 = (char *)v276;
          }
        }
        else
        {
          unsigned int v43 = &v267;
        }
        unsigned int v44 = &v42[24 * v277];
        long long v45 = *(_OWORD *)v43;
        *((void *)v44 + 2) = v43[2];
        *(_OWORD *)unsigned int v44 = v45;
        uint64_t v46 = ++v277;
        if (v274)
        {
          LODWORD(v267) = 3;
          BOOL v268 = ", all values should be positive.";
          uint64_t v269 = 32;
          uint64_t v47 = (char *)v276;
          if (v46 >= v278)
          {
            unint64_t v60 = v46 + 1;
            BOOL v61 = (char *)v276 + 24 * v46 > (char *)&v267;
            if (v276 <= &v267 && v61)
            {
              int64_t v63 = (char *)&v267 - (unsigned char *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v60, 24);
              uint64_t v47 = (char *)v276;
              unint64_t v48 = (unint64_t *)((char *)v276 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v60, 24);
              unint64_t v48 = &v267;
              uint64_t v47 = (char *)v276;
            }
          }
          else
          {
            unint64_t v48 = &v267;
          }
          int v49 = &v47[24 * v277];
          long long v50 = *(_OWORD *)v48;
          *((void *)v49 + 2) = v48[2];
          *(_OWORD *)int v49 = v50;
          ++v277;
        }
LABEL_82:
        uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
        if (v274) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
        }
        if (v284)
        {
          int64_t v51 = (void **)__p;
          if (__p)
          {
            int v52 = v283;
            unsigned int v53 = __p;
            if (v283 != __p)
            {
              do
                int v52 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v52 - 1);
              while (v52 != v51);
              unsigned int v53 = __p;
            }
            int64_t v283 = v51;
            operator delete(v53);
          }
          uint64_t v54 = v280;
          if (v280)
          {
            uint64_t v55 = v281;
            uint64_t v56 = v280;
            if (v281 != v280)
            {
              do
              {
                uint64_t v58 = (void *)*--v55;
                uint64_t v57 = v58;
                *uint64_t v55 = 0;
                if (v58) {
                  operator delete[](v57);
                }
              }
              while (v55 != v54);
              uint64_t v56 = v280;
            }
            int64_t v281 = v54;
            operator delete(v56);
          }
          if (v276 != v279) {
            free(v276);
          }
        }
        if (v259 >= 0x41) {
          goto LABEL_101;
        }
LABEL_103:
        if (v40 < 1) {
          return v1;
        }
        ++v256;
      }
    }
  }
  else if (v264)
  {
    goto LABEL_59;
  }
LABEL_116:
  if (v263 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v263) == 6)
  {
    uint64_t v253 = v4;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v254, v263, 0);
    uint64_t v64 = v263;
    uint64_t v65 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v263);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v260, v64, v65);
    while (1)
    {
      BOOL v66 = v254 == v260 && v255 == v261;
      if (v66 && v256 == v262)
      {
        uint64_t v4 = v253;
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v254, (llvm::APInt *)&v258);
      if (v259 > 0x40)
      {
        uint64_t v67 = *(void *)v258;
        if ((*(void *)v258 & 0x8000000000000000) == 0)
        {
LABEL_127:
          if (v259 < 0x41) {
            goto LABEL_161;
          }
LABEL_159:
          if (v258) {
            operator delete[](v258);
          }
          goto LABEL_161;
        }
      }
      else
      {
        uint64_t v67 = (uint64_t)((void)v258 << -(char)v259) >> -(char)v259;
        if ((v67 & 0x8000000000000000) == 0) {
          goto LABEL_127;
        }
      }
      __int16 v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v259 > 0x40)
      {
        uint64_t v68 = *(void *)v258;
        if (!v274) {
          goto LABEL_140;
        }
      }
      else
      {
        uint64_t v68 = (uint64_t)((void)v258 << -(char)v259) >> -(char)v259;
        if (!v274) {
          goto LABEL_140;
        }
      }
      LODWORD(v267) = 2;
      BOOL v268 = (const char *)v68;
      uint64_t v69 = (char *)v276;
      if (v277 >= v278)
      {
        unint64_t v86 = v277 + 1;
        if (v276 <= &v267 && (char *)v276 + 24 * v277 > (char *)&v267)
        {
          int64_t v89 = (char *)&v267 - (unsigned char *)v276;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v86, 24);
          uint64_t v69 = (char *)v276;
          uint64_t v70 = (unint64_t *)((char *)v276 + v89);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v86, 24);
          uint64_t v70 = &v267;
          uint64_t v69 = (char *)v276;
        }
      }
      else
      {
        uint64_t v70 = &v267;
      }
      uint64_t v71 = &v69[24 * v277];
      long long v72 = *(_OWORD *)v70;
      *((void *)v71 + 2) = v70[2];
      *(_OWORD *)uint64_t v71 = v72;
      uint64_t v73 = ++v277;
      if (v274)
      {
        LODWORD(v267) = 3;
        BOOL v268 = ", all values should be non-negative.";
        uint64_t v269 = 36;
        uint64_t v74 = (char *)v276;
        if (v73 >= v278)
        {
          unint64_t v87 = v73 + 1;
          BOOL v88 = (char *)v276 + 24 * v73 > (char *)&v267;
          if (v276 <= &v267 && v88)
          {
            int64_t v90 = (char *)&v267 - (unsigned char *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v87, 24);
            uint64_t v74 = (char *)v276;
            int64_t v75 = (unint64_t *)((char *)v276 + v90);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v87, 24);
            int64_t v75 = &v267;
            uint64_t v74 = (char *)v276;
          }
        }
        else
        {
          int64_t v75 = &v267;
        }
        uint64_t v76 = &v74[24 * v277];
        long long v77 = *(_OWORD *)v75;
        *((void *)v76 + 2) = v75[2];
        *(_OWORD *)uint64_t v76 = v77;
        ++v277;
      }
LABEL_140:
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      }
      if (v284)
      {
        char v78 = (void **)__p;
        if (__p)
        {
          uint64_t v79 = v283;
          int64x2_t v80 = __p;
          if (v283 != __p)
          {
            do
              uint64_t v79 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v79 - 1);
            while (v79 != v78);
            int64x2_t v80 = __p;
          }
          int64_t v283 = v78;
          operator delete(v80);
        }
        int64x2_t v81 = v280;
        if (v280)
        {
          BOOL v82 = v281;
          int64x2_t v83 = v280;
          if (v281 != v280)
          {
            do
            {
              int64x2_t v85 = (void *)*--v82;
              int64x2_t v84 = v85;
              void *v82 = 0;
              if (v85) {
                operator delete[](v84);
              }
            }
            while (v82 != v81);
            int64x2_t v83 = v280;
          }
          int64_t v281 = v81;
          operator delete(v83);
        }
        if (v276 != v279) {
          free(v276);
        }
      }
      if (v259 >= 0x41) {
        goto LABEL_159;
      }
LABEL_161:
      if (v67 < 0) {
        return v1;
      }
      ++v256;
    }
  }
  BOOL v270 = (void *)v266[2 * (((unint64_t)*((unsigned int *)v266 + 11) >> 23) & 1) + 8];
  mlir::IntegerAttr::getValue(&v270, (llvm::APInt *)&v274);
  if (v275 > 0x40)
  {
    uint64_t v94 = *(void *)v274;
    operator delete[](v274);
    uint64_t v92 = v94 << 32;
    uint64_t v93 = (const char *)(int)v94;
    if (!v4)
    {
LABEL_197:
      unint64_t v267 = 0;
      goto LABEL_198;
    }
  }
  else
  {
    uint64_t v91 = (uint64_t)((void)v274 << -(uint64_t)v275) >> -(uint64_t)v275;
    uint64_t v92 = v91 << 32;
    uint64_t v93 = (const char *)(int)v91;
    if (!v4) {
      goto LABEL_197;
    }
  }
  unint64_t v95 = *(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v95) {
    goto LABEL_197;
  }
  uint64_t v96 = *(void **)(*(void *)v95 + 136);
  if (v96 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    unint64_t v95 = 0;
  }
  unint64_t v267 = v95;
  if (v96 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v267);
    uint64_t v98 = (const char *)v97;
    if (v97 <= 3)
    {
      __int16 v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v274)
      {
        LODWORD(v254) = 2;
        BOOL v255 = v98;
        unint64_t v99 = &v254;
        BOOL v100 = (char *)v276;
        if (v277 >= v278)
        {
          unint64_t v216 = v277 + 1;
          if (v276 <= &v254 && (char *)v276 + 24 * v277 > (char *)&v254)
          {
            int64_t v239 = (char *)&v254 - (unsigned char *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v216, 24);
            BOOL v100 = (char *)v276;
            unint64_t v99 = (const void ***)((char *)v276 + v239);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v216, 24);
            unint64_t v99 = &v254;
            BOOL v100 = (char *)v276;
          }
        }
        uint64_t v101 = &v100[24 * v277];
        long long v102 = *(_OWORD *)v99;
        *((void *)v101 + 2) = v99[2];
        *(_OWORD *)uint64_t v101 = v102;
        uint64_t v103 = ++v277;
        if (v274)
        {
          LODWORD(v254) = 3;
          BOOL v255 = ".";
          uint64_t v256 = 1;
          uint64_t v104 = &v254;
          BOOL v105 = (char *)v276;
          if (v103 >= v278)
          {
            unint64_t v218 = v103 + 1;
            BOOL v219 = (char *)v276 + 24 * v103 > (char *)&v254;
            if (v276 <= &v254 && v219)
            {
              int64_t v241 = (char *)&v254 - (unsigned char *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v218, 24);
              BOOL v105 = (char *)v276;
              uint64_t v104 = (const void ***)((char *)v276 + v241);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v218, 24);
              uint64_t v104 = &v254;
              BOOL v105 = (char *)v276;
            }
          }
          uint64_t v106 = &v105[24 * v277];
          long long v107 = *(_OWORD *)v104;
          *((void *)v106 + 2) = v104[2];
          *(_OWORD *)uint64_t v106 = v107;
          ++v277;
        }
      }
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      }
      if (!v284) {
        return v1;
      }
      uint64_t v108 = (void **)__p;
      if (__p)
      {
        uint64_t v109 = v283;
        BOOL v110 = __p;
        if (v283 != __p)
        {
          do
            uint64_t v109 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v109 - 1);
          while (v109 != v108);
          BOOL v110 = __p;
        }
        int64_t v283 = v108;
        operator delete(v110);
      }
      uint64_t v111 = v280;
      if (!v280) {
        goto LABEL_313;
      }
      uint64_t v112 = v281;
      int v113 = v280;
      if (v281 == v280) {
        goto LABEL_312;
      }
      do
      {
        uint64_t v132 = (void *)*--v112;
        uint64_t v131 = v132;
        void *v112 = 0;
        if (v132) {
          operator delete[](v131);
        }
      }
      while (v112 != v111);
      goto LABEL_311;
    }
    if (v92 >= 0) {
      uint64_t v159 = v97;
    }
    else {
      uint64_t v159 = 0;
    }
    if ((unint64_t)&v93[-v159] <= 0xFFFFFFFFFFFFFFFBLL)
    {
      __int16 v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v274)
      {
        LODWORD(v254) = 2;
        BOOL v255 = v93;
        uint64_t v160 = &v254;
        uint64_t v161 = (char *)v276;
        if (v277 >= v278)
        {
          unint64_t v222 = v277 + 1;
          if (v276 <= &v254 && (char *)v276 + 24 * v277 > (char *)&v254)
          {
            int64_t v243 = (char *)&v254 - (unsigned char *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v222, 24);
            uint64_t v161 = (char *)v276;
            uint64_t v160 = (const void ***)((char *)v276 + v243);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v222, 24);
            uint64_t v160 = &v254;
            uint64_t v161 = (char *)v276;
          }
        }
        unint64_t v162 = &v161[24 * v277];
        long long v163 = *(_OWORD *)v160;
        *((void *)v162 + 2) = v160[2];
        *(_OWORD *)unint64_t v162 = v163;
        uint64_t v164 = ++v277;
        if (v274)
        {
          LODWORD(v254) = 3;
          BOOL v255 = " for input rank ";
          uint64_t v256 = 16;
          uint64_t v165 = &v254;
          uint64_t v166 = (char *)v276;
          if (v164 >= v278)
          {
            unint64_t v224 = v164 + 1;
            BOOL v225 = (char *)v276 + 24 * v164 > (char *)&v254;
            if (v276 <= &v254 && v225)
            {
              int64_t v245 = (char *)&v254 - (unsigned char *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v224, 24);
              uint64_t v166 = (char *)v276;
              uint64_t v165 = (const void ***)((char *)v276 + v245);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v224, 24);
              uint64_t v165 = &v254;
              uint64_t v166 = (char *)v276;
            }
          }
          uint64_t v167 = &v166[24 * v277];
          long long v168 = *(_OWORD *)v165;
          *((void *)v167 + 2) = v165[2];
          *(_OWORD *)uint64_t v167 = v168;
          uint64_t v169 = ++v277;
          if (v274)
          {
            LODWORD(v254) = 2;
            BOOL v255 = v98;
            char v170 = &v254;
            long long v171 = (char *)v276;
            if (v169 >= v278)
            {
              unint64_t v228 = v169 + 1;
              BOOL v229 = (char *)v276 + 24 * v169 > (char *)&v254;
              if (v276 <= &v254 && v229)
              {
                int64_t v247 = (char *)&v254 - (unsigned char *)v276;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v228, 24);
                long long v171 = (char *)v276;
                char v170 = (const void ***)((char *)v276 + v247);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v228, 24);
                char v170 = &v254;
                long long v171 = (char *)v276;
              }
            }
            long long v172 = &v171[24 * v277];
            long long v173 = *(_OWORD *)v170;
            *((void *)v172 + 2) = v170[2];
            *(_OWORD *)long long v172 = v173;
            uint64_t v174 = ++v277;
            if (v274)
            {
              LODWORD(v254) = 3;
              BOOL v255 = ".";
              uint64_t v256 = 1;
              uint64_t v175 = &v254;
              uint64_t v176 = (char *)v276;
              if (v174 >= v278)
              {
                unint64_t v232 = v174 + 1;
                BOOL v233 = (char *)v276 + 24 * v174 > (char *)&v254;
                if (v276 <= &v254 && v233)
                {
                  int64_t v249 = (char *)&v254 - (unsigned char *)v276;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v232, 24);
                  uint64_t v176 = (char *)v276;
                  uint64_t v175 = (const void ***)((char *)v276 + v249);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v232, 24);
                  uint64_t v175 = &v254;
                  uint64_t v176 = (char *)v276;
                }
              }
              unint64_t v177 = &v176[24 * v277];
              long long v178 = *(_OWORD *)v175;
              *((void *)v177 + 2) = v175[2];
              *(_OWORD *)unint64_t v177 = v178;
              ++v277;
            }
          }
        }
      }
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      }
      if (!v284) {
        return v1;
      }
      unint64_t v179 = (void **)__p;
      if (__p)
      {
        uint64_t v180 = v283;
        uint64_t v181 = __p;
        if (v283 != __p)
        {
          do
            uint64_t v180 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v180 - 1);
          while (v180 != v179);
          uint64_t v181 = __p;
        }
        int64_t v283 = v179;
        operator delete(v181);
      }
      uint64_t v111 = v280;
      if (!v280) {
        goto LABEL_313;
      }
      uint64_t v182 = v281;
      int v113 = v280;
      if (v281 == v280) {
        goto LABEL_312;
      }
      do
      {
        uint64_t v184 = (void *)*--v182;
        uint64_t v183 = v184;
        void *v182 = 0;
        if (v184) {
          operator delete[](v183);
        }
      }
      while (v182 != v111);
LABEL_311:
      int v113 = v280;
LABEL_312:
      int64_t v281 = v111;
      operator delete(v113);
      goto LABEL_313;
    }
  }
LABEL_198:
  if (!v5 || (uint64_t v114 = (void *)(*(void *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8)) == 0)
  {
    unint64_t v258 = 0;
    goto LABEL_224;
  }
  uint64_t v115 = *(void **)(*(void *)v114 + 136);
  if (v115 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    uint64_t v114 = 0;
  }
  unint64_t v258 = v114;
  if (v115 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
LABEL_224:
    BOOL v270 = v272;
    uint64_t v271 = 0x500000000;
    uint64_t v1 = 1;
    if (mlir::matchConstantWithIntVector<long long>(v6, (uint64_t)&v270) && v271 != 4)
    {
      __int16 v257 = 259;
      mlir::OpState::emitOpError(&v266, &v254, (uint64_t)&v274);
      if (v274)
      {
        LODWORD(v260) = 3;
        uint64_t v262 = 21;
        uint64_t v133 = &v260;
        uint64_t v134 = (char *)v276;
        if (v277 >= v278)
        {
          unint64_t v211 = v277 + 1;
          if (v276 <= &v260 && (char *)v276 + 24 * v277 > (char *)&v260)
          {
            int64_t v236 = (char *)&v260 - (unsigned char *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v211, 24);
            uint64_t v134 = (char *)v276;
            uint64_t v133 = (const void ***)((char *)v276 + v236);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v211, 24);
            uint64_t v133 = &v260;
            uint64_t v134 = (char *)v276;
          }
        }
        uint64_t v135 = &v134[24 * v277];
        long long v136 = *(_OWORD *)v133;
        *((void *)v135 + 2) = v133[2];
        *(_OWORD *)uint64_t v135 = v136;
        uint64_t v137 = ++v277;
        if (v274)
        {
          LODWORD(v260) = 5;
          unint64_t v261 = (const char *)v271;
          uint64_t v138 = &v260;
          long long v139 = (char *)v276;
          if (v137 >= v278)
          {
            unint64_t v212 = v137 + 1;
            BOOL v213 = (char *)v276 + 24 * v137 > (char *)&v260;
            if (v276 <= &v260 && v213)
            {
              int64_t v237 = (char *)&v260 - (unsigned char *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v212, 24);
              long long v139 = (char *)v276;
              uint64_t v138 = (const void ***)((char *)v276 + v237);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v212, 24);
              uint64_t v138 = &v260;
              long long v139 = (char *)v276;
            }
          }
          uint64_t v140 = &v139[24 * v277];
          long long v141 = *(_OWORD *)v138;
          *((void *)v140 + 2) = v138[2];
          *(_OWORD *)uint64_t v140 = v141;
          uint64_t v142 = ++v277;
          if (v274)
          {
            LODWORD(v260) = 3;
            unint64_t v261 = " values.";
            uint64_t v262 = 8;
            uint64_t v143 = &v260;
            uint64_t v144 = (char *)v276;
            if (v142 >= v278)
            {
              unint64_t v214 = v142 + 1;
              BOOL v215 = (char *)v276 + 24 * v142 > (char *)&v260;
              if (v276 <= &v260 && v215)
              {
                int64_t v238 = (char *)&v260 - (unsigned char *)v276;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v214, 24);
                uint64_t v144 = (char *)v276;
                uint64_t v143 = (const void ***)((char *)v276 + v238);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v214, 24);
                uint64_t v143 = &v260;
                uint64_t v144 = (char *)v276;
              }
            }
            uint64_t v145 = &v144[24 * v277];
            long long v146 = *(_OWORD *)v143;
            *((void *)v145 + 2) = v143[2];
            *(_OWORD *)uint64_t v145 = v146;
            ++v277;
          }
        }
      }
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      }
      if (v284)
      {
        uint64_t v147 = (void **)__p;
        if (__p)
        {
          uint64_t v148 = v283;
          uint64_t v149 = __p;
          if (v283 != __p)
          {
            do
              uint64_t v148 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v148 - 1);
            while (v148 != v147);
            uint64_t v149 = __p;
          }
          int64_t v283 = v147;
          operator delete(v149);
        }
        uint64_t v150 = v280;
        if (v280)
        {
          uint64_t v151 = v281;
          uint64_t v152 = v280;
          if (v281 != v280)
          {
            do
            {
              uint64_t v154 = (void *)*--v151;
              uint64_t v153 = v154;
              *uint64_t v151 = 0;
              if (v154) {
                operator delete[](v153);
              }
            }
            while (v151 != v150);
            uint64_t v152 = v280;
          }
          int64_t v281 = v150;
          operator delete(v152);
        }
        if (v276 != v279) {
          free(v276);
        }
      }
    }
    unsigned int v157 = v270;
    if (v270 != v272)
    {
LABEL_255:
      free(v157);
      return v1;
    }
    return v1;
  }
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v258);
  unint64_t v117 = (const char *)v116;
  if (v116 > 3)
  {
    if (v92 >= 0) {
      uint64_t v185 = v116;
    }
    else {
      uint64_t v185 = 0;
    }
    if ((unint64_t)&v93[-v185] <= 0xFFFFFFFFFFFFFFFBLL)
    {
      __int16 v273 = 259;
      mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
      if (v274)
      {
        LODWORD(v254) = 2;
        BOOL v255 = v93;
        long long v186 = &v254;
        long long v187 = (char *)v276;
        if (v277 >= v278)
        {
          unint64_t v223 = v277 + 1;
          if (v276 <= &v254 && (char *)v276 + 24 * v277 > (char *)&v254)
          {
            int64_t v244 = (char *)&v254 - (unsigned char *)v276;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v223, 24);
            long long v187 = (char *)v276;
            long long v186 = (const void ***)((char *)v276 + v244);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v223, 24);
            long long v186 = &v254;
            long long v187 = (char *)v276;
          }
        }
        uint64_t v188 = &v187[24 * v277];
        long long v189 = *(_OWORD *)v186;
        *((void *)v188 + 2) = v186[2];
        *(_OWORD *)uint64_t v188 = v189;
        uint64_t v190 = ++v277;
        if (v274)
        {
          LODWORD(v254) = 3;
          BOOL v255 = " for input gradient rank ";
          uint64_t v256 = 25;
          uint64_t v191 = &v254;
          int64_t v192 = (char *)v276;
          if (v190 >= v278)
          {
            unint64_t v226 = v190 + 1;
            BOOL v227 = (char *)v276 + 24 * v190 > (char *)&v254;
            if (v276 <= &v254 && v227)
            {
              int64_t v246 = (char *)&v254 - (unsigned char *)v276;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v226, 24);
              int64_t v192 = (char *)v276;
              uint64_t v191 = (const void ***)((char *)v276 + v246);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v226, 24);
              uint64_t v191 = &v254;
              int64_t v192 = (char *)v276;
            }
          }
          uint64_t v193 = &v192[24 * v277];
          long long v194 = *(_OWORD *)v191;
          *((void *)v193 + 2) = v191[2];
          *(_OWORD *)uint64_t v193 = v194;
          uint64_t v195 = ++v277;
          if (v274)
          {
            LODWORD(v254) = 2;
            BOOL v255 = v117;
            long long v196 = &v254;
            uint64_t v197 = (char *)v276;
            if (v195 >= v278)
            {
              unint64_t v230 = v195 + 1;
              BOOL v231 = (char *)v276 + 24 * v195 > (char *)&v254;
              if (v276 <= &v254 && v231)
              {
                int64_t v248 = (char *)&v254 - (unsigned char *)v276;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v230, 24);
                uint64_t v197 = (char *)v276;
                long long v196 = (const void ***)((char *)v276 + v248);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v230, 24);
                long long v196 = &v254;
                uint64_t v197 = (char *)v276;
              }
            }
            __int16 v198 = &v197[24 * v277];
            long long v199 = *(_OWORD *)v196;
            *((void *)v198 + 2) = v196[2];
            *(_OWORD *)__int16 v198 = v199;
            uint64_t v200 = ++v277;
            if (v274)
            {
              LODWORD(v254) = 3;
              BOOL v255 = ".";
              uint64_t v256 = 1;
              long long v201 = &v254;
              uint64_t v202 = (char *)v276;
              if (v200 >= v278)
              {
                unint64_t v234 = v200 + 1;
                BOOL v235 = (char *)v276 + 24 * v200 > (char *)&v254;
                if (v276 <= &v254 && v235)
                {
                  int64_t v250 = (char *)&v254 - (unsigned char *)v276;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v234, 24);
                  uint64_t v202 = (char *)v276;
                  long long v201 = (const void ***)((char *)v276 + v250);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v234, 24);
                  long long v201 = &v254;
                  uint64_t v202 = (char *)v276;
                }
              }
              uint64_t v203 = &v202[24 * v277];
              long long v204 = *(_OWORD *)v201;
              *((void *)v203 + 2) = v201[2];
              *(_OWORD *)uint64_t v203 = v204;
              ++v277;
            }
          }
        }
      }
      uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
      if (v274) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
      }
      if (!v284) {
        return v1;
      }
      int v205 = (void **)__p;
      if (__p)
      {
        long long v206 = v283;
        uint64_t v207 = __p;
        if (v283 != __p)
        {
          do
            long long v206 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v206 - 1);
          while (v206 != v205);
          uint64_t v207 = __p;
        }
        int64_t v283 = v205;
        operator delete(v207);
      }
      uint64_t v111 = v280;
      if (!v280) {
        goto LABEL_313;
      }
      uint64_t v208 = v281;
      int v113 = v280;
      if (v281 == v280) {
        goto LABEL_312;
      }
      do
      {
        v210 = (void *)*--v208;
        uint64_t v209 = v210;
        void *v208 = 0;
        if (v210) {
          operator delete[](v209);
        }
      }
      while (v208 != v111);
      goto LABEL_311;
    }
    goto LABEL_224;
  }
  __int16 v273 = 259;
  mlir::OpState::emitOpError(&v266, (const void ***)&v270, (uint64_t)&v274);
  if (v274)
  {
    LODWORD(v254) = 2;
    BOOL v255 = v117;
    uint64_t v118 = &v254;
    uint64_t v119 = (char *)v276;
    if (v277 >= v278)
    {
      unint64_t v217 = v277 + 1;
      if (v276 <= &v254 && (char *)v276 + 24 * v277 > (char *)&v254)
      {
        int64_t v240 = (char *)&v254 - (unsigned char *)v276;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v217, 24);
        uint64_t v119 = (char *)v276;
        uint64_t v118 = (const void ***)((char *)v276 + v240);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v217, 24);
        uint64_t v118 = &v254;
        uint64_t v119 = (char *)v276;
      }
    }
    unint64_t v120 = &v119[24 * v277];
    long long v121 = *(_OWORD *)v118;
    *((void *)v120 + 2) = v118[2];
    *(_OWORD *)unint64_t v120 = v121;
    uint64_t v122 = ++v277;
    if (v274)
    {
      LODWORD(v254) = 3;
      BOOL v255 = ".";
      uint64_t v256 = 1;
      unint64_t v123 = &v254;
      long long v124 = (char *)v276;
      if (v122 >= v278)
      {
        unint64_t v220 = v122 + 1;
        BOOL v221 = (char *)v276 + 24 * v122 > (char *)&v254;
        if (v276 <= &v254 && v221)
        {
          int64_t v242 = (char *)&v254 - (unsigned char *)v276;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v220, 24);
          long long v124 = (char *)v276;
          unint64_t v123 = (const void ***)((char *)v276 + v242);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, v279, v220, 24);
          unint64_t v123 = &v254;
          long long v124 = (char *)v276;
        }
      }
      unint64_t v125 = &v124[24 * v277];
      long long v126 = *(_OWORD *)v123;
      *((void *)v125 + 2) = v123[2];
      *(_OWORD *)unint64_t v125 = v126;
      ++v277;
    }
  }
  uint64_t v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v274);
  if (v274) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v274);
  }
  if (v284)
  {
    uint64_t v127 = (void **)__p;
    if (__p)
    {
      uint64_t v128 = v283;
      unint64_t v129 = __p;
      if (v283 != __p)
      {
        do
          uint64_t v128 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v128 - 1);
        while (v128 != v127);
        unint64_t v129 = __p;
      }
      int64_t v283 = v127;
      operator delete(v129);
    }
    uint64_t v111 = v280;
    if (v280)
    {
      long long v130 = v281;
      int v113 = v280;
      if (v281 == v280) {
        goto LABEL_312;
      }
      do
      {
        uint64_t v156 = (void *)*--v130;
        unsigned int v155 = v156;
        void *v130 = 0;
        if (v156) {
          operator delete[](v155);
        }
      }
      while (v130 != v111);
      goto LABEL_311;
    }
LABEL_313:
    unsigned int v157 = v276;
    if (v276 == v279) {
      return v1;
    }
    goto LABEL_255;
  }
  return v1;
}

uint64_t mlir::mps::DepthwiseConv3DWeightsGradientOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v26[2] = *MEMORY[0x1E4F143B8];
  v22[0] = a4;
  v22[1] = a5;
  if (a5 == 3)
  {
    uint64_t v11 = mlir::ValueRange::dereference_iterator(v22, 0);
    uint64_t v12 = mlir::ValueRange::dereference_iterator(v22, 1);
    uint64_t v13 = mlir::ValueRange::dereference_iterator(v22, 2);
    uint64_t v14 = (void *)(*(void *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v15 = *(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
    long long v23 = v14;
    uint64_t v24 = v15;
    mlir::ValueRange::ValueRange(v26, (uint64_t)&v23, 2uLL);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v15 + 8))
    {
      mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v15 + 8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8)) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v15 = 0;
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8))
      {
LABEL_4:
        mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8);
        if (!v15) {
          goto LABEL_22;
        }
LABEL_11:
        if (*(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
          && v14
          && *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          long long v23 = v25;
          uint64_t v24 = 0x400000000;
          if (mlir::matchConstantWithIntVector<long long>(v13, (uint64_t)&v23))
          {
            unsigned int v18 = v24;
            if (v24 <= 3)
            {
              if (HIDWORD(v24) > 3
                || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, 4uLL, 8),
                    unsigned int v18 = v24,
                    v24 != 4))
              {
                bzero((char *)v23 + 8 * v18, 32 - 8 * v18);
              }
              unsigned int v18 = 4;
              LODWORD(v24) = 4;
            }
            uint64_t v19 = mlir::RankedTensorType::get((uint64_t)v23, v18, v16, 0);
            uint64_t v20 = v23;
            if (v23 == v25) {
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v19 = mlir::UnrankedTensorType::get(v16);
            uint64_t v20 = v23;
            if (v23 == v25) {
              goto LABEL_23;
            }
          }
          free(v20);
          goto LABEL_23;
        }
LABEL_22:
        uint64_t v19 = mlir::UnrankedTensorType::get(v16);
LABEL_23:
        uint64_t v21 = *(unsigned int *)(a11 + 8);
        if (v21 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v21 + 1, 8);
          LODWORD(v21) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v21) = v19;
        ++*(_DWORD *)(a11 + 8);
        return 1;
      }
    }
    uint64_t v14 = 0;
    if (!v15) {
      goto LABEL_22;
    }
    goto LABEL_11;
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::checkInputTensors<mlir::mps::PoolMaxGradientOp>(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = (uint64_t *)a1;
  unint64_t v1 = *(unsigned int *)(a1 + 44);
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    int v2 = (unsigned int *)(a1 + 16 * ((v1 >> 23) & 1) + 64);
  }
  else {
    int v2 = 0;
  }
  uint64_t v3 = v2[18];
  unsigned int v4 = v2[19];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (v4)
    {
LABEL_6:
      uint64_t v6 = *(void *)(v5 + 32 * v3 + 24);
      uint64_t v7 = v4 + v3;
      unsigned int v8 = v2[20];
      if ((v1 & 0x800000) != 0) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = v4 + v3;
  unsigned int v8 = v2[20];
  if ((v1 & 0x800000) != 0)
  {
LABEL_7:
    uint64_t v9 = *(void *)(a1 + 72);
    if (v8) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v9 = 0;
  if (v8)
  {
LABEL_8:
    uint64_t v10 = *(void *)(v9 + 32 * v7 + 24);
    unsigned int v11 = v2[21];
    if ((v1 & 0x800000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v10 = 0;
  unsigned int v11 = v2[21];
  if ((v1 & 0x800000) != 0)
  {
LABEL_9:
    uint64_t v12 = *(void *)(a1 + 72);
    if (v11) {
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v13 = 0;
    if (v10) {
      goto LABEL_11;
    }
LABEL_20:
    if (!v6 || v13) {
      goto LABEL_23;
    }
    return 1;
  }
LABEL_18:
  uint64_t v12 = 0;
  if (!v11) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v13 = *(void *)(v12 + 32 * (v8 + v7) + 24);
  if (!v10) {
    goto LABEL_20;
  }
LABEL_11:
  if (v13 && !v6) {
    return 1;
  }
LABEL_23:
  uint64_t v24 = (const void **)"op supports only (gradient && input) || (gradient && indices && ouput_shape) as parameters";
  __int16 v25 = 259;
  mlir::OpState::emitOpError(&v26, &v24, (uint64_t)v27);
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v27);
  if (v27[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v27);
  }
  if (v34)
  {
    unint64_t v15 = (void **)__p;
    if (__p)
    {
      uint64_t v16 = v33;
      uint64_t v17 = __p;
      if (v33 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      unint64_t v33 = v15;
      operator delete(v17);
    }
    unsigned int v18 = v30;
    if (v30)
    {
      uint64_t v19 = v31;
      uint64_t v20 = v30;
      if (v31 != v30)
      {
        do
        {
          uint64_t v22 = (void *)*--v19;
          uint64_t v21 = v22;
          *uint64_t v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
        uint64_t v20 = v30;
      }
      unint64_t v31 = v18;
      operator delete(v20);
    }
    if (v28 != &v29) {
      free(v28);
    }
  }
  return v14;
}

uint64_t mlir::mps::PoolMaxGradientOp::getInput(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = *(void *)this + 16 * ((v1 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = *(_DWORD *)(v2 + 76);
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * *(unsigned int *)(v2 + 72) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * *(unsigned int *)(v2 + 72) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::PoolMaxGradientOp::getIndices(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[20];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[19] + v2[18]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[19] + v2[18]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::PoolMaxGradientOp::getOutputShape(mlir::mps::PoolMaxGradientOp *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 44);
  uint64_t v2 = (_DWORD *)(*(void *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    uint64_t v2 = 0;
  }
  int v3 = v2[21];
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)this + 72);
    if (v3) {
      return *(void *)(v4 + 32 * (v2[20] + v2[19] + v2[18]) + 24);
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (v3) {
      return *(void *)(v4 + 32 * (v2[20] + v2[19] + v2[18]) + 24);
    }
  }
  return 0;
}

uint64_t mlir::mps::inferPool4DShape(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, void *a6, void *a7, int a8, unsigned __int8 a9, uint64_t a10)
{
  unint64_t v12 = *((unsigned int *)a4 + 2);
  if (v12 >= 4) {
    uint64_t v13 = 4;
  }
  else {
    uint64_t v13 = *((unsigned int *)a4 + 2);
  }
  if (v12 <= 3) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12 - v13;
  }
  uint64_t v15 = *(unsigned int *)(a10 + 8);
  int v16 = v12 - v15;
  if (v12 != v15)
  {
    if (v12 >= v15)
    {
      BOOL v110 = a3;
      uint64_t v111 = a6;
      uint64_t v17 = a7;
      int v18 = a8;
      uint64_t v19 = *(unsigned int *)(a10 + 8);
      int v20 = *(_DWORD *)(a10 + 8);
      if (*(_DWORD *)(a10 + 12) < v12)
      {
        unint64_t v109 = *((unsigned int *)a4 + 2);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v12, 8);
        unint64_t v12 = v109;
        uint64_t v19 = *(unsigned int *)(a10 + 8);
        int v20 = *(_DWORD *)(a10 + 8);
      }
      bzero((void *)(*(void *)a10 + 8 * v19), 8 * (v12 - v15));
      LODWORD(v12) = v20 + v16;
      a8 = v18;
      a7 = v17;
      a3 = v110;
      a6 = v111;
    }
    *(_DWORD *)(a10 + 8) = v12;
  }
  if (v14)
  {
    unint64_t v21 = 0;
    uint64_t v22 = *a4;
    uint64_t v23 = *(void *)a10;
    if (v14 < 4) {
      goto LABEL_19;
    }
    if ((unint64_t)(v23 - v22) < 0x20) {
      goto LABEL_19;
    }
    unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v24 = (long long *)(v22 + 16);
    __int16 v25 = (_OWORD *)(v23 + 16);
    unint64_t v26 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *v24;
      *(v25 - 1) = *(v24 - 1);
      *__int16 v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v14 != v21)
    {
LABEL_19:
      unint64_t v28 = v14 - v21;
      uint64_t v29 = 8 * v21;
      uint64_t v30 = (uint64_t *)(v22 + v29);
      unint64_t v31 = (void *)(v23 + v29);
      do
      {
        uint64_t v32 = *v30++;
        *v31++ = v32;
        --v28;
      }
      while (v28);
    }
  }
  if (v13)
  {
    uint64_t v33 = *a4;
    uint64_t v34 = *a5;
    uint64_t v35 = *(void *)a10;
    if (a8 == 4 || a8 == 2)
    {
      uint64_t v36 = -v13;
      uint64_t v37 = v34 + 32;
      uint64_t v38 = (uint64_t *)(v35 + 8 * v14);
      BOOL v39 = (uint64_t *)(v33 + 8 * v14);
      do
      {
        uint64_t v42 = *v39++;
        uint64_t v41 = v42;
        if (*(uint64_t *)(v37 + 8 * v36) <= 1) {
          uint64_t v43 = 1;
        }
        else {
          uint64_t v43 = *(void *)(v37 + 8 * v36);
        }
        uint64_t v44 = v41;
        if ((unint64_t)v43 >= 2)
        {
          uint64_t v44 = 0x8000000000000000;
          if (v41 != 0x8000000000000000)
          {
            uint64_t v44 = v41 / v43;
            if (v41 / v43 * v43 != v41) {
              v44 += v41 >= 0;
            }
          }
        }
        *v38++ = v44;
      }
      while (!__CFADD__(v36++, 1));
    }
    else
    {
      uint64_t v45 = a9;
      uint64_t v46 = *a3;
      uint64_t v47 = *a6;
      uint64_t v48 = *a7;
      uint64_t v49 = *(void *)(v33 + 8 * v14);
      uint64_t v50 = 4 - v13;
      uint64_t v51 = *(void *)(*a3 + 8 * (4 - v13));
      uint64_t v52 = 0x8000000000000000;
      if (v51 != 0x8000000000000000 && v49 != 0x8000000000000000)
      {
        uint64_t v54 = *(void *)(v48 + 16 * v50 + 8) & ~(*(uint64_t *)(v48 + 16 * v50 + 8) >> 63);
        uint64_t v55 = *(void *)(v48 + 16 * v50) & ~(*(uint64_t *)(v48 + 16 * v50) >> 63);
        uint64_t v56 = 8 * v50;
        uint64_t v57 = *(void *)(v47 + v56);
        if (v57 <= 1) {
          uint64_t v57 = 1;
        }
        uint64_t v58 = *(void *)(v34 + v56);
        if (v58 <= 1) {
          uint64_t v58 = 1;
        }
        if (a8 == 1)
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
        }
        uint64_t v59 = v58 + v49 + v55 + v54 + ~(v57 * (v51 - 1));
        uint64_t v60 = v59 / v58;
        uint64_t v61 = v59 / v58 * v58;
        if (v59 >= 0) {
          uint64_t v62 = a9;
        }
        else {
          uint64_t v62 = a9 - 1;
        }
        if (v61 == v59) {
          uint64_t v63 = 0;
        }
        else {
          uint64_t v63 = v62;
        }
        uint64_t v52 = (v60 + v63) & ~((v60 + v63) >> 63);
      }
      *(void *)(v35 + 8 * v14) = v52;
      if (v13 != 1)
      {
        unint64_t v64 = v14 + 1;
        uint64_t v65 = 5 - v13;
        uint64_t v66 = *(void *)(v46 + 8 * (5 - v13));
        uint64_t v67 = 0x8000000000000000;
        if (v66 != 0x8000000000000000)
        {
          uint64_t v68 = *(void *)(v33 + 8 * v64);
          if (v68 != 0x8000000000000000)
          {
            uint64_t v69 = *(void *)(v48 + 16 * v65 + 8) & ~(*(uint64_t *)(v48 + 16 * v65 + 8) >> 63);
            uint64_t v70 = *(void *)(v48 + 16 * v65) & ~(*(uint64_t *)(v48 + 16 * v65) >> 63);
            uint64_t v71 = 8 * v65;
            uint64_t v72 = *(void *)(v47 + v71);
            if (v72 <= 1) {
              uint64_t v72 = 1;
            }
            uint64_t v73 = *(void *)(v34 + v71);
            if (v73 <= 1) {
              uint64_t v73 = 1;
            }
            if (a8 == 1)
            {
              uint64_t v69 = 0;
              uint64_t v70 = 0;
            }
            uint64_t v74 = v73 + v68 + v70 + v69 + ~(v72 * (v66 - 1));
            uint64_t v75 = v74 / v73;
            uint64_t v76 = v74 / v73 * v73;
            if (v74 >= 0) {
              uint64_t v77 = a9;
            }
            else {
              uint64_t v77 = a9 - 1;
            }
            if (v76 == v74) {
              uint64_t v78 = 0;
            }
            else {
              uint64_t v78 = v77;
            }
            uint64_t v67 = (v75 + v78) & ~((v75 + v78) >> 63);
          }
        }
        *(void *)(v35 + 8 * v64) = v67;
        if (v13 != 2)
        {
          unint64_t v79 = v14 + 2;
          uint64_t v80 = 6 - v13;
          uint64_t v81 = *(void *)(v46 + 8 * (6 - v13));
          uint64_t v82 = 0x8000000000000000;
          if (v81 != 0x8000000000000000)
          {
            uint64_t v83 = *(void *)(v33 + 8 * v79);
            if (v83 != 0x8000000000000000)
            {
              uint64_t v84 = *(void *)(v48 + 16 * v80 + 8) & ~(*(uint64_t *)(v48 + 16 * v80 + 8) >> 63);
              uint64_t v85 = *(void *)(v48 + 16 * v80) & ~(*(uint64_t *)(v48 + 16 * v80) >> 63);
              uint64_t v86 = 8 * v80;
              uint64_t v87 = *(void *)(v47 + v86);
              if (v87 <= 1) {
                uint64_t v87 = 1;
              }
              uint64_t v88 = *(void *)(v34 + v86);
              if (v88 <= 1) {
                uint64_t v88 = 1;
              }
              if (a8 == 1)
              {
                uint64_t v84 = 0;
                uint64_t v85 = 0;
              }
              uint64_t v89 = v88 + v83 + v85 + v84 + ~(v87 * (v81 - 1));
              uint64_t v90 = v89 / v88;
              uint64_t v91 = v89 / v88 * v88;
              if (v89 >= 0) {
                uint64_t v92 = a9;
              }
              else {
                uint64_t v92 = a9 - 1;
              }
              if (v91 == v89) {
                uint64_t v93 = 0;
              }
              else {
                uint64_t v93 = v92;
              }
              uint64_t v82 = (v90 + v93) & ~((v90 + v93) >> 63);
            }
          }
          *(void *)(v35 + 8 * v79) = v82;
          if (v13 != 3)
          {
            unint64_t v94 = v14 + 3;
            uint64_t v95 = v13 ^ 7;
            uint64_t v96 = *(void *)(v46 + 8 * (v13 ^ 7));
            uint64_t v97 = 0x8000000000000000;
            if (v96 != 0x8000000000000000)
            {
              uint64_t v98 = *(void *)(v33 + 8 * v94);
              if (v98 != 0x8000000000000000)
              {
                uint64_t v99 = *(void *)(v48 + 16 * v95 + 8) & ~(*(uint64_t *)(v48 + 16 * v95 + 8) >> 63);
                uint64_t v100 = *(void *)(v48 + 16 * v95) & ~(*(uint64_t *)(v48 + 16 * v95) >> 63);
                uint64_t v101 = 8 * v95;
                uint64_t v102 = *(void *)(v47 + v101);
                if (v102 <= 1) {
                  uint64_t v102 = 1;
                }
                uint64_t v103 = *(void *)(v34 + v101);
                if (v103 <= 1) {
                  uint64_t v103 = 1;
                }
                if (a8 == 1) {
                  uint64_t v104 = 0;
                }
                else {
                  uint64_t v104 = v99;
                }
                if (a8 == 1) {
                  uint64_t v100 = 0;
                }
                uint64_t v105 = v103 + v98 + v100 + v104 + ~(v102 * (v96 - 1));
                uint64_t v106 = v105 / v103;
                uint64_t v107 = v105 / v103 * v103;
                if (v105 < 0) {
                  uint64_t v45 = a9 - 1;
                }
                if (v107 == v105) {
                  uint64_t v45 = 0;
                }
                uint64_t v97 = (v106 + v45) & ~((v106 + v45) >> 63);
              }
            }
            *(void *)(v35 + 8 * v94) = v97;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t mlir::mps::inferPool4DGradientOpReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v35[2] = *MEMORY[0x1E4F143B8];
  v35[0] = a3;
  v35[1] = a4;
  uint64_t v7 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v35, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    if (a4 == 3) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v23 = mlir::ValueRange::dereference_iterator(v35, 1);
  }
  uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
  uint64_t v30 = v7;
  uint64_t v31 = v8;
  if (a4 != 3) {
    goto LABEL_21;
  }
LABEL_3:
  uint64_t v32 = v34;
  uint64_t v33 = 0x400000000;
  uint64_t v9 = mlir::ValueRange::dereference_iterator(v35, 2);
  if (mlir::matchConstantWithIntVector<long long>(v9, (uint64_t)&v32))
  {
    uint64_t v10 = v33;
    if (v33 >= 4)
    {
      unint64_t v12 = (int64x2_t *)v32;
      unint64_t v14 = (char *)v32 + 8 * v33;
      unint64_t v15 = 8 * v33 - 8;
      if (v15 >= 0x18)
      {
LABEL_9:
        uint64_t v16 = (v15 >> 3) + 1;
        uint64_t v17 = &v12->i64[v16 & 0x3FFFFFFFFFFFFFFCLL];
        int v18 = v12 + 1;
        v19.i64[0] = -1;
        v19.i64[1] = -1;
        uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        while (1)
        {
          int32x2_t v21 = vmovn_s64(vceqq_s64(v18[-1], v19));
          if (v21.i8[0])
          {
            v18[-1].i64[0] = 0x8000000000000000;
            if ((v21.i8[4] & 1) == 0)
            {
LABEL_13:
              int32x2_t v22 = vmovn_s64(vceqq_s64(*v18, v19));
              if ((v22.i8[0] & 1) == 0) {
                goto LABEL_14;
              }
              goto LABEL_18;
            }
          }
          else if ((v21.i8[4] & 1) == 0)
          {
            goto LABEL_13;
          }
          v18[-1].i64[1] = 0x8000000000000000;
          int32x2_t v22 = vmovn_s64(vceqq_s64(*v18, v19));
          if ((v22.i8[0] & 1) == 0)
          {
LABEL_14:
            if (v22.i8[4]) {
              goto LABEL_19;
            }
            goto LABEL_10;
          }
LABEL_18:
          v18->i64[0] = 0x8000000000000000;
          if (v22.i8[4]) {
LABEL_19:
          }
            v18->i64[1] = 0x8000000000000000;
LABEL_10:
          v18 += 2;
          v20 -= 4;
          if (!v20)
          {
            if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_28;
            }
            goto LABEL_31;
          }
        }
      }
    }
    else
    {
      if (HIDWORD(v33) <= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, 4uLL, 8);
      }
      int v11 = v33;
      unint64_t v12 = (int64x2_t *)v32;
      memset_pattern16((char *)v32 + 8 * v33, &unk_1810FE350, 32 - 8 * v10);
      int v13 = v11 - v10;
      uint64_t v10 = (v11 - v10 + 4);
      LODWORD(v33) = v13 + 4;
      if (v13 == -4)
      {
        uint64_t v10 = 0;
        goto LABEL_31;
      }
      unint64_t v14 = &v12->i8[8 * v10];
      unint64_t v15 = 8 * v10 - 8;
      if (v15 >= 0x18) {
        goto LABEL_9;
      }
    }
    uint64_t v17 = (uint64_t *)v12;
    do
    {
LABEL_28:
      if (*v17 == -1) {
        *uint64_t v17 = 0x8000000000000000;
      }
      ++v17;
    }
    while (v17 != (uint64_t *)v14);
LABEL_31:
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v30);
    uint64_t v26 = mlir::RankedTensorType::get((uint64_t)v12, v10, OperandRange, 0);
  }
  else
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
    uint64_t v26 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
  }
  uint64_t v28 = v26;
  uint64_t v29 = *(unsigned int *)(a5 + 8);
  if (v29 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v29 + 1, 8);
    LODWORD(v29) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v29) = v28;
  ++*(_DWORD *)(a5 + 8);
  if (v32 != v34) {
    free(v32);
  }
  return 1;
}

uint64_t mlir::mps::PoolAvgOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, long long a9, uint64_t a10)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    long long v15 = *a7;
    long long v16 = a7[1];
    long long v17 = a7[2];
    uint64_t v18 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v18 = 0;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
  }
  *(void *)&long long v26 = a6;
  BYTE8(v26) = 0;
  v27[0] = 0;
  *(_OWORD *)&unsigned char v27[8] = v15;
  *(_OWORD *)&v27[24] = v16;
  *(_OWORD *)&v27[40] = v17;
  *(void *)&v27[56] = v18;
  long long v28 = a9;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v27[0]) {
      v27[0] = 0;
    }
    mlir::OperationName::OperationName((char *)&v26 + 8, "mps.pooling_average", 19, Context);
    v27[0] = 1;
  }
  *(void *)&long long v29 = a4;
  *((void *)&v29 + 1) = a5;
  if (a5 && (uint64_t v20 = mlir::UnknownLoc::get(this, a2), mlir::mps::PoolAvgOpAdaptor::verify(&v26, v20)))
  {
    void v25[4] = *(_OWORD *)&v27[48];
    void v25[5] = v28;
    v25[6] = v29;
    v25[0] = v26;
    v25[1] = *(_OWORD *)v27;
    void v25[2] = *(_OWORD *)&v27[16];
    void v25[3] = *(_OWORD *)&v27[32];
    return mlir::mps::inferPooling4DOpReturnTypes<mlir::mps::PoolAvgOpAdaptor>((uint64_t)a2, a3, v25, a10);
  }
  else
  {
    uint64_t v22 = mlir::Float32Type::get(this, a2);
    uint64_t v23 = mlir::UnrankedTensorType::get(v22);
    uint64_t v24 = *(unsigned int *)(a10 + 8);
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(void *)(*(void *)a10 + 8 * v24) = v23;
    ++*(_DWORD *)(a10 + 8);
    return 1;
  }
}

uint64_t mlir::mps::PoolAvgOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v3 = (const char *)a1[9];
  if (v3)
  {
    uint64_t v5 = (const char *)a1[4];
    uint64_t v4 = (const char *)a1[5];
    uint64_t v6 = (const char *)a1[8];
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
    uint64_t v69 = v3;
    uint64_t v70 = v7;
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
    uint64_t v9 = Type;
    if (Type) {
      Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
    }
    uint64_t v73 = v9;
    uint64_t v74 = Type;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
    uint64_t v72 = 4;
    if (v11 == 1
      && *ArgAttrsAttr == v72
      && (uint64_t v65 = v3,
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
          uint64_t v67 = v12,
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
      if (!v6) {
        goto LABEL_103;
      }
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
      uint64_t v69 = v6;
      uint64_t v70 = v13;
      unint64_t v14 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
      long long v15 = v14;
      if (v14) {
        unint64_t v14 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8);
      }
      uint64_t v73 = v15;
      uint64_t v74 = v14;
      long long v16 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
      uint64_t v72 = 4;
      if (v17 != 1) {
        goto LABEL_54;
      }
      if (*v16 == v72
        && (uint64_t v65 = v6,
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
            uint64_t v67 = v18,
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
            mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_103:
        if (!v5) {
          goto LABEL_104;
        }
        uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
        uint64_t v69 = v5;
        uint64_t v70 = v19;
        uint64_t v20 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
        int32x2_t v21 = v20;
        if (v20) {
          uint64_t v20 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
        }
        uint64_t v73 = v21;
        uint64_t v74 = v20;
        uint64_t v22 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
        uint64_t v72 = 4;
        if (v23 != 1) {
          goto LABEL_68;
        }
        if (*v22 == v72
          && (uint64_t v65 = v5,
              uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
              uint64_t v67 = v24,
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
LABEL_104:
          if (!v4) {
            return 1;
          }
          uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
          uint64_t v69 = v4;
          uint64_t v70 = v25;
          long long v26 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
          long long v27 = v26;
          if (v26) {
            long long v26 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
          }
          uint64_t v73 = v27;
          uint64_t v74 = v26;
          long long v28 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
          uint64_t v72 = 8;
          if (v29 == 1 && *v28 == v72)
          {
            uint64_t v65 = v4;
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
            uint64_t v67 = v30;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
              return 1;
            }
          }
          uint64_t v69 = "'mps.pooling_average' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements attrib"
                "ute of shape {8}";
          __int16 v71 = 259;
          mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
          uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
          if (v73) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
          }
          if (v81)
          {
            uint64_t v58 = (void **)__p;
            if (__p)
            {
              uint64_t v59 = v80;
              uint64_t v60 = __p;
              if (v80 != __p)
              {
                do
                  uint64_t v59 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v59 - 1);
                while (v59 != v58);
                uint64_t v60 = __p;
              }
              uint64_t v80 = v58;
              operator delete(v60);
            }
            uint64_t v35 = v77;
            if (!v77) {
              goto LABEL_98;
            }
            uint64_t v61 = v78;
            uint64_t v37 = v77;
            if (v78 == v77)
            {
LABEL_97:
              uint64_t v78 = v35;
              operator delete(v37);
LABEL_98:
              if (v75 != &v76) {
                free(v75);
              }
              return v31;
            }
            do
            {
              uint64_t v63 = (void *)*--v61;
              uint64_t v62 = v63;
              *uint64_t v61 = 0;
              if (v63) {
                operator delete[](v62);
              }
            }
            while (v61 != v35);
LABEL_96:
            uint64_t v37 = v77;
            goto LABEL_97;
          }
        }
        else
        {
LABEL_68:
          uint64_t v69 = "'mps.pooling_average' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attribute of shape {4}";
          __int16 v71 = 259;
          mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
          uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
          if (v73) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
          }
          if (v81)
          {
            uint64_t v52 = (void **)__p;
            if (__p)
            {
              unsigned int v53 = v80;
              uint64_t v54 = __p;
              if (v80 != __p)
              {
                do
                  unsigned int v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                uint64_t v54 = __p;
              }
              uint64_t v80 = v52;
              operator delete(v54);
            }
            uint64_t v35 = v77;
            if (!v77) {
              goto LABEL_98;
            }
            uint64_t v55 = v78;
            uint64_t v37 = v77;
            if (v78 == v77) {
              goto LABEL_97;
            }
            do
            {
              uint64_t v57 = (void *)*--v55;
              uint64_t v56 = v57;
              *uint64_t v55 = 0;
              if (v57) {
                operator delete[](v56);
              }
            }
            while (v55 != v35);
            goto LABEL_96;
          }
        }
      }
      else
      {
LABEL_54:
        uint64_t v69 = "'mps.pooling_average' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        __int16 v71 = 259;
        mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
        uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
        if (v73) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
        }
        if (v81)
        {
          uint64_t v46 = (void **)__p;
          if (__p)
          {
            uint64_t v47 = v80;
            uint64_t v48 = __p;
            if (v80 != __p)
            {
              do
                uint64_t v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
              while (v47 != v46);
              uint64_t v48 = __p;
            }
            uint64_t v80 = v46;
            operator delete(v48);
          }
          uint64_t v35 = v77;
          if (!v77) {
            goto LABEL_98;
          }
          uint64_t v49 = v78;
          uint64_t v37 = v77;
          if (v78 == v77) {
            goto LABEL_97;
          }
          do
          {
            uint64_t v51 = (void *)*--v49;
            uint64_t v50 = v51;
            void *v49 = 0;
            if (v51) {
              operator delete[](v50);
            }
          }
          while (v49 != v35);
          goto LABEL_96;
        }
      }
    }
    else
    {
      uint64_t v69 = "'mps.pooling_average' op attribute 'window_sizes' failed to satisfy constraint: ui64 elements attribute of shape {4}";
      __int16 v71 = 259;
      mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
      uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      if (v73) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
      }
      if (v81)
      {
        uint64_t v32 = (void **)__p;
        if (__p)
        {
          uint64_t v33 = v80;
          uint64_t v34 = __p;
          if (v80 != __p)
          {
            do
              uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            uint64_t v34 = __p;
          }
          uint64_t v80 = v32;
          operator delete(v34);
        }
        uint64_t v35 = v77;
        if (!v77) {
          goto LABEL_98;
        }
        uint64_t v36 = v78;
        uint64_t v37 = v77;
        if (v78 == v77) {
          goto LABEL_97;
        }
        do
        {
          BOOL v39 = (void *)*--v36;
          uint64_t v38 = v39;
          *uint64_t v36 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v36 != v35);
        goto LABEL_96;
      }
    }
  }
  else
  {
    uint64_t v69 = "'mps.pooling_average' op requires attribute 'window_sizes'";
    __int16 v71 = 259;
    mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
    uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    }
    if (v81)
    {
      uint64_t v40 = (void **)__p;
      if (__p)
      {
        uint64_t v41 = v80;
        uint64_t v42 = __p;
        if (v80 != __p)
        {
          do
            uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
          while (v41 != v40);
          uint64_t v42 = __p;
        }
        uint64_t v80 = v40;
        operator delete(v42);
      }
      uint64_t v35 = v77;
      if (!v77) {
        goto LABEL_98;
      }
      uint64_t v43 = v78;
      uint64_t v37 = v77;
      if (v78 == v77) {
        goto LABEL_97;
      }
      do
      {
        uint64_t v45 = (void *)*--v43;
        uint64_t v44 = v45;
        *uint64_t v43 = 0;
        if (v45) {
          operator delete[](v44);
        }
      }
      while (v43 != v35);
      goto LABEL_96;
    }
  }
  return v31;
}

uint64_t mlir::mps::inferPooling4DOpReturnTypes<mlir::mps::PoolAvgOpAdaptor>(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v19 = a3[6];
  uint64_t v16 = 0;
  uint64_t v8 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = a3[1];
  v18[0] = *a3;
  v18[1] = v9;
  long long v10 = a3[6];
  long long v11 = a3[4];
  v18[5] = a3[5];
  v18[6] = v10;
  long long v12 = a3[3];
  void v18[2] = a3[2];
  void v18[3] = v12;
  void v18[4] = v11;
  unint64_t v17 = *(void *)(mlir::ValueRange::dereference_iterator(&v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::Attribute::getContext((mlir::Attribute *)&v17);
  if (!mlir::mps::inferPool4DReturnType<mlir::mps::PoolAvgOpAdaptor>(a1, a2, v8, v18, &v16)) {
    return 0;
  }
  uint64_t v13 = v16;
  uint64_t v14 = *(unsigned int *)(a4 + 8);
  if (v14 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * v14) = v13;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t mlir::mps::verifyPooling4D<mlir::mps::PoolAvgOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  uint64_t v193 = (uint64_t *)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 44);
  uint64_t v5 = a1 + 64;
  uint64_t v6 = (v4 >> 23) & 1;
  uint64_t v7 = a1 + 64 + 16 * v6;
  if (!HIBYTE(*(_DWORD *)(a1 + 44))) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v7 + 40);
  if (v8)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v7 + 40))) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v192 = v9;
  uint64_t v10 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (v11)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v10 + 8))) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v191 = v12;
  uint64_t v13 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(v13 + 48);
  if (v14)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v13 + 48))) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v189 = 0;
  uint64_t v190 = v15;
  uint64_t v16 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v16 + 16))) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v189 = v18;
  }
  if (v15 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v190, 0);
    uint64_t v17 = v190;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v17, NumElements);
    while (1)
    {
      BOOL v20 = v186 == v183 && v187 == v184;
      if (v20 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v21 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_47:
          if (v182 < 0x41) {
            goto LABEL_77;
          }
LABEL_75:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v21 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v21 > 0) {
          goto LABEL_47;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v22 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v22 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_56;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v22;
      uint64_t v23 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v40 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v43 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          uint64_t v23 = (char *)v198;
          uint64_t v24 = (uint64_t *)((char *)v198 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          uint64_t v24 = &v194;
          uint64_t v23 = (char *)v198;
        }
      }
      else
      {
        uint64_t v24 = &v194;
      }
      uint64_t v25 = &v23[24 * v199];
      long long v26 = *(_OWORD *)v24;
      *((void *)v25 + 2) = v24[2];
      *(_OWORD *)uint64_t v25 = v26;
      uint64_t v27 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        long long v28 = (char *)v198;
        if (v27 >= v200)
        {
          unint64_t v41 = v27 + 1;
          BOOL v42 = (char *)v198 + 24 * v27 > (char *)&v194;
          if (v198 <= &v194 && v42)
          {
            int64_t v44 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            long long v28 = (char *)v198;
            uint64_t v29 = (uint64_t *)((char *)v198 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            uint64_t v29 = &v194;
            long long v28 = (char *)v198;
          }
        }
        else
        {
          uint64_t v29 = &v194;
        }
        uint64_t v30 = &v28[24 * v199];
        long long v31 = *(_OWORD *)v29;
        *((void *)v30 + 2) = v29[2];
        *(_OWORD *)uint64_t v30 = v31;
        ++v199;
      }
LABEL_56:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        uint64_t v32 = (void **)__p;
        if (__p)
        {
          uint64_t v33 = v205;
          uint64_t v34 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            uint64_t v34 = __p;
          }
          int v205 = v32;
          operator delete(v34);
        }
        uint64_t v35 = v202;
        if (v202)
        {
          uint64_t v36 = v203;
          uint64_t v37 = v202;
          if (v203 != v202)
          {
            do
            {
              BOOL v39 = (void *)*--v36;
              uint64_t v38 = v39;
              *uint64_t v36 = 0;
              if (v39) {
                operator delete[](v38);
              }
            }
            while (v36 != v35);
            uint64_t v37 = v202;
          }
          uint64_t v203 = v35;
          operator delete(v37);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_75;
      }
LABEL_77:
      if (v21 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v192 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v192, 0);
    uint64_t v45 = v192;
    uint64_t v46 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v45, v46);
    while (1)
    {
      BOOL v47 = v186 == v183 && v187 == v184;
      if (v47 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v48 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_102:
          if (v182 < 0x41) {
            goto LABEL_132;
          }
LABEL_130:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_132;
        }
      }
      else
      {
        uint64_t v48 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v48 > 0) {
          goto LABEL_102;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v49 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_111;
        }
      }
      else
      {
        uint64_t v49 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_111;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v49;
      uint64_t v50 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v67 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v70 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          uint64_t v50 = (char *)v198;
          uint64_t v51 = (uint64_t *)((char *)v198 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          uint64_t v51 = &v194;
          uint64_t v50 = (char *)v198;
        }
      }
      else
      {
        uint64_t v51 = &v194;
      }
      uint64_t v52 = &v50[24 * v199];
      long long v53 = *(_OWORD *)v51;
      *((void *)v52 + 2) = v51[2];
      *(_OWORD *)uint64_t v52 = v53;
      uint64_t v54 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        uint64_t v55 = (char *)v198;
        if (v54 >= v200)
        {
          unint64_t v68 = v54 + 1;
          BOOL v69 = (char *)v198 + 24 * v54 > (char *)&v194;
          if (v198 <= &v194 && v69)
          {
            int64_t v71 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            uint64_t v55 = (char *)v198;
            uint64_t v56 = (uint64_t *)((char *)v198 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            uint64_t v56 = &v194;
            uint64_t v55 = (char *)v198;
          }
        }
        else
        {
          uint64_t v56 = &v194;
        }
        uint64_t v57 = &v55[24 * v199];
        long long v58 = *(_OWORD *)v56;
        *((void *)v57 + 2) = v56[2];
        *(_OWORD *)uint64_t v57 = v58;
        ++v199;
      }
LABEL_111:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        uint64_t v59 = (void **)__p;
        if (__p)
        {
          uint64_t v60 = v205;
          uint64_t v61 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            uint64_t v61 = __p;
          }
          int v205 = v59;
          operator delete(v61);
        }
        uint64_t v62 = v202;
        if (v202)
        {
          uint64_t v63 = v203;
          unint64_t v64 = v202;
          if (v203 != v202)
          {
            do
            {
              uint64_t v66 = (void *)*--v63;
              uint64_t v65 = v66;
              *uint64_t v63 = 0;
              if (v66) {
                operator delete[](v65);
              }
            }
            while (v63 != v62);
            unint64_t v64 = v202;
          }
          uint64_t v203 = v62;
          operator delete(v64);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_130;
      }
LABEL_132:
      if (v48 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v191 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v191, 0);
    uint64_t v72 = v191;
    uint64_t v73 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v72, v73);
    while (1)
    {
      BOOL v74 = v186 == v183 && v187 == v184;
      if (v74 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v75 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_157:
          if (v182 < 0x41) {
            goto LABEL_187;
          }
LABEL_185:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_187;
        }
      }
      else
      {
        uint64_t v75 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v75 > 0) {
          goto LABEL_157;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v76 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_166;
        }
      }
      else
      {
        uint64_t v76 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_166;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v76;
      uint64_t v77 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v94 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v97 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          uint64_t v77 = (char *)v198;
          uint64_t v78 = (uint64_t *)((char *)v198 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          uint64_t v78 = &v194;
          uint64_t v77 = (char *)v198;
        }
      }
      else
      {
        uint64_t v78 = &v194;
      }
      unint64_t v79 = &v77[24 * v199];
      long long v80 = *(_OWORD *)v78;
      *((void *)v79 + 2) = v78[2];
      *(_OWORD *)unint64_t v79 = v80;
      uint64_t v81 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        uint64_t v82 = (char *)v198;
        if (v81 >= v200)
        {
          unint64_t v95 = v81 + 1;
          BOOL v96 = (char *)v198 + 24 * v81 > (char *)&v194;
          if (v198 <= &v194 && v96)
          {
            int64_t v98 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            uint64_t v82 = (char *)v198;
            uint64_t v83 = (uint64_t *)((char *)v198 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            uint64_t v83 = &v194;
            uint64_t v82 = (char *)v198;
          }
        }
        else
        {
          uint64_t v83 = &v194;
        }
        uint64_t v84 = &v82[24 * v199];
        long long v85 = *(_OWORD *)v83;
        *((void *)v84 + 2) = v83[2];
        *(_OWORD *)uint64_t v84 = v85;
        ++v199;
      }
LABEL_166:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        uint64_t v86 = (void **)__p;
        if (__p)
        {
          uint64_t v87 = v205;
          uint64_t v88 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
            while (v87 != v86);
            uint64_t v88 = __p;
          }
          int v205 = v86;
          operator delete(v88);
        }
        uint64_t v89 = v202;
        if (v202)
        {
          uint64_t v90 = v203;
          uint64_t v91 = v202;
          if (v203 != v202)
          {
            do
            {
              uint64_t v93 = (void *)*--v90;
              uint64_t v92 = v93;
              void *v90 = 0;
              if (v93) {
                operator delete[](v92);
              }
            }
            while (v90 != v89);
            uint64_t v91 = v202;
          }
          uint64_t v203 = v89;
          operator delete(v91);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_185;
      }
LABEL_187:
      if (v75 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v189 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189) == 8)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v189, 0);
    uint64_t v99 = v189;
    uint64_t v100 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v99, v100);
    while (1)
    {
      BOOL v101 = v186 == v183 && v187 == v184;
      if (v101 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v102 = *(void *)v181;
        if ((*(void *)v181 & 0x8000000000000000) == 0)
        {
LABEL_212:
          if (v182 < 0x41) {
            goto LABEL_242;
          }
LABEL_240:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_242;
        }
      }
      else
      {
        uint64_t v102 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if ((v102 & 0x8000000000000000) == 0) {
          goto LABEL_212;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v103 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_221;
        }
      }
      else
      {
        uint64_t v103 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_221;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v103;
      uint64_t v104 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v121 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v124 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          uint64_t v104 = (char *)v198;
          uint64_t v105 = (uint64_t *)((char *)v198 + v124);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          uint64_t v105 = &v194;
          uint64_t v104 = (char *)v198;
        }
      }
      else
      {
        uint64_t v105 = &v194;
      }
      uint64_t v106 = &v104[24 * v199];
      long long v107 = *(_OWORD *)v105;
      *((void *)v106 + 2) = v105[2];
      *(_OWORD *)uint64_t v106 = v107;
      uint64_t v108 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be non-negative.";
        uint64_t v196 = 36;
        unint64_t v109 = (char *)v198;
        if (v108 >= v200)
        {
          unint64_t v122 = v108 + 1;
          BOOL v123 = (char *)v198 + 24 * v108 > (char *)&v194;
          if (v198 <= &v194 && v123)
          {
            int64_t v125 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            unint64_t v109 = (char *)v198;
            BOOL v110 = (uint64_t *)((char *)v198 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            BOOL v110 = &v194;
            unint64_t v109 = (char *)v198;
          }
        }
        else
        {
          BOOL v110 = &v194;
        }
        uint64_t v111 = &v109[24 * v199];
        long long v112 = *(_OWORD *)v110;
        *((void *)v111 + 2) = v110[2];
        *(_OWORD *)uint64_t v111 = v112;
        ++v199;
      }
LABEL_221:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        int v113 = (void **)__p;
        if (__p)
        {
          uint64_t v114 = v205;
          uint64_t v115 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v114 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v114 - 1);
            while (v114 != v113);
            uint64_t v115 = __p;
          }
          int v205 = v113;
          operator delete(v115);
        }
        uint64_t v116 = v202;
        if (v202)
        {
          unint64_t v117 = v203;
          uint64_t v118 = v202;
          if (v203 != v202)
          {
            do
            {
              unint64_t v120 = (void *)*--v117;
              uint64_t v119 = v120;
              *unint64_t v117 = 0;
              if (v120) {
                operator delete[](v119);
              }
            }
            while (v117 != v116);
            uint64_t v118 = v202;
          }
          uint64_t v203 = v116;
          operator delete(v118);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_240;
      }
LABEL_242:
      if (v102 < 0) {
        return v17;
      }
      ++v188;
    }
  }
  long long v126 = &v193[2 * (((unint64_t)*((unsigned int *)v193 + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)v193 + 11))) {
    long long v126 = 0;
  }
  int v127 = *(_DWORD *)(v126[4] + 8);
  if (v127 == 3)
  {
    __int16 v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      long long v187 = "not supported by this op.";
      uint64_t v188 = 25;
      uint64_t v142 = (uint64_t *)&v186;
      uint64_t v143 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v170 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          int64_t v174 = (char *)&v186 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          uint64_t v143 = (char *)v198;
          uint64_t v142 = (uint64_t *)((char *)v198 + v174);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          uint64_t v142 = (uint64_t *)&v186;
          uint64_t v143 = (char *)v198;
        }
      }
      uint64_t v144 = &v143[24 * v199];
      long long v145 = *(_OWORD *)v142;
      *((void *)v144 + 2) = v142[2];
      *(_OWORD *)uint64_t v144 = v145;
      ++v199;
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    }
    if (v206)
    {
      long long v146 = (void **)__p;
      if (__p)
      {
        uint64_t v147 = v205;
        uint64_t v148 = __p;
        if (v205 != __p)
        {
          do
            uint64_t v147 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v147 - 1);
          while (v147 != v146);
          uint64_t v148 = __p;
        }
        int v205 = v146;
        operator delete(v148);
      }
      uint64_t v149 = v202;
      if (!v202) {
        goto LABEL_312;
      }
      uint64_t v150 = v203;
      uint64_t v151 = v202;
      if (v203 == v202) {
        goto LABEL_311;
      }
      do
      {
        uint64_t v153 = (void *)*--v150;
        uint64_t v152 = v153;
        void *v150 = 0;
        if (v153) {
          operator delete[](v152);
        }
      }
      while (v150 != v149);
      goto LABEL_310;
    }
  }
  else
  {
    if (v127 || v189)
    {
      if (a2)
      {
        unint64_t v128 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v128 + 8))
        {
          uint64_t v129 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v128 + 8);
          uint64_t v130 = a3;
          unint64_t v186 = v128;
          long long v187 = (const char *)v129;
          if (a3) {
            goto LABEL_260;
          }
LABEL_285:
          unint64_t v131 = 0;
          unint64_t v183 = 0;
          uint64_t v184 = 0;
          if (v128) {
            goto LABEL_262;
          }
          return 1;
        }
        unint64_t v128 = 0;
        uint64_t v130 = a3;
        unint64_t v186 = 0;
        long long v187 = 0;
        if (!a3) {
          goto LABEL_285;
        }
      }
      else
      {
        unint64_t v128 = 0;
        unint64_t v186 = 0;
        long long v187 = 0;
        uint64_t v130 = a3;
        if (!a3) {
          goto LABEL_285;
        }
      }
LABEL_260:
      unint64_t v131 = *(void *)(v130 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v131 + 8))
      {
        uint64_t v132 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v131 + 8);
        unint64_t v183 = v131;
        uint64_t v184 = v132;
        if (v128)
        {
LABEL_262:
          uint64_t v17 = 1;
          if (*(_UNKNOWN **)(*(void *)v128 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          {
            if (v131)
            {
              if (*(_UNKNOWN **)(*(void *)v131 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              {
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                uint64_t v134 = v133;
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                if (v134 != v135)
                {
                  __int16 v180 = 259;
                  mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                  uint64_t v194 = v136;
                  uint64_t v137 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)v197, &v194);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                  uint64_t v181 = v139;
                  uint64_t v140 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v138, (uint64_t *)&v181);
                  uint64_t v141 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v140, ".");
                  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v141);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v197);
                }
              }
            }
          }
          return v17;
        }
      }
      else
      {
        unint64_t v131 = 0;
        unint64_t v183 = 0;
        uint64_t v184 = 0;
        if (v128) {
          goto LABEL_262;
        }
      }
      return 1;
    }
    __int16 v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      long long v187 = "invalid type. Must be specified when ";
      uint64_t v188 = 37;
      uint64_t v154 = (uint64_t *)&v186;
      unsigned int v155 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v171 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          int64_t v175 = (char *)&v186 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          unsigned int v155 = (char *)v198;
          uint64_t v154 = (uint64_t *)((char *)v198 + v175);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          uint64_t v154 = (uint64_t *)&v186;
          unsigned int v155 = (char *)v198;
        }
      }
      uint64_t v156 = &v155[24 * v199];
      long long v157 = *(_OWORD *)v154;
      *((void *)v156 + 2) = v154[2];
      *(_OWORD *)uint64_t v156 = v157;
      uint64_t v158 = ++v199;
      if (v197[0])
      {
        LODWORD(v186) = 3;
        uint64_t v188 = 31;
        uint64_t v159 = (uint64_t *)&v186;
        uint64_t v160 = (char *)v198;
        if (v158 >= v200)
        {
          unint64_t v172 = v158 + 1;
          BOOL v173 = (char *)v198 + 24 * v158 > (char *)&v186;
          if (v198 <= &v186 && v173)
          {
            int64_t v176 = (char *)&v186 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            uint64_t v160 = (char *)v198;
            uint64_t v159 = (uint64_t *)((char *)v198 + v176);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            uint64_t v159 = (uint64_t *)&v186;
            uint64_t v160 = (char *)v198;
          }
        }
        uint64_t v161 = &v160[24 * v199];
        long long v162 = *(_OWORD *)v159;
        *((void *)v161 + 2) = v159[2];
        *(_OWORD *)uint64_t v161 = v162;
        ++v199;
      }
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    }
    if (v206)
    {
      long long v163 = (void **)__p;
      if (__p)
      {
        uint64_t v164 = v205;
        uint64_t v165 = __p;
        if (v205 != __p)
        {
          do
            uint64_t v164 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v164 - 1);
          while (v164 != v163);
          uint64_t v165 = __p;
        }
        int v205 = v163;
        operator delete(v165);
      }
      uint64_t v149 = v202;
      if (!v202) {
        goto LABEL_312;
      }
      uint64_t v166 = v203;
      uint64_t v151 = v202;
      if (v203 == v202)
      {
LABEL_311:
        uint64_t v203 = v149;
        operator delete(v151);
LABEL_312:
        if (v198 != v201) {
          free(v198);
        }
        return v17;
      }
      do
      {
        long long v168 = (void *)*--v166;
        uint64_t v167 = v168;
        void *v166 = 0;
        if (v168) {
          operator delete[](v167);
        }
      }
      while (v166 != v149);
LABEL_310:
      uint64_t v151 = v202;
      goto LABEL_311;
    }
  }
  return v17;
}

uint64_t mlir::mps::PoolL2NormOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, long long a9, uint64_t a10)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    long long v15 = *a7;
    long long v16 = a7[1];
    long long v17 = a7[2];
    uint64_t v18 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v18 = 0;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
  }
  *(void *)&long long v26 = a6;
  BYTE8(v26) = 0;
  v27[0] = 0;
  *(_OWORD *)&unsigned char v27[8] = v15;
  *(_OWORD *)&v27[24] = v16;
  *(_OWORD *)&v27[40] = v17;
  *(void *)&v27[56] = v18;
  long long v28 = a9;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
    if (v27[0]) {
      v27[0] = 0;
    }
    mlir::OperationName::OperationName((char *)&v26 + 8, "mps.pooling_l2_norm", 19, Context);
    v27[0] = 1;
  }
  *(void *)&long long v29 = a4;
  *((void *)&v29 + 1) = a5;
  if (a5 && (uint64_t v20 = mlir::UnknownLoc::get(this, a2), mlir::mps::PoolL2NormOpAdaptor::verify(&v26, v20)))
  {
    void v25[4] = *(_OWORD *)&v27[48];
    void v25[5] = v28;
    v25[6] = v29;
    v25[0] = v26;
    v25[1] = *(_OWORD *)v27;
    void v25[2] = *(_OWORD *)&v27[16];
    void v25[3] = *(_OWORD *)&v27[32];
    return mlir::mps::inferPooling4DOpReturnTypes<mlir::mps::PoolAvgOpAdaptor>((uint64_t)a2, a3, v25, a10);
  }
  else
  {
    uint64_t v22 = mlir::Float32Type::get(this, a2);
    uint64_t v23 = mlir::UnrankedTensorType::get(v22);
    uint64_t v24 = *(unsigned int *)(a10 + 8);
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(void *)(*(void *)a10 + 8 * v24) = v23;
    ++*(_DWORD *)(a10 + 8);
    return 1;
  }
}

uint64_t mlir::mps::PoolL2NormOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v3 = (const char *)a1[9];
  if (v3)
  {
    uint64_t v5 = (const char *)a1[4];
    unint64_t v4 = (const char *)a1[5];
    uint64_t v6 = (const char *)a1[8];
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
    BOOL v69 = v3;
    uint64_t v70 = v7;
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
    uint64_t v9 = Type;
    if (Type) {
      Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
    }
    uint64_t v73 = v9;
    BOOL v74 = Type;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
    uint64_t v72 = 4;
    if (v11 == 1
      && *ArgAttrsAttr == v72
      && (uint64_t v65 = v3,
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
          uint64_t v67 = v12,
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
      if (!v6) {
        goto LABEL_103;
      }
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
      BOOL v69 = v6;
      uint64_t v70 = v13;
      uint64_t v14 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
      long long v15 = v14;
      if (v14) {
        uint64_t v14 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8);
      }
      uint64_t v73 = v15;
      BOOL v74 = v14;
      long long v16 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
      uint64_t v72 = 4;
      if (v17 != 1) {
        goto LABEL_54;
      }
      if (*v16 == v72
        && (uint64_t v65 = v6,
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
            uint64_t v67 = v18,
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
            mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_103:
        if (!v5) {
          goto LABEL_104;
        }
        uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
        BOOL v69 = v5;
        uint64_t v70 = v19;
        uint64_t v20 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
        uint64_t v21 = v20;
        if (v20) {
          uint64_t v20 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
        }
        uint64_t v73 = v21;
        BOOL v74 = v20;
        uint64_t v22 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
        uint64_t v72 = 4;
        if (v23 != 1) {
          goto LABEL_68;
        }
        if (*v22 == v72
          && (uint64_t v65 = v5,
              uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65),
              uint64_t v67 = v24,
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
LABEL_104:
          if (!v4) {
            return 1;
          }
          uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
          BOOL v69 = v4;
          uint64_t v70 = v25;
          long long v26 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v69);
          uint64_t v27 = v26;
          if (v26) {
            long long v26 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
          }
          uint64_t v73 = v27;
          BOOL v74 = v26;
          long long v28 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
          uint64_t v72 = 8;
          if (v29 == 1 && *v28 == v72)
          {
            uint64_t v65 = v4;
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
            uint64_t v67 = v30;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)) {
              return 1;
            }
          }
          BOOL v69 = "'mps.pooling_l2_norm' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements attrib"
                "ute of shape {8}";
          __int16 v71 = 259;
          mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
          uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
          if (v73) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
          }
          if (v81)
          {
            long long v58 = (void **)__p;
            if (__p)
            {
              uint64_t v59 = v80;
              uint64_t v60 = __p;
              if (v80 != __p)
              {
                do
                  uint64_t v59 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v59 - 1);
                while (v59 != v58);
                uint64_t v60 = __p;
              }
              long long v80 = v58;
              operator delete(v60);
            }
            uint64_t v35 = v77;
            if (!v77) {
              goto LABEL_98;
            }
            uint64_t v61 = v78;
            uint64_t v37 = v77;
            if (v78 == v77)
            {
LABEL_97:
              uint64_t v78 = v35;
              operator delete(v37);
LABEL_98:
              if (v75 != &v76) {
                free(v75);
              }
              return v31;
            }
            do
            {
              uint64_t v63 = (void *)*--v61;
              uint64_t v62 = v63;
              *uint64_t v61 = 0;
              if (v63) {
                operator delete[](v62);
              }
            }
            while (v61 != v35);
LABEL_96:
            uint64_t v37 = v77;
            goto LABEL_97;
          }
        }
        else
        {
LABEL_68:
          BOOL v69 = "'mps.pooling_l2_norm' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attribute of shape {4}";
          __int16 v71 = 259;
          mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
          uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
          if (v73) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
          }
          if (v81)
          {
            uint64_t v52 = (void **)__p;
            if (__p)
            {
              long long v53 = v80;
              uint64_t v54 = __p;
              if (v80 != __p)
              {
                do
                  long long v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
                while (v53 != v52);
                uint64_t v54 = __p;
              }
              long long v80 = v52;
              operator delete(v54);
            }
            uint64_t v35 = v77;
            if (!v77) {
              goto LABEL_98;
            }
            uint64_t v55 = v78;
            uint64_t v37 = v77;
            if (v78 == v77) {
              goto LABEL_97;
            }
            do
            {
              uint64_t v57 = (void *)*--v55;
              uint64_t v56 = v57;
              *uint64_t v55 = 0;
              if (v57) {
                operator delete[](v56);
              }
            }
            while (v55 != v35);
            goto LABEL_96;
          }
        }
      }
      else
      {
LABEL_54:
        BOOL v69 = "'mps.pooling_l2_norm' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        __int16 v71 = 259;
        mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
        uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
        if (v73) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
        }
        if (v81)
        {
          uint64_t v46 = (void **)__p;
          if (__p)
          {
            BOOL v47 = v80;
            uint64_t v48 = __p;
            if (v80 != __p)
            {
              do
                BOOL v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
              while (v47 != v46);
              uint64_t v48 = __p;
            }
            long long v80 = v46;
            operator delete(v48);
          }
          uint64_t v35 = v77;
          if (!v77) {
            goto LABEL_98;
          }
          uint64_t v49 = v78;
          uint64_t v37 = v77;
          if (v78 == v77) {
            goto LABEL_97;
          }
          do
          {
            uint64_t v51 = (void *)*--v49;
            uint64_t v50 = v51;
            void *v49 = 0;
            if (v51) {
              operator delete[](v50);
            }
          }
          while (v49 != v35);
          goto LABEL_96;
        }
      }
    }
    else
    {
      BOOL v69 = "'mps.pooling_l2_norm' op attribute 'window_sizes' failed to satisfy constraint: ui64 elements attribute of shape {4}";
      __int16 v71 = 259;
      mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
      uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
      if (v73) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
      }
      if (v81)
      {
        uint64_t v32 = (void **)__p;
        if (__p)
        {
          uint64_t v33 = v80;
          uint64_t v34 = __p;
          if (v80 != __p)
          {
            do
              uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            uint64_t v34 = __p;
          }
          long long v80 = v32;
          operator delete(v34);
        }
        uint64_t v35 = v77;
        if (!v77) {
          goto LABEL_98;
        }
        uint64_t v36 = v78;
        uint64_t v37 = v77;
        if (v78 == v77) {
          goto LABEL_97;
        }
        do
        {
          BOOL v39 = (void *)*--v36;
          uint64_t v38 = v39;
          *uint64_t v36 = 0;
          if (v39) {
            operator delete[](v38);
          }
        }
        while (v36 != v35);
        goto LABEL_96;
      }
    }
  }
  else
  {
    BOOL v69 = "'mps.pooling_l2_norm' op requires attribute 'window_sizes'";
    __int16 v71 = 259;
    mlir::emitError(a2, (uint64_t)&v69, (uint64_t)&v73);
    uint64_t v31 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    }
    if (v81)
    {
      unint64_t v40 = (void **)__p;
      if (__p)
      {
        unint64_t v41 = v80;
        BOOL v42 = __p;
        if (v80 != __p)
        {
          do
            unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
          while (v41 != v40);
          BOOL v42 = __p;
        }
        long long v80 = v40;
        operator delete(v42);
      }
      uint64_t v35 = v77;
      if (!v77) {
        goto LABEL_98;
      }
      int64_t v43 = v78;
      uint64_t v37 = v77;
      if (v78 == v77) {
        goto LABEL_97;
      }
      do
      {
        uint64_t v45 = (void *)*--v43;
        int64_t v44 = v45;
        *int64_t v43 = 0;
        if (v45) {
          operator delete[](v44);
        }
      }
      while (v43 != v35);
      goto LABEL_96;
    }
  }
  return v31;
}

uint64_t mlir::mps::verifyPooling4D<mlir::mps::PoolMaxGradientOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  uint64_t v193 = (uint64_t *)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 44);
  uint64_t v5 = a1 + 64;
  uint64_t v6 = (v4 >> 23) & 1;
  uint64_t v7 = a1 + 64 + 16 * v6;
  if (!HIBYTE(*(_DWORD *)(a1 + 44))) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v7 + 56);
  if (v8)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v7 + 56))) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v192 = v9;
  uint64_t v10 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (v11)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v10 + 8))) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v191 = v12;
  uint64_t v13 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(v13 + 64);
  if (v14)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v13 + 64))) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v189 = 0;
  uint64_t v190 = v15;
  uint64_t v16 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v16 + 16))) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v189 = v18;
  }
  if (v15 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v190, 0);
    uint64_t v17 = v190;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v17, NumElements);
    while (1)
    {
      BOOL v20 = v186 == v183 && v187 == v184;
      if (v20 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v21 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_47:
          if (v182 < 0x41) {
            goto LABEL_77;
          }
LABEL_75:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v21 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v21 > 0) {
          goto LABEL_47;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v22 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v22 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_56;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v22;
      uint64_t v23 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v40 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v43 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          uint64_t v23 = (char *)v198;
          uint64_t v24 = (uint64_t *)((char *)v198 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          uint64_t v24 = &v194;
          uint64_t v23 = (char *)v198;
        }
      }
      else
      {
        uint64_t v24 = &v194;
      }
      uint64_t v25 = &v23[24 * v199];
      long long v26 = *(_OWORD *)v24;
      *((void *)v25 + 2) = v24[2];
      *(_OWORD *)uint64_t v25 = v26;
      uint64_t v27 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        long long v28 = (char *)v198;
        if (v27 >= v200)
        {
          unint64_t v41 = v27 + 1;
          BOOL v42 = (char *)v198 + 24 * v27 > (char *)&v194;
          if (v198 <= &v194 && v42)
          {
            int64_t v44 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            long long v28 = (char *)v198;
            uint64_t v29 = (uint64_t *)((char *)v198 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            uint64_t v29 = &v194;
            long long v28 = (char *)v198;
          }
        }
        else
        {
          uint64_t v29 = &v194;
        }
        uint64_t v30 = &v28[24 * v199];
        long long v31 = *(_OWORD *)v29;
        *((void *)v30 + 2) = v29[2];
        *(_OWORD *)uint64_t v30 = v31;
        ++v199;
      }
LABEL_56:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        uint64_t v32 = (void **)__p;
        if (__p)
        {
          uint64_t v33 = v205;
          uint64_t v34 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            uint64_t v34 = __p;
          }
          int v205 = v32;
          operator delete(v34);
        }
        uint64_t v35 = v202;
        if (v202)
        {
          uint64_t v36 = v203;
          uint64_t v37 = v202;
          if (v203 != v202)
          {
            do
            {
              BOOL v39 = (void *)*--v36;
              uint64_t v38 = v39;
              *uint64_t v36 = 0;
              if (v39) {
                operator delete[](v38);
              }
            }
            while (v36 != v35);
            uint64_t v37 = v202;
          }
          uint64_t v203 = v35;
          operator delete(v37);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_75;
      }
LABEL_77:
      if (v21 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v192 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v192, 0);
    uint64_t v45 = v192;
    uint64_t v46 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v45, v46);
    while (1)
    {
      BOOL v47 = v186 == v183 && v187 == v184;
      if (v47 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v48 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_102:
          if (v182 < 0x41) {
            goto LABEL_132;
          }
LABEL_130:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_132;
        }
      }
      else
      {
        uint64_t v48 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v48 > 0) {
          goto LABEL_102;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v49 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_111;
        }
      }
      else
      {
        uint64_t v49 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_111;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v49;
      uint64_t v50 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v67 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v70 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          uint64_t v50 = (char *)v198;
          uint64_t v51 = (uint64_t *)((char *)v198 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          uint64_t v51 = &v194;
          uint64_t v50 = (char *)v198;
        }
      }
      else
      {
        uint64_t v51 = &v194;
      }
      uint64_t v52 = &v50[24 * v199];
      long long v53 = *(_OWORD *)v51;
      *((void *)v52 + 2) = v51[2];
      *(_OWORD *)uint64_t v52 = v53;
      uint64_t v54 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        uint64_t v55 = (char *)v198;
        if (v54 >= v200)
        {
          unint64_t v68 = v54 + 1;
          BOOL v69 = (char *)v198 + 24 * v54 > (char *)&v194;
          if (v198 <= &v194 && v69)
          {
            int64_t v71 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            uint64_t v55 = (char *)v198;
            uint64_t v56 = (uint64_t *)((char *)v198 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            uint64_t v56 = &v194;
            uint64_t v55 = (char *)v198;
          }
        }
        else
        {
          uint64_t v56 = &v194;
        }
        uint64_t v57 = &v55[24 * v199];
        long long v58 = *(_OWORD *)v56;
        *((void *)v57 + 2) = v56[2];
        *(_OWORD *)uint64_t v57 = v58;
        ++v199;
      }
LABEL_111:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        uint64_t v59 = (void **)__p;
        if (__p)
        {
          uint64_t v60 = v205;
          uint64_t v61 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            uint64_t v61 = __p;
          }
          int v205 = v59;
          operator delete(v61);
        }
        uint64_t v62 = v202;
        if (v202)
        {
          uint64_t v63 = v203;
          unint64_t v64 = v202;
          if (v203 != v202)
          {
            do
            {
              uint64_t v66 = (void *)*--v63;
              uint64_t v65 = v66;
              *uint64_t v63 = 0;
              if (v66) {
                operator delete[](v65);
              }
            }
            while (v63 != v62);
            unint64_t v64 = v202;
          }
          uint64_t v203 = v62;
          operator delete(v64);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_130;
      }
LABEL_132:
      if (v48 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v191 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v191, 0);
    uint64_t v72 = v191;
    uint64_t v73 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v72, v73);
    while (1)
    {
      BOOL v74 = v186 == v183 && v187 == v184;
      if (v74 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v75 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_157:
          if (v182 < 0x41) {
            goto LABEL_187;
          }
LABEL_185:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_187;
        }
      }
      else
      {
        uint64_t v75 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v75 > 0) {
          goto LABEL_157;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v76 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_166;
        }
      }
      else
      {
        uint64_t v76 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_166;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v76;
      uint64_t v77 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v94 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v97 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          uint64_t v77 = (char *)v198;
          uint64_t v78 = (uint64_t *)((char *)v198 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          uint64_t v78 = &v194;
          uint64_t v77 = (char *)v198;
        }
      }
      else
      {
        uint64_t v78 = &v194;
      }
      unint64_t v79 = &v77[24 * v199];
      long long v80 = *(_OWORD *)v78;
      *((void *)v79 + 2) = v78[2];
      *(_OWORD *)unint64_t v79 = v80;
      uint64_t v81 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        uint64_t v82 = (char *)v198;
        if (v81 >= v200)
        {
          unint64_t v95 = v81 + 1;
          BOOL v96 = (char *)v198 + 24 * v81 > (char *)&v194;
          if (v198 <= &v194 && v96)
          {
            int64_t v98 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            uint64_t v82 = (char *)v198;
            uint64_t v83 = (uint64_t *)((char *)v198 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            uint64_t v83 = &v194;
            uint64_t v82 = (char *)v198;
          }
        }
        else
        {
          uint64_t v83 = &v194;
        }
        uint64_t v84 = &v82[24 * v199];
        long long v85 = *(_OWORD *)v83;
        *((void *)v84 + 2) = v83[2];
        *(_OWORD *)uint64_t v84 = v85;
        ++v199;
      }
LABEL_166:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        uint64_t v86 = (void **)__p;
        if (__p)
        {
          uint64_t v87 = v205;
          uint64_t v88 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
            while (v87 != v86);
            uint64_t v88 = __p;
          }
          int v205 = v86;
          operator delete(v88);
        }
        uint64_t v89 = v202;
        if (v202)
        {
          uint64_t v90 = v203;
          uint64_t v91 = v202;
          if (v203 != v202)
          {
            do
            {
              uint64_t v93 = (void *)*--v90;
              uint64_t v92 = v93;
              void *v90 = 0;
              if (v93) {
                operator delete[](v92);
              }
            }
            while (v90 != v89);
            uint64_t v91 = v202;
          }
          uint64_t v203 = v89;
          operator delete(v91);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_185;
      }
LABEL_187:
      if (v75 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v189 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189) == 8)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v189, 0);
    uint64_t v99 = v189;
    uint64_t v100 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v99, v100);
    while (1)
    {
      BOOL v101 = v186 == v183 && v187 == v184;
      if (v101 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v102 = *(void *)v181;
        if ((*(void *)v181 & 0x8000000000000000) == 0)
        {
LABEL_212:
          if (v182 < 0x41) {
            goto LABEL_242;
          }
LABEL_240:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_242;
        }
      }
      else
      {
        uint64_t v102 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if ((v102 & 0x8000000000000000) == 0) {
          goto LABEL_212;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v103 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_221;
        }
      }
      else
      {
        uint64_t v103 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_221;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v103;
      uint64_t v104 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v121 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v124 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          uint64_t v104 = (char *)v198;
          uint64_t v105 = (uint64_t *)((char *)v198 + v124);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          uint64_t v105 = &v194;
          uint64_t v104 = (char *)v198;
        }
      }
      else
      {
        uint64_t v105 = &v194;
      }
      uint64_t v106 = &v104[24 * v199];
      long long v107 = *(_OWORD *)v105;
      *((void *)v106 + 2) = v105[2];
      *(_OWORD *)uint64_t v106 = v107;
      uint64_t v108 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be non-negative.";
        uint64_t v196 = 36;
        unint64_t v109 = (char *)v198;
        if (v108 >= v200)
        {
          unint64_t v122 = v108 + 1;
          BOOL v123 = (char *)v198 + 24 * v108 > (char *)&v194;
          if (v198 <= &v194 && v123)
          {
            int64_t v125 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            unint64_t v109 = (char *)v198;
            BOOL v110 = (uint64_t *)((char *)v198 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            BOOL v110 = &v194;
            unint64_t v109 = (char *)v198;
          }
        }
        else
        {
          BOOL v110 = &v194;
        }
        uint64_t v111 = &v109[24 * v199];
        long long v112 = *(_OWORD *)v110;
        *((void *)v111 + 2) = v110[2];
        *(_OWORD *)uint64_t v111 = v112;
        ++v199;
      }
LABEL_221:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        int v113 = (void **)__p;
        if (__p)
        {
          uint64_t v114 = v205;
          uint64_t v115 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v114 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v114 - 1);
            while (v114 != v113);
            uint64_t v115 = __p;
          }
          int v205 = v113;
          operator delete(v115);
        }
        uint64_t v116 = v202;
        if (v202)
        {
          unint64_t v117 = v203;
          uint64_t v118 = v202;
          if (v203 != v202)
          {
            do
            {
              unint64_t v120 = (void *)*--v117;
              uint64_t v119 = v120;
              *unint64_t v117 = 0;
              if (v120) {
                operator delete[](v119);
              }
            }
            while (v117 != v116);
            uint64_t v118 = v202;
          }
          uint64_t v203 = v116;
          operator delete(v118);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_240;
      }
LABEL_242:
      if (v102 < 0) {
        return v17;
      }
      ++v188;
    }
  }
  if (HIBYTE(*((_DWORD *)v193 + 11))) {
    long long v126 = &v193[2 * (((unint64_t)*((unsigned int *)v193 + 11) >> 23) & 1) + 8];
  }
  else {
    long long v126 = 0;
  }
  int v127 = *(_DWORD *)(v126[6] + 8);
  if (v127 == 3)
  {
    __int16 v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      long long v187 = "not supported by this op.";
      uint64_t v188 = 25;
      uint64_t v142 = (uint64_t *)&v186;
      uint64_t v143 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v170 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          int64_t v174 = (char *)&v186 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          uint64_t v143 = (char *)v198;
          uint64_t v142 = (uint64_t *)((char *)v198 + v174);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          uint64_t v142 = (uint64_t *)&v186;
          uint64_t v143 = (char *)v198;
        }
      }
      uint64_t v144 = &v143[24 * v199];
      long long v145 = *(_OWORD *)v142;
      *((void *)v144 + 2) = v142[2];
      *(_OWORD *)uint64_t v144 = v145;
      ++v199;
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    }
    if (v206)
    {
      long long v146 = (void **)__p;
      if (__p)
      {
        uint64_t v147 = v205;
        uint64_t v148 = __p;
        if (v205 != __p)
        {
          do
            uint64_t v147 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v147 - 1);
          while (v147 != v146);
          uint64_t v148 = __p;
        }
        int v205 = v146;
        operator delete(v148);
      }
      uint64_t v149 = v202;
      if (!v202) {
        goto LABEL_311;
      }
      uint64_t v150 = v203;
      uint64_t v151 = v202;
      if (v203 == v202) {
        goto LABEL_310;
      }
      do
      {
        uint64_t v153 = (void *)*--v150;
        uint64_t v152 = v153;
        void *v150 = 0;
        if (v153) {
          operator delete[](v152);
        }
      }
      while (v150 != v149);
      goto LABEL_309;
    }
  }
  else
  {
    if (v127 || v189)
    {
      if (!mlir::mps::checkInputTensors<mlir::mps::PoolMaxGradientOp>((uint64_t)v193)) {
        return 0;
      }
      if (a2)
      {
        unint64_t v128 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v128 + 8))
        {
          uint64_t v129 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v128 + 8);
          uint64_t v130 = a3;
          unint64_t v186 = v128;
          long long v187 = (const char *)v129;
          if (a3) {
            goto LABEL_262;
          }
LABEL_288:
          unint64_t v131 = 0;
          unint64_t v183 = 0;
          uint64_t v184 = 0;
          if (v128) {
            goto LABEL_264;
          }
          return 1;
        }
        unint64_t v128 = 0;
        uint64_t v130 = a3;
        unint64_t v186 = 0;
        long long v187 = 0;
        if (!a3) {
          goto LABEL_288;
        }
      }
      else
      {
        unint64_t v128 = 0;
        unint64_t v186 = 0;
        long long v187 = 0;
        uint64_t v130 = a3;
        if (!a3) {
          goto LABEL_288;
        }
      }
LABEL_262:
      unint64_t v131 = *(void *)(v130 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v131 + 8))
      {
        uint64_t v132 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v131 + 8);
        unint64_t v183 = v131;
        uint64_t v184 = v132;
        if (v128)
        {
LABEL_264:
          uint64_t v17 = 1;
          if (*(_UNKNOWN **)(*(void *)v128 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          {
            if (v131)
            {
              if (*(_UNKNOWN **)(*(void *)v131 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              {
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                uint64_t v134 = v133;
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                if (v134 != v135)
                {
                  __int16 v180 = 259;
                  mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                  uint64_t v194 = v136;
                  uint64_t v137 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)v197, &v194);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                  uint64_t v181 = v139;
                  uint64_t v140 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v138, (uint64_t *)&v181);
                  uint64_t v141 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v140, ".");
                  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v141);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v197);
                }
              }
            }
          }
          return v17;
        }
      }
      else
      {
        unint64_t v131 = 0;
        unint64_t v183 = 0;
        uint64_t v184 = 0;
        if (v128) {
          goto LABEL_264;
        }
      }
      return 1;
    }
    __int16 v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      long long v187 = "invalid type. Must be specified when ";
      uint64_t v188 = 37;
      uint64_t v154 = (uint64_t *)&v186;
      unsigned int v155 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v171 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          int64_t v175 = (char *)&v186 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          unsigned int v155 = (char *)v198;
          uint64_t v154 = (uint64_t *)((char *)v198 + v175);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          uint64_t v154 = (uint64_t *)&v186;
          unsigned int v155 = (char *)v198;
        }
      }
      uint64_t v156 = &v155[24 * v199];
      long long v157 = *(_OWORD *)v154;
      *((void *)v156 + 2) = v154[2];
      *(_OWORD *)uint64_t v156 = v157;
      uint64_t v158 = ++v199;
      if (v197[0])
      {
        LODWORD(v186) = 3;
        uint64_t v188 = 31;
        uint64_t v159 = (uint64_t *)&v186;
        uint64_t v160 = (char *)v198;
        if (v158 >= v200)
        {
          unint64_t v172 = v158 + 1;
          BOOL v173 = (char *)v198 + 24 * v158 > (char *)&v186;
          if (v198 <= &v186 && v173)
          {
            int64_t v176 = (char *)&v186 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            uint64_t v160 = (char *)v198;
            uint64_t v159 = (uint64_t *)((char *)v198 + v176);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            uint64_t v159 = (uint64_t *)&v186;
            uint64_t v160 = (char *)v198;
          }
        }
        uint64_t v161 = &v160[24 * v199];
        long long v162 = *(_OWORD *)v159;
        *((void *)v161 + 2) = v159[2];
        *(_OWORD *)uint64_t v161 = v162;
        ++v199;
      }
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    }
    if (v206)
    {
      long long v163 = (void **)__p;
      if (__p)
      {
        uint64_t v164 = v205;
        uint64_t v165 = __p;
        if (v205 != __p)
        {
          do
            uint64_t v164 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v164 - 1);
          while (v164 != v163);
          uint64_t v165 = __p;
        }
        int v205 = v163;
        operator delete(v165);
      }
      uint64_t v149 = v202;
      if (!v202) {
        goto LABEL_311;
      }
      uint64_t v166 = v203;
      uint64_t v151 = v202;
      if (v203 == v202)
      {
LABEL_310:
        uint64_t v203 = v149;
        operator delete(v151);
LABEL_311:
        if (v198 != v201) {
          free(v198);
        }
        return v17;
      }
      do
      {
        long long v168 = (void *)*--v166;
        uint64_t v167 = v168;
        void *v166 = 0;
        if (v168) {
          operator delete[](v167);
        }
      }
      while (v166 != v149);
LABEL_309:
      uint64_t v151 = v202;
      goto LABEL_310;
    }
  }
  return v17;
}

uint64_t mlir::mps::PoolMaxOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, long long a9, uint64_t a10)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    long long v13 = *a7;
    long long v14 = a7[1];
    long long v15 = a7[2];
    long long v16 = a7[3];
    uint64_t v17 = *((void *)a7 + 8);
  }
  else
  {
    uint64_t v17 = 0;
    long long v13 = 0uLL;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
  }
  *(void *)&long long v67 = a6;
  BYTE8(v67) = 0;
  v68[0] = 0;
  *(_OWORD *)&char v68[8] = v13;
  *(_OWORD *)&v68[24] = v14;
  *(_OWORD *)&v68[40] = v15;
  *(_OWORD *)&v68[56] = v16;
  *(void *)&v68[72] = v17;
  long long v69 = a9;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v67);
    if (v68[0]) {
      v68[0] = 0;
    }
    mlir::OperationName::OperationName((char *)&v67 + 8, "mps.pooling_max", 15, Context);
    v68[0] = 1;
  }
  *(void *)&long long v70 = a4;
  *((void *)&v70 + 1) = a5;
  if (!a5 || (uint64_t v19 = mlir::UnknownLoc::get(this, a2), !mlir::mps::PoolMaxOpAdaptor::verify(&v67, v19)))
  {
    uint64_t v22 = mlir::Float32Type::get(this, a2);
    uint64_t v23 = mlir::UnrankedTensorType::get(v22);
    uint64_t v24 = *(unsigned int *)(a10 + 8);
    if (v24 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(a10 + 8);
    }
    *(void *)(*(void *)a10 + 8 * v24) = v23;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v25 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
    if (!v25) {
      uint64_t v25 = mlir::Float32Type::get(this, v26);
    }
    uint64_t v27 = mlir::UnrankedTensorType::get(v25);
    unsigned int v28 = *(_DWORD *)(a10 + 8);
    if (v28 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v28 + 1, 8);
      unsigned int v28 = *(_DWORD *)(a10 + 8);
    }
    *(void *)(*(void *)a10 + 8 * v28) = v27;
    goto LABEL_48;
  }
  uint64_t Value = (void *)v70;
  uint64_t v61 = 0;
  BOOL v20 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&Value, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  if (v21) {
    uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v20 + 8);
  }
  else {
    BOOL v20 = 0;
  }
  v51[0] = v20;
  v51[1] = v21;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v20);
  uint64_t v30 = mlir::IntegerType::get((uint64_t)this, 0x20u, 1u);
  uint64_t v50 = *(void *)&v68[48];
  if (*(void *)&v68[48])
  {
    uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v50);
    if (mlir::Type::isSignedInteger((mlir::Type *)&Value, 32) || mlir::Type::isSignedInteger((mlir::Type *)&Value, 64)) {
      uint64_t v30 = (uint64_t)Value;
    }
  }
  if (!v20 || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51) & 1) == 0)
  {
    uint64_t v42 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    uint64_t v43 = mlir::UnrankedTensorType::get(v30);
    uint64_t v44 = *(unsigned int *)(a10 + 8);
    if (v44 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v44 + 1, 8);
      LODWORD(v44) = *(_DWORD *)(a10 + 8);
    }
    *(void *)(*(void *)a10 + 8 * v44) = v42;
    unsigned int v45 = *(_DWORD *)(a10 + 12);
    uint64_t v46 = (*(_DWORD *)(a10 + 8) + 1);
    *(_DWORD *)(a10 + 8) = v46;
    if (v46 >= v45)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v46 + 1, 8);
      LODWORD(v46) = *(_DWORD *)(a10 + 8);
    }
    *(void *)(*(void *)a10 + 8 * v46) = v43;
LABEL_48:
    ++*(_DWORD *)(a10 + 8);
    return 1;
  }
  v65[0] = v66;
  v65[1] = (void *)0x400000000;
  v63[0] = v64;
  v63[1] = (void *)0x400000000;
  uint64_t Value = v62;
  uint64_t v61 = 0x800000000;
  v58[0] = v59;
  v58[1] = (void *)0x400000000;
  v56[0] = v57;
  v56[1] = (void *)0x400000000;
  __int16 v49 = 0;
  int v48 = 2;
  uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
  v55[4] = *(_OWORD *)&v68[48];
  v55[5] = *(_OWORD *)&v68[64];
  v55[6] = v69;
  v55[7] = v70;
  v55[0] = v67;
  v55[1] = *(_OWORD *)v68;
  void v55[2] = *(_OWORD *)&v68[16];
  void v55[3] = *(_OWORD *)&v68[32];
  mlir::mps::getPool4dParams<mlir::mps::PoolMaxOpAdaptor>(ArgAttrsAttr, v32, v55, (uint64_t)v65, (uint64_t)v63, (uint64_t)&Value, (uint64_t)v58, (uint64_t)v56, &v48, (BOOL *)&v49 + 1, (BOOL *)&v49);
  uint64_t v52 = v54;
  uint64_t v53 = 0x400000000;
  if (mlir::mps::inferPool4DShape(v33, v34, v63, (uint64_t *)v65, (uint64_t *)v58, v56, &Value, v48, HIBYTE(v49), (uint64_t)&v52))
  {
    uint64_t v35 = mlir::RankedTensorType::get((uint64_t)v52, v53, ElementTypeOrSelf, 0);
    uint64_t v36 = mlir::RankedTensorType::get((uint64_t)v52, v53, v30, 0);
    uint64_t v37 = *(unsigned int *)(a10 + 8);
    if (v37 >= *(_DWORD *)(a10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v37 + 1, 8);
      LODWORD(v37) = *(_DWORD *)(a10 + 8);
    }
    *(void *)(*(void *)a10 + 8 * v37) = v35;
    unsigned int v38 = *(_DWORD *)(a10 + 12);
    uint64_t v39 = (*(_DWORD *)(a10 + 8) + 1);
    *(_DWORD *)(a10 + 8) = v39;
    if (v39 >= v38)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a10, (void *)(a10 + 16), v39 + 1, 8);
      LODWORD(v39) = *(_DWORD *)(a10 + 8);
    }
    *(void *)(*(void *)a10 + 8 * v39) = v36;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v40 = 1;
    unint64_t v41 = v52;
    if (v52 == v54) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v41 = v52;
    if (v52 == v54) {
      goto LABEL_33;
    }
  }
  free(v41);
LABEL_33:
  if (v56[0] != v57) {
    free(v56[0]);
  }
  if (v58[0] != v59) {
    free(v58[0]);
  }
  if (Value != v62) {
    free(Value);
  }
  if (v63[0] != v64) {
    free(v63[0]);
  }
  if (v65[0] != v66) {
    free(v65[0]);
  }
  return v40;
}

uint64_t mlir::mps::PoolMaxOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  int v3 = (const char *)a1[11];
  if (v3)
  {
    uint64_t v5 = (const char *)a1[4];
    unint64_t v4 = (const char *)a1[5];
    uint64_t v6 = (void *)a1[8];
    uint64_t v7 = (const char *)a1[10];
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
    long long v70 = v3;
    uint64_t v71 = v8;
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
    uint64_t v10 = Type;
    if (Type) {
      Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
    }
    BOOL v74 = v10;
    uint64_t v75 = Type;
    uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
    uint64_t v73 = 4;
    if (v12 == 1
      && *ArgAttrsAttr == v73
      && (uint64_t v66 = v3,
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66),
          uint64_t v68 = v13,
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
      if (!v7) {
        goto LABEL_105;
      }
      uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v7 + 8);
      long long v70 = v7;
      uint64_t v71 = v14;
      long long v15 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
      long long v16 = v15;
      if (v15) {
        long long v15 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
      }
      BOOL v74 = v16;
      uint64_t v75 = v15;
      uint64_t v17 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
      uint64_t v73 = 4;
      if (v18 != 1) {
        goto LABEL_56;
      }
      if (*v17 == v73
        && (uint64_t v66 = v7,
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66),
            uint64_t v68 = v19,
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
            mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_105:
        if (!v5) {
          goto LABEL_106;
        }
        uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5 + 8);
        long long v70 = v5;
        uint64_t v71 = v20;
        uint64_t v21 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
        uint64_t v22 = v21;
        if (v21) {
          uint64_t v21 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
        }
        BOOL v74 = v22;
        uint64_t v75 = v21;
        uint64_t v23 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
        uint64_t v73 = 4;
        if (v24 != 1) {
          goto LABEL_70;
        }
        if (*v23 == v73
          && (uint64_t v66 = v5,
              uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66),
              uint64_t v68 = v25,
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
LABEL_106:
          if (!v4) {
            goto LABEL_25;
          }
          uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
          long long v70 = v4;
          uint64_t v71 = v26;
          uint64_t v27 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
          unsigned int v28 = v27;
          if (v27) {
            uint64_t v27 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
          }
          BOOL v74 = v28;
          uint64_t v75 = v27;
          uint64_t v29 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v74);
          uint64_t v73 = 8;
          if (v30 == 1 && *v29 == v73)
          {
            uint64_t v66 = v4;
            uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66);
            uint64_t v68 = v31;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
            if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
            {
LABEL_25:
              if (v6)
              {
                BOOL v74 = v6;
                mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v74);
              }
              return 1;
            }
          }
          long long v70 = "'mps.pooling_max' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements attribute of shape {8}";
          __int16 v72 = 259;
          mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
          uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
          if (v74) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
          }
          if (v82)
          {
            uint64_t v59 = (void **)__p;
            if (__p)
            {
              uint64_t v60 = v81;
              uint64_t v61 = __p;
              if (v81 != __p)
              {
                do
                  uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
                while (v60 != v59);
                uint64_t v61 = __p;
              }
              uint64_t v81 = v59;
              operator delete(v61);
            }
            uint64_t v36 = v78;
            if (!v78) {
              goto LABEL_100;
            }
            uint64_t v62 = v79;
            unsigned int v38 = v78;
            if (v79 == v78)
            {
LABEL_99:
              unint64_t v79 = v36;
              operator delete(v38);
LABEL_100:
              if (v76 != &v77) {
                free(v76);
              }
              return v32;
            }
            do
            {
              unint64_t v64 = (void *)*--v62;
              uint64_t v63 = v64;
              void *v62 = 0;
              if (v64) {
                operator delete[](v63);
              }
            }
            while (v62 != v36);
LABEL_98:
            unsigned int v38 = v78;
            goto LABEL_99;
          }
        }
        else
        {
LABEL_70:
          long long v70 = "'mps.pooling_max' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attribute of shape {4}";
          __int16 v72 = 259;
          mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
          uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
          if (v74) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
          }
          if (v82)
          {
            uint64_t v53 = (void **)__p;
            if (__p)
            {
              uint64_t v54 = v81;
              uint64_t v55 = __p;
              if (v81 != __p)
              {
                do
                  uint64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                while (v54 != v53);
                uint64_t v55 = __p;
              }
              uint64_t v81 = v53;
              operator delete(v55);
            }
            uint64_t v36 = v78;
            if (!v78) {
              goto LABEL_100;
            }
            uint64_t v56 = v79;
            unsigned int v38 = v78;
            if (v79 == v78) {
              goto LABEL_99;
            }
            do
            {
              long long v58 = (void *)*--v56;
              uint64_t v57 = v58;
              *uint64_t v56 = 0;
              if (v58) {
                operator delete[](v57);
              }
            }
            while (v56 != v36);
            goto LABEL_98;
          }
        }
      }
      else
      {
LABEL_56:
        long long v70 = "'mps.pooling_max' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        __int16 v72 = 259;
        mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
        uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
        if (v74) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
        }
        if (v82)
        {
          BOOL v47 = (void **)__p;
          if (__p)
          {
            int v48 = v81;
            __int16 v49 = __p;
            if (v81 != __p)
            {
              do
                int v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
              while (v48 != v47);
              __int16 v49 = __p;
            }
            uint64_t v81 = v47;
            operator delete(v49);
          }
          uint64_t v36 = v78;
          if (!v78) {
            goto LABEL_100;
          }
          uint64_t v50 = v79;
          unsigned int v38 = v78;
          if (v79 == v78) {
            goto LABEL_99;
          }
          do
          {
            uint64_t v52 = (void *)*--v50;
            uint64_t v51 = v52;
            void *v50 = 0;
            if (v52) {
              operator delete[](v51);
            }
          }
          while (v50 != v36);
          goto LABEL_98;
        }
      }
    }
    else
    {
      long long v70 = "'mps.pooling_max' op attribute 'window_sizes' failed to satisfy constraint: ui64 elements attribute of shape {4}";
      __int16 v72 = 259;
      mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
      uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
      if (v74) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
      }
      if (v82)
      {
        uint64_t v33 = (void **)__p;
        if (__p)
        {
          uint64_t v34 = v81;
          uint64_t v35 = __p;
          if (v81 != __p)
          {
            do
              uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
            while (v34 != v33);
            uint64_t v35 = __p;
          }
          uint64_t v81 = v33;
          operator delete(v35);
        }
        uint64_t v36 = v78;
        if (!v78) {
          goto LABEL_100;
        }
        uint64_t v37 = v79;
        unsigned int v38 = v78;
        if (v79 == v78) {
          goto LABEL_99;
        }
        do
        {
          uint64_t v40 = (void *)*--v37;
          uint64_t v39 = v40;
          void *v37 = 0;
          if (v40) {
            operator delete[](v39);
          }
        }
        while (v37 != v36);
        goto LABEL_98;
      }
    }
  }
  else
  {
    long long v70 = "'mps.pooling_max' op requires attribute 'window_sizes'";
    __int16 v72 = 259;
    mlir::emitError(a2, (uint64_t)&v70, (uint64_t)&v74);
    uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
    if (v74) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
    }
    if (v82)
    {
      unint64_t v41 = (void **)__p;
      if (__p)
      {
        uint64_t v42 = v81;
        uint64_t v43 = __p;
        if (v81 != __p)
        {
          do
            uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          uint64_t v43 = __p;
        }
        uint64_t v81 = v41;
        operator delete(v43);
      }
      uint64_t v36 = v78;
      if (!v78) {
        goto LABEL_100;
      }
      uint64_t v44 = v79;
      unsigned int v38 = v78;
      if (v79 == v78) {
        goto LABEL_99;
      }
      do
      {
        uint64_t v46 = (void *)*--v44;
        unsigned int v45 = v46;
        *uint64_t v44 = 0;
        if (v46) {
          operator delete[](v45);
        }
      }
      while (v44 != v36);
      goto LABEL_98;
    }
  }
  return v32;
}

void mlir::mps::getPool4dParams<mlir::mps::PoolMaxOpAdaptor>(uint64_t *a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, BOOL *a10, BOOL *a11)
{
  uint64_t v18 = a3[11];
  uint64_t v70 = a3[10];
  uint64_t v71 = v18;
  uint64_t v58 = a3[4];
  uint64_t v59 = a3[5];
  uint64_t v68 = v59;
  uint64_t v69 = v58;
  *a9 = 2;
  uint64_t v19 = a3[9];
  if (v19) {
    *a9 = *(_DWORD *)(v19 + 8);
  }
  *a10 = a3[3] != 0;
  *a11 = a3[6] != 0;
  uint64_t v20 = *(unsigned int *)(a6 + 8);
  if (v20 == 8)
  {
    uint64_t v21 = *(unsigned int *)(a7 + 8);
    BOOL v22 = v21 > 4;
    if (v21 == 4) {
      goto LABEL_5;
    }
LABEL_15:
    if (v22)
    {
      *(_DWORD *)(a7 + 8) = 4;
      uint64_t v23 = *(unsigned int *)(a8 + 8);
      BOOL v24 = v23 > 4;
      if (v23 != 4) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v29 = v21;
      int v30 = v21;
      if (*(_DWORD *)(a7 + 12) <= 3u)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a7, (void *)(a7 + 16), 4uLL, 8);
        uint64_t v29 = *(unsigned int *)(a7 + 8);
        int v30 = *(_DWORD *)(a7 + 8);
      }
      memset_pattern16((void *)(*(void *)a7 + 8 * v29), &unk_1810FE350, 32 - 8 * v21);
      *(_DWORD *)(a7 + 8) = v30 - v21 + 4;
      uint64_t v23 = *(unsigned int *)(a8 + 8);
      BOOL v24 = v23 > 4;
      if (v23 != 4) {
        goto LABEL_22;
      }
    }
LABEL_6:
    uint64_t v25 = *(unsigned int *)(a5 + 8);
    BOOL v26 = v25 > 4;
    if (v25 == 4) {
      goto LABEL_7;
    }
LABEL_29:
    if (v26)
    {
      *(_DWORD *)(a5 + 8) = 4;
      if (a2 > *(unsigned int *)(a4 + 12)) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v33 = v25;
      int v34 = v25;
      if (*(_DWORD *)(a5 + 12) <= 3u)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), 4uLL, 8);
        uint64_t v33 = *(unsigned int *)(a5 + 8);
        int v34 = *(_DWORD *)(a5 + 8);
      }
      memset_pattern16((void *)(*(void *)a5 + 8 * v33), &unk_1810FE350, 32 - 8 * v25);
      *(_DWORD *)(a5 + 8) = v34 - v25 + 4;
      if (a2 > *(unsigned int *)(a4 + 12)) {
        goto LABEL_8;
      }
    }
LABEL_36:
    if (!a2) {
      goto LABEL_42;
    }
    goto LABEL_37;
  }
  if (v20 <= 8)
  {
    uint64_t v27 = *(unsigned int *)(a6 + 8);
    int v28 = *(_DWORD *)(a6 + 8);
    if (*(_DWORD *)(a6 + 12) <= 7u)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), 8uLL, 8);
      uint64_t v27 = *(unsigned int *)(a6 + 8);
      int v28 = *(_DWORD *)(a6 + 8);
    }
    bzero((void *)(*(void *)a6 + 8 * v27), 64 - 8 * v20);
    *(_DWORD *)(a6 + 8) = v28 - v20 + 8;
    uint64_t v21 = *(unsigned int *)(a7 + 8);
    BOOL v22 = v21 > 4;
    if (v21 != 4) {
      goto LABEL_15;
    }
  }
  else
  {
    *(_DWORD *)(a6 + 8) = 8;
    uint64_t v21 = *(unsigned int *)(a7 + 8);
    BOOL v22 = v21 > 4;
    if (v21 != 4) {
      goto LABEL_15;
    }
  }
LABEL_5:
  uint64_t v23 = *(unsigned int *)(a8 + 8);
  BOOL v24 = v23 > 4;
  if (v23 == 4) {
    goto LABEL_6;
  }
LABEL_22:
  if (v24)
  {
    *(_DWORD *)(a8 + 8) = 4;
    uint64_t v25 = *(unsigned int *)(a5 + 8);
    BOOL v26 = v25 > 4;
    if (v25 != 4) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v31 = v23;
    int v32 = v23;
    if (*(_DWORD *)(a8 + 12) <= 3u)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a8, (void *)(a8 + 16), 4uLL, 8);
      uint64_t v31 = *(unsigned int *)(a8 + 8);
      int v32 = *(_DWORD *)(a8 + 8);
    }
    memset_pattern16((void *)(*(void *)a8 + 8 * v31), &unk_1810FE350, 32 - 8 * v23);
    *(_DWORD *)(a8 + 8) = v32 - v23 + 4;
    uint64_t v25 = *(unsigned int *)(a5 + 8);
    BOOL v26 = v25 > 4;
    if (v25 != 4) {
      goto LABEL_29;
    }
  }
LABEL_7:
  if (a2 <= *(unsigned int *)(a4 + 12)) {
    goto LABEL_36;
  }
LABEL_8:
  llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), a2, 8);
LABEL_37:
  unsigned int v35 = *(_DWORD *)(a4 + 8);
  uint64_t v36 = 8 * a2;
  do
  {
    uint64_t v37 = *a1;
    if (v35 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35 + 1, 8);
      unsigned int v35 = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v35) = v37;
    unsigned int v35 = *(_DWORD *)(a4 + 8) + 1;
    *(_DWORD *)(a4 + 8) = v35;
    ++a1;
    v36 -= 8;
  }
  while (v36);
  uint64_t v18 = v71;
LABEL_42:
  if (v18 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v71) == 4)
  {
    *(_DWORD *)(a5 + 8) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v65, v71, 0);
    uint64_t v38 = v71;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v71);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v62, v38, NumElements);
    while (1)
    {
      BOOL v40 = v65 == v62 && v66 == v63;
      if (v40 && v67 == v64) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v65, (llvm::APInt *)&__p);
      if (v61 > 0x40) {
        uint64_t v41 = *(void *)__p;
      }
      else {
        uint64_t v41 = (uint64_t)((void)__p << -(uint64_t)v61) >> -(uint64_t)v61;
      }
      unint64_t v42 = *(unsigned int *)(a5 + 8);
      if (v42 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v42 + 1, 8);
        unint64_t v42 = *(unsigned int *)(a5 + 8);
      }
      *(void *)(*(void *)a5 + 8 * v42) = v41;
      ++*(_DWORD *)(a5 + 8);
      if (v61 >= 0x41)
      {
        if (__p) {
          operator delete[](__p);
        }
      }
      ++v67;
    }
  }
  if (v70 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v70) == 4)
  {
    *(_DWORD *)(a7 + 8) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v65, v70, 0);
    uint64_t v43 = v70;
    uint64_t v44 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v70);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v62, v43, v44);
    while (1)
    {
      BOOL v45 = v65 == v62 && v66 == v63;
      if (v45 && v67 == v64) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v65, (llvm::APInt *)&__p);
      if (v61 > 0x40) {
        uint64_t v46 = *(void *)__p;
      }
      else {
        uint64_t v46 = (uint64_t)((void)__p << -(uint64_t)v61) >> -(uint64_t)v61;
      }
      unint64_t v47 = *(unsigned int *)(a7 + 8);
      if (v47 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a7, (void *)(a7 + 16), v47 + 1, 8);
        unint64_t v47 = *(unsigned int *)(a7 + 8);
      }
      *(void *)(*(void *)a7 + 8 * v47) = v46;
      ++*(_DWORD *)(a7 + 8);
      if (v61 >= 0x41 && __p) {
        operator delete[](__p);
      }
      ++v67;
    }
  }
  if (v58 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v69) == 4)
  {
    *(_DWORD *)(a8 + 8) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v65, v69, 0);
    uint64_t v48 = v69;
    uint64_t v49 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v69);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v62, v48, v49);
    while (1)
    {
      BOOL v50 = v65 == v62 && v66 == v63;
      if (v50 && v67 == v64) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v65, (llvm::APInt *)&__p);
      if (v61 > 0x40) {
        uint64_t v51 = *(void *)__p;
      }
      else {
        uint64_t v51 = (uint64_t)((void)__p << -(uint64_t)v61) >> -(uint64_t)v61;
      }
      unint64_t v52 = *(unsigned int *)(a8 + 8);
      if (v52 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a8, (void *)(a8 + 16), v52 + 1, 8);
        unint64_t v52 = *(unsigned int *)(a8 + 8);
      }
      *(void *)(*(void *)a8 + 8 * v52) = v51;
      ++*(_DWORD *)(a8 + 8);
      if (v61 >= 0x41 && __p) {
        operator delete[](__p);
      }
      ++v67;
    }
  }
  if (v59 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v68) == 8)
  {
    *(_DWORD *)(a6 + 8) = 0;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v65, v68, 0);
    uint64_t v53 = v68;
    uint64_t v54 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v68);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v62, v53, v54);
    while (1)
    {
      BOOL v55 = v65 == v62 && v66 == v63;
      if (v55 && v67 == v64) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v65, (llvm::APInt *)&__p);
      if (v61 > 0x40) {
        uint64_t v56 = *(void *)__p;
      }
      else {
        uint64_t v56 = (uint64_t)((void)__p << -(uint64_t)v61) >> -(uint64_t)v61;
      }
      unint64_t v57 = *(unsigned int *)(a6 + 8);
      if (v57 >= *(unsigned int *)(a6 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), v57 + 1, 8);
        unint64_t v57 = *(unsigned int *)(a6 + 8);
      }
      *(void *)(*(void *)a6 + 8 * v57) = v56;
      ++*(_DWORD *)(a6 + 8);
      if (v61 >= 0x41 && __p) {
        operator delete[](__p);
      }
      ++v67;
    }
  }
}

uint64_t mlir::mps::verifyPooling4D<mlir::mps::PoolMaxOp>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v207 = *MEMORY[0x1E4F143B8];
  uint64_t v193 = (uint64_t *)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 44);
  uint64_t v5 = a1 + 64;
  uint64_t v6 = (v4 >> 23) & 1;
  uint64_t v7 = a1 + 64 + 16 * v6;
  if (!HIBYTE(*(_DWORD *)(a1 + 44))) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v7 + 56);
  if (v8)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v7 + 56))) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v192 = v9;
  uint64_t v10 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (v11)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v10 + 8))) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v191 = v12;
  uint64_t v13 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(v13 + 64);
  if (v14)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v13 + 64))) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v4 = *(unsigned int *)(a1 + 44);
    uint64_t v6 = (v4 >> 23) & 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v189 = 0;
  uint64_t v190 = v15;
  uint64_t v16 = v5 + 16 * v6;
  if (!BYTE3(v4)) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    if (mlir::DenseIntElementsAttr::classof(*(void *)(v16 + 16))) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v189 = v18;
  }
  if (v15 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v190, 0);
    uint64_t v17 = v190;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v190);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v17, NumElements);
    while (1)
    {
      BOOL v20 = v186 == v183 && v187 == v184;
      if (v20 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v21 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_47:
          if (v182 < 0x41) {
            goto LABEL_77;
          }
LABEL_75:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v21 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v21 > 0) {
          goto LABEL_47;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v22 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v22 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_56;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v22;
      uint64_t v23 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v40 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v43 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          uint64_t v23 = (char *)v198;
          BOOL v24 = (uint64_t *)((char *)v198 + v43);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v40, 24);
          BOOL v24 = &v194;
          uint64_t v23 = (char *)v198;
        }
      }
      else
      {
        BOOL v24 = &v194;
      }
      uint64_t v25 = &v23[24 * v199];
      long long v26 = *(_OWORD *)v24;
      *((void *)v25 + 2) = v24[2];
      *(_OWORD *)uint64_t v25 = v26;
      uint64_t v27 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        int v28 = (char *)v198;
        if (v27 >= v200)
        {
          unint64_t v41 = v27 + 1;
          BOOL v42 = (char *)v198 + 24 * v27 > (char *)&v194;
          if (v198 <= &v194 && v42)
          {
            int64_t v44 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            int v28 = (char *)v198;
            uint64_t v29 = (uint64_t *)((char *)v198 + v44);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v41, 24);
            uint64_t v29 = &v194;
            int v28 = (char *)v198;
          }
        }
        else
        {
          uint64_t v29 = &v194;
        }
        int v30 = &v28[24 * v199];
        long long v31 = *(_OWORD *)v29;
        *((void *)v30 + 2) = v29[2];
        *(_OWORD *)int v30 = v31;
        ++v199;
      }
LABEL_56:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        int v32 = (void **)__p;
        if (__p)
        {
          uint64_t v33 = v205;
          int v34 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            int v34 = __p;
          }
          int v205 = v32;
          operator delete(v34);
        }
        unsigned int v35 = v202;
        if (v202)
        {
          uint64_t v36 = v203;
          uint64_t v37 = v202;
          if (v203 != v202)
          {
            do
            {
              uint64_t v39 = (void *)*--v36;
              uint64_t v38 = v39;
              *uint64_t v36 = 0;
              if (v39) {
                operator delete[](v38);
              }
            }
            while (v36 != v35);
            uint64_t v37 = v202;
          }
          uint64_t v203 = v35;
          operator delete(v37);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_75;
      }
LABEL_77:
      if (v21 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v192 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v192, 0);
    uint64_t v45 = v192;
    uint64_t v46 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v192);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v45, v46);
    while (1)
    {
      BOOL v47 = v186 == v183 && v187 == v184;
      if (v47 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v48 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_102:
          if (v182 < 0x41) {
            goto LABEL_132;
          }
LABEL_130:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_132;
        }
      }
      else
      {
        uint64_t v48 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v48 > 0) {
          goto LABEL_102;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v49 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_111;
        }
      }
      else
      {
        uint64_t v49 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_111;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v49;
      BOOL v50 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v67 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v70 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          BOOL v50 = (char *)v198;
          uint64_t v51 = (uint64_t *)((char *)v198 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v67, 24);
          uint64_t v51 = &v194;
          BOOL v50 = (char *)v198;
        }
      }
      else
      {
        uint64_t v51 = &v194;
      }
      unint64_t v52 = &v50[24 * v199];
      long long v53 = *(_OWORD *)v51;
      *((void *)v52 + 2) = v51[2];
      *(_OWORD *)unint64_t v52 = v53;
      uint64_t v54 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        BOOL v55 = (char *)v198;
        if (v54 >= v200)
        {
          unint64_t v68 = v54 + 1;
          BOOL v69 = (char *)v198 + 24 * v54 > (char *)&v194;
          if (v198 <= &v194 && v69)
          {
            int64_t v71 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            BOOL v55 = (char *)v198;
            uint64_t v56 = (uint64_t *)((char *)v198 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v68, 24);
            uint64_t v56 = &v194;
            BOOL v55 = (char *)v198;
          }
        }
        else
        {
          uint64_t v56 = &v194;
        }
        unint64_t v57 = &v55[24 * v199];
        long long v58 = *(_OWORD *)v56;
        *((void *)v57 + 2) = v56[2];
        *(_OWORD *)unint64_t v57 = v58;
        ++v199;
      }
LABEL_111:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        uint64_t v59 = (void **)__p;
        if (__p)
        {
          uint64_t v60 = v205;
          unsigned int v61 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            unsigned int v61 = __p;
          }
          int v205 = v59;
          operator delete(v61);
        }
        uint64_t v62 = v202;
        if (v202)
        {
          char v63 = v203;
          uint64_t v64 = v202;
          if (v203 != v202)
          {
            do
            {
              char v66 = (void *)*--v63;
              uint64_t v65 = v66;
              *char v63 = 0;
              if (v66) {
                operator delete[](v65);
              }
            }
            while (v63 != v62);
            uint64_t v64 = v202;
          }
          uint64_t v203 = v62;
          operator delete(v64);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_130;
      }
LABEL_132:
      if (v48 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v191 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191) == 4)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v191, 0);
    uint64_t v72 = v191;
    uint64_t v73 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v191);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v72, v73);
    while (1)
    {
      BOOL v74 = v186 == v183 && v187 == v184;
      if (v74 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v75 = *(void *)v181;
        if (*(uint64_t *)v181 > 0)
        {
LABEL_157:
          if (v182 < 0x41) {
            goto LABEL_187;
          }
LABEL_185:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_187;
        }
      }
      else
      {
        uint64_t v75 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (v75 > 0) {
          goto LABEL_157;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v76 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_166;
        }
      }
      else
      {
        uint64_t v76 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_166;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v76;
      uint64_t v77 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v94 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v97 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          uint64_t v77 = (char *)v198;
          uint64_t v78 = (uint64_t *)((char *)v198 + v97);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v94, 24);
          uint64_t v78 = &v194;
          uint64_t v77 = (char *)v198;
        }
      }
      else
      {
        uint64_t v78 = &v194;
      }
      unint64_t v79 = &v77[24 * v199];
      long long v80 = *(_OWORD *)v78;
      *((void *)v79 + 2) = v78[2];
      *(_OWORD *)unint64_t v79 = v80;
      uint64_t v81 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be positive.";
        uint64_t v196 = 32;
        char v82 = (char *)v198;
        if (v81 >= v200)
        {
          unint64_t v95 = v81 + 1;
          BOOL v96 = (char *)v198 + 24 * v81 > (char *)&v194;
          if (v198 <= &v194 && v96)
          {
            int64_t v98 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            char v82 = (char *)v198;
            uint64_t v83 = (uint64_t *)((char *)v198 + v98);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v95, 24);
            uint64_t v83 = &v194;
            char v82 = (char *)v198;
          }
        }
        else
        {
          uint64_t v83 = &v194;
        }
        uint64_t v84 = &v82[24 * v199];
        long long v85 = *(_OWORD *)v83;
        *((void *)v84 + 2) = v83[2];
        *(_OWORD *)uint64_t v84 = v85;
        ++v199;
      }
LABEL_166:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        uint64_t v86 = (void **)__p;
        if (__p)
        {
          uint64_t v87 = v205;
          uint64_t v88 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v87 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v87 - 1);
            while (v87 != v86);
            uint64_t v88 = __p;
          }
          int v205 = v86;
          operator delete(v88);
        }
        uint64_t v89 = v202;
        if (v202)
        {
          uint64_t v90 = v203;
          uint64_t v91 = v202;
          if (v203 != v202)
          {
            do
            {
              uint64_t v93 = (void *)*--v90;
              uint64_t v92 = v93;
              void *v90 = 0;
              if (v93) {
                operator delete[](v92);
              }
            }
            while (v90 != v89);
            uint64_t v91 = v202;
          }
          uint64_t v203 = v89;
          operator delete(v91);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_185;
      }
LABEL_187:
      if (v75 < 1) {
        return v17;
      }
      ++v188;
    }
  }
  if (v189 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189) == 8)
  {
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v186, v189, 0);
    uint64_t v99 = v189;
    uint64_t v100 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v189);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v183, v99, v100);
    while (1)
    {
      BOOL v101 = v186 == v183 && v187 == v184;
      if (v101 && v188 == v185) {
        break;
      }
      mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v186, (llvm::APInt *)&v181);
      if (v182 > 0x40)
      {
        uint64_t v102 = *(void *)v181;
        if ((*(void *)v181 & 0x8000000000000000) == 0)
        {
LABEL_212:
          if (v182 < 0x41) {
            goto LABEL_242;
          }
LABEL_240:
          if (v181) {
            operator delete[](v181);
          }
          goto LABEL_242;
        }
      }
      else
      {
        uint64_t v102 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if ((v102 & 0x8000000000000000) == 0) {
          goto LABEL_212;
        }
      }
      __int16 v180 = 259;
      mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
      if (v182 > 0x40)
      {
        uint64_t v103 = *(void *)v181;
        if (!v197[0]) {
          goto LABEL_221;
        }
      }
      else
      {
        uint64_t v103 = (uint64_t)((void)v181 << -(char)v182) >> -(char)v182;
        if (!v197[0]) {
          goto LABEL_221;
        }
      }
      LODWORD(v194) = 2;
      uint64_t v195 = (const char *)v103;
      uint64_t v104 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v121 = v199 + 1;
        if (v198 <= &v194 && (char *)v198 + 24 * v199 > (char *)&v194)
        {
          int64_t v124 = (char *)&v194 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          uint64_t v104 = (char *)v198;
          uint64_t v105 = (uint64_t *)((char *)v198 + v124);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v121, 24);
          uint64_t v105 = &v194;
          uint64_t v104 = (char *)v198;
        }
      }
      else
      {
        uint64_t v105 = &v194;
      }
      uint64_t v106 = &v104[24 * v199];
      long long v107 = *(_OWORD *)v105;
      *((void *)v106 + 2) = v105[2];
      *(_OWORD *)uint64_t v106 = v107;
      uint64_t v108 = ++v199;
      if (v197[0])
      {
        LODWORD(v194) = 3;
        uint64_t v195 = ", all values should be non-negative.";
        uint64_t v196 = 36;
        unint64_t v109 = (char *)v198;
        if (v108 >= v200)
        {
          unint64_t v122 = v108 + 1;
          BOOL v123 = (char *)v198 + 24 * v108 > (char *)&v194;
          if (v198 <= &v194 && v123)
          {
            int64_t v125 = (char *)&v194 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            unint64_t v109 = (char *)v198;
            BOOL v110 = (uint64_t *)((char *)v198 + v125);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v122, 24);
            BOOL v110 = &v194;
            unint64_t v109 = (char *)v198;
          }
        }
        else
        {
          BOOL v110 = &v194;
        }
        uint64_t v111 = &v109[24 * v199];
        long long v112 = *(_OWORD *)v110;
        *((void *)v111 + 2) = v110[2];
        *(_OWORD *)uint64_t v111 = v112;
        ++v199;
      }
LABEL_221:
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
      if (v197[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
      }
      if (v206)
      {
        int v113 = (void **)__p;
        if (__p)
        {
          uint64_t v114 = v205;
          uint64_t v115 = __p;
          if (v205 != __p)
          {
            do
              uint64_t v114 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v114 - 1);
            while (v114 != v113);
            uint64_t v115 = __p;
          }
          int v205 = v113;
          operator delete(v115);
        }
        uint64_t v116 = v202;
        if (v202)
        {
          unint64_t v117 = v203;
          uint64_t v118 = v202;
          if (v203 != v202)
          {
            do
            {
              unint64_t v120 = (void *)*--v117;
              uint64_t v119 = v120;
              *unint64_t v117 = 0;
              if (v120) {
                operator delete[](v119);
              }
            }
            while (v117 != v116);
            uint64_t v118 = v202;
          }
          uint64_t v203 = v116;
          operator delete(v118);
        }
        if (v198 != v201) {
          free(v198);
        }
      }
      if (v182 >= 0x41) {
        goto LABEL_240;
      }
LABEL_242:
      if (v102 < 0) {
        return v17;
      }
      ++v188;
    }
  }
  long long v126 = &v193[2 * (((unint64_t)*((unsigned int *)v193 + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)v193 + 11))) {
    long long v126 = 0;
  }
  int v127 = *(_DWORD *)(v126[6] + 8);
  if (v127 == 3)
  {
    __int16 v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      long long v187 = "not supported by this op.";
      uint64_t v188 = 25;
      uint64_t v142 = (uint64_t *)&v186;
      uint64_t v143 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v170 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          int64_t v174 = (char *)&v186 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          uint64_t v143 = (char *)v198;
          uint64_t v142 = (uint64_t *)((char *)v198 + v174);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v170, 24);
          uint64_t v142 = (uint64_t *)&v186;
          uint64_t v143 = (char *)v198;
        }
      }
      uint64_t v144 = &v143[24 * v199];
      long long v145 = *(_OWORD *)v142;
      *((void *)v144 + 2) = v142[2];
      *(_OWORD *)uint64_t v144 = v145;
      ++v199;
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    }
    if (v206)
    {
      long long v146 = (void **)__p;
      if (__p)
      {
        uint64_t v147 = v205;
        uint64_t v148 = __p;
        if (v205 != __p)
        {
          do
            uint64_t v147 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v147 - 1);
          while (v147 != v146);
          uint64_t v148 = __p;
        }
        int v205 = v146;
        operator delete(v148);
      }
      uint64_t v149 = v202;
      if (!v202) {
        goto LABEL_312;
      }
      uint64_t v150 = v203;
      uint64_t v151 = v202;
      if (v203 == v202) {
        goto LABEL_311;
      }
      do
      {
        uint64_t v153 = (void *)*--v150;
        uint64_t v152 = v153;
        void *v150 = 0;
        if (v153) {
          operator delete[](v152);
        }
      }
      while (v150 != v149);
      goto LABEL_310;
    }
  }
  else
  {
    if (v127 || v189)
    {
      if (a2)
      {
        unint64_t v128 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v128 + 8))
        {
          uint64_t v129 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v128 + 8);
          uint64_t v130 = a3;
          unint64_t v186 = v128;
          long long v187 = (const char *)v129;
          if (a3) {
            goto LABEL_260;
          }
LABEL_285:
          unint64_t v131 = 0;
          unint64_t v183 = 0;
          uint64_t v184 = 0;
          if (v128) {
            goto LABEL_262;
          }
          return 1;
        }
        unint64_t v128 = 0;
        uint64_t v130 = a3;
        unint64_t v186 = 0;
        long long v187 = 0;
        if (!a3) {
          goto LABEL_285;
        }
      }
      else
      {
        unint64_t v128 = 0;
        unint64_t v186 = 0;
        long long v187 = 0;
        uint64_t v130 = a3;
        if (!a3) {
          goto LABEL_285;
        }
      }
LABEL_260:
      unint64_t v131 = *(void *)(v130 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v131 + 8))
      {
        uint64_t v132 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v131 + 8);
        unint64_t v183 = v131;
        uint64_t v184 = v132;
        if (v128)
        {
LABEL_262:
          uint64_t v17 = 1;
          if (*(_UNKNOWN **)(*(void *)v128 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          {
            if (v131)
            {
              if (*(_UNKNOWN **)(*(void *)v131 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              {
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                uint64_t v134 = v133;
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                if (v134 != v135)
                {
                  __int16 v180 = 259;
                  mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v186);
                  uint64_t v194 = v136;
                  uint64_t v137 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)v197, &v194);
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v183);
                  uint64_t v181 = v139;
                  uint64_t v140 = mlir::InFlightDiagnostic::operator<<<unsigned long &>(v138, (uint64_t *)&v181);
                  uint64_t v141 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v140, ".");
                  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v141);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v197);
                }
              }
            }
          }
          return v17;
        }
      }
      else
      {
        unint64_t v131 = 0;
        unint64_t v183 = 0;
        uint64_t v184 = 0;
        if (v128) {
          goto LABEL_262;
        }
      }
      return 1;
    }
    __int16 v180 = 259;
    mlir::OpState::emitOpError(&v193, v179, (uint64_t)v197);
    if (v197[0])
    {
      LODWORD(v186) = 3;
      long long v187 = "invalid type. Must be specified when ";
      uint64_t v188 = 37;
      uint64_t v154 = (uint64_t *)&v186;
      unsigned int v155 = (char *)v198;
      if (v199 >= v200)
      {
        unint64_t v171 = v199 + 1;
        if (v198 <= &v186 && (char *)v198 + 24 * v199 > (char *)&v186)
        {
          int64_t v175 = (char *)&v186 - (unsigned char *)v198;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          unsigned int v155 = (char *)v198;
          uint64_t v154 = (uint64_t *)((char *)v198 + v175);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v171, 24);
          uint64_t v154 = (uint64_t *)&v186;
          unsigned int v155 = (char *)v198;
        }
      }
      uint64_t v156 = &v155[24 * v199];
      long long v157 = *(_OWORD *)v154;
      *((void *)v156 + 2) = v154[2];
      *(_OWORD *)uint64_t v156 = v157;
      uint64_t v158 = ++v199;
      if (v197[0])
      {
        LODWORD(v186) = 3;
        uint64_t v188 = 31;
        uint64_t v159 = (uint64_t *)&v186;
        uint64_t v160 = (char *)v198;
        if (v158 >= v200)
        {
          unint64_t v172 = v158 + 1;
          BOOL v173 = (char *)v198 + 24 * v158 > (char *)&v186;
          if (v198 <= &v186 && v173)
          {
            int64_t v176 = (char *)&v186 - (unsigned char *)v198;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            uint64_t v160 = (char *)v198;
            uint64_t v159 = (uint64_t *)((char *)v198 + v176);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v198, v201, v172, 24);
            uint64_t v159 = (uint64_t *)&v186;
            uint64_t v160 = (char *)v198;
          }
        }
        uint64_t v161 = &v160[24 * v199];
        long long v162 = *(_OWORD *)v159;
        *((void *)v161 + 2) = v159[2];
        *(_OWORD *)uint64_t v161 = v162;
        ++v199;
      }
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v197);
    if (v197[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v197);
    }
    if (v206)
    {
      long long v163 = (void **)__p;
      if (__p)
      {
        uint64_t v164 = v205;
        uint64_t v165 = __p;
        if (v205 != __p)
        {
          do
            uint64_t v164 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v164 - 1);
          while (v164 != v163);
          uint64_t v165 = __p;
        }
        int v205 = v163;
        operator delete(v165);
      }
      uint64_t v149 = v202;
      if (!v202) {
        goto LABEL_312;
      }
      uint64_t v166 = v203;
      uint64_t v151 = v202;
      if (v203 == v202)
      {
LABEL_311:
        uint64_t v203 = v149;
        operator delete(v151);
LABEL_312:
        if (v198 != v201) {
          free(v198);
        }
        return v17;
      }
      do
      {
        long long v168 = (void *)*--v166;
        uint64_t v167 = v168;
        void *v166 = 0;
        if (v168) {
          operator delete[](v167);
        }
      }
      while (v166 != v149);
LABEL_310:
      uint64_t v151 = v202;
      goto LABEL_311;
    }
  }
  return v17;
}

uint64_t mlir::mps::BiasAddOp::verify(uint64_t **this)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  uint64_t v3 = *(int *)((*this)[10] + 8);
  unint64_t v4 = (void *)(*(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v4)
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    uint64_t v6 = (*this)[9];
    uint64_t v118 = v4;
    uint64_t v119 = v5;
    uint64_t v7 = (void *)(*(void *)(*(void *)(v6 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7)
    {
LABEL_3:
      uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v7 = (void *)(*(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v7) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_6:
  v117[0] = v7;
  v117[1] = v8;
  if (v3 == 1) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 3;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v118))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118);
    if (v10 < v9)
    {
      __int16 v116 = 257;
      mlir::OpState::emitOpError(this, &v113, (uint64_t)&v124);
      if (v124)
      {
        LODWORD(v120) = 3;
        unint64_t v121 = "requires value operand to have rank at least ";
        uint64_t v122 = 45;
        uint64_t v11 = &v120;
        uint64_t v12 = (char *)v126;
        if (v127 >= v128)
        {
          unint64_t v87 = v127 + 1;
          if (v126 <= &v120 && (char *)v126 + 24 * v127 > (char *)&v120)
          {
            int64_t v102 = (char *)&v120 - (unsigned char *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v87, 24);
            uint64_t v12 = (char *)v126;
            uint64_t v11 = (const void ***)((char *)v126 + v102);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v87, 24);
            uint64_t v11 = &v120;
            uint64_t v12 = (char *)v126;
          }
        }
        uint64_t v13 = &v12[24 * v127];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)uint64_t v13 = v14;
        uint64_t v15 = ++v127;
        if (v124)
        {
          LODWORD(v120) = 2;
          unint64_t v121 = (const char *)v9;
          uint64_t v16 = &v120;
          uint64_t v17 = (char *)v126;
          if (v15 >= v128)
          {
            unint64_t v91 = v15 + 1;
            BOOL v92 = (char *)v126 + 24 * v15 > (char *)&v120;
            if (v126 <= &v120 && v92)
            {
              int64_t v106 = (char *)&v120 - (unsigned char *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v91, 24);
              uint64_t v17 = (char *)v126;
              uint64_t v16 = (const void ***)((char *)v126 + v106);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v91, 24);
              uint64_t v16 = &v120;
              uint64_t v17 = (char *)v126;
            }
          }
          uint64_t v18 = &v17[24 * v127];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = v16[2];
          *(_OWORD *)uint64_t v18 = v19;
          uint64_t v20 = ++v127;
          if (v124)
          {
            LODWORD(v120) = 3;
            uint64_t v122 = 7;
            uint64_t v21 = &v120;
            uint64_t v22 = (char *)v126;
            if (v20 >= v128)
            {
              unint64_t v100 = v20 + 1;
              BOOL v101 = (char *)v126 + 24 * v20 > (char *)&v120;
              if (v126 <= &v120 && v101)
              {
                int64_t v111 = (char *)&v120 - (unsigned char *)v126;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                uint64_t v22 = (char *)v126;
                uint64_t v21 = (const void ***)((char *)v126 + v111);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v100, 24);
                uint64_t v21 = &v120;
                uint64_t v22 = (char *)v126;
              }
            }
            uint64_t v23 = &v22[24 * v127];
            long long v24 = *(_OWORD *)v21;
            *((void *)v23 + 2) = v21[2];
            *(_OWORD *)uint64_t v23 = v24;
            ++v127;
          }
        }
      }
      if (v3 > 0xA)
      {
        uint64_t v25 = 0;
        long long v26 = "";
        if (!v124) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v25 = (const char *)qword_181126190[v3];
        long long v26 = off_1E4FC01E0[v3];
        if (!v124) {
          goto LABEL_56;
        }
      }
      __int16 v123 = 261;
      unint64_t v120 = (const void **)v26;
      unint64_t v121 = v25;
      mlir::Diagnostic::operator<<((uint64_t)&v125, &v120);
      if (v124)
      {
        LODWORD(v120) = 3;
        uint64_t v122 = 21;
        long long v58 = &v120;
        uint64_t v59 = (char *)v126;
        if (v127 >= v128)
        {
          unint64_t v93 = v127 + 1;
          if (v126 <= &v120 && (char *)v126 + 24 * v127 > (char *)&v120)
          {
            int64_t v107 = (char *)&v120 - (unsigned char *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v93, 24);
            uint64_t v59 = (char *)v126;
            long long v58 = (const void ***)((char *)v126 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v93, 24);
            long long v58 = &v120;
            uint64_t v59 = (char *)v126;
          }
        }
        uint64_t v60 = &v59[24 * v127];
        long long v61 = *(_OWORD *)v58;
        *((void *)v60 + 2) = v58[2];
        *(_OWORD *)uint64_t v60 = v61;
        ++v127;
      }
LABEL_56:
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118);
      if (v124)
      {
        LODWORD(v120) = 2;
        unint64_t v121 = v62;
        char v63 = &v120;
        uint64_t v64 = (char *)v126;
        if (v127 >= v128)
        {
          unint64_t v88 = v127 + 1;
          if (v126 <= &v120 && (char *)v126 + 24 * v127 > (char *)&v120)
          {
            int64_t v103 = (char *)&v120 - (unsigned char *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v88, 24);
            uint64_t v64 = (char *)v126;
            char v63 = (const void ***)((char *)v126 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v88, 24);
            char v63 = &v120;
            uint64_t v64 = (char *)v126;
          }
        }
        uint64_t v65 = &v64[24 * v127];
        long long v66 = *(_OWORD *)v63;
        *((void *)v65 + 2) = v63[2];
        *(_OWORD *)uint64_t v65 = v66;
        uint64_t v67 = ++v127;
        if (v124)
        {
          LODWORD(v120) = 3;
          unint64_t v121 = ".";
          uint64_t v122 = 1;
          unint64_t v68 = &v120;
          BOOL v69 = (char *)v126;
          if (v67 >= v128)
          {
            unint64_t v94 = v67 + 1;
            BOOL v95 = (char *)v126 + 24 * v67 > (char *)&v120;
            if (v126 <= &v120 && v95)
            {
              int64_t v108 = (char *)&v120 - (unsigned char *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v94, 24);
              BOOL v69 = (char *)v126;
              unint64_t v68 = (const void ***)((char *)v126 + v108);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v94, 24);
              unint64_t v68 = &v120;
              BOOL v69 = (char *)v126;
            }
          }
          int64_t v70 = &v69[24 * v127];
          long long v71 = *(_OWORD *)v68;
          *((void *)v70 + 2) = v68[2];
          *(_OWORD *)int64_t v70 = v71;
          ++v127;
        }
      }
      uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v124);
      if (v124) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v124);
      }
      if (v134)
      {
        uint64_t v72 = (void **)__p;
        if (__p)
        {
          uint64_t v73 = v133;
          BOOL v74 = __p;
          if (v133 != __p)
          {
            do
              uint64_t v73 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v73 - 1);
            while (v73 != v72);
            BOOL v74 = __p;
          }
          uint64_t v133 = v72;
          operator delete(v74);
        }
        long long v53 = v130;
        if (!v130) {
          goto LABEL_77;
        }
        uint64_t v75 = v131;
        BOOL v55 = v130;
        if (v131 == v130)
        {
LABEL_76:
          unint64_t v131 = v53;
          operator delete(v55);
LABEL_77:
          if (v126 != v129) {
            free(v126);
          }
          return v30;
        }
        do
        {
          uint64_t v77 = (void *)*--v75;
          uint64_t v76 = v77;
          *uint64_t v75 = 0;
          if (v77) {
            operator delete[](v76);
          }
        }
        while (v75 != v53);
LABEL_75:
        BOOL v55 = v130;
        goto LABEL_76;
      }
      return v30;
    }
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v117)
    && (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v117), v27 != 1))
  {
    __int16 v123 = 257;
    mlir::OpState::emitOpError(this, &v120, (uint64_t)&v124);
    if (v124)
    {
      LODWORD(v113) = 3;
      uint64_t v114 = "requires bias operand to have rank exactly one.";
      uint64_t v115 = 47;
      long long v31 = &v113;
      int v32 = (char *)v126;
      if (v127 >= v128)
      {
        unint64_t v89 = v127 + 1;
        if (v126 <= &v113 && (char *)v126 + 24 * v127 > (char *)&v113)
        {
          int64_t v104 = (char *)&v113 - (unsigned char *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v89, 24);
          int v32 = (char *)v126;
          long long v31 = (const void ***)((char *)v126 + v104);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v89, 24);
          long long v31 = &v113;
          int v32 = (char *)v126;
        }
      }
      uint64_t v33 = &v32[24 * v127];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = v31[2];
      *(_OWORD *)uint64_t v33 = v34;
      uint64_t v35 = ++v127;
      if (v124)
      {
        LODWORD(v113) = 3;
        uint64_t v114 = " Found ";
        uint64_t v115 = 7;
        uint64_t v36 = &v113;
        uint64_t v37 = (char *)v126;
        if (v35 >= v128)
        {
          unint64_t v96 = v35 + 1;
          BOOL v97 = (char *)v126 + 24 * v35 > (char *)&v113;
          if (v126 <= &v113 && v97)
          {
            int64_t v109 = (char *)&v113 - (unsigned char *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v96, 24);
            uint64_t v37 = (char *)v126;
            uint64_t v36 = (const void ***)((char *)v126 + v109);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v96, 24);
            uint64_t v36 = &v113;
            uint64_t v37 = (char *)v126;
          }
        }
        uint64_t v38 = &v37[24 * v127];
        long long v39 = *(_OWORD *)v36;
        *((void *)v38 + 2) = v36[2];
        *(_OWORD *)uint64_t v38 = v39;
        ++v127;
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v117);
    if (v124)
    {
      LODWORD(v113) = 2;
      uint64_t v114 = v40;
      unint64_t v41 = &v113;
      BOOL v42 = (char *)v126;
      if (v127 >= v128)
      {
        unint64_t v90 = v127 + 1;
        if (v126 <= &v113 && (char *)v126 + 24 * v127 > (char *)&v113)
        {
          int64_t v105 = (char *)&v113 - (unsigned char *)v126;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v90, 24);
          BOOL v42 = (char *)v126;
          unint64_t v41 = (const void ***)((char *)v126 + v105);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v90, 24);
          unint64_t v41 = &v113;
          BOOL v42 = (char *)v126;
        }
      }
      int64_t v43 = &v42[24 * v127];
      long long v44 = *(_OWORD *)v41;
      *((void *)v43 + 2) = v41[2];
      *(_OWORD *)int64_t v43 = v44;
      uint64_t v45 = ++v127;
      if (v124)
      {
        LODWORD(v113) = 3;
        uint64_t v114 = ".";
        uint64_t v115 = 1;
        uint64_t v46 = &v113;
        BOOL v47 = (char *)v126;
        if (v45 >= v128)
        {
          unint64_t v98 = v45 + 1;
          BOOL v99 = (char *)v126 + 24 * v45 > (char *)&v113;
          if (v126 <= &v113 && v99)
          {
            int64_t v110 = (char *)&v113 - (unsigned char *)v126;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
            BOOL v47 = (char *)v126;
            uint64_t v46 = (const void ***)((char *)v126 + v110);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, v129, v98, 24);
            uint64_t v46 = &v113;
            BOOL v47 = (char *)v126;
          }
        }
        uint64_t v48 = &v47[24 * v127];
        long long v49 = *(_OWORD *)v46;
        *((void *)v48 + 2) = v46[2];
        *(_OWORD *)uint64_t v48 = v49;
        ++v127;
      }
    }
    uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v124);
    if (v124) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v124);
    }
    if (v134)
    {
      BOOL v50 = (void **)__p;
      if (__p)
      {
        uint64_t v51 = v133;
        unint64_t v52 = __p;
        if (v133 != __p)
        {
          do
            uint64_t v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          unint64_t v52 = __p;
        }
        uint64_t v133 = v50;
        operator delete(v52);
      }
      long long v53 = v130;
      if (!v130) {
        goto LABEL_77;
      }
      uint64_t v54 = v131;
      BOOL v55 = v130;
      if (v131 == v130) {
        goto LABEL_76;
      }
      do
      {
        unint64_t v57 = (void *)*--v54;
        uint64_t v56 = v57;
        void *v54 = 0;
        if (v57) {
          operator delete[](v56);
        }
      }
      while (v54 != v53);
      goto LABEL_75;
    }
  }
  else if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v117) {
         && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v118))
  }
  {
    if (v3 == 1)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118);
      uint64_t v29 = (v28 - 1);
    }
    else
    {
      uint64_t v29 = 1;
    }
    uint64_t v78 = *(const void ***)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118) + 8 * v29);
    int v113 = v78;
    uint64_t v79 = *(void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v117);
    uint64_t v112 = v79;
    uint64_t v30 = 1;
    if (v78 != (const void **)0x8000000000000000 && v79 != 0x8000000000000000 && v78 != (const void **)v79)
    {
      __int16 v123 = 257;
      mlir::OpState::emitOpError(this, &v120, (uint64_t)&v124);
      uint64_t v80 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v124, "requires feature dimension and bias dimension to match. ");
      uint64_t v81 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v80, "Found ");
      uint64_t v82 = mlir::InFlightDiagnostic::operator<<<long long &>(v81, (uint64_t *)&v113);
      uint64_t v83 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v82, " and ");
      uint64_t v84 = mlir::InFlightDiagnostic::operator<<<long long &>(v83, &v112);
      uint64_t v85 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v84, ", respectively.");
      uint64_t v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v85);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v124);
    }
  }
  else
  {
    return 1;
  }
  return v30;
}

uint64_t mlir::mps::BiasAddGradOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v67[2] = *MEMORY[0x1E4F143B8];
  v67[0] = a4;
  v67[1] = a5;
  if (a7) {
    uint64_t v16 = *a7;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v59 = a6;
  v60[0] = 0;
  char v61 = 0;
  uint64_t v62 = v16;
  uint64_t v63 = a9;
  uint64_t v64 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61) {
      char v61 = 0;
    }
    mlir::OperationName::OperationName(v60, "mps.bias_add_grad", 17, Context);
    char v61 = 1;
  }
  uint64_t v65 = a4;
  uint64_t v66 = a5;
  if (!a5
    || (uint64_t v18 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::BiasAddGradOpAdaptor::verify((uint64_t)&v59, v18)))
  {
    uint64_t ElementTypeOrSelf = mlir::Float32Type::get(this, a2);
    goto LABEL_20;
  }
  uint64_t v19 = mlir::ValueRange::dereference_iterator(v67, 0);
  int v20 = *(_DWORD *)(v62 + 8);
  uint64_t v21 = (void *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8))
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    goto LABEL_25;
  }
  uint64_t v22 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
  uint64_t v51 = v21;
  uint64_t v52 = v22;
  if (!v21)
  {
LABEL_25:
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(0);
    goto LABEL_20;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v51))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    unint64_t v24 = v23;
    if (v20 == 1) {
      uint64_t v25 = v23 - 1;
    }
    else {
      uint64_t v25 = 1;
    }
    uint64_t v56 = v58;
    uint64_t v57 = 0x600000000;
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
    uint64_t v28 = v27;
    long long v53 = v55;
    uint64_t v54 = 0x400000000;
    if (v24)
    {
      if (v24 < 5)
      {
        uint64_t v29 = 0;
        uint64_t v30 = (uint64_t *)v55;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v55, v24, 8);
        uint64_t v29 = v54;
        uint64_t v30 = (uint64_t *)v53;
      }
      if (v24 != v29) {
        bzero(&v30[v29], 8 * (v24 - v29));
      }
      LODWORD(v54) = v24;
      if (v24 >= 4)
      {
        unint64_t v36 = v24 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v37 = (int64x2_t)xmmword_1810FE2E0;
        uint64_t v38 = (int64x2_t *)(v30 + 2);
        int64x2_t v39 = vdupq_n_s64(2uLL);
        int64x2_t v40 = vdupq_n_s64(4uLL);
        unint64_t v41 = v24 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v38[-1] = v37;
          *uint64_t v38 = vaddq_s64(v37, v39);
          int64x2_t v37 = vaddq_s64(v37, v40);
          v38 += 2;
          v41 -= 4;
        }
        while (v41);
        goto LABEL_37;
      }
      unint64_t v36 = 0;
      do
      {
        v30[v36] = v36;
        ++v36;
LABEL_37:
        ;
      }
      while (v24 != v36);
    }
    else
    {
      uint64_t v30 = (uint64_t *)v55;
    }
    BOOL v42 = &v30[v25];
    int64_t v43 = &v30[v24];
    if (v43 != v42 + 1)
    {
      memmove(v42, v42 + 1, (char *)v43 - (char *)(v42 + 1));
      LODWORD(v24) = v54;
      uint64_t v30 = (uint64_t *)v53;
    }
    LODWORD(v54) = v24 - 1;
    if (v53 != v55) {
      free(v53);
    }
    if (v44)
    {
      uint64_t v45 = v56;
      uint64_t v46 = v57;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
      uint64_t v48 = mlir::RankedTensorType::get((uint64_t)v45, v46, OperandRange, 0);
      uint64_t v49 = *(unsigned int *)(a11 + 8);
      if (v49 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v49 + 1, 8);
        LODWORD(v49) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v49) = v48;
      ++*(_DWORD *)(a11 + 8);
      uint64_t v34 = 1;
      BOOL v50 = v56;
      if (v56 == v58) {
        return v34;
      }
    }
    else
    {
      uint64_t v34 = 0;
      BOOL v50 = v56;
      if (v56 == v58) {
        return v34;
      }
    }
    free(v50);
    return v34;
  }
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v51);
LABEL_20:
  uint64_t v32 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
  uint64_t v33 = *(unsigned int *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    LODWORD(v33) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v33) = v32;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::BiasAddGradOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2 || *(_DWORD *)(v2 + 8) < 2u) {
    return 1;
  }
  uint64_t v13 = "'mps.bias_add_grad' op attribute 'data_format' failed to satisfy constraint: valid TensorDataLayout is NHWC or NCHW";
  __int16 v14 = 259;
  mlir::emitError(a2, (uint64_t)&v13, (uint64_t)v15);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  }
  if (v22)
  {
    uint64_t v5 = (void **)__p;
    if (__p)
    {
      uint64_t v6 = v21;
      uint64_t v7 = __p;
      if (v21 != __p)
      {
        do
          uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      uint64_t v21 = v5;
      operator delete(v7);
    }
    uint64_t v8 = v18;
    if (v18)
    {
      uint64_t v9 = v19;
      uint64_t v10 = v18;
      if (v19 != v18)
      {
        do
        {
          uint64_t v12 = (void *)*--v9;
          uint64_t v11 = v12;
          *uint64_t v9 = 0;
          if (v12) {
            operator delete[](v11);
          }
        }
        while (v9 != v8);
        uint64_t v10 = v18;
      }
      uint64_t v19 = v8;
      operator delete(v10);
    }
    if (v16 != &v17) {
      free(v16);
    }
  }
  return v3;
}

uint64_t mlir::mps::anonymous namespace'::inferReductionOpReturnShape(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8)
{
  v41[6] = *MEMORY[0x1E4F143B8];
  int64x2_t v39 = v41;
  uint64_t v40 = 0x600000000;
  {
    uint64_t v27 = 0;
    uint64_t v28 = v39;
    if (v39 == v41) {
      return v27;
    }
    goto LABEL_33;
  }
  uint64_t v33 = v35;
  uint64_t v34 = 0x400000000;
  int64x2_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v36 = &v37;
  if (v40)
  {
    uint64_t v12 = (uint64_t **)v39;
    uint64_t v13 = 8 * v40;
    do
    {
      __int16 v14 = *v12++;
      uint64_t v32 = v14;
      llvm::SmallSet<long long,4u,std::less<long long>>::insert((uint64_t)&v33, &v32, (uint64_t)v31);
      v13 -= 8;
    }
    while (v13);
  }
  if (a4)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (void *)(a8 + 16);
    do
    {
      if (v38)
      {
        uint64_t v19 = v37;
        if (!v37) {
          goto LABEL_7;
        }
        int v20 = &v37;
        do
        {
          uint64_t v21 = v19;
          char v22 = v20;
          uint64_t v23 = v19[4];
          unint64_t v24 = v19 + 1;
          if (v23 >= v15)
          {
            unint64_t v24 = v21;
            int v20 = (void **)v21;
          }
          uint64_t v19 = (void *)*v24;
        }
        while (v19);
        if (v20 == &v37) {
          goto LABEL_7;
        }
        if (v23 < v15) {
          uint64_t v21 = v22;
        }
        if (v15 < v21[4]) {
          goto LABEL_7;
        }
      }
      else
      {
        if (!v34) {
          goto LABEL_7;
        }
        uint64_t v25 = v33;
        uint64_t v26 = 8 * v34;
        while (*v25 != v15)
        {
          ++v25;
          v26 -= 8;
          if (!v26) {
            goto LABEL_7;
          }
        }
        if (!v26)
        {
LABEL_7:
          uint64_t v17 = *(void *)(a3 + 8 * v15);
          unint64_t v18 = *(unsigned int *)(a8 + 8);
          if (v18 >= *(unsigned int *)(a8 + 12)) {
            goto LABEL_29;
          }
          goto LABEL_8;
        }
      }
      if (!a7) {
        goto LABEL_9;
      }
      unint64_t v18 = *(unsigned int *)(a8 + 8);
      uint64_t v17 = 1;
      if (v18 >= *(unsigned int *)(a8 + 12))
      {
LABEL_29:
        uint64_t v30 = v16;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a8, v16, v18 + 1, 8);
        uint64_t v16 = v30;
        unint64_t v18 = *(unsigned int *)(a8 + 8);
      }
LABEL_8:
      *(void *)(*(void *)a8 + 8 * v18) = v17;
      ++*(_DWORD *)(a8 + 8);
LABEL_9:
      ++v15;
    }
    while (v15 != a4);
  }
  std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v36, v37);
  if (v33 != v35) {
    free(v33);
  }
  uint64_t v27 = 1;
  uint64_t v28 = v39;
  if (v39 != v41) {
LABEL_33:
  }
    free(v28);
  return v27;
}

uint64_t mlir::mps::BiasAddGradOp::verify(uint64_t **this)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *this;
  uint64_t v2 = *(int *)((*this)[10] + 8);
  uint64_t v3 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v3)
  {
    long long v58 = 0;
    uint64_t v59 = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v58)) {
      goto LABEL_5;
    }
    return 1;
  }
  uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  long long v58 = v3;
  uint64_t v59 = v4;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v58)) {
    return 1;
  }
LABEL_5:
  if (v2 == 1) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = 3;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v58);
  if (v6 >= v5) {
    return 1;
  }
  uint64_t v7 = (const char *)v6;
  uint64_t v56 = (const void **)"requires out_backprop operand to have rank at least ";
  __int16 v57 = 259;
  mlir::Operation::emitOpError(v1, &v56, (uint64_t)&v64);
  if (v64)
  {
    LODWORD(v60) = 2;
    char v61 = (const char *)v5;
    uint64_t v8 = &v60;
    uint64_t v9 = (char *)v66;
    if (v67 >= v68)
    {
      unint64_t v43 = v67 + 1;
      if (v66 <= &v60 && (char *)v66 + 24 * v67 > (char *)&v60)
      {
        int64_t v51 = (char *)&v60 - (unsigned char *)v66;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v43, 24);
        uint64_t v9 = (char *)v66;
        uint64_t v8 = (const void ***)((char *)v66 + v51);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v43, 24);
        uint64_t v8 = &v60;
        uint64_t v9 = (char *)v66;
      }
    }
    uint64_t v10 = &v9[24 * v67];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    uint64_t v12 = ++v67;
    if (v64)
    {
      LODWORD(v60) = 3;
      uint64_t v62 = 7;
      uint64_t v13 = &v60;
      __int16 v14 = (char *)v66;
      if (v12 >= v68)
      {
        unint64_t v44 = v12 + 1;
        BOOL v45 = (char *)v66 + 24 * v12 > (char *)&v60;
        if (v66 <= &v60 && v45)
        {
          int64_t v52 = (char *)&v60 - (unsigned char *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v44, 24);
          __int16 v14 = (char *)v66;
          uint64_t v13 = (const void ***)((char *)v66 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v44, 24);
          uint64_t v13 = &v60;
          __int16 v14 = (char *)v66;
        }
      }
      uint64_t v15 = &v14[24 * v67];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = v13[2];
      *(_OWORD *)uint64_t v15 = v16;
      ++v67;
    }
  }
  if (v2 <= 0xA)
  {
    uint64_t v17 = (const char *)qword_181126190[v2];
    unint64_t v18 = off_1E4FC01E0[v2];
    if (!v64) {
      goto LABEL_27;
    }
LABEL_20:
    __int16 v63 = 261;
    uint64_t v60 = (const void **)v18;
    char v61 = v17;
    mlir::Diagnostic::operator<<((uint64_t)&v65, &v60);
    if (v64)
    {
      LODWORD(v60) = 3;
      uint64_t v62 = 21;
      uint64_t v21 = &v60;
      char v22 = (char *)v66;
      if (v67 >= v68)
      {
        unint64_t v46 = v67 + 1;
        if (v66 <= &v60 && (char *)v66 + 24 * v67 > (char *)&v60)
        {
          int64_t v53 = (char *)&v60 - (unsigned char *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v46, 24);
          char v22 = (char *)v66;
          uint64_t v21 = (const void ***)((char *)v66 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v46, 24);
          uint64_t v21 = &v60;
          char v22 = (char *)v66;
        }
      }
      uint64_t v23 = &v22[24 * v67];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = v21[2];
      *(_OWORD *)uint64_t v23 = v24;
      uint64_t v25 = ++v67;
      if (v64)
      {
        LODWORD(v60) = 2;
        char v61 = v7;
        uint64_t v26 = &v60;
        uint64_t v27 = (char *)v66;
        if (v25 >= v68)
        {
          unint64_t v47 = v25 + 1;
          BOOL v48 = (char *)v66 + 24 * v25 > (char *)&v60;
          if (v66 <= &v60 && v48)
          {
            int64_t v54 = (char *)&v60 - (unsigned char *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v47, 24);
            uint64_t v27 = (char *)v66;
            uint64_t v26 = (const void ***)((char *)v66 + v54);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v47, 24);
            uint64_t v26 = &v60;
            uint64_t v27 = (char *)v66;
          }
        }
        uint64_t v28 = &v27[24 * v67];
        long long v29 = *(_OWORD *)v26;
        *((void *)v28 + 2) = v26[2];
        *(_OWORD *)uint64_t v28 = v29;
        uint64_t v30 = ++v67;
        if (v64)
        {
          LODWORD(v60) = 3;
          char v61 = ".";
          uint64_t v62 = 1;
          long long v31 = &v60;
          uint64_t v32 = (char *)v66;
          if (v30 >= v68)
          {
            unint64_t v49 = v30 + 1;
            BOOL v50 = (char *)v66 + 24 * v30 > (char *)&v60;
            if (v66 <= &v60 && v50)
            {
              int64_t v55 = (char *)&v60 - (unsigned char *)v66;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v49, 24);
              uint64_t v32 = (char *)v66;
              long long v31 = (const void ***)((char *)v66 + v55);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v49, 24);
              long long v31 = &v60;
              uint64_t v32 = (char *)v66;
            }
          }
          uint64_t v33 = &v32[24 * v67];
          long long v34 = *(_OWORD *)v31;
          *((void *)v33 + 2) = v31[2];
          *(_OWORD *)uint64_t v33 = v34;
          ++v67;
        }
      }
    }
    goto LABEL_27;
  }
  uint64_t v17 = 0;
  unint64_t v18 = "";
  if (v64) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v64);
  if (v64) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
  }
  if (v74)
  {
    uint64_t v35 = (void **)__p;
    if (__p)
    {
      unint64_t v36 = v73;
      int64x2_t v37 = __p;
      if (v73 != __p)
      {
        do
          unint64_t v36 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v36 - 1);
        while (v36 != v35);
        int64x2_t v37 = __p;
      }
      uint64_t v73 = v35;
      operator delete(v37);
    }
    uint64_t v38 = v70;
    if (v70)
    {
      int64x2_t v39 = v71;
      uint64_t v40 = v70;
      if (v71 != v70)
      {
        do
        {
          BOOL v42 = (void *)*--v39;
          unint64_t v41 = v42;
          *int64x2_t v39 = 0;
          if (v42) {
            operator delete[](v41);
          }
        }
        while (v39 != v38);
        uint64_t v40 = v70;
      }
      long long v71 = v38;
      operator delete(v40);
    }
    if (v66 != v69) {
      free(v66);
    }
  }
  return v19;
}

void mlir::mps::SoftplusParametricOp::downgradeToVersion(uint64_t **a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v77[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  v56[0] = &unk_1EC9CA678;
  v56[1] = 0x300000001;
  int v57 = 0;
  int v9 = *(_DWORD *)(a3 + 8);
  if (!v9 || v9 == 1 && *(_DWORD *)(a3 + 12) <= 2u)
  {
    uint64_t v10 = *(void *)(v8[9] + 120);
    uint64_t v75 = v77;
    uint64_t v76 = 0x400000000;
    if (mlir::matchConstantWithIntVector<long long>(v10, (uint64_t)&v75)) {
      BOOL v11 = v76 == 1;
    }
    else {
      BOOL v11 = 0;
    }
    if (v11 && *v75 == 1)
    {
      uint64_t v12 = (void *)v8[9];
      uint64_t v13 = v12[3];
      __int16 v14 = (void *)v12[7];
      uint64_t v15 = v12[11];
      uint64_t v64 = &v66;
      uint64_t v66 = v13;
      unsigned int v67 = v14;
      uint64_t v68 = v15;
      uint64_t v65 = 0x400000003;
      long long v16 = (mlir::Attribute *)(*a1 + 3);
      uint64_t v17 = *(void *)v16;
      uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext(v16);
      unint64_t v49 = *(const char **)(v8[6] + 8);
      uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v49);
      LOWORD(v53[0]) = 261;
      unint64_t v49 = (const char *)AttrData;
      uint64_t v50 = v20;
      uint64_t v21 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v49);
      mlir::ValueRange::ValueRange(v60, (uint64_t)v64, v65);
      unint64_t v22 = *((unsigned int *)v8 + 9);
      uint64_t v23 = (const void **)(v8 - 2);
      if (!v22) {
        uint64_t v23 = 0;
      }
      unint64_t AttrDictionary = (const char **)v23;
      unint64_t v62 = v22;
      mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, &v46);
      uint64_t NextResultAtOffset = v46;
      uint64_t v25 = v47;
      uint64_t v26 = v48;
      if (v47) {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v46, v47);
      }
      mlir::ValueRange::ValueRange((unint64_t *)&AttrDictionary, NextResultAtOffset, v26 - v25);
      mlir::TypeRange::TypeRange(v59, (uint64_t)AttrDictionary, v62);
      if (*((unsigned char *)v8 + 47))
      {
        unint64_t AttrDictionary = (const char **)mlir::Operation::getAttrDictionary((mlir::Operation *)v8);
        p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
      }
      else
      {
        p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v8 + 7);
      }
      uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
      uint64_t v41 = v40;
      mlir::SuccessorRange::SuccessorRange((unint64_t *)&AttrDictionary, (Operation *)v8);
      mlir::BlockRange::BlockRange(v58, (uint64_t)AttrDictionary, v62);
      unint64_t v43 = mlir::OpBuilder::create(a2, v17, v21, v60[0], v60[1], v59[0], v59[1], v42, Value, v41, v58[0], v58[1], 0, 0);
      uint64_t v44 = *((unsigned int *)v43 + 9);
      BOOL v45 = (char *)v43 - 16;
      if (!v44) {
        BOOL v45 = 0;
      }
      *(void *)a4 = v45;
      *(void *)(a4 + 8) = v44;
      *(unsigned char *)(a4 + 16) = 1;
      uint64_t v38 = v64;
      if (v64 == &v66) {
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v49 = "failed to downgrade: requested target version is {0}, axis != 1 only supported from version {1}";
      uint64_t v50 = 95;
      int64_t v51 = v55;
      uint64_t v52 = 2;
      v53[0] = &unk_1EC9A4798;
      v53[1] = a3;
      v54[0] = &unk_1EC9A4828;
      v54[1] = v56;
      v55[0] = v53;
      v55[1] = v54;
      __int16 v63 = 263;
      unint64_t AttrDictionary = &v49;
      mlir::OpState::emitOpError(a1, (const void ***)&AttrDictionary, (uint64_t)&v64);
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 16) = 0;
      if (v64) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v64);
      }
      if (!v74) {
        goto LABEL_37;
      }
      uint64_t v30 = (void **)__p;
      if (__p)
      {
        long long v31 = v73;
        uint64_t v32 = __p;
        if (v73 != __p)
        {
          do
            long long v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
          while (v31 != v30);
          uint64_t v32 = __p;
        }
        uint64_t v73 = v30;
        operator delete(v32);
      }
      uint64_t v33 = v70;
      if (v70)
      {
        long long v34 = v71;
        uint64_t v35 = v70;
        if (v71 != v70)
        {
          do
          {
            int64x2_t v37 = (void *)*--v34;
            unint64_t v36 = v37;
            void *v34 = 0;
            if (v37) {
              operator delete[](v36);
            }
          }
          while (v34 != v33);
          uint64_t v35 = v70;
        }
        long long v71 = v33;
        operator delete(v35);
      }
      uint64_t v38 = v67;
      if (v67 == &v69) {
        goto LABEL_37;
      }
    }
    free(v38);
LABEL_37:
    if (v75 != v77) {
      free(v75);
    }
    return;
  }
  uint64_t v28 = *((unsigned int *)v8 + 9);
  long long v29 = v8 - 2;
  if (!v28) {
    long long v29 = 0;
  }
  *(void *)a4 = v29;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = 1;
}

void mlir::mps::SoftplusParametricOp::upgradeFromVersion(uint64_t *a1@<X0>, mlir::OpBuilder *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  uint64_t v26 = &unk_1EC9CA678;
  uint64_t v27 = 0x300000001;
  int v28 = 0;
  int v8 = *(_DWORD *)(a3 + 8);
  if (v8 && (v8 != 1 || *(_DWORD *)(a3 + 12) > 2u))
  {
    uint64_t v15 = *(unsigned int *)(v7 + 36);
    uint64_t v16 = v7 - 16;
    if (!v15) {
      uint64_t v16 = 0;
    }
    *(void *)a4 = v16;
    *(void *)(a4 + 8) = v15;
    *(unsigned char *)(a4 + 16) = 1;
  }
  else
  {
    v29[0] = (void *)1;
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(v7 + 24));
    uint64_t v10 = mlir::IntegerType::get(Context, 0x20u, 1u);
    BOOL v11 = (void *)mlir::RankedTensorType::get((uint64_t)v29, 1, v10, 0);
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(*a1 + 24);
    if (v11) {
      uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
    }
    else {
      uint64_t v14 = 0;
    }
    int v25 = 1;
    v29[0] = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v12, v14, &v25, 4, 4, 1, 1);
    uint64_t v17 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(a2, v13, (uint64_t **)v29);
    unint64_t v18 = *(void **)(v7 + 72);
    uint64_t v19 = v18[3];
    uint64_t v20 = v18[7];
    uint64_t v21 = v18[11];
    v29[0] = &v30;
    uint64_t v30 = v19;
    uint64_t v31 = v20;
    uint64_t v32 = v21;
    v33[0] = (uint64_t)v17 - 16;
    v29[1] = (void *)0x400000004;
    unint64_t v22 = mlir::OpBuilder::create<mlir::mps::SoftplusParametricOp,mlir::Value &,mlir::Value &,mlir::Value &,mlir::Value &>(a2, *(void *)(*a1 + 24), &v30, &v31, &v32, v33);
    uint64_t v23 = *((unsigned int *)v22 + 9);
    long long v24 = (char *)v22 - 16;
    if (!v23) {
      long long v24 = 0;
    }
    *(void *)a4 = v24;
    *(void *)(a4 + 8) = v23;
    *(unsigned char *)(a4 + 16) = 1;
    if (v29[0] != &v30) {
      free(v29[0]);
    }
  }
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::SoftplusParametricOp,mlir::Value &,mlir::Value &,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  v24[38] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.softplus_parametric", (const unsigned __int8 *)0x17, Context);
  if (!v14)
  {
    __int16 v23 = 1283;
    void v22[2] = (uint64_t)"mps.softplus_parametric";
    v22[3] = 23;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v21 = 259;
    llvm::operator+(v22, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v13);
  mlir::mps::LPNormOp::build(v15, (uint64_t)v24, *a3, *a4, *a5, *a6);
  uint64_t v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SoftplusParametricOp,void>::id) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

uint64_t mlir::mps::inferStencilShape(int a1, int a2, void *__src, unint64_t a4, void *a5, int a6, unint64_t **a7, void **a8, void **a9, char a10, uint64_t a11)
{
  unint64_t v16 = *(unsigned int *)(a11 + 8);
  if (a4 != v16)
  {
    if (a4 >= v16)
    {
      if (a4 > *(unsigned int *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), a4, 8);
        unint64_t v16 = *(unsigned int *)(a11 + 8);
      }
      if (a4 != v16) {
        bzero((void *)(*(void *)a11 + 8 * v16), 8 * (a4 - v16));
      }
    }
    *(_DWORD *)(a11 + 8) = a4;
  }
  unint64_t v17 = a4 - 4;
  if (a4) {
    memmove(*(void **)a11, __src, 8 * a4);
  }
  unint64_t v18 = *a8;
  uint64_t v19 = *a7;
  uint64_t v20 = *(void **)a11;
  unint64_t v21 = *((void *)__src + v17);
  if ((a10 & 1) == 0)
  {
    int v28 = *a9;
    if (v21 == 0x8000000000000000)
    {
      unint64_t v29 = a4 - 3;
      uint64_t v30 = *((void *)__src + a4 - 3);
      if (v30 == 0x8000000000000000) {
        goto LABEL_18;
      }
    }
    else
    {
      v20[v17] = (*v28 + v28[1] + v21 + ~(*v18 * (*a5 - 1)) + *v19) / *v19;
      unint64_t v29 = a4 - 3;
      uint64_t v30 = *((void *)__src + a4 - 3);
      if (v30 == 0x8000000000000000)
      {
LABEL_18:
        unint64_t v31 = a4 - 2;
        uint64_t v32 = *((void *)__src + a4 - 2);
        if (v32 == 0x8000000000000000) {
          goto LABEL_19;
        }
        goto LABEL_35;
      }
    }
    v20[v29] = (v28[2] + v28[3] + v30 + ~(v18[1] * (a5[1] - 1)) + v19[1]) / v19[1];
    unint64_t v31 = a4 - 2;
    uint64_t v32 = *((void *)__src + a4 - 2);
    if (v32 == 0x8000000000000000)
    {
LABEL_19:
      unint64_t v26 = a4 - 1;
      uint64_t v33 = *((void *)__src + a4 - 1);
      if (v33 == 0x8000000000000000) {
        return 1;
      }
      goto LABEL_36;
    }
LABEL_35:
    v20[v31] = (v28[4] + v28[5] + v32 + ~(v18[2] * (a5[2] - 1)) + v19[2]) / v19[2];
    unint64_t v26 = a4 - 1;
    uint64_t v33 = *((void *)__src + a4 - 1);
    if (v33 == 0x8000000000000000) {
      return 1;
    }
LABEL_36:
    unint64_t v42 = v19[3];
    unint64_t v44 = v28[6] + v28[7] + v33 + ~(v18[3] * (a5[3] - 1)) + v42;
LABEL_37:
    v20[v26] = v44 / v42;
    return 1;
  }
  if (v21 == 0x8000000000000000)
  {
    unint64_t v22 = a4 - 3;
    unint64_t v23 = *((void *)__src + a4 - 3);
    if (v23 == 0x8000000000000000) {
      goto LABEL_13;
    }
LABEL_24:
    unint64_t v36 = v19[1];
    unint64_t v37 = v23 % v36;
    if (!(v23 % v36)) {
      unint64_t v37 = v19[1];
    }
    uint64_t v35 = v18[1] * (a5[1] - 1);
    v20[v22] = (((v35 - v37 + 1) & ~((uint64_t)(v35 - v37 + 1) >> 63)) + ~v35 + v23 + v36) / v36;
    unint64_t v24 = a4 - 2;
    unint64_t v25 = *((void *)__src + a4 - 2);
    if (v25 == 0x8000000000000000)
    {
LABEL_14:
      unint64_t v26 = a4 - 1;
      unint64_t v27 = *((void *)__src + a4 - 1);
      if (v27 == 0x8000000000000000) {
        return 1;
      }
      goto LABEL_30;
    }
    goto LABEL_27;
  }
  unint64_t v34 = v21 % *v19;
  if (!v34) {
    unint64_t v34 = *v19;
  }
  v20[v17] = (((*v18 * (*a5 - 1) - v34 + 1) & ~((uint64_t)(*v18 * (*a5 - 1) - v34 + 1) >> 63))
            + ~(*v18 * (*a5 - 1))
            + v21
            + *v19)
           / *v19;
  unint64_t v22 = a4 - 3;
  unint64_t v23 = *((void *)__src + a4 - 3);
  if (v23 != 0x8000000000000000) {
    goto LABEL_24;
  }
LABEL_13:
  unint64_t v24 = a4 - 2;
  unint64_t v25 = *((void *)__src + a4 - 2);
  if (v25 == 0x8000000000000000) {
    goto LABEL_14;
  }
LABEL_27:
  unint64_t v39 = v19[2];
  unint64_t v40 = v25 % v39;
  if (!(v25 % v39)) {
    unint64_t v40 = v19[2];
  }
  uint64_t v38 = v18[2] * (a5[2] - 1);
  v20[v24] = (((v38 - v40 + 1) & ~((uint64_t)(v38 - v40 + 1) >> 63)) + ~v38 + v25 + v39) / v39;
  unint64_t v26 = a4 - 1;
  unint64_t v27 = *((void *)__src + a4 - 1);
  if (v27 != 0x8000000000000000)
  {
LABEL_30:
    uint64_t v41 = v18[3] * (a5[3] - 1);
    unint64_t v42 = v19[3];
    unint64_t v43 = v27 % v42;
    if (!(v27 % v42)) {
      unint64_t v43 = v42;
    }
    unint64_t v44 = ((v41 - v43 + 1) & ~((uint64_t)(v41 - v43 + 1) >> 63)) + ~v41 + v27 + v42;
    goto LABEL_37;
  }
  return 1;
}

uint64_t mlir::mps::StencilOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v93 = a4;
  unint64_t v94 = a5;
  if (a7)
  {
    long long v16 = *a7;
    long long v17 = a7[1];
    long long v18 = a7[2];
    long long v19 = a7[3];
  }
  else
  {
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
    long long v19 = 0uLL;
  }
  uint64_t v82 = a6;
  v83[0] = 0;
  char v84 = 0;
  long long v85 = v16;
  long long v86 = v17;
  long long v87 = v18;
  long long v88 = v19;
  unint64_t v20 = a5;
  uint64_t v89 = a9;
  uint64_t v90 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v82);
    if (v84) {
      char v84 = 0;
    }
    mlir::OperationName::OperationName(v83, "mps.stencil", 11, Context);
    char v84 = 1;
    unint64_t v20 = v94;
  }
  uint64_t v91 = a4;
  unint64_t v92 = a5;
  if (v20 < 2
    || (uint64_t v22 = mlir::UnknownLoc::get(this, a2), !mlir::mps::StencilOpAdaptor::verify(&v82, v22)))
  {
    uint64_t v34 = mlir::Float32Type::get(this, a2);
    int v28 = (void *)mlir::UnrankedTensorType::get(v34);
    goto LABEL_21;
  }
  unint64_t v23 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v93, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = *(void *)(mlir::ValueRange::dereference_iterator(&v93, 1) + 8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8))
  {
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot stencil a non-shaped inputType");
  }
  uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v23 + 8);
  uint64_t v68 = v23;
  uint64_t v69 = v25;
  if (!v23) {
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot stencil a non-shaped inputType");
  }
  unint64_t v26 = v24 & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)(v24 & 0xFFFFFFFFFFFFFFF8) + 8))
  {
    unint64_t v66 = 0;
    uint64_t v67 = 0;
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot stencil with a non-shaped weightsType");
  }
  uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v26 + 8);
  unint64_t v66 = v24 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v67 = v27;
  if (!v26) {
    return mlir::emitOptionalError<char const(&)[39]>((uint64_t)a2, a3, "cannot stencil with a non-shaped weightsType");
  }
  int v28 = v68;
  if (*(_UNKNOWN **)(*v68 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && *(_UNKNOWN **)(*(void *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
    unint64_t v30 = v29;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
    if (v30 >= 4 && v31 == 4)
    {
      uint64_t v32 = *((void *)&v85 + 1);
      uint64_t v64 = v85;
      uint64_t v65 = *((void *)&v88 + 1);
      uint64_t v63 = *((void *)&v85 + 1);
      if (*((void *)&v87 + 1)) {
        int v33 = *(_DWORD *)(*((void *)&v87 + 1) + 8);
      }
      else {
        int v33 = 2;
      }
      uint64_t v79 = v81;
      uint64_t v80 = 0x400000000;
      if (*((void *)&v88 + 1) && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v65) == 4)
      {
        mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v73, v65, 0);
        mlir::DenseIntElementsAttr::end((mlir::DenseIntElementsAttr *)&v65, &v76);
        while (1)
        {
          BOOL v40 = v73 == v76 && v74 == v77;
          if (v40 && v75[0] == v78[0]) {
            break;
          }
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v73, (llvm::APInt *)&__p);
          if (v71 > 0x40) {
            uint64_t v41 = *(void *)__p;
          }
          else {
            uint64_t v41 = (uint64_t)((void)__p << -(uint64_t)v71) >> -(uint64_t)v71;
          }
          uint64_t v42 = v80;
          if (v80 >= (unint64_t)HIDWORD(v80))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v81, v80 + 1, 8);
            uint64_t v42 = v80;
          }
          *((void *)v79 + v42) = v41;
          LODWORD(v80) = v80 + 1;
          if (v71 >= 0x41)
          {
            if (__p) {
              operator delete[](__p);
            }
          }
          ++v75[0];
        }
      }
      else
      {
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v79, 4uLL, 1uLL);
      }
      uint64_t v76 = v78;
      uint64_t v77 = 0x400000000;
      if (v64 && mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v64) == 4)
      {
        mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v73, v64, 0);
        mlir::DenseIntElementsAttr::end((mlir::DenseIntElementsAttr *)&v64, &__p);
        while (1)
        {
          BOOL v43 = v73 == __p && v74 == v71;
          if (v43 && v75[0] == v72[0]) {
            break;
          }
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v73, (llvm::APInt *)&v60);
          if (v61 > 0x40) {
            uint64_t v44 = *(void *)v60;
          }
          else {
            uint64_t v44 = (uint64_t)((void)v60 << -(uint64_t)v61) >> -(uint64_t)v61;
          }
          uint64_t v45 = v77;
          if (v77 >= (unint64_t)HIDWORD(v77))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v78, v77 + 1, 8);
            uint64_t v45 = v77;
          }
          *((void *)v76 + v45) = v44;
          LODWORD(v77) = v77 + 1;
          if (v61 >= 0x41 && v60) {
            operator delete[](v60);
          }
          ++v75[0];
        }
      }
      else
      {
        llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v76, 4uLL, 1uLL);
      }
      uint64_t v73 = v75;
      uint64_t v74 = 0x800000000;
      switch(v33)
      {
        case 0:
        case 3:
          if (!v32 || mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v63) != 8) {
            goto LABEL_87;
          }
          mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&__p, v63, 0);
          mlir::DenseIntElementsAttr::end((mlir::DenseIntElementsAttr *)&v63, &v60);
          break;
        case 1:
LABEL_87:
          llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)&v73, 8uLL, 0);
          goto LABEL_88;
        case 2:
        case 4:
          char v47 = 1;
          goto LABEL_90;
        default:
LABEL_88:
          char v47 = 0;
LABEL_90:
          __p = v72;
          uint64_t v71 = 0x400000000;
          uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v68);
          unint64_t v50 = v49;
          int64_t v51 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
          uint64_t v60 = v79;
          uint64_t v61 = v80;
          long long v58 = v76;
          uint64_t v59 = v77;
          v57[0] = v73;
          v57[1] = (void *)v74;
          if (mlir::mps::inferStencilShape((int)v51, v52, ArgAttrsAttr, v50, v51, v52, (unint64_t **)&v60, (void **)&v58, v57, v47, (uint64_t)&__p))
          {
            int64_t v53 = __p;
            uint64_t v54 = v71;
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68);
            uint64_t v56 = mlir::RankedTensorType::get((uint64_t)v53, v54, OperandRange, 0);
            llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v56);
            uint64_t v36 = 1;
          }
          else
          {
            uint64_t v36 = 0;
          }
          if (__p != v72) {
            free(__p);
          }
          if (v73 != v75) {
            free(v73);
          }
          if (v76 != v78) {
            free(v76);
          }
          if (v79 != v81) {
            free(v79);
          }
          return v36;
      }
      while (1)
      {
        BOOL v46 = __p == v60 && v71 == v61;
        if (v46 && v72[0] == v62) {
          goto LABEL_88;
        }
        mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&__p, (llvm::APInt *)&v58);
        if (v59 > 0x40)
        {
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v73, *(void *)v58);
          if (v59 < 0x41) {
            goto LABEL_74;
          }
        }
        else
        {
          llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v73, (uint64_t)((void)v58 << -(uint64_t)v59) >> -(uint64_t)v59);
          if (v59 < 0x41) {
            goto LABEL_74;
          }
        }
        if (v58) {
          operator delete[](v58);
        }
LABEL_74:
        ++v72[0];
      }
    }
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v68);
    uint64_t v39 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v39);
    return 1;
  }
LABEL_21:
  uint64_t v35 = *(unsigned int *)(a11 + 8);
  if (v35 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v35) = v28;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::StencilOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const char *)a1[3];
  uint64_t v3 = (const char *)a1[4];
  uint64_t v6 = (const char *)a1[5];
  uint64_t v5 = (const char *)a1[6];
  uint64_t v7 = (const char *)a1[10];
  if (!v6) {
    goto LABEL_105;
  }
  uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
  unint64_t v66 = v6;
  uint64_t v67 = v8;
  Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
  uint64_t v10 = Type;
  if (Type) {
    Type = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  }
  uint64_t Value = (uint64_t)v10;
  uint64_t v74 = Type;
  uint64_t ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
  uint64_t v82 = 4;
  if (v12 != 1) {
    goto LABEL_28;
  }
  if (*ArgAttrsAttr == v82
    && (uint64_t v69 = v6,
        uint64_t v70 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
        uint64_t v71 = v13,
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70),
        mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)))
  {
LABEL_105:
    if (!v7) {
      goto LABEL_106;
    }
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v7 + 8);
    unint64_t v66 = v7;
    uint64_t v67 = v14;
    uint64_t v15 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
    long long v16 = v15;
    if (v15) {
      uint64_t v15 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
    }
    uint64_t Value = (uint64_t)v16;
    uint64_t v74 = v15;
    long long v17 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
    uint64_t v82 = 4;
    if (v18 != 1) {
      goto LABEL_42;
    }
    if (*v17 == v82
      && (uint64_t v69 = v7,
          uint64_t v70 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
          uint64_t v71 = v19,
          uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70),
          mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
    {
LABEL_106:
      if (!v4) {
        goto LABEL_107;
      }
      uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v4 + 8);
      unint64_t v66 = v4;
      uint64_t v67 = v20;
      unint64_t v21 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
      uint64_t v22 = v21;
      if (v21) {
        unint64_t v21 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8);
      }
      uint64_t Value = (uint64_t)v22;
      uint64_t v74 = v21;
      unint64_t v23 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
      uint64_t v82 = 4;
      if (v24 != 1) {
        goto LABEL_56;
      }
      if (*v23 == v82
        && (uint64_t v69 = v4,
            uint64_t v70 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
            uint64_t v71 = v25,
            uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70),
            mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
      {
LABEL_107:
        if (!v3) {
          goto LABEL_108;
        }
        uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3 + 8);
        unint64_t v66 = v3;
        uint64_t v67 = v26;
        uint64_t v27 = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v66);
        int v28 = v27;
        if (v27) {
          uint64_t v27 = (void *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
        }
        uint64_t Value = (uint64_t)v28;
        uint64_t v74 = v27;
        unint64_t v29 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Value);
        uint64_t v82 = 8;
        if (v30 != 1) {
          goto LABEL_70;
        }
        if (*v29 == v82
          && (uint64_t v69 = v3,
              uint64_t v70 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v69),
              uint64_t v71 = v31,
              uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70),
              mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)))
        {
LABEL_108:
          if (!v5) {
            return 1;
          }
          unint64_t v66 = v5;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
          if (mlir::Type::isF32((mlir::Type *)&Value)) {
            return 1;
          }
          unint64_t v66 = "'mps.stencil' op attribute 'paddingConstant' failed to satisfy constraint: 32-bit float attribute";
          __int16 v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
          uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v81)
          {
            uint64_t v59 = (void **)__p;
            if (__p)
            {
              uint64_t v60 = v80;
              uint64_t v61 = __p;
              if (v80 != __p)
              {
                do
                  uint64_t v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
                while (v60 != v59);
                uint64_t v61 = __p;
              }
              uint64_t v80 = v59;
              operator delete(v61);
            }
            uint64_t v36 = v77;
            if (!v77) {
              goto LABEL_100;
            }
            uint64_t v62 = v78;
            uint64_t v38 = v77;
            if (v78 == v77)
            {
LABEL_99:
              uint64_t v78 = v36;
              operator delete(v38);
LABEL_100:
              if (v75 != &v76) {
                free(v75);
              }
              return v32;
            }
            do
            {
              uint64_t v64 = (void *)*--v62;
              uint64_t v63 = v64;
              void *v62 = 0;
              if (v64) {
                operator delete[](v63);
              }
            }
            while (v62 != v36);
LABEL_98:
            uint64_t v38 = v77;
            goto LABEL_99;
          }
        }
        else
        {
LABEL_70:
          unint64_t v66 = "'mps.stencil' op attribute 'explicit_padding' failed to satisfy constraint: ui64 elements attribute of shape {8}";
          __int16 v68 = 259;
          mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
          uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
          if (Value) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
          }
          if (v81)
          {
            int64_t v53 = (void **)__p;
            if (__p)
            {
              uint64_t v54 = v80;
              int64_t v55 = __p;
              if (v80 != __p)
              {
                do
                  uint64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                while (v54 != v53);
                int64_t v55 = __p;
              }
              uint64_t v80 = v53;
              operator delete(v55);
            }
            uint64_t v36 = v77;
            if (!v77) {
              goto LABEL_100;
            }
            uint64_t v56 = v78;
            uint64_t v38 = v77;
            if (v78 == v77) {
              goto LABEL_99;
            }
            do
            {
              long long v58 = (void *)*--v56;
              int v57 = v58;
              *uint64_t v56 = 0;
              if (v58) {
                operator delete[](v57);
              }
            }
            while (v56 != v36);
            goto LABEL_98;
          }
        }
      }
      else
      {
LABEL_56:
        unint64_t v66 = "'mps.stencil' op attribute 'dilation_rates' failed to satisfy constraint: ui64 elements attribute of shape {4}";
        __int16 v68 = 259;
        mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
        uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
        if (Value) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
        }
        if (v81)
        {
          char v47 = (void **)__p;
          if (__p)
          {
            uint64_t v48 = v80;
            unint64_t v49 = __p;
            if (v80 != __p)
            {
              do
                uint64_t v48 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v48 - 1);
              while (v48 != v47);
              unint64_t v49 = __p;
            }
            uint64_t v80 = v47;
            operator delete(v49);
          }
          uint64_t v36 = v77;
          if (!v77) {
            goto LABEL_100;
          }
          unint64_t v50 = v78;
          uint64_t v38 = v77;
          if (v78 == v77) {
            goto LABEL_99;
          }
          do
          {
            int v52 = (void *)*--v50;
            int64_t v51 = v52;
            void *v50 = 0;
            if (v52) {
              operator delete[](v51);
            }
          }
          while (v50 != v36);
          goto LABEL_98;
        }
      }
    }
    else
    {
LABEL_42:
      unint64_t v66 = "'mps.stencil' op attribute 'strides' failed to satisfy constraint: ui64 elements attribute of shape {4}";
      __int16 v68 = 259;
      mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
      uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
      if (Value) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
      }
      if (v81)
      {
        uint64_t v41 = (void **)__p;
        if (__p)
        {
          uint64_t v42 = v80;
          BOOL v43 = __p;
          if (v80 != __p)
          {
            do
              uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            BOOL v43 = __p;
          }
          uint64_t v80 = v41;
          operator delete(v43);
        }
        uint64_t v36 = v77;
        if (!v77) {
          goto LABEL_100;
        }
        uint64_t v44 = v78;
        uint64_t v38 = v77;
        if (v78 == v77) {
          goto LABEL_99;
        }
        do
        {
          BOOL v46 = (void *)*--v44;
          uint64_t v45 = v46;
          *uint64_t v44 = 0;
          if (v46) {
            operator delete[](v45);
          }
        }
        while (v44 != v36);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_28:
    unint64_t v66 = "'mps.stencil' op attribute 'offsets' failed to satisfy constraint: si64 elements attribute of shape {4}";
    __int16 v68 = 259;
    mlir::emitError(a2, (uint64_t)&v66, (uint64_t)&Value);
    uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
    if (Value) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
    }
    if (v81)
    {
      int v33 = (void **)__p;
      if (__p)
      {
        uint64_t v34 = v80;
        uint64_t v35 = __p;
        if (v80 != __p)
        {
          do
            uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          uint64_t v35 = __p;
        }
        uint64_t v80 = v33;
        operator delete(v35);
      }
      uint64_t v36 = v77;
      if (!v77) {
        goto LABEL_100;
      }
      unint64_t v37 = v78;
      uint64_t v38 = v77;
      if (v78 == v77) {
        goto LABEL_99;
      }
      do
      {
        BOOL v40 = (void *)*--v37;
        uint64_t v39 = v40;
        void *v37 = 0;
        if (v40) {
          operator delete[](v39);
        }
      }
      while (v37 != v36);
      goto LABEL_98;
    }
  }
  return v32;
}

void *mlir::DenseIntElementsAttr::end@<X0>(mlir::DenseIntElementsAttr *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)this;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(this);

  return mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(a2, v3, NumElements);
}

uint64_t mlir::mps::StencilOp::verify(uint64_t **this)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (HIBYTE(*((_DWORD *)*this + 11))) {
    uint64_t v2 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  }
  else {
    uint64_t v2 = 0;
  }
  int v3 = *(_DWORD *)(v2[5] + 8);
  if (v3)
  {
    if (v3 != 3) {
      goto LABEL_8;
    }
    if (!v2[2])
    {
      __int16 v49 = 259;
      mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
      if (v50[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
      }
      if (!v57) {
        return v13;
      }
      uint64_t v34 = (void **)__p;
      if (__p)
      {
        uint64_t v35 = v56;
        uint64_t v36 = __p;
        if (v56 != __p)
        {
          do
            uint64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
          while (v35 != v34);
          uint64_t v36 = __p;
        }
        uint64_t v56 = v34;
        operator delete(v36);
      }
      long long v17 = v53;
      if (!v53) {
        goto LABEL_76;
      }
      unint64_t v37 = v54;
      uint64_t v19 = v53;
      if (v54 == v53) {
        goto LABEL_75;
      }
      do
      {
        uint64_t v39 = (void *)*--v37;
        uint64_t v38 = v39;
        void *v37 = 0;
        if (v39) {
          operator delete[](v38);
        }
      }
      while (v37 != v17);
LABEL_74:
      uint64_t v19 = v53;
LABEL_75:
      uint64_t v54 = v17;
      operator delete(v19);
      goto LABEL_76;
    }
  }
  if (!v2[1])
  {
                            " MPS_EXPLICIT or MPS_EXPLICIT_OFFSET.";
    __int16 v49 = 259;
    mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
    if (v50[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
    }
    if (!v57) {
      return v13;
    }
    uint64_t v22 = (void **)__p;
    if (__p)
    {
      unint64_t v23 = v56;
      uint64_t v24 = __p;
      if (v56 != __p)
      {
        do
          unint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        uint64_t v24 = __p;
      }
      uint64_t v56 = v22;
      operator delete(v24);
    }
    long long v17 = v53;
    if (v53)
    {
      uint64_t v25 = v54;
      uint64_t v19 = v53;
      if (v54 == v53) {
        goto LABEL_75;
      }
      do
      {
        uint64_t v27 = (void *)*--v25;
        uint64_t v26 = v27;
        *uint64_t v25 = 0;
        if (v27) {
          operator delete[](v26);
        }
      }
      while (v25 != v17);
      goto LABEL_74;
    }
    goto LABEL_76;
  }
LABEL_8:
  unint64_t v4 = *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v4 + 8))
  {
    unint64_t v46 = 0;
    uint64_t v47 = 0;
    goto LABEL_17;
  }
  uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v4 + 8);
  unint64_t v46 = v4;
  uint64_t v47 = v5;
  if (!v4)
  {
LABEL_17:
    v48[0] = (const void **)"invalid type for input.";
    __int16 v49 = 259;
    mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
    if (v50[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
    }
    if (!v57) {
      return v13;
    }
    uint64_t v14 = (void **)__p;
    if (__p)
    {
      uint64_t v15 = v56;
      long long v16 = __p;
      if (v56 != __p)
      {
        do
          uint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
        while (v15 != v14);
        long long v16 = __p;
      }
      uint64_t v56 = v14;
      operator delete(v16);
    }
    long long v17 = v53;
    if (!v53) {
      goto LABEL_76;
    }
    uint64_t v18 = v54;
    uint64_t v19 = v53;
    if (v54 == v53) {
      goto LABEL_75;
    }
    do
    {
      unint64_t v21 = (void *)*--v18;
      uint64_t v20 = v21;
      *uint64_t v18 = 0;
      if (v21) {
        operator delete[](v20);
      }
    }
    while (v18 != v17);
    goto LABEL_74;
  }
  unint64_t v6 = *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v6 + 8))
  {
    unint64_t v44 = 0;
    uint64_t v45 = 0;
LABEL_46:
    v48[0] = (const void **)"invalid type for weights.";
    __int16 v49 = 259;
    mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
    if (v50[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
    }
    if (!v57) {
      return v13;
    }
    int v28 = (void **)__p;
    if (__p)
    {
      unint64_t v29 = v56;
      uint64_t v30 = __p;
      if (v56 != __p)
      {
        do
          unint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        uint64_t v30 = __p;
      }
      uint64_t v56 = v28;
      operator delete(v30);
    }
    long long v17 = v53;
    if (v53)
    {
      uint64_t v31 = v54;
      uint64_t v19 = v53;
      if (v54 == v53) {
        goto LABEL_75;
      }
      do
      {
        int v33 = (void *)*--v31;
        uint64_t v32 = v33;
        void *v31 = 0;
        if (v33) {
          operator delete[](v32);
        }
      }
      while (v31 != v17);
      goto LABEL_74;
    }
LABEL_76:
    if (v51 != &v52) {
      free(v51);
    }
    return v13;
  }
  uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v6 + 8);
  unint64_t v44 = v6;
  uint64_t v45 = v7;
  if (!v6) {
    goto LABEL_46;
  }
  if (*(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && *(_UNKNOWN **)(*(void *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
    unint64_t v9 = v8;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
    uint64_t v42 = v10;
    unint64_t v43 = v9;
    if (v9 <= 3)
    {
      v48[0] = (const void **)"stencil input rank ";
      __int16 v49 = 259;
      mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
      uint64_t v11 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)v50, (uint64_t *)&v43);
      uint64_t v12 = " must be >= 4 ";
LABEL_82:
      uint64_t v41 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(v11, v12);
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v41);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v50);
      return v13;
    }
    if (v10 != 4)
    {
      v48[0] = (const void **)"stencil weights rank ";
      __int16 v49 = 259;
      mlir::OpState::emitOpError(this, v48, (uint64_t)v50);
      uint64_t v11 = mlir::InFlightDiagnostic::operator<<<unsigned long &>((uint64_t)v50, &v42);
      uint64_t v12 = " must be == 4 ";
      goto LABEL_82;
    }
  }
  return 1;
}

uint64_t mlir::mps::StencilOp::getPaddingStyle(mlir::mps::StencilOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(unsigned int *)(*(void *)(v1 + 40) + 8);
}

uint64_t mlir::mps::StencilOp::getOffsets(mlir::mps::StencilOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 16);
}

uint64_t mlir::mps::StencilOp::getExplicitPadding(mlir::mps::StencilOp *this)
{
  unint64_t v1 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v1 = 0;
  }
  return *(void *)(v1 + 8);
}

uint64_t mlir::mps::CropResizeOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v70 = a4;
  unint64_t v71 = a5;
  if (a7)
  {
    long long v14 = *a7;
    long long v15 = a7[1];
    long long v16 = a7[2];
    uint64_t v17 = *((void *)a7 + 6);
  }
  else
  {
    uint64_t v17 = 0;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
    long long v16 = 0uLL;
  }
  uint64_t v59 = a6;
  v60[0] = 0;
  char v61 = 0;
  long long v62 = v14;
  long long v63 = v15;
  long long v64 = v16;
  uint64_t v65 = v17;
  uint64_t v66 = a9;
  unint64_t v18 = a5;
  uint64_t v67 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61) {
      char v61 = 0;
    }
    mlir::OperationName::OperationName(v60, "mps.crop_resize", 15, Context);
    char v61 = 1;
    unint64_t v18 = v71;
  }
  uint64_t v68 = a4;
  unint64_t v69 = a5;
  if (v18 >= 2
    && (uint64_t v20 = mlir::UnknownLoc::get(this, a2), mlir::mps::CropResizeOpAdaptor::verify(&v59, v20)))
  {
    uint64_t v21 = mlir::ValueRange::dereference_iterator(&v70, 0);
    uint64_t v22 = *(void **)(*(void *)(*(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v22 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v22 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v24 = (void *)(*(void *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = mlir::ValueRange::dereference_iterator(&v70, 1);
    uint64_t v26 = *(void **)(*(void *)(*(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
    if (v26 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
      || v26 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      unint64_t v28 = *(void *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      unint64_t v28 = 0;
    }
    if (v24) {
      BOOL v29 = v28 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (!v29)
    {
      uint64_t v34 = (void *)v64;
      if (!(void)v64) {
        goto LABEL_39;
      }
      uint64_t v35 = *(void **)(*(void *)v64 + 136);
      if (v35 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v34 = 0;
      }
      uint64_t v56 = v34;
      if (v35 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
        && (uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v56),
            mlir::Type::isUnsignedInteger((mlir::Type *)&Value)))
      {
        unsigned int UInt = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v56);
      }
      else
      {
LABEL_39:
        unsigned int UInt = 1;
      }
      unint64_t v37 = (void *)*((void *)&v64 + 1);
      if (!*((void *)&v64 + 1)) {
        goto LABEL_46;
      }
      uint64_t v38 = *(void **)(**((void **)&v64 + 1) + 136);
      if (v38 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        unint64_t v37 = 0;
      }
      uint64_t v56 = v37;
      if (v38 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
        && (uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v56),
            mlir::Type::isUnsignedInteger((mlir::Type *)&Value)))
      {
        unsigned int v39 = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v56);
      }
      else
      {
LABEL_46:
        unsigned int v39 = 1;
      }
      uint64_t Value = (uint64_t)v24;
      uint64_t v56 = v58;
      uint64_t v57 = 0x800000000;
      unint64_t v54 = v28;
      if (mlir::TensorType::hasRank((mlir::TensorType *)&Value)
        && (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value), v40 == 4))
      {
        uint64_t v41 = (unint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&Value);
        unint64_t v42 = *v41;
        unint64_t v43 = v41[1];
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v54))
        {
LABEL_50:
          unint64_t v44 = 0x8000000000000000;
          unint64_t v45 = 0x8000000000000000;
LABEL_57:
          unsigned int v49 = v57;
          if (v57 != 5)
          {
            if (v57 <= 5)
            {
              if (HIDWORD(v57) > 4
                || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, 5uLL, 8),
                    unsigned int v49 = v57,
                    v57 != 5))
              {
                bzero((char *)v56 + 8 * v49, 40 - 8 * v49);
              }
            }
            LODWORD(v57) = 5;
          }
          unint64_t v50 = v56;
          *(void *)uint64_t v56 = v44;
          v50[1] = v45;
          _OWORD v50[2] = v43;
          void v50[3] = UInt;
          v50[4] = v39;
          uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v24);
          uint64_t v52 = mlir::RankedTensorType::get((uint64_t)v50, 5, ElementTypeOrSelf, 0);
          uint64_t v53 = *(unsigned int *)(a11 + 8);
          if (v53 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v53 + 1, 8);
            LODWORD(v53) = *(_DWORD *)(a11 + 8);
          }
          *(void *)(*(void *)a11 + 8 * v53) = v52;
          ++*(_DWORD *)(a11 + 8);
          if (v56 != v58) {
            free(v56);
          }
          return 1;
        }
      }
      else
      {
        unint64_t v42 = 0x8000000000000000;
        unint64_t v43 = 0x8000000000000000;
        if (!mlir::TensorType::hasRank((mlir::TensorType *)&v54)) {
          goto LABEL_50;
        }
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
      unint64_t v45 = 0x8000000000000000;
      unint64_t v44 = 0x8000000000000000;
      if (v46 == 2)
      {
        uint64_t v47 = (unint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v54);
        unint64_t v44 = *v47;
        unint64_t v48 = v47[1];
        if (v48 != 0x8000000000000000)
        {
          if (v48 == 4) {
            unint64_t v45 = v42;
          }
          else {
            unint64_t v45 = 1;
          }
        }
      }
      goto LABEL_57;
    }
    uint64_t v30 = mlir::getElementTypeOrSelf(v24);
  }
  else
  {
    uint64_t v30 = mlir::Float32Type::get(this, a2);
  }
  uint64_t v31 = mlir::UnrankedTensorType::get(v30);
  uint64_t v32 = *(unsigned int *)(a11 + 8);
  if (v32 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v32 + 1, 8);
    LODWORD(v32) = *(_DWORD *)(a11 + 8);
  }
  *(void *)(*(void *)a11 + 8 * v32) = v31;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::CropResizeOpAdaptor::verify(void *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  if (a1[7]
    && (v27[0] = a1[7],
        v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27),
        !mlir::Type::isUnsignedInteger((mlir::Type *)v29, 32)))
  {
    v27[0] = "'mps.crop_resize' op attribute 'resize_height' failed to satisfy constraint: 32-bit unsigned integer attribute";
    __int16 v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    }
    if (v36)
    {
      unint64_t v6 = (void **)__p;
      if (__p)
      {
        uint64_t v7 = v35;
        unint64_t v8 = __p;
        if (v35 != __p)
        {
          do
            uint64_t v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
          while (v7 != v6);
          unint64_t v8 = __p;
        }
        uint64_t v35 = v6;
        operator delete(v8);
      }
      unint64_t v9 = v32;
      if (!v32) {
        goto LABEL_52;
      }
      uint64_t v10 = v33;
      uint64_t v11 = v32;
      if (v33 == v32) {
        goto LABEL_51;
      }
      do
      {
        uint64_t v13 = (void *)*--v10;
        uint64_t v12 = v13;
        *uint64_t v10 = 0;
        if (v13) {
          operator delete[](v12);
        }
      }
      while (v10 != v9);
      goto LABEL_50;
    }
  }
  else if (v3 {
         && (v27[0] = v3,
  }
             v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27),
             !mlir::Type::isUnsignedInteger((mlir::Type *)v29, 32)))
  {
    v27[0] = "'mps.crop_resize' op attribute 'resize_width' failed to satisfy constraint: 32-bit unsigned integer attribute";
    __int16 v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    }
    if (v36)
    {
      long long v14 = (void **)__p;
      if (__p)
      {
        long long v15 = v35;
        long long v16 = __p;
        if (v35 != __p)
        {
          do
            long long v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          long long v16 = __p;
        }
        uint64_t v35 = v14;
        operator delete(v16);
      }
      unint64_t v9 = v32;
      if (!v32) {
        goto LABEL_52;
      }
      uint64_t v17 = v33;
      uint64_t v11 = v32;
      if (v33 == v32) {
        goto LABEL_51;
      }
      do
      {
        uint64_t v19 = (void *)*--v17;
        unint64_t v18 = v19;
        *uint64_t v17 = 0;
        if (v19) {
          operator delete[](v18);
        }
      }
      while (v17 != v9);
      goto LABEL_50;
    }
  }
  else
  {
    if (!v4) {
      return 1;
    }
    v27[0] = v4;
    v29[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27);
    if (mlir::Type::isF32((mlir::Type *)v29)) {
      return 1;
    }
    v27[0] = "'mps.crop_resize' op attribute 'spatial_scale' failed to satisfy constraint: 32-bit float attribute";
    __int16 v28 = 259;
    mlir::emitError(a2, (uint64_t)v27, (uint64_t)v29);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v29);
    if (v29[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v29);
    }
    if (v36)
    {
      uint64_t v20 = (void **)__p;
      if (__p)
      {
        uint64_t v21 = v35;
        uint64_t v22 = __p;
        if (v35 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        uint64_t v35 = v20;
        operator delete(v22);
      }
      unint64_t v9 = v32;
      if (!v32) {
        goto LABEL_52;
      }
      unint64_t v23 = v33;
      uint64_t v11 = v32;
      if (v33 == v32)
      {
LABEL_51:
        int v33 = v9;
        operator delete(v11);
LABEL_52:
        if (v30 != &v31) {
          free(v30);
        }
        return v5;
      }
      do
      {
        uint64_t v25 = (void *)*--v23;
        uint64_t v24 = v25;
        *unint64_t v23 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v23 != v9);
LABEL_50:
      uint64_t v11 = v32;
      goto LABEL_51;
    }
  }
  return v5;
}

uint64_t mlir::mps::CropResizeOp::verify(uint64_t **this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (*this)[9];
  unint64_t v3 = *(void *)(*(void *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(*(void *)v3 + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v3 = 0;
  }
  unint64_t v50 = v3;
  unint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    unint64_t v6 = 0;
  }
  unint64_t v49 = v6;
  if (v3) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    v47[0] = (const void **)"cannot crop_resize a non-tensor type";
    __int16 v48 = 259;
    mlir::OpState::emitOpError(this, v47, (uint64_t)v51);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
    if (v51[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
    }
    if (v58)
    {
      uint64_t v11 = (void **)__p;
      if (__p)
      {
        uint64_t v12 = v57;
        uint64_t v13 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          uint64_t v13 = __p;
        }
        uint64_t v57 = v11;
        operator delete(v13);
      }
      long long v14 = v54;
      if (!v54) {
        goto LABEL_70;
      }
      long long v15 = v55;
      long long v16 = v54;
      if (v55 == v54) {
        goto LABEL_69;
      }
      do
      {
        unint64_t v18 = (void *)*--v15;
        uint64_t v17 = v18;
        *long long v15 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v15 != v14);
      goto LABEL_68;
    }
  }
  else
  {
    BOOL hasRank = mlir::TensorType::hasRank((mlir::TensorType *)&v50);
    if (hasRank && (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v50), v20 != 4))
    {
      v47[0] = (const void **)"images tensor must have shape [N, C, H, W]";
      __int16 v48 = 259;
      mlir::OpState::emitOpError(this, v47, (uint64_t)v51);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
      if (v51[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
      }
      if (v58)
      {
        uint64_t v26 = (void **)__p;
        if (__p)
        {
          uint64_t v27 = v57;
          __int16 v28 = __p;
          if (v57 != __p)
          {
            do
              uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            __int16 v28 = __p;
          }
          uint64_t v57 = v26;
          operator delete(v28);
        }
        long long v14 = v54;
        if (!v54) {
          goto LABEL_70;
        }
        BOOL v29 = v55;
        long long v16 = v54;
        if (v55 == v54) {
          goto LABEL_69;
        }
        do
        {
          uint64_t v31 = (void *)*--v29;
          uint64_t v30 = v31;
          *BOOL v29 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v29 != v14);
        goto LABEL_68;
      }
    }
    else
    {
      if (!mlir::TensorType::hasRank((mlir::TensorType *)&v49)) {
        return 1;
      }
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v49);
      if (v21 == 2)
      {
        uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v49);
        uint64_t v24 = *(void *)(Value + 8 * v23 - 8);
        if ((unint64_t)(v24 - 4) >= 2 && v24 != 0x8000000000000000)
        {
          v47[0] = (const void **)"boxes tensor must have shape [B, 4] or [B, 5]";
          __int16 v48 = 259;
          mlir::OpState::emitOpError(this, v47, (uint64_t)v51);
          uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
          if (v51[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
          }
          if (!v58) {
            return v10;
          }
          unsigned int v39 = (void **)__p;
          if (__p)
          {
            uint64_t v40 = v57;
            uint64_t v41 = __p;
            if (v57 != __p)
            {
              do
                uint64_t v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
              while (v40 != v39);
              uint64_t v41 = __p;
            }
            uint64_t v57 = v39;
            operator delete(v41);
          }
          unint64_t v42 = v54;
          if (v54)
          {
            unint64_t v43 = v55;
            unint64_t v44 = v54;
            if (v55 != v54)
            {
              do
              {
                uint64_t v46 = (void *)*--v43;
                unint64_t v45 = v46;
                *unint64_t v43 = 0;
                if (v46) {
                  operator delete[](v45);
                }
              }
              while (v43 != v42);
              unint64_t v44 = v54;
            }
            int64_t v55 = v42;
            operator delete(v44);
          }
          if (v52 != v53) {
            free(v52);
          }
          if ((unint64_t)(v24 - 4) >= 2 && v24 != 0x8000000000000000) {
            return v10;
          }
        }
        return 1;
      }
      v47[0] = (const void **)"boxes tensor must have shape [B, 4] or [B, 5]";
      __int16 v48 = 259;
      mlir::OpState::emitOpError(this, v47, (uint64_t)v51);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v51);
      if (v51[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v51);
      }
      if (v58)
      {
        uint64_t v32 = (void **)__p;
        if (__p)
        {
          int v33 = v57;
          uint64_t v34 = __p;
          if (v57 != __p)
          {
            do
              int v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
            while (v33 != v32);
            uint64_t v34 = __p;
          }
          uint64_t v57 = v32;
          operator delete(v34);
        }
        long long v14 = v54;
        if (!v54) {
          goto LABEL_70;
        }
        uint64_t v35 = v55;
        long long v16 = v54;
        if (v55 == v54)
        {
LABEL_69:
          int64_t v55 = v14;
          operator delete(v16);
LABEL_70:
          if (v52 != v53) {
            free(v52);
          }
          return v10;
        }
        do
        {
          uint64_t v37 = (void *)*--v35;
          char v36 = v37;
          *uint64_t v35 = 0;
          if (v37) {
            operator delete[](v36);
          }
        }
        while (v35 != v14);
LABEL_68:
        long long v16 = v54;
        goto LABEL_69;
      }
    }
  }
  return v10;
}

uint64_t mlir::mps::LPNormOp::verify(uint64_t **this)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)((*this)[9] + 56);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  v31[0] = (uint64_t **)&v47;
  unsigned int v39 = v2;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v39);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v31, DefiningOp))
  {
    int64_t SingleInt = mlir::getSingleIntValue<long long>(v47, v48);
    int64_t v37 = SingleInt;
    uint64_t v38 = v5;
    if ((_BYTE)v5 && SingleInt <= 0)
    {
      unsigned int v39 = "failed: exponent must be positive, but got {0}";
      uint64_t v40 = 46;
      v41[0] = &v43;
      v41[1] = 1;
      v42[0] = &unk_1EC9A4648;
      v42[1] = &v37;
      unint64_t v43 = v42;
      LOWORD(v32[0]) = 263;
      v31[0] = (uint64_t **)&v39;
      mlir::OpState::emitOpError(this, (const void ***)v31, (uint64_t)&v47);
      uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v47);
      if (v47) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
      }
      if (!v55) {
        return v6;
      }
      uint64_t v7 = (void **)__p;
      if (__p)
      {
        unint64_t v8 = v54;
        BOOL v9 = __p;
        if (v54 != __p)
        {
          do
            unint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          BOOL v9 = __p;
        }
        unint64_t v54 = v7;
        operator delete(v9);
      }
      uint64_t v10 = v51;
      if (v51)
      {
        uint64_t v11 = v52;
        uint64_t v12 = v51;
        if (v52 != v51)
        {
          do
          {
            long long v14 = (void *)*--v11;
            uint64_t v13 = v14;
            *uint64_t v11 = 0;
            if (v14) {
              operator delete[](v13);
            }
          }
          while (v11 != v10);
          uint64_t v12 = v51;
        }
        uint64_t v52 = v10;
        operator delete(v12);
      }
      uint64_t v20 = v49;
      if (v49 == v50) {
        return v6;
      }
LABEL_32:
      free(v20);
      return v6;
    }
  }
  else
  {
    int64_t v37 = 0;
    uint64_t v38 = 0;
  }
  long long v15 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v15) {
    uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  v36[0] = v15;
  v36[1] = v16;
  unint64_t v44 = v46;
  uint64_t v45 = 0x400000000;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v36)
    || !mlir::matchConstantWithIntVector<long long>(*(void *)((*this)[9] + 88), (uint64_t)&v44))
  {
    goto LABEL_30;
  }
  unsigned int v39 = v41;
  uint64_t v40 = 0x600000000;
  uint64_t v6 = (uint64_t)v44;
  uint64_t v17 = v45;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
  if (!PositiveAxes)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
    v31[0] = (uint64_t **)"failed: found an axis out of bounds for input rank {0}";
    v31[1] = (uint64_t **)54;
    void v31[2] = &v33;
    void v31[3] = (uint64_t **)1;
    v32[0] = &unk_1EC9A4708;
    v32[1] = v22;
    int v33 = v32;
    uint64_t v34 = v31;
    __int16 v35 = 263;
    mlir::OpState::emitOpError(this, (const void ***)&v34, (uint64_t)&v47);
    uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v47);
    if (v47) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
    }
    if (v55)
    {
      uint64_t v23 = (void **)__p;
      if (__p)
      {
        uint64_t v24 = v54;
        uint64_t v25 = __p;
        if (v54 != __p)
        {
          do
            uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          uint64_t v25 = __p;
        }
        unint64_t v54 = v23;
        operator delete(v25);
      }
      uint64_t v26 = v51;
      if (v51)
      {
        uint64_t v27 = v52;
        __int16 v28 = v51;
        if (v52 != v51)
        {
          do
          {
            uint64_t v30 = (void *)*--v27;
            BOOL v29 = v30;
            void *v27 = 0;
            if (v30) {
              operator delete[](v29);
            }
          }
          while (v27 != v26);
          __int16 v28 = v51;
        }
        uint64_t v52 = v26;
        operator delete(v28);
      }
      if (v49 != v50) {
        free(v49);
      }
    }
  }
  if (v39 != v41) {
    free(v39);
  }
  if (PositiveAxes) {
LABEL_30:
  }
    uint64_t v6 = 1;
  uint64_t v20 = v44;
  if (v44 != v46) {
    goto LABEL_32;
  }
  return v6;
}

uint64_t mlir::mps::MatrixDecompositionLUOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v54[2] = *MEMORY[0x1E4F143B8];
  v54[0] = a4;
  v54[1] = a5;
  if (a5 == 1)
  {
    int64_t v51 = a4;
    uint64_t v52 = 1;
    unint64_t v14 = *(void *)(mlir::ValueRange::dereference_iterator(&v51, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v15 = *(unsigned int *)(a11 + 8);
    if (v15 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v15) = v14;
    ++*(_DWORD *)(a11 + 8);
    unint64_t v16 = *(void *)(mlir::ValueRange::dereference_iterator(v54, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v16 + 8)
      || (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v16 + 8),
          *(_UNKNOWN **)(*(void *)v16 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id))
    {
      uint64_t v23 = mlir::IntegerType::get(a1, 0x20u, 2u);
      uint64_t v24 = mlir::UnrankedTensorType::get(v23);
      uint64_t v25 = *(unsigned int *)(a11 + 8);
      if (v25 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
        LODWORD(v25) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v25) = v24;
      ++*(_DWORD *)(a11 + 8);
      uint64_t v26 = mlir::IntegerType::get(a1, 0x20u, 1u);
      uint64_t v27 = mlir::UnrankedTensorType::get(v26);
      uint64_t v28 = *(unsigned int *)(a11 + 8);
      if (v28 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
        LODWORD(v28) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v28) = v27;
      ++*(_DWORD *)(a11 + 8);
    }
    else
    {
      uint64_t v17 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v54, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8))
      {
        uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
        int64_t v51 = v17;
        uint64_t v52 = v18;
        uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
        unint64_t v21 = v20 - 1;
        if (v20 <= 1) {
          return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "input must be rank 2 or more");
        }
      }
      else
      {
        int64_t v51 = 0;
        uint64_t v52 = 0;
        uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
        unint64_t v21 = v20 - 1;
        if (v20 <= 1) {
          return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "input must be rank 2 or more");
        }
      }
      BOOL v29 = (const void *)ArgAttrsAttr;
      unint64_t v30 = v20 - 2;
      if (*(void *)(ArgAttrsAttr + 8 * (v20 - 2)) >= *(void *)(ArgAttrsAttr + 8 * v21)) {
        uint64_t v31 = *(void *)(ArgAttrsAttr + 8 * v21);
      }
      else {
        uint64_t v31 = *(void *)(ArgAttrsAttr + 8 * (v20 - 2));
      }
      size_t v32 = 8 * v20;
      int v33 = v53;
      int64_t v51 = v53;
      uint64_t v52 = 0x400000000;
      unint64_t v47 = (uint64_t)(8 * v20) >> 3;
      if (8 * v20 < 0x21)
      {
        uint64_t v34 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, (uint64_t)(8 * v20) >> 3, 8);
        uint64_t v34 = v52;
        int v33 = v51;
      }
      memcpy(&v33[8 * v34], v29, v32);
      LODWORD(v52) = v52 + (v32 >> 3);
      uint64_t v35 = v52;
      char v36 = v51;
      *((void *)v51 + v30) = 1;
      v36[v21] = v31;
      uint64_t v37 = mlir::IntegerType::get(a1, 0x20u, 2u);
      uint64_t v38 = mlir::RankedTensorType::get((uint64_t)v36, v35, v37, 0);
      uint64_t v39 = *(unsigned int *)(a11 + 8);
      if (v39 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v39 + 1, 8);
        LODWORD(v39) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v39) = v38;
      ++*(_DWORD *)(a11 + 8);
      uint64_t v48 = v50;
      uint64_t v49 = 0x400000000;
      if (v32 < 0x21)
      {
        uint64_t v40 = 0;
        uint64_t v41 = v50;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v50, v47, 8);
        uint64_t v40 = v49;
        uint64_t v41 = v48;
      }
      memcpy(&v41[8 * v40], v29, v32);
      LODWORD(v49) = v49 + (v32 >> 3);
      uint64_t v42 = v49;
      unint64_t v43 = v48;
      *(int64x2_t *)((char *)v48 + 8 * v30) = vdupq_n_s64(1uLL);
      uint64_t v44 = mlir::IntegerType::get(a1, 0x20u, 1u);
      uint64_t v45 = mlir::RankedTensorType::get((uint64_t)v43, v42, v44, 0);
      uint64_t v46 = *(unsigned int *)(a11 + 8);
      if (v46 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v46 + 1, 8);
        LODWORD(v46) = *(_DWORD *)(a11 + 8);
      }
      *(void *)(*(void *)a11 + 8 * v46) = v45;
      ++*(_DWORD *)(a11 + 8);
      if (v48 != v50) {
        free(v48);
      }
      if (v51 != v53) {
        free(v51);
      }
    }
    return 1;
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::mps::MatrixSolverLUOp::verify(uint64_t **this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v2 + 8)) {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v2 + 8);
  }
  else {
    unint64_t v2 = 0;
  }
  unint64_t v3 = *(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8)) {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = *(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v4 + 8))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v4 + 8);
    uint64_t v5 = 1;
    if (!v2) {
      return v5;
    }
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 1;
    if (!v2) {
      return v5;
    }
  }
  if (v3
    && *(_UNKNOWN **)(*(void *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && v4
    && *(_UNKNOWN **)(*(void *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    && *(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v23[0] = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = mlir::Type::dyn_cast<mlir::ShapedType>(v23);
    uint64_t v26 = v6;
    uint64_t ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v25);
    uint64_t v9 = v8;
    v23[0] = (void *)(*(void *)(*(void *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = mlir::Type::dyn_cast<mlir::ShapedType>(v23);
    uint64_t v26 = v10;
    uint64_t v11 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v25);
    uint64_t v13 = v12;
    v23[0] = (void *)(*(void *)(*(void *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = mlir::Type::dyn_cast<mlir::ShapedType>(v23);
    uint64_t v26 = v14;
    uint64_t v15 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v25);
    if (v9 == v16 && v9 == v13)
    {
      uint64_t v17 = v9 - 2;
      if (v9 == 2) {
        return 1;
      }
      uint64_t v5 = 1;
      while (1)
      {
        uint64_t v19 = *v15++;
        uint64_t v18 = v19;
        uint64_t v20 = *ArgAttrsAttr++;
        if (v18 != v20 || v18 != *v11) {
          break;
        }
        ++v11;
        if (!--v17) {
          return v5;
        }
      }
      unint64_t v21 = "batch dims of rhs and lu should match";
    }
    else
    {
      unint64_t v21 = "rank for lu matrix and rhs should match";
    }
    v23[0] = v21;
    __int16 v24 = 259;
    mlir::OpState::emitOpError(this, (const void ***)v23, (uint64_t)&v25);
    uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v25);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v25);
  }
  return v5;
}

uint64_t mlir::mps::MatrixSolverLUOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  v40[0] = a4;
  v40[1] = a5;
  if (a5 == 3)
  {
    unint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(v40, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v13 + 8)) {
      mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v13 + 8);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v15 = *(void *)(mlir::ValueRange::dereference_iterator(v40, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v15 + 8))
    {
      uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v15 + 8);
      unint64_t v35 = v15;
      uint64_t v36 = v16;
      if (!v13) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v15 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      if (!v13)
      {
LABEL_19:
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
        uint64_t v21 = mlir::UnrankedTensorType::get(OperandRange);
        uint64_t v22 = *(unsigned int *)(a11 + 8);
        if (v22 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v22 + 1, 8);
          LODWORD(v22) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v22) = v21;
        ++*(_DWORD *)(a11 + 8);
        return 1;
      }
    }
    BOOL v17 = *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
       || v15 == 0;
    if (v17
      || *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      goto LABEL_19;
    }
    uint64_t v18 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v40, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
    if (v19) {
      uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v37 = v18;
    uint64_t v38 = v19;
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
    unint64_t v25 = v24;
    uint64_t v26 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v40, 2) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8))
    {
      uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8);
      uint64_t v37 = v26;
      uint64_t v38 = v27;
      uint64_t v28 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
      if (v25 < 2) {
        return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "inputs must be rank 2 or more");
      }
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v28 = (unsigned char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
      if (v25 < 2) {
        return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "inputs must be rank 2 or more");
      }
    }
    if (v29 > 1)
    {
      uint64_t v30 = *(void *)(ArgAttrsAttr + 8 * v25 - 8);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v37, v28, &v28[8 * v29]);
      uint64_t v31 = v38;
      size_t v32 = v37;
      *((void *)v37 + v38 - 2) = v30;
      uint64_t v33 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v35);
      uint64_t v34 = mlir::RankedTensorType::get((uint64_t)v32, v31, v33, 0);
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v34);
      if (v37 != &v39) {
        free(v37);
      }
      return 1;
    }
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "inputs must be rank 2 or more");
  }

  return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
}

uint64_t mlir::mps::MatrixInverseOp::verify(uint64_t **this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v2 + 8)) {
    return 1;
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v2 + 8);
  if (*(_UNKNOWN **)(*(void *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    return 1;
  }
  unint64_t v3 = (void *)(*(void *)(*(void *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  if (v4) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  }
  else {
    unint64_t v3 = 0;
  }
  v22[0] = v3;
  v22[1] = v4;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
  uint64_t v9 = ArgAttrsAttr + 8 * v8;
  uint64_t v10 = *(void *)(v9 - 16);
  uint64_t v5 = 1;
  if (v10 != 0x8000000000000000)
  {
    uint64_t v11 = *(void *)(v9 - 8);
    if (v11 != 0x8000000000000000 && v11 != v10)
    {
      uint64_t v20 = (const void **)"inverse op supported only for square matrix";
      __int16 v21 = 259;
      mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
      uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
      if (v22[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
      }
      if (v29)
      {
        uint64_t v12 = (void **)__p;
        if (__p)
        {
          unint64_t v13 = v28;
          uint64_t v14 = __p;
          if (v28 != __p)
          {
            do
              unint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p;
          }
          uint64_t v28 = v12;
          operator delete(v14);
        }
        unint64_t v15 = v25;
        if (v25)
        {
          uint64_t v16 = v26;
          BOOL v17 = v25;
          if (v26 != v25)
          {
            do
            {
              uint64_t v19 = (void *)*--v16;
              uint64_t v18 = v19;
              *uint64_t v16 = 0;
              if (v19) {
                operator delete[](v18);
              }
            }
            while (v16 != v15);
            BOOL v17 = v25;
          }
          uint64_t v26 = v15;
          operator delete(v17);
        }
        if (v23 != &v24) {
          free(v23);
        }
      }
    }
  }
  return v5;
}

uint64_t mlir::mps::MatrixInverseOp::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  if (a5 == 1)
  {
    unint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(&v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      unint64_t v13 = 0;
    }
    unint64_t v18 = v13;
    if (v13 && (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v18), v14 <= 1))
    {
      return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "input must be rank 2 or more");
    }
    else
    {
      v21[0] = v19;
      v21[1] = v20;
      if (v20)
      {
        unint64_t v16 = *(void *)(mlir::ValueRange::dereference_iterator(v21, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v17 = *(unsigned int *)(a11 + 8);
        if (v17 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v17 + 1, 8);
          LODWORD(v17) = *(_DWORD *)(a11 + 8);
        }
        *(void *)(*(void *)a11 + 8 * v17) = v16;
        ++*(_DWORD *)(a11 + 8);
        return 1;
      }
      else
      {
        return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
      }
    }
  }
  else
  {
    return mlir::emitOptionalError<char const(&)[39]>(a2, a3, "invalid number of operands");
  }
}

uint64_t mlir::mps::PruningOp::verify(uint64_t **this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v2 = 0;
  }
  v18[0] = *(const void ***)(v2 + 16);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)v18, (uint64_t)&v20);
  float v3 = llvm::APFloat::convertToFloat(&v20);
  uint64_t v4 = (void *)v21[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v5) == v4)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v21);
    if (v3 < 0.0 || v3 > 1.0) {
      goto LABEL_8;
    }
    return 1;
  }
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v21);
  if (v3 >= 0.0 && v3 <= 1.0) {
    return 1;
  }
LABEL_8:
  __int16 v19 = 259;
  mlir::OpState::emitOpError(this, v18, (uint64_t)&v20);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v20);
  if (v20) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v20);
  }
  if (v28)
  {
    uint64_t v8 = (void **)__p;
    if (__p)
    {
      uint64_t v9 = v27;
      uint64_t v10 = __p;
      if (v27 != __p)
      {
        do
          uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      uint64_t v27 = v8;
      operator delete(v10);
    }
    uint64_t v11 = v24;
    if (v24)
    {
      uint64_t v12 = v25;
      unint64_t v13 = v24;
      if (v25 != v24)
      {
        do
        {
          unint64_t v15 = (void *)*--v12;
          uint64_t v14 = v15;
          *uint64_t v12 = 0;
          if (v15) {
            operator delete[](v14);
          }
        }
        while (v12 != v11);
        unint64_t v13 = v24;
      }
      unint64_t v25 = v11;
      operator delete(v13);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v7;
}

llvm::detail::DoubleAPFloat *mlir::mps::PruningOp::getSparsity@<X0>(mlir::mps::PruningOp *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(void *)this + 44))) {
    unint64_t v2 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  return mlir::FloatAttr::getValue((mlir::FloatAttr *)&v4, a2);
}

uint64_t mlir::mps::CreateTextureTensorOp::verify(uint64_t **this)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)*this + 9)) {
    uint64_t v2 = (uint64_t)(*this - 2);
  }
  else {
    uint64_t v2 = 0;
  }
  float v3 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v3) {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  v46[0] = v3;
  v46[1] = v4;
  uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v46);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v46)) {
    return 1;
  }
  uint64_t v6 = *(void *)(ArgAttrsAttr + 24);
  if (v6 == 0x8000000000000000) {
    return 1;
  }
  unint64_t v9 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v9 = 0;
  }
  unsigned int v10 = *(_DWORD *)(*(void *)(v9 + 8) + 8);
  unsigned int v45 = v10;
  uint64_t v44 = v6;
  if (v10 > 9) {
    return 1;
  }
  int v11 = 1 << v10;
  if ((v11 & 0x24C) != 0)
  {
    if (v6 != 4)
    {
      size_t v32 = "failed: expected a number of channels equal to 4 for pixel format {0}, but found {1}";
      uint64_t v33 = 84;
      uint64_t v34 = &v40;
      uint64_t v35 = 2;
      uint64_t v36 = &unk_1EC9A47F8;
      uint64_t v37 = &v45;
      uint64_t v38 = &unk_1EC9A4648;
      uint64_t v39 = &v44;
      uint64_t v40 = &v36;
      uint64_t v41 = &v38;
      __int16 v43 = 263;
      v42[0] = (const void **)&v32;
      mlir::OpState::emitOpError(this, v42, (uint64_t)v47);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
      if (v54)
      {
        uint64_t v20 = (void **)__p;
        if (__p)
        {
          __int16 v21 = v53;
          uint64_t v22 = __p;
          if (v53 != __p)
          {
            do
              __int16 v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
            while (v21 != v20);
            uint64_t v22 = __p;
          }
          uint64_t v53 = v20;
          operator delete(v22);
        }
        unint64_t v15 = v50;
        if (!v50) {
          goto LABEL_63;
        }
        uint64_t v23 = v51;
        uint64_t v17 = v50;
        if (v51 == v50) {
          goto LABEL_62;
        }
        do
        {
          unint64_t v25 = (void *)*--v23;
          uint64_t v24 = v25;
          *uint64_t v23 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v23 != v15);
        goto LABEL_61;
      }
      return v7;
    }
    return 1;
  }
  if ((v11 & 0x91) != 0)
  {
    if (v6 != 1)
    {
      size_t v32 = "failed: expected a number of channels equal to 1 for pixel format {0}, but found {1}";
      uint64_t v33 = 84;
      uint64_t v34 = &v40;
      uint64_t v35 = 2;
      uint64_t v36 = &unk_1EC9A47F8;
      uint64_t v37 = &v45;
      uint64_t v38 = &unk_1EC9A4648;
      uint64_t v39 = &v44;
      uint64_t v40 = &v36;
      uint64_t v41 = &v38;
      __int16 v43 = 263;
      v42[0] = (const void **)&v32;
      mlir::OpState::emitOpError(this, v42, (uint64_t)v47);
      uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
      if (v54)
      {
        uint64_t v12 = (void **)__p;
        if (__p)
        {
          unint64_t v13 = v53;
          uint64_t v14 = __p;
          if (v53 != __p)
          {
            do
              unint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
            while (v13 != v12);
            uint64_t v14 = __p;
          }
          uint64_t v53 = v12;
          operator delete(v14);
        }
        unint64_t v15 = v50;
        if (!v50) {
          goto LABEL_63;
        }
        unint64_t v16 = v51;
        uint64_t v17 = v50;
        if (v51 == v50)
        {
LABEL_62:
          int64_t v51 = v15;
          operator delete(v17);
LABEL_63:
          if (v48 != &v49) {
            free(v48);
          }
          return v7;
        }
        do
        {
          __int16 v19 = (void *)*--v16;
          unint64_t v18 = v19;
          *unint64_t v16 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v16 != v15);
LABEL_61:
        uint64_t v17 = v50;
        goto LABEL_62;
      }
      return v7;
    }
    return 1;
  }
  if (v6 == 2) {
    return 1;
  }
  size_t v32 = "failed: expected a number of channels equal to 2 for pixel format {0}, but found {1}";
  uint64_t v33 = 84;
  uint64_t v34 = &v40;
  uint64_t v35 = 2;
  uint64_t v36 = &unk_1EC9A47F8;
  uint64_t v37 = &v45;
  uint64_t v38 = &unk_1EC9A4648;
  uint64_t v39 = &v44;
  uint64_t v40 = &v36;
  uint64_t v41 = &v38;
  __int16 v43 = 263;
  v42[0] = (const void **)&v32;
  mlir::OpState::emitOpError(this, v42, (uint64_t)v47);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
  if (v47[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  }
  if (v54)
  {
    uint64_t v26 = (void **)__p;
    if (__p)
    {
      uint64_t v27 = v53;
      char v28 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        char v28 = __p;
      }
      uint64_t v53 = v26;
      operator delete(v28);
    }
    unint64_t v15 = v50;
    if (!v50) {
      goto LABEL_63;
    }
    uint64_t v29 = v51;
    uint64_t v17 = v50;
    if (v51 == v50) {
      goto LABEL_62;
    }
    do
    {
      uint64_t v31 = (void *)*--v29;
      uint64_t v30 = v31;
      *uint64_t v29 = 0;
      if (v31) {
        operator delete[](v30);
      }
    }
    while (v29 != v15);
    goto LABEL_61;
  }
  return v7;
}

BOOL mlir::mps::QuantizeOp::verify(uint64_t **this)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v2 = 0;
  }
  uint64_t v37 = *(void **)(v2 + 8);
  if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v37) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    __int16 v31 = 259;
    mlir::OpState::emitOpError(this, v30, (uint64_t)&v37);
    uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v37);
    if (v37) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
    }
    if (v46)
    {
      uint64_t v4 = (void **)__p;
      if (__p)
      {
        uint64_t v5 = v45;
        uint64_t v6 = __p;
        if (v45 != __p)
        {
          do
            uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
          while (v5 != v4);
          uint64_t v6 = __p;
        }
        unsigned int v45 = v4;
        operator delete(v6);
      }
      uint64_t v7 = v42;
      if (!v42) {
        goto LABEL_52;
      }
      uint64_t v8 = v43;
      unint64_t v9 = v42;
      if (v43 == v42)
      {
LABEL_51:
        __int16 v43 = v7;
        operator delete(v9);
LABEL_52:
        if (v40 != &v41) {
          free(v40);
        }
        return v3;
      }
      do
      {
        int v11 = (void *)*--v8;
        unsigned int v10 = v11;
        *uint64_t v8 = 0;
        if (v11) {
          operator delete[](v10);
        }
      }
      while (v8 != v7);
LABEL_50:
      unint64_t v9 = v42;
      goto LABEL_51;
    }
    return v3;
  }
  uint64_t v12 = *this;
  uint64_t v36 = v12;
  uint64_t v13 = *(void *)(v12[9] + 24);
  v30[0] = (const void **)v12[10];
  if (v30[0])
  {
    mlir::IntegerAttr::getValue(v30, (llvm::APInt *)&v37);
    if (v38 > 0x40)
    {
      LODWORD(v14) = *(_DWORD *)v37;
      operator delete[](v37);
    }
    else
    {
      uint64_t v14 = (uint64_t)((void)v37 << -(uint64_t)v38) >> -(uint64_t)v38;
    }
    uint64_t v15 = v14 | 0x100000000;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v35 = v15;
  unint64_t v16 = (void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8))
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    return 1;
  }
  uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
  uint64_t v33 = v16;
  uint64_t v34 = v17;
  if (!v16 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v33)) {
    return 1;
  }
  uint64_t v32 = 0;
  if ((v15 & 0x100000000) == 0) {
    goto LABEL_56;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
  if ((int)v15 < 0) {
    int v19 = v18;
  }
  else {
    int v19 = 0;
  }
  unsigned int v20 = v19 + v15;
  if ((v20 & 0x80000000) == 0)
  {
    uint64_t v21 = v20;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
    if (v21 <= v22)
    {
      uint64_t v32 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33) + 8 * v21);
      uint64_t v12 = v36;
LABEL_56:
      uint64_t v37 = &v35;
      uint64_t v38 = &v36;
      uint64_t v39 = &v32;
      uint64_t v40 = &v33;
    }
  }
  __int16 v31 = 259;
  mlir::OpState::emitOpError(&v36, v30, (uint64_t)&v37);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v37);
  if (v37) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v37);
  }
  if (v46)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      uint64_t v24 = v45;
      unint64_t v25 = __p;
      if (v45 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      unsigned int v45 = v23;
      operator delete(v25);
    }
    uint64_t v7 = v42;
    if (!v42) {
      goto LABEL_52;
    }
    uint64_t v26 = v43;
    unint64_t v9 = v42;
    if (v43 == v42) {
      goto LABEL_51;
    }
    do
    {
      char v28 = (void *)*--v26;
      uint64_t v27 = v28;
      *uint64_t v26 = 0;
      if (v28) {
        operator delete[](v27);
      }
    }
    while (v26 != v7);
    goto LABEL_50;
  }
  return v3;
}

BOOL mlir::mps::DequantizeOp::verify(uint64_t **this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11))) {
    unint64_t v2 = 0;
  }
  __p = *(void **)(v2 + 8);
  uint64_t v3 = *(void **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p) + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    __int16 v43 = 259;
    mlir::OpState::emitOpError(this, v42, (uint64_t)&__p);
    uint64_t v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
    if (__p) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
    }
    if (v58)
    {
      uint64_t v36 = (void **)v56;
      if (v56)
      {
        uint64_t v37 = v57;
        uint64_t v38 = v56;
        if (v57 != v56)
        {
          do
            uint64_t v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          uint64_t v38 = v56;
        }
        uint64_t v57 = v36;
        operator delete(v38);
      }
      uint64_t v30 = v54;
      if (!v54) {
        goto LABEL_92;
      }
      uint64_t v39 = v55;
      uint64_t v32 = v54;
      if (v55 == v54)
      {
LABEL_91:
        uint64_t v55 = v30;
        operator delete(v32);
LABEL_92:
        if (v52 != &v53) {
          free(v52);
        }
        return v26;
      }
      do
      {
        uint64_t v41 = (void *)*--v39;
        uint64_t v40 = v41;
        *uint64_t v39 = 0;
        if (v41) {
          operator delete[](v40);
        }
      }
      while (v39 != v30);
LABEL_90:
      uint64_t v32 = v54;
      goto LABEL_91;
    }
    return v26;
  }
  uint64_t v15 = *this;
  uint64_t v48 = v15;
  uint64_t v16 = *(void *)(v15[9] + 24);
  v42[0] = (const void **)v15[10];
  if (v42[0])
  {
    mlir::IntegerAttr::getValue(v42, (llvm::APInt *)&__p);
    if (v50 > 0x40)
    {
      LODWORD(v17) = *(_DWORD *)__p;
      operator delete[](__p);
    }
    else
    {
      uint64_t v17 = (uint64_t)((void)__p << -(uint64_t)v50) >> -(uint64_t)v50;
    }
    uint64_t v18 = v17 | 0x100000000;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v47 = v18;
  int v19 = (void *)(*(void *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8))
  {
    unsigned int v45 = 0;
    uint64_t v46 = 0;
    return 1;
  }
  uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  unsigned int v45 = v19;
  uint64_t v46 = v20;
  if (!v19 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v45)) {
    return 1;
  }
  uint64_t v44 = 0;
  if ((v18 & 0x100000000) == 0)
  {
LABEL_72:
    __p = &v47;
    unint64_t v50 = &v48;
    int64_t v51 = &v44;
    uint64_t v52 = &v45;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
  if ((int)v18 < 0) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  unsigned int v23 = v22 + v18;
  if ((v23 & 0x80000000) == 0)
  {
    uint64_t v24 = v23;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45);
    if (v24 <= v25)
    {
      uint64_t v44 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v45) + 8 * v24);
      uint64_t v15 = v48;
      goto LABEL_72;
    }
  }
  __int16 v43 = 259;
  mlir::OpState::emitOpError(&v48, v42, (uint64_t)&__p);
  uint64_t v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  }
  if (v58)
  {
    uint64_t v27 = (void **)v56;
    if (v56)
    {
      char v28 = v57;
      uint64_t v29 = v56;
      if (v57 != v56)
      {
        do
          char v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        uint64_t v29 = v56;
      }
      uint64_t v57 = v27;
      operator delete(v29);
    }
    uint64_t v30 = v54;
    if (!v54) {
      goto LABEL_92;
    }
    __int16 v31 = v55;
    uint64_t v32 = v54;
    if (v55 == v54) {
      goto LABEL_91;
    }
    do
    {
      uint64_t v34 = (void *)*--v31;
      uint64_t v33 = v34;
      void *v31 = 0;
      if (v34) {
        operator delete[](v33);
      }
    }
    while (v31 != v30);
    goto LABEL_90;
  }
  return v26;
}

void mlir::mps::DequantizeOp::downgradeToVersion(uint64_t **a1@<X0>, _DWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v25 = &unk_1EC9CA678;
  uint64_t v26 = 1;
  unsigned int v27 = 1;
  if (mlir::mps::DequantizeOp::hasNDParams((mlir::mps::DequantizeOp *)a1)
    && ((unsigned int v7 = a2[2], v7 < v26)
     || v7 == v26 && ((unsigned int v8 = a2[3], v8 < HIDWORD(v26)) || v8 == HIDWORD(v26) && a2[4] < v27)))
  {
    v19[0] = "failed to downgrade: requested target version is {0}, but ND Params in only supported from version {1}";
    v19[1] = 102;
    void v19[2] = v22;
    v19[3] = 2;
    v20[0] = &unk_1EC9A4798;
    v20[1] = a2;
    v21[0] = &unk_1EC9A4828;
    v21[1] = &v25;
    v22[0] = v20;
    v22[1] = v21;
    __int16 v24 = 263;
    unsigned int v23 = (const void **)v19;
    mlir::OpState::emitOpError(a1, &v23, (uint64_t)v28);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    if (v28[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v28);
    }
    if (v35)
    {
      unint64_t v9 = (void **)__p;
      if (__p)
      {
        unsigned int v10 = v34;
        int v11 = __p;
        if (v34 != __p)
        {
          do
            unsigned int v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          int v11 = __p;
        }
        uint64_t v34 = v9;
        operator delete(v11);
      }
      uint64_t v12 = v31;
      if (v31)
      {
        uint64_t v13 = v32;
        uint64_t v14 = v31;
        if (v32 != v31)
        {
          do
          {
            uint64_t v16 = (void *)*--v13;
            uint64_t v15 = v16;
            *uint64_t v13 = 0;
            if (v16) {
              operator delete[](v15);
            }
          }
          while (v13 != v12);
          uint64_t v14 = v31;
        }
        uint64_t v32 = v12;
        operator delete(v14);
      }
      if (v29 != &v30) {
        free(v29);
      }
    }
  }
  else
  {
    uint64_t v17 = *((unsigned int *)v6 + 9);
    uint64_t v18 = v6 - 2;
    if (!v17) {
      uint64_t v18 = 0;
    }
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v17;
    *(unsigned char *)(a3 + 16) = 1;
  }
}

uint64_t mlir::mps::DequantizeOp::hasNDParams(mlir::mps::DequantizeOp *this)
{
  unint64_t v1 = *(void **)(*(void *)this + 72);
  uint64_t v2 = v1[11];
  uint64_t v3 = v1[15];
  uint64_t v4 = (void *)(*(void *)(v1[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8))
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    if (v4)
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v14))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
        if (v6 > 1) {
          return 1;
        }
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  unsigned int v7 = (void *)(*(void *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8))
  {
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    uint64_t v14 = v7;
    uint64_t v15 = v8;
    if (v7)
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v14))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
        if (v9 > 1) {
          return 1;
        }
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  unsigned int v10 = (void *)(*(void *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8))
  {
    uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    if (v10)
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v14))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v14);
        if (v12 > 1) {
          return 1;
        }
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  return 0;
}

uint64_t mlir::mps::QuantizeOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a7) {
    long long v14 = *a7;
  }
  else {
    long long v14 = 0uLL;
  }
  uint64_t v30 = a6;
  v31[0] = 0;
  char v32 = 0;
  long long v33 = v14;
  uint64_t v34 = a9;
  uint64_t v35 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v30);
    if (v32) {
      char v32 = 0;
    }
    mlir::OperationName::OperationName(v31, "mps.quantize", 12, Context);
    char v32 = 1;
  }
  *(void *)&long long v36 = a4;
  *((void *)&v36 + 1) = a5;
  if (a5
    && (uint64_t v16 = mlir::UnknownLoc::get(this, a2), mlir::mps::QuantizeOpAdaptor::verify((uint64_t)&v30, v16)))
  {
    uint64_t v17 = *((void *)&v33 + 1);
    long long v37 = v36;
    uint64_t v18 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v18) {
      uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
    }
    else {
      uint64_t v19 = 0;
    }
    v27[0] = (uint64_t)v18;
    v27[1] = v19;
    uint64_t v26 = v17;
    uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Value);
    LOBYTE(v28) = 0;
    char v29 = 0;
    uint64_t v21 = mlir::ShapedType::cloneWith(v27, &v28, ElementTypeOrSelf);
    uint64_t v22 = *(unsigned int *)(a11 + 8);
    if (v22 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v20 = mlir::Float32Type::get(this, a2);
    uint64_t v21 = mlir::UnrankedTensorType::get(v20);
    uint64_t v22 = *(unsigned int *)(a11 + 8);
    if (v22 >= *(_DWORD *)(a11 + 12))
    {
LABEL_16:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(a11 + 8);
    }
  }
  *(void *)(*(void *)a11 + 8 * v22) = v21;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::QuantizeOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    v22[0] = *(void *)(a1 + 32);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v22);
    if (!v3) {
      return 1;
    }
    v20[0] = v3;
    v22[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
    if (mlir::Type::isSignedInteger((mlir::Type *)v22, 32)) {
      return 1;
    }
    v20[0] = "'mps.quantize' op attribute 'axis' failed to satisfy constraint: 32-bit signed integer attribute";
    __int16 v21 = 259;
    mlir::emitError(a2, (uint64_t)v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v13 = (void **)__p;
      if (__p)
      {
        long long v14 = v28;
        uint64_t v15 = __p;
        if (v28 != __p)
        {
          do
            long long v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        long long v28 = v13;
        operator delete(v15);
      }
      uint64_t v8 = v25;
      if (!v25) {
        goto LABEL_35;
      }
      uint64_t v16 = v26;
      unsigned int v10 = v25;
      if (v26 == v25)
      {
LABEL_34:
        uint64_t v26 = v8;
        operator delete(v10);
LABEL_35:
        if (v23 != &v24) {
          free(v23);
        }
        return v4;
      }
      do
      {
        uint64_t v18 = (void *)*--v16;
        uint64_t v17 = v18;
        *uint64_t v16 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v16 != v8);
LABEL_33:
      unsigned int v10 = v25;
      goto LABEL_34;
    }
  }
  else
  {
    v20[0] = "'mps.quantize' op requires attribute 'dtype'";
    __int16 v21 = 259;
    mlir::emitError(a2, (uint64_t)v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v5 = (void **)__p;
      if (__p)
      {
        uint64_t v6 = v28;
        unsigned int v7 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          unsigned int v7 = __p;
        }
        long long v28 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v25;
      if (!v25) {
        goto LABEL_35;
      }
      uint64_t v9 = v26;
      unsigned int v10 = v25;
      if (v26 == v25) {
        goto LABEL_34;
      }
      do
      {
        uint64_t v12 = (void *)*--v9;
        uint64_t v11 = v12;
        *uint64_t v9 = 0;
        if (v12) {
          operator delete[](v11);
        }
      }
      while (v9 != v8);
      goto LABEL_33;
    }
  }
  return v4;
}

uint64_t mlir::mps::DequantizeOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a7) {
    long long v14 = *a7;
  }
  else {
    long long v14 = 0uLL;
  }
  uint64_t v30 = a6;
  v31[0] = 0;
  char v32 = 0;
  long long v33 = v14;
  uint64_t v34 = a9;
  uint64_t v35 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v30);
    if (v32) {
      char v32 = 0;
    }
    mlir::OperationName::OperationName(v31, "mps.dequantize", 14, Context);
    char v32 = 1;
  }
  *(void *)&long long v36 = a4;
  *((void *)&v36 + 1) = a5;
  if (a5
    && (uint64_t v16 = mlir::UnknownLoc::get(this, a2),
        mlir::mps::DequantizeOpAdaptor::verify((uint64_t)&v30, v16)))
  {
    uint64_t v17 = *((void *)&v33 + 1);
    long long v37 = v36;
    uint64_t v18 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(&v37, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v18) {
      uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v18 + 8);
    }
    else {
      uint64_t v19 = 0;
    }
    v27[0] = (uint64_t)v18;
    v27[1] = v19;
    uint64_t v26 = v17;
    uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(Value);
    LOBYTE(v28) = 0;
    char v29 = 0;
    uint64_t v21 = mlir::ShapedType::cloneWith(v27, &v28, ElementTypeOrSelf);
    uint64_t v22 = *(unsigned int *)(a11 + 8);
    if (v22 >= *(_DWORD *)(a11 + 12)) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v20 = mlir::Float32Type::get(this, a2);
    uint64_t v21 = mlir::UnrankedTensorType::get(v20);
    uint64_t v22 = *(unsigned int *)(a11 + 8);
    if (v22 >= *(_DWORD *)(a11 + 12))
    {
LABEL_16:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(a11 + 8);
    }
  }
  *(void *)(*(void *)a11 + 8 * v22) = v21;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mps::DequantizeOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    v22[0] = *(void *)(a1 + 32);
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v22);
    if (!v3) {
      return 1;
    }
    v20[0] = v3;
    v22[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
    if (mlir::Type::isSignedInteger((mlir::Type *)v22, 32)) {
      return 1;
    }
    v20[0] = "'mps.dequantize' op attribute 'axis' failed to satisfy constraint: 32-bit signed integer attribute";
    __int16 v21 = 259;
    mlir::emitError(a2, (uint64_t)v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v13 = (void **)__p;
      if (__p)
      {
        long long v14 = v28;
        uint64_t v15 = __p;
        if (v28 != __p)
        {
          do
            long long v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        long long v28 = v13;
        operator delete(v15);
      }
      uint64_t v8 = v25;
      if (!v25) {
        goto LABEL_35;
      }
      uint64_t v16 = v26;
      unsigned int v10 = v25;
      if (v26 == v25)
      {
LABEL_34:
        uint64_t v26 = v8;
        operator delete(v10);
LABEL_35:
        if (v23 != &v24) {
          free(v23);
        }
        return v4;
      }
      do
      {
        uint64_t v18 = (void *)*--v16;
        uint64_t v17 = v18;
        *uint64_t v16 = 0;
        if (v18) {
          operator delete[](v17);
        }
      }
      while (v16 != v8);
LABEL_33:
      unsigned int v10 = v25;
      goto LABEL_34;
    }
  }
  else
  {
    v20[0] = "'mps.dequantize' op requires attribute 'dtype'";
    __int16 v21 = 259;
    mlir::emitError(a2, (uint64_t)v20, (uint64_t)v22);
    uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    }
    if (v29)
    {
      uint64_t v5 = (void **)__p;
      if (__p)
      {
        uint64_t v6 = v28;
        unsigned int v7 = __p;
        if (v28 != __p)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          unsigned int v7 = __p;
        }
        long long v28 = v5;
        operator delete(v7);
      }
      uint64_t v8 = v25;
      if (!v25) {
        goto LABEL_35;
      }
      uint64_t v9 = v26;
      unsigned int v10 = v25;
      if (v26 == v25) {
        goto LABEL_34;
      }
      do
      {
        uint64_t v12 = (void *)*--v9;
        uint64_t v11 = v12;
        *uint64_t v9 = 0;
        if (v12) {
          operator delete[](v11);
        }
      }
      while (v9 != v8);
      goto LABEL_33;
    }
  }
  return v4;
}

uint64_t mlir::mps::DequantizeLUTOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v55[2] = *MEMORY[0x1E4F143B8];
  v55[0] = a4;
  v55[1] = a5;
  if (a7) {
    uint64_t v16 = *a7;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v47 = a6;
  v48[0] = 0;
  char v49 = 0;
  uint64_t v50 = v16;
  uint64_t v51 = a9;
  uint64_t v52 = a10;
  if (a6)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v47);
    if (v49) {
      char v49 = 0;
    }
    mlir::OperationName::OperationName(v48, "mps.dequantize_lut", 18, Context);
    char v49 = 1;
  }
  uint64_t v53 = a4;
  unint64_t v54 = a5;
  if (a5 < 2
    || (uint64_t v18 = mlir::UnknownLoc::get(this, a2),
        !mlir::mps::DequantizeLUTOpAdaptor::verify((uint64_t)&v47, v18)))
  {
    uint64_t v21 = mlir::Float32Type::get(this, a2);
LABEL_31:
    uint64_t v28 = mlir::UnrankedTensorType::get(v21);
    goto LABEL_32;
  }
  uint64_t v19 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v55, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v19) {
    uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v19 + 8);
  }
  else {
    uint64_t v20 = 0;
  }
  v44[0] = (uint64_t)v19;
  v44[1] = v20;
  uint64_t v22 = (void *)(*(void *)(mlir::ValueRange::dereference_iterator(v55, 1) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v22) {
    uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v22 + 8);
  }
  else {
    uint64_t v23 = 0;
  }
  v43[0] = v22;
  v43[1] = v23;
  uint64_t OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v43);
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v43) & 1) == 0) {
    goto LABEL_30;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
  if (v25 == 1
    || !v50
    || (uint64_t v26 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43)
                        + 8 * (v25 - 1)),
        v26 == 1))
  {
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(OperandRange);
    LOBYTE(v45) = 0;
    char v46 = 0;
    uint64_t v28 = mlir::ShapedType::cloneWith(v44, &v45, ElementTypeOrSelf);
LABEL_32:
    uint64_t v40 = v28;
    uint64_t v41 = *(unsigned int *)(a11 + 8);
    if (v41 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v41 + 1, 8);
      LODWORD(v41) = *(_DWORD *)(a11 + 8);
    }
    *(void *)(*(void *)a11 + 8 * v41) = v40;
    ++*(_DWORD *)(a11 + 8);
    return 1;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v44) || !v50)
  {
LABEL_30:
    uint64_t v21 = (uint64_t)OperandRange;
    goto LABEL_31;
  }
  uint64_t Axis = (int)mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase::getAxis((mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase *)&v47);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
  if (v32)
  {
    unint64_t v33 = PositiveAxis;
    uint64_t ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    llvm::SmallVector<long long,5u>::SmallVector<long long,void>(&v45, ArgAttrsAttr, v35);
    uint64_t v36 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    unint64_t v37 = 0x8000000000000000;
    uint64_t v38 = v45;
    if (v26 != 0x8000000000000000 && *(void *)(v36 + 8 * v33) != 0x8000000000000000) {
      unint64_t v37 = *(void *)(v45 + 8 * v33) * v26;
    }
    *(void *)(v45 + 8 * v33) = v37;
    uint64_t v39 = mlir::RankedTensorType::get(v38, DWORD2(v45), (uint64_t)OperandRange, 0);
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back(a11, v39);
    if ((char *)v45 != &v46) {
      free((void *)v45);
    }
    return 1;
  }
  return mlir::mps::ResizeOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0::operator()(a11, (uint64_t)OperandRange);
}

uint64_t mlir::mps::DequantizeLUTOpAdaptor::verify(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 24)) {
    return 1;
  }
  v13[0] = *(void *)(a1 + 24);
  v15[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v13);
  if (mlir::Type::isSignedInteger((mlir::Type *)v15, 32)) {
    return 1;
  }
  v13[0] = "'mps.dequantize_lut' op attribute 'axis' failed to satisfy constraint: 32-bit signed integer attribute";
  __int16 v14 = 259;
  mlir::emitError(a2, (uint64_t)v13, (uint64_t)v15);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  }
  if (v22)
  {
    uint64_t v5 = (void **)__p;
    if (__p)
    {
      uint64_t v6 = v21;
      unsigned int v7 = __p;
      if (v21 != __p)
      {
        do
          uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
        while (v6 != v5);
        unsigned int v7 = __p;
      }
      uint64_t v21 = v5;
      operator delete(v7);
    }
    uint64_t v8 = v18;
    if (v18)
    {
      uint64_t v9 = v19;
      unsigned int v10 = v18;
      if (v19 != v18)
      {
        do
        {
          uint64_t v12 = (void *)*--v9;
          uint64_t v11 = v12;
          *uint64_t v9 = 0;
          if (v12) {
            operator delete[](v11);
          }
        }
        while (v9 != v8);
        unsigned int v10 = v18;
      }
      uint64_t v19 = v8;
      operator delete(v10);
    }
    if (v16 != &v17) {
      free(v16);
    }
  }
  return v3;
}

uint64_t mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase::getAxisAttr(mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase *this)
{
  return *((void *)this + 3);
}

unint64_t mlir::mps::anonymous namespace'::tryGetPositiveAxis(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v68 = a1;
  unsigned int v7 = (const char *)-a2;
  if (-a2 > a1 || a2 <= a1)
  {
    if (a5)
    {
      v66[0] = (const void **)"invalid axis ";
      __int16 v67 = 259;
      mlir::Operation::emitOpError(a5, v66, (uint64_t)v72);
      if (v72[0])
      {
        int v69 = 2;
        uint64_t v70 = (const char *)a1;
        uint64_t v9 = &v69;
        unsigned int v10 = (char *)v73;
        if (v74 >= v75)
        {
          unint64_t v49 = v74 + 1;
          if (v73 <= &v69 && (char *)v73 + 24 * v74 > (char *)&v69)
          {
            int64_t v60 = (char *)&v69 - (unsigned char *)v73;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v49, 24);
            unsigned int v10 = (char *)v73;
            uint64_t v9 = (int *)((char *)v73 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v49, 24);
            uint64_t v9 = &v69;
            unsigned int v10 = (char *)v73;
          }
        }
        uint64_t v11 = &v10[24 * v74];
        long long v12 = *(_OWORD *)v9;
        *((void *)v11 + 2) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v11 = v12;
        uint64_t v13 = ++v74;
        if (v72[0])
        {
          int v69 = 3;
          uint64_t v70 = " is outside of the range [";
          uint64_t v71 = 26;
          __int16 v14 = &v69;
          uint64_t v15 = (char *)v73;
          if (v13 >= v75)
          {
            unint64_t v50 = v13 + 1;
            BOOL v51 = (char *)v73 + 24 * v13 > (char *)&v69;
            if (v73 <= &v69 && v51)
            {
              int64_t v61 = (char *)&v69 - (unsigned char *)v73;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v50, 24);
              uint64_t v15 = (char *)v73;
              __int16 v14 = (int *)((char *)v73 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v50, 24);
              __int16 v14 = &v69;
              uint64_t v15 = (char *)v73;
            }
          }
          uint64_t v16 = &v15[24 * v74];
          long long v17 = *(_OWORD *)v14;
          *((void *)v16 + 2) = *((void *)v14 + 2);
          *(_OWORD *)uint64_t v16 = v17;
          uint64_t v18 = ++v74;
          if (v72[0])
          {
            int v69 = 2;
            uint64_t v70 = v7;
            uint64_t v19 = &v69;
            uint64_t v20 = (char *)v73;
            if (v18 >= v75)
            {
              unint64_t v52 = v18 + 1;
              BOOL v53 = (char *)v73 + 24 * v18 > (char *)&v69;
              if (v73 <= &v69 && v53)
              {
                int64_t v62 = (char *)&v69 - (unsigned char *)v73;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v52, 24);
                uint64_t v20 = (char *)v73;
                uint64_t v19 = (int *)((char *)v73 + v62);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v52, 24);
                uint64_t v19 = &v69;
                uint64_t v20 = (char *)v73;
              }
            }
            uint64_t v21 = &v20[24 * v74];
            long long v22 = *(_OWORD *)v19;
            *((void *)v21 + 2) = *((void *)v19 + 2);
            *(_OWORD *)uint64_t v21 = v22;
            uint64_t v23 = ++v74;
            if (v72[0])
            {
              int v69 = 3;
              uint64_t v70 = ", ";
              uint64_t v71 = 2;
              uint64_t v24 = &v69;
              uint64_t v25 = (char *)v73;
              if (v23 >= v75)
              {
                unint64_t v54 = v23 + 1;
                BOOL v55 = (char *)v73 + 24 * v23 > (char *)&v69;
                if (v73 <= &v69 && v55)
                {
                  int64_t v63 = (char *)&v69 - (unsigned char *)v73;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v54, 24);
                  uint64_t v25 = (char *)v73;
                  uint64_t v24 = (int *)((char *)v73 + v63);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v54, 24);
                  uint64_t v24 = &v69;
                  uint64_t v25 = (char *)v73;
                }
              }
              uint64_t v26 = &v25[24 * v74];
              long long v27 = *(_OWORD *)v24;
              *((void *)v26 + 2) = *((void *)v24 + 2);
              *(_OWORD *)uint64_t v26 = v27;
              uint64_t v28 = ++v74;
              if (v72[0])
              {
                int v69 = 2;
                uint64_t v70 = (const char *)(a2 - 1);
                char v29 = &v69;
                uint64_t v30 = (char *)v73;
                if (v28 >= v75)
                {
                  unint64_t v56 = v28 + 1;
                  BOOL v57 = (char *)v73 + 24 * v28 > (char *)&v69;
                  if (v73 <= &v69 && v57)
                  {
                    int64_t v64 = (char *)&v69 - (unsigned char *)v73;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v56, 24);
                    uint64_t v30 = (char *)v73;
                    char v29 = (int *)((char *)v73 + v64);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v56, 24);
                    char v29 = &v69;
                    uint64_t v30 = (char *)v73;
                  }
                }
                __int16 v31 = &v30[24 * v74];
                long long v32 = *(_OWORD *)v29;
                *((void *)v31 + 2) = *((void *)v29 + 2);
                *(_OWORD *)__int16 v31 = v32;
                uint64_t v33 = ++v74;
                if (v72[0])
                {
                  int v69 = 3;
                  uint64_t v70 = "].";
                  uint64_t v71 = 2;
                  uint64_t v34 = &v69;
                  uint64_t v35 = (char *)v73;
                  if (v33 >= v75)
                  {
                    unint64_t v58 = v33 + 1;
                    BOOL v59 = (char *)v73 + 24 * v33 > (char *)&v69;
                    if (v73 <= &v69 && v59)
                    {
                      int64_t v65 = (char *)&v69 - (unsigned char *)v73;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v58, 24);
                      uint64_t v35 = (char *)v73;
                      uint64_t v34 = (int *)((char *)v73 + v65);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, v76, v58, 24);
                      uint64_t v34 = &v69;
                      uint64_t v35 = (char *)v73;
                    }
                  }
                  uint64_t v36 = &v35[24 * v74];
                  long long v37 = *(_OWORD *)v34;
                  *((void *)v36 + 2) = *((void *)v34 + 2);
                  *(_OWORD *)uint64_t v36 = v37;
                  ++v74;
                  if (v72[0]) {
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v72);
                  }
                }
              }
            }
          }
        }
      }
      if (v81)
      {
        uint64_t v38 = (void **)__p;
        if (__p)
        {
          uint64_t v39 = v80;
          uint64_t v40 = __p;
          if (v80 != __p)
          {
            do
              uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
            while (v39 != v38);
            uint64_t v40 = __p;
          }
          uint64_t v80 = v38;
          operator delete(v40);
        }
        uint64_t v41 = v77;
        if (v77)
        {
          uint64_t v42 = v78;
          __int16 v43 = v77;
          if (v78 != v77)
          {
            do
            {
              long long v45 = (void *)*--v42;
              uint64_t v44 = v45;
              *uint64_t v42 = 0;
              if (v45) {
                operator delete[](v44);
              }
            }
            while (v42 != v41);
            __int16 v43 = v77;
          }
          uint64_t v78 = v41;
          operator delete(v43);
        }
        if (v73 != v76) {
          free(v73);
        }
      }
    }
    else
    {
      v72[0] = -a2;
      v66[0] = (const void **)(a2 - 1);
      mlir::emitOptionalError<char const(&)[14],long long &,char const(&)[27],long long,char const(&)[3],long long,char const(&)[2]>(a3, a4, "invalid axis ", &v68, " is outside of the range [", v72, ", ", (uint64_t *)v66, "]");
    }
    uint64_t v47 = 0;
    unint64_t v46 = 0;
  }
  else
  {
    unint64_t v46 = ((a2 & (a1 >> 63)) + a1) & 0xFFFFFFFFFFFFFF00;
    uint64_t v47 = ((a2 & (a1 >> 63)) + a1);
  }
  return v46 | v47;
}

uint64_t mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase::getAxis(mlir::mps::detail::DequantizeLUTOpGenericAdaptorBase *this)
{
  uint64_t v5 = *((void *)this + 3);
  if (!v5) {
    return 0;
  }
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40) {
    return ((uint64_t)((void)__p << -(uint64_t)v4) >> -(uint64_t)v4) | 0x100000000;
  }
  unsigned int v2 = *(_DWORD *)__p;
  operator delete[](__p);
  return v2 | 0x100000000;
}

uint64_t mlir::mps::verifyDequantLUT(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = (void *)(*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7)
  {
    uint64_t v8 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    long long v139 = v7;
    uint64_t v140 = v8;
    uint64_t v9 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    long long v139 = 0;
    uint64_t v140 = 0;
    uint64_t v9 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v9) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = 0;
LABEL_6:
  v138[0] = v9;
  v138[1] = v10;
  v144[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v139);
  unsigned int IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v144);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v138)) {
    return 1;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
  uint64_t v13 = v12;
  uint64_t v14 = a4 & 0xFF00000000;
  if (v12 == 1)
  {
    if (v14)
    {
      uint64_t v15 = 1;
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if (!v14)
  {
LABEL_16:
    unsigned int v20 = v12 - 1;
    uint64_t ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
    char v17 = 0;
    uint64_t v15 = 1;
    int8x8_t v18 = *(int8x8_t *)(ArgAttrsAttr + 8 * v20);
    if (*(void *)&v18 == 0x8000000000000000) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138)
                  + 8 * (v12 - 1));
  if (v13 < 3)
  {
LABEL_14:
    uint64_t v19 = (int8x8_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
    char v17 = 1;
    int8x8_t v18 = *v19;
    if (*v19 == 0x8000000000000000) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  uint64_t v16 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v138);
  char v17 = 1;
  int8x8_t v18 = *(int8x8_t *)(v16 + 8 * (v13 - 2));
  if (*(void *)&v18 == 0x8000000000000000) {
    goto LABEL_19;
  }
LABEL_17:
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v18);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] != 1)
  {
    __int16 v137 = 257;
    mlir::Operation::emitOpError(a1, v136, (uint64_t)v144);
    if (v144[0])
    {
      int v141 = 3;
      uint64_t v143 = 10;
      uint64_t v42 = &v141;
      __int16 v43 = (char *)v145;
      if (v146 >= v147)
      {
        unint64_t v107 = v146 + 1;
        if (v145 <= &v141 && (char *)v145 + 24 * v146 > (char *)&v141)
        {
          int64_t v125 = (char *)&v141 - (unsigned char *)v145;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v107, 24);
          __int16 v43 = (char *)v145;
          uint64_t v42 = (int *)((char *)v145 + v125);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v107, 24);
          uint64_t v42 = &v141;
          __int16 v43 = (char *)v145;
        }
      }
      uint64_t v44 = &v43[24 * v146];
      long long v45 = *(_OWORD *)v42;
      *((void *)v44 + 2) = *((void *)v42 + 2);
      *(_OWORD *)uint64_t v44 = v45;
      uint64_t v46 = ++v146;
      if (v144[0])
      {
        int v141 = 2;
        uint64_t v142 = (const char *)v18;
        uint64_t v47 = &v141;
        uint64_t v48 = (char *)v145;
        if (v46 >= v147)
        {
          unint64_t v109 = v46 + 1;
          BOOL v110 = (char *)v145 + 24 * v46 > (char *)&v141;
          if (v145 <= &v141 && v110)
          {
            int64_t v127 = (char *)&v141 - (unsigned char *)v145;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v109, 24);
            uint64_t v48 = (char *)v145;
            uint64_t v47 = (int *)((char *)v145 + v127);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v109, 24);
            uint64_t v47 = &v141;
            uint64_t v48 = (char *)v145;
          }
        }
        unint64_t v49 = &v48[24 * v146];
        long long v50 = *(_OWORD *)v47;
        *((void *)v49 + 2) = *((void *)v47 + 2);
        *(_OWORD *)unint64_t v49 = v50;
        uint64_t v51 = ++v146;
        if (v144[0])
        {
          int v141 = 3;
          uint64_t v143 = 22;
          unint64_t v52 = &v141;
          BOOL v53 = (char *)v145;
          if (v51 >= v147)
          {
            unint64_t v113 = v51 + 1;
            BOOL v114 = (char *)v145 + 24 * v51 > (char *)&v141;
            if (v145 <= &v141 && v114)
            {
              int64_t v130 = (char *)&v141 - (unsigned char *)v145;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v113, 24);
              BOOL v53 = (char *)v145;
              unint64_t v52 = (int *)((char *)v145 + v130);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v113, 24);
              unint64_t v52 = &v141;
              BOOL v53 = (char *)v145;
            }
          }
          unint64_t v54 = &v53[24 * v146];
          long long v55 = *(_OWORD *)v52;
          *((void *)v54 + 2) = *((void *)v52 + 2);
          *(_OWORD *)unint64_t v54 = v55;
          ++v146;
        }
      }
    }
    uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v144);
    if (v144[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v144);
    }
    if (v153)
    {
      unint64_t v56 = (void **)__p;
      if (__p)
      {
        BOOL v57 = v152;
        unint64_t v58 = __p;
        if (v152 != __p)
        {
          do
            BOOL v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          unint64_t v58 = __p;
        }
        uint64_t v152 = v56;
        operator delete(v58);
      }
      uint64_t v36 = v149;
      if (!v149) {
        goto LABEL_109;
      }
      BOOL v59 = v150;
      uint64_t v38 = v149;
      if (v150 == v149) {
        goto LABEL_108;
      }
      do
      {
        int64_t v61 = (void *)*--v59;
        int64_t v60 = v61;
        void *v59 = 0;
        if (v61) {
          operator delete[](v60);
        }
      }
      while (v59 != v36);
      goto LABEL_107;
    }
    return v32;
  }
  uint64_t v23 = (const char *)IntOrFloatBitWidth;
  uint64_t v24 = (const char *)(1 << IntOrFloatBitWidth);
  if ((const char *)v18 != v24)
  {
    __int16 v137 = 257;
    mlir::Operation::emitOpError(a1, v136, (uint64_t)v144);
    if (v144[0])
    {
      int v141 = 3;
      uint64_t v143 = 10;
      uint64_t v72 = &v141;
      uint64_t v73 = (char *)v145;
      if (v146 >= v147)
      {
        unint64_t v112 = v146 + 1;
        if (v145 <= &v141 && (char *)v145 + 24 * v146 > (char *)&v141)
        {
          int64_t v129 = (char *)&v141 - (unsigned char *)v145;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v112, 24);
          uint64_t v73 = (char *)v145;
          uint64_t v72 = (int *)((char *)v145 + v129);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v112, 24);
          uint64_t v72 = &v141;
          uint64_t v73 = (char *)v145;
        }
      }
      unsigned int v74 = &v73[24 * v146];
      long long v75 = *(_OWORD *)v72;
      *((void *)v74 + 2) = *((void *)v72 + 2);
      *(_OWORD *)unsigned int v74 = v75;
      uint64_t v76 = ++v146;
      if (v144[0])
      {
        int v141 = 2;
        uint64_t v142 = (const char *)v18;
        uint64_t v77 = &v141;
        uint64_t v78 = (char *)v145;
        if (v76 >= v147)
        {
          unint64_t v115 = v76 + 1;
          BOOL v116 = (char *)v145 + 24 * v76 > (char *)&v141;
          if (v145 <= &v141 && v116)
          {
            int64_t v131 = (char *)&v141 - (unsigned char *)v145;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v115, 24);
            uint64_t v78 = (char *)v145;
            uint64_t v77 = (int *)((char *)v145 + v131);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v115, 24);
            uint64_t v77 = &v141;
            uint64_t v78 = (char *)v145;
          }
        }
        uint64_t v79 = &v78[24 * v146];
        long long v80 = *(_OWORD *)v77;
        *((void *)v79 + 2) = *((void *)v77 + 2);
        *(_OWORD *)uint64_t v79 = v80;
        uint64_t v81 = ++v146;
        if (v144[0])
        {
          int v141 = 3;
          uint64_t v143 = 41;
          uint64_t v82 = &v141;
          uint64_t v83 = (char *)v145;
          if (v81 >= v147)
          {
            unint64_t v117 = v81 + 1;
            BOOL v118 = (char *)v145 + 24 * v81 > (char *)&v141;
            if (v145 <= &v141 && v118)
            {
              int64_t v132 = (char *)&v141 - (unsigned char *)v145;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v117, 24);
              uint64_t v83 = (char *)v145;
              uint64_t v82 = (int *)((char *)v145 + v132);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v117, 24);
              uint64_t v82 = &v141;
              uint64_t v83 = (char *)v145;
            }
          }
          char v84 = &v83[24 * v146];
          long long v85 = *(_OWORD *)v82;
          *((void *)v84 + 2) = *((void *)v82 + 2);
          *(_OWORD *)char v84 = v85;
          uint64_t v86 = ++v146;
          if (v144[0])
          {
            int v141 = 2;
            uint64_t v142 = v23;
            long long v87 = &v141;
            long long v88 = (char *)v145;
            if (v86 >= v147)
            {
              unint64_t v119 = v86 + 1;
              BOOL v120 = (char *)v145 + 24 * v86 > (char *)&v141;
              if (v145 <= &v141 && v120)
              {
                int64_t v133 = (char *)&v141 - (unsigned char *)v145;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v119, 24);
                long long v88 = (char *)v145;
                long long v87 = (int *)((char *)v145 + v133);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v119, 24);
                long long v87 = &v141;
                long long v88 = (char *)v145;
              }
            }
            uint64_t v89 = &v88[24 * v146];
            long long v90 = *(_OWORD *)v87;
            *((void *)v89 + 2) = *((void *)v87 + 2);
            *(_OWORD *)uint64_t v89 = v90;
            uint64_t v91 = ++v146;
            if (v144[0])
            {
              int v141 = 3;
              uint64_t v142 = "=";
              uint64_t v143 = 1;
              unint64_t v92 = &v141;
              uint64_t v93 = (char *)v145;
              if (v91 >= v147)
              {
                unint64_t v121 = v91 + 1;
                BOOL v122 = (char *)v145 + 24 * v91 > (char *)&v141;
                if (v145 <= &v141 && v122)
                {
                  int64_t v134 = (char *)&v141 - (unsigned char *)v145;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v121, 24);
                  uint64_t v93 = (char *)v145;
                  unint64_t v92 = (int *)((char *)v145 + v134);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v121, 24);
                  unint64_t v92 = &v141;
                  uint64_t v93 = (char *)v145;
                }
              }
              unint64_t v94 = &v93[24 * v146];
              long long v95 = *(_OWORD *)v92;
              *((void *)v94 + 2) = *((void *)v92 + 2);
              *(_OWORD *)unint64_t v94 = v95;
              uint64_t v96 = ++v146;
              if (v144[0])
              {
                int v141 = 2;
                uint64_t v142 = v24;
                BOOL v97 = &v141;
                unint64_t v98 = (char *)v145;
                if (v96 >= v147)
                {
                  unint64_t v123 = v96 + 1;
                  BOOL v124 = (char *)v145 + 24 * v96 > (char *)&v141;
                  if (v145 <= &v141 && v124)
                  {
                    int64_t v135 = (char *)&v141 - (unsigned char *)v145;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v123, 24);
                    unint64_t v98 = (char *)v145;
                    BOOL v97 = (int *)((char *)v145 + v135);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v123, 24);
                    BOOL v97 = &v141;
                    unint64_t v98 = (char *)v145;
                  }
                }
                BOOL v99 = &v98[24 * v146];
                long long v100 = *(_OWORD *)v97;
                *((void *)v99 + 2) = *((void *)v97 + 2);
                *(_OWORD *)BOOL v99 = v100;
                ++v146;
              }
            }
          }
        }
      }
    }
    uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v144);
    if (v144[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v144);
    }
    if (v153)
    {
      BOOL v101 = (void **)__p;
      if (__p)
      {
        int64_t v102 = v152;
        int64_t v103 = __p;
        if (v152 != __p)
        {
          do
            int64_t v102 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v102 - 1);
          while (v102 != v101);
          int64_t v103 = __p;
        }
        uint64_t v152 = v101;
        operator delete(v103);
      }
      uint64_t v36 = v149;
      if (!v149) {
        goto LABEL_109;
      }
      int64_t v104 = v150;
      uint64_t v38 = v149;
      if (v150 == v149) {
        goto LABEL_108;
      }
      do
      {
        int64_t v106 = (void *)*--v104;
        int64_t v105 = v106;
        void *v104 = 0;
        if (v106) {
          operator delete[](v105);
        }
      }
      while (v104 != v36);
      goto LABEL_107;
    }
    return v32;
  }
LABEL_19:
  if (v17)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v139);
    uint64_t v26 = (v25 & ((uint64_t)(int)a4 >> 31)) + (int)a4;
    if (v26 < 0 || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v139), v26 >= v27))
    {
      __int16 v137 = 257;
      mlir::Operation::emitOpError(a1, v136, (uint64_t)v144);
      if (v144[0])
      {
        int v141 = 3;
        uint64_t v142 = "axis value is not compatible with input rank";
        uint64_t v143 = 44;
        uint64_t v28 = &v141;
        char v29 = (char *)v145;
        if (v146 >= v147)
        {
          unint64_t v108 = v146 + 1;
          if (v145 <= &v141 && (char *)v145 + 24 * v146 > (char *)&v141)
          {
            int64_t v126 = (char *)&v141 - (unsigned char *)v145;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v108, 24);
            char v29 = (char *)v145;
            uint64_t v28 = (int *)((char *)v145 + v126);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v108, 24);
            uint64_t v28 = &v141;
            char v29 = (char *)v145;
          }
        }
        uint64_t v30 = &v29[24 * v146];
        long long v31 = *(_OWORD *)v28;
        *((void *)v30 + 2) = *((void *)v28 + 2);
        *(_OWORD *)uint64_t v30 = v31;
        ++v146;
      }
      uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v144);
      if (v144[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v144);
      }
      if (v153)
      {
        uint64_t v33 = (void **)__p;
        if (__p)
        {
          uint64_t v34 = v152;
          uint64_t v35 = __p;
          if (v152 != __p)
          {
            do
              uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
            while (v34 != v33);
            uint64_t v35 = __p;
          }
          uint64_t v152 = v33;
          operator delete(v35);
        }
        uint64_t v36 = v149;
        if (!v149) {
          goto LABEL_109;
        }
        long long v37 = v150;
        uint64_t v38 = v149;
        if (v150 == v149)
        {
LABEL_108:
          uint64_t v150 = v36;
          operator delete(v38);
LABEL_109:
          if (v145 != v148) {
            free(v145);
          }
          return v32;
        }
        do
        {
          uint64_t v40 = (void *)*--v37;
          uint64_t v39 = v40;
          void *v37 = 0;
          if (v40) {
            operator delete[](v39);
          }
        }
        while (v37 != v36);
LABEL_107:
        uint64_t v38 = v149;
        goto LABEL_108;
      }
      return v32;
    }
    return 1;
  }
  if (v15 < 2) {
    return 1;
  }
  __int16 v137 = 257;
  mlir::Operation::emitOpError(a1, v136, (uint64_t)v144);
  if (v144[0])
  {
    int v141 = 3;
    uint64_t v142 = "axis must be defined when LUT Vector size > 1";
    uint64_t v143 = 45;
    int64_t v62 = &v141;
    int64_t v63 = (char *)v145;
    if (v146 >= v147)
    {
      unint64_t v111 = v146 + 1;
      if (v145 <= &v141 && (char *)v145 + 24 * v146 > (char *)&v141)
      {
        int64_t v128 = (char *)&v141 - (unsigned char *)v145;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v111, 24);
        int64_t v63 = (char *)v145;
        int64_t v62 = (int *)((char *)v145 + v128);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v148, v111, 24);
        int64_t v62 = &v141;
        int64_t v63 = (char *)v145;
      }
    }
    int64_t v64 = &v63[24 * v146];
    long long v65 = *(_OWORD *)v62;
    *((void *)v64 + 2) = *((void *)v62 + 2);
    *(_OWORD *)int64_t v64 = v65;
    ++v146;
  }
  uint64_t v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v144);
  if (v144[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v144);
  }
  if (v153)
  {
    uint64_t v66 = (void **)__p;
    if (__p)
    {
      __int16 v67 = v152;
      uint64_t v68 = __p;
      if (v152 != __p)
      {
        do
          __int16 v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        uint64_t v68 = __p;
      }
      uint64_t v152 = v66;
      operator delete(v68);
    }
    uint64_t v36 = v149;
    if (!v149) {
      goto LABEL_109;
    }
    int v69 = v150;
    uint64_t v38 = v149;
    if (v150 == v149) {
      goto LABEL_108;
    }
    do
    {
      uint64_t v71 = (void *)*--v69;
      uint64_t v70 = v71;
      *int v69 = 0;
      if (v71) {
        operator delete[](v70);
      }
    }
    while (v69 != v36);
    goto LABEL_107;
  }
  return v32;
}