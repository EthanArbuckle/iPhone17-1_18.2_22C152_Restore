BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  BOOL result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  long long v41;
  long long v42;
  long long v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  long long v47;
  long long v48;
  long long v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v33 = *(_OWORD *)a1;
        v32 = *((_OWORD *)a1 + 1);
        v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      v24 = a1 + 4;
      v25 = a1 + 8;
      v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v28 = *(a2 - 4);
      v27 = a2 - 4;
      v29 = bswap64(v28);
      v30 = bswap64(a1[12]);
      if (v29 == v30
        && (v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        v31 = 0;
      }
      else if (v29 < v30)
      {
        v31 = -1;
      }
      else
      {
        v31 = 1;
      }
      if (v31 < 0)
      {
        v36 = *(_OWORD *)v26;
        v35 = *((_OWORD *)a1 + 7);
        v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        v38 = bswap64(*v26);
        v39 = bswap64(*v25);
        if (v38 != v39) {
          goto LABEL_54;
        }
        v38 = bswap64(a1[13]);
        v39 = bswap64(a1[9]);
        if (v38 == v39
          && (v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          v40 = 0;
        }
        else
        {
LABEL_54:
          v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          v42 = *(_OWORD *)v25;
          v41 = *((_OWORD *)a1 + 5);
          v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          v44 = bswap64(*v25);
          v45 = bswap64(*v24);
          if (v44 != v45) {
            goto LABEL_64;
          }
          v44 = bswap64(a1[9]);
          v45 = bswap64(a1[5]);
          if (v44 == v45
            && (v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            v46 = 0;
          }
          else
          {
LABEL_64:
            v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            v48 = *(_OWORD *)v24;
            v47 = *((_OWORD *)a1 + 3);
            v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            v50 = bswap64(a1[4]);
            v51 = bswap64(*a1);
            if (v50 != v51) {
              goto LABEL_73;
            }
            v50 = bswap64(a1[5]);
            v51 = bswap64(a1[1]);
            if (v50 == v51
              && (v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              v52 = 0;
            }
            else
            {
LABEL_73:
              v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              v54 = *(_OWORD *)a1;
              v53 = *((_OWORD *)a1 + 1);
              v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v56 = *(_OWORD *)v11;
        v57 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64) {
            break;
          }
          v20 = bswap64(v56);
          v21 = bswap64(*((void *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((void *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v57), v21 = bswap64(*((void *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((void *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8) {
          return v11 + 4 == a2;
        }
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

void MTLIOAccelDeviceShmemRelease(os_unfair_lock_s *a1)
{
  v1 = *(os_unfair_lock_s **)&a1[2]._os_unfair_lock_opaque;
  if (v1)
  {
    v2 = v1 + 2;
    *(void *)&a1[2]._os_unfair_lock_opaque = 0;
    v5 = a1;
    os_unfair_lock_lock(v1 + 6);
    if (v5[13]._os_unfair_lock_opaque >= v1[12]._os_unfair_lock_opaque)
    {
      v3 = *(os_unfair_lock_s **)&v2->_os_unfair_lock_opaque;
      *(void *)&v5[4]._os_unfair_lock_opaque = *(void *)&v2->_os_unfair_lock_opaque;
      if (v3) {
        v4 = v3 + 6;
      }
      else {
        v4 = v1 + 4;
      }
      *(void *)&v4->_os_unfair_lock_opaque = v5 + 4;
      *(void *)&v2->_os_unfair_lock_opaque = v5;
      *(void *)&v5[6]._os_unfair_lock_opaque = v2;
      ++v1[7]._os_unfair_lock_opaque;
    }
    else
    {
    }
    os_unfair_lock_unlock(v1 + 6);
    a1 = v1;
  }
}

void sub_1827A16B4(_Unwind_Exception *a1)
{
  v2 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1827A1BC8(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x18530C0B0](v1);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2)
{
  MEMORY[0x18530BFA0](v8, a1);
  if (v8[0])
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    std::locale::use_facet(&v9, MEMORY[0x1E4FBA2B0]);
    std::locale::~locale(&v9);
    uint64_t v4 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    if (v4[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v4);
      v5 = std::locale::use_facet(&v9, MEMORY[0x1E4FBA258]);
      std::ios_base::fmtflags v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
      std::locale::~locale(&v9);
      v4[1].__fmtflags_ = v6;
    }
    strlen(*(const char **)(a2 + 8));
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put()) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 1);
    }
  }
  MEMORY[0x18530BFB0](v8);
  return a1;
}

void sub_1827A1D60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x18530BFB0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1827A1D40);
}

void sub_1827A1DBC(_Unwind_Exception *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18530C0B0](a1 + 128);
  return a1;
}

void anonymous namespace'::MessageDecoder::~MessageDecoder(std::locale *this)
{
  uint64_t v2 = this + 27;
  locale = (std::__shared_weak_count *)this[33].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v2);
  uint64_t v4 = (std::__shared_weak_count *)this[25].__locale_;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::locale::~locale(this + 19);
  v5 = (std::__shared_weak_count *)this[17].__locale_;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::locale::~locale(this + 11);
  if (SHIBYTE(this[5].__locale_) < 0) {
    operator delete(this[3].__locale_);
  }
  if (SHIBYTE(this[2].__locale_) < 0) {
    operator delete(this->__locale_);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }

  std::locale::~locale(this);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2, int a3)
{
  v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_1827A2350(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x18530C060]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1827A23BC(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_1827A2590(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A2608(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    std::locale v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    uint64_t v11 = v8 + 1;
    do
    {
      v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  uint64_t v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      std::ios_base::fmtflags v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a3;
  end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    std::locale v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  end = a1->__end_;
  uint64_t v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    v8 = v7;
  }
  else {
    v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    uint64_t v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    std::locale v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      v8 = v9;
    }
    else {
      v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  end = a1->__end_;
  uint64_t v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    v8 = v7;
  }
  else {
    v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    uint64_t v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    std::locale v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      v8 = v9;
    }
    else {
      v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A2C2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1827A2CD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x18530C140);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    std::locale v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      uint64_t v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        std::locale v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int marked_count = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int v13 = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
LABEL_31:
            uint64_t v3 = v12 + 1;
            std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v18.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      BOOL v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      BOOL v16 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v16);
    v3 += 2;
  }
  return v3;
}

void sub_1827A3390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  int v6 = *a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        std::locale v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        size_t v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unsigned int marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v12 != a3)
      {
        size_t v10 = v12;
        if (*v12 == 41)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
LABEL_25:
          --*p_open_count;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      unsigned int v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        unsigned int v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    int v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            unsigned int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              unsigned int v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          unsigned int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            unsigned int v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            unsigned int v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                unsigned int v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    unsigned int v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    unsigned int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void sub_1827A3B1C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A3B84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC4590;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC4590;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1ECAC44D0;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1ECAC44D0;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1ECAC44D0;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x18530C140);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    int v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1827A43E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos) {
    this->__position_start_ = __f;
  }
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  v41 = 0;
  v42 = 0;
  unint64_t v43 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::vector<std::csub_match> __p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v35 = a4;
    int v12 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 10) = a2;
    *((void *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    uint64_t v13 = v42;
    *((void *)v42 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      uint64_t v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      int v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          std::vector<std::csub_match>::value_type v18 = (const char *)*((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v19 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (void *)v42 - 12);
          v42 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          std::vector<std::csub_match>::value_type v22 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            _OWORD *v42 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 10) = v24;
            v42 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          uint64_t v13 = v42;
          ++v14;
          if (v41 != v42) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(void *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_1827A4864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      uint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v4 = __sz >= v3;
  std::vector<std::csub_match>::size_type v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A4BA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A4BFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::vector<std::csub_match>::pointer v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::vector<std::csub_match>::pointer v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1827A4D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (void *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      long long v15 = &v9[__n];
      std::vector<std::csub_match>::size_type v16 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v17 = __x->std::pair<const char *, const char *>;
        *(void *)&v9->matched = *(void *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>((uint64_t)p_end_cap, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    uint64_t v19 = &v18[__n];
    std::vector<std::csub_match>::size_type v20 = 24 * __n;
    std::pair<const char *, const char *> v21 = v18;
    do
    {
      std::pair<const char *, const char *> v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v21 = v22;
      std::pair<const char *, const char *> v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    long long v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v26 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v18[-1].matched = *(void *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (char *)this->__begin_;
    unint64_t v9 = __n + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)p_end_cap, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    long long v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    std::vector<std::csub_match>::size_type v16 = &v14[__n];
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1827A5370(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1827A53E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      long long v8 = v5;
      uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A57D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A599C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  unsigned int v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((v8 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      unsigned int v5 = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > a1->__marked_count_) {
LABEL_16:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      char v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          int v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_64;
          }
          int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          int v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6) {
            goto LABEL_64;
          }
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_64;
          }
          int v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6) {
            goto LABEL_64;
          }
          char v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_64;
          }
          int v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          if ((v14 - 97) >= 6) {
            goto LABEL_64;
          }
          char v15 = -87;
LABEL_35:
          std::string::value_type v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4) {
            std::string::operator=(a4, v16);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_50;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        uint64_t v7 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_50;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          uint64_t v7 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          uint64_t v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_64;
    }
    char v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u) {
      goto LABEL_64;
    }
    std::string::value_type v18 = v17 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v18);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1827A5F60(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A5FC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1ECAC46B0;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_1827A61A0(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = (uint64_t)v1[1];
  if (v4) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC46B0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC46B0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC4740;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC4740;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC45C0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC45C0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC4680;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1ECAC4680;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1827A6CB4(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v8[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          std::pair<const char *, const char *> v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v25[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  std::vector<std::csub_match>::size_type v20 = &v15[(void)v12];
  std::pair<const char *, const char *> v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_1827A7068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x18530C140);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v37 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_58;
  }
  signed __int8 v6 = *current;
  unsigned __int8 v125 = *current;
  signed __int8 v7 = current[1];
  unsigned __int8 v126 = v7;
  if (this->__icase_)
  {
    unsigned __int8 v125 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    unsigned __int8 v126 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124) {
      goto LABEL_8;
    }
LABEL_58:
    BOOL negate = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  size_t v38 = v123;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second) {
        goto LABEL_218;
      }
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
    char v15 = v124;
    int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v113 = v124;
      if (v124 >= 0) {
        size_t v19 = v124;
      }
      else {
        size_t v19 = v123;
      }
      if (v124 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0) {
          size_t size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v14->first.__r_.__value_.__l.__size_;
        }
        if (v23 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = v14;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        }
        if (size >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = size;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= size;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0) {
            size_t v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v30 = v14->second.__r_.__value_.__l.__size_;
          }
          if (v29 >= 0) {
            data = &v14->second;
          }
          else {
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(data, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          int v35 = 0;
          BOOL negate = 0;
          goto LABEL_162;
        }
      }
      BOOL negate = 1;
      int v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      char v15 = v113;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      BOOL negate = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_200;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  uint64_t v90 = v124;
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    uint64_t v92 = 0;
    unint64_t v93 = v91 / 24;
    v95 = __p;
    size_t v94 = v123;
    if (v124 >= 0) {
      size_t v96 = v124;
    }
    else {
      size_t v96 = v123;
    }
    if (v93 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v91 / 24;
    }
    BOOL v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      std::string::size_type v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      int v101 = (char)v100;
      if ((v100 & 0x80u) != 0) {
        std::string::size_type v100 = v99->__r_.__value_.__l.__size_;
      }
      if (v96 == v100)
      {
        if (v101 >= 0) {
          v102 = &v89[v92];
        }
        else {
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        }
        if ((v90 & 0x80) == 0)
        {
          if (v90)
          {
            v103 = &__p;
            uint64_t v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0]) {
                goto LABEL_188;
              }
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            BOOL negate = 1;
            int v35 = 5;
            goto LABEL_192;
          }
          BOOL negate = 1;
          if (v98) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
            goto LABEL_213;
          }
          std::regex_traits<char>::char_class_type mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          std::ctype_base::mask v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              int v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0) {
                goto LABEL_217;
              }
              int v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              BOOL negate = v110;
LABEL_220:
              uint64_t v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          int v110 = 1;
          goto LABEL_219;
        }
        unint64_t v118 = v93;
        uint64_t v121 = v90;
        int v105 = memcmp(v95, v102, v94);
        unint64_t v93 = v118;
        uint64_t v90 = v121;
        if (!v105) {
          break;
        }
      }
LABEL_188:
      BOOL v98 = ++v92 < v93;
      if (v92 == v97) {
        goto LABEL_191;
      }
    }
    int v35 = 5;
    BOOL negate = 1;
    goto LABEL_193;
  }
  BOOL v98 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p);
  if (!v98) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = *a2->__current_;
  unsigned __int8 v125 = v39;
  if (this->__icase_)
  {
    unsigned __int8 v39 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    unsigned __int8 v125 = v39;
  }
  std::vector<char>::pointer v40 = this->__chars_.__begin_;
  unint64_t v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }
LABEL_77:
    BOOL negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  std::regex_traits<char>::char_class_type v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end) {
      goto LABEL_77;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
    }
    else
    {
      char v124 = 1;
      LOWORD(__p) = v39;
    }
    int64_t v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      uint64_t v119 = v37;
      BOOL v116 = negate;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v114 = v124;
      if (v124 >= 0) {
        size_t v53 = v124;
      }
      else {
        size_t v53 = v123;
      }
      if (v124 >= 0) {
        v54 = &__p;
      }
      else {
        v54 = __p;
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0) {
          size_t v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v58 = v49->first.__r_.__value_.__l.__size_;
        }
        if (v57 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = v49;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        }
        if (v58 >= v53) {
          size_t v60 = v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0) {
            size_t v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v64 = v49->second.__r_.__value_.__l.__size_;
          }
          if (v63 >= 0) {
            v65 = &v49->second;
          }
          else {
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          }
          if (v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          BOOL negate = v116;
          goto LABEL_123;
        }
      }
      BOOL negate = 1;
LABEL_123:
      uint64_t v37 = v119;
      if ((v114 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((v124 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_154;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  std::vector<std::string>::pointer v69 = this->__equivalences_.__begin_;
  uint64_t v70 = v124;
  int64_t v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    uint64_t v120 = v37;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    v74 = __p;
    size_t v75 = v123;
    if (v124 >= 0) {
      size_t v76 = v124;
    }
    else {
      size_t v76 = v123;
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      std::string::size_type v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      int v81 = (char)v80;
      if ((v80 & 0x80u) != 0) {
        std::string::size_type v80 = v79->__r_.__value_.__l.__size_;
      }
      if (v76 == v80)
      {
        if (v81 >= 0) {
          v82 = &v69[v72];
        }
        else {
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        }
        if ((v70 & 0x80) != 0)
        {
          BOOL v117 = negate;
          unint64_t v85 = v73;
          uint64_t v115 = v77;
          int v86 = memcmp(v74, v82, v75);
          uint64_t v77 = v115;
          unint64_t v73 = v85;
          BOOL negate = v117;
          if (!v86)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!v70)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            if (!v78) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }
          v83 = &__p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              BOOL negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        uint64_t v37 = v120;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }
  BOOL v78 = 0;
  if (v124 < 0) {
LABEL_152:
  }
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0) {
      goto LABEL_221;
    }
    std::regex_traits<char>::char_class_type v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v125 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    int v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    int v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  signed __int8 v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1827A7D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1827A7F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a4;
      }
      else {
        char v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1827A8104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A8164(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (int64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    unint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_1827A84C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      unint64_t v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unint64_t v13 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        int v12 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_1827A86D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        long long v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
LABEL_25:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        uint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      uint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        unint64_t v13 = v3;
        if (v3[23] < 0) {
          unint64_t v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        char v20 = a2;
        if (a2[23] < 0) {
          char v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)std::vector<char>::pointer v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      size_t v30 = a2;
      if (a2[23] < 0) {
        size_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      size_t v32 = v4;
      if (v4[23] < 0) {
        size_t v32 = *(unsigned char **)v4;
      }
      *size_t v32 = v31;
      int v33 = v3;
      if (v3[23] < 0) {
        int v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(unsigned char **)v3;
      }
      unsigned char *v35 = v34;
    }
    *(_OWORD *)std::vector<char>::pointer v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_1827A8FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        std::vector<char>::pointer v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  size_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A92C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1827A9494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a4;
      }
      else {
        uint64_t v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1827A95BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1827A9630(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1827A9748(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::pair<char, char>>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A99C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_1827A9A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      unint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unint64_t v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  long long v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  unint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      long long v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)p_end_cap, v14);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    std::__split_buffer<std::string>::pointer end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::__split_buffer<std::string>::pointer end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1827A9E50(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1827A9F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827A9F60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::pair<char, char>>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1827AA5D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827AA6F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827AA74C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x18530C140);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x18530C140);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1ECAC4620;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x18530C140);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x18530BEF0](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1827AAACC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  BOOL v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  uint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int marked_count = a1->__marked_count_;
        do
        {
          long long v11 = (char *)v9;
          uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        uint64_t v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        BOOL v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        uint64_t v14 = 2;
        if (!v13) {
          uint64_t v14 = 0;
        }
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      BOOL v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        long long v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          long long v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            unint64_t v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          unint64_t v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x18530C140);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    unint64_t v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (BOOL v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    uint64_t v5 = (locale_low - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = *v4;
  std::basic_regex<char>::value_type v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 0;
    }
    v3 += v10;
    return v3;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

BOOL anonymous namespace'::MessageDecoder::isValidFormatSpecifier(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0) {
    std::basic_regex<char>::value_type v6 = (char *)a2;
  }
  else {
    std::basic_regex<char>::value_type v6 = *(char **)a2;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  BOOL v7 = &v6[v5];
  if (!a3)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v15, 0, sizeof(v15));
    char v11 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v6, v7, (uint64_t)__p, a1 + 216, 0);
LABEL_17:
    char v12 = v11;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v12 & 1) == 0) {
      *(_DWORD *)(a1 + 288) = 1;
    }
    return *(_DWORD *)(a1 + 288) == 0;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v15, 0, sizeof(v15));
  char v8 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v6, v7, (uint64_t)__p, a1 + 88, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = (char *)a2;
    }
    else {
      uint64_t v10 = *(char **)a2;
    }
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v21 = 0;
    char v22 = 0;
    uint64_t v23 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v15, 0, sizeof(v15));
    char v11 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v10, &v10[v9], (uint64_t)__p, a1 + 152, 0);
    goto LABEL_17;
  }
  return *(_DWORD *)(a1 + 288) == 0;
}

void sub_1827AB6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(char *__f, char *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const char *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 88)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a3 + 8) = *(void *)a3;
  return result;
}

void sub_1827AB7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    long long v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        std::vector<std::csub_match>::pointer begin = this->__matches_.__begin_;
        std::vector<std::csub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  std::vector<std::ssub_match>::pointer begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      uint64_t v17 = (void *)(v15 + v12 * 24);
      if (v16 <= v13) {
        char v18 = a4 + 3;
      }
      else {
        char v18 = v17;
      }
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        uint64_t v19 = a4 + 3;
      }
      else {
        uint64_t v19 = (uint64_t *)(*a4 + v12 * 24);
      }
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        uint64_t v20 = a4 + 3;
      }
      else {
        uint64_t v20 = (uint64_t *)(*a4 + v12 * 24);
      }
      char v21 = *((unsigned char *)v20 + 16);
      std::vector<std::ssub_match>::pointer begin = a1->__begin_;
      std::vector<std::ssub_match>::pointer end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  uint64_t v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[4].__end_ = v23;
  }
  LOBYTE(a1[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)int v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::match_results<const char *> __p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    unint64_t v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            int v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  int v44 = (void *)v41[1];
                  ++v41;
                  int v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)int v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v50;
}

void sub_1827AC0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v54 = 0;
  char v55 = 0;
  v56[0] = 0;
  *(_DWORD *)uint64_t v51 = 0;
  memset(&v51[8], 0, 32);
  long long v52 = 0u;
  memset(v53, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::match_results<const char *> __p = 0uLL;
    memset(v49, 0, 21);
    char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    int v42 = a4;
    char v11 = v55;
    *((_DWORD *)v55 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 10) = a2;
    *((void *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v55 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v43 = a3;
    int v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = (const char *)(a3 - a2);
    uint64_t v15 = v55;
    *((void *)v55 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = (const char *)*((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = &v20[-*((void *)v15 - 11)];
          unint64_t v29 = v44;
          if ((v27 & ((uint64_t)v44 >= (uint64_t)v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)uint64_t v51 = *(_OWORD *)v19;
            *(_OWORD *)&v51[16] = v30;
            if (v51 != v19)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v51[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v53, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v15 - 11);
            v53[3] = v31;
            unint64_t v29 = v28;
          }
          char v32 = v55;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v54;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, v32);
            }
            char v55 = (_OWORD *)v33;
            char v12 = 1;
            int v44 = v14;
          }
          else
          {
            int v44 = v29;
            unint64_t v34 = v55 - 6;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
            char v55 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v55 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
          char v55 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *char v55 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 10) = v26;
            char v55 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      uint64_t v15 = v55;
    }
    while (v54 != v55);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + 8) = &v44[(void)a2];
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v52 != *(void *)&v51[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)&v51[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v51[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(void *)&v51[32])
  {
    *(void *)&long long v52 = *(void *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(void *)uint64_t v51 = &v54;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  return v6;
}

void sub_1827AC658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a17);
  std::__state<char>::~__state(&a33);
  a33 = v33 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(void *a1)
{
  unsigned int v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 40) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1828D4A30);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<ContextStack *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<ContextStack *>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<ContextStack *>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<ContextStack *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1827ACC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::match_results<const char *> __p = std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v7, v11);
      unint64_t v43 = (char *)__p;
      int v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      std::__split_buffer<ContextStack *>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::match_results<const char *> __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              int v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              unint64_t v43 = v22;
              int v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::match_results<const char *> __p = v36;
      unint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      int v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        int v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::match_results<const char *> __p = operator new(0xFC0uLL);
        std::__split_buffer<ContextStack *>::push_back(a1, &__p);
        unint64_t v34 = a1[2];
        std::match_results<const char *> __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::match_results<const char *> __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<ContextStack *>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::match_results<const char *> __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<ContextStack *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1827ACFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return std::__split_buffer<ContextStack *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      unint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](a1, v12);
    int64_t v15 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  *BOOL v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    BOOL v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v3 = __sz >= v2;
  std::vector<std::ssub_match>::size_type v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      uint64_t v13 = &v7[__n];
      std::vector<std::ssub_match>::size_type v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>((uint64_t)p_end_cap, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int64_t v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    long long v16 = &v15[__n];
    std::vector<std::ssub_match>::size_type v17 = 24 * __n;
    int64_t v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<std::ssub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v15[-1].matched = *(void *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
    {
      operator delete(end);
    }
  }
}

void anonymous namespace'::MessageDecoder::extract<char>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    std::vector<std::ssub_match>::size_type v2 = (const char *)(a1 + 24);
    BOOL v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      BOOL v3 = *(const char **)v2;
    }
    int v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(char *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    int v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      size_t v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0) {
        std::vector<std::ssub_match>::size_type v2 = *(const char **)v2;
      }
      snprintf(v8.__begin_, v6, v2, *(char *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    if ((unint64_t)(v7 + v4) > 0x2800) {
      *(unsigned char *)(a1 + 84) = 1;
    }
    else {
      std::string::append((std::string *)a1, v8.__begin_);
    }
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1827AD770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    int v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1827AD7E4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::MessageDecoder::extract<short>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    std::vector<std::ssub_match>::size_type v2 = (const char *)(a1 + 24);
    BOOL v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      BOOL v3 = *(const char **)v2;
    }
    int v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(__int16 *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    int v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      size_t v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0) {
        std::vector<std::ssub_match>::size_type v2 = *(const char **)v2;
      }
      snprintf(v8.__begin_, v6, v2, *(__int16 *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    if ((unint64_t)(v7 + v4) > 0x2800) {
      *(unsigned char *)(a1 + 84) = 1;
    }
    else {
      std::string::append((std::string *)a1, v8.__begin_);
    }
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1827AD940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::MessageDecoder::extract<long>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    std::vector<std::ssub_match>::size_type v2 = (const char *)(a1 + 24);
    BOOL v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      BOOL v3 = *(const char **)v2;
    }
    int v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(void *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    int v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      size_t v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0) {
        std::vector<std::ssub_match>::size_type v2 = *(const char **)v2;
      }
      snprintf(v8.__begin_, v6, v2, *(void *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    if ((unint64_t)(v7 + v4) > 0x2800) {
      *(unsigned char *)(a1 + 84) = 1;
    }
    else {
      std::string::append((std::string *)a1, v8.__begin_);
    }
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1827ADA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::MessageDecoder::extract<int>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    std::vector<std::ssub_match>::size_type v2 = (const char *)(a1 + 24);
    BOOL v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      BOOL v3 = *(const char **)v2;
    }
    int v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(unsigned int *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    int v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      size_t v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0) {
        std::vector<std::ssub_match>::size_type v2 = *(const char **)v2;
      }
      snprintf(v8.__begin_, v6, v2, *(unsigned int *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    if ((unint64_t)(v7 + v4) > 0x2800) {
      *(unsigned char *)(a1 + 84) = 1;
    }
    else {
      std::string::append((std::string *)a1, v8.__begin_);
    }
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1827ADBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::MessageDecoder::extract<unsigned long long>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    std::vector<std::ssub_match>::size_type v2 = (const char *)(a1 + 24);
    BOOL v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      BOOL v3 = *(const char **)v2;
    }
    int v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(void *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    int v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      size_t v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0) {
        std::vector<std::ssub_match>::size_type v2 = *(const char **)v2;
      }
      snprintf(v8.__begin_, v6, v2, *(void *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    if ((unint64_t)(v7 + v4) > 0x2800) {
      *(unsigned char *)(a1 + 84) = 1;
    }
    else {
      std::string::append((std::string *)a1, v8.__begin_);
    }
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1827ADD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::MessageDecoder::extract<half>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v16, 0x14uLL);
    std::vector<std::ssub_match>::size_type v2 = (const char *)(a1 + 24);
    BOOL v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      BOOL v3 = *(const char **)v2;
    }
    _H0 = *(_WORD *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76));
    __asm { FCVT            D0, H0 }
    int v10 = snprintf(v16.__begin_, v16.__end_cap_.__value_ - v16.__begin_, v3, _D0);
    int v11 = v10 + 1;
    if ((char *)(v16.__end_cap_.__value_ - v16.__begin_) < (char *)(v10 + 1))
    {
      size_t v12 = v11;
      std::vector<unsigned char>::reserve(&v16, v11);
      if (*(char *)(a1 + 47) < 0) {
        std::vector<std::ssub_match>::size_type v2 = *(const char **)v2;
      }
      _H0 = *(_WORD *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76));
      __asm { FCVT            D0, H0 }
      snprintf(v16.__begin_, v12, v2, _D0);
    }
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v15 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
    }
    if ((unint64_t)(v15 + v10) > 0x2800) {
      *(unsigned char *)(a1 + 84) = 1;
    }
    else {
      std::string::append((std::string *)a1, v16.__begin_);
    }
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v16.__begin_)
    {
      v16.__end_ = v16.__begin_;
      operator delete(v16.__begin_);
    }
  }
}

void sub_1827ADEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::MessageDecoder::extract<float>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    std::vector<std::ssub_match>::size_type v2 = (const char *)(a1 + 24);
    BOOL v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      BOOL v3 = *(const char **)v2;
    }
    int v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(float *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    int v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      size_t v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0) {
        std::vector<std::ssub_match>::size_type v2 = *(const char **)v2;
      }
      snprintf(v8.__begin_, v6, v2, *(float *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    if ((unint64_t)(v7 + v4) > 0x2800) {
      *(unsigned char *)(a1 + 84) = 1;
    }
    else {
      std::string::append((std::string *)a1, v8.__begin_);
    }
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1827AE01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::MessageDecoder::extract<double>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 288) = 2;
  }
  else
  {
    std::vector<char>::vector(&v8, 0x14uLL);
    std::vector<std::ssub_match>::size_type v2 = (const char *)(a1 + 24);
    BOOL v3 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      BOOL v3 = *(const char **)v2;
    }
    int v4 = snprintf(v8.__begin_, v8.__end_cap_.__value_ - v8.__begin_, v3, *(void *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    int v5 = v4 + 1;
    if ((char *)(v8.__end_cap_.__value_ - v8.__begin_) < (char *)(v4 + 1))
    {
      size_t v6 = v5;
      std::vector<unsigned char>::reserve(&v8, v5);
      if (*(char *)(a1 + 47) < 0) {
        std::vector<std::ssub_match>::size_type v2 = *(const char **)v2;
      }
      snprintf(v8.__begin_, v6, v2, *(void *)(*(void *)(a1 + 64) + *(unsigned int *)(a1 + 76)));
    }
    if (*(char *)(a1 + 23) < 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    }
    if ((unint64_t)(v7 + v4) > 0x2800) {
      *(unsigned char *)(a1 + 84) = 1;
    }
    else {
      std::string::append((std::string *)a1, v8.__begin_);
    }
    *(_DWORD *)(a1 + 76) += *(_DWORD *)(a1 + 48);
    if (v8.__begin_)
    {
      v8.__end_ = v8.__begin_;
      operator delete(v8.__begin_);
    }
  }
}

void sub_1827AE178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t MTLRangeAllocatorGetFragmentCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t MTLRangeAllocatorGetFragmentCapacity(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t MTLRangeAllocatorSetFragmentCapacityIncrement(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t MTLRangeAllocatorGetFreeCount(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (void *)(*(void *)a1 + 8);
  do
  {
    uint64_t result = result + *v4 - *(v4 - 1) + 1;
    v4 += 2;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t MTLRangeAllocatorGetFreeSize(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (void *)(*(void *)a1 + 8);
  do
  {
    uint64_t result = result + *v4 - *(v4 - 1) + 1;
    v4 += 2;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t (*MTLGetUnpackFloatFunction(uint64_t a1))(float16x4_t *this, float32x4_t *a2, float *a3)
{
  uint64_t result = 0;
  if (a1 <= 104)
  {
    if ((unint64_t)a1 <= 0x68)
    {
      switch(a1)
      {
        case '7':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_9::__invoke;
        case '8':
        case '9':
        case ':':
        case ';':
        case '=':
        case '?':
        case '@':
        case 'C':
        case 'D':
        case 'E':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'R':
        case 'S':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case '[':
          return result;
        case '<':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_10::__invoke;
        case '>':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_11::__invoke;
        case 'A':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_12::__invoke;
        case 'B':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_46::__invoke;
        case 'F':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_13::__invoke;
        case 'G':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_14::__invoke;
        case 'H':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_15::__invoke;
        case 'P':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_16::__invoke;
        case 'Q':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_17::__invoke;
        case 'T':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_43::__invoke;
        case 'U':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_44::__invoke;
        case 'Z':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_18::__invoke;
        case '\\':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_19::__invoke;
        case ']':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_20::__invoke;
        case '^':
          return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_21::__invoke;
        default:
          JUMPOUT(0);
      }
    }
    switch(a1)
    {
      case 10:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_1::__invoke;
      case 11:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_33::__invoke;
      case 12:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_2::__invoke;
      case 20:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_3::__invoke;
      case 22:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_4::__invoke;
      case 25:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_5::__invoke;
      case 26:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_45::__invoke;
      case 30:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_6::__invoke;
      case 31:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_34::__invoke;
      case 32:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_7::__invoke;
      case 40:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_35::__invoke;
      case 41:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_36::__invoke;
      case 42:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_37::__invoke;
      case 43:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_8::__invoke;
      case 44:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_42::__invoke;
      default:
        return result;
    }
  }
  else
  {
    if (a1 <= 301)
    {
      if (a1 <= 124)
      {
        switch(a1)
        {
          case 'i':
            return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_22::__invoke;
          case 'n':
            return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_23::__invoke;
          case 'p':
            return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_24::__invoke;
          case 's':
            return MTLGetUnpackFloatFunction::$_25::__invoke;
          case 't':
            return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_47::__invoke;
          default:
            return result;
        }
        return result;
      }
      if (a1 == 125) {
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_26::__invoke;
      }
      if (a1 == 300) {
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_27::__invoke;
      }
      if (a1 != 301) {
        return result;
      }
      return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_28::__invoke;
    }
    if (a1 <= 551)
    {
      if (a1 == 302) {
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_29::__invoke;
      }
      if (a1 == 315) {
        return MTLGetUnpackFloatFunction::$_30::__invoke;
      }
      if (a1 != 325) {
        return result;
      }
      return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_31::__invoke;
    }
    switch(a1)
    {
      case 552:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_40::__invoke;
      case 553:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_41::__invoke;
      case 554:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_38::__invoke;
      case 555:
        return (uint64_t (*)(float16x4_t *, float32x4_t *, float *))MTLGetUnpackFloatFunction::$_39::__invoke;
      case 556:
        return MTLGetUnpackFloatFunction::$_32::__invoke;
      default:
        return result;
    }
  }
  return result;
}

uint64_t (*MTLGetUnpackUintFunction(uint64_t a1))(uint16x4_t *this, uint32x4_t *a2, unsigned int *a3)
{
  uint64_t result = 0;
  if (a1 <= 90)
  {
    if (a1 > 52)
    {
      switch(a1)
      {
        case '5':
          return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_8::__invoke;
        case '?':
          return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_5::__invoke;
        case 'I':
          return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_3::__invoke;
        default:
          return result;
      }
    }
    else
    {
      switch(a1)
      {
        case 13:
          return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_0::__invoke;
        case 23:
          return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_4::__invoke;
        case 33:
          return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_1::__invoke;
        default:
          return result;
      }
    }
  }
  else if (a1 <= 122)
  {
    switch(a1)
    {
      case '[':
        return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_12::__invoke;
      case 'g':
        return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_9::__invoke;
      case 'q':
        return MTLGetUnpackUintFunction::$_7::__invoke;
      default:
        return result;
    }
  }
  else if (a1 > 312)
  {
    if (a1 == 313)
    {
      return MTLGetUnpackUintFunction::$_6::__invoke;
    }
    else
    {
      if (a1 != 323) {
        return result;
      }
      return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_10::__invoke;
    }
  }
  else if (a1 == 123)
  {
    return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_11::__invoke;
  }
  else
  {
    if (a1 != 303) {
      return result;
    }
    return (uint64_t (*)(uint16x4_t *, uint32x4_t *, unsigned int *))MTLGetUnpackUintFunction::$_2::__invoke;
  }
}

uint64_t (*MTLGetUnpackSintFunction(uint64_t a1))(int16x4_t *this, int32x4_t *a2, int *a3)
{
  uint64_t result = 0;
  if (a1 > 103)
  {
    if (a1 > 303)
    {
      switch(a1)
      {
        case 304:
          return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_2::__invoke;
        case 314:
          return MTLGetUnpackSintFunction::$_6::__invoke;
        case 324:
          return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_10::__invoke;
        default:
          return result;
      }
    }
    else
    {
      switch(a1)
      {
        case 'h':
          return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_9::__invoke;
        case 'r':
          return MTLGetUnpackSintFunction::$_7::__invoke;
        case '|':
          return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_11::__invoke;
        default:
          return result;
      }
    }
  }
  else if (a1 > 53)
  {
    switch(a1)
    {
      case '6':
        return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_8::__invoke;
      case '@':
        return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_5::__invoke;
      case 'J':
        return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_3::__invoke;
      default:
        return result;
    }
  }
  else
  {
    switch(a1)
    {
      case 14:
        return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_0::__invoke;
      case 24:
        return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_4::__invoke;
      case 34:
        return (uint64_t (*)(int16x4_t *, int32x4_t *, int *))MTLGetUnpackSintFunction::$_1::__invoke;
      default:
        return result;
    }
  }
}

uint64_t (*MTLUnpackColor(uint64_t a1, uint64_t a2, float64x2_t *a3))(int16x4_t *this, int32x4_t *a2, int *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  size_t v6 = MTLGetUnpackFloatFunction(a1);
  if (v6)
  {
    uint64_t result = (uint64_t (*)(int16x4_t *, int32x4_t *, int *))((uint64_t (*)(uint64_t, float32x2_t *))v6)(a2, &v13);
    float64x2_t v8 = vcvtq_f64_f32(v13);
    float64x2_t v9 = vcvtq_f64_f32(v14);
  }
  else
  {
    int v10 = MTLGetUnpackUintFunction(a1);
    if (v10)
    {
      uint64_t result = (uint64_t (*)(int16x4_t *, int32x4_t *, int *))((uint64_t (*)(uint64_t, float32x2_t *))v10)(a2, &v13);
      v11.i64[0] = v13.u32[0];
      v11.i64[1] = v13.u32[1];
      float64x2_t v8 = vcvtq_f64_u64(v11);
      v11.i64[0] = v14.u32[0];
      v11.i64[1] = v14.u32[1];
      float64x2_t v9 = vcvtq_f64_u64(v11);
    }
    else
    {
      uint64_t result = MTLGetUnpackSintFunction(a1);
      if (!result) {
        return result;
      }
      uint64_t result = (uint64_t (*)(int16x4_t *, int32x4_t *, int *))((uint64_t (*)(uint64_t, float32x2_t *))result)(a2, &v13);
      v12.i64[0] = v13.i32[0];
      v12.i64[1] = v13.i32[1];
      float64x2_t v8 = vcvtq_f64_s64(v12);
      v12.i64[0] = v14.i32[0];
      v12.i64[1] = v14.i32[1];
      float64x2_t v9 = vcvtq_f64_s64(v12);
    }
  }
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t MTLGetPackFloatFunction::$_0::__invoke(MTLGetPackFloatFunction::$_0 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *((_DWORD *)this + 3);
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  *(unsigned char *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, _Q1), (int8x16_t)xmmword_1828D4EF0, (int8x16_t)xmmword_1828D4EE0), v9))).u8[0];
  return 1;
}

uint64_t MTLGetPackFloatFunction::$_1::__invoke(MTLGetPackFloatFunction::$_1 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  *(unsigned char *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, _Q1), (int8x16_t)xmmword_1828D4EF0, (int8x16_t)xmmword_1828D4EE0), v9))).u8[0];
  return 1;
}

uint64_t MTLGetPackFloatFunction::$_2::__invoke(MTLGetPackFloatFunction::$_2 *this, float *a2, void *a3, int8x16_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v9 = vmaxnmq_f32((float32x4_t)vandq_s8(a4, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a4), (int8x16_t)vcgezq_f32((float32x4_t)a4))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  *(unsigned char *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v9, _Q1), (float32x4_t)xmmword_1828D4F00))).u8[0];
  return 1;
}

uint64_t MTLGetPackFloatFunction::$_3::__invoke(MTLGetPackFloatFunction::$_3 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  *(_WORD *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4)), (float32x4_t)xmmword_1828D4F10))).u16[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_4::__invoke(MTLGetPackFloatFunction::$_4 *this, float *a2, void *a3, int8x16_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v9 = vmaxnmq_f32((float32x4_t)vandq_s8(a4, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a4), (int8x16_t)vcgezq_f32((float32x4_t)a4))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  *(_WORD *)a2 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v9, _Q1), (float32x4_t)xmmword_1828D4F20))).u16[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_5::__invoke(MTLGetPackFloatFunction::$_5 *this, float *a2, void *a3, float32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(_WORD *)a2 = vmovl_u16((uint16x4_t)vcvt_f16_f32(a4)).u16[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_6::__invoke(MTLGetPackFloatFunction::$_6 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i64[0] = *(void *)this;
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  v9.i64[0] = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, _Q1), (int8x16_t)xmmword_1828D4F40, (int8x16_t)xmmword_1828D4F30), v9))).u64[0];
  *((unsigned char *)a2 + 1) = v9.i8[4];
  *(unsigned char *)a2 = v9.i8[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_7::__invoke(MTLGetPackFloatFunction::$_7 *this, float *a2, void *a3, int8x16_t a4)
{
  a4.i64[0] = *(void *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v9 = vmaxnmq_f32((float32x4_t)vandq_s8(a4, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a4), (int8x16_t)vcgezq_f32((float32x4_t)a4))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  v9.i64[0] = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v9, _Q1), (float32x4_t)xmmword_1828D4F50))).u64[0];
  *((unsigned char *)a2 + 1) = v9.i8[4];
  *(unsigned char *)a2 = v9.i8[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_8::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  int32x4_t v10 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1828D4F60)));
  __int16 v11 = v10.i16[0];
  __int16 v12 = v10.i16[2];
  _Q1.i32[0] = v10.u16[4];
  _Q1.i32[1] = v10.u16[6];
  *(uint32x2_t *)v10.i8 = vshl_u32(*(uint32x2_t *)_Q1.i8, (uint32x2_t)0xF0000000ALL);
  *(_WORD *)a2 = v11 | (32 * v12) | v10.i16[0] | v10.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_9::__invoke(MTLGetPackFloatFunction::$_9 *this, float *a2, void *a3)
{
  *a2 = *(float *)this;
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_10::__invoke(MTLGetPackFloatFunction::$_10 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i64[0] = *(void *)this;
  __asm { FMOV            V1.4S, #1.0 }
  unint64_t v9 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4)), (float32x4_t)xmmword_1828D4F70))).u64[0];
  *((_WORD *)a2 + 1) = WORD2(v9);
  *(_WORD *)a2 = v9;
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_11::__invoke(MTLGetPackFloatFunction::$_11 *this, float *a2, void *a3, int8x16_t a4)
{
  a4.i64[0] = *(void *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v9 = vmaxnmq_f32((float32x4_t)vandq_s8(a4, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)a4), (int8x16_t)vcgezq_f32((float32x4_t)a4))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  v9.i64[0] = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v9, _Q1), (float32x4_t)xmmword_1828D4F80))).u64[0];
  *((_WORD *)a2 + 1) = v9.i16[2];
  *(_WORD *)a2 = v9.i16[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_12::__invoke(MTLGetPackFloatFunction::$_12 *this, float *a2, void *a3, float32x4_t a4)
{
  a4.i64[0] = *(void *)this;
  unint64_t v4 = vmovl_u16((uint16x4_t)vcvt_f16_f32(a4)).u64[0];
  *((_WORD *)a2 + 1) = WORD2(v4);
  *(_WORD *)a2 = v4;
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_13::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v8 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  int16x8_t v9 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v8, _Q1), (int8x16_t)vdupq_n_s32(0x437EFFFFu), (int8x16_t)vdupq_n_s32(0x437F0000u)), v8)));
  *(int16x4_t *)v9.i8 = vmovn_s32((int32x4_t)v9);
  *(_DWORD *)a2 = vmovn_s16(v9).u32[0];
  return 4;
}

double GammaConstants<8u,false>::Pack(float32x4_t a1, int8x16_t a2)
{
  float32x4_t v3 = vmulq_f32(a1, a1);
  float32x4_t v4 = vrsqrteq_f32(a1);
  float32x4_t v5 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBAA9D75E), (float32x4_t)vdupq_n_s32(0x3F92E71Fu), a1), (float32x4_t)vdupq_n_s32(0xBEAEE5DE), v3), (float32x4_t)vdupq_n_s32(0x3EA5D123u), vmulq_f32(v3, a1)), (float32x4_t)vdupq_n_s32(0xBE045E0B), vmulq_f32(v3, v3));
  int32x4_t v6 = vcvtq_s32_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBE5CF100), vmulq_f32(vmulq_f32(v4, vrsqrtsq_f32(a1, vmulq_f32(v4, v4))), (float32x4_t)vdupq_n_s32(0x437F0002u)), v5));
  int32x4_t v7 = vdupq_n_s32(0x180u);
  int8x16_t v8 = vbicq_s8((int8x16_t)vaddq_s32(vaddq_s32(v6, v6), v7), a2);
  v4.i64[0] = vextq_s8(v8, v8, 4uLL).u64[0];
  int16x8_t v9 = (const float *)((char *)&Gamma::kGamma + 4 * v8.u32[0]);
  v7.i64[0] = *(_OWORD *)vld2_f32(v9).val;
  int32x4_t v10 = (const float *)((char *)&Gamma::kGamma + 4 * v4.u32[0]);
  v5.i64[0] = *(_OWORD *)vld2_f32(v10).val;
  __int16 v11 = (const float *)((char *)&Gamma::kGamma + 4 * v4.u32[1]);
  v2.i64[0] = *(_OWORD *)vld2_f32(v11).val;
  int32x4_t v12 = vzip1q_s32(v7, v2);
  float32x4_t v13 = (float32x4_t)vzip1q_s32(v12, (int32x4_t)v5);
  v13.i32[3] = 0;
  float32x4_t v14 = (float32x4_t)vzip2q_s32(v12, vdupq_lane_s32(*(int32x2_t *)v5.f32, 1));
  v14.i32[3] = 0;
  float32x4_t v15 = vabdq_f32(v13, a1);
  float32x4_t v16 = vabdq_f32(v14, a1);
  *(void *)&double result = vsubq_s32(v6, vceqq_f32(vminnmq_f32(v15, v16), v16)).u64[0];
  return result;
}

uint64_t MTLGetPackFloatFunction::$_15::__invoke(int8x16_t *this, float *a2, void *a3)
{
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v8 = vmaxnmq_f32((float32x4_t)vandq_s8(*this, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)this), (int8x16_t)vcgezq_f32(*(float32x4_t *)this))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  int16x8_t v10 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v8, _Q1), (float32x4_t)vdupq_n_s32(0x42FE0000u))));
  *(int16x4_t *)v10.i8 = vmovn_s32((int32x4_t)v10);
  *(_DWORD *)a2 = vmovn_s16(v10).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_17::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v4 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v5 = (uint32x4_t)vextq_s8(v4, v4, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v11 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v5, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v5));
  int8x16_t v12 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1828D4F90, v11);
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  int32x4_t v14 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v11, v13), (int8x16_t)xmmword_1828D4FB0, (int8x16_t)xmmword_1828D4FA0), v11)));
  if ((vminvq_u32((uint32x4_t)v12) & 0x80000000) == 0)
  {
    int8x16_t v17 = v12;
    int8x16_t v18 = (int8x16_t)v14;
    *(double *)v15.i64 = GammaConstants<8u,false>::Pack(v11, v12);
    float32x4_t v11 = (float32x4_t)vbicq_s8(v15, v17);
    int32x4_t v14 = (int32x4_t)vorrq_s8((int8x16_t)v11, vandq_s8(v18, v17));
  }
  *(int16x4_t *)v11.f32 = vmovn_s32(v14);
  *(_DWORD *)a2 = vmovn_s16((int16x8_t)v11).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_18::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  int8x16_t v8 = (int8x16_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this)), (float32x4_t)xmmword_1828D4FC0)));
  __int32 v9 = v8.i32[1];
  __int32 v10 = v8.i32[0];
  *(uint32x2_t *)v8.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (uint32x2_t)0x1E00000014);
  *(_DWORD *)a2 = v10 | (v9 << 10) | v8.i32[0] | v8.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_19::__invoke(int8x16_t *this, float *a2, void *a3)
{
  int32x4_t v3 = vdupq_n_s32(0x7F800000u);
  v4.i64[0] = 0x7F0000007FLL;
  v4.i64[1] = 0x7F0000007FLL;
  int32x4_t v5 = (int32x4_t)vandq_s8(*this, v4);
  int8x16_t v6 = vbicq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8(*this, (int8x16_t)v3), v3), (int8x16_t)vceqzq_s32(v5));
  v7.i64[0] = 0xC8000000C8000000;
  v7.i64[1] = 0xC8000000C8000000;
  v8.i64[0] = __PAIR64__(HIDWORD(this->i64[0]), *this) & 0x7FFFFFFF7FFFFFFFLL;
  v8.i32[2] = this->i64[1] & 0x7FFFFFFF;
  v8.i32[3] = HIDWORD(this->i64[0]) & 0x7FFFFFFF;
  int8x16_t v9 = (int8x16_t)vceqq_s32(v8, v3);
  v8.i64[0] = 0x7100000071;
  v8.i64[1] = 0x7100000071;
  int32x4_t v10 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x38800000u), *(uint32x4_t *)this), (int8x16_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&v5 | __PAIR128__(0x80000000800000, 0x80000000800000)), (uint32x4_t)vsubq_s32((int32x4_t)vshrq_n_u32(*(uint32x4_t *)this, 0x17uLL), v8)), (int8x16_t)vaddq_s32(*(int32x4_t *)this, v7));
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  int8x16_t v11 = vorrq_s8(vbicq_s8(vbslq_s8(v9, (int8x16_t)xmmword_1828D5010, vbslq_s8((int8x16_t)vcgtq_u32(*(uint32x4_t *)this, (uint32x4_t)xmmword_1828D4FD0), (int8x16_t)xmmword_1828D5000, (int8x16_t)vshlq_u32((uint32x4_t)vaddq_s32(vaddq_s32(v10, (int32x4_t)xmmword_1828D4FF0), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)xmmword_1828D4FE0), (int8x16_t)v7)), (uint32x4_t)xmmword_1828D4FE0))), vorrq_s8(v6, (int8x16_t)vcltzq_s32(*(int32x4_t *)this))), vandq_s8(v6, (int8x16_t)xmmword_1828D5020));
  *(uint32x2_t *)v10.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 4uLL), (uint32x2_t)0x160000000BLL);
  *(_DWORD *)a2 = v10.i32[0] | v11.i32[0] | v10.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_20::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  uint32x4_t v3 = *this;
  v3.i32[3] = this->i64[1];
  float32x4_t v4 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v3, (uint32x4_t)vdupq_n_s32(0x477F8000u)), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v3));
  unsigned int v5 = (vmaxvq_u32((uint32x4_t)v4) + 0x4000) >> 23;
  if (v5 <= 0x6F) {
    unsigned int v5 = 111;
  }
  int32x4_t v6 = vcvtq_s32_f32(vmulq_f32((float32x4_t)vdupq_n_s32(-2088763392 - (v5 << 23)), v4));
  v7.i64[0] = 0x100000001;
  v7.i64[1] = 0x100000001;
  int8x16_t v8 = (int8x16_t)vsraq_n_s32((int32x4_t)vandq_s8((int8x16_t)v6, v7), v6, 1uLL);
  *(uint32x2_t *)v6.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 4uLL), (uint32x2_t)0x1200000009);
  *(_DWORD *)a2 = v8.i32[0] | ((v5 << 27) - 2013265920) | v6.i32[0] | v6.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_21::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  int8x16_t v10 = (int8x16_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1828D4FC0)));
  __int32 v11 = v10.i32[1];
  __int32 v12 = v10.i32[0];
  *(uint32x2_t *)v10.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), (uint32x2_t)0x1E00000014);
  *(_DWORD *)a2 = v12 | (v11 << 10) | v10.i32[0] | v10.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_22::__invoke(MTLGetPackFloatFunction::$_22 *this, float *a2, void *a3)
{
  *(void *)a2 = *(void *)this;
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_23::__invoke(uint32x4_t *this, int16x4_t *a2, void *a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  *a2 = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this)), (float32x4_t)vdupq_n_s32(0x477FFF00u)))));
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_24::__invoke(int8x16_t *this, int16x4_t *a2, void *a3)
{
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v8 = vmaxnmq_f32((float32x4_t)vandq_s8(*this, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)this), (int8x16_t)vcgezq_f32(*(float32x4_t *)this))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  *a2 = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v8, _Q1), (float32x4_t)vdupq_n_s32(0x46FFFE00u)))));
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_25::__invoke(float32x4_t *this, float16x4_t *a2, void *a3)
{
  *a2 = vcvt_f16_f32(*this);
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_26::__invoke(MTLGetPackFloatFunction::$_26 *this, float *a2, void *a3)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetPackFloatFunction::$_27::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v8 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  int16x8_t v9 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v8, _Q1), (int8x16_t)xmmword_1828D5040, (int8x16_t)xmmword_1828D5030), v8)));
  *(int16x4_t *)v9.i8 = vmovn_s32((int32x4_t)v9);
  *(_DWORD *)a2 = vmovn_s16(v9).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_28::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this));
  int8x16_t v10 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1828D4F90, v9);
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  int32x4_t v12 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, v11), (int8x16_t)xmmword_1828D5060, (int8x16_t)xmmword_1828D5050), v9)));
  if ((vminvq_u32((uint32x4_t)v10) & 0x80000000) == 0)
  {
    int8x16_t v15 = v10;
    int8x16_t v16 = (int8x16_t)v12;
    *(double *)v13.i64 = GammaConstants<8u,false>::Pack(v9, v10);
    float32x4_t v9 = (float32x4_t)vbicq_s8(v13, v15);
    int32x4_t v12 = (int32x4_t)vorrq_s8((int8x16_t)v9, vandq_s8(v16, v15));
  }
  *(int16x4_t *)v9.f32 = vmovn_s32(v12);
  *(_DWORD *)a2 = vmovn_s16((int16x8_t)v9).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_29::__invoke(int8x16_t *this, float *a2, void *a3)
{
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v8 = vmaxnmq_f32((float32x4_t)vandq_s8(*this, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)this), (int8x16_t)vcgezq_f32(*(float32x4_t *)this))), _Q1);
  __asm { FMOV            V1.4S, #1.0 }
  int16x8_t v10 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(v8, _Q1), (float32x4_t)xmmword_1828D5070)));
  *(int16x4_t *)v10.i8 = vmovn_s32((int32x4_t)v10);
  *(_DWORD *)a2 = vmovn_s16(v10).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_30::__invoke(float32x4_t *this, float16x4_t *a2, void *a3)
{
  *a2 = vcvt_f16_f32(*this);
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_31::__invoke(MTLGetPackFloatFunction::$_31 *this, float *a2, void *a3)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetPackFloatFunction::$_32::__invoke(int8x16_t *this, float16x4_t *a2, void *a3)
{
  *a2 = vcvt_f16_f32(vminnmq_f32(vmaxnmq_f32((float32x4_t)vandq_s8(*this, vorrq_s8((int8x16_t)vcltzq_f32(*(float32x4_t *)this), (int8x16_t)vcgezq_f32(*(float32x4_t *)this))), (float32x4_t)xmmword_1828D5080), (float32x4_t)xmmword_1828D5090));
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_33::__invoke(MTLGetPackFloatFunction::$_33 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  int8x16_t v11 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1828D50A0, v10);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  int32x4_t v13 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, v12), (int8x16_t)xmmword_1828D50C0, (int8x16_t)xmmword_1828D50B0), v10)));
  if ((vminvq_u32((uint32x4_t)v11) & 0x80000000) == 0)
  {
    int8x16_t v16 = v11;
    int8x16_t v17 = (int8x16_t)v13;
    *(double *)v14.i64 = GammaConstants<8u,false>::Pack(v10, v11);
    v13.i8[0] = vorrq_s8(vbicq_s8(v14, v16), vandq_s8(v17, v16)).u8[0];
  }
  *(unsigned char *)a2 = v13.i8[0];
  return 1;
}

uint64_t MTLGetPackFloatFunction::$_34::__invoke(MTLGetPackFloatFunction::$_34 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i64[0] = *(void *)this;
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(a4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), a4));
  int8x16_t v11 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1828D50D0, v10);
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  int32x4_t v13 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, v12), (int8x16_t)xmmword_1828D50F0, (int8x16_t)xmmword_1828D50E0), v10)));
  if ((vminvq_u32((uint32x4_t)v11) & 0x80000000) == 0)
  {
    int8x16_t v16 = v11;
    int8x16_t v17 = (int8x16_t)v13;
    *(double *)v14.i64 = GammaConstants<8u,false>::Pack(v10, v11);
    int32x4_t v13 = (int32x4_t)vorrq_s8(vbicq_s8(v14, v16), vandq_s8(v17, v16));
  }
  *((unsigned char *)a2 + 1) = v13.i8[4];
  *(unsigned char *)a2 = v13.i8[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_35::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  int32x4_t v10 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1828D5100)));
  __int16 v11 = v10.i16[0];
  _Q1.i32[0] = v10.u16[2];
  _Q1.i32[1] = v10.u16[4];
  *(uint32x2_t *)v10.i8 = vshl_u32(*(uint32x2_t *)_Q1.i8, (uint32x2_t)0xB00000005);
  *(_WORD *)a2 = v10.i16[0] | v11 | v10.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_36::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v4 = (uint32x4_t)vextq_s8(v3, v3, 8uLL);
  __asm { FMOV            V1.4S, #1.0 }
  int32x4_t v10 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1828D5110)));
  __int16 v11 = v10.i16[0];
  __int16 v12 = v10.i16[2];
  _Q1.i32[0] = v10.u16[4];
  _Q1.i32[1] = v10.u16[6];
  *(uint32x2_t *)v10.i8 = vshl_u32(*(uint32x2_t *)_Q1.i8, (uint32x2_t)0xB00000006);
  *(_WORD *)a2 = v11 | (2 * v12) | v10.i16[0] | v10.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_37::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v4 = (uint32x4_t)vextq_s8(v3, v3, 8uLL);
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V3.4S, #15.0 }
  int32x4_t v12 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, _Q1), (int8x16_t)vdupq_n_s32(0x416FFFFFu), _Q3), v10)));
  __int16 v13 = v12.i16[0];
  __int16 v14 = v12.i16[2];
  _Q1.i32[0] = v12.u16[4];
  _Q1.i32[1] = v12.u16[6];
  *(uint32x2_t *)v12.i8 = vshl_u32(*(uint32x2_t *)_Q1.f32, (uint32x2_t)0xC00000008);
  *(_WORD *)a2 = v13 | (16 * v14) | v12.i16[0] | v12.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_38::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v4 = (uint32x4_t)vaddq_f32((float32x4_t)vextq_s8(v3, v3, 0xCuLL), (float32x4_t)vdupq_n_s32(0x3F40C0C1u));
  int8x16_t v5 = (int8x16_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)vdupq_n_s32(0x40006060u)), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1828D5120), (float32x4_t)vdupq_n_s32(0x43FF0000u))));
  uint32x2_t v6 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 4uLL), (uint32x2_t)0x140000000ALL);
  *(_DWORD *)a2 = v6.i32[0] | v5.i32[0] | v6.i32[1];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_39::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v4 = (int8x16_t)vrev64q_s32(*this);
  float32x4_t v5 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
  float32x4_t v6 = vminnmq_f32(vmaxnmq_f32((float32x4_t)vandq_s8((int8x16_t)v5, vorrq_s8((int8x16_t)vcltzq_f32(v5), (int8x16_t)vcgezq_f32(v5))), (float32x4_t)xmmword_1828D5130), (float32x4_t)xmmword_1828D5140);
  float32x4_t v7 = vabsq_f32(v6);
  int8x16_t v8 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1828D4F90, v7);
  int8x16_t v9 = (int8x16_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vaddq_f32(v6, (float32x4_t)xmmword_1828D5150), (float32x4_t)xmmword_1828D5160)));
  if ((vminvq_u32((uint32x4_t)v8) & 0x80000000) == 0)
  {
    int8x16_t v15 = v8;
    int8x16_t v16 = v9;
    int32x4_t v14 = (int32x4_t)v6;
    *(double *)v10.i64 = GammaConstants<10u,false>::Pack(v7, v8);
    v11.i64[0] = 0x30000000300;
    v11.i64[1] = 0x30000000300;
    int8x16_t v9 = vorrq_s8(vbicq_s8(vbslq_s8((int8x16_t)vcltzq_s32(v14), (int8x16_t)vsubq_s32(v11, v10), (int8x16_t)v10), v15), vandq_s8(v15, v16));
  }
  uint32x2_t v12 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 4uLL), (uint32x2_t)0x140000000ALL);
  *(_DWORD *)a2 = v12.i32[0] | v9.i32[0] | v12.i32[1];
  return 4;
}

double GammaConstants<10u,false>::Pack(float32x4_t a1, int8x16_t a2)
{
  float32x4_t v2 = vmulq_f32(a1, a1);
  float32x4_t v3 = vrsqrteq_f32(a1);
  float32x4_t v4 = vmulq_f32(v3, vrsqrtsq_f32(a1, vmulq_f32(v3, v3)));
  int32x4_t v5 = vcvtq_s32_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x43BFAB34u), vmulq_f32(vmulq_f32(v4, vrsqrtsq_f32(a1, vmulq_f32(v4, v4))), (float32x4_t)vdupq_n_s32(0x43FF0004u)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBA9E7BAC), (float32x4_t)vdupq_n_s32(0x3F91AA0Du), a1), (float32x4_t)vdupq_n_s32(0xBE870C2B), v2), (float32x4_t)vdupq_n_s32(0x3E2D0438u), vmulq_f32(v2, a1)), (float32x4_t)vdupq_n_s32(0xBD30A201), vmulq_f32(v2, v2))));
  int8x16_t v6 = vbicq_s8((int8x16_t)v5, a2);
  v4.i64[0] = vextq_s8(v6, v6, 4uLL).u64[0];
  int32x4_t v7 = *(int32x4_t *)((char *)&Gamma::kGamma + 4 * v6.u32[0]);
  uint64_t v8 = v4.u32[1];
  int32x4_t v9 = *(int32x4_t *)((char *)&Gamma::kGamma + 4 * v4.u32[0]);
  int32x4_t v10 = *(int32x4_t *)((char *)&Gamma::kGamma + 4 * v8);
  int32x4_t v11 = vzip1q_s32(v7, v10);
  int32x4_t v12 = vzip2q_s32(v7, v10);
  int32x4_t v13 = vdupq_lane_s32(*(int32x2_t *)v9.i8, 1);
  int32x4_t v14 = vdupq_laneq_s32(v9, 2);
  float32x4_t v15 = (float32x4_t)vzip1q_s32(v11, v9);
  float32x4_t v16 = (float32x4_t)vzip1q_s32(v12, v14);
  v15.i32[3] = 0;
  float32x4_t v17 = vabdq_f32(v15, a1);
  float32x4_t v18 = (float32x4_t)vzip2q_s32(v11, v13);
  v18.i32[3] = 0;
  v16.i32[3] = 0;
  float32x4_t v19 = vabdq_f32(v18, a1);
  float32x4_t v20 = vabdq_f32(v16, a1);
  float32x4_t v21 = vminnmq_f32(vminnmq_f32(v17, v19), v20);
  int32x4_t v22 = vceqq_f32(v21, v19);
  int8x16_t v23 = vbicq_s8((int8x16_t)vceqq_f32(v21, v20), (int8x16_t)v22);
  v21.i64[0] = 0x200000002;
  v21.i64[1] = 0x200000002;
  *(void *)&double result = vaddq_s32(vsubq_s32(v5, v22), (int32x4_t)vandq_s8(v23, (int8x16_t)v21)).u64[0];
  return result;
}

uint64_t MTLGetPackFloatFunction::$_41::__invoke(int32x4_t *this, int16x4_t *a2, void *a3)
{
  int8x16_t v4 = (int8x16_t)vrev64q_s32(*this);
  float32x4_t v5 = (float32x4_t)vextq_s8(v4, v4, 0xCuLL);
  float32x4_t v6 = vminnmq_f32(vmaxnmq_f32((float32x4_t)vandq_s8((int8x16_t)v5, vorrq_s8((int8x16_t)vcltzq_f32(v5), (int8x16_t)vcgezq_f32(v5))), (float32x4_t)xmmword_1828D5130), (float32x4_t)xmmword_1828D5140);
  float32x4_t v7 = vabsq_f32(v6);
  int8x16_t v8 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1828D4F90, v7);
  int32x4_t v9 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vaddq_f32(v6, (float32x4_t)xmmword_1828D5150), (float32x4_t)xmmword_1828D5160)));
  if ((vminvq_u32((uint32x4_t)v8) & 0x80000000) == 0)
  {
    int32x4_t v13 = (int32x4_t)v6;
    int8x16_t v14 = v8;
    int8x16_t v15 = (int8x16_t)v9;
    *(double *)v10.i64 = GammaConstants<10u,false>::Pack(v7, v8);
    v11.i64[0] = 0x30000000300;
    v11.i64[1] = 0x30000000300;
    int32x4_t v9 = (int32x4_t)vorrq_s8(vbicq_s8(vbslq_s8((int8x16_t)vcltzq_s32(v13), (int8x16_t)vsubq_s32(v11, v10), (int8x16_t)v10), v14), vandq_s8(v14, v15));
  }
  *a2 = vshl_n_s16(vmovn_s32(v9), 6uLL);
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_42::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V3.4S, #15.0 }
  int32x4_t v12 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, _Q1), (int8x16_t)vdupq_n_s32(0x416FFFFFu), _Q3), v10)));
  __int16 v13 = v12.i16[0];
  __int16 v14 = v12.i16[2];
  _Q1.i32[0] = v12.u16[4];
  _Q1.i32[1] = v12.u16[6];
  *(uint32x2_t *)v12.i8 = vshl_u32(*(uint32x2_t *)_Q1.f32, (uint32x2_t)0xC00000008);
  *(_WORD *)a2 = v13 | (16 * v14) | v12.i16[0] | v12.i16[2];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_43::__invoke(int8x16_t *this, float *a2, void *a3)
{
  uint32x4_t v3 = (uint32x4_t)vextq_s8(*this, *this, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v3, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v3));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  int16x8_t v10 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, _Q1), (int8x16_t)vdupq_n_s32(0x437EFFFFu), (int8x16_t)vdupq_n_s32(0x437F0000u)), v9)));
  *(int16x4_t *)v10.i8 = vmovn_s32((int32x4_t)v10);
  *(_DWORD *)a2 = vmovn_s16(v10).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_44::__invoke(int8x16_t *this, float *a2, void *a3)
{
  int8x16_t v4 = vextq_s8(*this, *this, 0xCuLL);
  uint32x4_t v5 = (uint32x4_t)v4;
  v5.i32[0] = v4.i32[3];
  v5.i32[3] = v4.i32[0];
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v11 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v5, _Q0), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v5));
  int8x16_t v12 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1828D4F90, v11);
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  int32x4_t v14 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v11, v13), (int8x16_t)xmmword_1828D4FB0, (int8x16_t)xmmword_1828D4FA0), v11)));
  if ((vminvq_u32((uint32x4_t)v12) & 0x80000000) == 0)
  {
    int8x16_t v18 = v12;
    int8x16_t v19 = (int8x16_t)v14;
    *(double *)v15.i64 = GammaConstants<8u,false>::Pack(v11, v12);
    int32x4_t v14 = (int32x4_t)vorrq_s8(vbicq_s8(v15, v18), vandq_s8(v19, v18));
  }
  int16x8_t v16 = (int16x8_t)v14;
  v16.i32[0] = v14.i32[3];
  v16.i32[3] = v14.i32[0];
  *(int16x4_t *)v16.i8 = vmovn_s32((int32x4_t)v16);
  *(_DWORD *)a2 = vmovn_s16(v16).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_45::__invoke(MTLGetPackFloatFunction::$_45 *this, float *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  int32x4_t v4 = vdupq_n_s32(0x7F800000u);
  v5.i64[0] = 0x100000001;
  v5.i64[1] = 0x100000001;
  int32x4_t v6 = (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(a4, 0x10uLL), v5);
  v5.i64[0] = 0x7F0000007FLL;
  v5.i64[1] = 0x7F0000007FLL;
  int8x16_t v7 = vbicq_s8((int8x16_t)vaddq_s32(v6, (int32x4_t)v5), (int8x16_t)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)a4, (int8x16_t)v4), v4));
  v6.i64[0] = 0xFFFF0000FFFFLL;
  v6.i64[1] = 0xFFFF0000FFFFLL;
  *(_WORD *)a2 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vorrq_s8(v7, vandq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)a4, (int8x16_t)vdupq_n_s32(0x7FFF0000u)), v4), (int8x16_t)v6)), (int32x4_t)a4), 0x10uLL).u16[0];
  return 2;
}

uint64_t MTLGetPackFloatFunction::$_46::__invoke(int32x2_t *this, float *a2, void *a3, uint32x4_t a4)
{
  *(int32x2_t *)a4.i8 = *this;
  int32x4_t v4 = vdupq_n_s32(0x7F800000u);
  uint32x2_t v5 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vorr_s8(vbic_s8((int8x8_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)*(_OWORD *)&vshrq_n_u32(a4, 0x10uLL), (int8x8_t)0x100000001), (int32x2_t)0x7F0000007FLL), (int8x8_t)*(_OWORD *)&vceqq_s32((int32x4_t)vandq_s8((int8x16_t)a4, (int8x16_t)v4), v4)), vand_s8((int8x8_t)*(_OWORD *)&vceqq_s32((int32x4_t)vandq_s8((int8x16_t)a4, (int8x16_t)vdupq_n_s32(0x7FFF0000u)), v4), (int8x8_t)0xFFFF0000FFFFLL)), *this),
         0x10uLL);
  *((_WORD *)a2 + 1) = v5.i16[2];
  *(_WORD *)a2 = v5.i16[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_47::__invoke(uint32x4_t *this, int16x4_t *a2, void *a3)
{
  int32x4_t v3 = vdupq_n_s32(0x7F800000u);
  v4.i64[0] = 0x100000001;
  v4.i64[1] = 0x100000001;
  int32x4_t v5 = (int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(*this, 0x10uLL), v4);
  v4.i64[0] = 0x7F0000007FLL;
  v4.i64[1] = 0x7F0000007FLL;
  int8x16_t v6 = vbicq_s8((int8x16_t)vaddq_s32(v5, (int32x4_t)v4), (int8x16_t)vceqq_s32((int32x4_t)vandq_s8(*(int8x16_t *)this, (int8x16_t)v3), v3));
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  *a2 = vaddhn_s32((int32x4_t)vorrq_s8(v6, vandq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8(*(int8x16_t *)this, (int8x16_t)vdupq_n_s32(0x7FFF0000u)), v3), (int8x16_t)v5)), *(int32x4_t *)this);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_0::__invoke(MTLGetUnpackFloatFunction::$_0 *this, float32x4_t *a2, float *a3)
{
  v3.i64[0] = 0;
  v3.i32[2] = 0;
  v3.i32[3] = *(unsigned __int8 *)this;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 1;
}

uint64_t MTLGetUnpackFloatFunction::$_1::__invoke(MTLGetUnpackFloatFunction::$_1 *this, float32x4_t *a2, float *a3)
{
  v3.i64[0] = *(unsigned __int8 *)this;
  v3.i64[1] = 0xFF00000000;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 1;
}

uint64_t MTLGetUnpackFloatFunction::$_2::__invoke(MTLGetUnpackFloatFunction::$_2 *this, float32x4_t *a2, float *a3)
{
  v3.i64[0] = *(char *)this;
  v3.i64[1] = 0x7F00000000;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  return 1;
}

uint64_t MTLGetUnpackFloatFunction::$_3::__invoke(MTLGetUnpackFloatFunction::$_3 *this, float32x4_t *a2, float *a3)
{
  v3.i64[0] = *(unsigned __int16 *)this;
  v3.i64[1] = 0xFFFF00000000;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x37800080u));
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_4::__invoke(MTLGetUnpackFloatFunction::$_4 *this, float32x4_t *a2, float *a3)
{
  v3.i64[0] = *(__int16 *)this;
  v3.i64[1] = 0x7FFF00000000;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x38000100u)), _Q1);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_5::__invoke(MTLGetUnpackFloatFunction::$_5 *this, float32x4_t *a2, float *a3)
{
  v3.i32[0] = *(unsigned __int16 *)this;
  v3.i32[1] = 1006632960;
  *a2 = vcvtq_f32_f16(v3);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_6::__invoke(MTLGetUnpackFloatFunction::$_6 *this, float32x4_t *a2, float *a3)
{
  v3.i32[0] = *(unsigned __int8 *)this;
  v3.i32[1] = *((unsigned __int8 *)this + 1);
  v3.i64[1] = 0xFF00000000;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_7::__invoke(MTLGetUnpackFloatFunction::$_7 *this, float32x4_t *a2, float *a3)
{
  v3.i32[0] = *(char *)this;
  v3.i32[1] = *((char *)this + 1);
  v3.i64[1] = 0x7F00000000;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_8::__invoke(MTLGetUnpackFloatFunction::$_8 *this, int8x16_t *a2, float *a3, double a4, int8x8_t a5)
{
  unsigned __int32 v5 = *(unsigned __int16 *)this;
  a5.i32[0] = v5 >> 10;
  LODWORD(v6) = vand_s8(a5, (int8x8_t)0x1F0000001FLL).u32[0];
  a5.i32[1] = v5;
  v7.i32[0] = v5;
  v7.i32[1] = v5 >> 5;
  *(int8x8_t *)v8.i8 = vand_s8(v7, (int8x8_t)0x1F0000001FLL);
  HIDWORD(v6) = vshr_n_u32(*(uint32x2_t *)&a5, 0xFuLL).i32[1];
  v8.i64[1] = v6;
  int8x16_t v9 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v8), (float32x4_t)xmmword_1828D5190));
  *a2 = vextq_s8(v9, v9, 0xCuLL);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_9::__invoke(MTLGetUnpackFloatFunction::$_9 *this, _OWORD *a2, float *a3)
{
  *(void *)&long long v3 = *(unsigned int *)this;
  *((void *)&v3 + 1) = 0x3F80000000000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_10::__invoke(MTLGetUnpackFloatFunction::$_10 *this, float32x4_t *a2, float *a3)
{
  v3.i32[0] = *(unsigned __int16 *)this;
  v3.i32[1] = *((unsigned __int16 *)this + 1);
  v3.i64[1] = 0xFFFF00000000;
  *a2 = vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x37800080u));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_11::__invoke(MTLGetUnpackFloatFunction::$_11 *this, float32x4_t *a2, float *a3)
{
  v3.i32[0] = *(__int16 *)this;
  v3.i32[1] = *((__int16 *)this + 1);
  v3.i64[1] = 0x7FFF00000000;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0x38000100u)), _Q1);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_12::__invoke(MTLGetUnpackFloatFunction::$_12 *this, float32x4_t *a2, float *a3, int32x4_t a4)
{
  a4.i32[0] = *(unsigned __int16 *)this;
  a4.i16[2] = *((_WORD *)this + 1);
  a4.i64[1] = 0x3C0000000000;
  *a2 = vcvtq_f32_f16((float16x4_t)vmovn_s32(a4));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_13::__invoke(MTLGetUnpackFloatFunction::$_13 *this, float32x4_t *a2, float *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *a2 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4))), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_14::__invoke(MTLGetUnpackFloatFunction::$_14 *this, _OWORD *a2, float *a3, double a4, float a5)
{
  LODWORD(v5) = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  LOBYTE(a5) = *((unsigned char *)this + 3);
  DWORD1(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  DWORD2(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 2) + 384];
  *((float *)&v5 + 3) = (float)LODWORD(a5) * 0.0039216;
  *a2 = v5;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_15::__invoke(MTLGetUnpackFloatFunction::$_15 *this, float32x4_t *a2, float *a3, int8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a4))), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_16::__invoke(MTLGetUnpackFloatFunction::$_16 *this, int8x16_t *a2, float *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  int8x16_t v4 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4))), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *a2 = vextq_s8(v4, v4, 0xCuLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_17::__invoke(MTLGetUnpackFloatFunction::$_17 *this, _OWORD *a2, float *a3, double a4, float a5)
{
  LODWORD(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 2) + 384];
  LOBYTE(a5) = *((unsigned char *)this + 3);
  DWORD1(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  DWORD2(v5) = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  *((float *)&v5 + 3) = (float)LODWORD(a5) * 0.0039216;
  *a2 = v5;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_18::__invoke(MTLGetUnpackFloatFunction::$_18 *this, float32x4_t *a2, float *a3, int8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this >> 20;
  LODWORD(v4) = vand_s8(a4, (int8x8_t)0x300000003).u32[0];
  a4.i32[1] = *(_DWORD *)this;
  v5.i32[0] = *(_DWORD *)this;
  v5.i32[1] = *(_DWORD *)this >> 10;
  *(int8x8_t *)v6.i8 = vand_s8(v5, (int8x8_t)0x300000003);
  HIDWORD(v4) = vshr_n_u32(*(uint32x2_t *)&a4, 0x1EuLL).i32[1];
  v6.i64[1] = v4;
  *a2 = vmulq_f32(vcvtq_f32_s32(v6), (float32x4_t)xmmword_1828D51A0);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_19::__invoke(MTLGetUnpackFloatFunction::$_19 *this, float32x4_t *a2, float *a3)
{
  uint16x4_t v3 = (uint16x4_t)vdup_n_s16(0x1E0u);
  v3.i16[0] = *(_DWORD *)this & 0x7FF;
  v3.i16[1] = (*(_DWORD *)this >> 11) & 0x7FF;
  v3.i16[2] = *(_DWORD *)this >> 22;
  *a2 = vcvtq_f32_f16((float16x4_t)vshl_u16(v3, (uint16x4_t)0x5000500040004));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_20::__invoke(MTLGetUnpackFloatFunction::$_20 *this, float32x4_t *a2, float *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  a4.i32[1] = *(_DWORD *)this >> 9;
  *(int8x8_t *)a4.i8 = vand_s8(*(int8x8_t *)a4.i8, (int8x8_t)0x100000001);
  a4.i32[2] = (*(_DWORD *)this >> 18) & 0x1FF;
  float32x4_t v4 = vmulq_f32((float32x4_t)vdupq_n_s32((*(_DWORD *)this >> 27 << 23) + 864026624), vcvtq_f32_u32(a4));
  v4.i32[3] = 1.0;
  *a2 = v4;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_21::__invoke(MTLGetUnpackFloatFunction::$_21 *this, int8x16_t *a2, float *a3, double a4, int8x8_t a5)
{
  a5.i32[0] = *(_DWORD *)this >> 20;
  LODWORD(v5) = vand_s8(a5, (int8x8_t)0x300000003).u32[0];
  a5.i32[1] = *(_DWORD *)this;
  v6.i32[0] = *(_DWORD *)this;
  v6.i32[1] = *(_DWORD *)this >> 10;
  *(int8x8_t *)v7.i8 = vand_s8(v6, (int8x8_t)0x300000003);
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a5, 0x1EuLL).i32[1];
  v7.i64[1] = v5;
  int8x16_t v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)xmmword_1828D51A0));
  *a2 = vextq_s8(v8, v8, 0xCuLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_22::__invoke(MTLGetUnpackFloatFunction::$_22 *this, _OWORD *a2, float *a3)
{
  *(void *)&long long v3 = *(void *)this;
  *((void *)&v3 + 1) = 0x3F80000000000000;
  *a2 = v3;
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_23::__invoke(uint16x4_t *this, float32x4_t *a2, float *a3)
{
  *a2 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*this)), (float32x4_t)vdupq_n_s32(0x37800080u));
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_24::__invoke(int16x4_t *this, float32x4_t *a2, float *a3)
{
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*this)), (float32x4_t)vdupq_n_s32(0x38000100u)), _Q1);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_25::__invoke(float16x4_t *this, float32x4_t *a2, float *a3)
{
  *a2 = vcvtq_f32_f16(*this);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_26::__invoke(MTLGetUnpackFloatFunction::$_26 *this, _OWORD *a2, float *a3)
{
  *a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetUnpackFloatFunction::$_27::__invoke(MTLGetUnpackFloatFunction::$_27 *this, float32x4_t *a2, float *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  uint16x8_t v4 = vmovl_u8(a4);
  v4.i32[0] &= 0xFF00FFu;
  v4.i16[2] = v4.u8[4];
  v4.i16[3] = 255;
  *a2 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v4.i8)), (float32x4_t)vdupq_n_s32(0x3B808081u));
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_28::__invoke(MTLGetUnpackFloatFunction::$_28 *this, _OWORD *a2, float *a3)
{
  __asm { FMOV            V0.4S, #1.0 }
  LODWORD(_Q0) = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  DWORD1(_Q0) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  DWORD2(_Q0) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 2) + 384];
  *a2 = _Q0;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_29::__invoke(MTLGetUnpackFloatFunction::$_29 *this, float32x4_t *a2, float *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  uint16x8_t v4 = vmovl_u8(a4);
  v4.i16[3] = 127;
  __asm { FMOV            V1.4S, #-1.0 }
  *a2 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(*(int16x4_t *)v4.i8, 8uLL), 8uLL))), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_30::__invoke(float16x4_t *this, float32x4_t *a2, float *a3)
{
  float16x4_t v3 = *this;
  v3.i16[3] = 15360;
  *a2 = vcvtq_f32_f16(v3);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_31::__invoke(MTLGetUnpackFloatFunction::$_31 *this, _OWORD *a2, float *a3)
{
  long long v3 = *(_OWORD *)this;
  HIDWORD(v3) = 1065353216;
  *a2 = v3;
  return 16;
}

uint64_t MTLGetUnpackFloatFunction::$_32::__invoke(float16x4_t *this, float32x4_t *a2, float *a3)
{
  float32x4_t v3 = vcvtq_f32_f16(*this);
  *a2 = vminnmq_f32(vmaxnmq_f32((float32x4_t)vandq_s8((int8x16_t)v3, vorrq_s8((int8x16_t)vcltzq_f32(v3), (int8x16_t)vcgezq_f32(v3))), (float32x4_t)xmmword_1828D51B0), (float32x4_t)xmmword_1828D51C0);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_33::__invoke(MTLGetUnpackFloatFunction::$_33 *this, _OWORD *a2, float *a3)
{
  *(void *)&long long v3 = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  DWORD2(v3) = 0;
  HIDWORD(v3) = 1.0;
  *a2 = v3;
  return 1;
}

uint64_t MTLGetUnpackFloatFunction::$_34::__invoke(MTLGetUnpackFloatFunction::$_34 *this, _OWORD *a2, float *a3)
{
  LODWORD(v3) = Gamma::kGamma[2 * *(unsigned __int8 *)this + 384];
  DWORD1(v3) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  DWORD2(v3) = 0;
  HIDWORD(v3) = 1.0;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_35::__invoke(MTLGetUnpackFloatFunction::$_35 *this, float32x4_t *a2, float *a3)
{
  unsigned int v3 = *(unsigned __int16 *)this;
  v4.i32[3] = 31;
  v4.i32[0] = v3 >> 11;
  v4.i32[1] = (v3 >> 5) & 0x3F;
  v4.i32[2] = v3 & 0x1F;
  *a2 = vmulq_f32(vcvtq_f32_s32(v4), (float32x4_t)xmmword_1828D51D0);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_36::__invoke(MTLGetUnpackFloatFunction::$_36 *this, int8x16_t *a2, float *a3, int8x8_t a4)
{
  unsigned __int32 v4 = *(unsigned __int16 *)this;
  a4.i32[0] = v4 >> 6;
  LODWORD(v5) = vand_s8(a4, (int8x8_t)0x1F0000001FLL).u32[0];
  a4.i32[1] = v4;
  v6.i32[0] = v4;
  v6.i32[1] = v4 >> 1;
  *(int8x8_t *)v7.i8 = vand_s8(v6, (int8x8_t)0x1F00000001);
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a4, 0xBuLL).i32[1];
  v7.i64[1] = v5;
  int8x16_t v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)xmmword_1828D51E0));
  *a2 = vextq_s8(v8, v8, 8uLL);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_37::__invoke(MTLGetUnpackFloatFunction::$_37 *this, int8x16_t *a2, float *a3, int8x8_t a4)
{
  unsigned __int32 v4 = *(unsigned __int16 *)this;
  a4.i32[0] = v4 >> 8;
  LODWORD(v5) = vand_s8(a4, (int8x8_t)0xF0000000FLL).u32[0];
  a4.i32[1] = v4;
  v6.i32[0] = v4;
  v6.i32[1] = v4 >> 4;
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a4, 0xCuLL).i32[1];
  *(int8x8_t *)v7.i8 = vand_s8(v6, (int8x8_t)0xF0000000FLL);
  v7.i64[1] = v5;
  int8x16_t v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)vdupq_n_s32(0x3D888889u)));
  *a2 = vextq_s8(v8, v8, 8uLL);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_38::__invoke(MTLGetUnpackFloatFunction::$_38 *this, int8x16_t *a2, float *a3)
{
  int32x4_t v3 = vdupq_n_s32(0x37Eu);
  v3.i32[0] = *(_DWORD *)this & 0x3FF;
  v3.i32[1] = (*(_DWORD *)this >> 10) & 0x3FF;
  v3.i32[2] = (*(_DWORD *)this >> 20) & 0x3FF;
  int8x16_t v4 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vaddq_f32(vcvtq_f32_s32(v3), (float32x4_t)vdupq_n_s32(0xC3C00000)), (float32x4_t)vdupq_n_s32(0x3B008081u)));
  *a2 = vextq_s8(v4, v4, 0xCuLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_39::__invoke(MTLGetUnpackFloatFunction::$_39 *this, _OWORD *a2, float *a3)
{
  unint64_t v3 = *(unsigned int *)this;
  __asm { FMOV            V0.4S, #1.0 }
  LODWORD(_Q0) = Gamma::kGamma[(v3 >> 20) & 0x3FF];
  DWORD1(_Q0) = Gamma::kGamma[(v3 >> 10) & 0x3FF];
  DWORD2(_Q0) = Gamma::kGamma[v3 & 0x3FF];
  *a2 = _Q0;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_40::__invoke(uint16x4_t *this, int8x16_t *a2, float *a3)
{
  int32x4_t v3 = (int32x4_t)vmulq_f32(vaddq_f32(vcvtq_f32_u32(vmovl_u16(vshr_n_u16(*this, 6uLL))), (float32x4_t)vdupq_n_s32(0xC3C00000)), (float32x4_t)vdupq_n_s32(0x3B008081u));
  v3.i32[3] = fminf(fmaxf(*(float *)&v3.i32[3], 0.0), 1.0);
  int8x16_t v4 = (int8x16_t)vrev64q_s32(v3);
  *a2 = vextq_s8(v4, v4, 0xCuLL);
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_41::__invoke(uint16x4_t *this, _OWORD *a2, float *a3)
{
  uint32x4_t v3 = vmovl_u16(vshr_n_u16(*this, 6uLL));
  LODWORD(v4) = Gamma::kGamma[v3.u32[2]];
  DWORD1(v4) = Gamma::kGamma[v3.u32[1]];
  DWORD2(v4) = Gamma::kGamma[v3.u32[0]];
  HIDWORD(v4) = fminf(fmaxf((float)((float)v3.i32[3] + -384.0) * 0.0019608, 0.0), 1.0);
  *a2 = v4;
  return 8;
}

uint64_t MTLGetUnpackFloatFunction::$_42::__invoke(MTLGetUnpackFloatFunction::$_42 *this, int8x16_t *a2, float *a3, int8x8_t a4)
{
  unsigned __int32 v4 = *(unsigned __int16 *)this;
  a4.i32[0] = v4 >> 8;
  LODWORD(v5) = vand_s8(a4, (int8x8_t)0xF0000000FLL).u32[0];
  a4.i32[1] = v4;
  v6.i32[0] = v4;
  v6.i32[1] = v4 >> 4;
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a4, 0xCuLL).i32[1];
  *(int8x8_t *)v7.i8 = vand_s8(v6, (int8x8_t)0xF0000000FLL);
  v7.i64[1] = v5;
  int8x16_t v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_s32(v7), (float32x4_t)vdupq_n_s32(0x3D888889u)));
  *a2 = vextq_s8(v8, v8, 0xCuLL);
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_43::__invoke(MTLGetUnpackFloatFunction::$_43 *this, int8x16_t *a2, float *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  int8x16_t v4 = (int8x16_t)vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4))), (float32x4_t)vdupq_n_s32(0x3B808081u));
  *a2 = vextq_s8(v4, v4, 4uLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_44::__invoke(MTLGetUnpackFloatFunction::$_44 *this, _OWORD *a2, float *a3, double a4, float a5)
{
  LODWORD(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 1) + 384];
  LOBYTE(a5) = *(unsigned char *)this;
  DWORD1(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 2) + 384];
  DWORD2(v5) = Gamma::kGamma[2 * *((unsigned __int8 *)this + 3) + 384];
  *((float *)&v5 + 3) = (float)LODWORD(a5) * 0.0039216;
  *a2 = v5;
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_45::__invoke(MTLGetUnpackFloatFunction::$_45 *this, _OWORD *a2, float *a3)
{
  *(void *)&long long v3 = *(unsigned __int16 *)this << 16;
  *((void *)&v3 + 1) = 0x3F80000000000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackFloatFunction::$_46::__invoke(MTLGetUnpackFloatFunction::$_46 *this, int32x4_t *a2, float *a3, int32x4_t a4)
{
  a4.i32[0] = *(unsigned __int16 *)this;
  a4.i16[2] = *((_WORD *)this + 1);
  a4.i64[1] = 0x3F8000000000;
  *a2 = vshlq_n_s32(a4, 0x10uLL);
  return 4;
}

uint64_t MTLGetUnpackFloatFunction::$_47::__invoke(int16x4_t *this, int32x4_t *a2, float *a3)
{
  *a2 = vshll_n_s16(*this, 0x10uLL);
  return 8;
}

uint64_t MTLGetPackUintFunction::$_0::__invoke(MTLGetPackUintFunction::$_0 *this, unsigned int *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(unsigned char *)a2 = vminq_u32(a4, (uint32x4_t)xmmword_1828D51F0).u8[0];
  return 1;
}

uint64_t MTLGetPackUintFunction::$_1::__invoke(MTLGetPackUintFunction::$_1 *this, unsigned int *a2, void *a3, uint32x4_t a4)
{
  a4.i64[0] = *(void *)this;
  unint64_t v4 = vminq_u32(a4, (uint32x4_t)xmmword_1828D5200).u64[0];
  *((unsigned char *)a2 + 1) = BYTE4(v4);
  *(unsigned char *)a2 = v4;
  return 2;
}

uint64_t MTLGetPackUintFunction::$_2::__invoke(uint32x4_t *this, unsigned int *a2, void *a3)
{
  int16x8_t v3 = (int16x8_t)vminq_u32(*this, (uint32x4_t)xmmword_1828D5210);
  *(int16x4_t *)v3.i8 = vmovn_s32((int32x4_t)v3);
  *a2 = vmovn_s16(v3).u32[0];
  return 4;
}

uint64_t MTLGetPackUintFunction::$_3::__invoke(uint32x4_t *this, unsigned int *a2, void *a3)
{
  v3.i64[0] = 0xFF000000FFLL;
  v3.i64[1] = 0xFF000000FFLL;
  int16x8_t v4 = (int16x8_t)vminq_u32(*this, v3);
  *(int16x4_t *)v4.i8 = vmovn_s32((int32x4_t)v4);
  *a2 = vmovn_s16(v4).u32[0];
  return 4;
}

uint64_t MTLGetPackUintFunction::$_4::__invoke(MTLGetPackUintFunction::$_4 *this, unsigned int *a2, void *a3, uint32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(_WORD *)a2 = vminq_u32(a4, (uint32x4_t)xmmword_1828D5220).u16[0];
  return 2;
}

uint64_t MTLGetPackUintFunction::$_5::__invoke(MTLGetPackUintFunction::$_5 *this, unsigned int *a2, void *a3, uint32x4_t a4)
{
  a4.i64[0] = *(void *)this;
  unint64_t v4 = vminq_u32(a4, (uint32x4_t)xmmword_1828D5230).u64[0];
  *((_WORD *)a2 + 1) = WORD2(v4);
  *(_WORD *)a2 = v4;
  return 4;
}

uint64_t MTLGetPackUintFunction::$_6::__invoke(uint32x4_t *this, int16x4_t *a2, void *a3)
{
  *a2 = vmovn_s32((int32x4_t)vminq_u32(*this, (uint32x4_t)xmmword_1828D5240));
  return 8;
}

uint64_t MTLGetPackUintFunction::$_7::__invoke(uint32x4_t *this, uint16x4_t *a2, void *a3)
{
  *a2 = vqmovn_u32(*this);
  return 8;
}

uint64_t MTLGetPackUintFunction::$_8::__invoke(MTLGetPackUintFunction::$_8 *this, unsigned int *a2, void *a3)
{
  *a2 = *(_DWORD *)this;
  return 4;
}

uint64_t MTLGetPackUintFunction::$_9::__invoke(MTLGetPackUintFunction::$_9 *this, unsigned int *a2, void *a3)
{
  *(void *)a2 = *(void *)this;
  return 8;
}

uint64_t MTLGetPackUintFunction::$_10::__invoke(uint32x4_t *this, uint32x4_t *a2, void *a3)
{
  *a2 = vminq_u32(*this, (uint32x4_t)xmmword_1828D5250);
  return 16;
}

uint64_t MTLGetPackUintFunction::$_11::__invoke(MTLGetPackUintFunction::$_11 *this, unsigned int *a2, void *a3)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetPackUintFunction::$_12::__invoke(uint32x4_t *this, unsigned int *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vminq_u32(*this, (uint32x4_t)xmmword_1828D5260);
  __int32 v4 = v3.i32[1];
  __int32 v5 = v3.i32[0];
  *(uint32x2_t *)v3.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL), (uint32x2_t)0x1E00000014);
  *a2 = v5 | (v4 << 10) | v3.i32[0] | v3.i32[1];
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_0::__invoke(MTLGetUnpackUintFunction::$_0 *this, _OWORD *a2, unsigned int *a3)
{
  *(void *)&long long v3 = *(unsigned __int8 *)this;
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 1;
}

uint64_t MTLGetUnpackUintFunction::$_1::__invoke(MTLGetUnpackUintFunction::$_1 *this, _OWORD *a2, unsigned int *a3)
{
  LODWORD(v3) = *(unsigned __int8 *)this;
  DWORD1(v3) = *((unsigned __int8 *)this + 1);
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackUintFunction::$_2::__invoke(MTLGetUnpackUintFunction::$_2 *this, uint32x4_t *a2, unsigned int *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  uint16x8_t v4 = vmovl_u8(a4);
  v4.i16[3] = 1;
  *a2 = vmovl_u16(*(uint16x4_t *)v4.i8);
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_3::__invoke(MTLGetUnpackUintFunction::$_3 *this, uint32x4_t *a2, unsigned int *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *a2 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_4::__invoke(MTLGetUnpackUintFunction::$_4 *this, _OWORD *a2, unsigned int *a3)
{
  *(void *)&long long v3 = *(unsigned __int16 *)this;
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackUintFunction::$_5::__invoke(MTLGetUnpackUintFunction::$_5 *this, _OWORD *a2, unsigned int *a3)
{
  LODWORD(v3) = *(unsigned __int16 *)this;
  DWORD1(v3) = *((unsigned __int16 *)this + 1);
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_6::__invoke(uint16x4_t *this, uint32x4_t *a2, unsigned int *a3)
{
  uint16x4_t v3 = *this;
  v3.i16[3] = 1;
  *a2 = vmovl_u16(v3);
  return 8;
}

uint64_t MTLGetUnpackUintFunction::$_7::__invoke(uint16x4_t *this, uint32x4_t *a2, unsigned int *a3)
{
  *a2 = vmovl_u16(*this);
  return 8;
}

uint64_t MTLGetUnpackUintFunction::$_8::__invoke(MTLGetUnpackUintFunction::$_8 *this, _OWORD *a2, unsigned int *a3)
{
  *(void *)&long long v3 = *(unsigned int *)this;
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackUintFunction::$_9::__invoke(MTLGetUnpackUintFunction::$_9 *this, _OWORD *a2, unsigned int *a3)
{
  *(void *)&long long v3 = *(void *)this;
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 8;
}

uint64_t MTLGetUnpackUintFunction::$_10::__invoke(MTLGetUnpackUintFunction::$_10 *this, _OWORD *a2, unsigned int *a3)
{
  long long v3 = *(_OWORD *)this;
  HIDWORD(v3) = 1;
  *a2 = v3;
  return 16;
}

uint64_t MTLGetUnpackUintFunction::$_11::__invoke(MTLGetUnpackUintFunction::$_11 *this, _OWORD *a2, unsigned int *a3)
{
  *a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetUnpackUintFunction::$_12::__invoke(MTLGetUnpackUintFunction::$_12 *this, _OWORD *a2, unsigned int *a3, double a4, int8x8_t a5)
{
  a5.i32[0] = *(_DWORD *)this >> 20;
  LODWORD(v5) = vand_s8(a5, (int8x8_t)0x300000003).u32[0];
  a5.i32[1] = *(_DWORD *)this;
  v6.i32[0] = *(_DWORD *)this;
  v6.i32[1] = *(_DWORD *)this >> 10;
  *(int8x8_t *)&long long v7 = vand_s8(v6, (int8x8_t)0x300000003);
  HIDWORD(v5) = vshr_n_u32(*(uint32x2_t *)&a5, 0x1EuLL).i32[1];
  *((void *)&v7 + 1) = v5;
  *a2 = v7;
  return 4;
}

uint64_t MTLGetPackSintFunction::$_0::__invoke(MTLGetPackSintFunction::$_0 *this, int *a2, void *a3, int32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(unsigned char *)a2 = vminq_s32(vmaxq_s32(a4, (int32x4_t)xmmword_1828D5270), (int32x4_t)xmmword_1828D5280).u8[0];
  return 1;
}

uint64_t MTLGetPackSintFunction::$_1::__invoke(MTLGetPackSintFunction::$_1 *this, int *a2, void *a3, int32x4_t a4)
{
  a4.i64[0] = *(void *)this;
  unint64_t v4 = vminq_s32(vmaxq_s32(a4, (int32x4_t)xmmword_1828D5290), (int32x4_t)xmmword_1828D52A0).u64[0];
  *((unsigned char *)a2 + 1) = BYTE4(v4);
  *(unsigned char *)a2 = v4;
  return 2;
}

uint64_t MTLGetPackSintFunction::$_2::__invoke(int32x4_t *this, int *a2, void *a3)
{
  int16x8_t v3 = (int16x8_t)vminq_s32(vmaxq_s32(*this, (int32x4_t)xmmword_1828D52B0), (int32x4_t)xmmword_1828D52C0);
  *(int16x4_t *)v3.i8 = vmovn_s32((int32x4_t)v3);
  *a2 = vmovn_s16(v3).u32[0];
  return 4;
}

uint64_t MTLGetPackSintFunction::$_3::__invoke(int32x4_t *this, int *a2, void *a3)
{
  v3.i64[0] = 0x7F0000007FLL;
  v3.i64[1] = 0x7F0000007FLL;
  int16x8_t v4 = (int16x8_t)vminq_s32(vmaxq_s32(*this, v3), v3);
  *(int16x4_t *)v4.i8 = vmovn_s32((int32x4_t)v4);
  *a2 = vmovn_s16(v4).u32[0];
  return 4;
}

uint64_t MTLGetPackSintFunction::$_4::__invoke(MTLGetPackSintFunction::$_4 *this, int *a2, void *a3, int32x4_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *(_WORD *)a2 = vminq_s32(vmaxq_s32(a4, (int32x4_t)xmmword_1828D52D0), (int32x4_t)xmmword_1828D52E0).u16[0];
  return 2;
}

uint64_t MTLGetPackSintFunction::$_5::__invoke(MTLGetPackSintFunction::$_5 *this, int *a2, void *a3, int32x4_t a4)
{
  a4.i64[0] = *(void *)this;
  unint64_t v4 = vminq_s32(vmaxq_s32(a4, (int32x4_t)xmmword_1828D52F0), (int32x4_t)xmmword_1828D5300).u64[0];
  *((_WORD *)a2 + 1) = WORD2(v4);
  *(_WORD *)a2 = v4;
  return 4;
}

uint64_t MTLGetPackSintFunction::$_6::__invoke(int32x4_t *this, int16x4_t *a2, void *a3)
{
  *a2 = vmovn_s32(vminq_s32(vmaxq_s32(*this, (int32x4_t)xmmword_1828D5310), (int32x4_t)xmmword_1828D5320));
  return 8;
}

uint64_t MTLGetPackSintFunction::$_7::__invoke(int32x4_t *this, int16x4_t *a2, void *a3)
{
  *a2 = vqmovn_s32(*this);
  return 8;
}

uint64_t MTLGetPackSintFunction::$_8::__invoke(MTLGetPackSintFunction::$_8 *this, int *a2, void *a3)
{
  *a2 = *(_DWORD *)this;
  return 4;
}

uint64_t MTLGetPackSintFunction::$_9::__invoke(MTLGetPackSintFunction::$_9 *this, int *a2, void *a3)
{
  *(void *)a2 = *(void *)this;
  return 8;
}

uint64_t MTLGetPackSintFunction::$_10::__invoke(int32x4_t *this, int32x4_t *a2, void *a3)
{
  *a2 = vminq_s32(vmaxq_s32(*this, (int32x4_t)xmmword_1828D5330), (int32x4_t)xmmword_1828D5340);
  return 16;
}

uint64_t MTLGetPackSintFunction::$_11::__invoke(MTLGetPackSintFunction::$_11 *this, int *a2, void *a3)
{
  *(_OWORD *)a2 = *(_OWORD *)this;
  return 16;
}

uint64_t MTLGetUnpackSintFunction::$_0::__invoke(MTLGetUnpackSintFunction::$_0 *this, _OWORD *a2, int *a3)
{
  *(void *)&long long v3 = *(char *)this;
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 1;
}

uint64_t MTLGetUnpackSintFunction::$_1::__invoke(MTLGetUnpackSintFunction::$_1 *this, _OWORD *a2, int *a3)
{
  LODWORD(v3) = *(char *)this;
  DWORD1(v3) = *((char *)this + 1);
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackSintFunction::$_2::__invoke(MTLGetUnpackSintFunction::$_2 *this, int32x4_t *a2, int *a3, uint8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  uint16x8_t v4 = vmovl_u8(a4);
  v4.i16[3] = 1;
  *a2 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL), 0x18uLL);
  return 4;
}

uint64_t MTLGetUnpackSintFunction::$_3::__invoke(MTLGetUnpackSintFunction::$_3 *this, int32x4_t *a2, int *a3, int8x8_t a4)
{
  a4.i32[0] = *(_DWORD *)this;
  *a2 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a4));
  return 4;
}

uint64_t MTLGetUnpackSintFunction::$_4::__invoke(MTLGetUnpackSintFunction::$_4 *this, _OWORD *a2, int *a3)
{
  *(void *)&long long v3 = *(__int16 *)this;
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 2;
}

uint64_t MTLGetUnpackSintFunction::$_5::__invoke(MTLGetUnpackSintFunction::$_5 *this, _OWORD *a2, int *a3)
{
  LODWORD(v3) = *(__int16 *)this;
  DWORD1(v3) = *((__int16 *)this + 1);
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackSintFunction::$_6::__invoke(int16x4_t *this, int32x4_t *a2, int *a3)
{
  int16x4_t v3 = *this;
  v3.i16[3] = 1;
  *a2 = vmovl_s16(v3);
  return 8;
}

uint64_t MTLGetUnpackSintFunction::$_7::__invoke(int16x4_t *this, int32x4_t *a2, int *a3)
{
  *a2 = vmovl_s16(*this);
  return 8;
}

uint64_t MTLGetUnpackSintFunction::$_8::__invoke(MTLGetUnpackSintFunction::$_8 *this, _OWORD *a2, int *a3)
{
  *(void *)&long long v3 = *(unsigned int *)this;
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 4;
}

uint64_t MTLGetUnpackSintFunction::$_9::__invoke(MTLGetUnpackSintFunction::$_9 *this, _OWORD *a2, int *a3)
{
  *(void *)&long long v3 = *(void *)this;
  *((void *)&v3 + 1) = 0x100000000;
  *a2 = v3;
  return 8;
}

uint64_t MTLGetUnpackSintFunction::$_10::__invoke(MTLGetUnpackSintFunction::$_10 *this, _OWORD *a2, int *a3)
{
  long long v3 = *(_OWORD *)this;
  HIDWORD(v3) = 1;
  *a2 = v3;
  return 16;
}

uint64_t MTLGetUnpackSintFunction::$_11::__invoke(MTLGetUnpackSintFunction::$_11 *this, _OWORD *a2, int *a3)
{
  *a2 = *(_OWORD *)this;
  return 16;
}

__n64 to_simd(_MTLPackedFloat3 a1, double a2, float a3)
{
  result.n64_f32[1] = a3;
  return result;
}

double fast_vector_min(float32x4_t a1, float32x4_t a2)
{
  *(void *)&double result = vminnmq_f32(a1, a2).u64[0];
  return result;
}

{
  a1.i32[3] = 0;
  a2.i32[3] = 0;
  a1.i64[0] = vminnmq_f32(a1, a2).u64[0];
  return *(double *)a1.i64;
}

double fast_vector_max(float32x4_t a1, float32x4_t a2)
{
  *(void *)&double result = vmaxnmq_f32(a1, a2).u64[0];
  return result;
}

{
  a1.i32[3] = 0;
  a2.i32[3] = 0;
  a1.i64[0] = vmaxnmq_f32(a1, a2).u64[0];
  return *(double *)a1.i64;
}

double intersect@<D0>(_MTLAxisAlignedBoundingBox *a1@<X0>, _MTLAxisAlignedBoundingBox *a2@<X1>, uint64_t a3@<X8>)
{
  v3.i64[0] = *(void *)&a1->min.x;
  v4.i64[0] = *(void *)&a2->min.x;
  v3.i64[1] = LODWORD(a1->min.z);
  v4.i64[1] = LODWORD(a2->min.z);
  float32x4_t v5 = vmaxnmq_f32(v3, v4);
  v4.i64[0] = *(void *)&a1->max.x;
  v6.i64[0] = *(void *)&a2->max.x;
  v4.i64[1] = LODWORD(a1->max.z);
  v6.i64[1] = LODWORD(a2->max.z);
  int8x16_t v7 = (int8x16_t)vminnmq_f32(v4, v6);
  v5.i32[3] = v7.i32[0];
  *(float32x4_t *)a3 = v5;
  *(void *)&double result = vextq_s8(v7, v7, 4uLL).u64[0];
  *(double *)(a3 + 16) = result;
  return result;
}

float getSurfaceArea(_MTLAxisAlignedBoundingBox *a1, float32x4_t a2, float32x4_t a3)
{
  a2.i64[0] = *(void *)&a1->max.x;
  a2.i32[2] = LODWORD(a1->max.z);
  a3.i64[0] = *(void *)&a1->min.x;
  a3.i32[2] = LODWORD(a1->min.z);
  _Q0 = vsubq_f32(a2, a3);
  _S2 = _Q0.i32[2];
  __asm { FMLA            S3, S2, V0.S[1] }
  return _S3 + _S3;
}

float getSurfaceArea(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  a2.i64[0] = *(void *)(a1 + 12);
  a2.i32[2] = *(_DWORD *)(a1 + 20);
  a3.i64[0] = *(void *)(a1 + 40);
  a3.i32[2] = *(_DWORD *)(a1 + 48);
  float32x4_t v5 = vaddq_f32(a2, a3);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  a4.i64[0] = *(void *)a1;
  a4.i32[2] = *(_DWORD *)(a1 + 8);
  a5.i64[0] = *(void *)(a1 + 28);
  a5.i32[2] = *(_DWORD *)(a1 + 36);
  _Q0 = vsubq_f32(vmulq_f32(v5, v6), vmulq_f32(vaddq_f32(a4, a5), v6));
  v6.f32[0] = *(float *)(a1 + 52) - *(float *)(a1 + 24);
  _S3 = _Q0.i32[2];
  __asm { FMLA            S4, S3, V0.S[1] }
  return (float)(v6.f32[0] + v6.f32[0]) * _S4;
}

float getSurfaceAreaNoInterpolation(uint64_t a1)
{
  v1.i64[0] = *(void *)(a1 + 12);
  v2.i64[0] = *(void *)(a1 + 40);
  v1.i64[1] = *(unsigned int *)(a1 + 20);
  v2.i64[1] = *(unsigned int *)(a1 + 48);
  float32x4_t v3 = vmaxnmq_f32(v1, v2);
  v2.i64[0] = *(void *)a1;
  v4.i64[0] = *(void *)(a1 + 28);
  v2.i64[1] = *(unsigned int *)(a1 + 8);
  v4.i64[1] = *(unsigned int *)(a1 + 36);
  _Q0 = vsubq_f32(v3, vminnmq_f32(v2, v4));
  v2.f32[0] = *(float *)(a1 + 52) - *(float *)(a1 + 24);
  _S3 = _Q0.i32[2];
  __asm { FMLA            S4, S3, V0.S[1] }
  return (float)(v2.f32[0] + v2.f32[0]) * _S4;
}

BOOL isDegenerate(_MTLAxisAlignedBoundingBox *a1)
{
  return a1->max.x < a1->min.x || a1->max.y < a1->min.y || a1->max.z < a1->min.z;
}

BOOL isDegenerate(float *a1)
{
  return a1[3] < *a1
      || a1[4] < a1[1]
      || a1[5] < a1[2]
      || a1[10] < a1[7]
      || a1[11] < a1[8]
      || a1[12] < a1[9]
      || a1[13] < a1[6];
}

float evaluateLeafNodeSAH(unsigned int a1, float a2)
{
  return (float)a1 * a2;
}

uint64_t getBatchThreshold(void)
{
  return 0x2000;
}

unint64_t getBatchCountForFragmentCapacity(unint64_t a1, uint64_t a2)
{
  if (a1 <= 0x2000) {
    return 0;
  }
  unint64_t v2 = (a2 + a1) / (a2 + 1);
  if (v2 >= 2) {
    return 2 * v2;
  }
  else {
    return 2;
  }
}

unint64_t getNumberOfNodesThatCanBeBatchedForFragmentCapacity(unint64_t a1, unint64_t a2)
{
  if (a1 <= 0x2000) {
    return 0;
  }
  if ((a1 + a2 - 1) / a2 <= 1) {
    return 1;
  }
  return (a1 + a2 - 1) / a2;
}

uint64_t useResourcesBatched(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, sizeof(v8));
  uint64_t result = [a1 countByEnumeratingWithState:v8 objects:v9 count:16];
  if (result)
  {
    uint64_t v7 = result;
    do
    {
      [a3 useResources:*((void *)&v8[0] + 1) count:v7 usage:a2];
      uint64_t result = [a1 countByEnumeratingWithState:v8 objects:v9 count:16];
      uint64_t v7 = result;
    }
    while (result);
  }
  return result;
}

unint64_t _MTLClampMaxDepthForDescriptor(MTLBVHDescriptor *a1)
{
  if (![(MTLBVHDescriptor *)a1 fragmentCount]) {
    return 1;
  }
  double v2 = (double)[(MTLBVHDescriptor *)a1 fragmentCount];
  [(MTLBVHDescriptor *)a1 splitCapacity];
  unint64_t v4 = vcvtpd_u64_f64(v2 * v3);
  if (+[MTLBVHBuilder useTemporalSplitsForDescriptor:a1])
  {
    unint64_t v5 = ([(MTLBVHDescriptor *)a1 primitiveKeyframeCount] - 1) * v4;
    unint64_t v4 = v5 * (1 << [(MTLBVHDescriptor *)a1 maxSubKeyframeTemporalSplits]);
  }
  unint64_t v6 = v4 + [(MTLBVHDescriptor *)a1 minPrimitivesPerLeaf] - 1;
  unint64_t v7 = v6 / [(MTLBVHDescriptor *)a1 minPrimitivesPerLeaf];
  unint64_t v8 = [(MTLBVHDescriptor *)a1 branchingFactor];
  double v9 = (double)[(MTLBVHDescriptor *)a1 actualMaxDepth];
  double v10 = log((double)v7);
  if (v8 != 2)
  {
    double v13 = v10 + v10;
    if (ceil((v10 + v10) / log((double)[(MTLBVHDescriptor *)a1 branchingFactor]) + 2.0) <= v9)
    {
      double v11 = ceil(v13 / log((double)[(MTLBVHDescriptor *)a1 branchingFactor]) + 2.0);
      goto LABEL_11;
    }
LABEL_9:
    double v11 = (double)[(MTLBVHDescriptor *)a1 actualMaxDepth];
    goto LABEL_11;
  }
  double v11 = ceil((v10 / 0.693147181 + 2.0) * 1.35);
  if (v11 > v9) {
    goto LABEL_9;
  }
LABEL_11:
  if ((unint64_t)v11 <= 1) {
    return 1;
  }
  else {
    return (unint64_t)v11;
  }
}

BOOL deviceSupportsArgumentBuffersTier2(void *a1)
{
  return [a1 argumentBuffersSupport] != 0;
}

uint64_t getDefaultTGSize()
{
  return 64;
}

uint64_t getDispatchBinsSmallTGSize(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___Z26getDispatchBinsSmallTGSizePU19objcproto9MTLDevice11objc_object_block_invoke;
  block[3] = &unk_1E521F9E8;
  block[4] = a1;
  if (getDispatchBinsSmallTGSize(objc_object  {objcproto9MTLDevice}*)::onceToken != -1) {
    dispatch_once(&getDispatchBinsSmallTGSize(objc_object  {objcproto9MTLDevice}*)::onceToken, block);
  }
  if (getDispatchBinsSmallTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize) {
    return 32;
  }
  else {
    return 64;
  }
}

uint64_t ___Z26getDispatchBinsSmallTGSizePU19objcproto9MTLDevice11objc_object_block_invoke(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) supportsFamily:1009];
  if (result) {
    getDispatchBinsSmallTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize = 1;
  }
  return result;
}

uint64_t getBinningTGSize(void *a1)
{
  if (objc_msgSend((id)objc_msgSend(a1, "name"), "containsString:", @"Apple"))
  {
    getBinningTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize = 1;
    return 512;
  }
  else if (getBinningTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize)
  {
    return 512;
  }
  else
  {
    return 64;
  }
}

uint64_t getSpatialBinningTGSize(void *a1)
{
  if (objc_msgSend((id)objc_msgSend(a1, "name"), "containsString:", @"Apple"))
  {
    getSpatialBinningTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize = 1;
    return 256;
  }
  else if (getSpatialBinningTGSize(objc_object  {objcproto9MTLDevice}*)::threadgroupSize)
  {
    return 256;
  }
  else
  {
    return 64;
  }
}

uint64_t getSplitTGSize(void *a1)
{
  if (objc_msgSend((id)objc_msgSend(a1, "name"), "containsString:", @"Apple")) {
    return 256;
  }
  else {
    return 64;
  }
}

uint64_t getBatchSize()
{
  return 512;
}

uint64_t newPipeline(void *a1, int *a2, uint64_t a3, int a4)
{
  int v57 = a4;
  unint64_t v7 = objc_alloc_init(MTLFunctionConstantValues);
  unint64_t v8 = *(void *)(a2 + 1);
  unsigned int v9 = *a2;
  int v55 = (*a2 >> 10) & 0xF;
  unsigned int v56 = 1 << ((v8 >> 13) & 0xF);
  int v53 = (v8 >> 17);
  int v54 = (v9 >> 14);
  BOOL v52 = (v9 & 0x4000000) != 0;
  BOOL v51 = (v9 & 0x8000000) != 0;
  BOOL v50 = (v8 & 0x10) != 0;
  BOOL v49 = (v9 & 0x10000000) != 0;
  int v47 = (v9 >> 8) & 3;
  int v48 = v8 & 0xF;
  uint64_t v46 = (v8 >> 7) & 0x3F;
  BOOL v45 = (v8 & 0x20) != 0;
  BOOL v44 = (v8 & 0x2000000) != 0;
  BOOL v43 = (v8 & 0x4000000) != 0;
  BOOL v42 = (v8 & 0x40) != 0;
  BOOL v41 = (v8 & 0x8000000) != 0;
  int v40 = a2[9];
  BOOL v39 = (v8 & 0x10000000) != 0;
  BOOL v38 = (v8 & 0x20000000) != 0;
  BOOL v37 = (v8 & 0x40000000) != 0;
  BOOL v36 = (v8 & 0x80000000) != 0;
  char v35 = BYTE4(v8) & 1;
  BOOL v34 = (v8 & 0x200000000) != 0;
  BOOL v33 = (v8 & 0x400000000) != 0;
  int v31 = (v8 >> 35) & 0xF;
  int v32 = (v9 >> 22) & 0xF;
  BOOL v30 = (v8 & 0x8000000000) != 0;
  char v29 = BYTE5(v8) & 1;
  BOOL v28 = (v8 & 0x20000000000) != 0;
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v55 type:33 atIndex:0];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v54 type:33 atIndex:1];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v53 type:33 atIndex:19];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v44 type:53 atIndex:20];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v43 type:53 atIndex:21];
  [(MTLFunctionConstantValues *)v7 setConstantValue:a2 + 6 type:3 atIndex:2];
  [(MTLFunctionConstantValues *)v7 setConstantValue:a2 + 7 type:3 atIndex:3];
  [(MTLFunctionConstantValues *)v7 setConstantValue:a2 + 8 type:3 atIndex:4];
  [(MTLFunctionConstantValues *)v7 setConstantValue:a2 + 4 type:33 atIndex:5];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v32 type:33 atIndex:6];
  [(MTLFunctionConstantValues *)v7 setConstantValue:a2 + 5 type:33 atIndex:7];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v52 type:53 atIndex:8];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v51 type:53 atIndex:9];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v49 type:53 atIndex:12];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v47 type:33 atIndex:10];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v48 type:33 atIndex:13];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v56 type:33 atIndex:11];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v50 type:53 atIndex:14];
  char v27 = ((a2[1] & 0x10) != 0) | ((*a2 & 0x4000000u) >> 26);
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v27 type:53 atIndex:15];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v46 type:33 atIndex:16];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v57 type:33 atIndex:17];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v45 type:53 atIndex:18];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v42 type:53 atIndex:22];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v41 type:53 atIndex:23];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v40 type:3 atIndex:24];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v39 type:53 atIndex:25];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v38 type:53 atIndex:26];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v37 type:53 atIndex:27];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v36 type:49 atIndex:28];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v35 type:53 atIndex:29];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v34 type:53 atIndex:30];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v33 type:53 atIndex:31];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v31 type:33 atIndex:32];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v30 type:53 atIndex:33];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v29 type:53 atIndex:34];
  [(MTLFunctionConstantValues *)v7 setConstantValue:&v28 type:53 atIndex:35];
  uint64_t v10 = [NSString stringWithUTF8String:*(void *)a3];
  if (*(unsigned char *)(a3 + 8) && (a2[1] & 0x10) != 0)
  {
    uint64_t v25 = v10;
    uint64_t v10 = [NSString stringWithFormat:@"%@%@"];
  }
  if (*(unsigned char *)(a3 + 9))
  {
    uint64_t v25 = v10;
    uint64_t v10 = [NSString stringWithFormat:@"%@%llu"];
  }
  double v11 = objc_alloc_init(MTLComputePipelineDescriptor);
  id v26 = 0;
  int8x16_t v12 = objc_alloc_init(MTLFunctionDescriptor);
  [(MTLFunctionDescriptor *)v12 setName:v10];
  [(MTLFunctionDescriptor *)v12 setConstantValues:v7];
  [(MTLFunctionDescriptor *)v12 setOptions:[(MTLFunctionDescriptor *)v12 options] | 0x10];
  double v13 = (void *)[a1 newFunctionWithDescriptor:v12 error:&v26];
  if (!v13)
  {
    uint64_t v20 = [v26 description];
    MTLReportFailure(0, "newPipeline", 1708, @"Failed to specialize function: %@", v21, v22, v23, v24, v20);
  }

  [(MTLComputePipelineDescriptor *)v11 setComputeFunction:v13];
  [(MTLComputePipelineDescriptor *)v11 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:1];
  [(MTLComputePipelineDescriptor *)v11 setMaxTotalThreadsPerThreadgroup:v56];
  [(MTLComputePipelineDescriptor *)v11 setInternalPipeline:1];

  uint64_t v18 = objc_msgSend((id)objc_msgSend(a1, "device"), "newComputePipelineStateWithDescriptor:options:reflection:error:", v11, 0, 0, &v26);
  if (!v18) {
    MTLReportFailure(0, "newPipeline", 1742, @"Failed to create compute pipeline state", v14, v15, v16, v17, v25);
  }

  return v18;
}

uint64_t getTmpFragmentBinBufferSize(uint64_t a1, MTLBVHDescriptor *a2)
{
  if ([(MTLBVHDescriptor *)a2 maxSubKeyframeTemporalSplits]) {
    return 2 * a1;
  }
  else {
    return 0;
  }
}

uint64_t setResourceBufferContents(uint64_t result, int a2, unsigned int a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (a4)
  {
    unint64_t v6 = a5;
    uint64_t v7 = result;
    int v75 = 0;
    uint64_t v8 = 0;
    uint64_t v82 = 16 * a3;
    uint64_t v83 = 8 * a3;
    uint64_t v76 = 136 * a4;
    uint64_t v9 = result + 136 * a4;
    uint64_t v10 = result + 136 * a4 + v83;
    uint64_t v11 = v9;
    while (1)
    {
      int8x16_t v12 = (void *)[v6 objectAtIndexedSubscript:v8];
      [v6 objectAtIndexedSubscript:v8];
      double v13 = objc_opt_class();
      if ([v13 isSubclassOfClass:objc_opt_class()]) {
        break;
      }
      [v6 objectAtIndexedSubscript:v8];
      uint64_t v17 = objc_opt_class();
      if ([v17 isSubclassOfClass:objc_opt_class()])
      {
        if (a2)
        {
          if (a3)
          {
            uint64_t v18 = 0;
            do
            {
              uint64_t v19 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "boundingBoxBuffers"), "objectAtIndexedSubscript:", v18), "buffer"), "gpuAddress");
              *(void *)(v9 + 8 * v18) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "boundingBoxBuffers"), "objectAtIndexedSubscript:", v18), "offset")+ v19;
              ++v18;
            }
            while (a3 != v18);
          }
          uint64_t v20 = v76 + v83 * v8 + a6;
          unint64_t v6 = a5;
        }
        else
        {
          uint64_t v44 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "boundingBoxBuffers"), "objectAtIndexedSubscript:", 0), "buffer"), "gpuAddress");
          uint64_t v20 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "boundingBoxBuffers"), "objectAtIndexedSubscript:", 0), "offset")+ v44;
        }
        uint64_t v45 = v7 + 136 * v8;
        *(void *)(v45 + 16) = v20;
        *(_DWORD *)(v45 + 48) = [v12 boundingBoxStride];
        goto LABEL_37;
      }
      [v6 objectAtIndexedSubscript:v8];
      BOOL v34 = objc_opt_class();
      if ([v34 isSubclassOfClass:objc_opt_class()])
      {
        if (a2)
        {
          uint64_t v35 = v76 + v82 * v8;
          if (a3)
          {
            uint64_t v73 = v76 + v82 * v8;
            uint64_t v36 = 0;
            do
            {
              uint64_t v37 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "controlPointBuffers", v73), "objectAtIndexedSubscript:", v36), "buffer"), "gpuAddress");
              *(void *)(v11 + 8 * v36) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "controlPointBuffers"), "objectAtIndexedSubscript:", v36), "offset")+ v37;
              ++v36;
            }
            while (a3 != v36);
            uint64_t v38 = v7 + 136 * v8;
            *(void *)(v38 + 24) = v73 + a6;
            v74 = (uint64_t *)(v38 + 24);
            uint64_t v39 = 0;
            do
            {
              uint64_t v40 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "radiusBuffers", v74), "objectAtIndexedSubscript:", v39), "buffer"), "gpuAddress");
              *(void *)(v10 + 8 * v39) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "radiusBuffers"), "objectAtIndexedSubscript:", v39), "offset")+ v40;
              ++v39;
            }
            while (a3 != v39);
            uint64_t v41 = *v74;
          }
          else
          {
            uint64_t v41 = v35 + a6;
            *(void *)(v7 + 136 * v8 + 24) = v35 + a6;
          }
          uint64_t v50 = v41 + v83;
        }
        else
        {
          uint64_t v48 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "controlPointBuffers"), "objectAtIndexedSubscript:", 0), "buffer"), "gpuAddress");
          *(void *)(v7 + 136 * v8 + 24) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "controlPointBuffers"), "objectAtIndexedSubscript:", 0), "offset")+ v48;
          uint64_t v49 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "radiusBuffers"), "objectAtIndexedSubscript:", 0), "buffer"), "gpuAddress");
          uint64_t v50 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "radiusBuffers"), "objectAtIndexedSubscript:", 0), "offset")+ v49;
        }
        uint64_t v51 = v7 + 136 * v8;
        *(void *)(v51 + 32) = v50;
        uint64_t v52 = objc_msgSend((id)objc_msgSend(v12, "indexBuffer"), "gpuAddress");
        *(void *)(v51 + 8) = [v12 indexBufferOffset] + v52;
        *(_DWORD *)(v51 + 60) = [v12 controlPointFormat];
        int v53 = (unsigned int *)(v51 + 60);
        *(_DWORD *)(v51 + 64) = [v12 radiusFormat];
        int v54 = (unsigned int *)(v51 + 64);
        uint64_t v55 = [v12 controlPointStride];
        if (!v55) {
          LODWORD(v55) = MTLAttributeFormatSize((MTLAttributeFormat)*v53, v56, v57, v58, v59, v60, v61, v62);
        }
        *(_DWORD *)(v7 + 136 * v8 + 52) = v55;
        uint64_t v63 = [v12 radiusStride];
        if (!v63) {
          LODWORD(v63) = MTLAttributeFormatSize((MTLAttributeFormat)*v54, v64, v65, v66, v67, v68, v69, v70);
        }
        int64_t v71 = (_DWORD *)(v7 + 136 * v8);
        v71[14] = v63;
        v71[17] = v75;
        v71[18] = [v12 curveBasis];
        v71[19] = [v12 segmentControlPointCount];
        v71[20] = [v12 curveType];
        v71[21] = [v12 curveEndCaps];
        if ([v12 indexType]) {
          int v72 = 4;
        }
        else {
          int v72 = 2;
        }
        v71[11] = v72;
        v75 += [v12 controlPointCount];
        goto LABEL_34;
      }
LABEL_37:
      uint64_t v46 = objc_msgSend((id)objc_msgSend(v12, "primitiveDataBuffer"), "gpuAddress");
      uint64_t v47 = v7 + 136 * v8;
      *(void *)(v47 + 112) = [v12 primitiveDataBufferOffset] + v46;
      *(_DWORD *)(v47 + 120) = [v12 primitiveDataStride];
      *(_DWORD *)(v47 + 124) = [v12 primitiveDataElementSize];
      uint64_t result = [v12 primitiveCount];
      *(void *)(v47 + 128) = result;
      ++v8;
      v11 += v82;
      v10 += v82;
      v9 += v83;
      if (v8 == a4) {
        return result;
      }
    }
    if (a2)
    {
      if (a3)
      {
        uint64_t v14 = 0;
        do
        {
          uint64_t v15 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "vertexBuffers"), "objectAtIndexedSubscript:", v14), "buffer"), "gpuAddress");
          *(void *)(v9 + 8 * v14) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "vertexBuffers"), "objectAtIndexedSubscript:", v14), "offset")+ v15;
          ++v14;
        }
        while (a3 != v14);
      }
      uint64_t v16 = v76 + v83 * v8 + a6;
    }
    else
    {
      uint64_t v21 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "vertexBuffers"), "objectAtIndexedSubscript:", 0), "buffer"), "gpuAddress");
      uint64_t v16 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "vertexBuffers"), "objectAtIndexedSubscript:", 0), "offset")+ v21;
    }
    *(void *)(v7 + 136 * v8) = v16;
    if ([v12 indexBuffer])
    {
      uint64_t v22 = objc_msgSend((id)objc_msgSend(v12, "indexBuffer"), "gpuAddress");
      *(void *)(v7 + 136 * v8 + 8) = [v12 indexBufferOffset] + v22;
    }
    unsigned int v23 = [v12 vertexFormat];
    uint64_t v24 = [v12 vertexStride];
    int v32 = v24;
    if (!v24) {
      int v32 = MTLAttributeFormatSize((MTLAttributeFormat)v23, v25, v26, v27, v28, v29, v30, v31);
    }
    if ([v12 indexBuffer])
    {
      if ([v12 indexType]) {
        int v33 = 4;
      }
      else {
        int v33 = 2;
      }
    }
    else
    {
      int v33 = 0;
    }
    uint64_t v42 = v7 + 136 * v8;
    *(_DWORD *)(v42 + 40) = v32;
    *(_DWORD *)(v42 + 44) = v33;
    *(_DWORD *)(v42 + 88) = v23;
    uint64_t v43 = objc_msgSend((id)objc_msgSend(v12, "transformationMatrixBuffer"), "gpuAddress");
    *(void *)(v42 + 96) = [v12 transformationMatrixBufferOffset] + v43;
    *(_DWORD *)(v42 + 104) = [v12 transformationMatrixLayout] == 1;
LABEL_34:
    unint64_t v6 = a5;
    goto LABEL_37;
  }
  return result;
}

uint64_t computeResourceBufferLength(int a1, unsigned int *a2, uint64_t a3, void *a4)
{
  *a2 = 1;
  if (a1)
  {
    [a4 objectAtIndexedSubscript:0];
    uint64_t v7 = objc_opt_class();
    LODWORD(v7) = [v7 isSubclassOfClass:objc_opt_class()];
    uint64_t v8 = (void *)[a4 objectAtIndexedSubscript:0];
    if (v7)
    {
      uint64_t v9 = (void *)[v8 vertexBuffers];
    }
    else
    {
      uint64_t v11 = objc_opt_class();
      LODWORD(v11) = [v11 isSubclassOfClass:objc_opt_class()];
      int8x16_t v12 = (void *)[a4 objectAtIndexedSubscript:0];
      if (!v11)
      {
        uint64_t v15 = objc_opt_class();
        if ([v15 isSubclassOfClass:objc_opt_class()])
        {
          unsigned int v16 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "objectAtIndexedSubscript:", 0), "controlPointBuffers"), "count");
          *a2 = v16;
          unsigned int v13 = 2 * v16;
        }
        else
        {
          unsigned int v13 = 1;
        }
        goto LABEL_8;
      }
      uint64_t v9 = (void *)[v12 boundingBoxBuffers];
    }
    unsigned int v13 = [v9 count];
    *a2 = v13;
LABEL_8:
    uint64_t v10 = 8 * v13 + 136;
    return v10 * a3;
  }
  uint64_t v10 = 136;
  return v10 * a3;
}

float makeSortable(float result)
{
  if (result < 0.0) {
    LODWORD(result) ^= 0x7FFFFFFFu;
  }
  return result;
}

int8x8_t makeSortable(int32x2_t a1)
{
  return vbsl_s8((int8x8_t)vcltz_s32(a1), veor_s8((int8x8_t)a1, (int8x8_t)0x8000000080000000), (int8x8_t)a1);
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, unsigned __int8 a2, void *a3)
{
  int v7 = 3;
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  PipelineCache<PipelineKey>::getPipelineKey((unsigned __int8 *)a1, a2, a3, *(void *)(a1 + 40), &v7, (uint64_t)v5);
  return PipelineCache<PipelineKey>::getPipeline(a1, (uint64_t)v5, 0);
}

void sub_1827B77A8(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, unsigned __int8 a2, void *a3, _DWORD *a4, void *a5)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  PipelineCache<PipelineKey>::getPipelineKey((unsigned __int8 *)a1, a2, a3, *(void *)(a1 + 40), a4, (uint64_t)v8);
  return PipelineCache<PipelineKey>::getPipeline(a1, (uint64_t)v8, a5);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void PipelineCache<PipelineKey>::getPipelineKey(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, void *a3@<X2>, unint64_t a4@<X3>, _DWORD *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)(a6 + 32) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  if (a3)
  {
    [a3 cachedPipelineKey];
    unsigned int v11 = *(_DWORD *)a6 & 0xFFFFFF00;
    unint64_t v12 = *(void *)(a6 + 4) & 0xFFFFFE7879FFFFFFLL;
  }
  else
  {
    unint64_t v12 = 0;
    unsigned int v11 = 0;
    *(_OWORD *)(a6 + 24) = 0uLL;
    *(_OWORD *)(a6 + 8) = 0uLL;
  }
  *(_DWORD *)a6 = v11 | a2;
  unint64_t v13 = v12 | (*a5 << 25) & 0x2000000 | (*a5 << 25) & 0x4000000 | (unint64_t)((*a5 << 29) & 0x80000000) | ((unint64_t)a1[80] << 32) | ((unint64_t)a1[81] << 33) | ((unint64_t)a1[82] << 34) | ((unint64_t)((*a5 >> 3) & 1) << 39) | ((unint64_t)((*a5 >> 4) & 1) << 40);
  if (a4) {
    unint64_t v13 = v13 & 0xFFFFFFFFFFFE1FFFLL | ((log2((double)a4) & 0xF) << 13);
  }
  *(void *)(a6 + 4) = v13;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 84);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 84));
  long long v5 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v5;
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>((void *)a1, (int *)v11);
  if (v6)
  {
    int v7 = v6;
    os_unfair_lock_unlock(v4);
    return (void *)v7[7];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 72);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, a2);
    PipelineCache<PipelineKey>::addPipeline(a1, a2, v8);
    os_unfair_lock_unlock(v4);
  }
  return v8;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, unsigned __int8 a2, void *a3, int a4, int a5)
{
  if (a5) {
    int v6 = 2;
  }
  else {
    int v6 = 0;
  }
  int v10 = v6 | a4;
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  PipelineCache<PipelineKey>::getPipelineKey((unsigned __int8 *)a1, a2, a3, *(void *)(a1 + 40), &v10, (uint64_t)v8);
  return PipelineCache<PipelineKey>::getPipeline(a1, (uint64_t)v8, 0);
}

void *PipelineCache<PipelineKey>::getPipeline(unsigned __int8 *a1, unsigned __int8 a2, void *a3, unint64_t a4)
{
  int v8 = 3;
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  PipelineCache<PipelineKey>::getPipelineKey(a1, a2, a3, a4, &v8, (uint64_t)v6);
  return PipelineCache<PipelineKey>::getPipeline((uint64_t)a1, (uint64_t)v6, 0);
}

uint64_t getMTLSWBVHType(MTLAccelerationStructureDescriptor *a1)
{
  uint64_t v1 = objc_opt_class();
  if ([v1 isSubclassOfClass:objc_opt_class()]) {
    return 1;
  }
  float v3 = objc_opt_class();
  return [v3 isSubclassOfClass:objc_opt_class()];
}

BOOL getMTLSWBVHMotion(MTLAccelerationStructureDescriptor *a1)
{
  unint64_t v2 = objc_opt_class();
  if ([v2 isSubclassOfClass:objc_opt_class()])
  {
    uint64_t v3 = [(MTLAccelerationStructureDescriptor *)a1 instanceDescriptorType];
    uint64_t v4 = [(MTLAccelerationStructureDescriptor *)a1 instanceDescriptorType];
    return v3 == 2 || v4 == 4;
  }
  else
  {
    int v6 = objc_opt_class();
    if (![v6 isSubclassOfClass:objc_opt_class()]) {
      return (unint64_t)[(MTLAccelerationStructureDescriptor *)a1 motionKeyframeCount] > 1;
    }
    return [(MTLAccelerationStructureDescriptor *)a1 instanceDescriptorType] == 4;
  }
}

uint64_t getMTLSWBVHPrimitiveType(MTLAccelerationStructureDescriptor *a1)
{
  unint64_t v2 = objc_opt_class();
  if ([v2 isSubclassOfClass:objc_opt_class()])
  {
    uint64_t result = objc_msgSend((id)-[MTLAccelerationStructureDescriptor geometryDescriptors](a1, "geometryDescriptors"), "count");
    if (!result) {
      return result;
    }
    objc_msgSend((id)-[MTLAccelerationStructureDescriptor geometryDescriptors](a1, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
    uint64_t v4 = objc_opt_class();
    if (([v4 isSubclassOfClass:objc_opt_class()] & 1) == 0)
    {
      long long v5 = objc_opt_class();
      if (([v5 isSubclassOfClass:objc_opt_class()] & 1) == 0)
      {
        int v6 = objc_opt_class();
        if ([v6 isSubclassOfClass:objc_opt_class()]) {
          return 1;
        }
        uint64_t v7 = objc_opt_class();
        if ([v7 isSubclassOfClass:objc_opt_class()]) {
          return 1;
        }
        int v8 = objc_opt_class();
        if ([v8 isSubclassOfClass:objc_opt_class()]) {
          return 2;
        }
        uint64_t v9 = objc_opt_class();
        if ([v9 isSubclassOfClass:objc_opt_class()]) {
          return 2;
        }
      }
    }
  }
  return 0;
}

MTLBVHDescriptor *MTLBVHDescriptorForMTLAccelerationStructureDescriptor(void *a1)
{
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  v185 = objc_alloc_init(MTLBVHDescriptor);
  [(MTLBVHDescriptor *)v185 setPrimitiveKeyframeCount:1];
  [(MTLBVHDescriptor *)v185 setBranchingFactor:2];
  [(MTLBVHDescriptor *)v185 setMaxDepth:32];
  -[MTLBVHDescriptor setUseFastBuild:](v185, "setUseFastBuild:", ((unint64_t)[a1 usage] >> 1) & 1);
  BOOL v2 = !-[MTLBVHDescriptor useFastBuild](v185, "useFastBuild") && ([a1 usage] & 1) == 0;
  uint64_t v3 = objc_opt_class();
  if (![v3 isSubclassOfClass:objc_opt_class()])
  {
    BOOL v34 = objc_opt_class();
    if ([v34 isSubclassOfClass:objc_opt_class()])
    {
      [(MTLBVHDescriptor *)v185 setMaxPrimitivesPerLeaf:1];
      [(MTLBVHDescriptor *)v185 setMinPrimitivesPerLeaf:1];
      [(MTLBVHDescriptor *)v185 setSplitHeuristic:2];
      LODWORD(v35) = 1.0;
      [(MTLBVHDescriptor *)v185 setSplitCapacity:v35];
      -[MTLBVHDescriptor setDeterministic:](v185, "setDeterministic:", ((unint64_t)[a1 usage] >> 3) & 1);
      if ([a1 instanceDescriptorType] == 2 || objc_msgSend(a1, "instanceDescriptorType") == 4) {
        [(MTLBVHDescriptor *)v185 setMotion:1];
      }
      uint64_t v36 = objc_alloc_init(MTLBVHBoundingBoxGeometryDescriptor);
      v213 = objc_alloc_init(MTLMotionKeyframeData);
      -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxBuffers:](v36, "setBoundingBoxBuffers:", [MEMORY[0x1E4F1C978] arrayWithObjects:&v213 count:1]);
      if ([(MTLBVHDescriptor *)v185 motion]) {
        uint64_t v37 = 56;
      }
      else {
        uint64_t v37 = 24;
      }
      [(MTLBVHBoundingBoxGeometryDescriptor *)v36 setBoundingBoxStride:v37];
      -[MTLBVHGeometryDescriptor setPrimitiveCount:](v36, "setPrimitiveCount:", [a1 instanceCount]);
      -[MTLBVHDescriptor setGeometryDescriptors:](v185, "setGeometryDescriptors:", [MEMORY[0x1E4F1C978] arrayWithObject:v36]);
      uint64_t v38 = v36;
      uint64_t v39 = v185;
    }
    else
    {
      uint64_t v40 = objc_opt_class();
      if (![v40 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v44 = 0;
        uint64_t v11 = 0;
        uint64_t v39 = v185;
        goto LABEL_146;
      }
      uint64_t v39 = v185;
      [(MTLBVHDescriptor *)v185 setMaxPrimitivesPerLeaf:1];
      [(MTLBVHDescriptor *)v185 setMinPrimitivesPerLeaf:1];
      [(MTLBVHDescriptor *)v185 setSplitHeuristic:2];
      LODWORD(v41) = 1.0;
      [(MTLBVHDescriptor *)v185 setSplitCapacity:v41];
      -[MTLBVHDescriptor setMotion:](v185, "setMotion:", [a1 instanceDescriptorType] == 4);
      uint64_t v42 = objc_alloc_init(MTLBVHBoundingBoxGeometryDescriptor);
      v212 = objc_alloc_init(MTLMotionKeyframeData);
      -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxBuffers:](v42, "setBoundingBoxBuffers:", [MEMORY[0x1E4F1C978] arrayWithObjects:&v212 count:1]);
      if ([(MTLBVHDescriptor *)v185 motion]) {
        uint64_t v43 = 56;
      }
      else {
        uint64_t v43 = 24;
      }
      [(MTLBVHBoundingBoxGeometryDescriptor *)v42 setBoundingBoxStride:v43];
      -[MTLBVHGeometryDescriptor setPrimitiveCount:](v42, "setPrimitiveCount:", [a1 maxInstanceCount]);
      -[MTLBVHDescriptor setGeometryDescriptors:](v185, "setGeometryDescriptors:", [MEMORY[0x1E4F1C978] arrayWithObject:v42]);
      uint64_t v38 = v42;
    }
    uint64_t v11 = [(MTLBVHGeometryDescriptor *)v38 primitiveCount];
    uint64_t v44 = 0;
LABEL_146:
    [(MTLBVHDescriptor *)v39 setFragmentCount:v11];
    [(MTLBVHDescriptor *)v39 setPrimitiveDataSize:v44];
    return v185;
  }
  [(MTLBVHDescriptor *)v185 setMinPrimitivesPerLeaf:2];
  [(MTLBVHDescriptor *)v185 setMaxPrimitivesPerLeaf:32];
  -[MTLBVHDescriptor setPrimitiveKeyframeCount:](v185, "setPrimitiveKeyframeCount:", [a1 motionKeyframeCount]);
  [a1 motionStartTime];
  -[MTLBVHDescriptor setPrimitiveMotionStartTime:](v185, "setPrimitiveMotionStartTime:");
  [a1 motionEndTime];
  -[MTLBVHDescriptor setPrimitiveMotionEndTime:](v185, "setPrimitiveMotionEndTime:");
  [(MTLBVHDescriptor *)v185 setMotion:[(MTLBVHDescriptor *)v185 primitiveKeyframeCount] > 1];
  uint64_t v4 = (void *)[a1 geometryDescriptors];
  uint64_t v5 = objc_msgSend((id)objc_msgSend(a1, "geometryDescriptors"), "count");
  if (v5)
  {
    uint64_t v6 = v5;
    [v4 objectAtIndexedSubscript:0];
    v187 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v6];
    -[MTLBVHDescriptor setGeometryDescriptors:](v185, "setGeometryDescriptors:");
    uint64_t v7 = objc_opt_class();
    if ([v7 isSubclassOfClass:objc_opt_class()])
    {
      long long v210 = 0u;
      long long v211 = 0u;
      long long v208 = 0u;
      long long v209 = 0u;
      int v8 = (void *)[a1 geometryDescriptors];
      uint64_t v9 = [v8 countByEnumeratingWithState:&v208 objects:v219 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v186 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)v209;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v209 != v12) {
              objc_enumerationMutation(v8);
            }
            uint64_t v14 = *(void **)(*((void *)&v208 + 1) + 8 * i);
            if (v2
              && ![*(id *)(*((void *)&v208 + 1) + 8 * i) allowDuplicateIntersectionFunctionInvocation])
            {
              BOOL v2 = 0;
            }
            if ([(MTLBVHDescriptor *)v185 primitiveKeyframeCount] != 1)
            {
              uint64_t v29 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
              MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9387, @"Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and MTLAccelerationStructureTriangleGeometryDescriptor which can have only one keyframe).", v30, v31, v32, v33, v29);
            }
            uint64_t v15 = objc_alloc_init(MTLBVHPolygonGeometryDescriptor);
            [(MTLBVHPolygonGeometryDescriptor *)v15 setPolygonType:0];
            unsigned int v16 = objc_alloc_init(MTLMotionKeyframeData);
            -[MTLMotionKeyframeData setBuffer:](v16, "setBuffer:", [v14 vertexBuffer]);
            -[MTLMotionKeyframeData setOffset:](v16, "setOffset:", [v14 vertexBufferOffset]);
            -[MTLBVHPolygonGeometryDescriptor setVertexBuffers:](v15, "setVertexBuffers:", [MEMORY[0x1E4F1C978] arrayWithObject:v16]);
            uint64_t v17 = [v14 vertexStride];
            MTLAttributeFormat v18 = [v14 vertexFormat];
            if (!v17) {
              uint64_t v17 = MTLAttributeFormatSize(v18, v19, v20, v21, v22, v23, v24, v25);
            }
            [(MTLBVHPolygonGeometryDescriptor *)v15 setVertexStride:v17];
            -[MTLBVHPolygonGeometryDescriptor setVertexFormat:](v15, "setVertexFormat:", [v14 vertexFormat]);
            -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixBuffer:](v15, "setTransformationMatrixBuffer:", [v14 transformationMatrixBuffer]);
            -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixBufferOffset:](v15, "setTransformationMatrixBufferOffset:", [v14 transformationMatrixBufferOffset]);
            -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixLayout:](v15, "setTransformationMatrixLayout:", [v14 transformationMatrixLayout]);
            -[MTLBVHPolygonGeometryDescriptor setIndexBuffer:](v15, "setIndexBuffer:", [v14 indexBuffer]);
            -[MTLBVHPolygonGeometryDescriptor setIndexBufferOffset:](v15, "setIndexBufferOffset:", [v14 indexBufferOffset]);
            -[MTLBVHPolygonGeometryDescriptor setIndexType:](v15, "setIndexType:", [v14 indexType]);
            -[MTLBVHGeometryDescriptor setPrimitiveCount:](v15, "setPrimitiveCount:", [v14 triangleCount]);
            uint64_t v26 = [v14 primitiveDataBuffer];
            if (v26)
            {
              [(MTLBVHGeometryDescriptor *)v15 setPrimitiveDataBuffer:v26];
              -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v15, "setPrimitiveDataBufferOffset:", [v14 primitiveDataBufferOffset]);
              -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v15, "setPrimitiveDataStride:", [v14 primitiveDataStride]);
              -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v15, "setPrimitiveDataElementSize:", [v14 primitiveDataElementSize]);
            }
            [v187 addObject:v15];
            uint64_t v27 = [(MTLBVHGeometryDescriptor *)v15 primitiveCount];
            if ([v14 primitiveDataBuffer] && objc_msgSend(v14, "primitiveDataElementSize"))
            {
              uint64_t v28 = [(MTLBVHGeometryDescriptor *)v15 primitiveCount];
              v186 += ([v14 primitiveDataElementSize] * v28 + 255) & 0xFFFFFFFFFFFFFF00;
            }
            v11 += v27;
          }
          uint64_t v10 = [v8 countByEnumeratingWithState:&v208 objects:v219 count:16];
        }
        while (v10);
        if (!v2) {
          goto LABEL_144;
        }
LABEL_87:
        uint64_t v39 = v185;
        [(MTLBVHDescriptor *)v185 setSplitHeuristic:3];
        LODWORD(v118) = 2.0;
LABEL_145:
        [(MTLBVHDescriptor *)v39 setSplitCapacity:v118];
        uint64_t v44 = v186;
        goto LABEL_146;
      }
      uint64_t v186 = 0;
      uint64_t v11 = 0;
      if (v2) {
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v45 = objc_opt_class();
      if ([v45 isSubclassOfClass:objc_opt_class()])
      {
        [(MTLBVHDescriptor *)v185 setMaxPrimitivesPerLeaf:1];
        [(MTLBVHDescriptor *)v185 setMinPrimitivesPerLeaf:1];
        long long v206 = 0u;
        long long v207 = 0u;
        long long v204 = 0u;
        long long v205 = 0u;
        obuint64_t j = (id)[a1 geometryDescriptors];
        uint64_t v46 = [obj countByEnumeratingWithState:&v204 objects:v218 count:16];
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t v186 = 0;
          uint64_t v11 = 0;
          uint64_t v48 = *(void *)v205;
          do
          {
            for (uint64_t j = 0; j != v47; ++j)
            {
              if (*(void *)v205 != v48) {
                objc_enumerationMutation(obj);
              }
              uint64_t v50 = *(void **)(*((void *)&v204 + 1) + 8 * j);
              if ([(MTLBVHDescriptor *)v185 primitiveKeyframeCount] != 1)
              {
                uint64_t v75 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
                MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9436, @"Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and MTLAccelerationStructureCurveGeometryDescriptor which can have only one keyframe).", v76, v77, v78, v79, v75);
              }
              uint64_t v51 = objc_alloc_init(MTLBVHCurveGeometryDescriptor);
              uint64_t v52 = objc_alloc_init(MTLMotionKeyframeData);
              -[MTLMotionKeyframeData setBuffer:](v52, "setBuffer:", [v50 controlPointBuffer]);
              -[MTLMotionKeyframeData setOffset:](v52, "setOffset:", [v50 controlPointBufferOffset]);
              -[MTLBVHCurveGeometryDescriptor setControlPointBuffers:](v51, "setControlPointBuffers:", [MEMORY[0x1E4F1C978] arrayWithObject:v52]);
              int v53 = objc_alloc_init(MTLMotionKeyframeData);
              -[MTLMotionKeyframeData setBuffer:](v53, "setBuffer:", [v50 radiusBuffer]);
              -[MTLMotionKeyframeData setOffset:](v53, "setOffset:", [v50 radiusBufferOffset]);
              -[MTLBVHCurveGeometryDescriptor setRadiusBuffers:](v51, "setRadiusBuffers:", [MEMORY[0x1E4F1C978] arrayWithObject:v53]);
              uint64_t v54 = [v50 controlPointStride];
              MTLAttributeFormat v55 = [v50 controlPointFormat];
              if (!v54) {
                uint64_t v54 = MTLAttributeFormatSize(v55, v56, v57, v58, v59, v60, v61, v62);
              }
              [(MTLBVHCurveGeometryDescriptor *)v51 setControlPointStride:v54];
              -[MTLBVHCurveGeometryDescriptor setControlPointFormat:](v51, "setControlPointFormat:", [v50 controlPointFormat]);
              uint64_t v63 = [v50 radiusStride];
              MTLAttributeFormat v64 = [v50 radiusFormat];
              if (!v63) {
                uint64_t v63 = MTLAttributeFormatSize(v64, v65, v66, v67, v68, v69, v70, v71);
              }
              [(MTLBVHCurveGeometryDescriptor *)v51 setRadiusStride:v63];
              -[MTLBVHCurveGeometryDescriptor setRadiusFormat:](v51, "setRadiusFormat:", [v50 radiusFormat]);
              -[MTLBVHCurveGeometryDescriptor setControlPointCount:](v51, "setControlPointCount:", [v50 controlPointCount]);
              -[MTLBVHCurveGeometryDescriptor setIndexBuffer:](v51, "setIndexBuffer:", [v50 indexBuffer]);
              -[MTLBVHCurveGeometryDescriptor setIndexBufferOffset:](v51, "setIndexBufferOffset:", [v50 indexBufferOffset]);
              -[MTLBVHCurveGeometryDescriptor setIndexType:](v51, "setIndexType:", [v50 indexType]);
              -[MTLBVHGeometryDescriptor setPrimitiveCount:](v51, "setPrimitiveCount:", [v50 segmentCount]);
              -[MTLBVHCurveGeometryDescriptor setSegmentControlPointCount:](v51, "setSegmentControlPointCount:", [v50 segmentControlPointCount]);
              -[MTLBVHCurveGeometryDescriptor setCurveType:](v51, "setCurveType:", [v50 curveType]);
              -[MTLBVHCurveGeometryDescriptor setCurveBasis:](v51, "setCurveBasis:", [v50 curveBasis]);
              -[MTLBVHCurveGeometryDescriptor setCurveEndCaps:](v51, "setCurveEndCaps:", [v50 endCaps]);
              uint64_t v72 = [v50 primitiveDataBuffer];
              if (v72)
              {
                [(MTLBVHGeometryDescriptor *)v51 setPrimitiveDataBuffer:v72];
                -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v51, "setPrimitiveDataBufferOffset:", [v50 primitiveDataBufferOffset]);
                -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v51, "setPrimitiveDataStride:", [v50 primitiveDataStride]);
                -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v51, "setPrimitiveDataElementSize:", [v50 primitiveDataElementSize]);
              }
              [v187 addObject:v51];
              uint64_t v73 = [(MTLBVHGeometryDescriptor *)v51 primitiveCount];
              if ([v50 primitiveDataBuffer] && objc_msgSend(v50, "primitiveDataElementSize"))
              {
                uint64_t v74 = [(MTLBVHGeometryDescriptor *)v51 primitiveCount];
                v186 += ([v50 primitiveDataElementSize] * v74 + 255) & 0xFFFFFFFFFFFFFF00;
              }
              v11 += v73;
            }
            uint64_t v47 = [obj countByEnumeratingWithState:&v204 objects:v218 count:16];
          }
          while (v47);
          goto LABEL_144;
        }
      }
      else
      {
        std::string::size_type v80 = objc_opt_class();
        if ([v80 isSubclassOfClass:objc_opt_class()])
        {
          [(MTLBVHDescriptor *)v185 setMaxPrimitivesPerLeaf:1];
          [(MTLBVHDescriptor *)v185 setMinPrimitivesPerLeaf:1];
          long long v202 = 0u;
          long long v203 = 0u;
          long long v200 = 0u;
          long long v201 = 0u;
          id obja = (id)[a1 geometryDescriptors];
          uint64_t v81 = [obja countByEnumeratingWithState:&v200 objects:v217 count:16];
          if (v81)
          {
            uint64_t v82 = v81;
            uint64_t v186 = 0;
            uint64_t v11 = 0;
            uint64_t v83 = *(void *)v201;
            do
            {
              uint64_t v84 = 0;
              uint64_t v85 = v186;
              do
              {
                if (*(void *)v201 != v83) {
                  objc_enumerationMutation(obja);
                }
                int v86 = *(void **)(*((void *)&v200 + 1) + 8 * v84);
                uint64_t v87 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
                if (v87 != objc_msgSend((id)objc_msgSend(v86, "controlPointBuffers"), "count"))
                {
                  uint64_t v113 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
                  objc_msgSend((id)objc_msgSend(v86, "controlPointBuffers"), "count");
                  MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9490, @"Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and and one of the MTLAccelerationStructureMotionCurveGeometryDescriptor has %lu keyframes).", v114, v115, v116, v117, v113);
                }
                int v88 = objc_alloc_init(MTLBVHCurveGeometryDescriptor);
                if (objc_msgSend((id)objc_msgSend(v86, "controlPointBuffers"), "count"))
                {
                  -[MTLBVHCurveGeometryDescriptor setControlPointBuffers:](v88, "setControlPointBuffers:", [v86 controlPointBuffers]);
                  uint64_t v89 = [v86 radiusBuffers];
                }
                else
                {
                  uint64_t v90 = objc_alloc_init(MTLMotionKeyframeData);
                  [(MTLMotionKeyframeData *)v90 setBuffer:0];
                  [(MTLMotionKeyframeData *)v90 setOffset:0];
                  -[MTLBVHCurveGeometryDescriptor setControlPointBuffers:](v88, "setControlPointBuffers:", [MEMORY[0x1E4F1C978] arrayWithObject:v90]);
                  int64_t v91 = objc_alloc_init(MTLMotionKeyframeData);
                  [(MTLMotionKeyframeData *)v91 setBuffer:0];
                  [(MTLMotionKeyframeData *)v91 setOffset:0];
                  uint64_t v89 = [MEMORY[0x1E4F1C978] arrayWithObject:v91];
                }
                [(MTLBVHCurveGeometryDescriptor *)v88 setRadiusBuffers:v89];
                uint64_t v92 = [v86 controlPointStride];
                MTLAttributeFormat v93 = [v86 controlPointFormat];
                if (!v92) {
                  uint64_t v92 = MTLAttributeFormatSize(v93, v94, v95, v96, v97, v98, v99, v100);
                }
                [(MTLBVHCurveGeometryDescriptor *)v88 setControlPointStride:v92];
                -[MTLBVHCurveGeometryDescriptor setControlPointFormat:](v88, "setControlPointFormat:", [v86 controlPointFormat]);
                uint64_t v101 = [v86 radiusStride];
                MTLAttributeFormat v102 = [v86 radiusFormat];
                if (!v101) {
                  uint64_t v101 = MTLAttributeFormatSize(v102, v103, v104, v105, v106, v107, v108, v109);
                }
                [(MTLBVHCurveGeometryDescriptor *)v88 setRadiusStride:v101];
                -[MTLBVHCurveGeometryDescriptor setRadiusFormat:](v88, "setRadiusFormat:", [v86 radiusFormat]);
                -[MTLBVHCurveGeometryDescriptor setControlPointCount:](v88, "setControlPointCount:", [v86 controlPointCount]);
                -[MTLBVHCurveGeometryDescriptor setIndexBuffer:](v88, "setIndexBuffer:", [v86 indexBuffer]);
                -[MTLBVHCurveGeometryDescriptor setIndexBufferOffset:](v88, "setIndexBufferOffset:", [v86 indexBufferOffset]);
                -[MTLBVHCurveGeometryDescriptor setIndexType:](v88, "setIndexType:", [v86 indexType]);
                -[MTLBVHGeometryDescriptor setPrimitiveCount:](v88, "setPrimitiveCount:", [v86 segmentCount]);
                -[MTLBVHCurveGeometryDescriptor setSegmentControlPointCount:](v88, "setSegmentControlPointCount:", [v86 segmentControlPointCount]);
                -[MTLBVHCurveGeometryDescriptor setCurveType:](v88, "setCurveType:", [v86 curveType]);
                -[MTLBVHCurveGeometryDescriptor setCurveBasis:](v88, "setCurveBasis:", [v86 curveBasis]);
                -[MTLBVHCurveGeometryDescriptor setCurveEndCaps:](v88, "setCurveEndCaps:", [v86 endCaps]);
                uint64_t v110 = [v86 primitiveDataBuffer];
                if (v110)
                {
                  [(MTLBVHGeometryDescriptor *)v88 setPrimitiveDataBuffer:v110];
                  -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v88, "setPrimitiveDataBufferOffset:", [v86 primitiveDataBufferOffset]);
                  -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v88, "setPrimitiveDataStride:", [v86 primitiveDataStride]);
                  -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v88, "setPrimitiveDataElementSize:", [v86 primitiveDataElementSize]);
                }
                [v187 addObject:v88];
                uint64_t v111 = [(MTLBVHGeometryDescriptor *)v88 primitiveCount];
                if ([v86 primitiveDataBuffer] && objc_msgSend(v86, "primitiveDataElementSize"))
                {
                  uint64_t v112 = [(MTLBVHGeometryDescriptor *)v88 primitiveCount];
                  v85 += ([v86 primitiveDataElementSize] * v112 + 255) & 0xFFFFFFFFFFFFFF00;
                }
                v11 += v111;
                ++v84;
              }
              while (v82 != v84);
              uint64_t v186 = v85;
              uint64_t v82 = [obja countByEnumeratingWithState:&v200 objects:v217 count:16];
            }
            while (v82);
            goto LABEL_144;
          }
        }
        else
        {
          uint64_t v119 = objc_opt_class();
          if ([v119 isSubclassOfClass:objc_opt_class()])
          {
            long long v198 = 0u;
            long long v199 = 0u;
            long long v196 = 0u;
            long long v197 = 0u;
            uint64_t v120 = (void *)[a1 geometryDescriptors];
            uint64_t v121 = [v120 countByEnumeratingWithState:&v196 objects:v216 count:16];
            if (v121)
            {
              uint64_t v122 = v121;
              uint64_t v186 = 0;
              uint64_t v11 = 0;
              uint64_t v123 = *(void *)v197;
              do
              {
                for (uint64_t k = 0; k != v122; ++k)
                {
                  if (*(void *)v197 != v123) {
                    objc_enumerationMutation(v120);
                  }
                  unsigned __int8 v125 = *(void **)(*((void *)&v196 + 1) + 8 * k);
                  uint64_t v126 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
                  if (v126 != objc_msgSend((id)objc_msgSend(v125, "vertexBuffers"), "count"))
                  {
                    uint64_t v142 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
                    objc_msgSend((id)objc_msgSend(v125, "vertexBuffers"), "count");
                    MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9558, @"Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and one of the MTLAccelerationStructureMotionTriangleGeometryDescriptor has %lu keyframes).", v143, v144, v145, v146, v142);
                  }
                  uint64_t v127 = objc_alloc_init(MTLBVHPolygonGeometryDescriptor);
                  [(MTLBVHPolygonGeometryDescriptor *)v127 setPolygonType:0];
                  if (objc_msgSend((id)objc_msgSend(v125, "vertexBuffers"), "count"))
                  {
                    uint64_t v128 = [v125 vertexBuffers];
                  }
                  else
                  {
                    v129 = objc_alloc_init(MTLMotionKeyframeData);
                    [(MTLMotionKeyframeData *)v129 setBuffer:0];
                    [(MTLMotionKeyframeData *)v129 setOffset:0];
                    uint64_t v128 = [MEMORY[0x1E4F1C978] arrayWithObject:v129];
                  }
                  [(MTLBVHPolygonGeometryDescriptor *)v127 setVertexBuffers:v128];
                  uint64_t v130 = [v125 vertexStride];
                  MTLAttributeFormat v131 = [v125 vertexFormat];
                  if (!v130) {
                    uint64_t v130 = MTLAttributeFormatSize(v131, v132, v133, v134, v135, v136, v137, v138);
                  }
                  [(MTLBVHPolygonGeometryDescriptor *)v127 setVertexStride:v130];
                  -[MTLBVHPolygonGeometryDescriptor setVertexFormat:](v127, "setVertexFormat:", [v125 vertexFormat]);
                  -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixBuffer:](v127, "setTransformationMatrixBuffer:", [v125 transformationMatrixBuffer]);
                  -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixBufferOffset:](v127, "setTransformationMatrixBufferOffset:", [v125 transformationMatrixBufferOffset]);
                  -[MTLBVHPolygonGeometryDescriptor setTransformationMatrixLayout:](v127, "setTransformationMatrixLayout:", [v125 transformationMatrixLayout]);
                  -[MTLBVHPolygonGeometryDescriptor setIndexBuffer:](v127, "setIndexBuffer:", [v125 indexBuffer]);
                  -[MTLBVHPolygonGeometryDescriptor setIndexBufferOffset:](v127, "setIndexBufferOffset:", [v125 indexBufferOffset]);
                  -[MTLBVHPolygonGeometryDescriptor setIndexType:](v127, "setIndexType:", [v125 indexType]);
                  -[MTLBVHGeometryDescriptor setPrimitiveCount:](v127, "setPrimitiveCount:", [v125 triangleCount]);
                  uint64_t v139 = [v125 primitiveDataBuffer];
                  if (v139)
                  {
                    [(MTLBVHGeometryDescriptor *)v127 setPrimitiveDataBuffer:v139];
                    -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v127, "setPrimitiveDataBufferOffset:", [v125 primitiveDataBufferOffset]);
                    -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v127, "setPrimitiveDataStride:", [v125 primitiveDataStride]);
                    -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v127, "setPrimitiveDataElementSize:", [v125 primitiveDataElementSize]);
                  }
                  [v187 addObject:v127];
                  uint64_t v140 = [(MTLBVHGeometryDescriptor *)v127 primitiveCount];
                  if ([v125 primitiveDataBuffer] && objc_msgSend(v125, "primitiveDataElementSize"))
                  {
                    uint64_t v141 = [(MTLBVHGeometryDescriptor *)v127 primitiveCount];
                    v186 += ([v125 primitiveDataElementSize] * v141 + 255) & 0xFFFFFFFFFFFFFF00;
                  }
                  v11 += v140;
                }
                uint64_t v122 = [v120 countByEnumeratingWithState:&v196 objects:v216 count:16];
              }
              while (v122);
              goto LABEL_144;
            }
          }
          else
          {
            v147 = objc_opt_class();
            LODWORD(v147) = [v147 isSubclassOfClass:objc_opt_class()];
            [(MTLBVHDescriptor *)v185 setMaxPrimitivesPerLeaf:1];
            [(MTLBVHDescriptor *)v185 setMinPrimitivesPerLeaf:1];
            if (v147)
            {
              long long v194 = 0uLL;
              long long v195 = 0uLL;
              long long v192 = 0uLL;
              long long v193 = 0uLL;
              v148 = (void *)[a1 geometryDescriptors];
              uint64_t v149 = [v148 countByEnumeratingWithState:&v192 objects:v215 count:16];
              if (v149)
              {
                uint64_t v150 = v149;
                uint64_t v186 = 0;
                uint64_t v11 = 0;
                uint64_t v151 = *(void *)v193;
                do
                {
                  for (uint64_t m = 0; m != v150; ++m)
                  {
                    if (*(void *)v193 != v151) {
                      objc_enumerationMutation(v148);
                    }
                    v153 = *(void **)(*((void *)&v192 + 1) + 8 * m);
                    uint64_t v154 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
                    if (v154 != objc_msgSend((id)objc_msgSend(v153, "boundingBoxBuffers"), "count"))
                    {
                      uint64_t v161 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
                      objc_msgSend((id)objc_msgSend(v153, "boundingBoxBuffers"), "count");
                      MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9620, @"Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and one of the MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor has %lu keyframes).", v162, v163, v164, v165, v161);
                    }
                    v155 = objc_alloc_init(MTLBVHBoundingBoxGeometryDescriptor);
                    if (objc_msgSend((id)objc_msgSend(v153, "boundingBoxBuffers"), "count"))
                    {
                      uint64_t v156 = [v153 boundingBoxBuffers];
                    }
                    else
                    {
                      v157 = objc_alloc_init(MTLMotionKeyframeData);
                      [(MTLMotionKeyframeData *)v157 setBuffer:0];
                      [(MTLMotionKeyframeData *)v157 setOffset:0];
                      uint64_t v156 = [MEMORY[0x1E4F1C978] arrayWithObject:v157];
                    }
                    [(MTLBVHBoundingBoxGeometryDescriptor *)v155 setBoundingBoxBuffers:v156];
                    -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxStride:](v155, "setBoundingBoxStride:", [v153 boundingBoxStride]);
                    -[MTLBVHGeometryDescriptor setPrimitiveCount:](v155, "setPrimitiveCount:", [v153 boundingBoxCount]);
                    uint64_t v158 = [v153 primitiveDataBuffer];
                    if (v158)
                    {
                      [(MTLBVHGeometryDescriptor *)v155 setPrimitiveDataBuffer:v158];
                      -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v155, "setPrimitiveDataBufferOffset:", [v153 primitiveDataBufferOffset]);
                      -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v155, "setPrimitiveDataStride:", [v153 primitiveDataStride]);
                      -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v155, "setPrimitiveDataElementSize:", [v153 primitiveDataElementSize]);
                    }
                    [v187 addObject:v155];
                    uint64_t v159 = [(MTLBVHGeometryDescriptor *)v155 primitiveCount];
                    if ([v153 primitiveDataBuffer] && objc_msgSend(v153, "primitiveDataElementSize"))
                    {
                      uint64_t v160 = [(MTLBVHGeometryDescriptor *)v155 primitiveCount];
                      v186 += ([v153 primitiveDataElementSize] * v160 + 255) & 0xFFFFFFFFFFFFFF00;
                    }
                    v11 += v159;
                  }
                  uint64_t v150 = [v148 countByEnumeratingWithState:&v192 objects:v215 count:16];
                }
                while (v150);
                goto LABEL_144;
              }
            }
            else
            {
              long long v190 = 0uLL;
              long long v191 = 0uLL;
              long long v188 = 0uLL;
              long long v189 = 0uLL;
              v166 = (void *)[a1 geometryDescriptors];
              uint64_t v167 = [v166 countByEnumeratingWithState:&v188 objects:v214 count:16];
              if (v167)
              {
                uint64_t v168 = v167;
                uint64_t v186 = 0;
                uint64_t v11 = 0;
                uint64_t v169 = *(void *)v189;
                do
                {
                  for (uint64_t n = 0; n != v168; ++n)
                  {
                    if (*(void *)v189 != v169) {
                      objc_enumerationMutation(v166);
                    }
                    v171 = *(void **)(*((void *)&v188 + 1) + 8 * n);
                    if ([(MTLBVHDescriptor *)v185 primitiveKeyframeCount] != 1)
                    {
                      uint64_t v177 = [(MTLBVHDescriptor *)v185 primitiveKeyframeCount];
                      MTLReportFailure(0, "MTLBVHDescriptorForMTLAccelerationStructureDescriptor", 9655, @"Motion keyframe count mismatch in MTLPrimitiveAccelerationStructureDescriptor (MTLPrimitiveAccelerationStructureDescriptor has %lu keyframes and MTLAccelerationStructureBoundingBoxGeometryDescriptor which can have only one keyframe).", v178, v179, v180, v181, v177);
                    }
                    v172 = objc_alloc_init(MTLBVHBoundingBoxGeometryDescriptor);
                    v173 = objc_alloc_init(MTLMotionKeyframeData);
                    -[MTLMotionKeyframeData setBuffer:](v173, "setBuffer:", [v171 boundingBoxBuffer]);
                    -[MTLMotionKeyframeData setOffset:](v173, "setOffset:", [v171 boundingBoxBufferOffset]);
                    -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxBuffers:](v172, "setBoundingBoxBuffers:", [MEMORY[0x1E4F1C978] arrayWithObject:v173]);
                    -[MTLBVHBoundingBoxGeometryDescriptor setBoundingBoxStride:](v172, "setBoundingBoxStride:", [v171 boundingBoxStride]);
                    -[MTLBVHGeometryDescriptor setPrimitiveCount:](v172, "setPrimitiveCount:", [v171 boundingBoxCount]);
                    uint64_t v174 = [v171 primitiveDataBuffer];
                    if (v174)
                    {
                      [(MTLBVHGeometryDescriptor *)v172 setPrimitiveDataBuffer:v174];
                      -[MTLBVHGeometryDescriptor setPrimitiveDataBufferOffset:](v172, "setPrimitiveDataBufferOffset:", [v171 primitiveDataBufferOffset]);
                      -[MTLBVHGeometryDescriptor setPrimitiveDataStride:](v172, "setPrimitiveDataStride:", [v171 primitiveDataStride]);
                      -[MTLBVHGeometryDescriptor setPrimitiveDataElementSize:](v172, "setPrimitiveDataElementSize:", [v171 primitiveDataElementSize]);
                    }
                    [v187 addObject:v172];
                    uint64_t v175 = [(MTLBVHGeometryDescriptor *)v172 primitiveCount];
                    if ([v171 primitiveDataBuffer] && objc_msgSend(v171, "primitiveDataElementSize"))
                    {
                      uint64_t v176 = [(MTLBVHGeometryDescriptor *)v172 primitiveCount];
                      v186 += ([v171 primitiveDataElementSize] * v176 + 255) & 0xFFFFFFFFFFFFFF00;
                    }
                    v11 += v175;
                  }
                  uint64_t v168 = [v166 countByEnumeratingWithState:&v188 objects:v214 count:16];
                }
                while (v168);
                goto LABEL_144;
              }
            }
          }
        }
      }
      uint64_t v11 = 0;
      uint64_t v186 = 0;
    }
LABEL_144:
    uint64_t v39 = v185;
    [(MTLBVHDescriptor *)v185 setSplitHeuristic:2];
    LODWORD(v118) = 1.0;
    goto LABEL_145;
  }
  return v185;
}

uint64_t ___ZL41refitUpdatesOpacityAndFunctionTableOffsetv_block_invoke()
{
  uint64_t result = dyld_program_sdk_at_least();
  refitUpdatesOpacityAndFunctionTableOffset(void)::useNewRefitBehavior = result;
  return result;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 84);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 84));
  long long v7 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v7;
  uint64_t v14 = *(void *)(a2 + 32);
  int v8 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>((void *)a1, (int *)v13);
  if (v8)
  {
    uint64_t v9 = v8;
    os_unfair_lock_unlock(v6);
    if (a3) {
      *a3 = v9[8];
    }
    return (void *)v9[7];
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 72);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, a2);
    PipelineCache<PipelineKey>::addPipeline(a1, a2, v10);
    os_unfair_lock_unlock(v6);
    if (a3) {
      *a3 = [v10 threadExecutionWidth];
    }
  }
  return v10;
}

void *PipelineCache<PipelineKey>::addPipeline(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = [a3 threadExecutionWidth];
  long long v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = v10;
  uint64_t result = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>(a1, (int *)v10, (uint64_t)&std::piecewise_construct, &v12);
  result[7] = v6;
  result[8] = v7;
  return result;
}

void sub_1827C3078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>(void *a1, int *a2)
{
  unsigned int v4 = _MTLHashState(a2, 0x28uLL);
  unint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v5 <= v4) {
      unint64_t v9 = v4 % v5;
    }
  }
  else
  {
    unint64_t v9 = (v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (!memcmp(v11 + 2, a2, 0x28uLL)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= v5) {
            v12 %= v5;
          }
        }
        else
        {
          v12 &= v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x18530C140);
}

void *std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _OWORD **a4)
{
  unsigned int v8 = _MTLHashState(a2, 0x28uLL);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v10 <= v8) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (!memcmp(v14 + 2, a2, 0x28uLL)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  unsigned int v16 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x48uLL);
  *uint64_t v14 = 0;
  v14[1] = v9;
  long long v17 = (*a4)[1];
  uint64_t v18 = *((void *)*a4 + 4);
  *((_OWORD *)v14 + 1) = **a4;
  *((_OWORD *)v14 + 2) = v17;
  v14[6] = v18;
  v14[7] = 0;
  v14[8] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *uint64_t v14 = *v26;
LABEL_38:
    *uint64_t v26 = v14;
    goto LABEL_39;
  }
  *uint64_t v14 = *v16;
  *unsigned int v16 = v14;
  *(void *)(v25 + 8 * v4) = v16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10) {
        v27 %= v10;
      }
    }
    else
    {
      v27 &= v10 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1827C3478(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void *std::__function::__value_func<objc_object  {objcproto23MTLComputePipelineState}* ()(PipelineKey const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1827C385C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<objc_object  {objcproto23MTLComputePipelineState}* ()(PipelineKey const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, unsigned __int8 a2, unint64_t a3, int a4)
{
  *(_OWORD *)&v10[4] = 0u;
  long long v11 = 0u;
  int v9 = a2;
  if (!a3) {
    a3 = *(void *)(a1 + 40);
  }
  double v6 = log2((double)a3);
  uint64_t v7 = 16;
  if (!a4) {
    uint64_t v7 = 0;
  }
  *(void *)unint64_t v10 = v7 | ((v6 & 0xF) << 13);
  return PipelineCache<PipelineKey>::getPipeline(a1, (uint64_t)&v9);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  double v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unsigned int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v4, v13);
      unsigned int v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    unsigned int v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    long long v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t MTLCreateStructTypeFromArgumentDescriptors(void *a1)
{
  std::vector<MTLStructMember *>::vector(__p, [a1 count]);
  uint64_t v2 = 0;
  int v3 = 0;
  for (unint64_t i = 0; i < [a1 count]; ++i)
  {
    uint64_t v42 = (void *)[a1 objectAtIndexedSubscript:i];
    uint64_t v5 = [v42 dataType];
    if (v5 > 78)
    {
      switch(v5)
      {
        case 's':
          unint64_t v10 = [MTLBindingInternal alloc];
          uint64_t v40 = [v42 access];
          uint64_t v11 = [v42 index];
          uint64_t v12 = 24;
          break;
        case 't':
          unint64_t v10 = [MTLBindingInternal alloc];
          uint64_t v40 = [v42 access];
          uint64_t v11 = [v42 index];
          uint64_t v12 = 27;
          break;
        case 'u':
          unint64_t v10 = [MTLBindingInternal alloc];
          uint64_t v40 = [v42 access];
          uint64_t v11 = [v42 index];
          uint64_t v12 = 25;
          break;
        case 'v':
          unint64_t v10 = [MTLBindingInternal alloc];
          uint64_t v40 = [v42 access];
          uint64_t v11 = [v42 index];
          uint64_t v12 = 26;
          break;
        default:
          if (v5 == 79)
          {
            unint64_t v10 = [MTLBindingInternal alloc];
            uint64_t v40 = [v42 access];
            uint64_t v11 = [v42 index];
            uint64_t v12 = 20;
          }
          else
          {
            if (v5 != 80) {
              goto LABEL_29;
            }
            unint64_t v10 = [MTLBindingInternal alloc];
            uint64_t v40 = [v42 access];
            uint64_t v11 = [v42 index];
            uint64_t v12 = 21;
          }
          break;
      }
LABEL_22:
      double v41 = [(MTLBindingInternal *)v10 initWithName:&stru_1ECAC84A8 type:v12 access:v40 index:v11 active:1 arrayLength:1];
LABEL_23:
      int v3 = 0;
      unint64_t Alignment = 8;
      uint64_t Size = 8;
      goto LABEL_24;
    }
    if (v5 > 59)
    {
      if (v5 == 60)
      {
        LOBYTE(v36) = 0;
        double v41 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:]([MTLBufferBindingInternal alloc], "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", &stru_1ECAC84A8, 0, [v42 access], 1, objc_msgSend(v42, "index"), 1, 0, 0, 0, v36, 0, 1);
        goto LABEL_23;
      }
      if (v5 == 78)
      {
        unint64_t v10 = [MTLBindingInternal alloc];
        uint64_t v40 = [v42 access];
        uint64_t v11 = [v42 index];
        uint64_t v12 = 19;
        goto LABEL_22;
      }
    }
    else
    {
      if (v5 == 58)
      {
        LOBYTE(v34) = 0;
        double v41 = -[MTLTextureBindingInternal initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:]([MTLTextureBindingInternal alloc], "initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:", &stru_1ECAC84A8, [v42 access], 1, objc_msgSend(v42, "index"), 1, 3, objc_msgSend(v42, "textureType"), v34);
        goto LABEL_23;
      }
      if (v5 == 59)
      {
        unint64_t v10 = [MTLBindingInternal alloc];
        uint64_t v40 = [v42 access];
        uint64_t v11 = [v42 index];
        uint64_t v12 = 3;
        goto LABEL_22;
      }
      if ((unint64_t)v5 < 3)
      {
        MTLReportFailure(0, "MTLCreateStructTypeFromArgumentDescriptors", 464, @"Invalid argument type at index %lu", v6, v7, v8, v9, i);
        abort();
      }
    }
LABEL_29:
    switch([v42 dataType])
    {
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 121:
      case 122:
      case 123:
      case 124:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
        break;
      default:
        size_t v24 = MTLDataTypeString([v42 dataType]);
        MTLReportFailure(0, "MTLCreateStructTypeFromArgumentDescriptors", 432, @"dataType (%@) is not a valid data type", v25, v26, v27, v28, (uint64_t)v24);
        break;
    }
    uint64_t Size = MTLDataTypeGetSize([v42 dataType]);
    unint64_t Alignment = MTLDataTypeGetAlignment([v42 dataType]);
    if ([v42 constantBlockAlignment])
    {
      if (v3) {
        MTLReportFailure(0, "MTLCreateStructTypeFromArgumentDescriptors", 440, @"Constant block alignment can only be set the first constant in a constant block", v18, v19, v20, v21, v33);
      }
      unint64_t v22 = [v42 constantBlockAlignment];
      unint64_t v23 = Alignment;
      if (Alignment <= v22) {
        unint64_t v23 = v22;
      }
      unint64_t Alignment = v23;
    }
    int v3 = 1;
    double v41 = -[MTLIndirectConstantArgument initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:]([MTLIndirectConstantArgument alloc], "initWithName:type:access:isActive:locationIndex:dataType:pixelFormat:aluType:dataSize:alignment:", &stru_1ECAC84A8, 4, [v42 access], 1, objc_msgSend(v42, "index"), objc_msgSend(v42, "dataType"), 0, 0, Size, MTLDataTypeGetAlignment(objc_msgSend(v42, "dataType")));
LABEL_24:
    uint64_t v13 = [v42 arrayLength];
    uint64_t v14 = v2 + Alignment - 1;
    uint64_t v15 = v14 & -(uint64_t)Alignment;
    if (v13)
    {
      uint64_t v37 = v14 & -(uint64_t)Alignment;
      uint64_t v34 = 0xFFFFFFFFLL;
      double v35 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayTypeInternal alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", [v42 arrayLength], 57, Size, 0, 0, v41);
      uint64_t v33 = 0xFFFFFFFFLL;
      unsigned int v16 = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:]([MTLStructMemberInternal alloc], "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", &stru_1ECAC84A8, v37, 2, 0, 0, [(MTLBindingInternal *)v41 index]);
      *((void *)__p[0] + i) = v16;

      Size *= [v42 arrayLength];
      uint64_t v15 = v37;
    }
    else
    {
      uint64_t v34 = 0xFFFFFFFFLL;
      uint64_t v33 = 0xFFFFFFFFLL;
      long long v17 = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:]([MTLStructMemberInternal alloc], "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", &stru_1ECAC84A8, v15, 57, 0, 0, [(MTLBindingInternal *)v41 index]);
      *((void *)__p[0] + i) = v17;
    }

    uint64_t v2 = Size + v15;
  }
  uint64_t v29 = [MTLStructType alloc];
  uint64_t v30 = -[MTLStructType initWithMembers:count:](v29, "initWithMembers:count:", __p[0], [a1 count]);
  for (unint64_t j = 0; [a1 count] > j; ++j)

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v30;
}

void sub_1827C56FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLIndirectResourceEnumerator::collectIndirectResources(MTLIndirectResourceEnumerator *this, MTLPointerTypeInternal *a2)
{
  if ([(MTLPointerTypeInternal *)a2 elementIsArgumentBuffer]
    && [(MTLPointerTypeInternal *)a2 elementTypeDescription])
  {
    (*(void (**)(void))(*(void *)this + 16))();
  }
  return 1;
}

unint64_t MTLIndirectResourceEnumerator::collectIndirectResources(MTLIndirectResourceEnumerator *this, MTLArrayType *a2, unint64_t a3)
{
  NSUInteger v6 = [(MTLArrayType *)a2 arrayLength];
  if (v6)
  {
    NSUInteger v7 = v6;
    unint64_t v8 = 0;
    unint64_t v9 = a3;
    while (1)
    {
      MTLDataType v10 = [(MTLArrayType *)a2 elementType];
      if (v10 - 58 <= 0x16)
      {
        if (((1 << (v10 - 58)) & 0x700003) != 0) {
          goto LABEL_5;
        }
        if (v10 == MTLDataTypePointer) {
          goto LABEL_15;
        }
      }
      if (v10 == MTLDataTypeArray)
      {
        v9 += MTLIndirectResourceEnumerator::collectIndirectResources(this, [(MTLArrayType *)a2 elementArrayType], v9);
LABEL_15:
        uint64_t v11 = (void *)[(MTLArrayType *)a2 elementTypeDescription];
        if ([v11 elementIsArgumentBuffer] && objc_msgSend(v11, "elementTypeDescription")) {
          (*(void (**)(void))(*(void *)this + 16))();
        }
        goto LABEL_5;
      }
      if (v10 == MTLDataTypeStruct)
      {
        v9 += MTLIndirectResourceEnumerator::collectIndirectResources(this, [(MTLArrayType *)a2 elementStructType], v9);
        goto LABEL_6;
      }
LABEL_5:
      ++v9;
LABEL_6:
      if (v9 > v8) {
        unint64_t v8 = v9;
      }
      if (!--v7) {
        return v8 - a3;
      }
    }
  }
  unint64_t v8 = 0;
  return v8 - a3;
}

uint64_t MTLEnumerateIndirectResources(MTLStructType *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return MTLIndirectResourceEnumerator::collectIndirectResources((MTLIndirectResourceEnumerator *)&v3, a1, 0);
}

uint64_t ___ZN39_MTLIndirectArgumentBufferLayoutPrivateC2EP13MTLStructTypePU23objcproto12MTLDeviceSPI11objc_object_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v8 = a3;
  uint64_t v5 = *(void *)(a1 + 40);
  NSUInteger v6 = (void *)[*(id *)(a1 + 32) newIndirectArgumentBufferLayoutWithStructType:a2];
  unint64_t v9 = &v8;
  std::__hash_table<std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5 + 8, &v8, (uint64_t)&std::piecewise_construct, &v9)[3] = v6;
  return [v6 setStructType:a2 withDevice:*(void *)(a1 + 32)];
}

void *_MTLIndirectArgumentBufferLayoutPrivate::bufferLayoutForResourceAtIndex(_MTLIndirectArgumentBufferLayoutPrivate *this, unint64_t a2)
{
  unint64_t v3 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::find<unsigned long>((void *)this + 1, &v3);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

uint64_t assignArgumentIndices(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = [a2 type];
  if (!(!v12 & v11))
  {
    switch(v6)
    {
      case 0:
        if ([a2 arrayLength])
        {
          unint64_t v16 = 0;
          do
          {
            uint64_t v17 = *a3;
            uint64_t v18 = *(void *)(*a3 + 24);
            unint64_t v39 = a1 + v16;
            uint64_t v40 = &v39;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, &v39, (uint64_t)&std::piecewise_construct, &v40)[3] = v18;
            ++v16;
          }
          while ([a2 arrayLength] > v16);
        }
        return [a2 arrayLength];
      case 1:
        goto LABEL_13;
      case 2:
        if ([a2 arrayLength])
        {
          unint64_t v19 = 0;
          do
          {
            uint64_t v20 = a3[1];
            uint64_t v21 = *(void *)(v20 + 24);
            unint64_t v39 = a1 + v19;
            uint64_t v40 = &v39;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20, &v39, (uint64_t)&std::piecewise_construct, &v40)[3] = v21;
            ++v19;
          }
          while ([a2 arrayLength] > v19);
        }
        return [a2 arrayLength];
      case 3:
        if ([a2 arrayLength])
        {
          unint64_t v22 = 0;
          do
          {
            uint64_t v23 = a3[2];
            uint64_t v24 = *(void *)(v23 + 24);
            unint64_t v39 = a1 + v22;
            uint64_t v40 = &v39;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23, &v39, (uint64_t)&std::piecewise_construct, &v40)[3] = v24;
            ++v22;
          }
          while ([a2 arrayLength] > v22);
        }
        return [a2 arrayLength];
      case 4:
        if ([a2 arrayLength])
        {
          unint64_t v25 = 0;
          do
          {
            uint64_t v26 = a3[3];
            uint64_t v27 = *(void *)(v26 + 24);
            unint64_t v39 = a1 + v25;
            uint64_t v40 = &v39;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, &v39, (uint64_t)&std::piecewise_construct, &v40)[3] = v27;
            ++v25;
          }
          while ([a2 arrayLength] > v25);
        }
        return [a2 arrayLength];
      default:
        JUMPOUT(0);
    }
  }
  switch(v6)
  {
    case 24:
      if ([a2 arrayLength])
      {
        unint64_t v13 = 0;
        do
        {
          uint64_t v14 = a3[4];
          uint64_t v15 = *(void *)(v14 + 24);
          unint64_t v39 = a1 + v13;
          uint64_t v40 = &v39;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, &v39, (uint64_t)&std::piecewise_construct, &v40)[3] = v15;
          ++v13;
        }
        while ([a2 arrayLength] > v13);
      }
      break;
    case 25:
      if ([a2 arrayLength])
      {
        unint64_t v28 = 0;
        do
        {
          uint64_t v29 = a3[6];
          uint64_t v30 = *(void *)(v29 + 24);
          unint64_t v39 = a1 + v28;
          uint64_t v40 = &v39;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29, &v39, (uint64_t)&std::piecewise_construct, &v40)[3] = v30;
          ++v28;
        }
        while ([a2 arrayLength] > v28);
      }
      break;
    case 26:
      if ([a2 arrayLength])
      {
        unint64_t v31 = 0;
        do
        {
          uint64_t v32 = a3[7];
          uint64_t v33 = *(void *)(v32 + 24);
          unint64_t v39 = a1 + v31;
          uint64_t v40 = &v39;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v32, &v39, (uint64_t)&std::piecewise_construct, &v40)[3] = v33;
          ++v31;
        }
        while ([a2 arrayLength] > v31);
      }
      break;
    case 27:
      if ([a2 arrayLength])
      {
        unint64_t v34 = 0;
        do
        {
          uint64_t v35 = a3[5];
          uint64_t v36 = *(void *)(v35 + 24);
          unint64_t v39 = a1 + v34;
          uint64_t v40 = &v39;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35, &v39, (uint64_t)&std::piecewise_construct, &v40)[3] = v36;
          ++v34;
        }
        while ([a2 arrayLength] > v34);
      }
      break;
    default:
LABEL_13:
      MTLReportFailure(0, "assignArgumentIndices", 1152, @"Unexpected data type in indirect argument buffer", v7, v8, v9, v10, v38);
      break;
  }
  return [a2 arrayLength];
}

unint64_t assignArrayIndices(unint64_t a1, void *a2, uint64_t *a3)
{
  if ([a2 arrayLength])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = a1;
    do
    {
      uint64_t v9 = [a2 elementType];
      if (v9 > 114)
      {
        switch(v9)
        {
          case 's':
            uint64_t v11 = a3[4];
            break;
          case 't':
            uint64_t v11 = a3[5];
            break;
          case 'u':
            uint64_t v11 = a3[6];
            break;
          case 'v':
            uint64_t v11 = a3[7];
            break;
          default:
LABEL_19:
            uint64_t v11 = a3[3];
            break;
        }
LABEL_20:
        uint64_t v12 = *(void *)(v11 + 24);
        unint64_t v14 = v8;
        uint64_t v15 = &v14;
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v12;
        ++v8;
      }
      else
      {
        switch(v9)
        {
          case '9':
            uint64_t v10 = assignArgumentIndices(v8, (void *)[a2 elementIndirectArgumentType], a3);
            goto LABEL_18;
          case ':':
            uint64_t v11 = a3[1];
            goto LABEL_20;
          case ';':
            uint64_t v11 = a3[2];
            goto LABEL_20;
          case '<':
            uint64_t v11 = *a3;
            goto LABEL_20;
          default:
            if (v9 == 1)
            {
              uint64_t v10 = assignStructIndices(v8, [a2 elementStructType], a3);
            }
            else
            {
              if (v9 != 2) {
                goto LABEL_19;
              }
              uint64_t v10 = assignArrayIndices(v8, [a2 elementArrayType], a3);
            }
LABEL_18:
            v8 += v10;
            break;
        }
      }
      if (v7 <= v8) {
        unint64_t v7 = v8;
      }
      ++v6;
    }
    while (v6 < [a2 arrayLength]);
  }
  else
  {
    unint64_t v7 = 0;
  }
  return v7 - a1;
}

uint64_t assignStructIndices(uint64_t a1, void *a2, uint64_t *a3)
{
  if (objc_msgSend((id)objc_msgSend(a2, "members"), "count"))
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = objc_msgSend((id)objc_msgSend(a2, "members"), "objectAtIndexedSubscript:", v6);
      unint64_t v9 = [v8 indirectArgumentIndex] + a1;
      uint64_t v10 = [v8 dataType];
      if (v10 > 114)
      {
        switch(v10)
        {
          case 's':
            uint64_t v12 = a3[4];
            break;
          case 't':
            uint64_t v12 = a3[5];
            break;
          case 'u':
            uint64_t v12 = a3[6];
            break;
          case 'v':
            uint64_t v12 = a3[7];
            break;
          default:
LABEL_19:
            uint64_t v12 = a3[3];
            break;
        }
LABEL_20:
        uint64_t v14 = *(void *)(v12 + 24);
        unint64_t v13 = v9 + 1;
        unint64_t v16 = v9;
        uint64_t v17 = &v16;
        std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, &v16, (uint64_t)&std::piecewise_construct, &v17)[3] = v14;
      }
      else
      {
        switch(v10)
        {
          case '9':
            uint64_t v11 = assignArgumentIndices(v9, (void *)[v8 indirectArgumentType], a3);
            goto LABEL_18;
          case ':':
            uint64_t v12 = a3[1];
            goto LABEL_20;
          case ';':
            uint64_t v12 = a3[2];
            goto LABEL_20;
          case '<':
            uint64_t v12 = *a3;
            goto LABEL_20;
          default:
            if (v10 == 1)
            {
              uint64_t v11 = assignStructIndices(v9, [v8 structType], a3);
            }
            else
            {
              if (v10 != 2) {
                goto LABEL_19;
              }
              uint64_t v11 = assignArrayIndices(v9, (void *)[v8 arrayType], a3);
            }
LABEL_18:
            unint64_t v13 = v11 + v9;
            break;
        }
      }
      if (v7 <= v13) {
        unint64_t v7 = v13;
      }
      ++v6;
    }
    while (v6 < objc_msgSend((id)objc_msgSend(a2, "members"), "count"));
  }
  else
  {
    unint64_t v7 = 0;
  }
  return v7 - a1;
}

void countArgument(MTLArgument *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, uint64_t a9)
{
  MTLArgumentType v17 = [(MTLArgument *)a1 type];
  if (!(!v23 & v22))
  {
    switch(v17)
    {
      case 0uLL:
        *a2 += [(MTLArgument *)a1 arrayLength];
        return;
      case 1uLL:
        goto LABEL_7;
      case 2uLL:
        *a3 += [(MTLArgument *)a1 arrayLength];
        return;
      case 3uLL:
        *a4 += [(MTLArgument *)a1 arrayLength];
        return;
      case 4uLL:
        return;
      default:
        JUMPOUT(0);
    }
  }
  switch(v17)
  {
    case MTLArgumentTypeVisibleFunctionTable:
      *a5 += [(MTLArgument *)a1 arrayLength];
      break;
    case MTLArgumentTypePrimitiveAccelerationStructure:
      *a7 += [(MTLArgument *)a1 arrayLength];
      break;
    case MTLArgumentTypeInstanceAccelerationStructure:
      *a8 += [(MTLArgument *)a1 arrayLength];
      break;
    case MTLArgumentTypeIntersectionFunctionTable:
      *a6 += [(MTLArgument *)a1 arrayLength];
      break;
    default:
LABEL_7:
      MTLReportFailure(0, "countArgument", 1317, @"Unexpected data type in indirect argument buffer", v18, v19, v20, v21, a9);
      break;
  }
}

NSUInteger countArrayArguments(MTLArrayType *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8)
{
  NSUInteger result = [(MTLArrayType *)a1 arrayLength];
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      MTLDataType v18 = [(MTLArrayType *)a1 elementType];
      if ((uint64_t)v18 > (uint64_t)(MTLDataTypeLong2|MTLDataTypeInt4))
      {
        switch(v18)
        {
          case MTLDataTypeVisibleFunctionTable:
            ++*a5;
            break;
          case MTLDataTypeIntersectionFunctionTable:
            ++*a6;
            break;
          case MTLDataTypePrimitiveAccelerationStructure:
            ++*a7;
            break;
          case MTLDataTypeInstanceAccelerationStructure:
            ++*a8;
            break;
          default:
            break;
        }
      }
      else
      {
        switch(v18)
        {
          case MTLDataTypeBool4|MTLDataTypeStruct:
            countArgument((MTLArgument *)[(MTLArrayType *)a1 elementIndirectArgumentType], a2, a3, a4, a5, a6, a7, a8, v19);
            break;
          case MTLDataTypeTexture:
            ++*a3;
            break;
          case MTLDataTypeSampler:
            ++*a4;
            break;
          case MTLDataTypePointer:
            ++*a2;
            break;
          default:
            if (v18 == MTLDataTypeStruct)
            {
              countStructArguments([(MTLArrayType *)a1 elementStructType], a2, a3, a4, a5, a6, a7, a8);
            }
            else if (v18 == MTLDataTypeArray)
            {
              countArrayArguments([(MTLArrayType *)a1 elementArrayType], a2, a3, a4, a5, a6, a7, a8);
            }
            break;
        }
      }
      NSUInteger result = [(MTLArrayType *)a1 arrayLength];
    }
  }
  return result;
}

NSUInteger countStructArguments(MTLStructType *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8)
{
  NSUInteger result = [(NSArray *)[(MTLStructType *)a1 members] count];
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      id v18 = [(NSArray *)[(MTLStructType *)a1 members] objectAtIndexedSubscript:i];
      uint64_t v19 = [v18 dataType];
      if (v19 > 114)
      {
        switch(v19)
        {
          case 's':
            ++*a5;
            break;
          case 't':
            ++*a6;
            break;
          case 'u':
            ++*a7;
            break;
          case 'v':
            ++*a8;
            break;
          default:
            break;
        }
      }
      else
      {
        switch(v19)
        {
          case '9':
            countArgument((MTLArgument *)[v18 indirectArgumentType], a2, a3, a4, a5, a6, a7, a8, v20);
            break;
          case ':':
            ++*a3;
            break;
          case ';':
            ++*a4;
            break;
          case '<':
            ++*a2;
            break;
          default:
            if (v19 == 1)
            {
              countStructArguments((MTLStructType *)[v18 structType], a2, a3, a4, a5, a6, a7, a8);
            }
            else if (v19 == 2)
            {
              countArrayArguments((MTLArrayType *)[v18 arrayType], a2, a3, a4, a5, a6, a7, a8);
            }
            break;
        }
      }
      NSUInteger result = [(NSArray *)[(MTLStructType *)a1 members] count];
    }
  }
  return result;
}

uint64_t alignTo(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) & -a2;
}

uint64_t getArgumentSizeAndAlign(uint64_t a1, unint64_t *a2, unint64_t *a3, BOOL *a4)
{
  *a2 = MTLDataTypeGetSize(a1);
  uint64_t result = MTLDataTypeGetAlignment(a1);
  *a3 = result;
  return result;
}

NSUInteger getArraySizeAndAlign(MTLArrayType *a1, unint64_t *a2, unint64_t *a3, BOOL *a4)
{
  uint64_t Alignment = 0;
  unint64_t Size = 0;
  MTLDataType v8 = [(MTLArrayType *)a1 elementType];
  if (v8 - 57 <= 0x3D)
  {
    if (((1 << (v8 - 57)) & 0x3C0000000000000ELL) != 0)
    {
      uint64_t Alignment = 1;
      unint64_t Size = 0;
      *a4 = 0;
      goto LABEL_4;
    }
    if (v8 == (MTLDataTypeBool4|MTLDataTypeStruct)) {
      goto LABEL_4;
    }
  }
  if (v8 == MTLDataTypeStruct)
  {
    getStructSizeAndAlign([(MTLArrayType *)a1 elementStructType], &Size, (unint64_t *)&Alignment, a4);
  }
  else if (v8 == MTLDataTypeArray)
  {
    getArraySizeAndAlign([(MTLArrayType *)a1 elementArrayType], &Size, (unint64_t *)&Alignment, a4);
  }
  else
  {
    *a4 = 1;
    MTLDataType v10 = [(MTLArrayType *)a1 elementType];
    unint64_t Size = MTLDataTypeGetSize(v10);
    uint64_t Alignment = MTLDataTypeGetAlignment(v10);
  }
LABEL_4:
  NSUInteger result = [(MTLArrayType *)a1 arrayLength];
  *a2 = Size * result;
  *a3 = Alignment;
  return result;
}

NSUInteger getStructSizeAndAlign(MTLStructType *a1, unint64_t *a2, unint64_t *a3, BOOL *a4)
{
  unint64_t v8 = 1;
  *a4 = 1;
  NSUInteger result = [(NSArray *)[(MTLStructType *)a1 members] count];
  if (result)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    BOOL v12 = 0;
    unint64_t v8 = 1;
    do
    {
      unint64_t v19 = 0;
      unint64_t v20 = 0;
      BOOL v18 = 0;
      getStructMemberSizeAndAlignment((MTLStructMember *)[(NSArray *)[(MTLStructType *)a1 members] objectAtIndexedSubscript:v11], &v20, &v19, &v18);
      BOOL v13 = v18;
      if (v12 || !v18)
      {
        if (!v18) {
          *a4 = 0;
        }
        unint64_t v16 = v19;
        unint64_t v15 = (v10 + v19 - 1) & -(uint64_t)v19;
        BOOL v12 = v13;
      }
      else
      {
        ConstantBlockuint64_t Alignment = getConstantBlockAlignment([(MTLStructType *)a1 members], v11);
        unint64_t v15 = (v10 + ConstantBlockAlignment - 1) & -(uint64_t)ConstantBlockAlignment;
        BOOL v12 = 1;
        unint64_t v16 = v19;
      }
      unint64_t v10 = v20 + v15;
      if (v8 <= v16) {
        unint64_t v8 = v16;
      }
      ++v11;
      NSUInteger result = [(NSArray *)[(MTLStructType *)a1 members] count];
    }
    while (v11 < result);
    uint64_t v17 = v10 - 1;
  }
  else
  {
    uint64_t v17 = -1;
  }
  *a2 = (v17 + v8) & -(uint64_t)v8;
  *a3 = v8;
  return result;
}

NSUInteger getStructMemberSizeAndAlignment(MTLStructMember *a1, unint64_t *a2, unint64_t *a3, BOOL *a4)
{
  NSUInteger result = [(MTLStructMember *)a1 dataType];
  if (result - 57 > 0x3D) {
    goto LABEL_6;
  }
  if (((1 << (result - 57)) & 0x3C0000000000000ELL) != 0)
  {
    *a2 = 0;
    *a3 = 1;
    *a4 = 0;
    return result;
  }
  if (result != 57)
  {
LABEL_6:
    if (result == 1)
    {
      unint64_t v10 = [(MTLStructMember *)a1 structType];
      return getStructSizeAndAlign(v10, a2, a3, a4);
    }
    else if (result == 2)
    {
      unint64_t v9 = [(MTLStructMember *)a1 arrayType];
      return getArraySizeAndAlign(v9, a2, a3, a4);
    }
    else
    {
      *a4 = 1;
      MTLDataType v11 = [(MTLStructMember *)a1 dataType];
      *a2 = MTLDataTypeGetSize(v11);
      NSUInteger result = MTLDataTypeGetAlignment(v11);
      *a3 = result;
    }
  }
  return result;
}

unint64_t getConstantBlockAlignment(void *a1, uint64_t a2)
{
  BOOL v16 = 1;
  unint64_t v15 = 1;
  getStructMemberSizeAndAlignment((MTLStructMember *)[a1 objectAtIndexedSubscript:a2], &v14, &v15, &v16);
  unint64_t v4 = [a1 count];
  unint64_t v5 = v15;
  BOOL v6 = !v16 || a2 + 1 >= v4;
  if (!v6)
  {
    unint64_t v7 = v4;
    unint64_t v8 = a2 + 2;
    do
    {
      unint64_t v9 = (MTLStructMember *)[a1 objectAtIndexedSubscript:v8 - 1];
      unint64_t v13 = 1;
      getStructMemberSizeAndAlignment(v9, &v12, &v13, &v16);
      unint64_t v10 = v13;
      if (v5 > v13) {
        unint64_t v10 = v5;
      }
      if (!v16) {
        break;
      }
      unint64_t v5 = v10;
      BOOL v6 = v8++ >= v7;
    }
    while (!v6);
  }
  return v5;
}

void assignArgumentOffsets(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t Size = MTLDataTypeGetSize(a1);
  uint64_t Alignment = MTLDataTypeGetAlignment(a1);
  uint64_t v8 = (Alignment + *a2 - 1) & -Alignment;
  *a2 = v8;
  unint64_t v9 = *(void *)(a3 + 16);
  unint64_t v10 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v10 >= v9)
  {
    unint64_t v12 = *(uint64_t **)a3;
    uint64_t v13 = ((uint64_t)v10 - *(void *)a3) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - (void)v12;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a3 + 16, v16);
      unint64_t v12 = *(uint64_t **)a3;
      unint64_t v10 = *(uint64_t **)(a3 + 8);
      uint64_t v8 = *a2;
    }
    else
    {
      uint64_t v17 = 0;
    }
    BOOL v18 = (uint64_t *)&v17[8 * v13];
    unint64_t v19 = &v17[8 * v16];
    *BOOL v18 = v8;
    MTLDataType v11 = v18 + 1;
    while (v10 != v12)
    {
      uint64_t v20 = *--v10;
      *--BOOL v18 = v20;
    }
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v11;
    *(void *)(a3 + 16) = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *unint64_t v10 = v8;
    MTLDataType v11 = v10 + 1;
  }
  *(void *)(a3 + 8) = v11;
  *a2 += Size;
}

unint64_t assignArrayOffsets(MTLArrayType *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v10 = 0;
  getArraySizeAndAlign(a1, &v11, &v10, &v9);
  *a2 = (*a2 + v10 - 1) & -(uint64_t)v10;
  unint64_t result = [(MTLArrayType *)a1 arrayLength];
  if (result)
  {
    for (unint64_t i = 0; result > i; ++i)
    {
      uint64_t v8 = [(MTLArrayType *)a1 elementType];
      if (v8 > 114)
      {
        if ((unint64_t)(v8 - 115) >= 4) {
          goto LABEL_9;
        }
      }
      else if ((unint64_t)(v8 - 57) >= 4)
      {
        if (v8 == 1)
        {
          assignStructOffsets([(MTLArrayType *)a1 elementStructType], a2, a3);
          goto LABEL_11;
        }
        if (v8 != 2)
        {
LABEL_9:
          assignArgumentOffsets([(MTLArrayType *)a1 elementType], a2, a3);
          goto LABEL_11;
        }
        assignArrayOffsets([(MTLArrayType *)a1 elementArrayType], a2, a3);
      }
LABEL_11:
      unint64_t result = [(MTLArrayType *)a1 arrayLength];
    }
  }
  return result;
}

unint64_t assignStructOffsets(MTLStructType *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v18 = 1;
  unint64_t v19 = 0;
  getStructSizeAndAlign(a1, &v19, &v18, &v17);
  unint64_t v6 = (*a2 + v18 - 1) & -(uint64_t)v18;
  *a2 = v6;
  unint64_t result = [(NSArray *)[(MTLStructType *)a1 members] count];
  if (result)
  {
    BOOL v8 = 0;
    for (unint64_t i = 0; i < result; ++i)
    {
      unint64_t v10 = [(NSArray *)[(MTLStructType *)a1 members] objectAtIndexedSubscript:i];
      unint64_t v15 = 0;
      BOOL v14 = 0;
      getStructMemberSizeAndAlignment(v10, &v16, &v15, &v14);
      if (v8 || !v14)
      {
        unint64_t v12 = (*a2 + v15 - 1) & -(uint64_t)v15;
        BOOL v8 = v14;
      }
      else
      {
        ConstantBlockuint64_t Alignment = getConstantBlockAlignment([(MTLStructType *)a1 members], i);
        unint64_t v12 = (ConstantBlockAlignment + *a2 - 1) & -(uint64_t)ConstantBlockAlignment;
        BOOL v8 = 1;
      }
      *a2 = v12;
      uint64_t v13 = [(MTLStructMember *)v10 dataType];
      if (v13 > 114)
      {
        if ((unint64_t)(v13 - 115) >= 4) {
          goto LABEL_13;
        }
      }
      else if ((unint64_t)(v13 - 57) >= 4)
      {
        if (v13 == 1)
        {
          assignStructOffsets([(MTLStructMember *)v10 structType], a2, a3);
          goto LABEL_15;
        }
        if (v13 != 2)
        {
LABEL_13:
          assignArgumentOffsets([(MTLStructMember *)v10 dataType], a2, a3);
          goto LABEL_15;
        }
        assignArrayOffsets([(MTLStructMember *)v10 arrayType], a2, a3);
      }
LABEL_15:
      unint64_t result = [(NSArray *)[(MTLStructType *)a1 members] count];
    }
  }
  *a2 = v19 + v6;
  return result;
}

uint64_t updatePointerType(void *a1, void *a2, void *a3)
{
  unint64_t v6 = [a2 alignment];
  if ([a1 isConstantBuffer])
  {
    unint64_t v7 = [a3 minConstantBufferAlignmentBytes];
    if (v7 > v6) {
      unint64_t v6 = v7;
    }
  }
  uint64_t v8 = [a2 encodedLength];

  return [a1 setAlignment:v6 dataSize:v8];
}

uint64_t makeOffsetRelative(MTLStructType *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  unint64_t v3 = [(MTLStructType *)a1 members];
  uint64_t result = [(NSArray *)v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * v7);
        uint64_t v9 = [v8 offset];
        if (v9 != -1)
        {
          unint64_t v10 = v9;
          uint64_t v11 = [v8 dataType];
          if (v11 == 2)
          {
            makeOffsetRelative((MTLArrayType *)[v8 arrayType], v10);
          }
          else if (v11 == 1)
          {
            makeOffsetRelative((MTLStructType *)[v8 structType], v10);
          }
          [v8 setOffset:v10 - a2];
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t result = [(NSArray *)v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t getGlobalConstantOffsets@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  char v10 = [a3 bufferLayoutMatchesFrontEndLayout];
  *a5 = 1;
  a5[1] = -1;
  a5[2] = -1;
  uint64_t v11 = [a1 elementType];
  if ((unint64_t)(v11 - 57) <= 0x3D)
  {
    if (((1 << (v11 - 57)) & 0x3C00000000E00006) != 0) {
      goto LABEL_15;
    }
    if (v11 == 60)
    {
      getGlobalConstantOffsets((void *)[a1 elementTypeDescription], a4, &v18);
LABEL_10:
      *(_OWORD *)a5 = v18;
      a5[2] = v19;
      goto LABEL_15;
    }
    if (v11 == 57) {
      abort();
    }
  }
  if (v11 == 2)
  {
    getGlobalConstantOffsets(&v18, [a1 elementArrayType], a2, a3, a4);
    goto LABEL_10;
  }
  if (v11 == 1)
  {
    getGlobalConstantOffsets(&v18, [a1 elementStructType], a2, a3, a4);
    goto LABEL_10;
  }
  if (v10) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = [a3 constantOffsetAtIndex:a2];
  }
  a5[1] = v12;
  a5[2] = a2;
  *a5 = 1;
LABEL_15:
  uint64_t v13 = a5[2];
  if (v13 == -1)
  {
    uint64_t v16 = 0;
    uint64_t v15 = *a5;
    goto LABEL_21;
  }
  unint64_t v14 = [a1 arrayLength];
  uint64_t v15 = *a5;
  if (v14 < 2)
  {
    uint64_t v16 = 0;
    goto LABEL_21;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v16 = [a3 constantOffsetAtIndex:v15 + v13] - a5[1];
LABEL_21:
    [a1 setStride:v16];
  }
  uint64_t result = [a1 arrayLength];
  *a5 = result * v15;
  return result;
}

MTLDataType makeOffsetRelative(MTLArrayType *a1, unint64_t a2)
{
  while (1)
  {
    unint64_t v3 = a1;
    MTLDataType result = [(MTLArrayType *)a1 elementType];
    if (result != MTLDataTypeArray) {
      break;
    }
    a1 = [(MTLArrayType *)v3 elementArrayType];
  }
  if (result == MTLDataTypeStruct)
  {
    uint64_t v5 = [(MTLArrayType *)v3 elementStructType];
    return makeOffsetRelative(v5, a2);
  }
  return result;
}

void *std::vector<MTLStructMember *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1827C8760(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,_MTLIndirectArgumentBufferLayout *>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    char v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827C8988(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    char v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827C8BA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

id newErrorWithMessage(NSString *a1, MTLBinaryArchiveError a2)
{
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:a1 forKey:*MEMORY[0x1E4F28568]];
  unint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLBinaryArchiveDomain" code:a2 userInfo:v3];

  return v4;
}

void sub_1827C95F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Block_object_dispose((const void *)(v17 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1827C97E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MTLHashKey *a10)
{
}

void sub_1827C9950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MTLHashKey *a10)
{
}

void sub_1827C9AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1827CB184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

BOOL hasFileExtension(const char *a1, const char *a2)
{
  size_t v4 = strlen(a1);
  size_t v5 = strlen(a2);
  return v4 >= v5 && strcmp(&a1[v4 - v5], a2) == 0;
}

void sub_1827CC02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1827CC410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_1827CC664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__split_buffer<machOEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1827CCE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,MTLHashKey *a25)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1827CD180(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1827CD540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  _Block_object_dispose((const void *)(v44 - 240), 8);
  uint64_t v46 = *(void **)(v44 - 192);
  if (v46)
  {
    *(void *)(v44 - 184) = v46;
    operator delete(v46);
  }
  _Block_object_dispose((const void *)(v44 - 144), 8);
  _Block_object_dispose((const void *)(v44 - 112), 8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__200(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__201(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1827CE1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_96c70_ZTSNSt3__110shared_ptrINS_6vectorI10machOEntryNS_9allocatorIS2_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 104);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(void *)(result + 104) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_96c70_ZTSNSt3__110shared_ptrINS_6vectorI10machOEntryNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 104);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_e8_104c70_ZTSNSt3__110shared_ptrINS_6vectorI10machOEntryNS_9allocatorIS2_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 112);
  *(void *)(result + 104) = *(void *)(a2 + 104);
  *(void *)(result + 112) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_104c70_ZTSNSt3__110shared_ptrINS_6vectorI10machOEntryNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 112);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1827CF0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v32 - 144);
  _Unwind_Resume(a1);
}

uint64_t Air::PipelineScript::pipeline_as_mesh_render(Air::PipelineScript *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 4) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

void sub_1827D1CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1827D3868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v30 = *(void **)(v28 - 128);
  if (v30)
  {
    *(void *)(v28 - 120) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::FunctionStitching::Node::node_as_BufferAddressNode(Air::FunctionStitching::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (BOOL v3 = *(_DWORD *)((char *)this + v1[2]) == 4) : (BOOL v3 = 0), v3 && (v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::FunctionStitching::Node::node_as_ThreadgroupNode(Air::FunctionStitching::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (BOOL v3 = *(_DWORD *)((char *)this + v1[2]) == 8) : (BOOL v3 = 0), v3 && (v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

void sub_1827D4088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1827D42F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1827D5AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a31);
  _Block_object_dispose(&a47, 8);
  uint64_t v49 = *(void **)(v47 - 240);
  if (v49)
  {
    *(void *)(v47 - 232) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__275(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__276(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void std::vector<MTLLoaderMachOPayload>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 112;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLLoaderMachOPayload>>(v3, a2);
    unint64_t v7 = &v6[112 * v5];
    uint8x8_t v9 = &v6[112 * v8];
    uint64_t v11 = (char *)*a1;
    char v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 7);
        long long v14 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v14;
        *((_OWORD *)v12 - 7) = v13;
        long long v15 = *((_OWORD *)v10 - 4);
        long long v16 = *((_OWORD *)v10 - 3);
        long long v17 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v17;
        *((_OWORD *)v12 - 4) = v15;
        *((_OWORD *)v12 - 3) = v16;
        v12 -= 112;
        v10 -= 112;
      }
      while (v10 != v11);
      char v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1827D64B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1827D6A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1827D7410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1827D7508(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1827D76C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MTLHashKey *a10)
{
}

void sub_1827D7790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MTLHashKey *a10)
{
}

void sub_1827D7ACC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10B0C40DA8BEAA3);
  _Unwind_Resume(a1);
}

void sub_1827D7C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1827D7FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__576(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__577(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1827D85DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1827D8AD0(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1020C405FF5E128);
  _Unwind_Resume(a1);
}

uint64_t getRequiredStagesPresentMask(const Air::PipelineScript *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v1 < 9u) {
    return 0;
  }
  uint64_t v2 = v1[4];
  if (!v2) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)this + v2);
  if ((v4 - 2) < 2) {
    return 2;
  }
  if (v4 != 1)
  {
    if (v4 == 4)
    {
      uint64_t v5 = (int *)Air::PipelineScript::pipeline_as_mesh_render(this);
      uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
      if (*v6 >= 9u && (uint64_t v7 = v6[4]) != 0) {
        uint64_t v8 = (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7);
      }
      else {
        uint64_t v8 = 0;
      }
      long long v14 = (int *)Air::PipelineScript::pipeline_as_mesh_render(this);
      long long v15 = (unsigned __int16 *)((char *)v14 - *v14);
      int v16 = 2;
      if (*v15 >= 5u)
      {
        if (v15[2]) {
          int v16 = 6;
        }
        else {
          int v16 = 2;
        }
      }
      return v16 | (v8 != 0);
    }
    return 0;
  }
  char v10 = (int *)Air::PipelineScript::pipeline_as_render(this);
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
    long long v13 = (char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12);
  }
  else {
    long long v13 = 0;
  }
  long long v17 = (int *)Air::PipelineScript::pipeline_as_render(this);
  size_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  BOOL v19 = *v18 >= 7u && v18[3] != 0;
  return v19 | (2 * (v13 != 0));
}

uint64_t __Block_byref_object_copy__580(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__581(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 48);
}

void sub_1827D9544(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 72), 8);
  _Unwind_Resume(a1);
}

void MTLProgramObject::~MTLProgramObject(MTLProgramObject *this)
{
  dispatch_release(*((dispatch_object_t *)this + 55));
  uint64_t v2 = *((void *)this + 53);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 54);
  if (v3) {

  }
  VariantList<4u>::~VariantList((uint64_t)this);
}

uint64_t VariantList<4u>::~VariantList(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 328);
  if (v2 != a1)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 320);
      for (uint64_t i = 240; i != -80; i -= 80)
        VariantEntry::~VariantEntry((VariantEntry *)(v2 + i));
      MEMORY[0x18530C140](v2, 0x10B0C4094D98C36);
      *(void *)(a1 + 328) = v3;
      uint64_t v2 = v3;
    }
    while (v3 != a1);
  }
  VariantEntry::~VariantEntry((VariantEntry *)(a1 + 344));
  for (uint64_t j = 240; j != -80; j -= 80)
    VariantEntry::~VariantEntry((VariantEntry *)(a1 + j));
  return a1;
}

void VariantEntry::~VariantEntry(VariantEntry *this)
{
  free(this->var0);
  var5 = this->var5;
  if (var5) {
    dispatch_release(var5);
  }

  var9 = this->var9;
  if (var9) {
    dispatch_release(var9);
  }
}

flatbuffers::IDLOptions *flatbuffers::IDLOptions::IDLOptions(flatbuffers::IDLOptions *this)
{
  *(_DWORD *)((char *)this + 3) = 0;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 2;
  *((_DWORD *)this + 3) = 257;
  *((unsigned char *)this + 16) = 1;
  *(void *)((char *)this + 17) = 0;
  *((unsigned char *)this + 25) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 4, "std::unique_ptr");
  *((void *)this + 11) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 14, "T");
  *((void *)this + 18) = 0;
  *((_WORD *)this + 68) = 1;
  *((unsigned char *)this + 138) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *(void *)((char *)this + 165) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 56) = 1;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *(_DWORD *)((char *)this + 255) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 41) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 42, "_generated");
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 1;
  *((void *)this + 49) = 0;
  *((_WORD *)this + 200) = 257;
  return this;
}

void sub_1827D992C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 335) < 0) {
    operator delete(*(void **)(v2 + 312));
  }
  if (*(char *)(v2 + 311) < 0) {
    operator delete(*(void **)(v2 + 288));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 255) < 0) {
    operator delete(*v9);
  }
  if (*(char *)(v2 + 223) < 0) {
    operator delete(*(void **)(v2 + 200));
  }
  if (*(char *)(v2 + 199) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v2 + 167) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v2 + 135) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 111) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void flatbuffers::Parser::Parser(flatbuffers::Parser *this, const flatbuffers::IDLOptions *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0xFFFFFFFF00000000;
  *((unsigned char *)this + 24) = 1;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = (char *)this + 136;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 22) = (char *)this + 184;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 30) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((unsigned char *)this + 344) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 22) = xmmword_1828D6640;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 1;
  *((_WORD *)this + 208) = 256;
  uint64_t v4 = (char *)this + 432;
  *((void *)this + 53) = 0;
  std::vector<unsigned char>::vector((void *)this + 54, 0x100uLL);
  *((unsigned char *)this + 480) = 0;
  *((void *)this + 59) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(void *)((char *)this + 484) = 7;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((void *)this + 65) = v4;
  *((void *)this + 62) = (char *)this + 504;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((void *)this + 69) = v4;
  *((void *)this + 66) = (char *)this + 536;
  *((void *)this + 55) = *((void *)this + 54);
  *((void *)this + 70) = 0;
  *((_WORD *)this + 284) = 0;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 604) = 0u;
  *(_OWORD *)((char *)this + 588) = 0u;
  *(_OWORD *)((char *)this + 572) = 0u;
  *((void *)this + 79) = (char *)this + 640;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((void *)this + 82) = (char *)this + 664;
  *((void *)this + 87) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((void *)this + 89) = 0;
  *((void *)this + 88) = (char *)this + 712;
  *((void *)this + 90) = 0;
  flatbuffers::IDLOptions::IDLOptions((flatbuffers::Parser *)((char *)this + 728), a2);
  *((unsigned char *)this + 1136) = 0;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  if (*((unsigned char *)this + 984)) {
    *((unsigned char *)this + 416) = 1;
  }
  operator new();
}

void sub_1827DA4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void **a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::match_results<const char *> __p = (void *)(v17 + 1176);
  std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v17 + 1175) < 0) {
    operator delete(*(void **)(v17 + 1152));
  }
  flatbuffers::IDLOptions::~IDLOptions(v25);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v24, *(char **)(v17 + 712));
  std::match_results<const char *> __p = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v23, *(void **)(v17 + 664));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17 + 632, *(void **)(v17 + 640));
  if (*(char *)(v17 + 631) < 0) {
    operator delete(*(void **)(v17 + 608));
  }
  if (*(char *)(v17 + 607) < 0) {
    operator delete(*(void **)(v17 + 584));
  }
  flexbuffers::Builder::~Builder(v22);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(v20 + 152));
  if (*(char *)(v17 + 335) < 0) {
    operator delete(*(void **)(v17 + 312));
  }
  uint64_t v27 = *a11;
  if (*a11)
  {
    *(void *)(v17 + 280) = v27;
    operator delete(v27);
  }
  flatbuffers::SymbolTable<flatbuffers::ServiceDef>::~SymbolTable(v21);
  flatbuffers::SymbolTable<flatbuffers::EnumDef>::~SymbolTable(v20 - 8);
  flatbuffers::SymbolTable<flatbuffers::StructDef>::~SymbolTable(v19);
  flatbuffers::SymbolTable<flatbuffers::Type>::~SymbolTable(v18);
  flatbuffers::ParserState::~ParserState((void **)v17);
  _Unwind_Resume(a1);
}

void flexbuffers::Builder::~Builder(flexbuffers::Builder *this)
{
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void flatbuffers::ParserState::~ParserState(void **this)
{
  uint64_t v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

void flatbuffers::DefaultAllocator::~DefaultAllocator(flatbuffers::DefaultAllocator *this)
{
}

void flatbuffers::DefaultAllocator::allocate(flatbuffers::DefaultAllocator *this)
{
}

char *flatbuffers::Allocator::reallocate_downward(flatbuffers::Allocator *this, unsigned __int8 *a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6)
{
  uint64_t v12 = (char *)(*(uint64_t (**)(flatbuffers::Allocator *, uint64_t))(*(void *)this + 16))(this, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(flatbuffers::Allocator *, unsigned __int8 *, uint64_t))(*(void *)this + 24))(this, a2, a3);
  return v12;
}

flatbuffers::IDLOptions *flatbuffers::IDLOptions::IDLOptions(flatbuffers::IDLOptions *this, const flatbuffers::IDLOptions *a2)
{
  long long v4 = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 10) = *(_OWORD *)((char *)a2 + 10);
  *(_OWORD *)this = v4;
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 88);
    *((void *)this + 13) = *((void *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v7;
  }
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 7);
    *((void *)this + 16) = *((void *)a2 + 16);
    *((_OWORD *)this + 7) = v8;
  }
  __int16 v9 = *((_WORD *)a2 + 68);
  *((unsigned char *)this + 138) = *((unsigned char *)a2 + 138);
  *((_WORD *)this + 68) = v9;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, *((const std::string::value_type **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 9);
    *((void *)this + 20) = *((void *)a2 + 20);
    *((_OWORD *)this + 9) = v10;
  }
  int v11 = *((_DWORD *)a2 + 42);
  *((unsigned char *)this + 172) = *((unsigned char *)a2 + 172);
  *((_DWORD *)this + 42) = v11;
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 11);
    *((void *)this + 24) = *((void *)a2 + 24);
    *((_OWORD *)this + 11) = v12;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v13 = *(_OWORD *)((char *)a2 + 200);
    *((void *)this + 27) = *((void *)a2 + 27);
    *(_OWORD *)((char *)this + 200) = v13;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 232), *((const std::string::value_type **)a2 + 29), *((void *)a2 + 30));
  }
  else
  {
    long long v14 = *(_OWORD *)((char *)a2 + 232);
    *((void *)this + 31) = *((void *)a2 + 31);
    *(_OWORD *)((char *)this + 232) = v14;
  }
  __int16 v15 = *((_WORD *)a2 + 128);
  *((unsigned char *)this + 258) = *((unsigned char *)a2 + 258);
  *((_WORD *)this + 128) = v15;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 33) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 11, *((long long **)a2 + 33), *((long long **)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 3));
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 12, *((const std::string::value_type **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v16 = *((_OWORD *)a2 + 18);
    *((void *)this + 38) = *((void *)a2 + 38);
    *((_OWORD *)this + 18) = v16;
  }
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 13, *((const std::string::value_type **)a2 + 39), *((void *)a2 + 40));
  }
  else
  {
    long long v17 = *(_OWORD *)((char *)a2 + 312);
    *((void *)this + 41) = *((void *)a2 + 41);
    *(_OWORD *)((char *)this + 312) = v17;
  }
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, *((const std::string::value_type **)a2 + 42), *((void *)a2 + 43));
  }
  else
  {
    long long v18 = *((_OWORD *)a2 + 21);
    *((void *)this + 44) = *((void *)a2 + 44);
    *((_OWORD *)this + 21) = v18;
  }
  uint64_t v19 = (std::string *)((char *)this + 360);
  if (*((char *)a2 + 383) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)a2 + 45), *((void *)a2 + 46));
  }
  else
  {
    long long v20 = *(_OWORD *)((char *)a2 + 360);
    *((void *)this + 47) = *((void *)a2 + 47);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  long long v21 = *((_OWORD *)a2 + 24);
  *((_WORD *)this + 200) = *((_WORD *)a2 + 200);
  *((_OWORD *)this + 24) = v21;
  return this;
}

void sub_1827DAB88(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, void **a5, void **a6, ...)
{
  va_start(va, a6);
  if (v6[359] < 0) {
    operator delete(*v9);
  }
  if (v6[335] < 0) {
    operator delete(*v8);
  }
  if (v6[311] < 0) {
    operator delete(*v7);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v6[255] < 0) {
    operator delete(*v13);
  }
  if (v6[223] < 0) {
    operator delete(*v12);
  }
  if (v6[199] < 0) {
    operator delete(*v11);
  }
  if (v6[167] < 0) {
    operator delete(*v10);
  }
  if (v6[135] < 0) {
    operator delete(*a3);
  }
  if (v6[111] < 0) {
    operator delete(*a4);
  }
  if (v6[79] < 0) {
    operator delete(*a5);
  }
  if (v6[55] < 0) {
    operator delete(*a6);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1827DAD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  int v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1827DADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

_OWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    long long v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((unsigned char *)v7 + 56) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t flatbuffers::SymbolTable<flatbuffers::ServiceDef>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        flatbuffers::SymbolTable<flatbuffers::RPCCall>::~SymbolTable(v4 + 152);
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        long long v6 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x18530C140](v4, 0x10B2C401A85D49FLL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::RPCCall>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        long long v6 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x18530C140](v4, 0x10B2C40EE200C30);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 55) < 0) {
          operator delete(*(void **)(v4 + 32));
        }
        MEMORY[0x18530C140](v4, 0x1032C40E9BF265ALL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::EnumDef>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        flatbuffers::SymbolTable<flatbuffers::EnumVal>::~SymbolTable(v4 + 184);
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        long long v6 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x18530C140](v4, 0x10B2C409EE52067);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::EnumVal>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 88);
        long long v6 = (void **)(v4 + 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x18530C140](v4, 0x10B2C4072A4B994);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::StructDef>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        uint64_t v5 = *(void *)(v4 + 224);
        *(void *)(v4 + 224) = 0;
        if (v5) {
          std::default_delete<std::string>::operator()[abi:ne180100](v4 + 224, v5);
        }
        flatbuffers::SymbolTable<flatbuffers::FieldDef>::~SymbolTable(v4 + 152);
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        long long v7 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x18530C140](v4, 0x10B2C4058EA06FBLL);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x18530C140);
  }
}

uint64_t flatbuffers::SymbolTable<flatbuffers::FieldDef>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 207) < 0) {
          operator delete(*(void **)(v4 + 184));
        }
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        long long v6 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 47) < 0) {
          operator delete(*(void **)(v4 + 24));
        }
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        MEMORY[0x18530C140](v4, 0x10B2C40559199D4);
        uint64_t v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::Type>::~SymbolTable(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x18530C140](*v3, 0x1020C4001A1C0B8);
        uint64_t v2 = *(void **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(void **)(a1 + 24);
  }
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void flatbuffers::IDLOptions::~IDLOptions(void **this)
{
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  uint64_t v2 = this + 33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

void flatbuffers::Parser::~Parser(flatbuffers::Parser *this)
{
  uint64_t v3 = (void ***)*((void *)this + 34);
  uint64_t v2 = (void ***)*((void *)this + 35);
  while (v3 != v2)
  {
    uint64_t v4 = *v3;
    if (*v3)
    {
      long long v8 = *v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
      MEMORY[0x18530C140](v4, 0x1020C4016EE4530);
      uint64_t v2 = (void ***)*((void *)this + 35);
    }
    ++v3;
  }
  long long v8 = (void **)((char *)this + 1176);
  std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 1175) < 0) {
    operator delete(*((void **)this + 144));
  }
  flatbuffers::IDLOptions::~IDLOptions((void **)this + 91);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)this + 704, *((char **)this + 89));
  long long v8 = (void **)((char *)this + 680);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)this + 656, *((void **)this + 83));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 632, *((void **)this + 80));
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  if (*((char *)this + 607) < 0) {
    operator delete(*((void **)this + 73));
  }
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 528, *((void **)this + 67));
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 496, *((void **)this + 63));
  uint64_t v5 = (void *)*((void *)this + 57);
  if (v5)
  {
    *((void *)this + 58) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)this + 54);
  if (v6)
  {
    *((void *)this + 55) = v6;
    operator delete(v6);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::Parser *)((char *)this + 336));
  if (*((char *)this + 335) < 0) {
    operator delete(*((void **)this + 39));
  }
  long long v7 = (void *)*((void *)this + 34);
  if (v7)
  {
    *((void *)this + 35) = v7;
    operator delete(v7);
  }
  flatbuffers::SymbolTable<flatbuffers::ServiceDef>::~SymbolTable((uint64_t)this + 224);
  flatbuffers::SymbolTable<flatbuffers::EnumDef>::~SymbolTable((uint64_t)this + 176);
  flatbuffers::SymbolTable<flatbuffers::StructDef>::~SymbolTable((uint64_t)this + 128);
  flatbuffers::SymbolTable<flatbuffers::Type>::~SymbolTable((uint64_t)this + 80);
  long long v8 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E521F730, MEMORY[0x1E4FBA1D0]);
}

void sub_1827DBA48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void MTLProgramObject::MTLProgramObject(MTLProgramObject *this)
{
  for (uint64_t i = 0; i != 320; i += 80)
  {
    uint64_t v3 = (char *)this + i;
    *((_DWORD *)v3 + 8) = 0;
    *(_OWORD *)uint64_t v3 = 0uLL;
    *((_OWORD *)v3 + 1) = 0uLL;
    *(_OWORD *)(v3 + 40) = 0uLL;
    *(_OWORD *)(v3 + 56) = 0uLL;
    *((void *)v3 + 9) = 0;
  }
  *((_DWORD *)this + 84) = 0;
  *((_DWORD *)this + 94) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = this;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 55) = dispatch_queue_create("programObject Queue", 0);
  *((void *)this + 54) = [objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:0 valueOptions:0 capacity:1];
}

void sub_1827DBB34(_Unwind_Exception *a1)
{
  VariantList<4u>::~VariantList(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC4848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC4848;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

unint64_t *std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::lower_bound[abi:ne180100]<MTLUINT256_t>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = *(unint64_t **)(a1 + 8);
  __n128 result = (unint64_t *)(a1 + 8);
  uint64_t v3 = v4;
  if (v4)
  {
    do
    {
      unint64_t v5 = bswap64(v3[4]);
      unint64_t v6 = bswap64(*a2);
      if (v5 == v6
        && (v5 = bswap64(v3[5]), unint64_t v6 = bswap64(a2[1]), v5 == v6)
        && (v5 = bswap64(v3[6]), unint64_t v6 = bswap64(a2[2]), v5 == v6)
        && (v5 = bswap64(v3[7]), unint64_t v6 = bswap64(a2[3]), v5 == v6))
      {
        int v7 = 0;
      }
      else if (v5 < v6)
      {
        int v7 = -1;
      }
      else
      {
        int v7 = 1;
      }
      BOOL v8 = v7 <= 0;
      if (v7 <= 0) {
        uint64_t v9 = v3;
      }
      else {
        uint64_t v9 = v3 + 1;
      }
      if (v8) {
        __n128 result = v3;
      }
      uint64_t v3 = (unint64_t *)*v9;
    }
    while (*v9);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*> const&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v6;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v15;
  i[6] = *(void *)(a3 + 32);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_48:
    void *v23 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827DBE7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v6;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v15;
  i[6] = *(void *)(a3 + 32);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_48:
    void *v23 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827DC0B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<functionIdExtended>::__init_with_size[abi:ne180100]<functionIdExtended*,functionIdExtended*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1827DC12C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<MTLUINT256_t,MTLAirEntry *,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,MTLAirEntry *>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t const,MTLAirEntry *> const&>(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1827DC1A8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t const,MTLAirEntry *> const&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v6;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v15;
  i[6] = *(void *)(a3 + 32);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_48:
    void *v23 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827DC3E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<machOEntry>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>,std::reverse_iterator<machOEntry*>,std::reverse_iterator<machOEntry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<machOEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>,std::reverse_iterator<machOEntry*>,std::reverse_iterator<machOEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 72);
      long long v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_OWORD *)(v7 - 72) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(void **)(v1 + 48);
    if (v3)
    {
      *(void *)(v1 + 56) = v3;
      operator delete(v3);
    }
    v1 += 72;
  }
}

uint64_t std::__split_buffer<machOEntry>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<machOEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 72;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  long long v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_48:
    *unint64_t v24 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827DC8C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<MTLHashKey>::__throw_out_of_range[abi:ne180100]()
{
}

void *std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<MTLUINT256_t>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1827DC94C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLHashKey *,MTLHashKey *,MTLHashKey *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    *(unsigned char *)(v8 + 16) = *(unsigned char *)(a2 + v7 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
    long long v9 = *(_OWORD *)(a2 + v7 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + v7 + 40);
    *(_OWORD *)(v8 + 24) = v9;
    if (a2 != a4) {
      std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(v8 + 56), *(char **)(a2 + v7 + 56), *(void *)(a2 + v7 + 64), (uint64_t)(*(void *)(a2 + v7 + 64) - *(void *)(a2 + v7 + 56)) >> 5);
    }
    v7 += 80;
  }
  while (a2 + v7 != v6);
  return v6;
}

void std::__shared_ptr_emplace<std::vector<machOEntry>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC4880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<machOEntry>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC4880;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

void std::__shared_ptr_emplace<std::vector<machOEntry>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<machOEntry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<machOEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<machOEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<machOEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2))return i; {
        }
          }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1827DCDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1827DCE5C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__emplace_multi<std::string&,std::string_view&>(void *a1, uint64_t a2, _OWORD *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__construct_node<std::string&,std::string_view&>((uint64_t)a1, a2, a3, (uint64_t)&v5);
  return std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi(a1, v5);
}

void sub_1827DCEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__construct_node<std::string&,std::string_view&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = (char *)operator new(0x38uLL);
  unint64_t v10 = v9;
  *(void *)(a4 + 8) = v8;
  *(void *)a4 = v9;
  *(unsigned char *)(a4 + 16) = 0;
  uint8x8_t v11 = v9 + 16;
  *(void *)unint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v9 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *uint8x8_t v11 = *(_OWORD *)a2;
    *((void *)v9 + 4) = *(void *)(a2 + 16);
  }
  *(_OWORD *)(v10 + 40) = *a3;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)v11);
  *((void *)v10 + 1) = result;
  return result;
}

void sub_1827DCF8C(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi(void *a1, void *a2)
{
  unint64_t v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__rehash<false>(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  float v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    BOOL v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2
            ? std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(v6, v18 + 16, a3): 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        float v17 = *(unsigned __int8 **)v17;
        BOOL v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, v12 + 16, v14 + 16);
                float v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = *(unsigned __int8 **)v17;
                unint64_t v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = *(unsigned __int8 **)v15;
              float v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              float v17 = v12;
            }
            *uint64_t v7 = v14;
            *(void *)float v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(v12, v11 + 16, a2))return v11; {
      }
        }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__equal_range_multi<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(a1, a2);
  int8x8_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = (uint64_t)(a1 + 4);
    uint8x8_t v7 = v4;
    do
      uint8x8_t v7 = *(unsigned __int8 **)v7;
    while (v7
         && (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(v6, v7 + 16, a2) & 1) != 0);
  }
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLLoaderMachOPayload>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(112 * a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int8x8_t v3 = __p + 3;
    std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t *std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t const,std::pair<unsigned int,unsigned long long>>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  int8x8_t v5 = (void **)std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__find_equal<MTLUINT256_t>((uint64_t)a1, &v10, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint8x8_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x50uLL);
    long long v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    *((_OWORD *)v6 + 4) = a3[2];
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

void *std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__find_equal<MTLUINT256_t>(uint64_t a1, void *a2, unint64_t *a3)
{
  int8x8_t v5 = *(void **)(a1 + 8);
  unint64_t result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = v4;
        unint64_t v7 = bswap64(*a3);
        unint64_t v8 = bswap64(v6[4]);
        if (v7 != v8) {
          goto LABEL_7;
        }
        unint64_t v7 = bswap64(a3[1]);
        unint64_t v8 = bswap64(v6[5]);
        if (v7 == v8
          && (unint64_t v7 = bswap64(a3[2]), v8 = bswap64(v6[6]), v7 == v8)
          && (unint64_t v7 = bswap64(a3[3]), v8 = bswap64(v6[7]), v7 == v8))
        {
          int v9 = 0;
        }
        else
        {
LABEL_7:
          int v9 = v7 < v8 ? -1 : 1;
        }
        if (v9 < 1) {
          break;
        }
        unint64_t v4 = (void *)*v6;
        unint64_t result = v6;
        if (!*v6) {
          goto LABEL_25;
        }
      }
      unint64_t v10 = bswap64(v6[4]);
      unint64_t v11 = bswap64(*a3);
      if (v10 == v11
        && (unint64_t v10 = bswap64(v6[5]), v11 = bswap64(a3[1]), v10 == v11)
        && (unint64_t v10 = bswap64(v6[6]), v11 = bswap64(a3[2]), v10 == v11)
        && (unint64_t v10 = bswap64(v6[7]), v11 = bswap64(a3[3]), v10 == v11))
      {
        int v12 = 0;
      }
      else if (v10 < v11)
      {
        int v12 = -1;
      }
      else
      {
        int v12 = 1;
      }
      if (v12 < 1) {
        break;
      }
      unint64_t result = v6 + 1;
      unint64_t v4 = (void *)v6[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = result;
  }
LABEL_25:
  *a2 = v6;
  return result;
}

uint64_t ___ZNK21MTLPipelineCollection14visitLibrariesIZ61___MTLBinaryArchive_enumerateArchivesFromPipelineCollection__E3__5EEvOT__block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void **)(v1 + 32);
  int8x8_t v3 = (void *)(v1 + 40);
  if (v2 != (void *)(v1 + 40))
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(v4 + 40);
      unint64_t result = MTLHashKey::hash((MTLHashKey *)v2[8]);
      if (!(v2[4] | v2[5] | v2[6] | v2[7])) {
        goto LABEL_7;
      }
      if (result) {
        _MTLNSDataToDispatchData((void *)result, 0);
      }
      unint64_t result = (*(uint64_t (**)(void))(*(void *)(v5 + 8) + 16))();
      if ((result & 1) == 0) {
LABEL_7:
      }
        **(unsigned char **)uint64_t v5 = 0;
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t,MTLAirEntry *>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v6;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v15;
  i[6] = *(void *)(a3 + 32);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_48:
    void *v23 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827DDBEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLProgramObject *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLProgramObject *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLProgramObject *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLProgramObject *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  long long v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_48:
    *unint64_t v24 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827DDE28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<objc_object  {objcproto11MTLFunction}*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1827DDE98(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  long long v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_48:
    *unint64_t v24 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827DE0DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>>>::__emplace_unique_key_args<MTLHashKey,std::piecewise_construct_t const&,std::tuple<MTLHashKey const&>,std::tuple<>>(uint64_t a1, MTLHashKey *this, uint64_t a3, const MTLHashKey **a4)
{
  unint64_t v8 = MTLHashKey::hash(this);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint8x8_t v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (MTLHashKey::operator==(v14 + 2, this)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint8x8_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<MTLHashKey const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint8x8_t v14 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v25, 0);
  return v14;
}

void sub_1827DE360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

MTLHashKey *std::__hash_table<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<MTLHashKey const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const MTLHashKey **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t result = MTLHashKey::MTLHashKey((MTLHashKey *)(v8 + 16), *a3);
  *((void *)v8 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1827DE3E0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void MTLIOAccelPooledResourceRelease(os_unfair_lock_s *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 + 76;
  unint64_t v3 = *(os_unfair_lock_s **)&a1[76]._os_unfair_lock_opaque;
  if (v3)
  {
    unint64_t v4 = v3 + 2;
    *(void *)&v2->_os_unfair_lock_opaque = 0;
    uint64_t v5 = v3 + 10;
    unint64_t v10 = v3;
    os_unfair_lock_lock(v3 + 10);
    if (v2[8]._os_unfair_lock_opaque == v10[22]._os_unfair_lock_opaque)
    {
      uint64_t v7 = *(os_unfair_lock_s **)&v4[4]._os_unfair_lock_opaque;
      unint64_t v6 = v4 + 4;
      *(void *)&v1[78]._os_unfair_lock_opaque = v7;
      unint64_t v8 = v7 + 80;
      if (v7) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = v6 + 2;
      }
      *(void *)&v9->_os_unfair_lock_opaque = v1 + 78;
      *(void *)&v6->_os_unfair_lock_opaque = v1;
      *(void *)&v1[80]._os_unfair_lock_opaque = v6;
      ++v6[5]._os_unfair_lock_opaque;
      *(void *)&v2[6]._os_unfair_lock_opaque = mach_absolute_time();
    }
    else
    {
    }
    os_unfair_lock_unlock(v5);
    a1 = v10;
  }
}

void std::vector<MTLRasterizationRateLayerDescriptor *>::__append(void **a1, unint64_t a2, void *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      float v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    BOOL v18 = &v15[8 * v12];
    unint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    size_t v21 = v18;
    do
    {
      *(void *)size_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    size_t v22 = &v15[8 * v14];
    unint64_t v24 = (char *)*a1;
    unint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        uint64_t v25 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      unint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t MTLFeatureSetSupportsSamplingFromPixelFormat(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1 >= 0x13)
  {
    if (a3)
    {
      uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Unrecognized Metal Feature Set for this platform" forKey:*MEMORY[0x1E4F28568]];
      uint64_t v8 = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v7];
      uint64_t v5 = 0;
      *a3 = v8;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    MTLGPUFamily v4 = MTLGetGPUFamilyFromFeatureSet(qword_1828E2240[a1]);
    MTLPixelFormatQuery::MTLPixelFormatQuery((MTLPixelFormatQuery *)v12, v4);
    uint64_t v11 = 0;
    memset(&v10, 0, 48);
    MTLPixelFormatGetInfoForFeatureSetQuery(v12, a2, &v10);
    uint64_t v5 = v10.i8[8] & 1;
    if (__p)
    {
      unint64_t v14 = __p;
      operator delete(__p);
    }
  }
  return v5;
}

void sub_1827E13EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLGPUFamilySupportsSamplingFromPixelFormat(MTLGPUFamily a1, uint64_t a2, uint64_t *a3)
{
  if (a1 > 2000)
  {
    if ((unint64_t)(a1 - 3001) >= 3 && (unint64_t)(a1 - 2001) >= 2 && (unint64_t)(a1 - 4001) >= 2) {
      goto LABEL_11;
    }
  }
  else if ((unint64_t)(a1 - 1001) >= 9 && a1 != -1009)
  {
LABEL_11:
    if (!a3) {
      return 0;
    }
    uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Unrecognized Metal GPU Family" forKey:*MEMORY[0x1E4F28568]];
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v7];
    uint64_t v5 = 0;
    *a3 = v8;
    return v5;
  }
  MTLPixelFormatQuery::MTLPixelFormatQuery((MTLPixelFormatQuery *)v11, a1);
  uint64_t v10 = 0;
  memset(&v9, 0, 48);
  MTLPixelFormatGetInfoForFeatureSetQuery(v11, a2, &v9);
  uint64_t v5 = v9.i8[8] & 1;
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1827E1520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPixelFormatGetName(uint64_t a1)
{
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  MTLPixelFormatGetInfoForDevice(0, a1, (uint64_t)v2);
  return *(void *)&v2[0];
}

uint64_t MTLPixelFormatCompatibilityString(uint64_t a1)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  MTLPixelFormatGetInfoForDevice(0, a1, (uint64_t)v5);
  id v1 = (id)objc_opt_new();
  uint64_t v2 = v1;
  int v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x10000) != 0)
  {
    [v1 addObject:@"float"];
    int v3 = DWORD2(v5[0]);
    if ((DWORD2(v5[0]) & 0x20000) == 0)
    {
LABEL_3:
      if ((v3 & 0x40000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((DWORD2(v5[0]) & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  [v2 addObject:@"half"];
  int v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x40000) == 0)
  {
LABEL_4:
    if ((v3 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  [v2 addObject:@"int"];
  int v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x80000) == 0)
  {
LABEL_5:
    if ((v3 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  [v2 addObject:@"uint"];
  int v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x100000) == 0)
  {
LABEL_6:
    if ((v3 & 0x200000) == 0) {
      goto LABEL_7;
    }
LABEL_15:
    [v2 addObject:@"ushort"];
    if ((DWORD2(v5[0]) & 0x20000000) == 0) {
      return [NSString stringWithFormat:@"%@", v2];
    }
    goto LABEL_8;
  }
LABEL_14:
  [v2 addObject:@"short"];
  int v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x200000) != 0) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v3 & 0x20000000) != 0) {
LABEL_8:
  }
    [v2 addObject:@"ulong"];
  return [NSString stringWithFormat:@"%@", v2];
}

uint64_t MTLPixelFormatComputeiOSTotalSizeUsed(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = a3;
  uint64_t v8 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  unsigned __int8 v14 = 0;
  do
  {
    long long v9 = *(_OWORD *)(a1 + 16);
    v12[0] = *(_OWORD *)a1;
    v12[1] = v9;
    id v12[2] = *(_OWORD *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 48);
    if ((WORD4(v12[0]) & 0x401) == 1)
    {
      adjustPixelFormatForiOSDevice(*a2, (uint64_t)v12, &v16, &v15, &v14, 1, 1);
      if (a4) {
        uint64_t v10 = (uint64_t *)&v16;
      }
      else {
        uint64_t v10 = &v15;
      }
      uint64_t v8 = ((v14 + v8 - 1) & -(uint64_t)v14) + *v10;
    }
    ++a2;
    a1 += 56;
    --v5;
  }
  while (v5);
  return v8;
}

BOOL MTLReadWriteTextureIsSupported(void *a1, uint64_t a2)
{
  *(void *)&long long v9 = a1;
  *((void *)&v9 + 1) = -1;
  __p[1] = 0;
  *(void *)&long long v11 = 0;
  __p[0] = 0;
  int v4 = MTLPixelFormatQuery::supportsFamily((id *)&v9, MTLGPUFamilyApple3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v4)
  {
    uint64_t v12 = 0;
    *(_OWORD *)std::match_results<const char *> __p = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    MTLPixelFormatGetInfoForDevice(a1, a2, (uint64_t)&v9);
    return (DWORD2(v9) >> 1) & 1;
  }
  unint64_t v6 = [a1 readWriteTextureSupport];
  char v7 = a2 - 10;
  if ((unint64_t)(a2 - 10) <= 0x3C)
  {
    if (((1 << v7) & 0x100000000000E019) != 0) {
      return v6 > 1;
    }
    if (((1 << v7) & 0x380000000000) != 0) {
      return v6 != 0;
    }
  }
  uint64_t v5 = 0;
  if ((unint64_t)(a2 - 73) <= 0x34 && ((1 << (a2 - 73)) & 0x1C070000000003) != 0) {
    return v6 > 1;
  }
  return v5;
}

void sub_1827E18B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLPixelFormatQuery::MTLPixelFormatQuery(MTLPixelFormatQuery *this, MTLGPUFamily a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  MTLPixelFormatQuery::initGPUFamiliesCache(this);
}

void sub_1827E1908(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void MTLPixelFormatQuery::initGPUFamiliesCache(MTLPixelFormatQuery *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 > 2000)
  {
    if (v2 == 2001)
    {
      BOOL v18 = (char *)*((void *)this + 3);
    }
    else
    {
      if (v2 != 2002) {
        return;
      }
      int v4 = (char *)*((void *)this + 4);
      uint64_t v5 = (void **)((char *)this + 16);
      unint64_t v6 = (char *)*((void *)this + 3);
      if (v6 >= v4)
      {
        unint64_t v19 = (char *)*v5;
        uint64_t v20 = (v6 - (unsigned char *)*v5) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          goto LABEL_314;
        }
        uint64_t v22 = v4 - v19;
        if (v22 >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v23);
          unint64_t v19 = (char *)*((void *)this + 2);
          unint64_t v6 = (char *)*((void *)this + 3);
        }
        else
        {
          unint64_t v24 = 0;
        }
        unint64_t v31 = &v24[8 * v20];
        int v4 = &v24[8 * v23];
        *(void *)unint64_t v31 = 2002;
        char v7 = v31 + 8;
        while (v6 != v19)
        {
          uint64_t v32 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v31 - 1) = v32;
          v31 -= 8;
        }
        *((void *)this + 2) = v31;
        *((void *)this + 3) = v7;
        *((void *)this + 4) = v4;
        if (v19)
        {
          operator delete(v19);
          int v4 = (char *)*((void *)this + 4);
        }
      }
      else
      {
        *(void *)unint64_t v6 = 2002;
        char v7 = v6 + 8;
      }
      *((void *)this + 3) = v7;
      if (v7 >= v4)
      {
        uint64_t v33 = (char *)*v5;
        uint64_t v34 = (v7 - (unsigned char *)*v5) >> 3;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61) {
          goto LABEL_314;
        }
        uint64_t v36 = v4 - v33;
        if (v36 >> 2 > v35) {
          unint64_t v35 = v36 >> 2;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v37);
          uint64_t v33 = (char *)*((void *)this + 2);
          char v7 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v38 = 0;
        }
        uint64_t v163 = &v38[8 * v34];
        uint64_t v164 = &v38[8 * v37];
        *(void *)uint64_t v163 = 3003;
        BOOL v18 = v163 + 8;
        while (v7 != v33)
        {
          uint64_t v165 = *((void *)v7 - 1);
          v7 -= 8;
          *((void *)v163 - 1) = v165;
          v163 -= 8;
        }
        *((void *)this + 2) = v163;
        *((void *)this + 3) = v18;
        *((void *)this + 4) = v164;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(void *)char v7 = 3003;
        BOOL v18 = v7 + 8;
      }
      *((void *)this + 3) = v18;
    }
    uint64_t v167 = (char **)((char *)this + 32);
    v166 = (char *)*((void *)this + 4);
    uint64_t v168 = (void **)((char *)this + 16);
    if (v18 >= v166)
    {
      v170 = (char *)*v168;
      uint64_t v171 = (v18 - (unsigned char *)*v168) >> 3;
      unint64_t v172 = v171 + 1;
      if ((unint64_t)(v171 + 1) >> 61) {
        goto LABEL_314;
      }
      uint64_t v173 = v166 - v170;
      if (v173 >> 2 > v172) {
        unint64_t v172 = v173 >> 2;
      }
      if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v174 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v174 = v172;
      }
      if (v174)
      {
        uint64_t v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v174);
        v170 = (char *)*((void *)this + 2);
        BOOL v18 = (char *)*((void *)this + 3);
      }
      else
      {
        uint64_t v175 = 0;
      }
      uint64_t v176 = &v175[8 * v171];
      v166 = &v175[8 * v174];
      *(void *)uint64_t v176 = 2001;
      uint64_t v169 = v176 + 8;
      while (v18 != v170)
      {
        uint64_t v177 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v176 - 1) = v177;
        v176 -= 8;
      }
      *((void *)this + 2) = v176;
      *((void *)this + 3) = v169;
      *((void *)this + 4) = v166;
      if (v170)
      {
        operator delete(v170);
        v166 = *v167;
      }
    }
    else
    {
      *(void *)BOOL v18 = 2001;
      uint64_t v169 = v18 + 8;
    }
    *((void *)this + 3) = v169;
    if (v169 >= v166)
    {
      uint64_t v179 = (char *)*v168;
      uint64_t v180 = (v169 - (unsigned char *)*v168) >> 3;
      unint64_t v181 = v180 + 1;
      if ((unint64_t)(v180 + 1) >> 61) {
        goto LABEL_314;
      }
      uint64_t v182 = v166 - v179;
      if (v182 >> 2 > v181) {
        unint64_t v181 = v182 >> 2;
      }
      if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v183 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v183 = v181;
      }
      if (v183)
      {
        v184 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v183);
        uint64_t v179 = (char *)*((void *)this + 2);
        uint64_t v169 = (char *)*((void *)this + 3);
      }
      else
      {
        v184 = 0;
      }
      v185 = &v184[8 * v180];
      v166 = &v184[8 * v183];
      *(void *)v185 = 3001;
      uint64_t v178 = v185 + 8;
      while (v169 != v179)
      {
        uint64_t v186 = *((void *)v169 - 1);
        v169 -= 8;
        *((void *)v185 - 1) = v186;
        v185 -= 8;
      }
      *((void *)this + 2) = v185;
      *((void *)this + 3) = v178;
      *((void *)this + 4) = v166;
      if (v179)
      {
        operator delete(v179);
        v166 = *v167;
      }
    }
    else
    {
      *(void *)uint64_t v169 = 3001;
      uint64_t v178 = v169 + 8;
    }
    *((void *)this + 3) = v178;
    if (v178 < v166)
    {
      *(void *)uint64_t v178 = 3002;
      v153 = v178 + 8;
      goto LABEL_312;
    }
    uint64_t v154 = (char *)*v168;
    uint64_t v187 = (v178 - (unsigned char *)*v168) >> 3;
    unint64_t v188 = v187 + 1;
    if (!((unint64_t)(v187 + 1) >> 61))
    {
      uint64_t v189 = v166 - v154;
      if (v189 >> 2 > v188) {
        unint64_t v188 = v189 >> 2;
      }
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v190 = v188;
      }
      if (v190)
      {
        long long v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v190);
        uint64_t v154 = (char *)*((void *)this + 2);
        uint64_t v178 = (char *)*((void *)this + 3);
      }
      else
      {
        long long v191 = 0;
      }
      uint64_t v160 = &v191[8 * v187];
      uint64_t v161 = &v191[8 * v190];
      *(void *)uint64_t v160 = 3002;
      v153 = v160 + 8;
      while (v178 != v154)
      {
        uint64_t v192 = *((void *)v178 - 1);
        v178 -= 8;
        *((void *)v160 - 1) = v192;
        v160 -= 8;
      }
      goto LABEL_310;
    }
LABEL_314:
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  switch(v2)
  {
    case 1001:
      int v3 = (char *)*((void *)this + 3);
      goto LABEL_227;
    case 1002:
      long long v11 = (char *)*((void *)this + 3);
      goto LABEL_210;
    case 1003:
      uint64_t v12 = (char *)*((void *)this + 3);
      goto LABEL_177;
    case 1004:
      uint64_t v13 = (char *)*((void *)this + 3);
      goto LABEL_160;
    case 1005:
      unsigned __int8 v14 = (char *)*((void *)this + 3);
      goto LABEL_127;
    case 1006:
      uint64_t v15 = (char *)*((void *)this + 3);
      goto LABEL_110;
    case 1007:
      unint64_t v16 = (char *)*((void *)this + 3);
      goto LABEL_93;
    case 1008:
      float v17 = (char *)*((void *)this + 3);
      goto LABEL_76;
    case 1009:
      uint64_t v10 = (char *)*((void *)this + 3);
      goto LABEL_59;
    default:
      if (v2 != -1009) {
        return;
      }
      unint64_t v8 = *((void *)this + 4);
      long long v9 = (char *)*((void *)this + 3);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v25 = (unsigned char *)*((void *)this + 2);
        uint64_t v26 = (v9 - v25) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          goto LABEL_315;
        }
        unint64_t v27 = v8 - (void)v25;
        unint64_t v28 = (uint64_t)(v8 - (void)v25) >> 2;
        if (v28 <= v26 + 1) {
          unint64_t v28 = v26 + 1;
        }
        if (v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v29);
          uint64_t v25 = (unsigned char *)*((void *)this + 2);
          long long v9 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v30 = 0;
        }
        unint64_t v39 = &v30[8 * v26];
        uint64_t v40 = &v30[8 * v29];
        *(void *)unint64_t v39 = -1009;
        uint64_t v10 = v39 + 8;
        while (v9 != v25)
        {
          uint64_t v41 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v39 - 1) = v41;
          v39 -= 8;
        }
        *((void *)this + 2) = v39;
        *((void *)this + 3) = v10;
        *((void *)this + 4) = v40;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(void *)long long v9 = -1009;
        uint64_t v10 = v9 + 8;
      }
      *((void *)this + 3) = v10;
LABEL_59:
      unint64_t v42 = *((void *)this + 4);
      if ((unint64_t)v10 >= v42)
      {
        uint64_t v43 = (unsigned char *)*((void *)this + 2);
        uint64_t v44 = (v10 - v43) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          goto LABEL_315;
        }
        unint64_t v45 = v42 - (void)v43;
        unint64_t v46 = (uint64_t)(v42 - (void)v43) >> 2;
        if (v46 <= v44 + 1) {
          unint64_t v46 = v44 + 1;
        }
        if (v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47)
        {
          uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v47);
          uint64_t v43 = (unsigned char *)*((void *)this + 2);
          uint64_t v10 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v48 = 0;
        }
        uint64_t v49 = &v48[8 * v44];
        uint64_t v50 = &v48[8 * v47];
        *(void *)uint64_t v49 = 1009;
        float v17 = v49 + 8;
        while (v10 != v43)
        {
          uint64_t v51 = *((void *)v10 - 1);
          v10 -= 8;
          *((void *)v49 - 1) = v51;
          v49 -= 8;
        }
        *((void *)this + 2) = v49;
        *((void *)this + 3) = v17;
        *((void *)this + 4) = v50;
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *(void *)uint64_t v10 = 1009;
        float v17 = v10 + 8;
      }
      *((void *)this + 3) = v17;
LABEL_76:
      unint64_t v52 = *((void *)this + 4);
      if ((unint64_t)v17 >= v52)
      {
        int v53 = (unsigned char *)*((void *)this + 2);
        uint64_t v54 = (v17 - v53) >> 3;
        if ((unint64_t)(v54 + 1) >> 61) {
          goto LABEL_315;
        }
        unint64_t v55 = v52 - (void)v53;
        unint64_t v56 = (uint64_t)(v52 - (void)v53) >> 2;
        if (v56 <= v54 + 1) {
          unint64_t v56 = v54 + 1;
        }
        if (v55 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v56;
        }
        if (v57)
        {
          uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v57);
          int v53 = (unsigned char *)*((void *)this + 2);
          float v17 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v58 = 0;
        }
        uint64_t v59 = &v58[8 * v54];
        uint64_t v60 = &v58[8 * v57];
        *(void *)uint64_t v59 = 1008;
        unint64_t v16 = v59 + 8;
        while (v17 != v53)
        {
          uint64_t v61 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v59 - 1) = v61;
          v59 -= 8;
        }
        *((void *)this + 2) = v59;
        *((void *)this + 3) = v16;
        *((void *)this + 4) = v60;
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)float v17 = 1008;
        unint64_t v16 = v17 + 8;
      }
      *((void *)this + 3) = v16;
LABEL_93:
      unint64_t v62 = *((void *)this + 4);
      if ((unint64_t)v16 >= v62)
      {
        uint64_t v63 = (unsigned char *)*((void *)this + 2);
        uint64_t v64 = (v16 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61) {
          goto LABEL_315;
        }
        unint64_t v65 = v62 - (void)v63;
        unint64_t v66 = (uint64_t)(v62 - (void)v63) >> 2;
        if (v66 <= v64 + 1) {
          unint64_t v66 = v64 + 1;
        }
        if (v65 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v66;
        }
        if (v67)
        {
          uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v67);
          uint64_t v63 = (unsigned char *)*((void *)this + 2);
          unint64_t v16 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v68 = 0;
        }
        uint64_t v69 = &v68[8 * v64];
        uint64_t v70 = &v68[8 * v67];
        *(void *)uint64_t v69 = 1007;
        uint64_t v15 = v69 + 8;
        while (v16 != v63)
        {
          uint64_t v71 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v69 - 1) = v71;
          v69 -= 8;
        }
        *((void *)this + 2) = v69;
        *((void *)this + 3) = v15;
        *((void *)this + 4) = v70;
        if (v63) {
          operator delete(v63);
        }
      }
      else
      {
        *(void *)unint64_t v16 = 1007;
        uint64_t v15 = v16 + 8;
      }
      *((void *)this + 3) = v15;
LABEL_110:
      unint64_t v72 = *((void *)this + 4);
      if ((unint64_t)v15 >= v72)
      {
        uint64_t v73 = (unsigned char *)*((void *)this + 2);
        uint64_t v74 = (v15 - v73) >> 3;
        if ((unint64_t)(v74 + 1) >> 61) {
          goto LABEL_315;
        }
        unint64_t v75 = v72 - (void)v73;
        unint64_t v76 = (uint64_t)(v72 - (void)v73) >> 2;
        if (v76 <= v74 + 1) {
          unint64_t v76 = v74 + 1;
        }
        if (v75 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v77 = v76;
        }
        if (v77)
        {
          uint64_t v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v77);
          uint64_t v73 = (unsigned char *)*((void *)this + 2);
          uint64_t v15 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v78 = 0;
        }
        uint64_t v79 = &v78[8 * v74];
        std::string::size_type v80 = &v78[8 * v77];
        *(void *)uint64_t v79 = 1006;
        unsigned __int8 v14 = v79 + 8;
        while (v15 != v73)
        {
          uint64_t v81 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v79 - 1) = v81;
          v79 -= 8;
        }
        *((void *)this + 2) = v79;
        *((void *)this + 3) = v14;
        *((void *)this + 4) = v80;
        if (v73) {
          operator delete(v73);
        }
      }
      else
      {
        *(void *)uint64_t v15 = 1006;
        unsigned __int8 v14 = v15 + 8;
      }
      *((void *)this + 3) = v14;
LABEL_127:
      uint64_t v82 = (char *)*((void *)this + 4);
      uint64_t v83 = (void **)((char *)this + 16);
      if (v14 >= v82)
      {
        uint64_t v85 = (char *)*v83;
        uint64_t v86 = (v14 - (unsigned char *)*v83) >> 3;
        unint64_t v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 61) {
          goto LABEL_314;
        }
        uint64_t v88 = v82 - v85;
        if (v88 >> 2 > v87) {
          unint64_t v87 = v88 >> 2;
        }
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v89 = v87;
        }
        if (v89)
        {
          uint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v89);
          uint64_t v85 = (char *)*((void *)this + 2);
          unsigned __int8 v14 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v90 = 0;
        }
        int64_t v91 = &v90[8 * v86];
        uint64_t v82 = &v90[8 * v89];
        *(void *)int64_t v91 = 1005;
        uint64_t v84 = v91 + 8;
        while (v14 != v85)
        {
          uint64_t v92 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v91 - 1) = v92;
          v91 -= 8;
        }
        *((void *)this + 2) = v91;
        *((void *)this + 3) = v84;
        *((void *)this + 4) = v82;
        if (v85)
        {
          operator delete(v85);
          uint64_t v82 = (char *)*((void *)this + 4);
        }
      }
      else
      {
        *(void *)unsigned __int8 v14 = 1005;
        uint64_t v84 = v14 + 8;
      }
      *((void *)this + 3) = v84;
      if (v84 >= v82)
      {
        MTLAttributeFormat v93 = (char *)*v83;
        uint64_t v94 = (v84 - (unsigned char *)*v83) >> 3;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 61) {
          goto LABEL_314;
        }
        uint64_t v96 = v82 - v93;
        if (v96 >> 2 > v95) {
          unint64_t v95 = v96 >> 2;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          uint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v97);
          MTLAttributeFormat v93 = (char *)*((void *)this + 2);
          uint64_t v84 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v98 = 0;
        }
        uint64_t v99 = &v98[8 * v94];
        uint64_t v100 = &v98[8 * v97];
        *(void *)uint64_t v99 = 3003;
        uint64_t v13 = v99 + 8;
        while (v84 != v93)
        {
          uint64_t v101 = *((void *)v84 - 1);
          v84 -= 8;
          *((void *)v99 - 1) = v101;
          v99 -= 8;
        }
        *((void *)this + 2) = v99;
        *((void *)this + 3) = v13;
        *((void *)this + 4) = v100;
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *(void *)uint64_t v84 = 3003;
        uint64_t v13 = v84 + 8;
      }
      *((void *)this + 3) = v13;
LABEL_160:
      unint64_t v102 = *((void *)this + 4);
      if ((unint64_t)v13 >= v102)
      {
        uint64_t v103 = (unsigned char *)*((void *)this + 2);
        uint64_t v104 = (v13 - v103) >> 3;
        if ((unint64_t)(v104 + 1) >> 61) {
          goto LABEL_315;
        }
        unint64_t v105 = v102 - (void)v103;
        unint64_t v106 = (uint64_t)(v102 - (void)v103) >> 2;
        if (v106 <= v104 + 1) {
          unint64_t v106 = v104 + 1;
        }
        if (v105 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v107 = v106;
        }
        if (v107)
        {
          uint64_t v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v107);
          uint64_t v103 = (unsigned char *)*((void *)this + 2);
          uint64_t v13 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v108 = 0;
        }
        uint64_t v109 = &v108[8 * v104];
        uint64_t v110 = &v108[8 * v107];
        *(void *)uint64_t v109 = 1004;
        uint64_t v12 = v109 + 8;
        while (v13 != v103)
        {
          uint64_t v111 = *((void *)v13 - 1);
          v13 -= 8;
          *((void *)v109 - 1) = v111;
          v109 -= 8;
        }
        *((void *)this + 2) = v109;
        *((void *)this + 3) = v12;
        *((void *)this + 4) = v110;
        if (v103) {
          operator delete(v103);
        }
      }
      else
      {
        *(void *)uint64_t v13 = 1004;
        uint64_t v12 = v13 + 8;
      }
      *((void *)this + 3) = v12;
LABEL_177:
      uint64_t v112 = (char *)*((void *)this + 4);
      uint64_t v113 = (void **)((char *)this + 16);
      if (v12 >= v112)
      {
        uint64_t v115 = (char *)*v113;
        uint64_t v116 = (v12 - (unsigned char *)*v113) >> 3;
        unint64_t v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 61) {
          goto LABEL_314;
        }
        uint64_t v118 = v112 - v115;
        if (v118 >> 2 > v117) {
          unint64_t v117 = v118 >> 2;
        }
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v119 = v117;
        }
        if (v119)
        {
          uint64_t v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v119);
          uint64_t v115 = (char *)*((void *)this + 2);
          uint64_t v12 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v120 = 0;
        }
        uint64_t v121 = &v120[8 * v116];
        uint64_t v112 = &v120[8 * v119];
        *(void *)uint64_t v121 = 1003;
        uint64_t v114 = v121 + 8;
        while (v12 != v115)
        {
          uint64_t v122 = *((void *)v12 - 1);
          v12 -= 8;
          *((void *)v121 - 1) = v122;
          v121 -= 8;
        }
        *((void *)this + 2) = v121;
        *((void *)this + 3) = v114;
        *((void *)this + 4) = v112;
        if (v115)
        {
          operator delete(v115);
          uint64_t v112 = (char *)*((void *)this + 4);
        }
      }
      else
      {
        *(void *)uint64_t v12 = 1003;
        uint64_t v114 = v12 + 8;
      }
      *((void *)this + 3) = v114;
      if (v114 >= v112)
      {
        uint64_t v123 = (char *)*v113;
        uint64_t v124 = (v114 - (unsigned char *)*v113) >> 3;
        unint64_t v125 = v124 + 1;
        if ((unint64_t)(v124 + 1) >> 61) {
          goto LABEL_314;
        }
        uint64_t v126 = v112 - v123;
        if (v126 >> 2 > v125) {
          unint64_t v125 = v126 >> 2;
        }
        if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v127 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v125;
        }
        if (v127)
        {
          uint64_t v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v127);
          uint64_t v123 = (char *)*((void *)this + 2);
          uint64_t v114 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v128 = 0;
        }
        v129 = &v128[8 * v124];
        uint64_t v130 = &v128[8 * v127];
        *(void *)v129 = 3002;
        long long v11 = v129 + 8;
        while (v114 != v123)
        {
          uint64_t v131 = *((void *)v114 - 1);
          v114 -= 8;
          *((void *)v129 - 1) = v131;
          v129 -= 8;
        }
        *((void *)this + 2) = v129;
        *((void *)this + 3) = v11;
        *((void *)this + 4) = v130;
        if (v123) {
          operator delete(v123);
        }
      }
      else
      {
        *(void *)uint64_t v114 = 3002;
        long long v11 = v114 + 8;
      }
      *((void *)this + 3) = v11;
LABEL_210:
      unint64_t v132 = *((void *)this + 4);
      if ((unint64_t)v11 >= v132)
      {
        uint64_t v133 = (unsigned char *)*((void *)this + 2);
        uint64_t v134 = (v11 - v133) >> 3;
        if (!((unint64_t)(v134 + 1) >> 61))
        {
          unint64_t v135 = v132 - (void)v133;
          unint64_t v136 = (uint64_t)(v132 - (void)v133) >> 2;
          if (v136 <= v134 + 1) {
            unint64_t v136 = v134 + 1;
          }
          if (v135 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v137 = v136;
          }
          if (v137)
          {
            uint64_t v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v137);
            uint64_t v133 = (unsigned char *)*((void *)this + 2);
            long long v11 = (char *)*((void *)this + 3);
          }
          else
          {
            uint64_t v138 = 0;
          }
          uint64_t v139 = &v138[8 * v134];
          uint64_t v140 = &v138[8 * v137];
          *(void *)uint64_t v139 = 1002;
          int v3 = v139 + 8;
          while (v11 != v133)
          {
            uint64_t v141 = *((void *)v11 - 1);
            v11 -= 8;
            *((void *)v139 - 1) = v141;
            v139 -= 8;
          }
          *((void *)this + 2) = v139;
          *((void *)this + 3) = v3;
          *((void *)this + 4) = v140;
          if (v133) {
            operator delete(v133);
          }
          goto LABEL_226;
        }
LABEL_315:
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      *(void *)long long v11 = 1002;
      int v3 = v11 + 8;
LABEL_226:
      *((void *)this + 3) = v3;
LABEL_227:
      uint64_t v142 = (char *)*((void *)this + 4);
      uint64_t v143 = (void **)((char *)this + 16);
      if (v3 >= v142)
      {
        uint64_t v145 = (char *)*v143;
        uint64_t v146 = (v3 - (unsigned char *)*v143) >> 3;
        unint64_t v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 61) {
          goto LABEL_314;
        }
        uint64_t v148 = v142 - v145;
        if (v148 >> 2 > v147) {
          unint64_t v147 = v148 >> 2;
        }
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v149 = v147;
        }
        if (v149)
        {
          uint64_t v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v149);
          uint64_t v145 = (char *)*((void *)this + 2);
          int v3 = (char *)*((void *)this + 3);
        }
        else
        {
          uint64_t v150 = 0;
        }
        uint64_t v151 = &v150[8 * v146];
        uint64_t v142 = &v150[8 * v149];
        *(void *)uint64_t v151 = 1001;
        uint64_t v144 = v151 + 8;
        while (v3 != v145)
        {
          uint64_t v152 = *((void *)v3 - 1);
          v3 -= 8;
          *((void *)v151 - 1) = v152;
          v151 -= 8;
        }
        *((void *)this + 2) = v151;
        *((void *)this + 3) = v144;
        *((void *)this + 4) = v142;
        if (v145)
        {
          operator delete(v145);
          uint64_t v142 = (char *)*((void *)this + 4);
        }
      }
      else
      {
        *(void *)int v3 = 1001;
        uint64_t v144 = v3 + 8;
      }
      *((void *)this + 3) = v144;
      if (v144 >= v142)
      {
        uint64_t v154 = (char *)*v143;
        uint64_t v155 = (v144 - (unsigned char *)*v143) >> 3;
        unint64_t v156 = v155 + 1;
        if (!((unint64_t)(v155 + 1) >> 61))
        {
          uint64_t v157 = v142 - v154;
          if (v157 >> 2 > v156) {
            unint64_t v156 = v157 >> 2;
          }
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v158 = v156;
          }
          if (v158)
          {
            uint64_t v159 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v158);
            uint64_t v154 = (char *)*((void *)this + 2);
            uint64_t v144 = (char *)*((void *)this + 3);
          }
          else
          {
            uint64_t v159 = 0;
          }
          uint64_t v160 = &v159[8 * v155];
          uint64_t v161 = &v159[8 * v158];
          *(void *)uint64_t v160 = 3001;
          v153 = v160 + 8;
          while (v144 != v154)
          {
            uint64_t v162 = *((void *)v144 - 1);
            v144 -= 8;
            *((void *)v160 - 1) = v162;
            v160 -= 8;
          }
LABEL_310:
          *((void *)this + 2) = v160;
          *((void *)this + 3) = v153;
          *((void *)this + 4) = v161;
          if (v154) {
            operator delete(v154);
          }
          goto LABEL_312;
        }
        goto LABEL_314;
      }
      *(void *)uint64_t v144 = 3001;
      v153 = v144 + 8;
LABEL_312:
      *((void *)this + 3) = v153;
      return;
  }
}

uint64_t MTLAccelerationStructureInstanceDescriptorSize(MTLAccelerationStructureInstanceDescriptorType a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 < (MTLAccelerationStructureInstanceDescriptorTypeIndirectMotion|MTLAccelerationStructureInstanceDescriptorTypeUserID)) {
    return qword_1828E22D8[a1];
  }
  MTLReportFailure(0, "MTLAccelerationStructureInstanceDescriptorSize", 1200, @"Invalid instance descriptor type", a5, a6, a7, a8, vars0);
  return 0;
}

BOOL isValidMTLAccelerationStructureInstanceDescriptorType(MTLAccelerationStructureInstanceDescriptorType a1)
{
  return a1 < (MTLAccelerationStructureInstanceDescriptorTypeIndirectMotion|MTLAccelerationStructureInstanceDescriptorTypeUserID);
}

uint64_t newStringFromConstantValue(unsigned __int16 *a1, uint64_t a2)
{
  int ComponentCount = MTLDataTypeGetComponentCount(a2);
  uint64_t ComponentType = MTLDataTypeGetComponentType(a2);
  uint64_t v6 = _MTLConstantDataSize(ComponentType);
  std::string::basic_string[abi:ne180100]<0>(&v19, "(");
  if (ComponentCount)
  {
    for (int i = 0; i != ComponentCount; ++i)
    {
      std::string __s = 0;
      if (i) {
        std::string::append(&v19, ", ");
      }
      if (ComponentType <= 36)
      {
        if (ComponentType > 28)
        {
          if (ComponentType == 29)
          {
            asprintf(&__s, "%i", *(_DWORD *)a1);
          }
          else
          {
            if (ComponentType != 33) {
              goto LABEL_33;
            }
            asprintf(&__s, "%u", *(_DWORD *)a1);
          }
        }
        else if (ComponentType == 3)
        {
          asprintf(&__s, "%f", *(float *)a1);
        }
        else
        {
          if (ComponentType != 16) {
            goto LABEL_33;
          }
          _H0 = *a1;
          __asm { FCVT            D0, H0 }
          asprintf(&__s, "%f", _D0);
        }
      }
      else if (ComponentType <= 44)
      {
        if (ComponentType == 37)
        {
          asprintf(&__s, "%i", (__int16)*a1);
        }
        else
        {
          if (ComponentType != 41) {
            goto LABEL_33;
          }
          asprintf(&__s, "%u", *a1);
        }
      }
      else if (ComponentType == 45)
      {
        asprintf(&__s, "%i", *(char *)a1);
      }
      else
      {
        if (ComponentType != 49 && ComponentType != 53) {
LABEL_33:
        }
          abort();
        asprintf(&__s, "%u", *(unsigned __int8 *)a1);
      }
      std::string::append(&v19, __s);
      free(__s);
      a1 = (unsigned __int16 *)((char *)a1 + v6);
    }
  }
  std::string::append(&v19, ")");
  id v14 = [NSString alloc];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v19;
  }
  else {
    uint64_t v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  uint64_t v16 = [v14 initWithUTF8String:v15];
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_1827E6EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *MTLConstantStorage::appendConstantData(uint64_t a1, std::vector<char> *a2, char *a3)
{
  size_t v5 = _MTLConstantDataSize(*a3);
  std::vector<char>::pointer begin = a2->__begin_;
  unint64_t v7 = a2->__end_ - a2->__begin_;
  char v8 = *a3;
  unint64_t v9 = v7 + v5 + 1;
  if (v7 >= v9)
  {
    if (v7 > v9) {
      a2->__end_ = &begin[v9];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a2, v5 + 1);
    std::vector<char>::pointer begin = a2->__begin_;
  }
  begin[v7] = v8;
  uint64_t v10 = &a2->__begin_[v7 + 1];
  long long v11 = (const void *)*((void *)a3 + 1);

  return memcpy(v10, v11, v5);
}

BOOL MTLConstantStorage::isEqual(void *a1, unsigned __int8 **a2)
{
  if ((unsigned __int8 *)a1[2] != a2[2]) {
    return 0;
  }
  int v4 = (unsigned __int8 *)(a1 + 1);
  size_t v5 = (unsigned __int8 *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    uint64_t v6 = *a2;
    while (std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,std::pair<std::string const,MTLConstantStorage::ConstantData>>((uint64_t)&v20, v5 + 32, v6 + 32))
    {
      unint64_t v7 = (unsigned __int8 *)*((void *)v5 + 1);
      char v8 = v5;
      if (v7)
      {
        do
        {
          size_t v5 = v7;
          unint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v5 = (unsigned __int8 *)*((void *)v8 + 2);
          BOOL v9 = *(void *)v5 == (void)v8;
          char v8 = v5;
        }
        while (!v9);
      }
      uint64_t v10 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          long long v11 = v10;
          uint64_t v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v11 = (unsigned __int8 *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v9);
      }
      uint64_t v6 = v11;
      if (v5 == v4) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if ((unsigned __int8 *)a1[5] != a2[5]) {
    return 0;
  }
  uint64_t v12 = (unsigned __int16 *)a1[3];
  uint64_t v13 = (unsigned __int16 *)(a1 + 4);
  if (v12 == v13) {
    return 1;
  }
  id v14 = (unsigned __int16 *)a2[3];
  do
  {
    BOOL result = std::__equal_to::operator()[abi:ne180100]<std::pair<unsigned short const,MTLConstantStorage::ConstantData>,std::pair<unsigned short const,MTLConstantStorage::ConstantData>>((uint64_t)&v21, v12 + 16, v14 + 16);
    if (!result) {
      break;
    }
    uint64_t v16 = (unsigned __int16 *)*((void *)v12 + 1);
    float v17 = v12;
    if (v16)
    {
      do
      {
        uint64_t v12 = v16;
        uint64_t v16 = *(unsigned __int16 **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        uint64_t v12 = (unsigned __int16 *)*((void *)v17 + 2);
        BOOL v9 = *(void *)v12 == (void)v17;
        float v17 = v12;
      }
      while (!v9);
    }
    BOOL v18 = (unsigned __int16 *)*((void *)v14 + 1);
    if (v18)
    {
      do
      {
        std::string v19 = v18;
        BOOL v18 = *(unsigned __int16 **)v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        std::string v19 = (unsigned __int16 *)*((void *)v14 + 2);
        BOOL v9 = *(void *)v19 == (void)v14;
        id v14 = v19;
      }
      while (!v9);
    }
    id v14 = v19;
  }
  while (v12 != v13);
  return result;
}

uint64_t MTLConstantStorage::hashData(MTLConstantStorage *this)
{
  memset(&v31, 0, sizeof(v31));
  memset(&v30, 0, sizeof(v30));
  std::vector<std::string>::reserve(&v30, *((void *)this + 2));
  uint64_t v2 = *(MTLConstantStorage **)this;
  if (*(MTLConstantStorage **)this == (MTLConstantStorage *)((char *)this + 8))
  {
    std::vector<char>::pointer end = v30.__end_;
  }
  else
  {
    std::vector<char>::pointer end = v30.__end_;
    do
    {
      int v4 = (long long *)((char *)v2 + 32);
      if (end >= v30.__end_cap_.__value_)
      {
        std::vector<char>::pointer end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v30, v4);
      }
      else
      {
        if (*((char *)v2 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(end, *((const std::string::value_type **)v2 + 4), *((void *)v2 + 5));
        }
        else
        {
          long long v5 = *v4;
          end->__r_.__value_.__r.__words[2] = *((void *)v2 + 6);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v5;
        }
        ++end;
      }
      v30.__end_ = end;
      uint64_t v6 = (MTLConstantStorage *)*((void *)v2 + 1);
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = *(MTLConstantStorage **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (MTLConstantStorage *)*((void *)v2 + 2);
          BOOL v8 = *(void *)v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != (MTLConstantStorage *)((char *)this + 8));
  }
  unint64_t v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v30.__begin_) >> 3));
  if (end == v30.__begin_) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v30.__begin_, (long long *)end, (uint64_t)&v32, v10, 1);
  std::vector<std::string>::pointer begin = v30.__begin_;
  for (std::vector<std::string>::pointer i = v30.__end_; begin != i; ++begin)
  {
    int v13 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
    if (v13 < 0) {
      std::vector<char>::size_type size = begin->__r_.__value_.__l.__size_;
    }
    else {
      std::vector<char>::size_type size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
    }
    std::vector<char>::pointer v15 = v31.__begin_;
    int64_t v16 = v31.__end_ - v31.__begin_;
    unint64_t v17 = size + v31.__end_ - v31.__begin_;
    if (v31.__end_ - v31.__begin_ >= v17)
    {
      if (v31.__end_ - v31.__begin_ > v17) {
        v31.__end_ += size;
      }
    }
    else
    {
      std::vector<unsigned char>::__append(&v31, size);
      std::vector<char>::pointer v15 = v31.__begin_;
      LOBYTE(v13) = *((unsigned char *)&begin->__r_.__value_.__s + 23);
    }
    std::vector<std::string>::pointer v18 = begin;
    if ((v13 & 0x80) != 0) {
      std::vector<std::string>::pointer v18 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
    }
    memcpy(&v15[v16], v18, size);
    uint64_t v32 = (long long *)begin;
    std::string v19 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&begin->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v32);
    MTLConstantStorage::appendConstantData((uint64_t)v19, &v31, (char *)v19 + 56);
  }
  std::match_results<const char *> __p = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  char v20 = (unsigned __int8 *)*((void *)this + 3);
  if (v20 != (unsigned __int8 *)((char *)this + 32))
  {
    _MTLConstantDataSize(v20[40]);
    operator new[]();
  }
  std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>();
  char v21 = (int *)v31.__begin_;
  std::vector<char>::pointer v22 = v31.__end_;
  unint64_t v23 = v31.__end_ - v31.__begin_;
  if (((v31.__end_ - v31.__begin_) & 3) != 0)
  {
    unint64_t v24 = (v23 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if (v24 <= v23)
    {
      if (v24 < v23)
      {
        std::vector<char>::pointer v22 = &v31.__begin_[v24];
        v31.__end_ = &v31.__begin_[v24];
      }
    }
    else
    {
      std::vector<unsigned char>::__append(&v31, v24 - v23);
      char v21 = (int *)v31.__begin_;
      std::vector<char>::pointer v22 = v31.__end_;
    }
  }
  uint64_t v25 = _MTLHashState(v21, v22 - (std::vector<char>::pointer)v21);
  if (__p)
  {
    unint64_t v28 = __p;
    operator delete(__p);
  }
  std::match_results<const char *> __p = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v31.__begin_)
  {
    v31.__end_ = v31.__begin_;
    operator delete(v31.__begin_);
  }
  return v25;
}

void sub_1827E7B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::match_results<const char *> __p = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1827E7C88(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>(uint64_t a1, __int16 *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 2)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 3uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 3;
  __int16 v5 = *a2;
  *(unsigned char *)(v4 - 1) = *((unsigned char *)a2 + 2);
  *(_WORD *)(v4 - 3) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>(uint64_t a1, void *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 8;
  *(void *)(v4 - 8) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>(uint64_t a1, _OWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0xF)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x10uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 16;
  *(_OWORD *)(v4 - 16) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>(uint64_t a1, _DWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 4;
  *(_DWORD *)(v4 - 4) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>(uint64_t a1, void *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 8;
  *(void *)(v4 - 8) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>(uint64_t a1, _OWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0xF)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x10uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 16;
  *(_OWORD *)(v4 - 16) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>(uint64_t a1, _OWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0x1F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x20uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 32;
  long long v5 = a2[1];
  *(_OWORD *)(v4 - 32) = *a2;
  *(_OWORD *)(v4 - 16) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>(uint64_t a1, uint64_t *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0xB)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0xCuLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 12;
  uint64_t v5 = *a2;
  *(_DWORD *)(v4 - 4) = *((_DWORD *)a2 + 2);
  *(void *)(v4 - 12) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>(uint64_t a1, _OWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0x1F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x20uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 32;
  long long v5 = a2[1];
  *(_OWORD *)(v4 - 32) = *a2;
  *(_OWORD *)(v4 - 16) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>(uint64_t a1, long long *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0x3F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x40uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 64;
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[3];
  *(_OWORD *)(v4 - 32) = a2[2];
  *(_OWORD *)(v4 - 16) = v7;
  *(_OWORD *)(v4 - 64) = v5;
  *(_OWORD *)(v4 - 48) = v6;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>(uint64_t a1, void *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(v4 - 8) = *a2;
  uint64_t v5 = v4 - 8;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>(uint64_t a1, _OWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0xF)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x10uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 16;
  *(_OWORD *)(v4 - 16) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>(uint64_t a1, long long *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0x17)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x18uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 24;
  long long v5 = *a2;
  *(void *)(v4 - 8) = *((void *)a2 + 2);
  *(_OWORD *)(v4 - 24) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>(uint64_t a1, _OWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0x1F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x20uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 32;
  long long v5 = a2[1];
  *(_OWORD *)(v4 - 32) = *a2;
  *(_OWORD *)(v4 - 16) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>(uint64_t a1, long long *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0x3F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x40uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 64;
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[3];
  *(_OWORD *)(v4 - 32) = a2[2];
  *(_OWORD *)(v4 - 16) = v7;
  *(_OWORD *)(v4 - 64) = v5;
  *(_OWORD *)(v4 - 48) = v6;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>(uint64_t a1, long long *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0x7F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x80uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 128;
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[3];
  *(_OWORD *)(v4 - 96) = a2[2];
  *(_OWORD *)(v4 - 80) = v7;
  *(_OWORD *)(v4 - 128) = v5;
  *(_OWORD *)(v4 - 112) = v6;
  long long v8 = a2[4];
  long long v9 = a2[5];
  long long v10 = a2[7];
  *(_OWORD *)(v4 - 32) = a2[6];
  *(_OWORD *)(v4 - 16) = v10;
  *(_OWORD *)(v4 - 64) = v8;
  *(_OWORD *)(v4 - 48) = v9;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

unsigned __int16 *MTLConstantStorage::constantDataWithFunctionConstant(MTLConstantStorage *this, MTLFunctionConstant *a2)
{
  BOOL result = MTLConstantStorage::findConstantValue(this, a2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(unsigned __int8 *)result;
    if ([(MTLFunctionConstant *)a2 type] == v5) {
      return (unsigned __int16 *)*((void *)v4 + 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *MTLConstantStorage::newNamedConstantArray(MTLConstantStorage *this)
{
  uint64_t v2 = objc_opt_new();
  uint64_t v5 = *(char **)this;
  int v3 = (char *)this + 8;
  uint64_t v4 = v5;
  if (v5 != v3)
  {
    do
    {
      long long v6 = v4 + 4;
      if (*((char *)v4 + 55) < 0) {
        long long v6 = (void *)*v6;
      }
      long long v7 = -[MTLNamedConstantValue initWithValue:type:name:]([MTLNamedConstantValue alloc], "initWithValue:type:name:", v4[8], *((unsigned __int8 *)v4 + 56), [NSString stringWithUTF8String:v6]);
      [v2 addObject:v7];

      long long v8 = (char *)v4[1];
      if (v8)
      {
        do
        {
          long long v9 = v8;
          long long v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v9 = (char *)v4[2];
          BOOL v10 = *(void *)v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
    }
    while (v9 != v3);
  }
  return v2;
}

void *MTLConstantStorage::newIndexedConstantArray(MTLConstantStorage *this)
{
  uint64_t v2 = objc_opt_new();
  int v3 = (char *)*((void *)this + 3);
  uint64_t v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    do
    {
      uint64_t v5 = [[MTLIndexedConstantValue alloc] initWithValue:*((void *)v3 + 6) type:v3[40] index:*((unsigned __int16 *)v3 + 16)];
      [v2 addObject:v5];

      long long v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          int v3 = v7;
        }
        while (!v8);
      }
      int v3 = v7;
    }
    while (v7 != v4);
  }
  return v2;
}

uint64_t arrayDescription(NSArray *a1)
{
  if ([(NSArray *)a1 count]) {
    operator new[]();
  }
  uint64_t v1 = (void *)MEMORY[0x1E4F1C978];

  return [v1 array];
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[6];
    if (v3) {
      MEMORY[0x18530C120](v3, 0x1000C8077774924);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,std::pair<std::string const,MTLConstantStorage::ConstantData>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    BOOL v10 = a3;
  }
  else {
    BOOL v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    long long v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v12 = a2[24];
  if (v12 == a3[24])
  {
    int v13 = (const void *)*((void *)a2 + 4);
    id v14 = (const void *)*((void *)a3 + 4);
    size_t v15 = _MTLConstantDataSize(v12);
    return memcmp(v13, v14, v15) == 0;
  }
  return 0;
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<unsigned short const,MTLConstantStorage::ConstantData>,std::pair<unsigned short const,MTLConstantStorage::ConstantData>>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (*a2 != *a3) {
    return 0;
  }
  uint64_t v3 = *((unsigned __int8 *)a2 + 8);
  if (v3 != *((unsigned __int8 *)a3 + 8)) {
    return 0;
  }
  uint64_t v4 = (const void *)*((void *)a2 + 2);
  size_t v5 = (const void *)*((void *)a3 + 2);
  size_t v6 = _MTLConstantDataSize(v3);
  return memcmp(v4, v5, v6) == 0;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      BOOL v10 = (const void **)a1;
      do
      {
        long long v11 = v10;
        BOOL v10 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          std::vector<std::string>::pointer v18 = v10[2];
          v10[1] = 0;
          _OWORD v10[2] = 0;
          *BOOL v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        uint64_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    uint64_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        BOOL v10 = v6;
        char v6 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          _OWORD v6[2] = 0;
          *char v6 = 0;
          long long v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          v15[2] = v17;
        }
        uint64_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  uint64_t result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    char v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a3, a2)) {
      return 1;
    }
    std::vector<char>::pointer v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  BOOL v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
  }
  else
  {
    uint64_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v7);
      uint64_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    _OWORD v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      long long v20 = *(const void **)(v8 + 16);
      long long v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 24;
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!std::less<std::string>::operator()[abi:ne180100](a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  long long v13 = (void **)(v8 - 24);
  if ((long long *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v8 - 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100](a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *long long v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1827E9E98(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3
            && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *long long v16 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3
      && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *uint64_t v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      *long long v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *((void *)v6 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1827EA358(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

id newErrorWithMessage(NSString *a1, MTLDynamicLibraryError a2)
{
  uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:a1 forKey:*MEMORY[0x1E4F28568]];
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLDynamicLibraryDomain" code:a2 userInfo:v3];

  return v4;
}

void sub_1827EADAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a50, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a10);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose((const void *)(v67 - 240), 8);
  _Block_object_dispose((const void *)(v67 - 208), 8);
  _Block_object_dispose((const void *)(v67 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__10(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 48);
}

void sub_1827EB3BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t isVendorSliceCompatible(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = ___ZL23isVendorSliceCompatibleRK24MTLLoaderSliceIdentifierP6NSDatayPU19objcproto9MTLDevice11objc_object_block_invoke;
  v6[3] = &unk_1E521FAC0;
  void v6[4] = a2;
  v6[5] = a3;
  +[MTLLoader deserializeAIRNTToolsVersionForSlice:sliceOffset:version:reader:]((uint64_t)MTLLoader, a1, a3, (uint64_t)&v7, (uint64_t)v6);
  return [a4 isVendorSliceCompatibleWithDeploymentTarget:v7 platform:HIDWORD(v7) sdkVersion:v8 compilerPluginVersion:v9];
}

void sub_1827EBCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  _Block_object_dispose((const void *)(v36 - 176), 8);
  _Block_object_dispose((const void *)(v36 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1827EBE40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1827EC8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a44, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a10);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v55 - 256), 8);
  _Block_object_dispose((const void *)(v55 - 224), 8);
  _Block_object_dispose((const void *)(v55 - 192), 8);
  _Block_object_dispose((const void *)(v55 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__116(uint64_t result, void *a2)
{
  uint64_t v2 = a2[6];
  a2[6] = 0;
  *(void *)(result + 48) = v2;
  *(void *)(result + 56) = a2[7];
  a2[7] = 0;
  uint64_t v5 = a2[8];
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  *(void *)(result + 64) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 64;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__117(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 48);
}

void sub_1827ECEA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLDynamicLibraryLoadOptionsFromPipelineOptions(uint64_t a1)
{
  uint64_t result = 0;
  uint64_t v3 = &kLibraryPipelineOptionMap;
  do
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    v3 += 2;
    if ((v5 & a1) == 0) {
      uint64_t v4 = 0;
    }
    result |= v4;
  }
  while (v3 != (uint64_t *)"NSt3__120__shared_ptr_emplaceINS_6vectorI10machOEntryNS_9allocatorIS2_EEEENS3_IS5_EEEE");
  return result;
}

uint64_t MTLPipelineOptionsFromDynamicLibraryLoadOptions(uint64_t a1)
{
  uint64_t result = 0;
  uint64_t v3 = &kLibraryPipelineOptionMap;
  do
  {
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    v3 += 2;
    if ((v4 & a1) != 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    result |= v6;
  }
  while (v3 != (uint64_t *)"NSt3__120__shared_ptr_emplaceINS_6vectorI10machOEntryNS_9allocatorIS2_EEEENS3_IS5_EEEE");
  return result;
}

uint64_t ___ZL23isVendorSliceCompatibleRK24MTLLoaderSliceIdentifierP6NSDatayPU19objcproto9MTLDevice11objc_object_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a3 + a2 + *(void *)(a1 + 40);
  if (v5 <= [*(id *)(a1 + 32) length]) {
    return [*(id *)(a1 + 32) bytes] + *(void *)(a1 + 40) + a2;
  }
  else {
    return 0;
  }
}

void *std::vector<machOEntry>::__construct_one_at_end[abi:ne180100]<machOEntry const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(v3 + 16) = a2[1];
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 48) = 0;
  uint64_t result = std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v3 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 5);
  *(void *)(a1 + 8) = v3 + 72;
  return result;
}

void sub_1827ED3A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<machOEntry>::__push_back_slow_path<machOEntry const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<machOEntry>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  uint64_t v17 = v11;
  uint64_t v18 = &v10[72 * v9];
  long long v12 = *a2;
  long long v13 = a2[2];
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = v13;
  *(_OWORD *)uint64_t v11 = v12;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)v11 + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 5);
  v17 += 72;
  std::vector<machOEntry>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<machOEntry>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1827ED4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<machOEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *MTLIOAccelResourcePoolCreatePooledResource(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  int v3 = *(_DWORD *)(a1 + 88);
  unint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = v4[39];
    unint64_t v5 = (void *)v4[40];
    if (v6)
    {
      *(void *)(v6 + 320) = v5;
      uint64_t v7 = v4[39];
      unint64_t v5 = (void *)v4[40];
    }
    else
    {
      uint64_t v7 = 0;
      *(void *)(a1 + 32) = v5;
    }
    void *v5 = v7;
LABEL_13:
    long long v12 = v4 + 38;
    --*(_DWORD *)(a1 + 44);
    goto LABEL_14;
  }
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v9 = v4[39];
    unint64_t v8 = (void *)v4[40];
    if (v9)
    {
      *(void *)(v9 + 320) = v8;
      uint64_t v10 = v4[39];
      unint64_t v8 = (void *)v4[40];
    }
    else
    {
      uint64_t v10 = 0;
      *(void *)(a1 + 16) = v8;
    }
    void *v8 = v10;
    [v4 setPurgeableState:2];
    goto LABEL_13;
  }
  uint64_t v11 = (void *)[objc_alloc(*(Class *)(a1 + 48)) initWithDevice:*(void *)(a1 + 56) options:0 args:*(void *)(a1 + 64) argsSize:*(unsigned int *)(a1 + 72)];
  unint64_t v4 = v11;
  if (v11)
  {
    [v11 setLabel:@"MTLIOAccelResourcePool"];
    long long v12 = v4 + 38;
LABEL_14:
    *long long v12 = a1;
    *((_DWORD *)v12 + 8) = v3;
    id v13 = (id)a1;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

__CFString *MTLBuiltInArgumentTypeString(unint64_t a1)
{
  if (a1 > 0x18) {
    return @"Unknown";
  }
  else {
    return off_1E5220160[a1];
  }
}

__CFString *MTLMeshTopologyKindString(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5220228[a1];
  }
}

MTLStructTypeInternal *newStructTypeWithSerializedContext(uint64_t a1, DeserialContext *a2, unsigned int a3)
{
  char v8 = 0;
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  int v3 = structTypeFromSerializedContext(a1, a2, &v8, v5, &v7, a3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v5);
  return v3;
}

void sub_1827EF438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void serializeArrayType(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
  char v7 = a1;
  uint64_t v8 = [a1 elementType];
  uint64_t v9 = [v7 elementIndirectArgumentType];
  int v10 = [v7 arrayLength];
  unint64_t v11 = (unint64_t)a2[2];
  if (v11 > 0xFFFFFFFFFFFFFFFBLL) {
LABEL_75:
  }
    abort();
  int v12 = v10;
  if (v9) {
    uint64_t v13 = 57;
  }
  else {
    uint64_t v13 = v8;
  }
  while (1)
  {
    size_t v14 = (size_t)a2[1];
    if (v14 >= v11 + 4)
    {
      uint64_t v15 = (char *)*a2;
    }
    else
    {
      if (!v14)
      {
        a2[1] = (void *)128;
        size_t v14 = 128;
      }
      while (v14 < v11 + 4)
      {
        if (v14 >> 1 >= ~v14) {
          size_t v14 = v11 + 4;
        }
        else {
          v14 += v14 >> 1;
        }
      }
      uint64_t v15 = (char *)malloc_type_realloc(*a2, v14, 0x227314A4uLL);
      *a2 = v15;
      if (!v15) {
        goto LABEL_75;
      }
      a2[1] = (void *)v14;
      unint64_t v11 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v15[v11] = v12;
    uint64_t v16 = (char *)a2[2];
    uint64_t v17 = v16 + 4;
    a2[2] = v16 + 4;
    if ((unint64_t)(v16 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
      goto LABEL_75;
    }
    size_t v18 = (size_t)(v16 + 8);
    size_t v19 = (size_t)a2[1];
    if (v19 >= v18)
    {
      __n128 v20 = (char *)*a2;
    }
    else
    {
      if (!v19)
      {
        a2[1] = (void *)128;
        size_t v19 = 128;
      }
      while (v19 < v18)
      {
        if (v19 >> 1 >= ~v19) {
          size_t v19 = v18;
        }
        else {
          v19 += v19 >> 1;
        }
      }
      __n128 v20 = (char *)malloc_type_realloc(*a2, v19, 0x227314A4uLL);
      *a2 = v20;
      if (!v20) {
        goto LABEL_75;
      }
      a2[1] = (void *)v19;
      uint64_t v17 = (char *)a2[2];
    }
    *(_DWORD *)&v17[(void)v20] = v13;
    a2[2] = (char *)a2[2] + 4;
    int v21 = [v7 stride];
    unint64_t v22 = (unint64_t)a2[2];
    if (v22 >= 0xFFFFFFFFFFFFFFFCLL) {
      goto LABEL_75;
    }
    int v23 = v21;
    size_t v24 = (size_t)a2[1];
    if (v24 >= v22 + 4)
    {
      long long v25 = (char *)*a2;
    }
    else
    {
      if (!v24)
      {
        a2[1] = (void *)128;
        size_t v24 = 128;
      }
      while (v24 < v22 + 4)
      {
        if (v24 >> 1 >= ~v24) {
          size_t v24 = v22 + 4;
        }
        else {
          v24 += v24 >> 1;
        }
      }
      long long v25 = (char *)malloc_type_realloc(*a2, v24, 0x227314A4uLL);
      *a2 = v25;
      if (!v25) {
        goto LABEL_75;
      }
      a2[1] = (void *)v24;
      unint64_t v22 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v25[v22] = v23;
    a2[2] = (char *)a2[2] + 4;
    int v26 = [v7 indirectArgumentIndexStride];
    unint64_t v27 = (unint64_t)a2[2];
    if (v27 >= 0xFFFFFFFFFFFFFFFCLL) {
      goto LABEL_75;
    }
    int v28 = v26;
    size_t v29 = (size_t)a2[1];
    if (v29 >= v27 + 4)
    {
      std::vector<std::string> v30 = (char *)*a2;
    }
    else
    {
      if (!v29)
      {
        a2[1] = (void *)128;
        size_t v29 = 128;
      }
      while (v29 < v27 + 4)
      {
        if (v29 >> 1 >= ~v29) {
          size_t v29 = v27 + 4;
        }
        else {
          v29 += v29 >> 1;
        }
      }
      std::vector<std::string> v30 = (char *)malloc_type_realloc(*a2, v29, 0x227314A4uLL);
      *a2 = v30;
      if (!v30) {
        goto LABEL_75;
      }
      a2[1] = (void *)v29;
      unint64_t v27 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v30[v27] = v28;
    a2[2] = (char *)a2[2] + 4;
    int v31 = [v7 pixelFormat];
    unint64_t v32 = (unint64_t)a2[2];
    if (v32 >= 0xFFFFFFFFFFFFFFFCLL) {
      goto LABEL_75;
    }
    int v33 = v31;
    size_t v34 = (size_t)a2[1];
    if (v34 >= v32 + 4)
    {
      unint64_t v35 = (char *)*a2;
    }
    else
    {
      if (!v34)
      {
        a2[1] = (void *)128;
        size_t v34 = 128;
      }
      while (v34 < v32 + 4)
      {
        if (v34 >> 1 >= ~v34) {
          size_t v34 = v32 + 4;
        }
        else {
          v34 += v34 >> 1;
        }
      }
      unint64_t v35 = (char *)malloc_type_realloc(*a2, v34, 0x227314A4uLL);
      *a2 = v35;
      if (!v35) {
        goto LABEL_75;
      }
      a2[1] = (void *)v34;
      unint64_t v32 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v35[v32] = v33;
    a2[2] = (char *)a2[2] + 4;
    int v36 = [v7 aluType];
    unint64_t v37 = (unint64_t)a2[2];
    if (v37 >= 0xFFFFFFFFFFFFFFFCLL) {
      goto LABEL_75;
    }
    int v38 = v36;
    size_t v39 = (size_t)a2[1];
    if (v39 >= v37 + 4)
    {
      uint64_t v40 = (char *)*a2;
    }
    else
    {
      if (!v39)
      {
        a2[1] = (void *)128;
        size_t v39 = 128;
      }
      while (v39 < v37 + 4)
      {
        if (v39 >> 1 >= ~v39) {
          size_t v39 = v37 + 4;
        }
        else {
          v39 += v39 >> 1;
        }
      }
      uint64_t v40 = (char *)malloc_type_realloc(*a2, v39, 0x227314A4uLL);
      *a2 = v40;
      if (!v40) {
        goto LABEL_75;
      }
      a2[1] = (void *)v39;
      unint64_t v37 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v40[v37] = v38;
    a2[2] = (char *)a2[2] + 4;
    if (v13 != 2) {
      break;
    }
    char v7 = (void *)[v7 elementArrayType];
    uint64_t v41 = [v7 elementType];
    if ([v7 elementIndirectArgumentType]) {
      uint64_t v13 = 57;
    }
    else {
      uint64_t v13 = v41;
    }
    int v12 = [v7 arrayLength];
    unint64_t v11 = (unint64_t)a2[2];
    if (v11 > 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_75;
    }
  }
  if (v13 == 1)
  {
    uint64_t v42 = [v7 elementStructType];
    serializeStructTypeInternal(v42, a2, a3, a4);
  }
  else if ([v7 elementIndirectArgumentType])
  {
    uint64_t v43 = [v7 elementIndirectArgumentType];
    serializeIndirectArgument(v43, (char **)a2, a3, a4);
  }
}

char *serializeStructTypeInternal(char *result, char **a2, uint64_t a3, unsigned int a4)
{
  id v69 = result;
  int v6 = *(void **)(a3 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a3 + 8;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)result;
    if (v8 >= (unint64_t)result) {
      int v10 = v6;
    }
    else {
      int v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    int v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 != a3 + 8 && *(void *)(v7 + 32) <= (unint64_t)result)
  {
    if (a4)
    {
      unint64_t v65 = (unint64_t)a2[2];
      if (v65 >= 0xFFFFFFFFFFFFFFFCLL) {
        goto LABEL_150;
      }
      int v66 = *(_DWORD *)(v7 + 40);
      size_t v67 = (size_t)a2[1];
      if (v67 >= v65 + 4)
      {
        uint64_t result = *a2;
      }
      else
      {
        if (!v67)
        {
          size_t v67 = 128;
          a2[1] = (char *)128;
        }
        while (v67 < v65 + 4)
        {
          if (v67 >> 1 >= ~v67) {
            size_t v67 = v65 + 4;
          }
          else {
            v67 += v67 >> 1;
          }
        }
        uint64_t result = (char *)malloc_type_realloc(*a2, v67, 0x227314A4uLL);
        *a2 = result;
        if (!result) {
          goto LABEL_150;
        }
        a2[1] = (char *)v67;
        unint64_t v65 = (unint64_t)a2[2];
      }
      *(_DWORD *)&result[v65] = v66;
      a2[2] += 4;
    }
  }
  else
  {
LABEL_12:
    int v11 = *(_DWORD *)(a3 + 16) + 1;
    uint64_t v70 = &v69;
    *((_DWORD *)std::__tree<std::__value_type<MTLStructType *,unsigned int>,std::__map_value_compare<MTLStructType *,std::__value_type<MTLStructType *,unsigned int>,std::less<MTLStructType *>,true>,std::allocator<std::__value_type<MTLStructType *,unsigned int>>>::__emplace_unique_key_args<MTLStructType *,std::piecewise_construct_t const&,std::tuple<MTLStructType * const&>,std::tuple<>>((uint64_t **)a3, (unint64_t *)&v69, (uint64_t)&std::piecewise_construct, &v70)+ 10) = v11;
    if (a4)
    {
      unint64_t v12 = (unint64_t)a2[2];
      if (v12 >= 0xFFFFFFFFFFFFFFFCLL) {
        goto LABEL_150;
      }
      size_t v13 = (size_t)a2[1];
      if (v13 >= v12 + 4)
      {
        size_t v14 = *a2;
      }
      else
      {
        if (!v13)
        {
          size_t v13 = 128;
          a2[1] = (char *)128;
        }
        while (v13 < v12 + 4)
        {
          if (v13 >> 1 >= ~v13) {
            size_t v13 = v12 + 4;
          }
          else {
            v13 += v13 >> 1;
          }
        }
        size_t v14 = (char *)malloc_type_realloc(*a2, v13, 0x227314A4uLL);
        *a2 = v14;
        if (!v14) {
          goto LABEL_150;
        }
        a2[1] = (char *)v13;
        unint64_t v12 = (unint64_t)a2[2];
      }
      *(_DWORD *)&v14[v12] = v11;
      a2[2] += 4;
    }
    unsigned int v15 = objc_msgSend((id)objc_msgSend(v69, "members"), "count");
    unint64_t v16 = (unint64_t)a2[2];
    if (v16 >= 0xFFFFFFFFFFFFFFFCLL) {
      goto LABEL_150;
    }
    unsigned int v17 = v15;
    size_t v18 = (size_t)a2[1];
    if (v18 >= v16 + 4)
    {
      uint64_t result = *a2;
    }
    else
    {
      if (!v18)
      {
        size_t v18 = 128;
        a2[1] = (char *)128;
      }
      while (v18 < v16 + 4)
      {
        if (v18 >> 1 >= ~v18) {
          size_t v18 = v16 + 4;
        }
        else {
          v18 += v18 >> 1;
        }
      }
      uint64_t result = (char *)malloc_type_realloc(*a2, v18, 0x227314A4uLL);
      *a2 = result;
      if (!result) {
        goto LABEL_150;
      }
      a2[1] = (char *)v18;
      unint64_t v16 = (unint64_t)a2[2];
    }
    *(_DWORD *)&result[v16] = v17;
    a2[2] += 4;
    uint64_t v19 = v17;
    if (v17)
    {
      uint64_t v20 = 0;
      while (1)
      {
        int v21 = objc_msgSend((id)objc_msgSend(v69, "members"), "objectAtIndexedSubscript:", v20);
        uint64_t v22 = [v21 dataType];
        uint64_t v23 = [v21 indirectArgumentType] ? 57 : v22;
        size_t v24 = (const char *)objc_msgSend((id)objc_msgSend(v21, "name"), "UTF8String");
        size_t v25 = strlen(v24);
        size_t v26 = v25 + 1;
        unint64_t v27 = a2[2];
        if (__CFADD__(v27, v25 + 1)) {
          break;
        }
        size_t v28 = v25;
        size_t v29 = (size_t)a2[1];
        if (v29 >= (unint64_t)&v27[v26])
        {
          std::vector<std::string> v30 = *a2;
        }
        else
        {
          if (!v29)
          {
            a2[1] = (char *)128;
            size_t v29 = 128;
          }
          while (v29 < (unint64_t)&v27[v26])
          {
            if (v29 >> 1 >= ~v29) {
              size_t v29 = (size_t)&v27[v26];
            }
            else {
              v29 += v29 >> 1;
            }
          }
          std::vector<std::string> v30 = (char *)malloc_type_realloc(*a2, v29, 0x227314A4uLL);
          *a2 = v30;
          if (!v30) {
            break;
          }
          a2[1] = (char *)v29;
          unint64_t v27 = a2[2];
        }
        memcpy(&v27[(void)v30], v24, v28);
        a2[2][v28 + (void)*a2] = 0;
        a2[2] += v26;
        int v31 = [v21 offset];
        unint64_t v32 = (unint64_t)a2[2];
        if (v32 >= 0xFFFFFFFFFFFFFFFCLL) {
          break;
        }
        int v33 = v31;
        size_t v34 = (size_t)a2[1];
        if (v34 >= v32 + 4)
        {
          unint64_t v35 = *a2;
        }
        else
        {
          if (!v34)
          {
            a2[1] = (char *)128;
            size_t v34 = 128;
          }
          while (v34 < v32 + 4)
          {
            if (v34 >> 1 >= ~v34) {
              size_t v34 = v32 + 4;
            }
            else {
              v34 += v34 >> 1;
            }
          }
          unint64_t v35 = (char *)malloc_type_realloc(*a2, v34, 0x227314A4uLL);
          *a2 = v35;
          if (!v35) {
            break;
          }
          a2[1] = (char *)v34;
          unint64_t v32 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v35[v32] = v33;
        a2[2] += 4;
        int v36 = [v21 indirectArgumentIndex];
        unint64_t v37 = (unint64_t)a2[2];
        if (v37 >= 0xFFFFFFFFFFFFFFFCLL) {
          break;
        }
        int v38 = v36;
        size_t v39 = (size_t)a2[1];
        if (v39 >= v37 + 4)
        {
          uint64_t v40 = *a2;
        }
        else
        {
          if (!v39)
          {
            a2[1] = (char *)128;
            size_t v39 = 128;
          }
          while (v39 < v37 + 4)
          {
            if (v39 >> 1 >= ~v39) {
              size_t v39 = v37 + 4;
            }
            else {
              v39 += v39 >> 1;
            }
          }
          uint64_t v40 = (char *)malloc_type_realloc(*a2, v39, 0x227314A4uLL);
          *a2 = v40;
          if (!v40) {
            break;
          }
          a2[1] = (char *)v39;
          unint64_t v37 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v40[v37] = v38;
        uint64_t v41 = a2[2];
        uint64_t v42 = v41 + 4;
        a2[2] = v41 + 4;
        if ((unint64_t)(v41 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
          break;
        }
        size_t v43 = (size_t)(v41 + 8);
        size_t v44 = (size_t)a2[1];
        if (v44 >= v43)
        {
          unint64_t v45 = *a2;
        }
        else
        {
          if (!v44)
          {
            a2[1] = (char *)128;
            size_t v44 = 128;
          }
          while (v44 < v43)
          {
            if (v44 >> 1 >= ~v44) {
              size_t v44 = v43;
            }
            else {
              v44 += v44 >> 1;
            }
          }
          unint64_t v45 = (char *)malloc_type_realloc(*a2, v44, 0x227314A4uLL);
          *a2 = v45;
          if (!v45) {
            break;
          }
          a2[1] = (char *)v44;
          uint64_t v42 = a2[2];
        }
        *(_DWORD *)&v42[(void)v45] = v23;
        a2[2] += 4;
        int v46 = [v21 pixelFormat];
        unint64_t v47 = (unint64_t)a2[2];
        if (v47 >= 0xFFFFFFFFFFFFFFFCLL) {
          break;
        }
        int v48 = v46;
        size_t v49 = (size_t)a2[1];
        if (v49 >= v47 + 4)
        {
          uint64_t v50 = *a2;
        }
        else
        {
          if (!v49)
          {
            a2[1] = (char *)128;
            size_t v49 = 128;
          }
          while (v49 < v47 + 4)
          {
            if (v49 >> 1 >= ~v49) {
              size_t v49 = v47 + 4;
            }
            else {
              v49 += v49 >> 1;
            }
          }
          uint64_t v50 = (char *)malloc_type_realloc(*a2, v49, 0x227314A4uLL);
          *a2 = v50;
          if (!v50) {
            break;
          }
          a2[1] = (char *)v49;
          unint64_t v47 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v50[v47] = v48;
        a2[2] += 4;
        int v51 = [v21 aluType];
        unint64_t v52 = (unint64_t)a2[2];
        if (v52 >= 0xFFFFFFFFFFFFFFFCLL) {
          break;
        }
        int v53 = v51;
        size_t v54 = (size_t)a2[1];
        if (v54 >= v52 + 4)
        {
          uint64_t v55 = *a2;
        }
        else
        {
          if (!v54)
          {
            a2[1] = (char *)128;
            size_t v54 = 128;
          }
          while (v54 < v52 + 4)
          {
            if (v54 >> 1 >= ~v54) {
              size_t v54 = v52 + 4;
            }
            else {
              v54 += v54 >> 1;
            }
          }
          uint64_t v55 = (char *)malloc_type_realloc(*a2, v54, 0x227314A4uLL);
          *a2 = v55;
          if (!v55) {
            break;
          }
          a2[1] = (char *)v54;
          unint64_t v52 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v55[v52] = v53;
        a2[2] += 4;
        if (v23 == 2)
        {
          serializeArrayType((void *)[v21 arrayType], (void **)a2, a3, a4);
        }
        else if (v23 == 1)
        {
          serializeStructTypeInternal([v21 structType], a2, a3, a4);
        }
        else if ([v21 indirectArgumentType])
        {
          serializeIndirectArgument([v21 indirectArgumentType], a2, a3, a4);
        }
        int v56 = objc_msgSend(v21, "render_target");
        unint64_t v57 = (unint64_t)a2[2];
        if (v57 >= 0xFFFFFFFFFFFFFFFCLL) {
          break;
        }
        int v58 = v56;
        size_t v59 = (size_t)a2[1];
        if (v59 >= v57 + 4)
        {
          uint64_t v60 = *a2;
        }
        else
        {
          if (!v59)
          {
            a2[1] = (char *)128;
            size_t v59 = 128;
          }
          while (v59 < v57 + 4)
          {
            if (v59 >> 1 >= ~v59) {
              size_t v59 = v57 + 4;
            }
            else {
              v59 += v59 >> 1;
            }
          }
          uint64_t v60 = (char *)malloc_type_realloc(*a2, v59, 0x227314A4uLL);
          *a2 = v60;
          if (!v60) {
            break;
          }
          a2[1] = (char *)v59;
          unint64_t v57 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v60[v57] = v58;
        a2[2] += 4;
        int v61 = objc_msgSend(v21, "raster_order_group");
        unint64_t v62 = (unint64_t)a2[2];
        if (v62 >= 0xFFFFFFFFFFFFFFFCLL) {
          break;
        }
        int v63 = v61;
        size_t v64 = (size_t)a2[1];
        if (v64 >= v62 + 4)
        {
          uint64_t result = *a2;
        }
        else
        {
          if (!v64)
          {
            a2[1] = (char *)128;
            size_t v64 = 128;
          }
          while (v64 < v62 + 4)
          {
            if (v64 >> 1 >= ~v64) {
              size_t v64 = v62 + 4;
            }
            else {
              v64 += v64 >> 1;
            }
          }
          uint64_t result = (char *)malloc_type_realloc(*a2, v64, 0x227314A4uLL);
          *a2 = result;
          if (!result) {
            break;
          }
          a2[1] = (char *)v64;
          unint64_t v62 = (unint64_t)a2[2];
        }
        *(_DWORD *)&result[v62] = v63;
        a2[2] += 4;
        if (++v20 == v19) {
          return result;
        }
      }
LABEL_150:
      abort();
    }
  }
  return result;
}

void serializeIndirectArgument(uint64_t a1, char **a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8 = operator new(8uLL);
  void *v8 = a1;
  int v10 = 0;
  uint64_t v11 = 0;
  std::match_results<const char *> __p = 0;
  std::vector<MTLBindingInternal *>::__init_with_size[abi:ne180100]<MTLBindingInternal **,MTLBindingInternal **>(&__p, v8, (uint64_t)(v8 + 1), 1uLL);
  serializeBindings((uint64_t *)&__p, a2, 0, a3, a4);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  operator delete(v8);
}

void sub_1827F016C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

char *serializeBindings(uint64_t *a1, char **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5 = (unint64_t)a2[2];
  if (v5 >= 0xFFFFFFFFFFFFFFFCLL) {
    goto LABEL_251;
  }
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  size_t v11 = (size_t)a2[1];
  if (v11 >= v5 + 4)
  {
    uint64_t result = *a2;
  }
  else
  {
    if (!v11)
    {
      size_t v11 = 128;
      a2[1] = (char *)128;
    }
    while (v11 < v5 + 4)
    {
      if (v11 >> 1 >= ~v11) {
        size_t v11 = v5 + 4;
      }
      else {
        v11 += v11 >> 1;
      }
    }
    uint64_t result = (char *)malloc_type_realloc(*a2, v11, 0x227314A4uLL);
    *a2 = result;
    if (!result) {
      goto LABEL_251;
    }
    a2[1] = (char *)v11;
    unint64_t v5 = (unint64_t)a2[2];
  }
  uint64_t v13 = (v9 - v10) >> 3;
  size_t v14 = &result[v5];
  *size_t v14 = (unint64_t)(v9 - v10) >> 3;
  v14[1] = BYTE1(v13);
  v14[2] = BYTE2(v13);
  v14[3] = BYTE3(v13);
  a2[2] += 4;
  uint64_t v15 = ((unint64_t)(v9 - v10) >> 3);
  if (((v9 - v10) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v16 = 0;
    while (2)
    {
      unsigned int v17 = *(void **)(*a1 + 8 * v16);
      size_t v18 = (const char *)objc_msgSend((id)objc_msgSend(v17, "name"), "UTF8String");
      size_t v19 = strlen(v18);
      size_t v20 = v19 + 1;
      int v21 = a2[2];
      if (!__CFADD__(v21, v19 + 1))
      {
        size_t v22 = v19;
        size_t v23 = (size_t)a2[1];
        if (v23 >= (unint64_t)&v21[v20])
        {
          size_t v24 = *a2;
        }
        else
        {
          if (!v23)
          {
            a2[1] = (char *)128;
            size_t v23 = 128;
          }
          while (v23 < (unint64_t)&v21[v20])
          {
            if (v23 >> 1 >= ~v23) {
              size_t v23 = (size_t)&v21[v20];
            }
            else {
              v23 += v23 >> 1;
            }
          }
          size_t v24 = (char *)malloc_type_realloc(*a2, v23, 0x227314A4uLL);
          *a2 = v24;
          if (!v24) {
            break;
          }
          a2[1] = (char *)v23;
          int v21 = a2[2];
        }
        memcpy(&v21[(void)v24], v18, v22);
        a2[2][v22 + (void)*a2] = 0;
        a2[2] += v20;
        int v25 = 0;
        switch([v17 type])
        {
          case 0:
            if (objc_msgSend((id)objc_msgSend(v17, "bufferPointerType"), "isConstantBuffer")) {
              int v25 = 1;
            }
            else {
              int v25 = 2;
            }
            goto LABEL_44;
          case 1:
            int v25 = 3;
            goto LABEL_44;
          case 2:
            int v25 = 4;
            goto LABEL_44;
          case 3:
            int v25 = 5;
            goto LABEL_44;
          case 4:
            int v25 = 8;
            goto LABEL_44;
          case 15:
            int v25 = 6;
            goto LABEL_44;
          case 16:
          case 17:
          case 18:
            break;
          case 19:
            int v25 = 12;
            goto LABEL_44;
          case 20:
            int v25 = 11;
            goto LABEL_44;
          case 21:
            int v25 = 13;
            goto LABEL_44;
          case 22:
            int v25 = 14;
            goto LABEL_44;
          case 24:
            int v25 = 16;
            goto LABEL_44;
          case 25:
            int v25 = 18;
            goto LABEL_44;
          case 26:
            int v25 = 19;
            goto LABEL_44;
          case 27:
            int v25 = 17;
            goto LABEL_44;
          case 34:
            int v25 = 21;
            goto LABEL_44;
          case 35:
            int v25 = 22;
            goto LABEL_44;
          default:
LABEL_44:
            int v26 = [v17 access];
            if ([v17 isActive]) {
              int v27 = 512;
            }
            else {
              int v27 = 0;
            }
            unint64_t v28 = (unint64_t)a2[2];
            if (v28 >= 0xFFFFFFFFFFFFFFFCLL) {
              break;
            }
            size_t v29 = (size_t)a2[1];
            if (v29 >= v28 + 4)
            {
              std::vector<std::string> v30 = *a2;
            }
            else
            {
              if (!v29)
              {
                a2[1] = (char *)128;
                size_t v29 = 128;
              }
              while (v29 < v28 + 4)
              {
                if (v29 >> 1 >= ~v29) {
                  size_t v29 = v28 + 4;
                }
                else {
                  v29 += v29 >> 1;
                }
              }
              std::vector<std::string> v30 = (char *)malloc_type_realloc(*a2, v29, 0x227314A4uLL);
              *a2 = v30;
              if (!v30) {
                break;
              }
              a2[1] = (char *)v29;
              unint64_t v28 = (unint64_t)a2[2];
            }
            int v31 = v25 | (32 * v26);
            unint64_t v32 = &v30[v28];
            *unint64_t v32 = v31;
            v32[1] = (unsigned __int16)(v31 + v27) >> 8;
            v32[2] = (v31 + v27) >> 16;
            v32[3] = (v31 + v27) >> 24;
            a2[2] += 4;
            int v33 = [v17 index];
            uint64_t result = (char *)[v17 arrayLength];
            if ((v25 & 0xF) == 6)
            {
LABEL_82:
              switch(v25)
              {
                case 1:
                case 2:
                case 3:
                case 14:
                case 21:
                  int v42 = [v17 bufferDataType];
                  unint64_t v43 = (unint64_t)a2[2];
                  if (v43 >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  int v44 = v42;
                  size_t v45 = (size_t)a2[1];
                  if (v45 >= v43 + 4)
                  {
                    int v46 = *a2;
                  }
                  else
                  {
                    if (!v45)
                    {
                      a2[1] = (char *)128;
                      size_t v45 = 128;
                    }
                    while (v45 < v43 + 4)
                    {
                      if (v45 >> 1 >= ~v45) {
                        size_t v45 = v43 + 4;
                      }
                      else {
                        v45 += v45 >> 1;
                      }
                    }
                    int v46 = (char *)malloc_type_realloc(*a2, v45, 0x227314A4uLL);
                    *a2 = v46;
                    if (!v46) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v45;
                    unint64_t v43 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v46[v43] = v44;
                  a2[2] += 4;
                  int v47 = [v17 bufferPixelFormat];
                  int v48 = [v17 bufferALUType];
                  int v49 = [v17 bufferAlignment];
                  int v50 = [v17 bufferDataSize];
                  unint64_t v51 = (unint64_t)a2[2];
                  if (v51 >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  int v52 = v50;
                  size_t v53 = (size_t)a2[1];
                  if (v53 >= v51 + 4)
                  {
                    size_t v54 = *a2;
                  }
                  else
                  {
                    if (!v53)
                    {
                      a2[1] = (char *)128;
                      size_t v53 = 128;
                    }
                    while (v53 < v51 + 4)
                    {
                      if (v53 >> 1 >= ~v53) {
                        size_t v53 = v51 + 4;
                      }
                      else {
                        v53 += v53 >> 1;
                      }
                    }
                    size_t v54 = (char *)malloc_type_realloc(*a2, v53, 0x227314A4uLL);
                    *a2 = v54;
                    if (!v54) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v53;
                    unint64_t v51 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v54[v51] = v47;
                  uint64_t v55 = a2[2];
                  int v56 = v55 + 4;
                  a2[2] = v55 + 4;
                  if ((unint64_t)(v55 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  size_t v57 = (size_t)(v55 + 8);
                  size_t v58 = (size_t)a2[1];
                  if (v58 >= v57)
                  {
                    size_t v59 = *a2;
                  }
                  else
                  {
                    if (!v58)
                    {
                      a2[1] = (char *)128;
                      size_t v58 = 128;
                    }
                    while (v58 < v57)
                    {
                      if (v58 >> 1 >= ~v58) {
                        size_t v58 = v57;
                      }
                      else {
                        v58 += v58 >> 1;
                      }
                    }
                    size_t v59 = (char *)malloc_type_realloc(*a2, v58, 0x227314A4uLL);
                    *a2 = v59;
                    if (!v59) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v58;
                    int v56 = a2[2];
                  }
                  *(_DWORD *)&v56[(void)v59] = v48;
                  uint64_t v60 = a2[2];
                  int v61 = v60 + 4;
                  a2[2] = v60 + 4;
                  if ((unint64_t)(v60 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  size_t v62 = (size_t)(v60 + 8);
                  size_t v63 = (size_t)a2[1];
                  if (v63 >= v62)
                  {
                    size_t v64 = *a2;
                  }
                  else
                  {
                    if (!v63)
                    {
                      a2[1] = (char *)128;
                      size_t v63 = 128;
                    }
                    while (v63 < v62)
                    {
                      if (v63 >> 1 >= ~v63) {
                        size_t v63 = v62;
                      }
                      else {
                        v63 += v63 >> 1;
                      }
                    }
                    size_t v64 = (char *)malloc_type_realloc(*a2, v63, 0x227314A4uLL);
                    *a2 = v64;
                    if (!v64) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v63;
                    int v61 = a2[2];
                  }
                  *(_DWORD *)&v61[(void)v64] = v49;
                  unint64_t v65 = a2[2];
                  int v66 = v65 + 4;
                  a2[2] = v65 + 4;
                  if ((unint64_t)(v65 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  size_t v67 = (size_t)(v65 + 8);
                  size_t v68 = (size_t)a2[1];
                  if (v68 >= v67) {
                    goto LABEL_230;
                  }
                  if (!v68)
                  {
                    a2[1] = (char *)128;
                    size_t v68 = 128;
                  }
                  while (v68 < v67)
                  {
                    if (v68 >> 1 >= ~v68) {
                      size_t v68 = v67;
                    }
                    else {
                      v68 += v68 >> 1;
                    }
                  }
                  goto LABEL_228;
                case 4:
                  int v74 = [v17 textureType];
                  unint64_t v75 = (unint64_t)a2[2];
                  if (v75 >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  int v52 = v74;
                  size_t v76 = (size_t)a2[1];
                  if (v76 >= v75 + 4)
                  {
                    unint64_t v77 = *a2;
                  }
                  else
                  {
                    if (!v76)
                    {
                      a2[1] = (char *)128;
                      size_t v76 = 128;
                    }
                    while (v76 < v75 + 4)
                    {
                      if (v76 >> 1 >= ~v76) {
                        size_t v76 = v75 + 4;
                      }
                      else {
                        v76 += v76 >> 1;
                      }
                    }
                    unint64_t v77 = (char *)malloc_type_realloc(*a2, v76, 0x227314A4uLL);
                    *a2 = v77;
                    if (!v77) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v76;
                    unint64_t v75 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v77[v75] = 0;
                  uint64_t v85 = a2[2];
                  int v66 = v85 + 4;
                  a2[2] = v85 + 4;
                  if ((unint64_t)(v85 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  size_t v86 = (size_t)(v85 + 8);
                  size_t v68 = (size_t)a2[1];
                  if (v68 >= v86) {
                    goto LABEL_230;
                  }
                  if (!v68)
                  {
                    a2[1] = (char *)128;
                    size_t v68 = 128;
                  }
                  while (v68 < v86)
                  {
                    if (v68 >> 1 >= ~v68) {
                      size_t v68 = v86;
                    }
                    else {
                      v68 += v68 >> 1;
                    }
                  }
                  goto LABEL_228;
                case 5:
                case 11:
                case 12:
                case 13:
                case 16:
                case 17:
                case 18:
                case 19:
                  goto LABEL_232;
                case 6:
                case 22:
                  int v69 = [v17 builtInDataType];
                  int v70 = [v17 builtInType];
                  unint64_t v71 = (unint64_t)a2[2];
                  if (v71 >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  int v52 = v70;
                  size_t v72 = (size_t)a2[1];
                  if (v72 >= v71 + 4)
                  {
                    uint64_t v73 = *a2;
                  }
                  else
                  {
                    if (!v72)
                    {
                      a2[1] = (char *)128;
                      size_t v72 = 128;
                    }
                    while (v72 < v71 + 4)
                    {
                      if (v72 >> 1 >= ~v72) {
                        size_t v72 = v71 + 4;
                      }
                      else {
                        v72 += v72 >> 1;
                      }
                    }
                    uint64_t v73 = (char *)malloc_type_realloc(*a2, v72, 0x227314A4uLL);
                    *a2 = v73;
                    if (!v73) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v72;
                    unint64_t v71 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v73[v71] = v69;
                  uint64_t v83 = a2[2];
                  int v66 = v83 + 4;
                  a2[2] = v83 + 4;
                  if ((unint64_t)(v83 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  size_t v84 = (size_t)(v83 + 8);
                  size_t v68 = (size_t)a2[1];
                  if (v68 >= v84) {
                    goto LABEL_230;
                  }
                  if (!v68)
                  {
                    a2[1] = (char *)128;
                    size_t v68 = 128;
                  }
                  while (v68 < v84)
                  {
                    if (v68 >> 1 >= ~v68) {
                      size_t v68 = v84;
                    }
                    else {
                      v68 += v68 >> 1;
                    }
                  }
                  goto LABEL_228;
                case 8:
                  int v78 = [v17 indirectConstantDataType];
                  unint64_t v79 = (unint64_t)a2[2];
                  if (v79 >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  int v80 = v78;
                  size_t v81 = (size_t)a2[1];
                  if (v81 >= v79 + 4)
                  {
                    uint64_t v82 = *a2;
                  }
                  else
                  {
                    if (!v81)
                    {
                      a2[1] = (char *)128;
                      size_t v81 = 128;
                    }
                    while (v81 < v79 + 4)
                    {
                      if (v81 >> 1 >= ~v81) {
                        size_t v81 = v79 + 4;
                      }
                      else {
                        v81 += v81 >> 1;
                      }
                    }
                    uint64_t v82 = (char *)malloc_type_realloc(*a2, v81, 0x227314A4uLL);
                    *a2 = v82;
                    if (!v82) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v81;
                    unint64_t v79 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v82[v79] = v80;
                  a2[2] += 4;
                  int v87 = [v17 bufferPixelFormat];
                  int v88 = [v17 bufferALUType];
                  int v89 = [v17 indirectConstantAlignment];
                  int v90 = [v17 indirectConstantDataSize];
                  unint64_t v91 = (unint64_t)a2[2];
                  if (v91 >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  int v52 = v90;
                  size_t v92 = (size_t)a2[1];
                  if (v92 >= v91 + 4)
                  {
                    MTLAttributeFormat v93 = *a2;
                  }
                  else
                  {
                    if (!v92)
                    {
                      a2[1] = (char *)128;
                      size_t v92 = 128;
                    }
                    while (v92 < v91 + 4)
                    {
                      if (v92 >> 1 >= ~v92) {
                        size_t v92 = v91 + 4;
                      }
                      else {
                        v92 += v92 >> 1;
                      }
                    }
                    MTLAttributeFormat v93 = (char *)malloc_type_realloc(*a2, v92, 0x227314A4uLL);
                    *a2 = v93;
                    if (!v93) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v92;
                    unint64_t v91 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v93[v91] = v87;
                  uint64_t v94 = a2[2];
                  unint64_t v95 = v94 + 4;
                  a2[2] = v94 + 4;
                  if ((unint64_t)(v94 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  size_t v96 = (size_t)(v94 + 8);
                  size_t v97 = (size_t)a2[1];
                  if (v97 >= v96)
                  {
                    uint64_t v98 = *a2;
                  }
                  else
                  {
                    if (!v97)
                    {
                      a2[1] = (char *)128;
                      size_t v97 = 128;
                    }
                    while (v97 < v96)
                    {
                      if (v97 >> 1 >= ~v97) {
                        size_t v97 = v96;
                      }
                      else {
                        v97 += v97 >> 1;
                      }
                    }
                    uint64_t v98 = (char *)malloc_type_realloc(*a2, v97, 0x227314A4uLL);
                    *a2 = v98;
                    if (!v98) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v97;
                    unint64_t v95 = a2[2];
                  }
                  *(_DWORD *)&v95[(void)v98] = v88;
                  uint64_t v99 = a2[2];
                  uint64_t v100 = v99 + 4;
                  a2[2] = v99 + 4;
                  if ((unint64_t)(v99 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  size_t v101 = (size_t)(v99 + 8);
                  size_t v102 = (size_t)a2[1];
                  if (v102 >= v101)
                  {
                    uint64_t v103 = *a2;
                  }
                  else
                  {
                    if (!v102)
                    {
                      a2[1] = (char *)128;
                      size_t v102 = 128;
                    }
                    while (v102 < v101)
                    {
                      if (v102 >> 1 >= ~v102) {
                        size_t v102 = v101;
                      }
                      else {
                        v102 += v102 >> 1;
                      }
                    }
                    uint64_t v103 = (char *)malloc_type_realloc(*a2, v102, 0x227314A4uLL);
                    *a2 = v103;
                    if (!v103) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v102;
                    uint64_t v100 = a2[2];
                  }
                  *(_DWORD *)&v100[(void)v103] = v89;
                  uint64_t v104 = a2[2];
                  int v66 = v104 + 4;
                  a2[2] = v104 + 4;
                  if ((unint64_t)(v104 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
                    goto LABEL_251;
                  }
                  size_t v105 = (size_t)(v104 + 8);
                  size_t v68 = (size_t)a2[1];
                  if (v68 >= v105)
                  {
LABEL_230:
                    uint64_t result = *a2;
                  }
                  else
                  {
                    if (!v68)
                    {
                      a2[1] = (char *)128;
                      size_t v68 = 128;
                    }
                    while (v68 < v105)
                    {
                      if (v68 >> 1 >= ~v68) {
                        size_t v68 = v105;
                      }
                      else {
                        v68 += v68 >> 1;
                      }
                    }
LABEL_228:
                    uint64_t result = (char *)malloc_type_realloc(*a2, v68, 0x227314A4uLL);
                    *a2 = result;
                    if (!result) {
                      goto LABEL_251;
                    }
                    a2[1] = (char *)v68;
                    int v66 = a2[2];
                  }
                  *(_DWORD *)&v66[(void)result] = v52;
                  a2[2] += 4;
LABEL_232:
                  if (++v16 == v15) {
                    goto LABEL_233;
                  }
                  continue;
                default:
                  goto LABEL_251;
              }
            }
            unint64_t v34 = (unint64_t)a2[2];
            if (v34 >= 0xFFFFFFFFFFFFFFFCLL) {
              goto LABEL_251;
            }
            int v35 = (int)result;
            size_t v36 = (size_t)a2[1];
            if (v36 >= v34 + 4)
            {
              unint64_t v37 = *a2;
            }
            else
            {
              if (!v36)
              {
                a2[1] = (char *)128;
                size_t v36 = 128;
              }
              while (v36 < v34 + 4)
              {
                if (v36 >> 1 >= ~v36) {
                  size_t v36 = v34 + 4;
                }
                else {
                  v36 += v36 >> 1;
                }
              }
              unint64_t v37 = (char *)malloc_type_realloc(*a2, v36, 0x227314A4uLL);
              *a2 = v37;
              if (!v37) {
                goto LABEL_251;
              }
              a2[1] = (char *)v36;
              unint64_t v34 = (unint64_t)a2[2];
            }
            *(_DWORD *)&v37[v34] = v33;
            int v38 = a2[2];
            size_t v39 = v38 + 4;
            a2[2] = v38 + 4;
            if ((unint64_t)(v38 + 4) >= 0xFFFFFFFFFFFFFFFCLL) {
              goto LABEL_251;
            }
            size_t v40 = (size_t)(v38 + 8);
            size_t v41 = (size_t)a2[1];
            if (v41 >= v40)
            {
              uint64_t result = *a2;
              goto LABEL_81;
            }
            if (!v41)
            {
              a2[1] = (char *)128;
              size_t v41 = 128;
            }
            while (v41 < v40)
            {
              if (v41 >> 1 >= ~v41) {
                size_t v41 = v40;
              }
              else {
                v41 += v41 >> 1;
              }
            }
            uint64_t result = (char *)malloc_type_realloc(*a2, v41, 0x227314A4uLL);
            *a2 = result;
            if (result)
            {
              a2[1] = (char *)v41;
              size_t v39 = a2[2];
LABEL_81:
              *(_DWORD *)&v39[(void)result] = v35;
              a2[2] += 4;
              goto LABEL_82;
            }
            break;
        }
      }
      break;
    }
LABEL_251:
    abort();
  }
LABEL_233:
  if (v15)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      unint64_t v107 = *(void **)(*a1 + 8 * i);
      if ([v107 structType])
      {
        uint64_t result = (char *)serializeStructTypeInternal([v107 structType], a2, a4, a5);
      }
      else
      {
        unint64_t v108 = (unint64_t)a2[2];
        if (v108 >= 0xFFFFFFFFFFFFFFFCLL) {
          goto LABEL_251;
        }
        size_t v109 = (size_t)a2[1];
        if (v109 >= v108 + 4)
        {
          uint64_t result = *a2;
        }
        else
        {
          if (!v109)
          {
            a2[1] = (char *)128;
            size_t v109 = 128;
          }
          while (v109 < v108 + 4)
          {
            if (v109 >> 1 >= ~v109) {
              size_t v109 = v108 + 4;
            }
            else {
              v109 += v109 >> 1;
            }
          }
          uint64_t result = (char *)malloc_type_realloc(*a2, v109, 0x227314A4uLL);
          *a2 = result;
          if (!result) {
            goto LABEL_251;
          }
          a2[1] = (char *)v109;
          unint64_t v108 = (unint64_t)a2[2];
        }
        *(_DWORD *)&result[v108] = 0;
        a2[2] += 4;
      }
    }
  }
  return result;
}

void serializeStructType(char *a1, char **a2, unsigned int a3)
{
  v4[0] = 0;
  v4[1] = 0;
  int v3 = v4;
  serializeStructTypeInternal(a1, a2, (uint64_t)&v3, a3);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)&v3, v4[0]);
}

void sub_1827F0FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t MTLInputStageReflectionReader::deserializeStageInputDescriptor(MTLInputStageReflectionReader *this, const void *a2, uint64_t a3, const BOOL *a4)
{
  return (*(uint64_t (**)(void, const void *, uint64_t, const BOOL *))(**((void **)this + 2) + 32))(*((void *)this + 2), a2, a3, a4);
}

void MTLIntersectionReflectionDeserializer::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (data)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    unint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    unint64_t v6 = *(void *)(a1 + 96);
    size_t v8 = size_ptr;
    uint64_t v7 = buffer_ptr;
    unint64_t v32 = (char *)buffer_ptr;
    size_t v33 = size_ptr;
    size_t v34 = 0;
    *(_DWORD *)(a1 + 104) = 0;
    if (v8 >= 8 && *(void *)v7 == 0x4E494253504C544DLL)
    {
      if (v8 < 9 || (v8 & 0xFFFFFFFFFFFFFFFCLL) == 8) {
        goto LABEL_40;
      }
      int v9 = v7[2];
      size_t v34 = 12;
      *(_DWORD *)(a1 + 104) = v9;
    }
    uint64_t v10 = (v6 >> 1) & 1;
    deserializeArgumentsWithDeserializer(a2, a1, (DeserialContext *)&v32, (v6 >> 1) & 1);
    size_t v12 = v33;
    size_t v11 = v34;
    if (v33 <= v34 || v33 - v34 <= 3) {
      goto LABEL_40;
    }
    uint64_t v13 = v32;
    int v14 = *(_DWORD *)&v32[v34];
    size_t v15 = v34 + 4;
    v34 += 4;
    *(_DWORD *)(a1 + 40) = v14;
    unsigned int v16 = *(_DWORD *)(a1 + 104);
    if (v16 >= 0x10000)
    {
      BOOL v30 = v12 > v15;
      unint64_t v17 = v12 - v15;
      if (!v30 || v17 <= 3) {
        goto LABEL_40;
      }
      uint64_t v18 = *(unsigned int *)&v13[v15];
      size_t v34 = v11 + 8;
      if (v18)
      {
        id v19 = objc_alloc(MEMORY[0x1E4F1C9B8]);
        size_t v20 = v34;
        if (v34 >= v33) {
          goto LABEL_40;
        }
        v34 += v18;
        if (v20 + v18 > v33) {
          goto LABEL_40;
        }
        uint64_t v21 = [v19 initWithBytes:&v32[v20] length:v18];
        unsigned int v16 = *(_DWORD *)(a1 + 104);
      }
      else
      {
        uint64_t v21 = 0;
      }
      *(void *)(a1 + 48) = v21;
      if (v16 > 0x10000)
      {
        unint64_t v23 = v33;
        size_t v22 = v34;
        if (v33 <= v34) {
          goto LABEL_40;
        }
        if (v33 - v34 <= 3) {
          goto LABEL_40;
        }
        size_t v24 = v32;
        uint64_t v25 = *(unsigned int *)&v32[v34];
        v34 += 4;
        *(void *)(a1 + 112) = v25;
        BOOL v30 = v23 > v22 + 4;
        unint64_t v26 = v23 - (v22 + 4);
        if (!v30 || v26 <= 3) {
          goto LABEL_40;
        }
        uint64_t v27 = *(unsigned int *)&v24[v22 + 4];
        size_t v34 = v22 + 8;
        *(_DWORD *)(a1 + 128) = v27;
        if (v27)
        {
          *(void *)(a1 + 120) = malloc_type_malloc(8 * v27, 0x80040B8603338uLL);
          if (*(_DWORD *)(a1 + 128))
          {
            unint64_t v28 = 0;
            while (1)
            {
              size_t v29 = [MTLTag alloc];
              BOOL v30 = v33 > v34 && v33 - v34 > 3;
              if (!v30) {
                break;
              }
              uint64_t v31 = *(unsigned int *)&v32[v34];
              v34 += 4;
              *(void *)(*(void *)(a1 + 120) + 8 * v28++) = [(MTLTag *)v29 initWithTagType:v31];
              if (v28 >= *(unsigned int *)(a1 + 128)) {
                goto LABEL_34;
              }
            }
LABEL_40:
            abort();
          }
        }
LABEL_34:
        if (*(_DWORD *)(a1 + 104) >= 0x20000u) {
          deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v32, v10);
        }
      }
    }
    if (v34 != size_ptr) {
      goto LABEL_40;
    }
    size_t v34 = size_ptr;
    if (v33 < size_ptr) {
      goto LABEL_40;
    }
    dispatch_release(v5);
  }
  else
  {
    *(_DWORD *)(a1 + 40) = -1;
  }
}

void MTLIntersectionReflectionDeserializer::~MTLIntersectionReflectionDeserializer(MTLIntersectionReflectionDeserializer *this)
{
  *(void *)this = &unk_1ECAC69E0;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    if (*((_DWORD *)this + 32))
    {
      unint64_t v3 = 0;
      do
      {

        *(void *)(*((void *)this + 15) + 8 * v3++) = 0;
      }
      while (v3 < *((unsigned int *)this + 32));
      uint64_t v2 = (void *)*((void *)this + 15);
    }
    free(v2);
  }

  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
}

{
  uint64_t vars8;

  MTLIntersectionReflectionDeserializer::~MTLIntersectionReflectionDeserializer(this);

  JUMPOUT(0x18530C140);
}

uint64_t MTLStitchingReflectionDeserializer::deserializeArguments(int a1, int a2, DeserialContext *this, void **a4, void *a5)
{
  uint64_t result = DeserialContext::deserializeUint32(this);
  if (result)
  {
    uint64_t v8 = (result - 1);
    uint64_t v33 = 8 * result;
    uint64_t v9 = 0;
    BOOL v30 = a4;
    *a4 = malloc_type_malloc(v33 - 1, 0x2C675EDDuLL);
    uint64_t v29 = v8;
    uint64_t v32 = 8 * v8;
    while (1)
    {
      uint64_t v34 = DeserialContext::stringFromSerializedData(this);
      unsigned int v10 = DeserialContext::deserializeUint32(this);
      if ((v10 & 0xF) == 6)
      {
        unsigned int v11 = 0;
      }
      else
      {
        unsigned int v11 = DeserialContext::deserializeUint32(this);
        DeserialContext::deserializeUint32(this);
      }
      if ((v10 & 0x1F) != 0x14) {
        abort();
      }
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      deserializeStitchingTypeInfo(this, (uint64_t)&v35);
      uint64_t v12 = v35;
      uint64_t v13 = v36;
      int v14 = v37;
      uint64_t v15 = DWORD2(v38);
      if ((uint64_t)v35 <= 58)
      {
        if ((void)v35 == 1) {
          goto LABEL_15;
        }
        if ((void)v35 != 58) {
          goto LABEL_24;
        }
        LOBYTE(v28) = v37 != 0;
        unsigned int v16 = -[MTLTextureBindingInternal initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:]([MTLTextureBindingInternal alloc], "initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:", v34, (void)v38, (v10 >> 9) & 1, v11, DWORD2(v38), v36, v28);
      }
      else
      {
        if ((void)v35 != 59)
        {
          if ((void)v35 == 60)
          {
            uint64_t v23 = DWORD2(v35);
            uint64_t v22 = HIDWORD(v35);
            if ((void)v36 == 1)
            {
              size_t v24 = (MTLTextureReferenceType *)newStitchingStructTypeFromSerializedContext(this);
            }
            else if ((void)v36 == 58)
            {
              size_t v24 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:]([MTLTextureReferenceType alloc], "initWithDataType:textureType:access:isDepthTexture:", __PAIR128__(*((unint64_t *)&v36 + 1), 58), (void)v38, v14 != 0);
            }
            else
            {
              size_t v24 = [[MTLType alloc] initWithDataType:(void)v36];
            }
            uint64_t v25 = v24;
            LOBYTE(v27) = 0;
            unint64_t v26 = [[MTLPointerType alloc] initWithElementType:v13 elementTypeDescription:v24 access:0 alignment:v22 dataSize:v23 elementIsIndirectArgumentBuffer:0 isConstantBuffer:v27];

            p_super = [[MTLBindingInternal alloc] initWithName:v34 type:28 access:0 index:v11 active:(v10 >> 9) & 1 arrayLength:v15 typeDescription:v26];
            goto LABEL_29;
          }
          if ((void)v35 == 138)
          {
LABEL_15:
            unint64_t v17 = newStitchingStructTypeFromSerializedContext(this);
            uint64_t v18 = [MTLBindingInternal alloc];
            if (v12 == 138) {
              uint64_t v19 = 17;
            }
            else {
              uint64_t v19 = 29;
            }
            size_t v20 = [(MTLBindingInternal *)v18 initWithName:v34 type:v19 access:0 index:v11 active:(v10 >> 9) & 1 arrayLength:v15 typeDescription:v17];
          }
          else
          {
LABEL_24:
            unint64_t v17 = [[MTLType alloc] initWithDataType:(void)v35];
            size_t v20 = [[MTLBindingInternal alloc] initWithName:v34 type:18 access:(v10 >> 5) & 0xF index:v11 active:(v10 >> 9) & 1 arrayLength:v15 typeDescription:v17];
          }
          p_super = v20;

          goto LABEL_29;
        }
        unsigned int v16 = [[MTLBindingInternal alloc] initWithName:v34 type:3 access:(v10 >> 5) & 0xF index:v11 active:(v10 >> 9) & 1 arrayLength:DWORD2(v38)];
      }
      p_super = &v16->super;
LABEL_29:
      if (v32 == v9)
      {
        *a5 = [(MTLBindingInternal *)p_super dataTypeDescription];
      }
      else
      {
        *(void *)((char *)*v30 + v9) = p_super;
      }
      v9 += 8;
      if (v33 == v9) {
        return v29;
      }
    }
  }
  return result;
}

uint64_t deserializeStitchingTypeInfo@<X0>(DeserialContext *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = DeserialContext::deserializeUint32(a1);
  *(_DWORD *)(a2 + 8) = DeserialContext::deserializeUint32(a1);
  *(_DWORD *)(a2 + 12) = DeserialContext::deserializeUint32(a1);
  *(void *)(a2 + 16) = DeserialContext::deserializeUint32(a1);
  uint64_t v4 = DeserialContext::deserializeUint32(a1);
  *(void *)(a2 + 24) = (unsigned __int16)v4;
  *(unsigned char *)(a2 + 32) = BYTE2(v4) & 1;
  *(void *)(a2 + 40) = DeserialContext::deserializeUint32(a1);
  *(void *)(a2 + 48) = DeserialContext::deserializeUint32(a1);
  uint64_t result = DeserialContext::deserializeUint32(a1);
  *(_DWORD *)(a2 + 56) = result;
  return result;
}

MTLStructTypeInternal *newStitchingStructTypeFromSerializedContext(DeserialContext *a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [[MTLStructTypeInternal alloc] initWithMembers:0 count:0 typeName:DeserialContext::stringFromSerializedData(a1)];
  uint64_t v3 = DeserialContext::deserializeUint32(a1);
  if (v3)
  {
    v31[1] = v31;
    uint64_t v32 = v2;
    uint64_t v4 = v3;
    uint64_t v35 = 8 * v3;
    MEMORY[0x1F4188790](v3);
    unint64_t v6 = (void **)((char *)v31 - v5);
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v37 = DeserialContext::stringFromSerializedData(a1);
      unsigned int v36 = DeserialContext::deserializeUint32(a1);
      unsigned int v8 = DeserialContext::deserializeUint32(a1);
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      deserializeStitchingTypeInfo(a1, (uint64_t)&v38);
      uint64_t v9 = 0;
      uint64_t v10 = v38;
      long long v11 = v39;
      int v12 = v40;
      uint64_t v13 = v41;
      if ((uint64_t)v38 <= 57)
      {
        if ((void)v38 == 1)
        {
LABEL_12:
          int v14 = (MTLTextureReferenceType *)newStitchingStructTypeFromSerializedContext(a1);
          goto LABEL_13;
        }
        if ((void)v38 == 2)
        {
          uint64_t v34 = HIDWORD(v38);
          uint64_t v15 = DWORD2(v41);
          if ((void)v39 == 58)
          {
            uint64_t v33 = DWORD2(v41);
            BOOL v16 = v40 != 0;
            unint64_t v17 = [MTLTextureReferenceType alloc];
            BOOL v18 = v16;
            uint64_t v15 = v33;
            uint64_t v19 = [(MTLTextureReferenceType *)v17 initWithDataType:58 textureType:*((void *)&v11 + 1) access:v13 isDepthTexture:v18];
          }
          else
          {
            uint64_t v19 = [[MTLType alloc] initWithDataType:(void)v39];
          }
          uint64_t v23 = v19;
          size_t v24 = [MTLArrayType alloc];
          uint64_t v25 = [(MTLArrayType *)v24 initWithArrayLength:v15 elementType:(void)v11 stride:v34 pixelFormat:0 aluType:0 details:v23];
          goto LABEL_22;
        }
      }
      else
      {
        switch((void)v38)
        {
          case 0x8ALL:
            goto LABEL_12;
          case 0x3CLL:
            uint64_t v34 = DWORD2(v38);
            uint64_t v20 = HIDWORD(v38);
            if ((void)v39 == 1)
            {
              uint64_t v22 = (MTLType *)newStitchingStructTypeFromSerializedContext(a1);
            }
            else if ((void)v39 == 58)
            {
              LODWORD(v33) = v40 != 0;
              uint64_t v21 = [MTLTextureReferenceType alloc];
              uint64_t v22 = [(MTLTextureReferenceType *)v21 initWithDataType:58 textureType:*((void *)&v11 + 1) access:v13 isDepthTexture:v33];
            }
            else
            {
              uint64_t v22 = [[MTLType alloc] initWithDataType:*((void *)&v40 + 1)];
            }
            uint64_t v23 = v22;
            unint64_t v26 = [MTLPointerType alloc];
            LOBYTE(v30) = 0;
            uint64_t v25 = [(MTLPointerType *)v26 initWithElementType:(void)v11 elementTypeDescription:v23 access:0 alignment:v20 dataSize:v34 elementIsIndirectArgumentBuffer:0 isConstantBuffer:v30];
LABEL_22:
            uint64_t v9 = (void *)v25;

            break;
          case 0x3ALL:
            int v14 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:]([MTLTextureReferenceType alloc], "initWithDataType:textureType:access:isDepthTexture:", v39, (void)v41, v12 != 0);
LABEL_13:
            uint64_t v9 = v14;
            break;
        }
      }
      uint64_t v27 = [MTLStructMemberInternal alloc];
      v6[v7 / 8] = [(MTLStructMemberInternal *)v27 initWithName:v37 offset:v36 dataType:v10 pixelFormat:0 aluType:0 indirectArgumentIndex:0 render_target:v8 raster_order_group:0 details:v9];

      v7 += 8;
      if (v35 == v7)
      {
        uint64_t v2 = v32;
        [(MTLStructTypeInternal *)v32 setMembers:v6 count:v4];
        do
        {
          uint64_t v28 = *v6++;

          --v4;
        }
        while (v4);
        return v2;
      }
    }
  }
  return v2;
}

uint64_t MTLStitchingReflectionDeserializer::deserializeArguments(uint64_t a1, int a2, DeserialContext *this)
{
  *(_DWORD *)(a1 + 36) = DeserialContext::deserializeUint32(this);
  unsigned int v5 = DeserialContext::deserializeUint32(this);
  uint64_t result = MTLStitchingReflectionDeserializer::deserializeArguments(v5, v6, this, (void **)(a1 + 8), (void *)(a1 + 112));
  *(_DWORD *)(a1 + 16) = result;
  *((void *)this + 2) = v5;
  if (*((void *)this + 1) < (unint64_t)v5) {
    abort();
  }
  return result;
}

void MTLStitchingReflectionDeserializer::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (data)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    int v6 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    size_t v8 = size_ptr;
    unint64_t v7 = buffer_ptr;
    uint64_t v22 = (char *)buffer_ptr;
    size_t v23 = size_ptr;
    size_t v24 = 0;
    *(_DWORD *)(a1 + 104) = 0;
    if (v8 >= 8 && *(void *)v7 == 0x4E494253504C544DLL)
    {
      if (v8 < 9 || (v8 & 0xFFFFFFFFFFFFFFFCLL) == 8) {
        goto LABEL_28;
      }
      int v9 = v7[2];
      size_t v24 = 12;
      *(_DWORD *)(a1 + 104) = v9;
    }
    MTLStitchingReflectionDeserializer::deserializeArguments(a1, v5, (DeserialContext *)&v22);
    size_t v11 = v23;
    size_t v10 = v24;
    BOOL v12 = v23 > v24 && v23 - v24 > 3;
    if (!v12) {
LABEL_28:
    }
      abort();
    uint64_t v13 = v22;
    int v14 = *(_DWORD *)&v22[v24];
    size_t v15 = v24 + 4;
    v24 += 4;
    *(_DWORD *)(a1 + 40) = v14;
    unsigned int v16 = *(_DWORD *)(a1 + 104);
    if (v16 >= 0x10000)
    {
      BOOL v12 = v11 > v15;
      unint64_t v17 = v11 - v15;
      if (!v12 || v17 <= 3) {
        goto LABEL_28;
      }
      uint64_t v18 = *(unsigned int *)&v13[v15];
      size_t v24 = v10 + 8;
      if (v18)
      {
        id v19 = objc_alloc(MEMORY[0x1E4F1C9B8]);
        size_t v20 = v24;
        if (v24 >= v23) {
          goto LABEL_28;
        }
        v24 += v18;
        if (v20 + v18 > v23) {
          goto LABEL_28;
        }
        uint64_t v21 = [v19 initWithBytes:&v22[v20] length:v18];
        unsigned int v16 = *(_DWORD *)(a1 + 104);
      }
      else
      {
        uint64_t v21 = 0;
      }
      *(void *)(a1 + 48) = v21;
      if (v16 >= 0x20000) {
        deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v22, 0);
      }
    }
    if (v24 != size_ptr) {
      goto LABEL_28;
    }
    size_t v24 = size_ptr;
    if (v23 < size_ptr) {
      goto LABEL_28;
    }
    dispatch_release(v6);
  }
  else
  {
    *(_DWORD *)(a1 + 40) = -1;
  }
}

void MTLStitchingReflectionDeserializer::~MTLStitchingReflectionDeserializer(MTLStitchingReflectionDeserializer *this)
{
  *(void *)this = &unk_1ECAC6898;
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {

    *((void *)this + 14) = 0;
  }

  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
}

{
  uint64_t vars8;

  MTLStitchingReflectionDeserializer::~MTLStitchingReflectionDeserializer(this);

  JUMPOUT(0x18530C140);
}

void MTLObjectOrMeshReflectionDeserializerLegacy::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (!data)
  {
    *(_DWORD *)(a1 + 40) = -1;
    return;
  }
  size_t size_ptr = 0;
  buffer_ptr = 0;
  int v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  size_t v7 = size_ptr;
  int v6 = buffer_ptr;
  size_t v23 = (char *)buffer_ptr;
  size_t v24 = size_ptr;
  size_t v25 = 0;
  unint64_t v8 = *(void *)(a1 + 96);
  *(_DWORD *)(a1 + 104) = 0;
  if (v7 >= 8 && *(void *)v6 == 0x4E494253504C544DLL)
  {
    if (v7 < 9 || (v7 & 0xFFFFFFFFFFFFFFFCLL) == 8) {
      goto LABEL_25;
    }
    int v9 = v6[2];
    size_t v25 = 12;
    *(_DWORD *)(a1 + 104) = v9;
  }
  uint64_t v10 = (v8 >> 1) & 1;
  deserializeArgumentsWithDeserializer(a2, a1, (DeserialContext *)&v23, (v8 >> 1) & 1);
  size_t v12 = v24;
  size_t v11 = v25;
  if (v24 <= v25 || v24 - v25 <= 3) {
    goto LABEL_25;
  }
  uint64_t v13 = v23;
  int v14 = *(_DWORD *)&v23[v25];
  size_t v15 = v25 + 4;
  v25 += 4;
  *(_DWORD *)(a1 + 40) = v14;
  unsigned int v16 = *(_DWORD *)(a1 + 104);
  if (v16 < 0x10000) {
    goto LABEL_21;
  }
  BOOL v17 = v12 > v15;
  unint64_t v18 = v12 - v15;
  if (!v17 || v18 <= 3) {
LABEL_25:
  }
    abort();
  uint64_t v19 = *(unsigned int *)&v13[v15];
  size_t v25 = v11 + 8;
  if (v19)
  {
    id v20 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    size_t v21 = v25;
    if (v25 < v24)
    {
      v25 += v19;
      if (v21 + v19 <= v24)
      {
        uint64_t v22 = [v20 initWithBytes:&v23[v21] length:v19];
        unsigned int v16 = *(_DWORD *)(a1 + 104);
        goto LABEL_19;
      }
    }
    goto LABEL_25;
  }
  uint64_t v22 = 0;
LABEL_19:
  *(void *)(a1 + 48) = v22;
  if (v16 >= 0x20000) {
    deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v23, v10);
  }
LABEL_21:
  if (v25 != size_ptr) {
    goto LABEL_25;
  }
  size_t v25 = size_ptr;
  if (v24 < size_ptr) {
    goto LABEL_25;
  }
  dispatch_release(v5);
}

void MTLObjectOrMeshReflectionDeserializerLegacy::~MTLObjectOrMeshReflectionDeserializerLegacy(MTLObjectOrMeshReflectionDeserializerLegacy *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);

  JUMPOUT(0x18530C140);
}

void *std::vector<MTLBindingInternal *>::__init_with_size[abi:ne180100]<MTLBindingInternal **,MTLBindingInternal **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1827F2220(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<MTLStructType *,unsigned int>,std::__map_value_compare<MTLStructType *,std::__value_type<MTLStructType *,unsigned int>,std::less<MTLStructType *>,true>,std::allocator<std::__value_type<MTLStructType *,unsigned int>>>::__emplace_unique_key_args<MTLStructType *,std::piecewise_construct_t const&,std::tuple<MTLStructType * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    size_t v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

double MTLMetalScriptSerializer::createLinkedFunctionsHashesVector@<D0>(MTLMetalScriptSerializer *this@<X0>, unint64_t **a2@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v4 = (void *)[(MTLMetalScriptSerializer *)this functions];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v55 objects:v60 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v56;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v56 != v6) {
          objc_enumerationMutation(v4);
        }
        unint64_t v8 = (_OWORD *)[*(id *)(*((void *)&v55 + 1) + 8 * i) bitCodeHash];
        int v9 = v8;
        size_t v11 = a2[1];
        unint64_t v10 = (unint64_t)a2[2];
        if ((unint64_t)v11 >= v10)
        {
          int v14 = *a2;
          uint64_t v15 = ((char *)v11 - (char *)*a2) >> 5;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 59) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v10 - (void)v14;
          if (v17 >> 4 > v16) {
            unint64_t v16 = v17 >> 4;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)(a2 + 2), v18);
            int v14 = *a2;
            size_t v11 = a2[1];
          }
          else
          {
            uint64_t v19 = 0;
          }
          long long v20 = v9[1];
          size_t v21 = &v19[32 * v15];
          *(_OWORD *)size_t v21 = *v9;
          *((_OWORD *)v21 + 1) = v20;
          if (v11 == v14)
          {
            size_t v24 = &v19[32 * v15];
          }
          else
          {
            uint64_t v22 = &v19[32 * v15];
            do
            {
              long long v23 = *((_OWORD *)v11 - 1);
              size_t v24 = v22 - 32;
              *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
              *((_OWORD *)v22 - 1) = v23;
              v11 -= 4;
              v22 -= 32;
            }
            while (v11 != v14);
          }
          uint64_t v13 = (unint64_t *)(v21 + 32);
          *a2 = (unint64_t *)v24;
          a2[1] = (unint64_t *)(v21 + 32);
          a2[2] = (unint64_t *)&v19[32 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          long long v12 = v8[1];
          *(_OWORD *)size_t v11 = *v8;
          *((_OWORD *)v11 + 1) = v12;
          uint64_t v13 = v11 + 4;
        }
        a2[1] = v13;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v55 objects:v60 count:16];
    }
    while (v5);
  }
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  size_t v25 = (void *)[(MTLMetalScriptSerializer *)this privateFunctions];
  uint64_t v26 = [v25 countByEnumeratingWithState:&v51 objects:v59 count:16];
  if (v26)
  {
    uint64_t v27 = *(void *)v52;
    do
    {
      for (uint64_t j = 0; j != v26; ++j)
      {
        if (*(void *)v52 != v27) {
          objc_enumerationMutation(v25);
        }
        uint64_t v29 = (_OWORD *)[*(id *)(*((void *)&v51 + 1) + 8 * j) bitCodeHash];
        uint64_t v30 = v29;
        uint64_t v32 = a2[1];
        unint64_t v31 = (unint64_t)a2[2];
        if ((unint64_t)v32 >= v31)
        {
          uint64_t v35 = *a2;
          uint64_t v36 = ((char *)v32 - (char *)*a2) >> 5;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 59) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v38 = v31 - (void)v35;
          if (v38 >> 4 > v37) {
            unint64_t v37 = v38 >> 4;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)(a2 + 2), v39);
            uint64_t v35 = *a2;
            uint64_t v32 = a2[1];
          }
          else
          {
            long long v40 = 0;
          }
          long long v41 = v30[1];
          uint64_t v42 = &v40[32 * v36];
          *(_OWORD *)uint64_t v42 = *v30;
          *((_OWORD *)v42 + 1) = v41;
          if (v32 == v35)
          {
            size_t v45 = &v40[32 * v36];
          }
          else
          {
            unint64_t v43 = &v40[32 * v36];
            do
            {
              long long v44 = *((_OWORD *)v32 - 1);
              size_t v45 = v43 - 32;
              *((_OWORD *)v43 - 2) = *((_OWORD *)v32 - 2);
              *((_OWORD *)v43 - 1) = v44;
              v32 -= 4;
              v43 -= 32;
            }
            while (v32 != v35);
          }
          uint64_t v34 = (unint64_t *)(v42 + 32);
          *a2 = (unint64_t *)v45;
          a2[1] = (unint64_t *)(v42 + 32);
          a2[2] = (unint64_t *)&v40[32 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          long long v33 = v29[1];
          *(_OWORD *)uint64_t v32 = *v29;
          *((_OWORD *)v32 + 1) = v33;
          uint64_t v34 = v32 + 4;
        }
        a2[1] = v34;
      }
      uint64_t v26 = [v25 countByEnumeratingWithState:&v51 objects:v59 count:16];
    }
    while (v26);
  }
  unint64_t v46 = (unint64_t)a2[1];
  unint64_t v47 = 126 - 2 * __clz((uint64_t)(v46 - (void)*a2) >> 5);
  if ((unint64_t *)v46 == *a2) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = v47;
  }
  *(void *)&double result = std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::$_0 &,MTLUINT256_t *,false>(*a2, v46, v48, 1).n128_u64[0];
  return result;
}

void sub_1827F2674(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::makeNumberString@<X0>(MTLMetalScriptSerializer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t result = snprintf(__str, 9uLL, "%08X", this);
  *(unsigned char *)(a2 + 23) = 8;
  *(void *)a2 = *(void *)__str;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t MTLMetalScriptSerializer::addString(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, NSString *a3)
{
  if (!a2 || ([(flatbuffers::FlatBufferBuilder *)a2 isEqualToString:&stru_1ECAC84A8] & 1) != 0) {
    return 0;
  }
  uint64_t v6 = (const char *)[(flatbuffers::FlatBufferBuilder *)a2 cStringUsingEncoding:4];
  size_t v7 = strlen(v6);

  return flatbuffers::FlatBufferBuilder::CreateString(this, v6, v7);
}

uint64_t MTLMetalScriptSerializer::addString(flatbuffers::FlatBufferBuilder *a1, const char *a2)
{
  if (a2[23] < 0)
  {
    unint64_t v2 = *((void *)a2 + 1);
    if (v2)
    {
      a2 = *(const char **)a2;
      return flatbuffers::FlatBufferBuilder::CreateString(a1, a2, v2);
    }
  }
  else
  {
    unint64_t v2 = *((unsigned __int8 *)a2 + 23);
    if (a2[23]) {
      return flatbuffers::FlatBufferBuilder::CreateString(a1, a2, v2);
    }
  }
  return 0;
}

void *MTLMetalScriptSerializer::HashFunction(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = [result libraryData];
    uint64_t v3 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 296))(v2);
    return (void *)(objc_msgSend((id)objc_msgSend(v1, "name"), "hash") ^ v3);
  }
  return result;
}

BOOL MTLMetalScriptSerializer::AreStringArraysOrderIndependentlyEqual(_DWORD *a1, _DWORD *a2)
{
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  if (*a1)
  {
    uint64_t v4 = a1 + 2;
    unint64_t v5 = 1;
    do
    {
      uint64_t v6 = &a1[v5];
      uint64_t v7 = *v6;
      uint64_t v8 = *(unsigned int *)((char *)v6 + v7);
      *(void *)&v17[0] = (char *)v4 + v7;
      *((void *)&v17[0] + 1) = v8;
      std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view>((uint64_t)v19, (uint64_t)v17, v17);
      ++v4;
      BOOL v9 = v5++ >= *a1;
    }
    while (!v9);
  }
  memset(v17, 0, sizeof(v17));
  int v18 = 1065353216;
  if (*a2)
  {
    unint64_t v10 = a2 + 2;
    unint64_t v11 = 1;
    do
    {
      long long v12 = &a2[v11];
      uint64_t v13 = *v12;
      uint64_t v14 = *(unsigned int *)((char *)v12 + v13);
      *(void *)&long long v21 = (char *)v10 + v13;
      *((void *)&v21 + 1) = v14;
      std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view>((uint64_t)v17, (uint64_t)&v21, &v21);
      ++v10;
      BOOL v9 = v11++ >= *a2;
    }
    while (!v9);
  }
  BOOL v15 = std::operator==[abi:ne180100]<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>((uint64_t)v19, v17);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v17);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v19);
  return v15;
}

void sub_1827F294C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

BOOL std::operator==[abi:ne180100]<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v3 = (uint64_t **)(a1 + 16);
  do
  {
    uint64_t v3 = (uint64_t **)*v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    unint64_t v5 = std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::find<std::string_view>(a2, (uint64_t)(v3 + 2));
    if (!v5) {
      break;
    }
    size_t v6 = (size_t)v3[3];
    if ((uint64_t *)v6 != v5[3]) {
      break;
    }
  }
  while (!memcmp(v3[2], v5[2], v6));
  return v4;
}

uint64_t MTLMetalScriptSerializer::EqualLinkedFunctions(const LinkedFunctions *this, const LinkedFunctions *a2, const LinkedFunctions *a3)
{
  if (this == a2) {
    return 1;
  }
  uint64_t v4 = 0;
  if (!this || !a2) {
    return v4;
  }
  size_t v6 = &this[-*(int *)this->var0];
  unsigned int v7 = *(unsigned __int16 *)v6->var0;
  if (v7 >= 7 && *(_WORD *)v6[6].var0) {
    int v8 = *(_DWORD *)this[*(unsigned __int16 *)v6[6].var0 + *(unsigned int *)this[*(unsigned __int16 *)v6[6].var0].var0].var0;
  }
  else {
    int v8 = 0;
  }
  var0 = (unsigned __int16 *)a2[-*(int *)a2->var0].var0;
  unsigned int v10 = *var0;
  if (v10 < 7)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = var0[3];
    if (var0[3]) {
      LODWORD(v11) = *(_DWORD *)a2[v11 + *(unsigned int *)a2[v11].var0].var0;
    }
  }
  int v12 = v7 >= 5 && *(_WORD *)v6[4].var0
      ? *(_DWORD *)this[*(unsigned __int16 *)v6[4].var0 + *(unsigned int *)this[*(unsigned __int16 *)v6[4].var0].var0].var0
      : 0;
  if (v10 < 5)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = var0[2];
    if (var0[2]) {
      LODWORD(v13) = *(_DWORD *)a2[v13 + *(unsigned int *)a2[v13].var0].var0;
    }
  }
  int v14 = v7 >= 9 && *(_WORD *)v6[8].var0
      ? *(_DWORD *)this[*(unsigned __int16 *)v6[8].var0 + *(unsigned int *)this[*(unsigned __int16 *)v6[8].var0].var0].var0
      : 0;
  if (v10 < 9)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    uint64_t v15 = var0[4];
    if (var0[4]) {
      LODWORD(v15) = *(_DWORD *)a2[v15 + *(unsigned int *)a2[v15].var0].var0;
    }
  }
  uint64_t v4 = 0;
  if (v8 != v11 || v12 != v13 || v14 != v15) {
    return v4;
  }
  if (v8)
  {
    if (v7 >= 7 && (uint64_t v16 = *(unsigned __int16 *)v6[6].var0) != 0) {
      uint64_t v17 = (LinkedFunctions *)&this[v16 + *(unsigned int *)this[v16].var0];
    }
    else {
      uint64_t v17 = 0;
    }
    int v18 = v10 >= 7 && var0[3] ? (LinkedFunctions *)&a2[var0[3] + *(unsigned int *)a2[var0[3]].var0] : 0;
    if (!MTLMetalScriptSerializer::AreStringArraysOrderIndependentlyEqual(v17, v18)) {
      return 0;
    }
  }
  if (v12)
  {
    uint64_t v19 = &this[-*(int *)this->var0];
    if (*(unsigned __int16 *)v19->var0 >= 5u && (uint64_t v20 = *(unsigned __int16 *)v19[4].var0) != 0) {
      long long v21 = (LinkedFunctions *)&this[v20 + *(unsigned int *)this[v20].var0];
    }
    else {
      long long v21 = 0;
    }
    uint64_t v22 = &a2[-*(int *)a2->var0];
    if (*(unsigned __int16 *)v22->var0 >= 5u && (uint64_t v23 = *(unsigned __int16 *)v22[4].var0) != 0) {
      size_t v24 = (LinkedFunctions *)&a2[v23 + *(unsigned int *)a2[v23].var0];
    }
    else {
      size_t v24 = 0;
    }
    if (!MTLMetalScriptSerializer::AreStringArraysOrderIndependentlyEqual(v21, v24)) {
      return 0;
    }
  }
  if (!v14) {
    return 1;
  }
  memset(v54, 0, sizeof(v54));
  int v55 = 1065353216;
  uint64_t v25 = *(int *)this->var0;
  uint64_t v26 = *(unsigned __int16 *)this[-v25 + 8].var0;
  if (*(unsigned __int16 *)this[-v25].var0 <= 8u)
  {
    uint64_t v27 = 0;
    LODWORD(v25) = *(_DWORD *)this[v26].var0;
  }
  else if (*(_WORD *)this[-v25 + 8].var0)
  {
    uint64_t v27 = &this[v26 + *(unsigned int *)this[v26].var0];
    LODWORD(v25) = *(_DWORD *)this[v26].var0;
  }
  else
  {
    uint64_t v27 = 0;
  }
  if (!*(_DWORD *)this[v26 + v25].var0) {
    goto LABEL_76;
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  do
  {
    uint64_t v31 = *(unsigned int *)v27[v29 + 4].var0;
    uint64_t v32 = v31 - *(int *)v27[v29 + 4 + v31].var0;
    long long v33 = (char *)&v27[v29 + v32];
    if (*((unsigned __int16 *)v33 + 2) >= 7u && (uint64_t v34 = *((unsigned __int16 *)v33 + 5)) != 0) {
      uint64_t v35 = (uint64_t)&v27[v29 + 4 + v31 + v34 + *(unsigned int *)v27[v29 + 4 + v31 + v34].var0];
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = v31 + *(unsigned __int16 *)v27[v29 + 8 + v32].var0;
    uint64_t v37 = v36 + *(unsigned int *)v27[v29 + 4 + v36].var0;
    uint64_t v38 = *(unsigned int *)v27[v29 + 4 + v37].var0;
    long long v52 = (char *)&v27[v29 + 8 + v37];
    uint64_t v53 = v38;
    long long v56 = &v52;
    *((void *)std::__hash_table<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view&&>,std::tuple<>>((uint64_t)v54, (uint64_t)&v52, (uint64_t)&std::piecewise_construct, (_OWORD **)&v56)+ 4) = v35;
    ++v30;
    unint64_t v39 = &this[*(unsigned __int16 *)this[-*(int *)this->var0 + 8].var0];
    unint64_t v40 = *(unsigned int *)v39[*(unsigned int *)v39->var0].var0;
    v29 += 4;
  }
  while (v30 < v40);
  if (v40)
  {
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    while (1)
    {
      unint64_t v43 = *(unsigned int *)v27[v41 + 4].var0
          + (unint64_t)*(unsigned __int16 *)v27[v41
                                                     + 8
                                                     + *(unsigned int *)v27[v41 + 4].var0
                                                     - (uint64_t)*(int *)v27[v41 + 4 + *(unsigned int *)v27[v41 + 4].var0].var0].var0;
      unint64_t v44 = v43 + *(unsigned int *)v27[v41 + 4 + v43].var0;
      uint64_t v45 = *(unsigned int *)v27[v41 + 4 + v44].var0;
      long long v52 = (char *)&v27[v41 + 8 + v44];
      uint64_t v53 = v45;
      unint64_t v46 = std::__hash_table<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>>>::find<std::string_view>(v54, (uint64_t)&v52);
      if (!v46) {
        break;
      }
      uint64_t v47 = *(unsigned int *)v27[v41 + 4].var0;
      uint64_t v48 = (char *)&v27[v41 + v47 - *(int *)v27[v41 + 4 + v47].var0];
      if (*((unsigned __int16 *)v48 + 2) >= 7u && (uint64_t v49 = *((unsigned __int16 *)v48 + 5)) != 0) {
        int v50 = (char *)&v27[v41 + 4 + v47 + v49 + *(unsigned int *)v27[v41 + 4 + v47 + v49].var0];
      }
      else {
        int v50 = 0;
      }
      if (!MTLMetalScriptSerializer::AreStringArraysOrderIndependentlyEqual(v46[4], v50)) {
        break;
      }
      ++v42;
      long long v51 = &this[*(unsigned __int16 *)this[-*(int *)this->var0 + 8].var0];
      v41 += 4;
      if (v42 >= *(unsigned int *)v51[*(unsigned int *)v51->var0].var0) {
        goto LABEL_76;
      }
    }
    uint64_t v4 = 0;
  }
  else
  {
LABEL_76:
    uint64_t v4 = 1;
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v54);
  return v4;
}

void sub_1827F2E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MTLMetalScriptSerializer::EqualComputeDescriptor(int *a1, int *a2)
{
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 7u && (uint64_t v3 = v2[3]) != 0) {
    uint64_t v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 7u && (uint64_t v6 = v5[3]) != 0) {
    unsigned int v7 = (int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
  }
  else {
    unsigned int v7 = 0;
  }
  int v8 = (unsigned __int16 *)((char *)v4 - *v4);
  unsigned int v9 = *v8;
  if (v9 < 5)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    uint64_t v10 = v8[2];
    if (v8[2]) {
      LOBYTE(v10) = *((unsigned char *)v4 + v10) != 0;
    }
  }
  uint64_t v11 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v12 = *v11;
  if (v12 >= 5 && v11[2]) {
    LOBYTE(v10) = v10 ^ (*((unsigned char *)v7 + v11[2]) != 0);
  }
  if (v10) {
    return 0;
  }
  if (v9 < 7)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = v8[3];
    if (v8[3]) {
      uint64_t v13 = *(void *)((char *)v4 + v13);
    }
  }
  if (v12 < 7)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = v11[3];
    if (v11[3]) {
      uint64_t v14 = *(void *)((char *)v7 + v14);
    }
  }
  if (v13 != v14) {
    return 0;
  }
  uint64_t v15 = v9 >= 9 && v8[4] ? *(void *)((char *)v4 + v8[4]) : 1;
  uint64_t v16 = v12 >= 9 && v11[4] ? *(void *)((char *)v7 + v11[4]) : 1;
  if (v15 != v16) {
    return 0;
  }
  if (v9 < 0xF)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    uint64_t v17 = v8[7];
    if (v8[7]) {
      LOBYTE(v17) = *((unsigned char *)v4 + v17) != 0;
    }
  }
  if (v12 >= 0xF && v11[7]) {
    LOBYTE(v17) = v17 ^ (*((unsigned char *)v7 + v11[7]) != 0);
  }
  if (v17) {
    return 0;
  }
  if (v9 < 0x11)
  {
    LOBYTE(v18) = 0;
  }
  else
  {
    uint64_t v18 = v8[8];
    if (v8[8]) {
      LOBYTE(v18) = *((unsigned char *)v4 + v18) != 0;
    }
  }
  if (v12 >= 0x11 && v11[8]) {
    LOBYTE(v18) = v18 ^ (*((unsigned char *)v7 + v11[8]) != 0);
  }
  if (v18) {
    return 0;
  }
  if (v9 < 0x13)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v8[9];
    if (v8[9]) {
      LODWORD(v19) = *((unsigned __int8 *)v4 + v19);
    }
  }
  if (v12 < 0x13)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    uint64_t v20 = v11[9];
    if (v11[9]) {
      LODWORD(v20) = *((unsigned __int8 *)v7 + v20);
    }
  }
  if (v19 != v20) {
    return 0;
  }
  if (v9 < 0x15)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v8[10];
    if (v8[10]) {
      LOBYTE(v21) = *((unsigned char *)v4 + v21) != 0;
    }
  }
  if (v12 >= 0x15 && v11[10]) {
    LOBYTE(v21) = v21 ^ (*((unsigned char *)v7 + v11[10]) != 0);
  }
  if (v21) {
    return 0;
  }
  uint64_t v22 = v9 >= 0xB && v8[5] ? (int *)((char *)v4 + v8[5] + *(unsigned int *)((char *)v4 + v8[5])) : 0;
  uint64_t v23 = v12 >= 0xB && v11[5] ? (int *)((char *)v7 + v11[5] + *(unsigned int *)((char *)v7 + v11[5])) : 0;
  if (!EqualStageInputOutputDescriptor(v22, v23)) {
    return 0;
  }
  unint64_t v24 = v9 >= 0xD && v8[6] ? (unint64_t)v4 + v8[6] + *(unsigned int *)((char *)v4 + v8[6]) : 0;
  uint64_t v25 = v12 >= 0xD && v11[6] ? (unsigned int *)((char *)v7 + v11[6] + *(unsigned int *)((char *)v7 + v11[6])) : 0;
  if (!EqualPipelineBuffers(v24, v25)) {
    return 0;
  }
  if (v9 >= 0x17 && v8[11]) {
    uint64_t v27 = (const LinkedFunctions *)v4 + v8[11] + *(unsigned int *)((char *)v4 + v8[11]);
  }
  else {
    uint64_t v27 = 0;
  }
  if (v12 >= 0x17 && v11[11]) {
    uint64_t v29 = (const LinkedFunctions *)v7 + v11[11] + *(unsigned int *)((char *)v7 + v11[11]);
  }
  else {
    uint64_t v29 = 0;
  }

  return MTLMetalScriptSerializer::EqualLinkedFunctions(v27, v29, v26);
}

BOOL EqualStageInputOutputDescriptor(int *a1, int *a2)
{
  if (a1 && (uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1), *v2 >= 7u) && (v3 = v2[3]) != 0)
  {
    uint64_t v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
    if (!a2) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = 0;
    if (!a2) {
      goto LABEL_11;
    }
  }
  unint64_t v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 7u)
  {
    uint64_t v6 = v5[3];
    if (v6)
    {
      unsigned int v7 = (unsigned int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
      BOOL v8 = v4 != 0;
      if (v4) {
        LODWORD(v9) = *v4;
      }
      else {
        LODWORD(v9) = 0;
      }
      unsigned int v11 = *v7;
      int v10 = 1;
      goto LABEL_15;
    }
  }
LABEL_11:
  if (!v4) {
    goto LABEL_62;
  }
  int v10 = 0;
  unsigned int v7 = 0;
  unsigned int v11 = 0;
  LODWORD(v9) = *v4;
  BOOL v8 = 1;
LABEL_15:
  if (v9 <= v11) {
    uint64_t v9 = v11;
  }
  else {
    uint64_t v9 = v9;
  }
  if (v9)
  {
    unsigned int v12 = v4 + 1;
    uint64_t v13 = v7 + 1;
    do
    {
      if (v8)
      {
        uint64_t v14 = (int *)((char *)v12 + *v12);
        if (!v10) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v14 = 0;
        if (!v10)
        {
LABEL_22:
          uint64_t v15 = 0;
          goto LABEL_25;
        }
      }
      uint64_t v15 = (int *)((char *)v13 + *v13);
LABEL_25:
      uint64_t v65 = 1;
      uint64_t v67 = 0;
      LODWORD(v68) = 1;
      uint64_t v70 = 1;
      uint64_t v62 = 0;
      LODWORD(v63) = 1;
      if (!v14) {
        goto LABEL_39;
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v14 - *v14);
      unsigned int v17 = *v16;
      if (v17 < 9)
      {
        uint64_t v18 = 0;
        if (v17 < 5)
        {
          int v19 = 1;
LABEL_37:
          uint64_t v21 = 1;
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v18 = v16[4];
        if (v16[4]) {
          uint64_t v18 = *(void *)((char *)v14 + v18);
        }
      }
      if (v16[2]) {
        int v19 = *((unsigned __int8 *)v14 + v16[2]);
      }
      else {
        int v19 = 1;
      }
      if (v17 < 7) {
        goto LABEL_37;
      }
      uint64_t v20 = v16[3];
      if (!v20) {
        goto LABEL_37;
      }
      uint64_t v21 = *(void *)((char *)v14 + v20);
LABEL_38:
      uint64_t v67 = v18;
      LODWORD(v68) = v19;
      uint64_t v70 = v21;
LABEL_39:
      if (!v15) {
        goto LABEL_53;
      }
      uint64_t v22 = (unsigned __int16 *)((char *)v15 - *v15);
      unsigned int v23 = *v22;
      if (v23 < 9)
      {
        uint64_t v24 = 0;
        if (v23 < 5)
        {
          int v25 = 1;
LABEL_51:
          uint64_t v27 = 1;
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v24 = v22[4];
        if (v22[4]) {
          uint64_t v24 = *(void *)((char *)v15 + v24);
        }
      }
      if (v22[2]) {
        int v25 = *((unsigned __int8 *)v15 + v22[2]);
      }
      else {
        int v25 = 1;
      }
      if (v23 < 7) {
        goto LABEL_51;
      }
      uint64_t v26 = v22[3];
      if (!v26) {
        goto LABEL_51;
      }
      uint64_t v27 = *(void *)((char *)v15 + v26);
LABEL_52:
      uint64_t v62 = v24;
      LODWORD(v63) = v25;
      uint64_t v65 = v27;
LABEL_53:
      if (v67 != v62 || v68 != v63 || v70 != v65) {
        return 0;
      }
      ++v12;
      ++v13;
      --v9;
    }
    while (v9);
  }
LABEL_62:
  if (a1 && (v30 = (unsigned __int16 *)((char *)a1 - *a1), *v30 >= 5u) && (uint64_t v31 = v30[2]) != 0)
  {
    uint64_t v32 = (unsigned int *)((char *)a1 + v31 + *(unsigned int *)((char *)a1 + v31));
    if (!a2) {
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v32 = 0;
    if (!a2) {
      goto LABEL_72;
    }
  }
  long long v33 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v33 >= 5u)
  {
    uint64_t v34 = v33[2];
    if (v34)
    {
      uint64_t v35 = (unsigned int *)((char *)a2 + v34 + *(unsigned int *)((char *)a2 + v34));
      BOOL v36 = v32 != 0;
      if (v32) {
        unsigned int v37 = *v32;
      }
      else {
        unsigned int v37 = 0;
      }
      unsigned int v39 = *v35;
      int v38 = 1;
      goto LABEL_76;
    }
  }
LABEL_72:
  if (!v32) {
    return 1;
  }
  int v38 = 0;
  uint64_t v35 = 0;
  unsigned int v39 = 0;
  unsigned int v37 = *v32;
  BOOL v36 = 1;
LABEL_76:
  if (v37 <= v39) {
    uint64_t v41 = v39;
  }
  else {
    uint64_t v41 = v37;
  }
  if (v41)
  {
    unint64_t v42 = v32 + 1;
    unint64_t v43 = v35 + 1;
    uint64_t v44 = v41 - 1;
    while (1)
    {
      if (v36)
      {
        uint64_t v45 = (int *)((char *)v42 + *v42);
        if (!v38) {
          goto LABEL_83;
        }
      }
      else
      {
        uint64_t v45 = 0;
        if (!v38)
        {
LABEL_83:
          unint64_t v46 = 0;
          goto LABEL_86;
        }
      }
      unint64_t v46 = (int *)((char *)v43 + *v43);
LABEL_86:
      LODWORD(v67) = 0;
      uint64_t v69 = 0;
      uint64_t v71 = 0;
      LODWORD(v62) = 0;
      uint64_t v64 = 0;
      uint64_t v66 = 0;
      if (!v45) {
        goto LABEL_100;
      }
      uint64_t v47 = (unsigned __int16 *)((char *)v45 - *v45);
      unsigned int v48 = *v47;
      if (v48 < 5)
      {
        uint64_t v50 = 0;
        LODWORD(v49) = 0;
LABEL_98:
        uint64_t v52 = 0;
        goto LABEL_99;
      }
      uint64_t v49 = v47[2];
      if (v47[2]) {
        LODWORD(v49) = *((unsigned __int8 *)v45 + v49);
      }
      if (v48 < 7)
      {
        uint64_t v50 = 0;
        goto LABEL_98;
      }
      uint64_t v50 = v47[3];
      if (v47[3]) {
        uint64_t v50 = *(void *)((char *)v45 + v50);
      }
      if (v48 < 9) {
        goto LABEL_98;
      }
      uint64_t v51 = v47[4];
      if (!v51) {
        goto LABEL_98;
      }
      uint64_t v52 = *(unsigned int *)((char *)v45 + v51);
LABEL_99:
      LODWORD(v67) = v49;
      uint64_t v69 = v50;
      uint64_t v71 = v52;
LABEL_100:
      if (v46)
      {
        uint64_t v53 = (unsigned __int16 *)((char *)v46 - *v46);
        unsigned int v54 = *v53;
        if (v54 < 5)
        {
          uint64_t v56 = 0;
          LODWORD(v55) = 0;
        }
        else
        {
          uint64_t v55 = v53[2];
          if (v53[2]) {
            LODWORD(v55) = *((unsigned __int8 *)v46 + v55);
          }
          if (v54 < 7)
          {
            uint64_t v56 = 0;
          }
          else
          {
            uint64_t v56 = v53[3];
            if (v53[3]) {
              uint64_t v56 = *(void *)((char *)v46 + v56);
            }
            if (v54 >= 9)
            {
              uint64_t v57 = v53[4];
              if (v57)
              {
                uint64_t v58 = *(unsigned int *)((char *)v46 + v57);
LABEL_113:
                LODWORD(v62) = v55;
                uint64_t v64 = v56;
                uint64_t v66 = v58;
                goto LABEL_114;
              }
            }
          }
        }
        uint64_t v58 = 0;
        goto LABEL_113;
      }
LABEL_114:
      uint64_t v59 = v67 ^ v62 | v69 ^ v64 | v71 ^ v66;
      BOOL result = v59 == 0;
      BOOL v61 = v44-- != 0;
      if (!v59)
      {
        ++v42;
        ++v43;
        if (v61) {
          continue;
        }
      }
      return result;
    }
  }
  return 1;
}

uint64_t EqualPipelineBuffers(unint64_t a1, unsigned int *a2)
{
  if (!(a1 | (unint64_t)a2)) {
    return 1;
  }
  if (a1)
  {
    LODWORD(v2) = *(_DWORD *)a1;
    if (a2)
    {
LABEL_4:
      unsigned int v3 = *a2;
      goto LABEL_7;
    }
  }
  else
  {
    LODWORD(v2) = 0;
    if (a2) {
      goto LABEL_4;
    }
  }
  unsigned int v3 = 0;
LABEL_7:
  if (v2 <= v3) {
    uint64_t v2 = v3;
  }
  else {
    uint64_t v2 = v2;
  }
  if (v2)
  {
    uint64_t v4 = (unsigned int *)(a1 + 4);
    unint64_t v5 = a2 + 1;
    uint64_t v6 = v2 - 1;
    while (1)
    {
      if (a1)
      {
        unsigned int v7 = (int *)((char *)v4 + *v4);
        if (a2) {
          goto LABEL_14;
        }
      }
      else
      {
        unsigned int v7 = 0;
        if (a2)
        {
LABEL_14:
          BOOL v8 = (int *)((char *)v5 + *v5);
          if (v7) {
            goto LABEL_18;
          }
          goto LABEL_22;
        }
      }
      BOOL v8 = 0;
      if (v7)
      {
LABEL_18:
        uint64_t v9 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0) {
          LODWORD(v7) = *((unsigned __int8 *)v7 + v10);
        }
        else {
          LODWORD(v7) = 0;
        }
      }
LABEL_22:
      if (v8)
      {
        unsigned int v11 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
          LODWORD(v8) = *((unsigned __int8 *)v8 + v12);
        }
        else {
          LODWORD(v8) = 0;
        }
      }
      BOOL v14 = v6-- != 0;
      BOOL v15 = v7 == v8;
      BOOL v16 = v7 == v8;
      if (v15)
      {
        ++v4;
        ++v5;
        if (v14) {
          continue;
        }
      }
      return v16;
    }
  }
  return 1;
}

uint64_t MTLMetalScriptSerializer::EqualFragmentDescriptor(int *a1, int *a2)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v5 = *v4;
  if (v5 >= 5 && v4[2]) {
    uint64_t v6 = *(void *)((char *)a1 + v4[2]);
  }
  else {
    uint64_t v6 = 1;
  }
  unsigned int v7 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v8 = *v7;
  if (v8 >= 5 && v7[2]) {
    uint64_t v9 = *(void *)((char *)a2 + v7[2]);
  }
  else {
    uint64_t v9 = 1;
  }
  if (v6 != v9) {
    return 0;
  }
  BOOL v10 = v5 < 7 || !v4[3] || *((unsigned __int8 *)a1 + v4[3]) != 0;
  if (v8 >= 7 && v7[3])
  {
    if ((v10 ^ (*((unsigned char *)a2 + v7[3]) != 0))) {
      return 0;
    }
  }
  else if (!v10)
  {
    return 0;
  }
  if (v5 < 9)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    uint64_t v11 = v4[4];
    if (v4[4]) {
      LOBYTE(v11) = *((unsigned char *)a1 + v11) != 0;
    }
  }
  if (v8 >= 9 && v7[4]) {
    LOBYTE(v11) = v11 ^ (*((unsigned char *)a2 + v7[4]) != 0);
  }
  if (v11) {
    return 0;
  }
  if (v5 < 0xB)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    uint64_t v12 = v4[5];
    if (v4[5]) {
      LOBYTE(v12) = *((unsigned char *)a1 + v12) != 0;
    }
  }
  if (v8 >= 0xB && v7[5]) {
    LOBYTE(v12) = v12 ^ (*((unsigned char *)a2 + v7[5]) != 0);
  }
  if (v12) {
    return 0;
  }
  uint64_t v13 = v5 >= 0xD && v4[6] ? *(void *)((char *)a1 + v4[6]) : 1;
  uint64_t v14 = v8 >= 0xD && v7[6] ? *(void *)((char *)a2 + v7[6]) : 1;
  if (v13 != v14) {
    return 0;
  }
  if (v5 < 0xF)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = v4[7];
    if (v4[7]) {
      uint64_t v15 = *(void *)((char *)a1 + v15);
    }
  }
  if (v8 < 0xF)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = v7[7];
    if (v7[7]) {
      uint64_t v16 = *(void *)((char *)a2 + v16);
    }
  }
  if (v15 != v16) {
    return 0;
  }
  uint64_t v17 = v5 >= 0x11 && v4[8] ? *(void *)((char *)a1 + v4[8]) : -1;
  uint64_t v18 = v8 >= 0x11 && v7[8] ? *(void *)((char *)a2 + v7[8]) : -1;
  if (v17 != v18) {
    return 0;
  }
  float v19 = 1.0;
  float v20 = 1.0;
  if (v5 >= 0x13 && v4[9]) {
    float v20 = *(float *)((char *)a1 + v4[9]);
  }
  if (v8 >= 0x13 && v7[9]) {
    float v19 = *(float *)((char *)a2 + v7[9]);
  }
  if (v20 != v19) {
    return 0;
  }
  if (v5 < 0x15)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v4[10];
    if (v4[10]) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  if (v8 >= 0x15 && v7[10]) {
    LOBYTE(v21) = v21 ^ (*((unsigned char *)a2 + v7[10]) != 0);
  }
  if (v21) {
    return 0;
  }
  if (v5 < 0x19)
  {
    LODWORD(v22) = 0;
  }
  else
  {
    uint64_t v22 = v4[12];
    if (v4[12]) {
      LODWORD(v22) = *(unsigned __int16 *)((char *)a1 + v22);
    }
  }
  if (v8 < 0x19)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    uint64_t v23 = v7[12];
    if (v7[12]) {
      LODWORD(v23) = *(unsigned __int16 *)((char *)a2 + v23);
    }
  }
  if (v22 != v23) {
    return 0;
  }
  if (v5 < 0x1B)
  {
    LODWORD(v24) = 0;
  }
  else
  {
    uint64_t v24 = v4[13];
    if (v4[13]) {
      LODWORD(v24) = *(unsigned __int16 *)((char *)a1 + v24);
    }
  }
  if (v8 < 0x1B)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    uint64_t v25 = v7[13];
    if (v7[13]) {
      LODWORD(v25) = *(unsigned __int16 *)((char *)a2 + v25);
    }
  }
  if (v24 != v25) {
    return 0;
  }
  if (v5 < 0x1F)
  {
    LOBYTE(v26) = 0;
  }
  else
  {
    uint64_t v26 = v4[15];
    if (v4[15]) {
      LOBYTE(v26) = *((unsigned char *)a1 + v26) != 0;
    }
  }
  if (v8 >= 0x1F && v7[15]) {
    LOBYTE(v26) = v26 ^ (*((unsigned char *)a2 + v7[15]) != 0);
  }
  if (v26) {
    return 0;
  }
  if (v5 < 0x21)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v4[16];
    if (v4[16]) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  if (v8 >= 0x21 && v7[16]) {
    LOBYTE(v27) = v27 ^ (*((unsigned char *)a2 + v7[16]) != 0);
  }
  if (v27) {
    return 0;
  }
  if (v5 < 0x23)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v4[17];
    if (v4[17]) {
      LODWORD(v28) = *((unsigned __int8 *)a1 + v28);
    }
  }
  if (v8 < 0x23)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    uint64_t v29 = v7[17];
    if (v7[17]) {
      LODWORD(v29) = *((unsigned __int8 *)a2 + v29);
    }
  }
  if (v28 != v29) {
    return 0;
  }
  if (v5 < 0x25)
  {
    LOBYTE(v30) = 0;
  }
  else
  {
    uint64_t v30 = v4[18];
    if (v4[18]) {
      LOBYTE(v30) = *((unsigned char *)a1 + v30) != 0;
    }
  }
  if (v8 >= 0x25 && v7[18]) {
    LOBYTE(v30) = v30 ^ (*((unsigned char *)a2 + v7[18]) != 0);
  }
  if (v30) {
    return 0;
  }
  if (v5 < 0x27)
  {
    LODWORD(v31) = 0;
  }
  else
  {
    uint64_t v31 = v4[19];
    if (v4[19]) {
      LODWORD(v31) = *((unsigned __int8 *)a1 + v31);
    }
  }
  if (v8 < 0x27)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    uint64_t v32 = v7[19];
    if (v7[19]) {
      LODWORD(v32) = *((unsigned __int8 *)a2 + v32);
    }
  }
  if (v31 != v32) {
    return 0;
  }
  if (v5 < 0x29)
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    uint64_t v33 = v4[20];
    if (v4[20]) {
      LOBYTE(v33) = *((unsigned char *)a1 + v33) != 0;
    }
  }
  if (v8 >= 0x29 && v7[20]) {
    LOBYTE(v33) = v33 ^ (*((unsigned char *)a2 + v7[20]) != 0);
  }
  if (v33) {
    return 0;
  }
  if (v5 < 0x2B)
  {
    LODWORD(v34) = 0;
  }
  else
  {
    uint64_t v34 = v4[21];
    if (v4[21]) {
      LODWORD(v34) = *((unsigned __int8 *)a1 + v34);
    }
  }
  if (v8 < 0x2B)
  {
    LODWORD(v35) = 0;
  }
  else
  {
    uint64_t v35 = v7[21];
    if (v7[21]) {
      LODWORD(v35) = *((unsigned __int8 *)a2 + v35);
    }
  }
  if (v34 != v35) {
    return 0;
  }
  if (v5 < 0x2D)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v4[22];
    if (v4[22]) {
      LOBYTE(v36) = *((unsigned char *)a1 + v36) != 0;
    }
  }
  if (v8 >= 0x2D && v7[22]) {
    LOBYTE(v36) = v36 ^ (*((unsigned char *)a2 + v7[22]) != 0);
  }
  if (v36) {
    return 0;
  }
  if (v5 < 0x2F)
  {
    LOBYTE(v37) = 0;
  }
  else
  {
    uint64_t v37 = v4[23];
    if (v4[23]) {
      LOBYTE(v37) = *((unsigned char *)a1 + v37) != 0;
    }
  }
  if (v8 >= 0x2F && v7[23]) {
    LOBYTE(v37) = v37 ^ (*((unsigned char *)a2 + v7[23]) != 0);
  }
  if (v37) {
    return 0;
  }
  if (v5 < 0x31)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    uint64_t v38 = v4[24];
    if (v4[24]) {
      LOBYTE(v38) = *((unsigned char *)a1 + v38) != 0;
    }
  }
  if (v8 >= 0x31 && v7[24]) {
    LOBYTE(v38) = v38 ^ (*((unsigned char *)a2 + v7[24]) != 0);
  }
  if (v38) {
    return 0;
  }
  if (v5 < 0x35)
  {
    LODWORD(v39) = 0;
  }
  else
  {
    uint64_t v39 = v4[26];
    if (v4[26]) {
      LODWORD(v39) = *(int *)((char *)a1 + v39);
    }
  }
  if (v8 < 0x35)
  {
    LODWORD(v40) = 0;
  }
  else
  {
    uint64_t v40 = v7[26];
    if (v7[26]) {
      LODWORD(v40) = *(int *)((char *)a2 + v40);
    }
  }
  if (v39 != v40) {
    return 0;
  }
  if (v5 < 0x33)
  {
    LOBYTE(v41) = 0;
  }
  else
  {
    uint64_t v41 = v4[25];
    if (v4[25]) {
      LOBYTE(v41) = *((unsigned char *)a1 + v41) != 0;
    }
  }
  if (v8 >= 0x33 && v7[25]) {
    LOBYTE(v41) = v41 ^ (*((unsigned char *)a2 + v7[25]) != 0);
  }
  if (v41) {
    return 0;
  }
  unint64_t v42 = v5 >= 0x17 && v4[11] ? (unint64_t)a1 + v4[11] + *(unsigned int *)((char *)a1 + v4[11]) : 0;
  unint64_t v43 = v8 >= 0x17 && v7[11] ? (unsigned int *)((char *)a2 + v7[11] + *(unsigned int *)((char *)a2 + v7[11])) : 0;
  if (!EqualColorAttachments(v42, v43)) {
    return 0;
  }
  unint64_t v44 = v5 >= 0x1D && v4[14] ? (unint64_t)a1 + v4[14] + *(unsigned int *)((char *)a1 + v4[14]) : 0;
  uint64_t v45 = v8 >= 0x1D && v7[14] ? (unsigned int *)((char *)a2 + v7[14] + *(unsigned int *)((char *)a2 + v7[14])) : 0;
  if (!EqualPipelineBuffers(v44, v45)) {
    return 0;
  }
  if (v5 >= 0x37 && v4[27]) {
    uint64_t v47 = (const LinkedFunctions *)a1 + v4[27] + *(unsigned int *)((char *)a1 + v4[27]);
  }
  else {
    uint64_t v47 = 0;
  }
  if (v8 >= 0x37 && v7[27]) {
    uint64_t v49 = (const LinkedFunctions *)a2 + v7[27] + *(unsigned int *)((char *)a2 + v7[27]);
  }
  else {
    uint64_t v49 = 0;
  }

  return MTLMetalScriptSerializer::EqualLinkedFunctions(v47, v49, v46);
}

uint64_t EqualColorAttachments(unint64_t a1, unsigned int *a2)
{
  if (!(a1 | (unint64_t)a2)) {
    return 1;
  }
  if (!a1)
  {
    LODWORD(v2) = 0;
    if (a2) {
      goto LABEL_4;
    }
LABEL_7:
    unsigned int v3 = 0;
    goto LABEL_8;
  }
  LODWORD(v2) = *(_DWORD *)a1;
  if (!a2) {
    goto LABEL_7;
  }
LABEL_4:
  unsigned int v3 = *a2;
LABEL_8:
  if (v2 <= v3) {
    uint64_t v2 = v3;
  }
  else {
    uint64_t v2 = v2;
  }
  if (v2)
  {
    unsigned int v5 = (unsigned int *)(a1 + 4);
    uint64_t v6 = a2 + 1;
    uint64_t v7 = v2 - 1;
    while (1)
    {
      if (a1)
      {
        unsigned int v8 = (int *)((char *)v5 + *v5);
        if (a2) {
          goto LABEL_15;
        }
      }
      else
      {
        unsigned int v8 = 0;
        if (a2)
        {
LABEL_15:
          uint64_t v9 = (int *)((char *)v6 + *v6);
          if (!v8) {
            goto LABEL_24;
          }
          goto LABEL_16;
        }
      }
      uint64_t v9 = 0;
      if (!v8)
      {
LABEL_24:
        LODWORD(v14) = 0;
        LODWORD(v15) = 0;
        LODWORD(v16) = 0;
        LODWORD(v17) = 0;
        LODWORD(v12) = 0;
        int v13 = 15;
        int v18 = 1;
        int v19 = 1;
        goto LABEL_47;
      }
LABEL_16:
      BOOL v10 = (unsigned __int16 *)((char *)v8 - *v8);
      unsigned int v11 = *v10;
      if (v11 < 5)
      {
        LODWORD(v14) = 0;
        LODWORD(v16) = 0;
        LODWORD(v12) = 0;
        goto LABEL_27;
      }
      uint64_t v12 = v10[2];
      if (v10[2]) {
        LODWORD(v12) = *(unsigned __int16 *)((char *)v8 + v12);
      }
      if (v11 < 7)
      {
        LODWORD(v14) = 0;
        LODWORD(v16) = 0;
LABEL_27:
        LODWORD(v17) = 0;
        LODWORD(v15) = 0;
        LODWORD(v8) = 0;
        int v13 = 15;
LABEL_45:
        int v19 = 1;
LABEL_46:
        int v18 = 1;
        goto LABEL_47;
      }
      if (v10[3]) {
        int v13 = *((unsigned __int8 *)v8 + v10[3]);
      }
      else {
        int v13 = 15;
      }
      if (v11 < 9)
      {
        LODWORD(v14) = 0;
        LODWORD(v16) = 0;
        LODWORD(v17) = 0;
LABEL_44:
        LODWORD(v15) = 0;
        LODWORD(v8) = 0;
        goto LABEL_45;
      }
      uint64_t v17 = v10[4];
      if (v10[4]) {
        LODWORD(v17) = *((unsigned __int8 *)v8 + v17) != 0;
      }
      if (v11 < 0xB)
      {
        LODWORD(v14) = 0;
        LODWORD(v16) = 0;
        goto LABEL_44;
      }
      uint64_t v16 = v10[5];
      if (v10[5]) {
        LODWORD(v16) = *((unsigned __int8 *)v8 + v16);
      }
      if (v11 < 0xD)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
      uint64_t v15 = v10[6];
      if (v10[6]) {
        LODWORD(v15) = *((unsigned __int8 *)v8 + v15);
      }
      if (v11 < 0x15)
      {
        if (v11 < 0x13)
        {
          int v19 = 1;
          if (v11 < 0xF)
          {
            LODWORD(v14) = 0;
            LODWORD(v8) = 0;
            goto LABEL_46;
          }
LABEL_119:
          int v18 = 1;
          goto LABEL_120;
        }
      }
      else if (v10[10])
      {
        int v19 = *((unsigned __int8 *)v8 + v10[10]);
        goto LABEL_112;
      }
      int v19 = 1;
LABEL_112:
      if (!v10[9]) {
        goto LABEL_119;
      }
      int v18 = *((unsigned __int8 *)v8 + v10[9]);
LABEL_120:
      uint64_t v14 = v10[7];
      if (v10[7]) {
        LODWORD(v14) = *((unsigned __int8 *)v8 + v14);
      }
      if (v11 >= 0x11 && (uint64_t v40 = v10[8]) != 0) {
        LODWORD(v8) = *((unsigned __int8 *)v8 + v40);
      }
      else {
        LODWORD(v8) = 0;
      }
LABEL_47:
      if (v9)
      {
        float v20 = (unsigned __int16 *)((char *)v9 - *v9);
        unsigned int v21 = *v20;
        if (v21 < 5)
        {
          LODWORD(v24) = 0;
          LODWORD(v26) = 0;
          LODWORD(v22) = 0;
        }
        else
        {
          uint64_t v22 = v20[2];
          if (v20[2]) {
            LODWORD(v22) = *(unsigned __int16 *)((char *)v9 + v22);
          }
          if (v21 >= 7)
          {
            if (v20[3]) {
              int v23 = *((unsigned __int8 *)v9 + v20[3]);
            }
            else {
              int v23 = 15;
            }
            if (v21 < 9)
            {
              LODWORD(v24) = 0;
              LODWORD(v26) = 0;
              LODWORD(v27) = 0;
            }
            else
            {
              uint64_t v27 = v20[4];
              if (v20[4]) {
                LODWORD(v27) = *((unsigned __int8 *)v9 + v27) != 0;
              }
              if (v21 < 0xB)
              {
                LODWORD(v24) = 0;
                LODWORD(v26) = 0;
              }
              else
              {
                uint64_t v26 = v20[5];
                if (v20[5]) {
                  LODWORD(v26) = *((unsigned __int8 *)v9 + v26);
                }
                if (v21 >= 0xD)
                {
                  uint64_t v25 = v20[6];
                  if (v20[6]) {
                    LODWORD(v25) = *((unsigned __int8 *)v9 + v25);
                  }
                  if (v21 >= 0x15)
                  {
                    if (v20[10]) {
                      int v29 = *((unsigned __int8 *)v9 + v20[10]);
                    }
                    else {
LABEL_115:
                    }
                      int v29 = 1;
                    if (v20[9]) {
                      int v28 = *((unsigned __int8 *)v9 + v20[9]);
                    }
                    else {
LABEL_127:
                    }
                      int v28 = 1;
                    uint64_t v24 = v20[7];
                    if (v20[7]) {
                      LODWORD(v24) = *((unsigned __int8 *)v9 + v24);
                    }
                    if (v21 >= 0x11 && (uint64_t v41 = v20[8]) != 0) {
                      LODWORD(v9) = *((unsigned __int8 *)v9 + v41);
                    }
                    else {
                      LODWORD(v9) = 0;
                    }
                    goto LABEL_77;
                  }
                  if (v21 >= 0x13) {
                    goto LABEL_115;
                  }
                  int v29 = 1;
                  if (v21 >= 0xF) {
                    goto LABEL_127;
                  }
                  LODWORD(v24) = 0;
                  LODWORD(v9) = 0;
                  goto LABEL_76;
                }
                LODWORD(v24) = 0;
              }
            }
            LODWORD(v25) = 0;
            LODWORD(v9) = 0;
LABEL_75:
            int v29 = 1;
LABEL_76:
            int v28 = 1;
            goto LABEL_77;
          }
          LODWORD(v24) = 0;
          LODWORD(v26) = 0;
        }
        LODWORD(v27) = 0;
        LODWORD(v25) = 0;
        LODWORD(v9) = 0;
        int v23 = 15;
        goto LABEL_75;
      }
      LODWORD(v24) = 0;
      LODWORD(v25) = 0;
      LODWORD(v26) = 0;
      LODWORD(v27) = 0;
      LODWORD(v22) = 0;
      int v23 = 15;
      int v28 = 1;
      int v29 = 1;
LABEL_77:
      BOOL v4 = v12 == v22
        && v13 == v23
        && v17 == v27
        && v16 == v26
        && v15 == v25
        && v19 == v29
        && v18 == v28
        && v14 == v24
        && v8 == v9;
      BOOL v39 = v7-- != 0;
      if (v4)
      {
        ++v5;
        ++v6;
        if (v39) {
          continue;
        }
      }
      return v4;
    }
  }
  return 1;
}

uint64_t MTLMetalScriptSerializer::EqualVertexShaderDescriptor(int *a1, int *a2)
{
  BOOL v4 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v5 = *v4;
  if (v5 >= 5 && v4[2]) {
    uint64_t v6 = *(void *)((char *)a1 + v4[2]);
  }
  else {
    uint64_t v6 = 1;
  }
  uint64_t v7 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v8 = *v7;
  if (v8 >= 5 && v7[2]) {
    uint64_t v9 = *(void *)((char *)a2 + v7[2]);
  }
  else {
    uint64_t v9 = 1;
  }
  if (v6 != v9) {
    return 0;
  }
  if (v5 < 0xB)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    uint64_t v10 = v4[5];
    if (v4[5]) {
      LODWORD(v10) = *((unsigned __int8 *)a1 + v10);
    }
  }
  if (v8 < 0xB)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = v7[5];
    if (v7[5]) {
      LODWORD(v11) = *((unsigned __int8 *)a2 + v11);
    }
  }
  if (v10 != v11) {
    return 0;
  }
  uint64_t v12 = v5 >= 0xD && v4[6] ? *(void *)((char *)a1 + v4[6]) : 16;
  uint64_t v13 = v8 >= 0xD && v7[6] ? *(void *)((char *)a2 + v7[6]) : 16;
  if (v12 != v13) {
    return 0;
  }
  if (v5 < 0xF)
  {
    LOBYTE(v14) = 0;
  }
  else
  {
    uint64_t v14 = v4[7];
    if (v4[7]) {
      LOBYTE(v14) = *((unsigned char *)a1 + v14) != 0;
    }
  }
  if (v8 >= 0xF && v7[7]) {
    LOBYTE(v14) = v14 ^ (*((unsigned char *)a2 + v7[7]) != 0);
  }
  if (v14) {
    return 0;
  }
  if (v5 < 0x11)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    uint64_t v15 = v4[8];
    if (v4[8]) {
      LODWORD(v15) = *((unsigned __int8 *)a1 + v15);
    }
  }
  if (v8 < 0x11)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = v7[8];
    if (v7[8]) {
      LODWORD(v16) = *((unsigned __int8 *)a2 + v16);
    }
  }
  if (v15 != v16) {
    return 0;
  }
  if (v5 < 0x13)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v17 = v4[9];
    if (v4[9]) {
      LODWORD(v17) = *((unsigned __int8 *)a1 + v17);
    }
  }
  if (v8 < 0x13)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v7[9];
    if (v7[9]) {
      LODWORD(v18) = *((unsigned __int8 *)a2 + v18);
    }
  }
  if (v17 != v18) {
    return 0;
  }
  if (v5 < 0x15)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v4[10];
    if (v4[10]) {
      LODWORD(v19) = *((unsigned __int8 *)a1 + v19);
    }
  }
  if (v8 < 0x15)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    uint64_t v20 = v7[10];
    if (v7[10]) {
      LODWORD(v20) = *((unsigned __int8 *)a2 + v20);
    }
  }
  if (v19 != v20) {
    return 0;
  }
  if (v5 < 0x17)
  {
    LODWORD(v21) = 0;
  }
  else
  {
    uint64_t v21 = v4[11];
    if (v4[11]) {
      LODWORD(v21) = *((unsigned __int8 *)a1 + v21);
    }
  }
  if (v8 < 0x17)
  {
    LODWORD(v22) = 0;
  }
  else
  {
    uint64_t v22 = v7[11];
    if (v7[11]) {
      LODWORD(v22) = *((unsigned __int8 *)a2 + v22);
    }
  }
  if (v21 != v22) {
    return 0;
  }
  if (v5 < 0x19)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    uint64_t v23 = v4[12];
    if (v4[12]) {
      LODWORD(v23) = *((unsigned __int8 *)a1 + v23);
    }
  }
  if (v8 < 0x19)
  {
    LODWORD(v24) = 0;
  }
  else
  {
    uint64_t v24 = v7[12];
    if (v7[12]) {
      LODWORD(v24) = *((unsigned __int8 *)a2 + v24);
    }
  }
  if (v23 != v24) {
    return 0;
  }
  uint64_t v25 = v5 >= 0x1B && v4[13] ? *(void *)((char *)a1 + v4[13]) : 1;
  uint64_t v26 = v8 >= 0x1B && v7[13] ? *(void *)((char *)a2 + v7[13]) : 1;
  if (v25 != v26) {
    return 0;
  }
  if (v5 < 0x1D)
  {
    LODWORD(v27) = 0;
  }
  else
  {
    uint64_t v27 = v4[14];
    if (v4[14]) {
      LODWORD(v27) = *((unsigned __int8 *)a1 + v27);
    }
  }
  if (v8 < 0x1D)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v7[14];
    if (v7[14]) {
      LODWORD(v28) = *((unsigned __int8 *)a2 + v28);
    }
  }
  if (v27 != v28) {
    return 0;
  }
  if (v5 < 0x23)
  {
    LOBYTE(v29) = 0;
  }
  else
  {
    uint64_t v29 = v4[17];
    if (v4[17]) {
      LOBYTE(v29) = *((unsigned char *)a1 + v29) != 0;
    }
  }
  if (v8 >= 0x23 && v7[17]) {
    LOBYTE(v29) = v29 ^ (*((unsigned char *)a2 + v7[17]) != 0);
  }
  if (v29) {
    return 0;
  }
  int v30 = v5 >= 0x27 && v4[19] ? *((unsigned __int8 *)a1 + v4[19]) : 255;
  int v31 = v8 >= 0x27 && v7[19] ? *((unsigned __int8 *)a2 + v7[19]) : 255;
  if (v30 != v31) {
    return 0;
  }
  if (v5 < 0x29)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    uint64_t v32 = v4[20];
    if (v4[20]) {
      LODWORD(v32) = *(int *)((char *)a1 + v32);
    }
  }
  if (v8 < 0x29)
  {
    LODWORD(v33) = 0;
  }
  else
  {
    uint64_t v33 = v7[20];
    if (v7[20]) {
      LODWORD(v33) = *(int *)((char *)a2 + v33);
    }
  }
  if (v32 != v33) {
    return 0;
  }
  uint64_t v34 = v5 >= 7 && v4[3] ? (int *)((char *)a1 + v4[3] + *(unsigned int *)((char *)a1 + v4[3])) : 0;
  uint64_t v35 = v8 >= 7 && v7[3] ? (int *)((char *)a2 + v7[3] + *(unsigned int *)((char *)a2 + v7[3])) : 0;
  if (!EqualStageInputOutputDescriptor(v34, v35)) {
    return 0;
  }
  unint64_t v36 = v5 >= 0x1F && v4[15] ? (unint64_t)a1 + v4[15] + *(unsigned int *)((char *)a1 + v4[15]) : 0;
  uint64_t v37 = v8 >= 0x1F && v7[15] ? (unsigned int *)((char *)a2 + v7[15] + *(unsigned int *)((char *)a2 + v7[15])) : 0;
  if (!EqualPipelineBuffers(v36, v37)) {
    return 0;
  }
  if (v5 >= 0x2D && v4[22]) {
    BOOL v39 = (const LinkedFunctions *)a1 + v4[22] + *(unsigned int *)((char *)a1 + v4[22]);
  }
  else {
    BOOL v39 = 0;
  }
  if (v8 >= 0x2D && v7[22]) {
    uint64_t v41 = (const LinkedFunctions *)a2 + v7[22] + *(unsigned int *)((char *)a2 + v7[22]);
  }
  else {
    uint64_t v41 = 0;
  }

  return MTLMetalScriptSerializer::EqualLinkedFunctions(v39, v41, v38);
}

uint64_t MTLMetalScriptSerializer::EqualRenderDescriptor(int *a1, int *a2)
{
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v3 = *v2;
  if (v3 >= 9 && v2[4]) {
    BOOL v4 = (int *)((char *)a1 + v2[4] + *(unsigned int *)((char *)a1 + v2[4]));
  }
  else {
    BOOL v4 = 0;
  }
  unsigned int v5 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v6 = *v5;
  if (v6 >= 9 && v5[4]) {
    uint64_t v7 = (int *)((char *)a2 + v5[4] + *(unsigned int *)((char *)a2 + v5[4]));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v3 >= 0xB && (uint64_t v8 = v2[5]) != 0) {
    uint64_t v9 = (int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v6 >= 0xB && v5[5]) {
    uint64_t v10 = (int *)((char *)a2 + v5[5] + *(unsigned int *)((char *)a2 + v5[5]));
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t result = MTLMetalScriptSerializer::EqualFragmentDescriptor(v9, v10);
  if (result)
  {
    return MTLMetalScriptSerializer::EqualVertexShaderDescriptor(v4, v7);
  }
  return result;
}

uint64_t MTLMetalScriptSerializer::EqualMeshRenderDescriptor(int *a1, int *a2)
{
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v3 = *v2;
  if (v3 >= 0xB && v2[5]) {
    BOOL v4 = (int *)((char *)a1 + v2[5] + *(unsigned int *)((char *)a1 + v2[5]));
  }
  else {
    BOOL v4 = 0;
  }
  unsigned int v5 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v6 = *v5;
  if (v6 >= 0xB && v5[5]) {
    uint64_t v7 = (int *)((char *)a2 + v5[5] + *(unsigned int *)((char *)a2 + v5[5]));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v3 >= 0xD && v2[6]) {
    uint64_t v8 = (int *)((char *)a1 + v2[6] + *(unsigned int *)((char *)a1 + v2[6]));
  }
  else {
    uint64_t v8 = 0;
  }
  if (v6 >= 0xD && v5[6]) {
    uint64_t v9 = (int *)((char *)a2 + v5[6] + *(unsigned int *)((char *)a2 + v5[6]));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v3 >= 0xF && (uint64_t v10 = v2[7]) != 0) {
    uint64_t v11 = (int *)((char *)a1 + v10 + *(unsigned int *)((char *)a1 + v10));
  }
  else {
    uint64_t v11 = 0;
  }
  if (v6 >= 0xF && v5[7]) {
    uint64_t v12 = (int *)((char *)a2 + v5[7] + *(unsigned int *)((char *)a2 + v5[7]));
  }
  else {
    uint64_t v12 = 0;
  }
  if (!MTLMetalScriptSerializer::EqualFragmentDescriptor(v11, v12)) {
    return 0;
  }
  uint64_t v13 = (unsigned __int16 *)((char *)v4 - *v4);
  unsigned int v14 = *v13;
  if (v14 >= 0xD && v13[6]) {
    uint64_t v15 = *(void *)((char *)v4 + v13[6]);
  }
  else {
    uint64_t v15 = 1;
  }
  uint64_t v16 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v17 = *v16;
  if (v17 >= 0xD && v16[6]) {
    uint64_t v18 = *(void *)((char *)v7 + v16[6]);
  }
  else {
    uint64_t v18 = 1;
  }
  if (v15 != v18) {
    return 0;
  }
  if (v14 < 0xB)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = v13[5];
    if (v13[5]) {
      uint64_t v19 = *(void *)((char *)v4 + v19);
    }
  }
  if (v17 < 0xB)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = v16[5];
    if (v16[5]) {
      uint64_t v20 = *(void *)((char *)v7 + v20);
    }
  }
  if (v19 != v20) {
    return 0;
  }
  if (v14 < 7)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = v13[3];
    if (v13[3]) {
      uint64_t v21 = *(void *)((char *)v4 + v21);
    }
  }
  if (v17 < 7)
  {
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = v16[3];
    if (v16[3]) {
      uint64_t v22 = *(void *)((char *)v7 + v22);
    }
  }
  if (v21 != v22) {
    return 0;
  }
  uint64_t v23 = v14 >= 0xF && v13[7] ? *(void *)((char *)v4 + v13[7]) : 1;
  uint64_t v24 = v17 >= 0xF && v16[7] ? *(void *)((char *)v7 + v16[7]) : 1;
  if (v23 != v24) {
    return 0;
  }
  if (v14 < 0x1B)
  {
    LOBYTE(v25) = 0;
  }
  else
  {
    uint64_t v25 = v13[13];
    if (v13[13]) {
      LOBYTE(v25) = *((unsigned char *)v4 + v25) != 0;
    }
  }
  if (v17 >= 0x1B && v16[13]) {
    LOBYTE(v25) = v25 ^ (*((unsigned char *)v7 + v16[13]) != 0);
  }
  if (v25) {
    return 0;
  }
  if (v14 < 9)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = v13[4];
    if (v13[4]) {
      uint64_t v26 = *(void *)((char *)v4 + v26);
    }
  }
  if (v17 < 9)
  {
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = v16[4];
    if (v16[4]) {
      uint64_t v27 = *(void *)((char *)v7 + v27);
    }
  }
  if (v26 != v27) {
    return 0;
  }
  if (v14 < 0x17)
  {
    LOBYTE(v28) = 0;
  }
  else
  {
    uint64_t v28 = v13[11];
    if (v13[11]) {
      LOBYTE(v28) = *((unsigned char *)v4 + v28) != 0;
    }
  }
  if (v17 >= 0x17 && v16[11]) {
    LOBYTE(v28) = v28 ^ (*((unsigned char *)v7 + v16[11]) != 0);
  }
  if (v28) {
    return 0;
  }
  if (v14 < 0x15)
  {
    LOBYTE(v29) = 0;
  }
  else
  {
    uint64_t v29 = v13[10];
    if (v13[10]) {
      LOBYTE(v29) = *((unsigned char *)v4 + v29) != 0;
    }
  }
  if (v17 >= 0x15 && v16[10]) {
    LOBYTE(v29) = v29 ^ (*((unsigned char *)v7 + v16[10]) != 0);
  }
  if (v29) {
    return 0;
  }
  if (v14 < 0x19)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    uint64_t v30 = v13[12];
    if (v13[12]) {
      LODWORD(v30) = *((unsigned __int8 *)v4 + v30);
    }
  }
  if (v17 < 0x19)
  {
    LODWORD(v31) = 0;
  }
  else
  {
    uint64_t v31 = v16[12];
    if (v16[12]) {
      LODWORD(v31) = *((unsigned __int8 *)v7 + v31);
    }
  }
  if (v30 != v31) {
    return 0;
  }
  if (v14 < 5)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    uint64_t v32 = v13[2];
    if (v13[2]) {
      LOBYTE(v32) = *((unsigned char *)v4 + v32) != 0;
    }
  }
  if (v17 >= 5 && v16[2]) {
    LOBYTE(v32) = v32 ^ (*((unsigned char *)v7 + v16[2]) != 0);
  }
  if (v32) {
    return 0;
  }
  if (v14 < 0x11)
  {
    LODWORD(v33) = 0;
  }
  else
  {
    uint64_t v33 = v13[8];
    if (v13[8]) {
      LODWORD(v33) = *((unsigned __int8 *)v4 + v33);
    }
  }
  if (v17 < 0x11)
  {
    LODWORD(v34) = 0;
  }
  else
  {
    uint64_t v34 = v16[8];
    if (v16[8]) {
      LODWORD(v34) = *((unsigned __int8 *)v7 + v34);
    }
  }
  if (v33 != v34) {
    return 0;
  }
  unint64_t v35 = v14 >= 0x13 && v13[9] ? (unint64_t)v4 + v13[9] + *(unsigned int *)((char *)v4 + v13[9]) : 0;
  unint64_t v36 = v17 >= 0x13 && v16[9] ? (unsigned int *)((char *)v7 + v16[9] + *(unsigned int *)((char *)v7 + v16[9])) : 0;
  if (!EqualPipelineBuffers(v35, v36)) {
    return 0;
  }
  uint64_t v38 = v14 >= 0x1D && v13[14] ? (const LinkedFunctions *)v4 + v13[14] + *(unsigned int *)((char *)v4 + v13[14]) : 0;
  BOOL v39 = v17 >= 0x1D && v16[14] ? (const LinkedFunctions *)v7 + v16[14] + *(unsigned int *)((char *)v7 + v16[14]) : 0;
  if (!MTLMetalScriptSerializer::EqualLinkedFunctions(v38, v39, v37)) {
    return 0;
  }
  uint64_t v40 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v41 = *v40;
  if (v41 >= 0x1B && v40[13]) {
    int v42 = *((unsigned __int8 *)v8 + v40[13]);
  }
  else {
    int v42 = 255;
  }
  unint64_t v43 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v44 = *v43;
  if (v44 >= 0x1B && v43[13]) {
    int v45 = *((unsigned __int8 *)v9 + v43[13]);
  }
  else {
    int v45 = 255;
  }
  if (v42 != v45) {
    return 0;
  }
  uint64_t v46 = v41 >= 0xB && v40[5] ? *(void *)((char *)v8 + v40[5]) : 1;
  uint64_t v47 = v44 >= 0xB && v43[5] ? *(void *)((char *)v9 + v43[5]) : 1;
  if (v46 != v47) {
    return 0;
  }
  if (v41 < 7)
  {
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = v40[3];
    if (v40[3]) {
      uint64_t v48 = *(void *)((char *)v8 + v48);
    }
  }
  if (v44 < 7)
  {
    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v49 = v43[3];
    if (v43[3]) {
      uint64_t v49 = *(void *)((char *)v9 + v49);
    }
  }
  if (v48 != v49) {
    return 0;
  }
  uint64_t v50 = v41 >= 0xF && v40[7] ? *(void *)((char *)v8 + v40[7]) : 1;
  uint64_t v51 = v44 >= 0xF && v43[7] ? *(void *)((char *)v9 + v43[7]) : 1;
  if (v50 != v51) {
    return 0;
  }
  if (v41 < 0x1D)
  {
    LOBYTE(v52) = 0;
  }
  else
  {
    uint64_t v52 = v40[14];
    if (v40[14]) {
      LOBYTE(v52) = *((unsigned char *)v8 + v52) != 0;
    }
  }
  if (v44 >= 0x1D && v43[14]) {
    LOBYTE(v52) = v52 ^ (*((unsigned char *)v9 + v43[14]) != 0);
  }
  if (v52) {
    return 0;
  }
  if (v41 < 9)
  {
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v53 = v40[4];
    if (v40[4]) {
      uint64_t v53 = *(void *)((char *)v8 + v53);
    }
  }
  if (v44 < 9)
  {
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v54 = v43[4];
    if (v43[4]) {
      uint64_t v54 = *(void *)((char *)v9 + v54);
    }
  }
  if (v53 != v54) {
    return 0;
  }
  BOOL v55 = v41 < 0xD || !v40[6] || *((unsigned __int8 *)v8 + v40[6]) != 0;
  if (v44 >= 0xD && v43[6])
  {
    if ((v55 ^ (*((unsigned char *)v9 + v43[6]) != 0))) {
      return 0;
    }
  }
  else if (!v55)
  {
    return 0;
  }
  if (v41 < 0x17)
  {
    LOBYTE(v56) = 0;
  }
  else
  {
    uint64_t v56 = v40[11];
    if (v40[11]) {
      LOBYTE(v56) = *((unsigned char *)v8 + v56) != 0;
    }
  }
  if (v44 >= 0x17 && v43[11]) {
    LOBYTE(v56) = v56 ^ (*((unsigned char *)v9 + v43[11]) != 0);
  }
  if (v56) {
    return 0;
  }
  if (v41 < 0x15)
  {
    LOBYTE(v57) = 0;
  }
  else
  {
    uint64_t v57 = v40[10];
    if (v40[10]) {
      LOBYTE(v57) = *((unsigned char *)v8 + v57) != 0;
    }
  }
  if (v44 >= 0x15 && v43[10]) {
    LOBYTE(v57) = v57 ^ (*((unsigned char *)v9 + v43[10]) != 0);
  }
  if (v57) {
    return 0;
  }
  if (v41 < 0x19)
  {
    LODWORD(v58) = 0;
  }
  else
  {
    uint64_t v58 = v40[12];
    if (v40[12]) {
      LODWORD(v58) = *((unsigned __int8 *)v8 + v58);
    }
  }
  if (v44 < 0x19)
  {
    LODWORD(v59) = 0;
  }
  else
  {
    uint64_t v59 = v43[12];
    if (v43[12]) {
      LODWORD(v59) = *((unsigned __int8 *)v9 + v59);
    }
  }
  if (v58 != v59) {
    return 0;
  }
  if (v41 < 5)
  {
    LOBYTE(v60) = 0;
  }
  else
  {
    uint64_t v60 = v40[2];
    if (v40[2]) {
      LOBYTE(v60) = *((unsigned char *)v8 + v60) != 0;
    }
  }
  if (v44 >= 5 && v43[2]) {
    LOBYTE(v60) = v60 ^ (*((unsigned char *)v9 + v43[2]) != 0);
  }
  if (v60) {
    return 0;
  }
  if (v41 < 0x11)
  {
    LODWORD(v61) = 0;
  }
  else
  {
    uint64_t v61 = v40[8];
    if (v40[8]) {
      LODWORD(v61) = *((unsigned __int8 *)v8 + v61);
    }
  }
  if (v44 < 0x11)
  {
    LODWORD(v62) = 0;
  }
  else
  {
    uint64_t v62 = v43[8];
    if (v43[8]) {
      LODWORD(v62) = *((unsigned __int8 *)v9 + v62);
    }
  }
  if (v61 != v62) {
    return 0;
  }
  unint64_t v63 = v41 >= 0x13 && v40[9] ? (unint64_t)v8 + v40[9] + *(unsigned int *)((char *)v8 + v40[9]) : 0;
  uint64_t v64 = v44 >= 0x13 && v43[9] ? (unsigned int *)((char *)v9 + v43[9] + *(unsigned int *)((char *)v9 + v43[9])) : 0;
  if (!EqualPipelineBuffers(v63, v64)) {
    return 0;
  }
  if (v41 >= 0x1F && v40[15]) {
    uint64_t v66 = (const LinkedFunctions *)v8 + v40[15] + *(unsigned int *)((char *)v8 + v40[15]);
  }
  else {
    uint64_t v66 = 0;
  }
  if (v44 >= 0x1F && v43[15]) {
    uint64_t v68 = (const LinkedFunctions *)v9 + v43[15] + *(unsigned int *)((char *)v9 + v43[15]);
  }
  else {
    uint64_t v68 = 0;
  }

  return MTLMetalScriptSerializer::EqualLinkedFunctions(v66, v68, v65);
}

uint64_t MTLMetalScriptSerializer::EqualTileRenderDescriptor(int *a1, int *a2)
{
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 7u && (uint64_t v3 = v2[3]) != 0) {
    BOOL v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
  }
  else {
    BOOL v4 = 0;
  }
  unsigned int v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 7u && (uint64_t v6 = v5[3]) != 0) {
    uint64_t v7 = (int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (unsigned __int16 *)((char *)v4 - *v4);
  unsigned int v9 = *v8;
  if (v9 >= 9 && v8[4]) {
    uint64_t v10 = *(void *)((char *)v4 + v8[4]);
  }
  else {
    uint64_t v10 = 1;
  }
  uint64_t v11 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v12 = *v11;
  if (v12 >= 9 && v11[4]) {
    uint64_t v13 = *(void *)((char *)v7 + v11[4]);
  }
  else {
    uint64_t v13 = 1;
  }
  if (v10 != v13) {
    return 0;
  }
  if (v9 < 0x13)
  {
    LOBYTE(v14) = 0;
  }
  else
  {
    uint64_t v14 = v8[9];
    if (v8[9]) {
      LOBYTE(v14) = *((unsigned char *)v4 + v14) != 0;
    }
  }
  if (v12 >= 0x13 && v11[9]) {
    LOBYTE(v14) = v14 ^ (*((unsigned char *)v7 + v11[9]) != 0);
  }
  if (v14) {
    return 0;
  }
  uint64_t v15 = v9 >= 0xB && v8[5] ? *(void *)((char *)v4 + v8[5]) : 1;
  uint64_t v16 = v12 >= 0xB && v11[5] ? *(void *)((char *)v7 + v11[5]) : 1;
  if (v15 != v16) {
    return 0;
  }
  if (v9 < 0xD)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = v8[6];
    if (v8[6]) {
      uint64_t v17 = *(void *)((char *)v4 + v17);
    }
  }
  if (v12 < 0xD)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = v11[6];
    if (v11[6]) {
      uint64_t v18 = *(void *)((char *)v7 + v18);
    }
  }
  if (v17 != v18) {
    return 0;
  }
  if (v9 < 7)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = v8[3];
    if (v8[3]) {
      uint64_t v19 = *(void *)((char *)v4 + v19);
    }
  }
  if (v12 < 7)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = v11[3];
    if (v11[3]) {
      uint64_t v20 = *(void *)((char *)v7 + v20);
    }
  }
  if (v19 != v20) {
    return 0;
  }
  if (v9 < 5)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v8[2];
    if (v8[2]) {
      LOBYTE(v21) = *((unsigned char *)v4 + v21) != 0;
    }
  }
  if (v12 >= 5 && v11[2]) {
    LOBYTE(v21) = v21 ^ (*((unsigned char *)v7 + v11[2]) != 0);
  }
  if (v21) {
    return 0;
  }
  if (v9 < 0x15)
  {
    LODWORD(v22) = 0;
  }
  else
  {
    uint64_t v22 = v8[10];
    if (v8[10]) {
      LODWORD(v22) = *((unsigned __int8 *)v4 + v22);
    }
  }
  if (v12 < 0x15)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    uint64_t v23 = v11[10];
    if (v11[10]) {
      LODWORD(v23) = *((unsigned __int8 *)v7 + v23);
    }
  }
  if (v22 != v23) {
    return 0;
  }
  unint64_t v24 = v9 >= 0xF && v8[7] ? (unint64_t)v4 + v8[7] + *(unsigned int *)((char *)v4 + v8[7]) : 0;
  uint64_t v25 = v12 >= 0xF && v11[7] ? (unsigned int *)((char *)v7 + v11[7] + *(unsigned int *)((char *)v7 + v11[7])) : 0;
  if (!EqualTileAttachments(v24, v25)) {
    return 0;
  }
  unint64_t v26 = v9 >= 0x11 && v8[8] ? (unint64_t)v4 + v8[8] + *(unsigned int *)((char *)v4 + v8[8]) : 0;
  uint64_t v27 = v12 >= 0x11 && v11[8] ? (unsigned int *)((char *)v7 + v11[8] + *(unsigned int *)((char *)v7 + v11[8])) : 0;
  if (!EqualPipelineBuffers(v26, v27)) {
    return 0;
  }
  if (v9 >= 0x17 && v8[11]) {
    uint64_t v29 = (const LinkedFunctions *)v4 + v8[11] + *(unsigned int *)((char *)v4 + v8[11]);
  }
  else {
    uint64_t v29 = 0;
  }
  if (v12 >= 0x17 && v11[11]) {
    uint64_t v31 = (const LinkedFunctions *)v7 + v11[11] + *(unsigned int *)((char *)v7 + v11[11]);
  }
  else {
    uint64_t v31 = 0;
  }

  return MTLMetalScriptSerializer::EqualLinkedFunctions(v29, v31, v28);
}

uint64_t EqualTileAttachments(unint64_t a1, unsigned int *a2)
{
  if (!(a1 | (unint64_t)a2)) {
    return 1;
  }
  if (a1)
  {
    LODWORD(v2) = *(_DWORD *)a1;
    if (a2)
    {
LABEL_4:
      unsigned int v3 = *a2;
      goto LABEL_7;
    }
  }
  else
  {
    LODWORD(v2) = 0;
    if (a2) {
      goto LABEL_4;
    }
  }
  unsigned int v3 = 0;
LABEL_7:
  if (v2 <= v3) {
    uint64_t v2 = v3;
  }
  else {
    uint64_t v2 = v2;
  }
  if (v2)
  {
    BOOL v4 = (unsigned int *)(a1 + 4);
    unsigned int v5 = a2 + 1;
    uint64_t v6 = v2 - 1;
    while (1)
    {
      if (a1)
      {
        uint64_t v7 = (int *)((char *)v4 + *v4);
        if (a2) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v7 = 0;
        if (a2)
        {
LABEL_14:
          uint64_t v8 = (int *)((char *)v5 + *v5);
          if (v7) {
            goto LABEL_18;
          }
          goto LABEL_22;
        }
      }
      uint64_t v8 = 0;
      if (v7)
      {
LABEL_18:
        unsigned int v9 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0) {
          LODWORD(v7) = *(unsigned __int16 *)((char *)v7 + v10);
        }
        else {
          LODWORD(v7) = 0;
        }
      }
LABEL_22:
      if (v8)
      {
        uint64_t v11 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0) {
          LODWORD(v8) = *(unsigned __int16 *)((char *)v8 + v12);
        }
        else {
          LODWORD(v8) = 0;
        }
      }
      BOOL v14 = v6-- != 0;
      BOOL v15 = v7 == v8;
      BOOL v16 = v7 == v8;
      if (v15)
      {
        ++v4;
        ++v5;
        if (v14) {
          continue;
        }
      }
      return v16;
    }
  }
  return 1;
}

uint64_t MTLMetalScriptSerializer::addVertexDescriptor(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, MTLVertexDescriptor *a3, BOOL *a4)
{
  LOBYTE(a3->super.isa) = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  do
  {
    unsigned int v9 = *(void **)(*((void *)a2 + 1) + 8 + v6);
    if (!v9)
    {
      ++v8;
LABEL_13:
      unint64_t v12 = v7;
      goto LABEL_14;
    }
    if (v9[1]) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v9[3] == 1;
    }
    BOOL v11 = v10 && v9[2] == 1;
    unint64_t v12 = ++v8;
    if (v11) {
      goto LABEL_13;
    }
LABEL_14:
    v6 += 8;
    unint64_t v7 = v12;
  }
  while (v6 != 248);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    BOOL v16 = *(void **)(*((void *)a2 + 2) + 8 + v13);
    if (v16)
    {
      unint64_t v17 = ++v14;
      if (v16[2] | v16[1] | v16[3]) {
        goto LABEL_21;
      }
    }
    else
    {
      ++v14;
    }
    unint64_t v17 = v15;
LABEL_21:
    v13 += 8;
    unint64_t v15 = v17;
  }
  while (v13 != 248);
  if (!(v12 | v17)) {
    return 0;
  }
  if (!v12)
  {
    int v41 = 0;
    if (v17) {
      goto LABEL_52;
    }
    goto LABEL_80;
  }
  std::match_results<const char *> __p = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v12);
  uint64_t v19 = 0;
  uint64_t v20 = a2;
  do
  {
    uint64_t v21 = *(void **)(*((void *)v20 + 1) + 8 + 8 * v19);
    if (v21)
    {
      uint64_t v22 = v21[2];
      uint64_t v23 = v21[3];
      uint64_t v24 = v21[1];
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v23 = 1;
      LOBYTE(v22) = 1;
    }
    LOBYTE(a3->super.isa) |= (v24 & 3) != 0;
    *((unsigned char *)this + 70) = 1;
    int v25 = *((_DWORD *)this + 8);
    int v26 = *((_DWORD *)this + 12);
    int v27 = *((_DWORD *)this + 10);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 4, v22, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(this, 6, v23, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(this, 8, v24, 0);
    int v28 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v25 - (unsigned __int16)v26 + v27);
    uint64_t v20 = a2;
    int v29 = v28;
    uint64_t v30 = v68;
    if (v68 >= v69)
    {
      uint64_t v32 = (char *)__p;
      uint64_t v33 = (v68 - (unsigned char *)__p) >> 2;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v69 - (unsigned char *)__p;
      if ((v69 - (unsigned char *)__p) >> 1 > v34) {
        unint64_t v34 = v35 >> 1;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v69, v36);
        uint64_t v32 = (char *)__p;
        uint64_t v30 = v68;
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v38 = &v37[4 * v33];
      *(_DWORD *)uint64_t v38 = v29;
      uint64_t v31 = v38 + 4;
      while (v30 != v32)
      {
        int v39 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v38 - 1) = v39;
        v38 -= 4;
      }
      std::match_results<const char *> __p = v38;
      uint64_t v68 = v31;
      uint64_t v69 = &v37[4 * v36];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v68 = v28;
      uint64_t v31 = v30 + 4;
    }
    uint64_t v68 = v31;
    ++v19;
  }
  while (v19 != v12);
  if (v31 == __p) {
    uint64_t v40 = &flatbuffers::data<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>> const&)::t;
  }
  else {
    uint64_t v40 = __p;
  }
  int v41 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v40, (v31 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v68 = (char *)__p;
    operator delete(__p);
  }
  if (!v17)
  {
LABEL_80:
    int v63 = 0;
    goto LABEL_81;
  }
LABEL_52:
  std::match_results<const char *> __p = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v17);
  uint64_t v42 = 0;
  int v65 = v41;
  do
  {
    uint64_t v43 = *(void *)(*((void *)a2 + 2) + 8 + 8 * v42);
    if (v43)
    {
      uint64_t v44 = *(void *)(v43 + 8);
      uint64_t v45 = *(void *)(v43 + 16);
      int v46 = *(_DWORD *)(v43 + 24);
    }
    else
    {
      uint64_t v45 = 0;
      LOBYTE(v44) = 0;
      int v46 = 0;
    }
    *((unsigned char *)this + 70) = 1;
    int v47 = *((_DWORD *)this + 8);
    int v48 = *((_DWORD *)this + 12);
    int v49 = *((_DWORD *)this + 10);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 4, v44, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(this, 6, v45, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 8, v46, 0);
    int v50 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v47 - (unsigned __int16)v48 + v49);
    int v51 = v50;
    uint64_t v52 = v68;
    if (v68 >= v69)
    {
      uint64_t v54 = (char *)__p;
      uint64_t v55 = (v68 - (unsigned char *)__p) >> 2;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v57 = v69 - (unsigned char *)__p;
      if ((v69 - (unsigned char *)__p) >> 1 > v56) {
        unint64_t v56 = v57 >> 1;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      if (v58)
      {
        uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v69, v58);
        uint64_t v54 = (char *)__p;
        uint64_t v52 = v68;
      }
      else
      {
        uint64_t v59 = 0;
      }
      uint64_t v60 = &v59[4 * v55];
      *(_DWORD *)uint64_t v60 = v51;
      uint64_t v53 = v60 + 4;
      while (v52 != v54)
      {
        int v61 = *((_DWORD *)v52 - 1);
        v52 -= 4;
        *((_DWORD *)v60 - 1) = v61;
        v60 -= 4;
      }
      std::match_results<const char *> __p = v60;
      uint64_t v68 = v53;
      uint64_t v69 = &v59[4 * v58];
      if (v54) {
        operator delete(v54);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v68 = v50;
      uint64_t v53 = v52 + 4;
    }
    uint64_t v68 = v53;
    ++v42;
  }
  while (v42 != v17);
  if (v53 == __p) {
    uint64_t v62 = &flatbuffers::data<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>> const&)::t;
  }
  else {
    uint64_t v62 = __p;
  }
  int v63 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v62, (v53 - (unsigned char *)__p) >> 2);
  int v41 = v65;
  if (__p)
  {
    uint64_t v68 = (char *)__p;
    operator delete(__p);
  }
LABEL_81:
  *((unsigned char *)this + 70) = 1;
  int v64 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v41);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 4, v63);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v64);
}

void sub_1827F5BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(void **a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unsigned int v9 = &v6[4 * v8];
    BOOL v10 = (char *)*a1;
    BOOL v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t MTLMetalScriptSerializer::addColorAttachmentsDescriptor(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, MTLRenderPipelineColorAttachmentDescriptorArray *a3, unsigned int *a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = *(void *)((char *)a2 + v7 + 8);
    if (!v10)
    {
      ++v9;
LABEL_7:
      unint64_t v11 = v8;
      goto LABEL_8;
    }
    unint64_t v11 = ++v9;
    if ((*(void *)(v10 + 8) & 0xFFFFFFF07FFFFFFFLL) == 0x78001080) {
      goto LABEL_7;
    }
LABEL_8:
    v7 += 8;
    unint64_t v8 = v11;
  }
  while (v7 != 64);
  if (!v11) {
    return 0;
  }
  std::match_results<const char *> __p = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v11);
  for (uint64_t i = 0; i != v11; ++i)
  {
    uint64_t v13 = *((void *)a2 + i + 1);
    if (v13) {
      uint64_t v14 = (uint64_t *)(v13 + 8);
    }
    else {
      uint64_t v14 = &_MTLDefaultRenderPipelineAttachmentPrivate;
    }
    *((unsigned char *)this + 70) = 1;
    int v15 = *((_DWORD *)this + 8);
    int v16 = *((_DWORD *)this + 12);
    int v17 = *((_DWORD *)this + 10);
    unint64_t v18 = *v14;
    flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(this, 4, (unsigned __int16)((unint64_t)*v14 >> 36), 0);
    unint64_t v19 = v18 >> 36;
    if ((int)(v18 >> 36) > 115)
    {
      switch((int)v19)
      {
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 507:
        case 520:
        case 521:
        case 522:
        case 523:
        case 524:
        case 525:
        case 526:
        case 527:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 545:
        case 550:
        case 551:
        case 562:
          goto LABEL_30;
        case 508:
        case 509:
        case 510:
        case 528:
        case 529:
        case 530:
        case 546:
        case 547:
        case 548:
        case 567:
        case 568:
        case 569:
        case 580:
        case 581:
        case 582:
        case 583:
        case 584:
        case 585:
        case 586:
        case 587:
        case 588:
        case 589:
        case 600:
        case 601:
        case 602:
        case 628:
        case 629:
          int isa = (int)a3->super.isa;
          int v21 = (uint64_t)a3->super.isa & 0x60000000 | 7;
          BOOL v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFF) >= 7;
          goto LABEL_31;
        case 511:
        case 512:
        case 513:
        case 514:
        case 515:
        case 516:
        case 517:
        case 518:
        case 519:
        case 531:
        case 532:
        case 533:
        case 534:
        case 535:
        case 536:
        case 537:
        case 538:
        case 539:
        case 549:
        case 556:
        case 557:
        case 558:
        case 559:
        case 561:
        case 614:
          goto LABEL_35;
        case 552:
        case 553:
        case 554:
        case 555:
          int isa = (int)a3->super.isa;
          int v23 = (uint64_t)a3->super.isa & 0x60000000 | 2;
          BOOL v24 = ((uint64_t)a3->super.isa & 0x1FFFFFFE) == 0;
          goto LABEL_58;
        case 560:
          int isa = (int)a3->super.isa;
          int v23 = (uint64_t)a3->super.isa & 0x60000000 | 4;
          BOOL v24 = ((uint64_t)a3->super.isa & 0x1FFFFFFC) == 0;
          goto LABEL_58;
        case 563:
        case 564:
        case 565:
        case 566:
        case 570:
        case 571:
        case 572:
        case 573:
        case 574:
        case 575:
        case 590:
        case 591:
        case 592:
        case 593:
        case 594:
        case 595:
        case 596:
        case 597:
        case 598:
        case 599:
        case 603:
        case 604:
        case 605:
        case 606:
          int isa = (int)a3->super.isa;
          int v21 = (uint64_t)a3->super.isa & 0x60000000 | 6;
          BOOL v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFE) >= 6;
          goto LABEL_31;
        case 576:
        case 577:
        case 578:
        case 579:
          int isa = (int)a3->super.isa;
          int v21 = (uint64_t)a3->super.isa & 0x60000000 | 5;
          BOOL v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFF) >= 5;
          goto LABEL_31;
        case 607:
        case 608:
        case 609:
        case 610:
        case 611:
        case 612:
        case 613:
        case 615:
        case 616:
        case 617:
        case 618:
        case 619:
        case 620:
        case 621:
        case 622:
        case 623:
        case 624:
        case 625:
        case 626:
        case 627:
          int isa = (int)a3->super.isa;
          int v21 = (uint64_t)a3->super.isa & 0x60000000 | 9;
          BOOL v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFF) >= 9;
          goto LABEL_31;
        case 630:
        case 631:
        case 632:
        case 633:
        case 634:
        case 635:
        case 636:
        case 637:
        case 638:
        case 639:
        case 640:
        case 641:
        case 642:
        case 643:
        case 644:
        case 645:
          int isa = (int)a3->super.isa;
          int v21 = (uint64_t)a3->super.isa & 0x60000000 | 0xA;
          BOOL v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFE) >= 0xA;
          goto LABEL_31;
        default:
          if (v19 == 116) {
            goto LABEL_56;
          }
          if (v19 != 302) {
            goto LABEL_35;
          }
          unsigned int v25 = LODWORD(a3->super.isa) | 0x60000000;
          break;
      }
      goto LABEL_34;
    }
    if (v19 <= 0x2C)
    {
      if (((1 << v19) & 0x1F0080000800) != 0) {
        goto LABEL_22;
      }
      if (v19 == 1)
      {
LABEL_30:
        int isa = (int)a3->super.isa;
        int v21 = (uint64_t)a3->super.isa & 0x60000000 | 3;
        BOOL v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFF) >= 3;
LABEL_31:
        if (!v22) {
          int isa = v21;
        }
LABEL_33:
        unsigned int v25 = isa | 0x80000000;
LABEL_34:
        LODWORD(a3->super.isa) = v25;
        goto LABEL_35;
      }
      if (v19 == 26) {
        goto LABEL_56;
      }
    }
    if (v19 == 66)
    {
LABEL_56:
      int isa = (int)a3->super.isa;
      int v23 = (uint64_t)a3->super.isa & 0x60000000 | 8;
      BOOL v24 = ((uint64_t)a3->super.isa & 0x1FFFFFF8) == 0;
LABEL_58:
      if (v24) {
        int isa = v23;
      }
      goto LABEL_33;
    }
    if (v19 == 93)
    {
LABEL_22:
      int isa = (int)a3->super.isa;
      int v23 = (uint64_t)a3->super.isa & 0x60000000 | 1;
      BOOL v24 = ((uint64_t)a3->super.isa & 0x1FFFFFFF) == 0;
      goto LABEL_58;
    }
LABEL_35:
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 6, (*(_DWORD *)v14 >> 27) & 0xF, 15);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 8, *(_DWORD *)v14 & 1, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 10, (*(unsigned __int8 *)v14 >> 4) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 12, (*(unsigned __int8 *)v14 >> 1) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 14, (*(_DWORD *)v14 >> 22) & 0x1F, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 16, (*(_DWORD *)v14 >> 17) & 0x1F, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 18, (*(_DWORD *)v14 >> 12) & 0x1F, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 20, (*(_DWORD *)v14 >> 7) & 0x1F, 1);
    int v26 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v15 - (unsigned __int16)v16 + v17);
    int v27 = v26;
    int v28 = v42;
    if (v42 >= v43)
    {
      uint64_t v30 = (char *)__p;
      uint64_t v31 = (v42 - (unsigned char *)__p) >> 2;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = v43 - (unsigned char *)__p;
      if ((v43 - (unsigned char *)__p) >> 1 > v32) {
        unint64_t v32 = v33 >> 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v43, v34);
        uint64_t v30 = (char *)__p;
        int v28 = v42;
      }
      else
      {
        uint64_t v35 = 0;
      }
      unint64_t v36 = &v35[4 * v31];
      *(_DWORD *)unint64_t v36 = v27;
      int v29 = v36 + 4;
      while (v28 != v30)
      {
        int v37 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *((_DWORD *)v36 - 1) = v37;
        v36 -= 4;
      }
      std::match_results<const char *> __p = v36;
      uint64_t v42 = v29;
      uint64_t v43 = &v35[4 * v34];
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v42 = v26;
      int v29 = v28 + 4;
    }
    uint64_t v42 = v29;
  }
  if (v29 == __p) {
    int v39 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>> const&)::t;
  }
  else {
    int v39 = __p;
  }
  uint64_t v38 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v39, (v29 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v42 = (char *)__p;
    operator delete(__p);
  }
  return v38;
}

void sub_1827F6160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::addTileColorAttachmentsDescriptor(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, MTLTileRenderPipelineColorAttachmentDescriptorArray *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = *(void *)((char *)a2 + v5 + 8);
    if (v8)
    {
      unint64_t v9 = ++v7;
      if (*(_DWORD *)(v8 + 8)) {
        goto LABEL_8;
      }
    }
    else
    {
      ++v7;
    }
    unint64_t v9 = v6;
LABEL_8:
    v5 += 8;
    unint64_t v6 = v9;
  }
  while (v5 != 64);
  if (!v9) {
    return 0;
  }
  std::match_results<const char *> __p = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v9);
  for (uint64_t i = 0; i != v9; ++i)
  {
    uint64_t v11 = *((void *)a2 + i + 1);
    if (v11) {
      LODWORD(v11) = *(_DWORD *)(v11 + 8);
    }
    *((unsigned char *)this + 70) = 1;
    uint64_t v12 = *((void *)this + 5);
    uint64_t v13 = *((void *)this + 6);
    uint64_t v14 = *((void *)this + 4);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(this, 4, (unsigned __int16)v11, 0);
    int v15 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
    int v16 = v15;
    int v17 = v31;
    if (v31 >= v32)
    {
      unint64_t v19 = (char *)__p;
      uint64_t v20 = (v31 - (unsigned char *)__p) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v32 - (unsigned char *)__p;
      if ((v32 - (unsigned char *)__p) >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        BOOL v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v32, v23);
        unint64_t v19 = (char *)__p;
        int v17 = v31;
      }
      else
      {
        BOOL v24 = 0;
      }
      unsigned int v25 = &v24[4 * v20];
      *(_DWORD *)unsigned int v25 = v16;
      unint64_t v18 = v25 + 4;
      while (v17 != v19)
      {
        int v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      std::match_results<const char *> __p = v25;
      uint64_t v31 = v18;
      unint64_t v32 = &v24[4 * v23];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v31 = v15;
      unint64_t v18 = v17 + 4;
    }
    uint64_t v31 = v18;
  }
  if (v18 == __p) {
    int v27 = &flatbuffers::data<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>> const&)::t;
  }
  else {
    int v27 = __p;
  }
  uint64_t v28 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v27, (v18 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v31 = (char *)__p;
    operator delete(__p);
  }
  return v28;
}

void sub_1827F65F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::buildStitchingGraphFromDescriptor(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v48[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (void *)[a3 functions];
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v48, a4);
  uint64_t v39 = a2;
  int FunctionArray = MTLMetalScriptSerializer::createFunctionArray((flatbuffers::FlatBufferBuilder *)a1, v8, (uint64_t)v48);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v48);
  std::match_results<const char *> __p = 0;
  uint64_t v45 = 0;
  int v46 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  unint64_t v9 = (void *)[a3 functionGraphs];
  uint64_t v11 = [v9 countByEnumeratingWithState:&v40 objects:v47 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v41;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v41 != v12) {
          objc_enumerationMutation(v9);
        }
        int Graph = MTLMetalScriptSerializer::createGraph((MTLMetalScriptSerializer *)a1, *(MTLFunctionStitchingGraph **)(*((void *)&v40 + 1) + 8 * i), v10);
        int v15 = Graph;
        int v16 = v45;
        if (v45 >= v46)
        {
          unint64_t v18 = (char *)__p;
          uint64_t v19 = (v45 - (unsigned char *)__p) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = v46 - (unsigned char *)__p;
          if ((v46 - (unsigned char *)__p) >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v46, v22);
            unint64_t v18 = (char *)__p;
            int v16 = v45;
          }
          else
          {
            unint64_t v23 = 0;
          }
          BOOL v24 = &v23[4 * v19];
          *(_DWORD *)BOOL v24 = v15;
          int v17 = v24 + 4;
          while (v16 != v18)
          {
            int v25 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
          std::match_results<const char *> __p = v24;
          uint64_t v45 = v17;
          int v46 = &v23[4 * v22];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v45 = Graph;
          int v17 = v16 + 4;
        }
        uint64_t v45 = v17;
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v40 objects:v47 count:16];
    }
    while (v11);
  }
  if (v45 == __p) {
    int v26 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Graph>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>> const&)::t;
  }
  else {
    int v26 = __p;
  }
  int v27 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v26, (v45 - (unsigned char *)__p) >> 2);
  int v28 = *(char *)(v39 + 23);
  if (v28 >= 0) {
    int v29 = (const char *)v39;
  }
  else {
    int v29 = *(const char **)v39;
  }
  if (v28 >= 0) {
    unint64_t v30 = *(unsigned __int8 *)(v39 + 23);
  }
  else {
    unint64_t v30 = *(void *)(v39 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, v29, v30);
  int v32 = v27;
  *(unsigned char *)(a1 + 70) = 1;
  int v33 = *(_DWORD *)(a1 + 32);
  int v34 = *(_DWORD *)(a1 + 48);
  int v35 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 8, v32);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, FunctionArray);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, String);
  uint64_t v36 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v33 - (unsigned __int16)v34 + v35);
  if (__p)
  {
    uint64_t v45 = (char *)__p;
    operator delete(__p);
  }
  return v36;
}

void sub_1827F68DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::createFunctionArray(flatbuffers::FlatBufferBuilder *a1, void *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v34 = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v6 = [a2 countByEnumeratingWithState:&v30 objects:v37 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v31 != v7) {
          objc_enumerationMutation(a2);
        }
        std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(a3, *(void *)(*((void *)&v30 + 1) + 8 * i));
        if ((v29 & 0x80u) == 0) {
          unint64_t v9 = __p;
        }
        else {
          unint64_t v9 = (void **)__p[0];
        }
        if ((v29 & 0x80u) == 0) {
          unint64_t v10 = v29;
        }
        else {
          unint64_t v10 = (unint64_t)__p[1];
        }
        int String = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v9, v10);
        if ((char)v29 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v12 = v35;
        if (v35 >= v36)
        {
          uint64_t v14 = (char *)v34;
          uint64_t v15 = (v35 - (unsigned char *)v34) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v36 - (unsigned char *)v34;
          if ((v36 - (unsigned char *)v34) >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v36, v18);
            uint64_t v14 = (char *)v34;
            uint64_t v12 = v35;
          }
          else
          {
            uint64_t v19 = 0;
          }
          unint64_t v20 = &v19[4 * v15];
          *(_DWORD *)unint64_t v20 = String;
          uint64_t v13 = v20 + 4;
          while (v12 != v14)
          {
            int v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          int v34 = v20;
          int v35 = v13;
          uint64_t v36 = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)int v35 = String;
          uint64_t v13 = v12 + 4;
        }
        int v35 = v13;
      }
      uint64_t v6 = [a2 countByEnumeratingWithState:&v30 objects:v37 count:16];
    }
    while (v6);
    unint64_t v22 = v34;
    unint64_t v23 = v35;
  }
  else
  {
    unint64_t v23 = 0;
    unint64_t v22 = 0;
  }
  uint64_t v24 = v23 - v22;
  if (v24) {
    int v25 = v22;
  }
  else {
    int v25 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  uint64_t v26 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v25, v24 >> 2);
  if (v34)
  {
    int v35 = (char *)v34;
    operator delete(v34);
  }
  return v26;
}

void sub_1827F6B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1827F6B9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1827F6B84);
}

uint64_t MTLMetalScriptSerializer::createGraph(MTLMetalScriptSerializer *this, MTLFunctionStitchingGraph *a2, MTLFunctionStitchingGraph *a3)
{
  uint64_t v326 = *MEMORY[0x1E4F143B8];
  reorderStitchingGraphNodes(a2, (uint64_t)&v319);
  v316 = 0;
  v317 = 0;
  v318 = 0;
  BOOL v4 = (id *)v319;
  v286 = v320;
  if (v319 != v320)
  {
    do
    {
      v288 = v4;
      id v5 = *v4;
      if ([*v4 isMemberOfClass:objc_opt_class()])
      {
        v313 = 0;
        v314 = 0;
        v315 = 0;
        v310 = 0;
        v311 = 0;
        v312 = 0;
        long long v306 = 0u;
        long long v307 = 0u;
        long long v308 = 0u;
        long long v309 = 0u;
        v287 = v5;
        uint64_t v6 = (void *)[v5 arguments];
        uint64_t v7 = [v6 countByEnumeratingWithState:&v306 objects:v325 count:16];
        if (v7)
        {
          uint64_t v8 = *(void *)v307;
          do
          {
            for (uint64_t i = 0; i != v7; ++i)
            {
              if (*(void *)v307 != v8) {
                objc_enumerationMutation(v6);
              }
              uint64_t v305 = *(void *)(*((void *)&v306 + 1) + 8 * i);
              __p[0] = &v305;
              int v10 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, &v305, (uint64_t)&std::piecewise_construct, (void **)__p)+ 6);
              uint64_t v11 = v314;
              if (v314 >= v315)
              {
                uint64_t v13 = (char *)v313;
                uint64_t v14 = (v314 - (unsigned char *)v313) >> 2;
                unint64_t v15 = v14 + 1;
                if ((unint64_t)(v14 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v16 = v315 - (unsigned char *)v313;
                if ((v315 - (unsigned char *)v313) >> 1 > v15) {
                  unint64_t v15 = v16 >> 1;
                }
                if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v17 = v15;
                }
                if (v17)
                {
                  unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v17);
                  uint64_t v13 = (char *)v313;
                  uint64_t v11 = v314;
                }
                else
                {
                  unint64_t v18 = 0;
                }
                uint64_t v19 = &v18[4 * v14];
                *(_DWORD *)uint64_t v19 = v10;
                uint64_t v12 = v19 + 4;
                while (v11 != v13)
                {
                  int v20 = *((_DWORD *)v11 - 1);
                  v11 -= 4;
                  *((_DWORD *)v19 - 1) = v20;
                  v19 -= 4;
                }
                v313 = v19;
                v314 = v12;
                v315 = &v18[4 * v17];
                if (v13) {
                  operator delete(v13);
                }
              }
              else
              {
                *(_DWORD *)v314 = v10;
                uint64_t v12 = v11 + 4;
              }
              v314 = v12;
            }
            uint64_t v7 = [v6 countByEnumeratingWithState:&v306 objects:v325 count:16];
          }
          while (v7);
        }
        long long v303 = 0u;
        long long v304 = 0u;
        long long v301 = 0u;
        long long v302 = 0u;
        int v21 = (void *)[v287 controlDependencies];
        uint64_t v22 = [v21 countByEnumeratingWithState:&v301 objects:v324 count:16];
        if (v22)
        {
          uint64_t v23 = *(void *)v302;
          do
          {
            for (uint64_t j = 0; j != v22; ++j)
            {
              if (*(void *)v302 != v23) {
                objc_enumerationMutation(v21);
              }
              uint64_t v305 = *(void *)(*((void *)&v301 + 1) + 8 * j);
              __p[0] = &v305;
              int v25 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, &v305, (uint64_t)&std::piecewise_construct, (void **)__p)+ 6);
              uint64_t v26 = v311;
              if (v311 >= v312)
              {
                int v28 = (char *)v310;
                uint64_t v29 = (v311 - (unsigned char *)v310) >> 2;
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v31 = v312 - (unsigned char *)v310;
                if ((v312 - (unsigned char *)v310) >> 1 > v30) {
                  unint64_t v30 = v31 >> 1;
                }
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v32 = v30;
                }
                if (v32)
                {
                  long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v312, v32);
                  int v28 = (char *)v310;
                  uint64_t v26 = v311;
                }
                else
                {
                  long long v33 = 0;
                }
                int v34 = &v33[4 * v29];
                *(_DWORD *)int v34 = v25;
                int v27 = v34 + 4;
                while (v26 != v28)
                {
                  int v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                v310 = v34;
                v311 = v27;
                v312 = &v33[4 * v32];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *(_DWORD *)v311 = v25;
                int v27 = v26 + 4;
              }
              v311 = v27;
            }
            uint64_t v22 = [v21 countByEnumeratingWithState:&v301 objects:v324 count:16];
          }
          while (v22);
        }
        if (v314 == v313) {
          uint64_t v36 = (const unsigned __int8 *)&flatbuffers::data<Mtl::FunctionStitching::NodeId,std::allocator<Mtl::FunctionStitching::NodeId>>(std::vector<Mtl::FunctionStitching::NodeId> const&)::t;
        }
        else {
          uint64_t v36 = (const unsigned __int8 *)v313;
        }
        int v37 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(this, v36, (v314 - (unsigned char *)v313) >> 2);
        if (v311 == v310) {
          uint64_t v38 = (const unsigned __int8 *)&flatbuffers::data<Mtl::FunctionStitching::NodeId,std::allocator<Mtl::FunctionStitching::NodeId>>(std::vector<Mtl::FunctionStitching::NodeId> const&)::t;
        }
        else {
          uint64_t v38 = (const unsigned __int8 *)v310;
        }
        int v39 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(this, v38, (v311 - (unsigned char *)v310) >> 2);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v287, "name"), "UTF8String"));
        if ((v300 & 0x80u) == 0) {
          long long v40 = __p;
        }
        else {
          long long v40 = (void **)__p[0];
        }
        if ((v300 & 0x80u) == 0) {
          unint64_t v41 = v300;
        }
        else {
          unint64_t v41 = (unint64_t)__p[1];
        }
        int String = flatbuffers::FlatBufferBuilder::CreateString(this, (const char *)v40, v41);
        if ((char)v300 < 0) {
          operator delete(__p[0]);
        }
        *((unsigned char *)this + 70) = 1;
        int v43 = *((_DWORD *)this + 8);
        int v44 = *((_DWORD *)this + 12);
        int v45 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 8, v39);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v37);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 4, String);
        int v46 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v43 - (unsigned __int16)v44 + v45);
        *((unsigned char *)this + 70) = 1;
        int v47 = *((_DWORD *)this + 8);
        int v48 = *((_DWORD *)this + 12);
        int v49 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v46);
        unsigned int v50 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 2);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v50);
        int v51 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v47 - (unsigned __int16)v48 + v49);
        int v52 = v51;
        uint64_t v53 = v317;
        if (v317 >= v318)
        {
          MTLAttributeFormat v93 = (char *)v316;
          uint64_t v94 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v96 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v95) {
            unint64_t v95 = v96 >> 1;
          }
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v97 = v95;
          }
          if (v97)
          {
            uint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v97);
            MTLAttributeFormat v93 = (char *)v316;
            uint64_t v53 = v317;
          }
          else
          {
            uint64_t v98 = 0;
          }
          uint64_t v130 = &v98[4 * v94];
          *(_DWORD *)uint64_t v130 = v52;
          uint64_t v54 = v130 + 4;
          while (v53 != v93)
          {
            int v131 = *((_DWORD *)v53 - 1);
            v53 -= 4;
            *((_DWORD *)v130 - 1) = v131;
            v130 -= 4;
          }
          v316 = v130;
          v317 = v54;
          v318 = &v98[4 * v97];
          if (v93) {
            operator delete(v93);
          }
        }
        else
        {
          *(_DWORD *)v317 = v51;
          uint64_t v54 = v53 + 4;
        }
        v317 = v54;
        if (v310)
        {
          v311 = (char *)v310;
          operator delete(v310);
        }
LABEL_157:
        if (v313)
        {
          v314 = (char *)v313;
          operator delete(v313);
        }
        goto LABEL_259;
      }
      if ([v5 isMemberOfClass:objc_opt_class()])
      {
        v313 = 0;
        v314 = 0;
        v315 = 0;
        __p[0] = (void *)[v5 condition];
        v310 = __p;
        LODWORD(v305) = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, __p, (uint64_t)&std::piecewise_construct, (void **)&v310)+ 6);
        long long v295 = 0u;
        long long v296 = 0u;
        long long v297 = 0u;
        long long v298 = 0u;
        uint64_t v55 = (void *)[v5 controlDependencies];
        uint64_t v56 = [v55 countByEnumeratingWithState:&v295 objects:v323 count:16];
        if (v56)
        {
          uint64_t v57 = *(void *)v296;
          do
          {
            for (uint64_t k = 0; k != v56; ++k)
            {
              if (*(void *)v296 != v57) {
                objc_enumerationMutation(v55);
              }
              __p[0] = *(void **)(*((void *)&v295 + 1) + 8 * k);
              v310 = __p;
              int v59 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, __p, (uint64_t)&std::piecewise_construct, (void **)&v310)+ 6);
              uint64_t v60 = v314;
              if (v314 >= v315)
              {
                uint64_t v62 = (char *)v313;
                uint64_t v63 = (v314 - (unsigned char *)v313) >> 2;
                unint64_t v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v65 = v315 - (unsigned char *)v313;
                if ((v315 - (unsigned char *)v313) >> 1 > v64) {
                  unint64_t v64 = v65 >> 1;
                }
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v66 = v64;
                }
                if (v66)
                {
                  uint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v66);
                  uint64_t v62 = (char *)v313;
                  uint64_t v60 = v314;
                }
                else
                {
                  uint64_t v67 = 0;
                }
                uint64_t v68 = &v67[4 * v63];
                *(_DWORD *)uint64_t v68 = v59;
                int v61 = v68 + 4;
                while (v60 != v62)
                {
                  int v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                v313 = v68;
                v314 = v61;
                v315 = &v67[4 * v66];
                if (v62) {
                  operator delete(v62);
                }
              }
              else
              {
                *(_DWORD *)v314 = v59;
                int v61 = v60 + 4;
              }
              v314 = v61;
            }
            uint64_t v56 = [v55 countByEnumeratingWithState:&v295 objects:v323 count:16];
          }
          while (v56);
        }
        if (v314 == v313) {
          uint64_t v70 = (const unsigned __int8 *)&flatbuffers::data<Mtl::FunctionStitching::NodeId,std::allocator<Mtl::FunctionStitching::NodeId>>(std::vector<Mtl::FunctionStitching::NodeId> const&)::t;
        }
        else {
          uint64_t v70 = (const unsigned __int8 *)v313;
        }
        int v71 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(this, v70, (v314 - (unsigned char *)v313) >> 2);
        *((unsigned char *)this + 70) = 1;
        int v72 = *((_DWORD *)this + 8);
        int v73 = *((_DWORD *)this + 12);
        int v74 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v71);
        flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>(this, 4, &v305);
        int v75 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v72 - (unsigned __int16)v73 + v74);
        *((unsigned char *)this + 70) = 1;
        int v76 = *((_DWORD *)this + 8);
        int v77 = *((_DWORD *)this + 12);
        int v78 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v75);
        unsigned int v79 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 11);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v79);
        int v80 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v76 - (unsigned __int16)v77 + v78);
        int v81 = v80;
        uint64_t v82 = v317;
        if (v317 >= v318)
        {
          uint64_t v124 = (char *)v316;
          uint64_t v125 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v127 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v126) {
            unint64_t v126 = v127 >> 1;
          }
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v128 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v128 = v126;
          }
          if (v128)
          {
            v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v128);
            uint64_t v124 = (char *)v316;
            uint64_t v82 = v317;
          }
          else
          {
            v129 = 0;
          }
          unint64_t v147 = &v129[4 * v125];
          *(_DWORD *)unint64_t v147 = v81;
          uint64_t v83 = v147 + 4;
          while (v82 != v124)
          {
            int v148 = *((_DWORD *)v82 - 1);
            v82 -= 4;
            *((_DWORD *)v147 - 1) = v148;
            v147 -= 4;
          }
          v316 = v147;
          v317 = v83;
          v318 = &v129[4 * v128];
          if (v124) {
            operator delete(v124);
          }
        }
        else
        {
          *(_DWORD *)v317 = v80;
          uint64_t v83 = v82 + 4;
        }
        v317 = v83;
        goto LABEL_157;
      }
      if ([v5 isMemberOfClass:objc_opt_class()])
      {
        int v84 = [v5 argumentIndex];
        *((unsigned char *)this + 70) = 1;
        uint64_t v85 = *((void *)this + 5);
        uint64_t v86 = *((void *)this + 6);
        uint64_t v87 = *((void *)this + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 4, v84, 0);
        int v88 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v87 - (unsigned __int16)v86 + (unsigned __int16)v85);
        *((unsigned char *)this + 70) = 1;
        LODWORD(v85) = *((_DWORD *)this + 8);
        LODWORD(v86) = *((_DWORD *)this + 12);
        LODWORD(v87) = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v88);
        unsigned int v89 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 1);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v89);
        int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v85 - (unsigned __int16)v86 + (unsigned __int16)v87);
        unint64_t v91 = v317;
        if (v317 >= v318)
        {
          uint64_t v118 = (char *)v316;
          uint64_t v144 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v146 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v145) {
            unint64_t v145 = v146 >> 1;
          }
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v145;
          }
          if (v122)
          {
            uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            uint64_t v118 = (char *)v316;
            unint64_t v91 = v317;
          }
          else
          {
            uint64_t v123 = 0;
          }
          uint64_t v162 = &v123[4 * v144];
          *(_DWORD *)uint64_t v162 = v90;
          size_t v92 = v162 + 4;
          while (v91 != v118)
          {
            int v163 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v163;
            v162 -= 4;
          }
LABEL_256:
          v316 = v162;
          v317 = v92;
          v318 = &v123[4 * v122];
          if (v118) {
            operator delete(v118);
          }
          goto LABEL_258;
        }
      }
      else if ([v5 isMemberOfClass:objc_opt_class()])
      {
        int v99 = [v5 bindIndex];
        *((unsigned char *)this + 70) = 1;
        int v100 = *((_DWORD *)this + 8);
        int v101 = *((_DWORD *)this + 12);
        int v102 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 6, v99, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 4, 0, 0);
        int v103 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v100 - (unsigned __int16)v101 + v102);
        unsigned int v104 = [v5 byteOffset];
        *((unsigned char *)this + 70) = 1;
        int v105 = *((_DWORD *)this + 8);
        int v106 = *((_DWORD *)this + 12);
        int v107 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(this, 6, v104, 0);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 4, v103);
        int v108 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v105 - (unsigned __int16)v106 + v107);
        int v109 = [v5 dereference];
        *((unsigned char *)this + 70) = 1;
        uint64_t v110 = *((void *)this + 5);
        uint64_t v111 = *((void *)this + 6);
        uint64_t v112 = *((void *)this + 4);
        if (v109)
        {
          flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 4, v108);
          int v113 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v112 - (unsigned __int16)v111 + (unsigned __int16)v110);
          *((unsigned char *)this + 70) = 1;
          int v114 = *((_DWORD *)this + 8);
          int v115 = *((_DWORD *)this + 12);
          int v116 = *((_DWORD *)this + 10);
          flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v113);
          unsigned int v117 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 5);
          flatbuffers::FlatBufferBuilder::TrackField(this, 4, v117);
          int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v114 - (unsigned __int16)v115 + v116);
          unint64_t v91 = v317;
          if (v317 >= v318)
          {
            uint64_t v118 = (char *)v316;
            uint64_t v119 = (v317 - (unsigned char *)v316) >> 2;
            unint64_t v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 62) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v121 = v318 - (unsigned char *)v316;
            if ((v318 - (unsigned char *)v316) >> 1 > v120) {
              unint64_t v120 = v121 >> 1;
            }
            if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v122 = v120;
            }
            if (v122)
            {
              uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
              uint64_t v118 = (char *)v316;
              unint64_t v91 = v317;
            }
            else
            {
              uint64_t v123 = 0;
            }
            uint64_t v162 = &v123[4 * v119];
            *(_DWORD *)uint64_t v162 = v90;
            size_t v92 = v162 + 4;
            while (v91 != v118)
            {
              int v184 = *((_DWORD *)v91 - 1);
              v91 -= 4;
              *((_DWORD *)v162 - 1) = v184;
              v162 -= 4;
            }
            goto LABEL_256;
          }
        }
        else
        {
          flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v108);
          unsigned int v158 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 4);
          flatbuffers::FlatBufferBuilder::TrackField(this, 4, v158);
          int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v112 - (unsigned __int16)v111 + (unsigned __int16)v110);
          unint64_t v91 = v317;
          if (v317 >= v318)
          {
            uint64_t v118 = (char *)v316;
            uint64_t v159 = (v317 - (unsigned char *)v316) >> 2;
            unint64_t v160 = v159 + 1;
            if ((unint64_t)(v159 + 1) >> 62) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v161 = v318 - (unsigned char *)v316;
            if ((v318 - (unsigned char *)v316) >> 1 > v160) {
              unint64_t v160 = v161 >> 1;
            }
            if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v122 = v160;
            }
            if (v122)
            {
              uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
              uint64_t v118 = (char *)v316;
              unint64_t v91 = v317;
            }
            else
            {
              uint64_t v123 = 0;
            }
            uint64_t v162 = &v123[4 * v159];
            *(_DWORD *)uint64_t v162 = v90;
            size_t v92 = v162 + 4;
            while (v91 != v118)
            {
              int v183 = *((_DWORD *)v91 - 1);
              v91 -= 4;
              *((_DWORD *)v162 - 1) = v183;
              v162 -= 4;
            }
            goto LABEL_256;
          }
        }
      }
      else if ([v5 isMemberOfClass:objc_opt_class()])
      {
        int v132 = [v5 bindIndex];
        *((unsigned char *)this + 70) = 1;
        int v133 = *((_DWORD *)this + 8);
        int v134 = *((_DWORD *)this + 12);
        int v135 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 6, v132, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 4, 0, 0);
        int v136 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v133 - (unsigned __int16)v134 + v135);
        *((unsigned char *)this + 70) = 1;
        int v137 = *((_DWORD *)this + 8);
        int v138 = *((_DWORD *)this + 12);
        int v139 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v136);
        unsigned int v140 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 3);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v140);
        int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v137 - (unsigned __int16)v138 + v139);
        unint64_t v91 = v317;
        if (v317 >= v318)
        {
          uint64_t v118 = (char *)v316;
          uint64_t v141 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v143 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v142) {
            unint64_t v142 = v143 >> 1;
          }
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v142;
          }
          if (v122)
          {
            uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            uint64_t v118 = (char *)v316;
            unint64_t v91 = v317;
          }
          else
          {
            uint64_t v123 = 0;
          }
          uint64_t v162 = &v123[4 * v141];
          *(_DWORD *)uint64_t v162 = v90;
          size_t v92 = v162 + 4;
          while (v91 != v118)
          {
            int v182 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v182;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if ([v5 isMemberOfClass:objc_opt_class()])
      {
        int v149 = [v5 bindIndex];
        *((unsigned char *)this + 70) = 1;
        uint64_t v150 = *((void *)this + 5);
        uint64_t v151 = *((void *)this + 6);
        uint64_t v152 = *((void *)this + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 4, v149, 0);
        int v153 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v152 - (unsigned __int16)v151 + (unsigned __int16)v150);
        *((unsigned char *)this + 70) = 1;
        LODWORD(v150) = *((_DWORD *)this + 8);
        LODWORD(v151) = *((_DWORD *)this + 12);
        LODWORD(v152) = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v153);
        unsigned int v154 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 6);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v154);
        int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v150 - (unsigned __int16)v151 + (unsigned __int16)v152);
        unint64_t v91 = v317;
        if (v317 >= v318)
        {
          uint64_t v118 = (char *)v316;
          uint64_t v155 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v156 = v155 + 1;
          if ((unint64_t)(v155 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v157 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v156) {
            unint64_t v156 = v157 >> 1;
          }
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v156;
          }
          if (v122)
          {
            uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            uint64_t v118 = (char *)v316;
            unint64_t v91 = v317;
          }
          else
          {
            uint64_t v123 = 0;
          }
          uint64_t v162 = &v123[4 * v155];
          *(_DWORD *)uint64_t v162 = v90;
          size_t v92 = v162 + 4;
          while (v91 != v118)
          {
            int v193 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v193;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if ([v5 isMemberOfClass:objc_opt_class()])
      {
        int v164 = [v5 bindIndex];
        *((unsigned char *)this + 70) = 1;
        uint64_t v165 = *((void *)this + 5);
        uint64_t v166 = *((void *)this + 6);
        uint64_t v167 = *((void *)this + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 4, v164, 0);
        int v168 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v167 - (unsigned __int16)v166 + (unsigned __int16)v165);
        *((unsigned char *)this + 70) = 1;
        LODWORD(v165) = *((_DWORD *)this + 8);
        LODWORD(v166) = *((_DWORD *)this + 12);
        LODWORD(v167) = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v168);
        unsigned int v169 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 7);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v169);
        int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v165 - (unsigned __int16)v166 + (unsigned __int16)v167);
        unint64_t v91 = v317;
        if (v317 >= v318)
        {
          uint64_t v118 = (char *)v316;
          uint64_t v170 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v172 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v171) {
            unint64_t v171 = v172 >> 1;
          }
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v171;
          }
          if (v122)
          {
            uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            uint64_t v118 = (char *)v316;
            unint64_t v91 = v317;
          }
          else
          {
            uint64_t v123 = 0;
          }
          uint64_t v162 = &v123[4 * v170];
          *(_DWORD *)uint64_t v162 = v90;
          size_t v92 = v162 + 4;
          while (v91 != v118)
          {
            int v206 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v206;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if ([v5 isMemberOfClass:objc_opt_class()])
      {
        int v173 = [v5 bindIndex];
        *((unsigned char *)this + 70) = 1;
        uint64_t v174 = *((void *)this + 5);
        uint64_t v175 = *((void *)this + 6);
        uint64_t v176 = *((void *)this + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(this, 4, v173, 0);
        int v177 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v176 - (unsigned __int16)v175 + (unsigned __int16)v174);
        *((unsigned char *)this + 70) = 1;
        LODWORD(v174) = *((_DWORD *)this + 8);
        LODWORD(v175) = *((_DWORD *)this + 12);
        LODWORD(v176) = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v177);
        unsigned int v178 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 8);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v178);
        int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v174 - (unsigned __int16)v175 + (unsigned __int16)v176);
        unint64_t v91 = v317;
        if (v317 >= v318)
        {
          uint64_t v118 = (char *)v316;
          uint64_t v179 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v180 = v179 + 1;
          if ((unint64_t)(v179 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v181 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v180) {
            unint64_t v180 = v181 >> 1;
          }
          if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v180;
          }
          if (v122)
          {
            uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            uint64_t v118 = (char *)v316;
            unint64_t v91 = v317;
          }
          else
          {
            uint64_t v123 = 0;
          }
          uint64_t v162 = &v123[4 * v179];
          *(_DWORD *)uint64_t v162 = v90;
          size_t v92 = v162 + 4;
          while (v91 != v118)
          {
            int v208 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v208;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if ([v5 isMemberOfClass:objc_opt_class()])
      {
        *((unsigned char *)this + 70) = 1;
        int v185 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_DWORD *)this + 10));
        *((unsigned char *)this + 70) = 1;
        int v186 = *((_DWORD *)this + 8);
        int v187 = *((_DWORD *)this + 12);
        int v188 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v185);
        unsigned int v189 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 9);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v189);
        int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v186 - (unsigned __int16)v187 + v188);
        unint64_t v91 = v317;
        if (v317 >= v318)
        {
          uint64_t v118 = (char *)v316;
          uint64_t v190 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v191 = v190 + 1;
          if ((unint64_t)(v190 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v192 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v191) {
            unint64_t v191 = v192 >> 1;
          }
          if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v191;
          }
          if (v122)
          {
            uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            uint64_t v118 = (char *)v316;
            unint64_t v91 = v317;
          }
          else
          {
            uint64_t v123 = 0;
          }
          uint64_t v162 = &v123[4 * v190];
          *(_DWORD *)uint64_t v162 = v90;
          size_t v92 = v162 + 4;
          while (v91 != v118)
          {
            int v209 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v209;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else
      {
        if (![v5 isMemberOfClass:objc_opt_class()])
        {
          if ([v5 isMemberOfClass:objc_opt_class()])
          {
            int BuiltinNode = Mtl::FunctionStitching::CreateBuiltinNode((uint64_t)this, 0);
            LODWORD(v313) = Mtl::FunctionStitching::CreateNode((uint64_t)this, 10, BuiltinNode);
            std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>::push_back[abi:ne180100]((uint64_t)&v316, &v313);
          }
          goto LABEL_259;
        }
        *((unsigned char *)this + 70) = 1;
        int v194 = *((_DWORD *)this + 8);
        int v195 = *((_DWORD *)this + 12);
        int v196 = *((_DWORD *)this + 10);
        unsigned int v197 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 1);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v197);
        int v198 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v194 - (unsigned __int16)v195 + v196);
        *((unsigned char *)this + 70) = 1;
        int v199 = *((_DWORD *)this + 8);
        int v200 = *((_DWORD *)this + 12);
        int v201 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v198);
        unsigned int v202 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 10);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v202);
        int v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v199 - (unsigned __int16)v200 + v201);
        unint64_t v91 = v317;
        if (v317 >= v318)
        {
          uint64_t v118 = (char *)v316;
          uint64_t v203 = (v317 - (unsigned char *)v316) >> 2;
          unint64_t v204 = v203 + 1;
          if ((unint64_t)(v203 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v205 = v318 - (unsigned char *)v316;
          if ((v318 - (unsigned char *)v316) >> 1 > v204) {
            unint64_t v204 = v205 >> 1;
          }
          if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v204;
          }
          if (v122)
          {
            uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            uint64_t v118 = (char *)v316;
            unint64_t v91 = v317;
          }
          else
          {
            uint64_t v123 = 0;
          }
          uint64_t v162 = &v123[4 * v203];
          *(_DWORD *)uint64_t v162 = v90;
          size_t v92 = v162 + 4;
          while (v91 != v118)
          {
            int v210 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v210;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      *(_DWORD *)unint64_t v91 = v90;
      size_t v92 = v91 + 4;
LABEL_258:
      v317 = v92;
LABEL_259:
      BOOL v4 = v288 + 1;
    }
    while (v288 + 1 != v286);
  }
  long long v211 = a2;
  v212 = [(NSString *)[(MTLFunctionStitchingGraph *)a2 functionName] UTF8String];
  size_t v213 = strlen(v212);
  int v214 = flatbuffers::FlatBufferBuilder::CreateString(this, v212, v213);
  v313 = 0;
  v314 = 0;
  v315 = 0;
  long long v291 = 0u;
  long long v292 = 0u;
  long long v293 = 0u;
  long long v294 = 0u;
  v215 = [(MTLFunctionStitchingGraph *)a2 attributes];
  uint64_t v216 = [(NSArray *)v215 countByEnumeratingWithState:&v291 objects:v322 count:16];
  if (!v216)
  {
LABEL_305:
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      *((unsigned char *)this + 70) = 1;
      int v254 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_DWORD *)this + 10));
      *((unsigned char *)this + 70) = 1;
      int v255 = *((_DWORD *)this + 8);
      int v256 = *((_DWORD *)this + 12);
      int v257 = *((_DWORD *)this + 10);
      flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v254);
      unsigned int v258 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 2);
      flatbuffers::FlatBufferBuilder::TrackField(this, 4, v258);
      int v259 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v255 - (unsigned __int16)v256 + v257);
      int v260 = v259;
      v261 = v314;
      if (v314 >= v315)
      {
        v263 = (char *)v313;
        uint64_t v264 = (v314 - (unsigned char *)v313) >> 2;
        unint64_t v265 = v264 + 1;
        if ((unint64_t)(v264 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v266 = v315 - (unsigned char *)v313;
        if ((v315 - (unsigned char *)v313) >> 1 > v265) {
          unint64_t v265 = v266 >> 1;
        }
        if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v267 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v267 = v265;
        }
        if (v267)
        {
          v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v267);
          v263 = (char *)v313;
          v261 = v314;
        }
        else
        {
          v268 = 0;
        }
        v269 = &v268[4 * v264];
        v270 = &v268[4 * v267];
        *(_DWORD *)v269 = v260;
        v262 = v269 + 4;
        while (v261 != v263)
        {
          int v271 = *((_DWORD *)v261 - 1);
          v261 -= 4;
          *((_DWORD *)v269 - 1) = v271;
          v269 -= 4;
        }
        v313 = v269;
        v314 = v262;
        v315 = v270;
        if (v263) {
          operator delete(v263);
        }
      }
      else
      {
        *(_DWORD *)v314 = v259;
        v262 = v261 + 4;
      }
      v314 = v262;
    }
    goto LABEL_323;
  }
  int v289 = v214;
  char v290 = 0;
  uint64_t v217 = *(void *)v292;
  do
  {
    for (uint64_t m = 0; m != v216; ++m)
    {
      if (*(void *)v292 != v217) {
        objc_enumerationMutation(v215);
      }
      v219 = *(void **)(*((void *)&v291 + 1) + 8 * m);
      if ([v219 isMemberOfClass:objc_opt_class()])
      {
        *((unsigned char *)this + 70) = 1;
        int v220 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_WORD *)this + 20));
        *((unsigned char *)this + 70) = 1;
        int v221 = *((_DWORD *)this + 8);
        int v222 = *((_DWORD *)this + 12);
        int v223 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v220);
        unsigned int v224 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 1);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v224);
        int v225 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v221 - (unsigned __int16)v222 + v223);
        int v226 = v225;
        v227 = v314;
        if (v314 >= v315)
        {
          v238 = (char *)v313;
          uint64_t v239 = (v314 - (unsigned char *)v313) >> 2;
          unint64_t v240 = v239 + 1;
          if ((unint64_t)(v239 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v241 = v315 - (unsigned char *)v313;
          if ((v315 - (unsigned char *)v313) >> 1 > v240) {
            unint64_t v240 = v241 >> 1;
          }
          if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v242 = v240;
          }
          if (v242)
          {
            v243 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v242);
            v238 = (char *)v313;
            v227 = v314;
          }
          else
          {
            v243 = 0;
          }
          v250 = &v243[4 * v239];
          *(_DWORD *)v250 = v226;
          v237 = v250 + 4;
          while (v227 != v238)
          {
            int v251 = *((_DWORD *)v227 - 1);
            v227 -= 4;
            *((_DWORD *)v250 - 1) = v251;
            v250 -= 4;
          }
          v313 = v250;
          v314 = v237;
          v315 = &v243[4 * v242];
          if (v238) {
            operator delete(v238);
          }
          goto LABEL_301;
        }
        *(_DWORD *)v314 = v225;
        v228 = v227 + 4;
      }
      else
      {
        if (![v219 isMemberOfClass:objc_opt_class()]) {
          continue;
        }
        *((unsigned char *)this + 70) = 1;
        int v229 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_WORD *)this + 20));
        *((unsigned char *)this + 70) = 1;
        int v230 = *((_DWORD *)this + 8);
        int v231 = *((_DWORD *)this + 12);
        int v232 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v229);
        unsigned int v233 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 2);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v233);
        int v234 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v230 - (unsigned __int16)v231 + v232);
        int v235 = v234;
        v236 = v314;
        if (v314 >= v315)
        {
          v244 = (char *)v313;
          uint64_t v245 = (v314 - (unsigned char *)v313) >> 2;
          unint64_t v246 = v245 + 1;
          if ((unint64_t)(v245 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v247 = v315 - (unsigned char *)v313;
          if ((v315 - (unsigned char *)v313) >> 1 > v246) {
            unint64_t v246 = v247 >> 1;
          }
          if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v248 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v248 = v246;
          }
          if (v248)
          {
            v249 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v248);
            v244 = (char *)v313;
            v236 = v314;
          }
          else
          {
            v249 = 0;
          }
          v252 = &v249[4 * v245];
          *(_DWORD *)v252 = v235;
          v237 = v252 + 4;
          while (v236 != v244)
          {
            int v253 = *((_DWORD *)v236 - 1);
            v236 -= 4;
            *((_DWORD *)v252 - 1) = v253;
            v252 -= 4;
          }
          v313 = v252;
          v314 = v237;
          v315 = &v249[4 * v248];
          if (v244) {
            operator delete(v244);
          }
          char v290 = 1;
          goto LABEL_301;
        }
        *(_DWORD *)v314 = v234;
        v228 = v236 + 4;
        char v290 = 1;
      }
      v237 = v228;
LABEL_301:
      v314 = v237;
    }
    uint64_t v216 = [(NSArray *)v215 countByEnumeratingWithState:&v291 objects:v322 count:16];
  }
  while (v216);
  long long v211 = a2;
  int v214 = v289;
  if ((v290 & 1) == 0) {
    goto LABEL_305;
  }
LABEL_323:
  if (v314 == v313) {
    v272 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>> const&)::t;
  }
  else {
    v272 = v313;
  }
  int v273 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v272, (v314 - (unsigned char *)v313) >> 2);
  if (v317 == v316) {
    v274 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>> const&)::t;
  }
  else {
    v274 = v316;
  }
  int v275 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v274, (v317 - (unsigned char *)v316) >> 2);
  if ([(MTLFunctionStitchingGraph *)v211 outputNode])
  {
    __p[0] = [(MTLFunctionStitchingGraph *)v211 outputNode];
    v310 = __p;
    int v276 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, __p, (uint64_t)&std::piecewise_construct, (void **)&v310)+ 6);
  }
  else
  {
    int v276 = 0;
  }
  LODWORD(v305) = v276;
  uint64_t v277 = [(MTLFunctionStitchingGraph *)v211 outputNode];
  int v278 = v273;
  *((unsigned char *)this + 70) = 1;
  int v279 = *((_DWORD *)this + 8);
  int v280 = *((_DWORD *)this + 12);
  int v281 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 10, v278);
  if (v277) {
    v282 = &v305;
  }
  else {
    v282 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>(this, 8, v282);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v275);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 4, v214);
  uint64_t v283 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v279 - (unsigned __int16)v280 + v281);
  if (v313)
  {
    v314 = (char *)v313;
    operator delete(v313);
  }
  if (v316)
  {
    v317 = (char *)v316;
    operator delete(v316);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v321);
  if (v319)
  {
    v320 = (id *)v319;
    operator delete(v319);
  }
  return v283;
}

void sub_1827F8644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::pair<std::vector<objc_object  {objcproto24MTLFunctionStitchingNode}*>,std::unordered_map<objc_object  {objcproto24MTLFunctionStitchingNode},unsigned int,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,objc_object  {objcproto24MTLFunctionStitchingNode}*<std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>>>::~pair((uint64_t)&a64);
  _Unwind_Resume(a1);
}

uint64_t MTLMetalScriptSerializer::buildComputePipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  v106[4] = *MEMORY[0x1E4F143B8];
  std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(a3, *(void *)(a2 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
    {
      int String = 0;
LABEL_10:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_11;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      int String = 0;
      goto LABEL_11;
    }
    p_p = &__p;
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, (const char *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v8 = *(void *)(v3 + 24);
  if (!v8)
  {
LABEL_69:
    LOBYTE(v23) = 0;
    int v51 = 0;
    goto LABEL_99;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = *(void **)(*(void *)(v8 + 8) + 8 + v9);
    if (!v12)
    {
      ++v11;
LABEL_23:
      unint64_t v15 = v10;
      goto LABEL_24;
    }
    if (v12[1]) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v12[3] == 1;
    }
    BOOL v14 = v13 && v12[2] == 1;
    unint64_t v15 = ++v11;
    if (v14) {
      goto LABEL_23;
    }
LABEL_24:
    v9 += 8;
    unint64_t v10 = v15;
  }
  while (v9 != 248);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  do
  {
    uint64_t v19 = *(void **)(*(void *)(v8 + 16) + 8 + v16);
    if (v19)
    {
      unint64_t v20 = ++v17;
      if (v19[2] | v19[1] | v19[3]) {
        goto LABEL_31;
      }
    }
    else
    {
      ++v17;
    }
    unint64_t v20 = v18;
LABEL_31:
    v16 += 8;
    unint64_t v18 = v20;
  }
  while (v16 != 248);
  if (!*(void *)(v8 + 32))
  {
    BOOL v21 = !*(void *)(v8 + 24) && v15 == 0;
    if (v21 && v20 == 0) {
      goto LABEL_69;
    }
  }
  uint64_t v104 = *(void *)(v3 + 24);
  int v99 = String;
  if (!v15)
  {
    LOBYTE(v23) = 0;
    int v50 = 0;
    if (!v20) {
      goto LABEL_98;
    }
    goto LABEL_71;
  }
  uint64_t v97 = v3;
  memset(&__p, 0, sizeof(__p));
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve((void **)&__p.__r_.__value_.__l.__data_, v15);
  int v23 = 0;
  uint64_t v24 = 0;
  unint64_t v102 = v15;
  unint64_t v103 = v20;
  do
  {
    uint64_t v25 = a1;
    uint64_t v26 = *(void **)(*(void *)(v8 + 8) + 8 + 8 * v24);
    int v27 = v23;
    if (v26)
    {
      uint64_t v28 = v26[2];
      uint64_t v29 = v26[3];
      uint64_t v30 = v26[1];
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v29 = 1;
      LOBYTE(v28) = 1;
    }
    BOOL v31 = (v30 & 3) != 0;
    *(unsigned char *)(a1 + 70) = 1;
    int v32 = *(_DWORD *)(a1 + 32);
    int v33 = *(_DWORD *)(a1 + 48);
    int v34 = *(_DWORD *)(v25 + 40);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)v25, 4, v28, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)v25, 6, v29, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)v25, 8, v30, 0);
    int v35 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v25, (unsigned __int16)v32 - (unsigned __int16)v33 + v34);
    int v36 = v27;
    unint64_t v20 = v103;
    uint64_t v8 = v104;
    int v37 = v35;
    std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      long long v40 = (void *)__p.__r_.__value_.__r.__words[0];
      uint64_t v41 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v43 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v44);
        std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
        long long v40 = (void *)__p.__r_.__value_.__r.__words[0];
        a1 = v25;
      }
      else
      {
        a1 = v25;
        int v45 = 0;
      }
      int v46 = &v45[4 * v41];
      *(_DWORD *)int v46 = v37;
      std::string::size_type v39 = (std::string::size_type)(v46 + 4);
      while ((void *)v38 != v40)
      {
        int v47 = *(_DWORD *)(v38 - 4);
        v38 -= 4;
        *((_DWORD *)v46 - 1) = v47;
        v46 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      __p.__r_.__value_.__l.__size_ = v39;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v45[4 * v44];
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = v35;
      std::string::size_type v39 = v38 + 4;
      a1 = v25;
    }
    int v23 = v36 | v31;
    __p.__r_.__value_.__l.__size_ = v39;
    ++v24;
  }
  while (v24 != v102);
  if (v39 == __p.__r_.__value_.__r.__words[0]) {
    int v48 = &flatbuffers::data<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>> const&)::t;
  }
  else {
    int v48 = (void *)__p.__r_.__value_.__r.__words[0];
  }
  int v49 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v48, (uint64_t)(v39 - __p.__r_.__value_.__r.__words[0]) >> 2);
  uint64_t v3 = v97;
  int String = v99;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v50 = v49;
  if (v103)
  {
LABEL_71:
    int v98 = v50;
    char v101 = v23;
    memset(&__p, 0, sizeof(__p));
    std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve((void **)&__p.__r_.__value_.__l.__data_, v20);
    uint64_t v52 = v3;
    uint64_t v53 = 0;
    uint64_t v8 = v104;
    do
    {
      uint64_t v54 = *(void *)(*(void *)(v8 + 16) + 8 + 8 * v53);
      if (v54)
      {
        uint64_t v55 = *(void *)(v54 + 8);
        uint64_t v56 = *(void *)(v54 + 16);
        int v57 = *(_DWORD *)(v54 + 24);
      }
      else
      {
        uint64_t v56 = 0;
        LOBYTE(v55) = 0;
        int v57 = 0;
      }
      *(unsigned char *)(a1 + 70) = 1;
      int v58 = *(_DWORD *)(a1 + 32);
      int v59 = *(_DWORD *)(a1 + 48);
      int v60 = *(_DWORD *)(a1 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 4, v55, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 6, v56, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 8, v57, 0);
      int v61 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v58 - (unsigned __int16)v59 + v60);
      int v62 = v61;
      uint64_t v8 = v104;
      std::string::size_type v63 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        uint64_t v65 = (void *)__p.__r_.__value_.__r.__words[0];
        uint64_t v66 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        unint64_t v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        int64_t v68 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v67) {
          unint64_t v67 = v68 >> 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v67;
        }
        if (v69)
        {
          uint64_t v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v69);
          std::string::size_type v63 = __p.__r_.__value_.__l.__size_;
          uint64_t v65 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v70 = 0;
        }
        int v71 = &v70[4 * v66];
        *(_DWORD *)int v71 = v62;
        std::string::size_type v64 = (std::string::size_type)(v71 + 4);
        while ((void *)v63 != v65)
        {
          int v72 = *(_DWORD *)(v63 - 4);
          v63 -= 4;
          *((_DWORD *)v71 - 1) = v72;
          v71 -= 4;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
        __p.__r_.__value_.__l.__size_ = v64;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v70[4 * v69];
        if (v65) {
          operator delete(v65);
        }
      }
      else
      {
        *(_DWORD *)__p.__r_.__value_.__l.__size_ = v61;
        std::string::size_type v64 = v63 + 4;
      }
      __p.__r_.__value_.__l.__size_ = v64;
      ++v53;
    }
    while (v53 != v20);
    if (v64 == __p.__r_.__value_.__r.__words[0]) {
      int v73 = &flatbuffers::data<flatbuffers::Offset<Mtl::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Mtl::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::AttributeDescriptor>> const&)::t;
    }
    else {
      int v73 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(v20) = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v73, (uint64_t)(v64 - __p.__r_.__value_.__r.__words[0]) >> 2);
    uint64_t v3 = v52;
    int String = v99;
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    LOBYTE(v23) = v101;
    int v50 = v98;
  }
LABEL_98:
  *(unsigned char *)(a1 + 70) = 1;
  int v74 = *(_DWORD *)(a1 + 32);
  int v75 = *(_DWORD *)(a1 + 48);
  int v76 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v50);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v20);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 10, *(unsigned __int8 *)(v8 + 32), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 8, *(_DWORD *)(v8 + 24), 0);
  int v51 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v74 - (unsigned __int16)v75 + v76);
LABEL_99:
  int v77 = addPipelineBufferDescriptor((flatbuffers::FlatBufferBuilder *)a1, *(MTLPipelineBufferDescriptorArray **)(v3 + 48));
  int v78 = *(void **)(v3 + 152);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v106, a3);
  int LinkedFunctions = MTLMetalScriptSerializer::createLinkedFunctions(a1, v78, (uint64_t)v106);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v106);
  if (objc_msgSend((id)objc_msgSend(*(id *)(v3 + 152), "binaryFunctions"), "count")) {
    unsigned int v80 = 536870918;
  }
  else {
    unsigned int v80 = 0;
  }
  uint64_t v81 = objc_msgSend((id)objc_msgSend(*(id *)(v3 + 152), "privateFunctions"), "count");
  int v82 = v80 & 0x20000000 | 1;
  if ((v80 & 6) != 0) {
    int v82 = v80;
  }
  unsigned int v83 = v82 | 0x80000000;
  if (v81) {
    unsigned int v80 = v83;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v3 + 152), "functions"), "count")
    || objc_msgSend((id)objc_msgSend(*(id *)(v3 + 152), "groups"), "count"))
  {
    if ((v80 & 0x1FFFFFFE) >= 6) {
      int v84 = v80;
    }
    else {
      int v84 = v80 & 0x60000000 | 6;
    }
    unsigned int v80 = v84 | 0x80000000;
  }
  if ((v80 & 0x1FFFFFFF) >= 5) {
    int v85 = v80;
  }
  else {
    int v85 = v80 & 0x60000000 | 5;
  }
  unsigned int v86 = v85 | 0x80000000;
  if ((_BYTE)v23) {
    uint64_t v87 = (MTLMetalScriptSerializer *)v86;
  }
  else {
    uint64_t v87 = (MTLMetalScriptSerializer *)v80;
  }
  if (*(unsigned char *)(v3 + 80))
  {
    if ((v87 & 0x1FFFFFFF) >= 3) {
      unsigned int v88 = v87;
    }
    else {
      unsigned int v88 = v87 & 0xC0000000 | 3;
    }
    uint64_t v87 = (MTLMetalScriptSerializer *)(v88 | 0x20000000);
LABEL_124:
    MTLMetalScriptSerializer::generateEnableString(v87, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v89 = &__p;
    }
    else {
      unsigned int v89 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v90 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v90 = __p.__r_.__value_.__l.__size_;
    }
    int v91 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, (const char *)v89, v90);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v92 = v91;
  }
  else
  {
    if (v87) {
      goto LABEL_124;
    }
    int v92 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  int v93 = *(_DWORD *)(a1 + 32);
  int v94 = *(_DWORD *)(a1 + 48);
  int v95 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v92);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 14, v51);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 16, v77);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 8, *(unsigned __int8 *)(v3 + 16), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 10, *(unsigned __int16 *)(v3 + 18), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 26, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 12, *(void *)(v3 + 160), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 18, *(unsigned __int8 *)(v3 + 80), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 20, *(unsigned __int8 *)(v3 + 168), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 22, *(unsigned __int8 *)(v3 + 104), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 24, *(unsigned __int8 *)(v3 + 136), 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v93 - (unsigned __int16)v94 + v95);
}

void sub_1827F913C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t addPipelineBufferDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLPipelineBufferDescriptorArray *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    Class isa = a2[v4 + 1].super.isa;
    if (isa)
    {
      unint64_t v8 = ++v6;
      if ((*((unsigned char *)isa + 8) & 3) != 0) {
        goto LABEL_8;
      }
    }
    else
    {
      ++v6;
    }
    unint64_t v8 = v5;
LABEL_8:
    ++v4;
    unint64_t v5 = v8;
  }
  while (v4 != 31);
  if (!v8) {
    return 0;
  }
  std::string __p = 0;
  BOOL v31 = 0;
  int v32 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v8);
  for (uint64_t i = 0; i != v8; ++i)
  {
    Class v10 = a2[i + 1].super.isa;
    if (v10) {
      uint64_t v11 = (uint64_t *)((char *)v10 + 8);
    }
    else {
      uint64_t v11 = &_MTLDefaultPipelineBufferPrivate;
    }
    *((unsigned char *)a1 + 70) = 1;
    uint64_t v12 = *((void *)a1 + 5);
    uint64_t v13 = *((void *)a1 + 6);
    uint64_t v14 = *((void *)a1 + 4);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, *(unsigned char *)v11 & 3, 0);
    int v15 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
    int v16 = v15;
    uint64_t v17 = v31;
    if (v31 >= v32)
    {
      uint64_t v19 = (char *)__p;
      uint64_t v20 = (v31 - (unsigned char *)__p) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v32 - (unsigned char *)__p;
      if ((v32 - (unsigned char *)__p) >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v32, v23);
        uint64_t v19 = (char *)__p;
        uint64_t v17 = v31;
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[4 * v20];
      *(_DWORD *)uint64_t v25 = v16;
      unint64_t v18 = v25 + 4;
      while (v17 != v19)
      {
        int v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      std::string __p = v25;
      BOOL v31 = v18;
      int v32 = &v24[4 * v23];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)BOOL v31 = v15;
      unint64_t v18 = v17 + 4;
    }
    BOOL v31 = v18;
  }
  if (v18 == __p) {
    int v27 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    int v27 = __p;
  }
  uint64_t v28 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v27, (v18 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    BOOL v31 = (char *)__p;
    operator delete(__p);
  }
  return v28;
}

void sub_1827F9434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::createLinkedFunctions(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend((id)objc_msgSend(a2, "functions"), "count"))
  {
    uint64_t v6 = (void *)[v4 functions];
    std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v53, a3);
    int FunctionArray = MTLMetalScriptSerializer::createFunctionArray((flatbuffers::FlatBufferBuilder *)a1, v6, (uint64_t)v53);
    std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v53);
  }
  else
  {
    int FunctionArray = 0;
  }
  if (objc_msgSend((id)objc_msgSend(v4, "privateFunctions"), "count"))
  {
    unint64_t v8 = (void *)[v4 privateFunctions];
    std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v52, a3);
    int v9 = MTLMetalScriptSerializer::createFunctionArray((flatbuffers::FlatBufferBuilder *)a1, v8, (uint64_t)v52);
    std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v52);
  }
  else
  {
    int v9 = 0;
  }
  if (objc_msgSend((id)objc_msgSend(v4, "groups"), "count"))
  {
    Class v10 = (void *)[v4 groups];
    uint64_t v54 = 0;
    uint64_t v55 = &v54;
    uint64_t v56 = 0x4812000000;
    int v57 = __Block_byref_object_copy__34;
    int v58 = __Block_byref_object_dispose__35;
    int v59 = &unk_1828FE28A;
    int v61 = 0;
    uint64_t v62 = 0;
    std::string __p = 0;
    *(void *)&long long v45 = MEMORY[0x1E4F143A8];
    *((void *)&v45 + 1) = 3221225472;
    *(void *)&long long v46 = ___ZN24MTLMetalScriptSerializerL12createGroupsERN11flatbuffers17FlatBufferBuilderEP12NSDictionaryIP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_block_invoke;
    *((void *)&v46 + 1) = &unk_1E52202E0;
    *(void *)&long long v47 = &v54;
    *((void *)&v47 + 1) = a1;
    [v10 enumerateKeysAndObjectsUsingBlock:&v45];
    uint64_t v11 = v55[7] - v55[6];
    if (v11) {
      uint64_t v12 = (void *)v55[6];
    }
    else {
      uint64_t v12 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionGroup>,std::allocator<flatbuffers::Offset<Mtl::FunctionGroup>>>(std::vector<flatbuffers::Offset<Mtl::FunctionGroup>> const&)::t;
    }
    int v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v12, v11 >> 2);
    _Block_object_dispose(&v54, 8);
    if (__p)
    {
      int v61 = __p;
      operator delete(__p);
    }
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = (void *)[v4 binaryFunctions];
  int v49 = 0;
  int v50 = 0;
  int v51 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v45 objects:&v54 count:16];
  if (v15)
  {
    int v42 = v13;
    int v43 = v9;
    unint64_t v44 = v4;
    uint64_t v16 = *(void *)v46;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v46 != v16) {
          objc_enumerationMutation(v14);
        }
        unint64_t v18 = (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v45 + 1) + 8 * i), "name"), "UTF8String");
        size_t v19 = strlen(v18);
        int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, v18, v19);
        int v21 = String;
        uint64_t v22 = v50;
        if (v50 >= v51)
        {
          uint64_t v24 = (char *)v49;
          uint64_t v25 = (v50 - (unsigned char *)v49) >> 2;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v51 - (unsigned char *)v49;
          if ((v51 - (unsigned char *)v49) >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v51, v28);
            uint64_t v24 = (char *)v49;
            uint64_t v22 = v50;
          }
          else
          {
            uint64_t v29 = 0;
          }
          uint64_t v30 = &v29[4 * v25];
          *(_DWORD *)uint64_t v30 = v21;
          unint64_t v23 = v30 + 4;
          while (v22 != v24)
          {
            int v31 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v30 - 1) = v31;
            v30 -= 4;
          }
          int v49 = v30;
          int v50 = v23;
          int v51 = &v29[4 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_DWORD *)int v50 = String;
          unint64_t v23 = v22 + 4;
        }
        int v50 = v23;
      }
      uint64_t v15 = [v14 countByEnumeratingWithState:&v45 objects:&v54 count:16];
    }
    while (v15);
    int v32 = v49;
    int v33 = v50;
    uint64_t v4 = v44;
    int v9 = v43;
    int v13 = v42;
  }
  else
  {
    int v33 = 0;
    int v32 = 0;
  }
  uint64_t v34 = v33 - v32;
  if (v34) {
    int v35 = v32;
  }
  else {
    int v35 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  int v37 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v35, v34 >> 2);
  if (v49)
  {
    int v50 = (char *)v49;
    operator delete(v49);
  }
  if (MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate((MTLMetalScriptSerializer *)v4, v36)
    || (uint64_t result = objc_msgSend((id)objc_msgSend(v4, "privateFunctions"), "count")) != 0)
  {
    *(unsigned char *)(a1 + 70) = 1;
    int v39 = *(_DWORD *)(a1 + 32);
    int v40 = *(_DWORD *)(a1 + 48);
    int v41 = *(_DWORD *)(a1 + 40);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, FunctionArray);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 8, v9);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 10, v13);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v37);
    return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v39 - (unsigned __int16)v40 + v41);
  }
  return result;
}

void sub_1827F98B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

uint64_t MTLMetalScriptSerializer::buildRenderPipeline(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  unsigned int v44 = 0;
  char v43 = 0;
  uint64_t v6 = *(void *)(a2 + 256);
  if (!v6) {
    goto LABEL_5;
  }
  std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(a3, v6);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
    if (!v45.__r_.__value_.__l.__size_)
    {
      int String = 0;
LABEL_11:
      operator delete(v45.__r_.__value_.__l.__data_);
      goto LABEL_12;
    }
    unint64_t v8 = (std::string *)v45.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if (!*((unsigned char *)&v45.__r_.__value_.__s + 23))
  {
LABEL_5:
    int String = 0;
    goto LABEL_12;
  }
  unint64_t v8 = &v45;
LABEL_8:
  int String = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v8, size);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v10 = *(void *)(a2 + 264);
  if (!v10) {
    goto LABEL_16;
  }
  std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(a3, v10);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v11 = v45.__r_.__value_.__l.__size_;
    if (!v45.__r_.__value_.__l.__size_)
    {
      int v13 = 0;
LABEL_22:
      operator delete(v45.__r_.__value_.__l.__data_);
      goto LABEL_23;
    }
    uint64_t v12 = (std::string *)v45.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  std::string::size_type v11 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if (!*((unsigned char *)&v45.__r_.__value_.__s + 23))
  {
LABEL_16:
    int v13 = 0;
    goto LABEL_23;
  }
  uint64_t v12 = &v45;
LABEL_19:
  int v13 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v12, v11);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_23:
  int v42 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 408));
  int v41 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 416));
  int v15 = MTLMetalScriptSerializer::addColorAttachmentsDescriptor(a1, *(flatbuffers::FlatBufferBuilder **)a2, (MTLRenderPipelineColorAttachmentDescriptorArray *)&v44, v14);
  int v17 = MTLMetalScriptSerializer::addVertexDescriptor(a1, *(flatbuffers::FlatBufferBuilder **)(a2 + 272), (MTLVertexDescriptor *)&v43, v16);
  unint64_t v18 = *(void **)(a2 + 496);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v47, a3);
  int LinkedFunctions = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v18, (uint64_t)v47);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v47);
  size_t v19 = *(void **)(a2 + 488);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v46, a3);
  int v20 = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v19, (uint64_t)v46);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v46);
  if (MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 496), v21)
    || MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 488), v22))
  {
    int v23 = v44;
    if ((v44 & 0x1FFFFFFE) < 6) {
      int v23 = v44 & 0x60000000 | 6;
    }
    unsigned int v44 = v23 | 0x80000000;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 496), "privateFunctions"), "count"))
  {
    LODWORD(v24) = v44;
  }
  else
  {
    uint64_t v25 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 488), "privateFunctions"), "count");
    uint64_t v24 = (MTLMetalScriptSerializer *)v44;
    if (!v25) {
      goto LABEL_34;
    }
  }
  unsigned int v26 = v24 & 0x60000000 | 1;
  if ((v24 & 0x1FFFFFFF) != 0) {
    unsigned int v26 = v24;
  }
  uint64_t v24 = (MTLMetalScriptSerializer *)(v26 | 0x80000000);
LABEL_34:
  if (v43)
  {
    if ((v24 & 0x1FFFFFFF) >= 5) {
      unsigned int v27 = v24;
    }
    else {
      unsigned int v27 = v24 & 0x60000000 | 5;
    }
    uint64_t v24 = (MTLMetalScriptSerializer *)(v27 | 0x80000000);
  }
  if (*(unsigned char *)(a2 + 152) || (int v39 = *(void **)(a2 + 256)) != 0 && [v39 patchType])
  {
    if ((v24 & 0x1FFFFFFF) >= 3) {
      unsigned int v28 = v24;
    }
    else {
      unsigned int v28 = v24 & 0xC0000000 | 3;
    }
    uint64_t v24 = (MTLMetalScriptSerializer *)(v28 | 0x20000000);
  }
  if (*(void *)(a2 + 96) >= 0x11uLL)
  {
    if ((v24 & 0x1FFFFFFF) >= 5) {
      unsigned int v29 = v24;
    }
    else {
      unsigned int v29 = v24 & 0xC0000000 | 5;
    }
    uint64_t v24 = (MTLMetalScriptSerializer *)(v29 | 0x20000000);
  }
  if (*(_DWORD *)(a2 + 476) < 2u)
  {
    if (!v24)
    {
      int v34 = 0;
      goto LABEL_64;
    }
  }
  else
  {
    if ((v24 & 0x1FFFFFFE) >= 6) {
      unsigned int v30 = v24;
    }
    else {
      unsigned int v30 = v24 & 0xC0000000 | 6;
    }
    uint64_t v24 = (MTLMetalScriptSerializer *)(v30 | 0x20000000);
  }
  MTLMetalScriptSerializer::generateEnableString(v24, &v45);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v31 = &v45;
  }
  else {
    int v31 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v32 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v32 = v45.__r_.__value_.__l.__size_;
  }
  int v33 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v31, v32);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  int v34 = v33;
LABEL_64:
  *((unsigned char *)a1 + 70) = 1;
  int v35 = *((_DWORD *)a1 + 8);
  int v36 = *((_DWORD *)a1 + 12);
  int v37 = *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v34);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 8, v13);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 10, *(void *)(a2 + 552), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 12, *(void *)(a2 + 560), 1);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 14, v17);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 16, (*(unsigned __int8 *)(a2 + 224) >> 3) & 3, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 18, *(void *)(a2 + 96), 16);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, *(unsigned __int8 *)(a2 + 104), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 22, *(unsigned __int8 *)(a2 + 112), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 24, *(unsigned __int8 *)(a2 + 120), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 26, *(unsigned __int8 *)(a2 + 128), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 28, *(unsigned __int8 *)(a2 + 136), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 30, *(unsigned __int8 *)(a2 + 88), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 32, *(unsigned int *)(a2 + 476), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 34, (*(_DWORD *)(a2 + 224) >> 10) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 36, (*(unsigned __int8 *)(a2 + 224) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 38, *(_DWORD *)(a2 + 224) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 40, (*(unsigned __int8 *)(a2 + 224) >> 1) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 42, *(void *)(a2 + 184), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 44, *(void *)(a2 + 216), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 46, *(void *)(a2 + 192), -1);
  flatbuffers::FlatBufferBuilder::AddElement<float>(a1, 48, *(float *)(a2 + 200), 1.0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 50, (*(_DWORD *)(a2 + 224) >> 8) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 52, v15);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 54, *(unsigned __int16 *)(a2 + 72), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 56, *(unsigned __int16 *)(a2 + 80), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 58, v42);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 60, v41);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 62, *(unsigned __int8 *)(a2 + 152), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 64, *(unsigned __int8 *)(a2 + 568), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 66, *(unsigned __int8 *)(a2 + 569), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 94, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 92, v20);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 68, *(unsigned __int8 *)(a2 + 176), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 70, *(_DWORD *)(a2 + 224) >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 72, (*(_DWORD *)(a2 + 224) >> 27) & 0xF, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 74, (*(_DWORD *)(a2 + 224) >> 26) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 76, (*(_DWORD *)(a2 + 224) >> 23) & 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 78, (*(_DWORD *)(a2 + 224) >> 15), 255);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 80, (*(_DWORD *)(a2 + 224) >> 14) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 82, (*(unsigned __int8 *)(a2 + 224) >> 6) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 84, (*(void *)(a2 + 224) >> 7) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 86, *(_DWORD *)(a2 + 232), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 88, *(_DWORD *)(a2 + 236), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 90, *(unsigned __int8 *)(a2 + 472), 0);
  return flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v35 - (unsigned __int16)v36 + v37);
}

void sub_1827FA064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(MTLMetalScriptSerializer *this, const MTLLinkedFunctions *a2)
{
  return objc_msgSend((id)-[MTLMetalScriptSerializer functions](this, "functions"), "count")
      || objc_msgSend((id)-[MTLMetalScriptSerializer groups](this, "groups"), "count")
      || objc_msgSend((id)-[MTLMetalScriptSerializer binaryFunctions](this, "binaryFunctions"), "count") != 0;
}

uint64_t MTLMetalScriptSerializer::buildMeshPipeline(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  v45[4] = *MEMORY[0x1E4F143B8];
  LODWORD(v43.super.isa) = 0;
  uint64_t v6 = *(void *)(a2 + 96);
  if (!v6) {
    goto LABEL_5;
  }
  std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(a3, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
    {
      int String = 0;
LABEL_11:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_12;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
LABEL_5:
    int String = 0;
    goto LABEL_12;
  }
  p_p = &__p;
LABEL_8:
  int String = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_11;
  }
LABEL_12:
  int v41 = String;
  uint64_t v10 = *(void *)(a2 + 104);
  if (!v10) {
    goto LABEL_16;
  }
  std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(a3, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
    {
      int v13 = 0;
LABEL_22:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_23;
    }
    uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
LABEL_16:
    int v13 = 0;
    goto LABEL_23;
  }
  uint64_t v12 = &__p;
LABEL_19:
  int v13 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v12, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v14 = *(void *)(a2 + 88);
  if (!v14) {
    goto LABEL_27;
  }
  std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(a3, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
    {
      int v17 = 0;
LABEL_33:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_34;
    }
    uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_30;
  }
  std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
LABEL_27:
    int v17 = 0;
    goto LABEL_34;
  }
  uint64_t v16 = &__p;
LABEL_30:
  int v17 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v16, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
LABEL_34:
  int v18 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 152));
  int v19 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 160));
  int v20 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 144));
  int v22 = MTLMetalScriptSerializer::addColorAttachmentsDescriptor(a1, *(flatbuffers::FlatBufferBuilder **)a2, &v43, v21);
  int v23 = *(void **)(a2 + 224);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v45, a3);
  int LinkedFunctions = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v23, (uint64_t)v45);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v45);
  uint64_t v24 = *(void **)(a2 + 216);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v44, a3);
  int v39 = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v24, (uint64_t)v44);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v44);
  uint64_t v25 = *(void **)(a2 + 208);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)&v43.super.isa + 4, a3);
  int v38 = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v25, (uint64_t)&v43.super.isa + 4);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100]((Class *)((char *)&v43.super.isa + 4));
  if (MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 224), v26)
    || MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 216), v27)
    || MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 208), v28))
  {
    int isa = (int)v43.super.isa;
    if ((unint64_t)((uint64_t)v43.super.isa & 0x1FFFFFFF) < 9) {
      int isa = (uint64_t)v43.super.isa & 0x60000000 | 9;
    }
    unsigned int v30 = isa | 0x80000000;
  }
  else
  {
    unsigned int v30 = v43.super.isa;
  }
  if ((v30 & 0x1FFFFFFF) < 7) {
    unsigned int v30 = v30 & 0x60000000 | 7;
  }
  MTLMetalScriptSerializer::generateEnableString((MTLMetalScriptSerializer *)(v30 | 0x80000000), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v31 = &__p;
  }
  else {
    int v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
  }
  int v33 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v31, v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)a1 + 70) = 1;
  int v34 = *((_DWORD *)a1 + 12);
  int v36 = *((_DWORD *)a1 + 10);
  int v37 = *((_DWORD *)a1 + 8);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v33);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 8, v41);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v13);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v17);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 58, v18);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 60, v19);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 56, v20);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 50, v22);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 40, *(void *)(a2 + 32), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 86, (*(unsigned __int8 *)(a2 + 60) >> 4) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 44, *(void *)(a2 + 48), -1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 72, (*(_DWORD *)(a2 + 60) >> 28) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 74, *(unsigned char *)(a2 + 63) & 0xF, 0);
  flatbuffers::FlatBufferBuilder::AddElement<float>(a1, 46, *(float *)(a2 + 56), 1.0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 34, (*(unsigned __int8 *)(a2 + 60) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 76, (*(_DWORD *)(a2 + 60) >> 23) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 42, *(void *)(a2 + 40), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 78, (*(_DWORD *)(a2 + 60) >> 20) & 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 82, (*(_DWORD *)(a2 + 60) >> 11) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 20, *(void *)(a2 + 136), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 32, *(unsigned __int8 *)(a2 + 60) >> 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 38, (*(unsigned __int8 *)(a2 + 60) >> 1) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 36, *(_DWORD *)(a2 + 60) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 80, (*(_DWORD *)(a2 + 60) >> 12), 255);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 70, *(unsigned __int8 *)(a2 + 24), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 84, (*(unsigned __int8 *)(a2 + 60) >> 3) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 52, *(unsigned __int16 *)(a2 + 8), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 30, (*(void *)(a2 + 60) >> 35) & 0xFLL, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 54, *(unsigned __int16 *)(a2 + 16), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 26, *(void *)(a2 + 264), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 62, *(_DWORD *)(a2 + 60) >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 24, *(void *)(a2 + 256), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 28, *(void *)(a2 + 272), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 88, *(_DWORD *)(a2 + 68), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 90, (*(_DWORD *)(a2 + 60) >> 30) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 66, (*(void *)(a2 + 60) >> 33) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 64, *(_DWORD *)(a2 + 64) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 68, (*(void *)(a2 + 60) >> 34) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 22, *(void *)(a2 + 128), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 18, *(void *)(a2 + 120), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 16, *(void *)(a2 + 112), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 14, (*(void *)(a2 + 60) >> 40) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 12, (*(void *)(a2 + 60) >> 39) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 96, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 92, v38);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 94, v39);
  return flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v37 - (unsigned __int16)v34 + v36);
}

void sub_1827FA81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *MTLMetalScriptSerializer::generateEnableString@<X0>(MTLMetalScriptSerializer *this@<X0>, std::string *a2@<X8>)
{
  int v2 = (int)this;
  uint64_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  uint64_t v5 = v2 & 0x1FFFFFFF;
  if ((v2 & 0x1FFFFFFF) != 0 && v5 < 0xD) {
    uint64_t result = std::string::append(a2, off_1E5220300[v5 - 1]);
  }
  if ((v2 & 0x20000000) != 0 && (v2 & 0xC0000000) != 0x80000000)
  {
    uint64_t v6 = " supportsFamily(mac2)";
    if (v2 >= 0) {
      uint64_t v6 = " || supportsFamily(mac2)";
    }
    if (((v5 != 0) & ((v2 & 0x40000000u) >> 30)) != 0) {
      uint64_t v7 = " && supportsFamily(mac2)";
    }
    else {
      uint64_t v7 = v6;
    }
    return std::string::append(a2, v7);
  }
  return result;
}

void sub_1827FA928(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::buildTileRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[4] = *MEMORY[0x1E4F143B8];
  std::function<std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(a3, *(void *)(a2 + 24));
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      int String = 0;
      goto LABEL_11;
    }
    p_p = &__p;
    goto LABEL_6;
  }
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_6:
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, (const char *)p_p, size);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  int String = 0;
LABEL_10:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  int v9 = addPipelineBufferDescriptor((flatbuffers::FlatBufferBuilder *)a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 56));
  int v11 = MTLMetalScriptSerializer::addTileColorAttachmentsDescriptor((MTLMetalScriptSerializer *)a1, *(flatbuffers::FlatBufferBuilder **)a2, v10);
  uint64_t v12 = *(void **)(a2 + 96);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v25, a3);
  int LinkedFunctions = MTLMetalScriptSerializer::createLinkedFunctions(a1, v12, (uint64_t)v25);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v25);
  if (MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 96), v14)) {
    int v15 = -2147483642;
  }
  else {
    int v15 = 0;
  }
  if ((v15 & 4) != 0) {
    uint64_t v16 = v15 | 0x80000000;
  }
  else {
    uint64_t v16 = 2147483652;
  }
  MTLMetalScriptSerializer::generateEnableString((MTLMetalScriptSerializer *)v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v17 = &__p;
  }
  else {
    int v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
  }
  int v19 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, (const char *)v17, v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 70) = 1;
  int v20 = *(_DWORD *)(a1 + 32);
  int v21 = *(_DWORD *)(a1 + 48);
  int v22 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v19);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 20, v9);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 18, v11);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 12, *(void *)(a2 + 112), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 22, *(unsigned __int8 *)(a2 + 120), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 26, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 14, *(void *)(a2 + 8), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 16, *(void *)(a2 + 48), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 10, *(unsigned __int16 *)(a2 + 64), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 8, *(unsigned __int8 *)(a2 + 32), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 24, *(unsigned __int8 *)(a2 + 72), 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v20 - (unsigned __int16)v21 + v22);
}

void sub_1827FABD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::addFunctionConstants(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, MTLFunctionConstantValuesInternal *a3)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  std::string __p = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  obuint64_t j = (id)[(flatbuffers::FlatBufferBuilder *)a2 newNamedConstantArray];
  uint64_t v4 = [obj countByEnumeratingWithState:&v61 objects:v70 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v62;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v62 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v61 + 1) + 8 * i);
        unint64_t v8 = (flatbuffers::FlatBufferBuilder *)[v7 name];
        int v10 = MTLMetalScriptSerializer::addString(this, v8, v9);
        MTLDataType v11 = [v7 dataType];
        LODWORD(v7) = makeValue(this, v11, (_DWORD *)[v7 data]);
        *((unsigned char *)this + 70) = 1;
        int v12 = *((_DWORD *)this + 8);
        int v13 = *((_DWORD *)this + 12);
        int v14 = *((_DWORD *)this + 10);
        unsigned int v15 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 2);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v15);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 8, v11, 0);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 10, (int)v7);
        int v16 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
        int v17 = v16;
        std::string::size_type v18 = v66;
        if (v66 >= v67)
        {
          int v20 = (char *)__p;
          uint64_t v21 = (v66 - (unsigned char *)__p) >> 2;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v67 - (unsigned char *)__p;
          if ((v67 - (unsigned char *)__p) >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v67, v24);
            int v20 = (char *)__p;
            std::string::size_type v18 = v66;
          }
          else
          {
            uint64_t v25 = 0;
          }
          unsigned int v26 = &v25[4 * v21];
          *(_DWORD *)unsigned int v26 = v17;
          int v19 = v26 + 4;
          while (v18 != v20)
          {
            int v27 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v26 - 1) = v27;
            v26 -= 4;
          }
          std::string __p = v26;
          uint64_t v66 = v19;
          unint64_t v67 = &v25[4 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v66 = v16;
          int v19 = v18 + 4;
        }
        uint64_t v66 = v19;
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v61 objects:v70 count:16];
    }
    while (v4);
  }

  unsigned int v28 = (void *)[(flatbuffers::FlatBufferBuilder *)a2 newIndexedConstantArray];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v29 = [v28 countByEnumeratingWithState:&v57 objects:v69 count:16];
  if (v29)
  {
    uint64_t v30 = *(void *)v58;
    id obja = v28;
    do
    {
      for (uint64_t j = 0; j != v29; ++j)
      {
        if (*(void *)v58 != v30) {
          objc_enumerationMutation(obja);
        }
        std::string::size_type v32 = *(void **)(*((void *)&v57 + 1) + 8 * j);
        __int16 v68 = [v32 index];
        MTLDataType v33 = [v32 dataType];
        LODWORD(v32) = makeValue(this, v33, (_DWORD *)[v32 data]);
        int v34 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)this, &v68);
        *((unsigned char *)this + 70) = 1;
        int v35 = *((_DWORD *)this + 8);
        int v36 = *((_DWORD *)this + 12);
        int v37 = *((_DWORD *)this + 10);
        unsigned int v38 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 1);
        flatbuffers::FlatBufferBuilder::TrackField(this, 4, v38);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, v34);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(this, 8, v33, 0);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 10, (int)v32);
        int v39 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v35 - (unsigned __int16)v36 + v37);
        int v40 = v39;
        int v41 = v66;
        if (v66 >= v67)
        {
          MTLRenderPipelineColorAttachmentDescriptorArray v43 = (char *)__p;
          uint64_t v44 = (v66 - (unsigned char *)__p) >> 2;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v46 = v67 - (unsigned char *)__p;
          if ((v67 - (unsigned char *)__p) >> 1 > v45) {
            unint64_t v45 = v46 >> 1;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v45;
          }
          if (v47)
          {
            long long v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v67, v47);
            MTLRenderPipelineColorAttachmentDescriptorArray v43 = (char *)__p;
            int v41 = v66;
          }
          else
          {
            long long v48 = 0;
          }
          int v49 = &v48[4 * v44];
          *(_DWORD *)int v49 = v40;
          int v42 = v49 + 4;
          while (v41 != v43)
          {
            int v50 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v49 - 1) = v50;
            v49 -= 4;
          }
          std::string __p = v49;
          uint64_t v66 = v42;
          unint64_t v67 = &v48[4 * v47];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v66 = v39;
          int v42 = v41 + 4;
        }
        uint64_t v66 = v42;
      }
      unsigned int v28 = obja;
      uint64_t v29 = [obja countByEnumeratingWithState:&v57 objects:v69 count:16];
    }
    while (v29);
  }

  int v51 = (char *)__p;
  if (__p != v66)
  {
    uint64_t v52 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)__p, (v66 - (unsigned char *)__p) >> 2);
    int v51 = (char *)__p;
    if (!__p) {
      return v52;
    }
    goto LABEL_53;
  }
  uint64_t v52 = 0;
  if (__p)
  {
LABEL_53:
    uint64_t v66 = v51;
    operator delete(v51);
  }
  return v52;
}

void sub_1827FB0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::initFromScript(NSObject **a1, dispatch_data_t data)
{
  if (data)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    dispatch_data_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    if (v3)
    {
      uint64_t v4 = v3;
      if (buffer_ptr)
      {
        uint64_t v5 = *a1;
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = ___ZN25MTLMetalScriptBuilderImpl14initFromScriptEPU27objcproto16OS_dispatch_data8NSObject_block_invoke;
        block[3] = &__block_descriptor_56_e5_v8__0l;
        block[4] = a1;
        void block[5] = buffer_ptr;
        block[6] = size_ptr;
        dispatch_sync(v5, block);
      }
      dispatch_release(v4);
    }
  }
}

void ___ZN25MTLMetalScriptBuilderImpl14initFromScriptEPU27objcproto16OS_dispatch_data8NSObject_block_invoke(uint64_t a1)
{
  int v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 32);
  MTLMetalScriptBuilderImpl::resetInternal(v2, 1);
  dispatch_data_t v3 = *(char **)(a1 + 40);

  MTLMetalScriptBuilderImpl::initFromData(v2, v3);
}

void MTLMetalScriptBuilderImpl::initFromData(MTLMetalScriptBuilderImpl *this, char *a2)
{
  dispatch_data_t v3 = &a2[*(unsigned int *)a2];
  uint64_t v4 = *(int *)v3;
  uint64_t v5 = -v4;
  uint64_t v6 = &v3[-v4];
  uint64_t v192 = v3;
  if (*(unsigned __int16 *)v6 >= 9u)
  {
    uint64_t v7 = *((unsigned __int16 *)v6 + 4);
    if (v7)
    {
      unint64_t v8 = &v3[v7];
      uint64_t v9 = *(unsigned int *)v8;
      MTLDataType v11 = (unsigned int *)&v8[v9 + 4];
      uint64_t v10 = *(unsigned int *)&v8[v9];
      if (v10)
      {
        int v12 = (void **)((char *)this + 536);
        int v13 = &v11[v10];
        do
        {
          int v14 = (char *)v11 + *v11;
          unsigned int v15 = &v14[*(unsigned __int16 *)&v14[-*(int *)v14 + 4]];
          std::string::basic_string[abi:ne180100](__p, (void *)&v15[*(unsigned int *)v15 + 4], *(unsigned int *)&v15[*(unsigned int *)v15]);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 128, (unsigned __int8 *)__p, (uint64_t)__p);
          if (SHIBYTE(v196) < 0) {
            operator delete(__p[0]);
          }
          int v16 = Mtl::CloneNamedPredicate<Mtl::NamedPredicate>((MTLMetalScriptBuilderImpl *)((char *)this + 248), v14);
          int v17 = v16;
          std::string::size_type v18 = (char *)*((void *)this + 68);
          unint64_t v19 = *((void *)this + 69);
          if ((unint64_t)v18 >= v19)
          {
            uint64_t v21 = (char *)*v12;
            uint64_t v22 = (v18 - (unsigned char *)*v12) >> 2;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = v19 - (void)v21;
            if (v24 >> 1 > v23) {
              unint64_t v23 = v24 >> 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              unsigned int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 552, v25);
              std::string::size_type v18 = (char *)*((void *)this + 68);
              uint64_t v21 = (char *)*((void *)this + 67);
            }
            else
            {
              unsigned int v26 = 0;
            }
            int v27 = &v26[4 * v22];
            *(_DWORD *)int v27 = v17;
            int v20 = v27 + 4;
            while (v18 != v21)
            {
              int v28 = *((_DWORD *)v18 - 1);
              v18 -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            *((void *)this + 67) = v27;
            *((void *)this + 68) = v20;
            *((void *)this + 69) = &v26[4 * v25];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(_DWORD *)std::string::size_type v18 = v16;
            int v20 = v18 + 4;
          }
          *((void *)this + 68) = v20;
          ++v11;
        }
        while (v11 != v13);
        dispatch_data_t v3 = v192;
        uint64_t v5 = -(uint64_t)*(int *)v192;
      }
    }
  }
  uint64_t v29 = &v3[v5];
  if (*(unsigned __int16 *)v29 >= 0xDu)
  {
    uint64_t v30 = *((unsigned __int16 *)v29 + 6);
    if (v30)
    {
      int v31 = (int *)&v192[v30 + *(unsigned int *)&v192[v30]];
      uint64_t v32 = *v31;
      uint64_t v33 = -v32;
      int v34 = (unsigned __int16 *)((char *)v31 - v32);
      if (*v34 >= 5u)
      {
        uint64_t v35 = v34[2];
        if (v35)
        {
          int v36 = (unsigned int *)((char *)v31 + v35);
          uint64_t v37 = *v36;
          int v39 = (unsigned int *)((char *)v36 + v37 + 4);
          uint64_t v38 = *(unsigned int *)((char *)v36 + v37);
          if (v38)
          {
            int v40 = &v39[v38];
            int v41 = (void **)((char *)this + 344);
            do
            {
              int v42 = (char *)v39 + *v39;
              MTLRenderPipelineColorAttachmentDescriptorArray v43 = &v42[-*(int *)v42];
              if (*((_WORD *)v43 + 2)) {
                uint64_t v44 = &v42[*((unsigned __int16 *)v43 + 2) + *(unsigned int *)&v42[*((unsigned __int16 *)v43 + 2)]];
              }
              else {
                uint64_t v44 = 0;
              }
              std::string::basic_string[abi:ne180100](__p, (void *)&v42[*((unsigned __int16 *)v43 + 3) + 4 + *(unsigned int *)&v42[*((unsigned __int16 *)v43 + 3)]], *(unsigned int *)&v42[*((unsigned __int16 *)v43 + 3)+ *(unsigned int *)&v42[*((unsigned __int16 *)v43 + 3)]]);
              std::string::basic_string[abi:ne180100](__dst, (void *)(v44 + 4), *(unsigned int *)v44);
              unsigned int v197 = __dst;
              unint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 48, (unsigned __int8 *)__dst, (uint64_t)&std::piecewise_construct, (long long **)&v197);
              uint64_t v46 = v45 + 40;
              if ((char)v45[63] < 0) {
                operator delete(*(void **)v46);
              }
              *(_OWORD *)uint64_t v46 = *(_OWORD *)__p;
              *((void *)v46 + 2) = v196;
              HIBYTE(v196) = 0;
              LOBYTE(__p[0]) = 0;
              if (v194 < 0)
              {
                operator delete(__dst[0]);
                if (SHIBYTE(v196) < 0) {
                  operator delete(__p[0]);
                }
              }
              int v47 = Mtl::CloneNamedPredicate<Mtl::NamedPredicate>((MTLMetalScriptBuilderImpl *)((char *)this + 248), v42);
              int v48 = v47;
              int v50 = (char *)*((void *)this + 44);
              unint64_t v49 = *((void *)this + 45);
              if ((unint64_t)v50 >= v49)
              {
                uint64_t v52 = (char *)*v41;
                uint64_t v53 = (v50 - (unsigned char *)*v41) >> 2;
                unint64_t v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v55 = v49 - (void)v52;
                if (v55 >> 1 > v54) {
                  unint64_t v54 = v55 >> 1;
                }
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v56 = v54;
                }
                if (v56)
                {
                  long long v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 360, v56);
                  uint64_t v52 = (char *)*((void *)this + 43);
                  int v50 = (char *)*((void *)this + 44);
                }
                else
                {
                  long long v57 = 0;
                }
                long long v58 = &v57[4 * v53];
                *(_DWORD *)long long v58 = v48;
                int v51 = v58 + 4;
                while (v50 != v52)
                {
                  int v59 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v58 - 1) = v59;
                  v58 -= 4;
                }
                *((void *)this + 43) = v58;
                *((void *)this + 44) = v51;
                *((void *)this + 45) = &v57[4 * v56];
                if (v52) {
                  operator delete(v52);
                }
              }
              else
              {
                *(_DWORD *)int v50 = v47;
                int v51 = v50 + 4;
              }
              *((void *)this + 44) = v51;
              ++v39;
            }
            while (v39 != v40);
            uint64_t v33 = -(uint64_t)*v31;
          }
        }
      }
      if (*(unsigned __int16 *)((char *)v31 + v33) >= 7u)
      {
        if (*(_WORD *)((char *)v31 + v33 + 6))
        {
          long long v60 = (unsigned int *)((char *)v31 + *(unsigned __int16 *)((char *)v31 + v33 + 6));
          uint64_t v61 = *v60;
          long long v63 = (unsigned int *)((char *)v60 + v61 + 4);
          uint64_t v62 = *(unsigned int *)((char *)v60 + v61);
          if (v62)
          {
            long long v64 = &v63[v62];
            uint64_t v65 = (void **)((char *)this + 368);
            unint64_t v191 = v31;
            do
            {
              uint64_t v66 = (char *)v63 + *v63;
              int v67 = Mtl::CloneSpecializedFunctionLibrary<Mtl::SpecializedFunctionLibrary>((uint64_t)this + 248, v66);
              int v68 = v67;
              uint64_t v70 = (char *)*((void *)this + 47);
              unint64_t v69 = *((void *)this + 48);
              if ((unint64_t)v70 >= v69)
              {
                int v72 = (char *)*v65;
                uint64_t v73 = (v70 - (unsigned char *)*v65) >> 2;
                unint64_t v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v75 = v69 - (void)v72;
                if (v75 >> 1 > v74) {
                  unint64_t v74 = v75 >> 1;
                }
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v76 = v74;
                }
                if (v76)
                {
                  int v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 384, v76);
                  int v72 = (char *)*((void *)this + 46);
                  uint64_t v70 = (char *)*((void *)this + 47);
                }
                else
                {
                  int v77 = 0;
                }
                int v78 = &v77[4 * v73];
                *(_DWORD *)int v78 = v68;
                uint64_t v71 = v78 + 4;
                while (v70 != v72)
                {
                  int v79 = *((_DWORD *)v70 - 1);
                  v70 -= 4;
                  *((_DWORD *)v78 - 1) = v79;
                  v78 -= 4;
                }
                *((void *)this + 46) = v78;
                *((void *)this + 47) = v71;
                *((void *)this + 48) = &v77[4 * v76];
                if (v72) {
                  operator delete(v72);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v70 = v67;
                uint64_t v71 = v70 + 4;
              }
              *((void *)this + 47) = v71;
              unsigned int v80 = &v66[-*(int *)v66];
              if (*(unsigned __int16 *)v80 >= 5u && (uint64_t v81 = *((unsigned __int16 *)v80 + 2)) != 0) {
                std::string::basic_string[abi:ne180100](__p, (void *)&v66[v81 + 4 + *(unsigned int *)&v66[v81]], *(unsigned int *)&v66[v81 + *(unsigned int *)&v66[v81]]);
              }
              else {
                std::string::basic_string[abi:ne180100]<0>(__p, "");
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 168, (unsigned __int8 *)__p, (uint64_t)__p);
              if (SHIBYTE(v196) < 0) {
                operator delete(__p[0]);
              }
              ++v63;
            }
            while (v63 != v64);
            int v31 = v191;
            uint64_t v33 = -(uint64_t)*v191;
          }
        }
      }
      int v82 = (unsigned __int16 *)((char *)v31 + v33);
      if (*v82 >= 9u)
      {
        uint64_t v83 = v82[4];
        if (v83)
        {
          int v84 = (unsigned int *)((char *)v31 + v83);
          uint64_t v85 = *v84;
          uint64_t v87 = (unsigned int *)((char *)v84 + v85 + 4);
          uint64_t v86 = *(unsigned int *)((char *)v84 + v85);
          if (v86)
          {
            unsigned int v88 = &v87[v86];
            unsigned int v89 = (void **)((char *)this + 392);
            do
            {
              std::string::size_type v90 = (char *)v87 + *v87;
              int v91 = Mtl::CloneStitchedLibrary<Mtl::StitchedLibrary>((uint64_t)this + 248, v90);
              int v92 = v91;
              int v94 = (char *)*((void *)this + 50);
              unint64_t v93 = *((void *)this + 51);
              if ((unint64_t)v94 >= v93)
              {
                uint64_t v96 = (char *)*v89;
                uint64_t v97 = (v94 - (unsigned char *)*v89) >> 2;
                unint64_t v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v99 = v93 - (void)v96;
                if (v99 >> 1 > v98) {
                  unint64_t v98 = v99 >> 1;
                }
                if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v100 = v98;
                }
                if (v100)
                {
                  char v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 408, v100);
                  uint64_t v96 = (char *)*((void *)this + 49);
                  int v94 = (char *)*((void *)this + 50);
                }
                else
                {
                  char v101 = 0;
                }
                unint64_t v102 = &v101[4 * v97];
                *(_DWORD *)unint64_t v102 = v92;
                int v95 = v102 + 4;
                while (v94 != v96)
                {
                  int v103 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *((_DWORD *)v102 - 1) = v103;
                  v102 -= 4;
                }
                *((void *)this + 49) = v102;
                *((void *)this + 50) = v95;
                *((void *)this + 51) = &v101[4 * v100];
                if (v96) {
                  operator delete(v96);
                }
              }
              else
              {
                *(_DWORD *)int v94 = v91;
                int v95 = v94 + 4;
              }
              *((void *)this + 50) = v95;
              uint64_t v104 = &v90[-*(int *)v90];
              if (*(unsigned __int16 *)v104 >= 5u && (uint64_t v105 = *((unsigned __int16 *)v104 + 2)) != 0) {
                std::string::basic_string[abi:ne180100](__p, (void *)&v90[v105 + 4 + *(unsigned int *)&v90[v105]], *(unsigned int *)&v90[v105 + *(unsigned int *)&v90[v105]]);
              }
              else {
                std::string::basic_string[abi:ne180100]<0>(__p, "");
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 208, (unsigned __int8 *)__p, (uint64_t)__p);
              if (SHIBYTE(v196) < 0) {
                operator delete(__p[0]);
              }
              ++v87;
            }
            while (v87 != v88);
          }
        }
      }
    }
  }
  int v106 = &v192[-*(int *)v192];
  if (*(unsigned __int16 *)v106 >= 0xFu)
  {
    uint64_t v107 = *((unsigned __int16 *)v106 + 7);
    if (v107)
    {
      int v108 = &v192[v107 + *(unsigned int *)&v192[v107]];
      uint64_t v109 = *(int *)v108;
      uint64_t v110 = -v109;
      uint64_t v111 = &v108[-v109];
      if (*(unsigned __int16 *)v111 >= 5u)
      {
        uint64_t v112 = *((unsigned __int16 *)v111 + 2);
        if (v112)
        {
          int v113 = &v108[v112];
          uint64_t v114 = *(unsigned int *)v113;
          int v116 = &v113[v114 + 4];
          uint64_t v115 = *(unsigned int *)&v113[v114];
          if (v115)
          {
            unsigned int v117 = (void **)((char *)this + 416);
            uint64_t v118 = (unsigned int *)&v116[4 * v115];
            do
            {
              int v119 = Mtl::CloneComputePipelineDescriptor<Mtl::ComputePipelineDescriptor>((uint64_t)this + 248, &v116[*(unsigned int *)v116]);
              int v120 = v119;
              unint64_t v122 = (char *)*((void *)this + 53);
              unint64_t v121 = *((void *)this + 54);
              if ((unint64_t)v122 >= v121)
              {
                uint64_t v124 = (char *)*v117;
                uint64_t v125 = (v122 - (unsigned char *)*v117) >> 2;
                unint64_t v126 = v125 + 1;
                if ((unint64_t)(v125 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v127 = v121 - (void)v124;
                if (v127 >> 1 > v126) {
                  unint64_t v126 = v127 >> 1;
                }
                if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v128 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v128 = v126;
                }
                if (v128)
                {
                  v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 432, v128);
                  uint64_t v124 = (char *)*((void *)this + 52);
                  unint64_t v122 = (char *)*((void *)this + 53);
                }
                else
                {
                  v129 = 0;
                }
                uint64_t v130 = &v129[4 * v125];
                *(_DWORD *)uint64_t v130 = v120;
                uint64_t v123 = v130 + 4;
                while (v122 != v124)
                {
                  int v131 = *((_DWORD *)v122 - 1);
                  v122 -= 4;
                  *((_DWORD *)v130 - 1) = v131;
                  v130 -= 4;
                }
                *((void *)this + 52) = v130;
                *((void *)this + 53) = v123;
                *((void *)this + 54) = &v129[4 * v128];
                if (v124) {
                  operator delete(v124);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v122 = v119;
                uint64_t v123 = v122 + 4;
              }
              *((void *)this + 53) = v123;
              v116 += 4;
            }
            while (v116 != (const char *)v118);
            uint64_t v110 = -(uint64_t)*(int *)v108;
          }
        }
      }
      if (*(unsigned __int16 *)&v108[v110] >= 7u)
      {
        if (*(_WORD *)&v108[v110 + 6])
        {
          int v132 = &v108[*(unsigned __int16 *)&v108[v110 + 6]];
          uint64_t v133 = *(unsigned int *)v132;
          int v135 = &v132[v133 + 4];
          uint64_t v134 = *(unsigned int *)&v132[v133];
          if (v134)
          {
            int v136 = (void **)((char *)this + 440);
            int v137 = (unsigned int *)&v135[4 * v134];
            do
            {
              int v138 = Mtl::CloneRenderPipelineDescriptor<Mtl::RenderPipelineDescriptor>((uint64_t)this + 248, &v135[*(unsigned int *)v135]);
              int v139 = v138;
              uint64_t v141 = (char *)*((void *)this + 56);
              unint64_t v140 = *((void *)this + 57);
              if ((unint64_t)v141 >= v140)
              {
                uint64_t v143 = (char *)*v136;
                uint64_t v144 = (v141 - (unsigned char *)*v136) >> 2;
                unint64_t v145 = v144 + 1;
                if ((unint64_t)(v144 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v146 = v140 - (void)v143;
                if (v146 >> 1 > v145) {
                  unint64_t v145 = v146 >> 1;
                }
                if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v147 = v145;
                }
                if (v147)
                {
                  int v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 456, v147);
                  uint64_t v143 = (char *)*((void *)this + 55);
                  uint64_t v141 = (char *)*((void *)this + 56);
                }
                else
                {
                  int v148 = 0;
                }
                int v149 = &v148[4 * v144];
                *(_DWORD *)int v149 = v139;
                unint64_t v142 = v149 + 4;
                while (v141 != v143)
                {
                  int v150 = *((_DWORD *)v141 - 1);
                  v141 -= 4;
                  *((_DWORD *)v149 - 1) = v150;
                  v149 -= 4;
                }
                *((void *)this + 55) = v149;
                *((void *)this + 56) = v142;
                *((void *)this + 57) = &v148[4 * v147];
                if (v143) {
                  operator delete(v143);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v141 = v138;
                unint64_t v142 = v141 + 4;
              }
              *((void *)this + 56) = v142;
              v135 += 4;
            }
            while (v135 != (const char *)v137);
            uint64_t v110 = -(uint64_t)*(int *)v108;
          }
        }
      }
      if (*(unsigned __int16 *)&v108[v110] >= 9u)
      {
        if (*(_WORD *)&v108[v110 + 8])
        {
          uint64_t v151 = &v108[*(unsigned __int16 *)&v108[v110 + 8]];
          uint64_t v152 = *(unsigned int *)v151;
          unsigned int v154 = &v151[v152 + 4];
          uint64_t v153 = *(unsigned int *)&v151[v152];
          if (v153)
          {
            uint64_t v155 = (void **)((char *)this + 464);
            unint64_t v156 = (unsigned int *)&v154[4 * v153];
            do
            {
              int v157 = Mtl::CloneTileRenderPipelineDescriptor<Mtl::TileRenderPipelineDescriptor>((uint64_t)this + 248, &v154[*(unsigned int *)v154]);
              int v158 = v157;
              unint64_t v160 = (char *)*((void *)this + 59);
              unint64_t v159 = *((void *)this + 60);
              if ((unint64_t)v160 >= v159)
              {
                uint64_t v162 = (char *)*v155;
                uint64_t v163 = (v160 - (unsigned char *)*v155) >> 2;
                unint64_t v164 = v163 + 1;
                if ((unint64_t)(v163 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v165 = v159 - (void)v162;
                if (v165 >> 1 > v164) {
                  unint64_t v164 = v165 >> 1;
                }
                if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v166 = v164;
                }
                if (v166)
                {
                  uint64_t v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 480, v166);
                  uint64_t v162 = (char *)*((void *)this + 58);
                  unint64_t v160 = (char *)*((void *)this + 59);
                }
                else
                {
                  uint64_t v167 = 0;
                }
                int v168 = &v167[4 * v163];
                *(_DWORD *)int v168 = v158;
                uint64_t v161 = v168 + 4;
                while (v160 != v162)
                {
                  int v169 = *((_DWORD *)v160 - 1);
                  v160 -= 4;
                  *((_DWORD *)v168 - 1) = v169;
                  v168 -= 4;
                }
                *((void *)this + 58) = v168;
                *((void *)this + 59) = v161;
                *((void *)this + 60) = &v167[4 * v166];
                if (v162) {
                  operator delete(v162);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v160 = v157;
                uint64_t v161 = v160 + 4;
              }
              *((void *)this + 59) = v161;
              v154 += 4;
            }
            while (v154 != (const char *)v156);
            uint64_t v110 = -(uint64_t)*(int *)v108;
          }
        }
      }
      uint64_t v170 = &v108[v110];
      if (*(unsigned __int16 *)v170 >= 0xBu)
      {
        uint64_t v171 = *((unsigned __int16 *)v170 + 5);
        if (v171)
        {
          uint64_t v172 = &v108[v171];
          uint64_t v173 = *(unsigned int *)v172;
          uint64_t v175 = &v172[v173 + 4];
          uint64_t v174 = *(unsigned int *)&v172[v173];
          if (v174)
          {
            uint64_t v176 = (void **)((char *)this + 560);
            int v177 = (unsigned int *)&v175[4 * v174];
            do
            {
              int v178 = Mtl::CloneMeshRenderPipelineDescriptor<Mtl::MeshRenderPipelineDescriptor>((uint64_t)this + 248, &v175[*(unsigned int *)v175]);
              int v179 = v178;
              unint64_t v180 = (char *)*((void *)this + 71);
              unint64_t v181 = *((void *)this + 72);
              if ((unint64_t)v180 >= v181)
              {
                int v183 = (char *)*v176;
                uint64_t v184 = (v180 - (unsigned char *)*v176) >> 2;
                unint64_t v185 = v184 + 1;
                if ((unint64_t)(v184 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v186 = v181 - (void)v183;
                if (v186 >> 1 > v185) {
                  unint64_t v185 = v186 >> 1;
                }
                if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v187 = v185;
                }
                if (v187)
                {
                  int v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 576, v187);
                  unint64_t v180 = (char *)*((void *)this + 71);
                  int v183 = (char *)*((void *)this + 70);
                }
                else
                {
                  int v188 = 0;
                }
                unsigned int v189 = &v188[4 * v184];
                *(_DWORD *)unsigned int v189 = v179;
                int v182 = v189 + 4;
                while (v180 != v183)
                {
                  int v190 = *((_DWORD *)v180 - 1);
                  v180 -= 4;
                  *((_DWORD *)v189 - 1) = v190;
                  v189 -= 4;
                }
                *((void *)this + 70) = v189;
                *((void *)this + 71) = v182;
                *((void *)this + 72) = &v188[4 * v187];
                if (v183) {
                  operator delete(v183);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v180 = v178;
                int v182 = v180 + 4;
              }
              *((void *)this + 71) = v182;
              v175 += 4;
            }
            while (v175 != (const char *)v177);
          }
        }
      }
    }
  }
}

void sub_1827FBD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneNamedPredicate<Mtl::NamedPredicate>(flatbuffers::FlatBufferBuilder *this, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  uint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 7u && (uint64_t v7 = *((unsigned __int16 *)v6 + 3)) != 0)
  {
    int String = flatbuffers::FlatBufferBuilder::CreateString(this, &a2[v7 + 4 + *(unsigned int *)&a2[v7]], *(unsigned int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int String = 0;
  }
  uint64_t v9 = &a2[v5];
  if (*(unsigned __int16 *)v9 >= 5u && (uint64_t v10 = *((unsigned __int16 *)v9 + 2)) != 0) {
    int v11 = flatbuffers::FlatBufferBuilder::CreateString(this, &a2[v10 + 4 + *(unsigned int *)&a2[v10]], *(unsigned int *)&a2[v10 + *(unsigned int *)&a2[v10]]);
  }
  else {
    int v11 = 0;
  }
  *((unsigned char *)this + 70) = 1;
  uint64_t v12 = *((void *)this + 5);
  uint64_t v13 = *((void *)this + 6);
  uint64_t v14 = *((void *)this + 4);
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 6, String);
  }
  if (v11) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 4, v11);
  }

  return flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

uint64_t Mtl::CloneSpecializedFunctionLibrary<Mtl::SpecializedFunctionLibrary>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  uint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0xDu && (uint64_t v7 = *((unsigned __int16 *)v6 + 6)) != 0)
  {
    unint64_t v19 = &a2[v7 + *(unsigned int *)&a2[v7]];
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl21FunctionConstantValueEEEZNS3_31CloneSpecializedFunctionLibraryINS3_26SpecializedFunctionLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41SpecializedFunctionLibraryCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0xBu && *(_WORD *)&a2[v5 + 10])
  {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 10] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 9u && *(_WORD *)&a2[v5 + 8])
  {
    int v10 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 8] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v10 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    int v11 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v12 = &a2[v5];
  if (*(unsigned __int16 *)v12 >= 5u && (uint64_t v13 = *((unsigned __int16 *)v12 + 2)) != 0) {
    int v14 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v13 + 4 + *(unsigned int *)&a2[v13]], *(unsigned int *)&a2[v13 + *(unsigned int *)&a2[v13]]);
  }
  else {
    int v14 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 32);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 12, v8);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 10, String);
  }
  if (v10) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 8, v10);
  }
  if (v11) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v11);
  }
  if (v14) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v14);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v17 - (unsigned __int16)v16 + (unsigned __int16)v15);
}

uint64_t Mtl::CloneStitchedLibrary<Mtl::StitchedLibrary>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  uint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 9u && (uint64_t v7 = *((unsigned __int16 *)v6 + 4)) != 0)
  {
    uint64_t v17 = &a2[v7 + *(unsigned int *)&a2[v7]];
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching5GraphEEEZNS3_20CloneStitchedLibraryINS3_15StitchedLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30StitchedLibraryCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE_vEENS2_INS_6VectorISC_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v17, &v17, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    uint64_t v17 = &a2[*(unsigned __int16 *)&a2[v5 + 6] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]];
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneStitchedLibraryINS5_15StitchedLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30StitchedLibraryCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v17, &v17, (flatbuffers::FlatBufferBuilder *)a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v9 = 0;
  }
  int v10 = &a2[v5];
  if (*(unsigned __int16 *)v10 >= 5u && (uint64_t v11 = *((unsigned __int16 *)v10 + 2)) != 0) {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v11 + 4 + *(unsigned int *)&a2[v11]], *(unsigned int *)&a2[v11 + *(unsigned int *)&a2[v11]]);
  }
  else {
    int String = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 32);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 8, v8);
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v9);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, String);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t Mtl::CloneComputePipelineDescriptor<Mtl::ComputePipelineDescriptor>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  uint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0x1Bu && (uint64_t v7 = *((unsigned __int16 *)v6 + 13)) != 0)
  {
    int v8 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x11u && *(_WORD *)&a2[v5 + 16])
  {
    uint64_t v38 = &a2[*(unsigned __int16 *)&a2[v5 + 16] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 16]]];
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_30CloneComputePipelineDescriptorINS3_25ComputePipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_40ComputePipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v38, &v38, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v9 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0xFu && *(_WORD *)&a2[v5 + 14])
  {
    int v10 = Mtl::CloneStageInputOutputDescriptor<Mtl::StageInputOutputDescriptor>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 14] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 14]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v10 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 5u && *(_WORD *)&a2[v5 + 4])
  {
    int v12 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 4] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v13 = 1;
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v14 = &a2[v5];
  if (*(unsigned __int16 *)v14 >= 0xDu)
  {
    uint64_t v15 = *((unsigned __int16 *)v14 + 6);
    if (v15) {
      uint64_t v13 = *(void *)&a2[v15];
    }
    else {
      uint64_t v13 = 1;
    }
  }
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 12, v13, 1);
  unint64_t v19 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v19 >= 0xBu && (uint64_t v20 = *((unsigned __int16 *)v19 + 5)) != 0) {
    uint64_t v21 = *(void *)&a2[v20];
  }
  else {
    uint64_t v21 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 10, v21, 0);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 26, v8);
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 16, v9);
  }
  if (v10) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 14, v10);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, String);
  }
  if (v12) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v12);
  }
  uint64_t v22 = &a2[-*(int *)a2];
  v24 = *(unsigned __int16 *)v22 >= 0x19u && (uint64_t v23 = *((unsigned __int16 *)v22 + 12)) != 0 && a2[v23] != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 24, v24, 0);
  unsigned int v25 = 0;
  unsigned int v26 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v26 >= 0x17u)
  {
    uint64_t v27 = *((unsigned __int16 *)v26 + 11);
    if (v27)
    {
      unsigned int v25 = a2[v27];
      if (v25 >= 3) {
        abort();
      }
    }
    else
    {
      unsigned int v25 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 22, v25, 0);
  BOOL v28 = 0;
  uint64_t v29 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v29 >= 0x15u)
  {
    uint64_t v30 = *((unsigned __int16 *)v29 + 10);
    if (v30) {
      BOOL v28 = a2[v30] != 0;
    }
    else {
      BOOL v28 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 20, v28, 0);
  BOOL v31 = 0;
  uint64_t v32 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v32 >= 0x13u)
  {
    uint64_t v33 = *((unsigned __int16 *)v32 + 9);
    if (v33) {
      BOOL v31 = a2[v33] != 0;
    }
    else {
      BOOL v31 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 18, v31, 0);
  BOOL v34 = 0;
  uint64_t v35 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v35 >= 9u)
  {
    uint64_t v36 = *((unsigned __int16 *)v35 + 4);
    if (v36) {
      BOOL v34 = a2[v36] != 0;
    }
    else {
      BOOL v34 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 8, v34, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v18 - (unsigned __int16)v17 + (unsigned __int16)v16);
}

uint64_t Mtl::CloneRenderPipelineDescriptor<Mtl::RenderPipelineDescriptor>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  uint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0x5Fu && (uint64_t v7 = *((unsigned __int16 *)v6 + 47)) != 0)
  {
    int v133 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v133 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x5Du && *(_WORD *)&a2[v5 + 92])
  {
    int v8 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 92] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 92]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x3Du && *(_WORD *)&a2[v5 + 60])
  {
    int v135 = &a2[*(unsigned __int16 *)&a2[v5 + 60] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 60]]];
    int v134 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v135, &v135, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v134 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x3Bu && *(_WORD *)&a2[v5 + 58])
  {
    int v135 = &a2[*(unsigned __int16 *)&a2[v5 + 58] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 58]]];
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v135, &v135, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v9 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x35u && *(_WORD *)&a2[v5 + 52])
  {
    int v135 = &a2[*(unsigned __int16 *)&a2[v5 + 52] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 52]]];
    int v10 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl39RenderPipelineColorAttachmentDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v135, &v135, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v10 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0xFu && *(_WORD *)&a2[v5 + 14])
  {
    int v11 = Mtl::CloneVertexDescriptor<Mtl::VertexDescriptor>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 14] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 14]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v11 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 9u && *(_WORD *)&a2[v5 + 8])
  {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 8] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    int v13 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v13 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 5u && *(_WORD *)&a2[v5 + 4])
  {
    int v14 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 4] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v14 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v15 = &a2[v5];
  uint64_t v131 = *(void *)(a1 + 48);
  uint64_t v132 = *(void *)(a1 + 40);
  uint64_t v130 = *(void *)(a1 + 32);
  if (*(unsigned __int16 *)v15 >= 0x2Fu && (uint64_t v16 = *((unsigned __int16 *)v15 + 23)) != 0) {
    uint64_t v17 = *(void *)&a2[v16];
  }
  else {
    uint64_t v17 = -1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 46, v17, -1);
  uint64_t v18 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v18 >= 0x2Du && (uint64_t v19 = *((unsigned __int16 *)v18 + 22)) != 0) {
    uint64_t v20 = *(void *)&a2[v19];
  }
  else {
    uint64_t v20 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 44, v20, 0);
  uint64_t v21 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v21 >= 0x2Bu && (uint64_t v22 = *((unsigned __int16 *)v21 + 21)) != 0) {
    uint64_t v23 = *(void *)&a2[v22];
  }
  else {
    uint64_t v23 = 1;
  }
  uint64_t v24 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 42, v23, 1);
  unsigned int v25 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v25 >= 0x21u)
  {
    uint64_t v26 = *((unsigned __int16 *)v25 + 16);
    if (v26) {
      uint64_t v24 = *(void *)&a2[v26];
    }
    else {
      uint64_t v24 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 32, v24, 1);
  uint64_t v27 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v27 >= 0x13u && (uint64_t v28 = *((unsigned __int16 *)v27 + 9)) != 0) {
    uint64_t v29 = *(void *)&a2[v28];
  }
  else {
    uint64_t v29 = 16;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 18, v29, 16);
  uint64_t v30 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v30 >= 0xDu && (uint64_t v31 = *((unsigned __int16 *)v30 + 6)) != 0) {
    uint64_t v32 = *(void *)&a2[v31];
  }
  else {
    uint64_t v32 = 1;
  }
  uint64_t v33 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 12, v32, 1);
  BOOL v34 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v34 >= 0xBu)
  {
    uint64_t v35 = *((unsigned __int16 *)v34 + 5);
    if (v35) {
      uint64_t v33 = *(void *)&a2[v35];
    }
    else {
      uint64_t v33 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 10, v33, 1);
  if (v133) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 94, v133);
  }
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 92, v8);
  }
  uint64_t v36 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v36 < 0x59u)
  {
    int v39 = 0;
    int v38 = v134;
  }
  else
  {
    uint64_t v37 = *((unsigned __int16 *)v36 + 44);
    int v38 = v134;
    if (v37) {
      int v39 = *(_DWORD *)&a2[v37];
    }
    else {
      int v39 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 88, v39, 0);
  int v40 = 0;
  int v41 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v41 >= 0x57u)
  {
    uint64_t v42 = *((unsigned __int16 *)v41 + 43);
    if (v42) {
      int v40 = *(_DWORD *)&a2[v42];
    }
    else {
      int v40 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 86, v40, 0);
  if (v38) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 60, v38);
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 58, v9);
  }
  if (v10) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 52, v10);
  }
  MTLRenderPipelineColorAttachmentDescriptorArray v43 = &a2[-*(int *)a2];
  float v44 = 1.0;
  if (*(unsigned __int16 *)v43 >= 0x31u)
  {
    uint64_t v45 = *((unsigned __int16 *)v43 + 24);
    if (v45) {
      float v44 = *(float *)&a2[v45];
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<float>((void *)a1, 48, v44, 1.0);
  if (v11) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 14, v11);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 8, String);
  }
  if (v13) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v13);
  }
  if (v14) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v14);
  }
  uint64_t v46 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v46 >= 0x39u && (uint64_t v47 = *((unsigned __int16 *)v46 + 28)) != 0) {
    uint64_t v48 = *(unsigned __int16 *)&a2[v47];
  }
  else {
    uint64_t v48 = 0;
  }
  unsigned __int16 v49 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v48);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((void *)a1, 56, v49, 0);
  uint64_t v50 = 0;
  int v51 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v51 >= 0x37u)
  {
    uint64_t v52 = *((unsigned __int16 *)v51 + 27);
    if (v52) {
      uint64_t v50 = *(unsigned __int16 *)&a2[v52];
    }
    else {
      uint64_t v50 = 0;
    }
  }
  unsigned __int16 v53 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v50);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((void *)a1, 54, v53, 0);
  BOOL v54 = 0;
  uint64_t v55 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v55 >= 0x5Bu)
  {
    uint64_t v56 = *((unsigned __int16 *)v55 + 45);
    if (v56) {
      BOOL v54 = a2[v56] != 0;
    }
    else {
      BOOL v54 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 90, v54, 0);
  BOOL v57 = 0;
  long long v58 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v58 >= 0x55u)
  {
    uint64_t v59 = *((unsigned __int16 *)v58 + 42);
    if (v59) {
      BOOL v57 = a2[v59] != 0;
    }
    else {
      BOOL v57 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 84, v57, 0);
  BOOL v60 = 0;
  uint64_t v61 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v61 >= 0x53u)
  {
    uint64_t v62 = *((unsigned __int16 *)v61 + 41);
    if (v62) {
      BOOL v60 = a2[v62] != 0;
    }
    else {
      BOOL v60 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 82, v60, 0);
  BOOL v63 = 0;
  long long v64 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v64 >= 0x51u)
  {
    uint64_t v65 = *((unsigned __int16 *)v64 + 40);
    if (v65) {
      BOOL v63 = a2[v65] != 0;
    }
    else {
      BOOL v63 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 80, v63, 0);
  uint64_t v66 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v66 >= 0x4Fu && (uint64_t v67 = *((unsigned __int16 *)v66 + 39)) != 0) {
    int v68 = a2[v67];
  }
  else {
    int v68 = 255;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 78, v68, 255);
  unint64_t v69 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v69 >= 0x4Du && (uint64_t v70 = *((unsigned __int16 *)v69 + 38)) != 0)
  {
    unsigned int v71 = a2[v70];
    if (v71 >= 8) {
      goto LABEL_211;
    }
  }
  else
  {
    unsigned int v71 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 76, v71, 0);
  BOOL v72 = 0;
  uint64_t v73 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v73 >= 0x4Bu)
  {
    uint64_t v74 = *((unsigned __int16 *)v73 + 37);
    if (v74) {
      BOOL v72 = a2[v74] != 0;
    }
    else {
      BOOL v72 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 74, v72, 0);
  unsigned int v75 = 0;
  unint64_t v76 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v76 >= 0x49u)
  {
    uint64_t v77 = *((unsigned __int16 *)v76 + 36);
    if (v77)
    {
      unsigned int v75 = a2[v77];
      if (v75 >= 0x10) {
        goto LABEL_211;
      }
    }
    else
    {
      unsigned int v75 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 72, v75, 0);
  BOOL v78 = 0;
  int v79 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v79 >= 0x47u)
  {
    uint64_t v80 = *((unsigned __int16 *)v79 + 35);
    if (v80) {
      BOOL v78 = a2[v80] != 0;
    }
    else {
      BOOL v78 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 70, v78, 0);
  unsigned int v81 = 0;
  int v82 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v82 >= 0x45u)
  {
    uint64_t v83 = *((unsigned __int16 *)v82 + 34);
    if (v83)
    {
      unsigned int v81 = a2[v83];
      if (v81 >= 3) {
        goto LABEL_211;
      }
    }
    else
    {
      unsigned int v81 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 68, v81, 0);
  BOOL v84 = 0;
  uint64_t v85 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v85 >= 0x43u)
  {
    uint64_t v86 = *((unsigned __int16 *)v85 + 33);
    if (v86) {
      BOOL v84 = a2[v86] != 0;
    }
    else {
      BOOL v84 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 66, v84, 0);
  BOOL v87 = 0;
  unsigned int v88 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v88 >= 0x41u)
  {
    uint64_t v89 = *((unsigned __int16 *)v88 + 32);
    if (v89) {
      BOOL v87 = a2[v89] != 0;
    }
    else {
      BOOL v87 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 64, v87, 0);
  BOOL v90 = 0;
  int v91 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v91 >= 0x3Fu)
  {
    uint64_t v92 = *((unsigned __int16 *)v91 + 31);
    if (v92) {
      BOOL v90 = a2[v92] != 0;
    }
    else {
      BOOL v90 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 62, v90, 0);
  BOOL v93 = 0;
  int v94 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v94 >= 0x33u)
  {
    uint64_t v95 = *((unsigned __int16 *)v94 + 25);
    if (v95) {
      BOOL v93 = a2[v95] != 0;
    }
    else {
      BOOL v93 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 50, v93, 0);
  BOOL v96 = 0;
  uint64_t v97 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v97 >= 0x29u)
  {
    uint64_t v98 = *((unsigned __int16 *)v97 + 20);
    if (v98) {
      BOOL v96 = a2[v98] != 0;
    }
    else {
      BOOL v96 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 40, v96, 0);
  BOOL v99 = 0;
  unint64_t v100 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v100 >= 0x27u)
  {
    uint64_t v101 = *((unsigned __int16 *)v100 + 19);
    if (v101) {
      BOOL v99 = a2[v101] != 0;
    }
    else {
      BOOL v99 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 38, v99, 0);
  unint64_t v102 = &a2[-*(int *)a2];
  int v104 = *(unsigned __int16 *)v102 < 0x25u || (v103 = *((unsigned __int16 *)v102 + 18)) == 0 || a2[v103] != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 36, v104, 1);
  uint64_t v105 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v105 >= 0x23u && (uint64_t v106 = *((unsigned __int16 *)v105 + 17)) != 0)
  {
    unsigned int v107 = a2[v106];
    if (v107 >= 2) {
      goto LABEL_211;
    }
  }
  else
  {
    unsigned int v107 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 34, v107, 0);
  unsigned int v108 = 0;
  uint64_t v109 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v109 >= 0x1Fu)
  {
    uint64_t v110 = *((unsigned __int16 *)v109 + 15);
    if (v110)
    {
      unsigned int v108 = a2[v110];
      if (v108 >= 4) {
        goto LABEL_211;
      }
    }
    else
    {
      unsigned int v108 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 30, v108, 0);
  unsigned int v111 = 0;
  uint64_t v112 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v112 >= 0x1Du)
  {
    uint64_t v113 = *((unsigned __int16 *)v112 + 14);
    if (v113)
    {
      unsigned int v111 = a2[v113];
      if (v111 >= 2) {
        goto LABEL_211;
      }
    }
    else
    {
      unsigned int v111 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 28, v111, 0);
  unsigned int v114 = 0;
  uint64_t v115 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v115 >= 0x1Bu)
  {
    uint64_t v116 = *((unsigned __int16 *)v115 + 13);
    if (v116)
    {
      unsigned int v114 = a2[v116];
      if (v114 >= 4) {
        goto LABEL_211;
      }
    }
    else
    {
      unsigned int v114 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 26, v114, 0);
  unsigned int v117 = 0;
  uint64_t v118 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v118 >= 0x19u)
  {
    uint64_t v119 = *((unsigned __int16 *)v118 + 12);
    if (v119)
    {
      unsigned int v117 = a2[v119];
      if (v117 >= 3) {
        goto LABEL_211;
      }
    }
    else
    {
      unsigned int v117 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 24, v117, 0);
  unsigned int v120 = 0;
  unint64_t v121 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v121 >= 0x17u)
  {
    uint64_t v122 = *((unsigned __int16 *)v121 + 11);
    if (v122)
    {
      unsigned int v120 = a2[v122];
      if (v120 >= 2) {
LABEL_211:
      }
        abort();
    }
    else
    {
      unsigned int v120 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 22, v120, 0);
  BOOL v123 = 0;
  uint64_t v124 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v124 >= 0x15u)
  {
    uint64_t v125 = *((unsigned __int16 *)v124 + 10);
    if (v125) {
      BOOL v123 = a2[v125] != 0;
    }
    else {
      BOOL v123 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 20, v123, 0);
  unsigned int v126 = 0;
  uint64_t v127 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v127 >= 0x11u)
  {
    uint64_t v128 = *((unsigned __int16 *)v127 + 8);
    if (v128)
    {
      unsigned int v126 = a2[v128];
      if (v126 >= 4) {
        goto LABEL_211;
      }
    }
    else
    {
      unsigned int v126 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 16, v126, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v130 - (unsigned __int16)v131 + (unsigned __int16)v132);
}

uint64_t Mtl::CloneTileRenderPipelineDescriptor<Mtl::TileRenderPipelineDescriptor>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  uint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0x1Bu && (uint64_t v7 = *((unsigned __int16 *)v6 + 13)) != 0)
  {
    int v8 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x15u && *(_WORD *)&a2[v5 + 20])
  {
    int v38 = &a2[*(unsigned __int16 *)&a2[v5 + 20] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 20]]];
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneTileRenderPipelineDescriptorINS3_28TileRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43TileRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v38, &v38, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v9 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x13u && *(_WORD *)&a2[v5 + 18])
  {
    int v38 = &a2[*(unsigned __int16 *)&a2[v5 + 18] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 18]]];
    int v10 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl43TileRenderPipelineColorAttachmentDescriptorEEEZNS3_33CloneTileRenderPipelineDescriptorINS3_28TileRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43TileRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v38, &v38, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v10 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 5u && *(_WORD *)&a2[v5 + 4])
  {
    int v12 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 4] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v12 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  int v13 = &a2[v5];
  if (*(unsigned __int16 *)v13 >= 0x11u && (uint64_t v14 = *((unsigned __int16 *)v13 + 8)) != 0) {
    uint64_t v15 = *(void *)&a2[v14];
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v37 = *(void *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 16, v15, 0);
  uint64_t v18 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v18 >= 0xFu && (uint64_t v19 = *((unsigned __int16 *)v18 + 7)) != 0) {
    uint64_t v20 = *(void *)&a2[v19];
  }
  else {
    uint64_t v20 = 1;
  }
  uint64_t v21 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 14, v20, 1);
  uint64_t v22 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v22 >= 0xDu)
  {
    uint64_t v23 = *((unsigned __int16 *)v22 + 6);
    if (v23) {
      uint64_t v21 = *(void *)&a2[v23];
    }
    else {
      uint64_t v21 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 12, v21, 1);
  uint64_t v24 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v24 >= 0xBu && (uint64_t v25 = *((unsigned __int16 *)v24 + 5)) != 0) {
    uint64_t v26 = *(void *)&a2[v25];
  }
  else {
    uint64_t v26 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 10, v26, 0);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 26, v8);
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 20, v9);
  }
  if (v10) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 18, v10);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, String);
  }
  if (v12) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v12);
  }
  uint64_t v27 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v27 >= 0x19u && (uint64_t v28 = *((unsigned __int16 *)v27 + 12)) != 0)
  {
    unsigned int v29 = a2[v28];
    if (v29 >= 3) {
      abort();
    }
  }
  else
  {
    unsigned int v29 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 24, v29, 0);
  BOOL v30 = 0;
  uint64_t v31 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v31 >= 0x17u)
  {
    uint64_t v32 = *((unsigned __int16 *)v31 + 11);
    if (v32) {
      BOOL v30 = a2[v32] != 0;
    }
    else {
      BOOL v30 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 22, v30, 0);
  BOOL v33 = 0;
  BOOL v34 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v34 >= 9u)
  {
    uint64_t v35 = *((unsigned __int16 *)v34 + 4);
    if (v35) {
      BOOL v33 = a2[v35] != 0;
    }
    else {
      BOOL v33 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 8, v33, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v17 - (unsigned __int16)v16 + (unsigned __int16)v37);
}

uint64_t Mtl::CloneMeshRenderPipelineDescriptor<Mtl::MeshRenderPipelineDescriptor>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  uint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0x61u && (uint64_t v7 = *((unsigned __int16 *)v6 + 48)) != 0)
  {
    int v132 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v132 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x5Fu && *(_WORD *)&a2[v5 + 94])
  {
    int v131 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 94] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 94]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v131 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x5Du && *(_WORD *)&a2[v5 + 92])
  {
    int v130 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 92] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 92]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v130 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x3Du && *(_WORD *)&a2[v5 + 60])
  {
    int v133 = &a2[*(unsigned __int16 *)&a2[v5 + 60] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 60]]];
    int v129 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v133, &v133, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v129 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x3Bu && *(_WORD *)&a2[v5 + 58])
  {
    int v133 = &a2[*(unsigned __int16 *)&a2[v5 + 58] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 58]]];
    int v128 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v133, &v133, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v128 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x39u && *(_WORD *)&a2[v5 + 56])
  {
    int v133 = &a2[*(unsigned __int16 *)&a2[v5 + 56] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 56]]];
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v133, &v133, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x33u && *(_WORD *)&a2[v5 + 50])
  {
    int v133 = &a2[*(unsigned __int16 *)&a2[v5 + 50] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 50]]];
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl39RenderPipelineColorAttachmentDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE2_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v133, &v133, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v9 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0xBu && *(_WORD *)&a2[v5 + 10])
  {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 10] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 9u && *(_WORD *)&a2[v5 + 8])
  {
    int v11 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 8] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v11 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    int v12 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v12 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 5u && *(_WORD *)&a2[v5 + 4])
  {
    int v13 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 4] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]]);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v13 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v14 = &a2[v5];
  uint64_t v126 = *(void *)(a1 + 48);
  uint64_t v127 = *(void *)(a1 + 40);
  uint64_t v125 = *(void *)(a1 + 32);
  if (*(unsigned __int16 *)v14 >= 0x2Du && (uint64_t v15 = *((unsigned __int16 *)v14 + 22)) != 0) {
    uint64_t v16 = *(void *)&a2[v15];
  }
  else {
    uint64_t v16 = -1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 44, v16, -1);
  uint64_t v17 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v17 >= 0x2Bu && (uint64_t v18 = *((unsigned __int16 *)v17 + 21)) != 0) {
    uint64_t v19 = *(void *)&a2[v18];
  }
  else {
    uint64_t v19 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 42, v19, 0);
  uint64_t v20 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v20 >= 0x29u && (uint64_t v21 = *((unsigned __int16 *)v20 + 20)) != 0) {
    uint64_t v22 = *(void *)&a2[v21];
  }
  else {
    uint64_t v22 = 1;
  }
  uint64_t v23 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 40, v22, 1);
  uint64_t v24 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v24 >= 0x1Fu)
  {
    uint64_t v25 = *((unsigned __int16 *)v24 + 15);
    if (v25) {
      uint64_t v23 = *(void *)&a2[v25];
    }
    else {
      uint64_t v23 = 1;
    }
  }
  uint64_t v26 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 30, v23, 1);
  uint64_t v27 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v27 >= 0x1Du)
  {
    uint64_t v28 = *((unsigned __int16 *)v27 + 14);
    if (v28) {
      uint64_t v26 = *(void *)&a2[v28];
    }
    else {
      uint64_t v26 = 1;
    }
  }
  uint64_t v29 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 28, v26, 1);
  BOOL v30 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v30 >= 0x1Bu)
  {
    uint64_t v31 = *((unsigned __int16 *)v30 + 13);
    if (v31) {
      uint64_t v29 = *(void *)&a2[v31];
    }
    else {
      uint64_t v29 = 1;
    }
  }
  uint64_t v32 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 26, v29, 1);
  BOOL v33 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v33 >= 0x19u)
  {
    uint64_t v34 = *((unsigned __int16 *)v33 + 12);
    if (v34) {
      uint64_t v32 = *(void *)&a2[v34];
    }
    else {
      uint64_t v32 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 24, v32, 1);
  uint64_t v35 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v35 >= 0x17u && (uint64_t v36 = *((unsigned __int16 *)v35 + 11)) != 0) {
    uint64_t v37 = *(void *)&a2[v36];
  }
  else {
    uint64_t v37 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 22, v37, 0);
  uint64_t v38 = 0;
  int v39 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v39 >= 0x15u)
  {
    uint64_t v40 = *((unsigned __int16 *)v39 + 10);
    if (v40) {
      uint64_t v38 = *(void *)&a2[v40];
    }
    else {
      uint64_t v38 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 20, v38, 0);
  uint64_t v41 = 0;
  uint64_t v42 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v42 >= 0x13u)
  {
    uint64_t v43 = *((unsigned __int16 *)v42 + 9);
    if (v43) {
      uint64_t v41 = *(void *)&a2[v43];
    }
    else {
      uint64_t v41 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 18, v41, 0);
  uint64_t v44 = 0;
  uint64_t v45 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v45 >= 0x11u)
  {
    uint64_t v46 = *((unsigned __int16 *)v45 + 8);
    if (v46) {
      uint64_t v44 = *(void *)&a2[v46];
    }
    else {
      uint64_t v44 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 16, v44, 0);
  if (v132) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 96, v132);
  }
  if (v131) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 94, v131);
  }
  if (v130) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 92, v130);
  }
  uint64_t v47 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v47 >= 0x59u && (uint64_t v48 = *((unsigned __int16 *)v47 + 44)) != 0) {
    int v49 = *(_DWORD *)&a2[v48];
  }
  else {
    int v49 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 88, v49, 0);
  if (v129) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 60, v129);
  }
  if (v128) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 58, v128);
  }
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 56, v8);
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 50, v9);
  }
  uint64_t v50 = &a2[-*(int *)a2];
  float v51 = 1.0;
  if (*(unsigned __int16 *)v50 >= 0x2Fu)
  {
    uint64_t v52 = *((unsigned __int16 *)v50 + 23);
    if (v52) {
      float v51 = *(float *)&a2[v52];
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<float>((void *)a1, 46, v51, 1.0);
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 10, String);
  }
  if (v11) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 8, v11);
  }
  if (v12) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v12);
  }
  if (v13) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v13);
  }
  unsigned __int16 v53 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v53 >= 0x37u && (uint64_t v54 = *((unsigned __int16 *)v53 + 27)) != 0) {
    uint64_t v55 = *(unsigned __int16 *)&a2[v54];
  }
  else {
    uint64_t v55 = 0;
  }
  unsigned __int16 v56 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v55);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((void *)a1, 54, v56, 0);
  uint64_t v57 = 0;
  long long v58 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v58 >= 0x35u)
  {
    uint64_t v59 = *((unsigned __int16 *)v58 + 26);
    if (v59) {
      uint64_t v57 = *(unsigned __int16 *)&a2[v59];
    }
    else {
      uint64_t v57 = 0;
    }
  }
  unsigned __int16 v60 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v57);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((void *)a1, 52, v60, 0);
  BOOL v61 = 0;
  uint64_t v62 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v62 >= 0x5Bu)
  {
    uint64_t v63 = *((unsigned __int16 *)v62 + 45);
    if (v63) {
      BOOL v61 = a2[v63] != 0;
    }
    else {
      BOOL v61 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 90, v61, 0);
  BOOL v64 = 0;
  uint64_t v65 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v65 >= 0x57u)
  {
    uint64_t v66 = *((unsigned __int16 *)v65 + 43);
    if (v66) {
      BOOL v64 = a2[v66] != 0;
    }
    else {
      BOOL v64 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 86, v64, 0);
  BOOL v67 = 0;
  int v68 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v68 >= 0x55u)
  {
    uint64_t v69 = *((unsigned __int16 *)v68 + 42);
    if (v69) {
      BOOL v67 = a2[v69] != 0;
    }
    else {
      BOOL v67 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 84, v67, 0);
  BOOL v70 = 0;
  unsigned int v71 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v71 >= 0x53u)
  {
    uint64_t v72 = *((unsigned __int16 *)v71 + 41);
    if (v72) {
      BOOL v70 = a2[v72] != 0;
    }
    else {
      BOOL v70 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 82, v70, 0);
  uint64_t v73 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v73 >= 0x51u && (uint64_t v74 = *((unsigned __int16 *)v73 + 40)) != 0) {
    int v75 = a2[v74];
  }
  else {
    int v75 = 255;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 80, v75, 255);
  unint64_t v76 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v76 >= 0x4Fu && (uint64_t v77 = *((unsigned __int16 *)v76 + 39)) != 0)
  {
    unsigned int v78 = a2[v77];
    if (v78 >= 8) {
      goto LABEL_204;
    }
  }
  else
  {
    unsigned int v78 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 78, v78, 0);
  BOOL v79 = 0;
  uint64_t v80 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v80 >= 0x4Du)
  {
    uint64_t v81 = *((unsigned __int16 *)v80 + 38);
    if (v81) {
      BOOL v79 = a2[v81] != 0;
    }
    else {
      BOOL v79 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 76, v79, 0);
  unsigned int v82 = 0;
  uint64_t v83 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v83 >= 0x4Bu)
  {
    uint64_t v84 = *((unsigned __int16 *)v83 + 37);
    if (v84)
    {
      unsigned int v82 = a2[v84];
      if (v82 >= 0x10) {
        goto LABEL_204;
      }
    }
    else
    {
      unsigned int v82 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 74, v82, 0);
  BOOL v85 = 0;
  uint64_t v86 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v86 >= 0x49u)
  {
    uint64_t v87 = *((unsigned __int16 *)v86 + 36);
    if (v87) {
      BOOL v85 = a2[v87] != 0;
    }
    else {
      BOOL v85 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 72, v85, 0);
  unsigned int v88 = 0;
  uint64_t v89 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v89 >= 0x47u)
  {
    uint64_t v90 = *((unsigned __int16 *)v89 + 35);
    if (v90)
    {
      unsigned int v88 = a2[v90];
      if (v88 >= 3) {
LABEL_204:
      }
        abort();
    }
    else
    {
      unsigned int v88 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 70, v88, 0);
  BOOL v91 = 0;
  uint64_t v92 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v92 >= 0x45u)
  {
    uint64_t v93 = *((unsigned __int16 *)v92 + 34);
    if (v93) {
      BOOL v91 = a2[v93] != 0;
    }
    else {
      BOOL v91 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 68, v91, 0);
  BOOL v94 = 0;
  uint64_t v95 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v95 >= 0x43u)
  {
    uint64_t v96 = *((unsigned __int16 *)v95 + 33);
    if (v96) {
      BOOL v94 = a2[v96] != 0;
    }
    else {
      BOOL v94 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 66, v94, 0);
  BOOL v97 = 0;
  uint64_t v98 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v98 >= 0x41u)
  {
    uint64_t v99 = *((unsigned __int16 *)v98 + 32);
    if (v99) {
      BOOL v97 = a2[v99] != 0;
    }
    else {
      BOOL v97 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 64, v97, 0);
  BOOL v100 = 0;
  uint64_t v101 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v101 >= 0x3Fu)
  {
    uint64_t v102 = *((unsigned __int16 *)v101 + 31);
    if (v102) {
      BOOL v100 = a2[v102] != 0;
    }
    else {
      BOOL v100 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 62, v100, 0);
  BOOL v103 = 0;
  int v104 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v104 >= 0x31u)
  {
    uint64_t v105 = *((unsigned __int16 *)v104 + 24);
    if (v105) {
      BOOL v103 = a2[v105] != 0;
    }
    else {
      BOOL v103 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 48, v103, 0);
  BOOL v106 = 0;
  unsigned int v107 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v107 >= 0x27u)
  {
    uint64_t v108 = *((unsigned __int16 *)v107 + 19);
    if (v108) {
      BOOL v106 = a2[v108] != 0;
    }
    else {
      BOOL v106 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 38, v106, 0);
  BOOL v109 = 0;
  uint64_t v110 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v110 >= 0x25u)
  {
    uint64_t v111 = *((unsigned __int16 *)v110 + 18);
    if (v111) {
      BOOL v109 = a2[v111] != 0;
    }
    else {
      BOOL v109 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 36, v109, 0);
  uint64_t v112 = &a2[-*(int *)a2];
  v114 = *(unsigned __int16 *)v112 < 0x23u || (uint64_t v113 = *((unsigned __int16 *)v112 + 17)) == 0 || a2[v113] != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 34, v114, 1);
  uint64_t v115 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v115 >= 0x21u && (uint64_t v116 = *((unsigned __int16 *)v115 + 16)) != 0)
  {
    unsigned int v117 = a2[v116];
    if (v117 >= 2) {
      goto LABEL_204;
    }
  }
  else
  {
    unsigned int v117 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 32, v117, 0);
  BOOL v118 = 0;
  uint64_t v119 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v119 >= 0xFu)
  {
    uint64_t v120 = *((unsigned __int16 *)v119 + 7);
    if (v120) {
      BOOL v118 = a2[v120] != 0;
    }
    else {
      BOOL v118 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 14, v118, 0);
  BOOL v121 = 0;
  uint64_t v122 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v122 >= 0xDu)
  {
    uint64_t v123 = *((unsigned __int16 *)v122 + 6);
    if (v123) {
      BOOL v121 = a2[v123] != 0;
    }
    else {
      BOOL v121 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 12, v121, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v125 - (unsigned __int16)v126 + (unsigned __int16)v127);
}

void MTLMetalScriptBuilderImpl::makeFunctionString(uint64_t a1@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [a2 bitCodeHash];
  long long v6 = *(_OWORD *)(v5 + 16);
  v9[0] = *(_OWORD *)v5;
  v9[1] = v6;
  HashToString((uint64_t)v9, &__p);
  uint64_t v7 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((void *)(a1 + 88), (unint64_t *)v5);
  MTLMetalScriptBuilderImpl::makeFunctionString((uint64_t)(v7 + 9), a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1827FE5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void HashToString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 0x40uLL);
  for (uint64_t i = 0; i != 32; ++i)
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + i);
    std::string::push_back(a2, HashToString(MTLUINT256_t)::hexChars[v5 >> 4]);
    std::string::push_back(a2, HashToString(MTLUINT256_t)::hexChars[v5 & 0xF]);
  }
}

{
  uint64_t i;
  unint64_t v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 0x40uLL);
  for (uint64_t i = 0; i != 32; ++i)
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + i);
    std::string::push_back(a2, HashToString(MTLUINT256_t)::hexChars[v5 >> 4]);
    std::string::push_back(a2, HashToString(MTLUINT256_t)::hexChars[v5 & 0xF]);
  }
}

void sub_1827FE6A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::makeFunctionString(uint64_t a1@<X2>, std::string *a2@<X8>)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v10, "#");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = *(char *)(a1 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a1;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a1;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a1 + 8);
  }
  int v9 = std::string::append(&v11, v7, v8);
  *a2 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1827FE780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::makeFunctionString(unsigned int *a1@<X2>, std::string *a2@<X8>)
{
  if (a1)
  {
    std::operator+<char>();
    uint64_t v4 = std::string::append(&v11, "#");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100](__p, a1 + 1, *a1);
    if ((v10 & 0x80u) == 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    if ((v10 & 0x80u) == 0) {
      std::string::size_type v7 = v10;
    }
    else {
      std::string::size_type v7 = (std::string::size_type)__p[1];
    }
    std::string::size_type v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
    *a2 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_1827FE8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptBuilderImpl::addLinkedFunction(MTLMetalScriptBuilderImpl *this, MTLLinkedFunctions *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ([(NSArray *)[(MTLLinkedFunctions *)a2 functions] count]
    && (uint64_t v4 = [(MTLLinkedFunctions *)a2 functions],
        long long v15 = 0u,
        long long v16 = 0u,
        long long v17 = 0u,
        long long v18 = 0u,
        (uint64_t v5 = [(NSArray *)v4 countByEnumeratingWithState:&v15 objects:v19 count:16]) != 0))
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
LABEL_4:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v16 != v7) {
        objc_enumerationMutation(v4);
      }
      uint64_t result = MTLMetalScriptBuilderImpl::addFunction(this, *(void **)(*((void *)&v15 + 1) + 8 * v8));
      if (!result) {
        break;
      }
      if (v6 == ++v8)
      {
        uint64_t v6 = [(NSArray *)v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v6) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    if ([(NSArray *)[(MTLLinkedFunctions *)a2 privateFunctions] count]
      && (unsigned __int8 v10 = [(MTLLinkedFunctions *)a2 privateFunctions],
          long long v15 = 0u,
          long long v16 = 0u,
          long long v17 = 0u,
          long long v18 = 0u,
          (uint64_t v11 = [(NSArray *)v10 countByEnumeratingWithState:&v15 objects:v19 count:16]) != 0))
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v16;
LABEL_13:
      uint64_t v14 = 0;
      while (1)
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t result = MTLMetalScriptBuilderImpl::addFunction(this, *(void **)(*((void *)&v15 + 1) + 8 * v14));
        if (!result) {
          break;
        }
        if (v12 == ++v14)
        {
          uint64_t v12 = [(NSArray *)v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
          if (v12) {
            goto LABEL_13;
          }
          return 1;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void MTLMetalScriptBuilderImpl::addComputePipelineWithDescriptor(NSObject **this, MTLComputePipelineDescriptor *a2)
{
  int v2 = *this;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl32addComputePipelineWithDescriptorEP28MTLComputePipelineDescriptor_block_invoke;
  v3[3] = &unk_1E5220270;
  v3[4] = a2;
  v3[5] = this;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl32addComputePipelineWithDescriptorEP28MTLComputePipelineDescriptor_block_invoke(uint64_t a1)
{
  int v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 40);
  dispatch_data_t v3 = (void *)MEMORY[0x18530C9F0]();
  if ([*(id *)(a1 + 32) computeFunction]
    && MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)[*(id *)(a1 + 32) linkedFunctions])&& MTLMetalScriptBuilderImpl::addFunction(v2, objc_msgSend(*(id *)(a1 + 32), "computeFunction")))
  {
    MTLMetalScriptBuilderImpl::addComputePipeline(v2, *(MTLComputePipelineDescriptor **)(a1 + 32));
  }
}

uint64_t MTLMetalScriptBuilderImpl::addFunction(MTLMetalScriptBuilderImpl *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (MTLLibraryData *)[a2 libraryData];
  if (![a2 airScript]) {
    MTLMetalScriptBuilderImpl::addLibraryData(a1, v4);
  }
  uint64_t v5 = (unint64_t *)[a2 bitCodeHash];
  if (std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((void *)a1 + 11, v5))
  {
    return 1;
  }
  if ([a2 specializationAirScript])
  {
    return MTLMetalScriptBuilderImpl::addFunctionWithDescriptorInternal((uint64_t)a1, a2, 0, 0);
  }
  else
  {
    if (![a2 stitchingAirScript])
    {
      uint64_t v7 = (_OWORD *)(*(uint64_t (**)(MTLLibraryData *))(*(void *)v4 + 296))(v4);
      long long v8 = v7[1];
      v17[0] = *v7;
      v17[1] = v8;
      HashToString((uint64_t)v17, &v15);
      std::string::basic_string[abi:ne180100]<0>(v10, (char *)objc_msgSend((id)objc_msgSend(a2, "name"), "cStringUsingEncoding:", 4));
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v12, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      }
      else {
        std::string v12 = v15;
      }
      *(_OWORD *)std::string __p = *(_OWORD *)v10;
      uint64_t v14 = v11;
      v10[1] = 0;
      uint64_t v11 = 0;
      v10[0] = 0;
      long long v16 = v5;
      int v9 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>((uint64_t)a1 + 88, v5, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16);
      std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)(v9 + 6), (long long *)&v12);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v11) < 0) {
        operator delete(v10[0]);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      return 1;
    }
    return MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal((uint64_t)a1, a2, 0, 0);
  }
}

void sub_1827FEE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addComputePipeline(MTLMetalScriptBuilderImpl *this, MTLComputePipelineDescriptor *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  [(MTLComputePipelineDescriptor *)a2 _descriptorPrivate];
  operator new();
}

void sub_1827FF0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MTLMetalScriptBuilderImpl::addRenderPipelineWithDescriptor(NSObject **this, MTLRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *this;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl31addRenderPipelineWithDescriptorEP27MTLRenderPipelineDescriptor_block_invoke;
  v3[3] = &unk_1E5220270;
  v3[4] = a2;
  v3[5] = this;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl31addRenderPipelineWithDescriptorEP27MTLRenderPipelineDescriptor_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 40);
  dispatch_data_t v3 = (void *)MEMORY[0x18530C9F0]();
  uint64_t v4 = [*(id *)(a1 + 32) vertexFunction];
  uint64_t v5 = *(void **)(a1 + 32);
  if (v4)
  {
    if (!MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)[v5 vertexLinkedFunctions]))goto LABEL_12; {
    int v6 = MTLMetalScriptBuilderImpl::addFunction(v2, (void *)[*(id *)(a1 + 32) vertexFunction]);
    }
    if (![*(id *)(a1 + 32) fragmentFunction])
    {
      if (!v6) {
        goto LABEL_12;
      }
LABEL_11:
      MTLMetalScriptBuilderImpl::addRenderPipeline(v2, *(MTLRenderPipelineDescriptor **)(a1 + 32));
    }
  }
  else
  {
    if (![v5 fragmentFunction]) {
      goto LABEL_11;
    }
    int v6 = 1;
  }
  if MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)[*(id *)(a1 + 32) fragmentLinkedFunctions])&& v6&& (MTLMetalScriptBuilderImpl::addFunction(v2, objc_msgSend(*(id *)(a1 + 32), "fragmentFunction")))
  {
    goto LABEL_11;
  }
LABEL_12:
}

void MTLMetalScriptBuilderImpl::addRenderPipeline(MTLMetalScriptBuilderImpl *this, MTLRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  [(MTLRenderPipelineDescriptor *)a2 _descriptorPrivate];
  operator new();
}

void sub_1827FF554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (v15 < 0) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addMeshRenderPipelineWithDescriptor(NSObject **this, MTLMeshRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *this;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl35addMeshRenderPipelineWithDescriptorEP31MTLMeshRenderPipelineDescriptor_block_invoke;
  v3[3] = &unk_1E5220270;
  v3[4] = a2;
  v3[5] = this;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl35addMeshRenderPipelineWithDescriptorEP31MTLMeshRenderPipelineDescriptor_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 40);
  dispatch_data_t v3 = (void *)MEMORY[0x18530C9F0]();
  if ([*(id *)(a1 + 32) meshFunction])
  {
    if (!MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)[*(id *)(a1 + 32) meshLinkedFunctions]))goto LABEL_18; {
    int v4 = MTLMetalScriptBuilderImpl::addFunction(v2, (void *)[*(id *)(a1 + 32) meshFunction]);
    }
  }
  else
  {
    int v4 = 1;
  }
  if ([*(id *)(a1 + 32) fragmentFunction])
  {
    if (!MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)[*(id *)(a1 + 32) fragmentLinkedFunctions]))goto LABEL_18; {
    uint64_t v5 = *(void **)(a1 + 32);
    }
    if (!v4)
    {
      if (![v5 objectFunction]) {
        goto LABEL_18;
      }
      int v4 = 0;
      goto LABEL_14;
    }
    int v4 = MTLMetalScriptBuilderImpl::addFunction(v2, (void *)[v5 fragmentFunction]);
  }
  if (![*(id *)(a1 + 32) objectFunction])
  {
    if (!v4) {
      goto LABEL_18;
    }
LABEL_17:
    MTLMetalScriptBuilderImpl::addMeshRenderPipeline(v2, *(MTLMeshRenderPipelineDescriptor **)(a1 + 32));
  }
LABEL_14:
  if MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)[*(id *)(a1 + 32) objectLinkedFunctions])&& v4&& (MTLMetalScriptBuilderImpl::addFunction(v2, objc_msgSend(*(id *)(a1 + 32), "objectFunction")))
  {
    goto LABEL_17;
  }
LABEL_18:
}

void MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMetalScriptBuilderImpl *this, MTLMeshRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  [(MTLMeshRenderPipelineDescriptor *)a2 _descriptorPrivate];
  operator new();
}

void sub_1827FFB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (v17 < 0)
  {
    operator delete(v15);
    if ((v16 & 0x80) == 0) {
      goto LABEL_7;
    }
  }
  else if ((v16 & 0x80) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v14);
LABEL_7:
  _Unwind_Resume(a1);
}

void MTLMetalScriptBuilderImpl::addTileRenderPipelineWithDescriptor(NSObject **this, MTLTileRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *this;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl35addTileRenderPipelineWithDescriptorEP31MTLTileRenderPipelineDescriptor_block_invoke;
  v3[3] = &unk_1E5220270;
  v3[4] = a2;
  v3[5] = this;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl35addTileRenderPipelineWithDescriptorEP31MTLTileRenderPipelineDescriptor_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 40);
  dispatch_data_t v3 = (void *)MEMORY[0x18530C9F0]();
  if ([*(id *)(a1 + 32) tileFunction]
    && MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)[*(id *)(a1 + 32) linkedFunctions])&& MTLMetalScriptBuilderImpl::addFunction(v2, objc_msgSend(*(id *)(a1 + 32), "tileFunction")))
  {
    MTLMetalScriptBuilderImpl::addTileRenderPipeline(v2, *(MTLTileRenderPipelineDescriptor **)(a1 + 32));
  }
}

void MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLMetalScriptBuilderImpl *this, MTLTileRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  [(MTLTileRenderPipelineDescriptor *)a2 _descriptorPrivate];
  operator new();
}

void sub_1827FFEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MTLMetalScriptBuilderImpl::addFunctionWithDescriptor(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = ___ZN25MTLMetalScriptBuilderImpl25addFunctionWithDescriptorEPU22objcproto11MTLFunction11objc_objectPU21objcproto10MTLLibrary11objc_objectP21MTLFunctionDescriptor_block_invoke;
  _OWORD v5[3] = &unk_1E521FF60;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[7] = a1;
  dispatch_sync(v4, v5);
}

void ___ZN25MTLMetalScriptBuilderImpl25addFunctionWithDescriptorEPU22objcproto11MTLFunction11objc_objectPU21objcproto10MTLLibrary11objc_objectP21MTLFunctionDescriptor_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  dispatch_data_t v3 = (void *)MEMORY[0x18530C9F0]();
  MTLMetalScriptBuilderImpl::addFunctionWithDescriptorInternal(v2, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

uint64_t MTLMetalScriptBuilderImpl::addFunctionWithDescriptorInternal(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  long long v8 = [a2 specializationAirScript];
  char v9 = [a4 options];
  char v10 = v9;
  if (!v8 && (v9 & 1) == 0) {
    return 0;
  }
  memset(__p, 0, 24);
  if (!v8)
  {
    MTLMetalScriptBuilderImpl::addFunction(a1, a2);
    MTLMetalScriptBuilderImpl::makeFunctionString(a1, a2, (std::string *)&c);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)c.count;
    __p[2] = *(void **)&c.hash[2];
    if ((v10 & 1) == 0) {
      goto LABEL_164;
    }
    goto LABEL_122;
  }
  if (a3)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (!a2) {
      goto LABEL_22;
    }
    uint64_t v12 = [a2 specializedFunctionTrackingData];
    if (!v12) {
      goto LABEL_22;
    }
  }
  if (a4)
  {
    uint64_t v13 = (flatbuffers::FlatBufferBuilder *)[a4 constantValues];
    if (a3)
    {
LABEL_9:
      uint64_t v14 = objc_msgSend(a3, "newFunctionWithName:", objc_msgSend(a4, "name"));
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v13 = *(flatbuffers::FlatBufferBuilder **)(v12 + 16);
    if (a3) {
      goto LABEL_9;
    }
  }
  uint64_t v14 = *(void **)(v12 + 8);
LABEL_19:
  if (!MTLMetalScriptBuilderImpl::addFunction(a1, v14))
  {
LABEL_22:
    uint64_t v11 = 0;
    goto LABEL_165;
  }
  *(void *)c.count = [v14 bitCodeHash];
  char v15 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a1 + 88, *(unint64_t **)c.count, (uint64_t)&std::piecewise_construct, &c);
  if (*((char *)v15 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v112, (const std::string::value_type *)v15[6], v15[7]);
  }
  else {
    std::string v112 = *(std::string *)((unsigned char *)v15 + 2);
  }
  if (a3) {

  }
  buffer_ptr = 0;
  size_t size_ptr = 0;
  char v16 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
  int v17 = 1;
  if (v16 && size_ptr)
  {
    uint64_t v18 = v16;
    uint64_t v19 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v20 < 9u || (uint64_t v21 = v20[4]) == 0)
    {
      dispatch_release(v16);
      goto LABEL_115;
    }
    uint64_t v22 = (int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
    uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
    unsigned int v24 = *v23;
    if (v24 <= 4)
    {
      uint64_t v25 = 0;
    }
    else
    {
      if (v23[2]) {
        uint64_t v25 = (unsigned int *)((char *)v22 + v23[2] + *(unsigned int *)((char *)v22 + v23[2]));
      }
      else {
        uint64_t v25 = 0;
      }
      if (v24 >= 7)
      {
        uint64_t v26 = v23[3];
        if (v26)
        {
          uint64_t v27 = (char *)v22 + v26;
          uint64_t v28 = *(unsigned int *)((char *)v22 + v26);
          std::string::basic_string[abi:ne180100](&c, v25 + 1, *v25);
          uint64_t v105 = &v27[v28];
          unsigned int v30 = *(_DWORD *)&v27[v28];
          uint64_t v29 = &v27[v28 + 4];
          std::string::basic_string[abi:ne180100](&__dst, v29, v30);
          BOOL v31 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)&c, (unsigned __int8 *)&__dst);
          if (SBYTE7(v118) < 0) {
            operator delete((void *)__dst);
          }
          if (SHIBYTE(c.hash[3]) < 0) {
            operator delete(*(void **)c.count);
          }
          if (v31)
          {
            uint64_t v32 = (unsigned int *)v105;
            std::string::basic_string[abi:ne180100](&c, v29, *(unsigned int *)v105);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            *(_OWORD *)std::string __p = *(_OWORD *)c.count;
            __p[2] = *(void **)&c.hash[2];
            std::string::basic_string[abi:ne180100](&c, v29, *(unsigned int *)v105);
            if (SHIBYTE(c.hash[3]) < 0)
            {
              unint64_t v33 = *(void *)c.hash;
              if (!*(void *)c.hash)
              {
                int String = 0;
LABEL_174:
                operator delete(*(void **)c.count);
                goto LABEL_51;
              }
              p_CC_SHA256_CTX c = *(CC_SHA256_CTX **)c.count;
            }
            else
            {
              unint64_t v33 = HIBYTE(c.hash[3]);
              if (!HIBYTE(c.hash[3]))
              {
                int String = 0;
                goto LABEL_51;
              }
              p_CC_SHA256_CTX c = &c;
            }
            int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), (const char *)p_c, v33);
            if ((SHIBYTE(c.hash[3]) & 0x80000000) == 0) {
              goto LABEL_51;
            }
            goto LABEL_174;
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100](&c, v25 + 1, *v25);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    int String = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)c.count;
    __p[2] = *(void **)&c.hash[2];
    uint64_t v32 = v25;
LABEL_51:
    MTLMetalScriptBuilderImpl::makeFunctionString(v25, (std::string *)&c);
    if (SHIBYTE(c.hash[3]) < 0)
    {
      unint64_t v36 = *(void *)c.hash;
      if (!*(void *)c.hash)
      {
        int v38 = 0;
LABEL_60:
        operator delete(*(void **)c.count);
LABEL_61:
        int v39 = MTLMetalScriptSerializer::addFunctionConstants((MTLMetalScriptSerializer *)(a1 + 248), v13, (MTLFunctionConstantValuesInternal *)v36);
        CC_SHA256_Init(&c);
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v40 = &v112;
        }
        else {
          uint64_t v40 = (std::string *)v112.__r_.__value_.__r.__words[0];
        }
        CC_SHA256_Update(&c, v40, 0x40u);
        Air::ConstantsSpecializationDescriptor::HashImpl(v22, &c);
        flatbuffers::SignatureBuilder::Create(&c, (unsigned __int8 **)v107);
        BOOL v106 = v32;
        long long __dst = *(_OWORD *)v107[0];
        long long v118 = *((_OWORD *)v107[0] + 1);
        v107[1] = v107[0];
        operator delete(v107[0]);
        std::string::basic_string[abi:ne180100]<0>(&c, "SpecializedLib_");
        v115[0] = __dst;
        v115[1] = v118;
        HashToString((uint64_t)v115, &v116);
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v41 = &v116;
        }
        else {
          uint64_t v41 = (std::string *)v116.__r_.__value_.__r.__words[0];
        }
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v116.__r_.__value_.__l.__size_;
        }
        uint64_t v43 = std::string::append((std::string *)&c, (const std::string::value_type *)v41, size);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        int64_t v108 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)unsigned int v107 = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v116.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(c.hash[3]) < 0) {
          operator delete(*(void **)c.count);
        }
        if (v108 >= 0) {
          size_t v45 = HIBYTE(v108);
        }
        else {
          size_t v45 = (size_t)v107[1];
        }
        uint64_t v46 = &c;
        std::string::basic_string[abi:ne180100]((uint64_t)&c, v45 + 1);
        int v103 = v39;
        if ((c.hash[3] & 0x80000000) != 0) {
          uint64_t v46 = *(CC_SHA256_CTX **)c.count;
        }
        if (v45)
        {
          if (v108 >= 0) {
            uint64_t v47 = v107;
          }
          else {
            uint64_t v47 = (char **)v107[0];
          }
          memmove(v46, v47, v45);
        }
        int v104 = v38;
        *(_WORD *)((char *)v46->count + v45) = 35;
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v48 = __p;
        }
        else {
          uint64_t v48 = (void **)__p[0];
        }
        if (SHIBYTE(__p[2]) >= 0) {
          std::string::size_type v49 = HIBYTE(__p[2]);
        }
        else {
          std::string::size_type v49 = (std::string::size_type)__p[1];
        }
        uint64_t v50 = std::string::append((std::string *)&c, (const std::string::value_type *)v48, v49);
        float v51 = (void *)v50->__r_.__value_.__r.__words[0];
        v116.__r_.__value_.__r.__words[0] = v50->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v116.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
        char v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        __p[0] = v51;
        __p[1] = v116.__r_.__value_.__l.__data_;
        *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v116.__r_.__value_.__r.__words + 7);
        HIBYTE(__p[2]) = v52;
        if (SHIBYTE(c.hash[3]) < 0) {
          operator delete(*(void **)c.count);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 168, (unsigned __int8 *)v107, (uint64_t)v107);
        if ((v53 & 1) == 0) {
          goto LABEL_103;
        }
        if (SHIBYTE(v108) < 0)
        {
          unint64_t v54 = (unint64_t)v107[1];
          if (v107[1])
          {
            uint64_t v55 = v107[0];
            goto LABEL_100;
          }
        }
        else
        {
          unint64_t v54 = HIBYTE(v108);
          if (HIBYTE(v108))
          {
            uint64_t v55 = (const char *)v107;
LABEL_100:
            int v56 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), v55, v54);
LABEL_102:
            *(unsigned char *)(a1 + 318) = 1;
            int v57 = *(_DWORD *)(a1 + 280);
            int v58 = *(_DWORD *)(a1 + 296);
            int v59 = *(_DWORD *)(a1 + 288);
            flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 248), 4, v56);
            flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 248), 6, v104);
            flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 248), 8, String);
            flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 248), 12, v103);
            c.count[0] = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 248), (unsigned __int16)v57 - (unsigned __int16)v58 + v59);
            std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>::push_back[abi:ne180100](a1 + 368, &c);
LABEL_103:
            unsigned __int16 v60 = (_OWORD *)[a2 bitCodeHash];
            std::string::basic_string[abi:ne180100](&v116, v106 + 1, *v106);
            if (SHIBYTE(v108) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&c, v107[0], (std::string::size_type)v107[1]);
            }
            else
            {
              *(_OWORD *)c.count = *(_OWORD *)v107;
              *(void *)&c.hash[2] = v108;
            }
            *(std::string *)&c.hash[4] = v116;
            memset(&v116, 0, sizeof(v116));
            int v114 = v60;
            BOOL v61 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a1 + 88, (unint64_t *)v60, (uint64_t)&std::piecewise_construct, &v114);
            std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)(v61 + 6), (long long *)&c);
            if (SHIBYTE(c.wbuf[1]) < 0) {
              operator delete(*(void **)&c.hash[4]);
            }
            if (SHIBYTE(c.hash[3]) < 0) {
              operator delete(*(void **)c.count);
            }
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v116.__r_.__value_.__l.__data_);
            }
            dispatch_release(v18);
            if (SHIBYTE(v108) < 0) {
              operator delete(v107[0]);
            }
            int v17 = 0;
            goto LABEL_115;
          }
        }
        int v56 = 0;
        goto LABEL_102;
      }
      uint64_t v37 = *(CC_SHA256_CTX **)c.count;
    }
    else
    {
      unint64_t v36 = HIBYTE(c.hash[3]);
      if (!HIBYTE(c.hash[3]))
      {
        int v38 = 0;
        goto LABEL_61;
      }
      uint64_t v37 = &c;
    }
    int v38 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), (const char *)v37, v36);
    if ((SHIBYTE(c.hash[3]) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
LABEL_115:
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (v10) {
    char v62 = v17;
  }
  else {
    char v62 = 1;
  }
  if (v62)
  {
    uint64_t v11 = v17 ^ 1u;
    goto LABEL_165;
  }
LABEL_122:
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v63 = __p;
  }
  else {
    uint64_t v63 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v64 = HIBYTE(__p[2]);
  }
  else {
    unint64_t v64 = (unint64_t)__p[1];
  }
  int v65 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), (const char *)v63, v64);
  if ([a2 functionType] == 5)
  {
    int v66 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), "supportsFamily(apple6) || supportsFamily(mac2)", 0x2EuLL);
    *(unsigned char *)(a1 + 318) = 1;
    int v67 = *(_DWORD *)(a1 + 280);
    int v68 = *(_DWORD *)(a1 + 296);
    int v69 = *(_DWORD *)(a1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 248), 6, v65);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 248), 4, v66);
    int v70 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 248), (unsigned __int16)v67 - (unsigned __int16)v68 + v69);
    int v71 = v70;
    uint64_t v72 = *(char **)(a1 + 496);
    unint64_t v73 = *(void *)(a1 + 504);
    if ((unint64_t)v72 >= v73)
    {
      uint64_t v84 = *(char **)(a1 + 488);
      uint64_t v85 = (v72 - v84) >> 2;
      if ((unint64_t)(v85 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v86 = v73 - (void)v84;
      unint64_t v87 = (uint64_t)(v73 - (void)v84) >> 1;
      if (v87 <= v85 + 1) {
        unint64_t v87 = v85 + 1;
      }
      if (v86 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v88 = v87;
      }
      if (v88)
      {
        uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 504, v88);
        uint64_t v84 = *(char **)(a1 + 488);
        uint64_t v72 = *(char **)(a1 + 496);
      }
      else
      {
        uint64_t v89 = 0;
      }
      uint64_t v96 = &v89[4 * v85];
      BOOL v97 = &v89[4 * v88];
      *(_DWORD *)uint64_t v96 = v71;
      uint64_t v74 = v96 + 4;
      while (v72 != v84)
      {
        int v98 = *((_DWORD *)v72 - 1);
        v72 -= 4;
        *((_DWORD *)v96 - 1) = v98;
        v96 -= 4;
      }
      *(void *)(a1 + 488) = v96;
      *(void *)(a1 + 496) = v74;
      *(void *)(a1 + 504) = v97;
      if (v84) {
        operator delete(v84);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v72 = v70;
      uint64_t v74 = v72 + 4;
    }
    *(void *)(a1 + 496) = v74;
  }
  else if ([a2 functionType] == 6)
  {
    int v75 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), "supportsFamily(apple6) || supportsFamily(mac2)", 0x2EuLL);
    *(unsigned char *)(a1 + 318) = 1;
    int v76 = *(_DWORD *)(a1 + 280);
    int v77 = *(_DWORD *)(a1 + 296);
    int v78 = *(_DWORD *)(a1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 248), 6, v65);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 248), 4, v75);
    int v79 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 248), (unsigned __int16)v76 - (unsigned __int16)v77 + v78);
    int v80 = v79;
    uint64_t v81 = *(char **)(a1 + 520);
    unint64_t v82 = *(void *)(a1 + 528);
    if ((unint64_t)v81 >= v82)
    {
      uint64_t v90 = *(char **)(a1 + 512);
      uint64_t v91 = (v81 - v90) >> 2;
      if ((unint64_t)(v91 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v92 = v82 - (void)v90;
      unint64_t v93 = (uint64_t)(v82 - (void)v90) >> 1;
      if (v93 <= v91 + 1) {
        unint64_t v93 = v91 + 1;
      }
      if (v92 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v93;
      }
      if (v94)
      {
        uint64_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 528, v94);
        uint64_t v81 = *(char **)(a1 + 520);
        uint64_t v90 = *(char **)(a1 + 512);
      }
      else
      {
        uint64_t v95 = 0;
      }
      uint64_t v99 = &v95[4 * v91];
      BOOL v100 = &v95[4 * v94];
      *(_DWORD *)uint64_t v99 = v80;
      uint64_t v83 = v99 + 4;
      while (v81 != v90)
      {
        int v101 = *((_DWORD *)v81 - 1);
        v81 -= 4;
        *((_DWORD *)v99 - 1) = v101;
        v99 -= 4;
      }
      *(void *)(a1 + 512) = v99;
      *(void *)(a1 + 520) = v83;
      *(void *)(a1 + 528) = v100;
      if (v90) {
        operator delete(v90);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v81 = v79;
      uint64_t v83 = v81 + 4;
    }
    *(void *)(a1 + 520) = v83;
  }
LABEL_164:
  uint64_t v11 = 1;
LABEL_165:
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_182800A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addLibraryWithDescriptor(NSObject **a1, uint64_t a2, uint64_t a3)
{
  dispatch_data_t v3 = *a1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN25MTLMetalScriptBuilderImpl24addLibraryWithDescriptorEPU21objcproto10MTLLibrary11objc_objectP28MTLStitchedLibraryDescriptor_block_invoke;
  block[3] = &unk_1E521FDD0;
  void block[5] = a3;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync(v3, block);
}

void ___ZN25MTLMetalScriptBuilderImpl24addLibraryWithDescriptorEPU21objcproto10MTLLibrary11objc_objectP28MTLStitchedLibraryDescriptor_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  dispatch_data_t v3 = (void *)MEMORY[0x18530C9F0]();
  MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(v2, 0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

uint64_t MTLMetalScriptBuilderImpl::addLibraryWithDescriptorInternal(uint64_t a1, void *a2, void *a3)
{
  return MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(a1, 0, a2, a3);
}

void MTLMetalScriptBuilderImpl::addLibrary(uint64_t a1, flatbuffers::FlatBufferBuilder *a2, const char *a3)
{
  uint64_t v5 = (MTLMetalScriptSerializer *)(a1 + 248);
  int v6 = MTLMetalScriptSerializer::addString((flatbuffers::FlatBufferBuilder *)(a1 + 248), a3);
  LODWORD(a2) = MTLMetalScriptSerializer::addString(v5, a2, v7);
  *(unsigned char *)(a1 + 318) = 1;
  int v8 = *(_DWORD *)(a1 + 280) - *(_DWORD *)(a1 + 296) + *(_DWORD *)(a1 + 288);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v5, 4, v6);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v5, 6, (int)a2);
  int v9 = flatbuffers::FlatBufferBuilder::EndTable(v5, v8);
  int v10 = v9;
  uint64_t v11 = *(char **)(a1 + 352);
  unint64_t v12 = *(void *)(a1 + 360);
  if ((unint64_t)v11 >= v12)
  {
    uint64_t v14 = *(char **)(a1 + 344);
    uint64_t v15 = (v11 - v14) >> 2;
    if ((unint64_t)(v15 + 1) >> 62) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = v12 - (void)v14;
    unint64_t v17 = (uint64_t)(v12 - (void)v14) >> 1;
    if (v17 <= v15 + 1) {
      unint64_t v17 = v15 + 1;
    }
    if (v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18)
    {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 360, v18);
      uint64_t v14 = *(char **)(a1 + 344);
      uint64_t v11 = *(char **)(a1 + 352);
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[4 * v15];
    uint64_t v21 = &v19[4 * v18];
    *(_DWORD *)uint64_t v20 = v10;
    uint64_t v13 = v20 + 4;
    while (v11 != v14)
    {
      int v22 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *(void *)(a1 + 344) = v20;
    *(void *)(a1 + 352) = v13;
    *(void *)(a1 + 360) = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v11 = v9;
    uint64_t v13 = v11 + 4;
  }
  *(void *)(a1 + 352) = v13;
}

void MTLMetalScriptBuilderImpl::addLibraryData(uint64_t a1, flatbuffers::FlatBufferBuilder *a2, _OWORD *a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v7 = a3[1];
  v16[0] = *a3;
  v16[1] = v7;
  HashToString((uint64_t)v16, &__p);
  if (!a2)
  {
    int v8 = "data";
    if (a4) {
      int v8 = "source";
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    a2 = (flatbuffers::FlatBufferBuilder *)objc_msgSend(NSString, "stringWithFormat:", @"_Path_not_available_for_lib_from_%s_with_UUID_%s", v8, p_p);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)&__p))
  {
    MTLMetalScriptBuilderImpl::addLibrary(a1, a2, (const char *)&__p);
    std::string::basic_string[abi:ne180100]<0>(&v12, (char *)[(flatbuffers::FlatBufferBuilder *)a2 cStringUsingEncoding:4]);
    uint64_t v15 = &__p;
    int v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 48, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v15);
    uint64_t v11 = v10 + 40;
    if ((char)v10[63] < 0) {
      operator delete(*(void **)v11);
    }
    *(_OWORD *)uint64_t v11 = v12;
    *((void *)v11 + 2) = v13;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_182800EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addLibraryData(MTLMetalScriptBuilderImpl *this, MTLLibraryData *a2)
{
  int v4 = (flatbuffers::FlatBufferBuilder *)(*(uint64_t (**)(MTLLibraryData *))(*(void *)a2 + 304))(a2);
  uint64_t v5 = (_OWORD *)(*(uint64_t (**)(MTLLibraryData *))(*(void *)a2 + 296))(a2);
  int v6 = (*(uint64_t (**)(MTLLibraryData *))(*(void *)a2 + 264))(a2);

  MTLMetalScriptBuilderImpl::addLibraryData((uint64_t)this, v4, v5, v6);
}

uint64_t MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    if (!a2) {
      return 0;
    }
    uint64_t v8 = [a2 stitchedLibraryTrackingData];
    if (!v8) {
      return 0;
    }
    int v183 = 0;
    uint64_t v184 = 0;
    unint64_t v185 = 0;
    std::string __p = 0;
    unint64_t v181 = 0;
    int v182 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  int v183 = 0;
  uint64_t v184 = 0;
  unint64_t v185 = 0;
  std::string __p = 0;
  unint64_t v181 = 0;
  int v182 = 0;
  if (a2)
  {
LABEL_7:
    int v10 = a3;
    uint64_t v155 = v8;
    int v9 = *(void **)(v8 + 8);
    goto LABEL_8;
  }
  int v9 = (void *)[a4 functions];
  int v10 = a3;
  uint64_t v155 = 0;
LABEL_8:
  unint64_t v156 = a4;
  unsigned int v154 = a2;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v176 = 0u;
  long long v177 = 0u;
  uint64_t v11 = [v9 countByEnumeratingWithState:&v176 objects:v191 count:16];
  uint64_t v157 = a1;
  if (!v11) {
    goto LABEL_57;
  }
  long long v12 = (flatbuffers::FlatBufferBuilder *)(a1 + 248);
  uint64_t v13 = *(void *)v177;
  while (2)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v177 != v13) {
        objc_enumerationMutation(v9);
      }
      uint64_t v15 = *(void **)(*((void *)&v176 + 1) + 8 * i);
      if ((MTLMetalScriptBuilderImpl::addFunction(v157, v15) & 1) == 0)
      {
        uint64_t v68 = 0;
        goto LABEL_230;
      }
      MTLMetalScriptBuilderImpl::makeFunctionString(v157, v15, (std::string *)&c);
      if (SHIBYTE(c.hash[3]) < 0)
      {
        unint64_t v16 = *(void *)c.hash;
        if (*(void *)c.hash)
        {
          p_CC_SHA256_CTX c = *(CC_SHA256_CTX **)c.count;
          goto LABEL_19;
        }
      }
      else
      {
        unint64_t v16 = HIBYTE(c.hash[3]);
        if (HIBYTE(c.hash[3]))
        {
          p_CC_SHA256_CTX c = &c;
LABEL_19:
          int String = flatbuffers::FlatBufferBuilder::CreateString(v12, (const char *)p_c, v16);
          goto LABEL_21;
        }
      }
      int String = 0;
LABEL_21:
      uint64_t v19 = v181;
      if (v181 >= v182)
      {
        uint64_t v21 = (char *)__p;
        uint64_t v22 = (v181 - (unsigned char *)__p) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v182 - (unsigned char *)__p;
        if ((v182 - (unsigned char *)__p) >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v182, v25);
          uint64_t v21 = (char *)__p;
          uint64_t v19 = v181;
        }
        else
        {
          uint64_t v26 = 0;
        }
        uint64_t v27 = &v26[4 * v22];
        *(_DWORD *)uint64_t v27 = String;
        uint64_t v20 = v27 + 4;
        while (v19 != v21)
        {
          int v28 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        std::string __p = v27;
        unint64_t v181 = v20;
        int v182 = &v26[4 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v181 = String;
        uint64_t v20 = v19 + 4;
      }
      unint64_t v181 = v20;
      if (SHIBYTE(c.hash[3]) < 0) {
        operator delete(*(void **)c.count);
      }
      uint64_t v29 = (unint64_t *)[v15 bitCodeHash];
      unsigned int v30 = v29;
      BOOL v31 = v184;
      if ((unint64_t)v184 >= v185)
      {
        int64_t v33 = ((char *)v184 - (unsigned char *)v183) >> 3;
        if ((unint64_t)(v33 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v34 = (uint64_t)(v185 - (void)v183) >> 2;
        if (v34 <= v33 + 1) {
          unint64_t v34 = v33 + 1;
        }
        if (v185 - (unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35) {
          unint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v185, v35);
        }
        else {
          unint64_t v36 = 0;
        }
        uint64_t v37 = (unint64_t **)&v36[8 * v33];
        *uint64_t v37 = v30;
        uint64_t v32 = v37 + 1;
        int v39 = (unint64_t **)v183;
        int v38 = v184;
        if (v184 != v183)
        {
          do
          {
            uint64_t v40 = *--v38;
            *--uint64_t v37 = v40;
          }
          while (v38 != v39);
          int v38 = (unint64_t **)v183;
        }
        int v183 = v37;
        uint64_t v184 = v32;
        unint64_t v185 = (unint64_t)&v36[8 * v35];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        char *v184 = v29;
        uint64_t v32 = v31 + 1;
      }
      uint64_t v184 = v32;
    }
    uint64_t v11 = [v9 countByEnumeratingWithState:&v176 objects:v191 count:16];
    a1 = v157;
    if (v11) {
      continue;
    }
    break;
  }
LABEL_57:
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  unint64_t v172 = 0;
  uint64_t v153 = v10;
  if (v10)
  {
    long long v168 = 0u;
    long long v169 = 0u;
    long long v166 = 0u;
    long long v167 = 0u;
    uint64_t v41 = (void *)[v156 functionGraphs];
    uint64_t v43 = [v41 countByEnumeratingWithState:&v166 objects:v190 count:16];
    if (v43)
    {
      uint64_t v44 = *(void *)v167;
      do
      {
        for (uint64_t j = 0; j != v43; ++j)
        {
          if (*(void *)v167 != v44) {
            objc_enumerationMutation(v41);
          }
          int Graph = MTLMetalScriptSerializer::createGraph((MTLMetalScriptSerializer *)(v157 + 248), *(MTLFunctionStitchingGraph **)(*((void *)&v166 + 1) + 8 * j), v42);
          int v47 = Graph;
          uint64_t v48 = v174;
          if (v174 >= v175)
          {
            uint64_t v50 = (char *)v173;
            uint64_t v51 = (v174 - (unsigned char *)v173) >> 2;
            unint64_t v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v53 = v175 - (unsigned char *)v173;
            if ((v175 - (unsigned char *)v173) >> 1 > v52) {
              unint64_t v52 = v53 >> 1;
            }
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v52;
            }
            if (v54)
            {
              uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v175, v54);
              uint64_t v50 = (char *)v173;
              uint64_t v48 = v174;
            }
            else
            {
              uint64_t v55 = 0;
            }
            int v56 = &v55[4 * v51];
            *(_DWORD *)int v56 = v47;
            std::string::size_type v49 = v56 + 4;
            while (v48 != v50)
            {
              int v57 = *((_DWORD *)v48 - 1);
              v48 -= 4;
              *((_DWORD *)v56 - 1) = v57;
              v56 -= 4;
            }
            uint64_t v173 = v56;
            uint64_t v174 = v49;
            uint64_t v175 = &v55[4 * v54];
            if (v50) {
              operator delete(v50);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v174 = Graph;
            std::string::size_type v49 = v48 + 4;
          }
          uint64_t v174 = v49;
          int v58 = (char *)v170;
          int v59 = v171;
          int64_t v60 = (v171 - (unsigned char *)v170) >> 3;
          if ((unint64_t)v171 >= v172)
          {
            unint64_t v62 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v63 = v172 - (void)v170;
            if ((uint64_t)(v172 - (void)v170) >> 2 > v62) {
              unint64_t v62 = v63 >> 2;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v64 = v62;
            }
            if (v64)
            {
              int v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v172, v64);
              int v58 = (char *)v170;
              int v59 = v171;
            }
            else
            {
              int v65 = 0;
            }
            int v66 = (int64_t *)&v65[8 * v60];
            *int v66 = v60;
            BOOL v61 = v66 + 1;
            while (v59 != v58)
            {
              int64_t v67 = *((void *)v59 - 1);
              v59 -= 8;
              *--int v66 = v67;
            }
            uint64_t v170 = v66;
            uint64_t v171 = (char *)v61;
            unint64_t v172 = (unint64_t)&v65[8 * v64];
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            *(void *)uint64_t v171 = v60;
            BOOL v61 = (uint64_t *)(v59 + 8);
          }
          uint64_t v171 = (char *)v61;
        }
        uint64_t v43 = [v41 countByEnumeratingWithState:&v166 objects:v190 count:16];
      }
      while (v43);
    }
    goto LABEL_148;
  }
  memset(&c, 0, 24);
  std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__init_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(&c, *(const void **)(v155 + 16), *(void *)(v155 + 24), (uint64_t)(*(void *)(v155 + 24) - *(void *)(v155 + 16)) >> 3);
  int v70 = *(NSObject ***)c.count;
  int v69 = *(NSObject ***)c.hash;
  if (*(void *)c.count != *(void *)c.hash)
  {
    uint64_t v71 = a1 + 248;
    while (1)
    {
      uint64_t v72 = *v70;
      size_ptr[0] = 0;
      buffer_ptr[0] = 0;
      map = dispatch_data_create_map(v72, (const void **)buffer_ptr, size_ptr);
      if (!map || size_ptr[0] == 0) {
        break;
      }
      int v75 = (int *)((char *)buffer_ptr[0] + *(unsigned int *)buffer_ptr[0]);
      int v76 = (unsigned __int16 *)((char *)v75 - *v75);
      if (*v76 >= 9u && (uint64_t v77 = v76[4]) != 0) {
        int v78 = (char *)v75 + v77 + *(unsigned int *)((char *)v75 + v77);
      }
      else {
        int v78 = 0;
      }
      int v79 = &v78[-*(int *)v78];
      if (*(unsigned __int16 *)v79 < 7u || (uint64_t v80 = *((unsigned __int16 *)v79 + 3)) == 0)
      {
        dispatch_release(map);
        break;
      }
      int v81 = Mtl::FunctionStitching::CloneGraph<Air::FunctionStitching::Graph>(v71, &v78[v80 + *(unsigned int *)&v78[v80]]);
      int v82 = v81;
      uint64_t v83 = v174;
      if (v174 >= v175)
      {
        uint64_t v85 = (char *)v173;
        uint64_t v86 = (v174 - (unsigned char *)v173) >> 2;
        unint64_t v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v88 = v175 - (unsigned char *)v173;
        if ((v175 - (unsigned char *)v173) >> 1 > v87) {
          unint64_t v87 = v88 >> 1;
        }
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v89 = v87;
        }
        if (v89)
        {
          uint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v175, v89);
          uint64_t v85 = (char *)v173;
          uint64_t v83 = v174;
        }
        else
        {
          uint64_t v90 = 0;
        }
        uint64_t v91 = &v90[4 * v86];
        *(_DWORD *)uint64_t v91 = v82;
        uint64_t v84 = v91 + 4;
        while (v83 != v85)
        {
          int v92 = *((_DWORD *)v83 - 1);
          v83 -= 4;
          *((_DWORD *)v91 - 1) = v92;
          v91 -= 4;
        }
        uint64_t v173 = v91;
        uint64_t v174 = v84;
        uint64_t v175 = &v90[4 * v89];
        if (v85) {
          operator delete(v85);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v174 = v81;
        uint64_t v84 = v83 + 4;
      }
      uint64_t v174 = v84;
      unint64_t v93 = (char *)v170;
      unint64_t v94 = v171;
      int64_t v95 = (v171 - (unsigned char *)v170) >> 3;
      if ((unint64_t)v171 >= v172)
      {
        unint64_t v97 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v98 = v172 - (void)v170;
        if ((uint64_t)(v172 - (void)v170) >> 2 > v97) {
          unint64_t v97 = v98 >> 2;
        }
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v99 = v97;
        }
        if (v99)
        {
          BOOL v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v172, v99);
          unint64_t v93 = (char *)v170;
          unint64_t v94 = v171;
        }
        else
        {
          BOOL v100 = 0;
        }
        int v101 = (int64_t *)&v100[8 * v95];
        *int v101 = v95;
        uint64_t v96 = v101 + 1;
        while (v94 != v93)
        {
          int64_t v102 = *((void *)v94 - 1);
          v94 -= 8;
          *--int v101 = v102;
        }
        uint64_t v170 = v101;
        uint64_t v171 = (char *)v96;
        unint64_t v172 = (unint64_t)&v100[8 * v99];
        if (v93) {
          operator delete(v93);
        }
      }
      else
      {
        *(void *)uint64_t v171 = v95;
        uint64_t v96 = (uint64_t *)(v94 + 8);
      }
      uint64_t v171 = (char *)v96;
      if (++v70 == v69)
      {
        int v70 = *(NSObject ***)c.count;
        goto LABEL_146;
      }
    }
    if (*(void *)c.count)
    {
      *(void *)c.hash = *(void *)c.count;
      operator delete(*(void **)c.count);
    }
    uint64_t v68 = 0;
    goto LABEL_226;
  }
LABEL_146:
  if (v70)
  {
    *(void *)c.hash = v70;
    operator delete(v70);
  }
LABEL_148:
  unint64_t v103 = 126 - 2 * __clz(((char *)v184 - (unsigned char *)v183) >> 3);
  if (v184 == v183) {
    uint64_t v104 = 0;
  }
  else {
    uint64_t v104 = v103;
  }
  std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**,false>((unint64_t **)v183, v184, v104, 1);
  unint64_t v105 = 126 - 2 * __clz((v171 - (unsigned char *)v170) >> 3);
  *(void *)c.count = v157;
  *(void *)c.hash = &v173;
  if (v171 == v170) {
    uint64_t v106 = 0;
  }
  else {
    uint64_t v106 = v105;
  }
  std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,false>((uint64_t)v170, (uint64_t *)v171, &c, v106, 1);
  CC_SHA256_Init(&c);
  unsigned int v107 = (const void **)v183;
  int64_t v108 = v184;
  while (v107 != (const void **)v108)
    CC_SHA256_Update(&c, *v107++, 0x20u);
  BOOL v109 = (char *)v170;
  uint64_t v110 = v171;
  uint64_t v111 = v153;
  if (v170 != v171)
  {
    do
    {
      Mtl::FunctionStitching::Graph::HashImpl((int *)(*(void *)(v157 + 296)+ *(_DWORD *)(v157 + 280)- *(void *)(v157 + 296)+ *(_DWORD *)(v157 + 288)- *((unsigned int *)v173 + *(void *)v109)), &c);
      v109 += 8;
    }
    while (v109 != v110);
  }
  flatbuffers::SignatureBuilder::Create(&c, (unsigned __int8 **)buffer_ptr);
  *(_OWORD *)size_t size_ptr = *(_OWORD *)buffer_ptr[0];
  long long v189 = *((_OWORD *)buffer_ptr[0] + 1);
  buffer_ptr[1] = buffer_ptr[0];
  operator delete(buffer_ptr[0]);
  std::string::basic_string[abi:ne180100]<0>(&c, "StitchedLib_");
  v187[0] = *(_OWORD *)size_ptr;
  v187[1] = v189;
  HashToString((uint64_t)v187, &v162);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v112 = &v162;
  }
  else {
    std::string v112 = (std::string *)v162.__r_.__value_.__r.__words[0];
  }
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v162.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v162.__r_.__value_.__l.__size_;
  }
  int v114 = std::string::append((std::string *)&c, (const std::string::value_type *)v112, size);
  long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  std::string::size_type v164 = v114->__r_.__value_.__r.__words[2];
  *(_OWORD *)buffer_ptr = v115;
  v114->__r_.__value_.__l.__size_ = 0;
  v114->__r_.__value_.__r.__words[2] = 0;
  v114->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v162.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(c.hash[3]) < 0) {
    operator delete(*(void **)c.count);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v157 + 208, (unsigned __int8 *)buffer_ptr, (uint64_t)buffer_ptr);
  if (v116)
  {
    if (SHIBYTE(v164) < 0)
    {
      unint64_t v117 = (unint64_t)buffer_ptr[1];
      if (!buffer_ptr[1]) {
        goto LABEL_176;
      }
      long long v118 = (void **)buffer_ptr[0];
LABEL_175:
      int v119 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(v157 + 248), (const char *)v118, v117);
    }
    else
    {
      unint64_t v117 = HIBYTE(v164);
      if (HIBYTE(v164))
      {
        long long v118 = buffer_ptr;
        goto LABEL_175;
      }
LABEL_176:
      int v119 = 0;
    }
    if (v181 == __p) {
      uint64_t v120 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
    }
    else {
      uint64_t v120 = __p;
    }
    int v121 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v157 + 248), (uint64_t)v120, (v181 - (unsigned char *)__p) >> 2);
    if (v174 == v173) {
      uint64_t v122 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Graph>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>> const&)::t;
    }
    else {
      uint64_t v122 = v173;
    }
    int v123 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v157 + 248), (uint64_t)v122, (v174 - (unsigned char *)v173) >> 2);
    *(unsigned char *)(v157 + 318) = 1;
    int v124 = *(_DWORD *)(v157 + 280);
    int v125 = *(_DWORD *)(v157 + 296);
    int v126 = *(_DWORD *)(v157 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v157 + 248), 4, v119);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v157 + 248), 6, v121);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v157 + 248), 8, v123);
    int v127 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v157 + 248), (unsigned __int16)v124 - (unsigned __int16)v125 + v126);
    int v128 = v127;
    int v129 = *(char **)(v157 + 400);
    unint64_t v130 = *(void *)(v157 + 408);
    if ((unint64_t)v129 >= v130)
    {
      int v132 = *(char **)(v157 + 392);
      uint64_t v133 = (v129 - v132) >> 2;
      if ((unint64_t)(v133 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v134 = v130 - (void)v132;
      unint64_t v135 = (uint64_t)(v130 - (void)v132) >> 1;
      if (v135 <= v133 + 1) {
        unint64_t v135 = v133 + 1;
      }
      if (v134 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v136 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v136 = v135;
      }
      if (v136)
      {
        int v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v157 + 408, v136);
        int v132 = *(char **)(v157 + 392);
        int v129 = *(char **)(v157 + 400);
      }
      else
      {
        int v137 = 0;
      }
      int v138 = &v137[4 * v133];
      int v139 = &v137[4 * v136];
      *(_DWORD *)int v138 = v128;
      int v131 = v138 + 4;
      while (v129 != v132)
      {
        int v140 = *((_DWORD *)v129 - 1);
        v129 -= 4;
        *((_DWORD *)v138 - 1) = v140;
        v138 -= 4;
      }
      *(void *)(v157 + 392) = v138;
      *(void *)(v157 + 400) = v131;
      *(void *)(v157 + 408) = v139;
      if (v132) {
        operator delete(v132);
      }
    }
    else
    {
      *(_DWORD *)int v129 = v127;
      int v131 = v129 + 4;
    }
    *(void *)(v157 + 400) = v131;
  }
  if (v153)
  {
    long long v160 = 0u;
    long long v161 = 0u;
    long long v158 = 0u;
    long long v159 = 0u;
    uint64_t v141 = (void *)[v156 functionGraphs];
    uint64_t v142 = [v141 countByEnumeratingWithState:&v158 objects:v186 count:16];
    if (v142)
    {
      uint64_t v143 = *(void *)v159;
      do
      {
        for (uint64_t k = 0; k != v142; ++k)
        {
          if (*(void *)v159 != v143) {
            objc_enumerationMutation(v141);
          }
          unint64_t v145 = objc_msgSend(v111, "newFunctionWithName:", objc_msgSend(*(id *)(*((void *)&v158 + 1) + 8 * k), "functionName", v153));
          uint64_t v146 = (unint64_t *)[v145 bitCodeHash];
          uint64_t v147 = objc_msgSend((id)objc_msgSend(v145, "name"), "UTF8String");
          if (SHIBYTE(v164) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&c, (const std::string::value_type *)buffer_ptr[0], (std::string::size_type)buffer_ptr[1]);
          }
          else
          {
            *(_OWORD *)c.count = *(_OWORD *)buffer_ptr;
            *(void *)&c.hash[2] = v164;
          }
          *(void *)&c.hash[4] = v147;
          v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
          int v148 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(v157 + 88, v146, (uint64_t)&std::piecewise_construct, &v162);
          std::pair<std::string,std::string>::operator=[abi:ne180100]<std::string,char const*,(void *)0>((uint64_t)(v148 + 6), (long long *)&c);
          if (SHIBYTE(c.hash[3]) < 0) {
            operator delete(*(void **)c.count);
          }
        }
        uint64_t v142 = [v141 countByEnumeratingWithState:&v158 objects:v186 count:16];
      }
      while (v142);
    }
  }
  else
  {
    int v149 = (unint64_t *)[v154 bitCodeHash];
    uint64_t v150 = objc_msgSend((id)objc_msgSend(v154, "name"), "UTF8String");
    if (SHIBYTE(v164) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&c, (const std::string::value_type *)buffer_ptr[0], (std::string::size_type)buffer_ptr[1]);
    }
    else
    {
      *(_OWORD *)c.count = *(_OWORD *)buffer_ptr;
      *(void *)&c.hash[2] = v164;
    }
    *(void *)&c.hash[4] = v150;
    v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
    uint64_t v151 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(v157 + 88, v149, (uint64_t)&std::piecewise_construct, &v162);
    std::pair<std::string,std::string>::operator=[abi:ne180100]<std::string,char const*,(void *)0>((uint64_t)(v151 + 6), (long long *)&c);
    if (SHIBYTE(c.hash[3]) < 0) {
      operator delete(*(void **)c.count);
    }
  }
  if (SHIBYTE(v164) < 0) {
    operator delete(buffer_ptr[0]);
  }
  uint64_t v68 = 1;
LABEL_226:
  if (v170)
  {
    uint64_t v171 = (char *)v170;
    operator delete(v170);
  }
  if (v173)
  {
    uint64_t v174 = (char *)v173;
    operator delete(v173);
  }
LABEL_230:
  if (__p)
  {
    unint64_t v181 = (char *)__p;
    operator delete(__p);
  }
  if (v183)
  {
    uint64_t v184 = (unint64_t **)v183;
    operator delete(v183);
  }
  return v68;
}

void sub_182801D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a56) {
    operator delete(a56);
  }
  if (a59) {
    operator delete(a59);
  }
  if (a71) {
    operator delete(a71);
  }
  if (a72) {
    operator delete(a72);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  return a1;
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

uint64_t Air::ConstantsSpecializationDescriptor::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantsSpecializationDescriptor", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    BOOL v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    BOOL v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    uint64_t v13 = (unsigned int *)((char *)a1 + v12);
    uint64_t v14 = *v13;
    uint64_t v15 = (int *)((char *)v13 + v14 + 4);
    CC_LONG v16 = *(unsigned int *)((char *)v13 + v14);
    uint64_t v17 = c;
  }
  else
  {
    int data = 0;
    uint64_t v15 = &data;
    uint64_t v17 = c;
    CC_LONG v16 = 4;
  }
  CC_SHA256_Update(v17, v15, v16);
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0)
  {
    uint64_t v20 = (unsigned int *)((char *)a1 + v19 + *(unsigned int *)((char *)a1 + v19));
    int data = *v20;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v22 = *v20;
    if (v22)
    {
      unint64_t v23 = v20 + 1;
      uint64_t v24 = v20 + 1;
      do
      {
        unsigned int v25 = *v24++;
        uint64_t result = Air::FunctionConstantValue::HashImpl((Air::FunctionConstantValue *)((char *)v23 + v25), c);
        unint64_t v23 = v24;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Mtl::FunctionStitching::CloneGraph<Air::FunctionStitching::Graph>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  uint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0xBu && (uint64_t v7 = *((unsigned __int16 *)v6 + 5)) != 0)
  {
    uint64_t v19 = &a2[v7 + *(unsigned int *)&a2[v7]];
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching9AttributeEEEZNS4_10CloneGraphIN3Air17FunctionStitching5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_INS4_5GraphEEEE4typeERS0_PKSE_EUlmPvE_vEENS2_INS_6VectorISE_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    uint64_t v19 = &a2[*(unsigned __int16 *)&a2[v5 + 6] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]];
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching4NodeEEEZNS4_10CloneGraphIN3Air17FunctionStitching5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_INS4_5GraphEEEE4typeERS0_PKSE_EUlmPvE0_vEENS2_INS_6VectorISE_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v9 = 0;
  }
  BOOL v10 = &a2[v5];
  if (*(unsigned __int16 *)v10 >= 5u && (uint64_t v11 = *((unsigned __int16 *)v10 + 2)) != 0) {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v11 + 4 + *(unsigned int *)&a2[v11]], *(unsigned int *)&a2[v11 + *(unsigned int *)&a2[v11]]);
  }
  else {
    int String = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 32);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 10, v8);
  }
  CC_LONG v16 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v16 >= 9u)
  {
    unsigned __int16 v17 = *((_WORD *)v16 + 4);
    if (v17)
    {
      LODWORD(v19) = *(_DWORD *)&a2[v17];
      flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)a1, 8, &v19);
    }
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v9);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, String);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t Mtl::FunctionStitching::Graph::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.Graph", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    BOOL v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    BOOL v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    uint64_t v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      uint64_t v15 = v13 + 1;
      CC_LONG v16 = v13 + 1;
      do
      {
        unsigned int v17 = *v16++;
        Mtl::FunctionStitching::Node::HashImpl((AirReflection::Node *)((char *)v15 + v17), c);
        uint64_t v15 = v16;
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 9u && (unsigned __int16 v19 = v18[4]) != 0)
  {
    uint64_t v20 = v19;
    CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
    int data = *(int *)((char *)a1 + v20);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0)
  {
    unint64_t v23 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    int data = *v23;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v25 = *v23;
    if (v25)
    {
      uint64_t v26 = v23 + 1;
      uint64_t v27 = v23 + 1;
      do
      {
        unsigned int v28 = *v27++;
        uint64_t result = Mtl::FunctionStitching::Attribute::HashImpl((Mtl::FunctionStitching::Attribute *)((char *)v26 + v28), c);
        uint64_t v26 = v27;
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100]<std::string,char const*,(void *)0>(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  MEMORY[0x18530BF30](a1 + 24, *((void *)a2 + 3));
  return a1;
}

uint64_t MTLMetalScriptBuilderImpl::newSerializedMetalScript(NSObject **this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3052000000;
  int v8 = __Block_byref_object_copy__1;
  CC_LONG v9 = __Block_byref_object_dispose__1;
  uint64_t v10 = 0;
  uint64_t v1 = *this;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl24newSerializedMetalScriptEv_block_invoke;
  v4[3] = &unk_1E5220298;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void ___ZN25MTLMetalScriptBuilderImpl24newSerializedMetalScriptEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(v1 + 424) == *(void *)(v1 + 416)
    && *(void *)(v1 + 448) == *(void *)(v1 + 440)
    && *(void *)(v1 + 472) == *(void *)(v1 + 464))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 0;
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 544) - *(void *)(v1 + 536);
    if (v2) {
      uint64_t v3 = *(void **)(v1 + 536);
    }
    else {
      uint64_t v3 = &flatbuffers::data<flatbuffers::Offset<Mtl::NamedPredicate>,std::allocator<flatbuffers::Offset<Mtl::NamedPredicate>>>(std::vector<flatbuffers::Offset<Mtl::NamedPredicate>> const&)::t;
    }
    int v44 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v3, v2 >> 2);
    uint64_t v4 = *(void *)(v1 + 352) - *(void *)(v1 + 344);
    if (v4) {
      uint64_t v5 = *(void **)(v1 + 344);
    }
    else {
      uint64_t v5 = &flatbuffers::data<flatbuffers::Offset<Mtl::PathLibrary>,std::allocator<flatbuffers::Offset<Mtl::PathLibrary>>>(std::vector<flatbuffers::Offset<Mtl::PathLibrary>> const&)::t;
    }
    int v43 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v5, v4 >> 2);
    uint64_t v6 = *(void *)(v1 + 376) - *(void *)(v1 + 368);
    if (v6) {
      uint64_t v7 = *(void **)(v1 + 368);
    }
    else {
      uint64_t v7 = &flatbuffers::data<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>,std::allocator<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>>(std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>> const&)::t;
    }
    int v8 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v7, v6 >> 2);
    uint64_t v9 = *(void *)(v1 + 400) - *(void *)(v1 + 392);
    if (v9) {
      uint64_t v10 = *(void **)(v1 + 392);
    }
    else {
      uint64_t v10 = &flatbuffers::data<flatbuffers::Offset<Mtl::StitchedLibrary>,std::allocator<flatbuffers::Offset<Mtl::StitchedLibrary>>>(std::vector<flatbuffers::Offset<Mtl::StitchedLibrary>> const&)::t;
    }
    int v11 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v10, v9 >> 2);
    uint64_t v12 = *(void *)(v1 + 424) - *(void *)(v1 + 416);
    if (v12) {
      uint64_t v13 = *(void **)(v1 + 416);
    }
    else {
      uint64_t v13 = &flatbuffers::data<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>> const&)::t;
    }
    int v42 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v13, v12 >> 2);
    uint64_t v14 = *(void *)(v1 + 448) - *(void *)(v1 + 440);
    if (v14) {
      uint64_t v15 = *(void **)(v1 + 440);
    }
    else {
      uint64_t v15 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>> const&)::t;
    }
    int v16 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v15, v14 >> 2);
    uint64_t v17 = *(void *)(v1 + 568) - *(void *)(v1 + 560);
    if (v17) {
      unint64_t v18 = *(void **)(v1 + 560);
    }
    else {
      unint64_t v18 = &flatbuffers::data<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>> const&)::t;
    }
    int v41 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v18, v17 >> 2);
    uint64_t v19 = *(void *)(v1 + 472) - *(void *)(v1 + 464);
    if (v19) {
      uint64_t v20 = *(void **)(v1 + 464);
    }
    else {
      uint64_t v20 = &flatbuffers::data<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>> const&)::t;
    }
    int v21 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v20, v19 >> 2);
    uint64_t v22 = *(void *)(v1 + 496) - *(void *)(v1 + 488);
    if (v22) {
      unint64_t v23 = *(void **)(v1 + 488);
    }
    else {
      unint64_t v23 = &flatbuffers::data<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>> const&)::t;
    }
    int v24 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v23, v22 >> 2);
    uint64_t v25 = *(void *)(v1 + 520) - *(void *)(v1 + 512);
    if (v25) {
      uint64_t v26 = *(void **)(v1 + 512);
    }
    else {
      uint64_t v26 = &flatbuffers::data<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>,std::allocator<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>> const&)::t;
    }
    int v27 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v26, v25 >> 2);
    *(unsigned char *)(v1 + 318) = 1;
    int v28 = *(_DWORD *)(v1 + 280) - *(_DWORD *)(v1 + 296) + *(_DWORD *)(v1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 4, v43);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 6, v8);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 8, v11);
    int v29 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v1 + 248), v28);
    *(unsigned char *)(v1 + 318) = 1;
    int v30 = *(_DWORD *)(v1 + 280) - *(_DWORD *)(v1 + 296) + *(_DWORD *)(v1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 4, v42);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 6, v16);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 8, v21);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 10, v41);
    int v31 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v1 + 248), v30);
    *(unsigned char *)(v1 + 318) = 1;
    int v32 = *(_DWORD *)(v1 + 280) - *(_DWORD *)(v1 + 296) + *(_DWORD *)(v1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 6, v24);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 4, v27);
    int v33 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v1 + 248), v32);
    uint64_t v52 = 0x300000000;
    int v53 = 0;
    *(unsigned char *)(v1 + 318) = 1;
    int v34 = *(_DWORD *)(v1 + 280) - *(_DWORD *)(v1 + 296) + *(_DWORD *)(v1 + 288);
    flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 4, &v52);
    unsigned int v35 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(v1 + 248, 2);
    flatbuffers::FlatBufferBuilder::TrackField((void *)(v1 + 248), 6, v35);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 8, v44);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 12, v29);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 14, v31);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(v1 + 248), 16, v33);
    int v36 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v1 + 248), v34);
    flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)(v1 + 248), v36, "MTLP", 0);
    int v37 = *(unsigned __int8 *)(v1 + 256);
    uint64_t v39 = *(void *)(v1 + 280);
    uint64_t v38 = *(void *)(v1 + 288);
    uint64_t v40 = *(void **)(v1 + 296);
    uint64_t v46 = *(void *)(v1 + 248);
    char v47 = v37;
    uint64_t v48 = v38;
    uint64_t v49 = v39;
    uint64_t v50 = v40;
    uint64_t v51 = (v39 + v38 - v40);
    if (v37)
    {
      *(void *)(v1 + 248) = 0;
      *(unsigned char *)(v1 + 256) = 0;
    }
    *(_OWORD *)(v1 + 280) = 0u;
    *(_OWORD *)(v1 + 296) = 0u;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = dispatch_data_create(v40, (v39 + v38 - v40), 0, 0);
    MTLMetalScriptBuilderImpl::resetInternal((MTLMetalScriptBuilderImpl *)v1, 0);
    MTLMetalScriptBuilderImpl::initFromData((MTLMetalScriptBuilderImpl *)v1, (char *)v40);
    flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v46);
  }
}

void sub_182802A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)va);
  _Unwind_Resume(a1);
}

void MTLMetalScriptBuilderImpl::reset(NSObject **this, char a2)
{
  uint64_t v2 = *this;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl5resetEb_block_invoke;
  v3[3] = &__block_descriptor_41_e5_v8__0l;
  v3[4] = this;
  char v4 = a2;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl5resetEb_block_invoke(uint64_t a1)
{
}

void MTLMetalScriptBuilder::addComputePipelineWithDescriptor(MTLMetalScriptBuilder *this, MTLComputePipelineDescriptor *a2)
{
  uint64_t v2 = *(NSObject ***)this;
  uint64_t v3 = **(NSObject ***)this;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl32addComputePipelineWithDescriptorEP28MTLComputePipelineDescriptor_block_invoke;
  v4[3] = &unk_1E5220270;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void MTLMetalScriptBuilder::addRenderPipelineWithDescriptor(MTLMetalScriptBuilder *this, MTLRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *(NSObject ***)this;
  uint64_t v3 = **(NSObject ***)this;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl31addRenderPipelineWithDescriptorEP27MTLRenderPipelineDescriptor_block_invoke;
  v4[3] = &unk_1E5220270;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void MTLMetalScriptBuilder::addMeshRenderPipelineWithDescriptor(MTLMetalScriptBuilder *this, MTLMeshRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *(NSObject ***)this;
  uint64_t v3 = **(NSObject ***)this;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl35addMeshRenderPipelineWithDescriptorEP31MTLMeshRenderPipelineDescriptor_block_invoke;
  v4[3] = &unk_1E5220270;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void MTLMetalScriptBuilder::addTileRenderPipelineWithDescriptor(MTLMetalScriptBuilder *this, MTLTileRenderPipelineDescriptor *a2)
{
  uint64_t v2 = *(NSObject ***)this;
  uint64_t v3 = **(NSObject ***)this;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl35addTileRenderPipelineWithDescriptorEP31MTLTileRenderPipelineDescriptor_block_invoke;
  v4[3] = &unk_1E5220270;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void MTLMetalScriptBuilder::addFunctionWithDescriptor(NSObject ***a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *a1;
  uint64_t v5 = **a1;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = ___ZN25MTLMetalScriptBuilderImpl25addFunctionWithDescriptorEPU22objcproto11MTLFunction11objc_objectPU21objcproto10MTLLibrary11objc_objectP21MTLFunctionDescriptor_block_invoke;
  v6[3] = &unk_1E521FF60;
  void v6[4] = a2;
  v6[5] = a3;
  void v6[6] = a4;
  v6[7] = v4;
  dispatch_sync(v5, v6);
}

void MTLMetalScriptBuilder::addLibraryWithDescriptor(NSObject ***a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  char v4 = **a1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN25MTLMetalScriptBuilderImpl24addLibraryWithDescriptorEPU21objcproto10MTLLibrary11objc_objectP28MTLStitchedLibraryDescriptor_block_invoke;
  block[3] = &unk_1E521FDD0;
  void block[5] = a3;
  block[6] = v3;
  block[4] = a2;
  dispatch_sync(v4, block);
}

uint64_t MTLMetalScriptBuilder::newSerializedMetalScript(MTLMetalScriptBuilder *this)
{
  return MTLMetalScriptBuilderImpl::newSerializedMetalScript(*(NSObject ***)this);
}

void MTLMetalScriptBuilder::reset(MTLMetalScriptBuilder *this)
{
  uint64_t v1 = *(NSObject ***)this;
  uint64_t v2 = **(NSObject ***)this;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl5resetEb_block_invoke;
  v3[3] = &__block_descriptor_41_e5_v8__0l;
  v3[4] = v1;
  char v4 = 1;
  dispatch_sync(v2, v3);
}

void MTLMetalScriptBuilder::initFromScript(NSObject ***a1, NSObject *a2)
{
}

void *std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        uint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v9)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v18 >= v10) {
                v18 %= v10;
              }
            }
            else
            {
              v18 &= v10 - 1;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v9;
  *((_OWORD *)v14 + 1) = *a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }
  *(void *)uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v3) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10) {
        v27 %= v10;
      }
    }
    else
    {
      v27 &= v10 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*v7;
  return v14;
}

void sub_1828030A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

uint64_t std::pair<std::vector<objc_object  {objcproto24MTLFunctionStitchingNode}*>,std::unordered_map<objc_object  {objcproto24MTLFunctionStitchingNode},unsigned int,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,objc_object  {objcproto24MTLFunctionStitchingNode}*<std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>>>::~pair(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 24);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

__n128 __Block_byref_object_copy__34(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN24MTLMetalScriptSerializerL12createGroupsERN11flatbuffers17FlatBufferBuilderEP12NSDictionaryIP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(flatbuffers::FlatBufferBuilder **)(a1 + 40);
  uint64_t v6 = (const char *)[a2 UTF8String];
  size_t v7 = strlen(v6);
  int String = flatbuffers::FlatBufferBuilder::CreateString(v5, v6, v7);
  std::string __p = 0;
  int v58 = 0;
  int v59 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v9 = [a3 countByEnumeratingWithState:&v53 objects:v60 count:16];
  if (v9)
  {
    int v52 = String;
    uint64_t v10 = *(void *)v54;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v54 != v10) {
          objc_enumerationMutation(a3);
        }
        unint64_t v12 = *(flatbuffers::FlatBufferBuilder **)(a1 + 40);
        uint64_t v13 = (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v53 + 1) + 8 * i), "name"), "UTF8String");
        size_t v14 = strlen(v13);
        int v15 = flatbuffers::FlatBufferBuilder::CreateString(v12, v13, v14);
        int v16 = v15;
        uint64_t v17 = v58;
        if (v58 >= v59)
        {
          float v19 = (char *)__p;
          uint64_t v20 = (v58 - (unsigned char *)__p) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v59 - (unsigned char *)__p;
          if ((v59 - (unsigned char *)__p) >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            size_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v59, v23);
            float v19 = (char *)__p;
            uint64_t v17 = v58;
          }
          else
          {
            size_t v24 = 0;
          }
          uint64_t v25 = &v24[4 * v20];
          *(_DWORD *)uint64_t v25 = v16;
          unint64_t v18 = v25 + 4;
          while (v17 != v19)
          {
            int v26 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          std::string __p = v25;
          int v58 = v18;
          int v59 = &v24[4 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_DWORD *)int v58 = v15;
          unint64_t v18 = v17 + 4;
        }
        int v58 = v18;
      }
      uint64_t v9 = [a3 countByEnumeratingWithState:&v53 objects:v60 count:16];
    }
    while (v9);
    unint64_t v27 = __p;
    int v28 = v58;
    int String = v52;
  }
  else
  {
    int v28 = 0;
    unint64_t v27 = 0;
  }
  uint64_t v29 = v28 - v27;
  if (v29) {
    int v30 = v27;
  }
  else {
    int v30 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  int v31 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(*(flatbuffers::FlatBufferBuilder **)(a1 + 40), (uint64_t)v30, v29 >> 2);
  uint64_t v32 = *(void *)(a1 + 40);
  *(unsigned char *)(v32 + 70) = 1;
  int v33 = *(_DWORD *)(v32 + 32);
  int v34 = *(_DWORD *)(v32 + 48);
  int v35 = *(_DWORD *)(v32 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)v32, 4, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)v32, 6, v31);
  __int16 v36 = v33 - v34 + v35;
  int v37 = *(void **)(*(void *)(a1 + 32) + 8);
  int v38 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v32, v36);
  int v39 = v38;
  unint64_t v40 = v37[8];
  int v41 = (char *)v37[7];
  if ((unint64_t)v41 >= v40)
  {
    int v43 = (char *)v37[6];
    uint64_t v44 = (v41 - v43) >> 2;
    if ((unint64_t)(v44 + 1) >> 62) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v45 = v40 - (void)v43;
    unint64_t v46 = (uint64_t)(v40 - (void)v43) >> 1;
    if (v46 <= v44 + 1) {
      unint64_t v46 = v44 + 1;
    }
    if (v45 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v46;
    }
    if (v47)
    {
      uint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v37 + 8), v47);
      int v43 = (char *)v37[6];
      int v41 = (char *)v37[7];
    }
    else
    {
      uint64_t v48 = 0;
    }
    uint64_t v49 = &v48[4 * v44];
    uint64_t v50 = &v48[4 * v47];
    *(_DWORD *)uint64_t v49 = v39;
    int v42 = v49 + 4;
    while (v41 != v43)
    {
      int v51 = *((_DWORD *)v41 - 1);
      v41 -= 4;
      *((_DWORD *)v49 - 1) = v51;
      v49 -= 4;
    }
    v37[6] = v49;
    v37[7] = v42;
    v37[8] = v50;
    if (v43) {
      operator delete(v43);
    }
  }
  else
  {
    *(_DWORD *)int v41 = v38;
    int v42 = v41 + 4;
  }
  v37[7] = v42;
  if (__p)
  {
    int v58 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1828034B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<float>(uint64_t a1, float a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(float *)(v4 - 4) = a2;
  uint64_t v5 = v4 - 4;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t makeValue(flatbuffers::FlatBufferBuilder *a1, MTLDataType a2, _DWORD *a3)
{
  switch(a2)
  {
    case MTLDataTypeFloat:
      unint64_t v3 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>((uint64_t)a1, v3);
    case MTLDataTypeFloat2:
      uint64_t v4 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>((uint64_t)a1, v4);
    case MTLDataTypeFloat3:
      uint64_t v5 = (uint64_t *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>((uint64_t)a1, v5);
    case MTLDataTypeFloat4:
      uint64_t v6 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>((uint64_t)a1, v6);
    case MTLDataTypeHalf:
      size_t v7 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)a1, v7);
    case MTLDataTypeHalf2:
      unint64_t v8 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>((uint64_t)a1, v8);
    case MTLDataTypeHalf3:
      uint64_t v9 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>((uint64_t)a1, v9);
    case MTLDataTypeHalf4:
      uint64_t v10 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>((uint64_t)a1, v10);
    case MTLDataTypeInt:
      unint64_t v3 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>((uint64_t)a1, v3);
    case MTLDataTypeInt2:
      uint64_t v4 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>((uint64_t)a1, v4);
    case MTLDataTypeInt3:
      uint64_t v5 = (uint64_t *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>((uint64_t)a1, v5);
    case MTLDataTypeInt4:
      uint64_t v6 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>((uint64_t)a1, v6);
    case MTLDataTypeUInt:
      unint64_t v3 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>((uint64_t)a1, v3);
    case MTLDataTypeUInt2:
      uint64_t v4 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>((uint64_t)a1, v4);
    case MTLDataTypeUInt3:
      uint64_t v5 = (uint64_t *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>((uint64_t)a1, v5);
    case MTLDataTypeUInt4:
      uint64_t v6 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>((uint64_t)a1, v6);
    case MTLDataTypeShort:
      size_t v7 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)a1, v7);
    case MTLDataTypeShort2:
      unint64_t v8 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>((uint64_t)a1, v8);
    case MTLDataTypeShort3:
      uint64_t v9 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>((uint64_t)a1, v9);
    case MTLDataTypeShort4:
      uint64_t v10 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>((uint64_t)a1, v10);
    case MTLDataTypeUShort:
      size_t v7 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)a1, v7);
    case MTLDataTypeUShort2:
      unint64_t v8 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>((uint64_t)a1, v8);
    case MTLDataTypeUShort3:
      uint64_t v9 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>((uint64_t)a1, v9);
    case MTLDataTypeUShort4:
      uint64_t v10 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>((uint64_t)a1, v10);
    case MTLDataTypeChar:
      unint64_t v12 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>((uint64_t)a1, v12);
    case MTLDataTypeChar2:
      uint64_t v13 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>((uint64_t)a1, v13);
    case MTLDataTypeChar3:
      size_t v14 = (__int16 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>((uint64_t)a1, v14);
    case MTLDataTypeChar4:
      int v15 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>((uint64_t)a1, v15);
    case MTLDataTypeUChar:
      unint64_t v12 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>((uint64_t)a1, v12);
    case MTLDataTypeUChar2:
      uint64_t v13 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>((uint64_t)a1, v13);
    case MTLDataTypeUChar3:
      size_t v14 = (__int16 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>((uint64_t)a1, v14);
    case MTLDataTypeUChar4:
      int v15 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>((uint64_t)a1, v15);
    case MTLDataTypeBool:
      unint64_t v12 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>((uint64_t)a1, v12);
    case MTLDataTypeBool2:
      uint64_t v13 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>((uint64_t)a1, v13);
    case MTLDataTypeBool3:
      size_t v14 = (__int16 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>((uint64_t)a1, v14);
    case MTLDataTypeBool4:
      int v15 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>((uint64_t)a1, v15);
    case MTLDataTypeLong:
      int v16 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>((uint64_t)a1, v16);
    case MTLDataTypeLong2:
      uint64_t v17 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>((uint64_t)a1, v17);
    case MTLDataTypeLong3:
      unint64_t v18 = (long long *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>((uint64_t)a1, v18);
    case MTLDataTypeLong4:
      float v19 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>((uint64_t)a1, v19);
    case MTLDataTypeULong:
      int v16 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>((uint64_t)a1, v16);
    case MTLDataTypeULong2:
      uint64_t v17 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>((uint64_t)a1, v17);
    case MTLDataTypeULong3:
      unint64_t v18 = (long long *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>((uint64_t)a1, v18);
    case MTLDataTypeULong4:
      float v19 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>((uint64_t)a1, v19);
    case MTLDataTypeULong4|MTLDataTypeStruct:
      int v16 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>((uint64_t)a1, v16);
    case MTLDataTypeULong4|MTLDataTypeArray:
      uint64_t v17 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>((uint64_t)a1, v17);
    case MTLDataTypeULong4|MTLDataTypeFloat:
      unint64_t v18 = (long long *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>((uint64_t)a1, v18);
    case MTLDataTypeULong4|MTLDataTypeFloat2:
      float v19 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>((uint64_t)a1, v19);
    case MTLDataTypeULong4|MTLDataTypeFloat3:
      uint64_t v20 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>((uint64_t)a1, v20);
    case MTLDataTypeULong4|MTLDataTypeFloat4:
      unint64_t v21 = (long long *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>((uint64_t)a1, v21);
    case MTLDataTypeULong4|MTLDataTypeFloat2x2:
      uint64_t v22 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>((uint64_t)a1, v22);
    case MTLDataTypeR16Unorm|MTLDataTypeInt4:
      unint64_t v23 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>((uint64_t)a1, v23);
    case MTLDataTypeR16Snorm|MTLDataTypeInt4:
      uint64_t v20 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>((uint64_t)a1, v20);
    case MTLDataTypeRG8Unorm|MTLDataTypeInt4:
      unint64_t v21 = (long long *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>((uint64_t)a1, v21);
    case MTLDataTypeRG8Snorm|MTLDataTypeInt4:
      uint64_t v20 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>((uint64_t)a1, v20);
    case MTLDataTypeRG16Unorm|MTLDataTypeInt4:
      unint64_t v21 = (long long *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>((uint64_t)a1, v21);
    case MTLDataTypeRG16Snorm|MTLDataTypeInt4:
      uint64_t v22 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>((uint64_t)a1, v22);
    case MTLDataTypeRGBA8Unorm|MTLDataTypeInt4:
      unint64_t v23 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>((uint64_t)a1, v23);
    case MTLDataTypeRGBA8Unorm_sRGB|MTLDataTypeInt4:
      uint64_t v22 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>((uint64_t)a1, v22);
    case MTLDataTypeRGBA8Snorm|MTLDataTypeInt4:
      unint64_t v23 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>((uint64_t)a1, v23);
    case MTLDataTypeRGBA16Unorm|MTLDataTypeInt4:
      size_t v24 = a3;
      goto LABEL_84;
    case MTLDataTypeRGBA16Snorm|MTLDataTypeInt4:
      uint64_t v25 = a3;
      goto LABEL_86;
    case MTLDataTypeRGB10A2Unorm|MTLDataTypeInt4:
      size_t v24 = a3;
      goto LABEL_84;
    case MTLDataTypeRG11B10Float|MTLDataTypeInt4:
      uint64_t v25 = a3;
      goto LABEL_86;
    case MTLDataTypeRGB9E5Float|MTLDataTypeInt4:
      int v26 = (long long *)a3;
      goto LABEL_90;
    case MTLDataTypeRenderPipeline|MTLDataTypeInt4:
      unint64_t v27 = (long long *)a3;
      goto LABEL_92;
    case MTLDataTypeComputePipeline|MTLDataTypeInt4:
      int v26 = (long long *)a3;
      goto LABEL_90;
    case MTLDataTypeIndirectCommandBuffer|MTLDataTypeInt4:
      unint64_t v27 = (long long *)a3;
      goto LABEL_92;
    case MTLDataTypeLong|MTLDataTypeInt4:
      int v26 = (long long *)a3;
LABEL_90:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>((uint64_t)a1, v26);
      break;
    case MTLDataTypeLong2|MTLDataTypeInt4:
      unint64_t v27 = (long long *)a3;
LABEL_92:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>((uint64_t)a1, v27);
      break;
    case MTLDataTypeInstanceAccelerationStructure|MTLDataTypeStruct:
      size_t v24 = a3;
LABEL_84:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>((uint64_t)a1, v24);
      break;
    case MTLDataTypeULong4|MTLDataTypeInt4:
      uint64_t v25 = a3;
LABEL_86:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>((uint64_t)a1, v25);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t Air::FunctionConstantValue::HashImpl(Air::FunctionConstantValue *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionConstantValue", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v4 < 5u)
  {
    LOWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOWORD(v5) = *(_WORD *)((char *)a1 + v5);
    }
  }
  __int16 data = v5;
  CC_SHA256_Update(c, &data, 2u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *((unsigned __int8 *)a1 + v7);
    }
  }
  int v84 = v7;
  CC_SHA256_Update(c, &v84, 4u);
  unint64_t v8 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0)
  {
    switch(*((unsigned char *)a1 + v9))
    {
      case 3:
        uint64_t v10 = (int *)Air::FunctionConstantValue::value_as_ConstantFloat(a1);
        uint64_t result = Air::ConstantFloat::HashImpl(v10, c);
        break;
      case 4:
        uint64_t v12 = Air::FunctionConstantValue::value_as_ConstantFloat2(a1);
        uint64_t result = Air::ConstantFloat2::HashImpl(v12, c);
        break;
      case 5:
        uint64_t v13 = Air::FunctionConstantValue::value_as_ConstantFloat3(a1);
        uint64_t result = Air::ConstantFloat3::HashImpl(v13, c);
        break;
      case 6:
        uint64_t v14 = Air::FunctionConstantValue::value_as_ConstantFloat4(a1);
        uint64_t result = Air::ConstantFloat4::HashImpl(v14, c);
        break;
      case 0x10:
        int v15 = (__int16 *)Air::FunctionConstantValue::value_as_ConstantHalf(a1);
        uint64_t result = Air::ConstantHalf::HashImpl(v15, c);
        break;
      case 0x11:
        uint64_t v16 = Air::FunctionConstantValue::value_as_ConstantHalf2(a1);
        uint64_t result = Air::ConstantHalf2::HashImpl(v16, c);
        break;
      case 0x12:
        uint64_t v17 = Air::FunctionConstantValue::value_as_ConstantHalf3(a1);
        uint64_t result = Air::ConstantHalf3::HashImpl(v17, c);
        break;
      case 0x13:
        uint64_t v18 = Air::FunctionConstantValue::value_as_ConstantHalf4(a1);
        uint64_t result = Air::ConstantHalf4::HashImpl(v18, c);
        break;
      case 0x1D:
        float v19 = (int *)Air::FunctionConstantValue::value_as_ConstantInt(a1);
        uint64_t result = Air::ConstantInt::HashImpl(v19, c);
        break;
      case 0x1E:
        uint64_t v20 = Air::FunctionConstantValue::value_as_ConstantInt2(a1);
        uint64_t result = Air::ConstantInt2::HashImpl(v20, c);
        break;
      case 0x1F:
        uint64_t v21 = Air::FunctionConstantValue::value_as_ConstantInt3(a1);
        uint64_t result = Air::ConstantInt3::HashImpl(v21, c);
        break;
      case 0x20:
        uint64_t v22 = Air::FunctionConstantValue::value_as_ConstantInt4(a1);
        uint64_t result = Air::ConstantInt4::HashImpl(v22, c);
        break;
      case 0x21:
        unint64_t v23 = (int *)Air::FunctionConstantValue::value_as_ConstantUInt(a1);
        uint64_t result = Air::ConstantUInt::HashImpl(v23, c);
        break;
      case 0x22:
        uint64_t v24 = Air::FunctionConstantValue::value_as_ConstantUInt2(a1);
        uint64_t result = Air::ConstantUInt2::HashImpl(v24, c);
        break;
      case 0x23:
        uint64_t v25 = Air::FunctionConstantValue::value_as_ConstantUInt3(a1);
        uint64_t result = Air::ConstantUInt3::HashImpl(v25, c);
        break;
      case 0x24:
        uint64_t v26 = Air::FunctionConstantValue::value_as_ConstantUInt4(a1);
        uint64_t result = Air::ConstantUInt4::HashImpl(v26, c);
        break;
      case 0x25:
        unint64_t v27 = (__int16 *)Air::FunctionConstantValue::value_as_ConstantShort(a1);
        uint64_t result = Air::ConstantShort::HashImpl(v27, c);
        break;
      case 0x26:
        uint64_t v28 = Air::FunctionConstantValue::value_as_ConstantShort2(a1);
        uint64_t result = Air::ConstantShort2::HashImpl(v28, c);
        break;
      case 0x27:
        uint64_t v29 = Air::FunctionConstantValue::value_as_ConstantShort3(a1);
        uint64_t result = Air::ConstantShort3::HashImpl(v29, c);
        break;
      case 0x28:
        uint64_t v30 = Air::FunctionConstantValue::value_as_ConstantShort4(a1);
        uint64_t result = Air::ConstantShort4::HashImpl(v30, c);
        break;
      case 0x29:
        int v31 = (__int16 *)Air::FunctionConstantValue::value_as_ConstantUShort(a1);
        uint64_t result = Air::ConstantUShort::HashImpl(v31, c);
        break;
      case 0x2A:
        uint64_t v32 = Air::FunctionConstantValue::value_as_ConstantUShort2(a1);
        uint64_t result = Air::ConstantUShort2::HashImpl(v32, c);
        break;
      case 0x2B:
        uint64_t v33 = Air::FunctionConstantValue::value_as_ConstantUShort3(a1);
        uint64_t result = Air::ConstantUShort3::HashImpl(v33, c);
        break;
      case 0x2C:
        uint64_t v34 = Air::FunctionConstantValue::value_as_ConstantUShort4(a1);
        uint64_t result = Air::ConstantUShort4::HashImpl(v34, c);
        break;
      case 0x2D:
        int v35 = (char *)Air::FunctionConstantValue::value_as_ConstantChar(a1);
        uint64_t result = Air::ConstantChar::HashImpl(v35, c);
        break;
      case 0x2E:
        uint64_t v36 = Air::FunctionConstantValue::value_as_ConstantChar2(a1);
        uint64_t result = Air::ConstantChar2::HashImpl(v36, c);
        break;
      case 0x2F:
        uint64_t v37 = Air::FunctionConstantValue::value_as_ConstantChar3(a1);
        uint64_t result = Air::ConstantChar3::HashImpl(v37, c);
        break;
      case 0x30:
        uint64_t v38 = Air::FunctionConstantValue::value_as_ConstantChar4(a1);
        uint64_t result = Air::ConstantChar4::HashImpl(v38, c);
        break;
      case 0x31:
        int v39 = (char *)Air::FunctionConstantValue::value_as_ConstantUChar(a1);
        uint64_t result = Air::ConstantUChar::HashImpl(v39, c);
        break;
      case 0x32:
        uint64_t v40 = Air::FunctionConstantValue::value_as_ConstantUChar2(a1);
        uint64_t result = Air::ConstantUChar2::HashImpl(v40, c);
        break;
      case 0x33:
        uint64_t v41 = Air::FunctionConstantValue::value_as_ConstantUChar3(a1);
        uint64_t result = Air::ConstantUChar3::HashImpl(v41, c);
        break;
      case 0x34:
        uint64_t v42 = Air::FunctionConstantValue::value_as_ConstantUChar4(a1);
        uint64_t result = Air::ConstantUChar4::HashImpl(v42, c);
        break;
      case 0x35:
        int v43 = (unsigned char *)Air::FunctionConstantValue::value_as_ConstantBool(a1);
        uint64_t result = Air::ConstantBool::HashImpl(v43, c);
        break;
      case 0x36:
        uint64_t v44 = Air::FunctionConstantValue::value_as_ConstantBool2(a1);
        uint64_t result = Air::ConstantBool2::HashImpl(v44, c);
        break;
      case 0x37:
        uint64_t v45 = Air::FunctionConstantValue::value_as_ConstantBool3(a1);
        uint64_t result = Air::ConstantBool3::HashImpl(v45, c);
        break;
      case 0x38:
        uint64_t v46 = Air::FunctionConstantValue::value_as_ConstantBool4(a1);
        uint64_t result = Air::ConstantBool4::HashImpl(v46, c);
        break;
      case 0x51:
        unint64_t v47 = (uint64_t *)Air::FunctionConstantValue::value_as_ConstantLong(a1);
        uint64_t result = Air::ConstantLong::HashImpl(v47, c);
        break;
      case 0x52:
        uint64_t v48 = Air::FunctionConstantValue::value_as_ConstantLong2(a1);
        uint64_t result = Air::ConstantLong2::HashImpl(v48, c);
        break;
      case 0x53:
        uint64_t v49 = Air::FunctionConstantValue::value_as_ConstantLong3(a1);
        uint64_t result = Air::ConstantLong3::HashImpl(v49, c);
        break;
      case 0x54:
        uint64_t v50 = Air::FunctionConstantValue::value_as_ConstantLong4(a1);
        uint64_t result = Air::ConstantLong4::HashImpl(v50, c);
        break;
      case 0x55:
        int v51 = (uint64_t *)Air::FunctionConstantValue::value_as_ConstantULong(a1);
        uint64_t result = Air::ConstantULong::HashImpl(v51, c);
        break;
      case 0x56:
        uint64_t v52 = Air::FunctionConstantValue::value_as_ConstantULong2(a1);
        uint64_t result = Air::ConstantULong2::HashImpl(v52, c);
        break;
      case 0x57:
        uint64_t v53 = Air::FunctionConstantValue::value_as_ConstantULong3(a1);
        uint64_t result = Air::ConstantULong3::HashImpl(v53, c);
        break;
      case 0x58:
        uint64_t v54 = Air::FunctionConstantValue::value_as_ConstantULong4(a1);
        uint64_t result = Air::ConstantULong4::HashImpl(v54, c);
        break;
      case 0x59:
        long long v55 = (uint64_t *)Air::FunctionConstantValue::value_as_ConstantDouble(a1);
        uint64_t result = Air::ConstantDouble::HashImpl(v55, c);
        break;
      case 0x5A:
        uint64_t v56 = Air::FunctionConstantValue::value_as_ConstantDouble2(a1);
        uint64_t result = Air::ConstantDouble2::HashImpl(v56, c);
        break;
      case 0x5B:
        uint64_t v57 = Air::FunctionConstantValue::value_as_ConstantDouble3(a1);
        uint64_t result = Air::ConstantDouble3::HashImpl(v57, c);
        break;
      case 0x5C:
        uint64_t v58 = Air::FunctionConstantValue::value_as_ConstantDouble4(a1);
        uint64_t result = Air::ConstantDouble4::HashImpl(v58, c);
        break;
      case 0x5D:
        uint64_t v59 = Air::FunctionConstantValue::value_as_ConstantFloat8(a1);
        uint64_t result = Air::ConstantFloat8::HashImpl(v59, c);
        break;
      case 0x5E:
        uint64_t v60 = Air::FunctionConstantValue::value_as_ConstantFloat16(a1);
        uint64_t result = Air::ConstantFloat16::HashImpl(v60, c);
        break;
      case 0x5F:
        uint64_t v61 = Air::FunctionConstantValue::value_as_ConstantHalf8(a1);
        uint64_t result = Air::ConstantHalf8::HashImpl(v61, c);
        break;
      case 0x60:
        uint64_t v62 = Air::FunctionConstantValue::value_as_ConstantHalf16(a1);
        uint64_t result = Air::ConstantHalf16::HashImpl(v62, c);
        break;
      case 0x61:
        uint64_t v63 = Air::FunctionConstantValue::value_as_ConstantInt8(a1);
        uint64_t result = Air::ConstantInt8::HashImpl(v63, c);
        break;
      case 0x62:
        uint64_t v64 = Air::FunctionConstantValue::value_as_ConstantInt16(a1);
        uint64_t result = Air::ConstantInt16::HashImpl(v64, c);
        break;
      case 0x63:
        uint64_t v65 = Air::FunctionConstantValue::value_as_ConstantUInt8(a1);
        uint64_t result = Air::ConstantUInt8::HashImpl(v65, c);
        break;
      case 0x64:
        uint64_t v66 = Air::FunctionConstantValue::value_as_ConstantUInt16(a1);
        uint64_t result = Air::ConstantUInt16::HashImpl(v66, c);
        break;
      case 0x65:
        uint64_t v67 = Air::FunctionConstantValue::value_as_ConstantShort8(a1);
        uint64_t result = Air::ConstantShort8::HashImpl(v67, c);
        break;
      case 0x66:
        uint64_t v68 = Air::FunctionConstantValue::value_as_ConstantShort16(a1);
        uint64_t result = Air::ConstantShort16::HashImpl(v68, c);
        break;
      case 0x67:
        uint64_t v69 = Air::FunctionConstantValue::value_as_ConstantUShort8(a1);
        uint64_t result = Air::ConstantUShort8::HashImpl(v69, c);
        break;
      case 0x68:
        uint64_t v70 = Air::FunctionConstantValue::value_as_ConstantUShort16(a1);
        uint64_t result = Air::ConstantUShort16::HashImpl(v70, c);
        break;
      case 0x69:
        uint64_t v71 = Air::FunctionConstantValue::value_as_ConstantChar8(a1);
        uint64_t result = Air::ConstantChar8::HashImpl(v71, c);
        break;
      case 0x6A:
        uint64_t v72 = Air::FunctionConstantValue::value_as_ConstantChar16(a1);
        uint64_t result = Air::ConstantChar16::HashImpl(v72, c);
        break;
      case 0x6B:
        uint64_t v73 = Air::FunctionConstantValue::value_as_ConstantUChar8(a1);
        uint64_t result = Air::ConstantUChar8::HashImpl(v73, c);
        break;
      case 0x6C:
        uint64_t v74 = Air::FunctionConstantValue::value_as_ConstantUChar16(a1);
        uint64_t result = Air::ConstantUChar16::HashImpl(v74, c);
        break;
      case 0x6D:
        uint64_t v75 = Air::FunctionConstantValue::value_as_ConstantLong8(a1);
        uint64_t result = Air::ConstantLong8::HashImpl(v75, c);
        break;
      case 0x6E:
        uint64_t v76 = Air::FunctionConstantValue::value_as_ConstantLong16(a1);
        uint64_t result = Air::ConstantLong16::HashImpl(v76, c);
        break;
      case 0x6F:
        uint64_t v77 = Air::FunctionConstantValue::value_as_ConstantULong8(a1);
        uint64_t result = Air::ConstantULong8::HashImpl(v77, c);
        break;
      case 0x70:
        uint64_t v78 = Air::FunctionConstantValue::value_as_ConstantULong16(a1);
        uint64_t result = Air::ConstantULong16::HashImpl(v78, c);
        break;
      case 0x71:
        uint64_t v79 = Air::FunctionConstantValue::value_as_ConstantDouble8(a1);
        uint64_t result = Air::ConstantDouble8::HashImpl(v79, c);
        break;
      case 0x72:
        uint64_t v80 = Air::FunctionConstantValue::value_as_ConstantDouble16(a1);
        uint64_t result = Air::ConstantDouble16::HashImpl(v80, c);
        break;
      case 0x77:
        uint64_t v81 = Air::FunctionConstantValue::value_as_ConstantBool8(a1);
        uint64_t result = Air::ConstantBool8::HashImpl(v81, c);
        break;
      case 0x78:
        uint64_t v82 = Air::FunctionConstantValue::value_as_ConstantBool16(a1);
        uint64_t result = Air::ConstantBool16::HashImpl(v82, c);
        break;
      default:
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    int v85 = 0;
    return CC_SHA256_Update(c, &v85, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 3) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantFloat::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantFloat", 0x11u);
  int data = *a1;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 4) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantFloat2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantFloat2", 0x12u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 5) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantFloat3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantFloat3", 0x12u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 12; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 6) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantFloat4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantFloat4", 0x12u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 16) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantHalf::HashImpl(__int16 *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantHalf", 0x10u);
  __int16 data = *a1;
  return CC_SHA256_Update(c, &data, 2u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 17) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantHalf2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantHalf2", 0x11u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 4; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 18) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantHalf3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantHalf3", 0x11u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 6; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 19) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantHalf4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantHalf4", 0x11u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 29) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantInt::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantInt", 0xFu);
  int data = *a1;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 30) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantInt2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantInt2", 0x10u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (BOOL v3 = *((unsigned char *)this + v1[3]) == 31) : (BOOL v3 = 0), v3 && (v4 = v1[4]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::ConstantInt3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantInt3", 0x10u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 12; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 32)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantInt4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantInt4", 0x10u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 33)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUInt::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUInt", 0x10u);
  int data = *a1;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 34)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUInt2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUInt2", 0x11u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 35)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUInt3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUInt3", 0x11u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 12; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 36)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUInt4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUInt4", 0x11u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 37)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantShort::HashImpl(__int16 *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantShort", 0x11u);
  __int16 data = *a1;
  return CC_SHA256_Update(c, &data, 2u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 38)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantShort2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantShort2", 0x12u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 4; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 39)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantShort3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantShort3", 0x12u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 6; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 40)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantShort4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantShort4", 0x12u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 41)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUShort::HashImpl(__int16 *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUShort", 0x12u);
  __int16 data = *a1;
  return CC_SHA256_Update(c, &data, 2u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 42)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUShort2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUShort2", 0x13u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 4; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 43)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUShort3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUShort3", 0x13u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 6; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 44)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUShort4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUShort4", 0x13u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 45)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantChar::HashImpl(char *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantChar", 0x10u);
  char data = *a1;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 46)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantChar2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantChar2", 0x11u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 2; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 47)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantChar3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantChar3", 0x11u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 3; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 48)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantChar4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantChar4", 0x11u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 4; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 49)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUChar::HashImpl(char *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUChar", 0x11u);
  char data = *a1;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 50)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUChar2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUChar2", 0x12u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 2; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 51)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUChar3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUChar3", 0x12u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 3; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 52)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUChar4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUChar4", 0x12u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 4; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 53)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantBool::HashImpl(unsigned char *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantBool", 0x10u);
  BOOL data = *a1 != 0;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 54)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantBool2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantBool2", 0x11u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 2; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 55)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantBool3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantBool3", 0x11u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 3; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 56)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantBool4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantBool4", 0x11u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 4; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 81)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantLong::HashImpl(uint64_t *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantLong", 0x10u);
  uint64_t data = *a1;
  return CC_SHA256_Update(c, &data, 8u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 82)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantLong2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantLong2", 0x11u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 83)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantLong3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantLong3", 0x11u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 24; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 84)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantLong4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantLong4", 0x11u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 85)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantULong::HashImpl(uint64_t *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantULong", 0x11u);
  uint64_t data = *a1;
  return CC_SHA256_Update(c, &data, 8u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 86)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantULong2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantULong2", 0x12u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 87)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantULong3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantULong3", 0x12u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 24; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 88)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantULong4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantULong4", 0x12u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 89)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantDouble::HashImpl(uint64_t *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantDouble", 0x12u);
  uint64_t data = *a1;
  return CC_SHA256_Update(c, &data, 8u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble2(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 90)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantDouble2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantDouble2", 0x13u);
  if (a1)
  {
    __int16 data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble3(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 91)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantDouble3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantDouble3", 0x13u);
  if (a1)
  {
    __int16 data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 24; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble4(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 92)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantDouble4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantDouble4", 0x13u);
  if (a1)
  {
    __int16 data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 93)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantFloat8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantFloat8", 0x12u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 94)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantFloat16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantFloat16", 0x13u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 64; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 95)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantHalf8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantHalf8", 0x11u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 96)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantHalf16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantHalf16", 0x12u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 97)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantInt8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantInt8", 0x10u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 98)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantInt16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantInt16", 0x11u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 64; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 99)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUInt8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUInt8", 0x11u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 100)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUInt16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUInt16", 0x12u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 64; i += 4)
    {
      int v7 = *(_DWORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 101)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantShort8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantShort8", 0x12u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 102)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantShort16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantShort16", 0x13u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 103)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUShort8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUShort8", 0x13u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 104)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUShort16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUShort16", 0x14u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 32; i += 2)
    {
      __int16 v7 = *(_WORD *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 105)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantChar8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantChar8", 0x11u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 106)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantChar16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantChar16", 0x12u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 107)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUChar8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUChar8", 0x12u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 108)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantUChar16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantUChar16", 0x13u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 109)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantLong8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantLong8", 0x11u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 64; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 110)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantLong16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantLong16", 0x12u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 128; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 111)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantULong8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantULong8", 0x12u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 64; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 112)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantULong16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantULong16", 0x13u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 128; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 113)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantDouble8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantDouble8", 0x13u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 64; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 114)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantDouble16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantDouble16", 0x14u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 128; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool8(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 119)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantBool8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantBool8", 0x11u);
  if (a1)
  {
    __int16 data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 8; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool16(Air::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 7 || !v1[3]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 9 && *((unsigned char *)this + v1[3]) == 120)
  {
    uint64_t v3 = v1[4];
    if (v1[4]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Air::ConstantBool16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.ConstantBool16", 0x12u);
  if (a1)
  {
    __int16 data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (uint64_t i = 0; i != 16; ++i)
    {
      char v7 = *(unsigned char *)(a1 + i);
      uint64_t result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    int v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

void *std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__init_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18280856C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::Node::HashImpl(AirReflection::Node *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.Node", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(_DWORD *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v6 >= 5u && (uint64_t v7 = v6[2]) != 0)
  {
    switch(*(_DWORD *)((char *)a1 + v7))
    {
      case 1:
        size_t v8 = (int *)AirReflection::Node::node_as_FragmentFunction(a1);
        uint64_t result = Mtl::FunctionStitching::InputNode::HashImpl(v8, c);
        break;
      case 2:
        uint64_t v13 = (int *)AirReflection::Node::node_as_KernelFunction(a1);
        uint64_t result = Mtl::FunctionStitching::FunctionNode::HashImpl(v13, c);
        break;
      case 3:
        uint64_t v14 = (int *)AirReflection::Node::node_as_VertexFunction(a1);
        uint64_t result = Mtl::FunctionStitching::BufferNode::HashImpl(v14, c);
        break;
      case 4:
        int v15 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(a1);
        uint64_t result = Mtl::FunctionStitching::BufferAddressNode::HashImpl(v15, c);
        break;
      case 5:
        uint64_t v16 = (int *)AirReflection::Node::node_as_IntersectionFunction(a1);
        uint64_t result = Mtl::FunctionStitching::BufferDataNode::HashImpl(v16, c);
        break;
      case 6:
        uint64_t v17 = (int *)AirReflection::Node::node_as_MeshFunction(a1);
        uint64_t result = Mtl::FunctionStitching::TextureNode::HashImpl(v17, c);
        break;
      case 7:
        uint64_t v18 = (int *)AirReflection::Node::node_as_ObjectFunction(a1);
        uint64_t result = Mtl::FunctionStitching::SamplerNode::HashImpl(v18, c);
        break;
      case 8:
        float v19 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(a1);
        uint64_t result = Mtl::FunctionStitching::ThreadgroupNode::HashImpl(v19, c);
        break;
      case 9:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(a1);
        uint64_t v10 = "Mtl.FunctionStitching.ImageblockNode";
        uint8x8_t v11 = c;
        CC_LONG v12 = 36;
        return CC_SHA256_Update(v11, v10, v12);
      case 0xA:
        uint64_t v20 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(a1);
        uint64_t result = Mtl::FunctionStitching::BuiltinNode::HashImpl(v20, c);
        break;
      case 0xB:
        uint64_t v21 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(a1);
        uint64_t result = Mtl::FunctionStitching::EarlyReturnNode::HashImpl(v21, c);
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    int v23 = 0;
    uint64_t v10 = (const char *)&v23;
    uint8x8_t v11 = c;
    CC_LONG v12 = 4;
    return CC_SHA256_Update(v11, v10, v12);
  }
  return result;
}

uint64_t Mtl::FunctionStitching::Attribute::HashImpl(Mtl::FunctionStitching::Attribute *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.Attribute", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *((unsigned __int8 *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v6 < 5u) {
    goto LABEL_10;
  }
  uint64_t v7 = v6[2];
  if (!v7) {
    goto LABEL_10;
  }
  int v8 = *((unsigned __int8 *)a1 + v7);
  if (v8 == 2)
  {
    Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(a1);
    uint64_t v9 = "Mtl.FunctionStitching.KernelAttribute";
    uint64_t v10 = c;
    CC_LONG v11 = 37;
    return CC_SHA256_Update(v10, v9, v11);
  }
  if (v8 == 1)
  {
    Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(a1);
    uint64_t v9 = "Mtl.FunctionStitching.AlwaysInlineAttribute";
    uint64_t v10 = c;
    CC_LONG v11 = 43;
  }
  else
  {
LABEL_10:
    int v14 = 0;
    uint64_t v9 = (const char *)&v14;
    uint64_t v10 = c;
    CC_LONG v11 = 4;
  }
  return CC_SHA256_Update(v10, v9, v11);
}

uint64_t Mtl::FunctionStitching::InputNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.InputNode", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::FunctionNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.FunctionNode", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    uint64_t v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  CC_LONG v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    uint64_t v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      int v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
        int v16 = *v15++;
        int data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
  {
    float v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v21 = *v19;
    if (v21)
    {
      uint64_t v22 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
        int v23 = *v22++;
        int data = v23;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Mtl::FunctionStitching::BufferNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.BufferNode", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int v10 = v7;
  return CC_SHA256_Update(c, &v10, 4u);
}

uint64_t Mtl::FunctionStitching::BufferAddressNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.BufferAddressNode", 0x27u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    Mtl::FunctionStitching::BufferNode::HashImpl((int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5)), c);
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      uint64_t v7 = *(void *)((char *)a1 + v7);
    }
  }
  uint64_t v10 = v7;
  return CC_SHA256_Update(c, &v10, 8u);
}

uint64_t Mtl::FunctionStitching::BufferDataNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.BufferDataNode", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    return Mtl::FunctionStitching::BufferAddressNode::HashImpl(v6, c);
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
}

uint64_t Mtl::FunctionStitching::TextureNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.TextureNode", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::SamplerNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.SamplerNode", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::ThreadgroupNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.ThreadgroupNode", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::Node::node_as_ImageblockNode(Mtl::FunctionStitching::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (BOOL v3 = *(_DWORD *)((char *)this + v1[2]) == 9) : (BOOL v3 = 0), v3 && (v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionStitching::BuiltinNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.BuiltinNode", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::EarlyReturnNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Mtl.FunctionStitching.EarlyReturnNode", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
    int data = *(int *)((char *)a1 + v6);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0)
  {
    CC_LONG v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
    int data = *v9;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v9;
    if (v11)
    {
      uint64_t v12 = (int *)(v9 + 1);
      do
      {
        CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
        int v13 = *v12++;
        int data = v13;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(Mtl::FunctionStitching::Attribute *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (BOOL v3 = *((unsigned char *)this + v1[2]) == 1) : (BOOL v3 = 0), v3 && (v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::$_0 &,MTLUINT256_t *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - (void)v10;
          unint64_t v12 = (uint64_t)(a2 - (void)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v83 = *(void *)(a2 - 32);
                unint64_t v82 = a2 - 32;
                unint64_t v84 = bswap64(v83);
                unint64_t v85 = bswap64(*v10);
                if (v84 == v85
                  && (unint64_t v84 = bswap64(*(void *)(v82 + 8)), v85 = bswap64(v10[1]), v84 == v85)
                  && (unint64_t v84 = bswap64(*(void *)(v82 + 16)), v85 = bswap64(v10[2]), v84 == v85)
                  && (unint64_t v84 = bswap64(*(void *)(v82 + 24)), v85 = bswap64(v10[3]), v84 == v85))
                {
                  int v86 = 0;
                }
                else if (v84 < v85)
                {
                  int v86 = -1;
                }
                else
                {
                  int v86 = 1;
                }
                if (v86 < 0)
                {
                  __n128 v193 = *(__n128 *)v10;
                  long long v202 = *((_OWORD *)v10 + 1);
                  long long v155 = *(_OWORD *)(v82 + 16);
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v82;
                  *((_OWORD *)v10 + 1) = v155;
                  __n128 result = v193;
                  *(__n128 *)unint64_t v82 = v193;
                  *(_OWORD *)(v82 + 16) = v202;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, (unint64_t *)(a2 - 32));
                break;
              case 4uLL:
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
                break;
              case 5uLL:
                unint64_t v87 = v10 + 4;
                uint64_t v88 = v10 + 8;
                unint64_t v89 = v10 + 12;
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, v10 + 12).n128_u64[0];
                unint64_t v91 = *(void *)(a2 - 32);
                unint64_t v90 = a2 - 32;
                unint64_t v92 = bswap64(v91);
                unint64_t v93 = bswap64(v10[12]);
                if (v92 == v93
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 8)), v93 = bswap64(v10[13]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 16)), v93 = bswap64(v10[14]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 24)), v93 = bswap64(v10[15]), v92 == v93))
                {
                  int v94 = 0;
                }
                else if (v92 < v93)
                {
                  int v94 = -1;
                }
                else
                {
                  int v94 = 1;
                }
                if (v94 < 0)
                {
                  __n128 result = *(__n128 *)v89;
                  long long v203 = *((_OWORD *)v10 + 7);
                  long long v156 = *(_OWORD *)(v90 + 16);
                  *(_OWORD *)unint64_t v89 = *(_OWORD *)v90;
                  *((_OWORD *)v10 + 7) = v156;
                  *(__n128 *)unint64_t v90 = result;
                  *(_OWORD *)(v90 + 16) = v203;
                  unint64_t v157 = bswap64(*v89);
                  unint64_t v158 = bswap64(*v88);
                  if (v157 != v158) {
                    goto LABEL_328;
                  }
                  unint64_t v157 = bswap64(v10[13]);
                  unint64_t v158 = bswap64(v10[9]);
                  if (v157 == v158
                    && (v157 = bswap64(v10[14]), unint64_t v158 = bswap64(v10[10]), v157 == v158)
                    && (v157 = bswap64(v10[15]), unint64_t v158 = bswap64(v10[11]), v157 == v158))
                  {
                    int v159 = 0;
                  }
                  else
                  {
LABEL_328:
                    int v159 = v157 < v158 ? -1 : 1;
                  }
                  if (v159 < 0)
                  {
                    long long v170 = *(_OWORD *)v88;
                    __n128 result = *((__n128 *)v10 + 5);
                    long long v171 = *((_OWORD *)v10 + 7);
                    *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
                    *((_OWORD *)v10 + 5) = v171;
                    *(_OWORD *)unint64_t v89 = v170;
                    *((__n128 *)v10 + 7) = result;
                    unint64_t v172 = bswap64(*v88);
                    unint64_t v173 = bswap64(*v87);
                    if (v172 != v173) {
                      goto LABEL_337;
                    }
                    unint64_t v172 = bswap64(v10[9]);
                    unint64_t v173 = bswap64(v10[5]);
                    if (v172 == v173
                      && (unint64_t v172 = bswap64(v10[10]), v173 = bswap64(v10[6]), v172 == v173)
                      && (unint64_t v172 = bswap64(v10[11]), v173 = bswap64(v10[7]), v172 == v173))
                    {
                      int v174 = 0;
                    }
                    else
                    {
LABEL_337:
                      int v174 = v172 < v173 ? -1 : 1;
                    }
                    if (v174 < 0)
                    {
                      long long v175 = *(_OWORD *)v87;
                      __n128 result = *((__n128 *)v10 + 3);
                      long long v176 = *((_OWORD *)v10 + 5);
                      *(_OWORD *)unint64_t v87 = *(_OWORD *)v88;
                      *((_OWORD *)v10 + 3) = v176;
                      *(_OWORD *)uint64_t v88 = v175;
                      *((__n128 *)v10 + 5) = result;
                      unint64_t v177 = bswap64(v10[4]);
                      unint64_t v178 = bswap64(*v10);
                      if (v177 != v178) {
                        goto LABEL_346;
                      }
                      unint64_t v177 = bswap64(v10[5]);
                      unint64_t v178 = bswap64(v10[1]);
                      if (v177 == v178
                        && (unint64_t v177 = bswap64(v10[6]), v178 = bswap64(v10[2]), v177 == v178)
                        && (unint64_t v177 = bswap64(v10[7]), v178 = bswap64(v10[3]), v177 == v178))
                      {
                        int v179 = 0;
                      }
                      else
                      {
LABEL_346:
                        int v179 = v177 < v178 ? -1 : 1;
                      }
                      if (v179 < 0)
                      {
                        __n128 v195 = *(__n128 *)v10;
                        long long v205 = *((_OWORD *)v10 + 1);
                        long long v180 = *((_OWORD *)v10 + 3);
                        *(_OWORD *)uint64_t v10 = *(_OWORD *)v87;
                        *((_OWORD *)v10 + 1) = v180;
                        __n128 result = v195;
                        *(__n128 *)unint64_t v87 = v195;
                        *((_OWORD *)v10 + 3) = v205;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 767)
          {
            n128_u64 = v10 + 4;
            BOOL v97 = v10 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
            if (a4)
            {
              if (!v97)
              {
                uint64_t v98 = 0;
                unint64_t v99 = v10;
                do
                {
                  BOOL v100 = (__n128 *)n128_u64;
                  unint64_t v101 = bswap64(v99[4]);
                  unint64_t v102 = bswap64(*v99);
                  if (v101 != v102
                    || (unint64_t v101 = bswap64(v100->n128_u64[1]), v102 = bswap64(v99[1]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[0]), v102 = bswap64(v99[2]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[1]), v102 = bswap64(v99[3]), v101 != v102))
                  {
                    int v103 = v101 < v102 ? -1 : 1;
                    if (v103 < 0)
                    {
                      __n128 v190 = *v100;
                      __n128 v199 = v100[1];
                      uint64_t v104 = v98;
                      while (1)
                      {
                        unint64_t v105 = (char *)v10 + v104;
                        long long v106 = *(_OWORD *)((char *)v10 + v104 + 16);
                        *((_OWORD *)v105 + 2) = *(_OWORD *)((char *)v10 + v104);
                        *((_OWORD *)v105 + 3) = v106;
                        if (!v104) {
                          break;
                        }
                        unint64_t v107 = bswap64(v190.n128_u64[0]);
                        unint64_t v108 = bswap64(*((void *)v105 - 4));
                        if (v107 == v108
                          && (v107 = bswap64(v190.n128_u64[1]), unint64_t v108 = bswap64(*((void *)v105 - 3)), v107 == v108)
                          && (v107 = bswap64(v199.n128_u64[0]), unint64_t v108 = bswap64(*((void *)v105 - 2)), v107 == v108)
                          && (v107 = bswap64(v199.n128_u64[1]), unint64_t v108 = bswap64(*((void *)v105 - 1)), v107 == v108))
                        {
                          int v109 = 0;
                        }
                        else if (v107 < v108)
                        {
                          int v109 = -1;
                        }
                        else
                        {
                          int v109 = 1;
                        }
                        v104 -= 32;
                        if ((v109 & 0x80000000) == 0)
                        {
                          uint64_t v110 = (__n128 *)((char *)v10 + v104 + 32);
                          goto LABEL_200;
                        }
                      }
                      uint64_t v110 = (__n128 *)v10;
LABEL_200:
                      __n128 result = v190;
                      *uint64_t v110 = v190;
                      v110[1] = v199;
                    }
                  }
                  n128_u64 = v100[2].n128_u64;
                  v98 += 32;
                  unint64_t v99 = (unint64_t *)v100;
                }
                while (&v100[2] != (__n128 *)a2);
              }
            }
            else if (!v97)
            {
              long long v160 = v10 - 4;
              do
              {
                long long v161 = (__n128 *)n128_u64;
                unint64_t v162 = bswap64(a1[4]);
                unint64_t v163 = bswap64(*a1);
                if (v162 != v163
                  || (unint64_t v162 = bswap64(v161->n128_u64[1]), v163 = bswap64(a1[1]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[0]), v163 = bswap64(a1[2]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[1]), v163 = bswap64(a1[3]), v162 != v163))
                {
                  int v164 = v162 < v163 ? -1 : 1;
                  if (v164 < 0)
                  {
                    __n128 v194 = *v161;
                    __n128 v204 = v161[1];
                    uint64_t v165 = v160;
                    do
                    {
                      long long v166 = *((_OWORD *)v165 + 3);
                      *((_OWORD *)v165 + 4) = *((_OWORD *)v165 + 2);
                      *((_OWORD *)v165 + 5) = v166;
                      unint64_t v167 = bswap64(v194.n128_u64[0]);
                      unint64_t v168 = bswap64(*v165);
                      if (v167 == v168
                        && (unint64_t v167 = bswap64(v194.n128_u64[1]), v168 = bswap64(v165[1]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[0]), v168 = bswap64(v165[2]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[1]), v168 = bswap64(v165[3]), v167 == v168))
                      {
                        int v169 = 0;
                      }
                      else if (v167 < v168)
                      {
                        int v169 = -1;
                      }
                      else
                      {
                        int v169 = 1;
                      }
                      v165 -= 4;
                    }
                    while (v169 < 0);
                    __n128 result = v194;
                    *((__n128 *)v165 + 4) = v194;
                    *((__n128 *)v165 + 5) = v204;
                  }
                }
                n128_u64 = v161[2].n128_u64;
                v160 += 4;
                a1 = (unint64_t *)v161;
              }
              while (&v161[2] != (__n128 *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (unint64_t *)a2)
            {
              int64_t v111 = (v12 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                int64_t v113 = v112;
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  long long v115 = &v10[4 * v114];
                  if (2 * v113 + 2 < (uint64_t)v12)
                  {
                    unint64_t v116 = bswap64(*v115);
                    unint64_t v117 = bswap64(v115[4]);
                    if (v116 != v117) {
                      goto LABEL_212;
                    }
                    unint64_t v116 = bswap64(v115[1]);
                    unint64_t v117 = bswap64(v115[5]);
                    if (v116 == v117
                      && (unint64_t v116 = bswap64(v115[2]), v117 = bswap64(v115[6]), v116 == v117)
                      && (unint64_t v116 = bswap64(v115[3]), v117 = bswap64(v115[7]), v116 == v117))
                    {
                      int v118 = 0;
                    }
                    else
                    {
LABEL_212:
                      int v118 = v116 < v117 ? -1 : 1;
                    }
                    if (v118 < 0)
                    {
                      v115 += 4;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  int v119 = &v10[4 * v113];
                  unint64_t v120 = bswap64(*v115);
                  unint64_t v121 = bswap64(*v119);
                  if (v120 == v121
                    && (unint64_t v120 = bswap64(v115[1]), v121 = bswap64(v119[1]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[2]), v121 = bswap64(v119[2]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[3]), v121 = bswap64(v119[3]), v120 == v121)
                    || (v120 < v121 ? (int v122 = -1) : (int v122 = 1), (v122 & 0x80000000) == 0))
                  {
                    long long v191 = *(_OWORD *)v119;
                    long long v200 = *((_OWORD *)v119 + 1);
                    do
                    {
                      int v123 = v115;
                      long long v124 = *((_OWORD *)v115 + 1);
                      *(_OWORD *)int v119 = *(_OWORD *)v115;
                      *((_OWORD *)v119 + 1) = v124;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v125 = (2 * v114) | 1;
                      long long v115 = &v10[4 * v125];
                      uint64_t v114 = 2 * v114 + 2;
                      if (v114 < (uint64_t)v12)
                      {
                        unint64_t v126 = bswap64(*v115);
                        unint64_t v127 = bswap64(v115[4]);
                        if (v126 != v127) {
                          goto LABEL_234;
                        }
                        unint64_t v126 = bswap64(v115[1]);
                        unint64_t v127 = bswap64(v115[5]);
                        if (v126 == v127
                          && (unint64_t v126 = bswap64(v115[2]), v127 = bswap64(v115[6]), v126 == v127)
                          && (unint64_t v126 = bswap64(v115[3]), v127 = bswap64(v115[7]), v126 == v127))
                        {
                          int v128 = 0;
                        }
                        else
                        {
LABEL_234:
                          int v128 = v126 < v127 ? -1 : 1;
                        }
                        if (v128 >= 0) {
                          uint64_t v114 = v125;
                        }
                        else {
                          v115 += 4;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v125;
                      }
                      unint64_t v129 = bswap64(*v115);
                      unint64_t v130 = bswap64(v191);
                      if (v129 != v130) {
                        goto LABEL_245;
                      }
                      unint64_t v129 = bswap64(v115[1]);
                      unint64_t v130 = bswap64(*((unint64_t *)&v191 + 1));
                      if (v129 == v130
                        && (v129 = bswap64(v115[2]), unint64_t v130 = bswap64(v200), v129 == v130)
                        && (v129 = bswap64(v115[3]), unint64_t v130 = bswap64(*((unint64_t *)&v200 + 1)), v129 == v130))
                      {
                        int v131 = 0;
                      }
                      else
                      {
LABEL_245:
                        int v131 = v129 < v130 ? -1 : 1;
                      }
                      int v119 = v123;
                    }
                    while ((v131 & 0x80000000) == 0);
                    *(_OWORD *)int v123 = v191;
                    *((_OWORD *)v123 + 1) = v200;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              uint64_t v132 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v133 = 0;
                __n128 v183 = *(__n128 *)v10;
                long long v186 = *((_OWORD *)v10 + 1);
                unint64_t v134 = v10;
                do
                {
                  unint64_t v135 = &v134[4 * v133 + 4];
                  uint64_t v136 = (2 * v133) | 1;
                  uint64_t v137 = 2 * v133 + 2;
                  if (v137 < v132)
                  {
                    unint64_t v138 = bswap64(*v135);
                    unint64_t v139 = bswap64(v135[4]);
                    if (v138 != v139) {
                      goto LABEL_259;
                    }
                    unint64_t v138 = bswap64(v135[1]);
                    unint64_t v139 = bswap64(v135[5]);
                    if (v138 == v139
                      && (unint64_t v138 = bswap64(v135[2]), v139 = bswap64(v135[6]), v138 == v139)
                      && (unint64_t v138 = bswap64(v135[3]), v139 = bswap64(v135[7]), v138 == v139))
                    {
                      int v140 = 0;
                    }
                    else
                    {
LABEL_259:
                      int v140 = v138 < v139 ? -1 : 1;
                    }
                    if (v140 < 0)
                    {
                      v135 += 4;
                      uint64_t v136 = v137;
                    }
                  }
                  long long v141 = *((_OWORD *)v135 + 1);
                  *(_OWORD *)unint64_t v134 = *(_OWORD *)v135;
                  *((_OWORD *)v134 + 1) = v141;
                  unint64_t v134 = v135;
                  uint64_t v133 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                a2 -= 32;
                if (v135 == (unint64_t *)a2)
                {
                  __n128 result = v183;
                  *(__n128 *)unint64_t v135 = v183;
                  *((_OWORD *)v135 + 1) = v186;
                }
                else
                {
                  long long v142 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)unint64_t v135 = *(_OWORD *)a2;
                  *((_OWORD *)v135 + 1) = v142;
                  __n128 result = v183;
                  *(__n128 *)a2 = v183;
                  *(_OWORD *)(a2 + 16) = v186;
                  uint64_t v143 = (char *)v135 - (char *)v10 + 32;
                  if (v143 >= 33)
                  {
                    unint64_t v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                    unint64_t v145 = &v10[4 * v144];
                    unint64_t v146 = bswap64(*v145);
                    unint64_t v147 = bswap64(*v135);
                    if (v146 != v147
                      || (unint64_t v146 = bswap64(v145[1]), v147 = bswap64(v135[1]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[2]), v147 = bswap64(v135[2]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[3]), v147 = bswap64(v135[3]), v146 != v147))
                    {
                      int v148 = v146 < v147 ? -1 : 1;
                      if (v148 < 0)
                      {
                        __n128 v192 = *(__n128 *)v135;
                        __n128 v201 = *((__n128 *)v135 + 1);
                        do
                        {
                          int v149 = (__n128 *)v145;
                          long long v150 = *((_OWORD *)v145 + 1);
                          *(_OWORD *)unint64_t v135 = *(_OWORD *)v145;
                          *((_OWORD *)v135 + 1) = v150;
                          if (!v144) {
                            break;
                          }
                          unint64_t v144 = (v144 - 1) >> 1;
                          unint64_t v145 = &v10[4 * v144];
                          unint64_t v151 = bswap64(*v145);
                          unint64_t v152 = bswap64(v192.n128_u64[0]);
                          if (v151 != v152) {
                            goto LABEL_283;
                          }
                          unint64_t v151 = bswap64(v145[1]);
                          unint64_t v152 = bswap64(v192.n128_u64[1]);
                          if (v151 == v152
                            && (unint64_t v151 = bswap64(v145[2]), v152 = bswap64(v201.n128_u64[0]), v151 == v152)
                            && (unint64_t v151 = bswap64(v145[3]), v152 = bswap64(v201.n128_u64[1]), v151 == v152))
                          {
                            int v153 = 0;
                          }
                          else
                          {
LABEL_283:
                            int v153 = v151 < v152 ? -1 : 1;
                          }
                          unint64_t v135 = (unint64_t *)v149;
                        }
                        while (v153 < 0);
                        __n128 result = v192;
                        *int v149 = v192;
                        v149[1] = v201;
                      }
                    }
                  }
                }
              }
              while (v132-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v12 >> 1)], (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v14 - 4, (unint64_t *)(a2 - 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v13 + 4], (unint64_t *)(a2 - 96));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v14 - 4, v14, &a1[4 * v13 + 4]);
            __n128 v187 = *(__n128 *)a1;
            long long v196 = *((_OWORD *)a1 + 1);
            long long v15 = *((_OWORD *)v14 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *((_OWORD *)a1 + 1) = v15;
            *(__n128 *)uint64_t v14 = v187;
            *((_OWORD *)v14 + 1) = v196;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v12 >> 1)], a1, (unint64_t *)(a2 - 32));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v16 = bswap64(*(a1 - 4));
          unint64_t v17 = bswap64(*a1);
          if (v16 != v17) {
            goto LABEL_15;
          }
          unint64_t v16 = bswap64(*(a1 - 3));
          unint64_t v17 = bswap64(a1[1]);
          if (v16 == v17
            && (unint64_t v16 = bswap64(*(a1 - 2)), v17 = bswap64(a1[2]), v16 == v17)
            && (unint64_t v16 = bswap64(*(a1 - 1)), v17 = bswap64(a1[3]), v16 == v17))
          {
            int v18 = 0;
          }
          else
          {
LABEL_15:
            int v18 = v16 < v17 ? -1 : 1;
          }
          if (v18 < 0) {
            break;
          }
          __n128 v182 = *(__n128 *)a1;
          long long v185 = *((_OWORD *)a1 + 1);
          unint64_t v51 = bswap64(*a1);
          unint64_t v52 = bswap64(*(void *)(a2 - 32));
          if (v51 == v52
            && (unint64_t v51 = bswap64(v182.n128_u64[1]), v52 = bswap64(*(void *)(a2 - 24)), v51 == v52)
            && (unint64_t v51 = bswap64(v185), v52 = bswap64(*(void *)(a2 - 16)), v51 == v52)
            && (unint64_t v51 = bswap64(*((unint64_t *)&v185 + 1)), v52 = bswap64(*(void *)(a2 - 8)), v51 == v52))
          {
            int v53 = 0;
          }
          else if (v51 < v52)
          {
            int v53 = -1;
          }
          else
          {
            int v53 = 1;
          }
          if (v53 < 0)
          {
            uint64_t v58 = a1;
            uint64_t v10 = a1;
            do
            {
              unint64_t v59 = v10[4];
              v10 += 4;
              unint64_t v60 = bswap64(v182.n128_u64[0]);
              unint64_t v61 = bswap64(v59);
              if (v60 == v61
                && (unint64_t v60 = bswap64(v182.n128_u64[1]), v61 = bswap64(v58[5]), v60 == v61)
                && (unint64_t v60 = bswap64(v185), v61 = bswap64(v58[6]), v60 == v61)
                && (unint64_t v60 = bswap64(*((unint64_t *)&v185 + 1)), v61 = bswap64(v58[7]), v60 == v61))
              {
                int v62 = 0;
              }
              else if (v60 < v61)
              {
                int v62 = -1;
              }
              else
              {
                int v62 = 1;
              }
              uint64_t v58 = v10;
            }
            while ((v62 & 0x80000000) == 0);
          }
          else
          {
            uint64_t v54 = a1 + 4;
            do
            {
              uint64_t v10 = v54;
              if ((unint64_t)v54 >= a2) {
                break;
              }
              unint64_t v55 = bswap64(v182.n128_u64[0]);
              unint64_t v56 = bswap64(*v10);
              if (v55 != v56) {
                goto LABEL_100;
              }
              unint64_t v55 = bswap64(v182.n128_u64[1]);
              unint64_t v56 = bswap64(v10[1]);
              if (v55 == v56
                && (unint64_t v55 = bswap64(v185), v56 = bswap64(v10[2]), v55 == v56)
                && (unint64_t v55 = bswap64(*((unint64_t *)&v185 + 1)), v56 = bswap64(v10[3]), v55 == v56))
              {
                int v57 = 0;
              }
              else
              {
LABEL_100:
                int v57 = v55 < v56 ? -1 : 1;
              }
              uint64_t v54 = v10 + 4;
            }
            while ((v57 & 0x80000000) == 0);
          }
          uint64_t v63 = (_OWORD *)a2;
          if ((unint64_t)v10 < a2)
          {
            uint64_t v64 = (_OWORD *)a2;
            uint64_t v63 = (_OWORD *)a2;
            do
            {
              unint64_t v65 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v66 = bswap64(v182.n128_u64[0]);
              unint64_t v67 = bswap64(v65);
              if (v66 == v67
                && (unint64_t v66 = bswap64(v182.n128_u64[1]), v67 = bswap64(*((void *)v64 - 3)), v66 == v67)
                && (unint64_t v66 = bswap64(v185), v67 = bswap64(*((void *)v64 - 2)), v66 == v67)
                && (unint64_t v66 = bswap64(*((unint64_t *)&v185 + 1)), v67 = bswap64(*((void *)v64 - 1)), v66 == v67))
              {
                int v68 = 0;
              }
              else if (v66 < v67)
              {
                int v68 = -1;
              }
              else
              {
                int v68 = 1;
              }
              uint64_t v64 = v63;
            }
            while (v68 < 0);
          }
          while (v10 < (unint64_t *)v63)
          {
            __n128 v189 = *(__n128 *)v10;
            long long v198 = *((_OWORD *)v10 + 1);
            long long v69 = v63[1];
            *(_OWORD *)uint64_t v10 = *v63;
            *((_OWORD *)v10 + 1) = v69;
            *uint64_t v63 = v189;
            v63[1] = v198;
            uint64_t v70 = v10;
            do
            {
              unint64_t v71 = v10[4];
              v10 += 4;
              unint64_t v72 = bswap64(v182.n128_u64[0]);
              unint64_t v73 = bswap64(v71);
              if (v72 == v73
                && (unint64_t v72 = bswap64(v182.n128_u64[1]), v73 = bswap64(v70[5]), v72 == v73)
                && (unint64_t v72 = bswap64(v185), v73 = bswap64(v70[6]), v72 == v73)
                && (unint64_t v72 = bswap64(*((unint64_t *)&v185 + 1)), v73 = bswap64(v70[7]), v72 == v73))
              {
                int v74 = 0;
              }
              else if (v72 < v73)
              {
                int v74 = -1;
              }
              else
              {
                int v74 = 1;
              }
              uint64_t v70 = v10;
            }
            while ((v74 & 0x80000000) == 0);
            uint64_t v75 = v63;
            do
            {
              unint64_t v76 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v77 = bswap64(v182.n128_u64[0]);
              unint64_t v78 = bswap64(v76);
              if (v77 == v78
                && (unint64_t v77 = bswap64(v182.n128_u64[1]), v78 = bswap64(*((void *)v75 - 3)), v77 == v78)
                && (unint64_t v77 = bswap64(v185), v78 = bswap64(*((void *)v75 - 2)), v77 == v78)
                && (unint64_t v77 = bswap64(*((unint64_t *)&v185 + 1)), v78 = bswap64(*((void *)v75 - 1)), v77 == v78))
              {
                int v79 = 0;
              }
              else if (v77 < v78)
              {
                int v79 = -1;
              }
              else
              {
                int v79 = 1;
              }
              uint64_t v75 = v63;
            }
            while (v79 < 0);
          }
          uint64_t v80 = (__n128 *)(v10 - 4);
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 != a1)
          {
            long long v81 = *((_OWORD *)v10 - 1);
            *(__n128 *)a1 = *v80;
            *((_OWORD *)a1 + 1) = v81;
          }
          a4 = 0;
          __n128 result = v182;
          *uint64_t v80 = v182;
          *((_OWORD *)v10 - 1) = v185;
        }
        uint64_t v19 = 0;
        __n128 v181 = *(__n128 *)a1;
        long long v184 = *((_OWORD *)a1 + 1);
        do
        {
          uint64_t v20 = &a1[v19];
          unint64_t v21 = bswap64(a1[v19 + 4]);
          unint64_t v22 = bswap64(v181.n128_u64[0]);
          if (v21 == v22
            && (v21 = bswap64(v20[5]), unint64_t v22 = bswap64(v181.n128_u64[1]), v21 == v22)
            && (v21 = bswap64(v20[6]), unint64_t v22 = bswap64(v184), v21 == v22)
            && (v21 = bswap64(v20[7]), unint64_t v22 = bswap64(*((unint64_t *)&v184 + 1)), v21 == v22))
          {
            int v23 = 0;
          }
          else if (v21 < v22)
          {
            int v23 = -1;
          }
          else
          {
            int v23 = 1;
          }
          v19 += 4;
        }
        while (v23 < 0);
        uint64_t v24 = &a1[v19];
        unint64_t v25 = a2;
        if (v19 == 4)
        {
          uint64_t v30 = (_OWORD *)a2;
          while (v24 < (unint64_t *)v30)
          {
            uint64_t v26 = v30 - 2;
            unint64_t v31 = bswap64(*((void *)v30 - 4));
            unint64_t v32 = bswap64(v181.n128_u64[0]);
            if (v31 == v32
              && (unint64_t v31 = bswap64(*((void *)v30 - 3)), v32 = bswap64(v181.n128_u64[1]), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 2)), v32 = bswap64(v184), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 1)), v32 = bswap64(*((unint64_t *)&v184 + 1)), v31 == v32))
            {
              int v33 = 0;
            }
            else if (v31 < v32)
            {
              int v33 = -1;
            }
            else
            {
              int v33 = 1;
            }
            v30 -= 2;
            if (v33 < 0) {
              goto LABEL_53;
            }
          }
          uint64_t v26 = v30;
        }
        else
        {
          do
          {
            uint64_t v26 = (_OWORD *)(v25 - 32);
            unint64_t v27 = bswap64(*(void *)(v25 - 32));
            unint64_t v28 = bswap64(v181.n128_u64[0]);
            if (v27 == v28
              && (unint64_t v27 = bswap64(*(void *)(v25 - 24)), v28 = bswap64(v181.n128_u64[1]), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 16)), v28 = bswap64(v184), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 8)), v28 = bswap64(*((unint64_t *)&v184 + 1)), v27 == v28))
            {
              int v29 = 0;
            }
            else if (v27 < v28)
            {
              int v29 = -1;
            }
            else
            {
              int v29 = 1;
            }
            v25 -= 32;
          }
          while ((v29 & 0x80000000) == 0);
        }
LABEL_53:
        if (v24 >= (unint64_t *)v26)
        {
          unint64_t v47 = v24 - 4;
        }
        else
        {
          unint64_t v34 = (unint64_t)v24;
          int v35 = v26;
          do
          {
            long long v188 = *(_OWORD *)v34;
            long long v197 = *(_OWORD *)(v34 + 16);
            long long v36 = v35[1];
            *(_OWORD *)unint64_t v34 = *v35;
            *(_OWORD *)(v34 + 16) = v36;
            _OWORD *v35 = v188;
            v35[1] = v197;
            uint64_t v37 = (unint64_t *)v34;
            do
            {
              unint64_t v38 = *(void *)(v34 + 32);
              v34 += 32;
              unint64_t v39 = bswap64(v38);
              unint64_t v40 = bswap64(v181.n128_u64[0]);
              if (v39 == v40
                && (unint64_t v39 = bswap64(v37[5]), v40 = bswap64(v181.n128_u64[1]), v39 == v40)
                && (unint64_t v39 = bswap64(v37[6]), v40 = bswap64(v184), v39 == v40)
                && (unint64_t v39 = bswap64(v37[7]), v40 = bswap64(*((unint64_t *)&v184 + 1)), v39 == v40))
              {
                int v41 = 0;
              }
              else if (v39 < v40)
              {
                int v41 = -1;
              }
              else
              {
                int v41 = 1;
              }
              uint64_t v37 = (unint64_t *)v34;
            }
            while (v41 < 0);
            uint64_t v42 = v35;
            do
            {
              unint64_t v43 = *((void *)v35 - 4);
              v35 -= 2;
              unint64_t v44 = bswap64(v43);
              unint64_t v45 = bswap64(v181.n128_u64[0]);
              if (v44 == v45
                && (unint64_t v44 = bswap64(*((void *)v42 - 3)), v45 = bswap64(v181.n128_u64[1]), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 2)), v45 = bswap64(v184), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 1)), v45 = bswap64(*((unint64_t *)&v184 + 1)), v44 == v45))
              {
                int v46 = 0;
              }
              else if (v44 < v45)
              {
                int v46 = -1;
              }
              else
              {
                int v46 = 1;
              }
              uint64_t v42 = v35;
            }
            while ((v46 & 0x80000000) == 0);
          }
          while (v34 < (unint64_t)v35);
          unint64_t v47 = (unint64_t *)(v34 - 32);
        }
        if (v47 != a1)
        {
          long long v48 = *((_OWORD *)v47 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v47;
          *((_OWORD *)a1 + 1) = v48;
        }
        *(__n128 *)unint64_t v47 = v181;
        *((_OWORD *)v47 + 1) = v184;
        if (v24 >= (unint64_t *)v26) {
          break;
        }
LABEL_83:
        std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::$_0 &,MTLUINT256_t *,false>(a1, v47, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v47 + 4;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::$_0 &,MTLUINT256_t *>(a1, v47);
      uint64_t v10 = v47 + 4;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::$_0 &,MTLUINT256_t *>(v47 + 4, (unint64_t *)a2))
      {
        break;
      }
      if (!v49) {
        goto LABEL_83;
      }
    }
    a2 = (unint64_t)v47;
    if (!v49) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 4;
      unint64_t v7 = bswap64(*(a2 - 4));
      unint64_t v8 = bswap64(*a1);
      if (v7 == v8
        && (unint64_t v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      if (v9 < 0)
      {
        long long v33 = *(_OWORD *)a1;
        long long v32 = *((_OWORD *)a1 + 1);
        long long v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)uint64_t v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      uint64_t v24 = a1 + 4;
      unint64_t v25 = a1 + 8;
      uint64_t v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      unint64_t v28 = *(a2 - 4);
      unint64_t v27 = a2 - 4;
      unint64_t v29 = bswap64(v28);
      unint64_t v30 = bswap64(a1[12]);
      if (v29 == v30
        && (unint64_t v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        int v31 = 0;
      }
      else if (v29 < v30)
      {
        int v31 = -1;
      }
      else
      {
        int v31 = 1;
      }
      if (v31 < 0)
      {
        long long v36 = *(_OWORD *)v26;
        long long v35 = *((_OWORD *)a1 + 7);
        long long v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)unint64_t v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        unint64_t v38 = bswap64(*v26);
        unint64_t v39 = bswap64(*v25);
        if (v38 != v39) {
          goto LABEL_54;
        }
        unint64_t v38 = bswap64(a1[13]);
        unint64_t v39 = bswap64(a1[9]);
        if (v38 == v39
          && (unint64_t v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (unint64_t v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          int v40 = 0;
        }
        else
        {
LABEL_54:
          int v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          long long v42 = *(_OWORD *)v25;
          long long v41 = *((_OWORD *)a1 + 5);
          long long v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)uint64_t v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          unint64_t v44 = bswap64(*v25);
          unint64_t v45 = bswap64(*v24);
          if (v44 != v45) {
            goto LABEL_64;
          }
          unint64_t v44 = bswap64(a1[9]);
          unint64_t v45 = bswap64(a1[5]);
          if (v44 == v45
            && (unint64_t v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (unint64_t v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            int v46 = 0;
          }
          else
          {
LABEL_64:
            int v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            long long v48 = *(_OWORD *)v24;
            long long v47 = *((_OWORD *)a1 + 3);
            long long v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)unint64_t v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            unint64_t v50 = bswap64(a1[4]);
            unint64_t v51 = bswap64(*a1);
            if (v50 != v51) {
              goto LABEL_73;
            }
            unint64_t v50 = bswap64(a1[5]);
            unint64_t v51 = bswap64(a1[1]);
            if (v50 == v51
              && (unint64_t v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (unint64_t v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              int v52 = 0;
            }
            else
            {
LABEL_73:
              int v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              long long v54 = *(_OWORD *)a1;
              long long v53 = *((_OWORD *)a1 + 1);
              long long v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)uint64_t v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      uint64_t v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    unint64_t v14 = bswap64(*v11);
    unint64_t v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), unint64_t v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), unint64_t v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), unint64_t v15 = bswap64(v10[3]), v14 != v15))
    {
      int v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        long long v56 = *(_OWORD *)v11;
        long long v57 = *((_OWORD *)v11 + 1);
        uint64_t v17 = v12;
        while (1)
        {
          int v18 = (char *)a1 + v17;
          long long v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64) {
            break;
          }
          unint64_t v20 = bswap64(v56);
          unint64_t v21 = bswap64(*((void *)v18 + 4));
          if (v20 == v21
            && (unint64_t v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((void *)v18 + 5)), v20 == v21)
            && (unint64_t v20 = bswap64(v57), v21 = bswap64(*((void *)v18 + 6)), v20 == v21)
            && (unint64_t v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((void *)v18 + 7)), v20 == v21))
          {
            int v22 = 0;
          }
          else if (v20 < v21)
          {
            int v22 = -1;
          }
          else
          {
            int v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            int v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        int v23 = a1;
LABEL_30:
        *(_OWORD *)int v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8) {
          return v11 + 4 == a2;
        }
      }
    }
    uint64_t v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

uint64_t **std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::find<std::string_view>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint64_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v18 = a2;
        int v16 = *(uint64_t **)a2;
        size_t v17 = *(void *)(v18 + 8);
        do
        {
          unint64_t v19 = *((void *)v15 + 1);
          if (v19 == v10)
          {
            if (*((void *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11) {
                v19 %= v11;
              }
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4) {
              break;
            }
          }
          unint64_t v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v15 = operator new(0x28uLL);
  *(void *)unint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((void *)v15 + 4) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)unint64_t v15 = *v27;
LABEL_40:
    *unint64_t v27 = v15;
    goto LABEL_41;
  }
  *(void *)unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_18280AD64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>>>::find<std::string_view>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint8x8_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    size_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, (unsigned __int8 *)i + 16, a2))return i; {
        }
          }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  int v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *unint64_t v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  *int v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_18280B214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *float v17 = 0;
  v17[1] = v10;
  float v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_18280B4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl21FunctionConstantValueEEEZNS3_31CloneSpecializedFunctionLibraryINS3_26SpecializedFunctionLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41SpecializedFunctionLibraryCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionConstantValue>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneFunctionConstantValue<Mtl::FunctionConstantValue>(a4, (Air::PipelineScript *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unint64_t v10 = __p;
  }
  if (v15 == v10) {
    unint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionConstantValue>,std::allocator<flatbuffers::Offset<Mtl::FunctionConstantValue>>>(std::vector<flatbuffers::Offset<Mtl::FunctionConstantValue>> const&)::t;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    unint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18280B5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers::Offset<Mtl::FunctionConstantValue>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280B670(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneFunctionConstantValue<Mtl::FunctionConstantValue>(uint64_t a1, Air::PipelineScript *a2)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v4 >= 9u && (uint64_t v5 = v4[4]) != 0) {
    uint64_t v6 = *((unsigned __int8 *)a2 + v5);
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = 0;
  switch(Mtl::CloneConstantValue<Mtl::ConstantValue>(v6))
  {
    case 3u:
      LODWORD(v113) = *(_DWORD *)Air::PipelineScript::pipeline_as_tile_render(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>(a1, &v113);
      goto LABEL_78;
    case 4u:
      *(void *)&long long v113 = *(void *)Air::PipelineScript::pipeline_as_mesh_render(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>(a1, &v113);
      goto LABEL_78;
    case 5u:
      uint64_t v9 = Mtl::FunctionConstantValue::value_as_ConstantFloat3(a2);
      int v10 = *(_DWORD *)(v9 + 8);
      *(void *)&long long v113 = *(void *)v9;
      DWORD2(v113) = v10;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>(a1, (uint64_t *)&v113);
      goto LABEL_78;
    case 6u:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantFloat4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>(a1, &v113);
      goto LABEL_78;
    case 0x10u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantHalf(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(a1, &v113);
      goto LABEL_78;
    case 0x11u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantHalf2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>(a1, &v113);
      goto LABEL_78;
    case 0x12u:
      uint64_t v11 = Mtl::FunctionConstantValue::value_as_ConstantHalf3(a2);
      int v12 = *(_DWORD *)v11;
      WORD2(v113) = *(_WORD *)(v11 + 4);
      LODWORD(v113) = v12;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>(a1, (int *)&v113);
      goto LABEL_78;
    case 0x13u:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantHalf4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>(a1, &v113);
      goto LABEL_78;
    case 0x1Du:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantInt(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>(a1, &v113);
      goto LABEL_78;
    case 0x1Eu:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantInt2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>(a1, &v113);
      goto LABEL_78;
    case 0x1Fu:
      uint64_t v13 = Mtl::FunctionConstantValue::value_as_ConstantInt3(a2);
      int v14 = *(_DWORD *)(v13 + 8);
      *(void *)&long long v113 = *(void *)v13;
      DWORD2(v113) = v14;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>(a1, (uint64_t *)&v113);
      goto LABEL_78;
    case 0x20u:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantInt4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>(a1, &v113);
      goto LABEL_78;
    case 0x21u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantUInt(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>(a1, &v113);
      goto LABEL_78;
    case 0x22u:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantUInt2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>(a1, &v113);
      goto LABEL_78;
    case 0x23u:
      uint64_t v15 = Mtl::FunctionConstantValue::value_as_ConstantUInt3(a2);
      int v16 = *(_DWORD *)(v15 + 8);
      *(void *)&long long v113 = *(void *)v15;
      DWORD2(v113) = v16;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>(a1, (uint64_t *)&v113);
      goto LABEL_78;
    case 0x24u:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantUInt4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>(a1, &v113);
      goto LABEL_78;
    case 0x25u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantShort(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(a1, &v113);
      goto LABEL_78;
    case 0x26u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantShort2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>(a1, &v113);
      goto LABEL_78;
    case 0x27u:
      uint64_t v17 = Mtl::FunctionConstantValue::value_as_ConstantShort3(a2);
      int v18 = *(_DWORD *)v17;
      WORD2(v113) = *(_WORD *)(v17 + 4);
      LODWORD(v113) = v18;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>(a1, (int *)&v113);
      goto LABEL_78;
    case 0x28u:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantShort4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>(a1, &v113);
      goto LABEL_78;
    case 0x29u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantUShort(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(a1, &v113);
      goto LABEL_78;
    case 0x2Au:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantUShort2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>(a1, &v113);
      goto LABEL_78;
    case 0x2Bu:
      uint64_t v19 = Mtl::FunctionConstantValue::value_as_ConstantUShort3(a2);
      int v20 = *(_DWORD *)v19;
      WORD2(v113) = *(_WORD *)(v19 + 4);
      LODWORD(v113) = v20;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>(a1, (int *)&v113);
      goto LABEL_78;
    case 0x2Cu:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantUShort4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>(a1, &v113);
      goto LABEL_78;
    case 0x2Du:
      LOBYTE(v113) = *(unsigned char *)Mtl::FunctionConstantValue::value_as_ConstantChar(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>(a1, &v113);
      goto LABEL_78;
    case 0x2Eu:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantChar2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>(a1, &v113);
      goto LABEL_78;
    case 0x2Fu:
      uint64_t v21 = Mtl::FunctionConstantValue::value_as_ConstantChar3(a2);
      __int16 v22 = *(_WORD *)v21;
      BYTE2(v113) = *(unsigned char *)(v21 + 2);
      LOWORD(v113) = v22;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>(a1, (__int16 *)&v113);
      goto LABEL_78;
    case 0x30u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantChar4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>(a1, &v113);
      goto LABEL_78;
    case 0x31u:
      LOBYTE(v113) = *(unsigned char *)Mtl::FunctionConstantValue::value_as_ConstantUChar(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>(a1, &v113);
      goto LABEL_78;
    case 0x32u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantUChar2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>(a1, &v113);
      goto LABEL_78;
    case 0x33u:
      uint64_t v23 = Mtl::FunctionConstantValue::value_as_ConstantUChar3(a2);
      __int16 v24 = *(_WORD *)v23;
      BYTE2(v113) = *(unsigned char *)(v23 + 2);
      LOWORD(v113) = v24;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>(a1, (__int16 *)&v113);
      goto LABEL_78;
    case 0x34u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantUChar4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>(a1, &v113);
      goto LABEL_78;
    case 0x35u:
      LOBYTE(v113) = *(unsigned char *)Mtl::FunctionConstantValue::value_as_ConstantBool(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>(a1, &v113);
      goto LABEL_78;
    case 0x36u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantBool2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>(a1, &v113);
      goto LABEL_78;
    case 0x37u:
      uint64_t v25 = Mtl::FunctionConstantValue::value_as_ConstantBool3(a2);
      __int16 v26 = *(_WORD *)v25;
      BYTE2(v113) = *(unsigned char *)(v25 + 2);
      LOWORD(v113) = v26;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>(a1, (__int16 *)&v113);
      goto LABEL_78;
    case 0x38u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantBool4(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>(a1, &v113);
      goto LABEL_78;
    case 0x51u:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantLong(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>(a1, &v113);
      goto LABEL_78;
    case 0x52u:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantLong2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>(a1, &v113);
      goto LABEL_78;
    case 0x53u:
      uint64_t v27 = Mtl::FunctionConstantValue::value_as_ConstantLong3(a2);
      long long v28 = *(_OWORD *)v27;
      *(void *)&long long v114 = *(void *)(v27 + 16);
      long long v113 = v28;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>(a1, &v113);
      goto LABEL_78;
    case 0x54u:
      unint64_t v29 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantLong4(a2);
      long long v30 = v29[1];
      long long v113 = *v29;
      long long v114 = v30;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>(a1, &v113);
      goto LABEL_78;
    case 0x55u:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantULong(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>(a1, &v113);
      goto LABEL_78;
    case 0x56u:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantULong2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>(a1, &v113);
      goto LABEL_78;
    case 0x57u:
      uint64_t v31 = Mtl::FunctionConstantValue::value_as_ConstantULong3(a2);
      long long v32 = *(_OWORD *)v31;
      *(void *)&long long v114 = *(void *)(v31 + 16);
      long long v113 = v32;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>(a1, &v113);
      goto LABEL_78;
    case 0x58u:
      long long v33 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantULong4(a2);
      long long v34 = v33[1];
      long long v113 = *v33;
      long long v114 = v34;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>(a1, &v113);
      goto LABEL_78;
    case 0x59u:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantDouble(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>(a1, &v113);
      goto LABEL_78;
    case 0x5Au:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantDouble2(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>(a1, &v113);
      goto LABEL_78;
    case 0x5Bu:
      uint64_t v35 = Mtl::FunctionConstantValue::value_as_ConstantDouble3(a2);
      uint64_t v36 = *(void *)(v35 + 16);
      long long v113 = *(_OWORD *)v35;
      *(void *)&long long v114 = v36;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>(a1, &v113);
      goto LABEL_78;
    case 0x5Cu:
      long long v37 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantDouble4(a2);
      long long v38 = v37[1];
      long long v113 = *v37;
      long long v114 = v38;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>(a1, &v113);
      goto LABEL_78;
    case 0x5Du:
      unint64_t v39 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantFloat8(a2);
      long long v40 = v39[1];
      long long v113 = *v39;
      long long v114 = v40;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>(a1, &v113);
      goto LABEL_78;
    case 0x5Eu:
      long long v41 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantFloat16(a2);
      long long v42 = *v41;
      long long v43 = v41[1];
      long long v44 = v41[3];
      long long v115 = v41[2];
      long long v116 = v44;
      long long v113 = v42;
      long long v114 = v43;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>(a1, &v113);
      goto LABEL_78;
    case 0x5Fu:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantHalf8(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>(a1, &v113);
      goto LABEL_78;
    case 0x60u:
      unint64_t v45 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantHalf16(a2);
      long long v46 = v45[1];
      long long v113 = *v45;
      long long v114 = v46;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>(a1, &v113);
      goto LABEL_78;
    case 0x61u:
      long long v47 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantInt8(a2);
      long long v48 = v47[1];
      long long v113 = *v47;
      long long v114 = v48;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>(a1, &v113);
      goto LABEL_78;
    case 0x62u:
      long long v49 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantInt16(a2);
      long long v50 = *v49;
      long long v51 = v49[1];
      long long v52 = v49[3];
      long long v115 = v49[2];
      long long v116 = v52;
      long long v113 = v50;
      long long v114 = v51;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>(a1, &v113);
      goto LABEL_78;
    case 0x63u:
      long long v53 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantUInt8(a2);
      long long v54 = v53[1];
      long long v113 = *v53;
      long long v114 = v54;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>(a1, &v113);
      goto LABEL_78;
    case 0x64u:
      long long v55 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantUInt16(a2);
      long long v56 = *v55;
      long long v57 = v55[1];
      long long v58 = v55[3];
      long long v115 = v55[2];
      long long v116 = v58;
      long long v113 = v56;
      long long v114 = v57;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>(a1, &v113);
      goto LABEL_78;
    case 0x65u:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantShort8(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>(a1, &v113);
      goto LABEL_78;
    case 0x66u:
      unint64_t v59 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantShort16(a2);
      long long v60 = v59[1];
      long long v113 = *v59;
      long long v114 = v60;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>(a1, &v113);
      goto LABEL_78;
    case 0x67u:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantUShort8(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>(a1, &v113);
      goto LABEL_78;
    case 0x68u:
      unint64_t v61 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantUShort16(a2);
      long long v62 = v61[1];
      long long v113 = *v61;
      long long v114 = v62;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>(a1, &v113);
      goto LABEL_78;
    case 0x69u:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantChar8(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>(a1, &v113);
      goto LABEL_78;
    case 0x6Au:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantChar16(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>(a1, &v113);
      goto LABEL_78;
    case 0x6Bu:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantUChar8(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>(a1, &v113);
      goto LABEL_78;
    case 0x6Cu:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantUChar16(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>(a1, &v113);
      goto LABEL_78;
    case 0x6Du:
      uint64_t v63 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantLong8(a2);
      long long v64 = *v63;
      long long v65 = v63[1];
      long long v66 = v63[3];
      long long v115 = v63[2];
      long long v116 = v66;
      long long v113 = v64;
      long long v114 = v65;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>(a1, &v113);
      goto LABEL_78;
    case 0x6Eu:
      unint64_t v67 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantLong16(a2);
      long long v68 = *v67;
      long long v69 = v67[1];
      long long v70 = v67[3];
      long long v115 = v67[2];
      long long v116 = v70;
      long long v113 = v68;
      long long v114 = v69;
      long long v71 = v67[4];
      long long v72 = v67[5];
      long long v73 = v67[7];
      long long v119 = v67[6];
      long long v120 = v73;
      long long v117 = v71;
      long long v118 = v72;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>(a1, &v113);
      goto LABEL_78;
    case 0x6Fu:
      int v74 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantULong8(a2);
      long long v75 = *v74;
      long long v76 = v74[1];
      long long v77 = v74[3];
      long long v115 = v74[2];
      long long v116 = v77;
      long long v113 = v75;
      long long v114 = v76;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>(a1, &v113);
      goto LABEL_78;
    case 0x70u:
      unint64_t v78 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantULong16(a2);
      long long v79 = *v78;
      long long v80 = v78[1];
      long long v81 = v78[3];
      long long v115 = v78[2];
      long long v116 = v81;
      long long v113 = v79;
      long long v114 = v80;
      long long v82 = v78[4];
      long long v83 = v78[5];
      long long v84 = v78[7];
      long long v119 = v78[6];
      long long v120 = v84;
      long long v117 = v82;
      long long v118 = v83;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>(a1, &v113);
      goto LABEL_78;
    case 0x71u:
      unint64_t v85 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantDouble8(a2);
      long long v86 = *v85;
      long long v87 = v85[1];
      long long v88 = v85[3];
      long long v115 = v85[2];
      long long v116 = v88;
      long long v113 = v86;
      long long v114 = v87;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>(a1, &v113);
      goto LABEL_78;
    case 0x72u:
      unint64_t v89 = (long long *)Mtl::FunctionConstantValue::value_as_ConstantDouble16(a2);
      long long v90 = *v89;
      long long v91 = v89[1];
      long long v92 = v89[3];
      long long v115 = v89[2];
      long long v116 = v92;
      long long v113 = v90;
      long long v114 = v91;
      long long v93 = v89[4];
      long long v94 = v89[5];
      long long v95 = v89[7];
      long long v119 = v89[6];
      long long v120 = v95;
      long long v117 = v93;
      long long v118 = v94;
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>(a1, &v113);
      goto LABEL_78;
    case 0x77u:
      *(void *)&long long v113 = *(void *)Mtl::FunctionConstantValue::value_as_ConstantBool8(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>(a1, &v113);
      goto LABEL_78;
    case 0x78u:
      long long v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantBool16(a2);
      int v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>(a1, &v113);
LABEL_78:
      int v7 = v8;
      break;
    default:
      break;
  }
  uint64_t v96 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v96 >= 5u)
  {
    uint64_t v97 = v96[2];
    if (v97)
    {
      unsigned int v98 = *((unsigned __int8 *)a2 + v97);
      if (v98 >= 3) {
        goto LABEL_100;
      }
      if (v98 == 2)
      {
        BOOL v100 = (const char *)Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(a2);
        if (v100)
        {
          int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, v100 + 4, *(unsigned int *)v100);
          goto LABEL_87;
        }
      }
      else if (v98 == 1)
      {
        LOWORD(v113) = *(_WORD *)Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(a2);
        int String = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(a1, &v113);
LABEL_87:
        int v101 = String;
        goto LABEL_89;
      }
    }
  }
  int v101 = 0;
LABEL_89:
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v102 = *(void *)(a1 + 40);
  uint64_t v103 = *(void *)(a1 + 48);
  uint64_t v104 = *(void *)(a1 + 32);
  if (v7) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 10, v7);
  }
  if (v101) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v101);
  }
  unint64_t v105 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v105 >= 9u && (uint64_t v106 = v105[4]) != 0) {
    uint64_t v107 = *((unsigned __int8 *)a2 + v106);
  }
  else {
    uint64_t v107 = 0;
  }
  unsigned __int8 v108 = Mtl::CloneConstantValue<Mtl::ConstantValue>(v107);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 8, v108, 0);
  unsigned int v109 = 0;
  uint64_t v110 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v110 >= 5u)
  {
    uint64_t v111 = v110[2];
    if (v111)
    {
      unsigned int v109 = *((unsigned __int8 *)a2 + v111);
      if (v109 >= 3) {
LABEL_100:
      }
        abort();
    }
    else
    {
      unsigned int v109 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 4, v109, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v104 - (unsigned __int16)v103 + (unsigned __int16)v102);
}

uint64_t Mtl::CloneConstantValue<Mtl::ConstantValue>(uint64_t result)
{
  switch((int)result)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 16:
    case 17:
    case 18:
    case 19:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 119:
    case 120:
      return result;
    default:
      abort();
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantFloat3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 5) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantFloat4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 6) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 16) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 17) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 18) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 19) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 29) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 30) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 31) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 32)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 33)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 34)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 35)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 36)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 37)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 38)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 39)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 40)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 41)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 42)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 43)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 44)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 45)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 46)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 47)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 48)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 49)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 50)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 51)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 52)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 53)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 54)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 55)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 56)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 81)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 82)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 83)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 84)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 85)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 86)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 87)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 88)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 89)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble2(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 90)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble3(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 91)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble4(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 92)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantFloat8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 93)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantFloat16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 94)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 95)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 96)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 97)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 98)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 99)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 100)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 101)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 102)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 103)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 104)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 105)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 106)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 107)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 108)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 109)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 110)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 111)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 112)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 113)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 114)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool8(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 119)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool16(Mtl::FunctionConstantValue *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 9 || !v1[4]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 0xB && *((unsigned char *)this + v1[4]) == 120)
  {
    uint64_t v3 = v1[5];
    if (v1[5]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching5GraphEEEZNS3_20CloneStitchedLibraryINS3_15StitchedLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30StitchedLibraryCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE_vEENS2_INS_6VectorISC_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::FunctionStitching::CloneGraph<Mtl::FunctionStitching::Graph>(a4, (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      int v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    int v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Graph>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18280DEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneStitchedLibraryINS5_15StitchedLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30StitchedLibraryCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      int String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      uint64_t v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v11 = __p;
  }
  if (v16 == v11) {
    uint64_t v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18280DFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280E048(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneGraph<Mtl::FunctionStitching::Graph>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  unint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0xBu && (uint64_t v7 = *((unsigned __int16 *)v6 + 5)) != 0)
  {
    uint64_t v19 = &a2[v7 + *(unsigned int *)&a2[v7]];
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching9AttributeEEEZNS4_10CloneGraphINS4_5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE_vEENS2_INS_6VectorISC_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    uint64_t v19 = &a2[*(unsigned __int16 *)&a2[v5 + 6] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]];
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching4NodeEEEZNS4_10CloneGraphINS4_5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE0_vEENS2_INS_6VectorISC_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v9 = 0;
  }
  int v10 = &a2[v5];
  if (*(unsigned __int16 *)v10 >= 5u && (uint64_t v11 = *((unsigned __int16 *)v10 + 2)) != 0) {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v11 + 4 + *(unsigned int *)&a2[v11]], *(unsigned int *)&a2[v11 + *(unsigned int *)&a2[v11]]);
  }
  else {
    int String = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 32);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 10, v8);
  }
  int v16 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v16 >= 9u)
  {
    unsigned __int16 v17 = *((_WORD *)v16 + 4);
    if (v17)
    {
      LODWORD(v19) = *(_DWORD *)&a2[v17];
      flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)a1, 8, &v19);
    }
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v9);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, String);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching9AttributeEEEZNS4_10CloneGraphINS4_5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE_vEENS2_INS_6VectorISC_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::FunctionStitching::CloneAttribute<Mtl::FunctionStitching::Attribute>(a4, (Mtl::FunctionStitching::Attribute *)(*a3+ (v8 & 0x3FFFFFFFCLL)+ 4+ *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      int v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    int v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18280E2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching4NodeEEEZNS4_10CloneGraphINS4_5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE0_vEENS2_INS_6VectorISC_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::FunctionStitching::CloneNode<Mtl::FunctionStitching::Node>(a4, (Mtl::FunctionStitching::Node *)(*a3+ (v8 & 0x3FFFFFFFCLL)+ 4+ *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      int v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    int v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18280E3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280E450(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneAttribute<Mtl::FunctionStitching::Attribute>(uint64_t a1, Mtl::FunctionStitching::Attribute *this)
{
  uint64_t v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 < 5u) {
    goto LABEL_7;
  }
  uint64_t v5 = v4[2];
  if (!v5) {
    goto LABEL_7;
  }
  unsigned int v6 = *((unsigned __int8 *)this + v5);
  if (v6 >= 3) {
    goto LABEL_11;
  }
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(this);
      goto LABEL_17;
    }
LABEL_7:
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 32);
    goto LABEL_8;
  }
  Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(this);
LABEL_17:
  *(unsigned char *)(a1 + 70) = 1;
  int v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, *(_WORD *)(a1 + 32) - *(_WORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v14) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v14);
  }
LABEL_8:
  int v10 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0)
  {
    unsigned int v12 = *((unsigned __int8 *)this + v11);
    if (v12 >= 3) {
LABEL_11:
    }
      abort();
  }
  else
  {
    unsigned int v12 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 4, v12, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v7 + (unsigned __int16)v8);
}

void *std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280E600(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneNode<Mtl::FunctionStitching::Node>(uint64_t a1, Mtl::FunctionStitching::Node *this)
{
  uint64_t v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    unsigned int v6 = *(_DWORD *)((char *)this + v5);
    if (v6 >= 0xC) {
      goto LABEL_22;
    }
    switch(v6)
    {
      case 1u:
        uint64_t v7 = (int *)AirReflection::Node::node_as_FragmentFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v7);
        break;
      case 2u:
        unsigned int v12 = (const char *)AirReflection::Node::node_as_KernelFunction(this);
        int v8 = Mtl::FunctionStitching::CloneFunctionNode<Mtl::FunctionStitching::FunctionNode>(a1, v12);
        break;
      case 3u:
        uint64_t v13 = (int *)AirReflection::Node::node_as_VertexFunction(this);
        int v8 = Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(a1, v13);
        break;
      case 4u:
        int v14 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(this);
        int v8 = Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(a1, v14);
        break;
      case 5u:
        uint64_t v15 = (int *)AirReflection::Node::node_as_IntersectionFunction(this);
        int v8 = Mtl::FunctionStitching::CloneBufferDataNode<Mtl::FunctionStitching::BufferDataNode>(a1, v15);
        break;
      case 6u:
        int v16 = (int *)AirReflection::Node::node_as_MeshFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v16);
        break;
      case 7u:
        unsigned __int16 v17 = (int *)AirReflection::Node::node_as_ObjectFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v17);
        break;
      case 8u:
        int v18 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v18);
        break;
      case 9u:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(this);
        *(unsigned char *)(a1 + 70) = 1;
        int v8 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, *(_WORD *)(a1 + 32) - *(_WORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
        break;
      case 0xAu:
        uint64_t v19 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(this);
        int v8 = Mtl::FunctionStitching::CloneBuiltinNode<Mtl::FunctionStitching::BuiltinNode>(a1, v19);
        break;
      case 0xBu:
        int v20 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(this);
        int v8 = Mtl::FunctionStitching::CloneEarlyReturnNode<Mtl::FunctionStitching::EarlyReturnNode>(a1, v20);
        break;
      default:
        goto LABEL_6;
    }
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
    if (v8) {
      flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v8);
    }
  }
  else
  {
LABEL_6:
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v21 >= 5u && (uint64_t v22 = v21[2]) != 0)
  {
    unsigned int v23 = *(_DWORD *)((char *)this + v22);
    if (v23 >= 0xC) {
LABEL_22:
    }
      abort();
  }
  else
  {
    unsigned int v23 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 4, v23, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v11 - (unsigned __int16)v9 + (unsigned __int16)v10);
}

uint64_t Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0) {
    int v5 = *(int *)((char *)a2 + v4);
  }
  else {
    int v5 = 0;
  }
  __int16 v6 = *(void *)(a1 + 32) - *(void *)(a1 + 48) + *(void *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 4, v5, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v6);
}

uint64_t Mtl::FunctionStitching::CloneFunctionNode<Mtl::FunctionStitching::FunctionNode>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  __int16 v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 9u && (uint64_t v7 = *((unsigned __int16 *)v6 + 4)) != 0)
  {
    unsigned __int16 v17 = &a2[v7 + *(unsigned int *)&a2[v7]];
    int v8 = _ZN11flatbuffers17FlatBufferBuilder21CreateVectorOfStructsIN3Mtl17FunctionStitching6NodeIdEZNS3_17CloneFunctionNodeINS3_12FunctionNodeEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_27FunctionNodeCloneCompatibleET_EE5valueENS_6OffsetIS6_EEE4typeERS0_PKSA_EUlmPS4_PvE_vEENSB_INS_6VectorISH_EEEEmT0_PT1_(a1, *(unsigned int *)v17, &v17);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    unsigned __int16 v17 = &a2[*(unsigned __int16 *)&a2[v5 + 6] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]];
    int v9 = _ZN11flatbuffers17FlatBufferBuilder21CreateVectorOfStructsIN3Mtl17FunctionStitching6NodeIdEZNS3_17CloneFunctionNodeINS3_12FunctionNodeEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_27FunctionNodeCloneCompatibleET_EE5valueENS_6OffsetIS6_EEE4typeERS0_PKSA_EUlmPS4_PvE_vEENSB_INS_6VectorISH_EEEEmT0_PT1_(a1, *(unsigned int *)v17, &v17);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = &a2[v5];
  if (*(unsigned __int16 *)v10 >= 5u && (uint64_t v11 = *((unsigned __int16 *)v10 + 2)) != 0) {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v11 + 4 + *(unsigned int *)&a2[v11]], *(unsigned int *)&a2[v11 + *(unsigned int *)&a2[v11]]);
  }
  else {
    int String = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 32);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 8, v8);
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v9);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, String);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 7u && (uint64_t v5 = v4[3]) != 0) {
    int v6 = *(int *)((char *)a2 + v5);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 6, v6, 0);
  uint64_t v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 5u)
  {
    uint64_t v11 = v10[2];
    if (v11)
    {
      if (*(int *)((char *)a2 + v11)) {
        abort();
      }
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 4, 0, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

uint64_t Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(uint64_t a1, int *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = -v4;
  int v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 5u && (uint64_t v7 = v6[2]) != 0)
  {
    int v8 = Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(a1, (int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7)));
    uint64_t v5 = -(uint64_t)*a2;
  }
  else
  {
    int v8 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  unsigned int v12 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
    uint64_t v14 = *(void *)((char *)a2 + v13);
  }
  else {
    uint64_t v14 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 6, v14, 0);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v8);
  }

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v11 - (unsigned __int16)v10 + (unsigned __int16)v9);
}

uint64_t Mtl::FunctionStitching::CloneBufferDataNode<Mtl::FunctionStitching::BufferDataNode>(uint64_t a1, int *a2)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0)
  {
    int v5 = Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(a1, (int *)((char *)a2 + v4 + *(unsigned int *)((char *)a2 + v4)));
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v5) {
      flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v5);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 32);
  }

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v8 - (unsigned __int16)v6 + (unsigned __int16)v7);
}

uint64_t Mtl::FunctionStitching::CloneBuiltinNode<Mtl::FunctionStitching::BuiltinNode>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0)
  {
    unsigned int v5 = *(int *)((char *)a2 + v4);
    if (v5 >= 2) {
      abort();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  __int16 v6 = *(void *)(a1 + 32) - *(void *)(a1 + 48) + *(void *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 4, v5, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v6);
}

uint64_t Mtl::FunctionStitching::CloneEarlyReturnNode<Mtl::FunctionStitching::EarlyReturnNode>(uint64_t a1, int *a2)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 7u && (uint64_t v5 = v4[3]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a2 + v5 + *(unsigned int *)((char *)a2 + v5));
    int v6 = _ZN11flatbuffers17FlatBufferBuilder21CreateVectorOfStructsIN3Mtl17FunctionStitching6NodeIdEZNS3_17CloneFunctionNodeINS3_12FunctionNodeEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_27FunctionNodeCloneCompatibleET_EE5valueENS_6OffsetIS6_EEE4typeERS0_PKSA_EUlmPS4_PvE_vEENSB_INS_6VectorISH_EEEEmT0_PT1_(a1, *v14, &v14);
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 32);
    if (v6) {
      flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v6);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 32);
  }
  uint64_t v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 5u)
  {
    unsigned __int16 v11 = v10[2];
    if (v11)
    {
      int v13 = *(int *)((char *)a2 + v11);
      flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)a1, 4, &v13);
    }
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v7 + (unsigned __int16)v8);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder21CreateVectorOfStructsIN3Mtl17FunctionStitching6NodeIdEZNS3_17CloneFunctionNodeINS3_12FunctionNodeEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_27FunctionNodeCloneCompatibleET_EE5valueENS_6OffsetIS6_EEE4typeERS0_PKSA_EUlmPS4_PvE_vEENSB_INS_6VectorISH_EEEEmT0_PT1_(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = flatbuffers::FlatBufferBuilder::StartVectorOfStructs<Mtl::FunctionStitching::NodeId>(a1, a2);
  if (a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a3 + 4;
    uint64_t v9 = a2;
    do
    {
      *(_DWORD *)(v6 + v7) = *(_DWORD *)(v8 + (v7 & 0x3FFFFFFFCLL));
      v7 += 4;
      --v9;
    }
    while (v9);
  }
  *(unsigned char *)(a1 + 70) = 0;

  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(a1, a2);
}

uint64_t flatbuffers::FlatBufferBuilder::StartVectorOfStructs<Mtl::FunctionStitching::NodeId>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 4 * a2;
  *(unsigned char *)(a1 + 70) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)a1, 4 * a2, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)a1, v4, 4uLL);
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5 - *(void *)(a1 + 56) < (unint64_t)(4 * a2))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, v4);
    uint64_t v5 = *(void *)(a1 + 48);
  }
  uint64_t result = v5 - v4;
  *(void *)(a1 + 48) = v5 - v4;
  return result;
}

void *std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280EFE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(uint64_t a1, int *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = -v4;
  uint64_t v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 0xBu && (uint64_t v7 = v6[5]) != 0)
  {
    int v18 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl13FunctionGroupEEEZNS3_20CloneLinkedFunctionsINS3_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v18, &v18, a1);
    uint64_t v5 = -(uint64_t)*a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 9u && *(_WORD *)((char *)a2 + v5 + 8))
  {
    int v18 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 8)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 8)));
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v18, &v18, (flatbuffers::FlatBufferBuilder *)a1);
    uint64_t v5 = -(uint64_t)*a2;
  }
  else
  {
    int v9 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 7u && *(_WORD *)((char *)a2 + v5 + 6))
  {
    int v18 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 6)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 6)));
    int v10 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v18, &v18, (flatbuffers::FlatBufferBuilder *)a1);
    uint64_t v5 = -(uint64_t)*a2;
  }
  else
  {
    int v10 = 0;
  }
  unsigned __int16 v11 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v11 >= 5u && (uint64_t v12 = v11[2]) != 0)
  {
    int v18 = (unsigned int *)((char *)a2 + v12 + *(unsigned int *)((char *)a2 + v12));
    int v13 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE2_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v18, &v18, (flatbuffers::FlatBufferBuilder *)a1);
  }
  else
  {
    int v13 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 32);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 10, v8);
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 8, v9);
  }
  if (v10) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v10);
  }
  if (v13) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v13);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v16 - (unsigned __int16)v15 + (unsigned __int16)v14);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_30CloneComputePipelineDescriptorINS3_25ComputePipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_40ComputePipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      int v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    int v10 = __p;
  }
  if (v15 == v10) {
    unsigned __int16 v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    unsigned __int16 v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18280F2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneStageInputOutputDescriptor<Mtl::StageInputOutputDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = -v4;
  unint64_t v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    int v20 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl22BufferLayoutDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v20, &v20, a1);
    uint64_t v5 = -(uint64_t)*a2;
  }
  else
  {
    int v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 5u && *(_WORD *)((char *)a2 + v5 + 4))
  {
    int v20 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 4)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 4)));
    int v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl19AttributeDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v20, &v20, a1);
    uint64_t v5 = -(uint64_t)*a2;
  }
  else
  {
    int v9 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  int v10 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0) {
    int v12 = *(int *)((char *)a2 + v11);
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 8, v12, 0);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v8);
  }
  if (v9) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v9);
  }
  uint64_t v16 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v16 >= 0xBu && (uint64_t v17 = v16[5]) != 0)
  {
    unsigned int v18 = *((unsigned __int8 *)a2 + v17);
    if (v18 >= 2) {
      abort();
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 10, v18, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl13FunctionGroupEEEZNS3_20CloneLinkedFunctionsINS3_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionGroup>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneFunctionGroup<Mtl::FunctionGroup>(a4, (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      int v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    int v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionGroup>,std::allocator<flatbuffers::Offset<Mtl::FunctionGroup>>>(std::vector<flatbuffers::Offset<Mtl::FunctionGroup>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18280F564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      int String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      uint64_t v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v11 = __p;
  }
  if (v16 == v11) {
    uint64_t v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18280F64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      int String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      uint64_t v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v11 = __p;
  }
  if (v16 == v11) {
    uint64_t v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18280F734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE2_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      int String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      uint64_t v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v11 = __p;
  }
  if (v16 == v11) {
    uint64_t v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18280F81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers::Offset<Mtl::FunctionGroup>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280F898(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneFunctionGroup<Mtl::FunctionGroup>(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(int *)a2;
  uint64_t v5 = -v4;
  unint64_t v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 7u && (uint64_t v7 = *((unsigned __int16 *)v6 + 3)) != 0)
  {
    uint64_t v16 = &a2[v7 + *(unsigned int *)&a2[v7]];
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl18CloneFunctionGroupINS5_13FunctionGroupEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_28FunctionGroupCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v16, &v16, (flatbuffers::FlatBufferBuilder *)a1);
    uint64_t v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    int v8 = 0;
  }
  int v9 = &a2[v5];
  if (*(unsigned __int16 *)v9 >= 5u && (uint64_t v10 = *((unsigned __int16 *)v9 + 2)) != 0) {
    int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v10 + 4 + *(unsigned int *)&a2[v10]], *(unsigned int *)&a2[v10 + *(unsigned int *)&a2[v10]]);
  }
  else {
    int String = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 32);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v8);
  }
  if (String) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, String);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl18CloneFunctionGroupINS5_13FunctionGroupEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_28FunctionGroupCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      int String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      uint64_t v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v11 = __p;
  }
  if (v16 == v11) {
    uint64_t v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18280FA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280FB14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0)
  {
    unsigned int v5 = *((unsigned __int8 *)a2 + v4);
    if (v5 >= 3) {
      abort();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  __int16 v6 = *(void *)(a1 + 32) - *(void *)(a1 + 48) + *(void *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 4, v5, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v6);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl22BufferLayoutDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneBufferLayoutDescriptor<Mtl::BufferLayoutDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      uint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18280FC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl19AttributeDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::AttributeDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneAttributeDescriptor<Mtl::AttributeDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      uint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Mtl::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::AttributeDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18280FD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280FDE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneBufferLayoutDescriptor<Mtl::BufferLayoutDescriptor>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 9u && (uint64_t v5 = v4[4]) != 0) {
    uint64_t v6 = *(void *)((char *)a2 + v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 8, v6, 0);
  uint64_t v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 7u && (uint64_t v11 = v10[3]) != 0) {
    uint64_t v12 = *(void *)((char *)a2 + v11);
  }
  else {
    uint64_t v12 = 1;
  }
  unsigned int v13 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 6, v12, 1);
  uint64_t v14 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v14 >= 5u)
  {
    uint64_t v15 = v14[2];
    if (v15)
    {
      unsigned int v13 = *((unsigned __int8 *)a2 + v15);
      if (v13 >= 9) {
        abort();
      }
    }
    else
    {
      unsigned int v13 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 4, v13, 1);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

void *std::vector<flatbuffers::Offset<Mtl::AttributeDescriptor>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18280FF78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneAttributeDescriptor<Mtl::AttributeDescriptor>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 7u && (uint64_t v5 = v4[3]) != 0) {
    uint64_t v6 = *(void *)((char *)a2 + v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 6, v6, 0);
  uint64_t v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0) {
    int v12 = *(int *)((char *)a2 + v11);
  }
  else {
    int v12 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 8, v12, 0);
  int v13 = 0;
  uint64_t v14 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v14 >= 5u)
  {
    uint64_t v15 = v14[2];
    if (v15)
    {
      unint64_t v16 = *((unsigned __int8 *)a2 + v15);
      if (v16 >= 0x38 || ((0xFFE7FFFFFFFFFFuLL >> v16) & 1) == 0) {
        abort();
      }
      int v13 = byte_1828E29F9[(char)v16];
    }
    else
    {
      int v13 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 4, v13, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      uint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182810194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      uint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182810278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl39RenderPipelineColorAttachmentDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneRenderPipelineColorAttachmentDescriptor<Mtl::RenderPipelineColorAttachmentDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      uint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18281035C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneVertexDescriptor<Mtl::VertexDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = -v4;
  unint64_t v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    unint64_t v16 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    int v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl28VertexBufferLayoutDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v16, &v16, a1);
    uint64_t v5 = -(uint64_t)*a2;
  }
  else
  {
    int v8 = 0;
  }
  int v9 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v9 >= 5u && (uint64_t v10 = v9[2]) != 0)
  {
    unint64_t v16 = (unsigned int *)((char *)a2 + v10 + *(unsigned int *)((char *)a2 + v10));
    int v11 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl25VertexAttributeDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v16, &v16, a1);
  }
  else
  {
    int v11 = 0;
  }
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 32);
  if (v8) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v8);
  }
  if (v11) {
    flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 4, v11);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

uint64_t Mtl::ClonePixelFormat<Mtl::PixelFormat>(uint64_t result)
{
  switch((int)result)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 53:
    case 54:
    case 55:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 84:
    case 85:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 103:
    case 104:
    case 105:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 123:
    case 124:
    case 125:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 141:
    case 142:
    case 143:
    case 150:
    case 151:
    case 152:
    case 153:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 240:
    case 241:
    case 250:
    case 252:
    case 253:
    case 255:
    case 260:
    case 261:
    case 262:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 313:
    case 314:
    case 315:
    case 323:
    case 324:
    case 325:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 560:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
      return result;
    default:
      abort();
  }
}

void *std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_182810F5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneRenderPipelineColorAttachmentDescriptor<Mtl::RenderPipelineColorAttachmentDescriptor>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    uint64_t v6 = *(unsigned __int16 *)((char *)a2 + v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  unsigned __int16 v10 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v6);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((void *)a1, 4, v10, 0);
  int v11 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v11 >= 0x15u && (uint64_t v12 = v11[10]) != 0)
  {
    unsigned int v13 = *((unsigned __int8 *)a2 + v12);
    if (v13 >= 0x13) {
      goto LABEL_31;
    }
  }
  else
  {
    unsigned int v13 = 1;
  }
  unsigned int v14 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 20, v13, 1);
  uint64_t v15 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v15 >= 0x13u)
  {
    uint64_t v16 = v15[9];
    if (v16)
    {
      unsigned int v14 = *((unsigned __int8 *)a2 + v16);
      if (v14 >= 0x13) {
LABEL_31:
      }
        abort();
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 18, v14, 1);
  uint64_t v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 0x11u && (uint64_t v18 = v17[8]) != 0)
  {
    unsigned int v19 = *((unsigned __int8 *)a2 + v18);
    if (v19 >= 0x13) {
      goto LABEL_31;
    }
  }
  else
  {
    unsigned int v19 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 16, v19, 0);
  unsigned int v20 = 0;
  uint64_t v21 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v21 >= 0xFu)
  {
    uint64_t v22 = v21[7];
    if (v22)
    {
      unsigned int v20 = *((unsigned __int8 *)a2 + v22);
      if (v20 >= 0x13) {
        goto LABEL_31;
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 14, v20, 0);
  unsigned int v23 = 0;
  __int16 v24 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v24 >= 0xDu)
  {
    uint64_t v25 = v24[6];
    if (v25)
    {
      unsigned int v23 = *((unsigned __int8 *)a2 + v25);
      if (v23 >= 5) {
        goto LABEL_31;
      }
    }
    else
    {
      unsigned int v23 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 12, v23, 0);
  unsigned int v26 = 0;
  uint64_t v27 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v27 >= 0xBu)
  {
    uint64_t v28 = v27[5];
    if (v28)
    {
      unsigned int v26 = *((unsigned __int8 *)a2 + v28);
      if (v26 >= 5) {
        goto LABEL_31;
      }
    }
    else
    {
      unsigned int v26 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 10, v26, 0);
  BOOL v29 = 0;
  long long v30 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v30 >= 9u)
  {
    uint64_t v31 = v30[4];
    if (v31) {
      BOOL v29 = *((unsigned __int8 *)a2 + v31) != 0;
    }
    else {
      BOOL v29 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 8, v29, 0);
  long long v32 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v32 >= 7u && (uint64_t v33 = v32[3]) != 0) {
    int v34 = *((unsigned __int8 *)a2 + v33);
  }
  else {
    int v34 = 15;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 6, v34, 15);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl28VertexBufferLayoutDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneVertexBufferLayoutDescriptor<Mtl::VertexBufferLayoutDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unsigned __int16 v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned __int16 v10 = __p;
  }
  if (v15 == v10) {
    int v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>> const&)::t;
  }
  else {
    int v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1828112E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl25VertexAttributeDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneAttributeDescriptor<Mtl::AttributeDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unsigned __int16 v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned __int16 v10 = __p;
  }
  if (v15 == v10) {
    int v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>> const&)::t;
  }
  else {
    int v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1828113CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_182811448(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneVertexBufferLayoutDescriptor<Mtl::VertexBufferLayoutDescriptor>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 9u && (uint64_t v5 = v4[4]) != 0) {
    uint64_t v6 = *(void *)((char *)a2 + v5);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 8, v6, 0);
  unsigned __int16 v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 7u && (uint64_t v11 = v10[3]) != 0) {
    uint64_t v12 = *(void *)((char *)a2 + v11);
  }
  else {
    uint64_t v12 = 1;
  }
  unsigned int v13 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((void *)a1, 6, v12, 1);
  unsigned int v14 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v14 >= 5u)
  {
    uint64_t v15 = v14[2];
    if (v15)
    {
      unsigned int v13 = *((unsigned __int8 *)a2 + v15);
      if (v13 >= 5) {
        abort();
      }
    }
    else
    {
      unsigned int v13 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((void *)a1, 4, v13, 1);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneTileRenderPipelineDescriptorINS3_28TileRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43TileRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unsigned __int16 v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned __int16 v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182811644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl43TileRenderPipelineColorAttachmentDescriptorEEEZNS3_33CloneTileRenderPipelineDescriptorINS3_28TileRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43TileRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneTileRenderPipelineColorAttachmentDescriptor<Mtl::TileRenderPipelineColorAttachmentDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unsigned __int16 v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned __int16 v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182811728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1828117A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneTileRenderPipelineColorAttachmentDescriptor<Mtl::TileRenderPipelineColorAttachmentDescriptor>(uint64_t a1, int *a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v6 >= 5u && (uint64_t v7 = v6[2]) != 0) {
    uint64_t v8 = *(unsigned __int16 *)((char *)a2 + v7);
  }
  else {
    uint64_t v8 = 0;
  }
  __int16 v9 = v5 - v3 + v4;
  unsigned __int16 v10 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v8);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((void *)a1, 4, v10, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v9);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unsigned __int16 v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned __int16 v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182811914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unsigned __int16 v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned __int16 v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1828119F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unsigned __int16 v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned __int16 v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182811ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(a1 + 24, *a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unsigned int v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(a1 + 32, i[2], *a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = *a3;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  unsigned int v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_38:
    void *v23 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    unsigned int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_182811D44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(uint64_t a1, uint64_t a2)
{
  size_t v10 = 0;
  buffer_ptr = 0;
  unint64_t v3 = dispatch_data_create_map(*(dispatch_data_t *)a2, (const void **)&buffer_ptr, &v10);
  uint64_t v4 = 0;
  uint64_t v5 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
  unint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 9u)
  {
    uint64_t v7 = v6[4];
    if (!v7) {
      goto LABEL_7;
    }
    int v8 = *((unsigned __int8 *)v5 + v7);
    if ((v8 - 2) < 2)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      goto LABEL_10;
    }
    if (v8 == 4)
    {
      uint64_t v4 = *(void *)(a2 + 24) ^ *(void *)(a2 + 8) ^ *(void *)(a2 + 16);
      goto LABEL_10;
    }
    if (v8 == 1) {
      uint64_t v4 = *(void *)(a2 + 16) ^ *(void *)(a2 + 8);
    }
    else {
LABEL_7:
    }
      uint64_t v4 = 0;
  }
LABEL_10:
  dispatch_release(v3);
  return v4;
}

BOOL MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(void **a1, unsigned int a2)
{
  uint64_t v2 = **a1 + 24 * a2;
  unint64_t v3 = *(char **)(v2 + 128);
  uint64_t v4 = *(char **)(v2 + 136);
  uint64_t v5 = *a1[1] + 24 * a2;
  unint64_t v6 = *(char **)(v5 + 128);
  uint64_t v7 = *(char **)(v5 + 136);
  if (v4 - v3 != v7 - v6) {
    return 0;
  }
  if (v3 != v4 && v6 != v7)
  {
    while (1)
    {
      BOOL v11 = *(void *)v3 == *(void *)v6 && *((void *)v3 + 1) == *((void *)v6 + 1);
      BOOL v12 = v11 && *((void *)v3 + 2) == *((void *)v6 + 2);
      if (!v12 || *((void *)v3 + 3) != *((void *)v6 + 3)) {
        break;
      }
      v3 += 32;
      v6 += 32;
      if (v3 == v4 || v6 == v7) {
        return v3 == v4 && v6 == v7;
      }
    }
    return 0;
  }
  return v3 == v4 && v6 == v7;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__func()
{
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC7368;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC7368;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, std::string *a3@<X8>)
{
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target_type()
{
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__func()
{
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC7310;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC7310;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, std::string *a3@<X8>)
{
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target_type()
{
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__func()
{
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC73C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC73C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, std::string *a3@<X8>)
{
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target_type()
{
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__func()
{
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC7418;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC7418;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, std::string *a3@<X8>)
{
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unsigned int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unsigned int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1828124CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  int v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    _OWORD v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_182812570(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching9AttributeEEEZNS4_10CloneGraphIN3Air17FunctionStitching5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_INS4_5GraphEEEE4typeERS0_PKSE_EUlmPvE_vEENS2_INS_6VectorISE_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::FunctionStitching::CloneAttribute<Mtl::FunctionStitching::Attribute>(a4, (Mtl::FunctionStitching::Attribute *)(*a3+ (v8 & 0x3FFFFFFFCLL)+ 4+ *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unint64_t v10 = __p;
  }
  if (v15 == v10) {
    long long v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>> const&)::t;
  }
  else {
    long long v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    unint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18281264C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching4NodeEEEZNS4_10CloneGraphIN3Air17FunctionStitching5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_INS4_5GraphEEEE4typeERS0_PKSE_EUlmPvE0_vEENS2_INS_6VectorISE_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::FunctionStitching::CloneNode<Air::FunctionStitching::Node>(a4, (Mtl::FunctionStitching::Node *)(*a3+ (v8 & 0x3FFFFFFFCLL)+ 4+ *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      unint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    unint64_t v10 = __p;
  }
  if (v15 == v10) {
    long long v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>> const&)::t;
  }
  else {
    long long v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    unint64_t v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182812730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneNode<Air::FunctionStitching::Node>(uint64_t a1, Mtl::FunctionStitching::Node *this)
{
  unint64_t v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    unsigned int v6 = *(_DWORD *)((char *)this + v5);
    if (v6 >= 0xC) {
      goto LABEL_22;
    }
    switch(v6)
    {
      case 1u:
        uint64_t v7 = (int *)AirReflection::Node::node_as_FragmentFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v7);
        break;
      case 2u:
        uint64_t v12 = (const char *)AirReflection::Node::node_as_KernelFunction(this);
        int v8 = Mtl::FunctionStitching::CloneFunctionNode<Mtl::FunctionStitching::FunctionNode>(a1, v12);
        break;
      case 3u:
        unint64_t v13 = (int *)AirReflection::Node::node_as_VertexFunction(this);
        int v8 = Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(a1, v13);
        break;
      case 4u:
        unsigned int v14 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(this);
        int v8 = Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(a1, v14);
        break;
      case 5u:
        unint64_t v15 = (int *)AirReflection::Node::node_as_IntersectionFunction(this);
        int v8 = Mtl::FunctionStitching::CloneBufferDataNode<Mtl::FunctionStitching::BufferDataNode>(a1, v15);
        break;
      case 6u:
        unint64_t v16 = (int *)AirReflection::Node::node_as_MeshFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v16);
        break;
      case 7u:
        float v17 = (int *)AirReflection::Node::node_as_ObjectFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v17);
        break;
      case 8u:
        float v18 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v18);
        break;
      case 9u:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(this);
        *(unsigned char *)(a1 + 70) = 1;
        int v8 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, *(_WORD *)(a1 + 32) - *(_WORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
        break;
      case 0xAu:
        BOOL v19 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(this);
        int v8 = Mtl::FunctionStitching::CloneBuiltinNode<Mtl::FunctionStitching::BuiltinNode>(a1, v19);
        break;
      case 0xBu:
        unint64_t v20 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(this);
        int v8 = Mtl::FunctionStitching::CloneEarlyReturnNode<Mtl::FunctionStitching::EarlyReturnNode>(a1, v20);
        break;
      default:
        goto LABEL_6;
    }
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
    if (v8) {
      flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v8);
    }
  }
  else
  {
LABEL_6:
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
  }
  unint64_t v21 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v21 >= 5u && (uint64_t v22 = v21[2]) != 0)
  {
    unsigned int v23 = *(_DWORD *)((char *)this + v22);
    if (v23 >= 0xC) {
LABEL_22:
    }
      abort();
  }
  else
  {
    unsigned int v23 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 4, v23, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v11 - (unsigned __int16)v9 + (unsigned __int16)v10);
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**,false>(unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    uint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                long long v83 = *(a2 - 1);
                long long v84 = *v11;
                unint64_t v85 = bswap64(*v83);
                unint64_t v86 = bswap64(**v11);
                if (v85 == v86
                  && (unint64_t v85 = bswap64(v83[1]), v86 = bswap64(v84[1]), v85 == v86)
                  && (unint64_t v85 = bswap64(v83[2]), v86 = bswap64(v84[2]), v85 == v86)
                  && (unint64_t v85 = bswap64(v83[3]), v86 = bswap64(v84[3]), v85 == v86))
                {
                  int v87 = 0;
                }
                else if (v85 < v86)
                {
                  int v87 = -1;
                }
                else
                {
                  int v87 = 1;
                }
                if (v87 < 0)
                {
                  *uint64_t v11 = v83;
                  *(a2 - 1) = v84;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                long long v88 = v11 + 1;
                unint64_t v89 = v11 + 2;
                long long v90 = v11 + 3;
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v11, v11 + 1, v11 + 2, v11 + 3);
                long long v91 = *(a2 - 1);
                long long v92 = v11[3];
                unint64_t v93 = bswap64(*v91);
                unint64_t v94 = bswap64(*v92);
                if (v93 == v94
                  && (unint64_t v93 = bswap64(v91[1]), v94 = bswap64(v92[1]), v93 == v94)
                  && (unint64_t v93 = bswap64(v91[2]), v94 = bswap64(v92[2]), v93 == v94)
                  && (unint64_t v93 = bswap64(v91[3]), v94 = bswap64(v92[3]), v93 == v94))
                {
                  int v95 = 0;
                }
                else if (v93 < v94)
                {
                  int v95 = -1;
                }
                else
                {
                  int v95 = 1;
                }
                if (v95 < 0)
                {
                  *long long v90 = v91;
                  *(a2 - 1) = v92;
                  long long v160 = *v90;
                  long long v161 = *v89;
                  unint64_t v162 = bswap64(**v90);
                  unint64_t v163 = bswap64(**v89);
                  if (v162 != v163) {
                    goto LABEL_318;
                  }
                  unint64_t v162 = bswap64(v160[1]);
                  unint64_t v163 = bswap64(v161[1]);
                  if (v162 == v163
                    && (unint64_t v162 = bswap64(v160[2]), v163 = bswap64(v161[2]), v162 == v163)
                    && (unint64_t v162 = bswap64(v160[3]), v163 = bswap64(v161[3]), v162 == v163))
                  {
                    int v164 = 0;
                  }
                  else
                  {
LABEL_318:
                    int v164 = v162 < v163 ? -1 : 1;
                  }
                  if (v164 < 0)
                  {
                    *unint64_t v89 = v160;
                    *long long v90 = v161;
                    int v174 = *v88;
                    unint64_t v175 = bswap64(*v160);
                    unint64_t v176 = bswap64(**v88);
                    if (v175 != v176) {
                      goto LABEL_327;
                    }
                    unint64_t v175 = bswap64(v160[1]);
                    unint64_t v176 = bswap64(v174[1]);
                    if (v175 == v176
                      && (unint64_t v175 = bswap64(v160[2]), v176 = bswap64(v174[2]), v175 == v176)
                      && (unint64_t v175 = bswap64(v160[3]), v176 = bswap64(v174[3]), v175 == v176))
                    {
                      int v177 = 0;
                    }
                    else
                    {
LABEL_327:
                      int v177 = v175 < v176 ? -1 : 1;
                    }
                    if (v177 < 0)
                    {
                      v11[1] = v160;
                      id v11[2] = v174;
                      unint64_t v178 = *v11;
                      unint64_t v179 = bswap64(*v160);
                      unint64_t v180 = bswap64(**v11);
                      if (v179 != v180) {
                        goto LABEL_336;
                      }
                      unint64_t v179 = bswap64(v160[1]);
                      unint64_t v180 = bswap64(v178[1]);
                      if (v179 == v180
                        && (unint64_t v179 = bswap64(v160[2]), v180 = bswap64(v178[2]), v179 == v180)
                        && (unint64_t v179 = bswap64(v160[3]), v180 = bswap64(v178[3]), v179 == v180))
                      {
                        int v181 = 0;
                      }
                      else
                      {
LABEL_336:
                        int v181 = v179 < v180 ? -1 : 1;
                      }
                      if (v181 < 0)
                      {
                        *uint64_t v11 = v160;
                        v11[1] = v178;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v96 = v11 + 1;
            BOOL v98 = v11 == a2 || v96 == a2;
            if (a4)
            {
              if (!v98)
              {
                uint64_t v99 = 0;
                BOOL v100 = v11;
                do
                {
                  uint64_t v102 = *v100;
                  int v101 = v100[1];
                  BOOL v100 = v96;
                  unint64_t v103 = bswap64(*v101);
                  unint64_t v104 = bswap64(*v102);
                  if (v103 != v104
                    || (v103 = bswap64(v101[1]), unint64_t v104 = bswap64(v102[1]), v103 != v104)
                    || (v103 = bswap64(v101[2]), unint64_t v104 = bswap64(v102[2]), v103 != v104)
                    || (v103 = bswap64(v101[3]), unint64_t v104 = bswap64(v102[3]), v103 != v104))
                  {
                    int v105 = v103 < v104 ? -1 : 1;
                    if (v105 < 0)
                    {
                      uint64_t v106 = v99;
                      while (1)
                      {
                        *(unint64_t **)((char *)v11 + v106 + 8) = v102;
                        if (!v106) {
                          break;
                        }
                        uint64_t v102 = *(unint64_t **)((char *)v11 + v106 - 8);
                        unint64_t v107 = bswap64(*v101);
                        unint64_t v108 = bswap64(*v102);
                        if (v107 == v108
                          && (v107 = bswap64(v101[1]), unint64_t v108 = bswap64(v102[1]), v107 == v108)
                          && (v107 = bswap64(v101[2]), unint64_t v108 = bswap64(v102[2]), v107 == v108)
                          && (v107 = bswap64(v101[3]), unint64_t v108 = bswap64(v102[3]), v107 == v108))
                        {
                          int v109 = 0;
                        }
                        else if (v107 < v108)
                        {
                          int v109 = -1;
                        }
                        else
                        {
                          int v109 = 1;
                        }
                        v106 -= 8;
                        if ((v109 & 0x80000000) == 0)
                        {
                          uint64_t v110 = (unint64_t **)((char *)v11 + v106 + 8);
                          goto LABEL_192;
                        }
                      }
                      uint64_t v110 = v11;
LABEL_192:
                      *uint64_t v110 = v101;
                    }
                  }
                  uint64_t v96 = v100 + 1;
                  v99 += 8;
                }
                while (v100 + 1 != a2);
              }
            }
            else if (!v98)
            {
              do
              {
                long long v166 = *v9;
                uint64_t v165 = v9[1];
                uint64_t v9 = v96;
                unint64_t v167 = bswap64(*v165);
                unint64_t v168 = bswap64(*v166);
                if (v167 != v168
                  || (unint64_t v167 = bswap64(v165[1]), v168 = bswap64(v166[1]), v167 != v168)
                  || (unint64_t v167 = bswap64(v165[2]), v168 = bswap64(v166[2]), v167 != v168)
                  || (unint64_t v167 = bswap64(v165[3]), v168 = bswap64(v166[3]), v167 != v168))
                {
                  int v169 = v167 < v168 ? -1 : 1;
                  if (v169 < 0)
                  {
                    long long v170 = v96;
                    do
                    {
                      void *v170 = v166;
                      long long v166 = *(v170 - 2);
                      unint64_t v171 = bswap64(*v165);
                      unint64_t v172 = bswap64(*v166);
                      if (v171 == v172
                        && (unint64_t v171 = bswap64(v165[1]), v172 = bswap64(v166[1]), v171 == v172)
                        && (unint64_t v171 = bswap64(v165[2]), v172 = bswap64(v166[2]), v171 == v172)
                        && (unint64_t v171 = bswap64(v165[3]), v172 = bswap64(v166[3]), v171 == v172))
                      {
                        int v173 = 0;
                      }
                      else if (v171 < v172)
                      {
                        int v173 = -1;
                      }
                      else
                      {
                        int v173 = 1;
                      }
                      --v170;
                    }
                    while (v173 < 0);
                    void *v170 = v165;
                  }
                }
                uint64_t v96 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v111 = (v13 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                int64_t v113 = v112;
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  long long v115 = &v11[v114];
                  long long v116 = *v115;
                  if (2 * v113 + 2 < (uint64_t)v13)
                  {
                    long long v117 = v115[1];
                    unint64_t v118 = bswap64(*v116);
                    unint64_t v119 = bswap64(*v117);
                    if (v118 != v119) {
                      goto LABEL_204;
                    }
                    unint64_t v118 = bswap64(v116[1]);
                    unint64_t v119 = bswap64(v117[1]);
                    if (v118 == v119
                      && (unint64_t v118 = bswap64(v116[2]), v119 = bswap64(v117[2]), v118 == v119)
                      && (unint64_t v118 = bswap64(v116[3]), v119 = bswap64(v117[3]), v118 == v119))
                    {
                      int v120 = 0;
                    }
                    else
                    {
LABEL_204:
                      int v120 = v118 < v119 ? -1 : 1;
                    }
                    if (v120 < 0)
                    {
                      long long v116 = v115[1];
                      ++v115;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  uint64_t result = &v11[v113];
                  uint64_t v121 = *result;
                  unint64_t v122 = bswap64(*v116);
                  unint64_t v123 = bswap64(**result);
                  if (v122 == v123
                    && (v122 = bswap64(v116[1]), unint64_t v123 = bswap64(v121[1]), v122 == v123)
                    && (v122 = bswap64(v116[2]), unint64_t v123 = bswap64(v121[2]), v122 == v123)
                    && (v122 = bswap64(v116[3]), unint64_t v123 = bswap64(v121[3]), v122 == v123)
                    || (v122 < v123 ? (int v124 = -1) : (int v124 = 1), (v124 & 0x80000000) == 0))
                  {
                    do
                    {
                      uint64_t v125 = v115;
                      *uint64_t result = v116;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v126 = (2 * v114) | 1;
                      long long v115 = &v11[v126];
                      uint64_t v114 = 2 * v114 + 2;
                      long long v116 = *v115;
                      if (v114 < (uint64_t)v13)
                      {
                        unint64_t v127 = v115[1];
                        unint64_t v128 = bswap64(*v116);
                        unint64_t v129 = bswap64(*v127);
                        if (v128 != v129) {
                          goto LABEL_225;
                        }
                        unint64_t v128 = bswap64(v116[1]);
                        unint64_t v129 = bswap64(v127[1]);
                        if (v128 == v129
                          && (unint64_t v128 = bswap64(v116[2]), v129 = bswap64(v127[2]), v128 == v129)
                          && (unint64_t v128 = bswap64(v116[3]), v129 = bswap64(v127[3]), v128 == v129))
                        {
                          int v130 = 0;
                        }
                        else
                        {
LABEL_225:
                          int v130 = v128 < v129 ? -1 : 1;
                        }
                        if (v130 >= 0)
                        {
                          uint64_t v114 = v126;
                        }
                        else
                        {
                          long long v116 = v115[1];
                          ++v115;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v126;
                      }
                      unint64_t v131 = bswap64(*v116);
                      unint64_t v132 = bswap64(*v121);
                      if (v131 != v132) {
                        goto LABEL_236;
                      }
                      unint64_t v131 = bswap64(v116[1]);
                      unint64_t v132 = bswap64(v121[1]);
                      if (v131 == v132
                        && (unint64_t v131 = bswap64(v116[2]), v132 = bswap64(v121[2]), v131 == v132)
                        && (unint64_t v131 = bswap64(v116[3]), v132 = bswap64(v121[3]), v131 == v132))
                      {
                        int v133 = 0;
                      }
                      else
                      {
LABEL_236:
                        int v133 = v131 < v132 ? -1 : 1;
                      }
                      uint64_t result = v125;
                    }
                    while ((v133 & 0x80000000) == 0);
                    *uint64_t v125 = v121;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              uint64_t v134 = (unint64_t)v12 >> 3;
              do
              {
                uint64_t v135 = 0;
                uint64_t v136 = *v11;
                uint64_t v137 = v11;
                do
                {
                  unint64_t v138 = &v137[v135];
                  long long v141 = v138[1];
                  unint64_t v139 = v138 + 1;
                  int v140 = v141;
                  uint64_t v142 = (2 * v135) | 1;
                  uint64_t v143 = 2 * v135 + 2;
                  if (v143 < v134)
                  {
                    uint64_t result = (unint64_t **)v139[1];
                    unint64_t v144 = bswap64(*v140);
                    unint64_t v145 = bswap64((unint64_t)*result);
                    if (v144 != v145) {
                      goto LABEL_250;
                    }
                    unint64_t v144 = bswap64(v140[1]);
                    unint64_t v145 = bswap64((unint64_t)result[1]);
                    if (v144 == v145
                      && (unint64_t v144 = bswap64(v140[2]), v145 = bswap64((unint64_t)result[2]), v144 == v145)
                      && (unint64_t v144 = bswap64(v140[3]), v145 = bswap64((unint64_t)result[3]), v144 == v145))
                    {
                      int v146 = 0;
                    }
                    else
                    {
LABEL_250:
                      int v146 = v144 < v145 ? -1 : 1;
                    }
                    if (v146 < 0)
                    {
                      int v140 = v139[1];
                      ++v139;
                      uint64_t v142 = v143;
                    }
                  }
                  *uint64_t v137 = v140;
                  uint64_t v137 = v139;
                  uint64_t v135 = v142;
                }
                while (v142 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
                if (v139 == --a2)
                {
                  *unint64_t v139 = v136;
                }
                else
                {
                  *unint64_t v139 = *a2;
                  *a2 = v136;
                  uint64_t v147 = (char *)v139 - (char *)v11 + 8;
                  if (v147 >= 9)
                  {
                    unint64_t v148 = (((unint64_t)v147 >> 3) - 2) >> 1;
                    int v149 = &v11[v148];
                    long long v150 = *v149;
                    unint64_t v151 = *v139;
                    unint64_t v152 = bswap64(**v149);
                    unint64_t v153 = bswap64(**v139);
                    if (v152 != v153
                      || (unint64_t v152 = bswap64(v150[1]), v153 = bswap64(v151[1]), v152 != v153)
                      || (unint64_t v152 = bswap64(v150[2]), v153 = bswap64(v151[2]), v152 != v153)
                      || (unint64_t v152 = bswap64(v150[3]), v153 = bswap64(v151[3]), v152 != v153))
                    {
                      int v154 = v152 < v153 ? -1 : 1;
                      if (v154 < 0)
                      {
                        do
                        {
                          long long v155 = v149;
                          *unint64_t v139 = v150;
                          if (!v148) {
                            break;
                          }
                          unint64_t v148 = (v148 - 1) >> 1;
                          int v149 = &v11[v148];
                          long long v150 = *v149;
                          unint64_t v156 = bswap64(**v149);
                          unint64_t v157 = bswap64(*v151);
                          if (v156 != v157) {
                            goto LABEL_274;
                          }
                          unint64_t v156 = bswap64(v150[1]);
                          unint64_t v157 = bswap64(v151[1]);
                          if (v156 == v157
                            && (unint64_t v156 = bswap64(v150[2]), v157 = bswap64(v151[2]), v156 == v157)
                            && (unint64_t v156 = bswap64(v150[3]), v157 = bswap64(v151[3]), v156 == v157))
                          {
                            int v158 = 0;
                          }
                          else
                          {
LABEL_274:
                            int v158 = v156 < v157 ? -1 : 1;
                          }
                          unint64_t v139 = v155;
                        }
                        while (v158 < 0);
                        MTLBVHBoundingBoxGeometryDescriptor *v155 = v151;
                      }
                    }
                  }
                }
              }
              while (v134-- > 2);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v9 + 2, &v9[v14 + 1], a2 - 3);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v15 - 1, v15, &v9[v14 + 1]);
            unint64_t v16 = *v9;
            *uint64_t v9 = *v15;
            *unint64_t v15 = v16;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          float v17 = *v9;
          if (a4) {
            break;
          }
          float v18 = *(v9 - 1);
          unint64_t v19 = bswap64(*v18);
          unint64_t v20 = bswap64(*v17);
          if (v19 != v20) {
            goto LABEL_16;
          }
          unint64_t v19 = bswap64(v18[1]);
          unint64_t v20 = bswap64(v17[1]);
          if (v19 == v20
            && (unint64_t v19 = bswap64(v18[2]), v20 = bswap64(v17[2]), v19 == v20)
            && (unint64_t v19 = bswap64(v18[3]), v20 = bswap64(v17[3]), v19 == v20))
          {
            int v21 = 0;
          }
          else
          {
LABEL_16:
            int v21 = v19 < v20 ? -1 : 1;
          }
          if (v21 < 0) {
            break;
          }
          long long v52 = *v10;
          unint64_t v53 = bswap64(*v17);
          unint64_t v54 = bswap64(**v10);
          if (v53 == v54
            && (unint64_t v53 = bswap64(v17[1]), v54 = bswap64(v52[1]), v53 == v54)
            && (unint64_t v53 = bswap64(v17[2]), v54 = bswap64(v52[2]), v53 == v54)
            && (unint64_t v53 = bswap64(v17[3]), v54 = bswap64(v52[3]), v53 == v54))
          {
            int v55 = 0;
          }
          else if (v53 < v54)
          {
            int v55 = -1;
          }
          else
          {
            int v55 = 1;
          }
          if (v55 < 0)
          {
            uint64_t v11 = v9;
            do
            {
              long long v62 = v11[1];
              ++v11;
              unint64_t v61 = v62;
              unint64_t v63 = bswap64(*v17);
              unint64_t v64 = bswap64(*v62);
              if (v63 == v64
                && (unint64_t v63 = bswap64(v17[1]), v64 = bswap64(v61[1]), v63 == v64)
                && (unint64_t v63 = bswap64(v17[2]), v64 = bswap64(v61[2]), v63 == v64)
                && (unint64_t v63 = bswap64(v17[3]), v64 = bswap64(v61[3]), v63 == v64))
              {
                int v65 = 0;
              }
              else if (v63 < v64)
              {
                int v65 = -1;
              }
              else
              {
                int v65 = 1;
              }
            }
            while ((v65 & 0x80000000) == 0);
          }
          else
          {
            long long v56 = v9 + 1;
            do
            {
              uint64_t v11 = v56;
              if (v56 >= a2) {
                break;
              }
              long long v57 = *v56;
              unint64_t v58 = bswap64(*v17);
              unint64_t v59 = bswap64(**v11);
              if (v58 != v59) {
                goto LABEL_95;
              }
              unint64_t v58 = bswap64(v17[1]);
              unint64_t v59 = bswap64(v57[1]);
              if (v58 == v59
                && (unint64_t v58 = bswap64(v17[2]), v59 = bswap64(v57[2]), v58 == v59)
                && (unint64_t v58 = bswap64(v17[3]), v59 = bswap64(v57[3]), v58 == v59))
              {
                int v60 = 0;
              }
              else
              {
LABEL_95:
                int v60 = v58 < v59 ? -1 : 1;
              }
              long long v56 = v11 + 1;
            }
            while ((v60 & 0x80000000) == 0);
          }
          long long v66 = a2;
          if (v11 < a2)
          {
            long long v66 = a2;
            do
            {
              long long v68 = *--v66;
              unint64_t v67 = v68;
              unint64_t v69 = bswap64(*v17);
              unint64_t v70 = bswap64(*v68);
              if (v69 == v70)
              {
                unint64_t v69 = bswap64(v17[1]);
                unint64_t v70 = bswap64(v67[1]);
                if (v69 == v70)
                {
                  unint64_t v69 = bswap64(v17[2]);
                  unint64_t v70 = bswap64(v67[2]);
                  if (v69 == v70)
                  {
                    unint64_t v69 = bswap64(v17[3]);
                    unint64_t v70 = bswap64(v67[3]);
                    if (v69 == v70) {
                      break;
                    }
                  }
                }
              }
              int v71 = v69 < v70 ? -1 : 1;
            }
            while (v71 < 0);
          }
          if (v11 < v66)
          {
            long long v72 = *v11;
            long long v73 = *v66;
            do
            {
              *uint64_t v11 = v73;
              *long long v66 = v72;
              do
              {
                do
                {
                  int v74 = v11[1];
                  ++v11;
                  long long v72 = v74;
                  unint64_t v75 = bswap64(*v17);
                  unint64_t v76 = bswap64(*v74);
                  if (v75 != v76) {
                    break;
                  }
                  unint64_t v75 = bswap64(v17[1]);
                  unint64_t v76 = bswap64(v72[1]);
                  if (v75 != v76) {
                    break;
                  }
                  unint64_t v75 = bswap64(v17[2]);
                  unint64_t v76 = bswap64(v72[2]);
                  if (v75 != v76) {
                    break;
                  }
                  unint64_t v75 = bswap64(v17[3]);
                  unint64_t v76 = bswap64(v72[3]);
                }
                while (v75 == v76);
                if (v75 < v76) {
                  int v77 = -1;
                }
                else {
                  int v77 = 1;
                }
              }
              while ((v77 & 0x80000000) == 0);
              do
              {
                unint64_t v78 = *--v66;
                long long v73 = v78;
                unint64_t v79 = bswap64(*v17);
                unint64_t v80 = bswap64(*v78);
                if (v79 == v80)
                {
                  unint64_t v79 = bswap64(v17[1]);
                  unint64_t v80 = bswap64(v73[1]);
                  if (v79 == v80)
                  {
                    unint64_t v79 = bswap64(v17[2]);
                    unint64_t v80 = bswap64(v73[2]);
                    if (v79 == v80)
                    {
                      unint64_t v79 = bswap64(v17[3]);
                      unint64_t v80 = bswap64(v73[3]);
                      if (v79 == v80) {
                        break;
                      }
                    }
                  }
                }
                int v81 = v79 < v80 ? -1 : 1;
              }
              while (v81 < 0);
            }
            while (v11 < v66);
          }
          long long v82 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *uint64_t v9 = *v82;
          }
          a4 = 0;
          const char *v82 = v17;
        }
        uint64_t v22 = 0;
        do
        {
          unsigned int v23 = v9[v22 + 1];
          unint64_t v24 = bswap64(*v23);
          unint64_t v25 = bswap64(*v17);
          if (v24 == v25
            && (unint64_t v24 = bswap64(v23[1]), v25 = bswap64(v17[1]), v24 == v25)
            && (unint64_t v24 = bswap64(v23[2]), v25 = bswap64(v17[2]), v24 == v25)
            && (unint64_t v24 = bswap64(v23[3]), v25 = bswap64(v17[3]), v24 == v25))
          {
            int v26 = 0;
          }
          else if (v24 < v25)
          {
            int v26 = -1;
          }
          else
          {
            int v26 = 1;
          }
          ++v22;
        }
        while (v26 < 0);
        uint64_t v27 = &v9[v22];
        uint64_t v28 = a2;
        if (v22 == 1)
        {
          uint64_t v28 = a2;
          do
          {
            if (v27 >= v28) {
              break;
            }
            uint64_t v35 = *--v28;
            int v34 = v35;
            unint64_t v36 = bswap64(*v35);
            unint64_t v37 = bswap64(*v17);
            if (v36 != v37) {
              goto LABEL_47;
            }
            unint64_t v36 = bswap64(v34[1]);
            unint64_t v37 = bswap64(v17[1]);
            if (v36 == v37
              && (v36 = bswap64(v34[2]), unint64_t v37 = bswap64(v17[2]), v36 == v37)
              && (v36 = bswap64(v34[3]), unint64_t v37 = bswap64(v17[3]), v36 == v37))
            {
              int v38 = 0;
            }
            else
            {
LABEL_47:
              int v38 = v36 < v37 ? -1 : 1;
            }
          }
          while ((v38 & 0x80000000) == 0);
        }
        else
        {
          do
          {
            do
            {
              long long v30 = *--v28;
              BOOL v29 = v30;
              unint64_t v31 = bswap64(*v30);
              unint64_t v32 = bswap64(*v17);
              if (v31 != v32) {
                break;
              }
              unint64_t v31 = bswap64(v29[1]);
              unint64_t v32 = bswap64(v17[1]);
              if (v31 != v32) {
                break;
              }
              unint64_t v31 = bswap64(v29[2]);
              unint64_t v32 = bswap64(v17[2]);
              if (v31 != v32) {
                break;
              }
              unint64_t v31 = bswap64(v29[3]);
              unint64_t v32 = bswap64(v17[3]);
            }
            while (v31 == v32);
            if (v31 < v32) {
              int v33 = -1;
            }
            else {
              int v33 = 1;
            }
          }
          while ((v33 & 0x80000000) == 0);
        }
        if (v27 >= v28)
        {
          long long v50 = v27 - 1;
        }
        else
        {
          unint64_t v39 = *v28;
          long long v40 = v27;
          long long v41 = v28;
          do
          {
            *long long v40 = v39;
            long long *v41 = v23;
            do
            {
              long long v42 = v40[1];
              ++v40;
              unsigned int v23 = v42;
              unint64_t v43 = bswap64(*v42);
              unint64_t v44 = bswap64(*v17);
              if (v43 == v44)
              {
                unint64_t v43 = bswap64(v23[1]);
                unint64_t v44 = bswap64(v17[1]);
                if (v43 == v44)
                {
                  unint64_t v43 = bswap64(v23[2]);
                  unint64_t v44 = bswap64(v17[2]);
                  if (v43 == v44)
                  {
                    unint64_t v43 = bswap64(v23[3]);
                    unint64_t v44 = bswap64(v17[3]);
                    if (v43 == v44) {
                      break;
                    }
                  }
                }
              }
              int v45 = v43 < v44 ? -1 : 1;
            }
            while (v45 < 0);
            do
            {
              do
              {
                long long v46 = *--v41;
                unint64_t v39 = v46;
                unint64_t v47 = bswap64(*v46);
                unint64_t v48 = bswap64(*v17);
                if (v47 != v48) {
                  break;
                }
                unint64_t v47 = bswap64(v39[1]);
                unint64_t v48 = bswap64(v17[1]);
                if (v47 != v48) {
                  break;
                }
                unint64_t v47 = bswap64(v39[2]);
                unint64_t v48 = bswap64(v17[2]);
                if (v47 != v48) {
                  break;
                }
                unint64_t v47 = bswap64(v39[3]);
                unint64_t v48 = bswap64(v17[3]);
              }
              while (v47 == v48);
              if (v47 < v48) {
                int v49 = -1;
              }
              else {
                int v49 = 1;
              }
            }
            while ((v49 & 0x80000000) == 0);
          }
          while (v40 < v41);
          long long v50 = v40 - 1;
        }
        if (v50 != v9) {
          *uint64_t v9 = *v50;
        }
        *long long v50 = v17;
        if (v27 >= v28) {
          break;
        }
LABEL_78:
        uint64_t result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**,false>(v9, v50, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v50 + 1;
      }
      BOOL v51 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v9, v50);
      uint64_t v11 = v50 + 1;
      uint64_t result = (unint64_t **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v50 + 1, a2);
      if (result) {
        break;
      }
      if (!v51) {
        goto LABEL_78;
      }
    }
    a2 = v50;
    if (!v51) {
      continue;
    }
    return result;
  }
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  uint64_t v3 = *a2;
  BOOL v4 = *result;
  unint64_t v5 = bswap64(**a2);
  unint64_t v6 = bswap64(**result);
  if (v5 == v6
    && (v5 = bswap64(v3[1]), unint64_t v6 = bswap64(v4[1]), v5 == v6)
    && (v5 = bswap64(v3[2]), unint64_t v6 = bswap64(v4[2]), v5 == v6)
    && (v5 = bswap64(v3[3]), unint64_t v6 = bswap64(v4[3]), v5 == v6))
  {
    int v7 = 0;
  }
  else if (v5 < v6)
  {
    int v7 = -1;
  }
  else
  {
    int v7 = 1;
  }
  int v8 = *a3;
  unint64_t v9 = bswap64(**a3);
  unint64_t v10 = bswap64(*v3);
  if (v9 != v10
    || (unint64_t v9 = bswap64(v8[1]), v10 = bswap64(v3[1]), v9 != v10)
    || (unint64_t v9 = bswap64(v8[2]), v10 = bswap64(v3[2]), v9 != v10)
    || (unint64_t v9 = bswap64(v8[3]), v10 = bswap64(v3[3]), v9 != v10))
  {
    if (v9 < v10) {
      int v11 = -1;
    }
    else {
      int v11 = 1;
    }
    if (v7 < 0) {
      goto LABEL_14;
    }
LABEL_24:
    if (v11 < 0)
    {
      *a2 = v8;
      *a3 = v3;
      unint64_t v16 = *a2;
      float v17 = *result;
      unint64_t v18 = bswap64(**a2);
      unint64_t v19 = bswap64(**result);
      if (v18 != v19) {
        goto LABEL_36;
      }
      unint64_t v18 = bswap64(v16[1]);
      unint64_t v19 = bswap64(v17[1]);
      if (v18 == v19
        && (unint64_t v18 = bswap64(v16[2]), v19 = bswap64(v17[2]), v18 == v19)
        && (unint64_t v18 = bswap64(v16[3]), v19 = bswap64(v17[3]), v18 == v19))
      {
        int v20 = 0;
      }
      else
      {
LABEL_36:
        int v20 = v18 < v19 ? -1 : 1;
      }
      if (v20 < 0)
      {
        *uint64_t result = v16;
        *a2 = v17;
      }
    }
    return result;
  }
  int v11 = 0;
  if ((v7 & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_14:
  if (v11 < 0)
  {
    *uint64_t result = v8;
    goto LABEL_42;
  }
  *uint64_t result = v3;
  *a2 = v4;
  uint64_t v12 = *a3;
  unint64_t v13 = bswap64(**a3);
  unint64_t v14 = bswap64(*v4);
  if (v13 == v14
    && (unint64_t v13 = bswap64(v12[1]), v14 = bswap64(v4[1]), v13 == v14)
    && (unint64_t v13 = bswap64(v12[2]), v14 = bswap64(v4[2]), v13 == v14)
    && (unint64_t v13 = bswap64(v12[3]), v14 = bswap64(v4[3]), v13 == v14))
  {
    int v15 = 0;
  }
  else if (v13 < v14)
  {
    int v15 = -1;
  }
  else
  {
    int v15 = 1;
  }
  if (v15 < 0)
  {
    *a2 = v12;
LABEL_42:
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      int v7 = *a1;
      unint64_t v8 = bswap64(*v6);
      unint64_t v9 = bswap64(**a1);
      if (v8 == v9
        && (v8 = bswap64(v6[1]), unint64_t v9 = bswap64(v7[1]), v8 == v9)
        && (v8 = bswap64(v6[2]), unint64_t v9 = bswap64(v7[2]), v8 == v9)
        && (v8 = bswap64(v6[3]), unint64_t v9 = bswap64(v7[3]), v8 == v9))
      {
        int v10 = 0;
      }
      else if (v8 < v9)
      {
        int v10 = -1;
      }
      else
      {
        int v10 = 1;
      }
      if (v10 < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      int v26 = a1 + 1;
      uint64_t v27 = a1 + 2;
      uint64_t v28 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      BOOL v29 = *(a2 - 1);
      long long v30 = a1[3];
      unint64_t v31 = bswap64(*v29);
      unint64_t v32 = bswap64(*v30);
      if (v31 == v32
        && (unint64_t v31 = bswap64(v29[1]), v32 = bswap64(v30[1]), v31 == v32)
        && (unint64_t v31 = bswap64(v29[2]), v32 = bswap64(v30[2]), v31 == v32)
        && (unint64_t v31 = bswap64(v29[3]), v32 = bswap64(v30[3]), v31 == v32))
      {
        int v33 = 0;
      }
      else if (v31 < v32)
      {
        int v33 = -1;
      }
      else
      {
        int v33 = 1;
      }
      if (v33 < 0)
      {
        *uint64_t v28 = v29;
        *(a2 - 1) = v30;
        int v34 = *v28;
        uint64_t v35 = *v27;
        unint64_t v36 = bswap64(**v28);
        unint64_t v37 = bswap64(**v27);
        if (v36 != v37) {
          goto LABEL_54;
        }
        unint64_t v36 = bswap64(v34[1]);
        unint64_t v37 = bswap64(v35[1]);
        if (v36 == v37
          && (v36 = bswap64(v34[2]), unint64_t v37 = bswap64(v35[2]), v36 == v37)
          && (v36 = bswap64(v34[3]), unint64_t v37 = bswap64(v35[3]), v36 == v37))
        {
          int v38 = 0;
        }
        else
        {
LABEL_54:
          int v38 = v36 < v37 ? -1 : 1;
        }
        if (v38 < 0)
        {
          *uint64_t v27 = v34;
          *uint64_t v28 = v35;
          unint64_t v39 = *v26;
          unint64_t v40 = bswap64(*v34);
          unint64_t v41 = bswap64(**v26);
          if (v40 != v41) {
            goto LABEL_64;
          }
          unint64_t v40 = bswap64(v34[1]);
          unint64_t v41 = bswap64(v39[1]);
          if (v40 == v41
            && (unint64_t v40 = bswap64(v34[2]), v41 = bswap64(v39[2]), v40 == v41)
            && (unint64_t v40 = bswap64(v34[3]), v41 = bswap64(v39[3]), v40 == v41))
          {
            int v42 = 0;
          }
          else
          {
LABEL_64:
            int v42 = v40 < v41 ? -1 : 1;
          }
          if (v42 < 0)
          {
            a1[1] = v34;
            a1[2] = v39;
            unint64_t v43 = *a1;
            unint64_t v44 = bswap64(*v34);
            unint64_t v45 = bswap64(**a1);
            if (v44 != v45) {
              goto LABEL_73;
            }
            unint64_t v44 = bswap64(v34[1]);
            unint64_t v45 = bswap64(v43[1]);
            if (v44 == v45
              && (unint64_t v44 = bswap64(v34[2]), v45 = bswap64(v43[2]), v44 == v45)
              && (unint64_t v44 = bswap64(v34[3]), v45 = bswap64(v43[3]), v44 == v45))
            {
              int v46 = 0;
            }
            else
            {
LABEL_73:
              int v46 = v44 < v45 ? -1 : 1;
            }
            if (v46 < 0)
            {
              *a1 = v34;
              a1[1] = v43;
            }
          }
        }
      }
      return 1;
    default:
      int v11 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a1 + 1, a1 + 2);
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = 24;
      break;
  }
  do
  {
    int v15 = *v12;
    unint64_t v16 = *v11;
    unint64_t v17 = bswap64(**v12);
    unint64_t v18 = bswap64(**v11);
    if (v17 != v18
      || (v17 = bswap64(v15[1]), unint64_t v18 = bswap64(v16[1]), v17 != v18)
      || (v17 = bswap64(v15[2]), unint64_t v18 = bswap64(v16[2]), v17 != v18)
      || (v17 = bswap64(v15[3]), unint64_t v18 = bswap64(v16[3]), v17 != v18))
    {
      int v19 = v17 < v18 ? -1 : 1;
      if (v19 < 0)
      {
        uint64_t v20 = v14;
        while (1)
        {
          *(unint64_t **)((char *)a1 + v20) = v16;
          uint64_t v21 = v20 - 8;
          if (v20 == 8) {
            break;
          }
          unint64_t v16 = *(unint64_t **)((char *)a1 + v20 - 16);
          unint64_t v22 = bswap64(*v15);
          unint64_t v23 = bswap64(*v16);
          if (v22 == v23
            && (unint64_t v22 = bswap64(v15[1]), v23 = bswap64(v16[1]), v22 == v23)
            && (unint64_t v22 = bswap64(v15[2]), v23 = bswap64(v16[2]), v22 == v23)
            && (unint64_t v22 = bswap64(v15[3]), v23 = bswap64(v16[3]), v22 == v23))
          {
            int v24 = 0;
          }
          else if (v22 < v23)
          {
            int v24 = -1;
          }
          else
          {
            int v24 = 1;
          }
          uint64_t v20 = v21;
          if ((v24 & 0x80000000) == 0)
          {
            unint64_t v25 = (unint64_t **)((char *)a1 + v21);
            goto LABEL_30;
          }
        }
        unint64_t v25 = a1;
LABEL_30:
        unint64_t *v25 = v15;
        if (++v13 == 8) {
          return v12 + 1 == a2;
        }
      }
    }
    int v11 = v12;
    v14 += 8;
    ++v12;
  }
  while (v12 != a2);
  return 1;
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a2, a3);
  unint64_t v9 = *a4;
  int v10 = *a3;
  unint64_t v11 = bswap64(**a4);
  unint64_t v12 = bswap64(**a3);
  if (v11 != v12
    || (unint64_t v11 = bswap64(v9[1]), v12 = bswap64(v10[1]), v11 != v12)
    || (unint64_t v11 = bswap64(v9[2]), v12 = bswap64(v10[2]), v11 != v12)
    || (unint64_t v11 = bswap64(v9[3]), v12 = bswap64(v10[3]), v11 != v12))
  {
    int v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      *a3 = v9;
      *a4 = v10;
      uint64_t v14 = *a3;
      int v15 = *a2;
      unint64_t v16 = bswap64(**a3);
      unint64_t v17 = bswap64(**a2);
      if (v16 != v17) {
        goto LABEL_14;
      }
      unint64_t v16 = bswap64(v14[1]);
      unint64_t v17 = bswap64(v15[1]);
      if (v16 == v17
        && (unint64_t v16 = bswap64(v14[2]), v17 = bswap64(v15[2]), v16 == v17)
        && (unint64_t v16 = bswap64(v14[3]), v17 = bswap64(v15[3]), v16 == v17))
      {
        int v18 = 0;
      }
      else
      {
LABEL_14:
        int v18 = v16 < v17 ? -1 : 1;
      }
      if (v18 < 0)
      {
        *a2 = v14;
        *a3 = v15;
        int v19 = *a2;
        uint64_t v20 = *a1;
        unint64_t v21 = bswap64(**a2);
        unint64_t v22 = bswap64(**a1);
        if (v21 == v22
          && (v21 = bswap64(v19[1]), unint64_t v22 = bswap64(v20[1]), v21 == v22)
          && (v21 = bswap64(v19[2]), unint64_t v22 = bswap64(v20[2]), v21 == v22)
          && (v21 = bswap64(v19[3]), unint64_t v22 = bswap64(v20[3]), v21 == v22))
        {
          int v23 = 0;
        }
        else if (v21 < v22)
        {
          int v23 = -1;
        }
        else
        {
          int v23 = 1;
        }
        if (v23 < 0)
        {
          *a1 = v19;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void **a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a2, a3, a4, a6);
  uint64_t v9 = *a5;
  uint64_t v10 = *a4;
  unint64_t v11 = *a6;
  uint64_t v12 = *a6[1];
  uint64_t v13 = v11[36];
  uint64_t v14 = v11[37];
  uint64_t v15 = v14 + (*((_DWORD *)v11 + 70) - v14 + v13);
  unint64_t v16 = (int *)(v15 - *(unsigned int *)(v12 + 4 * *a5));
  unint64_t v17 = (int *)(v15 - *(unsigned int *)(v12 + 4 * *a4));
  int v18 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v18 >= 5u && (uint64_t v19 = v18[2]) != 0)
  {
    uint64_t v20 = (unsigned int *)((char *)v16 + v19);
    uint64_t v21 = *v20;
    unint64_t v22 = (char *)v20 + v21 + 4;
    size_t v23 = *(unsigned int *)((char *)v20 + v21);
  }
  else
  {
    unint64_t v22 = 0;
    size_t v23 = 0;
  }
  int v24 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0)
  {
    int v26 = (unsigned int *)((char *)v17 + v25);
    uint64_t v27 = *v26;
    uint64_t v28 = (char *)v26 + v27 + 4;
    size_t v29 = *(unsigned int *)((char *)v26 + v27);
  }
  else
  {
    uint64_t v28 = 0;
    size_t v29 = 0;
  }
  if (v29 >= v23) {
    size_t v30 = v23;
  }
  else {
    size_t v30 = v29;
  }
  uint64_t result = memcmp(v22, v28, v30);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v23 >= v29)
  {
    return result;
  }
  *a4 = v9;
  *a5 = v10;
  uint64_t v32 = *a4;
  uint64_t v33 = *a3;
  int v34 = v13 - v14;
  uint64_t v35 = v14 + (*((_DWORD *)v11 + 70) + v13 - v14);
  unint64_t v36 = (int *)(v35 - *(unsigned int *)(v12 + 4 * *a4));
  unint64_t v37 = (int *)(v35 - *(unsigned int *)(v12 + 4 * *a3));
  int v38 = (unsigned __int16 *)((char *)v36 - *v36);
  if (*v38 >= 5u && (uint64_t v39 = v38[2]) != 0)
  {
    unint64_t v40 = (unsigned int *)((char *)v36 + v39);
    uint64_t v41 = *v40;
    int v42 = (char *)v40 + v41 + 4;
    size_t v43 = *(unsigned int *)((char *)v40 + v41);
  }
  else
  {
    int v42 = 0;
    size_t v43 = 0;
  }
  unint64_t v44 = (unsigned __int16 *)((char *)v37 - *v37);
  if (*v44 >= 5u && (uint64_t v45 = v44[2]) != 0)
  {
    int v46 = (unsigned int *)((char *)v37 + v45);
    uint64_t v47 = *v46;
    unint64_t v48 = (char *)v46 + v47 + 4;
    size_t v49 = *(unsigned int *)((char *)v46 + v47);
  }
  else
  {
    unint64_t v48 = 0;
    size_t v49 = 0;
  }
  if (v49 >= v43) {
    size_t v50 = v43;
  }
  else {
    size_t v50 = v49;
  }
  uint64_t result = memcmp(v42, v48, v50);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v43 >= v49)
  {
    return result;
  }
  *a3 = v32;
  *a4 = v33;
  uint64_t v51 = *a3;
  uint64_t v52 = *a2;
  uint64_t v53 = v14 + (*((_DWORD *)v11 + 70) + v34);
  unint64_t v54 = (int *)(v53 - *(unsigned int *)(v12 + 4 * *a3));
  int v55 = (int *)(v53 - *(unsigned int *)(v12 + 4 * *a2));
  long long v56 = (unsigned __int16 *)((char *)v54 - *v54);
  if (*v56 >= 5u && (uint64_t v57 = v56[2]) != 0)
  {
    unint64_t v58 = (unsigned int *)((char *)v54 + v57);
    uint64_t v59 = *v58;
    int v60 = (char *)v58 + v59 + 4;
    size_t v61 = *(unsigned int *)((char *)v58 + v59);
  }
  else
  {
    int v60 = 0;
    size_t v61 = 0;
  }
  long long v62 = (unsigned __int16 *)((char *)v55 - *v55);
  if (*v62 >= 5u && (uint64_t v63 = v62[2]) != 0)
  {
    unint64_t v64 = (unsigned int *)((char *)v55 + v63);
    uint64_t v65 = *v64;
    long long v66 = (char *)v64 + v65 + 4;
    size_t v67 = *(unsigned int *)((char *)v64 + v65);
  }
  else
  {
    long long v66 = 0;
    size_t v67 = 0;
  }
  if (v67 >= v61) {
    size_t v68 = v61;
  }
  else {
    size_t v68 = v67;
  }
  uint64_t result = memcmp(v60, v66, v68);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v61 >= v67)
  {
    return result;
  }
  *a2 = v51;
  *a3 = v52;
  uint64_t v69 = *a2;
  uint64_t v70 = *a1;
  uint64_t v71 = v14 + (*((_DWORD *)v11 + 70) + v34);
  long long v72 = (int *)(v71 - *(unsigned int *)(v12 + 4 * *a2));
  long long v73 = (int *)(v71 - *(unsigned int *)(v12 + 4 * *a1));
  int v74 = (unsigned __int16 *)((char *)v72 - *v72);
  if (*v74 >= 5u && (uint64_t v75 = v74[2]) != 0)
  {
    unint64_t v76 = (unsigned int *)((char *)v72 + v75);
    uint64_t v77 = *v76;
    unint64_t v78 = (char *)v76 + v77 + 4;
    size_t v79 = *(unsigned int *)((char *)v76 + v77);
  }
  else
  {
    unint64_t v78 = 0;
    size_t v79 = 0;
  }
  unint64_t v80 = (unsigned __int16 *)((char *)v73 - *v73);
  if (*v80 >= 5u && (uint64_t v81 = v80[2]) != 0)
  {
    long long v82 = (unsigned int *)((char *)v73 + v81);
    uint64_t v83 = *v82;
    long long v84 = (char *)v82 + v83 + 4;
    size_t v85 = *(unsigned int *)((char *)v82 + v83);
  }
  else
  {
    long long v84 = 0;
    size_t v85 = 0;
  }
  if (v85 >= v79) {
    size_t v86 = v79;
  }
  else {
    size_t v86 = v85;
  }
  uint64_t result = memcmp(v78, v84, v86);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v79 >= v85)
  {
    return result;
  }
  *a1 = v69;
  *a2 = v70;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      uint64_t v8 = *a3[1];
      uint64_t v9 = (*a3)[37] + *((_DWORD *)*a3 + 70) - (*a3)[37] + *((_DWORD *)*a3 + 72);
      uint64_t v10 = *(unsigned int *)(v8 + 4 * *a1);
      unint64_t v11 = (int *)(v9 - *(unsigned int *)(v8 + 4 * v6));
      uint64_t v12 = (int *)(v9 - v10);
      uint64_t v13 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v13 >= 5u && (uint64_t v14 = v13[2]) != 0)
      {
        uint64_t v15 = (unsigned int *)((char *)v11 + v14);
        uint64_t v16 = *v15;
        unint64_t v17 = (char *)v15 + v16 + 4;
        size_t v18 = *(unsigned int *)((char *)v15 + v16);
      }
      else
      {
        unint64_t v17 = 0;
        size_t v18 = 0;
      }
      size_t v61 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v61 >= 5u && (uint64_t v62 = v61[2]) != 0)
      {
        uint64_t v63 = (unsigned int *)((char *)v12 + v62);
        uint64_t v64 = *v63;
        uint64_t v65 = (char *)v63 + v64 + 4;
        size_t v66 = *(unsigned int *)((char *)v63 + v64);
      }
      else
      {
        uint64_t v65 = 0;
        size_t v66 = 0;
      }
      if (v66 >= v18) {
        size_t v67 = v18;
      }
      else {
        size_t v67 = v66;
      }
      int v68 = memcmp(v17, v65, v67);
      if (v68)
      {
        if ((v68 & 0x80000000) == 0) {
          return 1;
        }
        goto LABEL_58;
      }
      if (v18 < v66)
      {
LABEL_58:
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v19 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v20 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v74 = 0;
      int v70 = 0;
      uint64_t v21 = *a3;
      uint64_t v22 = *a3[1];
      uint64_t v23 = v21[37];
      uint64_t v69 = v21[36];
      while (2)
      {
        uint64_t v24 = *(unsigned int *)(v22 + 4 * *v20);
        uint64_t v25 = v23 + (*((_DWORD *)v21 + 70) - v23 + v69);
        int v26 = (unsigned __int16 *)(v25 - v24 - *(int *)(v25 - v24));
        long long v73 = v20;
        uint64_t v71 = *v20;
        if (*v26 >= 5u && (uint64_t v27 = v26[2]) != 0)
        {
          uint64_t v28 = (unsigned int *)(v25 - v24 + v27);
          uint64_t v29 = *v28;
          size_t v30 = (char *)v28 + v29 + 4;
          size_t v31 = *(unsigned int *)((char *)v28 + v29);
        }
        else
        {
          size_t v30 = 0;
          size_t v31 = 0;
        }
        uint64_t v32 = *v19;
        uint64_t v33 = (int *)(v25 - *(unsigned int *)(v22 + 4 * *v19));
        int v34 = (unsigned __int16 *)((char *)v33 - *v33);
        if (*v34 >= 5u && (uint64_t v35 = v34[2]) != 0)
        {
          unint64_t v36 = (unsigned int *)((char *)v33 + v35);
          uint64_t v37 = *v36;
          int v38 = (char *)v36 + v37 + 4;
          size_t v39 = *(unsigned int *)((char *)v36 + v37);
        }
        else
        {
          int v38 = 0;
          size_t v39 = 0;
        }
        if (v39 >= v31) {
          size_t v40 = v31;
        }
        else {
          size_t v40 = v39;
        }
        int v41 = memcmp(v30, v38, v40);
        if (v41)
        {
          if ((v41 & 0x80000000) == 0) {
            goto LABEL_43;
          }
        }
        else if (v31 >= v39)
        {
          goto LABEL_43;
        }
        uint64_t v42 = -v24;
        uint64_t v43 = v74;
        while (2)
        {
          *(uint64_t *)((char *)a1 + v43 + 24) = v32;
          if (v43 == -16)
          {
            unint64_t v44 = a1;
            goto LABEL_42;
          }
          unint64_t v44 = v19;
          uint64_t v45 = v23 + (v69 - v23 + *((_DWORD *)v21 + 70));
          int v46 = (unsigned __int16 *)(v45 + v42 - *(int *)(v45 + v42));
          if (*v46 >= 5u && (uint64_t v47 = v46[2]) != 0)
          {
            unint64_t v48 = (unsigned int *)(v45 + v42 + v47);
            uint64_t v49 = *v48;
            size_t v50 = (char *)v48 + v49 + 4;
            size_t v51 = *(unsigned int *)((char *)v48 + v49);
          }
          else
          {
            size_t v50 = 0;
            size_t v51 = 0;
          }
          uint64_t v32 = *(uint64_t *)((char *)a1 + v43 + 8);
          uint64_t v52 = (int *)(v45 - *(unsigned int *)(v22 + 4 * v32));
          uint64_t v53 = (unsigned __int16 *)((char *)v52 - *v52);
          if (*v53 >= 5u && (uint64_t v54 = v53[2]) != 0)
          {
            int v55 = (unsigned int *)((char *)v52 + v54);
            uint64_t v56 = *v55;
            uint64_t v57 = (char *)v55 + v56 + 4;
            size_t v58 = *(unsigned int *)((char *)v55 + v56);
          }
          else
          {
            uint64_t v57 = 0;
            size_t v58 = 0;
          }
          if (v58 >= v51) {
            size_t v59 = v51;
          }
          else {
            size_t v59 = v58;
          }
          int v60 = memcmp(v50, v57, v59);
          if (v60) {
            goto LABEL_38;
          }
          if (v51 < v58)
          {
            int v60 = -1;
LABEL_38:
            uint64_t v19 = v44 - 1;
            v43 -= 8;
            if ((v60 & 0x80000000) == 0) {
              goto LABEL_42;
            }
            continue;
          }
          break;
        }
        unint64_t v44 = (uint64_t *)((char *)a1 + v43 + 16);
LABEL_42:
        *unint64_t v44 = v71;
        if (++v70 != 8)
        {
LABEL_43:
          uint64_t v19 = v73;
          v74 += 8;
          uint64_t v20 = v73 + 1;
          if (v73 + 1 == a2) {
            return 1;
          }
          continue;
        }
        return v73 + 1 == a2;
      }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void **a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a2, a3, a5);
  uint64_t v8 = *a4;
  uint64_t v9 = *a3;
  uint64_t v10 = *a5;
  uint64_t v11 = *a5[1];
  uint64_t v13 = v10[36];
  uint64_t v12 = v10[37];
  uint64_t v14 = v12 + (*((_DWORD *)v10 + 70) - v12 + v13);
  uint64_t v15 = (int *)(v14 - *(unsigned int *)(v11 + 4 * *a4));
  uint64_t v16 = (int *)(v14 - *(unsigned int *)(v11 + 4 * *a3));
  unint64_t v17 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v17 >= 5u && (uint64_t v18 = v17[2]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)v15 + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = (char *)v19 + v20 + 4;
    size_t v22 = *(unsigned int *)((char *)v19 + v20);
  }
  else
  {
    uint64_t v21 = 0;
    size_t v22 = 0;
  }
  uint64_t v23 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v23 >= 5u && (uint64_t v24 = v23[2]) != 0)
  {
    uint64_t v25 = (unsigned int *)((char *)v16 + v24);
    uint64_t v26 = *v25;
    uint64_t v27 = (char *)v25 + v26 + 4;
    size_t v28 = *(unsigned int *)((char *)v25 + v26);
  }
  else
  {
    uint64_t v27 = 0;
    size_t v28 = 0;
  }
  if (v28 >= v22) {
    size_t v29 = v22;
  }
  else {
    size_t v29 = v28;
  }
  uint64_t result = memcmp(v21, v27, v29);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v22 >= v28)
  {
    return result;
  }
  *a3 = v8;
  *a4 = v9;
  uint64_t v31 = *a3;
  uint64_t v32 = *a2;
  uint64_t v33 = v12 + (v13 - v12 + *((_DWORD *)v10 + 70));
  int v34 = (int *)(v33 - *(unsigned int *)(v11 + 4 * *a3));
  uint64_t v35 = (int *)(v33 - *(unsigned int *)(v11 + 4 * *a2));
  unint64_t v36 = (unsigned __int16 *)((char *)v34 - *v34);
  if (*v36 >= 5u && (uint64_t v37 = v36[2]) != 0)
  {
    int v38 = (unsigned int *)((char *)v34 + v37);
    uint64_t v39 = *v38;
    size_t v40 = (char *)v38 + v39 + 4;
    size_t v41 = *(unsigned int *)((char *)v38 + v39);
  }
  else
  {
    size_t v40 = 0;
    size_t v41 = 0;
  }
  uint64_t v42 = (unsigned __int16 *)((char *)v35 - *v35);
  if (*v42 >= 5u && (uint64_t v43 = v42[2]) != 0)
  {
    unint64_t v44 = (unsigned int *)((char *)v35 + v43);
    uint64_t v45 = *v44;
    int v46 = (char *)v44 + v45 + 4;
    size_t v47 = *(unsigned int *)((char *)v44 + v45);
  }
  else
  {
    int v46 = 0;
    size_t v47 = 0;
  }
  if (v47 >= v41) {
    size_t v48 = v41;
  }
  else {
    size_t v48 = v47;
  }
  uint64_t result = memcmp(v40, v46, v48);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v41 >= v47)
  {
    return result;
  }
  *a2 = v31;
  *a3 = v32;
  uint64_t v49 = *a2;
  uint64_t v50 = *a1;
  uint64_t v51 = v12 + (v13 - v12 + *((_DWORD *)v10 + 70));
  uint64_t v52 = (int *)(v51 - *(unsigned int *)(v11 + 4 * *a2));
  uint64_t v53 = (int *)(v51 - *(unsigned int *)(v11 + 4 * *a1));
  uint64_t v54 = (unsigned __int16 *)((char *)v52 - *v52);
  if (*v54 >= 5u && (uint64_t v55 = v54[2]) != 0)
  {
    uint64_t v56 = (unsigned int *)((char *)v52 + v55);
    uint64_t v57 = *v56;
    size_t v58 = (char *)v56 + v57 + 4;
    size_t v59 = *(unsigned int *)((char *)v56 + v57);
  }
  else
  {
    size_t v58 = 0;
    size_t v59 = 0;
  }
  int v60 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v60 >= 5u && (uint64_t v61 = v60[2]) != 0)
  {
    uint64_t v62 = (unsigned int *)((char *)v53 + v61);
    uint64_t v63 = *v62;
    uint64_t v64 = (char *)v62 + v63 + 4;
    size_t v65 = *(unsigned int *)((char *)v62 + v63);
  }
  else
  {
    uint64_t v64 = 0;
    size_t v65 = 0;
  }
  if (v65 >= v59) {
    size_t v66 = v59;
  }
  else {
    size_t v66 = v65;
  }
  uint64_t result = memcmp(v58, v64, v66);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v59 >= v65)
  {
    return result;
  }
  *a1 = v49;
  *a2 = v50;
  return result;
}

void MTLPipelineLibrarySerializer::PipelineLibrarySerializerInterface::createMetalScriptSerializer()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18281508C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x18530C140](v2, 0x10B1C402A263007);
  _Unwind_Resume(a1);
}

uint64_t MetalScriptSerializer::MetalScriptSerializer(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)a1 = &unk_1ECAC5D58;
  *(unsigned char *)(a1 + 8) = a2;
  std::__function::__value_func<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::__value_func[abi:ne180100](a1 + 16, a3);
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1828D6640;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 1;
  *(_WORD *)(a1 + 128) = 256;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = xmmword_1828E2A40;
  *(void *)(a1 + 416) = 0x20000000;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  return a1;
}

MTLMetalScriptSerializer *MetalScriptSerializer::addLibrary(MetalScriptSerializer *this, flatbuffers::FlatBufferBuilder **a2)
{
  uint64_t v4 = (MTLMetalScriptSerializer *)*((void *)this + 50);
  *((void *)this + 50) = (char *)v4 + 1;
  unint64_t v5 = (MetalScriptSerializer *)((char *)this + 48);
  MTLMetalScriptSerializer::makeNumberString(v4, (uint64_t)__p);
  int v7 = MTLMetalScriptSerializer::addString(v5, (const char *)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  int v8 = MTLMetalScriptSerializer::addString(v5, a2[1], v6);
  *((unsigned char *)this + 118) = 1;
  int v9 = *((_DWORD *)this + 20) - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v5, 4, v7);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v5, 6, v8);
  int v10 = flatbuffers::FlatBufferBuilder::EndTable(v5, v9);
  int v11 = v10;
  unint64_t v12 = *((void *)this + 20);
  uint64_t v13 = (char *)*((void *)this + 19);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = (char *)*((void *)this + 18);
    uint64_t v16 = (v13 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = v12 - (void)v15;
    unint64_t v18 = (uint64_t)(v12 - (void)v15) >> 1;
    if (v18 <= v16 + 1) {
      unint64_t v18 = v16 + 1;
    }
    if (v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 160, v19);
      uint64_t v15 = (char *)*((void *)this + 18);
      uint64_t v13 = (char *)*((void *)this + 19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[4 * v16];
    size_t v22 = &v20[4 * v19];
    *(_DWORD *)uint64_t v21 = v11;
    uint64_t v14 = v21 + 4;
    while (v13 != v15)
    {
      int v23 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v21 - 1) = v23;
      v21 -= 4;
    }
    *((void *)this + 18) = v21;
    *((void *)this + 19) = v14;
    *((void *)this + 20) = v22;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v13 = v10;
    uint64_t v14 = v13 + 4;
  }
  *((void *)this + 19) = v14;
  return v4;
}

void sub_18281532C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MetalScriptSerializer::addSpecializedFunction(uint64_t a1, int *a2)
{
  uint64_t v4 = (void **)(a2 + 2);
  MetalScriptSerializer::makeFunctionString((MetalScriptSerializer *)*a2, *((void **)a2 + 1), &__p);
  int v5 = MTLMetalScriptSerializer::addString((flatbuffers::FlatBufferBuilder *)(a1 + 48), (const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = *(MTLMetalScriptSerializer **)(a1 + 408);
  *(void *)(a1 + 408) = (char *)v6 + 1;
  MTLMetalScriptSerializer::makeNumberString(v6, (uint64_t)&__p);
  int v8 = MTLMetalScriptSerializer::addString((flatbuffers::FlatBufferBuilder *)(a1 + 48), (const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v10 = (flatbuffers::FlatBufferBuilder **)(a2 + 10);
  int v9 = (void *)*((void *)a2 + 5);
  size_t v65 = v4;
  if (v9 && ([v9 isEqualToString:*v4] & 1) == 0)
  {
    int v11 = MTLMetalScriptSerializer::addString((MTLMetalScriptSerializer *)(a1 + 48), *v10, (NSString *)&v7->super.super.isa);
    int v64 = 1;
  }
  else
  {
    int v64 = 0;
    int v11 = 0;
  }
  unint64_t v12 = a2;
  int v13 = MTLMetalScriptSerializer::addFunctionConstants((MTLMetalScriptSerializer *)(a1 + 48), *((flatbuffers::FlatBufferBuilder **)a2 + 4), v7);
  *(unsigned char *)(a1 + 118) = 1;
  int v14 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 48), 4, v8);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 48), 6, v5);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 48), 8, v11);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 48), 12, v13);
  int v15 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 48), v14);
  int v16 = v15;
  unint64_t v17 = *(void *)(a1 + 184);
  unint64_t v18 = *(char **)(a1 + 176);
  if ((unint64_t)v18 >= v17)
  {
    uint64_t v20 = *(char **)(a1 + 168);
    uint64_t v21 = (v18 - v20) >> 2;
    if ((unint64_t)(v21 + 1) >> 62) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v22 = v17 - (void)v20;
    unint64_t v23 = (uint64_t)(v17 - (void)v20) >> 1;
    if (v23 <= v21 + 1) {
      unint64_t v23 = v21 + 1;
    }
    if (v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24)
    {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 184, v24);
      uint64_t v20 = *(char **)(a1 + 168);
      unint64_t v18 = *(char **)(a1 + 176);
    }
    else
    {
      uint64_t v25 = 0;
    }
    char v26 = &v25[4 * v21];
    uint64_t v27 = &v25[4 * v24];
    *(_DWORD *)char v26 = v16;
    unint64_t v19 = v26 + 4;
    while (v18 != v20)
    {
      int v28 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v26 - 1) = v28;
      v26 -= 4;
    }
    *(void *)(a1 + 168) = v26;
    *(void *)(a1 + 176) = v19;
    *(void *)(a1 + 184) = v27;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v18 = v15;
    unint64_t v19 = v18 + 4;
  }
  *(void *)(a1 + 176) = v19;
  if (v12[14])
  {
    if (v64) {
      size_t v29 = (void **)v10;
    }
    else {
      size_t v29 = v65;
    }
    MetalScriptSerializer::makeFunctionString(v6, *v29, &__p);
    int v30 = MTLMetalScriptSerializer::addString((flatbuffers::FlatBufferBuilder *)(a1 + 48), (const char *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v31 = *((void *)v12 + 8);
    if (v31 == 6)
    {
      *(unsigned char *)(a1 + 118) = 1;
      int v38 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
      flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 48), 6, v30);
      int v39 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 48), v38);
      int v40 = v39;
      size_t v41 = *(char **)(a1 + 296);
      unint64_t v42 = *(void *)(a1 + 304);
      if ((unint64_t)v41 >= v42)
      {
        uint64_t v50 = *(char **)(a1 + 288);
        uint64_t v51 = (v41 - v50) >> 2;
        if ((unint64_t)(v51 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v52 = v42 - (void)v50;
        unint64_t v53 = (uint64_t)(v42 - (void)v50) >> 1;
        if (v53 <= v51 + 1) {
          unint64_t v53 = v51 + 1;
        }
        if (v52 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54)
        {
          uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 304, v54);
          uint64_t v50 = *(char **)(a1 + 288);
          size_t v41 = *(char **)(a1 + 296);
        }
        else
        {
          uint64_t v55 = 0;
        }
        size_t v59 = &v55[4 * v51];
        int v60 = &v55[4 * v54];
        *(_DWORD *)size_t v59 = v40;
        uint64_t v43 = v59 + 4;
        while (v41 != v50)
        {
          int v61 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v59 - 1) = v61;
          v59 -= 4;
        }
        *(void *)(a1 + 288) = v59;
        *(void *)(a1 + 296) = v43;
        *(void *)(a1 + 304) = v60;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(_DWORD *)size_t v41 = v39;
        uint64_t v43 = v41 + 4;
      }
      *(void *)(a1 + 296) = v43;
    }
    else if (v31 == 5)
    {
      *(unsigned char *)(a1 + 118) = 1;
      int v32 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
      flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)(a1 + 48), 6, v30);
      int v33 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 48), v32);
      int v34 = v33;
      uint64_t v35 = *(char **)(a1 + 272);
      unint64_t v36 = *(void *)(a1 + 280);
      if ((unint64_t)v35 >= v36)
      {
        unint64_t v44 = *(char **)(a1 + 264);
        uint64_t v45 = (v35 - v44) >> 2;
        if ((unint64_t)(v45 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v46 = v36 - (void)v44;
        unint64_t v47 = (uint64_t)(v36 - (void)v44) >> 1;
        if (v47 <= v45 + 1) {
          unint64_t v47 = v45 + 1;
        }
        if (v46 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48)
        {
          uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 280, v48);
          unint64_t v44 = *(char **)(a1 + 264);
          uint64_t v35 = *(char **)(a1 + 272);
        }
        else
        {
          uint64_t v49 = 0;
        }
        uint64_t v56 = &v49[4 * v45];
        uint64_t v57 = &v49[4 * v48];
        *(_DWORD *)uint64_t v56 = v34;
        uint64_t v37 = v56 + 4;
        while (v35 != v44)
        {
          int v58 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *((_DWORD *)v56 - 1) = v58;
          v56 -= 4;
        }
        *(void *)(a1 + 264) = v56;
        *(void *)(a1 + 272) = v37;
        *(void *)(a1 + 280) = v57;
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v35 = v33;
        uint64_t v37 = v35 + 4;
      }
      *(void *)(a1 + 272) = v37;
    }
  }
  else if (v64)
  {
    size_t v29 = (void **)v10;
  }
  else
  {
    size_t v29 = v65;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[*((id *)v12 + 6) cStringUsingEncoding:4]);
  uint64_t v62 = *v29;
  p_p = &__p;
  uint64_t v63 = std::__hash_table<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 360, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  *((void *)v63 + 5) = v6;
  *((void *)v63 + 6) = v62;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_182815818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MetalScriptSerializer::addBinaryFunction(uint64_t a1, void **a2)
{
  uint64_t v4 = (flatbuffers::FlatBufferBuilder *)(a1 + 48);
  MetalScriptSerializer::makeFunctionString((MetalScriptSerializer *)*(int *)a2, a2[1], &__p);
  int v5 = MTLMetalScriptSerializer::addString(v4, (const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = a2[3];
  if (v6 == (void *)6)
  {
    *(unsigned char *)(a1 + 118) = 1;
    int v13 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
    flatbuffers::FlatBufferBuilder::AddOffset<void>(v4, 6, v5);
    int v14 = flatbuffers::FlatBufferBuilder::EndTable(v4, v13);
    int v15 = v14;
    int v16 = *(char **)(a1 + 296);
    unint64_t v17 = *(void *)(a1 + 304);
    if ((unint64_t)v16 >= v17)
    {
      uint64_t v25 = *(char **)(a1 + 288);
      uint64_t v26 = (v16 - v25) >> 2;
      if ((unint64_t)(v26 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v27 = v17 - (void)v25;
      unint64_t v28 = (uint64_t)(v17 - (void)v25) >> 1;
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      if (v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29)
      {
        int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 304, v29);
        uint64_t v25 = *(char **)(a1 + 288);
        int v16 = *(char **)(a1 + 296);
      }
      else
      {
        int v30 = 0;
      }
      int v34 = &v30[4 * v26];
      uint64_t v35 = &v30[4 * v29];
      *(_DWORD *)int v34 = v15;
      unint64_t v18 = v34 + 4;
      while (v16 != v25)
      {
        int v36 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      *(void *)(a1 + 288) = v34;
      *(void *)(a1 + 296) = v18;
      *(void *)(a1 + 304) = v35;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(_DWORD *)int v16 = v14;
      unint64_t v18 = v16 + 4;
    }
    *(void *)(a1 + 296) = v18;
  }
  else if (v6 == (void *)5)
  {
    *(unsigned char *)(a1 + 118) = 1;
    int v7 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
    flatbuffers::FlatBufferBuilder::AddOffset<void>(v4, 6, v5);
    int v8 = flatbuffers::FlatBufferBuilder::EndTable(v4, v7);
    int v9 = v8;
    int v10 = *(char **)(a1 + 272);
    unint64_t v11 = *(void *)(a1 + 280);
    if ((unint64_t)v10 >= v11)
    {
      unint64_t v19 = *(char **)(a1 + 264);
      uint64_t v20 = (v10 - v19) >> 2;
      if ((unint64_t)(v20 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v21 = v11 - (void)v19;
      unint64_t v22 = (uint64_t)(v11 - (void)v19) >> 1;
      if (v22 <= v20 + 1) {
        unint64_t v22 = v20 + 1;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23)
      {
        unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 280, v23);
        unint64_t v19 = *(char **)(a1 + 264);
        int v10 = *(char **)(a1 + 272);
      }
      else
      {
        unint64_t v24 = 0;
      }
      uint64_t v31 = &v24[4 * v20];
      int v32 = &v24[4 * v23];
      *(_DWORD *)uint64_t v31 = v9;
      unint64_t v12 = v31 + 4;
      while (v10 != v19)
      {
        int v33 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v31 - 1) = v33;
        v31 -= 4;
      }
      *(void *)(a1 + 264) = v31;
      *(void *)(a1 + 272) = v12;
      *(void *)(a1 + 280) = v32;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)int v10 = v8;
      unint64_t v12 = v10 + 4;
    }
    *(void *)(a1 + 272) = v12;
  }
}

void sub_182815A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MetalScriptSerializer::addComputePipelineDescriptor(MetalScriptSerializer *this, id *a2)
{
}

void sub_182815D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MetalScriptSerializer::addRenderPipelineDescriptor(MetalScriptSerializer *this, id *a2)
{
}

void sub_182816040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MetalScriptSerializer::nextStitchedLibraryIndex(MetalScriptSerializer *this)
{
  uint64_t v1 = *((void *)this + 52);
  *((void *)this + 52) = v1 + 1;
  return v1;
}

void MetalScriptSerializer::addStitchedLibrary(MetalScriptSerializer *this, MTLStitchedLibraryDescriptor *a2, MTLMetalScriptSerializer *a3)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  MTLMetalScriptSerializer::makeNumberString(a3, (uint64_t)__p);
  v21[0] = &unk_1ECAC4418;
  v21[1] = this;
  v21[3] = v21;
  int v5 = MTLMetalScriptSerializer::buildStitchingGraphFromDescriptor((uint64_t)this + 48, (uint64_t)__p, a2, (uint64_t)v21);
  int v6 = v5;
  int v7 = (char *)*((void *)this + 40);
  unint64_t v8 = *((void *)this + 41);
  if ((unint64_t)v7 >= v8)
  {
    int v10 = (char *)*((void *)this + 39);
    uint64_t v11 = (v7 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v8 - (void)v10;
    unint64_t v13 = (uint64_t)(v8 - (void)v10) >> 1;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 328, v14);
      int v10 = (char *)*((void *)this + 39);
      int v7 = (char *)*((void *)this + 40);
    }
    else
    {
      int v15 = 0;
    }
    int v16 = &v15[4 * v11];
    unint64_t v17 = &v15[4 * v14];
    *(_DWORD *)int v16 = v6;
    int v9 = v16 + 4;
    while (v7 != v10)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *((void *)this + 39) = v16;
    *((void *)this + 40) = v9;
    *((void *)this + 41) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)int v7 = v5;
    int v9 = v7 + 4;
  }
  *((void *)this + 40) = v9;
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100](v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1828161E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void MetalScriptSerializer::addTileRenderPipelineDescriptor(uint64_t a1, uint64_t a2)
{
}

void sub_182816490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MetalScriptSerializer::addMeshRenderPipelineDescriptor(MetalScriptSerializer *this, id *a2)
{
}

void sub_1828167E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MetalScriptSerializer::finalize(MetalScriptSerializer *this)
{
  uint64_t v2 = (MetalScriptSerializer *)((char *)this + 48);
  uint64_t v3 = *((void *)this + 19) - *((void *)this + 18);
  if (v3) {
    uint64_t v4 = (void *)*((void *)this + 18);
  }
  else {
    uint64_t v4 = &flatbuffers::data<flatbuffers::Offset<Mtl::PathLibrary>,std::allocator<flatbuffers::Offset<Mtl::PathLibrary>>>(std::vector<flatbuffers::Offset<Mtl::PathLibrary>> const&)::t;
  }
  int v51 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((MetalScriptSerializer *)((char *)this + 48), (uint64_t)v4, v3 >> 2);
  uint64_t v5 = *((void *)this + 40) - *((void *)this + 39);
  if (v5) {
    int v6 = (void *)*((void *)this + 39);
  }
  else {
    int v6 = &flatbuffers::data<flatbuffers::Offset<Mtl::StitchedLibrary>,std::allocator<flatbuffers::Offset<Mtl::StitchedLibrary>>>(std::vector<flatbuffers::Offset<Mtl::StitchedLibrary>> const&)::t;
  }
  int v52 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v6, v5 >> 2);
  uint64_t v7 = *((void *)this + 22) - *((void *)this + 21);
  if (v7) {
    unint64_t v8 = (void *)*((void *)this + 21);
  }
  else {
    unint64_t v8 = &flatbuffers::data<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>,std::allocator<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>>(std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>> const&)::t;
  }
  int v9 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v8, v7 >> 2);
  uint64_t v10 = *((void *)this + 25) - *((void *)this + 24);
  if (v10) {
    uint64_t v11 = (void *)*((void *)this + 24);
  }
  else {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>> const&)::t;
  }
  int v50 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v11, v10 >> 2);
  uint64_t v12 = *((void *)this + 28) - *((void *)this + 27);
  if (v12) {
    unint64_t v13 = (void *)*((void *)this + 27);
  }
  else {
    unint64_t v13 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>> const&)::t;
  }
  int v14 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v13, v12 >> 2);
  uint64_t v15 = *((void *)this + 43) - *((void *)this + 42);
  if (v15) {
    int v16 = (void *)*((void *)this + 42);
  }
  else {
    int v16 = &flatbuffers::data<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>> const&)::t;
  }
  int v17 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v16, v15 >> 2);
  uint64_t v18 = *((void *)this + 31) - *((void *)this + 30);
  if (v18) {
    unint64_t v19 = (void *)*((void *)this + 30);
  }
  else {
    unint64_t v19 = &flatbuffers::data<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>> const&)::t;
  }
  int v20 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v19, v18 >> 2);
  uint64_t v21 = *((void *)this + 34) - *((void *)this + 33);
  if (v21) {
    unint64_t v22 = (void *)*((void *)this + 33);
  }
  else {
    unint64_t v22 = &flatbuffers::data<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>> const&)::t;
  }
  int v49 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v22, v21 >> 2);
  uint64_t v23 = *((void *)this + 37) - *((void *)this + 36);
  if (v23) {
    unint64_t v24 = (void *)*((void *)this + 36);
  }
  else {
    unint64_t v24 = &flatbuffers::data<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>,std::allocator<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>> const&)::t;
  }
  int v25 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v24, v23 >> 2);
  int v26 = *((_DWORD *)this + 20);
  *((unsigned char *)this + 118) = 1;
  int v27 = v26 - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 4, v51);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 6, v9);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 8, v52);
  int v28 = flatbuffers::FlatBufferBuilder::EndTable(v2, v27);
  *((unsigned char *)this + 118) = 1;
  int v29 = *((_DWORD *)this + 20) - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 4, v50);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 6, v14);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 10, v17);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 8, v20);
  int v30 = flatbuffers::FlatBufferBuilder::EndTable(v2, v29);
  *((unsigned char *)this + 118) = 1;
  int v31 = *((_DWORD *)this + 20) - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 6, v49);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 4, v25);
  int v32 = flatbuffers::FlatBufferBuilder::EndTable(v2, v31);
  uint64_t v69 = 0x300000000;
  int v70 = 0;
  *((unsigned char *)this + 118) = 1;
  int v33 = *((_DWORD *)this + 20) - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(v2, 4, &v69);
  unsigned int v34 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v2, 2);
  flatbuffers::FlatBufferBuilder::TrackField(v2, 6, v34);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 12, v28);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 14, v30);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(v2, 16, v32);
  int v35 = flatbuffers::FlatBufferBuilder::EndTable(v2, v33);
  flatbuffers::FlatBufferBuilder::Finish(v2, v35, "MTLP", 0);
  uint64_t v57 = 0;
  int v58 = &v57;
  uint64_t v59 = 0x6012000000;
  int v60 = __Block_byref_object_copy__2;
  int v61 = __Block_byref_object_dispose__2;
  uint64_t v62 = &unk_1828FE28A;
  int v36 = *((unsigned __int8 *)this + 56);
  uint64_t v38 = *((void *)this + 10);
  uint64_t v37 = *((void *)this + 11);
  uint64_t v39 = *((void *)this + 12);
  uint64_t v63 = *((void *)this + 6);
  char v64 = v36;
  uint64_t v65 = v37;
  uint64_t v66 = v38;
  uint64_t v67 = v39;
  uint64_t v68 = (v38 + v37 - v39);
  if (v36)
  {
    *((void *)this + 6) = 0;
    *((unsigned char *)this + 56) = 0;
  }
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  if (*((unsigned char *)this + 8) && MEMORY[0x1E4FBA6C0])
  {
    flatbuffers::IDLOptions::IDLOptions((flatbuffers::IDLOptions *)v55);
    v55[1] = 1;
    uint64_t v56 = 256;
    flatbuffers::Parser::Parser((flatbuffers::Parser *)v54, (const flatbuffers::IDLOptions *)v55);
  }
  id v40 = objc_alloc(MEMORY[0x1E4F1C9B8]);
  uint64_t v41 = v58[10];
  uint64_t v42 = v58[11];
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 3221225472;
  v53[2] = ___ZN21MetalScriptSerializer8finalizeEv_block_invoke_2;
  v53[3] = &unk_1E5220390;
  void v53[4] = &v57;
  uint64_t v43 = [v40 initWithBytesNoCopy:v41 length:v42 deallocator:v53];
  for (uint64_t i = (uint64_t **)*((void *)this + 55); i; uint64_t i = (uint64_t **)*i)
  {
    dispatch_release((dispatch_object_t)*i[2]);
    uint64_t v45 = i[2];
    if (v45)
    {
      for (uint64_t j = 0; j != -9; j -= 3)
      {
        unint64_t v47 = (void *)v45[j + 22];
        if (v47)
        {
          v45[j + 23] = (uint64_t)v47;
          operator delete(v47);
        }
      }
      MEMORY[0x18530C140](v45, 0x10A0C403A971839);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear((void *)this + 53);
  _Block_object_dispose(&v57, 8);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v63);
  return v43;
}

void sub_182816E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  flatbuffers::Parser::~Parser((flatbuffers::Parser *)&a30);
  flatbuffers::IDLOptions::~IDLOptions((void **)&STACK[0x560]);
  _Block_object_dispose((const void *)(v31 - 200), 8);
  flatbuffers::DetachedBuffer::~DetachedBuffer(v30);
  _Unwind_Resume(a1);
}

void MetalScriptSerializer::~MetalScriptSerializer(MetalScriptSerializer *this)
{
  MetalScriptSerializer::~MetalScriptSerializer(this);

  JUMPOUT(0x18530C140);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(void *)this = &unk_1ECAC5D58;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 424);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 360);
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 39);
  if (v3)
  {
    *((void *)this + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 36);
  if (v4)
  {
    *((void *)this + 37) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 33);
  if (v5)
  {
    *((void *)this + 34) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 30);
  if (v6)
  {
    *((void *)this + 31) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 27);
  if (v7)
  {
    *((void *)this + 28) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 24);
  if (v8)
  {
    *((void *)this + 25) = v8;
    operator delete(v8);
  }
  int v9 = (void *)*((void *)this + 21);
  if (v9)
  {
    *((void *)this + 22) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 18);
  if (v10)
  {
    *((void *)this + 19) = v10;
    operator delete(v10);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((MetalScriptSerializer *)((char *)this + 48));
  std::__function::__value_func<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::~__value_func[abi:ne180100]((void *)this + 2);
}

void MetalScriptSerializer::makeFunctionString(MetalScriptSerializer *this@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  if (a2 && ![a2 isEqualToString:&stru_1ECAC84A8])
  {
    MTLMetalScriptSerializer::makeNumberString(this, (uint64_t)&v12);
    uint64_t v7 = std::string::insert(&v12, 0, "alias:");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    int v9 = std::string::append(&v13, "#");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v14, (const std::string::value_type *)[a2 cStringUsingEncoding:4]);
    *a3 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_182816FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::string v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1828172A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    _OWORD v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_182817354(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
}

void *std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC7208;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC7208;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  std::function<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::operator()(v4 + 16, *a2);
  MetalScriptSerializer::makeFunctionString(v4, v5, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

uint64_t std::function<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void MetalScriptSerializer::makeFunctionString(uint64_t a1@<X0>, _DWORD *a2@<X1>, std::string *a3@<X8>)
{
  unsigned int v7 = *a2;
  int v6 = (id *)(a2 + 2);
  uint64_t v5 = (MetalScriptSerializer *)v7;
  if ((v7 & 0x80000000) != 0)
  {
    long long v8 = (void *)(a1 + 360);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[*v6 cStringUsingEncoding:4]);
    unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v8, (unsigned __int8 *)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = (MetalScriptSerializer *)*((void *)v9 + 5);
    int v6 = (id *)(v9 + 48);
  }
  MetalScriptSerializer::makeFunctionString(v5, *v6, a3);
}

void sub_18281757C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
}

void *std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC71B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC71B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  std::function<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::operator()(v4 + 16, *a2);
  MetalScriptSerializer::makeFunctionString(v4, v5, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

void std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
}

void *std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC4418;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC4418;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  std::function<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::operator()(v4 + 16, *a2);
  MetalScriptSerializer::makeFunctionString(v4, v5, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

void std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
}

void *std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC72B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC72B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  std::function<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::operator()(v4 + 16, *a2);
  MetalScriptSerializer::makeFunctionString(v4, v5, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

void std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
}

void *std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ECAC7260;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ECAC7260;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  std::function<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::operator()(v4 + 16, *a2);
  MetalScriptSerializer::makeFunctionString(v4, v5, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

__n128 __Block_byref_object_copy__28(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

uint64_t ___ZN21MetalScriptSerializer8finalizeEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 8);
  if (*(char *)(v1 + 71) < 0)
  {
    **(unsigned char **)(v1 + 48) = 0;
    *(void *)(v1 + 56) = 0;
  }
  else
  {
    *(unsigned char *)(v1 + 48) = 0;
    *(unsigned char *)(v1 + 71) = 0;
  }
  return result;
}

void ___ZN21MetalScriptSerializer8finalizeEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = 0;
  char v2 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  flatbuffers::DetachedBuffer::operator=((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), (uint64_t)&v1);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v1);
}

void sub_182817AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *flatbuffers::DetachedBuffer::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    uint64_t v5 = a1 + 2;
    uint64_t v4 = a1[2];
    if (v4)
    {
      uint64_t v6 = *a1;
      if (*a1) {
        (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
      else {
        MEMORY[0x18530C120](v4, 0x1000C8077774924);
      }
    }
    if (*((unsigned char *)a1 + 8) && *a1) {
      (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
    }
    *a1 = 0;
    *((unsigned char *)a1 + 8) = 0;
    _OWORD *v5 = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + 8) = *(unsigned char *)(a2 + 8);
    a1[2] = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
    a1[5] = *(void *)(a2 + 40);
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }
  return a1;
}

uint64_t std::__function::__value_func<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    long long v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::~__value_func[abi:ne180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double MTLGetEnvDefaultDouble(const char *a1, double a2)
{
  long long v3 = getenv(a1);
  if (!v3) {
    return a2;
  }

  return strtod(v3, 0);
}

uint64_t _MTLHashForData@<X0>(NSObject *a1@<X0>, void *a2@<X8>)
{
  bzero(a2, 0x20uLL);
  CC_SHA256_Init(&c);
  if (a1)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    uint64_t v4 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &size_ptr);
    CC_SHA256_Update(&c, buffer_ptr, size_ptr);
    dispatch_release(v4);
  }
  return CC_SHA256_Final((unsigned __int8 *)a2, &c);
}

uint64_t MTLHashArray(void *a1, int a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1 && !a2) {
    return 3405691582;
  }
  uint64_t v5 = 3735928559;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v6 = [a1 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(a1);
        }
        unint64_t v11 = [*(id *)(*((void *)&v15 + 1) + 8 * i) hash];
        if (a3)
        {
          char v12 = v8 & 0x3F;
          unint64_t v13 = v11 << v8++;
          unint64_t v11 = (v11 >> (v12 ^ 0x3Fu)) | v13;
        }
        v5 ^= v11;
      }
      uint64_t v7 = [a1 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v7);
  }
  return v5;
}

uint64_t MTLCompareArray(void *a1, void *a2, char a3, char a4)
{
  if (a1 == a2) {
    return 1;
  }
  unint64_t v8 = [a1 count];
  if (v8 != [a2 count]) {
    return 0;
  }
  if (!v8)
  {
    if (a1) {
      BOOL v11 = a2 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    char v12 = !v11;
    if (a3) {
      return 1;
    }
    else {
      return v12;
    }
  }
  if (a4)
  {
    if (a2)
    {
      return [a1 isEqualToArray:a2];
    }
    return 0;
  }
  if (!(v8 >> 17))
  {
    unsigned __int8 v18 = 0;
    std::vector<BOOL>::vector(&__p, v8, &v18);
    uint64_t v13 = 0;
    BOOL v10 = 0;
    do
    {
      unint64_t v14 = 0;
      while (1)
      {
        if (objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v13), "isEqual:", objc_msgSend(a2, "objectAtIndexedSubscript:", v14)))
        {
          uint64_t v15 = *((void *)__p + (v14 >> 6));
          if ((v15 & (1 << v14)) == 0) {
            break;
          }
        }
        if (v8 == ++v14) {
          goto LABEL_29;
        }
      }
      *((void *)__p + (v14 >> 6)) = v15 | (1 << v14);
      BOOL v10 = v8 <= ++v13;
    }
    while (v13 != v8);
    BOOL v10 = 1;
LABEL_29:
    if (__p) {
      operator delete(__p);
    }
    return v10;
  }
  long long v16 = (void *)[MEMORY[0x1E4F28BD0] setWithArray:a1];
  uint64_t v17 = [MEMORY[0x1E4F28BD0] setWithArray:a2];

  return [v16 isEqualToSet:v17];
}

void sub_1828181E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

dispatch_data_t _MTLDispatchDataToNSData(dispatch_object_t object, size_t *a2)
{
  if (a2)
  {
    size_t v3 = a2[1];
    size_t v4 = *a2;
    return dispatch_data_create_subrange(object, v4, v3);
  }
  else
  {
    dispatch_retain(object);
    return object;
  }
}

uint64_t MTLCompareFunctionList(void *a1, void *a2)
{
  if (!a1)
  {
    int v4 = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    int v5 = 0;
    goto LABEL_6;
  }
  int v4 = [a1 isEmpty] ^ 1;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  int v5 = [a2 isEmpty] ^ 1;
LABEL_6:
  if (a1 == a2 || !(v4 | v5)) {
    return 1;
  }

  return [a1 isEqual:a2];
}

uint64_t MTLHashDictionary(void *a1)
{
  uint64_t v1 = (void *)[a1 allKeys];

  return MTLHashArray(v1, 1, 0);
}

uint64_t MTLCompareDictionary(void *a1, void *a2)
{
  if (a1 == a2 || ![a1 count] && !objc_msgSend(a2, "count")) {
    return 1;
  }

  return [a1 isEqualToDictionary:a2];
}

dispatch_data_t MTLNewLegacyReflectionData(NSObject *a1)
{
  return _MTLNewReflectionData(a1, 3u);
}

dispatch_object_t MTLNewReflectionBlock(dispatch_object_t object, dispatch_object_t a2, int a3)
{
  dispatch_object_t v5 = object;
  if (!object || a2)
  {
    if (object)
    {
      size_t v16 = 0;
      buffer_ptr = 0;
      subrange = dispatch_data_create_subrange(object, 0, 0x50uLL);
      uint64_t v7 = dispatch_data_create_map(subrange, (const void **)&buffer_ptr, &v16);
      unint64_t v8 = (size_t *)buffer_ptr;
      size_t v9 = *((void *)buffer_ptr + 5);
      if (v9) {
        BOOL v10 = dispatch_data_create_subrange(v5, *((void *)buffer_ptr + 4), v9);
      }
      else {
        BOOL v10 = 0;
      }
      size_t v13 = v8[7];
      if (v13) {
        BOOL v11 = dispatch_data_create_subrange(v5, v8[6], v13);
      }
      else {
        BOOL v11 = 0;
      }
      size_t v14 = v8[3];
      if (v14) {
        char v12 = dispatch_data_create_subrange(v5, v8[2], v14);
      }
      else {
        char v12 = 0;
      }
      dispatch_release(v7);
      dispatch_release(subrange);
    }
    else
    {
      BOOL v10 = 0;
      BOOL v11 = 0;
      char v12 = 0;
    }
    dispatch_retain(a2);
    switch(a3)
    {
      case 1:
        if (v12) {
          dispatch_release(v12);
        }
        char v12 = a2;
        break;
      case 4:
        if (v11) {
          dispatch_release(v11);
        }
        BOOL v11 = a2;
        break;
      case 2:
        if (v10) {
          dispatch_release(v10);
        }
        BOOL v10 = a2;
        break;
      default:
        dispatch_release(a2);
        break;
    }
    dispatch_object_t v5 = _MTLNewReflectionBlock(v12, v10, v11);
    if (v12) {
      dispatch_release(v12);
    }
    if (v10) {
      dispatch_release(v10);
    }
    if (v11) {
      dispatch_release(v11);
    }
  }
  else
  {
    dispatch_retain(object);
  }
  return v5;
}

uint64_t MTLNewAirntReflections(NSObject *a1, dispatch_data_t *a2, dispatch_data_t *a3)
{
  if (!a1) {
    return 0;
  }
  size_t v11 = 0;
  buffer_ptr = 0;
  uint64_t v6 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &v11);
  uint64_t v7 = buffer_ptr;
  if (*(void *)buffer_ptr == 0x8EF13C710 && (size_t v8 = *((void *)buffer_ptr + 5)) != 0 && *((void *)buffer_ptr + 7))
  {
    *a2 = dispatch_data_create_subrange(a1, *((void *)buffer_ptr + 4), v8);
    *a3 = dispatch_data_create_subrange(a1, v7[6], v7[7]);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  dispatch_release(v6);
  return v9;
}

double ___ZL16initTimebaseInfov_block_invoke()
{
  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  double result = (double)v0 / (double)v1;
  gMachTimeToNS = *(void *)&result;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  size_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  dispatch_object_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *double result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    double result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    size_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  dispatch_object_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    size_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

__CFString *MTLMutabilityString(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E52203C8[a1];
  }
}

__CFString *MTLRoundingModeString(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E52203B0[a1];
  }
}

uint64_t pipelineBufferFormattedDescription(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  size_t v3 = (unsigned char *)[a2 _descriptorPrivate];
  uint64_t v8 = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  uint64_t v9 = @"mutability =";
  uint64_t v4 = *v3 & 3;
  if (v4 == 3) {
    dispatch_object_t v5 = @"Unknown";
  }
  else {
    dispatch_object_t v5 = off_1E52203C8[v4];
  }
  BOOL v10 = v5;
  unint64_t v6 = (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:&v8 count:3];
  return objc_msgSend(v6, "componentsJoinedByString:", @" ", v8, v9);
}

uint64_t pipelineBufferDefaultFormattedDescription(uint64_t a1)
{
  _OWORD v2[3] = *MEMORY[0x1E4F143B8];
  v2[0] = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  v2[1] = @"mutability =";
  v2[2] = @"MTLMutabilityDefault";
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v2, 3), "componentsJoinedByString:", @" ");
}

uint64_t MTLPipelineBufferDescriptorDescription(void *a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = @"Mutability";
  uint64_t v1 = *(unsigned char *)[a1 _descriptorPrivate] & 3;
  if (v1 == 3) {
    unint64_t v2 = @"Unknown";
  }
  else {
    unint64_t v2 = off_1E52203C8[v1];
  }
  v5[0] = v2;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];
}

uint64_t MTLPipelineBufferDescriptorDefaultDescription()
{
  v2[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = @"Mutability";
  v2[0] = @"MTLMutabilityDefault";
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:&v1 count:1];
}

void std::vector<__CFString const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<__CFString const*>::__append((void **)a1, a2 - v2);
  }
}

uint64_t MTLGetBaseCachePath(void)
{
  if (MTLGetBaseCachePath(void)::onceToken != -1) {
    dispatch_once(&MTLGetBaseCachePath(void)::onceToken, &__block_literal_global_5);
  }
  return MTLGetBaseCachePath(void)::result;
}

void ___Z19MTLGetBaseCachePathv_block_invoke()
{
  unint64_t v3 = 0;
  BaseCacheFolder = getBaseCacheFolder(&v3);
  if (BaseCacheFolder)
  {
    uint64_t v1 = BaseCacheFolder;
    id v2 = [NSString alloc];
    MTLGetBaseCachePath(void)::double result = [v2 initWithBytesNoCopy:v1 length:v3 encoding:4 freeWhenDone:1];
    if (!MTLGetBaseCachePath(void)::result) {
      free(v1);
    }
  }
}

uint64_t MTLGetModulesCachePath()
{
  if (MTLGetModulesCachePath::onceToken != -1) {
    dispatch_once(&MTLGetModulesCachePath::onceToken, &__block_literal_global_6);
  }
  return MTLGetModulesCachePath::result;
}

uint64_t MTLGetGPUArchiverCachePath()
{
  if (MTLGetGPUArchiverCachePath::onceToken != -1) {
    dispatch_once(&MTLGetGPUArchiverCachePath::onceToken, &__block_literal_global_8_1);
  }
  return MTLGetGPUArchiverCachePath::result;
}

void __MTLGetGPUArchiverCachePath_block_invoke()
{
  unint64_t v3 = 0;
  GPUArchiverCacheMainFolder = getGPUArchiverCacheMainFolder(&v3);
  if (GPUArchiverCacheMainFolder)
  {
    uint64_t v1 = GPUArchiverCacheMainFolder;
    id v2 = [NSString alloc];
    MTLGetGPUArchiverCachePath::double result = [v2 initWithBytesNoCopy:v1 length:v3 encoding:4 freeWhenDone:1];
    if (!MTLGetGPUArchiverCachePath::result) {
      free(v1);
    }
  }
}

void setShaderCachePath(void *a1)
{
  uint64_t v1 = (const char *)[a1 UTF8String];

  setShaderCacheMainFolder(v1);
}

uint64_t MTLSetCompilerTestMode(uint64_t result)
{
  gCompilerTestMode = result;
  return result;
}

uint64_t indirectArgumentFormattedDescription(uint64_t a1, const MTLArgumentDescriptorPrivate *a2)
{
  v6[18] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  if (a2->constantBlockAlignment) {
    uint64_t v4 = (__CFString *)objc_msgSend(NSNumber, "numberWithUnsignedInteger:");
  }
  else {
    uint64_t v4 = @"default";
  }
  v6[0] = v3;
  v6[1] = @"dataType =";
  _OWORD v6[2] = MTLDataTypeString(a2->dataType);
  v6[3] = v3;
  void v6[4] = @"index =";
  v6[5] = [NSNumber numberWithUnsignedInteger:a2->index];
  void v6[6] = v3;
  v6[7] = @"arrayLength =";
  void v6[8] = [NSNumber numberWithUnsignedInteger:a2->arrayLength];
  v6[9] = v3;
  v6[10] = @"access =";
  v6[11] = argumentAccessNames(a2->access);
  v6[12] = v3;
  v6[13] = @"textureType =";
  v6[14] = MTLTextureTypeString(a2->textureType);
  v6[15] = v3;
  v6[16] = @"constantBlockAlignment =";
  v6[17] = v4;
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v6, 18), "componentsJoinedByString:", @" ");
}

uint64_t MTLOverrideDeviceCreationFlags(uint64_t result)
{
  _are_device_creation_flags_overrideuint64_t n = 1;
  _overriden_device_creation_std::basic_regex<_CharT, _Traits>::flag_type flags = result;
  return result;
}

uint64_t pipelineDumper(void)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v0 = MTLCopyAllDevices();
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t result = [(NSArray *)v0 countByEnumeratingWithState:&v5 objects:v9 count:16];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)v6;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v6 != v3) {
          objc_enumerationMutation(v0);
        }
        [*(id *)(*((void *)&v5 + 1) + 8 * v4++) dumpPipelineDescriptorsIfRequested];
      }
      while (v2 != v4);
      uint64_t result = [(NSArray *)v0 countByEnumeratingWithState:&v5 objects:v9 count:16];
      uint64_t v2 = result;
    }
    while (result);
  }
  return result;
}

void sub_18281B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18281BA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18281BC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18281BDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18281BEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void sub_18281C258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void _MTLCompilerWarningLog(NSError *a1)
{
  if (_MTLCompilerWarningLog(NSError *)::onceToken != -1) {
    dispatch_once(&_MTLCompilerWarningLog(NSError *)::onceToken, &__block_literal_global_1805);
  }
  uint64_t v2 = _MTLCompilerWarningLog(NSError *)::compilerWarningLogObject;
  if (os_log_type_enabled((os_log_t)_MTLCompilerWarningLog(NSError *)::compilerWarningLogObject, OS_LOG_TYPE_ERROR)) {
    _MTLCompilerWarningLog(a1, v2);
  }
}

void sub_18281C4DC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10B2C40A98EDE6CLL);
  _Unwind_Resume(a1);
}

void sub_18281C604(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10B2C40A98EDE6CLL);
  _Unwind_Resume(a1);
}

void sub_18281CF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18281D070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t errorMessageFromContext(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(v2, "addObject:", objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v7++), "string"));
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
  return [v2 componentsJoinedByString:@"\n"];
}

void sub_18281D3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_18281D644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_18281FD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18281FEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x18530C140](v15, 0x1020C40F38FB7CELL);
  _Unwind_Resume(a1);
}

uint64_t MTLResolveFileURL(NSURL *a1)
{
  if (!a1) {
    return 0;
  }
  if (![(NSURL *)a1 isFileURL]) {
    return 0;
  }
  uint64_t v2 = realpath_DARWIN_EXTSN([(NSURL *)a1 fileSystemRepresentation], 0);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  id v4 = objc_alloc(MEMORY[0x1E4F1CB10]);
  uint64_t v5 = objc_msgSend(v4, "initFileURLWithPath:", objc_msgSend(NSString, "stringWithUTF8String:", v3));
  free(v3);
  return v5;
}

void sub_1828200F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_182820238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x18530C140](v14, 0x1020C40F38FB7CELL);
  _Unwind_Resume(a1);
}

__CFString *_MTLGPUFamilyString(uint64_t a1)
{
  if (a1 > 2000)
  {
    if (a1 > 3002)
    {
      if (a1 > 4001)
      {
        if (a1 == 4002) {
          return @"MTLGPUFamilyMacCatalyst2";
        }
        if (a1 == 5001) {
          return @"MTLGPUFamilyMetal3";
        }
      }
      else
      {
        if (a1 == 3003) {
          return @"MTLGPUFamilyCommon3";
        }
        if (a1 == 4001) {
          return @"MTLGPUFamilyMacCatalyst1";
        }
      }
    }
    else
    {
      if (a1 > 3000)
      {
        if (a1 == 3001) {
          return @"MTLGPUFamilyCommon1";
        }
        else {
          return @"MTLGPUFamilyCommon2";
        }
      }
      if (a1 == 2001) {
        return @"MTLGPUFamilyMac1";
      }
      if (a1 == 2002) {
        return @"MTLGPUFamilyMac2";
      }
    }
    return @"Unknown";
  }
  uint64_t v1 = a1 - 1001;
  uint64_t result = @"MTLGPUFamilyApple1";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = @"MTLGPUFamilyApple2";
      break;
    case 2:
      uint64_t result = @"MTLGPUFamilyApple3";
      break;
    case 3:
      uint64_t result = @"MTLGPUFamilyApple4";
      break;
    case 4:
      uint64_t result = @"MTLGPUFamilyApple5";
      break;
    case 5:
      uint64_t result = @"MTLGPUFamilyApple6";
      break;
    case 6:
      uint64_t result = @"MTLGPUFamilyApple7";
      break;
    case 7:
      uint64_t result = @"MTLGPUFamilyApple8";
      break;
    case 8:
      goto LABEL_19;
    default:
      if (@"MTLGPUFamilyApple1" != (__CFString *)-1009) {
        return @"Unknown";
      }
LABEL_19:
      uint64_t result = @"MTLGPUFamilyApple9";
      break;
  }
  return result;
}

void MTLValidateFeatureSupport(id *a1, uint64_t a2, unint64_t a3)
{
  if (([a1[44] supportForFeature:a2] & 1) == 0)
  {
    uint64_t v6 = [a1[44] requirementForFeature:a2];
    if (v6)
    {
      uint64_t v11 = v6;
      if (([a1 supportsFamily:v6] & 1) == 0)
      {
        uint64_t v12 = [a1[44] nameForFeature:a2];
        _MTLGPUFamilyString(v11);
        MTLReportFailure(a3, "MTLValidateFeatureSupport", 7027, @"%@ is only supported on %@ and later.", v13, v14, v15, v16, v12);
      }
    }
    else
    {
      uint64_t v17 = [a1[44] nameForFeature:a2];
      MTLReportFailure(a3, "MTLValidateFeatureSupport", 7022, @"%@ is not supported on this device", v7, v8, v9, v10, v17);
    }
  }
}

void MTLValidateFeatureSupportWithContext(id *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = _MTLMessageTypeFromFailureType(a3);
  if (([a1[44] supportForFeature:a2] & 1) == 0)
  {
    uint64_t v8 = [a1[44] requirementForFeature:a2];
    if (v8)
    {
      uint64_t v14 = v8;
      if (([a1 supportsFamily:v8] & 1) == 0)
      {
        uint64_t v15 = [a1[44] nameForFeature:a2];
        _MTLGPUFamilyString(v14);
        _MTLMessageContextPush_(a4, v7, @"%@ is only supported on %@ and later.", v16, v17, v18, v19, v20, v15);
      }
    }
    else
    {
      uint64_t v21 = [a1[44] nameForFeature:a2];
      _MTLMessageContextPush_(a4, v7, @"%@ is not supported on this device", v9, v10, v11, v12, v13, v21);
    }
  }
}

uint64_t _MTLFeatureSetDictionary()
{
  if (_MTLFeatureSetDictionary::onceToken != -1) {
    dispatch_once(&_MTLFeatureSetDictionary::onceToken, &__block_literal_global_1532);
  }
  unint64_t v0 = (void *)_MTLFeatureSetDictionary::featureSetDictionary;

  return [v0 copy];
}

uint64_t _MTLSetCompileTimeStatisticsEnabled(uint64_t result)
{
  _collectCompilePerformanceStats = result;
  return result;
}

uint64_t logCompileTimeStatsMode(void)
{
  if (logCompileTimeStatsMode(void)::onceToken != -1) {
    dispatch_once(&logCompileTimeStatsMode(void)::onceToken, &__block_literal_global_1646);
  }
  return logCompileTimeStatsMode(void)::shouldLogStats;
}

void writeCompileTimeStatsJSONFile(void)
{
  uint64_t CompileStatsJSONPath = getCompileStatsJSONPath();
  if (CompileStatsJSONPath)
  {
    uint64_t v1 = CompileStatsJSONPath;
    if (getCompilePerformanceQueue(void)::onceToken != -1) {
      dispatch_once(&getCompilePerformanceQueue(void)::onceToken, &__block_literal_global_2151);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___Z29writeCompileTimeStatsJSONFilev_block_invoke;
    block[3] = &unk_1E521F9E8;
    block[4] = v1;
    dispatch_sync((dispatch_queue_t)getCompilePerformanceQueue(void)::_compilePerformanceStatsQueue, block);
  }
}

void ___Z29writeCompileTimeStatsJSONFilev_block_invoke(uint64_t a1)
{
  if (getCompilePerformanceDictionary(void)::onceToken != -1) {
    dispatch_once(&getCompilePerformanceDictionary(void)::onceToken, &__block_literal_global_2153);
  }
  uint64_t v2 = getCompilePerformanceDictionary(void)::_compilePerformanceStatistics;
  if (getCompilePerformanceDictionary(void)::_compilePerformanceStatistics)
  {
    id v14 = 0;
    uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F1CAA8]) initToFileAtPath:*(void *)(a1 + 32) append:0];
    if (!v7) {
      MTLReportFailure(0, "writeCompileTimeStatsJSONFile_block_invoke", 7342, @"Output stream for writing compile statistics could not be created", v3, v4, v5, v6, v13);
    }
    [v7 open];
    [MEMORY[0x1E4F28D90] writeJSONObject:v2 toStream:v7 options:1 error:&v14];
    if (v14)
    {
      uint64_t v8 = [v14 localizedDescription];
      MTLReportFailure(0, "writeCompileTimeStatsJSONFile_block_invoke", 7346, @"Failed to write compile statistics, error: %@", v9, v10, v11, v12, v8);
    }
    [v7 close];
  }
}

double getCompileTimeInMS(NSDictionary *a1, NSString *a2)
{
  id v2 = [(NSDictionary *)a1 objectForKey:a2];
  if (v2) {
    return (double)(unint64_t)[v2 unsignedLongLongValue] * 0.000001;
  }
  else {
    return 0.0;
  }
}

void logCompileTimeForPipeline(NSDictionary *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = [(NSDictionary *)a1 objectForKey:MTLCompileTimeStatisticsKeyFunctionName[0]];
  id v3 = [(NSDictionary *)a1 objectForKey:MTLCompileTimeStatisticsKeyTotal[0]];
  if (v3) {
    double v4 = (double)(unint64_t)[v3 unsignedLongLongValue] * 0.000001;
  }
  else {
    double v4 = 0.0;
  }
  char v5 = objc_msgSend(-[NSDictionary objectForKey:](a1, "objectForKey:", MTLCompileTimeStatisticsKeyCachedFunction[0]), "BOOLValue");
  if (v2 && v4 != 0.0 && (v5 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = [v2 UTF8String];
    __int16 v8 = 2048;
    double v9 = v4;
    _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Done compiling Metal function '%s': %f ms", (uint8_t *)&v6, 0x16u);
  }
}

void logCompileTimeForLibrary(NSDictionary *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v2 = [(NSDictionary *)a1 objectForKey:MTLLibraryPerformanceKeyFunctionNames];
  id v3 = [(NSDictionary *)a1 objectForKey:MTLLibraryPerformanceKeyTotalFrontendTotalTime];
  if (v3)
  {
    unint64_t v4 = [v3 unsignedLongLongValue];
    BOOL v5 = v2 != 0;
    if (v2)
    {
      double v6 = (double)v4 * 0.000001;
      if (v6 != 0.0)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          int v11 = 136315394;
          uint64_t v12 = objc_msgSend((id)objc_msgSend(v2, "description"), "UTF8String");
          __int16 v13 = 2048;
          double v14 = v6;
          _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Done compiling Metal library with functions '%s': %f ms", (uint8_t *)&v11, 0x16u);
        }
        BOOL v5 = 1;
      }
    }
  }
  else
  {
    BOOL v5 = v2 != 0;
  }
  id v7 = [(NSDictionary *)a1 objectForKey:MTLLibraryPerformanceKeyFunctionSpecialization];
  if (v7)
  {
    double v8 = (double)(unint64_t)[v7 unsignedLongLongValue] * 0.000001;
    BOOL v9 = v8 != 0.0 && v5;
    if (v9 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_msgSend((id)objc_msgSend(v2, "description"), "UTF8String");
      int v11 = 136315394;
      uint64_t v12 = v10;
      __int16 v13 = 2048;
      double v14 = v8;
      _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Done compiling Metal function specialization for '%s': %f ms", (uint8_t *)&v11, 0x16u);
    }
  }
}

uint64_t _MTLCompileTimeStatistics()
{
  if (getCompilePerformanceDictionary(void)::onceToken != -1) {
    dispatch_once(&getCompilePerformanceDictionary(void)::onceToken, &__block_literal_global_2153);
  }
  return getCompilePerformanceDictionary(void)::_compilePerformanceStatistics;
}

void writeCompileTimeStatistics(int a1, NSDictionary *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  writeCompileTimeStatsJSONFile();
  if (logCompileTimeStatsMode(void)::onceToken != -1) {
    dispatch_once(&logCompileTimeStatsMode(void)::onceToken, &__block_literal_global_1646);
  }
  if (logCompileTimeStatsMode(void)::shouldLogStats == 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      if (a1) {
        unint64_t v4 = "library";
      }
      else {
        unint64_t v4 = "pipeline";
      }
      int v8 = 136315394;
      BOOL v9 = v4;
      __int16 v10 = 2080;
      uint64_t v11 = objc_msgSend((id)-[NSDictionary debugDescription](a2, "debugDescription"), "UTF8String");
      _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Done compiling Metal %s, compile statistics: %s", (uint8_t *)&v8, 0x16u);
    }
  }
  else if (logCompileTimeStatsMode(void)::shouldLogStats == 1)
  {
    if (a1)
    {
      logCompileTimeForLibrary(a2);
    }
    else
    {
      BOOL v5 = [(NSDictionary *)a2 objectForKey:MTLPipelinePerformanceKeyVertexShader[0]];
      double v6 = v5;
      if (v5) {
        logCompileTimeForPipeline(v5);
      }
      id v7 = [(NSDictionary *)a2 objectForKey:MTLPipelinePerformanceKeyFragmentShader[0]];
      if (!v7 || (logCompileTimeForPipeline(v7), !v6))
      {
        logCompileTimeForPipeline(a2);
      }
    }
  }
}

void _MTLAddCompileLibraryPerformanceStatistics(NSDictionary *a1)
{
  if ((addCompileTimeDictionary(a1, (NSString *)MTLCompileTimeStatisticsKeyLibrariesFromSource) & 1) == 0)
  {
    BOOL v1 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v1) {
      _MTLAddCompileLibraryPerformanceStatistics_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

uint64_t addCompileTimeDictionary(NSDictionary *a1, NSString *a2)
{
  if (!a1) {
    return 0;
  }
  if (getCompilePerformanceDictionary(void)::onceToken != -1) {
    dispatch_once(&getCompilePerformanceDictionary(void)::onceToken, &__block_literal_global_2153);
  }
  uint64_t v4 = [(id)getCompilePerformanceDictionary(void)::_compilePerformanceStatistics objectForKey:a2];
  if (v4)
  {
    if (getCompilePerformanceQueue(void)::onceToken != -1) {
      dispatch_once(&getCompilePerformanceQueue(void)::onceToken, &__block_literal_global_2151);
    }
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    _OWORD v6[2] = ___ZL24addCompileTimeDictionaryP12NSDictionaryP8NSString_block_invoke;
    v6[3] = &unk_1E5220578;
    void v6[4] = v4;
    v6[5] = a1;
    dispatch_sync((dispatch_queue_t)getCompilePerformanceQueue(void)::_compilePerformanceStatsQueue, v6);
    uint64_t v4 = 1;
    writeCompileTimeStatistics(1, a1);
  }
  return v4;
}

void _MTLAddCompileDynamicLibraryPerformanceStatistics(NSDictionary *a1)
{
  if ((addCompileTimeDictionary(a1, (NSString *)MTLCompileTimeStatisticsKeyDynamicLibraries) & 1) == 0)
  {
    BOOL v1 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v1) {
      _MTLAddCompileDynamicLibraryPerformanceStatistics_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void _MTLAddCompileBinaryFunctionPerformanceStatistics(NSDictionary *a1)
{
  if ((addCompileTimeDictionary(a1, (NSString *)MTLCompileTimeStatisticsKeyBinaryFunctions) & 1) == 0)
  {
    BOOL v1 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v1) {
      _MTLAddCompileBinaryFunctionPerformanceStatistics_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void _MTLAddCompilePipelinePerformanceStatistics(NSDictionary *a1, uint64_t a2)
{
  if (a1)
  {
    if (getCompilePerformanceDictionary(void)::onceToken != -1) {
      dispatch_once(&getCompilePerformanceDictionary(void)::onceToken, &__block_literal_global_2153);
    }
    uint64_t v4 = objc_msgSend((id)objc_msgSend((id)getCompilePerformanceDictionary(void)::_compilePerformanceStatistics, "objectForKey:", MTLCompileTimeStatisticsKeyPipelines), "objectForKey:", a2);
    if (getCompilePerformanceQueue(void)::onceToken != -1) {
      dispatch_once(&getCompilePerformanceQueue(void)::onceToken, &__block_literal_global_2151);
    }
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    void v5[2] = ___MTLAddCompilePipelinePerformanceStatistics_block_invoke;
    _OWORD v5[3] = &unk_1E5220578;
    v5[4] = v4;
    v5[5] = a1;
    dispatch_sync((dispatch_queue_t)getCompilePerformanceQueue(void)::_compilePerformanceStatsQueue, v5);
    writeCompileTimeStatistics(0, a1);
  }
}

void MTLLibraryBuilder::~MTLLibraryBuilder(id *this)
{
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)(this + 1), this[2]);
}

os_log_t ___ZL22_MTLCompilerWarningLogP7NSError_block_invoke()
{
  os_log_t result = os_log_create("com.apple.Metal", "Metal Compiler Warning");
  _MTLCompilerWarningLog(NSError *)::compilerWarningLogObject = (uint64_t)result;
  return result;
}

char *___ZL23getCompileStatsJSONPathv_block_invoke()
{
  os_log_t result = getenv("MTL_WRITE_COMPILE_STATS_TO_JSON_FILE");
  if (result)
  {
    _collectCompilePerformanceStats = 1;
    os_log_t result = (char *)[[NSString alloc] initWithUTF8String:result];
    getCompileStatsJSONPath(void)::compileStatsPath = (uint64_t)result;
  }
  return result;
}

dispatch_queue_t ___ZL26getCompilePerformanceQueuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create(0, 0);
  getCompilePerformanceQueue(void)::_compilePerformanceStatsQueue = (uint64_t)result;
  return result;
}

void ___ZL31getCompilePerformanceDictionaryv_block_invoke()
{
  getCompilePerformanceDictionary(void)::_compilePerformanceStatistics = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v0 = MTLCompileTimeStatisticsKeyLibrariesFromSource;
  uint64_t v1 = MTLCompileTimeStatisticsKeyDynamicLibraries;
  uint64_t v2 = MTLCompileTimeStatisticsKeyBinaryFunctions;
  uint64_t v3 = operator new(0x18uLL);
  uint64_t v4 = 0;
  void *v3 = v0;
  v3[1] = v1;
  v3[2] = v2;
  do
    objc_msgSend((id)getCompilePerformanceDictionary(void)::_compilePerformanceStatistics, "setObject:forKey:", objc_msgSend(MEMORY[0x1E4F1CA48], "array"), v3[v4++]);
  while (v4 != 3);
  uint64_t v5 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
  [(id)getCompilePerformanceDictionary(void)::_compilePerformanceStatistics setObject:v5 forKey:MTLCompileTimeStatisticsKeyPipelines];
  uint64_t v6 = [MEMORY[0x1E4F1CA48] array];
  [v5 setObject:v6 forKey:MTLCompileTimeStatisticsKeyPipelinesCompute];
  uint64_t v7 = [MEMORY[0x1E4F1CA48] array];
  [v5 setObject:v7 forKey:MTLCompileTimeStatisticsKeyPipelinesRender];

  operator delete(v3);
}

void sub_182821874(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL24addCompileTimeDictionaryP12NSDictionaryP8NSString_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice initDefaultLogState]::$_0 &&>>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t result = [**(id **)v1 newLogStateWithDescriptor:*(void *)(**(void **)v1 + 360) error:*(void *)(v1 + 8)];
  *(void *)(**(void **)v1 + 584) = result;
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice initProgressTracking]::$_1 &&>>(id ****a1)
{
  uint64_t v1 = **a1;
  if (objc_msgSend((id)objc_msgSend(**v1, "name"), "containsString:", @"AMD"))
  {
    char v2 = 1;
  }
  else if (objc_msgSend((id)objc_msgSend(**v1, "name"), "containsString:", @"Intel"))
  {
    char v2 = [**v1 supportsFamily:2002] ^ 1;
  }
  else
  {
    char v2 = 0;
  }
  uint64_t v3 = *v1;
  *((unsigned char *)**v1 + 328) = v2;
  if (*((unsigned char *)*v3 + 328))
  {
    uint64_t v4 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.Metal"];
    if (!v4)
    {
      BOOL v5 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v5) {
        std::__call_once_proxy[abi:ne180100]<std::tuple<[(_MTLDevice *)v5 initProgressTracking];
      }
    }
    uint64_t v13 = [v4 URLForResource:@"MTLECBE" withExtension:@"metallib"];
    if (!v13)
    {
      BOOL v14 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v14) {
        std::__call_once_proxy[abi:ne180100]<std::tuple<[(_MTLDevice *)v14 initProgressTracking];
      }
    }
    uint64_t v26 = 0;
    size_t v22 = (void *)[**v1 newLibraryWithURL:v13 error:&v26];
    uint64_t v23 = objc_opt_new();
    unint64_t v24 = (void *)[v22 newFunctionWithName:@"progressTrackVertex"];
    [v23 setVertexFunction:v24];

    [v23 setRasterizationEnabled:0];
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v23, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", 13);
    [v23 setInputPrimitiveTopology:1];
    [v23 setLabel:@"MTLECBE"];
    *((void *)**v1 + 42) = [**v1 newRenderPipelineStateWithDescriptor:v23 error:&v26];
    [v23 setVertexFunction:0];

    int v25 = (void *)[v22 newFunctionWithName:@"progressTrackKernel"];
    *((void *)**v1 + 43) = [**v1 newComputePipelineStateWithFunction:v25 error:&v26];
  }
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice getCompilerConnectionManager:]::$_2 &&>>()
{
}

__n128 prepareVisibleFunctionHeader(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = [a1 libraryData];
  [a1 pluginData];
  uint64_t v15 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 200))(v6, objc_msgSend(a1, "bitCodeOffset", 0), objc_msgSend(a1, "bitCodeFileSize"), &v14, &v15);
  uint64_t v7 = *a3;
  uint64_t v8 = v15;
  *(_DWORD *)(a2 + 8) = *a3;
  *(_DWORD *)(a2 + 12) = v8;
  *a3 = v8 + v7;
  uint64_t v9 = objc_msgSend((id)objc_msgSend(a1, "pluginData"), "length");
  uint64_t v10 = *a3;
  *(_DWORD *)(a2 + 16) = *a3;
  *(_DWORD *)(a2 + 20) = v9;
  *a3 = v10 + v9;
  objc_msgSend((id)objc_msgSend(a1, "name"), "UTF8String");
  int v11 = objc_msgSend((id)objc_msgSend(a1, "name"), "lengthOfBytesUsingEncoding:", 4);
  LODWORD(v6) = v11 + 8;
  *(_DWORD *)a2 = *a3;
  *(_WORD *)(a2 + 4) = v11 + 1;
  *(_WORD *)(a2 + 6) = [a1 bitcodeType];
  uint64_t v12 = [a1 bitCodeHash];
  __n128 result = *(__n128 *)(v12 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
  *(__n128 *)(a2 + 40) = result;
  *a3 += v6 & 0xFFFFFFF8;
  return result;
}

void CompilerConnection::~CompilerConnection(CompilerConnection *this)
{
  *(void *)this = &unk_1ECAC59E8;
  char v2 = *((void *)this + 1);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    dispatch_release(v3);
  }
}

void XPCCompilerConnection::setupConnection(XPCCompilerConnection *this)
{
  v3[2] = *MEMORY[0x1E4F143B8];
  *((void *)this + 7) = xpc_connection_create("com.apple.MTLCompilerService", 0);
  char v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  *((void *)this + 5) = dispatch_queue_create("compiler cancel queue", v2);
  v3[0] = 0;
  v3[1] = 0;
  MEMORY[0x18530D0B0](v3);
  xpc_connection_set_instance();
  xpc_connection_set_event_handler(*((xpc_connection_t *)this + 7), &__block_literal_global_6);
  xpc_connection_resume(*((xpc_connection_t *)this + 7));
}

const char *XPCCompilerConnection::cancelConnection(XPCCompilerConnection *this)
{
  if (*((void *)this + 7))
  {
    char v2 = *((void *)this + 5);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN21XPCCompilerConnection16cancelConnectionEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = this;
    dispatch_sync(v2, block);
  }
  if (*((void *)this + 6)) {
    return (const char *)*((void *)this + 6);
  }
  else {
    return "<unknown reason>";
  }
}

uint64_t XPCCompilerConnection::setupSandbox(XPCCompilerConnection *this)
{
  int v1 = (int)this;
  if (XPCCompilerConnection::setupSandbox(unsigned char)::onceToken != -1) {
    dispatch_once(&XPCCompilerConnection::setupSandbox(unsigned char)::onceToken, &__block_literal_global_31);
  }
  if (v1 == 2) {
    return XPCCompilerConnection::setupSandbox(unsigned char)::gpuArchiverSandboxToken;
  }
  if (v1 == 1) {
    return XPCCompilerConnection::setupSandbox(unsigned char)::fromSourceSandboxTokens;
  }
  return 0;
}

void ___ZN21XPCCompilerConnection12setupSandboxEh_block_invoke()
{
  _OWORD v10[2] = *MEMORY[0x1E4F143B8];
  XPCCompilerConnection::setupSandbox(unsigned char)::fromSourceSandboxTokens = (uint64_t)xpc_array_create(0, 0);
  XPCCompilerConnection::setupSandbox(unsigned char)::gpuArchiverSandboxTokeuint64_t n = (uint64_t)xpc_array_create(0, 0);
  uint64_t v0 = [(id)MTLGetModulesCachePath() UTF8String];
  int v1 = (char *)[(id)MTLGetGPUArchiverCachePath() UTF8String];
  MTLGetCompilerWorkingDir(__p);
  if (v0) {
    uint64_t v2 = sandbox_extension_issue_file();
  }
  else {
    uint64_t v2 = 0;
  }
  v10[0] = v2;
  if (v9 < 0)
  {
    if (__p[1])
    {
LABEL_8:
      uint64_t v3 = sandbox_extension_issue_file();
      goto LABEL_10;
    }
  }
  else if (v9)
  {
    goto LABEL_8;
  }
  uint64_t v3 = 0;
LABEL_10:
  v10[1] = v3;
  if (v1) {
    int v1 = (char *)sandbox_extension_issue_file();
  }
  for (uint64_t i = 0; i != 2; ++i)
  {
    BOOL v5 = (void *)v10[i];
    if (v5)
    {
      xpc_object_t v6 = xpc_string_create((const char *)v10[i]);
      xpc_array_append_value((xpc_object_t)XPCCompilerConnection::setupSandbox(unsigned char)::fromSourceSandboxTokens, v6);
      xpc_release(v6);
      free(v5);
    }
  }
  if (v1)
  {
    xpc_object_t v7 = xpc_string_create(v1);
    xpc_array_append_value((xpc_object_t)XPCCompilerConnection::setupSandbox(unsigned char)::gpuArchiverSandboxToken, v7);
    xpc_release(v7);
    free(v1);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_182822FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XPCCompilerConnection::~XPCCompilerConnection(XPCCompilerConnection *this)
{
  *(void *)this = &unk_1ECAC5E98;
  if (*((void *)this + 7))
  {
    xpc_connection_kill();
    uint64_t v2 = (void *)*((void *)this + 7);
    if (v2)
    {
      xpc_release(v2);
      *((void *)this + 7) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    dispatch_release(v4);
  }
  free(*((void **)this + 6));

  CompilerConnection::~CompilerConnection(this);
}

{
  uint64_t vars8;

  XPCCompilerConnection::~XPCCompilerConnection(this);

  JUMPOUT(0x18530C140);
}

void XPCCompilerConnection::DispatchLogReplayRequest(XPCCompilerConnection *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = _MTLIsInternalBuild();
  if (a2 && v10)
  {
    if (XPCCompilerConnection::checkConnectionActive(a1, &v12))
    {
      if (a5) {
        XPCCompilerConnection::BuildRequestInternal(a1, a2, a3, a4, 0, 1, &__block_literal_global_34);
      }
      else {
        (*(void (**)(XPCCompilerConnection *, uint64_t, uint64_t, uint64_t, void, void, void *))(*(void *)a1 + 16))(a1, a2, a3, a4, 0, 0, &__block_literal_global_34);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v11 = 0;
      _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "MTLCompiler: could not save replay log because compiler service was unreachable", v11, 2u);
    }
  }
}

void ___ZN21XPCCompilerConnection24DispatchLogReplayRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectb_block_invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      ___ZN21XPCCompilerConnection24DispatchLogReplayRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectb_block_invoke_cold_1(a2);
    }
  }
}

BOOL XPCCompilerConnection::checkConnectionActive(XPCCompilerConnection *this, BOOL *a2)
{
  *a2 = 1;
  if (!*((void *)this + 7))
  {
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    XPCCompilerConnection::checkConnectionActive(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v4, "requestType", 9uLL);
  uint64_t v5 = mach_absolute_time();
  unsigned int v6 = 0;
  xpc_object_t v7 = (objc_class *)MEMORY[0x1E4F145A8];
  xpc_object_t v8 = (xpc_object_t)MEMORY[0x1E4F14528];
  do
  {
    if (v6 == 5)
    {
      sleep(1u);
      if (*((unsigned char *)this + 73)) {
        goto LABEL_7;
      }
    }
    else
    {
      if (*((unsigned char *)this + 73))
      {
LABEL_7:
        xpc_object_t v9 = MTLCompiler_is_waiting_for_XPC_service_to_start(*((xpc_connection_t *)this + 7), v4);
        *((unsigned char *)this + 73) = 0;
        goto LABEL_11;
      }
      if (!v6)
      {
        xpc_object_t v10 = MTLCompiler_is_waiting_for_XPC_service_to_start(*((xpc_connection_t *)this + 7), v4);
        goto LABEL_10;
      }
    }
    xpc_object_t v10 = xpc_connection_send_message_with_reply_sync(*((xpc_connection_t *)this + 7), v4);
LABEL_10:
    xpc_object_t v9 = v10;
LABEL_11:
    Class Class = object_getClass(v9);
    if (Class == v7)
    {
      if (v9 == v8)
      {
        uint64_t v21 = XPCCompilerConnection::cancelConnection(this);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          XPCCompilerConnection::checkConnectionActive((uint64_t)v21);
        }
        xpc_release(MEMORY[0x1E4F14528]);
        xpc_release(v4);
        goto LABEL_27;
      }
      *a2 = 0;
    }
    else
    {
      *a2 = 0;
      *((unsigned char *)this + 72) = xpc_dictionary_get_BOOL(v9, "ProbGuardMalloc");
    }
    xpc_release(v9);
    if (Class != v7) {
      break;
    }
  }
  while (v6++ < 9);
  xpc_release(v4);
  if (Class != v7) {
    return 1;
  }
LABEL_27:
  double v22 = deltaInMilliseconds(v5);
  BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
  if (result)
  {
    XPCCompilerConnection::checkConnectionActive(v22);
    return 0;
  }
  return result;
}

void XPCCompilerConnection::reportError(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a2)
  {
    if (a5)
    {
      MTLCompiler_encountered_XPC_ERROR_CONNECTION_INVALID(a4);
    }
    else
    {
      unsigned int v6 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t))(a4 + 16);
      v6(a4, 2, 0, 0, a3);
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN21XPCCompilerConnection11reportErrorEbPKcU13block_pointerFvjPKvmS1_Eb_block_invoke;
    block[3] = &unk_1E5220658;
    char v8 = a5;
    block[4] = a4;
    void block[5] = a3;
    dispatch_async(v5, block);
  }
}

uint64_t MTLCompiler_encountered_XPC_ERROR_CONNECTION_INVALID(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char *))(a1 + 16))(a1, 1, 0, 0, "Compiler encountered XPC_ERROR_CONNECTION_INVALID (is the OS shutting down?)");
}

uint64_t ___ZN21XPCCompilerConnection11reportErrorEbPKcU13block_pointerFvjPKvmS1_Eb_block_invoke(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2) {
    return MTLCompiler_encountered_XPC_ERROR_CONNECTION_INVALID(v3);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(v3 + 16))(v3, 2, 0, 0, *(void *)(a1 + 40));
  }
}

uint64_t newLogReplayRequest(_DWORD *a1, const char *a2, NSObject *a3, uint64_t a4)
{
  if (_MTLIsInternalBuild())
  {
    MEMORY[0x18530C9F0]();
    int v8 = MTLAtomicIncrement(&gDiagnosticLogIndex);
    xpc_object_t v9 = (char *)MTLGetProcessName();
    std::string::basic_string[abi:ne180100]<0>(&v33, v9);
    xpc_object_t v10 = std::string::append(&v33, "_data_");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v32, v8);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v12 = &v32;
    }
    else {
      BOOL v12 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v32.__r_.__value_.__l.__size_;
    }
    uint64_t v14 = std::string::append(&v34, (const std::string::value_type *)v12, size);
    std::string v35 = *v14;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    int v29 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = v35.__r_.__value_.__l.__size_;
    }
    v34.__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = (*(uint64_t (**)(_DWORD *, uint64_t, std::string *))(*(void *)a1 + 16))(a1, a4, &v34);
    v33.__r_.__value_.__r.__words[0] = 0;
    v32.__r_.__value_.__r.__words[0] = 0;
    if (a3)
    {
      dispatch_data_create_map(a3, (const void **)&v33.__r_.__value_.__l.__data_, (size_t *)&v32);
      size_t v17 = v32.__r_.__value_.__r.__words[0];
    }
    else
    {
      size_t v17 = 0;
    }
    size_t size_ptr = 0;
    buffer_ptr = 0;
    dispatch_data_create_map(v16, (const void **)&buffer_ptr, &size_ptr);
    size_t v18 = size_ptr;
    if (a2)
    {
      uint64_t v19 = a2;
      size_t v20 = strlen(a2) + 1;
    }
    else
    {
      uint64_t v19 = 0;
      size_t v20 = 0;
    }
    int v28 = a1[2];
    size_t v21 = v17 + size_ptr + v20 + 28;
    double v22 = malloc_type_malloc(v21 + v15 + 17, 0x100004077774924uLL);
    *double v22 = v15 + 1;
    if (v29 >= 0) {
      uint64_t v23 = &v35;
    }
    else {
      uint64_t v23 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    memcpy(v22 + 1, v23, v15 + 1);
    *(void *)((char *)v22 + v15 + 9) = v21;
    *(void *)((char *)v22 + v15 + 17) = v20;
    std::string::size_type v24 = v15 + 25;
    memcpy((char *)v22 + v24, v19, v20);
    *(void *)((char *)v22 + v20 + v24) = v17;
    uint64_t v25 = v20 + v24 + 8;
    memcpy((char *)v22 + v25, v33.__r_.__value_.__l.__data_, v17);
    uint64_t v26 = (char *)v22 + v25 + v17;
    *(_DWORD *)uint64_t v26 = v28;
    *(void *)(v26 + 4) = v18;
    memcpy(v26 + 12, buffer_ptr, v18);
    operator new();
  }
  return 0;
}

void sub_1828238DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(exception_object);
}

BOOL ___ZN21XPCCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_2(uint64_t a1)
{
  return XPCCompilerConnection::BuildRequestInternal(*(void *)(a1 + 48), *(int **)(a1 + 56), *(const char **)(a1 + 64), *(NSObject **)(a1 + 32), *(_DWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 76), *(void *)(a1 + 40));
}

void MonolithicCompilerConnection::MonolithicCompilerConnection(MonolithicCompilerConnection *this, int a2)
{
  int v2 = (void *)CompilerConnection::CompilerConnection((uint64_t)this, 4, a2);
  void *v2 = &unk_1ECAC67D0;
  v2[5] = 0;
  v2[6] = 0;
}

void MonolithicCompilerConnection::~MonolithicCompilerConnection(MonolithicCompilerConnection *this)
{
  *(void *)this = &unk_1ECAC67D0;
  (*(void (**)(void))(*((void *)this + 5) + 16))(*((void *)this + 6));
  int v2 = (void **)*((void *)this + 5);
  if (v2)
  {
    CompilerPluginInterface::~CompilerPluginInterface(v2);
    MEMORY[0x18530C140]();
  }

  CompilerConnection::~CompilerConnection(this);
}

{
  uint64_t vars8;

  MonolithicCompilerConnection::~MonolithicCompilerConnection(this);

  JUMPOUT(0x18530C140);
}

void MonolithicCompilerConnection::DispatchLogReplayRequest(uint64_t a1, unsigned int *a2, const char *a3, NSObject *a4)
{
  int v8 = _MTLIsInternalBuild();
  if (a2 && v8)
  {
    MonolithicCompilerConnection::BuildRequestInternal(a1, a2, a3, a4, (uint64_t)&__block_literal_global_52);
  }
}

void ___ZN28MonolithicCompilerConnection24DispatchLogReplayRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObject_block_invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      ___ZN28MonolithicCompilerConnection24DispatchLogReplayRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObject_block_invoke_cold_1(a2);
    }
  }
}

void MonolithicCompilerConnection::BuildRequestInternal(uint64_t a1, unsigned int *a2, const char *a3, NSObject *a4, uint64_t a5)
{
  if (!*(void *)(a1 + 48)) {
    operator new();
  }
  int v10 = MTLAtomicIncrement(CompilerConnection::_compileCount);
  uint64_t v31 = 0;
  long long v11 = (*(uint64_t (**)(unsigned int *, void, char **))(*(void *)a2 + 16))(a2, *(unsigned int *)(a1 + 32), &v31);
  if (!v11)
  {
    (*(void (**)(uint64_t, uint64_t, void, void, char *))(a5 + 16))(a5, 2, 0, 0, v31);
    (*(void (**)(unsigned int *))(*(void *)a2 + 8))(a2);
    std::string::size_type v15 = v31;
    goto LABEL_10;
  }
  size_t size_ptr = 0;
  buffer_ptr = 0;
  dispatch_data_t v12 = dispatch_data_create_map(v11, (const void **)&buffer_ptr, &size_ptr);
  if (MTLTraceEnabled()) {
    kdebug_trace();
  }
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  size_t v20 = ___ZN28MonolithicCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvjPKvmS3_E_block_invoke;
  size_t v21 = &unk_1E52206D0;
  uint64_t v24 = a5;
  uint64_t v25 = a1;
  int v28 = v10;
  uint64_t v26 = a2;
  int v27 = a3;
  dispatch_data_t v22 = v12;
  uint64_t v23 = a4;
  if (a3)
  {
    size_t v17 = 0;
    size_t v18 = 0;
    uint64_t v13 = dispatch_data_create_map(a4, (const void **)&v18, &v17);
    uint64_t v14 = (*(uint64_t (**)(void, const char *, void *, size_t))(*(void *)(a1 + 40) + 32))(*(void *)(a1 + 48), a3, v18, v17);
    dispatch_release(v13);
    if (v14 == -1)
    {
      uint64_t v16 = 0;
      asprintf_l(&v16, 0, "- Could not load compiler plugin at %s", a3);
      ((void (*)(void *, uint64_t, void, void, char *))v20)(v19, 2, 0, 0, v16);
      std::string::size_type v15 = v16;
LABEL_10:
      free(v15);
      return;
    }
  }
  else
  {
    uint64_t v14 = 0xFFFFFFFFLL;
  }
  (*(void (**)(void, uint64_t, void, void *, size_t, void *))(*(void *)(a1 + 40) + 24))(*(void *)(a1 + 48), v14, a2[2], buffer_ptr, size_ptr, v19);
}

void sub_182823D90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN28MonolithicCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvjPKvmS3_E_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (MTLTraceEnabled()) {
    kdebug_trace();
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v3();
  }
  return result;
}

void MonolithicCompilerConnection::BuildRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  int v8 = *(NSObject **)(a1 + 8);
  if (a6)
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    _OWORD v9[2] = ___ZN28MonolithicCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_2;
    void v9[3] = &unk_1E52206F8;
    v9[6] = a1;
    v9[7] = a2;
    v9[8] = a3;
    v9[4] = a4;
    v9[5] = a7;
    dispatch_sync(v8, v9);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN28MonolithicCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke;
    block[3] = &unk_1E52206F8;
    void block[6] = a1;
    void block[7] = a2;
    block[8] = a3;
    block[4] = a4;
    void block[5] = a7;
    dispatch_async(v8, block);
  }
}

void ___ZN28MonolithicCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke(uint64_t a1)
{
}

void ___ZN28MonolithicCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_2(uint64_t a1)
{
}

uint64_t MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(MTLCompilerConnectionManagerPrivate *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN35MTLCompilerConnectionManagerPrivate25getCompilerProcessesCountEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  if (MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::onceToken != -1) {
    dispatch_once(&MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::onceToken, block);
  }
  uint64_t result = *((unsigned int *)this + 4);
  if (result != MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::result) {
    MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::uint64_t result = *((_DWORD *)this + 4);
  }
  return result;
}

uint64_t ___ZN35MTLCompilerConnectionManagerPrivate25getCompilerProcessesCountEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 16);
  uint64_t v3 = getenv("MTL_MAX_COMPILER_PROCESSES");
  if (!v3) {
    uint64_t v3 = "0";
  }
  uint64_t result = strtol(v3, 0, 0);
  if (v2 >= 1) {
    int v5 = v2;
  }
  else {
    int v5 = result;
  }
  if (v2 == 2) {
    int v6 = result;
  }
  else {
    int v6 = v5;
  }
  if (v2 != result && result != 0) {
    int v5 = v6;
  }
  if (v5 >= 1) {
    int v8 = v5;
  }
  else {
    int v8 = 2;
  }
  if (v5 <= 64) {
    int v9 = v8;
  }
  else {
    int v9 = 64;
  }
  MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::uint64_t result = v9;
  *(_DWORD *)(v1 + 16) = v9;
  return result;
}

uint64_t MTLGetDefaultCompilerProcessesCount()
{
  return 2;
}

uint64_t MTLGetMaximumCompilerProcessesCount()
{
  return 64;
}

uint64_t MTLGetOptimalCompilerProcessesCount()
{
  return 2;
}

void MTLCompilerConnectionManagerPrivate::~MTLCompilerConnectionManagerPrivate(MTLCompilerConnectionManagerPrivate *this)
{
  *(void *)this = &unk_1ECAC6900;
  int v2 = *((void *)this + 3);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (*((void *)this + 5) != v3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      uint64_t v6 = v3 + 16 * v4;
      uint64_t v7 = 16 * v4;
      free(*(void **)v6);
      *(void *)(v3 + v7) = 0;
      int v10 = *(NSObject **)(v6 + 8);
      int v9 = (void *)(v6 + 8);
      int v8 = v10;
      if (v10) {
        dispatch_release(v8);
      }
      *int v9 = 0;
      unint64_t v4 = v5;
      uint64_t v3 = *((void *)this + 4);
      ++v5;
    }
    while (v4 < (*((void *)this + 5) - v3) >> 4);
  }
  for (uint64_t i = 2096; i != 1072; i -= 16)
  {
    dispatch_data_t v12 = *(std::__shared_weak_count **)((char *)this + i);
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  do
  {
    uint64_t v13 = *(std::__shared_weak_count **)((char *)this + i);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    i -= 16;
  }
  while (i != 48);
  uint64_t v14 = (void *)*((void *)this + 4);
  if (v14)
  {
    *((void *)this + 5) = v14;
    operator delete(v14);
  }
}

{
  uint64_t vars8;

  MTLCompilerConnectionManagerPrivate::~MTLCompilerConnectionManagerPrivate(this);

  JUMPOUT(0x18530C140);
}

__n128 __Block_byref_object_copy__61(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__62(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void MTLCompilerConnectionManagerPrivate::setCompilerProcessesCount(MTLCompilerConnectionManagerPrivate *this, int a2)
{
  if (!*((unsigned char *)this + 12))
  {
    int v2 = *((void *)this + 3);
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZN35MTLCompilerConnectionManagerPrivate25setCompilerProcessesCountEj_block_invoke;
    void v3[3] = &__block_descriptor_44_e5_v8__0l;
    v3[4] = this;
    int v4 = a2;
    dispatch_sync(v2, v3);
  }
}

void ___ZN35MTLCompilerConnectionManagerPrivate25setCompilerProcessesCountEj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(v1 + 16);
  uint64_t v3 = *(int *)(a1 + 40);
  *(_DWORD *)(v1 + 16) = v3;
  if ((int)v2 >= (int)v3)
  {
    if ((int)v2 > (int)v3)
    {
      int v8 = (void *)(v1 + 16 * v3);
      int v9 = v2 - v3;
      do
      {
        uint64_t v10 = v8[7];
        if (v10)
        {
          uint64_t v11 = v8[8];
          if (v11) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
          }
          v8[135] = v10;
          dispatch_data_t v12 = (std::__shared_weak_count *)v8[136];
          v8[136] = v11;
          if (v12) {
            std::__shared_weak_count::__release_weak(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v8[8];
          v8[7] = 0;
          v8[8] = 0;
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
        }
        v8 += 2;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    int v4 = (void *)(v1 + 16 * v2);
    do
    {
      unsigned int v5 = (std::__shared_weak_count *)v4[136];
      if (v5 && (unsigned int v5 = std::__shared_weak_count::lock(v5)) != 0) {
        uint64_t v6 = v4[135];
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (std::__shared_weak_count *)v4[8];
      v4[7] = v6;
      v4[8] = v5;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      ++v2;
      v4 += 2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
}

void MTLCompilerStitchingRequest::~MTLCompilerStitchingRequest(MTLCompilerStitchingRequest *this)
{
  MTLCompilerStitchingRequest::~MTLCompilerStitchingRequest(this);

  JUMPOUT(0x18530C140);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;

  *(void *)this = &unk_1ECAC4380;
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    dispatch_release(v2);
    *((void *)this + 4) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    free(v3);
    *((void *)this + 9) = 0;
  }
  int v4 = (void *)*((void *)this + 5);
  if (v4) {

  }
  unsigned int v5 = (void *)*((void *)this + 6);
  if (v5) {

  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)this = &unk_1ECAC5A78;
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    dispatch_release(v7);
  }
}

uint64_t MTLCompilerRequest::serializedRequest(MTLCompilerRequest *this, unsigned int a2, char **a3)
{
  return *((void *)this + 2);
}

char *___ZL17enableRelaxedMathv_block_invoke()
{
  __n128 result = getenv("MTL_REPLACE_FAST_MATH_WITH_RELAXED_MATH");
  if (result)
  {
    if (*result == 49) {
      enableRelaxedMath(void)::relaxedMathSet = 1;
    }
  }
  return result;
}

void CompilerPluginInterface::~CompilerPluginInterface(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    dlclose(v1);
  }
}

void CompilerPluginInterface::CompilerPluginInterface(CompilerPluginInterface *this, int a2)
{
  *((_DWORD *)this + 10) = a2;
  uint64_t v3 = "/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32023/MTLCompiler";
  if (a2 != 32023) {
    uint64_t v3 = 0;
  }
  if (a2 == 32024) {
    int v4 = "/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32024/MTLCompiler";
  }
  else {
    int v4 = v3;
  }
  unsigned int v5 = dlopen(v4, 5);
  *(void *)this = v5;
  if (v5)
  {
    *((void *)this + 1) = dlsym(v5, "MTLCodeGenServiceCreate");
    *((void *)this + 2) = dlsym(*(void **)this, "MTLCodeGenServiceDestroy");
    *((void *)this + 3) = dlsym(*(void **)this, "MTLCodeGenServiceBuildRequest");
    *((void *)this + 4) = dlsym(*(void **)this, "MTLCodeGenServiceSetPluginPath");
  }
  else
  {
    uint64_t v6 = dlerror();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      CompilerPluginInterface::CompilerPluginInterface((uint64_t)v6);
    }
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 8) = 0u;
  }
}

char *std::vector<MTLBuildBinaryRequest>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLBuildBinaryRequest>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLBuildBinaryRequest>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::allocate_shared[abi:ne180100]<MonolithicCompilerConnection,std::allocator<MonolithicCompilerConnection>,int &,void>@<X0>(int *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0x50uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1ECAC7620;
  uint64_t result = CompilerConnection::CompilerConnection((uint64_t)(v4 + 3), 4, *a1);
  v4[3] = &unk_1ECAC67D0;
  v4[8] = 0;
  v4[9] = 0;
  *a2 = result;
  a2[1] = (uint64_t)v4;
  return result;
}

void std::__shared_ptr_emplace<MonolithicCompilerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MonolithicCompilerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7620;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

uint64_t std::__shared_ptr_emplace<MonolithicCompilerConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<XPCCompilerConnection,std::allocator<XPCCompilerConnection>,int,void>@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = std::__shared_ptr_emplace<XPCCompilerConnection>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<XPCCompilerConnection>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_182824824(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<XPCCompilerConnection>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<XPCCompilerConnection>,0>(void *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1ECAC74D0;
  XPCCompilerConnection::XPCCompilerConnection((XPCCompilerConnection *)(a1 + 3), *a2);
  return a1;
}

void sub_182824884(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XPCCompilerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC74D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XPCCompilerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC74D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

uint64_t std::__shared_ptr_emplace<XPCCompilerConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_182824D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *MTLTextureTypeString(unint64_t a1)
{
  if (a1 > 9) {
    return @"Unknown";
  }
  else {
    return (__CFString *)*((void *)&off_1E52209A8 + a1);
  }
}

__CFString *MTLCPUCacheModeString(uint64_t a1)
{
  uint64_t v1 = @"Invalid";
  if (!a1) {
    uint64_t v1 = @"MTLCPUCacheModeDefaultCache";
  }
  if (a1 == 1) {
    return @"MTLCPUCacheModeWriteCombined";
  }
  else {
    return v1;
  }
}

__CFString *MTLStorageModeString(unint64_t a1)
{
  if (a1 > 3) {
    return @"Invalid";
  }
  else {
    return (__CFString *)*((void *)&off_1E5220988 + a1);
  }
}

__CFString *MTLUnmappedDepthValueString(uint64_t a1)
{
  uint64_t v1 = @"Invalid";
  if (a1 == 1) {
    uint64_t v1 = @"MTLUnmappedDepthValueOne";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"MTLUnmappedDepthValueZero";
  }
}

__CFString *MTLTextureCompressionTypeString(uint64_t a1)
{
  uint64_t v1 = @"Invalid";
  if (a1 == 1) {
    uint64_t v1 = @"MTLTextureCompressionTypeLossy";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"MTLTextureCompressionTypeLossless";
  }
}

void validateMTLTextureType(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 0xA) {
    _MTLMessageContextPush_(a2, 4, @"type (%lu) is not a valid MTLTextureType.", a4, a5, a6, a7, a8, a1);
  }
}

uint64_t enableTextureUsageUnknownDefault()
{
  if (!gEnableTextureUsageUnknownDefaultInitialized)
  {
    uint64_t v0 = getenv("MTL_ENABLE_TEXTURE_USAGE_UNKNOWN_DEFAULT");
    if (v0 && *v0 == 49) {
      gEnableTextureUsageUnknownDefault = 1;
    }
    gEnableTextureUsageUnknownDefaultInitialized = 1;
  }
  return gEnableTextureUsageUnknownDefault;
}

void _validateTextureUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    unint64_t v8 = a1 & 0xFFFFFFFFFFFEBFC0;
    if (a2)
    {
      if (v8) {
        _MTLMessageContextPush_(a2, 4, @"MTLTextureUsage has unknown bits 0x%lx.", a4, a5, a6, a7, a8, a1 & 0xFFFFFFFFFFFEBFC0);
      }
    }
    else if (v8)
    {
      MTLReportFailure(0, "_validateTextureUsage", 360, @"MTLTextureUsage has unknown bits 0x%lx.", a5, a6, a7, a8, a1 & 0xFFFFFFFFFFFEBFC0);
    }
  }
}

void _mtlValidateTextureUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if ((a1 & 0xFFFFFFFFFFFEBFC0) != 0) {
      MTLReportFailure(0, "_validateTextureUsage", 360, @"MTLTextureUsage has unknown bits 0x%lx.", a5, a6, a7, a8, a1 & 0xFFFFFFFFFFFEBFC0);
    }
  }
}

uint64_t MTLTextureSwizzleViewSwizzle(unsigned int a1, unsigned int a2)
{
  int32x4_t v2 = (int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a2), (uint32x4_t)xmmword_1828F0B30);
  v3.i64[0] = 0xFE000000FELL;
  v3.i64[1] = 0xFE000000FELL;
  v4.i64[0] = 0x1000000010;
  v4.i64[1] = 0x1000000010;
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  int8x16_t v6 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8(vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v2, v3)), (int8x16_t)v2, (int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a1), (uint32x4_t)vsubq_s32(v4, (int32x4_t)vandq_s8((int8x16_t)vshlq_n_s32(v2, 3uLL), (int8x16_t)vdupq_n_s32(0x7F8u))))), v5), (uint32x4_t)xmmword_1828F0B40);
  *(int8x8_t *)v6.i8 = vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  return (v6.i32[0] | v6.i32[1]);
}

void *MTLTextureSwizzleString(unsigned int a1)
{
  int32x4_t v2 = (void *)[MEMORY[0x1E4F28E78] string];
  [v2 appendFormat:@"["];
  for (unsigned int i = 0; i != 4; ++i)
  {
    switch((char)a1)
    {
      case 0:
        int32x4_t v4 = v2;
        int8x16_t v5 = @"MTLTextureSwizzleZero";
        goto LABEL_10;
      case 1:
        int32x4_t v4 = v2;
        int8x16_t v5 = @"MTLTextureSwizzleOne";
        goto LABEL_10;
      case 2:
        int32x4_t v4 = v2;
        int8x16_t v5 = @"MTLTextureSwizzleRed";
        goto LABEL_10;
      case 3:
        int32x4_t v4 = v2;
        int8x16_t v5 = @"MTLTextureSwizzleGreen";
        goto LABEL_10;
      case 4:
        int32x4_t v4 = v2;
        int8x16_t v5 = @"MTLTextureSwizzleBlue";
        goto LABEL_10;
      case 5:
        int32x4_t v4 = v2;
        int8x16_t v5 = @"MTLTextureSwizzleAlpha";
LABEL_10:
        objc_msgSend(v4, "appendFormat:", v5, v7);
        break;
      default:
        objc_msgSend(v2, "appendFormat:", @"Unknown(%u)", a1);
        break;
    }
    if (i <= 2) {
      [v2 appendFormat:@", "];
    }
    a1 >>= 8;
  }
  [v2 appendFormat:@"]"];
  return v2;
}

__CFString *MTLTextureCompressionModeString(unint64_t a1)
{
  if (a1 > 2) {
    return @"Invalid";
  }
  else {
    return (__CFString *)*((void *)&off_1E52208D0 + a1);
  }
}

uint64_t MTLGetDisallowedTextureUsagesWhenSwizzling(uint64_t a1, int a2)
{
  if (a2) {
    return 0;
  }
  else {
    return 6;
  }
}

id _copyIOSurfaceDevice(__IOSurface *a1)
{
  uint64_t v1 = (void *)IOSurfaceCopyValue(a1, (CFStringRef)*MEMORY[0x1E4F2F080]);
  if (!v1) {
    return 0;
  }
  int32x4_t v2 = v1;
  if (![v1 objectForKeyedSubscript:kMetalRegistryID]) {
    goto LABEL_5;
  }
  uint64_t v3 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", kMetalRegistryID), "unsignedLongLongValue");
  id v4 = MTLCreateSystemDefaultDevice();
  if ([v4 registryID] != v3)
  {

LABEL_5:
    id v4 = 0;
  }

  return v4;
}

unint64_t _mtlNumMipmapLevelsForSize(unint64_t a1)
{
  return 64 - __clz(a1);
}

void MTLGetTextureLevelInfoForDevice(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
}

uint64_t MTLCalculateSourceBufferSizeAndAlignment(void *a1, void *a2, unint64_t *a3, char a4, uint64_t a5, unint64_t *a6, uint64_t *a7)
{
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  MTLPixelFormatGetInfoForDevice((void *)[a1 device], objc_msgSend(a1, "pixelFormat"), (uint64_t)&v25);
  uint64_t v13 = *((void *)&v26 + 1);
  if ((WORD4(v25) & 0x400) != 0) {
    unint64_t v14 = *((void *)&v27 + 1);
  }
  else {
    unint64_t v14 = 1;
  }
  uint64_t v15 = [a1 sampleCount] * v13;
  unint64_t v16 = [a1 width];
  unint64_t v17 = (unint64_t)[a1 height] >> a4;
  if (v17 <= 1) {
    unint64_t v17 = 1;
  }
  unint64_t v18 = *a3;
  unint64_t v19 = a3[1];
  if ((BYTE9(v25) & 4) != 0)
  {
    uint64_t v20 = v16 >> a4;
    if (v16 >> a4 <= 1) {
      uint64_t v20 = 1;
    }
    if (*a2 + v18 == v20) {
      unint64_t v18 = (v18 + (unint64_t)v27 - 1) / (unint64_t)v27 * v27;
    }
    if (v19 + a2[1] == v17) {
      unint64_t v19 = (v19 + *((void *)&v27 + 1) - 1) / *((void *)&v27 + 1) * *((void *)&v27 + 1);
    }
  }
  uint64_t result = [a1 textureType];
  if (result && (uint64_t result = [a1 textureType], result != 1))
  {
    unint64_t v23 = v19 / v14 * a5;
  }
  else
  {
    unint64_t v22 = v27;
    if ((BYTE9(v25) & 4) == 0) {
      unint64_t v22 = 1;
    }
    unint64_t v23 = (v18 + v22 - 1) / v22 * v22 * v15;
  }
  *a6 = v23;
  *a7 = v15;
  return result;
}

void *_MTLAdjustMTLSize@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(void *)(a5 + 16) = *(void *)(a2 + 16);
  if ((*(unsigned char *)(a4 + 9) & 4) != 0)
  {
    if (*(void *)a2 + *result == *a3) {
      *(void *)a5 = (unint64_t)(*(void *)a2 + *(void *)(a4 + 32) - 1)
    }
                    / *(void *)(a4 + 32)
                    * *(void *)(a4 + 32);
    uint64_t v5 = *(void *)(a2 + 8);
    if (v5 + result[1] == a3[1]) {
      *(void *)(a5 + 8) = (unint64_t)(v5 + *(void *)(a4 + 40) - 1)
    }
                          / *(void *)(a4 + 40)
                          * *(void *)(a4 + 40);
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6 + result[2] == a3[2]) {
      *(void *)(a5 + 16) = (unint64_t)(v6 + *(void *)(a4 + 48) - 1)
    }
                           / *(void *)(a4 + 48)
                           * *(void *)(a4 + 48);
  }
  return result;
}

size_t MTLIOCompressionContextDefaultChunkSize(void)
{
  return 0x10000;
}

MTLIOCompressionContext MTLIOCreateCompressionContext(const char *path, MTLIOCompressionMethod type, size_t chunkSize)
{
  if (chunkSize) {
    size_t v5 = chunkSize;
  }
  else {
    size_t v5 = 0x10000;
  }
  uint64_t v6 = (int *)malloc_type_calloc(0x30uLL, 1uLL, 0x4AFC17B0uLL);
  uint64_t v7 = v6;
  if ((unint64_t)type < (MTLIOCompressionMethodLZBitmap|MTLIOCompressionMethodLZFSE))
  {
    void v6[8] = dword_1828F0BE0[type];
    int v8 = open(path, 1538);
    *uint64_t v7 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      if (!chmod(path, 0x1A4u))
      {
        v7[2] = 0;
        *((void *)v7 + 2) = v5;
        *((void *)v7 + 3) = 0;
        operator new();
      }
      close(*v7);
    }
  }
  free(v7);
  return 0;
}

void MTLIOCompressionContextAppendData(MTLIOCompressionContext context, const void *data, size_t size)
{
  size_t v5 = (void **)*((void *)context + 5);
  uint64_t v6 = (const void **)v5[1];
  unint64_t v7 = (unint64_t)v5[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = ((char *)v6 - (unsigned char *)*v5) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v7 - (void)*v5;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)(v5 + 2), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = (const void **)&v13[16 * v9];
    uint64_t v15 = &v13[16 * v12];
    *unint64_t v14 = data;
    v14[1] = (const void *)size;
    int v8 = v14 + 2;
    unint64_t v17 = (char *)*v5;
    unint64_t v16 = (char *)v5[1];
    if (v16 != *v5)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 2;
        v16 -= 16;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*v5;
    }
    __CFString *v5 = v14;
    v5[1] = v8;
    void v5[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v6 = data;
    v6[1] = (const void *)size;
    int v8 = v6 + 2;
  }
  v5[1] = v8;
}

MTLIOCompressionStatus MTLIOFlushAndDestroyCompressionContext(MTLIOCompressionContext context)
{
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  unint64_t v70 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  int32x4_t v2 = (uint64_t **)*((void *)context + 5);
  uint64_t v3 = *v2;
  id v4 = v2[1];
  if (*v2 == v4) {
    goto LABEL_85;
  }
  uint64_t v5 = 0;
  __buf = (char *)context + 8;
  unint64_t v6 = *((void *)context + 2);
  unint64_t v7 = *v2;
  do
  {
    v5 += v7[1];
    v7 += 2;
  }
  while (v7 != v4);
  if (v3 == v4) {
    goto LABEL_85;
  }
  int v8 = 0;
  do
  {
    uint64_t v9 = *v3;
    if (*v3)
    {
      unint64_t v10 = v3[1];
      while (1)
      {
        uint64_t v11 = v9;
        if (v10 < v6) {
          break;
        }
        if (v8 >= v67)
        {
          uint64_t v13 = (v8 - (unsigned char *)v65) >> 4;
          if ((unint64_t)(v13 + 1) >> 60) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v14 = (v67 - (unsigned char *)v65) >> 3;
          if (v14 <= v13 + 1) {
            unint64_t v14 = v13 + 1;
          }
          if ((unint64_t)(v67 - (unsigned char *)v65) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)&v67, v15);
          }
          else {
            unint64_t v16 = 0;
          }
          unint64_t v17 = (long long *)&v16[16 * v13];
          *(void *)unint64_t v17 = v11;
          *((void *)v17 + 1) = v6;
          unint64_t v19 = (long long *)v65;
          unint64_t v18 = v66;
          uint64_t v20 = v17;
          if (v66 != v65)
          {
            do
              *--uint64_t v20 = *--v18;
            while (v18 != v19);
            unint64_t v18 = (long long *)v65;
          }
          unint64_t v12 = v17 + 1;
          uint64_t v65 = v20;
          uint64_t v66 = v17 + 1;
          uint64_t v67 = &v16[16 * v15];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *(void *)int v8 = v9;
          *((void *)v8 + 1) = v6;
          unint64_t v12 = (long long *)(v8 + 16);
        }
        uint64_t v66 = v12;
        size_t v21 = v69;
        if ((unint64_t)v69 >= v70)
        {
          uint64_t v22 = std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__push_back_slow_path<std::vector<std::pair<unsigned char *,unsigned long>> const&>((uint64_t *)&v68, (long long **)&v65);
        }
        else
        {
          *(void *)uint64_t v69 = 0;
          *((void *)v21 + 1) = 0;
          *((void *)v21 + 2) = 0;
          std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>(v21, (long long *)v65, v66, ((char *)v66 - (unsigned char *)v65) >> 4);
          uint64_t v22 = (uint64_t)(v21 + 24);
        }
        uint64_t v69 = (char *)v22;
        v5 -= v6;
        unint64_t v23 = *((void *)context + 2);
        int v8 = (char *)v65;
        uint64_t v66 = (long long *)v65;
        v10 -= v6;
        if (v10)
        {
          uint64_t v9 = v11 + v6;
          unint64_t v6 = v23;
          if (v11) {
            continue;
          }
        }
        goto LABEL_54;
      }
      if (v8 >= v67)
      {
        uint64_t v24 = (v8 - (unsigned char *)v65) >> 4;
        if ((unint64_t)(v24 + 1) >> 60) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v25 = (v67 - (unsigned char *)v65) >> 3;
        if (v25 <= v24 + 1) {
          unint64_t v25 = v24 + 1;
        }
        if ((unint64_t)(v67 - (unsigned char *)v65) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          long long v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)&v67, v26);
        }
        else {
          long long v27 = 0;
        }
        uint64_t v28 = &v27[16 * v24];
        *(void *)uint64_t v28 = v11;
        *((void *)v28 + 1) = v10;
        int v30 = (long long *)v65;
        int v29 = v66;
        uint64_t v31 = v28;
        if (v66 != v65)
        {
          do
          {
            *((_OWORD *)v31 - 1) = *(v29 - 1);
            v31 -= 16;
            --v29;
          }
          while (v29 != v30);
          int v29 = (long long *)v65;
        }
        int v8 = v28 + 16;
        uint64_t v65 = v31;
        uint64_t v66 = (long long *)(v28 + 16);
        uint64_t v67 = &v27[16 * v26];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *(void *)int v8 = v9;
        *((void *)v8 + 1) = v10;
        v8 += 16;
      }
      uint64_t v66 = (long long *)v8;
      v5 -= v10;
      if (v5)
      {
        unint64_t v23 = v6 - v10;
      }
      else
      {
        std::string v32 = v69;
        if ((unint64_t)v69 >= v70)
        {
          uint64_t v33 = std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__push_back_slow_path<std::vector<std::pair<unsigned char *,unsigned long>> const&>((uint64_t *)&v68, (long long **)&v65);
        }
        else
        {
          *(void *)uint64_t v69 = 0;
          *((void *)v32 + 1) = 0;
          *((void *)v32 + 2) = 0;
          std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>(v32, (long long *)v65, v66, ((char *)v66 - (unsigned char *)v65) >> 4);
          uint64_t v33 = (uint64_t)(v32 + 24);
        }
        uint64_t v5 = 0;
        uint64_t v69 = (char *)v33;
        unint64_t v23 = *((void *)context + 2);
        int v8 = (char *)v65;
        uint64_t v66 = (long long *)v65;
      }
    }
    else
    {
      unint64_t v23 = v6;
    }
LABEL_54:
    v3 += 2;
    unint64_t v6 = v23;
  }
  while (v3 != v4);
  if (v69 == v68)
  {
LABEL_85:
    close(*(_DWORD *)context);
    uint64_t v55 = *((void *)context + 5);
    if (v55)
    {
      uint64_t v56 = *(void **)v55;
      if (*(void *)v55)
      {
        *(void *)(v55 + 8) = v56;
        operator delete(v56);
      }
      MEMORY[0x18530C140](v55, 0x20C40960023A9);
    }
    free(context);
LABEL_90:
    MTLIOCompressionStatus v54 = MTLIOCompressionStatusError;
    goto LABEL_91;
  }
  std::string v34 = (uint8_t *)malloc_type_malloc(*((void *)context + 2), 0xB0619479uLL);
  uint64_t v35 = (uint8_t *)malloc_type_malloc(*((void *)context + 2), 0xD074F50CuLL);
  int v61 = (char *)malloc_type_malloc(v69 - v68, 0x10000406CB41D2EuLL);
  *((void *)context + 3) = 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3);
  pwrite(*(_DWORD *)context, __buf, 0x18uLL, 0);
  pwrite(*(_DWORD *)context, v61, 24 * *((void *)context + 3), 24);
  int v36 = (long long **)v68;
  int v60 = (long long **)v69;
  if (v68 != v69)
  {
    int v37 = 0;
    off_t v38 = 24 * *((void *)context + 3) + 24;
    src_buffer = v35;
    do
    {
      std::string __p = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>((char *)&__p, *v36, v36[1], v36[1] - *v36);
      id v40 = (const void **)__p;
      uint64_t v39 = v63;
      if (__p == v63)
      {
        size_t v41 = 0;
      }
      else
      {
        size_t v41 = 0;
        uint64_t v42 = v35;
        do
        {
          uint64_t v43 = *v40;
          size_t v44 = (size_t)v40[1];
          v40 += 2;
          memcpy(v42, v43, v44);
          v42 += v44;
          v41 += v44;
        }
        while (v40 != v39);
      }
      uint64_t v35 = src_buffer;
      size_t v45 = compression_encode_buffer(v34, *((void *)context + 2), src_buffer, v41, 0, (compression_algorithm)*((_DWORD *)context + 8));
      unint64_t v46 = (BOOL *)&v61[24 * v37];
      unint64_t v47 = v45 ? v34 : src_buffer;
      size_t v48 = v45 ? v45 : v41;
      *unint64_t v46 = v45 != 0;
      *((void *)v46 + 1) = v38;
      *((void *)v46 + 2) = v48;
      ssize_t v49 = pwrite(*(_DWORD *)context, v47, v48, v38);
      if (v49 == -1)
      {
        close(*(_DWORD *)context);
        uint64_t v50 = *((void *)context + 5);
        if (v50)
        {
          int v51 = *(void **)v50;
          if (*(void *)v50)
          {
            *(void *)(v50 + 8) = v51;
            operator delete(v51);
          }
          MEMORY[0x18530C140](v50, 0x20C40960023A9);
        }
        free(context);
        free(v61);
        free(v34);
        free(src_buffer);
      }
      else
      {
        v38 += v48;
        ++v37;
      }
      if (__p)
      {
        uint64_t v63 = (const void **)__p;
        operator delete(__p);
      }
      if (v49 == -1) {
        goto LABEL_90;
      }
      v36 += 3;
    }
    while (v36 != v60);
  }
  *((_DWORD *)context + 2) = -1159983122;
  pwrite(*(_DWORD *)context, v61, 24 * *((void *)context + 3), 24);
  pwrite(*(_DWORD *)context, __buf, 0x18uLL, 0);
  close(*(_DWORD *)context);
  uint64_t v52 = *((void *)context + 5);
  if (v52)
  {
    unint64_t v53 = *(void **)v52;
    if (*(void *)v52)
    {
      *(void *)(v52 + 8) = v53;
      operator delete(v53);
    }
    MEMORY[0x18530C140](v52, 0x20C40960023A9);
  }
  free(context);
  free(v61);
  free(v34);
  free(v35);
  MTLIOCompressionStatus v54 = MTLIOCompressionStatusComplete;
LABEL_91:
  if (v65)
  {
    uint64_t v66 = (long long *)v65;
    operator delete(v65);
  }
  uint64_t v65 = &v68;
  std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  return v54;
}

void sub_182826A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char *__p, char *a18, uint64_t a19, char a20,uint64_t a21)
{
  if (__p)
  {
    a18 = __p;
    operator delete(__p);
  }
  std::string __p = &a20;
  std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t MTLCreateCompressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = [MTLIOCompressor alloc];

  return (uint64_t)[(MTLIOCompressor *)v6 initWithType:a1 dst:a2 chunkSize:a3];
}

_DWORD *MTLIOCreateDecompressionContext(int a1, unint64_t a2)
{
  id v4 = malloc_type_malloc(0x78uLL, 0x10300400BF515CFuLL);
  _DWORD *v4 = a1;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 7) = 850045863;
  pread(a1, v4 + 2, 0x18uLL, 0);
  if (v4[2] == -1159983122)
  {
    uint64_t v5 = malloc_type_malloc(24 * *((void *)v4 + 3), 0x10000406CB41D2EuLL);
    *((void *)v4 + 5) = v5;
    pread(a1, v5, 24 * *((void *)v4 + 3), 24);
    if (a2 >= 5) {
      MTLReleaseAssertionFailure((uint64_t)"MTLIOCreateDecompressionContext", 385, (uint64_t)"0 && \"unsupported compression method\"", 0, v6, v7, v8, v9, v11);
    }
    v4[8] = dword_1828F0BE0[a2];
    *((void *)v4 + 6) = malloc_type_malloc(*((void *)v4 + 2), 0xA83483E4uLL);
  }
  else
  {
    free(v4);
    return 0;
  }
  return v4;
}

void MTLIODestroyDecompressionContext(uint64_t a1)
{
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 40));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));

  free((void *)a1);
}

uint64_t MTLIODecompressionContextStagingBufferSize(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = 0;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (a3 + a2) % v5;
  BOOL v7 = v6 == 0;
  unint64_t v8 = v5 - v6;
  if (v7) {
    unint64_t v8 = 0;
  }
  unint64_t v9 = a3 / v5;
  unint64_t v10 = (v8 + a3 + a2) / v5;
  if (v9 < v10)
  {
    uint64_t result = 0;
    uint64_t v11 = *(void *)(a1 + 40);
    do
      result += *(void *)(v11 + 24 * v9++ + 16);
    while (v9 != v10);
  }
  return result;
}

uint64_t MTLIODecompressionContextOffset(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return *(void *)(*(void *)(a1 + 40) + 24 * (a3 / *(void *)(a1 + 16)) + 8);
}

uint64_t MTLIODecompressionContextSize(uint64_t a1)
{
  return *(void *)(a1 + 24) * *(void *)(a1 + 16);
}

uint64_t MTLIODecompressionContextRead(uint64_t a1, uint8_t *__dst, uint8_t *__buf, size_t __nbyte, size_t a5, unint64_t a6, int a7)
{
  unint64_t v9 = __buf;
  unint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = a6 / v12;
  size_t v14 = (a6 + a5) % v12;
  unint64_t v15 = v12 - v14;
  if (!v14) {
    unint64_t v15 = 0;
  }
  dst_std::string::size_type size = *(void *)(a1 + 16);
  size_t v16 = (v15 + a6 + a5) / v12;
  if (a7) {
    pread(*(_DWORD *)a1, __buf, __nbyte, *(void *)(*(void *)(a1 + 40) + 24 * v13 + 8));
  }
  if (v13 < v16)
  {
    size_t v29 = v14;
    uint64_t v17 = 0;
    size_t v28 = v16 - 1;
    size_t v18 = dst_size - (a6 - v13 * dst_size);
    if (v18 >= a5) {
      size_t v18 = a5;
    }
    size_t v30 = v18;
    size_t v31 = a6 - v13 * dst_size;
    unint64_t v33 = v13;
    std::string v34 = (pthread_mutex_t *)(a1 + 56);
    unint64_t v19 = v13;
    size_t v32 = v16;
    while (1)
    {
      size_t v21 = v30;
      size_t v20 = v31;
      if (v19 == v13) {
        goto LABEL_12;
      }
      int v22 = 0;
      size_t v20 = 0;
      size_t v21 = v29;
      if (!v29)
      {
        size_t v23 = dst_size;
        uint64_t v24 = __dst;
        goto LABEL_13;
      }
      size_t v23 = dst_size;
      uint64_t v24 = __dst;
      if (v19 == v28)
      {
LABEL_12:
        uint64_t v24 = *(uint8_t **)(a1 + 48);
        pthread_mutex_lock(v34);
        int v22 = 1;
        size_t v23 = v21;
      }
LABEL_13:
      uint64_t v25 = *(void *)(a1 + 40);
      if (*(unsigned char *)(v25 + 24 * v19)) {
        compression_decode_buffer(v24, dst_size, v9, *(void *)(v25 + 24 * v19 + 16), 0, *(compression_algorithm *)(a1 + 32));
      }
      else {
        memcpy(v24, v9, dst_size);
      }
      uint64_t v26 = *(void *)(*(void *)(a1 + 40) + 24 * v19 + 16);
      if (v22)
      {
        memcpy(__dst, &v24[v20], v23);
        pthread_mutex_unlock(v34);
      }
      v17 += v23;
      v9 += v26;
      __dst += v23;
      ++v19;
      unint64_t v13 = v33;
      if (v19 == v32) {
        return v17;
      }
    }
  }
  return 0;
}

void MTLIODecompressionContextValidate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = (size_t *)(*(void *)(a1 + 40) + 16);
    off_t v4 = 24;
    while (!*((unsigned char *)v3 - 16))
    {
      size_t v5 = *v3;
      v3 += 3;
      v4 += v5;
      if (!--v1) {
        return;
      }
    }
    size_t v6 = *(void *)(a1 + 16);
    size_t v7 = *v3;
    unint64_t v8 = malloc_type_malloc(*v3, 0x50C8819DuLL);
    pread(*(_DWORD *)a1, v8, v7, v4);
    compression_decode_buffer(*(uint8_t **)(a1 + 48), v6, (const uint8_t *)v8, v7, 0, *(compression_algorithm *)(a1 + 32));
    free(v8);
  }
}

void std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int32x4_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      size_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__push_back_slow_path<std::vector<std::pair<unsigned char *,unsigned long>> const&>(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  size_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>(v11, *a2, a2[1], a2[1] - *a2);
  v15 += 24;
  std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1828271F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  id v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

char *std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_18282748C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibraryDebugLog(void)
{
  if (MTLPipelineLibraryDebugLog(void)::onceToken != -1) {
    dispatch_once(&MTLPipelineLibraryDebugLog(void)::onceToken, &__block_literal_global_8);
  }
  return MTLPipelineLibraryDebugLog(void)::pipelineLibLogObject;
}

os_log_t ___Z26MTLPipelineLibraryDebugLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.Metal", "PipelineLibrary");
  MTLPipelineLibraryDebugLog(void)::pipelineLibLogObject = (uint64_t)result;
  return result;
}

uint64_t MTLPipelineDescriptions::MTLPipelineDescriptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(unsigned char *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a2;
  *(void *)(a1 + 16) = dispatch_queue_create("pipelineDescriptions queue", 0);
  return a1;
}

unsigned __int8 *MTLSerializer::SerializedString::getValue(MTLSerializer::SerializedString *this)
{
  os_log_t result = *(unsigned __int8 **)this;
  if (result)
  {
    uint64_t v3 = *((void *)this + 1);
    if (!v3) {
LABEL_6:
    }
      abort();
    unint64_t v4 = result;
    while (*v4++)
    {
      if (!--v3) {
        goto LABEL_6;
      }
    }
  }
  return result;
}

void MTLPipelineDescriptions::initializeDescriptorHash(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke;
  v6[3] = &__block_descriptor_64_e5_v8__0l;
  void v6[4] = a1;
  v6[5] = a2;
  int v7 = a4;
  int v8 = a5;
  void v6[6] = a3;
  dispatch_sync(v5, v6);
}

void *SpecialPipelineDescriptorDeserializer::SpecialPipelineDescriptorDeserializer(void *result, uint64_t a2, uint64_t a3)
{
  *os_log_t result = &unk_1ECAC6A10;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void *MTLPipelineDescriptions::newComputePipelineDescriptor(MTLPipelineDescriptions *this, char *a2, _MTLPipelineCache *a3, NSError **a4)
{
  int v8 = (char *)this + 25;
  uint64_t v9 = (void *)((char *)this + 72);
  unint64_t v10 = *((void *)this + 2);
  blocuint64_t k = (void *)MEMORY[0x1E4F143A8];
  uint64_t v24 = 3221225472;
  uint64_t v25 = ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke;
  uint64_t v26 = &__block_descriptor_64_e5_v8__0l;
  long long v27 = this;
  size_t v28 = v8;
  uint64_t v30 = 0x600000002;
  size_t v29 = v9;
  dispatch_sync(v10, &block);
  std::string::basic_string[abi:ne180100]<0>(&block, a2);
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v9, (unsigned __int8 *)&block);
  char v12 = v11;
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v18 = objc_msgSend(NSString, "stringWithFormat:", @"compute pipeline %s not found in pipelineLibrary.", a2);
    if (!a4) {
      return 0;
    }
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v18 forKey:*MEMORY[0x1E4F28568]];
    size_t v20 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v19];
    uint64_t v17 = 0;
    *a4 = v20;
    return v17;
  }
  operator delete(block);
  if (!v12) {
    goto LABEL_6;
  }
LABEL_3:
  long long v22 = *(_OWORD *)(v12 + 40);
  blocuint64_t k = &unk_1ECAC6A10;
  uint64_t v24 = (uint64_t)this;
  uint64_t v25 = (void (*)(uint64_t))a3;
  uint64_t v17 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newComputePipelineDescriptor((uint64_t)&block, (unsigned __int8 **)&v22);
  if (!v17) {
    MTLReportFailure(0, "newComputePipelineDescriptor", 375, @"invalid compute pipeline descriptor %s in pipeline library", v13, v14, v15, v16, (uint64_t)a2);
  }
  return v17;
}

void sub_18282B4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineDescriptions::libraryPaths(MTLPipelineDescriptions *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (long long *)*((void *)this + 25);
  uint64_t v3 = (long long *)*((void *)this + 26);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      if (v5 >= a2[2])
      {
        unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v2);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v2);
        v5 += 24;
      }
      a2[1] = v5;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_18282B550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_18282B7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void SpecialPipelineDescriptorDeserializer::~SpecialPipelineDescriptorDeserializer(SpecialPipelineDescriptorDeserializer *this)
{
}

void std::vector<MTLPipelineDescriptions::LibraryReference>::__construct_one_at_end[abi:ne180100]<MTLPipelineDescriptions::LibraryReference const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(v4 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 8) = v4 + 32;
}

void sub_18282B8B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTLPipelineDescriptions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTLPipelineDescriptions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7508;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

void sub_18282C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t MTLCaptureEnabled()
{
  return 0;
}

uint64_t MTLCreateSimulatorDevice()
{
  if (MTLCreateSimulatorDevice::onceToken != -1) {
    dispatch_once(&MTLCreateSimulatorDevice::onceToken, &__block_literal_global_9);
  }
  return MTLCreateSimulatorDevice::device;
}

void __MTLCreateSimulatorDevice_block_invoke()
{
  MTLDeviceArrayInitialize();
  if (!_MTLIsInternalBuild()) {
    return;
  }
  uint64_t v0 = dlopen("/System/Library/PrivateFrameworks/MTLSimDriver.framework/MTLSimDriver", 5);
  if (!v0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      __MTLCreateSimulatorDevice_block_invoke_cold_1();
    }
    goto LABEL_12;
  }
  uint64_t v1 = (uint64_t (*)(void))dlsym(v0, "MTLCreateSimulatorDevice");
  if (!v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      __MTLCreateSimulatorDevice_block_invoke_cold_2();
    }
LABEL_12:
    MTLCreateSimulatorDevice::device = 0;
    return;
  }
  uint64_t v2 = (void *)v1();
  MTLCreateSimulatorDevice::device = (uint64_t)v2;
  if (v2)
  {
    MTLAddDevice(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

NSArray *MTLCopyAllDevices(void)
{
  MTLDeviceArrayInitialize();
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__6;
  uint64_t v7 = __Block_byref_object_dispose__6;
  uint64_t v8 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MTLCopyAllDevices_block_invoke;
  block[3] = &unk_1E5220550;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)_deviceArrayQueue, block);
  uint64_t v0 = (NSArray *)v4[5];
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __MTLCopyAllDevices_block_invoke(uint64_t a1)
{
  uint64_t result = [(id)_deviceArray copy];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void *_MTLCreateGLMetalDevice()
{
  id v0 = MTLCreateSystemDefaultDevice();
  uint64_t v1 = v0;
  if (v0)
  {
    if (wrapperType <= 5 && ((1 << wrapperType) & 0x32) != 0)
    {
      uint64_t v3 = (void *)[v0 originalObject];
      id v4 = v3;

      return v3;
    }
  }
  return v1;
}

BOOL MTLCountersLayerEnabled()
{
  if (initWrapperType(void)::pred != -1) {
    dispatch_once(&initWrapperType(void)::pred, &__block_literal_global_1259);
  }
  return wrapperType == 3;
}

uint64_t MTLWrapWithDebugDevice(uint64_t a1)
{
  id v2 = objc_alloc((Class)_MTLGetToolsClass(&cfstr_Mtldebugdevice.isa));

  return [v2 initWithBaseObject:a1 parent:0];
}

uint64_t MTLWrapWithTelemetryDevice(uint64_t a1)
{
  id v2 = objc_alloc((Class)_MTLGetToolsClass(&cfstr_Mtltelemetryde.isa));

  return [v2 initWithBaseObject:a1 parent:0];
}

uint64_t MTLWrapWithCountersDevice(uint64_t a1)
{
  id v2 = objc_alloc((Class)_MTLGetToolsClass(&cfstr_Mtlcountersdev.isa));

  return [v2 initWithBaseObject:a1 parent:0];
}

uint64_t MTLWrapWithGPUDebugDevice(void *a1)
{
  id v2 = (objc_class *)_MTLGetToolsClass(&cfstr_Mtlgpudebugdev.isa);
  if ((int)_MTLGetMTLCompilerLLVMVersionForDevice(a1) <= 32023) {
    id v2 = (objc_class *)_MTLGetToolsClass(&cfstr_Mtllegacysvdev.isa);
  }
  id v3 = [v2 alloc];

  return [v3 initWithBaseObject:a1 parent:0];
}

uint64_t MTLWrapWithAllDebugDevice(void *a1)
{
  uint64_t v1 = (void *)MTLWrapWithGPUDebugDevice(a1);
  uint64_t v2 = [objc_alloc((Class)_MTLGetToolsClass(&cfstr_Mtldebugdevice.isa)) initWithBaseObject:v1 parent:0];

  return v2;
}

uint64_t _MTLGetToolsClass(NSString *a1)
{
  uint64_t v2 = (void *)MEMORY[0x18530C9F0]();
  id v3 = (void *)[MEMORY[0x1E4F28B50] bundleWithIdentifier:@"com.apple.gpusw.MetalTools"];
  if (!v3)
  {
    uint64_t v4 = [NSString stringWithCString:"/System/Library/PrivateFrameworks/MetalTools.framework" encoding:1];
    id v3 = (void *)[MEMORY[0x1E4F28B50] bundleWithPath:v4];
  }
  uint64_t v5 = [v3 classNamed:a1];
  return v5;
}

uint64_t akPurgeableToIOAccelPurgeable(uint64_t result)
{
  if ((unint64_t)(result - 2) >= 3) {
    return 1;
  }
  else {
    return result;
  }
}

uint64_t ioAccelPurgeableToMTLPurgeable(int a1)
{
  uint64_t v1 = (a1 - 2);
  if (v1 >= 3) {
    return 1;
  }
  else {
    return v1 + 2;
  }
}

uint64_t _MTLCreateMeshRenderPipelineScriptFromDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLMeshRenderPipelineDescriptor *a2)
{
  if ([(MTLMeshRenderPipelineDescriptor *)a2 meshFunction])
  {
    uint64_t v4 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLMeshRenderPipelineDescriptor meshFunction](a2, "meshFunction"), "name"), "UTF8String");
    size_t v5 = strlen(v4);
    int String = flatbuffers::FlatBufferBuilder::CreateString(a1, v4, v5);
  }
  else
  {
    int String = 0;
  }
  if ([(MTLMeshRenderPipelineDescriptor *)a2 objectFunction])
  {
    uint64_t v6 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLMeshRenderPipelineDescriptor objectFunction](a2, "objectFunction"), "name"), "UTF8String");
    size_t v7 = strlen(v6);
    id v8 = [(MTLMeshRenderPipelineDescriptor *)a2 fragmentFunction];
  }
  else
  {
    id v8 = [(MTLMeshRenderPipelineDescriptor *)a2 fragmentFunction];
  }
  if (v8)
  {
    uint64_t v9 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLMeshRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction"), "name"), "UTF8String");
    size_t v10 = strlen(v9);
    int v11 = flatbuffers::FlatBufferBuilder::CreateString(a1, v9, v10);
  }
  else
  {
    int v11 = 0;
  }
  char v12 = [(MTLMeshRenderPipelineDescriptor *)a2 _descriptorPrivate];
  int FragmentColorAttachmentDescriptorVector = createFragmentColorAttachmentDescriptorVector(a1, v12->attachments);
  int PipelineBufferDescriptorVector = createPipelineBufferDescriptorVector(a1, v12->fragmentBuffers);
  BOOL v15 = 1;
  BOOL v16 = 1;
  if ((*((unsigned char *)&v12->var1.var0 + 4) & 4) == 0) {
    BOOL v16 = [(NSArray *)[(MTLLinkedFunctions *)v12->fragmentLinkedFunctions binaryFunctions] count] != 0;
  }
  int LinkedFunctions = createLinkedFunctions(a1, v12->fragmentLinkedFunctions);
  *((unsigned char *)a1 + 70) = 1;
  int v18 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 22, FragmentColorAttachmentDescriptorVector);
  int depthAttachmentPixelFormat = v12->depthAttachmentPixelFormat;
  if ((depthAttachmentPixelFormat - 1) >= 0x285) {
    LOWORD(depthAttachmentPixelFormat) = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 24, (unsigned __int16)depthAttachmentPixelFormat, 0);
  int stencilAttachmentPixelFormat = v12->stencilAttachmentPixelFormat;
  if ((stencilAttachmentPixelFormat - 1) >= 0x285) {
    LOWORD(stencilAttachmentPixelFormat) = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 26, (unsigned __int16)stencilAttachmentPixelFormat, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 8, v12->var1.miscHash[0] & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 10, (LOBYTE(v12->var1.miscHash[0]) >> 1) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 6, (LOBYTE(v12->var1.miscHash[0]) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 12, v12->rasterSampleCount, 1);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 28, PipelineBufferDescriptorVector);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 30, v12->var1.miscHash[0] >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 14, v12->colorSampleCount, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 16, v12->sampleMask, -1);
  flatbuffers::FlatBufferBuilder::AddElement<float>(a1, 18, v12->var0.sampleCoverage, 1.0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, (LOBYTE(v12->var1.miscHash[0]) >> 5) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 34, LOBYTE(v12->textureWriteRoundingMode), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 36, (v12->var1.miscHash[0] >> 28) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 38, *((unsigned char *)&v12->var1.var0 + 3) & 0xF, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 40, (v12->var1.miscHash[0] >> 23) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 42, (v12->var1.miscHash[0] >> 20) & 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 44, (v12->var1.miscHash[0] >> 11) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 46, (LOBYTE(v12->var1.miscHash[0]) >> 3) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 48, (LOBYTE(v12->var1.miscHash[0]) >> 4) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 52, v12->fragmentDepthCompareClampMask, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 50, (v12->var1.miscHash[0] >> 30) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 54, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 32, v16, 0);
  int v21 = flatbuffers::FlatBufferBuilder::EndTable(a1, v18);
  int v22 = createPipelineBufferDescriptorVector(a1, v12->objectBuffers);
  if ((*((unsigned char *)&v12->var1.var0 + 4) & 1) == 0) {
    BOOL v15 = [(NSArray *)[(MTLLinkedFunctions *)v12->objectLinkedFunctions binaryFunctions] count] != 0;
  }
  int v23 = createLinkedFunctions(a1, v12->objectLinkedFunctions);
  *((unsigned char *)a1 + 70) = 1;
  int v24 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 18, v22);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 8, v12->pipelineMemoryLength, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 16, LOBYTE(v12->var1.miscHash[0]) >> 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 12, v12->maxObjectStackCallDepth, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 24, LOBYTE(v12->textureWriteRoundingMode), 0);
  uint64_t v25 = (*(void *)&v12->var1 >> 35) & 0xFLL;
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 28, v23);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 14, v25, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, v12->var1.miscHash[0] >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 22, v15, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, v12->maxTotalThreadsPerObjectThreadgroup, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 26, (v12->var1.miscHash[0] >> 30) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 10, v12->maxTotalThreadgroupsPerMeshGrid, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, (*(void *)&v12->var1 >> 39) & 1, 0);
  int v26 = flatbuffers::FlatBufferBuilder::EndTable(a1, v24);
  int v27 = createPipelineBufferDescriptorVector(a1, v12->meshBuffers);
  BOOL v28 = 1;
  if ((*((unsigned char *)&v12->var1.var0 + 4) & 2) == 0) {
    BOOL v28 = [(NSArray *)[(MTLLinkedFunctions *)v12->meshLinkedFunctions binaryFunctions] count] != 0;
  }
  int v29 = createLinkedFunctions(a1, v12->meshLinkedFunctions);
  *((unsigned char *)a1 + 70) = 1;
  int v30 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 18, v27);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 12, (LOBYTE(v12->var1.miscHash[0]) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 8, v12->pipelineMemoryLength, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 16, LOBYTE(v12->var1.miscHash[0]) >> 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 10, v12->maxMeshStackCallDepth, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 26, (v12->var1.miscHash[0] >> 12), 255);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 24, LOBYTE(v12->textureWriteRoundingMode), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 14, (*(void *)&v12->var1 >> 35) & 0xFLL, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, v12->var1.miscHash[0] >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 30, v29);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 22, v28, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, v12->maxTotalThreadsPerMeshThreadgroup, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 28, (v12->var1.miscHash[0] >> 30) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, (*(void *)&v12->var1 >> 40) & 1, 0);
  int v31 = flatbuffers::FlatBufferBuilder::EndTable(a1, v30);
  *((unsigned char *)a1 + 70) = 1;
  int v32 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v39);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 8, v11);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 12, v31);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v26);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 14, v21);
  int v33 = flatbuffers::FlatBufferBuilder::EndTable(a1, v32);
  uint64_t v41 = 0x300000000;
  int v42 = 0;
  *((unsigned char *)a1 + 70) = 1;
  int v34 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v33);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(a1, 4, &v41);
  unsigned int v35 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 4);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 8, v35);
  unsigned int v36 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 6, v36);
  int v37 = flatbuffers::FlatBufferBuilder::EndTable(a1, v34);
  flatbuffers::FlatBufferBuilder::Finish(a1, v37, "AIRP", 0);
  return *((void *)a1 + 6) + **((unsigned int **)a1 + 6);
}

uint64_t _MTLCreateFuncionScriptFromFunctionType(flatbuffers::FlatBufferBuilder *this, MTLFunctionType a2)
{
  uint64_t v10 = 0x300000000;
  int v11 = 0;
  if (a2 - 7 < 0xFFFFFFFFFFFFFFFELL) {
    return 0;
  }
  if (a2 == MTLFunctionTypeVisible)
  {
    char v4 = 5;
  }
  else
  {
    if (a2 != MTLFunctionTypeIntersection)
    {
      int v9 = 0;
      goto LABEL_9;
    }
    char v4 = 6;
  }
  *((unsigned char *)this + 70) = 1;
  int v5 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_DWORD *)this + 10));
  *((unsigned char *)this + 70) = 1;
  int v6 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(this, 10, v5);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(this, 4, &v10);
  unsigned int v7 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, v4);
  flatbuffers::FlatBufferBuilder::TrackField(this, 8, v7);
  unsigned int v8 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 2);
  flatbuffers::FlatBufferBuilder::TrackField(this, 6, v8);
  int v9 = flatbuffers::FlatBufferBuilder::EndTable(this, v6);
LABEL_9:
  flatbuffers::FlatBufferBuilder::Finish(this, v9, "AIRF", 0);
  return *((void *)this + 6) + **((unsigned int **)this + 6);
}

void MTLCalculateStitchingHash(int *a1@<X0>, long long *a2@<X1>, _OWORD *a3@<X8>)
{
  id v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 < 9u)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = (int *)v3[4];
    if (v4) {
      char v4 = (int *)((char *)v4 + (void)a1 + *(unsigned int *)((char *)v4 + (void)a1));
    }
  }
  int v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 7u && (uint64_t v6 = v5[3]) != 0) {
    unsigned int v7 = (int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
  }
  else {
    unsigned int v7 = 0;
  }
  unsigned int v8 = (unsigned int *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6));
  uint64_t v9 = *v8;
  v310 = 0;
  v311 = 0;
  v312 = 0;
  uint64_t v11 = (uint64_t)v8 + v9 + 4;
  uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
  if (v10)
  {
    char v12 = 0;
    uint64_t v13 = (unsigned int *)(v11 + 4 * v10);
    uint64_t v14 = (unsigned int *)v11;
    do
    {
      BOOL v15 = (char *)v14 + *v14;
      if (v12 >= v312)
      {
        uint64_t v16 = (v12 - (char *)v310) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = (v312 - (char *)v310) >> 2;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if ((unint64_t)(v312 - (char *)v310) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v312, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        size_t v20 = &v19[8 * v16];
        *(void *)size_t v20 = v15;
        char v12 = v20 + 8;
        int v22 = v310;
        int v21 = v311;
        if (v311 != v310)
        {
          do
          {
            uint64_t v23 = (uint64_t)*--v21;
            *((void *)v20 - 1) = v23;
            v20 -= 8;
          }
          while (v21 != v22);
          int v21 = v310;
        }
        v310 = (const Air::FunctionStitching::Node **)v20;
        v311 = (const Air::FunctionStitching::Node **)v12;
        v312 = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)char v12 = v15;
        v12 += 8;
      }
      v311 = (const Air::FunctionStitching::Node **)v12;
      ++v14;
    }
    while (v14 != v13);
    int v24 = v310;
    if (v310 != (const Air::FunctionStitching::Node **)v12)
    {
      uint64_t v25 = v310;
      while (1)
      {
        int v26 = *v25;
        if (AirReflection::Node::node_as_KernelFunction(*v25)
          || Air::FunctionStitching::Node::node_as_EarlyReturnNode(v26))
        {
          break;
        }
        ++v25;
        ++v24;
        if (v25 == (const Air::FunctionStitching::Node **)v12) {
          goto LABEL_41;
        }
      }
      int v27 = (AirReflection::Node **)(v12 - 8);
      if (v25 == v27)
      {
LABEL_40:
        char v12 = (char *)v25;
      }
      else
      {
        uint64_t v28 = (char *)v27 - (char *)v24;
        int v29 = v27;
        while (1)
        {
          int v30 = *v29;
          if (!AirReflection::Node::node_as_KernelFunction(*v29)
            && !Air::FunctionStitching::Node::node_as_EarlyReturnNode(v30))
          {
            break;
          }
          --v29;
          --v27;
          v28 -= 8;
          if (v25 == v29) {
            goto LABEL_40;
          }
        }
        if (v28 < 17)
        {
          int v275 = 0;
          uint64_t v277 = 0;
        }
        else
        {
          int v275 = (AirReflection::Node **)std::get_temporary_buffer[abi:ne180100]<objc_object  {objcproto24MTLFunctionStitchingNode}*>((v28 >> 3) + 1);
          uint64_t v277 = v276;
        }
        char v12 = std::__stable_partition_impl<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_0 &,std::__wrap_iter<Air::FunctionStitching::Node const**>,long,std::pair<Air::FunctionStitching::Node const**,long>>(v24, v27, (v28 >> 3) + 1, v275, v277);
        if (v275) {
          operator delete(v275);
        }
      }
    }
  }
  else
  {
    char v12 = 0;
  }
LABEL_41:
  int64_t v31 = (v12 - (char *)v310) >> 3;
  unint64_t v32 = 126 - 2 * __clz(v31);
  if (v12 == (char *)v310) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  std::__introsort<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,false>((uint64_t)v310, (const Air::FunctionStitching::Node **)v12, v33, 1);
  memset(v308, 0, sizeof(v308));
  int v309 = 1065353216;
  uint64_t v305 = 0;
  long long v306 = 0;
  long long v307 = 0;
  int v34 = v310;
  if (v311 != v310)
  {
    int64_t v35 = 0;
    unsigned int v36 = 0;
    while (1)
    {
      if (!v36 || v31 <= v35) {
        goto LABEL_51;
      }
      NodeKey::NodeKey((NodeKey *)&v293, v34[v35]);
      NodeKey::NodeKey((NodeKey *)&v302, v310[v36 - 1]);
      if (!NodeKey::operator==((int *)&v293, (uint64_t)&v302)) {
        break;
      }
      int v37 = v306;
LABEL_68:
      unint64_t v47 = v305;
      long long v293 = &v310[v35];
      *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const* const&>,std::tuple<>>((uint64_t)v308, v293, (uint64_t)&std::piecewise_construct, &v293)+ 6) = ((unint64_t)(v37 - v47) >> 3) - 1;
      int v34 = v310;
      int64_t v35 = ++v36;
      if (v36 >= (unint64_t)(v311 - v310))
      {
        size_t v48 = (Air::FunctionStitching::Node **)v305;
        ssize_t v49 = (Air::FunctionStitching::Node **)v306;
        goto LABEL_71;
      }
    }
    int v34 = v310;
LABEL_51:
    off_t v38 = v306;
    if (v306 >= v307)
    {
      uint64_t v39 = (v306 - v305) >> 3;
      if ((unint64_t)(v39 + 1) >> 61) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v40 = (v307 - v305) >> 2;
      if (v40 <= v39 + 1) {
        unint64_t v40 = v39 + 1;
      }
      if ((unint64_t)(v307 - v305) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41) {
        int v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v307, v41);
      }
      else {
        int v42 = 0;
      }
      uint64_t v43 = &v42[8 * v39];
      *(void *)uint64_t v43 = v34[v35];
      int v37 = v43 + 8;
      size_t v45 = v305;
      size_t v44 = v306;
      if (v306 != v305)
      {
        do
        {
          uint64_t v46 = *((void *)v44 - 1);
          v44 -= 8;
          *((void *)v43 - 1) = v46;
          v43 -= 8;
        }
        while (v44 != v45);
        size_t v44 = v305;
      }
      uint64_t v305 = v43;
      long long v306 = v37;
      long long v307 = &v42[8 * v41];
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *(void *)long long v306 = v34[v35];
      int v37 = v38 + 8;
    }
    long long v306 = v37;
    goto LABEL_68;
  }
  ssize_t v49 = 0;
  size_t v48 = 0;
LABEL_71:
  long long v293 = 0;
  char v294 = 0;
  long long v295 = xmmword_1828D6640;
  long long v296 = 0u;
  long long v297 = 0u;
  uint64_t v298 = 0;
  uint64_t v299 = 1;
  __int16 v300 = 256;
  uint64_t v301 = 0;
  long long v302 = 0;
  long long v303 = 0;
  v304[0] = 0;
  if (v48 != v49)
  {
    while (1)
    {
      uint64_t v50 = *v48;
      int v51 = (unsigned __int16 *)((char *)*v48 - *(int *)*v48);
      if (*v51 < 5u) {
        break;
      }
      uint64_t v52 = v51[2];
      if (!v52) {
        break;
      }
      int v53 = *(_DWORD *)((char *)v50 + v52);
      if (v53 == 11)
      {
        LODWORD(v286) = 0;
        std::string __p = 0;
        long long v291 = 0;
        long long v292 = 0;
        int64_t v113 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(v50);
        uint64_t v114 = v113;
        uint64_t v115 = *v113;
        uint64_t v116 = -v115;
        long long v117 = (unsigned __int16 *)((char *)v113 - v115);
        if (*v117 >= 5u)
        {
          unsigned __int16 v118 = v117[2];
          if (v118)
          {
            unint64_t v119 = (unsigned int *)(v11 + 4 * *(unsigned int *)((char *)v113 + v118));
            uint64_t v284 = (uint64_t)v119 + *v119;
            v287 = &v284;
            LODWORD(v286) = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v284, (uint64_t)&std::piecewise_construct, (void **)&v287)+ 6);
            uint64_t v116 = -(uint64_t)*v114;
          }
        }
        int v120 = (unsigned __int16 *)((char *)v114 + v116);
        if (*v120 >= 7u)
        {
          uint64_t v121 = v120[3];
          if (v121)
          {
            unint64_t v122 = (unsigned int *)((char *)v114 + v121);
            uint64_t v123 = *v122;
            uint64_t v125 = (unsigned int *)((char *)v122 + v123 + 4);
            uint64_t v124 = *(unsigned int *)((char *)v122 + v123);
            if (v124)
            {
              uint64_t v126 = &v125[v124];
              do
              {
                uint64_t v284 = v11 + 4 * *v125 + *(unsigned int *)(v11 + 4 * *v125);
                v287 = &v284;
                int v127 = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v284, (uint64_t)&std::piecewise_construct, (void **)&v287)+ 6);
                unint64_t v128 = v291;
                if (v291 >= v292)
                {
                  int v130 = (char *)__p;
                  uint64_t v131 = (v291 - (unsigned char *)__p) >> 2;
                  unint64_t v132 = v131 + 1;
                  if ((unint64_t)(v131 + 1) >> 62) {
                    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v133 = v292 - (unsigned char *)__p;
                  if ((v292 - (unsigned char *)__p) >> 1 > v132) {
                    unint64_t v132 = v133 >> 1;
                  }
                  if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v134 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v134 = v132;
                  }
                  if (v134)
                  {
                    uint64_t v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v292, v134);
                    int v130 = (char *)__p;
                    unint64_t v128 = v291;
                  }
                  else
                  {
                    uint64_t v135 = 0;
                  }
                  uint64_t v136 = &v135[4 * v131];
                  *(_DWORD *)uint64_t v136 = v127;
                  unint64_t v129 = v136 + 4;
                  while (v128 != v130)
                  {
                    int v137 = *((_DWORD *)v128 - 1);
                    v128 -= 4;
                    *((_DWORD *)v136 - 1) = v137;
                    v136 -= 4;
                  }
                  std::string __p = v136;
                  long long v291 = v129;
                  long long v292 = &v135[4 * v134];
                  if (v130) {
                    operator delete(v130);
                  }
                }
                else
                {
                  *(_DWORD *)long long v291 = v127;
                  unint64_t v129 = v128 + 4;
                }
                long long v291 = v129;
                ++v125;
              }
              while (v125 != v126);
            }
          }
        }
        if (v291 == __p) {
          unint64_t v138 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        }
        else {
          unint64_t v138 = (const unsigned __int8 *)__p;
        }
        int v139 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)&v293, v138, (v291 - (unsigned char *)__p) >> 2);
        BYTE6(v298) = 1;
        __int16 v140 = v297;
        __int16 v141 = v296;
        __int16 v142 = WORD4(v296);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 6, v139);
        flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)&v293, 4, &v286);
        int v143 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v141 - v140 + v142);
        BYTE6(v298) = 1;
        __int16 v144 = v297;
        __int16 v145 = v296;
        __int16 v146 = WORD4(v296);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 6, v143);
        unsigned int v147 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)&v293, 11);
        flatbuffers::FlatBufferBuilder::TrackField(&v293, 4, v147);
        int v148 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v145 - v144 + v146);
        int v149 = v148;
        long long v150 = v303;
        if ((unint64_t)v303 >= v304[0])
        {
          uint64_t v165 = v302;
          uint64_t v166 = (v303 - v302) >> 2;
          unint64_t v167 = v166 + 1;
          if ((unint64_t)(v166 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v168 = v304[0] - (void)v302;
          if ((uint64_t)(v304[0] - (void)v302) >> 1 > v167) {
            unint64_t v167 = v168 >> 1;
          }
          if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v169 = v167;
          }
          if (v169)
          {
            long long v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v304, v169);
            uint64_t v165 = v302;
            long long v150 = v303;
          }
          else
          {
            long long v170 = 0;
          }
          int v177 = &v170[4 * v166];
          *(_DWORD *)int v177 = v149;
          unint64_t v151 = v177 + 4;
          while (v150 != v165)
          {
            int v178 = *((_DWORD *)v150 - 1);
            v150 -= 4;
            *((_DWORD *)v177 - 1) = v178;
            v177 -= 4;
          }
          long long v302 = v177;
          long long v303 = v151;
          v304[0] = &v170[4 * v169];
          if (v165) {
            operator delete(v165);
          }
        }
        else
        {
          *(_DWORD *)long long v303 = v148;
          unint64_t v151 = v150 + 4;
        }
        long long v303 = v151;
      }
      else
      {
        if (v53 != 2) {
          break;
        }
        std::string __p = 0;
        long long v291 = 0;
        long long v292 = 0;
        v287 = 0;
        v288 = 0;
        int v289 = 0;
        MTLIOCompressionStatus v54 = (const char *)AirReflection::Node::node_as_KernelFunction(v50);
        uint64_t v55 = v54;
        uint64_t v56 = *(int *)v54;
        uint64_t v57 = -v56;
        int v58 = &v54[-v56];
        if (*(unsigned __int16 *)v58 >= 7u)
        {
          uint64_t v59 = *((unsigned __int16 *)v58 + 3);
          if (v59)
          {
            int v60 = &v54[v59];
            uint64_t v61 = *(unsigned int *)v60;
            uint64_t v63 = (unsigned int *)&v60[v61 + 4];
            uint64_t v62 = *(unsigned int *)&v60[v61];
            if (v62)
            {
              uint64_t v64 = &v63[v62];
              do
              {
                uint64_t v286 = v11 + 4 * *v63 + *(unsigned int *)(v11 + 4 * *v63);
                uint64_t v284 = (uint64_t)&v286;
                int v65 = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v286, (uint64_t)&std::piecewise_construct, (void **)&v284)+ 6);
                uint64_t v66 = v291;
                if (v291 >= v292)
                {
                  uint64_t v68 = (char *)__p;
                  uint64_t v69 = (v291 - (unsigned char *)__p) >> 2;
                  unint64_t v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62) {
                    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v71 = v292 - (unsigned char *)__p;
                  if ((v292 - (unsigned char *)__p) >> 1 > v70) {
                    unint64_t v70 = v71 >> 1;
                  }
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v72 = v70;
                  }
                  if (v72)
                  {
                    long long v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v292, v72);
                    uint64_t v68 = (char *)__p;
                    uint64_t v66 = v291;
                  }
                  else
                  {
                    long long v73 = 0;
                  }
                  uint64_t v74 = &v73[4 * v69];
                  *(_DWORD *)uint64_t v74 = v65;
                  uint64_t v67 = v74 + 4;
                  while (v66 != v68)
                  {
                    int v75 = *((_DWORD *)v66 - 1);
                    v66 -= 4;
                    *((_DWORD *)v74 - 1) = v75;
                    v74 -= 4;
                  }
                  std::string __p = v74;
                  long long v291 = v67;
                  long long v292 = &v73[4 * v72];
                  if (v68) {
                    operator delete(v68);
                  }
                }
                else
                {
                  *(_DWORD *)long long v291 = v65;
                  uint64_t v67 = v66 + 4;
                }
                long long v291 = v67;
                ++v63;
              }
              while (v63 != v64);
              uint64_t v57 = -(uint64_t)*(int *)v55;
            }
          }
        }
        unint64_t v76 = &v55[v57];
        if (*(unsigned __int16 *)v76 >= 9u)
        {
          uint64_t v77 = *((unsigned __int16 *)v76 + 4);
          if (v77)
          {
            unint64_t v78 = &v55[v77];
            uint64_t v79 = *(unsigned int *)v78;
            uint64_t v81 = (unsigned int *)&v78[v79 + 4];
            uint64_t v80 = *(unsigned int *)&v78[v79];
            if (v80)
            {
              long long v82 = &v81[v80];
              do
              {
                uint64_t v286 = v11 + 4 * *v81 + *(unsigned int *)(v11 + 4 * *v81);
                uint64_t v284 = (uint64_t)&v286;
                int v83 = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v286, (uint64_t)&std::piecewise_construct, (void **)&v284)+ 6);
                long long v84 = v288;
                if (v288 >= v289)
                {
                  size_t v86 = (char *)v287;
                  uint64_t v87 = (v288 - (unsigned char *)v287) >> 2;
                  unint64_t v88 = v87 + 1;
                  if ((unint64_t)(v87 + 1) >> 62) {
                    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v89 = v289 - (unsigned char *)v287;
                  if ((v289 - (unsigned char *)v287) >> 1 > v88) {
                    unint64_t v88 = v89 >> 1;
                  }
                  if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v90 = v88;
                  }
                  if (v90)
                  {
                    long long v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v289, v90);
                    size_t v86 = (char *)v287;
                    long long v84 = v288;
                  }
                  else
                  {
                    long long v91 = 0;
                  }
                  long long v92 = &v91[4 * v87];
                  *(_DWORD *)long long v92 = v83;
                  size_t v85 = v92 + 4;
                  while (v84 != v86)
                  {
                    int v93 = *((_DWORD *)v84 - 1);
                    v84 -= 4;
                    *((_DWORD *)v92 - 1) = v93;
                    v92 -= 4;
                  }
                  v287 = v92;
                  v288 = v85;
                  int v289 = &v91[4 * v90];
                  if (v86) {
                    operator delete(v86);
                  }
                }
                else
                {
                  *(_DWORD *)v288 = v83;
                  size_t v85 = v84 + 4;
                }
                v288 = v85;
                ++v81;
              }
              while (v81 != v82);
            }
          }
        }
        if (v291 == __p) {
          unint64_t v94 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        }
        else {
          unint64_t v94 = (const unsigned __int8 *)__p;
        }
        int v95 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)&v293, v94, (v291 - (unsigned char *)__p) >> 2);
        if (v288 == v287) {
          uint64_t v96 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        }
        else {
          uint64_t v96 = (const unsigned __int8 *)v287;
        }
        int v97 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)&v293, v96, (v288 - (unsigned char *)v287) >> 2);
        BOOL v98 = &v55[-*(int *)v55];
        if (*(unsigned __int16 *)v98 >= 5u && (uint64_t v99 = *((unsigned __int16 *)v98 + 2)) != 0) {
          int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)&v293, &v55[v99 + 4 + *(unsigned int *)&v55[v99]], *(unsigned int *)&v55[v99 + *(unsigned int *)&v55[v99]]);
        }
        else {
          int String = 0;
        }
        int v152 = v97;
        BYTE6(v298) = 1;
        __int16 v153 = v297;
        __int16 v154 = v296;
        __int16 v155 = WORD4(v296);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 8, v152);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 6, v95);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 4, String);
        int v156 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v154 - v153 + v155);
        BYTE6(v298) = 1;
        __int16 v157 = v297;
        __int16 v158 = v296;
        __int16 v159 = WORD4(v296);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 6, v156);
        unsigned int v160 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)&v293, 2);
        flatbuffers::FlatBufferBuilder::TrackField(&v293, 4, v160);
        int v161 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v158 - v157 + v159);
        int v162 = v161;
        unint64_t v163 = v303;
        if ((unint64_t)v303 >= v304[0])
        {
          unint64_t v171 = v302;
          uint64_t v172 = (v303 - v302) >> 2;
          unint64_t v173 = v172 + 1;
          if ((unint64_t)(v172 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v174 = v304[0] - (void)v302;
          if ((uint64_t)(v304[0] - (void)v302) >> 1 > v173) {
            unint64_t v173 = v174 >> 1;
          }
          if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v175 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v175 = v173;
          }
          if (v175)
          {
            unint64_t v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v304, v175);
            unint64_t v171 = v302;
            unint64_t v163 = v303;
          }
          else
          {
            unint64_t v176 = 0;
          }
          unint64_t v179 = &v176[4 * v172];
          *(_DWORD *)unint64_t v179 = v162;
          int v164 = v179 + 4;
          while (v163 != v171)
          {
            int v180 = *((_DWORD *)v163 - 1);
            v163 -= 4;
            *((_DWORD *)v179 - 1) = v180;
            v179 -= 4;
          }
          long long v302 = v179;
          long long v303 = v164;
          v304[0] = &v176[4 * v175];
          if (v171) {
            operator delete(v171);
          }
        }
        else
        {
          *(_DWORD *)long long v303 = v161;
          int v164 = v163 + 4;
        }
        long long v303 = v164;
        if (v287)
        {
          v288 = (char *)v287;
          operator delete(v287);
        }
      }
      if (__p)
      {
        long long v291 = (char *)__p;
        operator delete(__p);
      }
LABEL_145:
      if (++v48 == v49) {
        goto LABEL_212;
      }
    }
    int v101 = Air::FunctionStitching::CloneNode<Air::FunctionStitching::Node>((uint64_t)&v293, v50);
    int v102 = v101;
    unint64_t v103 = v303;
    if ((unint64_t)v303 >= v304[0])
    {
      int v105 = v302;
      uint64_t v106 = (v303 - v302) >> 2;
      unint64_t v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v108 = v304[0] - (void)v302;
      if ((uint64_t)(v304[0] - (void)v302) >> 1 > v107) {
        unint64_t v107 = v108 >> 1;
      }
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v109 = v107;
      }
      if (v109)
      {
        uint64_t v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v304, v109);
        int v105 = v302;
        unint64_t v103 = v303;
      }
      else
      {
        uint64_t v110 = 0;
      }
      int64_t v111 = &v110[4 * v106];
      *(_DWORD *)int64_t v111 = v102;
      unint64_t v104 = v111 + 4;
      while (v103 != v105)
      {
        int v112 = *((_DWORD *)v103 - 1);
        v103 -= 4;
        *((_DWORD *)v111 - 1) = v112;
        v111 -= 4;
      }
      long long v302 = v111;
      long long v303 = v104;
      v304[0] = &v110[4 * v109];
      if (v105) {
        operator delete(v105);
      }
    }
    else
    {
      *(_DWORD *)long long v303 = v101;
      unint64_t v104 = v103 + 4;
    }
    long long v303 = v104;
    goto LABEL_145;
  }
LABEL_212:
  int v181 = 0;
  __n128 v182 = a1;
  uint64_t v183 = *a1;
  long long v184 = (char *)a1 - v183;
  if (*(unsigned __int16 *)((char *)a1 - v183) >= 9u)
  {
    int v181 = (int *)*((unsigned __int16 *)v184 + 4);
    if (*((_WORD *)v184 + 4)) {
      int v181 = (int *)((char *)v181 + (void)a1 + *(unsigned int *)((char *)v181 + (void)a1));
    }
  }
  uint64_t v185 = -v183;
  long long v186 = (unsigned __int16 *)((char *)v181 - *v181);
  if (*v186 >= 7u && (uint64_t v187 = v186[3]) != 0) {
    long long v188 = (char *)v181 + v187 + *(unsigned int *)((char *)v181 + v187);
  }
  else {
    long long v188 = 0;
  }
  __n128 v189 = &v188[-*(int *)v188];
  if (*(unsigned __int16 *)v189 >= 5u && (uint64_t v190 = *((unsigned __int16 *)v189 + 2)) != 0)
  {
    int v191 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)&v293, &v188[v190 + 4 + *(unsigned int *)&v188[v190]], *(unsigned int *)&v188[v190 + *(unsigned int *)&v188[v190]]);
    uint64_t v185 = -(uint64_t)*a1;
  }
  else
  {
    int v191 = 0;
  }
  __n128 v192 = 0;
  std::string __p = 0;
  long long v291 = 0;
  long long v292 = 0;
  __n128 v193 = (unsigned __int16 *)((char *)a1 + v185);
  if (*v193 >= 9u)
  {
    uint64_t v194 = v193[4];
    if (v194) {
      __n128 v192 = (int *)((char *)a1 + v194 + *(unsigned int *)((char *)a1 + v194));
    }
    else {
      __n128 v192 = 0;
    }
  }
  __n128 v195 = (unsigned __int16 *)((char *)v192 - *v192);
  if (*v195 < 7u)
  {
    long long v196 = 0;
  }
  else
  {
    long long v196 = (int *)v195[3];
    if (v196) {
      long long v196 = (int *)((char *)v196 + (void)v192 + *(unsigned int *)((char *)v196 + (void)v192));
    }
  }
  long long v197 = (unsigned __int16 *)((char *)v196 - *v196);
  if (*v197 >= 0xBu && (uint64_t v198 = v197[5]) != 0)
  {
    __n128 v199 = (unsigned int *)((char *)v196 + v198);
    uint64_t v200 = *v199;
    long long v202 = (unsigned int *)((char *)v199 + v200 + 4);
    uint64_t v201 = *(unsigned int *)((char *)v199 + v200);
    if (v201)
    {
      long long v203 = &v202[v201];
      do
      {
        int v204 = Mtl::FunctionStitching::CloneAttribute<Mtl::FunctionStitching::Attribute>((uint64_t)&v293, (Mtl::FunctionStitching::Attribute *)((char *)v202 + *v202));
        int v205 = v204;
        int v206 = v291;
        if (v291 >= v292)
        {
          int v208 = (char *)__p;
          uint64_t v209 = (v291 - (unsigned char *)__p) >> 2;
          unint64_t v210 = v209 + 1;
          if ((unint64_t)(v209 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v211 = v292 - (unsigned char *)__p;
          if ((v292 - (unsigned char *)__p) >> 1 > v210) {
            unint64_t v210 = v211 >> 1;
          }
          if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v212 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v212 = v210;
          }
          if (v212)
          {
            size_t v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v292, v212);
            int v208 = (char *)__p;
            int v206 = v291;
          }
          else
          {
            size_t v213 = 0;
          }
          int v214 = &v213[4 * v209];
          *(_DWORD *)int v214 = v205;
          long long v207 = v214 + 4;
          while (v206 != v208)
          {
            int v215 = *((_DWORD *)v206 - 1);
            v206 -= 4;
            *((_DWORD *)v214 - 1) = v215;
            v214 -= 4;
          }
          std::string __p = v214;
          long long v291 = v207;
          long long v292 = &v213[4 * v212];
          if (v208) {
            operator delete(v208);
          }
        }
        else
        {
          *(_DWORD *)long long v291 = v204;
          long long v207 = v206 + 4;
        }
        long long v291 = v207;
        ++v202;
      }
      while (v202 != v203);
      uint64_t v216 = (char *)__p;
    }
    else
    {
      long long v207 = 0;
      uint64_t v216 = 0;
    }
    __n128 v182 = a1;
  }
  else
  {
    long long v207 = 0;
    uint64_t v216 = 0;
  }
  if (v207 == v216) {
    uint64_t v217 = (char *)&flatbuffers::data<flatbuffers::Offset<Air::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Air::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Air::FunctionStitching::Attribute>> const&)::t;
  }
  else {
    uint64_t v217 = v216;
  }
  int v218 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)&v293, (uint64_t)v217, (v207 - v216) >> 2);
  if (v303 == v302) {
    v219 = (char *)&flatbuffers::data<flatbuffers::Offset<Air::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Air::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Air::FunctionStitching::Node>> const&)::t;
  }
  else {
    v219 = v302;
  }
  int v220 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)&v293, (uint64_t)v219, (v303 - v302) >> 2);
  int v221 = 0;
  LODWORD(v286) = 0;
  uint64_t v222 = *v182;
  int v223 = (char *)v182 - v222;
  if (*(unsigned __int16 *)((char *)v182 - v222) >= 9u)
  {
    int v221 = (int *)*((unsigned __int16 *)v223 + 4);
    if (*((_WORD *)v223 + 4)) {
      int v221 = (int *)((char *)v221 + (void)v182 + *(unsigned int *)((char *)v221 + (void)v182));
    }
  }
  uint64_t v224 = -v222;
  int v225 = (unsigned __int16 *)((char *)v221 - *v221);
  if (*v225 >= 7u && (uint64_t v226 = v225[3]) != 0) {
    v227 = (int *)((char *)v221 + v226 + *(unsigned int *)((char *)v221 + v226));
  }
  else {
    v227 = 0;
  }
  v228 = (unsigned __int16 *)((char *)v227 - *v227);
  if (*v228 >= 9u)
  {
    unsigned __int16 v229 = v228[4];
    if (v229)
    {
      int v230 = (unsigned int *)(v11 + 4 * *(unsigned int *)((char *)v227 + v229));
      uint64_t v284 = (uint64_t)v230 + *v230;
      v287 = &v284;
      LODWORD(v286) = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v284, (uint64_t)&std::piecewise_construct, (void **)&v287)+ 6);
      uint64_t v224 = -(uint64_t)*v182;
    }
  }
  int v231 = (unsigned __int16 *)((char *)v182 + v224);
  if (*v231 < 9u)
  {
    int v232 = 0;
  }
  else
  {
    int v232 = (int *)v231[4];
    if (v232) {
      int v232 = (int *)((char *)v232 + (void)v182 + *(unsigned int *)((char *)v232 + (void)v182));
    }
  }
  unsigned int v233 = (unsigned __int16 *)((char *)v232 - *v232);
  if (*v233 >= 7u && (uint64_t v234 = v233[3]) != 0) {
    int v235 = (int *)((char *)v232 + v234 + *(unsigned int *)((char *)v232 + v234));
  }
  else {
    int v235 = 0;
  }
  v236 = (unsigned __int16 *)((char *)v235 - *v235);
  BOOL v237 = *v236 < 9u || !v236[4];
  BYTE6(v298) = 1;
  __int16 v238 = v297;
  __int16 v239 = v296;
  __int16 v240 = WORD4(v296);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 10, v218);
  if (v237) {
    uint64_t v241 = 0;
  }
  else {
    uint64_t v241 = &v286;
  }
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)&v293, 8, v241);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 6, v220);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 4, v191);
  int v242 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v239 - v238 + v240);
  v243 = 0;
  v287 = 0;
  v288 = 0;
  int v289 = 0;
  v244 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v244 >= 9u)
  {
    v243 = (int *)v244[4];
    if (v244[4]) {
      v243 = (int *)((char *)v243 + (void)a1 + *(unsigned int *)((char *)v243 + (void)a1));
    }
  }
  uint64_t v245 = (unsigned int *)((char *)v243 + *(unsigned __int16 *)((char *)v243 - *v243 + 4));
  uint64_t v246 = *v245;
  unint64_t v248 = (char *)v245 + v246 + 4;
  uint64_t v247 = *(unsigned int *)((char *)v245 + v246);
  if (v247)
  {
    v249 = (unsigned int *)&v248[4 * v247];
    do
    {
      int v250 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)&v293, &v248[*(unsigned int *)v248 + 4], *(unsigned int *)&v248[*(unsigned int *)v248]);
      int v251 = v250;
      v252 = v288;
      if (v288 >= v289)
      {
        int v254 = (char *)v287;
        uint64_t v255 = (v288 - (unsigned char *)v287) >> 2;
        unint64_t v256 = v255 + 1;
        if ((unint64_t)(v255 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v257 = v289 - (unsigned char *)v287;
        if ((v289 - (unsigned char *)v287) >> 1 > v256) {
          unint64_t v256 = v257 >> 1;
        }
        if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v258 = v256;
        }
        if (v258)
        {
          int v259 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v289, v258);
          int v254 = (char *)v287;
          v252 = v288;
        }
        else
        {
          int v259 = 0;
        }
        int v260 = &v259[4 * v255];
        *(_DWORD *)int v260 = v251;
        int v253 = v260 + 4;
        while (v252 != v254)
        {
          int v261 = *((_DWORD *)v252 - 1);
          v252 -= 4;
          *((_DWORD *)v260 - 1) = v261;
          v260 -= 4;
        }
        v287 = v260;
        v288 = v253;
        int v289 = &v259[4 * v258];
        if (v254) {
          operator delete(v254);
        }
      }
      else
      {
        *(_DWORD *)v288 = v250;
        int v253 = v252 + 4;
      }
      v288 = v253;
      v248 += 4;
    }
    while (v248 != (const char *)v249);
    v262 = (char *)v287;
  }
  else
  {
    int v253 = 0;
    v262 = 0;
  }
  if (v253 == v262) {
    v263 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  else {
    v263 = v262;
  }
  int v264 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)&v293, (uint64_t)v263, (v253 - v262) >> 2);
  int v265 = v242;
  BYTE6(v298) = 1;
  __int16 v266 = v297;
  __int16 v267 = v296;
  __int16 v268 = WORD4(v296);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 6, v265);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 4, v264);
  int v269 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v267 - v266 + v268);
  uint64_t v284 = 0x300000000;
  int v285 = 0;
  BYTE6(v298) = 1;
  __int16 v270 = v297;
  LOWORD(v264) = v296;
  __int16 v271 = WORD4(v296);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v293, 8, v269);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((flatbuffers::FlatBufferBuilder *)&v293, 4, &v284);
  unsigned int v272 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)&v293, 2);
  flatbuffers::FlatBufferBuilder::TrackField(&v293, 6, v272);
  int v273 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, (unsigned __int16)v264 - v270 + v271);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v293, v273, "AIRS", 0);
  v274 = (int *)(v297 + *(unsigned int *)v297);
  long long v282 = *a2;
  int v281 = (void *)v282;
  uint64_t v283 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  createStitchingScriptHashImpl((uint64_t)&v282, v274, a3);
  if (v281) {
    operator delete(v281);
  }
  if (v287)
  {
    v288 = (char *)v287;
    operator delete(v287);
  }
  if (__p)
  {
    long long v291 = (char *)__p;
    operator delete(__p);
  }
  if (v302)
  {
    long long v303 = v302;
    operator delete(v302);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v293);
  if (v305)
  {
    long long v306 = v305;
    operator delete(v305);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v308);
  if (v310)
  {
    v311 = v310;
    operator delete(v310);
  }
}

void sub_182831D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  if (v28) {
    operator delete(v28);
  }
  int64_t v31 = *(void **)(v29 - 120);
  if (v31)
  {
    *(void *)(v29 - 112) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::FunctionStitching::CloneNode<Air::FunctionStitching::Node>(uint64_t a1, Mtl::FunctionStitching::Node *this)
{
  char v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    unsigned int v6 = *(_DWORD *)((char *)this + v5);
    if (v6 >= 0xC) {
      goto LABEL_22;
    }
    switch(v6)
    {
      case 1u:
        unsigned int v7 = (int *)AirReflection::Node::node_as_FragmentFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v7);
        break;
      case 2u:
        char v12 = (const char *)AirReflection::Node::node_as_KernelFunction(this);
        int v8 = Mtl::FunctionStitching::CloneFunctionNode<Mtl::FunctionStitching::FunctionNode>(a1, v12);
        break;
      case 3u:
        uint64_t v13 = (int *)AirReflection::Node::node_as_VertexFunction(this);
        int v8 = Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(a1, v13);
        break;
      case 4u:
        uint64_t v14 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(this);
        int v8 = Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(a1, v14);
        break;
      case 5u:
        BOOL v15 = (int *)AirReflection::Node::node_as_IntersectionFunction(this);
        int v8 = Mtl::FunctionStitching::CloneBufferDataNode<Mtl::FunctionStitching::BufferDataNode>(a1, v15);
        break;
      case 6u:
        uint64_t v16 = (int *)AirReflection::Node::node_as_MeshFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v16);
        break;
      case 7u:
        unint64_t v17 = (int *)AirReflection::Node::node_as_ObjectFunction(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v17);
        break;
      case 8u:
        unint64_t v18 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(this);
        int v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v18);
        break;
      case 9u:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(this);
        *(unsigned char *)(a1 + 70) = 1;
        int v8 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, *(_WORD *)(a1 + 32) - *(_WORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
        break;
      case 0xAu:
        uint64_t v19 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(this);
        int v8 = Mtl::FunctionStitching::CloneBuiltinNode<Mtl::FunctionStitching::BuiltinNode>(a1, v19);
        break;
      case 0xBu:
        size_t v20 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(this);
        int v8 = Mtl::FunctionStitching::CloneEarlyReturnNode<Mtl::FunctionStitching::EarlyReturnNode>(a1, v20);
        break;
      default:
        goto LABEL_6;
    }
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
    if (v8) {
      flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, v8);
    }
  }
  else
  {
LABEL_6:
    *(unsigned char *)(a1 + 70) = 1;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
  }
  int v21 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v21 >= 5u && (uint64_t v22 = v21[2]) != 0)
  {
    unsigned int v23 = *(_DWORD *)((char *)this + v22);
    if (v23 >= 0xC) {
LABEL_22:
    }
      abort();
  }
  else
  {
    unsigned int v23 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 4, v23, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v11 - (unsigned __int16)v9 + (unsigned __int16)v10);
}

dispatch_data_t _MTLCreateMeshRenderPipelineScriptFromDescriptor(MTLMeshRenderPipelineDescriptor *a1)
{
  uint64_t v11 = 0;
  char v12 = 0;
  long long v13 = xmmword_1828D6640;
  long long v14 = 0u;
  *(_OWORD *)buffer = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 1;
  __int16 v18 = 256;
  uint64_t v19 = 0;
  _MTLCreateMeshRenderPipelineScriptFromDescriptor((flatbuffers::FlatBufferBuilder *)&v11, a1);
  uint64_t v1 = buffer[0];
  size_t v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
  uint64_t v5 = v11;
  char v6 = v12;
  uint64_t v7 = *((void *)&v14 + 1);
  uint64_t v8 = v14;
  uint64_t v9 = buffer[0];
  size_t v10 = v2;
  if (v12)
  {
    uint64_t v11 = 0;
    char v12 = 0;
  }
  long long v14 = 0u;
  *(_OWORD *)buffer = 0u;
  dispatch_data_t v3 = dispatch_data_create(v1, v2, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_1828321BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

dispatch_data_t _MTLCreateFuncionScriptFromFunctionType(MTLFunctionType a1)
{
  uint64_t v11 = 0;
  char v12 = 0;
  long long v13 = xmmword_1828D6640;
  long long v14 = 0u;
  *(_OWORD *)buffer = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 1;
  __int16 v18 = 256;
  uint64_t v19 = 0;
  _MTLCreateFuncionScriptFromFunctionType((flatbuffers::FlatBufferBuilder *)&v11, a1);
  uint64_t v1 = buffer[0];
  size_t v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
  uint64_t v5 = v11;
  char v6 = v12;
  uint64_t v7 = *((void *)&v14 + 1);
  uint64_t v8 = v14;
  uint64_t v9 = buffer[0];
  size_t v10 = v2;
  if (v12)
  {
    uint64_t v11 = 0;
    char v12 = 0;
  }
  long long v14 = 0u;
  *(_OWORD *)buffer = 0u;
  dispatch_data_t v3 = dispatch_data_create(v1, v2, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_182832298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t Air::FunctionStitching::InputNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.InputNode", 0x1Fu);
  char v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionStitching::ThreadgroupNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.ThreadgroupNode", 0x25u);
  char v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

void NodeKey::NodeKey(NodeKey *this, const Air::FunctionStitching::Node *a2)
{
  dispatch_data_t v3 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0)
  {
    int v6 = *(_DWORD *)((char *)a2 + v4);
    *(_DWORD *)this = v6;
    switch(v6)
    {
      case 1:
        uint64_t v7 = (int *)AirReflection::Node::node_as_FragmentFunction(a2);
        uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v8 < 5u)
        {
          uint64_t v9 = 0;
        }
        else
        {
          uint64_t v9 = v8[2];
          if (v9) {
            uint64_t v9 = *(unsigned int *)((char *)v7 + v9);
          }
        }
        *((void *)this + 1) = v9;
        return;
      case 3:
        size_t v10 = (int *)AirReflection::Node::node_as_VertexFunction(a2);
        uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
        if (*v11 < 7u) {
          goto LABEL_23;
        }
        uint64_t v12 = v11[3];
        if (v12) {
          goto LABEL_22;
        }
        goto LABEL_24;
      case 4:
        long long v13 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(a2);
        long long v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 < 5u)
        {
          BOOL v15 = 0;
        }
        else
        {
          BOOL v15 = (int *)v14[2];
          if (v15) {
            BOOL v15 = (int *)((char *)v15 + (void)v13 + *(unsigned int *)((char *)v15 + (void)v13));
          }
        }
        unsigned int v23 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v23 >= 7u && (uint64_t v24 = v23[3]) != 0) {
          uint64_t v25 = *(unsigned int *)((char *)v15 + v24);
        }
        else {
          uint64_t v25 = 0;
        }
        *((void *)this + 2) = v25;
        int v26 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(a2);
        int v27 = (unsigned __int16 *)((char *)v26 - *v26);
        if (*v27 < 7u) {
          goto LABEL_56;
        }
        uint64_t v28 = v27[3];
        if (v28) {
          uint64_t v28 = *(void *)((char *)v26 + v28);
        }
        goto LABEL_57;
      case 5:
        uint64_t v16 = (int *)AirReflection::Node::node_as_IntersectionFunction(a2);
        uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
        if (*v17 < 5u)
        {
          __int16 v18 = 0;
        }
        else
        {
          __int16 v18 = (int *)v17[2];
          if (v18) {
            __int16 v18 = (int *)((char *)v18 + (void)v16 + *(unsigned int *)((char *)v18 + (void)v16));
          }
        }
        uint64_t v29 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v29 >= 5u && (uint64_t v30 = v29[2]) != 0) {
          int64_t v31 = (int *)((char *)v18 + v30 + *(unsigned int *)((char *)v18 + v30));
        }
        else {
          int64_t v31 = 0;
        }
        unint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
        if (*v32 >= 7u && (uint64_t v33 = v32[3]) != 0) {
          uint64_t v34 = *(unsigned int *)((char *)v31 + v33);
        }
        else {
          uint64_t v34 = 0;
        }
        *((void *)this + 2) = v34;
        int64_t v35 = (int *)AirReflection::Node::node_as_IntersectionFunction(a2);
        unsigned int v36 = (unsigned __int16 *)((char *)v35 - *v35);
        if (*v36 < 5u)
        {
          int v37 = 0;
        }
        else
        {
          int v37 = (int *)v36[2];
          if (v37) {
            int v37 = (int *)((char *)v37 + (void)v35 + *(unsigned int *)((char *)v37 + (void)v35));
          }
        }
        off_t v38 = (unsigned __int16 *)((char *)v37 - *v37);
        if (*v38 >= 7u && (uint64_t v39 = v38[3]) != 0) {
          uint64_t v28 = *(void *)((char *)v37 + v39);
        }
        else {
LABEL_56:
        }
          uint64_t v28 = 0;
LABEL_57:
        *((void *)this + 3) = v28;
        return;
      case 6:
        size_t v10 = (int *)AirReflection::Node::node_as_MeshFunction(a2);
        goto LABEL_20;
      case 7:
        size_t v10 = (int *)AirReflection::Node::node_as_ObjectFunction(a2);
        goto LABEL_20;
      case 8:
        size_t v10 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(a2);
LABEL_20:
        uint64_t v19 = (unsigned __int16 *)((char *)v10 - *v10);
        if (*v19 < 5u)
        {
LABEL_23:
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v12 = v19[2];
          if (v12) {
LABEL_22:
          }
            uint64_t v12 = *(unsigned int *)((char *)v10 + v12);
        }
LABEL_24:
        *((void *)this + 2) = v12;
        break;
      case 10:
        size_t v20 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(a2);
        int v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 < 5u)
        {
          LODWORD(v22) = 0;
        }
        else
        {
          uint64_t v22 = v21[2];
          if (v22) {
            LODWORD(v22) = *(int *)((char *)v20 + v22);
          }
        }
        *((_DWORD *)this + 8) = v22;
        break;
      default:
        return;
    }
  }
  else
  {
    *(_DWORD *)this = 0;
  }
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,objc_object  {objcproto24MTLFunctionStitchingNode}**>(char *__src, char *a2, char *a3)
{
  uint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v6 = *(void *)__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      uint64_t v4 = &__src[v7];
      *(void *)uint64_t v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v8 = *((void *)a3 - 1);
      uint64_t v4 = __src + 8;
      size_t v9 = a3 - 8 - __src;
      if (a3 - 8 != __src) {
        memmove(__src + 8, __src, v9);
      }
      *(void *)__srCC_SHA256_CTX c = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>>(__src, a2, a3);
    }
  }
  return v4;
}

void *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      uint64_t v4 = a1 + 1;
      uint64_t v5 = a2 + 1;
      do
      {
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2) {
          break;
        }
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    uint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[v9];
      do
      {
        uint64_t v13 = *--v11;
        uint64_t v12 = v13;
        long long v14 = &v11[v3];
        BOOL v15 = v11;
        do
        {
          uint64_t v16 = v14;
          *BOOL v15 = *v14;
          uint64_t v17 = &v14[v3];
          BOOL v18 = __OFSUB__(v3, a3 - v14);
          uint64_t v20 = v3 - (a3 - v14);
          char v19 = (v20 < 0) ^ v18;
          long long v14 = &a1[v20];
          if (v19) {
            long long v14 = v17;
          }
          BOOL v15 = v16;
        }
        while (v14 != v11);
        *uint64_t v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

BOOL std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,0>(void **a1, void **a2, void **a3, void **a4, void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a2, a3, a4);
  uint64_t v10 = *a4;
  NodeKey::NodeKey((uint64_t)v20, *a5);
  NodeKey::NodeKey((uint64_t)v19, v10);
  BOOL result = NodeKey::operator<(v20, (uint64_t)v19);
  if (result)
  {
    uint64_t v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    uint64_t v13 = *a3;
    NodeKey::NodeKey((uint64_t)v20, *a4);
    NodeKey::NodeKey((uint64_t)v19, v13);
    BOOL result = NodeKey::operator<(v20, (uint64_t)v19);
    if (result)
    {
      long long v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      BOOL v15 = *a2;
      NodeKey::NodeKey((uint64_t)v20, *a3);
      NodeKey::NodeKey((uint64_t)v19, v15);
      BOOL result = NodeKey::operator<(v20, (uint64_t)v19);
      if (result)
      {
        uint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *a1;
        NodeKey::NodeKey((uint64_t)v20, *a2);
        NodeKey::NodeKey((uint64_t)v19, v17);
        BOOL result = NodeKey::operator<(v20, (uint64_t)v19);
        if (result)
        {
          BOOL v18 = *a1;
          *a1 = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *a1;
      NodeKey::NodeKey((uint64_t)v18, *(a2 - 1));
      NodeKey::NodeKey((uint64_t)v17, v6);
      if (NodeKey::operator<(v18, (uint64_t)v17))
      {
        int64_t v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v8;
    NodeKey::NodeKey((uint64_t)v18, *v9);
    NodeKey::NodeKey((uint64_t)v17, v12);
    if (NodeKey::operator<(v18, (uint64_t)v17))
    {
      uint64_t v13 = *v9;
      uint64_t v14 = v10;
      while (1)
      {
        *(void **)((char *)a1 + v14 + 24) = *(void **)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        BOOL v15 = *(void **)((char *)a1 + v14 + 8);
        NodeKey::NodeKey((uint64_t)v18, v13);
        NodeKey::NodeKey((uint64_t)v17, v15);
        v14 -= 8;
        if (!NodeKey::operator<(v18, (uint64_t)v17))
        {
          uint64_t v16 = (void **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(void **a1, void **a2, void **a3, void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a2, a3);
  uint64_t v8 = *a3;
  NodeKey::NodeKey((uint64_t)v16, *a4);
  NodeKey::NodeKey((uint64_t)v15, v8);
  BOOL result = NodeKey::operator<(v16, (uint64_t)v15);
  if (result)
  {
    uint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    int v11 = *a2;
    NodeKey::NodeKey((uint64_t)v16, *a3);
    NodeKey::NodeKey((uint64_t)v15, v11);
    BOOL result = NodeKey::operator<(v16, (uint64_t)v15);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *a1;
      NodeKey::NodeKey((uint64_t)v16, *a2);
      NodeKey::NodeKey((uint64_t)v15, v13);
      BOOL result = NodeKey::operator<(v16, (uint64_t)v15);
      if (result)
      {
        uint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 4;
      unint64_t v7 = bswap64(*(a2 - 4));
      unint64_t v8 = bswap64(*a1);
      if (v7 == v8
        && (unint64_t v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      if (v9 < 0)
      {
        long long v33 = *(_OWORD *)a1;
        long long v32 = *((_OWORD *)a1 + 1);
        long long v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)uint64_t v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      uint64_t v24 = a1 + 4;
      uint64_t v25 = a1 + 8;
      int v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      unint64_t v28 = *(a2 - 4);
      int v27 = a2 - 4;
      unint64_t v29 = bswap64(v28);
      unint64_t v30 = bswap64(a1[12]);
      if (v29 == v30
        && (unint64_t v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        int v31 = 0;
      }
      else if (v29 < v30)
      {
        int v31 = -1;
      }
      else
      {
        int v31 = 1;
      }
      if (v31 < 0)
      {
        long long v36 = *(_OWORD *)v26;
        long long v35 = *((_OWORD *)a1 + 7);
        long long v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)int v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)int v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        unint64_t v38 = bswap64(*v26);
        unint64_t v39 = bswap64(*v25);
        if (v38 != v39) {
          goto LABEL_54;
        }
        unint64_t v38 = bswap64(a1[13]);
        unint64_t v39 = bswap64(a1[9]);
        if (v38 == v39
          && (unint64_t v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (unint64_t v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          int v40 = 0;
        }
        else
        {
LABEL_54:
          int v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          long long v42 = *(_OWORD *)v25;
          long long v41 = *((_OWORD *)a1 + 5);
          long long v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)int v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          unint64_t v44 = bswap64(*v25);
          unint64_t v45 = bswap64(*v24);
          if (v44 != v45) {
            goto LABEL_64;
          }
          unint64_t v44 = bswap64(a1[9]);
          unint64_t v45 = bswap64(a1[5]);
          if (v44 == v45
            && (unint64_t v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (unint64_t v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            int v46 = 0;
          }
          else
          {
LABEL_64:
            int v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            long long v48 = *(_OWORD *)v24;
            long long v47 = *((_OWORD *)a1 + 3);
            long long v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)uint64_t v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            unint64_t v50 = bswap64(a1[4]);
            unint64_t v51 = bswap64(*a1);
            if (v50 != v51) {
              goto LABEL_73;
            }
            unint64_t v50 = bswap64(a1[5]);
            unint64_t v51 = bswap64(a1[1]);
            if (v50 == v51
              && (unint64_t v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (unint64_t v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              int v52 = 0;
            }
            else
            {
LABEL_73:
              int v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              long long v54 = *(_OWORD *)a1;
              long long v53 = *((_OWORD *)a1 + 1);
              long long v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)uint64_t v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      int v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    unint64_t v14 = bswap64(*v11);
    unint64_t v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), unint64_t v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), unint64_t v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), unint64_t v15 = bswap64(v10[3]), v14 != v15))
    {
      int v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        long long v56 = *(_OWORD *)v11;
        long long v57 = *((_OWORD *)v11 + 1);
        uint64_t v17 = v12;
        while (1)
        {
          BOOL v18 = (char *)a1 + v17;
          long long v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64) {
            break;
          }
          unint64_t v20 = bswap64(v56);
          unint64_t v21 = bswap64(*((void *)v18 + 4));
          if (v20 == v21
            && (unint64_t v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((void *)v18 + 5)), v20 == v21)
            && (unint64_t v20 = bswap64(v57), v21 = bswap64(*((void *)v18 + 6)), v20 == v21)
            && (unint64_t v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((void *)v18 + 7)), v20 == v21))
          {
            int v22 = 0;
          }
          else if (v20 < v21)
          {
            int v22 = -1;
          }
          else
          {
            int v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            unsigned int v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        unsigned int v23 = a1;
LABEL_30:
        *(_OWORD *)unsigned int v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8) {
          return v11 + 4 == a2;
        }
      }
    }
    uint64_t v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

char *std::__stable_partition_impl<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_0 &,std::__wrap_iter<Air::FunctionStitching::Node const**>,long,std::pair<Air::FunctionStitching::Node const**,long>>(AirReflection::Node **a1, AirReflection::Node **a2, uint64_t a3, AirReflection::Node **a4, uint64_t a5)
{
  uint64_t v6 = (int8x16_t *)a1;
  if (a3 == 3)
  {
    int v9 = a1 + 1;
    uint64_t v10 = a1[1];
    if (AirReflection::Node::node_as_KernelFunction(v10) || Air::FunctionStitching::Node::node_as_EarlyReturnNode(v10))
    {
      uint64_t v11 = v6->i64[1];
      v6->i64[1] = (uint64_t)*a2;
      *a2 = (AirReflection::Node *)v11;
      *uint64_t v6 = vextq_s8(*v6, *v6, 8uLL);
      return (char *)v9;
    }
    uint64_t v8 = v6->i64[0];
    v6->i64[0] = v6->i64[1];
    v6->i64[1] = v8;
    v6->i64[1] = (uint64_t)*a2;
    goto LABEL_4;
  }
  if (a3 == 2)
  {
    uint64_t v8 = (uint64_t)*a1;
    *a1 = *a2;
LABEL_4:
    *a2 = (AirReflection::Node *)v8;
    return (char *)a2;
  }
  if (a5 >= a3)
  {
    int v9 = a1 + 1;
    *a4 = *a1;
    unint64_t v20 = a4 + 1;
    if (a1 + 1 == a2)
    {
      *a1 = *a2;
    }
    else
    {
      do
      {
        unint64_t v21 = *v9;
        if (AirReflection::Node::node_as_KernelFunction(*v9)
          || Air::FunctionStitching::Node::node_as_EarlyReturnNode(v21))
        {
          *v20++ = *v9;
        }
        else
        {
          v6->i64[0] = (uint64_t)*v9;
          uint64_t v6 = (int8x16_t *)((char *)v6 + 8);
        }
        ++v9;
      }
      while (v9 != a2);
      v6->i64[0] = (uint64_t)*a2;
      int v9 = (AirReflection::Node **)&v6->i64[1];
      if (v20 <= a4) {
        return (char *)v9;
      }
    }
    uint64_t v23 = 0;
    do
    {
      v9[v23] = a4[v23];
      ++v23;
    }
    while (&a4[v23] < v20);
    return (char *)v9;
  }
  if (a3 >= 0) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = a3 + 1;
  }
  uint64_t v15 = v14 >> 1;
  long long v32 = (char *)&a1[v14 >> 1];
  uint64_t v16 = 8 - 8 * (v14 >> 1);
  uint64_t v17 = a1 - 1;
  for (uint64_t i = v14 >> 1; ; --i)
  {
    long long v19 = v17[i];
    if (!AirReflection::Node::node_as_KernelFunction(v19)
      && !Air::FunctionStitching::Node::node_as_EarlyReturnNode(v19))
    {
      break;
    }
    if (!v16)
    {
      int v22 = (char *)v6;
      goto LABEL_33;
    }
    v16 += 8;
  }
  int v22 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_0 &,std::__wrap_iter<Air::FunctionStitching::Node const**>,long,std::pair<Air::FunctionStitching::Node const**,long>>(v6, (char *)v6 - v16, i, a4, a5);
LABEL_33:
  uint64_t v24 = a3 - v15;
  uint64_t v25 = (Air::FunctionStitching::Node *)v6->i64[v15];
  if (AirReflection::Node::node_as_KernelFunction(v25))
  {
    int v26 = v32;
    int v27 = (AirReflection::Node **)v32;
LABEL_40:
    unint64_t v28 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_0 &,std::__wrap_iter<Air::FunctionStitching::Node const**>,long,std::pair<Air::FunctionStitching::Node const**,long>>(v27, a2, v24, a4, a5);
  }
  else
  {
    unint64_t v28 = (char *)(a2 + 1);
    unint64_t v29 = (AirReflection::Node **)&v6->i64[v15 + 1];
    while (1)
    {
      if (Air::FunctionStitching::Node::node_as_EarlyReturnNode(v25))
      {
LABEL_39:
        int v27 = v29 - 1;
        int v26 = v32;
        goto LABEL_40;
      }
      if (v29 == a2) {
        break;
      }
      --v24;
      unint64_t v30 = *v29++;
      uint64_t v25 = v30;
      if (AirReflection::Node::node_as_KernelFunction(v30)) {
        goto LABEL_39;
      }
    }
    int v26 = v32;
  }
  return std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v22, v26, v28);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,false>(uint64_t result, const Air::FunctionStitching::Node **a2, uint64_t a3, char a4)
{
  uint64_t v8 = (const Air::FunctionStitching::Node **)result;
  while (2)
  {
    int v9 = a2;
    uint64_t v10 = a2 - 1;
    uint64_t v11 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = v11;
          uint64_t v12 = (char *)v9 - (char *)v11;
          uint64_t v13 = v9 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                long long v41 = *v8;
                NodeKey::NodeKey((NodeKey *)v94, *(a2 - 1));
                NodeKey::NodeKey((NodeKey *)v93, v41);
                BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                if (result)
                {
                  long long v42 = *v8;
                  void *v8 = *(a2 - 1);
                  *(a2 - 1) = v42;
                }
                break;
              case 3:
                BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v8, v8 + 1, v10);
                break;
              case 4:
                BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v8, v8 + 1, v8 + 2, v10);
                break;
              case 5:
                BOOL result = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,0>(v8, v8 + 1, v8 + 2, v8 + 3, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            long long v43 = v8 + 1;
            BOOL v45 = v8 == v9 || v43 == v9;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                long long v47 = v8;
                do
                {
                  long long v49 = *v47;
                  long long v48 = v47[1];
                  long long v47 = v43;
                  NodeKey::NodeKey((NodeKey *)v94, v48);
                  NodeKey::NodeKey((NodeKey *)v93, v49);
                  BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                  if (result)
                  {
                    unint64_t v50 = *v47;
                    uint64_t v51 = v46;
                    while (1)
                    {
                      *(const Air::FunctionStitching::Node **)((char *)v8 + v51 + 8) = *(const Air::FunctionStitching::Node **)((char *)v8 + v51);
                      if (!v51) {
                        break;
                      }
                      int v52 = *(const Air::FunctionStitching::Node **)((char *)v8 + v51 - 8);
                      NodeKey::NodeKey((NodeKey *)v94, v50);
                      NodeKey::NodeKey((NodeKey *)v93, v52);
                      BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                      v51 -= 8;
                      if ((result & 1) == 0)
                      {
                        long long v53 = (const Air::FunctionStitching::Node **)((char *)v8 + v51 + 8);
                        goto LABEL_76;
                      }
                    }
                    long long v53 = v8;
LABEL_76:
                    *long long v53 = v50;
                  }
                  long long v43 = v47 + 1;
                  v46 += 8;
                }
                while (v47 + 1 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                long long v84 = *v8;
                int v83 = v8[1];
                uint64_t v8 = v43;
                NodeKey::NodeKey((NodeKey *)v94, v83);
                NodeKey::NodeKey((NodeKey *)v93, v84);
                BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                if (result)
                {
                  size_t v85 = *v8;
                  size_t v86 = v8;
                  do
                  {
                    uint64_t v87 = v86;
                    unint64_t v88 = *--v86;
                    *uint64_t v87 = v88;
                    uint64_t v89 = *(v87 - 2);
                    NodeKey::NodeKey((NodeKey *)v94, v85);
                    NodeKey::NodeKey((NodeKey *)v93, v89);
                    BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                  }
                  while ((result & 1) != 0);
                  *size_t v86 = v85;
                }
                long long v43 = v8 + 1;
              }
              while (v8 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v8 != v9)
            {
              unint64_t v90 = v12;
              int64_t v54 = (unint64_t)(v13 - 2) >> 1;
              int64_t v55 = v54;
              do
              {
                int64_t v56 = v55;
                if (v54 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  int v58 = &v8[v57];
                  if (2 * v55 + 2 < v13)
                  {
                    uint64_t v59 = v58[1];
                    NodeKey::NodeKey((NodeKey *)v94, *v58);
                    NodeKey::NodeKey((NodeKey *)v93, v59);
                    if (NodeKey::operator<(v94, (uint64_t)v93))
                    {
                      ++v58;
                      uint64_t v57 = 2 * v56 + 2;
                    }
                  }
                  int v60 = &v8[v56];
                  uint64_t v61 = *v60;
                  NodeKey::NodeKey((NodeKey *)v94, *v58);
                  NodeKey::NodeKey((NodeKey *)v93, v61);
                  BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                  if ((result & 1) == 0)
                  {
                    int64_t v91 = v56;
                    uint64_t v62 = *v60;
                    do
                    {
                      uint64_t v63 = v58;
                      *int v60 = *v58;
                      if (v54 < v57) {
                        break;
                      }
                      uint64_t v64 = (2 * v57) | 1;
                      int v58 = &v8[v64];
                      uint64_t v65 = 2 * v57 + 2;
                      if (v65 < v13)
                      {
                        uint64_t v66 = v58[1];
                        NodeKey::NodeKey((NodeKey *)v94, *v58);
                        NodeKey::NodeKey((NodeKey *)v93, v66);
                        if (NodeKey::operator<(v94, (uint64_t)v93))
                        {
                          ++v58;
                          uint64_t v64 = v65;
                        }
                      }
                      NodeKey::NodeKey((NodeKey *)v94, *v58);
                      NodeKey::NodeKey((NodeKey *)v93, v62);
                      BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                      int v60 = v63;
                      uint64_t v57 = v64;
                    }
                    while (!result);
                    *uint64_t v63 = v62;
                    int64_t v56 = v91;
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              uint64_t v67 = v90 >> 3;
              do
              {
                uint64_t v68 = 0;
                uint64_t v69 = *v8;
                unint64_t v70 = v8;
                do
                {
                  uint64_t v71 = &v70[v68 + 1];
                  uint64_t v72 = (2 * v68) | 1;
                  uint64_t v73 = 2 * v68 + 2;
                  if (v73 < v67)
                  {
                    uint64_t v74 = v70[v68 + 2];
                    NodeKey::NodeKey((NodeKey *)v94, *v71);
                    NodeKey::NodeKey((NodeKey *)v93, v74);
                    BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                    if (result)
                    {
                      ++v71;
                      uint64_t v72 = v73;
                    }
                  }
                  *unint64_t v70 = *v71;
                  unint64_t v70 = v71;
                  uint64_t v68 = v72;
                }
                while (v72 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                int v75 = a2 - 1;
                BOOL v5 = v71 == --a2;
                if (v5)
                {
                  *uint64_t v71 = v69;
                }
                else
                {
                  *uint64_t v71 = *v75;
                  *int v75 = v69;
                  uint64_t v76 = (char *)v71 - (char *)v8 + 8;
                  if (v76 >= 9)
                  {
                    unint64_t v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
                    unint64_t v78 = &v8[v77];
                    uint64_t v79 = *v71;
                    NodeKey::NodeKey((NodeKey *)v94, *v78);
                    NodeKey::NodeKey((NodeKey *)v93, v79);
                    BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                    if (result)
                    {
                      uint64_t v80 = *v71;
                      do
                      {
                        uint64_t v81 = v78;
                        *uint64_t v71 = *v78;
                        if (!v77) {
                          break;
                        }
                        unint64_t v77 = (v77 - 1) >> 1;
                        unint64_t v78 = &v8[v77];
                        NodeKey::NodeKey((NodeKey *)v94, *v78);
                        NodeKey::NodeKey((NodeKey *)v93, v80);
                        BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                        uint64_t v71 = v81;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v81 = v80;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &v8[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v15, v8, v10);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v8, v15, v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v8 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v8 + 2, &v8[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v15 - 1, v15, &v8[v14 + 1]);
            uint64_t v16 = *v8;
            void *v8 = *v15;
            *uint64_t v15 = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          uint64_t v17 = *v8;
          NodeKey::NodeKey((NodeKey *)v94, *(v8 - 1));
          NodeKey::NodeKey((NodeKey *)v93, v17);
          if (NodeKey::operator<(v94, (uint64_t)v93)) {
            break;
          }
          unint64_t v30 = *v8;
          int v31 = *v10;
          NodeKey::NodeKey((NodeKey *)v94, *v8);
          NodeKey::NodeKey((NodeKey *)v93, v31);
          BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
          if (result)
          {
            uint64_t v11 = v8;
            do
            {
              long long v32 = v11[1];
              ++v11;
              NodeKey::NodeKey((NodeKey *)v94, v30);
              NodeKey::NodeKey((NodeKey *)v93, v32);
              BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
            }
            while ((result & 1) == 0);
          }
          else
          {
            long long v33 = v8 + 1;
            do
            {
              uint64_t v11 = v33;
              if (v33 >= v9) {
                break;
              }
              ++v33;
              long long v34 = *v11;
              NodeKey::NodeKey((NodeKey *)v94, v30);
              NodeKey::NodeKey((NodeKey *)v93, v34);
              BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
            }
            while (!result);
          }
          long long v35 = v9;
          if (v11 < v9)
          {
            long long v35 = v9;
            do
            {
              long long v36 = *--v35;
              NodeKey::NodeKey((NodeKey *)v94, v30);
              NodeKey::NodeKey((NodeKey *)v93, v36);
              BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v35)
          {
            long long v37 = *v11;
            *uint64_t v11 = *v35;
            int *v35 = v37;
            do
            {
              unint64_t v38 = v11[1];
              ++v11;
              NodeKey::NodeKey((NodeKey *)v94, v30);
              NodeKey::NodeKey((NodeKey *)v93, v38);
            }
            while (!NodeKey::operator<(v94, (uint64_t)v93));
            do
            {
              unint64_t v39 = *--v35;
              NodeKey::NodeKey((NodeKey *)v94, v30);
              NodeKey::NodeKey((NodeKey *)v93, v39);
              BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
            }
            while ((result & 1) != 0);
          }
          int v40 = v11 - 1;
          BOOL v4 = v11 - 1 >= v8;
          BOOL v5 = v11 - 1 == v8;
          if (v11 - 1 != v8) {
            void *v8 = *v40;
          }
          a4 = 0;
          *int v40 = v30;
        }
        uint64_t v18 = 0;
        long long v19 = *v8;
        do
        {
          NodeKey::NodeKey((NodeKey *)v94, v8[v18 + 1]);
          NodeKey::NodeKey((NodeKey *)v93, v19);
          ++v18;
        }
        while (NodeKey::operator<(v94, (uint64_t)v93));
        unint64_t v20 = &v8[v18];
        if (v18 == 1)
        {
          int v9 = a2;
          do
          {
            if (v20 >= v9) {
              break;
            }
            int v22 = *--v9;
            NodeKey::NodeKey((NodeKey *)v94, v22);
            NodeKey::NodeKey((NodeKey *)v93, v19);
          }
          while (!NodeKey::operator<(v94, (uint64_t)v93));
        }
        else
        {
          do
          {
            unint64_t v21 = *--v9;
            NodeKey::NodeKey((NodeKey *)v94, v21);
            NodeKey::NodeKey((NodeKey *)v93, v19);
          }
          while (!NodeKey::operator<(v94, (uint64_t)v93));
        }
        if (v20 >= v9)
        {
          unint64_t v28 = v20 - 1;
        }
        else
        {
          uint64_t v23 = &v8[v18];
          uint64_t v24 = v9;
          do
          {
            uint64_t v25 = *v23;
            unint64_t *v23 = *v24;
            *uint64_t v24 = v25;
            do
            {
              int v26 = v23[1];
              ++v23;
              NodeKey::NodeKey((NodeKey *)v94, v26);
              NodeKey::NodeKey((NodeKey *)v93, v19);
            }
            while (NodeKey::operator<(v94, (uint64_t)v93));
            do
            {
              int v27 = *--v24;
              NodeKey::NodeKey((NodeKey *)v94, v27);
              NodeKey::NodeKey((NodeKey *)v93, v19);
            }
            while (!NodeKey::operator<(v94, (uint64_t)v93));
          }
          while (v23 < v24);
          unint64_t v28 = v23 - 1;
        }
        if (v28 != v8) {
          void *v8 = *v28;
        }
        *unint64_t v28 = v19;
        BOOL v4 = v20 >= v9;
        int v9 = a2;
        if (v4) {
          break;
        }
LABEL_34:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,false>(v8, v28, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v28 + 1;
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v8, v28);
      uint64_t v11 = v28 + 1;
      BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v28 + 1, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v28;
    if (!v29) {
      continue;
    }
    return result;
  }
}

BOOL std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,0>(const Air::FunctionStitching::Node **a1, const Air::FunctionStitching::Node **a2, const Air::FunctionStitching::Node **a3, const Air::FunctionStitching::Node **a4, const Air::FunctionStitching::Node **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a2, a3, a4);
  uint64_t v10 = *a4;
  NodeKey::NodeKey((NodeKey *)v20, *a5);
  NodeKey::NodeKey((NodeKey *)v19, v10);
  BOOL result = NodeKey::operator<(v20, (uint64_t)v19);
  if (result)
  {
    uint64_t v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    uint64_t v13 = *a3;
    NodeKey::NodeKey((NodeKey *)v20, *a4);
    NodeKey::NodeKey((NodeKey *)v19, v13);
    BOOL result = NodeKey::operator<(v20, (uint64_t)v19);
    if (result)
    {
      unint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t v15 = *a2;
      NodeKey::NodeKey((NodeKey *)v20, *a3);
      NodeKey::NodeKey((NodeKey *)v19, v15);
      BOOL result = NodeKey::operator<(v20, (uint64_t)v19);
      if (result)
      {
        uint64_t v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *a1;
        NodeKey::NodeKey((NodeKey *)v20, *a2);
        NodeKey::NodeKey((NodeKey *)v19, v17);
        BOOL result = NodeKey::operator<(v20, (uint64_t)v19);
        if (result)
        {
          uint64_t v18 = *a1;
          *a1 = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(const Air::FunctionStitching::Node **a1, const Air::FunctionStitching::Node **a2, const Air::FunctionStitching::Node **a3)
{
  uint64_t v6 = *a1;
  NodeKey::NodeKey((NodeKey *)v17, *a2);
  NodeKey::NodeKey((NodeKey *)v16, v6);
  BOOL v7 = NodeKey::operator<(v17, (uint64_t)v16);
  uint64_t v8 = *a3;
  int v9 = *a2;
  if (v7)
  {
    NodeKey::NodeKey((NodeKey *)v17, v8);
    NodeKey::NodeKey((NodeKey *)v16, v9);
    BOOL result = NodeKey::operator<(v17, (uint64_t)v16);
    uint64_t v11 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      NodeKey::NodeKey((NodeKey *)v17, *a3);
      NodeKey::NodeKey((NodeKey *)v16, v11);
      BOOL result = NodeKey::operator<(v17, (uint64_t)v16);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else
  {
    NodeKey::NodeKey((NodeKey *)v17, v8);
    NodeKey::NodeKey((NodeKey *)v16, v9);
    BOOL result = NodeKey::operator<(v17, (uint64_t)v16);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *a1;
      NodeKey::NodeKey((NodeKey *)v17, *a2);
      NodeKey::NodeKey((NodeKey *)v16, v13);
      BOOL result = NodeKey::operator<(v17, (uint64_t)v16);
      if (result)
      {
        unint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(const Air::FunctionStitching::Node **a1, const Air::FunctionStitching::Node **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *a1;
      NodeKey::NodeKey((NodeKey *)v18, *(a2 - 1));
      NodeKey::NodeKey((NodeKey *)v17, v6);
      if (NodeKey::operator<(v18, (uint64_t)v17))
      {
        BOOL v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v8;
    NodeKey::NodeKey((NodeKey *)v18, *v9);
    NodeKey::NodeKey((NodeKey *)v17, v12);
    if (NodeKey::operator<(v18, (uint64_t)v17))
    {
      uint64_t v13 = *v9;
      uint64_t v14 = v10;
      while (1)
      {
        *(const Air::FunctionStitching::Node **)((char *)a1 + v14 + 24) = *(const Air::FunctionStitching::Node **)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        uint64_t v15 = *(const Air::FunctionStitching::Node **)((char *)a1 + v14 + 8);
        NodeKey::NodeKey((NodeKey *)v18, v13);
        NodeKey::NodeKey((NodeKey *)v17, v15);
        v14 -= 8;
        if (!NodeKey::operator<(v18, (uint64_t)v17))
        {
          uint64_t v16 = (const Air::FunctionStitching::Node **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(const Air::FunctionStitching::Node **a1, const Air::FunctionStitching::Node **a2, const Air::FunctionStitching::Node **a3, const Air::FunctionStitching::Node **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a2, a3);
  uint64_t v8 = *a3;
  NodeKey::NodeKey((NodeKey *)v16, *a4);
  NodeKey::NodeKey((NodeKey *)v15, v8);
  BOOL result = NodeKey::operator<(v16, (uint64_t)v15);
  if (result)
  {
    uint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    int v11 = *a2;
    NodeKey::NodeKey((NodeKey *)v16, *a3);
    NodeKey::NodeKey((NodeKey *)v15, v11);
    BOOL result = NodeKey::operator<(v16, (uint64_t)v15);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *a1;
      NodeKey::NodeKey((NodeKey *)v16, *a2);
      NodeKey::NodeKey((NodeKey *)v15, v13);
      BOOL result = NodeKey::operator<(v16, (uint64_t)v15);
      if (result)
      {
        uint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const* const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  _OWORD v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t v13 = *v22;
LABEL_38:
    *int v22 = v13;
    goto LABEL_39;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1828345F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  _OWORD v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t v13 = *v22;
LABEL_38:
    *int v22 = v13;
    goto LABEL_39;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_182834850(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC48B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC48B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

void MTLProgressBinsMake()
{
}

void sub_1828358DC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10B0C404C6F8B55);
  _Unwind_Resume(a1);
}

MTLAccelerationStructureCommandProgressBinsInternal *MTLProgressBinsFree(MTLAccelerationStructureCommandProgressBinsInternal *result)
{
  if (result)
  {
    MTLAccelerationStructureCommandProgressBinsInternal::~MTLAccelerationStructureCommandProgressBinsInternal(result);
    JUMPOUT(0x18530C140);
  }
  return result;
}

uint64_t MTLProgressBinsGetNumberOfSubstreams(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 40);
}

uint64_t MTLProgressBinsGetActiveSubstream(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 42);
}

uint64_t MTLProgressBinsSynchronizeBuffer(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v3 = [a2 gpuAddress];
  unint64_t v4 = 73244475 * ((73244475 * (v3 ^ (v3 >> 16))) ^ ((73244475 * (v3 ^ (v3 >> 16))) >> 16));
  unint64_t v5 = (v4 ^ (v4 >> 16)) % *(unsigned int *)(a1 + 136);
  if ((v5 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = (v4 ^ (v4 >> 16)) % *(unsigned int *)(a1 + 136);
  if (std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::find<unsigned int>((void *)(a1 + 152), &v8))
  {
    return 0xFFFFFFFFLL;
  }
  unsigned int v7 = v5;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(a1 + 152, &v7, &v7);
  return *(unsigned int *)(*(void *)(a1 + 144) + 4 * v5);
}

uint64_t MTLProgressBinsSelectSubstreamWithDescriptor(uint64_t a1, int a2, MTLAccelerationStructureDescriptor *a3)
{
  unint64_t PrimitiveCountFromDescriptor = MTLProgressBinsGetPrimitiveCountFromDescriptor(a3);

  return MTLProgressBinsSelectSubstreamWithPrimitiveCount(a1, a2, PrimitiveCountFromDescriptor);
}

uint64_t MTLProgressBinsGetPrimitiveCountFromDescriptor(MTLAccelerationStructureDescriptor *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (![(MTLAccelerationStructureDescriptor *)a1 isInstanceDescriptor])
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    unint64_t v4 = (void *)[(MTLAccelerationStructureDescriptor *)a1 geometryDescriptors];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v22;
LABEL_8:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v22 != v8) {
        objc_enumerationMutation(v4);
      }
      unint64_t v10 = *(void **)(*((void *)&v21 + 1) + 8 * v9);
      uint8x8_t v11 = objc_opt_class();
      if ([v11 isSubclassOfClass:objc_opt_class()]) {
        break;
      }
      uint64_t v13 = objc_opt_class();
      if ([v13 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v12 = [v10 boundingBoxCount];
        goto LABEL_15;
      }
      unint64_t v14 = objc_opt_class();
      if ([v14 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v15 = [v10 triangleCount];
        float v16 = (void *)[v10 vertexBuffers];
LABEL_24:
        v7 += [v16 count] * v15;
        goto LABEL_25;
      }
      BOOL v17 = objc_opt_class();
      if ([v17 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v15 = [v10 boundingBoxCount];
        float v16 = (void *)[v10 boundingBoxBuffers];
        goto LABEL_24;
      }
      unint64_t v18 = objc_opt_class();
      if ([v18 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v12 = [v10 segmentCount];
        goto LABEL_15;
      }
      unint64_t v19 = objc_opt_class();
      if ([v19 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v15 = [v10 segmentCount];
        float v16 = (void *)[v10 controlPointBuffers];
        goto LABEL_24;
      }
LABEL_25:
      if (v6 == ++v9)
      {
        uint64_t v6 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
        if (!v6) {
          return v7;
        }
        goto LABEL_8;
      }
    }
    uint64_t v12 = [v10 triangleCount];
LABEL_15:
    v7 += v12;
    goto LABEL_25;
  }
  size_t v2 = objc_opt_class();
  if ([v2 isSubclassOfClass:objc_opt_class()])
  {
    return [(MTLAccelerationStructureDescriptor *)a1 instanceCount];
  }
  size_t v20 = objc_opt_class();
  if (![v20 isSubclassOfClass:objc_opt_class()]) {
    return 0;
  }

  return [(MTLAccelerationStructureDescriptor *)a1 maxInstanceCount];
}

uint64_t MTLProgressBinsSelectSubstreamWithPrimitiveCount(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3 = 12;
  if (a2) {
    uint64_t v3 = 20;
  }
  uint64_t v4 = 8;
  if (a2) {
    uint64_t v4 = 16;
  }
  float v5 = *(float *)(a1 + v4);
  float v6 = *(float *)(a1 + v3);
  unint64_t v7 = *(unsigned __int16 *)(a1 + 40);
  if (v7 < 2)
  {
    unsigned __int16 v9 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unsigned __int16 v9 = 0;
    float v10 = *(float *)(a1 + 24);
    unint64_t v11 = v7 - 1;
    do
    {
      float v12 = *(float *)(a1 + 28 + 4 * v8++);
      if (v12 < v10)
      {
        unsigned __int16 v9 = v8;
        float v10 = v12;
      }
    }
    while (v11 != v8);
  }
  *(_WORD *)(a1 + 42) = v9;
  *(float *)(a1 + 44) = v5 + (float)(v6 * (float)a3);
  return v9;
}

uint64_t MTLProgressBinsUpdate(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 42);
  *(float *)(a1 + 4 * v2 + 24) = *(float *)(a1 + 44) + *(float *)(a1 + 4 * v2 + 24);
  *(_DWORD *)(a1 + 44) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 72);
    if (v3)
    {
      int v4 = *(_DWORD *)(a1 + 140);
      do
      {
        *((_DWORD *)v3 + 8) = v4;
        *((_DWORD *)v3 + 9) = v2;
        uint64_t v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_handle_merge_multi[abi:ne180100]<std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>((void *)(a1 + 96), (void *)(a1 + 56));
    ++*(_DWORD *)(a1 + 140);
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)(a1 + 176)) {
    return 0xFFFFFFFFLL;
  }
  float v6 = (void *)(a1 + 152);
  uint64_t v5 = *(unsigned int *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = v5 + 1;
  unint64_t v7 = *(uint64_t ***)(a1 + 168);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 144);
    do
    {
      *(_DWORD *)(v8 + 4 * *((unsigned int *)v7 + 4)) = v5;
      unint64_t v7 = (uint64_t **)*v7;
    }
    while (v7);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear(v6);
  return v5;
}

void *MTLProgressBinsForceBarrier(void *result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*((unsigned char *)result + 48))
    {
      [a2 endVirtualSubstream];
      return (void *)[a2 beginVirtualSubstream];
    }
    else
    {
      uint64_t v4 = *((unsigned __int16 *)result + 21);
      uint64_t v5 = *((unsigned int *)result + 35);
      *((_DWORD *)result + 35) = v5 + 1;
      [a2 signalProgress:v5];
      if (*((_WORD *)v3 + 20))
      {
        uint64_t v6 = 0;
        do
        {
          [a2 setSubstream:v6];
          [a2 waitForProgress:v5];
          uint64_t v6 = (v6 + 1);
        }
        while (v6 < *((unsigned __int16 *)v3 + 20));
      }
      [a2 setSubstream:v4];
      return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear(v3 + 19);
    }
  }
  return result;
}

uint64_t MTLProgressBinsEnableVirtualSubstreams(uint64_t result)
{
  if (result) {
    *(unsigned char *)(result + 48) = 1;
  }
  return result;
}

void *MTLProgressBinsReset(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL result = std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear(result + 12);
    v1[3] = 0;
    v1[4] = 0;
    *((_WORD *)v1 + 21) = 0;
    *((_DWORD *)v1 + 35) = 0;
  }
  return result;
}

void MTLAccelerationStructureCommandProgressBinsInternal::MTLAccelerationStructureCommandProgressBinsInternal(MTLAccelerationStructureCommandProgressBinsInternal *this, unsigned int a2, unsigned int a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 1065353216;
  *(float *)this = a4;
  *((float *)this + 1) = a5;
  *((float *)this + 2) = a6;
  *((float *)this + 3) = a7;
  *((float *)this + 4) = a8;
  *((float *)this + 5) = a9;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_WORD *)this + 20) = a2;
  *((_WORD *)this + 21) = 0;
  *((_DWORD *)this + 35) = 0;
  if (a2 >= 2 && a3 >= 2) {
    operator new[]();
  }
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 34) = 0;
}

void sub_18283CA08(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MTLAccelerationStructureCommandProgressBinsInternal::~MTLAccelerationStructureCommandProgressBinsInternal(MTLAccelerationStructureCommandProgressBinsInternal *this)
{
  uint64_t v2 = *((void *)this + 18);
  if (v2) {
    MEMORY[0x18530C120](v2, 0x1000C8052888210);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 152);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 56);
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unsigned __int16 v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      float v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          float v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  float v10 = operator new(0x18uLL);
  *float v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *float v10 = *v19;
LABEL_38:
    *unint64_t v19 = v10;
    goto LABEL_39;
  }
  *float v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_18283CC90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_handle_merge_multi[abi:ne180100]<std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>(void *result, void *a2)
{
  uint64_t v2 = (void *)a2[2];
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      unint64_t v5 = v2[2];
      unint64_t v6 = HIDWORD(v5);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
      unint64_t v8 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      inserted = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi_prepare((uint64_t)v4, v8, v2 + 2);
      float v10 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::remove(a2, v2, (uint64_t)v11);
      v2[1] = v8;
      BOOL result = std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_perform(v4, v2, inserted);
      uint64_t v2 = v10;
    }
    while (v10);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  unint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    BOOL result = v16;
    unint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__equal_range_multi<objc_object  {objcproto9MTLBuffer}>(void *a1, void *a2)
{
  BOOL result = std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(a1, a2);
  if (result)
  {
    int8x8_t v4 = result;
    do
      int8x8_t v4 = (void *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__emplace_multi<std::pair<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal>>(void *a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__construct_node<std::pair<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal>>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi(a1, v4);
}

void sub_18283D1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__construct_node<std::pair<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal>>@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  unint64_t v7 = *a2;
  *((void *)v6 + 2) = *a2;
  __n128 result = *(__n128 *)(a2 + 1);
  *(__n128 *)(v6 + 24) = result;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t v9 = HIDWORD(v7);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69
                                                                             * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return result;
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi(void *a1, void *a2)
{
  int8x8_t v4 = a2 + 2;
  unint64_t v5 = a2[2];
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  inserted = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi_prepare((uint64_t)a1, v8, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

uint64_t ca_log_graphics_CommandQueueRateLimiting(const NSString *a1)
{
  return AnalyticsSendEventLazy();
}

uint64_t ___Z40ca_log_graphics_CommandQueueRateLimitingPK8NSString_block_invoke(uint64_t a1)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v3 = @"process_name";
  v4[0] = v1;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v4 forKeys:&v3 count:1];
}

void __createCommandQueueRateLimitingTelemetry_block_invoke()
{
  CFBundleRef MainBundle = CFBundleGetMainBundle();
  CFRetain(MainBundle);
  if (!MainBundle) {
    goto LABEL_8;
  }
  CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
  if (!Identifier) {
    goto LABEL_8;
  }
  CFStringRef v2 = Identifier;
  CFIndex Length = CFStringGetLength(Identifier);
  CFIndex v4 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  unint64_t v5 = malloc_type_malloc(v4, 0xC1B0FE65uLL);
  if (!CFStringGetCString(v2, v5, v4, 0x8000100u))
  {
    free(v5);
LABEL_8:
    CFRelease(MainBundle);
    goto LABEL_9;
  }
  CFRelease(MainBundle);
  if (v5)
  {
    if (*v5)
    {
LABEL_10:
      [NSString stringWithUTF8String:v5];
      goto LABEL_11;
    }
    free(v5);
  }
LABEL_9:
  unint64_t v6 = getprogname();
  unint64_t v5 = strdup(v6);
  if (MainBundle) {
    goto LABEL_10;
  }
LABEL_11:
  AnalyticsSendEventLazy();
  free(v5);
}

void validateGPUPriority(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 > 5)
  {
    MTLReportFailure(0, "validateGPUPriority", 121, @"priority (%d) is not a valid MTLGPUPriority", a5, a6, a7, a8, a1);
  }
  else if (a1 == 3 && (a2 & 1) == 0)
  {
    MTLReportFailure(0, "validateGPUPriority", 118, @"priority (%d) is not valid for foreground", a5, a6, a7, a8, 3);
  }
}

BOOL MTLVersionedDB::isVersionEntry(uint64_t a1, uint64_t a2, char *__s1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    if (a2 == 8) {
      return *(void *)__s1 == 0xFFFFFFFFLL;
    }
    return 0;
  }
  if (a2 != 12) {
    return 0;
  }
  return strncmp(__s1, "_DB_VERSION_", 0xCuLL) == 0;
}

void MTLVersionedDB::getOrSetVersion(MTLVersionedDB *this, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v8 = a2;
  uint64_t v6 = 4;
  unint64_t v7 = &v8;
  uint64_t v5 = 0xFFFFFFFFLL;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_DB_VERSION_");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v4 = __p;
  }
  if (*((unsigned char *)this + 12)) {
    operator new();
  }
  operator new();
}

void sub_18283E620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&a9);
  MEMORY[0x18530C140](v18, 0x1080C4057E67DB5);
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void MTLVersionedDB::openDB(uint64_t *a1, uint64_t a2, int a3, unsigned char *a4, unsigned char *a5)
{
  *a4 = 1;
  *a5 = 1;
  int v9 = mdb_env_create(a1);
  if (v9)
  {
    int v10 = v9;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      MTLVersionedDB::openDB(v10);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0) {
      size_t v11 = (const char *)a2;
    }
    else {
      size_t v11 = *(const char **)a2;
    }
    mkdir(v11, 0x1EDu);
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v12 = (const char *)a2;
    }
    else {
      unint64_t v12 = *(const char **)a2;
    }
    int v13 = mdb_env_open(*a1, v12, 0, 0x1A4u);
    if (!v13) {
      MTLVersionedDB::getOrSetVersion((MTLVersionedDB *)a1, a3);
    }
    int v14 = v13;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      MTLVersionedDB::openDB((char *)(a2 + 23), (void *)a2, v14);
    }
    mdb_env_close((void *)*a1);
    *a4 = 0;
  }
  *a1 = 0;
}

void **MTLVersionedDB::MTLVersionedDB(void **a1, uint64_t a2, int a3, char a4, char a5)
{
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((unsigned char *)a1 + 12) = a4;
  *((unsigned char *)a1 + 13) = a5;
  __int16 v19 = 0;
  MTLVersionedDB::openDB((uint64_t *)a1, a2, a3, (unsigned char *)&v19 + 1, &v19);
  if (HIBYTE(v19)) {
    BOOL v8 = v19 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      MTLVersionedDB::MTLVersionedDB();
    }
    if (*a1)
    {
      MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v18, (MTLVersionedDB *)a1);
      if (v18)
      {
        mdb_drop(v18, *((_DWORD *)a1 + 2), 0);
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        MTLVersionedDB::MTLVersionedDB(a2, v10, v11, v12, v13, v14, v15, v16);
      }
      MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v18);
      int v9 = *a1;
    }
    else
    {
      int v9 = 0;
    }
    mdb_env_close(v9);
    MTLVersionedDB::openDB((uint64_t *)a1, a2, a3, (unsigned char *)&v19 + 1, &v19);
    if (!HIBYTE(v19) || !(_BYTE)v19)
    {
      if (*a1) {
        mdb_env_close(*a1);
      }
      *a1 = 0;
    }
  }
  return a1;
}

void sub_18283E904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

MTLVersionedDB::Transaction *MTLVersionedDB::Transaction::Transaction(MTLVersionedDB::Transaction *this, MTLVersionedDB *a2)
{
  *(void *)this = 0;
  if (*(void *)a2)
  {
    int v4 = mdb_txn_begin(*(void *)a2, 0, 0, (uint64_t *)this);
    if (v4)
    {
      int v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        MTLVersionedDB::Transaction::Transaction(v5);
      }
LABEL_12:
      *(void *)this = 0;
      return this;
    }
    if (*((unsigned char *)a2 + 12)) {
      int v6 = 262152;
    }
    else {
      int v6 = 0x40000;
    }
    int v7 = mdb_dbi_open(*(void *)this, 0, v6 | (4 * *((unsigned __int8 *)a2 + 13)), (unsigned int *)a2 + 2);
    if (v7)
    {
      int v8 = v7;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        MTLVersionedDB::Transaction::Transaction(v8);
      }
      mdb_txn_abort(*(void *)this);
      goto LABEL_12;
    }
  }
  return this;
}

void MTLVersionedDB::Transaction::~Transaction(MTLVersionedDB::Transaction *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)this;
  if (v1)
  {
    int v2 = mdb_txn_commit(v1);
    if (v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        unint64_t v3 = mdb_strerror(v2);
        MTLVersionedDB::Transaction::~Transaction((uint64_t)v3, v4);
      }
    }
  }
}

void sub_18283EA88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void MTLVersionedDB::~MTLVersionedDB(MTLVersionedDB *this)
{
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    mdb_dbi_close(v2, *((_DWORD *)this + 2));
    mdb_env_close(*(void **)this);
  }
}

void MTLVersionedDB::dumpTable(MTLVersionedDB *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v10, this);
  if (v10)
  {
    uint64_t v9 = 0;
    int v2 = mdb_cursor_open(v10, *((_DWORD *)this + 2), &v9);
    if (v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        unint64_t v3 = mdb_strerror(v2);
        MTLArchiveUsageDB::prune((uint64_t)v3, buf);
      }
    }
    else
    {
      int v4 = mdb_cursor_get(v9, v8, v7, 0);
      int v5 = 0;
      int v6 = MEMORY[0x1E4F14500];
      while (v4 != -30798)
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67110144;
          int v12 = v5;
          __int16 v13 = 2048;
          uint64_t v14 = v8[0];
          __int16 v15 = 2048;
          uint64_t v16 = v8[1];
          __int16 v17 = 2048;
          uint64_t v18 = v7[0];
          __int16 v19 = 2048;
          uint64_t v20 = v7[1];
          _os_log_debug_impl(&dword_1826F6000, v6, OS_LOG_TYPE_DEBUG, "%d: key(%zu,%p) data(%zu,%p)", buf, 0x30u);
          ++v5;
        }
        int v4 = mdb_cursor_get(v9, v8, v7, 8);
      }
    }
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v10);
}

void sub_18283EC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)va);
  _Unwind_Resume(a1);
}

void FileSignature::FileSignature(FileSignature *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

uint64_t FileSignature::FileSignature(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    int v4 = (const char *)a2;
  }
  else {
    int v4 = *(const char **)a2;
  }
  if (!stat(v4, &v11))
  {
    *(_DWORD *)a1 = v11.st_dev;
    *(void *)(a1 + 8) = v11.st_ino;
  }
  uint64_t v10 = 0;
  long long v9 = xmmword_1828F0D58;
  if (*(char *)(a2 + 23) >= 0) {
    int v5 = (const char *)a2;
  }
  else {
    int v5 = *(const char **)a2;
  }
  if (!getattrlist(v5, &v9, v7, 8uLL, 0x20u)) {
    *(_DWORD *)(a1 + 16) = v8;
  }
  return a1;
}

BOOL operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  return *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == (unint64_t)*(unsigned int *)(a2 + 16);
}

{
  BOOL v2;

  if (*(unsigned char *)(a1 + 1088)) {
    int v2 = *(unsigned char *)(a2 + 1088) == 0;
  }
  else {
    int v2 = 1;
  }
  return !v2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(void *)(a1 + 40) == *(void *)(a2 + 40)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
}

BOOL operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2
      || *(void *)(a1 + 8) != *(void *)(a2 + 8)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16);
}

uint64_t ArchivePayload::ArchivePayload(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a5;
  FileSignature::FileSignature(a1 + 8, a2);
  FileSignature::FileSignature(a1 + 32, a3);
  *(void *)(a1 + 1080) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::size_type v7 = *(void *)(a3 + 8);
    if (v7 >= 0x401)
    {
      char v9 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type v7 = *(unsigned __int8 *)(a3 + 23);
  }
  std::string::copy((const std::string *)a3, (std::string::value_type *)(a1 + 56), v7, 0);
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  *(void *)(a1 + 1080) = v8;
  char v9 = 1;
LABEL_8:
  *(unsigned char *)(a1 + 1088) = v9;
  return a1;
}

_DWORD *ArchivePayload::ArchivePayload(_DWORD *__dst, size_t __n, void *__src)
{
  __dst[2] = 0;
  *((void *)__dst + 2) = 0;
  __dst[6] = 0;
  __dst[8] = 0;
  *((void *)__dst + 5) = 0;
  __dst[12] = 0;
  *((void *)__dst + 135) = 0;
  *((unsigned char *)__dst + 1088) = 0;
  if (__n - 1081 >= 0xFFFFFFFFFFFFFBFFLL)
  {
    memcpy(__dst, __src, __n);
    *((void *)__dst + 135) = __n - 56;
    *((unsigned char *)__dst + 1088) = 1;
  }
  return __dst;
}

void ArchivePayload::serialization(ArchivePayload *this)
{
}

void *ArchivePayload::getRecompiledArchive@<X0>(ArchivePayload *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100](a2, (char *)this + 56, *((void *)this + 135));
}

uint64_t ArchivePayload::isValid(ArchivePayload *this)
{
  return *((unsigned __int8 *)this + 1088);
}

BOOL ArchivePayload::matchesCurrent(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 1088)) {
    return 0;
  }
  std::string::basic_string[abi:ne180100](__p, (void *)(a1 + 56), *(void *)(a1 + 1080));
  ArchivePayload::ArchivePayload((uint64_t)v7, a2, (uint64_t)__p, 0, 0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return operator==((uint64_t)v7, a1);
}

void sub_18283EFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **MTLArchiveMapDB::MTLArchiveMapDB(void **a1, uint64_t a2)
{
  return MTLVersionedDB::MTLVersionedDB(a1, a2, 3, 0, 1);
}

void MTLArchiveMapDB::remove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v8 = *(std::string *)a3;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v9 = v8;
  }
  uint64_t v7 = 0;
  int v5 = mdb_cursor_open(a2, *(_DWORD *)(a1 + 8), &v7);
  if (!v5) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    char v6 = mdb_strerror(v5);
    MTLArchiveUsageDB::prune((uint64_t)v6, buf);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_18283F3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x18530C140](v20, 0x1000C4006F0AA6CLL);
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void MTLArchiveMapDB::read(MTLVersionedDB *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v11, a1);
  if (v11)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v9 = *(std::string *)a2;
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v10, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v10 = v9;
    }
    uint64_t v8 = 0;
    int v6 = mdb_cursor_open(v11, *((_DWORD *)a1 + 2), &v8);
    if (!v6) {
      operator new();
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = mdb_strerror(v6);
      MTLArchiveUsageDB::prune((uint64_t)v7, buf);
    }
    std::string::basic_string[abi:ne180100]<0>(a3, "");
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v11);
}

void sub_18283F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  MEMORY[0x18530C140](v26, 0x1000C4006F0AA6CLL);
  if (a23 < 0) {
    operator delete(__p);
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&a26);
  _Unwind_Resume(a1);
}

void MTLArchiveMapDB::store(MTLVersionedDB *a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v12, a1);
  if (v12)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v11 = __p;
    }
    ArchivePayload::ArchivePayload((uint64_t)v13, a2, (uint64_t)a3, a4, a5);
    if (v13[1088])
    {
      MTLArchiveMapDB::remove((uint64_t)a1, v12, a2);
      operator new();
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      MTLArchiveMapDB::store((char *)(a2 + 23), (void *)a2, a3);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v12);
}

void sub_18283FB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&a22);
  _Unwind_Resume(a1);
}

__CFString *MTLSamplerMinMagFilterString(MTLSamplerMinMagFilter a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5220CF0[(int)a1];
  }
}

__CFString *MTLSamplerMipFilterString(MTLSamplerMipFilter a1)
{
  if (a1 > MTLSamplerMipFilterLinear) {
    return @"Unknown";
  }
  else {
    return off_1E5220D08[a1];
  }
}

__CFString *MTLSamplerAddressModeString(MTLSamplerAddressMode a1)
{
  if (a1 > (MTLSamplerAddressModeClampToZero|MTLSamplerAddressModeRepeat)) {
    return @"Unknown";
  }
  else {
    return off_1E5220D20[a1];
  }
}

__CFString *MTLSamplerBorderColorString(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5220D58[a1];
  }
}

void *_MTLCreateConstantSamplerDescriptorsFromBitmasks(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = a1;
  for (uint64_t i = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:a1]; v3; --v3)
  {
    unint64_t v5 = *a2++;
    int v6 = objc_alloc_init(MTLSamplerDescriptor);
    setDescriptorFromBitmask(v6, v5, 1);
    [i addObject:v6];
  }
  return i;
}

void setDescriptorFromBitmask(MTLSamplerDescriptor *a1, unint64_t a2, int a3)
{
  [(MTLSamplerDescriptor *)a1 setMinFilter:(a2 >> 11) & 3];
  [(MTLSamplerDescriptor *)a1 setMagFilter:(a2 >> 9) & 3];
  [(MTLSamplerDescriptor *)a1 setMipFilter:(a2 >> 13) & 3];
  if ((a2 & 7) >= 5)
  {
    MTLReportFailure(0, "addressModeFromConstantSamplerLiteral", 851, @"Unexpected MTLSamplerAddressMode from constant sampler reflection: %llu", v6, v7, v8, v9, a2 & 7);
    uint64_t v10 = 4;
  }
  else
  {
    uint64_t v10 = qword_1828F0D78[a2 & 7];
  }
  [(MTLSamplerDescriptor *)a1 setSAddressMode:v10];
  unint64_t v15 = (a2 >> 3) & 7;
  if (v15 >= 5)
  {
    MTLReportFailure(0, "addressModeFromConstantSamplerLiteral", 851, @"Unexpected MTLSamplerAddressMode from constant sampler reflection: %llu", v11, v12, v13, v14, (a2 >> 3) & 7);
    uint64_t v16 = 4;
  }
  else
  {
    uint64_t v16 = qword_1828F0D78[v15];
  }
  [(MTLSamplerDescriptor *)a1 setTAddressMode:v16];
  unint64_t v21 = (a2 >> 6) & 7;
  if (v21 >= 5)
  {
    MTLReportFailure(0, "addressModeFromConstantSamplerLiteral", 851, @"Unexpected MTLSamplerAddressMode from constant sampler reflection: %llu", v17, v18, v19, v20, (a2 >> 6) & 7);
    uint64_t v22 = 4;
  }
  else
  {
    uint64_t v22 = qword_1828F0D78[v21];
  }
  [(MTLSamplerDescriptor *)a1 setRAddressMode:v22];
  [(MTLSamplerDescriptor *)a1 setNormalizedCoordinates:(a2 & 0x8000) == 0];
  [(MTLSamplerDescriptor *)a1 setMaxAnisotropy:((a2 >> 20) & 0xF) + 1];
  uint64_t v27 = (a2 >> 16) & 0xF;
  switch(v27)
  {
    case 0:
      goto LABEL_20;
    case 1:
      goto LABEL_19;
    case 2:
      uint64_t v27 = 3;
      goto LABEL_19;
    case 3:
      uint64_t v27 = 4;
      goto LABEL_19;
    case 4:
      uint64_t v27 = 6;
      goto LABEL_19;
    case 5:
      uint64_t v27 = 2;
      goto LABEL_19;
    case 6:
      uint64_t v27 = 5;
      goto LABEL_19;
    case 7:
      uint64_t v27 = 7;
      goto LABEL_19;
    case 8:
      goto LABEL_13;
    default:
      MTLReportFailure(0, "compareFunctionFromConstantSamplerLiteral", 833, @"Unexpected MTLCompareFunction from constant sampler reflection: %llu", v23, v24, v25, v26, (a2 >> 16) & 0xF);
LABEL_13:
      uint64_t v27 = 0;
LABEL_19:
      [(MTLSamplerDescriptor *)a1 setCompareFunction:v27];
LABEL_20:
      [(MTLSamplerDescriptor *)a1 setBorderColor:HIBYTE(a2) & 3];
      [(MTLSamplerDescriptor *)a1 setForceResourceIndex:0];
      [(MTLSamplerDescriptor *)a1 setResourceIndex:0];
      _H0 = a2 >> 24;
      __asm { FCVT            S0, H0 }
      [(MTLSamplerDescriptor *)a1 setLodMinClamp:_D0];
      _H0 = HIDWORD(a2) >> 8;
      __asm { FCVT            S0, H0 }
      [(MTLSamplerDescriptor *)a1 setLodMaxClamp:_D0];
      if ((a2 & 0x8000000000000000) != 0 || !a3)
      {
        if ((a2 & 0x7C00000000000000) != 0) {
          MTLReportFailure(0, "setDescriptorFromBitmask", 943, @"Constant sampler has unrecognized bits: 0x%llx", v36, v37, v38, v39, a2);
        }
      }
      else
      {
        MTLReportFailure(0, "setDescriptorFromBitmask", 939, @"Constant sampler does not have the most significant bit set: 0x%llX", v36, v37, v38, v39, a2);
      }
      return;
  }
}

void setDescriptorFromBitmask(MTLSamplerDescriptor *a1, unint64_t *a2, uint64_t a3)
{
  if (a3 == 2)
  {
    setDescriptorFromBitmask(a1, *a2, 0);
    LOWORD(_D0) = *((_WORD *)a2 + 4);
    __asm { FCVT            S0, H0 }
    [(MTLSamplerDescriptor *)a1 setLodBias:_D0];
  }
  else if (a3 == 1)
  {
    unint64_t v5 = *a2;
    setDescriptorFromBitmask(a1, v5, 1);
  }
}

void *_MTLCreateConstantSamplerDescriptorsFromBitmasksStrided(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:a1];
  uint64_t v7 = a2 >> 3;
  unint64_t v8 = v7 * a1;
  if (v7 * a1)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = objc_alloc_init(MTLSamplerDescriptor);
      setDescriptorFromBitmask(v10, a3, v7);
      [v6 addObject:v10];

      v9 += v7;
      a3 += v7;
    }
    while (v9 < v8);
  }
  return v6;
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__55(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (result) {
    JUMPOUT(0x18530C120);
  }
  return result;
}

void sub_182841788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a50, 8);
  uint64_t v70 = a56;
  a56 = 0;
  if (v70) {
    MEMORY[0x18530C120](v70, 0x1000C800CE834B2);
  }
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x350], 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__57(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

__n128 __Block_byref_object_copy__61_0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v5;
  return result;
}

uint64_t __Block_byref_object_copy__76(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__77(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 48);
}

void std::vector<nlist_64>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_182842C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a72 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  uint64_t v74 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v74;
    operator delete(v74);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__88(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void sub_18284348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40)
{
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

void LoaderContext::addImage()
{
}

void sub_1828438D0(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::~__split_buffer((uint64_t)va);
  __clang_call_terminate(a1);
}

uint64_t std::vector<std::unique_ptr<LoaderContext::Image>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  long long v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    uint64_t *v1 = 0;
    if (v3) {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
}

void std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    JUMPOUT(0x18530C140);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

uint64_t LoaderContext::loadRecursive(uint64_t a1, uint64_t a2, unint64_t a3, __CFString *a4, uint64_t a5, id *a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32) < a3) {
    *(void *)(a1 + 32) = a3;
  }
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  unint64_t v9 = *(void **)(a2 + 16);
  uint64_t v10 = [v9 countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (!v10) {
    return 1;
  }
  unint64_t v11 = a3 + 1;
  uint64_t v12 = *(void *)v39;
  while (2)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(void *)v39 != v12) {
        objc_enumerationMutation(v9);
      }
      char v14 = *(void **)(*((void *)&v38 + 1) + 8 * i);
      if (*(void *)(a2 + 32)
        || ([*(id *)(*((void *)&v38 + 1) + 8 * i) isEqualToString:@"/System/Library/Frameworks/CoreImage.framework/CoreImage.metallib"] & 1) == 0)
      {
        long long v15 = (const char *)[v14 UTF8String];
        long long v16 = v15;
        int v17 = *v15;
        uint64_t v18 = (NSString *)v14;
        if (v17 != 47)
        {
          if (v17 != 64)
          {
            uint64_t v26 = ": relative paths cannot be used to load Metal libraries";
            goto LABEL_36;
          }
          if (!strncmp(v15, "@executable_path/", 0x11uLL))
          {
            uint64_t v19 = *(void **)(a1 + 16);
            if (!v19)
            {
              uint64_t v26 = ": @executable_path cannot be used in a library that has not been loaded from file URL";
LABEL_36:
              if (a6)
              {
                uint64_t v27 = @"<no URL>";
                unint64_t v28 = a4;
                if (!a4) {
                  unint64_t v28 = @"<no URL>";
                }
                if (*(void *)(a1 + 16)) {
                  uint64_t v27 = *(__CFString **)(a1 + 16);
                }
                uint64_t v29 = [NSString stringWithFormat:@"Unable to resolve install name ”%@” (embedded in ”%@”, loading from executable directory ”%@”)%s", v14, v28, v27, v26];
                uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v29 forKey:*MEMORY[0x1E4F28568]];
                id v31 = objc_alloc(MEMORY[0x1E4F28C58]);
                uint64_t v32 = 3;
                goto LABEL_42;
              }
              return 0;
            }
            uint64_t v20 = [NSString stringWithUTF8String:v16 + 16];
          }
          else
          {
            if (strncmp(v16, "@loader_path/", 0xDuLL)) {
              goto LABEL_32;
            }
            uint64_t v19 = (void *)[(__CFString *)a4 stringByDeletingLastPathComponent];
            if (!v19)
            {
              uint64_t v26 = ": @loader_path cannot be used in a library that has not been loaded from file URL";
              goto LABEL_36;
            }
            uint64_t v20 = [NSString stringWithUTF8String:v16 + 12];
          }
          uint64_t v18 = (NSString *)[v19 stringByAppendingString:v20];
        }
        if (!v18)
        {
LABEL_32:
          uint64_t v26 = "";
          goto LABEL_36;
        }
        uint64_t Image = LoaderContext::getImage((LoaderContext *)a1, v18);
        if (!Image)
        {
          uint64_t v22 = (void *)+[MTLLoader canonicalURL:]((uint64_t)MTLLoader, (uint64_t)v18);
          uint64_t v23 = (NSString *)[v22 path];
          uint64_t Image = LoaderContext::getImage((LoaderContext *)a1, v23);
          if (!Image)
          {
            if ([*(id *)(a1 + 8) newDynamicLibraryWithURL:v22 options:a5 error:a6]) {
              LoaderContext::addImage();
            }
            if (a6)
            {
              uint64_t v34 = [NSString stringWithFormat:@"Unable to load ”%@”, which was resolved from install name ”%@” (embedded in ”%@”, loading from executable directory ”%@”): %@", v23, v14, a4, *(void *)(a1 + 16), objc_msgSend(*a6, "localizedDescription")];
              uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v34 forKey:*MEMORY[0x1E4F28568]];
              id v31 = objc_alloc(MEMORY[0x1E4F28C58]);
              uint64_t v32 = 4;
LABEL_42:
              id v33 = (id)[v31 initWithDomain:@"MTLDynamicLibraryDomain" code:v32 userInfo:v30];
              uint64_t result = 0;
              *a6 = v33;
              return result;
            }
            return 0;
          }
        }
        unint64_t v24 = *(void *)(Image + 24);
        if (v24 >= v11) {
          unint64_t v24 = v11;
        }
        *(void *)(Image + 24) = v24;
      }
    }
    uint64_t v10 = [v9 countByEnumeratingWithState:&v38 objects:v42 count:16];
    uint64_t result = 1;
    if (v10) {
      continue;
    }
    return result;
  }
}

void sub_182843F34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return;
  }
  v21[9] = v2;
  v21[10] = v3;
  char v6 = a1 + 1;
  if (a1 + 1 == a2) {
    return;
  }
  uint64_t v7 = 0;
  uint64_t v8 = a1;
  do
  {
    unint64_t v9 = v8;
    uint64_t v8 = v6;
    uint64_t v10 = (void *)v9[1];
    unint64_t v11 = v10[3];
    unint64_t v12 = *(void *)(*v9 + 24);
    if (v11 >= v12 && (v12 < v11 || *v10 >= *(void *)*v9)) {
      goto LABEL_21;
    }
    uint64_t v13 = 0;
    uint64_t *v8 = 0;
    v21[0] = v10;
    uint64_t v14 = (void *)*v9;
    for (uint64_t i = v7; ; i -= 8)
    {
      *(uint64_t *)((char *)a1 + i + 8) = (uint64_t)v14;
      *(uint64_t *)((char *)a1 + i) = 0;
      if (v13) {
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)a1 + i + 8, v13);
      }
      uint64_t v16 = v21[0];
      if (!i)
      {
        unint64_t v9 = a1;
        goto LABEL_18;
      }
      uint64_t v14 = *(void **)((char *)a1 + i - 8);
      unint64_t v17 = *(void *)(v21[0] + 24);
      unint64_t v18 = v14[3];
      if (v17 >= v18) {
        break;
      }
LABEL_12:
      --v9;
      uint64_t v13 = *(uint64_t *)((char *)a1 + i);
    }
    if (v18 >= v17)
    {
      if (*(void *)v21[0] >= *v14) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    unint64_t v9 = (uint64_t *)((char *)a1 + i);
LABEL_18:
    v21[0] = 0;
    uint64_t v19 = *v9;
    *unint64_t v9 = v16;
    if (v19)
    {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v9, v19);
      uint64_t v20 = v21[0];
      v21[0] = 0;
      if (v20) {
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v21, v20);
      }
    }
LABEL_21:
    char v6 = v8 + 1;
    v7 += 8;
  }
  while (v8 + 1 != a2);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    v17[5] = v2;
    v17[6] = v3;
    char v5 = a1;
    while (v5 + 1 != a2)
    {
      char v6 = v5++;
      uint64_t v7 = (void *)v6[1];
      unint64_t v8 = v7[3];
      unint64_t v9 = *(void *)(*v6 + 24);
      if (v8 < v9 || v9 >= v8 && *v7 < *(void *)*v6)
      {
        uint64_t v10 = 0;
        uint64_t *v5 = 0;
        v17[0] = v7;
        unint64_t v11 = (void *)*v6;
        while (1)
        {
          v6[1] = (uint64_t)v11;
          *char v6 = 0;
          if (v10) {
            std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)(v6 + 1), v10);
          }
          unint64_t v11 = (void *)*(v6 - 1);
          uint64_t v12 = v17[0];
          unint64_t v13 = *(void *)(v17[0] + 24);
          unint64_t v14 = v11[3];
          if (v13 >= v14 && (v14 < v13 || *(void *)v17[0] >= *v11)) {
            break;
          }
          uint64_t v10 = *v6--;
        }
        v17[0] = 0;
        uint64_t v15 = *v6;
        *char v6 = v12;
        if (v15)
        {
          std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v6, v15);
          uint64_t v16 = v17[0];
          v17[0] = 0;
          if (v16) {
            std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v17, v16);
          }
        }
      }
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  int v4 = *(void **)a1;
  unint64_t v5 = *(void *)(*(void *)a2 + 24);
  unint64_t v6 = *(void *)(*(void *)a1 + 24);
  if (v5 < v6 || v6 >= v5 && *v3 < *v4)
  {
    uint64_t v7 = *(void **)a3;
    unint64_t v8 = *(void *)(*(void *)a3 + 24);
    if (v8 < v5 || v5 >= v8 && *v7 < *v3)
    {
      *(void *)a1 = v7;
      *(void *)a3 = v4;
    }
    else
    {
      *(void *)a1 = v3;
      *(void *)a2 = v4;
      uint64_t v16 = *(void **)a3;
      unint64_t v17 = *(void *)(*(void *)a3 + 24);
      if (v17 < v6 || v6 >= v17 && *v16 < *v4)
      {
        *(void *)a2 = v16;
        *(void *)a3 = v4;
        return 2;
      }
    }
    return 1;
  }
  uint64_t v10 = *(void **)a3;
  unint64_t v11 = *(void *)(*(void *)a3 + 24);
  if (v11 < v5 || v5 >= v11 && *v10 < *v3)
  {
    *(void *)a2 = v10;
    *(void *)a3 = v3;
    uint64_t v12 = *(void **)a2;
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = *(void *)(*(void *)a2 + 24);
    unint64_t v15 = *(void *)(*(void *)a1 + 24);
    if (v14 < v15 || v15 >= v14 && *v12 < *v13)
    {
      *(void *)a1 = v12;
      *(void *)a2 = v13;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<LoaderContext::Image> *,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  uint64_t v26 = v2;
  uint64_t v3 = (void *)*(a2 - 1);
  unint64_t v4 = v2[3];
  unint64_t v5 = v3[3];
  if (v4 >= v5 && (v5 < v4 || *v2 >= *v3))
  {
    for (uint64_t i = a1 + 1; i < a2; ++i)
    {
      unint64_t v25 = *(void *)(*i + 24);
      if (v4 < v25 || v25 >= v4 && *v2 < *(void *)*i) {
        break;
      }
    }
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unint64_t v8 = (void *)i[1];
      ++i;
      uint64_t v7 = v8;
      unint64_t v9 = v8[3];
    }
    while (v4 >= v9 && (v9 < v4 || *v2 >= *v7));
  }
  if (i < a2)
  {
    --a2;
    while (v4 < v5 || v5 >= v4 && *v2 < *v3)
    {
      uint64_t v10 = (void *)*--a2;
      uint64_t v3 = v10;
      unint64_t v5 = v10[3];
    }
  }
  if (i < a2)
  {
    unint64_t v11 = (void *)*i;
    uint64_t v12 = (void *)*a2;
    do
    {
      *uint64_t i = (uint64_t)v12;
      *a2 = (uint64_t)v11;
      unint64_t v13 = v26[3];
      do
      {
        unint64_t v14 = (void *)i[1];
        ++i;
        unint64_t v11 = v14;
        unint64_t v15 = v14[3];
      }
      while (v13 >= v15 && (v15 < v13 || *v26 >= *v11));
      do
      {
        do
        {
          uint64_t v16 = (void *)*--a2;
          uint64_t v12 = v16;
          unint64_t v17 = v16[3];
        }
        while (v13 < v17);
      }
      while (v17 >= v13 && *v26 < *v12);
    }
    while (i < a2);
  }
  unint64_t v18 = i - 1;
  if (i - 1 != a1)
  {
    uint64_t v19 = *v18;
    *unint64_t v18 = 0;
    uint64_t v20 = *a1;
    *a1 = v19;
    if (v20) {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)a1, v20);
    }
  }
  unint64_t v21 = v26;
  uint64_t v26 = 0;
  uint64_t v22 = *v18;
  *unint64_t v18 = (uint64_t)v21;
  if (v22) {
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)(i - 1), v22);
  }
  uint64_t v23 = (uint64_t)v26;
  uint64_t v26 = 0;
  if (v23) {
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&v26, v23);
  }
  return i;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<LoaderContext::Image> *,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &>(uint64_t *a1, void **a2)
{
  uint64_t v3 = 0;
  unint64_t v4 = (void *)*a1;
  *a1 = 0;
  uint64_t v30 = v4;
  unint64_t v5 = v4[3];
  while (1)
  {
    unint64_t v6 = (void *)a1[v3 + 1];
    unint64_t v7 = v6[3];
    if (v7 >= v5 && (v5 < v7 || *v6 >= *v4)) {
      break;
    }
    ++v3;
  }
  unint64_t v8 = &a1[v3];
  unint64_t v9 = (unint64_t)&a1[v3 + 1];
  if (v3 * 8)
  {
    do
    {
      unint64_t v11 = *--a2;
      uint64_t v10 = v11;
      unint64_t v12 = v11[3];
    }
    while (v12 >= v5 && (v5 < v12 || *v10 >= *v4));
  }
  else
  {
LABEL_19:
    if (v9 < (unint64_t)a2)
    {
      do
      {
        unint64_t v14 = *--a2;
        unint64_t v13 = v14;
        unint64_t v15 = v14[3];
        if (v15 < v5) {
          break;
        }
        if (v5 < v15) {
          goto LABEL_19;
        }
      }
      while (*v13 >= *v4 && v9 < (unint64_t)a2);
    }
  }
  if (v9 < (unint64_t)a2)
  {
    unint64_t v17 = *a2;
    unint64_t v18 = v9;
    uint64_t v19 = a2;
    do
    {
      *(void *)unint64_t v18 = v17;
      v18 += 8;
      *uint64_t v19 = v6;
      unint64_t v20 = v30[3];
      while (1)
      {
        unint64_t v6 = *(void **)v18;
        unint64_t v21 = *(void *)(*(void *)v18 + 24);
        if (v21 >= v20 && (v20 < v21 || *v6 >= *v30)) {
          break;
        }
        v18 += 8;
      }
      do
      {
        uint64_t v22 = (void *)*--v19;
        unint64_t v17 = v22;
        unint64_t v23 = v22[3];
      }
      while (v23 >= v20 && (v20 < v23 || *v17 >= *v30));
    }
    while (v18 < (unint64_t)v19);
    unint64_t v8 = (uint64_t *)(v18 - 8);
  }
  if (v8 != a1)
  {
    uint64_t v24 = *v8;
    uint64_t *v8 = 0;
    uint64_t v25 = *a1;
    *a1 = v24;
    if (v25) {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)a1, v25);
    }
  }
  uint64_t v26 = v30;
  uint64_t v30 = 0;
  uint64_t v27 = *v8;
  uint64_t *v8 = (uint64_t)v26;
  if (v27) {
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v8, v27);
  }
  uint64_t v28 = (uint64_t)v30;
  uint64_t v30 = 0;
  if (v28) {
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&v30, v28);
  }
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void **)(a2 - 8);
      unint64_t v7 = *(void **)a1;
      unint64_t v8 = v6[3];
      unint64_t v9 = *(void *)(*(void *)a1 + 24);
      if (v8 < v9 || v9 >= v8 && *v6 < *v7)
      {
        *(void *)a1 = v6;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      uint64_t v10 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a1 + 8, a1 + 16);
      uint64_t v11 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    unint64_t v14 = *(void **)v11;
    unint64_t v15 = *(void *)(*(void *)v11 + 24);
    unint64_t v16 = *(void *)(*(void *)v10 + 24);
    if (v15 >= v16 && (v16 < v15 || *v14 >= **(void **)v10)) {
      goto LABEL_26;
    }
    uint64_t v17 = 0;
    *(void *)uint64_t v11 = 0;
    uint64_t v25 = v14;
    unint64_t v18 = *(void **)v10;
    for (uint64_t i = v12; ; i -= 8)
    {
      *(void *)(a1 + i + 24) = v18;
      *(void *)(a1 + i + 16) = 0;
      if (v17) {
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](a1 + i + 24, v17);
      }
      unint64_t v20 = v25;
      if (i == -16)
      {
        uint64_t v10 = a1;
        goto LABEL_21;
      }
      unint64_t v18 = *(void **)(a1 + i + 8);
      unint64_t v21 = v25[3];
      unint64_t v22 = v18[3];
      if (v21 >= v22) {
        break;
      }
LABEL_18:
      v10 -= 8;
      uint64_t v17 = *(void *)(a1 + i + 16);
    }
    if (v22 >= v21)
    {
      if (*v25 >= *v18) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
    uint64_t v10 = a1 + i + 16;
LABEL_21:
    uint64_t v25 = 0;
    uint64_t v23 = *(void *)v10;
    *(void *)uint64_t v10 = v20;
    if (v23) {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](v10, v23);
    }
    uint64_t v24 = (uint64_t)v25;
    uint64_t v25 = 0;
    if (v24) {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&v25, v24);
    }
    if (++v13 == 8) {
      return v11 + 8 == a2;
    }
LABEL_26:
    uint64_t v10 = v11;
    v12 += 8;
    v11 += 8;
  }
  while (v11 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a2, a3);
  unint64_t v9 = *(void **)a4;
  uint64_t v10 = *(void **)a3;
  unint64_t v11 = *(void *)(*(void *)a4 + 24);
  unint64_t v12 = *(void *)(*(void *)a3 + 24);
  if (v11 < v12 || v12 >= v11 && *v9 < *v10)
  {
    *(void *)a3 = v9;
    *(void *)a4 = v10;
    int v13 = *(void **)a3;
    unint64_t v14 = *(void **)a2;
    unint64_t v15 = *(void *)(*(void *)a3 + 24);
    unint64_t v16 = *(void *)(*(void *)a2 + 24);
    if (v15 < v16 || v16 >= v15 && *v13 < *v14)
    {
      *(void *)a2 = v13;
      *(void *)a3 = v14;
      uint64_t v17 = *(void **)a2;
      unint64_t v18 = *(void **)a1;
      unint64_t v19 = *(void *)(*(void *)a2 + 24);
      unint64_t v20 = *(void *)(*(void *)a1 + 24);
      if (v19 < v20 || v20 >= v19 && *v17 < *v18)
      {
        *(void *)a1 = v17;
        *(void *)a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a2, a3, a4);
  unint64_t v11 = *(void **)a5;
  unint64_t v12 = *(void **)a4;
  unint64_t v13 = *(void *)(*(void *)a5 + 24);
  unint64_t v14 = *(void *)(*(void *)a4 + 24);
  if (v13 < v14 || v14 >= v13 && *v11 < *v12)
  {
    *(void *)a4 = v11;
    *(void *)a5 = v12;
    unint64_t v15 = *(void **)a4;
    unint64_t v16 = *(void **)a3;
    unint64_t v17 = *(void *)(*(void *)a4 + 24);
    unint64_t v18 = *(void *)(*(void *)a3 + 24);
    if (v17 < v18 || v18 >= v17 && *v15 < *v16)
    {
      *(void *)a3 = v15;
      *(void *)a4 = v16;
      unint64_t v19 = *(void **)a3;
      unint64_t v20 = *(void **)a2;
      unint64_t v21 = *(void *)(*(void *)a3 + 24);
      unint64_t v22 = *(void *)(*(void *)a2 + 24);
      if (v21 < v22 || v22 >= v21 && *v19 < *v20)
      {
        *(void *)a2 = v19;
        *(void *)a3 = v20;
        uint64_t v23 = *(void **)a2;
        uint64_t v24 = *(void **)a1;
        unint64_t v25 = *(void *)(*(void *)a2 + 24);
        unint64_t v26 = *(void *)(*(void *)a1 + 24);
        if (v25 < v26 || v26 >= v25 && *v23 < *v24)
        {
          *(void *)a1 = v23;
          *(void *)a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        unint64_t v15 = *(void **)v14;
        unint64_t v16 = (void *)*a1;
        unint64_t v17 = *(void *)(*(void *)v14 + 24);
        unint64_t v18 = *(void *)(*a1 + 24);
        if (v17 < v18 || v18 >= v17 && *v15 < *v16)
        {
          *(void *)uint64_t v14 = v16;
          *a1 = (uint64_t)v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      unint64_t v19 = (unint64_t)v8 >> 3;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1},std::unique_ptr<LoaderContext::Image>*>(a1, v6, a4, v19);
        v6 -= 8;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    v34[7] = v4;
    v34[8] = v5;
    uint64_t v8 = a4 - a1;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (a4 - a1) >> 3)
    {
      uint64_t v11 = v8 >> 2;
      uint64_t v12 = (v8 >> 2) + 1;
      uint64_t v13 = (uint64_t *)(a1 + 8 * v12);
      uint64_t v14 = v11 + 2;
      if (v14 < a3)
      {
        unint64_t v15 = (void *)v13[1];
        unint64_t v16 = *(void *)(*v13 + 24);
        unint64_t v17 = v15[3];
        if (v16 < v17 || v17 >= v16 && *(void *)*v13 < *v15)
        {
          ++v13;
          uint64_t v12 = v14;
        }
      }
      unint64_t v18 = *(void **)a4;
      unint64_t v19 = *(void *)(*v13 + 24);
      unint64_t v20 = *(void *)(*(void *)a4 + 24);
      if (v19 >= v20 && (v20 < v19 || *(void *)*v13 >= *v18))
      {
        *(void *)a4 = 0;
        v34[0] = v18;
        unint64_t v21 = (void *)*v13;
        while (1)
        {
          unint64_t v22 = v13;
          *uint64_t v13 = 0;
          uint64_t v23 = *(void *)a4;
          *(void *)a4 = v21;
          if (v23) {
            std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](a4, v23);
          }
          if (v9 < v12) {
            break;
          }
          uint64_t v24 = 2 * v12;
          uint64_t v12 = (2 * v12) | 1;
          uint64_t v13 = (uint64_t *)(a1 + 8 * v12);
          uint64_t v25 = v24 + 2;
          if (v25 < a3)
          {
            unint64_t v26 = (void *)v13[1];
            unint64_t v27 = *(void *)(*v13 + 24);
            unint64_t v28 = v26[3];
            if (v27 < v28 || v28 >= v27 && *(void *)*v13 < *v26)
            {
              ++v13;
              uint64_t v12 = v25;
            }
          }
          unint64_t v21 = (void *)*v13;
          uint64_t v29 = v34[0];
          unint64_t v30 = *(void *)(*v13 + 24);
          unint64_t v31 = *(void *)(v34[0] + 24);
          if (v30 >= v31)
          {
            a4 = (uint64_t)v22;
            if (v31 < v30) {
              continue;
            }
            a4 = (uint64_t)v22;
            if (*v21 >= *(void *)v34[0]) {
              continue;
            }
          }
          goto LABEL_25;
        }
        uint64_t v29 = v34[0];
LABEL_25:
        v34[0] = 0;
        uint64_t v32 = *v22;
        *unint64_t v22 = v29;
        if (v32) {
          std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v22, v32);
        }
        uint64_t v33 = v34[0];
        v34[0] = 0;
        if (v33) {
          std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v34, v33);
        }
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1},std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = *a1;
    *a1 = 0;
    uint64_t v19 = v7;
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a3, a4);
    uint64_t v9 = v8;
    unint64_t v10 = (uint64_t *)(a2 - 8);
    if (v8 == v10)
    {
      uint64_t v16 = v19;
      uint64_t v19 = 0;
      uint64_t v17 = *v8;
      uint64_t *v8 = v16;
      if (v17) {
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v8, v17);
      }
    }
    else
    {
      uint64_t v11 = *v10;
      *unint64_t v10 = 0;
      uint64_t v12 = *v8;
      uint64_t *v8 = v11;
      if (v12) {
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v8, v12);
      }
      uint64_t v13 = (uint64_t)(v9 + 1);
      uint64_t v14 = v19;
      uint64_t v19 = 0;
      uint64_t v15 = *v10;
      *unint64_t v10 = v14;
      if (v15) {
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v10, v15);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 3);
    }
    uint64_t v18 = v19;
    uint64_t v19 = 0;
    if (v18) {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&v19, v18);
    }
  }
}

void sub_1828452EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = &a1[v4 + 1];
    uint64_t v8 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unint64_t v10 = (void *)v7[1];
      unint64_t v11 = *(void *)(*v7 + 24);
      unint64_t v12 = v10[3];
      if (v11 < v12 || v12 >= v11 && *(void *)*v7 < *v10)
      {
        ++v7;
        uint64_t v4 = v9;
      }
    }
    uint64_t v13 = *v7;
    *uint64_t v7 = 0;
    uint64_t v14 = *a1;
    *a1 = v13;
    if (v14) {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)a1, v14);
    }
    a1 = v7;
  }
  while (v4 <= v6);
  return v7;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (uint64_t *)(a1 + 8 * (v4 >> 1));
    uint64_t v8 = (uint64_t *)(a2 - 8);
    uint64_t v9 = *(void **)(a2 - 8);
    unint64_t v10 = *(void *)(*v7 + 24);
    unint64_t v11 = v9[3];
    if (v10 < v11 || v11 >= v10 && *(void *)*v7 < *v9)
    {
      uint64_t *v8 = 0;
      unint64_t v12 = (void *)*v7;
      while (1)
      {
        uint64_t v13 = v7;
        *uint64_t v7 = 0;
        uint64_t v14 = *v8;
        uint64_t *v8 = (uint64_t)v12;
        if (v14) {
          std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v8, v14);
        }
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (uint64_t *)(a1 + 8 * v6);
        unint64_t v12 = (void *)*v7;
        unint64_t v15 = *(void *)(*v7 + 24);
        unint64_t v16 = v9[3];
        uint64_t v8 = v13;
        if (v15 >= v16)
        {
          if (v16 < v15) {
            break;
          }
          uint64_t v8 = v13;
          if (*v12 >= *v9) {
            break;
          }
        }
      }
      uint64_t v17 = *v13;
      *uint64_t v13 = (uint64_t)v9;
      if (v17)
      {
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v13, v17);
      }
    }
  }
}

void std::vector<std::unique_ptr<LoaderContext::Image>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      if (v6) {
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4 = __n;
  std::vector<char>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      uint64_t v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      std::vector<char>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    int64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - this->__begin_;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[v8];
    unint64_t v15 = &v12[v8 + v4];
    unint64_t v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    std::vector<char>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        char v18 = *--end;
        *--uint64_t v14 = v18;
      }
      while (end != begin);
      std::vector<char>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::__unordered_map_hasher<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::hash<MTLLoadedFile *>,std::equal_to<MTLLoadedFile *>,true>,std::__unordered_map_equal<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::equal_to<MTLLoadedFile *>,std::hash<MTLLoadedFile *>,true>,std::allocator<std::__hash_value_type<MTLLoadedFile *,objc_object *>>>::__emplace_unique_key_args<MTLLoadedFile *,std::pair<MTLLoadedFile *,objc_object *>>(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    size_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1828458A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<char>::__insert_with_size[abi:ne180100]<char const*,char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint8x8_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    size_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      unint64_t v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      unint64_t v17 = 0;
    }
    unint64_t v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    unint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      uint8x8_t v10 = *(char **)(a1 + 8);
      unint64_t v28 = v17;
    }
    unint64_t v30 = &v27[a5];
    unint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    size_t v19 = &__src[a5];
    unint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    unint64_t v22 = &v5[a5];
    uint64_t v23 = &v21[-a5];
    uint64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      uint64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  size_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  unint64_t v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t v3 = *a2;
  std::vector<char>::size_type v4 = *result;
  unint64_t v5 = bswap64((*a2)[1]);
  unint64_t v6 = bswap64((*result)[1]);
  if (v5 == v6
    && (v5 = bswap64(v3[2]), unint64_t v6 = bswap64(v4[2]), v5 == v6)
    && (v5 = bswap64(v3[3]), unint64_t v6 = bswap64(v4[3]), v5 == v6)
    && (v5 = bswap64(v3[4]), unint64_t v6 = bswap64(v4[4]), v5 == v6))
  {
    int v7 = 0;
  }
  else if (v5 < v6)
  {
    int v7 = -1;
  }
  else
  {
    int v7 = 1;
  }
  unint64_t v8 = *a3;
  unint64_t v9 = bswap64((*a3)[1]);
  unint64_t v10 = bswap64(v3[1]);
  if (v9 != v10
    || (unint64_t v9 = bswap64(v8[2]), v10 = bswap64(v3[2]), v9 != v10)
    || (unint64_t v9 = bswap64(v8[3]), v10 = bswap64(v3[3]), v9 != v10)
    || (unint64_t v9 = bswap64(v8[4]), v10 = bswap64(v3[4]), v9 != v10))
  {
    if (v9 < v10) {
      int v11 = -1;
    }
    else {
      int v11 = 1;
    }
    if (v7 < 0) {
      goto LABEL_14;
    }
LABEL_24:
    if (v11 < 0)
    {
      *a2 = v8;
      *a3 = v3;
      size_t v16 = *a2;
      unint64_t v17 = *result;
      unint64_t v18 = bswap64((*a2)[1]);
      unint64_t v19 = bswap64((*result)[1]);
      if (v18 != v19) {
        goto LABEL_36;
      }
      unint64_t v18 = bswap64(v16[2]);
      unint64_t v19 = bswap64(v17[2]);
      if (v18 == v19
        && (unint64_t v18 = bswap64(v16[3]), v19 = bswap64(v17[3]), v18 == v19)
        && (unint64_t v18 = bswap64(v16[4]), v19 = bswap64(v17[4]), v18 == v19))
      {
        int v20 = 0;
      }
      else
      {
LABEL_36:
        int v20 = v18 < v19 ? -1 : 1;
      }
      if (v20 < 0)
      {
        *uint64_t result = v16;
        *a2 = v17;
      }
    }
    return result;
  }
  int v11 = 0;
  if ((v7 & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_14:
  if (v11 < 0)
  {
    *uint64_t result = v8;
    goto LABEL_42;
  }
  *uint64_t result = v3;
  *a2 = v4;
  uint64_t v12 = *a3;
  unint64_t v13 = bswap64((*a3)[1]);
  unint64_t v14 = bswap64(v4[1]);
  if (v13 == v14
    && (unint64_t v13 = bswap64(v12[2]), v14 = bswap64(v4[2]), v13 == v14)
    && (unint64_t v13 = bswap64(v12[3]), v14 = bswap64(v4[3]), v13 == v14)
    && (unint64_t v13 = bswap64(v12[4]), v14 = bswap64(v4[4]), v13 == v14))
  {
    int v15 = 0;
  }
  else if (v13 < v14)
  {
    int v15 = -1;
  }
  else
  {
    int v15 = 1;
  }
  if (v15 < 0)
  {
    *a2 = v12;
LABEL_42:
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      int v7 = *a1;
      unint64_t v8 = bswap64(v6[1]);
      unint64_t v9 = bswap64((*a1)[1]);
      if (v8 == v9
        && (v8 = bswap64(v6[2]), unint64_t v9 = bswap64(v7[2]), v8 == v9)
        && (v8 = bswap64(v6[3]), unint64_t v9 = bswap64(v7[3]), v8 == v9)
        && (v8 = bswap64(v6[4]), unint64_t v9 = bswap64(v7[4]), v8 == v9))
      {
        int v10 = 0;
      }
      else if (v8 < v9)
      {
        int v10 = -1;
      }
      else
      {
        int v10 = 1;
      }
      if (v10 < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      char v26 = a1 + 1;
      unint64_t v27 = a1 + 2;
      unint64_t v28 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      size_t v29 = *(a2 - 1);
      unint64_t v30 = a1[3];
      unint64_t v31 = bswap64(v29[1]);
      unint64_t v32 = bswap64(v30[1]);
      if (v31 == v32
        && (unint64_t v31 = bswap64(v29[2]), v32 = bswap64(v30[2]), v31 == v32)
        && (unint64_t v31 = bswap64(v29[3]), v32 = bswap64(v30[3]), v31 == v32)
        && (unint64_t v31 = bswap64(v29[4]), v32 = bswap64(v30[4]), v31 == v32))
      {
        int v33 = 0;
      }
      else if (v31 < v32)
      {
        int v33 = -1;
      }
      else
      {
        int v33 = 1;
      }
      if (v33 < 0)
      {
        *unint64_t v28 = v29;
        *(a2 - 1) = v30;
        uint64_t v34 = *v28;
        long long v35 = *v27;
        unint64_t v36 = bswap64((*v28)[1]);
        unint64_t v37 = bswap64((*v27)[1]);
        if (v36 != v37) {
          goto LABEL_54;
        }
        unint64_t v36 = bswap64(v34[2]);
        unint64_t v37 = bswap64(v35[2]);
        if (v36 == v37
          && (v36 = bswap64(v34[3]), unint64_t v37 = bswap64(v35[3]), v36 == v37)
          && (v36 = bswap64(v34[4]), unint64_t v37 = bswap64(v35[4]), v36 == v37))
        {
          int v38 = 0;
        }
        else
        {
LABEL_54:
          int v38 = v36 < v37 ? -1 : 1;
        }
        if (v38 < 0)
        {
          *unint64_t v27 = v34;
          *unint64_t v28 = v35;
          long long v39 = *v26;
          unint64_t v40 = bswap64(v34[1]);
          unint64_t v41 = bswap64((*v26)[1]);
          if (v40 != v41) {
            goto LABEL_64;
          }
          unint64_t v40 = bswap64(v34[2]);
          unint64_t v41 = bswap64(v39[2]);
          if (v40 == v41
            && (unint64_t v40 = bswap64(v34[3]), v41 = bswap64(v39[3]), v40 == v41)
            && (unint64_t v40 = bswap64(v34[4]), v41 = bswap64(v39[4]), v40 == v41))
          {
            int v42 = 0;
          }
          else
          {
LABEL_64:
            int v42 = v40 < v41 ? -1 : 1;
          }
          if (v42 < 0)
          {
            a1[1] = v34;
            a1[2] = v39;
            uint64_t v43 = *a1;
            unint64_t v44 = bswap64(v34[1]);
            unint64_t v45 = bswap64((*a1)[1]);
            if (v44 != v45) {
              goto LABEL_73;
            }
            unint64_t v44 = bswap64(v34[2]);
            unint64_t v45 = bswap64(v43[2]);
            if (v44 == v45
              && (unint64_t v44 = bswap64(v34[3]), v45 = bswap64(v43[3]), v44 == v45)
              && (unint64_t v44 = bswap64(v34[4]), v45 = bswap64(v43[4]), v44 == v45))
            {
              int v46 = 0;
            }
            else
            {
LABEL_73:
              int v46 = v44 < v45 ? -1 : 1;
            }
            if (v46 < 0)
            {
              *a1 = v34;
              a1[1] = v43;
            }
          }
        }
      }
      return 1;
    default:
      int v11 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a1 + 1, a1 + 2);
      uint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = 24;
      break;
  }
  do
  {
    int v15 = *v12;
    size_t v16 = *v11;
    unint64_t v17 = bswap64((*v12)[1]);
    unint64_t v18 = bswap64((*v11)[1]);
    if (v17 != v18
      || (v17 = bswap64(v15[2]), unint64_t v18 = bswap64(v16[2]), v17 != v18)
      || (v17 = bswap64(v15[3]), unint64_t v18 = bswap64(v16[3]), v17 != v18)
      || (v17 = bswap64(v15[4]), unint64_t v18 = bswap64(v16[4]), v17 != v18))
    {
      int v19 = v17 < v18 ? -1 : 1;
      if (v19 < 0)
      {
        uint64_t v20 = v14;
        while (1)
        {
          *(unint64_t **)((char *)a1 + v20) = v16;
          uint64_t v21 = v20 - 8;
          if (v20 == 8) {
            break;
          }
          size_t v16 = *(unint64_t **)((char *)a1 + v20 - 16);
          unint64_t v22 = bswap64(v15[1]);
          unint64_t v23 = bswap64(v16[1]);
          if (v22 == v23
            && (unint64_t v22 = bswap64(v15[2]), v23 = bswap64(v16[2]), v22 == v23)
            && (unint64_t v22 = bswap64(v15[3]), v23 = bswap64(v16[3]), v22 == v23)
            && (unint64_t v22 = bswap64(v15[4]), v23 = bswap64(v16[4]), v22 == v23))
          {
            int v24 = 0;
          }
          else if (v22 < v23)
          {
            int v24 = -1;
          }
          else
          {
            int v24 = 1;
          }
          uint64_t v20 = v21;
          if ((v24 & 0x80000000) == 0)
          {
            int64_t v25 = (unint64_t **)((char *)a1 + v21);
            goto LABEL_30;
          }
        }
        int64_t v25 = a1;
LABEL_30:
        void *v25 = v15;
        if (++v13 == 8) {
          return v12 + 1 == a2;
        }
      }
    }
    int v11 = v12;
    v14 += 8;
    ++v12;
  }
  while (v12 != a2);
  return 1;
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a2, a3);
  unint64_t v9 = *a4;
  int v10 = *a3;
  unint64_t v11 = bswap64((*a4)[1]);
  unint64_t v12 = bswap64((*a3)[1]);
  if (v11 != v12
    || (unint64_t v11 = bswap64(v9[2]), v12 = bswap64(v10[2]), v11 != v12)
    || (unint64_t v11 = bswap64(v9[3]), v12 = bswap64(v10[3]), v11 != v12)
    || (unint64_t v11 = bswap64(v9[4]), v12 = bswap64(v10[4]), v11 != v12))
  {
    int v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      *a3 = v9;
      *a4 = v10;
      uint64_t v14 = *a3;
      int v15 = *a2;
      unint64_t v16 = bswap64((*a3)[1]);
      unint64_t v17 = bswap64((*a2)[1]);
      if (v16 != v17) {
        goto LABEL_14;
      }
      unint64_t v16 = bswap64(v14[2]);
      unint64_t v17 = bswap64(v15[2]);
      if (v16 == v17
        && (unint64_t v16 = bswap64(v14[3]), v17 = bswap64(v15[3]), v16 == v17)
        && (unint64_t v16 = bswap64(v14[4]), v17 = bswap64(v15[4]), v16 == v17))
      {
        int v18 = 0;
      }
      else
      {
LABEL_14:
        int v18 = v16 < v17 ? -1 : 1;
      }
      if (v18 < 0)
      {
        *a2 = v14;
        *a3 = v15;
        int v19 = *a2;
        uint64_t v20 = *a1;
        unint64_t v21 = bswap64((*a2)[1]);
        unint64_t v22 = bswap64((*a1)[1]);
        if (v21 == v22
          && (v21 = bswap64(v19[2]), unint64_t v22 = bswap64(v20[2]), v21 == v22)
          && (v21 = bswap64(v19[3]), unint64_t v22 = bswap64(v20[3]), v21 == v22)
          && (v21 = bswap64(v19[4]), unint64_t v22 = bswap64(v20[4]), v21 == v22))
        {
          int v23 = 0;
        }
        else if (v21 < v22)
        {
          int v23 = -1;
        }
        else
        {
          int v23 = 1;
        }
        if (v23 < 0)
        {
          *a1 = v19;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

__CFString *MTLHeapTypeString(uint64_t a1)
{
  uint64_t v1 = @"Invalid";
  if (a1 == 1) {
    uint64_t v1 = @"MTLHeapTypePlacement";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"MTLHeapTypeAutomatic";
  }
}

unsigned __int8 *_getFunctionHash(Air::PipelineScript *a1)
{
  uint64_t v1 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v1 < 9u) {
    return 0;
  }
  uint64_t v2 = v1[4];
  if (!v2) {
    return 0;
  }
  switch(*((unsigned char *)a1 + v2))
  {
    case 1:
      unint64_t v3 = (int *)Air::PipelineScript::pipeline_as_render(a1);
      return getVertexHash(v3);
    case 2:
      unint64_t v5 = (int *)Air::PipelineScript::pipeline_as_compute(a1);
      return getFragmentHash(v5);
    case 3:
      Air::PipelineScript::pipeline_as_tile_render(a1);
      goto LABEL_18;
    case 4:
      unint64_t v6 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
      return getTileHash(v6);
    case 5:
      Mtl::FunctionConstantValue::value_as_ConstantFloat3(a1);
      goto LABEL_18;
    case 6:
      Mtl::FunctionConstantValue::value_as_ConstantFloat4(a1);
      goto LABEL_18;
    case 7:
      Air::FunctionScript::function_as_object(a1);
LABEL_18:
      BOOL result = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
      break;
    case 8:
      int v7 = (int *)Air::FunctionScript::function_as_mesh(a1);
      BOOL result = getMeshHash(v7);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t Air::FunctionScript::function_as_object(Air::FunctionScript *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 7) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

unsigned __int8 *getMeshHash(int *a1)
{
  BOOL v2 = 1;
  BOOL v3 = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 0xDu)
  {
    uint64_t v5 = v4[6];
    if (v5) {
      BOOL v2 = *((unsigned char *)a1 + v5) != 0;
    }
    else {
      BOOL v2 = 1;
    }
  }
  BOOL data = v2;
  CC_SHA256(&data, 1u, v3);
  return v3;
}

uint64_t Air::FunctionScript::function_as_mesh(Air::FunctionScript *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (BOOL v3 = *((unsigned char *)this + v1[4]) == 8) : (BOOL v3 = 0), v3 && (v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t MTLIOQosClassForPriority(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 17;
  }
  else {
    unsigned int v1 = 33;
  }
  if (a1 == 2) {
    return 9;
  }
  else {
    return v1;
  }
}

unint64_t MTLIODefaultCommandsInFlightForDevice(void *a1)
{
  return (unint64_t)[a1 maxIOCommandsInFlight] >> 1;
}

uint64_t MTLIOCommandQueueCommandListInit(uint64_t result, _MTLIOCommandQueue *a2)
{
  *(void *)BOOL result = 0;
  *(void *)(result + 8) = result;
  *(void *)(result + 24) = &a2->cmdCvar;
  *(void *)(result + 32) = a2;
  *(void *)(result + 16) = &a2->cmdMutex;
  *(unsigned char *)(result + 40) = 0;
  return result;
}

uint64_t MTLIOCommandQueueCommandListDestroy(MTLIOCommandQueueCommandList *a1)
{
  pthread_mutex_lock(a1->lock);
  a1->exit = 1;
  pthread_cond_broadcast(a1->cond);
  locuint64_t k = a1->lock;

  return pthread_mutex_unlock(lock);
}

uint64_t MTLIOCommandQueueCommandListEnqueueCommand(MTLIOCommandQueueCommandList *a1, MTLIOCommandQueueCommand *a2)
{
  pthread_mutex_lock(a1->lock);
  *((void *)a2 + 2) = 0;
  tqh_last = a1->activeq.tqh_last;
  *((void *)a2 + 3) = tqh_last;
  *tqh_last = a2;
  a1->activeq.tqh_last = (MTLIOCommandQueueCommand **)((char *)a2 + 16);
  pthread_cond_broadcast(a1->cond);
  locuint64_t k = a1->lock;

  return pthread_mutex_unlock(lock);
}

void MTLIOCommandQueueCommandListProcessCommands(MTLIOCommandQueueCommandList *a1)
{
  pthread_mutex_lock(a1->lock);
  do
  {
    while (1)
    {
LABEL_2:
      if (a1->exit)
      {
        pthread_mutex_unlock(a1->lock);
        pthread_exit(0);
      }
      tqh_first = a1->activeq.tqh_first;
      if (a1->activeq.tqh_first) {
        break;
      }
LABEL_12:
      pthread_cond_wait(a1->cond, a1->lock);
    }
    while (1)
    {
      uint64_t v3 = *((void *)tqh_first + 2);
      if (*(_DWORD *)tqh_first == 1)
      {
        uint64_t v4 = (MTLIOCommandQueueCommand **)*((void *)tqh_first + 3);
        if (v3)
        {
          *(void *)(v3 + 24) = v4;
          uint64_t v4 = (MTLIOCommandQueueCommand **)*((void *)tqh_first + 3);
        }
        else
        {
          a1->activeq.tqh_last = v4;
        }
        unsigned __int16 *v4 = (MTLIOCommandQueueCommand *)v3;
        free(tqh_first);
        goto LABEL_11;
      }
      if (!*(_DWORD *)tqh_first) {
        break;
      }
LABEL_11:
      tqh_first = (MTLIOCommandQueueCommand *)v3;
      if (!v3) {
        goto LABEL_12;
      }
    }
    uint64_t v5 = a1->activeq.tqh_first;
  }
  while (!a1->activeq.tqh_first);
  while (1)
  {
    unint64_t v6 = (MTLIOCommandQueueCommand *)*((void *)v5 + 2);
    int v7 = *(_DWORD *)v5;
    if (*(_DWORD *)v5) {
      goto LABEL_15;
    }
    __int16 v41 = 0;
    __int16 v40 = 0;
    char v39 = 0;
    unint64_t v9 = MTLIOCommandList::popCommand((MTLIOCommandList *)[*((id *)v5 + 1) getCommandList], (unsigned char *)&v41 + 1, &v41, (unsigned char *)&v40 + 1, &v40, &v39, -[_MTLIOCommandQueue gpuQueue](a1->queue, "gpuQueue"));
    if (v9) {
      break;
    }
    if (v39)
    {
      uint64_t v10 = *((void *)v5 + 2);
      unint64_t v11 = (MTLIOCommandQueueCommand **)*((void *)v5 + 3);
      if (v10)
      {
        *(void *)(v10 + 24) = v11;
        unint64_t v11 = (MTLIOCommandQueueCommand **)*((void *)v5 + 3);
      }
      else
      {
        a1->activeq.tqh_last = v11;
      }
      *unint64_t v11 = (MTLIOCommandQueueCommand *)v10;
      uint64_t v14 = 1;
LABEL_39:
      [(_MTLIOCommandQueue *)a1->queue didComplete:*((void *)v5 + 1) withStatus:v14];
      free(v5);
      goto LABEL_40;
    }
    if ((_BYTE)v41)
    {
      uint64_t v12 = *((void *)v5 + 2);
      int v13 = (MTLIOCommandQueueCommand **)*((void *)v5 + 3);
      if (v12)
      {
        *(void *)(v12 + 24) = v13;
        int v13 = (MTLIOCommandQueueCommand **)*((void *)v5 + 3);
      }
      else
      {
        a1->activeq.tqh_last = v13;
      }
      *int v13 = (MTLIOCommandQueueCommand *)v12;
      uint64_t v14 = 3;
      goto LABEL_39;
    }
    if ((_BYTE)v40)
    {
      uint64_t v15 = *((void *)v5 + 2);
      unint64_t v16 = (MTLIOCommandQueueCommand **)*((void *)v5 + 3);
      if (v15)
      {
        *(void *)(v15 + 24) = v16;
        unint64_t v16 = (MTLIOCommandQueueCommand **)*((void *)v5 + 3);
      }
      else
      {
        a1->activeq.tqh_last = v16;
      }
      *unint64_t v16 = (MTLIOCommandQueueCommand *)v15;
      uint64_t v14 = 2;
      goto LABEL_39;
    }
    if (!(HIBYTE(v40) | HIBYTE(v41)))
    {
      int v7 = *(_DWORD *)v5;
LABEL_15:
      BOOL v8 = v7 == 1 || v6 == 0;
      uint64_t v5 = v6;
      if (v8)
      {
LABEL_41:
        if (!a1->activeq.tqh_first || *(_DWORD *)a1->activeq.tqh_first) {
          goto LABEL_2;
        }
        goto LABEL_12;
      }
      continue;
    }
LABEL_40:
    uint64_t v5 = v6;
    if (!v6) {
      goto LABEL_41;
    }
  }
  unint64_t v17 = v9;
  pthread_mutex_unlock(a1->lock);
  uint64_t v18 = [*((id *)v5 + 1) globalTraceObjectID];
  HIBYTE(v41) = 0;
  if (*v17 == 1)
  {
    uint64_t v23 = *((void *)v17 + 2);
    uint64_t v24 = *((void *)v17 + 3);
    int64_t v25 = (void *)*((void *)v17 + 1);
    if (MTLTraceEnabled())
    {
      [v25 globalTraceObjectID];
      kdebug_trace();
    }
    uint64_t v26 = [v25 readIntoStagingBuffer:v24 offset:v23 stagingBuffer:*((void *)v17 + 6) stagingBufferSize:*((void *)v17 + 7) needsDecompress:(char *)&v41 + 1];
    if (MTLTraceEnabled())
    {
      [v25 globalTraceObjectID];
      kdebug_trace();
    }
    if (!v26) {
      MTLIOCommandList::completeIOCommand((MTLIOCommandList *)[*((id *)v5 + 1) getCommandList], (MTLIOCommand *)v17, a1->cond, a1->lock, 0);
    }
    followonQueue = a1->queue->_followonQueue;
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke_3;
    v34[3] = &__block_descriptor_89_e5_v8__0l;
    char v35 = HIBYTE(v41);
    v34[4] = v18;
    v34[5] = v17;
    v34[6] = v24;
    v34[7] = v23;
    v34[8] = v26;
    void v34[9] = v5;
    v34[10] = a1;
    unint64_t v28 = v34;
LABEL_64:
    dispatch_async(followonQueue, v28);
  }
  else if (!*v17)
  {
    int v19 = (void *)*((void *)v17 + 1);
    int v20 = *((unsigned __int8 *)v17 + 89);
    if (MTLTraceEnabled())
    {
      [v19 globalTraceObjectID];
      kdebug_trace();
    }
    if (v20)
    {
      uint64_t v21 = [v19 readIntoStagingBuffer:*((void *)v17 + 3) offset:*((void *)v17 + 2) stagingBuffer:*((void *)v17 + 6) stagingBufferSize:*((void *)v17 + 7) needsDecompress:(char *)&v41 + 1];
      if (v21) {
        unint64_t v22 = *((void *)v17 + 3);
      }
      else {
        unint64_t v22 = -1;
      }
    }
    else
    {
      unint64_t v22 = [v19 read:*((void *)v17 + 8) size:*((void *)v17 + 3) offset:*((void *)v17 + 2) stagingBuffer:*((void *)v17 + 6) stagingBufferSize:*((void *)v17 + 7) needsDecompress:(char *)&v41 + 1];
      uint64_t v21 = 0;
    }
    if (MTLTraceEnabled())
    {
      [v19 globalTraceObjectID];
      kdebug_trace();
    }
    if (HIBYTE(v41))
    {
      followonQueue = a1->queue->_followonQueue;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke;
      block[3] = &unk_1E5221028;
      char v38 = v20;
      void block[6] = v17;
      void block[7] = v21;
      block[4] = v19;
      void block[5] = v18;
      block[8] = v5;
      void block[9] = a1;
      unint64_t v28 = block;
      goto LABEL_64;
    }
    if (v22 == -1 || v22 < *((void *)v17 + 3))
    {
      size_t v29 = (MTLIOCommandList *)[*((id *)v5 + 1) getCommandList];
      locuint64_t k = a1->lock;
      cond = a1->cond;
      unint64_t v32 = (MTLIOCommand *)v17;
      char v33 = 0;
      goto LABEL_69;
    }
    if (v20)
    {
      followonQueue = a1->queue->_followonQueue;
      v36[0] = MEMORY[0x1E4F143A8];
      v36[1] = 3221225472;
      v36[2] = ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke_2;
      v36[3] = &__block_descriptor_64_e5_v8__0l;
      v36[4] = v5;
      v36[5] = v17;
      v36[6] = a1;
      v36[7] = v18;
      unint64_t v28 = v36;
      goto LABEL_64;
    }
    size_t v29 = (MTLIOCommandList *)[*((id *)v5 + 1) getCommandList];
    locuint64_t k = a1->lock;
    cond = a1->cond;
    unint64_t v32 = (MTLIOCommand *)v17;
    char v33 = 1;
LABEL_69:
    MTLIOCommandList::completeIOCommand(v29, v32, cond, lock, v33);
  }
}

void ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke(uint64_t a1)
{
  if (MTLTraceEnabled()) {
    kdebug_trace();
  }
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (!v2)
    {
      if (!MTLTraceEnabled())
      {
LABEL_14:
        unint64_t v16 = (MTLIOCommandList *)[*(id *)(*(void *)(a1 + 64) + 8) getCommandList];
        uint64_t v17 = *(void *)(a1 + 72);
        int v19 = *(_opaque_pthread_mutex_t **)(v17 + 16);
        uint64_t v18 = *(_opaque_pthread_cond_t **)(v17 + 24);
        int v20 = *(MTLIOCommand **)(a1 + 48);
        char v21 = 0;
        goto LABEL_18;
      }
      unint64_t v15 = -1;
      goto LABEL_11;
    }
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 48);
    uint64_t v5 = v4[6];
    uint64_t v7 = v4[2];
    uint64_t v6 = v4[3];
    uint64_t v8 = [v3 stagingBufferSize:v6 offset:v7];
    unint64_t v9 = v3;
    uint64_t v10 = v5;
    uint64_t v11 = v6;
    uint64_t v12 = v7;
    uint64_t v13 = v2;
  }
  else
  {
    unint64_t v9 = *(void **)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 48);
    uint64_t v8 = v14[7];
    uint64_t v10 = v14[8];
    uint64_t v12 = v14[2];
    uint64_t v11 = v14[3];
    uint64_t v13 = v14[6];
  }
  unint64_t v15 = [v9 decompress:v10 size:v11 offset:v12 stagingBuffer:v13 stagingBufferSize:v8];
  if (MTLTraceEnabled()) {
LABEL_11:
  }
    kdebug_trace();
  if (v15 == -1 || v15 < *(void *)(*(void *)(a1 + 48) + 24)) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 80)) {
    objc_msgSend(MTLIOCommandList::getBlitCommandEncoder((MTLIOCommandList *)objc_msgSend(*(id *)(*(void *)(a1 + 64) + 8), "getCommandList")), "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 32), "buffer"), *(void *)(*(void *)(a1 + 48) + 40), *(void *)(*(void *)(a1 + 48) + 72), *(void *)(*(void *)(a1 + 48) + 80), *(void *)(*(void *)(a1 + 48) + 24));
  }
  unint64_t v16 = (MTLIOCommandList *)[*(id *)(*(void *)(a1 + 64) + 8) getCommandList];
  uint64_t v22 = *(void *)(a1 + 72);
  int v19 = *(_opaque_pthread_mutex_t **)(v22 + 16);
  uint64_t v18 = *(_opaque_pthread_cond_t **)(v22 + 24);
  int v20 = *(MTLIOCommand **)(a1 + 48);
  char v21 = 1;
LABEL_18:

  MTLIOCommandList::completeIOCommand(v16, v20, v18, v19, v21);
}

void ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke_2(void *a1)
{
  uint64_t v2 = (MTLIOCommandList *)[*(id *)(a1[4] + 8) getCommandList];
  objc_msgSend(MTLIOCommandList::getBlitCommandEncoder(v2), "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", objc_msgSend(*(id *)(a1[5] + 32), "buffer"), *(void *)(a1[5] + 40), *(void *)(a1[5] + 72), *(void *)(a1[5] + 80), *(void *)(a1[5] + 24));
  uint64_t v3 = (MTLIOCommand *)a1[5];
  uint64_t v4 = a1[6];
  uint64_t v6 = *(_opaque_pthread_mutex_t **)(v4 + 16);
  uint64_t v5 = *(_opaque_pthread_cond_t **)(v4 + 24);

  MTLIOCommandList::completeIOCommand(v2, v3, v5, v6, 1);
}

void ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke_3(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (MTLTraceEnabled()) {
      kdebug_trace();
    }
    unint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 8), "decompress:size:offset:stagingBuffer:stagingBufferSize:", *(void *)(*(void *)(a1 + 40) + 48), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), objc_msgSend(*(id *)(*(void *)(a1 + 40) + 8), "stagingBufferSize:offset:", *(void *)(a1 + 48), *(void *)(a1 + 56)));
    if (MTLTraceEnabled()) {
      kdebug_trace();
    }
  }
  else
  {
    unint64_t v2 = *(void *)(a1 + 48);
  }
  if (v2 == -1 || v2 < *(void *)(a1 + 48)) {
    MTLIOCommandList::completeIOCommand((MTLIOCommandList *)[*(id *)(*(void *)(a1 + 72) + 8) getCommandList], *(MTLIOCommand **)(a1 + 40), *(_opaque_pthread_cond_t **)(*(void *)(a1 + 80) + 24), *(_opaque_pthread_mutex_t **)(*(void *)(a1 + 80) + 16), 0);
  }
  uint64_t v3 = (MTLIOCommandList *)[*(id *)(*(void *)(a1 + 72) + 8) getCommandList];
  id BlitCommandEncoder = MTLIOCommandList::getBlitCommandEncoder(v3);
  uint64_t v5 = [*(id *)(*(void *)(a1 + 40) + 32) buffer];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(v6 + 136);
  uint64_t v9 = *(void *)(v6 + 144);
  long long v15 = *(_OWORD *)(v6 + 96);
  uint64_t v10 = *(void *)(v6 + 120);
  uint64_t v16 = *(void *)(v6 + 112);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(void *)(v6 + 128);
  long long v13 = *(_OWORD *)(v6 + 72);
  uint64_t v14 = *(void *)(v6 + 88);
  [BlitCommandEncoder copyFromBuffer:v5 sourceOffset:v7 sourceBytesPerRow:v8 sourceBytesPerImage:v9 sourceSize:&v15 toTexture:v11 destinationSlice:v10 destinationLevel:v12 destinationOrigin:&v13];
  MTLIOCommandList::addResourceToSyncFromGPUToCPU(v3, *(void *)(*(void *)(a1 + 40) + 64));
  MTLIOCommandList::completeIOCommand(v3, *(MTLIOCommand **)(a1 + 40), *(_opaque_pthread_cond_t **)(*(void *)(a1 + 80) + 24), *(_opaque_pthread_mutex_t **)(*(void *)(a1 + 80) + 16), 1);
}

uint64_t ___Z38_MTLGetMTLCompilerLLVMVersionForDevicePU19objcproto9MTLDevice11objc_object_block_invoke()
{
  uint64_t result = MTLGetEnvDefault("MTL_USE_DEVICE_LLVM_VERSION_SELECTOR", 0);
  _MTLGetMTLCompilerLLVMVersionForDevice(objc_object  {objcproto9MTLDevice}*)::useDeviceForLLVMVersiouint64_t n = result != 0;
  return result;
}

BOOL _MTLDeviceIsFrozen(void *a1)
{
  return (unint64_t)[a1 featureProfile] < 7;
}

char *___getForcedAIRVersion_block_invoke()
{
  id v0 = getenv("MTL_FORCE_LANGUAGE_VERSION");
  uint64_t result = getenv("MTL_FORCE_AIR_VERSION");
  BOOL v2 = v0 != 0;
  BOOL v3 = result == 0;
  BOOL v4 = v2 && v3;
  if (!v2 || !v3) {
    id v0 = result;
  }
  if (v0)
  {
    sscanf(v0, "%d_%d", &_getForcedAIRVersion::major, &_getForcedAIRVersion::minor);
    if (v4) {
      uint64_t v5 = "MTL_FORCE_LANGUAGE_VERSION";
    }
    else {
      uint64_t v5 = "MTL_FORCE_AIR_VERSION";
    }
    return (char *)fprintf((FILE *)*MEMORY[0x1E4F143C8], "Using MTLAIRVersion%d_%d (set with %s=%s)\n", _getForcedAIRVersion::major, _getForcedAIRVersion::minor, v5, v0);
  }
  return result;
}

void _getForcedLanguageVersion(_DWORD *a1, _DWORD *a2)
{
  if (_getForcedLanguageVersion::onceToken != -1) {
    dispatch_once(&_getForcedLanguageVersion::onceToken, &__block_literal_global_57);
  }
  *a1 = _getForcedLanguageVersion::major;
  *a2 = _getForcedLanguageVersion::minor;
}

const char *stringFromBuffer(const char *a1, unsigned int *a2, unint64_t a3)
{
  unint64_t v3 = *a2;
  LODWORD(v4) = *a2;
  if (v3 >= a3)
  {
LABEL_5:
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    unint64_t v5 = *a2;
    while (1)
    {
      unint64_t v4 = (v4 + 1);
      if (!a1[v5]) {
        break;
      }
      unint64_t v5 = v4;
      if (v4 >= a3) {
        goto LABEL_5;
      }
    }
    *a2 = v4;
    return &a1[v3];
  }
  return result;
}

uint64_t uint32FromBuffer(const char *a1, unsigned int *a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  if (v3 + 4 > a3) {
    return 0;
  }
  uint64_t result = *(unsigned int *)&a1[v3];
  *a2 = v3 + 4;
  return result;
}

uint64_t MTLLibraryData::MTLLibraryData(uint64_t result, long long *a2)
{
  *(void *)uint64_t result = &unk_1ECAC5530;
  long long v2 = 0uLL;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_DWORD *)(result + 72) = 1065353216;
  *(_DWORD *)(result + 84) = 0;
  *(void *)(result + 88) = 0;
  atomic_store(1u, (unsigned int *)(result + 80));
  if (a2)
  {
    long long v2 = *a2;
    *(_OWORD *)(result + 24) = a2[1];
  }
  else
  {
    *(_OWORD *)(result + 24) = 0uLL;
  }
  *(_OWORD *)(result + 8) = v2;
  return result;
}

uint64_t MTLProxyLibraryData::readFunctionMetadata(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)[a3 libraryData] + 192);

  return v3();
}

void MTLProxyLibraryData::parseBitCodeHeader(MTLProxyLibraryData *this, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
}

uint64_t MTLProxyLibraryData::setPosition(MTLProxyLibraryData *this)
{
  return 0;
}

uint64_t MTLProxyLibraryData::readBytes(MTLProxyLibraryData *this, void *a2)
{
  return 0;
}

uint64_t MTLProxyLibraryData::getFileSize(MTLProxyLibraryData *this)
{
  return 0;
}

uint64_t MTLProxyLibraryData::functionNames(MTLProxyLibraryData *this)
{
  uint64_t v1 = *((void *)this + 18);
  if (!v1)
  {
    uint64_t v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    uint64_t v1 = *((void *)this + 18);
    if (!v1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v22, *((void *)this + 15));
      for (uint64_t i = (uint64_t *)*((void *)this + 14); i; uint64_t i = (uint64_t *)*i)
      {
        id v5 = [NSString alloc];
        uint64_t v6 = i + 2;
        if (*((char *)i + 39) < 0) {
          uint64_t v6 = (void *)*v6;
        }
        uint64_t v7 = [v5 initWithUTF8String:v6];
        uint64_t v8 = v7;
        uint64_t v9 = v23;
        if (v23 >= v24)
        {
          uint64_t v11 = (v23 - v22) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v12 = (v24 - v22) >> 2;
          if (v12 <= v11 + 1) {
            unint64_t v12 = v11 + 1;
          }
          if ((unint64_t)(v24 - v22) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v24, v13);
          }
          else {
            uint64_t v14 = 0;
          }
          long long v15 = (uint64_t *)&v14[8 * v11];
          *long long v15 = v8;
          uint64_t v10 = (char *)(v15 + 1);
          uint64_t v17 = v22;
          uint64_t v16 = v23;
          if (v23 != v22)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 8;
              *--long long v15 = v18;
            }
            while (v16 != v17);
            uint64_t v16 = v22;
          }
          uint64_t v22 = (char *)v15;
          uint64_t v23 = v10;
          uint64_t v24 = &v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(void *)uint64_t v23 = v7;
          uint64_t v10 = v9 + 8;
        }
        uint64_t v23 = v10;
      }
      uint64_t v1 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:count:");
      *((void *)this + 18) = v1;
      int v19 = (id *)v22;
      int v20 = (id *)v23;
      if (v22 != v23)
      {
        do

        while (v19 != v20);
        uint64_t v1 = *((void *)this + 18);
        int v19 = (id *)v22;
      }
      if (v19)
      {
        uint64_t v23 = (char *)v19;
        operator delete(v19);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_18284D584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t MTLProxyLibraryData::functionHashes(MTLProxyLibraryData *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (!v1)
  {
    uint64_t v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    uint64_t v1 = *((void *)this + 17);
    if (!v1)
    {
      int v20 = 0;
      char v21 = 0;
      uint64_t v22 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v20, *((void *)this + 15));
      for (uint64_t i = (uint64_t **)*((void *)this + 14); i; uint64_t i = (uint64_t **)*i)
      {
        uint64_t v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F29238]), "initWithBytes:objCType:", objc_msgSend(i[5], "bitCodeHash"), "{?=[32C]}");
        uint64_t v6 = v5;
        uint64_t v7 = v21;
        if (v21 >= v22)
        {
          uint64_t v9 = (v21 - v20) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v10 = (v22 - v20) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)(v22 - v20) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v22, v11);
          }
          else {
            unint64_t v12 = 0;
          }
          unint64_t v13 = (uint64_t *)&v12[8 * v9];
          *unint64_t v13 = v6;
          uint64_t v8 = (char *)(v13 + 1);
          long long v15 = v20;
          uint64_t v14 = v21;
          if (v21 != v20)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *--unint64_t v13 = v16;
            }
            while (v14 != v15);
            uint64_t v14 = v20;
          }
          int v20 = (char *)v13;
          char v21 = v8;
          uint64_t v22 = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)char v21 = v5;
          uint64_t v8 = v7 + 8;
        }
        char v21 = v8;
      }
      uint64_t v1 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:count:");
      *((void *)this + 17) = v1;
      uint64_t v17 = (id *)v20;
      uint64_t v18 = (id *)v21;
      if (v20 != v21)
      {
        do

        while (v17 != v18);
        uint64_t v1 = *((void *)this + 17);
        uint64_t v17 = (id *)v20;
      }
      if (v17)
      {
        char v21 = (char *)v17;
        operator delete(v17);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_18284D794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

id MTLProxyLibraryData::newFunction(uint64_t a1, void *a2)
{
  long long v2 = (void *)(a1 + 96);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[a2 UTF8String]);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  unint64_t v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return *((id *)v4 + 5);
    }
  }
  else if (v3)
  {
    return *((id *)v4 + 5);
  }
  return 0;
}

void sub_18284D838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLProxyLibraryData::setStitchedLibraryTrackingData(uint64_t a1, uint64_t *a2)
{
  for (uint64_t i = *(void **)(a1 + 112); i; uint64_t i = (void *)*i)
  {
    unint64_t v4 = (void *)i[5];
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v6 = *a2;
    char v7 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v4 setTrackingData:&v6];
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_18284D8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *MTLLibraryDataWithArchive::parseDynamicLibraryBitCode(void *this, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = this[12];
  if (v3)
  {
    *a3 = this[29];
    unint64_t v3 = this[28];
  }
  else
  {
    *a3 = 0;
  }
  *a2 = v3;
  return this;
}

void MTLLibraryDataWithArchive::parseDynamicLibraryReflection(MTLLibraryDataWithArchive *this, unint64_t *a2, unint64_t *a3, NSError **a4)
{
  *a2 = 0;
  *a3 = 0;
  if (!*((void *)this + 74)) {
    return;
  }
  uint64_t v8 = (os_unfair_lock_s *)((char *)this + 84);
  os_unfair_lock_lock((os_unfair_lock_t)this + 21);
  if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, void))(*(void *)this + 312))(this, *((void *)this + 73)) & 1) == 0)
  {
    if (!a4) {
      goto LABEL_29;
    }
    uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file (unexpected end of file)" forKey:*MEMORY[0x1E4F28568]];
    unint64_t v12 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v11];
LABEL_28:
    *a4 = v12;
    goto LABEL_29;
  }
  int v26 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(void *)this + 320))(this, &v26, 4) != 4)
  {
    if (!a4) {
      goto LABEL_29;
    }
    uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid metallib file, unexpected end of file while parsing reflection data", *MEMORY[0x1E4F28568] forKey];
    unint64_t v12 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v13];
    goto LABEL_28;
  }
  if (!v26) {
    goto LABEL_29;
  }
  if (v26 != 1)
  {
    if (!a4) {
      goto LABEL_29;
    }
    uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file (Unexpected number of reflection entries)" forKey:*MEMORY[0x1E4F28568]];
    unint64_t v12 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v14];
    goto LABEL_28;
  }
  if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)this + 312))(this, *((void *)this + 73) + 8) & 1) == 0)
  {
    if (!a4) {
      goto LABEL_29;
    }
    uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file (unexpected end of file)" forKey:*MEMORY[0x1E4F28568]];
    unint64_t v12 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v15];
    goto LABEL_28;
  }
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  while (1)
  {
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(void *)this + 320))(this, &v25, 4) != 4)
    {
      if (!a4) {
        goto LABEL_29;
      }
LABEL_27:
      uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid metallib file, unexpected end of file while parsing reflection data", *MEMORY[0x1E4F28568] forKey];
      unint64_t v12 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v16];
      goto LABEL_28;
    }
    unsigned int v9 = v25;
    unsigned int v25 = bswap32(v25);
    if (v9 == 1413762629) {
      goto LABEL_12;
    }
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(void *)this + 320))(this, &v24, 4) != 4)
    {
      if (!a4) {
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    if (v25 == 1380078918) {
      break;
    }
LABEL_12:
    uint64_t v10 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 336))(this);
    if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)this + 312))(this, v10 + v24) & 1) == 0)
    {
      generateNSError(a4, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, &cfstr_InvalidLibrary_1.isa);
      goto LABEL_29;
    }
    if (v25 == 1162757204) {
      goto LABEL_29;
    }
  }
  unint64_t v17 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 336))(this);
  unint64_t v18 = v17 + 15;
  uint64_t v19 = v17 >= 0xFFFFFFFFFFFFFFF1;
  uint64_t v20 = v19 << 63 >> 63;
  if (v20 == v19 && (v20 & 0x8000000000000000) == 0)
  {
    unint64_t v21 = v18 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v22 = (v18 & 0xFFFFFFFFFFFFFFF0) - v17;
    unsigned int v23 = v24;
    if (v22 <= v24)
    {
      *a2 = v21;
      *a3 = v23 - v22;
    }
  }
LABEL_29:
  os_unfair_lock_unlock(v8);
}

void sub_18284DE00(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *generateNSError(void *result, NSString *a2, MTLLibraryError a3, NSString *a4)
{
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:a4 forKey:*MEMORY[0x1E4F28568]];
    uint64_t result = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:a2 code:a3 userInfo:v7];
    *uint64_t v6 = result;
  }
  return result;
}

BOOL MTLLibraryDataWithArchive::getType(MTLLibraryDataWithArchive *this)
{
  return *((void *)this + 12) != 0;
}

BOOL MTLLibraryDataWithSource::parseBitCodeHeader(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unsigned int v9 = this + 21;
  os_unfair_lock_lock(this + 21);
  (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&this->_os_unfair_lock_opaque + 312))(this, a2);
  unsigned int v14 = 0;
  uint64_t v10 = (*(uint64_t (**)(os_unfair_lock_s *, unsigned int *, uint64_t))(*(void *)&this->_os_unfair_lock_opaque
                                                                               + 320))(this, &v14, 4);
  BOOL v11 = v10 == 4;
  if (v10 == 4) {
    unint64_t v12 = v14;
  }
  else {
    unint64_t v12 = 0;
  }
  os_unfair_lock_unlock(v9);
  *a5 = v12;
  *a4 = a2 + 4;
  return v11;
}

void sub_18284DF9C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *MTLLibraryDataWithSource::parseDynamicLibraryBitCode(void *this, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = this[24];
  if (v4) {
    return (void *)(*(uint64_t (**)(void *, void, uint64_t, unint64_t *, unint64_t *))(*this + 200))(this, this[25], v4, a2, a3);
  }
  *a3 = 0;
  *a2 = 0;
  return this;
}

BOOL MTLLibraryDataWithSource::getType(MTLLibraryDataWithSource *this)
{
  return *((void *)this + 24) != 0;
}

uint64_t MTLLibraryDataWithSource::getBitCodeHash(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, uint64_t *, uint64_t *))(*a1 + 200))(a1, a3, 0, &v8, &v9);
  CC_LONG v6 = v9;
  if ((unint64_t)(v9 + v8) <= a1[20])
  {
    uint64_t v7 = (const void *)(a1[19] + v8);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, v7, v6);
    return CC_SHA256_Final((unsigned __int8 *)a2, &c);
  }
  return result;
}

uint64_t MTLLibraryDataWithGLIR::parseBitCodeHeader(MTLLibraryDataWithGLIR *this, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5 = *((void *)this + 13);
  if (v5 >= a2)
  {
    uint64_t v6 = a2;
    *((void *)this + 14) = a2;
  }
  else
  {
    uint64_t v6 = *((void *)this + 14);
  }
  if (v6 + 4 <= v5)
  {
    unint64_t v7 = *(unsigned int *)(*((void *)this + 12) + v6);
    *((void *)this + 14) = v6 + 4;
  }
  else
  {
    unint64_t v7 = 0;
  }
  *a5 = v7;
  *a4 = a2 + 4;
  return 1;
}

void newFunctionWithGLIR(int a1, int a2, unsigned int *buffer)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  dispatch_data_create(buffer, *buffer + 4, 0, 0);
  operator new();
}

void sub_18284E2C8(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C40AF1FB5FCLL);
  _Unwind_Resume(a1);
}

BOOL MTLLibraryDataWithArchive::getFunctionNameAndAliasWithHash(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((void *)a1 + 40, a2);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = v7[6];
  v23.functionInputs = 0;
  v23.airScript = 0;
  uint64_t v22 = 0;
  long long v20 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)unint64_t v18 = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  BOOL FunctionAtOffset = MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v8, &v23, (MTLLibraryDataWithArchive::AdditionalFunctionData *)v17);
  if (FunctionAtOffset)
  {
    if (v23.airScript) {
      dispatch_release((dispatch_object_t)v23.airScript);
    }
    if (v23.functionInputs) {
      dispatch_release((dispatch_object_t)v23.functionInputs);
    }
    if (SHIBYTE(v19[0]) < 0)
    {
      if (v18[1]) {
        goto LABEL_9;
      }
    }
    else if (HIBYTE(v19[0]))
    {
LABEL_9:
      id v10 = [NSString alloc];
      if (SHIBYTE(v19[0]) >= 0) {
        BOOL v11 = v18;
      }
      else {
        BOOL v11 = (void **)v18[0];
      }
      uint64_t v12 = [v10 initWithUTF8String:v11];
LABEL_16:
      *a3 = v12;
      if (SHIBYTE(v20) < 0)
      {
        if ((void)v20) {
          goto LABEL_18;
        }
      }
      else if (HIBYTE(v20))
      {
LABEL_18:
        id v13 = [NSString alloc];
        if (v20 >= 0) {
          unsigned int v14 = &v19[1];
        }
        else {
          unsigned int v14 = (void **)v19[1];
        }
        uint64_t v15 = [v13 initWithUTF8String:v14];
        goto LABEL_24;
      }
      uint64_t v15 = 0;
LABEL_24:
      *a4 = v15;
      goto LABEL_25;
    }
    uint64_t v12 = 0;
    goto LABEL_16;
  }
LABEL_25:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  if (SHIBYTE(v19[0]) < 0) {
    operator delete(v18[0]);
  }
  return FunctionAtOffset;
}

void sub_18284E4BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

void MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData(MTLLibraryDataWithArchive::AdditionalFunctionData *this)
{
  long long v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void MTLLibraryDataWithArchive::getInputListForStitchedFunction(MTLLibraryDataWithArchive *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((void *)a1 + 60, a2);
  if (!v6 || (unint64_t v7 = v6[6]) == 0)
  {
    unint64_t v8 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((void *)a1 + 40, a2);
    if (!v8)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    unint64_t v7 = v8[6];
  }
  v15.functionInputs = 0;
  v15.airScript = 0;
  uint64_t v14 = 0;
  long long v12 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)id v10 = 0u;
  *(_OWORD *)BOOL v11 = 0u;
  MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v7, &v15, (MTLLibraryDataWithArchive::AdditionalFunctionData *)v9);
  if (v15.airScript) {
    dispatch_release((dispatch_object_t)v15.airScript);
  }
  if (v15.functionInputs) {
    dispatch_release((dispatch_object_t)v15.functionInputs);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(a3, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[1]);
  }
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(v10[0]);
  }
}

void sub_18284E648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newStitchedFunction(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t a3)
{
  return MTLLibraryDataWithArchive::newAirScriptedFunction(a1, a2, a3, (void *)a1 + 60, 0);
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newFunction(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((void *)a1 + 40, a2);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v5[6];
  v25.functionInputs = 0;
  v25.airScript = 0;
  uint64_t v24 = 0;
  long long v22 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)long long v20 = 0u;
  *(_OWORD *)unint64_t v21 = 0u;
  if (MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v6, &v25, (MTLLibraryDataWithArchive::AdditionalFunctionData *)&v19))
  {
    if (*((void *)a1 + 48))
    {
      unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((void *)a1 + 45, (unsigned __int8 *)v20);
      if (v7)
      {
        v25.airScript = (OS_dispatch_data *)*((void *)v7 + 5);
        std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::erase((void *)a1 + 45, (uint64_t *)v7);
      }
    }
    id v8 = [NSString alloc];
    if (SHIBYTE(v21[0]) >= 0) {
      uint64_t v9 = v20;
    }
    else {
      uint64_t v9 = (void **)v20[0];
    }
    id v10 = (void *)[v8 initWithUTF8String:v9];
    BOOL v11 = [_MTLFunctionInternal alloc];
    long long v12 = [(_MTLFunctionInternal *)v11 initWithName:v10 type:v19 libraryData:a1 functionData:&v25 device:a3];
    id v13 = v12;
    if (*((void *)a1 + 53))
    {
      uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 54);
      uint64_t v17 = *((void *)a1 + 53);
      unint64_t v18 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [(_MTLFunctionInternal *)v12 setTrackingData:&v17];
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
    if (*((void *)a1 + 66))
    {
      if (v13)
      {
        uint64_t v15 = [(_MTLFunctionInternal *)v13 sourceArchiveOffset];
        if (v15 != -1) {
          [(_MTLFunctionInternal *)v13 setSourceArchiveOffset:*((void *)a1 + 65) + v15];
        }
      }
    }
  }
  else
  {
    id v13 = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[1]);
  }
  if (SHIBYTE(v21[0]) < 0) {
    operator delete(v20[0]);
  }
  return v13;
}

void sub_18284E83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

NSObject *MTLLibraryDataWithArchive::newMetalScript(MTLLibraryDataWithArchive *this)
{
  uint64_t result = *((void *)this + 79);
  if (result)
  {
    dispatch_retain(result);
    return *((void *)this + 79);
  }
  return result;
}

dispatch_data_t MTLLibraryDataWithArchive::handleMetalScript(MTLLibraryDataWithArchive *this, char *buffer, size_t size)
{
  unsigned int v3 = size;
  unint64_t v6 = *((void *)this + 79);
  if (v6) {
    dispatch_release(v6);
  }
  dispatch_data_t result = dispatch_data_create(buffer, v3, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);
  *((void *)this + 79) = result;
  return result;
}

dispatch_data_t MTLLibraryDataWithArchive::newFunctionReflectionData(MTLLibraryDataWithArchive *this, uint64_t a2)
{
  (*(void (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)this + 312))(this, *((void *)this + 75) + a2);
  memset(size, 0, sizeof(size));
  unint64_t v6 = 0;
  int v3 = MTLLibraryDataWithArchive::extractFlatbuffer(this, (char **)&size[1], size, &v6);
  dispatch_data_t v4 = 0;
  if (v3)
  {
    dispatch_data_t v4 = dispatch_data_create(*(const void **)&size[1], size[0], 0, 0);
    free(*(void **)&size[1]);
  }
  return v4;
}

uint64_t MTLLibraryDataWithArchive::functionHashes(MTLLibraryDataWithArchive *this)
{
  uint64_t v1 = *((void *)this + 33);
  if (!v1)
  {
    int v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    uint64_t v1 = *((void *)this + 33);
    if (!v1)
    {
      long long v20 = 0;
      unint64_t v21 = 0;
      long long v22 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v20, *((void *)this + 43));
      for (uint64_t i = (void *)*((void *)this + 42); i; uint64_t i = (void *)*i)
      {
        uint64_t v5 = [objc_alloc(MEMORY[0x1E4F29238]) initWithBytes:i + 2 objCType:"{?=[32C]}"];
        uint64_t v6 = v5;
        unint64_t v7 = v21;
        if (v21 >= v22)
        {
          uint64_t v9 = (v21 - v20) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v10 = (v22 - v20) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)(v22 - v20) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v22, v11);
          }
          else {
            long long v12 = 0;
          }
          id v13 = (uint64_t *)&v12[8 * v9];
          *id v13 = v6;
          id v8 = (char *)(v13 + 1);
          uint64_t v15 = v20;
          uint64_t v14 = v21;
          if (v21 != v20)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *--id v13 = v16;
            }
            while (v14 != v15);
            uint64_t v14 = v20;
          }
          long long v20 = (char *)v13;
          unint64_t v21 = v8;
          long long v22 = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v21 = v5;
          id v8 = v7 + 8;
        }
        unint64_t v21 = v8;
      }
      uint64_t v1 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:count:");
      *((void *)this + 33) = v1;
      uint64_t v17 = (id *)v20;
      unint64_t v18 = (id *)v21;
      if (v20 != v21)
      {
        do

        while (v17 != v18);
        uint64_t v1 = *((void *)this + 33);
        uint64_t v17 = (id *)v20;
      }
      if (v17)
      {
        unint64_t v21 = (char *)v17;
        operator delete(v17);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_18284ECD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void MTLLibraryDataWithArchive::readFunctionSourceArchiveMetadata(MTLLibraryDataWithArchive *this, unint64_t a2, _MTLFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 312))(this) & 1) == 0)
  {
    MTLReportFailure(0, "readFunctionSourceArchiveMetadata", 5946, @"Invalid library file/data (unexpected end of file)", v11, v12, v13, v14, a9);
    return;
  }
  HIDWORD(v28[0]) = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(void *)this + 320))(this, (char *)v28 + 4, 4) != 4)
  {
    uint64_t v27 = 5951;
LABEL_16:
    MTLReportFailure(0, "readFunctionSourceArchiveMetadata", v27, @"Invalid library file/data (unexpected end of file)", v15, v16, v17, v18, v28[0]);
    return;
  }
  LODWORD(v28[0]) = 0;
  HIDWORD(v28[0]) = bswap32(HIDWORD(v28[0]));
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t *, uint64_t))(*(void *)this + 320))(this, v28, 4) != 4)
  {
    uint64_t v27 = 5957;
    goto LABEL_16;
  }
  MEMORY[0x1F4188790](4);
  long long v20 = (char *)v28 - ((v19 + 15) & 0x1FFFFFFF0);
  uint64_t v21 = (*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, void))(*(void *)this + 320))(this, v20, LODWORD(v28[0]));
  if (v21 == LODWORD(v28[0]))
  {
    if (LODWORD(v28[0]))
    {
      uint64_t v26 = 0;
      while (v20[v26])
      {
        if (LODWORD(v28[0]) == ++v26) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      long long v20 = 0;
    }
    -[_MTLFunction setUnpackedFilePath:](a3, "setUnpackedFilePath:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(NSString, "stringWithUTF8String:", v20), "stringByAppendingPathComponent:", -[_MTLFunction filePath](a3, "filePath")), "stringByStandardizingPath"));
  }
  else
  {
    MTLReportFailure(0, "readFunctionSourceArchiveMetadata", 5960, @"Invalid library file/data (unexpected end of file)", v22, v23, v24, v25, v28[0]);
  }
}

void MTLLibraryDataWithSource::readFunctionMetadata(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a4 == 1)
  {
    dispatch_data_t v4 = (unsigned int *)(*(void *)(a1 + 152) + a2);
    unint64_t v5 = *(void *)(a1 + 160) - a2;
    uint64_t v25 = v4;
    unint64_t v26 = v5;
    if (v5) {
      BOOL v6 = v5 > 3;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6) {
      goto LABEL_30;
    }
    uint64_t v8 = *v4;
    unint64_t v27 = 4;
    uint64_t v9 = 8 * v8;
    MEMORY[0x1F4188790](a1);
    if (v10)
    {
      v24[0] = v10;
      v24[1] = v24;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = DeserialContext::stringFromSerializedData((DeserialContext *)&v25);
        unint64_t v13 = v27;
        if (v26 <= v27 || v26 - v27 <= 3) {
          goto LABEL_30;
        }
        unsigned int v15 = *(unsigned int *)((char *)v25 + v27);
        v27 += 4;
        if (v26 <= v13 + 4 || v26 - (v13 + 4) <= 3) {
          goto LABEL_30;
        }
        uint64_t v17 = v12;
        uint64_t v18 = *(unsigned int *)((char *)v25 + v13 + 4);
        unint64_t v27 = v13 + 8;
        uint64_t v19 = (v15 >> 29) & 2 | (v15 >> 31) | (v15 >> 27) & 4;
        uint64_t v20 = v15 & 0x1FFFFFFF;
        if ([a3 functionType] == 1) {
          uint64_t v21 = off_1E521F4F8;
        }
        else {
          uint64_t v21 = off_1E521F108;
        }
        *(void *)((char *)&v24[v11 / 8] - ((v9 + 15) & 0xFFFFFFFF0)) = (id)[objc_alloc(*v21) initWithName:v17 attributeIndex:v20 attributeType:v18 flags:v19];
        v11 += 8;
      }
      while (v9 != v11);
      if (LODWORD(v24[0]))
      {
        uint64_t v22 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:(char *)v24 - ((v9 + 15) & 0xFFFFFFFF0) count:v24[0]];
        [a3 setVertexAttributes:v22];
      }
    }
    if (v26 <= v27 || v26 - v27 <= 3) {
LABEL_30:
    }
      abort();
    int v23 = *(unsigned int *)((char *)v25 + v27);
    v27 += 4;
    if (v23) {
      operator new[]();
    }
  }
}

void sub_18284F3BC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18284F470(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id MTLLibraryContainer::functionNames(MTLLibraryContainer *this)
{
  if (this->var5) {
    return this->var5;
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)this->var3 + 40))();
  }
}

id MTLLibraryContainer::externFunctionNames(MTLLibraryContainer *this)
{
  if (this->var6) {
    return this->var6;
  }
  else {
    return (id)(*(uint64_t (**)(void))(*(void *)this->var3 + 48))();
  }
}

uint64_t MTLLibraryCache::findLibraryData(os_unfair_lock_s *a1, _OWORD *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock(a1);
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  unint64_t v5 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>((uint64_t)&a1[2], (unsigned int *)v8);
  if (&a1[4] == (os_unfair_lock_s *)v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v5[8];
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  os_unfair_lock_unlock(a1);
  return v6;
}

void sub_18284FAC8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *MTLCachedLibraryData::swapLibraryInfo(void *result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result[17];
    result[17] = a2[5];
    a2[5] = v2;
    uint64_t v3 = result[12];
    result[12] = *a2;
    *a2 = v3;
    uint64_t v4 = result[13];
    result[13] = a2[1];
    a2[1] = v4;
    uint64_t v5 = result[14];
    result[14] = a2[2];
    a2[2] = v5;
    uint64_t v6 = result[15];
    result[15] = a2[3];
    a2[3] = v6;
    uint64_t v7 = result[16];
    result[16] = a2[4];
    a2[4] = v7;
  }
  return result;
}

uint64_t MTLCachedLibraryData::MTLCachedLibraryData(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  *(void *)a1 = &unk_1ECAC5530;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  long long v5 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v5;
  *(void *)a1 = &unk_1ECAC5B90;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = a2;
  MTLCachedLibraryData::swapLibraryInfo((void *)a1, a4);
  return a1;
}

void processFunctions(void *a1, void *a2, unsigned int *a3, void *a4, uint64_t a5, unsigned int a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  BOOL v8 = (_MTLCompilePerformanceStatisticsEnabled() & 1) != 0 || a3[13] != 0;
  if (!a2 && v8) {
    a2 = (void *)[MEMORY[0x1E4F1CA48] array];
  }
  unint64_t v9 = a3[5];
  uint64_t v10 = (unsigned int *)((char *)a3 + a3[4]);
  __int16 v40 = v10;
  unint64_t v41 = v9;
  if (v9 <= 4) {
    goto LABEL_48;
  }
  if ((v9 & 0xFFFFFFFC) == 4) {
    goto LABEL_48;
  }
  unsigned int v30 = a6;
  BOOL v31 = v8;
  unint64_t v36 = a3;
  if (v9 < 9 || (v9 & 0xFFFFFFFC) == 8) {
    goto LABEL_48;
  }
  int v32 = *v10;
  int v11 = v10[2];
  int v37 = v10[1];
  unint64_t v42 = 12;
  if (v11)
  {
    while (1)
    {
      unint64_t v12 = v42;
      if (v41 <= v42 || v41 - v42 <= 3) {
        break;
      }
      int v14 = *(_DWORD *)((char *)v40 + v42);
      v42 += 4;
      if (v41 <= v12 + 4 || v41 - (v12 + 4) <= 3) {
        break;
      }
      uint64_t v16 = *(unsigned int *)((char *)v40 + v12 + 4);
      unint64_t v42 = v12 + 8;
      if (v41 <= v12 + 8 || v41 - (v12 + 8) <= 3) {
        break;
      }
      int v18 = *(_DWORD *)((char *)v40 + v12 + 8);
      unint64_t v42 = v12 + 12;
      if (v41 <= v12 + 12 || v41 - (v12 + 12) <= 3) {
        break;
      }
      int v20 = *(_DWORD *)((char *)v40 + v12 + 12);
      unint64_t v42 = v12 + 16;
      if (v41 <= v12 + 16) {
        break;
      }
      if (v41 - (v12 + 16) <= 3) {
        break;
      }
      int v21 = *(_DWORD *)((char *)v40 + v12 + 16);
      unint64_t v42 = v12 + 20;
      if (v41 <= v12 + 20) {
        break;
      }
      if (v41 - (v12 + 20) <= 3) {
        break;
      }
      int v22 = *(_DWORD *)((char *)v40 + v12 + 20);
      unint64_t v42 = v12 + 24;
      if (v41 <= v12 + 24 || v41 - (v12 + 24) <= 3) {
        break;
      }
      int v23 = *(_DWORD *)((char *)v40 + v12 + 24);
      unint64_t v42 = v12 + 28;
      uint64_t v24 = DeserialContext::stringFromSerializedData((DeserialContext *)&v40);
      if ((v14 - 1) > 5) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = qword_1828F14A0[v14 - 1];
      }
      uint64_t v39 = v25;
      uint64_t v51 = 0;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      memset(v47, 0, sizeof(v47));
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      uint64_t v26 = v36[10] + v21;
      uint64_t v27 = v36[6] + v18;
      uint64_t v43 = v26;
      *((void *)&v44 + 1) = v27;
      *(void *)&long long v45 = v36[8] + v20;
      *((void *)&v45 + 1) = -1;
      MTLLibraryDataWithSource::getBitCodeHash(a4, (uint64_t)v47, v26);
      WORD4(v46) = HIWORD(v32);
      WORD5(v46) = v32;
      WORD6(v46) = HIWORD(v37);
      HIWORD(v46) = v37;
      LOBYTE(v48) = v22;
      if ((v23 & 3) == 2) {
        char v28 = 2;
      }
      else {
        char v28 = (v23 & 3) == 1;
      }
      BYTE1(v48) = v28 | v23 & 0xFC;
      size_t v29 = [[_MTLFunctionInternal alloc] initWithName:v24 type:v39 libraryData:a4 functionData:&v43 device:a5];
      [(_MTLFunctionInternal *)v29 setLineNumber:v16];
      [a1 setObject:v29 forKey:v24];
      [a2 addObject:v24];

      if (!--v11) {
        goto LABEL_45;
      }
    }
LABEL_48:
    abort();
  }
LABEL_45:
  if (v31) {
    processCompileTimeStats((uint64_t)v36, (uint64_t)a2, v30);
  }
}

void processCompileTimeStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (NSDictionary *)[MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v7 = v6;
  if (a2) {
    [(NSDictionary *)v6 setObject:a2 forKey:MTLLibraryPerformanceKeyFunctionNames];
  }
  uint64_t v8 = [NSNumber numberWithBool:a3];
  [(NSDictionary *)v7 setObject:v8 forKey:MTLLibraryPerformanceKeyCachedLibrary];
  unint64_t v9 = *(unsigned int *)(a1 + 52);
  if (v9)
  {
    if (v9 <= 3) {
      goto LABEL_28;
    }
    uint64_t v10 = (unsigned int *)(a1 + *(unsigned int *)(a1 + 48));
    uint64_t v11 = *v10;
    if (v11)
    {
      unint64_t v12 = 0;
      unint64_t v13 = v9 - 8;
      uint64_t v14 = 12 * v11;
      while (v12 + 4 < v9 && v13 < 0xFFFFFFFFFFFFFFFCLL)
      {
        switch(v10[v12 / 4 + 1])
        {
          case 0u:
            uint64_t v16 = MTLLibraryPerformanceKeyTotalFrontendTotalTime;
            break;
          case 1u:
            uint64_t v16 = MTLLibraryPerformanceKeyFunctionSpecialization;
            break;
          case 2u:
            uint64_t v16 = (__CFString *)MTLLibraryPerformanceKeyCoreImageSPI;
            break;
          case 3u:
          case 6u:
            uint64_t v16 = MTLCompileTimeStatisticsKeyTotal[0];
            break;
          case 4u:
            uint64_t v17 = MTLCompileTimeStatisticsKeyFrameworkTotal;
            goto LABEL_21;
          case 5u:
            uint64_t v17 = MTLCompileTimeStatisticsKeyBackendCompilerBuildRequest;
            goto LABEL_21;
          case 7u:
            uint64_t v17 = &MTLCompileTimeStatisticsKeyFrameworkInstrumentation;
LABEL_21:
            uint64_t v16 = *v17;
            break;
          default:
            uint64_t v16 = @"Invalid key";
            break;
        }
        if (v12 + 8 >= v9 || v13 <= 7) {
          break;
        }
        -[NSDictionary setObject:forKey:](v7, "setObject:forKey:", [NSNumber numberWithUnsignedLongLong:*(void *)&v10[v12 / 4 + 2]], v16);
        v12 += 12;
        v13 -= 12;
        if (v14 == v12) {
          goto LABEL_25;
        }
      }
LABEL_28:
      abort();
    }
  }
LABEL_25:

  _MTLAddCompileLibraryPerformanceStatistics(v7);
}

uint64_t newErrorWithWarningLog(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = [@"Compilation succeeded with: \n\n" stringByAppendingString:result];
    uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v1 forKey:*MEMORY[0x1E4F28568]];
    id v3 = objc_alloc(MEMORY[0x1E4F28C58]);
    return [v3 initWithDomain:@"MTLLibraryErrorDomain" code:4 userInfo:v2];
  }
  return result;
}

uint64_t MTLLibraryContainer::MTLLibraryContainer(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  atomic_store(1u, (unsigned int *)(a1 + 8));
  long long v3 = *a2;
  *(_OWORD *)(a1 + 28) = a2[1];
  *(_OWORD *)(a1 + 12) = v3;
  uint64_t v4 = dispatch_group_create();
  *(void *)(a1 + 80) = v4;
  dispatch_group_enter(v4);
  return a1;
}

uint64_t _MTLGetAIRVersionForLLVMBitcodeVersion(int a1)
{
  if ((a1 - 32023) >= 2) {
    return 0x20000;
  }
  else {
    return 131079;
  }
}

uint64_t processCompiledLibrary(NSObject *a1, _MTLDevice *a2, int a3, void *a4, uint64_t a5, int a6, uint64_t a7, void *a8, void *a9, uint64_t *a10, uint64_t *a11, uint64_t a12, unsigned __int8 a13)
{
  int v13 = (a13 >> 1) & 1;
  if (a3 != 7) {
    int v13 = 0;
  }
  if (a12) {
    int v14 = v13;
  }
  else {
    int v14 = 0;
  }
  size_t size_ptr = 0;
  buffer_ptr = 0;
  if (a1)
  {
    uint64_t v19 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &size_ptr);
    int v21 = (unsigned int *)buffer_ptr;
    int v22 = *(_DWORD *)buffer_ptr;
    if (*(_DWORD *)buffer_ptr == 1112298573) {
      char v23 = 1;
    }
    else {
      char v23 = v14;
    }
    if ((v23 & 1) == 0)
    {
      uint64_t v24 = v19;
      BOOL v25 = dispatch_data_get_size(a1) > 0x68;
      uint64_t v19 = v24;
      if (!v25)
      {
        if (a11)
        {
          uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Compilation failed: \n\n compiler response is invalid" forKey:*MEMORY[0x1E4F28568]];
          *a11 = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:2 userInfo:v26];
          uint64_t v19 = v24;
        }
        goto LABEL_14;
      }
    }
    if (!v19) {
      return 0;
    }
    if (v14)
    {
      uint64_t v27 = v19;
      __p[0] = dispatch_data_create(v21, size_ptr, 0, 0);
      LOBYTE(v70) = 2;
      std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*&>(a12, (char *)&v70, &v70, __p);
      dispatch_release(v27);
      return 1;
    }
    unsigned int v30 = a10;
    if (v22 == 1112298573)
    {
      BOOL v31 = v19;
      uint64_t v28 = processArchiveLibrary((uint64_t)a2, a1, 0, a8, a9, a10, a11, v20);
      int v32 = v31;
LABEL_57:
      dispatch_release(v32);
      return v28;
    }
    dispatch_object_t object = v19;
    if (v21[3])
    {
      uint64_t v33 = [NSString stringWithCString:(char *)v21 + v21[2] encoding:4];
      unsigned int v30 = a10;
      uint64_t v34 = v33;
      char v35 = *(unsigned char *)v21;
      if (*(unsigned char *)v21)
      {
LABEL_25:
        if ((v35 & 2) != 0)
        {
          if (!processArchiveLibrary((uint64_t)a2, a1, (uint64_t)v21, a8, a9, v30, a11, v20))
          {
            uint64_t v19 = object;
LABEL_14:
            dispatch_release(v19);
            return 0;
          }
        }
        else
        {
          uint64_t v51 = v30;
          uint64_t v53 = _MTLGetLibrariesCache(a2);
          if (a7 == 1)
          {
            uint64_t v36 = v21[11];
            uint64_t v52 = v21[10];
          }
          else
          {
            uint64_t v52 = 0;
            uint64_t v36 = 0;
          }
          uint64_t v70 = 0;
          uint64_t v71 = (id *)&v70;
          uint64_t v72 = 0x6012000000;
          uint64_t v73 = __Block_byref_object_copy__1831;
          uint64_t v74 = __Block_byref_object_dispose__1832;
          int v75 = "e";
          long long v76 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          SerializedLibraryInfo::SerializedLibraryInfo((SerializedLibraryInfo *)__p, v21, (uint64_t)v21);
          Array = SerializedLibraryInfo::createArray((uint64_t **)&v65 + 1);
          v71[10] = Array;
          uint64_t LibraryInstallName = SerializedLibraryInfo::getLibraryInstallName((SerializedLibraryInfo *)__p);
          v71[6] = (id)LibraryInstallName;
          uint64_t v43 = SerializedLibraryInfo::createArray(v67);
          v71[9] = v43;
          long long v44 = SerializedLibraryInfo::createArray(v68);
          v71[8] = v44;
          long long v45 = SerializedLibraryInfo::createArray(v69);
          v71[7] = v45;
          v79[0] = 0;
          v62[0] = MEMORY[0x1E4F143A8];
          v62[1] = 3221225472;
          v62[2] = ___ZL24processSerializedLibraryPU27objcproto16OS_dispatch_data8NSObjectPU19objcproto9MTLDevice11objc_object19MTLBuildRequestTypeRK10MTLHashKeybP36MTLBuildLibraryFromSourceReplyHeader14MTLLibraryTypeP19NSMutableDictionaryP14NSMutableArrayPP14MTLLibraryDataPP7NSError17MTLCompilerOption_block_invoke;
          v62[3] = &unk_1E5221708;
          v62[6] = v53;
          v62[7] = a5;
          v62[4] = a1;
          v62[5] = &v70;
          v62[8] = v36;
          v62[9] = v52;
          int v63 = a3;
          long long v46 = (void *)MTLLibraryCache::newLibraryData(v53, (long long *)(a5 + 24), (uint64_t)v79, (uint64_t)v62);

          processFunctions(a8, a9, v21, v46, (uint64_t)a2, a6 ^ 1);
          if (v51)
          {
            *uint64_t v51 = (uint64_t)v46;
          }
          else if (v46)
          {
            (*(void (**)(void *))(*v46 + 24))(v46);
          }
          v79[0] = (void **)v69;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v79);
          v79[0] = (void **)v68;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v79);
          v79[0] = (void **)v67;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v79);
          v79[0] = (void **)&v65 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v79);
          if (SBYTE7(v65) < 0) {
            operator delete(__p[0]);
          }
          _Block_object_dispose(&v70, 8);
        }
        if (a3 == 7)
        {
          if (a12)
          {
            uint64_t v47 = v21[25];
            if (v47)
            {
              *(_OWORD *)std::string __p = 0u;
              long long v65 = 0u;
              int v66 = 1065353216;
              uint64_t v70 = v21[24];
              deserializeCompilerOutputData(buffer_ptr, v70 + v47, &v70, __p, a12);
              std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)__p);
            }
          }
        }
        if (a6)
        {
          size_t v48 = size_ptr;
          long long v49 = (std::__shared_weak_count *)a4[1];
          v59[0] = *a4;
          v59[1] = v49;
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          addReplyToCompilerCache((uint64_t)v21, v48, v59, a5);
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
        }
        if (!a11) {
          goto LABEL_56;
        }
        uint64_t v40 = newErrorWithWarningLog(v34);
        goto LABEL_55;
      }
    }
    else
    {
      char v35 = v22;
      uint64_t v34 = 0;
      if (v35) {
        goto LABEL_25;
      }
    }
    if (v34) {
      int v37 = (__CFString *)v34;
    }
    else {
      int v37 = @"compiler error log is invalid";
    }
    uint64_t v38 = [@"Compilation failed: \n\n" stringByAppendingString:v37];
    uint64_t v39 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v38 forKey:*MEMORY[0x1E4F28568]];
    if (!a11) {
      goto LABEL_56;
    }
    uint64_t v40 = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v39];
LABEL_55:
    *a11 = v40;
LABEL_56:
    uint64_t v28 = v35 & 1;
    int v32 = object;
    goto LABEL_57;
  }
  uint64_t v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Compiler returned an empty reply" forKey:*MEMORY[0x1E4F28568]];
  if (!a11) {
    return 0;
  }
  uint64_t v28 = 0;
  *a11 = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:2 userInfo:v29];
  return v28;
}

void sub_182850898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void ___ZN17MTLLibraryBuilder35initLibraryContainerWithRequestDataEP19MTLLibraryContainerR21MTLLibraryRequestDataU13block_pointerFvvE_block_invoke(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 48);
  unint64_t v9 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v10 = (NSArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v11 = v10;
  uint64_t v19 = 0;
  if (a2)
  {
    if (a4)
    {
      unint64_t v12 = (__CFString *)[NSString stringWithUTF8String:a4];
      if (!v12) {
        unint64_t v12 = (__CFString *)[NSString stringWithCString:a4 encoding:1];
      }
    }
    else
    {
      unint64_t v12 = @"empty error message";
    }
    uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v12 forKey:*MEMORY[0x1E4F28568]];
    uint64_t v19 = (NSError *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v16];
    MTLLibraryContainer::init(*(MTLLibraryContainer **)(a1 + 160), 0, 0, 0, v19);
  }
  else
  {
    int v13 = *(_MTLDevice **)(v8 + 32);
    int v14 = *(_DWORD *)(a1 + 168);
    unsigned int v15 = *(std::__shared_weak_count **)(a1 + 64);
    v17[0] = *(void *)(a1 + 56);
    v17[1] = v15;
    int v18 = 0;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    processCompiledLibrary(a3, v13, v14, v17, a1 + 72, 1, *(void *)(a1 + 152), v9, v10, (uint64_t *)&v18, (uint64_t *)&v19, 0, 0);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    MTLLibraryContainer::init(*(MTLLibraryContainer **)(a1 + 160), v18, v9, v11, v19);
    if (v18) {
      (*(void (**)(MTLLibraryData *))(*(void *)v18 + 24))(v18);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_182850AC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

MTLHashKey *__copy_helper_block_e8_56c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE72c17_ZTSK10MTLHashKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return MTLHashKey::MTLHashKey((MTLHashKey *)(a1 + 72), (const MTLHashKey *)(a2 + 72));
}

void sub_182850B24(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_56c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE72c17_ZTSK10MTLHashKey(uint64_t a1)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)(a1 + 72));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

double downgradeRequestHashAndData(_OWORD *a1, dispatch_data_t *a2, MTLCompilerFunctionRequest *a3, int a4)
{
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  downgradeRequestData(&v10, &v11, a3, a4);
  uint64_t v7 = v10;
  unint64_t v8 = v11;
  *a2 = dispatch_data_create(v10, v11, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);

  return generateDowngradeRequestHash(a1, (uint64_t)a3, v7, v8);
}

uint64_t downgradeRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (*(void *)(a1 + 32)) {
      uint64_t v4 = *(void **)(a1 + 32);
    }
    else {
      uint64_t v4 = *(void **)(a1 + 40);
    }
    uint64_t v7 = (void *)[v4 device];
    uint64_t v8 = _MTLGetMTLCompilerLLVMVersionForDevice(v7);
    getCompilerConnectionManager(v7, v8);
    operator new();
  }
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, void, const char *))(a4 + 16);

  return v5(a4, 1, 0, "Downgrade request was nil!");
}

void MTLLibraryBuilder::newLibraryWithRequestData(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a2 + 16) == 7)
  {
    generateDowngradeRequestHash(md, *(void *)(a2 + 32), *(const void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    uint64_t v6 = *(const void **)a2;
    CC_LONG v7 = *(_DWORD *)(a2 + 8);
    *(_OWORD *)md = 0u;
    long long v10 = 0u;
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, v6, v7);
    CC_SHA256_Final(md, &c);
  }
  MTLLibraryBuilder::newLibraryWithRequestDataAndHash(a1, a2, md, a3);
}

double generateDowngradeRequestHash(_OWORD *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(a2 + 32);
  if (v8)
  {
    uint64_t v9 = [v8 functionData];
    long long v10 = *(_OWORD *)(v9 + 72);
    long long v17 = *(_OWORD *)(v9 + 56);
    long long v18 = v10;
  }
  else
  {
    uint64_t v11 = [*(id *)(a2 + 40) libraryData];
    unint64_t v12 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 296))(v11);
    long long v13 = v12[1];
    long long v17 = *v12;
    long long v18 = v13;
  }
  createHashForType(7, a3, a4, &v17, a2, 0, 0, (unsigned __int8 *)v16);
  double result = *(double *)v16;
  long long v15 = v16[1];
  *a1 = v16[0];
  a1[1] = v15;
  return result;
}

uint64_t MTLLibraryBuilder::findLibraryContainer(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  uint64_t v4 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(a1 + 8, (unsigned int *)v6);
  if ((uint64_t *)(a1 + 16) == v4) {
    return 0;
  }
  else {
    return v4[8];
  }
}

_OWORD *MTLLibraryBuilder::insertLibraryContainer(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  uint64_t v6 = v7;
  double result = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__emplace_unique_key_args<MTLLibraryIdentifier,std::piecewise_construct_t const&,std::tuple<MTLLibraryIdentifier&&>,std::tuple<>>((uint64_t **)(a1 + 8), (unsigned int *)v7, (uint64_t)&std::piecewise_construct, &v6);
  *((void *)result + 8) = a3;
  return result;
}

void MTLLibraryBuilder::deleteLibraryCache(MTLLibraryBuilder *this)
{
  os_unfair_lock_lock((os_unfair_lock_t)this);
  std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::erase((uint64_t **)this + 1, *((uint64_t **)this + 1), (uint64_t *)this + 2);

  os_unfair_lock_unlock((os_unfair_lock_t)this);
}

void sub_182851198(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void escapeString(char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  std::string::reserve(a2, v4 + 4);
  uint64_t v5 = *((void *)v2 + 1);
  if (v2[23] >= 0)
  {
    uint64_t v6 = v2[23];
  }
  else
  {
    uint64_t v2 = *(char **)v2;
    uint64_t v6 = v5;
  }
  for (; v6; --v6)
  {
    int v7 = *v2;
    if ((v7 - 9) < 5
      || ((v7 - 32) <= 0x3C
        ? (BOOL v8 = ((1 << (v7 - 32)) & 0x1000000000000085) == 0)
        : (BOOL v8 = 1),
          !v8))
    {
      std::string::push_back(a2, 92);
    }
    std::string::push_back(a2, v7);
    ++v2;
  }
}

uint64_t ___ZN17MTLLibraryBuilder20newLibraryWithSourceEPU19objcproto9MTLDevice11objc_objectP8NSStringP17MTLCompileOptionsbU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke(uint64_t a1, int a2, int a3, void *__src, size_t __n)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += __n;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) -= __n;
  return 1;
}

char *MTLCompilerStitchingRequest::setBinaryArchiveID(MTLCompilerStitchingRequest *this, const char *__s)
{
  uint64_t v4 = (void *)*((void *)this + 9);
  if (v4) {
    free(v4);
  }
  *((void *)this + 10) = strlen(__s) + 1;
  double result = strdup(__s);
  *((void *)this + 9) = result;
  return result;
}

void ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke_2(uint64_t a1, uint64_t a2, dispatch_data_t data, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(MTLLibraryBuilder **)(a1 + 64);
  uint64_t v38 = 0;
  if (a2 || !data)
  {
    if (a4)
    {
      int v14 = (__CFString *)[NSString stringWithUTF8String:a4];
      if (!v14) {
        int v14 = (__CFString *)[NSString stringWithCString:a4 encoding:1];
      }
    }
    else
    {
      int v14 = @"empty error message";
    }
    uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v14 forKey:*MEMORY[0x1E4F28568]];
    BOOL v25 = (NSError *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v26];
    goto LABEL_28;
  }
  size_t size_ptr = 0;
  buffer_ptr = 0;
  dispatch_data_t v8 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  if (!v8)
  {
    uint64_t v23 = [NSString stringWithUTF8String:"Compiler returned an empty reply."];
    if (!v23) {
      uint64_t v23 = [NSString stringWithCString:"Compiler returned an empty reply." encoding:1];
    }
    uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v23 forKey:*MEMORY[0x1E4F28568]];
    BOOL v25 = (NSError *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:2 userInfo:v24];
LABEL_28:
    subrange = 0;
    int v21 = 0;
    uint64_t v38 = v25;
LABEL_29:
    char v22 = 1;
    goto LABEL_30;
  }
  uint64_t v9 = v8;
  long long v10 = (unsigned int *)buffer_ptr;
  if (*((_DWORD *)buffer_ptr + 13))
  {
    if (*((_DWORD *)buffer_ptr + 12))
    {
      int v11 = _MTLCompilePerformanceStatisticsEnabled();
      long long v10 = (unsigned int *)buffer_ptr;
      if (v11)
      {
        processCompileTimeStats((uint64_t)buffer_ptr, 0, 0);
        long long v10 = (unsigned int *)buffer_ptr;
      }
    }
  }
  if ((*(unsigned char *)v10 & 1) != 0 && (size_t v12 = v10[11], v12))
  {
    subrange = dispatch_data_create_subrange(data, v10[10], v12);
    long long v10 = (unsigned int *)buffer_ptr;
  }
  else
  {
    subrange = 0;
  }
  uint64_t v38 = (NSError *)newErrorFromCompilerLog((uint64_t)v10);
  if (!*(unsigned char *)(a1 + 128))
  {
    long long v15 = (char *)buffer_ptr;
    uint64_t v16 = *((unsigned int *)buffer_ptr + 10);
    size_t size_ptr = *((unsigned int *)buffer_ptr + 11);
    uint64_t v17 = *(void *)(a1 + 72);
    __n128 v18 = MTLHashKey::MTLHashKey((uint64_t)&v44, a1 + 129);
    (*(void (**)(uint64_t, MTLHashKey *, char *, size_t, __n128))(*(void *)v17 + 48))(v17, &v44, &v15[v16], size_ptr, v18);
    MTLHashKey::~MTLHashKey(&v44);
  }
  dispatch_release(v9);
  if (!subrange)
  {
    int v21 = 0;
    goto LABEL_29;
  }
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 3321888768;
  v39[2] = ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke_3;
  v39[3] = &unk_1ECAC3B40;
  long long v42 = *(_OWORD *)(a1 + 129);
  long long v43 = *(_OWORD *)(a1 + 145);
  void v39[4] = subrange;
  v39[5] = v6;
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v40 = v19;
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 104);
  unint64_t v41 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v21 = (MTLLibraryData *)MTLLibraryCache::newLibraryData(v19, (long long *)(a1 + 129), (uint64_t)&v38, (uint64_t)v39);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  char v22 = 0;
LABEL_30:
  uint64_t v27 = (NSMutableDictionary *)objc_opt_new();
  MTLLibraryContainer::init(*(MTLLibraryContainer **)(a1 + 112), v21, v27, 0, v38);
  uint64_t v28 = *(void *)(a1 + 112);
  if (*(void *)(v28 + 48))
  {
    uint64_t v29 = [[_MTLLibrary alloc] initWithLibraryContainer:v28 device:*((void *)v6 + 4)];
    if (v29)
    {
      if (*(void *)(a1 + 32))
      {
        uint64_t v30 = *(void *)(a1 + 72);
        __n128 v31 = MTLHashKey::MTLHashKey((uint64_t)&v44, a1 + 129);
        (*(void (**)(uint64_t, MTLHashKey *, void, void, _MTLLibrary *, __n128))(*(void *)v30 + 144))(v30, &v44, *(void *)(a1 + 96), *(void *)(a1 + 40), v29, v31);
        MTLHashKey::~MTLHashKey(&v44);
      }
      uint64_t v32 = *(void *)(a1 + 120);
      uint64_t v33 = *(void **)(a1 + 40);
      uint64_t v34 = *(std::__shared_weak_count **)(a1 + 104);
      v35[0] = *(void **)(a1 + 96);
      v35[1] = &v34->__vftable;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      storeStitchingTrackingData(v32, v33, v35, v29);
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  MTLLibraryBuilder::releaseCacheEntry(v6, *(MTLLibraryContainer **)(a1 + 112));

  if ((v22 & 1) == 0) {
    dispatch_release(subrange);
  }
  if (v21) {
    (*(void (**)(MTLLibraryData *))(*(void *)v21 + 24))(v21);
  }
}

void sub_1828517DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, MTLHashKey *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

uint64_t newErrorFromCompilerLog(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 12)) {
    return 0;
  }
  uint64_t v1 = a1 + *(unsigned int *)(a1 + 8);
  if (*(unsigned char *)a1)
  {
    uint64_t v6 = (void *)[[NSString alloc] initWithUTF8String:v1];
    uint64_t v7 = newErrorWithWarningLog((uint64_t)v6);

    return v7;
  }
  else
  {
    uint64_t v2 = [NSString stringWithUTF8String:v1];
    if (!v2) {
      uint64_t v2 = [NSString stringWithCString:v1 encoding:1];
    }
    uint64_t v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v2 forKey:*MEMORY[0x1E4F28568]];
    id v4 = objc_alloc(MEMORY[0x1E4F28C58]);
    return [v4 initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v3];
  }
}

void ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke_3()
{
}

void sub_182851A08(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C4047F5CA44);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_56c81_ZTSNSt3__110shared_ptrINS_6vectorI21stitchedAirDescriptorNS_9allocatorIS2_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_56c81_ZTSNSt3__110shared_ptrINS_6vectorI21stitchedAirDescriptorNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *__copy_helper_block_e8_72c50_ZTSNSt3__110shared_ptrI22MultiLevelLibraryCacheEE96c81_ZTSNSt3__110shared_ptrINS_6vectorI21stitchedAirDescriptorNS_9allocatorIS2_EEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[13];
  result[12] = a2[12];
  result[13] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_72c50_ZTSNSt3__110shared_ptrI22MultiLevelLibraryCacheEE96c81_ZTSNSt3__110shared_ptrINS_6vectorI21stitchedAirDescriptorNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t MTLLibraryBuilder::newLibraryWithCIFilters(os_unfair_lock_s *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = [a2 count];
  long long v166 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  uint64_t v9 = 0;
  uint64_t v10 = [a2 countByEnumeratingWithState:&v166 objects:v172 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v167;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v167 != v11) {
          objc_enumerationMutation(a2);
        }
        v9 += objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v166 + 1) + 8 * i), "name"), "lengthOfBytesUsingEncoding:", 4)+ 1;
      }
      uint64_t v10 = [a2 countByEnumeratingWithState:&v166 objects:v172 count:16];
    }
    while (v10);
  }
  uint64_t v13 = 12 * v8;
  unint64_t v122 = a4;
  unsigned __int16 v118 = a1;
  if (v8)
  {
    int v14 = (uint64_t *)(a3 + 8);
    uint64_t v15 = v8;
    do
    {
      uint64_t v16 = *v14;
      v14 += 3;
      v13 += 12 * v16;
      --v15;
    }
    while (v15);
  }
  uint64_t v119 = v8;
  uint64_t v120 = a3;
  unsigned int v121 = v8;
  std::string __p = 0;
  unint64_t v163 = 0;
  unint64_t v165 = 0;
  unsigned int v160 = 0;
  int v161 = 0;
  int v162 = 0;
  __int16 v157 = 0;
  __int16 v158 = 0;
  __int16 v159 = 0;
  __int16 v154 = 0;
  __int16 v155 = 0;
  int v156 = 0;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  uint64_t v17 = [a2 countByEnumeratingWithState:&v150 objects:v171 count:16];
  if (v17)
  {
    uint64_t v18 = *(void *)v151;
LABEL_13:
    uint64_t v19 = 0;
    while (1)
    {
      if (*(void *)v151 != v18) {
        objc_enumerationMutation(a2);
      }
      uint64_t v20 = *(void **)(*((void *)&v150 + 1) + 8 * v19);
      uint64_t v21 = [v20 libraryData];
      uint64_t v22 = v21;
      uint64_t v23 = (char *)v163;
      if (v163 != __p)
      {
        while (*(void *)v23 != v21)
        {
          v23 += 8;
          if (v23 == __p)
          {
            uint64_t v23 = (char *)__p;
            break;
          }
        }
      }
      if (v23 == __p)
      {
        v125[0] = 0;
        uint64_t v137 = 0;
        int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *))(*(void *)v21 + 200))(v21, [v20 bitCodeOffset], objc_msgSend(v20, "bitCodeFileSize"), v125, &v137);
        int v28 = v27;
        if (v137) {
          char v29 = v27;
        }
        else {
          char v29 = 0;
        }
        if ((v29 & 1) == 0)
        {
          if (v122)
          {
            uint64_t v112 = [v20 name];
            if (v28) {
              int64_t v113 = @"invalid bitcode size 0 for function ";
            }
            else {
              int64_t v113 = @"unable to locate bitcode for function ";
            }
            uint64_t v114 = [(__CFString *)v113 stringByAppendingString:v112];
            uint64_t v115 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v114 forKey:*MEMORY[0x1E4F28568]];
            *unint64_t v122 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v115];
          }
          uint64_t v116 = 0;
          goto LABEL_155;
        }
        uint64_t v30 = (char *)__p;
        if ((unint64_t)__p >= v165)
        {
          int64_t v38 = ((unsigned char *)__p - (unsigned char *)v163) >> 3;
          if ((unint64_t)(v38 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v39 = (uint64_t)(v165 - (void)v163) >> 2;
          if (v39 <= v38 + 1) {
            unint64_t v39 = v38 + 1;
          }
          if (v165 - (unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          if (v40) {
            unint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v165, v40);
          }
          else {
            unint64_t v41 = 0;
          }
          uint64_t v45 = (uint64_t *)&v41[8 * v38];
          *uint64_t v45 = v22;
          __n128 v31 = v45 + 1;
          long long v46 = (char *)__p;
          uint64_t v47 = (char *)v163;
          if (__p != v163)
          {
            do
            {
              uint64_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *--uint64_t v45 = v48;
            }
            while (v46 != v47);
            long long v46 = (char *)v163;
          }
          unint64_t v163 = v45;
          std::string __p = v31;
          unint64_t v165 = (unint64_t)&v41[8 * v40];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *(void *)std::string __p = v22;
          __n128 v31 = v30 + 8;
        }
        std::string __p = v31;
        long long v49 = v161;
        if (v161 >= v162)
        {
          uint64_t v51 = (char *)v160;
          uint64_t v52 = (v161 - (unsigned char *)v160) >> 3;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
            goto LABEL_165;
          }
          uint64_t v54 = v162 - (unsigned char *)v160;
          if ((v162 - (unsigned char *)v160) >> 2 > v53) {
            unint64_t v53 = v54 >> 2;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            int64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v162, v55);
            uint64_t v51 = (char *)v160;
            long long v49 = v161;
          }
          else
          {
            int64_t v56 = 0;
          }
          uint64_t v57 = &v56[8 * v52];
          *(void *)uint64_t v57 = v125[0];
          long long v50 = v57 + 8;
          while (v49 != v51)
          {
            uint64_t v58 = *((void *)v49 - 1);
            v49 -= 8;
            *((void *)v57 - 1) = v58;
            v57 -= 8;
          }
          unsigned int v160 = v57;
          int v161 = v50;
          int v162 = &v56[8 * v55];
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          *(void *)int v161 = v125[0];
          long long v50 = v49 + 8;
        }
        int v161 = v50;
        uint64_t v59 = v158;
        if (v158 >= v159)
        {
          uint64_t v61 = (char *)v157;
          uint64_t v62 = (v158 - (unsigned char *)v157) >> 3;
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61) {
LABEL_165:
          }
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          uint64_t v64 = v159 - (unsigned char *)v157;
          if ((v159 - (unsigned char *)v157) >> 2 > v63) {
            unint64_t v63 = v64 >> 2;
          }
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65)
          {
            int v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v159, v65);
            uint64_t v61 = (char *)v157;
            uint64_t v59 = v158;
          }
          else
          {
            int v66 = 0;
          }
          uint64_t v67 = &v66[8 * v62];
          *(void *)uint64_t v67 = v137;
          int v60 = v67 + 8;
          while (v59 != v61)
          {
            uint64_t v68 = *((void *)v59 - 1);
            v59 -= 8;
            *((void *)v67 - 1) = v68;
            v67 -= 8;
          }
          __int16 v157 = v67;
          __int16 v158 = v60;
          __int16 v159 = &v66[8 * v65];
          if (v61) {
            operator delete(v61);
          }
        }
        else
        {
          *(void *)__int16 v158 = v137;
          int v60 = v59 + 8;
        }
        __int16 v158 = v60;
        int v69 = ((unint64_t)((unsigned char *)__p - (unsigned char *)v163) >> 3) - 1;
        uint64_t v70 = v155;
        if (v155 >= v156)
        {
          uint64_t v32 = (char *)v154;
          uint64_t v71 = (v155 - (unsigned char *)v154) >> 2;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v73 = v156 - (unsigned char *)v154;
          if ((v156 - (unsigned char *)v154) >> 1 > v72) {
            unint64_t v72 = v73 >> 1;
          }
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v72;
          }
          if (v36)
          {
            int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v156, v36);
            uint64_t v32 = (char *)v154;
            uint64_t v70 = v155;
          }
          else
          {
            int v37 = 0;
          }
          long long v42 = &v37[4 * v71];
          *(_DWORD *)long long v42 = v69;
          long long v43 = v42 + 4;
          while (v70 != v32)
          {
            int v74 = *((_DWORD *)v70 - 1);
            v70 -= 4;
            *((_DWORD *)v42 - 1) = v74;
            v42 -= 4;
          }
          goto LABEL_102;
        }
        *(_DWORD *)__int16 v155 = v69;
        uint64_t v26 = v70 + 4;
      }
      else
      {
        unint64_t v24 = (unint64_t)(v23 - (unsigned char *)v163) >> 3;
        BOOL v25 = v155;
        if (v155 >= v156)
        {
          uint64_t v32 = (char *)v154;
          uint64_t v33 = (v155 - (unsigned char *)v154) >> 2;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v35 = v156 - (unsigned char *)v154;
          if ((v156 - (unsigned char *)v154) >> 1 > v34) {
            unint64_t v34 = v35 >> 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v156, v36);
            uint64_t v32 = (char *)v154;
            BOOL v25 = v155;
          }
          else
          {
            int v37 = 0;
          }
          long long v42 = &v37[4 * v33];
          *(_DWORD *)long long v42 = v24;
          long long v43 = v42 + 4;
          while (v25 != v32)
          {
            int v44 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v42 - 1) = v44;
            v42 -= 4;
          }
LABEL_102:
          __int16 v154 = v42;
          __int16 v155 = v43;
          int v156 = &v37[4 * v36];
          if (v32) {
            operator delete(v32);
          }
          goto LABEL_104;
        }
        *(_DWORD *)__int16 v155 = v24;
        uint64_t v26 = v25 + 4;
      }
      long long v43 = v26;
LABEL_104:
      __int16 v155 = v43;
      if (++v19 == v17)
      {
        uint64_t v17 = [a2 countByEnumeratingWithState:&v150 objects:v171 count:16];
        if (v17) {
          goto LABEL_13;
        }
        break;
      }
    }
  }
  unint64_t v75 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v76 = (unint64_t)((unsigned char *)__p - (unsigned char *)v163) >> 3;
  uint64_t v123 = v75 + v13 + 27;
  size_t v77 = ((((unsigned char *)__p - (unsigned char *)v163) & 0x7FFFFFFF8) + v123) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v147 = 0;
  int v148 = 0;
  int v149 = 0;
  if (v76)
  {
    long long v78 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = ((unint64_t)((unsigned char *)__p - (unsigned char *)v163) >> 3);
    do
    {
      if (v78 >= v149)
      {
        long long v82 = (char *)v147;
        uint64_t v83 = (v78 - (unsigned char *)v147) >> 3;
        unint64_t v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v85 = v149 - (unsigned char *)v147;
        if ((v149 - (unsigned char *)v147) >> 2 > v84) {
          unint64_t v84 = v85 >> 2;
        }
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v84;
        }
        if (v86)
        {
          uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v149, v86);
          long long v82 = (char *)v147;
          long long v78 = v148;
        }
        else
        {
          uint64_t v87 = 0;
        }
        unint64_t v88 = (size_t *)&v87[8 * v83];
        *unint64_t v88 = v77;
        uint64_t v81 = (char *)(v88 + 1);
        while (v78 != v82)
        {
          size_t v89 = *((void *)v78 - 1);
          v78 -= 8;
          *--unint64_t v88 = v89;
        }
        unsigned int v147 = v88;
        int v148 = v81;
        int v149 = &v87[8 * v86];
        if (v82) {
          operator delete(v82);
        }
      }
      else
      {
        *(void *)long long v78 = v77;
        uint64_t v81 = v78 + 8;
      }
      int v148 = v81;
      v77 += (*((void *)v157 + v79++) + 7) & 0xFFFFFFFFFFFFFFF8;
      long long v78 = v81;
    }
    while (v79 != v80);
  }
  int v90 = _MTLCompilePerformanceStatisticsEnabled();
  int64_t v91 = malloc_type_calloc(v77, 1uLL, 0xC2F8ED7uLL);
  long long v92 = v91;
  *int64_t v91 = v121;
  v91[1] = v75 + 20;
  if (v90) {
    int v93 = 512;
  }
  else {
    int v93 = 0;
  }
  v91[2] = v76;
  v91[3] = v123 & 0xFFFFFFF8;
  v91[4] = v93;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  uint64_t v94 = [a2 countByEnumeratingWithState:&v143 objects:v170 count:16];
  if (v94)
  {
    int v95 = v92 + 5;
    uint64_t v96 = *(void *)v144;
    do
    {
      for (uint64_t j = 0; j != v94; ++j)
      {
        if (*(void *)v144 != v96) {
          objc_enumerationMutation(a2);
        }
        BOOL v98 = *(void **)(*((void *)&v143 + 1) + 8 * j);
        objc_msgSend((id)objc_msgSend(v98, "name"), "getCString:maxLength:encoding:", v95, v75, 4);
        int v95 = (_DWORD *)((char *)v95
                       + objc_msgSend((id)objc_msgSend(v98, "name"), "lengthOfBytesUsingEncoding:", 4)
                       + 1);
      }
      uint64_t v94 = [a2 countByEnumeratingWithState:&v143 objects:v170 count:16];
    }
    while (v94);
  }
  if (v121)
  {
    uint64_t v99 = 0;
    BOOL v100 = (_DWORD *)((char *)v92 + v92[1]);
    int v101 = v154;
    do
    {
      int v102 = (unsigned __int8 *)(v120 + 24 * v99);
      uint64_t v103 = *((void *)v102 + 1);
      *BOOL v100 = *v102;
      v100[1] = v101[v99];
      v100[2] = v103;
      v100 += 3;
      if ((int)v103 >= 1)
      {
        uint64_t v103 = v103;
        unint64_t v104 = (_OWORD *)(*((void *)v102 + 2) + 8);
        do
        {
          *BOOL v100 = *((void *)v104 - 1);
          int64x2_t v105 = *(int64x2_t *)v104;
          unint64_t v104 = (_OWORD *)((char *)v104 + 24);
          *(int32x2_t *)(v100 + 1) = vmovn_s64(v105);
          v100 += 3;
          --v103;
        }
        while (v103);
      }
      ++v99;
    }
    while (v99 != v119);
  }
  uint64_t v106 = (void **)v163;
  if (__p != v163)
  {
    unint64_t v107 = 0;
    uint64_t v108 = (_DWORD *)((char *)v92 + v92[3]);
    do
    {
      uint64_t v109 = *((void *)v147 + v107);
      *uint64_t v108 = v109;
      uint64_t v110 = *((void *)v157 + v107);
      v108[1] = *((void *)v157 + v107);
      (*(void (**)(void *, char *, void, uint64_t))(*v106[v107] + 208))(v106[v107], (char *)v92 + v109, *((void *)v160 + v107), v110);
      ++v107;
      uint64_t v106 = (void **)v163;
      v108 += 2;
    }
    while (v107 < ((unsigned char *)__p - (unsigned char *)v163) >> 3);
  }
  uint64_t v137 = 0;
  unint64_t v138 = &v137;
  uint64_t v139 = 0x3052000000;
  __int16 v140 = __Block_byref_object_copy__10;
  __int16 v141 = __Block_byref_object_dispose__10;
  uint64_t v142 = 0;
  uint64_t v131 = 0;
  unint64_t v132 = &v131;
  uint64_t v133 = 0x3052000000;
  unint64_t v134 = __Block_byref_object_copy__10;
  uint64_t v135 = __Block_byref_object_dispose__10;
  uint64_t v136 = 0;
  uint64_t v130 = 0;
  v125[0] = v92;
  v125[1] = v77;
  long long v126 = 5uLL;
  uint64_t v127 = 0;
  uint64_t v128 = 0x100000000;
  long long v129 = 0uLL;
  v124[0] = MEMORY[0x1E4F143A8];
  v124[1] = 3221225472;
  v124[2] = ___ZN17MTLLibraryBuilder23newLibraryWithCIFiltersEPK7NSArrayPK29MTLImageFilterFunctionInfoSPIPP7NSError_block_invoke;
  v124[3] = &unk_1E5221178;
  v124[4] = &v137;
  v124[5] = &v131;
  MTLLibraryBuilder::newLibraryWithRequestData(v118, (uint64_t)v125, (uint64_t)v124);
  int64_t v111 = (void *)v132[5];
  if (v122) {
    *unint64_t v122 = v111;
  }
  else {

  }
  uint64_t v116 = v138[5];
  _Block_object_dispose(&v131, 8);
  _Block_object_dispose(&v137, 8);
  if (v147)
  {
    int v148 = (char *)v147;
    operator delete(v147);
  }
LABEL_155:
  if (v154)
  {
    __int16 v155 = (char *)v154;
    operator delete(v154);
  }
  if (v157)
  {
    __int16 v158 = (char *)v157;
    operator delete(v157);
  }
  if (v160)
  {
    int v161 = (char *)v160;
    operator delete(v160);
  }
  if (v163)
  {
    std::string __p = v163;
    operator delete(v163);
  }
  return v116;
}

void sub_18285267C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a65) {
    operator delete(a65);
  }
  if (a68) {
    operator delete(a68);
  }
  if (a71) {
    operator delete(a71);
  }
  unint64_t v72 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v72;
    operator delete(v72);
  }
  _Unwind_Resume(a1);
}

id ___ZN17MTLLibraryBuilder23newLibraryWithCIFiltersEPK7NSArrayPK29MTLImageFilterFunctionInfoSPIPP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = a2;
  id v5 = a2;
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

uint64_t MTLLibraryBuilder::newDowngradedLibrary(os_unfair_lock_s *this, MTLCompilerFunctionRequest *a2, int a3, NSError **a4)
{
  uint64_t v27 = 0;
  int v28 = &v27;
  uint64_t v29 = 0x3052000000;
  uint64_t v30 = __Block_byref_object_copy__10;
  __n128 v31 = __Block_byref_object_dispose__10;
  uint64_t v32 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x3052000000;
  unint64_t v24 = __Block_byref_object_copy__10;
  BOOL v25 = __Block_byref_object_dispose__10;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  downgradeRequestData(&v19, &v20, a2, a3);
  long long v13 = 0u;
  int v16 = 1;
  uint64_t v18 = 0;
  v12[0] = v19;
  v12[1] = (void *)v20;
  LODWORD(v13) = 7;
  int v14 = a2;
  int v15 = a3;
  long long v17 = 0uLL;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  id v11[2] = ___ZN17MTLLibraryBuilder20newDowngradedLibraryEPK26MTLCompilerFunctionRequestjPP7NSError_block_invoke;
  void v11[3] = &unk_1E5221178;
  v11[4] = &v27;
  v11[5] = &v21;
  MTLLibraryBuilder::newLibraryWithRequestData(this, (uint64_t)v12, (uint64_t)v11);
  free(v12[0]);
  unsigned int v8 = (void *)v22[5];
  if (a4) {
    *a4 = (NSError *)v8;
  }
  else {

  }
  uint64_t v9 = v28[5];
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);
  return v9;
}

void sub_182852948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

char *downgradeRequestData(void **a1, unint64_t *a2, MTLCompilerFunctionRequest *a3, int a4)
{
  if (a3->var17) {
    unint64_t var11 = 0;
  }
  else {
    unint64_t var11 = a3->var11;
  }
  id result = (char *)malloc_type_calloc(var11 + 12, 1uLL, 0xCE6B7F6AuLL);
  uint64_t v10 = result;
  if ((a4 - 32023) >= 2) {
    int v11 = 0x20000;
  }
  else {
    int v11 = 131079;
  }
  *(_DWORD *)id result = v11;
  *((_DWORD *)result + 1) = a4;
  result[8] = result[8] & 0xFC | ((a3->var6 & 0x1000) != 0) | (2 * ((~a3->var6 & 0x81000) == 0));
  if (var11) {
    id result = (char *)MTLCompilerFunctionRequest::copyLinkData(a3, result + 12);
  }
  *a1 = v10;
  *a2 = var11 + 12;
  return result;
}

id ___ZN17MTLLibraryBuilder20newDowngradedLibraryEPK26MTLCompilerFunctionRequestjPP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  if (a2) {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = a2;
  }
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_1828530A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182853540(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18285366C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10B0C40DA8BEAA3);
  _Unwind_Resume(a1);
}

char *MTLCompilerFunctionRequest::setBinaryArchiveID(MTLCompilerFunctionRequest *this, const char *__s)
{
  var20 = this->var20;
  if (var20) {
    free(var20);
  }
  size_t v5 = strlen(__s);
  uint64_t v6 = (char *)malloc_type_malloc(v5 + 1, 0x69DE694FuLL);
  this->var20 = v6;

  return strcpy(v6, __s);
}

uint64_t __copy_helper_block_e8_88c51_ZTSNSt3__110shared_ptrI23MultiLevelFunctionCacheEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96);
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(result + 96) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_88c51_ZTSNSt3__110shared_ptrI23MultiLevelFunctionCacheEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 96);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_182853E1C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182853FE0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void removeShaderFunctionCache()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  long long v2 = 0u;
  long long v3 = 0u;
  addOrRemoveShaderFunctionCache(1, &v0);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1828543B4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18285468C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, MTLHashKey *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_18285539C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  a39 = (void **)&a27;
  std::vector<-[MTLCompiler generateMachOWithID:binaryEntries:machOSpecializedData:machOType:Path:platform:bitcodeList:completionHandler:]::BinaryItem>::__destroy_vector::operator()[abi:ne180100](&a39);
  _Unwind_Resume(a1);
}

BOOL MTLCompilerMachORequest::CreateMachOFile(MTLCompilerMachORequest *this, const char *a2)
{
  if (!a2) {
    return 0;
  }
  int v4 = open(a2, 1538, 420);
  *((_DWORD *)this + 7) = v4;
  if (v4 == -1)
  {
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (result)
    {
      MTLCompilerMachORequest::CreateMachOFile((uint64_t)a2);
      return 0;
    }
  }
  else
  {
    size_t v5 = (void *)*((void *)this + 4);
    if (v5) {
      free(v5);
    }
    size_t v6 = strlen(a2);
    uint64_t v7 = (char *)malloc_type_malloc(v6 + 1, 0xFF59817uLL);
    *((void *)this + 4) = v7;
    strcpy(v7, a2);
    return 1;
  }
  return result;
}

void sub_182855A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void MTLFunctionToolList::~MTLFunctionToolList(MTLFunctionToolList *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void sub_182855ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1828563C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

MTLHashKey *__Block_byref_object_copy__1294(uint64_t a1, uint64_t a2)
{
  return MTLHashKey::MTLHashKey((MTLHashKey *)(a1 + 48), (const MTLHashKey *)(a2 + 48));
}

void __Block_byref_object_dispose__1295(uint64_t a1)
{
}

void *__copy_helper_block_e8_88c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE104c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE120c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE136c148_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypeP12MTLBinaryKeyNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[12];
  result[11] = a2[11];
  result[12] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[14];
  result[13] = a2[13];
  result[14] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[16];
  result[15] = a2[15];
  result[16] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[18];
  result[17] = a2[17];
  result[18] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_88c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE104c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE120c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE136c148_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypeP12MTLBinaryKeyNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[18];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[14];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[12];
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1828571EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)(v58 - 224));

  std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  if (a56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a56);
  }
  _Unwind_Resume(a1);
}

void sub_182857598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_80c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE96c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE112c148_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypeP12MTLBinaryKeyNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[11];
  result[10] = a2[10];
  result[11] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[13];
  result[12] = a2[12];
  result[13] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[15];
  result[14] = a2[14];
  result[15] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_80c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE96c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE112c148_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypeP12MTLBinaryKeyNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[15];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[13];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[11];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_182857B38(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, MTLHashKey *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  _Block_object_dispose(&a10, 8);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void sub_182857DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, MTLHashKey *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a18);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_18285809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1316(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_182858428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void _MTLAddCompilerServiceCompileTimeStats(void *a1, dispatch_data_t data)
{
  size_t v14 = 0;
  buffer_ptr = 0;
  dispatch_data_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v14);
  unint64_t v4 = v14;
  if (v14 <= 3) {
    goto LABEL_23;
  }
  uint64_t v5 = v3;
  uint64_t v6 = (char *)buffer_ptr;
  uint64_t v7 = *(unsigned int *)buffer_ptr;
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v14 - 8;
    uint64_t v10 = 12 * v7;
    while (v8 + 4 < v4 && v9 < 0xFFFFFFFFFFFFFFFCLL)
    {
      switch(*(_DWORD *)&v6[v8 + 4])
      {
        case 0:
          uint64_t v12 = MTLLibraryPerformanceKeyTotalFrontendTotalTime;
          break;
        case 1:
          uint64_t v12 = MTLLibraryPerformanceKeyFunctionSpecialization;
          break;
        case 2:
          uint64_t v12 = (__CFString *)MTLLibraryPerformanceKeyCoreImageSPI;
          break;
        case 3:
        case 6:
          uint64_t v12 = MTLCompileTimeStatisticsKeyTotal[0];
          break;
        case 4:
          long long v13 = MTLCompileTimeStatisticsKeyFrameworkTotal;
          goto LABEL_18;
        case 5:
          long long v13 = MTLCompileTimeStatisticsKeyBackendCompilerBuildRequest;
          goto LABEL_18;
        case 7:
          long long v13 = &MTLCompileTimeStatisticsKeyFrameworkInstrumentation;
LABEL_18:
          uint64_t v12 = *v13;
          break;
        default:
          uint64_t v12 = @"Invalid key";
          break;
      }
      if (v8 + 8 >= v4 || v9 <= 7) {
        break;
      }
      objc_msgSend(a1, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", *(void *)&v6[v8 + 8]), v12);
      v8 += 12;
      v9 -= 12;
      if (v10 == v8) {
        goto LABEL_22;
      }
    }
LABEL_23:
    abort();
  }
LABEL_22:
  dispatch_release(v5);
}

void sub_182858CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

id reportErrorMessage(id result, __CFString *a2, uint64_t a3, void *a4)
{
  if (result)
  {
    id v6 = result;
    if (a2) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = @"Compilation failed";
    }
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v7 forKey:*MEMORY[0x1E4F28568]];
    __n128 result = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"CompilerError" code:v6 userInfo:v8];
    if (a3)
    {
      unint64_t v9 = *(uint64_t (**)(uint64_t, void, void, id))(a3 + 16);
      return (id)v9(a3, 0, 0, result);
    }
    else if (a4)
    {
      *a4 = result;
    }
  }
  return result;
}

NSObject *newSerializedVertexDataForReflection(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ([a1 vertexDescriptor])
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    unint64_t v9 = dispatch_data_create_map(a2, (const void **)&buffer_ptr, &size_ptr);
    if ((*((unsigned char *)buffer_ptr + 8) & 2) != 0)
    {
      dispatch_retain(a2);
    }
    else
    {
      uint64_t v11 = 0;
      a2 = [a1 newSerializedVertexDataWithFlags:a4 | 0x1C options:a5 error:&v11];
    }
    dispatch_release(v9);
  }
  else
  {
    dispatch_retain(a2);
  }
  return a2;
}

void *newRenderPipeline(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, NSObject *a12, void *a13, unint64_t a14, uint64_t a15, MTLRenderPipelineReflectionInternal **a16, NSMutableDictionary *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  uint64_t v26 = a20;
  v67[0] = 0;
  if (a6) {
    uint64_t v27 = [a11 newRenderPipelineWithDescriptor:a13 objectVariant:a9 meshVariant:a6 fragmentVariant:a2 errorMessage:v67];
  }
  else {
    uint64_t v27 = [a11 newRenderPipelineWithDescriptor:a13 vertexVariant:a4 fragmentVariant:a2 errorMessage:v67];
  }
  int v28 = (void *)v27;
  if (!v27)
  {
    reportErrorMessage((id)2, v67[0], a20, a21);
    return v28;
  }
  uint64_t v58 = a8;
  uint64_t v61 = a4;
  char v29 = MTLGetCompilerOptions(a11, a14, a15, 0, 0);
  char v30 = v29;
  if (a14 & 0x40000) != 0 || (__n128 v31 = 0, (v29))
  {
    if (a6) {
      uint64_t v32 = [a11 pipelineFlagsWithObjectVariant:a9 meshVariant:a6 fragmentVariant:a2];
    }
    else {
      uint64_t v32 = [a11 pipelineFlagsWithVertexVariant:v61 fragmentVariant:a2];
    }
    uint64_t v34 = v32;
    uint64_t v35 = 0;
    if (a1 && (v30 & 1) != 0) {
      uint64_t v35 = [*(id *)(a1 + 432) objectForKey:&stru_1ECAC84A8];
    }
    uint64_t v57 = v35;
    if (!a5)
    {
      if (v30) {
        uint64_t v37 = [*(id *)(a3 + 432) objectForKey:&stru_1ECAC84A8];
      }
      else {
        uint64_t v37 = 0;
      }
      long long v46 = newSerializedVertexDataForReflection(a13, a12, v33, a15, a14);
      __n128 v31 = [[MTLRenderPipelineReflectionInternal alloc] initWithVertexData:v37 fragmentData:v57 serializedVertexDescriptor:v46 device:a11 options:a14 flags:v34];
      dispatch_release(v46);
      if ((a14 & 0x440000) == 0)
      {
        long long v42 = a9;
        goto LABEL_48;
      }
      long long v43 = (void *)[a11 pipelinePerformanceStatisticsWithVertexVariant:v61 fragmentVariant:a2 vertexCompileTimeOutput:a19 fragmentCompileTimeOutput:a18];
      if ((a14 & 0x400000) != 0)
      {
        uint64_t v44 = a20;
        char v45 = 1;
        long long v42 = a9;
        goto LABEL_38;
      }
      long long v42 = a9;
      goto LABEL_47;
    }
    uint64_t v56 = v34;
    if (a8 && (v30 & 1) != 0)
    {
      uint64_t v36 = [*(id *)(a8 + 432) objectForKey:&stru_1ECAC84A8];
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      if ((v30 & 1) == 0)
      {
LABEL_25:
        __n128 v31 = [[MTLRenderPipelineReflectionInternal alloc] initWithObjectData:v38 meshData:v39 fragmentData:v57 device:a11 options:a14 flags:v56];
        uint64_t v26 = a20;
        goto LABEL_26;
      }
    }
    uint64_t v40 = objc_msgSend((id)objc_msgSend(a13, "gpuCompilerSPIOptions"), "description");
    if (v40) {
      unint64_t v41 = (__CFString *)v40;
    }
    else {
      unint64_t v41 = &stru_1ECAC84A8;
    }
    uint64_t v39 = [*(id *)(a5 + 432) objectForKey:v41];
    uint64_t v38 = v36;
    goto LABEL_25;
  }
LABEL_26:
  long long v42 = a9;
  if ((a14 & 0x440000) == 0) {
    goto LABEL_48;
  }
  if (a5)
  {
    long long v43 = (void *)[a11 pipelinePerformanceStatisticsWithObjectVariant:a9 meshVariant:a6 fragmentVariant:a2 objectCompileTimeOutput:a10 meshCompileTimeOutput:a7 fragmentCompileTimeOutput:a18];
    if ((a14 & 0x400000) != 0)
    {
      uint64_t v44 = v26;
      char v45 = 0;
LABEL_38:
      if (a3) {
        addDriverCompilerPerformanceData(a17, (NSMutableDictionary *)[v43 objectForKey:MTLPipelinePerformanceKeyVertexShader[0]], MTLFunctionTypeVertex);
      }
      if (a1) {
        addDriverCompilerPerformanceData(a17, (NSMutableDictionary *)[v43 objectForKey:MTLPipelinePerformanceKeyFragmentShader[0]], MTLFunctionTypeFragment);
      }
      if ((v45 & 1) == 0) {
        addDriverCompilerPerformanceData(a17, (NSMutableDictionary *)[v43 objectForKey:MTLPipelinePerformanceKeyMeshShader[0]], MTLFunctionTypeMesh);
      }
      if (v58) {
        addDriverCompilerPerformanceData(a17, (NSMutableDictionary *)[v43 objectForKey:MTLPipelinePerformanceKeyObjectShader[0]], MTLFunctionTypeObject);
      }
      uint64_t v26 = v44;
    }
  }
  else
  {
    long long v43 = (void *)[a11 pipelinePerformanceStatisticsWithVertexVariant:v61 fragmentVariant:a2 vertexCompileTimeOutput:a19 fragmentCompileTimeOutput:a18];
    if ((a14 & 0x400000) != 0)
    {
      uint64_t v44 = v26;
      char v45 = 1;
      goto LABEL_38;
    }
  }
LABEL_47:
  [(MTLRenderPipelineReflectionInternal *)v31 setPerformanceStatistics:v43];
LABEL_48:
  if ((a14 & 0x200000) != 0)
  {
    unint64_t v65 = 0;
    int v66 = 0;
    unint64_t v64 = 0;
    unsigned int v63 = 0;
    if (a6) {
      [a11 getConstantSamplersBitmasks:&v66 uniqueIdentifiers:&v65 constantSamplerCount:&v64 stride:&v63 forObjectVariant:v42 meshVariant:a6 fragmentVariant:a2];
    }
    else {
      [a11 getConstantSamplersBitmasks:&v66 uniqueIdentifiers:&v65 constantSamplerCount:&v64 stride:&v63 forVertexVariant:v61 fragmentVariant:a2];
    }
    if (v64)
    {
      -[MTLRenderPipelineReflectionInternal setConstantSamplerDescriptorsFromBitmasks:stride:count:](v31, "setConstantSamplerDescriptorsFromBitmasks:stride:count:", v66, v63);
      id v47 = objc_alloc(MEMORY[0x1E4F1CA48]);
      uint64_t v48 = (void *)[v47 initWithCapacity:v64];
      if (v64)
      {
        for (unint64_t i = 0; i < v64; ++i)
          objc_msgSend(v48, "setObject:atIndexedSubscript:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", v65[i]), i);
      }
      [(MTLRenderPipelineReflectionInternal *)v31 setConstantSamplerUniqueIdentifiers:v48];

      free(v66);
      free(v65);
    }
  }
  if ((a14 & 0x1000000) != 0)
  {
    if (v61)
    {
      long long v50 = -[MTLDebugInstrumentationData initWithData:]([MTLDebugInstrumentationData alloc], "initWithData:", [v61 debugInstrumentationData]);
      [v28 setVertexDebugInstrumentationData:v50];
    }
    if (a2)
    {
      uint64_t v51 = -[MTLDebugInstrumentationData initWithData:]([MTLDebugInstrumentationData alloc], "initWithData:", [a2 debugInstrumentationData]);
      [v28 setFragmentDebugInstrumentationData:v51];
    }
    if (v42)
    {
      uint64_t v52 = -[MTLDebugInstrumentationData initWithData:]([MTLDebugInstrumentationData alloc], "initWithData:", [v42 debugInstrumentationData]);
      [v28 setObjectDebugInstrumentationData:v52];
    }
    if (a6)
    {
      unint64_t v53 = -[MTLDebugInstrumentationData initWithData:]([MTLDebugInstrumentationData alloc], "initWithData:", [a6 debugInstrumentationData]);
      [v28 setMeshDebugInstrumentationData:v53];
    }
  }
  if (v26)
  {
    (*(void (**)(uint64_t, void *, MTLRenderPipelineReflectionInternal *, void))(v26 + 16))(v26, v28, v31, 0);

    return 0;
  }
  else if (a16)
  {
    uint64_t v54 = v31;
    *a16 = v31;
  }
  else if (v31)
  {
  }
  return v28;
}

uint64_t addDriverCompilerPerformanceData(NSMutableDictionary *a1, NSMutableDictionary *a2, MTLFunctionType a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3 <= MTLFunctionTypeObject && ((1 << a3) & 0x186) != 0)
  {
    uint64_t v5 = MTLPipelinePerformanceKeyVertexShader;
    if (a3 != MTLFunctionTypeVertex) {
      uint64_t v5 = MTLPipelinePerformanceKeyFragmentShader;
    }
    if (a3 == MTLFunctionTypeObject) {
      uint64_t v5 = MTLPipelinePerformanceKeyObjectShader;
    }
    if (a3 == MTLFunctionTypeMesh) {
      uint64_t v5 = MTLPipelinePerformanceKeyMeshShader;
    }
    id v6 = *v5;
    uint64_t v7 = (NSMutableDictionary *)[(NSMutableDictionary *)a1 objectForKey:*v5];
    if (!v7)
    {
      uint64_t v7 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
      [(NSMutableDictionary *)a1 setObject:v7 forKey:v6];
    }
  }
  else
  {
    uint64_t v7 = a1;
  }
  uint64_t result = objc_msgSend((id)-[NSMutableDictionary objectForKey:](v7, "objectForKey:", MTLCompileTimeStatisticsKeyCachedFunction[0]), "BOOLValue");
  if ((result & 1) == 0)
  {
    unint64_t v9 = (void *)[(NSMutableDictionary *)a2 objectForKey:MTLPipelinePerformanceKeyCompileTimeStatistics[0]];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t result = [v9 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (result)
    {
      uint64_t v10 = result;
      uint64_t v11 = *(void *)v14;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v14 != v11) {
            objc_enumerationMutation(v9);
          }
          -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", [v9 objectForKey:*(void *)(*((void *)&v13 + 1) + 8 * v12)], *(void *)(*((void *)&v13 + 1) + 8 * v12));
          ++v12;
        }
        while (v10 != v12);
        uint64_t result = [v9 countByEnumeratingWithState:&v13 objects:v17 count:16];
        uint64_t v10 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_182859B24(_Unwind_Exception *a1)
{
  RequiredFunctionKeys::~RequiredFunctionKeys(v1);
  _Unwind_Resume(a1);
}

void sub_18285A190(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18285A8E8(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x258], 8);
  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18285AA74(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  long long v13 = *(NSObject **)(v11 - 88);
  if (v13) {
    dispatch_release(v13);
  }
  _Unwind_Resume(a1);
}

void sub_18285ACB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

dispatch_data_t VariantEntry::newSerializedKeyWithAdditionalData(VariantEntry *this, void *a2, size_t a3)
{
  unint64_t var1 = this->var1;
  unint64_t var2 = this->var2;
  if (a2 && a3)
  {
    size_t v8 = var1 + a3 + var2;
    unint64_t v9 = (char *)malloc_type_malloc(v8, 0xC2EBA60BuLL);
    memcpy(v9, this->var0, this->var1);
    memcpy(&v9[this->var1], a2, a3);
    memcpy(&v9[this->var1 + a3], &this->var0[this->var1], this->var2);
    dispatch_data_t v10 = dispatch_data_create(v9, v8, 0, 0);
    free(v9);
    return v10;
  }
  else
  {
    var0 = this->var0;
    return dispatch_data_create(var0, var2 + var1, 0, 0);
  }
}

uint64_t setLinkedFunctionsForRequest(MTLCompileFunctionRequestData *a1, MTLLinkedFunctions *a2)
{
  if (a2)
  {
    [(MTLCompileFunctionRequestData *)a1 setVisibleFunctions:[(MTLLinkedFunctions *)a2 functions]];
    [(MTLCompileFunctionRequestData *)a1 setVisibleFunctionGroups:[(MTLLinkedFunctions *)a2 groups]];
    unint64_t v4 = [(MTLLinkedFunctions *)a2 privateFunctions];
  }
  else
  {
    [(MTLCompileFunctionRequestData *)a1 setVisibleFunctions:0];
    [(MTLCompileFunctionRequestData *)a1 setVisibleFunctionGroups:0];
    unint64_t v4 = 0;
  }

  return [(MTLCompileFunctionRequestData *)a1 setPrivateVisibleFunctions:v4];
}

void VariantEntry::insertVariant(uint64_t a1, void *a2, uint64_t a3, void *a4, NSObject *a5)
{
  dispatch_data_t v10 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  if (!*(void *)(a1 + 48))
  {
    if (a2)
    {
      *(void *)(a1 + 48) = a2;
      id v11 = a2;
    }
    *(void *)(a1 + 56) = a3;

    *(void *)(a1 + 64) = [a4 copy];
    uint64_t v12 = *(NSObject **)(a1 + 72);
    if (v12) {
      dispatch_release(v12);
    }
    *(void *)(a1 + 72) = a5;
    if (a5) {
      dispatch_retain(a5);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

  os_unfair_lock_unlock(v10);
}

void sub_18285B11C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18285B230(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void VariantEntry::waitOrNotify(uint64_t a1, int a2, dispatch_queue_t queue, void (**block)(dispatch_block_t))
{
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (a2)
  {
    dispatch_group_notify(v5, queue, block);
  }
  else
  {
    dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    id v6 = block[2];
    v6(block);
  }
}

void sub_18285B994(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18285BB24(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  long long v13 = *(NSObject **)(v11 - 88);
  if (v13) {
    dispatch_release(v13);
  }
  _Unwind_Resume(a1);
}

void sub_18285BD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_18285C0A0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18285C8DC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Block_object_dispose(&STACK[0x308], 8);
  _Block_object_dispose(&STACK[0x328], 8);
  _Block_object_dispose(&STACK[0x348], 8);
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18285CA94(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  long long v13 = *(NSObject **)(v11 - 88);
  if (v13) {
    dispatch_release(v13);
  }
  _Unwind_Resume(a1);
}

void sub_18285CCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_18285D014(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void initTimebaseInfo(void)
{
  if (initTimebaseInfo(void)::onceToken != -1) {
    dispatch_once(&initTimebaseInfo(void)::onceToken, &__block_literal_global_1340);
  }
}

double ___Z16initTimebaseInfov_block_invoke()
{
  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  double result = (double)v0 / (double)v1;
  gMachTimeToNS = *(void *)&result;
  return result;
}

void sub_18285D31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_18285DFA4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x370], 8);
  if (STACK[0x3C0]) {
    dispatch_release((dispatch_object_t)STACK[0x3C0]);
  }
  _Block_object_dispose(&STACK[0x3D8], 8);
  _Block_object_dispose(&STACK[0x400], 8);
  _Block_object_dispose(&STACK[0x420], 8);
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1350(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  __n128 result = a2[5];
  a1[6].n128_u64[0] = a2[6].n128_u64[0];
  a1[5] = result;
  return result;
}

void __Block_byref_object_dispose__1351(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 80);
  if (v1) {
    dispatch_release(v1);
  }
}

void sub_18285E178(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_18285E6F4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18285EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a64, 8);
  if (STACK[0x208]) {
    dispatch_release((dispatch_object_t)STACK[0x208]);
  }
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose((const void *)(v64 - 232), 8);
  _Block_object_dispose((const void *)(v64 - 200), 8);
  _Block_object_dispose((const void *)(v64 - 168), 8);
  _Block_object_dispose((const void *)(v64 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18285F0F0(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_18285F544(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18285F700(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1828601F8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1828603D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryData::copyData(MTLLibraryData *this)
{
  size_t v2 = (*(uint64_t (**)(MTLLibraryData *))(*(void *)this + 328))(this);
  dispatch_data_t v3 = malloc_type_malloc(v2, 0x41931ACEuLL);
  (*(void (**)(MTLLibraryData *, void))(*(void *)this + 312))(this, 0);
  if ((*(uint64_t (**)(MTLLibraryData *, void *, size_t))(*(void *)this + 320))(this, v3, v2) == v2)
  {
    id v4 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    return [v4 initWithBytesNoCopy:v3 length:v2];
  }
  else
  {
    free(v3);
    return 0;
  }
}

uint64_t MTLCachedLibraryData::variableList(MTLCachedLibraryData *this)
{
  return *((void *)this + 15);
}

uint64_t MTLCachedLibraryData::installName(MTLCachedLibraryData *this)
{
  return *((void *)this + 12);
}

uint64_t MTLCachedLibraryData::libraryIdentifier(MTLCachedLibraryData *this)
{
  return *((void *)this + 17);
}

uint64_t MTLLibraryDataWithArchive::airVersion(MTLLibraryDataWithArchive *this)
{
  return *((unsigned int *)this + 155);
}

uint64_t MTLLibraryData::getArchiveData(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryDataWithArchive::isStub(MTLLibraryDataWithArchive *this)
{
  return *((unsigned __int8 *)this + 162) >> 7;
}

uint64_t MTLLibraryData::isProxy(MTLLibraryData *this)
{
  return 0;
}

BOOL MTLLibraryDataWithArchive::isFromSource(MTLLibraryDataWithArchive *this)
{
  int v1 = *((_DWORD *)this + 156);
  return v1 == 13 || v1 == 3;
}

void MTLLibraryDataWithArchive::setStitchedLibraryTrackingData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v3;
  *(void *)(a1 + 432) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t MTLLibraryData::libraryUUID(MTLLibraryData *this)
{
  return (uint64_t)this + 8;
}

uint64_t MTLLibraryData::externFunctionNames(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::variableList(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::importedSymbols(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::importedLibraries(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::specializationHashes(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::stitchingHashes(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::installName(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::libraryIdentifier(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::airVersion(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::newBitCodeWithHash()
{
  return 0;
}

uint64_t MTLLibraryData::newMetalScript(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::newFunctionReflectionData(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::newFunction()
{
  return 0;
}

{
  return 0;
}

uint64_t MTLLibraryData::newSpecializedFunction()
{
  return 0;
}

uint64_t MTLLibraryData::newStitchedFunction()
{
  return 0;
}

void MTLLibraryData::parseDynamicLibraryBitCode(MTLLibraryData *this, unint64_t *a2, unint64_t *a3)
{
  *a2 = 0;
  *a3 = 0;
}

void MTLLibraryData::parseDynamicLibraryReflection(MTLLibraryData *this, unint64_t *a2, unint64_t *a3, NSError **a4)
{
  *a2 = 0;
  *a3 = 0;
}

uint64_t MTLLibraryData::getFunctionNameAndAliasWithHash()
{
  return 0;
}

uint64_t MTLLibraryData::isStub(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLProxyLibraryData::isProxy(MTLProxyLibraryData *this)
{
  return 1;
}

uint64_t MTLLibraryData::isFromSource(MTLLibraryData *this)
{
  return 0;
}

void MTLLibraryData::getInputListForStitchedFunction(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t MTLLibraryData::getType(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLProxyLibraryData::libraryPath(MTLProxyLibraryData *this)
{
  return 0;
}

void MTLLibraryDataWithSource::~MTLLibraryDataWithSource(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&unk_1ECAC6240;
  dispatch_release(this[23]);
  dispatch_release(this[22]);

  MTLCachedLibraryData::~MTLCachedLibraryData((MTLCachedLibraryData *)this);
}

{
  uint64_t vars8;

  *this = (dispatch_object_t)&unk_1ECAC6240;
  dispatch_release(this[23]);
  dispatch_release(this[22]);
  MTLCachedLibraryData::~MTLCachedLibraryData((MTLCachedLibraryData *)this);

  JUMPOUT(0x18530C140);
}

uint64_t MTLCachedLibraryData::functionNames(MTLCachedLibraryData *this)
{
  return *((void *)this + 16);
}

uint64_t MTLLibraryData::functionHashes(MTLLibraryData *this)
{
  return 0;
}

BOOL MTLLibraryDataWithSource::isFromSource(MTLLibraryDataWithSource *this)
{
  int v1 = *((_DWORD *)this + 52);
  return v1 == 13 || v1 == 3;
}

uint64_t MTLLibraryData::libraryPath(MTLLibraryData *this)
{
  return 0;
}

BOOL MTLLibraryDataWithSource::setPosition(MTLLibraryDataWithSource *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 20);
  if (v2 >= a2) {
    *((void *)this + 21) = a2;
  }
  return v2 >= a2;
}

size_t MTLLibraryDataWithSource::readBytes(MTLLibraryDataWithSource *this, void *__dst, size_t a3)
{
  uint64_t v3 = *((void *)this + 21);
  if (v3 + a3 > *((void *)this + 20)) {
    return 0;
  }
  size_t v4 = a3;
  memcpy(__dst, (const void *)(*((void *)this + 19) + v3), a3);
  *((void *)this + 21) += v4;
  return v4;
}

uint64_t MTLLibraryDataWithSource::getFileSize(MTLLibraryDataWithSource *this)
{
  return *((void *)this + 20);
}

void MTLLibraryDataWithGLIR::~MTLLibraryDataWithGLIR(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&unk_1ECAC5EC0;
  dispatch_release(this[16]);
  dispatch_release(this[15]);

  MTLLibraryData::~MTLLibraryData((MTLLibraryData *)this);
}

{
  uint64_t vars8;

  *this = (dispatch_object_t)&unk_1ECAC5EC0;
  dispatch_release(this[16]);
  dispatch_release(this[15]);
  MTLLibraryData::~MTLLibraryData((MTLLibraryData *)this);

  JUMPOUT(0x18530C140);
}

uint64_t MTLLibraryDataWithGLIR::functionNames(MTLLibraryDataWithGLIR *this)
{
  return 0;
}

BOOL MTLLibraryDataWithGLIR::setPosition(MTLLibraryDataWithGLIR *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 13);
  if (v2 >= a2) {
    *((void *)this + 14) = a2;
  }
  return v2 >= a2;
}

size_t MTLLibraryDataWithGLIR::readBytes(MTLLibraryDataWithGLIR *this, void *__dst, size_t a3)
{
  uint64_t v3 = *((void *)this + 14);
  if (v3 + a3 > *((void *)this + 13)) {
    return 0;
  }
  size_t v4 = a3;
  memcpy(__dst, (const void *)(*((void *)this + 12) + v3), a3);
  *((void *)this + 14) += v4;
  return v4;
}

uint64_t MTLLibraryDataWithGLIR::getFileSize(MTLLibraryDataWithGLIR *this)
{
  return *((void *)this + 13);
}

uint64_t MTLLibraryData::functionNames(MTLLibraryData *this)
{
  return 0;
}

uint64_t ___ZL31getForcedMTLCompilerLLVMVersionv_block_invoke()
{
  uint64_t result = MTLGetEnvDefault("MTL_FORCE_MTLCOMPILER_LLVM_VERSION", 0);
  getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersiouint64_t n = result;
  return result;
}

uint64_t MTLLibraryDataWithGLIR::MTLLibraryDataWithGLIR(uint64_t a1, dispatch_object_t object)
{
  *(void *)a1 = &unk_1ECAC5530;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1ECAC5EC0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = object;
  dispatch_retain(object);
  buffer_ptr = 0;
  *(void *)(a1 + 128) = dispatch_data_create_map(object, (const void **)&buffer_ptr, (size_t *)(a1 + 104));
  *(void *)(a1 + 96) = buffer_ptr;
  return a1;
}

MTLStructType *initStructType(const char *a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  if (v3 >= a3)
  {
    MEMORY[0x1F4188790](a1);
    unint64_t v9 = (char *)&v25;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = a1[v3];
    *a2 = v3 + 1;
    MEMORY[0x1F4188790](a1);
    unint64_t v9 = (char *)&v26 - v8;
    if (v7)
    {
      uint64_t v10 = 0;
      unint64_t v26 = a3;
      do
      {
        uint64_t v11 = *a2;
        if (v11 >= a3)
        {
LABEL_9:
          long long v15 = 0;
          *a2 = v11;
        }
        else
        {
          uint64_t v12 = *a2;
          unsigned int v13 = *a2;
          while (1)
          {
            int v14 = a1[v12];
            uint64_t v12 = v13 + 1;
            if (!v14) {
              break;
            }
            ++v13;
            if (a3 == v12)
            {
              LODWORD(v11) = a3;
              goto LABEL_9;
            }
          }
          *a2 = v12;
          long long v15 = &a1[v11];
        }
        if (v15) {
          long long v16 = v15;
        }
        else {
          long long v16 = "";
        }
        uint64_t v17 = objc_msgSend(NSString, "stringWithUTF8String:", v16, v26, v27);
        uint64_t v18 = *a2;
        if (v18 >= a3)
        {
          MTLDataType v19 = MTLDataTypeNone;
        }
        else
        {
          MTLDataType v19 = (unint64_t)a1[v18];
          LODWORD(v18) = v18 + 1;
          *a2 = v18;
        }
        uint64_t v20 = v18;
        unint64_t v21 = v18 + 4;
        if (v21 <= v26)
        {
          uint64_t v22 = *(unsigned int *)&a1[v20];
          *a2 = v21;
        }
        else
        {
          uint64_t v22 = 0;
        }
        uint64_t v23 = (void *)typeFromBuffer(v19, a1, a2, a3);
        *(void *)&v9[8 * v10] = [[MTLStructMemberInternal alloc] initWithName:v17 offset:0 dataType:v19 pixelFormat:0 aluType:0 indirectArgumentIndex:v22 render_target:0xFFFFFFFFLL raster_order_group:0xFFFFFFFFLL details:v23];

        ++v10;
      }
      while (v10 != v7);
    }
  }
  return [[MTLStructType alloc] initWithMembers:v9 count:v7];
}

uint64_t LibraryWithData::getArchiveData(LibraryWithData *this)
{
  return *((void *)this + 84);
}

MTLHashKey *__copy_helper_block_e8_56c17_ZTSK10MTLHashKey(uint64_t a1, uint64_t a2)
{
  return MTLHashKey::MTLHashKey((MTLHashKey *)(a1 + 56), (const MTLHashKey *)(a2 + 56));
}

void __destroy_helper_block_e8_56c17_ZTSK10MTLHashKey(uint64_t a1)
{
}

void ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke_1815(uint64_t a1, uint64_t a2, dispatch_data_t data, uint64_t a4)
{
  if (a2 || !data)
  {
    if (a4)
    {
      unsigned int v13 = (__CFString *)[NSString stringWithUTF8String:a4];
      if (!v13) {
        unsigned int v13 = (__CFString *)[NSString stringWithCString:a4 encoding:1];
      }
    }
    else
    {
      unsigned int v13 = @"empty error message";
    }
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v13 forKey:*MEMORY[0x1E4F28568]];
    id v19 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v20 = 3;
    goto LABEL_26;
  }
  size_t size_ptr = 0;
  buffer_ptr = 0;
  dispatch_data_t v7 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  if (!v7)
  {
    uint64_t v17 = [NSString stringWithUTF8String:"Compiler returned an empty reply."];
    if (!v17) {
      uint64_t v17 = [NSString stringWithCString:"Compiler returned an empty reply." encoding:1];
    }
    uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v17 forKey:*MEMORY[0x1E4F28568]];
    id v19 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v20 = 2;
LABEL_26:
    [v19 initWithDomain:@"MTLLibraryErrorDomain" code:v20 userInfo:v18];
    dispatch_data_t subrange = 0;
    goto LABEL_27;
  }
  uint64_t v8 = v7;
  unint64_t v9 = (unsigned int *)buffer_ptr;
  if (*((_DWORD *)buffer_ptr + 13))
  {
    if (*((_DWORD *)buffer_ptr + 12))
    {
      int v10 = _MTLCompilePerformanceStatisticsEnabled();
      unint64_t v9 = (unsigned int *)buffer_ptr;
      if (v10)
      {
        processCompileTimeStats((uint64_t)buffer_ptr, 0, 0);
        unint64_t v9 = (unsigned int *)buffer_ptr;
      }
    }
  }
  if ((*(unsigned char *)v9 & 1) != 0 && (size_t v11 = v9[11], v11))
  {
    dispatch_data_t subrange = dispatch_data_create_subrange(data, v9[10], v11);
    unint64_t v9 = (unsigned int *)buffer_ptr;
  }
  else
  {
    dispatch_data_t subrange = 0;
  }
  newErrorFromCompilerLog((uint64_t)v9);
  if (!*(unsigned char *)(a1 + 144))
  {
    size_t v15 = size_ptr;
    int v14 = buffer_ptr;
    long long v16 = *(std::__shared_weak_count **)(a1 + 56);
    v21[0] = *(void *)(a1 + 48);
    v21[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    addReplyToCompilerCache((uint64_t)v14, v15, v21, a1 + 64);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  dispatch_release(v8);
LABEL_27:
  (*(void (**)(void, dispatch_data_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), subrange);
}

void sub_182861598(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t addReplyToCompilerCache(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a1;
  if ((*(unsigned char *)a1 & 2) != 0)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 44);
    uint64_t v5 = a1 + *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v6 = a2 - (*(_DWORD *)(a1 + 52) + *(_DWORD *)(a1 + 100));
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 48) = 0;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 48))(*a3, a4, v5, v6);
}

MTLHashKey *__copy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE64c17_ZTSK10MTLHashKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return MTLHashKey::MTLHashKey((MTLHashKey *)(a1 + 64), (const MTLHashKey *)(a2 + 64));
}

void sub_18286165C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE64c17_ZTSK10MTLHashKey(uint64_t a1)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)(a1 + 64));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

BOOL processArchiveLibrary(uint64_t a1, dispatch_data_t data, uint64_t a3, void *a4, void *a5, uint64_t *a6, void *a7, uint64_t a8)
{
  dispatch_data_t subrange = data;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    size_t v14 = *(unsigned int *)(a3 + 44);
    if (!v14)
    {
      BOOL v23 = 0;
      *a6 = 0;
      return v23;
    }
    uint64_t v27 = a6;
    dispatch_data_t subrange = dispatch_data_create_subrange(data, *(unsigned int *)(a3 + 40), v14);
  }
  else
  {
    uint64_t v27 = a6;
  }
  dispatch_object_t object = subrange;
  size_t v15 = MTLLibraryBuilder::newLibraryWithData(*(void *)(a1 + 424), (_MTLDevice *)a1, subrange, 0, a7, (uint64_t)a6, (uint64_t)a7, a8);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v16 = [(_MTLLibrary *)v15 functionNames];
  uint64_t v17 = [(NSArray *)v16 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v29 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void *)(*((void *)&v28 + 1) + 8 * i);
        objc_msgSend(a5, "addObject:", v21, object);
        if (a4)
        {
          id v22 = [(_MTLLibrary *)v15 newFunctionWithName:v21];
          [a4 setObject:v22 forKey:v21];
        }
      }
      uint64_t v18 = [(NSArray *)v16 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v18);
  }
  BOOL v23 = v15 != 0;
  if (v27 && v15)
  {
    uint64_t v24 = [(_MTLLibrary *)v15 libraryData];
    (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
    *uint64_t v27 = v24;
  }

  if (a3) {
    dispatch_release(object);
  }
  return v23;
}

__n128 __Block_byref_object_copy__1831(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t SerializedLibraryInfo::getLibraryInstallName(SerializedLibraryInfo *this)
{
  uint64_t v1 = this;
  if (*((char *)this + 23) < 0)
  {
    if (*((void *)this + 1)) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!*((unsigned char *)this + 23)) {
    return 0;
  }
LABEL_3:
  id v2 = [NSString alloc];
  if (*((char *)v1 + 23) < 0) {
    uint64_t v1 = *(SerializedLibraryInfo **)v1;
  }

  return [v2 initWithUTF8String:v1];
}

void ___ZL24processSerializedLibraryPU27objcproto16OS_dispatch_data8NSObjectPU19objcproto9MTLDevice11objc_object19MTLBuildRequestTypeRK10MTLHashKeybP36MTLBuildLibraryFromSourceReplyHeader14MTLLibraryTypeP19NSMutableDictionaryP14NSMutableArrayPP14MTLLibraryDataPP7NSError17MTLCompilerOption_block_invoke()
{
}

void sub_1828619A4(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C40502CF9C9);
  _Unwind_Resume(a1);
}

void SerializedLibraryInfo::~SerializedLibraryInfo(void **this)
{
  id v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  id v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  id v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  id v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void SerializedLibraryInfo::SerializedLibraryInfo(SerializedLibraryInfo *this, unsigned int *a2, uint64_t a3)
{
  *((_OWORD *)this + 3) = 0u;
  uint64_t v6 = (std::vector<std::string> *)((char *)this + 48);
  dispatch_data_t v7 = (std::vector<std::string> *)((char *)this + 24);
  uint64_t v8 = (std::vector<std::string> *)((char *)this + 72);
  *((_OWORD *)this + 6) = 0u;
  unint64_t v9 = (std::vector<std::string> *)((char *)this + 96);
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2[15])
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, (char *)(a3 + a2[14]));
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
    *(std::vector<std::string> *)this = v14;
  }
  unint64_t v10 = a2[17];
  if (v10)
  {
    SerializedLibraryInfo::deserializeStringArray((const char *)(a3 + a2[16]), v10, &v14);
    std::vector<std::string>::__vdeallocate(v7);
    *((std::vector<std::string> *)this + 1) = v14;
    memset(&v14, 0, sizeof(v14));
    size_t v15 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  unint64_t v11 = a2[19];
  if (v11)
  {
    SerializedLibraryInfo::deserializeStringArray((const char *)(a3 + a2[18]), v11, &v14);
    std::vector<std::string>::__vdeallocate(v6);
    *((std::vector<std::string> *)this + 2) = v14;
    memset(&v14, 0, sizeof(v14));
    size_t v15 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  unint64_t v12 = a2[21];
  if (v12)
  {
    SerializedLibraryInfo::deserializeStringArray((const char *)(a3 + a2[20]), v12, &v14);
    std::vector<std::string>::__vdeallocate(v8);
    *((std::vector<std::string> *)this + 3) = v14;
    memset(&v14, 0, sizeof(v14));
    size_t v15 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  unint64_t v13 = a2[23];
  if (v13)
  {
    SerializedLibraryInfo::deserializeStringArray((const char *)(a3 + a2[22]), v13, &v14);
    std::vector<std::string>::__vdeallocate(v9);
    *((std::vector<std::string> *)this + 4) = v14;
    memset(&v14, 0, sizeof(v14));
    size_t v15 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
}

void sub_182861C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

void SerializedLibraryInfo::deserializeStringArray(const char *a1@<X1>, unint64_t a2@<X2>, std::vector<std::string> *a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  if (a2 > 3)
  {
    std::vector<std::string>::size_type v15 = *(unsigned int *)a1;
    std::vector<std::string>::reserve(a3, v15);
    if (!v15) {
      return;
    }
    uint64_t v16 = 0;
    uint64_t v17 = (char *)(a1 + 4);
    size_t v18 = a2 - 4;
    uint64_t v19 = MEMORY[0x1E4F14500];
    std::vector<std::string>::size_type v39 = v15;
    while (1)
    {
      size_t v20 = strnlen(v17, v18);
      if (v20 && v20 < v18)
      {
        std::string::basic_string[abi:ne180100](&__dst, v17, v20);
        std::vector<std::string>::pointer end = a3->__end_;
        if (end >= a3->__end_cap_.__value_)
        {
          uint64_t v35 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, (long long *)&__dst);
        }
        else
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(a3->__end_, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v22 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            end->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
          }
          uint64_t v35 = (uint64_t)&end[1];
          a3->__end_ = end + 1;
        }
        a3->__end_ = (std::vector<std::string>::pointer)v35;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        v17 += size + 1;
        v18 += ~size;
        goto LABEL_47;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__dst.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v16 + 1;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v15;
        _os_log_error_impl(&dword_1826F6000, v19, OS_LOG_TYPE_ERROR, "Compiler deserialization error, tried to deserialize %zu out of %u strings, but ran out of data, or into an empty string.", (uint8_t *)&__dst, 0x12u);
      }
      memset(&__dst, 0, sizeof(__dst));
      std::vector<std::string>::pointer begin = a3->__begin_;
      if (a3->__end_ == a3->__begin_)
      {
        char v34 = 0;
      }
      else
      {
        uint64_t v38 = v17;
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        do
        {
          size_t v26 = v18;
          p_BOOL data = (const void **)&begin[v24].__r_.__value_.__l.__data_;
          size_t v28 = HIBYTE(begin[v24].__r_.__value_.__r.__words[2]);
          if ((v28 & 0x80u) == 0) {
            size_t v29 = v28;
          }
          else {
            size_t v29 = (size_t)p_data[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v29 + 1);
          if ((v41 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (long long *)__p;
          }
          if (v29)
          {
            if (*((char *)p_data + 23) >= 0) {
              long long v31 = p_data;
            }
            else {
              long long v31 = *p_data;
            }
            memmove(p_p, v31, v29);
          }
          *(_WORD *)((char *)p_p + v29) = 32;
          if ((v41 & 0x80u) == 0) {
            uint64_t v32 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v32 = (const std::string::value_type *)__p;
          }
          if ((v41 & 0x80u) == 0) {
            std::string::size_type v33 = v41;
          }
          else {
            std::string::size_type v33 = *((void *)&__p + 1);
          }
          std::string::append(&__dst, v32, v33);
          size_t v18 = v26;
          if ((char)v41 < 0) {
            operator delete((void *)__p);
          }
          ++v25;
          std::vector<std::string>::pointer begin = a3->__begin_;
          ++v24;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)a3->__end_ - (char *)a3->__begin_) >> 3) > v25);
        char v34 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        uint64_t v17 = v38;
        uint64_t v19 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        break;
      }
      if (v34 < 0) {
        goto LABEL_40;
      }
LABEL_47:
      ++v16;
      LODWORD(v15) = v39;
      if (v16 == v39) {
        return;
      }
    }
    p_dst = &__dst;
    if (v34 < 0) {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = p_dst;
    _os_log_error_impl(&dword_1826F6000, v19, OS_LOG_TYPE_ERROR, "Current string list: %s", (uint8_t *)&__p, 0xCu);
    if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_47;
    }
LABEL_40:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_47;
  }
  BOOL v5 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (v5) {
    SerializedLibraryInfo::deserializeStringArray(v5, v6, v7, v8, v9, v10, v11, v12);
  }
}

void sub_182861FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void *SerializedLibraryInfo::createArray(uint64_t **a1)
{
  if (a1[1] == *a1) {
    return 0;
  }
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1)];
  long long v3 = *a1;
  size_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      id v5 = [NSString alloc];
      uint64_t v6 = v3;
      if (*((char *)v3 + 23) < 0) {
        uint64_t v6 = (uint64_t *)*v3;
      }
      uint64_t v7 = [v5 initWithUTF8String:v6];
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        [v2 addObject:v7];
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  return v2;
}

uint64_t MTLLibraryDataWithSource::MTLLibraryDataWithSource(uint64_t a1, uint64_t a2, long long *a3, NSObject *a4, void *a5, uint64_t a6, uint64_t a7, int a8)
{
  *(void *)a1 = &unk_1ECAC5530;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  long long v13 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v13;
  *(void *)a1 = &unk_1ECAC5B90;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = a2;
  MTLCachedLibraryData::swapLibraryInfo((void *)a1, a5);
  *(void *)a1 = &unk_1ECAC6240;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a4;
  dispatch_retain(a4);
  buffer_ptr = 0;
  dispatch_data_t map = dispatch_data_create_map(a4, (const void **)&buffer_ptr, (size_t *)(a1 + 160));
  *(void *)(a1 + 152) = buffer_ptr;
  *(void *)(a1 + 184) = map;
  *(void *)(a1 + 192) = a6;
  *(void *)(a1 + 200) = a7;
  *(_DWORD *)(a1 + 208) = a8;
  return a1;
}

void ___ZL25getCompilerConnectionHosti_block_invoke()
{
}

void ___ZL25getCompilerConnectionHosti_block_invoke_2()
{
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 4;
      unint64_t v7 = bswap64(*(a2 - 4));
      unint64_t v8 = bswap64(*a1);
      if (v7 == v8
        && (unint64_t v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      if (v9 < 0)
      {
        long long v33 = *(_OWORD *)a1;
        long long v32 = *((_OWORD *)a1 + 1);
        long long v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)uint64_t v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      uint64_t v24 = a1 + 4;
      unint64_t v25 = a1 + 8;
      size_t v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      unint64_t v28 = *(a2 - 4);
      uint64_t v27 = a2 - 4;
      unint64_t v29 = bswap64(v28);
      unint64_t v30 = bswap64(a1[12]);
      if (v29 == v30
        && (unint64_t v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        int v31 = 0;
      }
      else if (v29 < v30)
      {
        int v31 = -1;
      }
      else
      {
        int v31 = 1;
      }
      if (v31 < 0)
      {
        long long v36 = *(_OWORD *)v26;
        long long v35 = *((_OWORD *)a1 + 7);
        long long v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)size_t v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)uint64_t v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        unint64_t v38 = bswap64(*v26);
        unint64_t v39 = bswap64(*v25);
        if (v38 != v39) {
          goto LABEL_54;
        }
        unint64_t v38 = bswap64(a1[13]);
        unint64_t v39 = bswap64(a1[9]);
        if (v38 == v39
          && (unint64_t v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (unint64_t v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          int v40 = 0;
        }
        else
        {
LABEL_54:
          int v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          long long v42 = *(_OWORD *)v25;
          long long v41 = *((_OWORD *)a1 + 5);
          long long v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)size_t v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          unint64_t v44 = bswap64(*v25);
          unint64_t v45 = bswap64(*v24);
          if (v44 != v45) {
            goto LABEL_64;
          }
          unint64_t v44 = bswap64(a1[9]);
          unint64_t v45 = bswap64(a1[5]);
          if (v44 == v45
            && (unint64_t v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (unint64_t v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            int v46 = 0;
          }
          else
          {
LABEL_64:
            int v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            long long v48 = *(_OWORD *)v24;
            long long v47 = *((_OWORD *)a1 + 3);
            long long v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)unint64_t v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            unint64_t v50 = bswap64(a1[4]);
            unint64_t v51 = bswap64(*a1);
            if (v50 != v51) {
              goto LABEL_73;
            }
            unint64_t v50 = bswap64(a1[5]);
            unint64_t v51 = bswap64(a1[1]);
            if (v50 == v51
              && (unint64_t v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (unint64_t v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              int v52 = 0;
            }
            else
            {
LABEL_73:
              int v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              long long v54 = *(_OWORD *)a1;
              long long v53 = *((_OWORD *)a1 + 1);
              long long v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)uint64_t v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      uint64_t v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    unint64_t v14 = bswap64(*v11);
    unint64_t v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), unint64_t v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), unint64_t v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), unint64_t v15 = bswap64(v10[3]), v14 != v15))
    {
      int v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        long long v56 = *(_OWORD *)v11;
        long long v57 = *((_OWORD *)v11 + 1);
        uint64_t v17 = v12;
        while (1)
        {
          size_t v18 = (char *)a1 + v17;
          long long v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64) {
            break;
          }
          unint64_t v20 = bswap64(v56);
          unint64_t v21 = bswap64(*((void *)v18 + 4));
          if (v20 == v21
            && (unint64_t v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((void *)v18 + 5)), v20 == v21)
            && (unint64_t v20 = bswap64(v57), v21 = bswap64(*((void *)v18 + 6)), v20 == v21)
            && (unint64_t v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((void *)v18 + 7)), v20 == v21))
          {
            int v22 = 0;
          }
          else if (v20 < v21)
          {
            int v22 = -1;
          }
          else
          {
            int v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            BOOL v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        BOOL v23 = a1;
LABEL_30:
        *(_OWORD *)BOOL v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8) {
          return v11 + 4 == a2;
        }
      }
    }
    uint64_t v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

void std::__shared_ptr_emplace<StitchedLibraryTrackingData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC47D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<StitchedLibraryTrackingData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC47D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

uint64_t std::__shared_ptr_emplace<StitchedLibraryTrackingData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void StitchedLibraryTrackingData::~StitchedLibraryTrackingData(StitchedLibraryTrackingData *this)
{
  StitchedLibraryTrackingData::~StitchedLibraryTrackingData(this);

  JUMPOUT(0x18530C140);
}

{
  void *v2;
  NSObject **v3;
  NSObject **v4;
  NSObject *v5;

  *(void *)this = &unk_1ECAC43A8;
  id v2 = (void *)*((void *)this + 1);
  if (v2) {

  }
  long long v3 = (NSObject **)*((void *)this + 2);
  uint64_t v4 = (NSObject **)*((void *)this + 3);
  if (v3 != v4)
  {
    do
    {
      id v5 = *v3++;
      dispatch_release(v5);
    }
    while (v3 != v4);
    long long v3 = (NSObject **)*((void *)this + 2);
  }
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

char *std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__assign_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v9;
    long long v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t MTLCompilerFunctionRequest::copyLinkData(MTLCompilerFunctionRequest *this, void *a2)
{
  if (!a2) {
    return 0;
  }
  if (!this->var11) {
    return 0;
  }
  uint64_t result = (uint64_t)this->var2;
  if (result)
  {
    size_t v6 = 0;
    buffer_ptr = 0;
    id v5 = dispatch_data_create_map((dispatch_data_t)result, (const void **)&buffer_ptr, &v6);
    memcpy(a2, (char *)buffer_ptr + v6 - this->var11, this->var11);
    dispatch_release(v5);
    return 1;
  }
  return result;
}

void std::__shared_ptr_pointer<MTLCompilerCache *,std::shared_ptr<MTLCompilerCache>::__shared_ptr_default_delete<MTLCompilerCache,MTLCompilerCache>,std::allocator<MTLCompilerCache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

uint64_t std::__shared_ptr_pointer<MTLCompilerCache *,std::shared_ptr<MTLCompilerCache>::__shared_ptr_default_delete<MTLCompilerCache,MTLCompilerCache>,std::allocator<MTLCompilerCache>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MTLCompilerCache *,std::shared_ptr<MTLCompilerCache>::__shared_ptr_default_delete<MTLCompilerCache,MTLCompilerCache>,std::allocator<MTLCompilerCache>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      size_t v6 = std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__remove_node_pointer(a1, v4);
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

void MTLCompilerMachORequest::~MTLCompilerMachORequest(MTLCompilerMachORequest *this)
{
  MTLCompilerMachORequest::~MTLCompilerMachORequest(this);

  JUMPOUT(0x18530C140);
}

{
  void *v2;
  int v3;
  NSObject *v4;

  *(void *)this = &unk_1ECAC6080;
  id v2 = (void *)*((void *)this + 4);
  if (v2) {
    free(v2);
  }
  long long v3 = *((_DWORD *)this + 7);
  if (v3 != -1) {
    close(v3);
  }
  *(void *)this = &unk_1ECAC5A78;
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    dispatch_release(v4);
  }
}

uint64_t ___ZL14useRelaxedMathv_block_invoke()
{
  uint64_t result = MTLGetEnvDefault("MTL_REPLACE_FAST_MATH_WITH_RELAXED_MATH", 0);
  if (result) {
    useRelaxedMath(void)::useRlxMath = 1;
  }
  return result;
}

uint64_t std::unordered_map<std::string,FunctionHashFactory::hashFactoryMask>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FunctionHashFactory::hashFactoryMask> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_182862D6C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FunctionHashFactory::hashFactoryMask> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2))return i; {
        }
          }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>>>::__construct_node_hash<std::pair<std::string const,FunctionHashFactory::hashFactoryMask> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_182862FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>>>::__construct_node_hash<std::pair<std::string const,FunctionHashFactory::hashFactoryMask> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_182863090(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    id v2 = result + 4;
    if (result + 4 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = bswap64(v4[4]);
        unint64_t v7 = bswap64(*v4);
        if (v6 != v7
          || (unint64_t v6 = bswap64(v5[1]), v7 = bswap64(v4[1]), v6 != v7)
          || (unint64_t v6 = bswap64(v5[2]), v7 = bswap64(v4[2]), v6 != v7)
          || (unint64_t v6 = bswap64(v5[3]), v7 = bswap64(v4[3]), v6 != v7))
        {
          int v8 = v6 < v7 ? -1 : 1;
          if (v8 < 0)
          {
            long long v16 = *(_OWORD *)v5;
            long long v17 = *((_OWORD *)v5 + 1);
            uint64_t v9 = v3;
            while (1)
            {
              unint64_t v10 = (char *)result + v9;
              long long v11 = *(_OWORD *)((char *)result + v9 + 16);
              *((_OWORD *)v10 + 2) = *(_OWORD *)((char *)result + v9);
              *((_OWORD *)v10 + 3) = v11;
              if (!v9) {
                break;
              }
              unint64_t v12 = bswap64(v16);
              unint64_t v13 = bswap64(*((void *)v10 - 4));
              if (v12 == v13
                && (unint64_t v12 = bswap64(*((unint64_t *)&v16 + 1)), v13 = bswap64(*((void *)v10 - 3)), v12 == v13)
                && (unint64_t v12 = bswap64(v17), v13 = bswap64(*((void *)v10 - 2)), v12 == v13)
                && (unint64_t v12 = bswap64(*((unint64_t *)&v17 + 1)), v13 = bswap64(*((void *)v10 - 1)), v12 == v13))
              {
                int v14 = 0;
              }
              else if (v12 < v13)
              {
                int v14 = -1;
              }
              else
              {
                int v14 = 1;
              }
              v9 -= 32;
              if ((v14 & 0x80000000) == 0)
              {
                unint64_t v15 = (unint64_t *)((char *)result + v9 + 32);
                goto LABEL_25;
              }
            }
            unint64_t v15 = result;
LABEL_25:
            *(_OWORD *)unint64_t v15 = v16;
            *((_OWORD *)v15 + 1) = v17;
          }
        }
        id v2 = v5 + 4;
        v3 += 32;
        uint64_t v4 = v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    id v2 = result + 4;
    if (result + 4 != a2)
    {
      uint64_t v3 = result - 4;
      do
      {
        uint64_t v4 = v2;
        unint64_t v5 = bswap64(*v2);
        unint64_t v6 = bswap64(*result);
        if (v5 != v6
          || (v5 = bswap64(v4[1]), unint64_t v6 = bswap64(result[1]), v5 != v6)
          || (v5 = bswap64(v4[2]), unint64_t v6 = bswap64(result[2]), v5 != v6)
          || (v5 = bswap64(v4[3]), unint64_t v6 = bswap64(result[3]), v5 != v6))
        {
          int v7 = v5 < v6 ? -1 : 1;
          if (v7 < 0)
          {
            long long v13 = *(_OWORD *)v4;
            long long v14 = *((_OWORD *)v4 + 1);
            int v8 = v3;
            do
            {
              long long v9 = *((_OWORD *)v8 + 3);
              *((_OWORD *)v8 + 4) = *((_OWORD *)v8 + 2);
              *((_OWORD *)v8 + 5) = v9;
              unint64_t v10 = bswap64(v13);
              unint64_t v11 = bswap64(*v8);
              if (v10 == v11
                && (unint64_t v10 = bswap64(*((unint64_t *)&v13 + 1)), v11 = bswap64(v8[1]), v10 == v11)
                && (unint64_t v10 = bswap64(v14), v11 = bswap64(v8[2]), v10 == v11)
                && (unint64_t v10 = bswap64(*((unint64_t *)&v14 + 1)), v11 = bswap64(v8[3]), v10 == v11))
              {
                int v12 = 0;
              }
              else if (v10 < v11)
              {
                int v12 = -1;
              }
              else
              {
                int v12 = 1;
              }
              v8 -= 4;
            }
            while (v12 < 0);
            *((_OWORD *)v8 + 4) = v13;
            *((_OWORD *)v8 + 5) = v14;
          }
        }
        id v2 = v4 + 4;
        v3 += 4;
        uint64_t result = v4;
      }
      while (v4 + 4 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = bswap64(*a2);
  unint64_t v4 = bswap64(*a1);
  if (v3 == v4
    && (unint64_t v3 = bswap64(a2[1]), v4 = bswap64(a1[1]), v3 == v4)
    && (unint64_t v3 = bswap64(a2[2]), v4 = bswap64(a1[2]), v3 == v4)
    && (unint64_t v3 = bswap64(a2[3]), v4 = bswap64(a1[3]), v3 == v4))
  {
    int v5 = 0;
  }
  else if (v3 < v4)
  {
    int v5 = -1;
  }
  else
  {
    int v5 = 1;
  }
  unint64_t v6 = bswap64(*a3);
  unint64_t v7 = bswap64(*a2);
  if (v6 == v7
    && (unint64_t v6 = bswap64(a3[1]), v7 = bswap64(a2[1]), v6 == v7)
    && (unint64_t v6 = bswap64(a3[2]), v7 = bswap64(a2[2]), v6 == v7)
    && (unint64_t v6 = bswap64(a3[3]), v7 = bswap64(a2[3]), v6 == v7))
  {
    int v8 = 0;
    if (v5 < 0) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v6 < v7) {
      int v8 = -1;
    }
    else {
      int v8 = 1;
    }
    if (v5 < 0)
    {
LABEL_14:
      if (v8 < 0)
      {
        long long v29 = *(_OWORD *)a1;
        long long v28 = *((_OWORD *)a1 + 1);
        long long v30 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *((_OWORD *)a1 + 1) = v30;
        *(_OWORD *)a3 = v29;
        *((_OWORD *)a3 + 1) = v28;
      }
      else
      {
        long long v10 = *(_OWORD *)a1;
        long long v9 = *((_OWORD *)a1 + 1);
        long long v11 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v11;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v9;
        unint64_t v12 = bswap64(*a3);
        unint64_t v13 = bswap64(*a2);
        if (v12 == v13
          && (unint64_t v12 = bswap64(a3[1]), v13 = bswap64(a2[1]), v12 == v13)
          && (unint64_t v12 = bswap64(a3[2]), v13 = bswap64(a2[2]), v12 == v13)
          && (unint64_t v12 = bswap64(a3[3]), v13 = bswap64(a2[3]), v12 == v13))
        {
          int v14 = 0;
        }
        else if (v12 < v13)
        {
          int v14 = -1;
        }
        else
        {
          int v14 = 1;
        }
        if (v14 < 0)
        {
          long long v23 = *(_OWORD *)a2;
          long long v22 = *((_OWORD *)a2 + 1);
          long long v24 = *((_OWORD *)a3 + 1);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *((_OWORD *)a2 + 1) = v24;
          *(_OWORD *)a3 = v23;
          *((_OWORD *)a3 + 1) = v22;
          return 2;
        }
      }
      return 1;
    }
  }
  if ((v8 & 0x80000000) == 0) {
    return 0;
  }
  long long v17 = *(_OWORD *)a2;
  long long v16 = *((_OWORD *)a2 + 1);
  long long v18 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *((_OWORD *)a2 + 1) = v18;
  *(_OWORD *)a3 = v17;
  *((_OWORD *)a3 + 1) = v16;
  unint64_t v19 = bswap64(*a2);
  unint64_t v20 = bswap64(*a1);
  if (v19 == v20
    && (unint64_t v19 = bswap64(a2[1]), v20 = bswap64(a1[1]), v19 == v20)
    && (unint64_t v19 = bswap64(a2[2]), v20 = bswap64(a1[2]), v19 == v20)
    && (unint64_t v19 = bswap64(a2[3]), v20 = bswap64(a1[3]), v19 == v20))
  {
    int v21 = 0;
  }
  else if (v19 < v20)
  {
    int v21 = -1;
  }
  else
  {
    int v21 = 1;
  }
  if (v21 < 0)
  {
    long long v26 = *(_OWORD *)a1;
    long long v25 = *((_OWORD *)a1 + 1);
    long long v27 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v27;
    *(_OWORD *)a2 = v26;
    *((_OWORD *)a2 + 1) = v25;
    return 2;
  }
  return 1;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &>(unint64_t *a1, _OWORD *a2)
{
  long long v34 = *(_OWORD *)a1;
  long long v35 = *((_OWORD *)a1 + 1);
  unint64_t v2 = bswap64(*a1);
  unint64_t v3 = bswap64(*((void *)a2 - 4));
  if (v2 == v3
    && (unint64_t v2 = bswap64(*((unint64_t *)&v34 + 1)), v3 = bswap64(*((void *)a2 - 3)), v2 == v3)
    && (unint64_t v2 = bswap64(v35), v3 = bswap64(*((void *)a2 - 2)), v2 == v3)
    && (unint64_t v2 = bswap64(*((unint64_t *)&v35 + 1)), v3 = bswap64(*((void *)a2 - 1)), v2 == v3)
    || (v2 < v3 ? (int v10 = -1) : (int v10 = 1), (v10 & 0x80000000) == 0))
  {
    long long v11 = a1 + 4;
    do
    {
      int v5 = v11;
      if (v11 >= (unint64_t *)a2) {
        break;
      }
      unint64_t v12 = bswap64(v34);
      unint64_t v13 = bswap64(*v5);
      if (v12 != v13) {
        goto LABEL_28;
      }
      unint64_t v12 = bswap64(*((unint64_t *)&v34 + 1));
      unint64_t v13 = bswap64(v5[1]);
      if (v12 == v13
        && (unint64_t v12 = bswap64(v35), v13 = bswap64(v5[2]), v12 == v13)
        && (unint64_t v12 = bswap64(*((unint64_t *)&v35 + 1)), v13 = bswap64(v5[3]), v12 == v13))
      {
        int v14 = 0;
      }
      else
      {
LABEL_28:
        int v14 = v12 < v13 ? -1 : 1;
      }
      long long v11 = v5 + 4;
    }
    while ((v14 & 0x80000000) == 0);
  }
  else
  {
    unint64_t v4 = a1;
    int v5 = a1;
    do
    {
      unint64_t v6 = v5[4];
      v5 += 4;
      unint64_t v7 = bswap64(v34);
      unint64_t v8 = bswap64(v6);
      if (v7 == v8
        && (unint64_t v7 = bswap64(*((unint64_t *)&v34 + 1)), v8 = bswap64(v4[5]), v7 == v8)
        && (unint64_t v7 = bswap64(v35), v8 = bswap64(v4[6]), v7 == v8)
        && (unint64_t v7 = bswap64(*((unint64_t *)&v35 + 1)), v8 = bswap64(v4[7]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      unint64_t v4 = v5;
    }
    while ((v9 & 0x80000000) == 0);
  }
  if (v5 >= (unint64_t *)a2)
  {
    unint64_t v15 = a2;
  }
  else
  {
    unint64_t v15 = a2;
    do
    {
      unint64_t v16 = *((void *)v15 - 4);
      v15 -= 2;
      unint64_t v17 = bswap64(v34);
      unint64_t v18 = bswap64(v16);
      if (v17 == v18
        && (v17 = bswap64(*((unint64_t *)&v34 + 1)), unint64_t v18 = bswap64(*((void *)a2 - 3)), v17 == v18)
        && (v17 = bswap64(v35), unint64_t v18 = bswap64(*((void *)a2 - 2)), v17 == v18)
        && (v17 = bswap64(*((unint64_t *)&v35 + 1)), unint64_t v18 = bswap64(*((void *)a2 - 1)), v17 == v18))
      {
        int v19 = 0;
      }
      else if (v17 < v18)
      {
        int v19 = -1;
      }
      else
      {
        int v19 = 1;
      }
      a2 = v15;
    }
    while (v19 < 0);
  }
  while (v5 < (unint64_t *)v15)
  {
    long long v36 = *(_OWORD *)v5;
    long long v37 = *((_OWORD *)v5 + 1);
    long long v20 = v15[1];
    *(_OWORD *)int v5 = *v15;
    *((_OWORD *)v5 + 1) = v20;
    *unint64_t v15 = v36;
    v15[1] = v37;
    int v21 = v5;
    do
    {
      unint64_t v22 = v5[4];
      v5 += 4;
      unint64_t v23 = bswap64(v34);
      unint64_t v24 = bswap64(v22);
      if (v23 == v24
        && (unint64_t v23 = bswap64(*((unint64_t *)&v34 + 1)), v24 = bswap64(v21[5]), v23 == v24)
        && (unint64_t v23 = bswap64(v35), v24 = bswap64(v21[6]), v23 == v24)
        && (unint64_t v23 = bswap64(*((unint64_t *)&v35 + 1)), v24 = bswap64(v21[7]), v23 == v24))
      {
        int v25 = 0;
      }
      else if (v23 < v24)
      {
        int v25 = -1;
      }
      else
      {
        int v25 = 1;
      }
      int v21 = v5;
    }
    while ((v25 & 0x80000000) == 0);
    long long v26 = v15;
    do
    {
      unint64_t v27 = *((void *)v15 - 4);
      v15 -= 2;
      unint64_t v28 = bswap64(v34);
      unint64_t v29 = bswap64(v27);
      if (v28 == v29
        && (unint64_t v28 = bswap64(*((unint64_t *)&v34 + 1)), v29 = bswap64(*((void *)v26 - 3)), v28 == v29)
        && (unint64_t v28 = bswap64(v35), v29 = bswap64(*((void *)v26 - 2)), v28 == v29)
        && (unint64_t v28 = bswap64(*((unint64_t *)&v35 + 1)), v29 = bswap64(*((void *)v26 - 1)), v28 == v29))
      {
        int v30 = 0;
      }
      else if (v28 < v29)
      {
        int v30 = -1;
      }
      else
      {
        int v30 = 1;
      }
      long long v26 = v15;
    }
    while (v30 < 0);
  }
  int v31 = v5 - 4;
  if (v5 - 4 != a1)
  {
    long long v32 = *((_OWORD *)v5 - 1);
    *(_OWORD *)a1 = *(_OWORD *)v31;
    *((_OWORD *)a1 + 1) = v32;
  }
  *(_OWORD *)int v31 = v34;
  *((_OWORD *)v5 - 1) = v35;
  return v5;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v33 = *a1;
  long long v34 = a1[1];
  do
  {
    unint64_t v3 = (unint64_t *)&a1[v2];
    unint64_t v4 = bswap64(*(void *)&a1[v2 + 2]);
    unint64_t v5 = bswap64(v33);
    if (v4 == v5
      && (unint64_t v4 = bswap64(v3[5]), v5 = bswap64(*((unint64_t *)&v33 + 1)), v4 == v5)
      && (unint64_t v4 = bswap64(v3[6]), v5 = bswap64(v34), v4 == v5)
      && (unint64_t v4 = bswap64(v3[7]), v5 = bswap64(*((unint64_t *)&v34 + 1)), v4 == v5))
    {
      int v6 = 0;
    }
    else if (v4 < v5)
    {
      int v6 = -1;
    }
    else
    {
      int v6 = 1;
    }
    v2 += 2;
  }
  while (v6 < 0);
  unint64_t v7 = &a1[v2];
  unint64_t v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    while (v7 < a2)
    {
      int v9 = a2 - 2;
      unint64_t v14 = bswap64(*((void *)a2 - 4));
      unint64_t v15 = bswap64(v33);
      if (v14 == v15
        && (v14 = bswap64(*((void *)a2 - 3)), unint64_t v15 = bswap64(*((unint64_t *)&v33 + 1)), v14 == v15)
        && (v14 = bswap64(*((void *)a2 - 2)), unint64_t v15 = bswap64(v34), v14 == v15)
        && (v14 = bswap64(*((void *)a2 - 1)), unint64_t v15 = bswap64(*((unint64_t *)&v34 + 1)), v14 == v15))
      {
        int v16 = 0;
      }
      else if (v14 < v15)
      {
        int v16 = -1;
      }
      else
      {
        int v16 = 1;
      }
      a2 -= 2;
      if (v16 < 0) {
        goto LABEL_34;
      }
    }
    int v9 = a2;
  }
  else
  {
    int v9 = a2;
    do
    {
      unint64_t v10 = *((void *)v9 - 4);
      v9 -= 2;
      unint64_t v11 = bswap64(v10);
      unint64_t v12 = bswap64(v33);
      if (v11 == v12
        && (unint64_t v11 = bswap64(*((void *)a2 - 3)), v12 = bswap64(*((unint64_t *)&v33 + 1)), v11 == v12)
        && (unint64_t v11 = bswap64(*((void *)a2 - 2)), v12 = bswap64(v34), v11 == v12)
        && (unint64_t v11 = bswap64(*((void *)a2 - 1)), v12 = bswap64(*((unint64_t *)&v34 + 1)), v11 == v12))
      {
        int v13 = 0;
      }
      else if (v11 < v12)
      {
        int v13 = -1;
      }
      else
      {
        int v13 = 1;
      }
      a2 = v9;
    }
    while ((v13 & 0x80000000) == 0);
  }
LABEL_34:
  if (v7 < v9)
  {
    unint64_t v17 = (unint64_t)v7;
    unint64_t v18 = v9;
    do
    {
      long long v19 = *(_OWORD *)v17;
      long long v35 = *(_OWORD *)(v17 + 16);
      long long v20 = v18[1];
      *(_OWORD *)unint64_t v17 = *v18;
      *(_OWORD *)(v17 + 16) = v20;
      *unint64_t v18 = v19;
      v18[1] = v35;
      int v21 = (unint64_t *)v17;
      do
      {
        unint64_t v22 = *(void *)(v17 + 32);
        v17 += 32;
        unint64_t v23 = bswap64(v22);
        unint64_t v24 = bswap64(v33);
        if (v23 == v24
          && (unint64_t v23 = bswap64(v21[5]), v24 = bswap64(*((unint64_t *)&v33 + 1)), v23 == v24)
          && (unint64_t v23 = bswap64(v21[6]), v24 = bswap64(v34), v23 == v24)
          && (unint64_t v23 = bswap64(v21[7]), v24 = bswap64(*((unint64_t *)&v34 + 1)), v23 == v24))
        {
          int v25 = 0;
        }
        else if (v23 < v24)
        {
          int v25 = -1;
        }
        else
        {
          int v25 = 1;
        }
        int v21 = (unint64_t *)v17;
      }
      while (v25 < 0);
      long long v26 = v18;
      do
      {
        unint64_t v27 = *((void *)v18 - 4);
        v18 -= 2;
        unint64_t v28 = bswap64(v27);
        unint64_t v29 = bswap64(v33);
        if (v28 == v29
          && (unint64_t v28 = bswap64(*((void *)v26 - 3)), v29 = bswap64(*((unint64_t *)&v33 + 1)), v28 == v29)
          && (unint64_t v28 = bswap64(*((void *)v26 - 2)), v29 = bswap64(v34), v28 == v29)
          && (unint64_t v28 = bswap64(*((void *)v26 - 1)), v29 = bswap64(*((unint64_t *)&v34 + 1)), v28 == v29))
        {
          int v30 = 0;
        }
        else if (v28 < v29)
        {
          int v30 = -1;
        }
        else
        {
          int v30 = 1;
        }
        long long v26 = v18;
      }
      while ((v30 & 0x80000000) == 0);
    }
    while (v17 < (unint64_t)v18);
    unint64_t v8 = (long long *)(v17 - 32);
  }
  if (v8 != a1)
  {
    long long v31 = v8[1];
    *a1 = *v8;
    a1[1] = v31;
  }
  long long *v8 = v33;
  v8[1] = v34;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = a2 - 4;
      unint64_t v7 = bswap64(*(a2 - 4));
      unint64_t v8 = bswap64(*a1);
      if (v7 == v8
        && (unint64_t v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      if (v9 < 0)
      {
        long long v25 = *(_OWORD *)a1;
        long long v24 = *((_OWORD *)a1 + 1);
        long long v26 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v26;
        *(_OWORD *)int v6 = v25;
        *((_OWORD *)a2 - 1) = v24;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      unint64_t v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(a1, a1 + 4, a1 + 8);
      unint64_t v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = bswap64(*v11);
    unint64_t v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), unint64_t v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), unint64_t v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), unint64_t v15 = bswap64(v10[3]), v14 != v15))
    {
      int v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        long long v27 = *(_OWORD *)v11;
        long long v28 = *((_OWORD *)v11 + 1);
        uint64_t v17 = v12;
        while (1)
        {
          unint64_t v18 = (char *)a1 + v17;
          long long v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64) {
            break;
          }
          unint64_t v20 = bswap64(v27);
          unint64_t v21 = bswap64(*((void *)v18 + 4));
          if (v20 == v21
            && (unint64_t v20 = bswap64(*((unint64_t *)&v27 + 1)), v21 = bswap64(*((void *)v18 + 5)), v20 == v21)
            && (unint64_t v20 = bswap64(v28), v21 = bswap64(*((void *)v18 + 6)), v20 == v21)
            && (unint64_t v20 = bswap64(*((unint64_t *)&v28 + 1)), v21 = bswap64(*((void *)v18 + 7)), v20 == v21))
          {
            int v22 = 0;
          }
          else if (v20 < v21)
          {
            int v22 = -1;
          }
          else
          {
            int v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            unint64_t v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        unint64_t v23 = a1;
LABEL_30:
        *(_OWORD *)unint64_t v23 = v27;
        *((_OWORD *)v23 + 1) = v28;
        if (++v13 == 8) {
          return v11 + 4 == a2;
        }
      }
    }
    unint64_t v10 = v11;
    v12 += 32;
    v11 += 4;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(a1, a2, a3);
  unint64_t v9 = bswap64(*a4);
  unint64_t v10 = bswap64(*a3);
  if (v9 != v10
    || (unint64_t v9 = bswap64(a4[1]), v10 = bswap64(a3[1]), v9 != v10)
    || (unint64_t v9 = bswap64(a4[2]), v10 = bswap64(a3[2]), v9 != v10)
    || (unint64_t v9 = bswap64(a4[3]), v10 = bswap64(a3[3]), v9 != v10))
  {
    int v11 = v9 < v10 ? -1 : 1;
    if (v11 < 0)
    {
      long long v12 = *(_OWORD *)a3;
      __n128 result = *((__n128 *)a3 + 1);
      long long v13 = *((_OWORD *)a4 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_OWORD *)a3 + 1) = v13;
      *(_OWORD *)a4 = v12;
      *((__n128 *)a4 + 1) = result;
      unint64_t v14 = bswap64(*a3);
      unint64_t v15 = bswap64(*a2);
      if (v14 != v15) {
        goto LABEL_14;
      }
      unint64_t v14 = bswap64(a3[1]);
      unint64_t v15 = bswap64(a2[1]);
      if (v14 == v15
        && (v14 = bswap64(a3[2]), unint64_t v15 = bswap64(a2[2]), v14 == v15)
        && (v14 = bswap64(a3[3]), unint64_t v15 = bswap64(a2[3]), v14 == v15))
      {
        int v16 = 0;
      }
      else
      {
LABEL_14:
        int v16 = v14 < v15 ? -1 : 1;
      }
      if (v16 < 0)
      {
        long long v17 = *(_OWORD *)a2;
        __n128 result = *((__n128 *)a2 + 1);
        long long v18 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v18;
        *(_OWORD *)a3 = v17;
        *((__n128 *)a3 + 1) = result;
        unint64_t v19 = bswap64(*a2);
        unint64_t v20 = bswap64(*a1);
        if (v19 == v20
          && (unint64_t v19 = bswap64(a2[1]), v20 = bswap64(a1[1]), v19 == v20)
          && (unint64_t v19 = bswap64(a2[2]), v20 = bswap64(a1[2]), v19 == v20)
          && (unint64_t v19 = bswap64(a2[3]), v20 = bswap64(a1[3]), v19 == v20))
        {
          int v21 = 0;
        }
        else if (v19 < v20)
        {
          int v21 = -1;
        }
        else
        {
          int v21 = 1;
        }
        if (v21 < 0)
        {
          long long v22 = *(_OWORD *)a1;
          __n128 result = *((__n128 *)a1 + 1);
          long long v23 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v23;
          *(_OWORD *)a2 = v22;
          *((__n128 *)a2 + 1) = result;
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(a1, a2, a3, a4).n128_u64[0];
  unint64_t v11 = bswap64(*a5);
  unint64_t v12 = bswap64(*a4);
  if (v11 != v12
    || (unint64_t v11 = bswap64(a5[1]), v12 = bswap64(a4[1]), v11 != v12)
    || (unint64_t v11 = bswap64(a5[2]), v12 = bswap64(a4[2]), v11 != v12)
    || (unint64_t v11 = bswap64(a5[3]), v12 = bswap64(a4[3]), v11 != v12))
  {
    int v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      long long v14 = *(_OWORD *)a4;
      __n128 result = *((__n128 *)a4 + 1);
      long long v15 = *((_OWORD *)a5 + 1);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *((_OWORD *)a4 + 1) = v15;
      *(_OWORD *)a5 = v14;
      *((__n128 *)a5 + 1) = result;
      unint64_t v16 = bswap64(*a4);
      unint64_t v17 = bswap64(*a3);
      if (v16 != v17) {
        goto LABEL_14;
      }
      unint64_t v16 = bswap64(a4[1]);
      unint64_t v17 = bswap64(a3[1]);
      if (v16 == v17
        && (unint64_t v16 = bswap64(a4[2]), v17 = bswap64(a3[2]), v16 == v17)
        && (unint64_t v16 = bswap64(a4[3]), v17 = bswap64(a3[3]), v16 == v17))
      {
        int v18 = 0;
      }
      else
      {
LABEL_14:
        int v18 = v16 < v17 ? -1 : 1;
      }
      if (v18 < 0)
      {
        long long v19 = *(_OWORD *)a3;
        __n128 result = *((__n128 *)a3 + 1);
        long long v20 = *((_OWORD *)a4 + 1);
        *(_OWORD *)a3 = *(_OWORD *)a4;
        *((_OWORD *)a3 + 1) = v20;
        *(_OWORD *)a4 = v19;
        *((__n128 *)a4 + 1) = result;
        unint64_t v21 = bswap64(*a3);
        unint64_t v22 = bswap64(*a2);
        if (v21 != v22) {
          goto LABEL_23;
        }
        unint64_t v21 = bswap64(a3[1]);
        unint64_t v22 = bswap64(a2[1]);
        if (v21 == v22
          && (v21 = bswap64(a3[2]), unint64_t v22 = bswap64(a2[2]), v21 == v22)
          && (v21 = bswap64(a3[3]), unint64_t v22 = bswap64(a2[3]), v21 == v22))
        {
          int v23 = 0;
        }
        else
        {
LABEL_23:
          int v23 = v21 < v22 ? -1 : 1;
        }
        if (v23 < 0)
        {
          long long v24 = *(_OWORD *)a2;
          __n128 result = *((__n128 *)a2 + 1);
          long long v25 = *((_OWORD *)a3 + 1);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *((_OWORD *)a2 + 1) = v25;
          *(_OWORD *)a3 = v24;
          *((__n128 *)a3 + 1) = result;
          unint64_t v26 = bswap64(*a2);
          unint64_t v27 = bswap64(*a1);
          if (v26 == v27
            && (unint64_t v26 = bswap64(a2[1]), v27 = bswap64(a1[1]), v26 == v27)
            && (unint64_t v26 = bswap64(a2[2]), v27 = bswap64(a1[2]), v26 == v27)
            && (unint64_t v26 = bswap64(a2[3]), v27 = bswap64(a1[3]), v26 == v27))
          {
            int v28 = 0;
          }
          else if (v26 < v27)
          {
            int v28 = -1;
          }
          else
          {
            int v28 = 1;
          }
          if (v28 < 0)
          {
            long long v29 = *(_OWORD *)a1;
            __n128 result = *((__n128 *)a1 + 1);
            long long v30 = *((_OWORD *)a2 + 1);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *((_OWORD *)a1 + 1) = v30;
            *(_OWORD *)a2 = v29;
            *((__n128 *)a2 + 1) = result;
          }
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        unint64_t v15 = bswap64(*v14);
        unint64_t v16 = bswap64(*a1);
        if (v15 != v16
          || (unint64_t v15 = bswap64(v14[1]), v16 = bswap64(a1[1]), v15 != v16)
          || (unint64_t v15 = bswap64(v14[2]), v16 = bswap64(a1[2]), v15 != v16)
          || (unint64_t v15 = bswap64(v14[3]), v16 = bswap64(a1[3]), v15 != v16))
        {
          int v17 = v15 < v16 ? -1 : 1;
          if (v17 < 0)
          {
            long long v19 = *(_OWORD *)v14;
            long long v18 = *((_OWORD *)v14 + 1);
            long long v20 = *((_OWORD *)a1 + 1);
            *(_OWORD *)long long v14 = *(_OWORD *)a1;
            *((_OWORD *)v14 + 1) = v20;
            *(_OWORD *)a1 = v19;
            *((_OWORD *)a1 + 1) = v18;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>((uint64_t)a1, a4, v9, a1);
          }
        }
        v14 += 4;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 33)
    {
      uint64_t v21 = (unint64_t)v8 >> 5;
      unint64_t v22 = a2 - 4;
      do
      {
        long long v27 = *(_OWORD *)a1;
        long long v28 = *((_OWORD *)a1 + 1);
        int v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(a1, a4, v21);
        if (v22 == v23)
        {
          *(_OWORD *)int v23 = v27;
          *((_OWORD *)v23 + 1) = v28;
        }
        else
        {
          long long v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)int v23 = *(_OWORD *)v22;
          *((_OWORD *)v23 + 1) = v24;
          *(_OWORD *)unint64_t v22 = v27;
          *((_OWORD *)v22 + 1) = v28;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>((uint64_t)a1, (uint64_t)(v23 + 4), a4, ((char *)(v23 + 4) - (char *)a1) >> 5);
        }
        v22 -= 4;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - a1;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - a1) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = (unint64_t *)(a1 + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = bswap64(*v8);
        unint64_t v11 = bswap64(v8[4]);
        if (v10 != v11) {
          goto LABEL_9;
        }
        unint64_t v10 = bswap64(v8[1]);
        unint64_t v11 = bswap64(v8[5]);
        if (v10 == v11
          && (unint64_t v10 = bswap64(v8[2]), v11 = bswap64(v8[6]), v10 == v11)
          && (unint64_t v10 = bswap64(v8[3]), v11 = bswap64(v8[7]), v10 == v11))
        {
          int v12 = 0;
        }
        else
        {
LABEL_9:
          int v12 = v10 < v11 ? -1 : 1;
        }
        if (v12 < 0)
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }
      unint64_t v13 = bswap64(*v8);
      unint64_t v14 = bswap64(*a4);
      if (v13 == v14
        && (unint64_t v13 = bswap64(v8[1]), v14 = bswap64(a4[1]), v13 == v14)
        && (unint64_t v13 = bswap64(v8[2]), v14 = bswap64(a4[2]), v13 == v14)
        && (unint64_t v13 = bswap64(v8[3]), v14 = bswap64(a4[3]), v13 == v14))
      {
        int v15 = 0;
      }
      else if (v13 < v14)
      {
        int v15 = -1;
      }
      else
      {
        int v15 = 1;
      }
      if ((v15 & 0x80000000) == 0)
      {
        __n128 v26 = *(__n128 *)a4;
        __n128 v27 = *((__n128 *)a4 + 1);
        do
        {
          unint64_t v16 = (__n128 *)v8;
          long long v17 = *((_OWORD *)v8 + 1);
          *(_OWORD *)a4 = *(_OWORD *)v8;
          *((_OWORD *)a4 + 1) = v17;
          if (v5 < v7) {
            break;
          }
          uint64_t v18 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(a1 + 32 * v18);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v7 = v18;
          }
          else
          {
            unint64_t v19 = bswap64(*v8);
            unint64_t v20 = bswap64(v8[4]);
            if (v19 != v20) {
              goto LABEL_32;
            }
            unint64_t v19 = bswap64(v8[1]);
            unint64_t v20 = bswap64(v8[5]);
            if (v19 == v20
              && (unint64_t v19 = bswap64(v8[2]), v20 = bswap64(v8[6]), v19 == v20)
              && (unint64_t v19 = bswap64(v8[3]), v20 = bswap64(v8[7]), v19 == v20))
            {
              int v21 = 0;
            }
            else
            {
LABEL_32:
              int v21 = v19 < v20 ? -1 : 1;
            }
            if (v21 >= 0) {
              uint64_t v7 = v18;
            }
            else {
              v8 += 4;
            }
          }
          unint64_t v22 = bswap64(*v8);
          unint64_t v23 = bswap64(v26.n128_u64[0]);
          if (v22 != v23) {
            goto LABEL_43;
          }
          unint64_t v22 = bswap64(v8[1]);
          unint64_t v23 = bswap64(v26.n128_u64[1]);
          if (v22 == v23
            && (unint64_t v22 = bswap64(v8[2]), v23 = bswap64(v27.n128_u64[0]), v22 == v23)
            && (unint64_t v22 = bswap64(v8[3]), v23 = bswap64(v27.n128_u64[1]), v22 == v23))
          {
            int v24 = 0;
          }
          else
          {
LABEL_43:
            int v24 = v22 < v23 ? -1 : 1;
          }
          a4 = (unint64_t *)v16;
        }
        while ((v24 & 0x80000000) == 0);
        __n128 result = v26;
        *unint64_t v16 = v26;
        v16[1] = v27;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[4 * v3 + 4];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      unint64_t v9 = bswap64(*v6);
      unint64_t v10 = bswap64(v6[4]);
      if (v9 == v10
        && (unint64_t v9 = bswap64(v6[1]), v10 = bswap64(v6[5]), v9 == v10)
        && (unint64_t v9 = bswap64(v6[2]), v10 = bswap64(v6[6]), v9 == v10)
        && (unint64_t v9 = bswap64(v6[3]), v10 = bswap64(v6[7]), v9 == v10))
      {
        int v11 = 0;
      }
      else if (v9 < v10)
      {
        int v11 = -1;
      }
      else
      {
        int v11 = 1;
      }
      if (v11 < 0)
      {
        v6 += 4;
        uint64_t v7 = v8;
      }
    }
    long long v12 = *((_OWORD *)v6 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v6;
    *((_OWORD *)a1 + 1) = v12;
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (unint64_t *)(a1 + 32 * v4);
    uint64_t v6 = (__n128 *)(a2 - 32);
    unint64_t v7 = bswap64(*v5);
    unint64_t v8 = bswap64(*(void *)(a2 - 32));
    if (v7 != v8) {
      goto LABEL_7;
    }
    unint64_t v7 = bswap64(v5[1]);
    unint64_t v8 = bswap64(*(void *)(a2 - 24));
    if (v7 == v8
      && (unint64_t v7 = bswap64(v5[2]), v8 = bswap64(*(void *)(a2 - 16)), v7 == v8)
      && (unint64_t v7 = bswap64(v5[3]), v8 = bswap64(*(void *)(a2 - 8)), v7 == v8))
    {
      int v9 = 0;
    }
    else
    {
LABEL_7:
      int v9 = v7 < v8 ? -1 : 1;
    }
    if (v9 < 0)
    {
      __n128 v16 = *v6;
      __n128 v17 = *(__n128 *)(a2 - 16);
      do
      {
        unint64_t v10 = (__n128 *)v5;
        __n128 v11 = *((__n128 *)v5 + 1);
        *uint64_t v6 = *(__n128 *)v5;
        v6[1] = v11;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (unint64_t *)(a1 + 32 * v4);
        unint64_t v12 = bswap64(*v5);
        unint64_t v13 = bswap64(v16.n128_u64[0]);
        if (v12 != v13) {
          goto LABEL_18;
        }
        unint64_t v12 = bswap64(v5[1]);
        unint64_t v13 = bswap64(v16.n128_u64[1]);
        if (v12 == v13
          && (unint64_t v12 = bswap64(v5[2]), v13 = bswap64(v17.n128_u64[0]), v12 == v13)
          && (unint64_t v12 = bswap64(v5[3]), v13 = bswap64(v17.n128_u64[1]), v12 == v13))
        {
          int v14 = 0;
        }
        else
        {
LABEL_18:
          int v14 = v12 < v13 ? -1 : 1;
        }
        uint64_t v6 = v10;
      }
      while (v14 < 0);
      __n128 result = v16;
      *unint64_t v10 = v16;
      v10[1] = v17;
    }
  }
  return result;
}

uint64_t ___ZN16MTLProgramObject17setReflectionDataEPU27objcproto16OS_dispatch_data8NSObjectP8NSString_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  if (a1[4]) {
    uint64_t v3 = (__CFString *)a1[4];
  }
  else {
    uint64_t v3 = &stru_1ECAC84A8;
  }
  uint64_t result = [*(id *)(v2 + 432) objectForKey:v3];
  if (!result)
  {
    uint64_t v5 = *(void **)(v2 + 432);
    uint64_t v6 = a1[5];
    if (a1[4]) {
      unint64_t v7 = (__CFString *)a1[4];
    }
    else {
      unint64_t v7 = &stru_1ECAC84A8;
    }
    return [v5 setObject:v6 forKey:v7];
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[6];
    if (v3)
    {
      __p[7] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_10:
    __n128 v11 = (char *)operator new(0x48uLL);
    *((void *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  long long v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_48:
    *int v24 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    int v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182865034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = a2 - 4;
      unint64_t v7 = bswap64(*(a2 - 4));
      unint64_t v8 = bswap64(*a1);
      if (v7 == v8
        && (unint64_t v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      if (v9 < 0)
      {
        long long v33 = *(_OWORD *)a1;
        long long v32 = *((_OWORD *)a1 + 1);
        long long v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)uint64_t v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      int v24 = a1 + 4;
      unint64_t v25 = a1 + 8;
      __n128 v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      unint64_t v28 = *(a2 - 4);
      __n128 v27 = a2 - 4;
      unint64_t v29 = bswap64(v28);
      unint64_t v30 = bswap64(a1[12]);
      if (v29 == v30
        && (unint64_t v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        int v31 = 0;
      }
      else if (v29 < v30)
      {
        int v31 = -1;
      }
      else
      {
        int v31 = 1;
      }
      if (v31 < 0)
      {
        long long v36 = *(_OWORD *)v26;
        long long v35 = *((_OWORD *)a1 + 7);
        long long v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)__n128 v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)__n128 v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        unint64_t v38 = bswap64(*v26);
        unint64_t v39 = bswap64(*v25);
        if (v38 != v39) {
          goto LABEL_54;
        }
        unint64_t v38 = bswap64(a1[13]);
        unint64_t v39 = bswap64(a1[9]);
        if (v38 == v39
          && (unint64_t v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (unint64_t v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          int v40 = 0;
        }
        else
        {
LABEL_54:
          int v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          long long v42 = *(_OWORD *)v25;
          long long v41 = *((_OWORD *)a1 + 5);
          long long v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)__n128 v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          unint64_t v44 = bswap64(*v25);
          unint64_t v45 = bswap64(*v24);
          if (v44 != v45) {
            goto LABEL_64;
          }
          unint64_t v44 = bswap64(a1[9]);
          unint64_t v45 = bswap64(a1[5]);
          if (v44 == v45
            && (unint64_t v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (unint64_t v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            int v46 = 0;
          }
          else
          {
LABEL_64:
            int v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            long long v48 = *(_OWORD *)v24;
            long long v47 = *((_OWORD *)a1 + 3);
            long long v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)int v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)unint64_t v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            unint64_t v50 = bswap64(a1[4]);
            unint64_t v51 = bswap64(*a1);
            if (v50 != v51) {
              goto LABEL_73;
            }
            unint64_t v50 = bswap64(a1[5]);
            unint64_t v51 = bswap64(a1[1]);
            if (v50 == v51
              && (unint64_t v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (unint64_t v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              int v52 = 0;
            }
            else
            {
LABEL_73:
              int v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              long long v54 = *(_OWORD *)a1;
              long long v53 = *((_OWORD *)a1 + 1);
              long long v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)int v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      __n128 v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    unint64_t v14 = bswap64(*v11);
    unint64_t v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), unint64_t v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), unint64_t v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), unint64_t v15 = bswap64(v10[3]), v14 != v15))
    {
      int v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        long long v56 = *(_OWORD *)v11;
        long long v57 = *((_OWORD *)v11 + 1);
        uint64_t v17 = v12;
        while (1)
        {
          float v18 = (char *)a1 + v17;
          long long v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64) {
            break;
          }
          unint64_t v20 = bswap64(v56);
          unint64_t v21 = bswap64(*((void *)v18 + 4));
          if (v20 == v21
            && (unint64_t v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((void *)v18 + 5)), v20 == v21)
            && (unint64_t v20 = bswap64(v57), v21 = bswap64(*((void *)v18 + 6)), v20 == v21)
            && (unint64_t v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((void *)v18 + 7)), v20 == v21))
          {
            int v22 = 0;
          }
          else if (v20 < v21)
          {
            int v22 = -1;
          }
          else
          {
            int v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            uint64_t v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        uint64_t v23 = a1;
LABEL_30:
        *(_OWORD *)uint64_t v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8) {
          return v11 + 4 == a2;
        }
      }
    }
    unint64_t v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

void *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*&>(uint64_t a1, char *a2, unsigned char *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    __n128 v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  *((unsigned char *)v12 + 16) = *a3;
  _OWORD v12[3] = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1828657B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SpecializedFunctionTrackingData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC4810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SpecializedFunctionTrackingData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC4810;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

uint64_t std::__shared_ptr_emplace<SpecializedFunctionTrackingData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SpecializedFunctionTrackingData::~SpecializedFunctionTrackingData(SpecializedFunctionTrackingData *this)
{
  SpecializedFunctionTrackingData::~SpecializedFunctionTrackingData(this);

  JUMPOUT(0x18530C140);
}

{
  id var2;
  id var1;

  this->var0 = (void **)&unk_1ECAC43C8;
  unint64_t var2 = this->var2;
  if (var2) {

  }
  unint64_t var1 = this->var1;
  if (var1) {
}
  }

void std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

void std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,MTLBinaryKey *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,MTLBinaryKey *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

const void **VariantList<4u>::find<VariantKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 336);
  __s1 = *(void **)(a1 + 328);
  if (v3)
  {
    size_t v4 = *(void *)(a2 + 16);
    size_t v5 = *(void *)(a2 + 24);
    int v24 = *(const void **)(a2 + 40);
    size_t v25 = *(void *)(a2 + 48);
    uint64_t v6 = *(const void **)a2;
    unint64_t v7 = *(const void **)(a2 + 8);
    unint64_t v8 = *(const void ***)(a1 + 328);
    while (1)
    {
      unint64_t v9 = (char *)v8[1];
      if ((char *)v4 == v9 && (const void *)(v25 + v5) == v8[3])
      {
        uint8x8_t v10 = (char *)*v8;
        if (!memcmp(v6, *v8, v4))
        {
          __n128 v11 = &v9[(void)v10];
          if (!memcmp(v7, v11, v5) && !memcmp(v24, &v11[v5], v25)) {
            break;
          }
        }
      }
      v8 += 10;
      if (!--v3) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = __s1[40];
    if (v12)
    {
      size_t v13 = *(void *)(a2 + 16);
      size_t v14 = *(void *)(a2 + 24);
      __s1a = *(void **)(a2 + 40);
      size_t v15 = *(void *)(a2 + 48);
      unint64_t v17 = *(const void **)a2;
      BOOL v16 = *(const void **)(a2 + 8);
      while (2)
      {
        for (uint64_t i = 0; i != 320; i += 80)
        {
          size_t v19 = (const void **)(v12 + i);
          uint64_t v20 = *(void *)(v12 + i + 8);
          if (v13 == v20 && (const void *)(v15 + v14) == v19[3])
          {
            unint64_t v21 = (char *)*v19;
            if (!memcmp(v17, *v19, v13))
            {
              unint64_t v22 = &v21[v20];
              if (!memcmp(v16, v22, v14) && !memcmp(__s1a, &v22[v14], v15)) {
                return (const void **)(v12 + i);
              }
            }
          }
        }
        uint64_t v12 = *(void *)(v12 + 320);
        if (v12) {
          continue;
        }
        break;
      }
    }
    return 0;
  }
  return v8;
}

void *VariantList<4u>::newVariantEntry<VariantKey>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 336);
  if (v4 == 4) {
    operator new();
  }
  uint64_t v5 = *(void *)(a1 + 328);
  *(_DWORD *)(a1 + 336) = v4 + 1;
  uint64_t v6 = (void *)(v5 + 80 * v4);
  size_t v7 = *(void *)(a2 + 16);
  size_t v8 = *(void *)(a2 + 24);
  size_t v9 = *(void *)(a2 + 48);
  uint8x8_t v10 = malloc_type_malloc(v9 + v8 + v7, 0xBCECD5BEuLL);
  *uint64_t v6 = v10;
  memcpy(v10, *(const void **)a2, v7);
  memcpy((void *)(*v6 + v7), *(const void **)(a2 + 8), v8);
  memcpy((void *)(*v6 + v7 + v8), *(const void **)(a2 + 40), v9);
  v6[1] = v7;
  _OWORD v6[2] = v8;
  v6[3] = v9 + v8;
  __n128 v11 = dispatch_group_create();
  v6[5] = v11;
  dispatch_group_enter(v11);
  return v6;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t _MTLGetSerializedVertexFormat(Air::PipelineScript *a1, void *a2, size_t *a3, char **a4)
{
  memset(&v83, 0, sizeof(v83));
  memset(&__p, 0, sizeof(__p));
  *a3 = 0;
  *a2 = 0;
  uint64_t v5 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v5 < 9u || (uint64_t v6 = v5[4]) == 0 || (v7 = *((unsigned __int8 *)a1 + v6), (v7 - 3) <= 0xFFFFFFFD))
  {
    std::string::append(&v83, "Error: pipeline must be render or compute");
    if (a4)
    {
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        uint64_t v8 = 0;
        if (!*((unsigned char *)&v83.__r_.__value_.__s + 23)) {
          goto LABEL_34;
        }
        goto LABEL_7;
      }
      if (v83.__r_.__value_.__l.__size_)
      {
        uint64_t v8 = 0;
        goto LABEL_10;
      }
    }
LABEL_33:
    uint64_t v8 = 0;
    goto LABEL_34;
  }
  if (v7 == 2)
  {
    size_t v15 = (int *)Air::PipelineScript::pipeline_as_compute(a1);
    BOOL v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 < 7u)
    {
      unint64_t v17 = 0;
    }
    else
    {
      unint64_t v17 = (int *)v16[3];
      if (v17) {
        unint64_t v17 = (int *)((char *)v17 + (void)v15 + *(unsigned int *)((char *)v17 + (void)v15));
      }
    }
    unint64_t v28 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v28 < 0xBu) {
      goto LABEL_33;
    }
    uint64_t v29 = v28[5];
    if (!v29) {
      goto LABEL_33;
    }
    unint64_t v30 = (int *)((char *)v17 + v29 + *(unsigned int *)((char *)v17 + v29));
    int v31 = (unsigned __int16 *)((char *)v30 - *v30);
    unsigned int v32 = *v31;
    if (v32 <= 4)
    {
      int v18 = 0;
      unint64_t v21 = 0;
    }
    else
    {
      if (v31[2]) {
        unint64_t v21 = (int *)((char *)v30 + v31[2] + *(unsigned int *)((char *)v30 + v31[2]));
      }
      else {
        unint64_t v21 = 0;
      }
      if (v32 >= 7)
      {
        if (v31[3]) {
          unint64_t v22 = (unsigned int *)((char *)v30 + v31[3] + *(unsigned int *)((char *)v30 + v31[3]));
        }
        else {
          unint64_t v22 = 0;
        }
        if (v32 < 0xB)
        {
          int v18 = 0;
          if (v32 < 9)
          {
            LOWORD(v35) = 0;
            goto LABEL_58;
          }
        }
        else if (v31[5])
        {
          int v18 = *((unsigned __int8 *)v30 + v31[5]);
        }
        else
        {
          int v18 = 0;
        }
        uint64_t v78 = v31[4];
        if (v78)
        {
          int v35 = *(int *)((char *)v30 + v78);
          goto LABEL_58;
        }
LABEL_57:
        LOWORD(v35) = 0;
LABEL_58:
        LODWORD(v20) = 0;
        int v19 = (unsigned __int16)v35;
        goto LABEL_59;
      }
      int v18 = 0;
    }
    unint64_t v22 = 0;
    goto LABEL_57;
  }
  if (v7 == 1)
  {
    uint64_t v12 = (int *)Air::PipelineScript::pipeline_as_render(a1);
    size_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 < 9u)
    {
      size_t v14 = 0;
    }
    else
    {
      size_t v14 = (int *)v13[4];
      if (v14) {
        size_t v14 = (int *)((char *)v14 + (void)v12 + *(unsigned int *)((char *)v14 + (void)v12));
      }
    }
    uint64_t v23 = (unsigned __int16 *)((char *)v14 - *v14);
    unsigned int v24 = *v23;
    if (v24 < 7 || !v23[3]) {
      goto LABEL_33;
    }
    size_t v25 = (int *)((char *)v14 + v23[3] + *(unsigned int *)((char *)v14 + v23[3]));
    __n128 v26 = (unsigned __int16 *)((char *)v25 - *v25);
    unsigned int v27 = *v26;
    if (v27 <= 4)
    {
      unint64_t v21 = 0;
    }
    else
    {
      if (v26[2]) {
        unint64_t v21 = (int *)((char *)v25 + v26[2] + *(unsigned int *)((char *)v25 + v26[2]));
      }
      else {
        unint64_t v21 = 0;
      }
      if (v27 >= 7)
      {
        uint64_t v34 = v26[3];
        if (v34)
        {
          unint64_t v22 = (unsigned int *)((char *)v25 + v34 + *(unsigned int *)((char *)v25 + v34));
          goto LABEL_46;
        }
      }
    }
    unint64_t v22 = 0;
LABEL_46:
    if (v24 < 0x13)
    {
      int v18 = 0;
      int v19 = 0;
      LODWORD(v20) = 0;
    }
    else
    {
      uint64_t v20 = v23[9];
      int v18 = 0;
      int v19 = 0;
      if (v20) {
        LODWORD(v20) = *((unsigned __int8 *)v14 + v20);
      }
    }
    goto LABEL_59;
  }
  int v18 = 0;
  int v19 = 0;
  LODWORD(v20) = 0;
  unint64_t v21 = 0;
  unint64_t v22 = 0;
LABEL_59:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    *__p.__r_.__value_.__l.__data_ = 0;
    __p.__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  }
  int v80 = v20;
  int v81 = v18;
  *(_WORD *)int v90 = v20;
  *(_WORD *)size_t v89 = v18;
  *(_WORD *)unint64_t v88 = v19;
  uint64_t v36 = *v21;
  if (!v36) {
    goto LABEL_132;
  }
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  unint64_t v39 = v21 + 1;
  long long v41 = v22 + 1;
  uint64_t v40 = *v22;
  uint64_t v79 = "bitset reset argument out of range";
  do
  {
    long long v42 = (_DWORD *)((char *)&v39[v37] + v39[v37]);
    long long v43 = (unsigned __int16 *)((char *)v42 - *v42);
    unsigned int v44 = *v43;
    if (v44 >= 5 && v43[2] && *((unsigned char *)v42 + v43[2]))
    {
      if (v44 < 9 || (uint64_t v45 = v43[4]) == 0)
      {
        LOBYTE(v46) = 0;
LABEL_72:
        v38 |= 1 << v46;
        goto LABEL_73;
      }
      unsigned int v46 = *(int *)((char *)v42 + v45);
      if (v46 <= 0x1E) {
        goto LABEL_72;
      }
    }
LABEL_73:
    if (v40)
    {
      for (unint64_t i = 0; i != v40; ++i)
      {
        long long v48 = (int *)((char *)&v41[i] + v41[i]);
        long long v49 = (unsigned __int16 *)((char *)v48 - *v48);
        if (*v49 >= 9u)
        {
          uint64_t v50 = v49[4];
          if (v50)
          {
            if (*(void *)((char *)v48 + v50)) {
              continue;
            }
          }
        }
        if (i > 0x1E) {
LABEL_148:
        }
          std::__throw_out_of_range[abi:ne180100](v79);
        v38 &= ~(1 << i);
      }
    }
    ++v37;
  }
  while (v37 != v36);
  if ((v38 & 0x7FFFFFFF) == 0)
  {
LABEL_132:
    std::string::append(&v83, "No active buffer found ");
    uint64_t v8 = 0;
    goto LABEL_133;
  }
  unsigned int v51 = 0;
  *(_DWORD *)std::string __s = 0;
  while (2)
  {
    int v52 = (_DWORD *)((char *)&v39[v51] + v39[v51]);
    long long v53 = (unsigned __int16 *)((char *)v52 - *v52);
    unsigned int v54 = *v53;
    if (v54 >= 5)
    {
      if (v53[2])
      {
        int v55 = *((unsigned __int8 *)v52 + v53[2]);
        if (*((unsigned char *)v52 + v53[2]))
        {
          if (v54 < 9)
          {
            LOBYTE(v56) = 0;
          }
          else
          {
            uint64_t v56 = v53[4];
            if (v56)
            {
              LODWORD(v56) = *(int *)((char *)v52 + v56);
              if (v56 > 0x1E) {
                goto LABEL_102;
              }
            }
          }
          if ((v38 >> v56))
          {
            *(_DWORD *)uint64_t v87 = v55;
            std::string::append(&__p, __s, 4uLL);
            std::string::append(&__p, v87, 4uLL);
            long long v57 = (unsigned __int16 *)((char *)v52 - *v52);
            if (*v57 < 9u)
            {
              LODWORD(v58) = 0;
            }
            else
            {
              uint64_t v58 = v57[4];
              if (v58) {
                LODWORD(v58) = *(int *)((char *)v52 + v58);
              }
            }
            *(_DWORD *)unint64_t v86 = v58;
            std::string::append(&__p, v86, 4uLL);
            uint64_t v59 = (unsigned __int16 *)((char *)v52 - *v52);
            if (*v59 < 7u)
            {
              uint64_t v60 = 0;
            }
            else
            {
              uint64_t v60 = v59[3];
              if (v60) {
                uint64_t v60 = *(void *)((char *)v52 + v60);
              }
            }
            *(void *)uint64_t v85 = v60;
            std::string::append(&__p, v85, 8uLL);
            unsigned int v51 = *(_DWORD *)__s;
            LODWORD(v36) = *v21;
          }
        }
      }
    }
LABEL_102:
    *(_DWORD *)std::string __s = ++v51;
    if (v51 < v36) {
      continue;
    }
    break;
  }
  *(_DWORD *)uint64_t v87 = 0;
  unsigned int v61 = *v22;
  if (*v22)
  {
    unsigned __int8 v62 = 0;
    unsigned int v63 = 0;
    uint64_t v79 = "bitset test argument out of range";
    do
    {
      uint64_t v64 = (int *)((char *)&v41[v63] + v41[v63]);
      unint64_t v65 = (unsigned __int16 *)((char *)v64 - *v64);
      if (*v65 >= 9u)
      {
        uint64_t v66 = v65[4];
        if (v66)
        {
          if ((int)v63 <= 30)
          {
            uint64_t v67 = *(void *)((char *)v64 + v66);
            if (v67)
            {
              if (v63 >= 0x1F) {
                goto LABEL_148;
              }
              if ((v38 >> v63))
              {
                *(void *)uint64_t v85 = v67;
                std::string::append(&__p, v87, 4uLL);
                std::string::append(&__p, v85, 8uLL);
                uint64_t v68 = (unsigned __int16 *)((char *)v64 - *v64);
                if (*v68 >= 5u && (uint64_t v69 = v68[2]) != 0) {
                  int v70 = *((unsigned __int8 *)v64 + v69);
                }
                else {
                  int v70 = 1;
                }
                *(_DWORD *)unint64_t v86 = v70;
                std::string::append(&__p, v86, 4uLL);
                BOOL v71 = *(_DWORD *)v86 == 4;
                unint64_t v72 = (unsigned __int16 *)((char *)v64 - *v64);
                if (*v72 >= 7u && (uint64_t v73 = v72[3]) != 0) {
                  uint64_t v74 = *(void *)((char *)v64 + v73);
                }
                else {
                  uint64_t v74 = 1;
                }
                *(void *)std::string __s = v74;
                std::string::append(&__p, __s, 8uLL);
                v62 |= v71;
                unsigned int v63 = *(_DWORD *)v87;
                unsigned int v61 = *v22;
              }
            }
          }
        }
      }
      *(_DWORD *)uint64_t v87 = ++v63;
    }
    while (v63 < v61);
    if (((v80 != 0) & v62) != 0) {
      std::string::append(&__p, v90, 2uLL);
    }
  }
  if (v19 | v81)
  {
    std::string::append(&__p, v89, 2uLL);
    std::string::append(&__p, v88, 2uLL);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  *a3 = size;
  unint64_t v76 = malloc_type_malloc(size, 0x44AD0755uLL);
  *a2 = v76;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  memcpy(v76, p_p, *a3);
  uint64_t v8 = 1;
LABEL_133:
  if (a4)
  {
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!*((unsigned char *)&v83.__r_.__value_.__s + 23)) {
        goto LABEL_34;
      }
LABEL_7:
      size_t v9 = &v83;
LABEL_11:
      *a4 = strdup((const char *)v9);
      goto LABEL_34;
    }
    if (v83.__r_.__value_.__l.__size_)
    {
LABEL_10:
      size_t v9 = (std::string *)v83.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
  }
LABEL_34:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_182866890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

unint64_t _MTLGetAttachmentSize(void *a1, char a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v8 = [a1 width];
  unint64_t result = [a1 height];
  uint64_t v10 = v8 >> a2;
  unint64_t v11 = result >> a2;
  if (v8 >> a2 <= 1) {
    uint64_t v10 = 1;
  }
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  *a3 = v10;
  *a4 = v11;
  return result;
}

__n128 copyAttachmentPrivate(const MTLRenderPassAttachmentDescriptorPrivate *a1, MTLRenderPassAttachmentDescriptorPrivate *a2)
{
  unsigned int v4 = a1->texture;

  a2->texture = a1->texture;
  uint64_t v5 = a1->resolveTexture;

  a2->resolveTexture = a1->resolveTexture;
  long long v6 = *(_OWORD *)&a1->clearColor.red;
  *(_OWORD *)&a2->clearColor.blue = *(_OWORD *)&a1->clearColor.blue;
  *(_OWORD *)&a2->clearColor.red = v6;
  a2->clearDepth = a1->clearDepth;
  a2->clearStencil = a1->clearStencil;
  a2->stencilResolveFilter = a1->stencilResolveFilter;
  *(_OWORD *)&a2->level = *(_OWORD *)&a1->level;
  *(_OWORD *)&a2->depthPlane = *(_OWORD *)&a1->depthPlane;
  *(_OWORD *)&a2->storeActiouint64_t n = *(_OWORD *)&a1->storeAction;
  *(_OWORD *)&a2->resolveLevel = *(_OWORD *)&a1->resolveLevel;
  a2->yInvert = a1->yInvert;
  __n128 result = *(__n128 *)&a1->resolveDepthPlane;
  *(__n128 *)&a2->resolveDepthPlane = result;
  return result;
}

uint64_t colorAttachmentFormattedDescription(uint64_t a1, const MTLRenderPassAttachmentDescriptorPrivate *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 4;
  uint64_t v4 = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  uint64_t v16 = v4;
  unint64_t v17 = @"texture =";
  if (a2->texture) {
    uint64_t v5 = (__CFString *)[(MTLTextureImplementation *)a2->texture formattedDescription:v3];
  }
  else {
    uint64_t v5 = @"<null>";
  }
  int v18 = v5;
  uint64_t v19 = v4;
  uint64_t v20 = @"level =";
  uint64_t v21 = [NSNumber numberWithUnsignedInteger:a2->level];
  uint64_t v22 = v4;
  uint64_t v23 = @"slice =";
  uint64_t v24 = [NSNumber numberWithUnsignedInteger:a2->slice];
  uint64_t v25 = v4;
  __n128 v26 = @"depthPlane =";
  uint64_t v27 = [NSNumber numberWithUnsignedInteger:a2->depthPlane];
  uint64_t v28 = v4;
  uint64_t v29 = @"resolveTexture =";
  resolveTexture = a2->resolveTexture;
  if (resolveTexture) {
    int v7 = (__CFString *)[(MTLTextureImplementation *)resolveTexture formattedDescription:v3];
  }
  else {
    int v7 = @"<null>";
  }
  unint64_t v30 = v7;
  uint64_t v31 = v4;
  unsigned int v32 = @"resolveLevel =";
  uint64_t v33 = [NSNumber numberWithUnsignedInteger:a2->resolveLevel];
  uint64_t v34 = v4;
  int v35 = @"resolveSlice =";
  uint64_t v36 = [NSNumber numberWithUnsignedInteger:a2->resolveSlice];
  uint64_t v37 = v4;
  unint64_t v38 = @"resolveDepthPlane =";
  uint64_t v39 = [NSNumber numberWithUnsignedInteger:a2->resolveDepthPlane];
  uint64_t v40 = v4;
  long long v41 = @"loadAction =";
  loadActiouint64_t n = a2->loadAction;
  if (loadAction > 2) {
    size_t v9 = @"Unknown";
  }
  else {
    size_t v9 = (__CFString *)*((void *)&off_1E52217B8 + loadAction);
  }
  long long v42 = v9;
  uint64_t v43 = v4;
  unsigned int v44 = @"storeAction =";
  storeActiouint64_t n = a2->storeAction;
  if (storeAction > 4) {
    unint64_t v11 = @"Unknown";
  }
  else {
    unint64_t v11 = (__CFString *)*((void *)&off_1E52217D0 + storeAction);
  }
  uint64_t v45 = v11;
  uint64_t v46 = v4;
  uint64_t v12 = @"none";
  unint64_t storeActionOptions = a2->storeActionOptions;
  if (storeActionOptions) {
    uint64_t v12 = 0;
  }
  if (storeActionOptions) {
    uint64_t v12 = @"MTLStoreActionOptionCustomSamplePositions";
  }
  long long v47 = @"storeActionOptions =";
  long long v48 = v12;
  uint64_t v49 = v4;
  uint64_t v50 = @"clearColor =";
  uint64_t v51 = objc_msgSend(NSString, "stringWithFormat:", @"(%g %g %g %g)", *(void *)&a2->clearColor.red, *(void *)&a2->clearColor.green, *(void *)&a2->clearColor.blue, *(void *)&a2->clearColor.alpha, v16, v17);
  uint64_t v52 = v4;
  if (a2->yInvert) {
    size_t v14 = @"YES";
  }
  else {
    size_t v14 = @"NO";
  }
  long long v53 = @"yInvert =";
  unsigned int v54 = v14;
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", &v16, 39), "componentsJoinedByString:", @" ");
}

uint64_t depthAttachmentFormattedDescription(uint64_t a1, const MTLRenderPassAttachmentDescriptorPrivate *a2)
{
  v18[42] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 4;
  uint64_t v4 = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  v18[0] = v4;
  v18[1] = @"texture =";
  if (a2->texture) {
    uint64_t v5 = (__CFString *)[(MTLTextureImplementation *)a2->texture formattedDescription:v3];
  }
  else {
    uint64_t v5 = @"<null>";
  }
  v18[2] = v5;
  v18[3] = v4;
  v18[4] = @"level =";
  v18[5] = [NSNumber numberWithUnsignedInteger:a2->level];
  v18[6] = v4;
  v18[7] = @"slice =";
  v18[8] = [NSNumber numberWithUnsignedInteger:a2->slice];
  v18[9] = v4;
  int v18[10] = @"depthPlane =";
  v18[11] = [NSNumber numberWithUnsignedInteger:a2->depthPlane];
  v18[12] = v4;
  resolveTexture = a2->resolveTexture;
  unint64_t resolveLevel = a2->resolveLevel;
  if (!resolveTexture) {
    resolveTexture = (MTLTextureImplementation *)@"<null>";
  }
  v18[13] = @"resolveTexture =";
  v18[14] = resolveTexture;
  v18[15] = v4;
  v18[16] = @"resolveLevel =";
  v18[17] = [NSNumber numberWithUnsignedInteger:resolveLevel];
  v18[18] = v4;
  v18[19] = @"resolveSlice =";
  v18[20] = [NSNumber numberWithUnsignedInteger:a2->resolveSlice];
  v18[21] = v4;
  v18[22] = @"resolveDepthPlane =";
  v18[23] = [NSNumber numberWithUnsignedInteger:a2->resolveDepthPlane];
  v18[24] = v4;
  v18[25] = @"resolveFilter =";
  unint64_t resolveFilter = a2->resolveFilter;
  if (resolveFilter > 2) {
    size_t v9 = @"Unknown";
  }
  else {
    size_t v9 = (__CFString *)*((void *)&off_1E52217A0 + resolveFilter);
  }
  v18[26] = v9;
  v18[27] = v4;
  v18[28] = @"loadAction =";
  loadActiouint64_t n = a2->loadAction;
  if (loadAction > 2) {
    unint64_t v11 = @"Unknown";
  }
  else {
    unint64_t v11 = (__CFString *)*((void *)&off_1E52217B8 + loadAction);
  }
  v18[29] = v11;
  v18[30] = v4;
  v18[31] = @"storeAction =";
  storeActiouint64_t n = a2->storeAction;
  if (storeAction > 4) {
    size_t v13 = @"Unknown";
  }
  else {
    size_t v13 = (__CFString *)*((void *)&off_1E52217D0 + storeAction);
  }
  v18[32] = v13;
  v18[33] = v4;
  size_t v14 = @"none";
  if (a2->storeActionOptions) {
    size_t v14 = 0;
  }
  size_t v15 = @"MTLStoreActionOptionCustomSamplePositions";
  if ((a2->storeActionOptions & 1) == 0) {
    size_t v15 = v14;
  }
  v18[34] = @"storeActionOptions =";
  v18[35] = v15;
  v18[36] = v4;
  v18[37] = @"clearDepth =";
  v18[38] = [NSNumber numberWithDouble:a2->clearDepth];
  v18[39] = v4;
  if (a2->yInvert) {
    uint64_t v16 = @"YES";
  }
  else {
    uint64_t v16 = @"NO";
  }
  v18[40] = @"yInvert =";
  v18[41] = v16;
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v18, 42), "componentsJoinedByString:", @" ");
}

uint64_t stencilAttachmentFormattedDescription(uint64_t a1, const MTLRenderPassAttachmentDescriptorPrivate *a2)
{
  v21[42] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 4;
  uint64_t v4 = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  v21[0] = v4;
  v21[1] = @"texture =";
  if (a2->texture) {
    uint64_t v5 = (__CFString *)[(MTLTextureImplementation *)a2->texture formattedDescription:v3];
  }
  else {
    uint64_t v5 = @"<null>";
  }
  void v21[2] = v5;
  v21[3] = v4;
  v21[4] = @"level =";
  void v21[5] = [NSNumber numberWithUnsignedInteger:a2->level];
  v21[6] = v4;
  v21[7] = @"slice =";
  v21[8] = [NSNumber numberWithUnsignedInteger:a2->slice];
  v21[9] = v4;
  v21[10] = @"depthPlane =";
  void v21[11] = [NSNumber numberWithUnsignedInteger:a2->depthPlane];
  v21[12] = v4;
  resolveTexture = a2->resolveTexture;
  unint64_t resolveLevel = a2->resolveLevel;
  if (!resolveTexture) {
    resolveTexture = (MTLTextureImplementation *)@"<null>";
  }
  v21[13] = @"resolveTexture =";
  v21[14] = resolveTexture;
  v21[15] = v4;
  v21[16] = @"resolveLevel =";
  v21[17] = [NSNumber numberWithUnsignedInteger:resolveLevel];
  v21[18] = v4;
  v21[19] = @"resolveSlice =";
  v21[20] = [NSNumber numberWithUnsignedInteger:a2->resolveSlice];
  v21[21] = v4;
  v21[22] = @"resolveDepthPlane =";
  v21[23] = [NSNumber numberWithUnsignedInteger:a2->resolveDepthPlane];
  v21[24] = v4;
  v21[25] = @"loadAction =";
  loadActiouint64_t n = a2->loadAction;
  if (loadAction > 2) {
    size_t v9 = @"Unknown";
  }
  else {
    size_t v9 = (__CFString *)*((void *)&off_1E52217B8 + loadAction);
  }
  v21[26] = v9;
  v21[27] = v4;
  v21[28] = @"storeAction =";
  storeActiouint64_t n = a2->storeAction;
  unint64_t v11 = @"Unknown";
  if (storeAction <= 4) {
    unint64_t v11 = (__CFString *)*((void *)&off_1E52217D0 + storeAction);
  }
  v21[29] = v11;
  v21[30] = v4;
  uint64_t v12 = @"none";
  if (a2->storeActionOptions) {
    uint64_t v12 = 0;
  }
  size_t v13 = @"MTLStoreActionOptionCustomSamplePositions";
  if ((a2->storeActionOptions & 1) == 0) {
    size_t v13 = v12;
  }
  v21[31] = @"storeActionOptions =";
  v21[32] = v13;
  v21[33] = v4;
  v21[34] = @"clearStencil =";
  uint64_t v14 = [NSNumber numberWithUnsignedInt:a2->clearStencil];
  unint64_t stencilResolveFilter = a2->stencilResolveFilter;
  uint64_t v16 = @"MTLMultisampleStencilResolveFilterDepthResolvedSample";
  if (stencilResolveFilter != 1) {
    uint64_t v16 = @"Unknown";
  }
  BOOL v17 = stencilResolveFilter == 0;
  int v18 = @"MTLMultisampleStencilResolveFilterSample0";
  v21[35] = v14;
  v21[36] = v4;
  if (!v17) {
    int v18 = v16;
  }
  v21[37] = @"stencilResolveFilter =";
  v21[38] = v18;
  v21[39] = v4;
  v21[40] = @"yInvert =";
  uint64_t v19 = @"YES";
  if (!a2->yInvert) {
    uint64_t v19 = @"NO";
  }
  v21[41] = v19;
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v21, 42), "componentsJoinedByString:", @" ");
}

BOOL equalAttachmentPrivate(const MTLRenderPassAttachmentDescriptorPrivate *a1, const MTLRenderPassAttachmentDescriptorPrivate *a2)
{
  return a1->texture == a2->texture
      && a1->resolveTexture == a2->resolveTexture
      && a1->level == a2->level
      && a1->slice == a2->slice
      && a1->depthPlane == a2->depthPlane
      && a1->resolveFilter == a2->resolveFilter
      && a1->clearColor.red == a2->clearColor.red
      && a1->clearColor.green == a2->clearColor.green
      && a1->clearColor.blue == a2->clearColor.blue
      && a1->clearColor.alpha == a2->clearColor.alpha
      && a1->clearDepth == a2->clearDepth
      && a1->clearStencil == a2->clearStencil
      && a1->stencilResolveFilter == a2->stencilResolveFilter
      && a1->loadAction == a2->loadAction
      && a1->yInvert == a2->yInvert
      && a1->storeActionOptions == a2->storeActionOptions
      && a1->storeAction == a2->storeAction;
}

BOOL equalSampleBufferPrivate(const MTLRenderPassSampleBufferAttachmentDescriptorPrivate *a1, const MTLRenderPassSampleBufferAttachmentDescriptorPrivate *a2)
{
  return a1->sampleBuffer == a2->sampleBuffer
      && a1->startOfVertexSampleIndex == a2->startOfVertexSampleIndex
      && a1->endOfVertexSampleIndex == a2->endOfVertexSampleIndex
      && a1->startOfFragmentSampleIndex == a2->startOfFragmentSampleIndex
      && a1->endOfFragmentSampleIndex == a2->endOfFragmentSampleIndex;
}

uint64_t _MTLCompatibleTextureDataTypeAndPixelFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  MTLPixelFormatGetInfoForDevice(0, a2, (uint64_t)v4);
  return _MTLCompatibleTextureDataTypeAndPixelFormatInfo(a1, (uint64_t)v4);
}

uint64_t _MTLCompatibleTextureDataTypeAndPixelFormatInfo(uint64_t a1, uint64_t a2)
{
  if (a1 > 32)
  {
    if (a1 > 40)
    {
      if (a1 == 41)
      {
        int v2 = 0x200000;
        return (*(_DWORD *)(a2 + 8) & v2) != 0;
      }
      if (a1 == 85)
      {
        int v2 = 0x20000000;
        return (*(_DWORD *)(a2 + 8) & v2) != 0;
      }
    }
    else
    {
      if (a1 == 33)
      {
        int v2 = 0x80000;
        return (*(_DWORD *)(a2 + 8) & v2) != 0;
      }
      if (a1 == 37)
      {
        int v2 = 0x100000;
        return (*(_DWORD *)(a2 + 8) & v2) != 0;
      }
    }
LABEL_22:
    abort();
  }
  if (a1 > 15)
  {
    if (a1 == 16)
    {
      int v2 = 0x20000;
      return (*(_DWORD *)(a2 + 8) & v2) != 0;
    }
    if (a1 == 29)
    {
      int v2 = 0x40000;
      return (*(_DWORD *)(a2 + 8) & v2) != 0;
    }
    goto LABEL_22;
  }
  if (!a1) {
    return 1;
  }
  if (a1 != 3) {
    goto LABEL_22;
  }
  int v2 = 0x10000;
  return (*(_DWORD *)(a2 + 8) & v2) != 0;
}

__CFString *MTLDataTypeString(unint64_t a1)
{
  if (a1 > 0x87) {
    return @"Unknown";
  }
  else {
    return off_1E5221928[a1];
  }
}

__CFString *MTLTagTypeString(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5221D68[a1];
  }
}

__CFString *argumentAccessNames(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5221D88[a1];
  }
}

uint64_t MTLAddMessageObserver(void *a1, uint64_t a2)
{
  if (_MTLCreateNotifierArrayDispatchQueue(void)::once != -1) {
    dispatch_once(&_MTLCreateNotifierArrayDispatchQueue(void)::once, &__block_literal_global_105);
  }
  NSSelectorFromString(&cfstr_Baseobject.isa);
  [a1 device];
  if (objc_opt_respondsToSelector()) {
    objc_msgSend(a1, "setDevice:", objc_msgSend((id)objc_msgSend(a1, "device"), "baseObject"));
  }
  if (!s_notifierArray) {
    dispatch_sync((dispatch_queue_t)s_notifierArrayDispatchQueue, &__block_literal_global_17);
  }
  uint64_t v7 = 0;
  unint64_t v8 = &v7;
  uint64_t v9 = 0x3052000000;
  uint64_t v10 = __Block_byref_object_copy__11;
  unint64_t v11 = __Block_byref_object_dispose__11;
  uint64_t v12 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MTLAddMessageObserver_block_invoke_73;
  block[3] = &unk_1E5221DD8;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = &v7;
  dispatch_sync((dispatch_queue_t)s_notifierArrayDispatchQueue, block);
  uint64_t v4 = v8[5];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void __MTLAddMessageObserver_block_invoke()
{
  if (!s_notifierArray) {
    s_notifierArray = objc_opt_new();
  }
}

void __MTLAddMessageObserver_block_invoke_73(void *a1)
{
  id v2 = [[_MTLMessageNotifier alloc] init:a1[5] filter:a1[4]];
  [(id)s_notifierArray addObject:v2];
  *(void *)(*(void *)(a1[6] + 8) + 40) = v2;
}

void MTLRemoveMessageObserver(uint64_t a1)
{
  if (_MTLCreateNotifierArrayDispatchQueue(void)::once != -1) {
    dispatch_once(&_MTLCreateNotifierArrayDispatchQueue(void)::once, &__block_literal_global_105);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MTLRemoveMessageObserver_block_invoke;
  block[3] = &unk_1E521F9E8;
  block[4] = a1;
  dispatch_sync((dispatch_queue_t)s_notifierArrayDispatchQueue, block);
}

uint64_t __MTLRemoveMessageObserver_block_invoke(uint64_t a1)
{
  return [(id)s_notifierArray removeObject:*(void *)(a1 + 32)];
}

void _MTLNotifyMessageObservers(uint64_t a1, uint64_t a2)
{
  if (_MTLCreateNotifierArrayDispatchQueue(void)::once != -1) {
    dispatch_once(&_MTLCreateNotifierArrayDispatchQueue(void)::once, &__block_literal_global_105);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = ___MTLNotifyMessageObservers_block_invoke;
  _OWORD v4[3] = &unk_1E5220578;
  v4[4] = a1;
  v4[5] = a2;
  dispatch_sync((dispatch_queue_t)s_notifierArrayDispatchQueue, v4);
}

uint64_t _MTLMessageTypeFromFailureType(unint64_t a1)
{
  if (a1 > 4) {
    return 0;
  }
  else {
    return qword_1828F2158[a1];
  }
}

void ___ZL36_MTLCreateNotifierArrayDispatchQueuev_block_invoke()
{
  if (!s_notifierArrayDispatchQueue) {
    s_notifierArrayDispatchQueue = (uint64_t)dispatch_queue_create("com.Metal.NotifierArray", 0);
  }
}

uint64_t pipelineColorAttachmentFormattedDescription(uint64_t a1, void *a2)
{
  v12[33] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unint64_t *)[a2 _descriptorPrivate];
  uint64_t v4 = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  id v12[2] = objc_msgSend(NSString, "stringWithUTF8String:", MTLPixelFormatGetName(*v3 >> 36), v4, @"pixelFormat =");
  _OWORD v12[3] = v4;
  v12[4] = @"blending =";
  unint64_t v5 = *v3;
  long long v6 = @"YES";
  if ((v5 & 1) == 0) {
    long long v6 = @"NO";
  }
  v12[5] = v6;
  v12[6] = v4;
  v12[7] = @"Source blend factors:";
  v12[8] = v4;
  v12[9] = @"RGB   =";
  v12[10] = MTLBlendFactorString((MTLBlendFactor)((v5 >> 7) & 0x1F));
  v12[11] = v4;
  v12[12] = @"Alpha =";
  v12[13] = MTLBlendFactorString((MTLBlendFactor)((v5 >> 12) & 0x1F));
  v12[14] = v4;
  v12[15] = @"Destination blend factors:";
  v12[16] = v4;
  v12[17] = @"RGB   =";
  v12[18] = MTLBlendFactorString((MTLBlendFactor)((v5 >> 17) & 0x1F));
  v12[19] = v4;
  v12[20] = @"Alpha =";
  v12[21] = MTLBlendFactorString((MTLBlendFactor)((v5 >> 22) & 0x1F));
  v12[22] = v4;
  v12[23] = @"Blend operations:";
  v12[24] = v4;
  v12[25] = @"RGB   =";
  unint64_t v7 = (v5 >> 1) & 7;
  if (v7 > 4) {
    unint64_t v8 = @"Unknown";
  }
  else {
    unint64_t v8 = off_1E5221EB8[v7];
  }
  v12[26] = v8;
  v12[27] = v4;
  v12[28] = @"Alpha =";
  unint64_t v9 = (v5 >> 4) & 7;
  if (v9 > 4) {
    uint64_t v10 = @"Unknown";
  }
  else {
    uint64_t v10 = off_1E5221EB8[v9];
  }
  v12[29] = v10;
  v12[30] = v4;
  v12[31] = @"writeMask =";
  v12[32] = MTLColorWriteMaskString((v5 >> 27) & 0xF);
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v12, 33), "componentsJoinedByString:", @" ");
}

__CFString *MTLBlendFactorString(MTLBlendFactor a1)
{
  if (a1 > MTLBlendFactorOneMinusSource1Alpha) {
    return @"Unknown";
  }
  else {
    return off_1E5221E20[a1];
  }
}

__CFString *MTLColorWriteMaskString(uint64_t a1)
{
  if (!a1) {
    return @"None";
  }
  char v1 = a1;
  id v2 = (void *)[MEMORY[0x1E4F28E78] string];
  uint64_t v3 = v2;
  if ((v1 & 8) == 0)
  {
    if ((v1 & 4) == 0) {
      goto LABEL_4;
    }
LABEL_9:
    [v3 appendString:@"G"];
    if ((v1 & 2) == 0)
    {
LABEL_5:
      if ((v1 & 1) == 0) {
        return (__CFString *)v3;
      }
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  [v2 appendString:@"R"];
  if ((v1 & 4) != 0) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v1 & 2) == 0) {
    goto LABEL_5;
  }
LABEL_10:
  [v3 appendString:@"B"];
  if (v1) {
LABEL_11:
  }
    [v3 appendString:@"A"];
  return (__CFString *)v3;
}

uint64_t pipelineColorAttachmentDefaultFormattedDescription(uint64_t a1)
{
  v3[32] = *MEMORY[0x1E4F143B8];
  v3[0] = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  v3[1] = @"pixelFormat =";
  v3[2] = [NSString stringWithUTF8String:MTLPixelFormatGetName(0)];
  void v3[3] = v3[0];
  v3[4] = @"blending = NO";
  void v3[5] = v3[0];
  void v3[6] = @"Source blend factors:";
  v3[7] = v3[0];
  v3[8] = @"RGB   =";
  v3[9] = @"MTLBlendFactorOne";
  v3[10] = v3[0];
  v3[11] = @"Alpha =";
  v3[12] = @"MTLBlendFactorOne";
  v3[13] = v3[0];
  v3[14] = @"Destination blend factors:";
  v3[15] = v3[0];
  v3[16] = @"RGB   =";
  v3[17] = @"MTLBlendFactorZero";
  v3[18] = v3[0];
  v3[19] = @"Alpha =";
  v3[20] = @"MTLBlendFactorZero";
  v3[21] = v3[0];
  v3[22] = @"Blend operations:";
  v3[23] = v3[0];
  v3[24] = @"RGB   =";
  v3[25] = @"MTLBlendOperationAdd";
  v3[26] = v3[0];
  v3[27] = @"Alpha =";
  v3[28] = @"MTLBlendOperationAdd";
  v3[29] = v3[0];
  v3[30] = @"writeMask =";
  char v1 = (void *)[MEMORY[0x1E4F28E78] string];
  [v1 appendString:@"R"];
  [v1 appendString:@"G"];
  [v1 appendString:@"B"];
  [v1 appendString:@"A"];
  v3[31] = v1;
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v3, 32), "componentsJoinedByString:", @" ");
}

uint64_t MTLRenderPipelineColorAttachmentDescriptorDescription(void *a1)
{
  void v9[9] = *MEMORY[0x1E4F143B8];
  char v1 = (unint64_t *)[a1 _descriptorPrivate];
  v8[0] = @"Pixel Format";
  v9[0] = [NSString stringWithUTF8String:MTLPixelFormatGetName(*v1 >> 36)];
  v8[1] = @"Blending Enabled";
  v9[1] = [NSNumber numberWithUnsignedInt:*(_DWORD *)v1 & 1];
  _OWORD v8[2] = @"Source RGB Blend Factor";
  unint64_t v2 = *v1;
  _OWORD v9[2] = MTLBlendFactorString((MTLBlendFactor)((v2 >> 7) & 0x1F));
  v8[3] = @"Destination RGB Blend Factor";
  void v9[3] = MTLBlendFactorString((MTLBlendFactor)((v2 >> 17) & 0x1F));
  _OWORD v8[4] = @"Source Alpha Blend Factor";
  v9[4] = MTLBlendFactorString((MTLBlendFactor)((v2 >> 12) & 0x1F));
  v8[5] = @"Destination Alpha Blend Factor";
  v9[5] = MTLBlendFactorString((MTLBlendFactor)((v2 >> 22) & 0x1F));
  v8[6] = @"RGB Blend Operation";
  unint64_t v3 = (v2 >> 1) & 7;
  if (v3 > 4) {
    uint64_t v4 = @"Unknown";
  }
  else {
    uint64_t v4 = off_1E5221EB8[v3];
  }
  v9[6] = v4;
  v8[7] = @"Alpha Blend Operation";
  unint64_t v5 = (v2 >> 4) & 7;
  if (v5 > 4) {
    long long v6 = @"Unknown";
  }
  else {
    long long v6 = off_1E5221EB8[v5];
  }
  v9[7] = v6;
  v8[8] = @"Write Mask";
  unsigned char v9[8] = MTLColorWriteMaskString((v2 >> 27) & 0xF);
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:v8 count:9];
}

uint64_t MTLRenderPipelineColorAttachmentDescriptorDefaultDescription(void)
{
  v3[9] = *MEMORY[0x1E4F143B8];
  v2[0] = @"Pixel Format";
  v3[0] = [NSString stringWithUTF8String:MTLPixelFormatGetName(0)];
  v3[1] = MEMORY[0x1E4F1CC28];
  v2[1] = @"Blending Enabled";
  void v2[2] = @"Source RGB Blend Factor";
  v3[2] = @"MTLBlendFactorOne";
  void v3[3] = @"MTLBlendFactorZero";
  _OWORD v2[3] = @"Destination RGB Blend Factor";
  void v2[4] = @"Source Alpha Blend Factor";
  v3[4] = @"MTLBlendFactorOne";
  void v3[5] = @"MTLBlendFactorZero";
  v2[5] = @"Destination Alpha Blend Factor";
  v2[6] = @"RGB Blend Operation";
  void v3[6] = @"MTLBlendOperationAdd";
  v3[7] = @"MTLBlendOperationAdd";
  v2[7] = @"Alpha Blend Operation";
  v2[8] = @"Write Mask";
  unint64_t v0 = (void *)[MEMORY[0x1E4F28E78] string];
  [v0 appendString:@"R"];
  [v0 appendString:@"G"];
  [v0 appendString:@"B"];
  [v0 appendString:@"A"];
  v3[8] = v0;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:v2 count:9];
}

MTLBufferBindingInternal *CreateTraceBufferBinding(unsigned int a1)
{
  LOBYTE(v3) = 0;
  char v1 = [[MTLBufferBindingInternal alloc] initWithName:@"__resource_tracking_impl_trace_buffer" type:0 access:1 isActive:1 locationIndex:a1 arraySize:0 dataType:45 pixelFormat:0 aluType:45 isConstantBuffer:v3 dataSize:1 alignment:1];
  [(MTLBindingInternal *)v1 setIsArgument:1];
  return v1;
}

void sub_1828703F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1828706E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18287128C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *inputPrimitiveTopologyName(MTLPrimitiveTopologyClass a1)
{
  if (a1 >= 4) {
    abort();
  }
  return off_1E5221EE0[a1];
}

BOOL isPrimitiveTopologyClassValid(MTLPrimitiveTopologyClass a1)
{
  return a1 < 4;
}

__CFString *MTLVertexAmplificationModeString(uint64_t a1)
{
  char v1 = @"Unknown";
  if (!a1) {
    char v1 = @"MTLVertexAmplificationModeCount";
  }
  if (a1 == 1) {
    return @"MTLVertexAmplificationModeMask";
  }
  else {
    return v1;
  }
}

BOOL isVertexAmplificationModeValid(unint64_t a1)
{
  return a1 < 2;
}

void validateRenderRasterAndLater<MTLMeshRenderPipelineDescriptorPrivate>(uint64_t a1, void *a2, void *a3)
{
  v151[56] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = a3[4];
  int v7 = [a2 supportsSeparateVisibilityAndShadingRate];
  unint64_t v13 = a3[5];
  if (!v7)
  {
    if (v13) {
      _MTLMessageContextPush_(a1, 4, @"colorSampleCount expected to be 0.", v8, v9, v10, v11, v12, v141);
    }
    goto LABEL_17;
  }
  unint64_t v14 = a3[4];
  if (v13) {
    BOOL v15 = v13 > v14;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    _MTLMessageContextPush_(a1, 4, @"colorSampleCount expected to be smaller or equal to rasterSampleCount", v8, v9, v10, v11, v12, v141);
    unint64_t v14 = a3[4];
    unint64_t v13 = a3[5];
    if (v14)
    {
LABEL_7:
      if (v14 < v13)
      {
        _MTLMessageContextPush_(a1, 4, @"rasterSampleCount expected to be greater or equal to colorSampleCount", v8, v9, v10, v11, v12, v141);
        unint64_t v13 = a3[5];
      }
    }
  }
  else if (v14)
  {
    goto LABEL_7;
  }
  if (v13)
  {
    char v16 = objc_msgSend(a2, "supportsTextureSampleCount:");
    unint64_t v22 = a3[5];
    if ((v16 & 1) == 0)
    {
      _MTLMessageContextPush_(a1, 4, @"colorSampleCount (%lu) is not supported by device.", v17, v18, v19, v20, v21, a3[5]);
      unint64_t v22 = a3[5];
    }
    if (v22) {
      unint64_t v6 = v22;
    }
  }
LABEL_17:
  unint64_t v142 = v6;
  long long v144 = a2;
  unint64_t v143 = [a2 maxColorAttachments];
  uint64_t v23 = 0;
  int v24 = 0;
  BOOL v145 = 0;
  for (unint64_t i = 0; i != 8; ++i)
  {
    uint64_t v26 = *(void *)(*a3 + 8 + 8 * i);
    if (!v26) {
      continue;
    }
    uint64_t v27 = *(void *)(v26 + 8) >> 36;
    if (!v27) {
      continue;
    }
    uint64_t v149 = 0;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v146 = 0u;
    MTLPixelFormatGetInfoForDevice(v144, v27, (uint64_t)&v146);
    unint64_t v33 = *(void *)(v26 + 8);
    if (v33)
    {
      if ((BYTE8(v146) & 8) == 0)
      {
        _MTLMessageContextPush_(a1, 4, @"Blending is enabled for render target %lu; however, the pixelformat %s for this render target is not blendable.",
          v28,
          v29,
          v30,
          v31,
          v32,
          i);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0xF80) >= 0x980)
      {
        _MTLMessageContextPush_(a1, 4, @"factor is not a valid MTLBlendFactor.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0x1F000) >= 0x13000)
      {
        _MTLMessageContextPush_(a1, 4, @"factor is not a valid MTLBlendFactor.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0x3E0000) >= 0x260000)
      {
        _MTLMessageContextPush_(a1, 4, @"factor is not a valid MTLBlendFactor.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if (((v33 >> 22) & 0x1F) >= 0x13)
      {
        _MTLMessageContextPush_(a1, 4, @"factor is not a valid MTLBlendFactor.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0xE) >= 0xA)
      {
        _MTLMessageContextPush_(a1, 4, @"func is not a valid MTLBlendOperation.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0x70) >= 0x50)
      {
        _MTLMessageContextPush_(a1, 4, @"func is not a valid MTLBlendOperation.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      validateMTLPixelFormat(v33 >> 36, a1);
      unsigned int v40 = *(_DWORD *)(v26 + 8);
      uint64_t v41 = (v40 >> 7) & 0x1F;
      if (i)
      {
        validateBlendFactorNotDualSourced(i, v41, a1, v35, v36, v37, v38, v39);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 12) & 0x1F, a1, v42, v43, v44, v45, v46);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 17) & 0x1F, a1, v47, v48, v49, v50, v51);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 22) & 0x1F, a1, v52, v53, v54, v55, v56);
      }
      else
      {
        blendFactorSource((v40 >> 7) & 0x1F, v41, v34, v35, v36, v37, v38, v39);
        if (v59 == 2
          || (blendFactorSource((*(_DWORD *)(v26 + 8) >> 12) & 0x1F, v57, v58, v28, v29, v30, v31, v32), v62 == 2)
          || (blendFactorSource((*(_DWORD *)(v26 + 8) >> 17) & 0x1F, v60, v61, v28, v29, v30, v31, v32), v65 == 2))
        {
          BOOL v66 = 1;
        }
        else
        {
          blendFactorSource((*(_DWORD *)(v26 + 8) >> 22) & 0x1F, v63, v64, v28, v29, v30, v31, v32);
          BOOL v66 = v71 == 2;
        }
        BOOL v145 = v66;
      }
    }
    uint64_t v67 = (*(void *)(*(void *)(*a3 + 8 + 8 * i) + 8) >> 27) & 0xFLL;
    if (v67) {
      BOOL v68 = v67 == 15;
    }
    else {
      BOOL v68 = 1;
    }
    if (!v68 && (BYTE9(v146) & 0x80) != 0) {
      _MTLMessageContextPush_(a1, 4, @"writeMask(0x%lx) is not MTLColorWriteMaskAll or MTLColorWriteMaskNone for render target %lu; however, the pixelformat %s for this render target requires MTLColorWriteMaskAll or MTLColorWriteMaskNone.",
    }
        v28,
        v29,
        v30,
        v31,
        v32,
        v67);
    if (i >= v143) {
      _MTLMessageContextPush_(a1, 4, @"MTLRenderPipelineDescriptor color render target(%lu) exceeds platform max(%lu).", v28, v29, v30, v31, v32, i);
    }
    if (BYTE8(v146))
    {
      if ((BYTE8(v146) & 0x10) == 0) {
        goto LABEL_59;
      }
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, @"pixelFormat, for color render target(%lu), is not a valid MTLPixelFormat.", v28, v29, v30, v31, v32, i);
      if ((BYTE8(v146) & 0x10) == 0) {
LABEL_59:
      }
        _MTLMessageContextPush_(a1, 4, @"pixelFormat, for color render target(%lu), %s is not color renderable.", v28, v29, v30, v31, v32, i);
    }
    if (i != 0 && v145) {
      _MTLMessageContextPush_(a1, 4, @"Dual source blending is used in combination with multiple render targets", v28, v29, v30, v31, v32, v141);
    }
    v150[v23] = v27;
    uint64_t v69 = &v151[7 * v23++];
    long long v70 = v147;
    *(_OWORD *)uint64_t v69 = v146;
    *((_OWORD *)v69 + 1) = v70;
    *((_OWORD *)v69 + 2) = v148;
    v69[6] = v149;
    int v24 = 1;
  }
  uint64_t v72 = *(void *)(*a3 + 8);
  if (v72)
  {
    uint64_t v73 = *(void *)(v72 + 8) >> 36;
    if (v73)
    {
      uint64_t v149 = 0;
      long long v147 = 0u;
      long long v148 = 0u;
      long long v146 = 0u;
      MTLPixelFormatGetInfoForDevice(v144, v73, (uint64_t)&v146);
      uint64_t v79 = *(void *)((char *)a3 + 60);
      char v80 = BYTE8(v146);
      if ((v79 & 1) != 0 && (BYTE8(v146) & 8) == 0)
      {
        _MTLMessageContextPush_(a1, 4, @"MTLRenderPipelineDescriptor with alphaToCoverageEnabled requires a float/unorm pixel format, but colorAttachments[0].pixelFormat(%s) is not blendable", v74, v75, v76, v77, v78, v146);
        char v80 = BYTE8(v146);
        if ((*(void *)((char *)a3 + 60) & 2) != 0) {
          goto LABEL_65;
        }
      }
      else if ((v79 & 2) != 0)
      {
LABEL_65:
        if ((v80 & 8) == 0) {
          _MTLMessageContextPush_(a1, 4, @"MTLRenderPipelineDescriptor with alphaToOneEnabled requires a float/unorm pixel format, but colorAttachments[0].pixelFormat(%s) is not blendable", v74, v75, v76, v77, v78, v146);
        }
      }
    }
  }
  unint64_t v81 = [v144 maxFramebufferStorageBits];
  uint64_t v82 = MTLPixelFormatComputeTotalSizeUsed((uint64_t)v151, v150, v23, v142 > 1);
  if (([v144 isLargeMRTSupported] & 1) == 0 && 8 * v82 > v81) {
    _MTLMessageContextPush_(a1, 4, @"This set of render targets requires %lu bytes of pixel storage. This device supports %lu bytes.", v83, v84, v85, v86, v87, v82 & 0x1FFFFFFFFFFFFFFFLL);
  }
  uint64_t v88 = a3[1];
  if (v88)
  {
    MTLPixelFormatGetInfoForDevice(v144, v88, (uint64_t)&v146);
    uint64_t v94 = v146;
    LOBYTE(v81) = BYTE8(v146);
    if (BYTE8(v146))
    {
      if ((BYTE8(v146) & 0x20) != 0) {
        goto LABEL_73;
      }
LABEL_99:
      _MTLMessageContextPush_(a1, 4, @"depthAttachmentPixelFormat %s is not depth renderable.", v89, v90, v91, v92, v93, v94);
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, @"depthAttachmentPixelFormat is not a valid MTLPixelFormat.", v89, v90, v91, v92, v93, v141);
      if ((v81 & 0x20) == 0) {
        goto LABEL_99;
      }
    }
LABEL_73:
    int v24 = 1;
  }
  uint64_t v95 = a3[2];
  if (v95)
  {
    MTLPixelFormatGetInfoForDevice(v144, v95, (uint64_t)&v146);
    uint64_t v101 = v146;
    LOBYTE(i) = BYTE8(v146);
    if (BYTE8(v146))
    {
      if ((BYTE8(v146) & 0x40) != 0) {
        goto LABEL_77;
      }
LABEL_101:
      _MTLMessageContextPush_(a1, 4, @"stencilAttachmentPixelFormat %s is not stencil renderable.", v96, v97, v98, v99, v100, v101);
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, @"stencilAttachmentPixelFormat is not a valid MTLPixelFormat.", v96, v97, v98, v99, v100, v141);
      if ((i & 0x40) == 0) {
        goto LABEL_101;
      }
    }
LABEL_77:
    int v24 = 1;
  }
  if (dyld_program_sdk_at_least()
    && (([v144 supportsRenderPassWithoutRenderTarget] | v24) & 1) == 0)
  {
    _MTLMessageContextPush_(a1, 4, @"No valid pixelFormats set.", v102, v103, v104, v105, v106, v141);
  }
  uint64_t v107 = a3[1];
  uint64_t v108 = a3[2];
  if (v107 && v108 && i & 0x20 | v81 & 0x40 && v107 != v108)
  {
    uint64_t Name = MTLPixelFormatGetName(v107);
    MTLPixelFormatGetName(a3[2]);
    _MTLMessageContextPush_(a1, 4, @"depthAttachmentPixelFormat (%s) and stencilAttachmentPixelFormat (%s) must match.", v130, v131, v132, v133, v134, Name);
    uint64_t v108 = a3[2];
    if (a3[1]) {
      goto LABEL_86;
    }
  }
  else if (v107)
  {
LABEL_86:
    if (v108)
    {
      char v109 = [v144 supportsSeparateDepthStencil];
      if (i & 0x20 | v81 & 0x40 || (v109 & 1) == 0)
      {
        uint64_t v110 = a3[1];
        if (v110 != a3[2])
        {
          uint64_t v135 = MTLPixelFormatGetName(v110);
          MTLPixelFormatGetName(a3[2]);
          _MTLMessageContextPush_(a1, 4, @"depthAttachmentPixelFormat (%s) and stencilAttachmentPixelFormat (%s) must match.", v136, v137, v138, v139, v140, v135);
        }
      }
    }
  }
  unint64_t v111 = *(void *)((char *)a3 + 60);
  if ((v111 & 0x7800000000) == 0)
  {
    _MTLMessageContextPush_(a1, 4, @"maxVertexAmplificationCount (%u) cannot be set to zero.", v102, v103, v104, v105, v106, 0);
    unint64_t v111 = *(void *)((char *)a3 + 60);
  }
  if (([v144 supportsVertexAmplificationCount:(v111 >> 35) & 0xF] & 1) == 0) {
    _MTLMessageContextPush_(a1, 4, @"maxVertexAmplificationCount (%u) is not supported on this device. See supportsVertexAmplificationCount:(NSUInteger).", v112, v113, v114, v115, v116, (*(void *)((char *)a3 + 60) >> 35) & 0xFLL);
  }
  if (([v144 supportsTextureWriteRoundingMode:a3[3]] & 1) == 0)
  {
    uint64_t v123 = MTLRoundingModeString(a3[3]);
    _MTLMessageContextPush_(a1, 4, @"device does not support %@", v124, v125, v126, v127, v128, (uint64_t)v123);
  }
  validateMTLCompareFunction((*(void *)((char *)a3 + 60) >> 20) & 7, a1, v117, v118, v119, v120, v121, v122, v141);
  validateMTLPixelFormat(a3[1], a1);
  validateMTLPixelFormat(a3[2], a1);
}

dispatch_data_t createSerializedFragmentData<MTLMeshRenderPipelineDescriptorPrivate>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)(*(void *)a3 + 8 + v5);
    if (v7 && *(void *)(v7 + 8) >> 36) {
      ++v6;
    }
    v5 += 8;
  }
  while (v5 != 64);
  uint64_t v8 = *(void **)(a3 + 224);
  if (v8
    && ([v8 functions] && objc_msgSend((id)objc_msgSend(*(id *)(a3 + 224), "functions"), "count")
     || [*(id *)(a3 + 224) privateFunctions]
     && objc_msgSend((id)objc_msgSend(*(id *)(a3 + 224), "privateFunctions"), "count")))
  {
    int v9 = 1;
    uint64_t v10 = 24;
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = 16;
  }
  uint64_t v11 = v10 + 2 * v6;
  uint64_t v12 = MTLSerializePluginDataDictionary(objc_msgSend((id)objc_msgSend(*(id *)(a3 + 104), "device"), "pluginData"), 0);
  uint64_t v13 = MTLSerializePluginDataDictionary(*(void **)(a3 + 184), 0);
  uint64_t v39 = v12 + v11;
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  uint64_t v42 = v13;
  if (v9) {
    _MTLPopulateLinkedFunctionExtraData(*(const MTLLinkedFunctions **)(a3 + 224));
  }
  size_t size = v13 + v12 + v11;
  uint64_t v21 = malloc_type_malloc(size, 0xA19C7A3DuLL);
  uint64_t v22 = 0;
  int v23 = 0;
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  *((_DWORD *)v21 + 2) = (a2 << 6) & 0x40000000 | v6 | (((*(_DWORD *)(a3 + 60) >> 4) & 1) << 29);
  do
  {
    uint64_t v24 = *(void *)(*(void *)a3 + 8 + 8 * v22);
    if (v24)
    {
      unint64_t v25 = *(void *)(v24 + 8);
      if (v25 >> 36)
      {
        *((_WORD *)v21 + v23++ + 8) = WORD2(v25) & 0xFFF0 | v22;
        uint64_t v26 = *(void *)(v24 + 8);
        if (v26)
        {
          blendFactorSource((v26 >> 7) & 0x1F, v14, v15, v16, v17, v18, v19, v20);
          if (v27 == 2
            || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 12) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v28 == 2)
            || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 17) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v29 == 2)
            || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 22) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v30 == 2))
          {
            int v31 = *((_DWORD *)v21 + 2) | (0x10000 << v22) & 0xFF0000;
            *((_DWORD *)v21 + 2) = v31;
          }
          else
          {
            int v31 = *((_DWORD *)v21 + 2);
          }
          if ((v31 & 0xFF0000) != 0)
          {
            blendFactorSource((*(_DWORD *)(v24 + 8) >> 7) & 0x1F, v14, v15, v16, v17, v18, v19, v20);
            if (v32 == 2
              || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 12) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v33 == 2)
              || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 17) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v34 == 2)
              || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 22) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v35 == 2))
            {
              *((_DWORD *)v21 + 2) |= (256 << v22) & 0xFF00;
            }
          }
        }
      }
    }
    ++v22;
  }
  while (v22 != 8);
  uint64_t v36 = *(void *)(a3 + 16);
  *((_WORD *)v21 + 6) = *(void *)(a3 + 8);
  *((_WORD *)v21 + 7) = v36;
  if (v41)
  {
    *(_DWORD *)uint64_t v21 = v40;
    MTLSerializePluginDataDictionary(objc_msgSend((id)objc_msgSend(*(id *)(a3 + 104), "device"), "pluginData"), (unsigned char *)v21 + v40);
  }
  if (v42)
  {
    *((_DWORD *)v21 + 1) = v39;
    MTLSerializePluginDataDictionary(*(void **)(a3 + 184), (unsigned char *)v21 + v39);
  }
  uint64_t v37 = (void *)*MEMORY[0x1E4F143F0];

  return dispatch_data_create(v21, size, 0, v37);
}

void *__MTLSerializePluginDataDictionary_block_invoke(uint64_t a1, void *a2, void *a3)
{
  size_t v6 = [a2 length];
  __n128 result = (void *)[a3 length];
  size_t v8 = (size_t)result;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    uint64_t v10 = (_WORD *)(v9 + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    *uint64_t v10 = v6;
    v10[1] = (_WORD)result;
    uint64_t v11 = v10 + 2;
    memcpy(v10 + 2, (const void *)[a2 UTF8String], v6);
    __n128 result = memcpy((char *)v11 + v6, (const void *)[a3 bytes], v8);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v6 + v8 + 4;
  return result;
}

void MTLReleaseAssertionFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13 = [NSString alloc];
  if (a4)
  {
    id v15 = (id)[v13 initWithCString:a4 encoding:4];
    id v16 = (id)[[NSString alloc] initWithFormat:v15 arguments:&a9];
    uint64_t v14 = (void *)[[NSString alloc] initWithFormat:@"failed assertion %s at line %d in %s. %@", a3, a2, a1, v16];
  }
  else
  {
    uint64_t v14 = objc_msgSend(v13, "initWithFormat:", @"failed assertion %s at line %d in %s", a3, a2, a1, v17);
  }
  NSLog(&stru_1ECACAF48.isa, v14);
  abort();
}

uint64_t MTLGetWarningMode()
{
  if (initFailureModes(void)::pred != -1) {
    dispatch_once(&initFailureModes(void)::pred, &__block_literal_global_19);
  }
  return dword_1EB226A80;
}

void MTLSetWarningMode(int a1)
{
  if (initFailureModes(void)::pred != -1) {
    dispatch_once(&initFailureModes(void)::pred, &__block_literal_global_19);
  }
  dword_1EB226A80 = a1;
}

void MTLFailureTypeSetErrorModeType(unint64_t a1, int a2)
{
  if (initFailureModes(void)::pred != -1) {
    dispatch_once(&initFailureModes(void)::pred, &__block_literal_global_19);
  }
  if (a1 >= 5) {
    MTLFailureTypeSetErrorModeType_cold_1();
  }
  if (a1 == 4) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = a1;
  }
  errorModes[v4] = a2;
}

uint64_t MTLGetReportFailureBlock()
{
  return reportFailureBlock;
}

uint64_t MTLSetReportFailureBlock(uint64_t result)
{
  if (reportFailureBlock != result)
  {
    char v1 = (void *)result;

    __n128 result = [v1 copy];
    reportFailureBlocuint64_t k = result;
  }
  return result;
}

void *MTLIOAccelDeviceShmemPoolCreateShmem(uint64_t a1)
{
  unint64_t v2 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = v3 + 1;
    uint64_t v5 = v3[2];
    size_t v6 = (void *)v3[3];
    if (v5)
    {
      *(void *)(v5 + 24) = v6;
      uint64_t v7 = v3[2];
      size_t v6 = (void *)v3[3];
    }
    else
    {
      uint64_t v7 = 0;
      *(void *)(a1 + 16) = v6;
    }
    *size_t v6 = v7;
    --*(_DWORD *)(a1 + 28);
    v3[2] = 0;
    void v3[3] = 0;
    os_unfair_lock_unlock(v2);
    goto LABEL_8;
  }
  os_unfair_lock_unlock(v2);
  uint64_t v8 = [objc_alloc(*(Class *)(a1 + 32)) initWithDevice:*(void *)(a1 + 40) shmemSize:*(unsigned int *)(a1 + 48)];
  uint64_t v3 = (void *)v8;
  if (v8)
  {
    uint64_t v4 = (void *)(v8 + 8);
LABEL_8:
    void *v4 = a1;
    id v9 = (id)a1;
  }
  return v3;
}

void *MTLIOAccelCommandBufferStorageCreate(uint64_t a1, int a2)
{
  return MTLIOAccelCommandBufferStorageCreateExt(a1, a1 + 624, a2);
}

void *MTLIOAccelCommandBufferStorageCreateExt(uint64_t a1, uint64_t a2, int a3)
{
  size_t v6 = malloc_type_calloc(0x340uLL, 1uLL, 0xDB40AD81uLL);
  *(void *)size_t v6 = a1;
  Shmeuint64_t m = MTLIOAccelDeviceShmemPoolCreateShmem(*(void *)a2);
  if (!Shmem) {
    goto LABEL_6;
  }
  uint64_t v8 = Shmem[7];
  *((void *)v6 + 8) = Shmem;
  *((void *)v6 + 9) = v8;
  *((void *)v6 + 10) = Shmem[7] + *((unsigned int *)Shmem + 13);
  *((void *)v6 + 97) = v8;
  *((_DWORD *)v6 + 200) = -1;
  IOAccelResourceListInit();
  id v9 = MTLIOAccelDeviceShmemPoolCreateShmem(*(void *)(a2 + 8));
  if (!v9)
  {
    MTLIOAccelDeviceShmemRelease(*((os_unfair_lock_s **)v6 + 8));
LABEL_6:
    free(v6);
    return 0;
  }
  uint64_t v10 = v9[7];
  *((void *)v6 + 4) = v9;
  *((void *)v6 + 5) = v10;
  *((void *)v6 + 7) = v9[7] + *((unsigned int *)v9 + 13);
  *((void *)v6 + 6) = v9[7];
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11)
  {
    *((void *)v6 + 94) = *(void *)(a2 + 16);
    uint64_t v12 = malloc_type_calloc(1uLL, v11 << 6, 0x10B0040CDE4EDB6uLL);
    LODWORD(v11) = *(_DWORD *)(a2 + 24);
  }
  else
  {
    uint64_t v12 = 0;
  }
  *((void *)v6 + 92) = v12;
  *((_DWORD *)v6 + 190) = v11;
  ResourceList = *(MTLResourceList **)(a2 + 40);
  if (ResourceList) {
    ResourceList = MTLResourceListPoolCreateResourceList((MTLResourceListPool *)ResourceList);
  }
  *((void *)v6 + 88) = ResourceList;
  if (a3) {
    *((void *)v6 + 87) = MTLResourceListPoolCreateResourceList(*(MTLResourceListPool **)(a2 + 32));
  }
  else {
    *((void *)v6 + 87) = 0;
  }
  return v6;
}

void MTLIOAccelCommandBufferStorageGrowSegmentList(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unsigned int v3 = *(_DWORD *)(v2 + 52);
  if (v3 >= 0x200000) {
    uint64_t v4 = v3 + 0x100000;
  }
  else {
    uint64_t v4 = 2 * v3;
  }
  [*(id *)(v2 + 8) setShmemSize:v4];
  Shmeuint64_t m = MTLIOAccelDeviceShmemPoolCreateShmem(*(void *)(v2 + 8));
  if (!Shmem)
  {
    uint64_t v27 = *(void *)(a1 + 88);
    BOOL v28 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
    if (v27)
    {
      if (v28)
      {
        MTLIOAccelCommandBufferStorageGrowSegmentList_cold_2();
        abort();
      }
    }
    else if (v28)
    {
      MTLIOAccelCommandBufferStorageGrowSegmentList_cold_1();
    }
    abort();
  }
  size_t v6 = Shmem;
  memcpy((void *)Shmem[7], *(const void **)(a1 + 72), *(unsigned int *)(*(void *)(a1 + 64) + 52));
  MTLIOAccelDeviceShmemRelease(*(os_unfair_lock_s **)(a1 + 64));
  *(void *)(a1 + 64) = v6;
  if (*(_DWORD *)(a1 + 804))
  {
    uint64_t v11 = v6[7];
    uint64_t v12 = *(void *)(a1 + 96) - *(void *)(a1 + 72);
    uint64_t v13 = v11 + *((unsigned int *)v6 + 13);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = v13;
    uint64_t v14 = v11 + v12;
    *(void *)(a1 + 88) = v11;
    *(void *)(a1 + 96) = v14;
    *(void *)(a1 + 104) = v14 + 24;
LABEL_11:
    IOAccelResourceListReset();
    return;
  }
  int v15 = *(_DWORD *)(a1 + 800);
  if (!v15)
  {
    uint64_t v20 = *(void *)(a1 + 72);
    uint64_t v21 = *(void *)(a1 + 88) - v20;
    uint64_t v22 = *(void *)(a1 + 96) - v20;
    uint64_t v23 = v6[7];
    uint64_t v24 = v23 + *((unsigned int *)v6 + 13);
    *(void *)(a1 + 72) = v23;
    *(void *)(a1 + 80) = v24;
    uint64_t v25 = v23 + v21;
    *(void *)(a1 + 776) = v25;
    uint64_t v26 = v23 + v22;
    *(void *)(a1 + 88) = v25;
    *(void *)(a1 + 96) = v26;
    *(void *)(a1 + 104) = v26 + 24;
    goto LABEL_11;
  }
  if (v15 != 1) {
    MTLReleaseAssertionFailure((uint64_t)"_mtlIOAccelCommandBufferStorageRebaseShmemHeader", 510, (uint64_t)"false", 0, v7, v8, v9, v10, v29);
  }
  uint64_t v16 = *(void *)(a1 + 784) - *(void *)(a1 + 72);
  uint64_t v17 = v6[7];
  uint64_t v18 = v17 + *((unsigned int *)v6 + 13);
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v18;
  uint64_t v19 = v17 + v16;
  *(void *)(a1 + 784) = v19;
  *(void *)(a1 + 776) = v19;
}

void MTLIOAccelCommandBufferStorageDealloc(void *a1)
{
  if (a1[1])
  {
    MTLIOAccelCommandBufferStorageReset((uint64_t)a1);
    uint64_t v8 = (uint64_t *)a1[1];
    MTLIOAccelCommandBufferStoragePoolReturnStorage(v8, (uint64_t)a1, v2, v3, v4, v5, v6, v7);
  }
  else
  {
    uint64_t v9 = (os_unfair_lock_s *)a1[4];
    if (v9)
    {
      MTLIOAccelDeviceShmemRelease(v9);
      a1[4] = 0;
    }
    uint64_t v10 = (os_unfair_lock_s *)a1[8];
    if (v10)
    {
      MTLIOAccelDeviceShmemRelease(v10);
      a1[8] = 0;
    }
    IOAccelResourceListDestroy();
    MTLIOAccelCommandBufferStorageReleaseAllResources((uint64_t)a1);
    free(a1);
  }
}

void *MTLIOAccelCommandBufferStorageReset(uint64_t a1)
{
  MTLIOAccelCommandBufferStorageReleaseExtraResources(a1);
  uint64_t v2 = *(void **)(a1 + 696);
  if (v2) {
    [v2 releaseAllObjectsAndReset];
  }
  __n128 result = *(void **)(a1 + 704);
  if (result) {
    __n128 result = (void *)[result releaseAllObjectsAndReset];
  }
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  *(void *)(a1 + 776) = *(void *)(a1 + 72);
  *(_DWORD *)(a1 + 800) = -1;
  *(_DWORD *)(a1 + 808) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 760);
  if (v4)
  {
    uint64_t v5 = (void *)(*(void *)(a1 + 736) + 24);
    do
    {
      void *v5 = *(v5 - 2);
      v5 += 8;
      --v4;
    }
    while (v4);
  }
  *(void *)(a1 + 744) = 0;
  return result;
}

uint64_t MTLIOAccelCommandBufferStoragePoolReturnStorage(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a2 + 8) = 0;
  if (*(_DWORD *)(a2 + 800) != -1) {
    MTLReleaseAssertionFailure((uint64_t)"MTLIOAccelCommandBufferStoragePoolReturnStorage", 922, (uint64_t)"storage->currentShmemHeaderType == -1", 0, a5, a6, a7, a8, v15);
  }
  *(_DWORD *)(a2 + 800) = -2;
  uint64_t v10 = (os_unfair_lock_s *)(a1 + 2);
  os_unfair_lock_lock((os_unfair_lock_t)a1 + 4);
  uint64_t v11 = *a1;
  *(void *)(a2 + 16) = *a1;
  if (v11) {
    uint64_t v12 = (void *)(v11 + 24);
  }
  else {
    uint64_t v12 = a1 + 1;
  }
  *uint64_t v12 = a2 + 16;
  *a1 = a2;
  *(void *)(a2 + 24) = a1;
  ++*((_DWORD *)a1 + 5);
  os_unfair_lock_unlock(v10);
  uint64_t v13 = (void *)a1[4];

  return [v13 kickCleanupQueue];
}

uint64_t MTLIOAccelCommandBufferStorageReleaseAllResources(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 736);
  if (v2)
  {
    unint64_t v3 = *(unsigned int *)(a1 + 760);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 736) + v4;
        uint64_t v7 = *(os_unfair_lock_s **)(v6 + 32);
        if (v7)
        {
          MTLIOAccelPooledResourceRelease(v7);
          *(void *)(v6 + 32) = 0;
          *(_DWORD *)(v6 + 56) = 0;
          unint64_t v3 = *(unsigned int *)(a1 + 760);
        }
        v4 += 64;
      }
      uint64_t v2 = *(void **)(a1 + 736);
    }
    free(v2);
    *(void *)(a1 + 736) = 0;
  }
  MTLIOAccelCommandBufferStorageReleaseExtraResources(a1);
  uint64_t v8 = *(void **)(a1 + 696);
  if (v8)
  {
    [v8 releaseAllObjectsAndReset];
    MTLResourceListRelease(*(void **)(a1 + 696));
    *(void *)(a1 + 696) = 0;
  }
  uint64_t v9 = *(void **)(a1 + 704);
  if (v9)
  {
    [v9 releaseAllObjectsAndReset];
    MTLResourceListRelease(*(void **)(a1 + 704));
    *(void *)(a1 + 704) = 0;
  }
  uint64_t v10 = *(void **)a1;

  return [v10 kickCleanupQueue];
}

void MTLIOAccelCommandBufferStorageReleaseExtraResources(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 712);
  if (v1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = (unint64_t *)(a1 + 712);
    do
    {
      uint64_t v5 = *(os_unfair_lock_s **)(*(void *)(a1 + 728) + 8 * v3);
      if (v5)
      {
        MTLIOAccelPooledResourceRelease(v5);
        unint64_t v1 = *v4;
      }
      ++v3;
    }
    while (v3 < v1);
    free(*(void **)(a1 + 728));
    unint64_t *v4 = 0;
    v4[1] = 0;
    void v4[2] = 0;
  }
}

char *MTLIOAccelCommandBufferStorageGrowKernelCommandBuffer(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(v3 + 8);
  unsigned int v6 = *(_DWORD *)(v5 + 48);
  while (v6 < a2 + *(_DWORD *)(a1 + 56) - (int)v4 + 24)
  {
    if (v6 >= 0x200000) {
      v6 += 0x100000;
    }
    else {
      v6 *= 2;
    }
  }
  uint64_t v7 = *(void *)(a1 + 48);
  objc_msgSend(*(id *)(v3 + 8), "setShmemSize:");
  Shmeuint64_t m = MTLIOAccelDeviceShmemPoolCreateShmem(v5);
  *(void *)(a1 + 32) = Shmem;
  if (!Shmem)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      MTLIOAccelCommandBufferStorageGrowKernelCommandBuffer_cold_1();
    }
    abort();
  }
  uint64_t v9 = *((unsigned int *)Shmem + 13);
  __n128 result = (char *)Shmem[7];
  *(void *)(a1 + 40) = result;
  *(void *)(a1 + 56) = &result[v9];
  size_t v11 = (v7 - v4);
  if (v3)
  {
    memcpy(result, *(const void **)(v3 + 56), v11);
    MTLIOAccelDeviceShmemRelease((os_unfair_lock_s *)v3);
    __n128 result = *(char **)(a1 + 40);
  }
  *(void *)(a1 + 48) = &result[v11];
  return result;
}

__n128 MTLIOAccelCommandBufferStorageAllocResourceAtIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 736);
  uint64_t v5 = a2;
  uint64_t v6 = v4 + ((unint64_t)a2 << 6);
  uint64_t v9 = *(void *)(v6 + 32);
  uint64_t v7 = (__n128 **)(v6 + 32);
  uint64_t v8 = v9;
  if (v9)
  {
    unint64_t v10 = *(void *)(a1 + 712);
    unint64_t v11 = *(void *)(a1 + 720);
    if (v10 >= v11)
    {
      uint64_t v13 = 2 * v11;
      if (!v11) {
        uint64_t v13 = 32;
      }
      *(void *)(a1 + 720) = v13;
      uint64_t v12 = malloc_type_realloc(*(void **)(a1 + 728), 8 * v13, 0x80040B8603338uLL);
      *(void *)(a1 + 728) = v12;
      unint64_t v10 = *(void *)(a1 + 712);
    }
    else
    {
      uint64_t v12 = *(void **)(a1 + 728);
    }
    *(void *)(a1 + 712) = v10 + 1;
    v12[v10] = v8;
  }
  PooledResource = (__n128 *)MTLIOAccelResourcePoolCreatePooledResource(*(void *)(*(void *)(a1 + 752) + 8 * v5));
  if (!PooledResource)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      MTLIOAccelCommandBufferStorageAllocResourceAtIndex_cold_1();
    }
    abort();
  }
  uint64_t v15 = PooledResource;
  if (MTLValidationEnabled()) {
    -[__n128 setLabel:](v15, "setLabel:", objc_msgSend(NSString, "stringWithFormat:", @"MTLIOAccelResourcePool (dbclass: %d)", a2));
  }
  uint64_t v16 = v4 + (v5 << 6);
  *uint64_t v7 = v15;
  unint64_t v17 = v15[10].n128_u64[1];
  *(void *)(v16 + 8) = v17;
  *(void *)(v16 + 24) = v17;
  *(void *)(v16 + 16) = (v15[4].n128_u64[1] & 0xFFFFFFFFFFFFFFLL) + v17;
  *(void *)uint64_t v16 = v15[6].n128_u64[1];
  __n128 result = v15[4];
  *(void *)(v16 + 56) = v15[5].n128_u64[0];
  *(__n128 *)(v16 + 40) = result;
  return result;
}

void MTLIOAccelCommandBufferStorageReleaseDeviceShmems(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  if (v2)
  {
    MTLIOAccelDeviceShmemRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(os_unfair_lock_s **)(a1 + 64);
  if (v3)
  {
    MTLIOAccelDeviceShmemRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
}

void MTLIOAccelCommandBufferStorageBeginKernelCommands(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a1 + 784);
  if (v10)
  {
    int v11 = a2 - *(_DWORD *)(a1 + 40);
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 800);
    if (v12 == -1)
    {
      uint64_t v10 = *(void *)(a1 + 776);
    }
    else
    {
      if (v12)
      {
        if (v12 == 1)
        {
          uint64_t v13 = "storage->currentShmemHeaderType != eIOAccelSegmentListShmemHeaderTypeKernelCommandList";
          uint64_t v14 = 566;
        }
        else
        {
          uint64_t v13 = "false";
          uint64_t v14 = 577;
        }
        MTLReleaseAssertionFailure((uint64_t)"_mtlIOAccelCommandBufferStorageBeginKernelCommandList", v14, (uint64_t)v13, 0, a5, a6, a7, a8, v17);
      }
      uint64_t v10 = *(void *)(a1 + 96);
      *(_DWORD *)(*(void *)(a1 + 88) + 12) = v10 - *(void *)(a1 + 88);
      *(void *)(a1 + 776) = v10;
      *(void *)(a1 + 88) = 0;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 816) = 0u;
    }
    *(void *)(a1 + 784) = v10;
    *(_DWORD *)(a1 + 800) = 1;
    *(void *)(a1 + 792) = 0;
    if ((unint64_t)(v10 + 48) >= *(void *)(a1 + 80))
    {
      MTLIOAccelCommandBufferStorageGrowSegmentList(a1);
      uint64_t v10 = *(void *)(a1 + 784);
    }
    *(void *)uint64_t v10 = *(void *)(a1 + 768);
    *(void *)(v10 + 8) = 0x4000000100000000;
    int v11 = a2 - *(_DWORD *)(a1 + 40);
    *(_DWORD *)(v10 + 16) = v11;
  }
  unsigned int v15 = *(_DWORD *)(a1 + 792);
  int v16 = *(_DWORD *)(a1 + 796);
  if (v16)
  {
    if (*(_DWORD *)(v10 + 8 * (v16 - 1) + 20) == v11) {
      return;
    }
    ++v15;
  }
  if (v10 + 8 * (unint64_t)(v15 + 1) + 16 >= *(void *)(a1 + 80))
  {
    MTLIOAccelCommandBufferStorageGrowSegmentList(a1);
    uint64_t v10 = *(void *)(a1 + 784);
  }
  *(_DWORD *)(v10 + 8 * v15 + 16) = v11;
  *(_DWORD *)(a1 + 792) = v15;
}

uint64_t MTLIOAccelCommandBufferStorageEndKernelCommands(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 784);
  int v3 = a2 - *(_DWORD *)(result + 40);
  uint64_t v4 = *(unsigned int *)(result + 792);
  *(_DWORD *)(result + 796) = v4 + 1;
  *(_DWORD *)(v2 + 8 * v4 + 20) = v3;
  return result;
}

uint64_t MTLIOAccelCommandBufferStorageFinalizeShmemHeader(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 776);
  int v10 = *(_DWORD *)(result + 800);
  if (v10 == 1)
  {
    uint64_t v12 = *(void *)(result + 784);
    unsigned int v13 = *(_DWORD *)(result + 792) + 1;
    *(_DWORD *)(v12 + 8) = v13;
    *(void *)(result + 776) = v12 + 8 * v13 + 16;
    *(_DWORD *)(result + 800) = -1;
    *(void *)(result + 784) = 0;
    goto LABEL_7;
  }
  if (!v10) {
    goto LABEL_5;
  }
  if (v9 == *(void *)(result + 72))
  {
    __n128 result = _mtlIOAccelCommandBufferStorageBeginSegmentList(result, a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
    uint64_t v11 = *(void *)(v8 + 96);
    *(_DWORD *)(*(void *)(v8 + 88) + 12) = v11 - *(void *)(v8 + 88);
    *(void *)(v8 + 776) = v11;
    *(_DWORD *)(v8 + 800) = -1;
    *(void *)(v8 + 88) = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 816) = 0u;
  }
LABEL_7:
  *(_DWORD *)(v9 + 12) |= 0x80000000;
  return result;
}

uint64_t _mtlIOAccelCommandBufferStorageBeginSegmentList(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(result + 800);
  if (v8 == -1)
  {
    uint64_t v11 = *(void **)(result + 776);
  }
  else
  {
    if (v8 != 1)
    {
      if (v8)
      {
        uint64_t v9 = "false";
        uint64_t v10 = 648;
      }
      else
      {
        uint64_t v9 = "storage->currentShmemHeaderType != eIOAccelSegmentListShmemHeaderTypeSegmentList";
        uint64_t v10 = 637;
      }
      MTLReleaseAssertionFailure((uint64_t)"_mtlIOAccelCommandBufferStorageBeginSegmentList", v10, (uint64_t)v9, 0, a5, a6, a7, a8, vars0);
    }
    uint64_t v12 = *(void *)(result + 784);
    unsigned int v13 = *(_DWORD *)(result + 792) + 1;
    *(_DWORD *)(v12 + 8) = v13;
    uint64_t v11 = (void *)(v12 + 8 * v13 + 16);
    *(void *)(result + 776) = v11;
    *(void *)(result + 784) = 0;
  }
  *(_DWORD *)(result + 800) = 0;
  *(void *)(result + 88) = v11;
  *uint64_t v11 = *(void *)(result + 768);
  v11[1] = 0;
  *(void *)(result + 96) = v11 + 2;
  *(void *)(result + 104) = v11 + 5;
  return result;
}

uint64_t MTLIOAccelCommandBufferStorageGetSegmentListPointers(uint64_t result, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (void *)result;
  if (*(void *)(result + 88))
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  __n128 result = _mtlIOAccelCommandBufferStorageBeginSegmentList(result, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (a2) {
LABEL_3:
  }
    *a2 = v11[11];
LABEL_4:
  if (a3) {
    *a3 = v11[12];
  }
  if (a4) {
    *a4 = v11[10];
  }
  return result;
}

uint64_t MTLIOAccelCommandBufferStorageBeginSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  uint64_t v10 = *(void *)(a1 + 40);
  if (!*(void *)(a1 + 88)) {
    _mtlIOAccelCommandBufferStorageBeginSegmentList(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((unint64_t)(*(void *)(a1 + 104) + 2816) >= *(void *)(a1 + 80)) {
    MTLIOAccelCommandBufferStorageGrowSegmentList(a1);
  }
  uint64_t v11 = *(_DWORD **)(a1 + 96);
  void v11[3] = 0;
  v11[4] = 0;
  id v11[2] = v8 - v10;
  *(_OWORD *)(a1 + 816) = 0u;
  IOAccelResourceListReset();
  uint64_t result = [*(id *)(a1 + 744) globalTraceObjectID];
  **(void **)(a1 + 96) = result;
  return result;
}

uint64_t MTLIOAccelCommandBufferStorageEndSegment(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 656);
  int v2 = *(_DWORD *)(result + 48) - *(_DWORD *)(result + 40);
  uint64_t v4 = *(void *)(result + 88);
  int v3 = *(_DWORD **)(result + 96);
  v3[4] = *(_DWORD *)(result + 652);
  void v3[5] = v1;
  void v3[3] = v2;
  ++*(_DWORD *)(v4 + 8);
  ++*(_DWORD *)(result + 808);
  uint64_t v5 = *(void *)(result + 104);
  uint64_t v6 = v5 + 88 * v1;
  *(void *)(result + 816) = v3;
  *(void *)(result + 824) = v5;
  *(void *)(result + 96) = v6;
  *(void *)(result + 104) = v6 + 24;
  return result;
}

uint64_t MTLIOAccelCommandBufferStorageResumeSegment(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 816);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 824);
  if (!v3) {
    return 0;
  }
  *(void *)(a1 + 96) = v2;
  *(void *)(a1 + 104) = v3;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 824) = 0;
  --*(_DWORD *)(v1 + 8);
  --*(_DWORD *)(a1 + 808);
  *(void *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 12) = 0;
  return 1;
}

void MTLIOAccelCommandBufferStoragePoolCreate(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x28uLL, 0x10A004062A34E2AuLL);
  if (v2)
  {
    *((void *)v2 + 4) = a1;
    *((void *)v2 + 1) = v2;
    *((void *)v2 + 2) = 0;
    atomic_store(1u, (unsigned int *)v2 + 6);
    *(void *)uint64_t v2 = 0;
  }
}

void MTLIOAccelCommandBufferStoragePoolDealloc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (v9)
  {
    do
    {
      uint64_t v11 = *(void *)(v9 + 16);
      uint64_t v10 = *(void **)(v9 + 24);
      if (v11)
      {
        *(void *)(v11 + 24) = v10;
        uint64_t v10 = *(void **)(v9 + 24);
      }
      else
      {
        a1[1] = v10;
      }
      *uint64_t v10 = v11;
      --*((_DWORD *)a1 + 5);
      if (*(_DWORD *)(v9 + 800) != -2) {
        MTLReleaseAssertionFailure((uint64_t)"MTLIOAccelCommandBufferStoragePoolDealloc", 838, (uint64_t)"storage->currentShmemHeaderType == -2", 0, a5, a6, a7, a8, v12);
      }
      *(_DWORD *)(v9 + 800) = -1;
      MTLIOAccelCommandBufferStorageDealloc((void *)v9);
      uint64_t v9 = v11;
    }
    while (v11);
  }

  free(a1);
}

void MTLIOAccelCommandBufferStoragePoolPurge(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v7 = *(void *)&a1->_os_unfair_lock_opaque;
  if (*(void *)&a1->_os_unfair_lock_opaque)
  {
    do
    {
      uint64_t v9 = *(void *)(v7 + 16);
      int v8 = *(void **)(v7 + 24);
      if (v9)
      {
        *(void *)(v9 + 24) = v8;
        int v8 = *(void **)(v7 + 24);
      }
      else
      {
        *(void *)&a1[2]._os_unfair_lock_opaque = v8;
      }
      void *v8 = v9;
      --a1[5]._os_unfair_lock_opaque;
      if (*(_DWORD *)(v7 + 800) != -2) {
        MTLReleaseAssertionFailure((uint64_t)"MTLIOAccelCommandBufferStoragePoolPurge", 858, (uint64_t)"storage->currentShmemHeaderType == -2", 0, v3, v4, v5, v6, v10);
      }
      *(_DWORD *)(v7 + 800) = -1;
      MTLIOAccelCommandBufferStorageDealloc((void *)v7);
      uint64_t v7 = v9;
    }
    while (v9);
  }

  os_unfair_lock_unlock(v2);
}

void *MTLIOAccelCommandBufferStoragePoolCreateStorage(uint64_t a1, int a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  Ext = *(void **)a1;
  if (!*(void *)a1)
  {
    os_unfair_lock_unlock(v4);
    Ext = MTLIOAccelCommandBufferStorageCreateExt(*(void *)(a1 + 32), *(void *)(a1 + 32) + 624, a2);
    if (!Ext) {
      return Ext;
    }
    goto LABEL_14;
  }
  uint64_t v10 = Ext[2];
  uint64_t v11 = (void *)Ext[3];
  if (v10)
  {
    *(void *)(v10 + 24) = v11;
    uint64_t v11 = (void *)Ext[3];
  }
  else
  {
    *(void *)(a1 + 8) = v11;
  }
  *uint64_t v11 = v10;
  --*(_DWORD *)(a1 + 20);
  Ext[2] = 0;
  Ext[3] = 0;
  if (*((_DWORD *)Ext + 200) != -2) {
    MTLReleaseAssertionFailure((uint64_t)"MTLIOAccelCommandBufferStoragePoolCreateStorage", 881, (uint64_t)"storage->currentShmemHeaderType == -2", 0, v5, v6, v7, v8, v15);
  }
  *((_DWORD *)Ext + 200) = -1;
  os_unfair_lock_unlock(v4);
  uint64_t v12 = (void *)Ext[87];
  if (!a2)
  {
    if (!v12)
    {
LABEL_14:
      Ext[1] = a1;
      return Ext;
    }
    MTLResourceListRelease(v12);
    ResourceList = 0;
LABEL_13:
    Ext[87] = ResourceList;
    goto LABEL_14;
  }
  if (!v12)
  {
    ResourceList = MTLResourceListPoolCreateResourceList(*(MTLResourceListPool **)(*(void *)(a1 + 32) + 656));
    goto LABEL_13;
  }
  return Ext;
}

void *MTLResourceListGrowAndReset(int32x2_t *a1)
{
  if (a1->i32[0] == 2048)
  {
    unsigned int v2 = 4096;
    int v3 = a1->i32[1] + 1;
    a1->i32[0] = 4096;
    a1->i32[1] = v3;
  }
  else
  {
    free(*(void **)&a1[2]);
    free(*(void **)&a1[3]);
    free(*(void **)&a1[1]);
    v4.i32[0] = vadd_s32(*a1, *a1).u32[0];
    unsigned int v2 = v4.i32[0];
    v4.i32[1] = vadd_s32(*a1, (int32x2_t)0x100000001).i32[1];
    *a1 = v4;
    if (v4.i32[0] < 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_fault_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "MTLResourceListRebuild() failed.  Hash limit reached", v6, 2u);
      }
      abort();
    }
  }
  a1[2] = (int32x2_t)malloc_type_calloc(v2, 4uLL, 0x100004052888210uLL);
  a1[3] = (int32x2_t)malloc_type_malloc(8 * a1->u32[0], 0x100004000313F17uLL);
  uint64_t result = malloc_type_calloc((unint64_t)a1->u32[0] >> 3, 1uLL, 0x84E4621BuLL);
  a1[1] = (int32x2_t)result;
  return result;
}

__CFString *MTLPurgeableStateString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"Unknown";
  }
  else {
    return off_1E5221F58[a1 - 1];
  }
}

void *MTLResourceOptionsString(int a1)
{
  unsigned int v2 = (void *)[MEMORY[0x1E4F28E78] string];
  int v3 = v2;
  int32x2_t v4 = @"MTLResourceCPUCacheModeInvalid ";
  if ((a1 & 0xF) == 0) {
    int32x2_t v4 = @"MTLResourceCPUCacheModeDefaultCache ";
  }
  if ((a1 & 0xF) == 1) {
    uint64_t v5 = @"MTLResourceCPUCacheModeWriteCombined ";
  }
  else {
    uint64_t v5 = v4;
  }
  [v2 appendString:v5];
  uint64_t v6 = @"MTLResourceStorageModePrivate ";
  uint64_t v7 = @"MTLResourceStorageModeInvalid ";
  int v8 = a1 & 0xF0;
  if ((a1 & 0xF0) == 0) {
    uint64_t v7 = @"MTLResourceStorageModeShared ";
  }
  if (v8 != 32) {
    uint64_t v6 = v7;
  }
  if (v8 == 48) {
    uint64_t v9 = @"MTLResourceStorageModeMemoryless ";
  }
  else {
    uint64_t v9 = v6;
  }
  [v3 appendString:v9];
  uint64_t v10 = a1 & 0x300;
  if ((a1 & 0x300) != 0)
  {
    uint64_t v11 = @"MTLResourceHazardTrackingModeInvalid ";
    if (v10 == 512) {
      uint64_t v11 = @"MTLResourceHazardTrackingModeTracked ";
    }
    if (v10 == 256) {
      uint64_t v12 = @"MTLResourceHazardTrackingModeUntracked ";
    }
    else {
      uint64_t v12 = v11;
    }
  }
  else
  {
    uint64_t v12 = @"MTLResourceHazardTrackingModeDefault ";
  }
  [v3 appendString:v12];
  if ((a1 & 0x1000000) != 0) {
    [v3 appendString:@"MTLResourceReadOnly"];
  }
  return v3;
}

__CFString *MTLHazardTrackingModeString(unint64_t a1)
{
  if (a1 > 2) {
    return @"Unknown";
  }
  else {
    return off_1E5221F78[a1];
  }
}

uint64_t MTLDataTypeGetSignedType(uint64_t result)
{
  uint64_t v1 = result - 33;
  if (unint64_t)(result - 33) <= 0x17 && ((0xFF0F0Fu >> v1)) {
    return qword_1828F2208[v1];
  }
  return result;
}

uint64_t MTLDataTypeGetVectorDataType(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (a1 > 44)
  {
    if (a1 > 80)
    {
      uint64_t v3 = v2 + 81;
      if (v2 >= 4) {
        uint64_t v3 = 0;
      }
      uint64_t v10 = v2 + 85;
      if (v2 >= 4) {
        uint64_t v10 = 0;
      }
      BOOL v5 = v2 >= 4;
      uint64_t v6 = v2 + 121;
      if (v5) {
        uint64_t v6 = 0;
      }
      if (a1 != 121) {
        uint64_t v6 = 0;
      }
      if (a1 == 85) {
        uint64_t v6 = v10;
      }
      BOOL v7 = a1 == 81;
    }
    else
    {
      uint64_t v3 = v2 + 45;
      if (v2 >= 4) {
        uint64_t v3 = 0;
      }
      uint64_t v8 = v2 + 49;
      if (v2 >= 4) {
        uint64_t v8 = 0;
      }
      BOOL v5 = v2 >= 4;
      uint64_t v6 = v2 + 53;
      if (v5) {
        uint64_t v6 = 0;
      }
      if (a1 != 53) {
        uint64_t v6 = 0;
      }
      if (a1 == 49) {
        uint64_t v6 = v8;
      }
      BOOL v7 = a1 == 45;
    }
  }
  else if (a1 > 32)
  {
    uint64_t v3 = v2 + 33;
    if (v2 >= 4) {
      uint64_t v3 = 0;
    }
    uint64_t v9 = v2 + 37;
    if (v2 >= 4) {
      uint64_t v9 = 0;
    }
    BOOL v5 = v2 >= 4;
    uint64_t v6 = v2 + 41;
    if (v5) {
      uint64_t v6 = 0;
    }
    if (a1 != 41) {
      uint64_t v6 = 0;
    }
    if (a1 == 37) {
      uint64_t v6 = v9;
    }
    BOOL v7 = a1 == 33;
  }
  else
  {
    uint64_t v3 = v2 + 3;
    if (v2 >= 4) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v2 + 16;
    if (v2 >= 4) {
      uint64_t v4 = 0;
    }
    BOOL v5 = v2 >= 4;
    uint64_t v6 = v2 + 29;
    if (v5) {
      uint64_t v6 = 0;
    }
    if (a1 != 29) {
      uint64_t v6 = 0;
    }
    if (a1 == 16) {
      uint64_t v6 = v4;
    }
    BOOL v7 = a1 == 3;
  }
  if (v7) {
    return v3;
  }
  else {
    return v6;
  }
}

const char *MTLDataTypeGetShaderTypeName(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      if (a1 > 44)
      {
        if (a1 > 80)
        {
          switch(a1)
          {
            case 'Q':
              uint64_t result = "long";
              break;
            case 'U':
              uint64_t result = "ulong";
              break;
            case 'y':
              uint64_t result = "bfloat";
              break;
            default:
              goto LABEL_78;
          }
        }
        else
        {
          switch(a1)
          {
            case '-':
              uint64_t result = "char";
              break;
            case '1':
              uint64_t result = "uchar";
              break;
            case '5':
              uint64_t result = "BOOL";
              break;
            default:
              goto LABEL_78;
          }
        }
      }
      else if (a1 > 32)
      {
        switch(a1)
        {
          case '!':
            uint64_t result = "uint";
            break;
          case '%':
            uint64_t result = "short";
            break;
          case ')':
            uint64_t result = "ushort";
            break;
          default:
            goto LABEL_78;
        }
      }
      else
      {
        switch(a1)
        {
          case 3:
            uint64_t result = "float";
            break;
          case 16:
            uint64_t result = "half";
            break;
          case 29:
            uint64_t result = "int";
            break;
          default:
            goto LABEL_78;
        }
      }
      break;
    case 2:
      if (a1 > 44)
      {
        if (a1 > 80)
        {
          switch(a1)
          {
            case 'Q':
              uint64_t result = "long2";
              break;
            case 'U':
              uint64_t result = "ulong2";
              break;
            case 'y':
              uint64_t result = "bfloat2";
              break;
            default:
              goto LABEL_78;
          }
        }
        else
        {
          switch(a1)
          {
            case '-':
              uint64_t result = "char2";
              break;
            case '1':
              uint64_t result = "uchar2";
              break;
            case '5':
              uint64_t result = "BOOL2";
              break;
            default:
              goto LABEL_78;
          }
        }
      }
      else if (a1 > 32)
      {
        switch(a1)
        {
          case '!':
            uint64_t result = "uint2";
            break;
          case '%':
            uint64_t result = "short2";
            break;
          case ')':
            uint64_t result = "ushort2";
            break;
          default:
            goto LABEL_78;
        }
      }
      else
      {
        switch(a1)
        {
          case 3:
            uint64_t result = "float2";
            break;
          case 16:
            uint64_t result = "half2";
            break;
          case 29:
            uint64_t result = "int2";
            break;
          default:
            goto LABEL_78;
        }
      }
      break;
    case 3:
      if (a1 > 44)
      {
        if (a1 > 80)
        {
          switch(a1)
          {
            case 'Q':
              uint64_t result = "long3";
              break;
            case 'U':
              uint64_t result = "ulong3";
              break;
            case 'y':
              uint64_t result = "bfloat3";
              break;
            default:
              goto LABEL_78;
          }
        }
        else
        {
          switch(a1)
          {
            case '-':
              uint64_t result = "char3";
              break;
            case '1':
              uint64_t result = "uchar3";
              break;
            case '5':
              uint64_t result = "BOOL3";
              break;
            default:
              goto LABEL_78;
          }
        }
      }
      else if (a1 > 32)
      {
        switch(a1)
        {
          case '!':
            uint64_t result = "uint3";
            break;
          case '%':
            uint64_t result = "short3";
            break;
          case ')':
            uint64_t result = "ushort3";
            break;
          default:
            goto LABEL_78;
        }
      }
      else
      {
        switch(a1)
        {
          case 3:
            uint64_t result = "float3";
            break;
          case 16:
            uint64_t result = "half3";
            break;
          case 29:
            uint64_t result = "int3";
            break;
          default:
            goto LABEL_78;
        }
      }
      break;
    case 4:
      if (a1 > 44)
      {
        if (a1 > 80)
        {
          switch(a1)
          {
            case 'Q':
              uint64_t result = "long4";
              break;
            case 'U':
              uint64_t result = "ulong4";
              break;
            case 'y':
              uint64_t result = "bfloat4";
              break;
            default:
              goto LABEL_78;
          }
        }
        else
        {
          switch(a1)
          {
            case '-':
              uint64_t result = "char4";
              break;
            case '1':
              uint64_t result = "uchar4";
              break;
            case '5':
              uint64_t result = "BOOL4";
              break;
            default:
              goto LABEL_78;
          }
        }
      }
      else if (a1 > 32)
      {
        switch(a1)
        {
          case '!':
            uint64_t result = "uint4";
            break;
          case '%':
            uint64_t result = "short4";
            break;
          case ')':
            uint64_t result = "ushort4";
            break;
          default:
            goto LABEL_78;
        }
      }
      else
      {
        switch(a1)
        {
          case 3:
            uint64_t result = "float4";
            break;
          case 16:
            uint64_t result = "half4";
            break;
          case 29:
            uint64_t result = "int4";
            break;
          default:
            goto LABEL_78;
        }
      }
      break;
    default:
LABEL_78:
      uint64_t result = "";
      break;
  }
  return result;
}

uint64_t MTLDataTypeGetAlignment(uint64_t a1)
{
  if ((unint64_t)(a1 - 3) > 0x84) {
    return 0;
  }
  else {
    return qword_1828F26F0[a1 - 3];
  }
}

void validateMTLDataTypeConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((unint64_t)(a1 - 3) >= 0x36
    && ((unint64_t)(a1 - 81) > 0x36 || ((1 << (a1 - 81)) & 0x7FCF00000000FFLL) == 0))
  {
    if (a1) {
      MTLReportFailure(0, "validateMTLDataTypeConstant", 380, @"type (%lu) is not a const-like MTLDataType.", a5, a6, a7, a8, a1);
    }
  }
}

void MTLPipelineCollection::MTLPipelineCollection(MTLPipelineCollection *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 64;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 54) = 1065353216;
  *((void *)this + 30) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((void *)this + 40) = 0;
  *((_DWORD *)this + 82) = 1065353216;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((void *)this + 48) = 0;
  *((_DWORD *)this + 98) = 1065353216;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 114) = 1065353216;
  *((void *)this + 64) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 130) = 1065353216;
  *((void *)this + 67) = 0;
  *((void *)this + 66) = 0;
  *((void *)this + 68) = 0;
  *((void *)this + 36) = dispatch_queue_create("pipelineCollection", 0);
  *((void *)this + 3) = a2;
}

void MTLPipelineCollection::~MTLPipelineCollection(MTLPipelineCollection *this)
{
  for (unint64_t i = (uint64_t *)*((void *)this + 12); i; unint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&v20, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string v20 = *(std::string *)(i + 2);
    }
    uint64_t v3 = (MTLPipelineLibrarySerializer::FunctionDescriptor *)i[5];
    uint64_t v21 = v3;
    if (v3)
    {
      MTLPipelineLibrarySerializer::FunctionDescriptor::~FunctionDescriptor(v3);
      MEMORY[0x18530C140]();
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t j = (long long *)*((void *)this + 25); j; uint64_t j = *(long long **)j)
  {
    std::pair<std::string const,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>::pair[abi:ne180100](&v20, j + 1);
    for (uint64_t k = v22; k; uint64_t k = (uint64_t *)*k)
    {
      if (*((char *)k + 39) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)k[2], k[3]);
      }
      else {
        std::string __p = *(std::string *)(k + 2);
      }
      uint64_t v6 = (id *)k[5];
      uint64_t v19 = v6;
      if (v6)
      {
        MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor::~MTLSpecializedFunctionDescriptor(v6);
        MEMORY[0x18530C140]();
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)&v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  BOOL v7 = (MTLPipelineCollection *)*((void *)this + 4);
  if (v7 != (MTLPipelineCollection *)((char *)this + 40))
  {
    do
    {
      uint64_t v8 = (id *)*((void *)v7 + 8);
      if (v8)
      {
        MTLPipelineLibrarySerializer::LibraryDescriptor::~LibraryDescriptor(v8);
        MEMORY[0x18530C140]();
      }
      uint64_t v9 = (MTLPipelineCollection *)*((void *)v7 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(MTLPipelineCollection **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (MTLPipelineCollection *)*((void *)v7 + 2);
          BOOL v11 = *(void *)v10 == (void)v7;
          BOOL v7 = v10;
        }
        while (!v11);
      }
      BOOL v7 = v10;
    }
    while (v10 != (MTLPipelineCollection *)((char *)this + 40));
  }
  uint64_t v12 = (MTLPipelineCollection *)*((void *)this + 7);
  if (v12 != (MTLPipelineCollection *)((char *)this + 64))
  {
    do
    {
      unsigned int v13 = (id *)*((void *)v12 + 8);
      if (v13)
      {
        MTLPipelineLibrarySerializer::StitchedLibraryDescriptor::~StitchedLibraryDescriptor(v13);
        MEMORY[0x18530C140]();
      }
      uint64_t v14 = (MTLPipelineCollection *)*((void *)v12 + 1);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = *(MTLPipelineCollection **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (MTLPipelineCollection *)*((void *)v12 + 2);
          BOOL v11 = *(void *)v15 == (void)v12;
          uint64_t v12 = v15;
        }
        while (!v11);
      }
      uint64_t v12 = v15;
    }
    while (v15 != (MTLPipelineCollection *)((char *)this + 64));
  }
  int v16 = *((void *)this + 36);
  if (v16) {
    dispatch_release(v16);
  }
  MTLPipelineDescriptorHash::~MTLPipelineDescriptorHash((MTLPipelineDescriptorHash *)((char *)this + 488));
  MTLPipelineDescriptorHash::~MTLPipelineDescriptorHash((MTLPipelineDescriptorHash *)((char *)this + 424));
  MTLPipelineDescriptorHash::~MTLPipelineDescriptorHash((MTLPipelineDescriptorHash *)((char *)this + 360));
  MTLPipelineDescriptorHash::~MTLPipelineDescriptorHash((MTLPipelineDescriptorHash *)((char *)this + 296));
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 248);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 224, *((void **)this + 29));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>::~__hash_table((uint64_t)this + 184);
  uint64_t v17 = (void *)*((void *)this + 20);
  if (v17)
  {
    *((void *)this + 21) = v17;
    operator delete(v17);
  }
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 80);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::pair<std::string const,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void MTLPipelineCollection::addLibraryData(MTLPipelineCollection *this, char a2, char a3, MTLLibraryData *a4)
{
  uint64_t v4 = *((void *)this + 36);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN21MTLPipelineCollection14addLibraryDataEbbP14MTLLibraryData_block_invoke;
  block[3] = &__block_descriptor_50_e5_v8__0l;
  block[4] = this;
  void block[5] = a4;
  char v6 = a2;
  char v7 = a3;
  dispatch_sync(v4, block);
}

void ___ZN21MTLPipelineCollection14addLibraryDataEbbP14MTLLibraryData_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(long long **)(a1 + 32);
  uint64_t v3 = (void *)MEMORY[0x18530C9F0]();
  uint64_t v4 = (_OWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 296))();
  long long v5 = v4[1];
  v11[0] = *v4;
  v11[1] = v5;
  if ((uint64_t *)((char *)v2 + 40) == std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>((uint64_t)(v2 + 2), (unsigned int *)v11))
  {
    if (*(unsigned char *)(a1 + 48)) {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
    }
    else {
      uint64_t v6 = 0;
    }
    if (*(unsigned char *)(a1 + 49)) {
      char v7 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 304))(*(void *)(a1 + 40));
    }
    else {
      char v7 = 0;
    }
    uint64_t v8 = (_OWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 296))(*(void *)(a1 + 40));
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((void *)v2 + 1));
    }
    else
    {
      long long v9 = *v2;
      __p.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    libraryDescriptorFromLibraryData(v7, v8, v6, (uint64_t *)&__p);
  }
}

void sub_18287AE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void libraryDescriptorFromLibraryData(void *a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    long long v5 = (void *)[a1 lastPathComponent];
  }
  else
  {
    long long v6 = a2[1];
    v11[0] = *a2;
    v11[1] = v6;
    HashToString((uint64_t)v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    long long v5 = objc_msgSend(NSString, "stringWithFormat:", @"%s.metallib", p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v8 = [v5 stringByDeletingPathExtension];
  id v9 = [NSString alloc];
  if (*((char *)a4 + 23) < 0) {
    a4 = (uint64_t *)*a4;
  }
  [v9 initWithFormat:@"%s%@", a4, v8];
  operator new();
}

void sub_18287AFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *MTLPipelineCollection::addLibraryDescriptor(uint64_t **a1, id *a2, _OWORD *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[a2[1] UTF8String]);
  long long v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)(a1 + 31), (unsigned __int8 *)__p, (uint64_t)__p);
  char v8 = v7;
  if (SBYTE7(v27) < 0)
  {
    operator delete(__p[0]);
    if (v8) {
      goto LABEL_16;
    }
  }
  else if (v7)
  {
    goto LABEL_16;
  }
  id v9 = (void *)MEMORY[0x18530C9F0](v6);
  long long v10 = a3[1];
  v28[0] = *a3;
  v28[1] = v10;
  HashToString((uint64_t)v28, (std::string *)__p);
  if ((SBYTE7(v27) & 0x80u) == 0) {
    BOOL v11 = __p;
  }
  else {
    BOOL v11 = (void **)__p[0];
  }
  uint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"%s.metallib", v11);
  uint64_t v13 = [v12 stringByDeletingPathExtension];
  id v14 = [NSString alloc];
  uint64_t v15 = (uint64_t *)a1;
  if (*((char *)a1 + 23) < 0) {
    uint64_t v15 = *a1;
  }
  int v16 = (void *)[v14 initWithFormat:@"%s%@", v15, v13];

  *a2 = (id)[v16 copy];
  a2[1] = (id)[v12 copy];

  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[a2[1] UTF8String]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)(a1 + 31), (unsigned __int8 *)__p, (uint64_t)__p);
  char v22 = v21;
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  if ((v22 & 1) == 0) {
    MTLReportFailure(0, "addLibraryDescriptor", 184, @"collected two libraries with the same name (%@)", v17, v18, v19, v20, (uint64_t)a2[1]);
  }
LABEL_16:
  NSLog(&cfstr_AddingLibraryW.isa, [*a2 UTF8String], objc_msgSend(a2[1], "UTF8String"));
  long long v23 = a3[1];
  *(_OWORD *)std::string __p = *a3;
  long long v27 = v23;
  uint64_t v25 = __p;
  uint64_t result = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__emplace_unique_key_args<MTLLibraryIdentifier,std::piecewise_construct_t const&,std::tuple<MTLLibraryIdentifier&&>,std::tuple<>>(a1 + 4, (unsigned int *)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v25);
  *((void *)result + 8) = a2;
  return result;
}

void sub_18287B230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineCollection::addDynamicLibraryData(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4 = *(NSObject **)(a1 + 288);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN21MTLPipelineCollection21addDynamicLibraryDataEbbPU28objcproto17MTLDynamicLibrary11objc_object_block_invoke;
  block[3] = &unk_1E5221FB8;
  block[4] = a4;
  void block[5] = a1;
  char v6 = a2;
  char v7 = a3;
  dispatch_sync(v4, block);
}

void ___ZN21MTLPipelineCollection21addDynamicLibraryDataEbbPU28objcproto17MTLDynamicLibrary11objc_object_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(long long **)(a1 + 40);
  uint64_t v3 = (void *)MEMORY[0x18530C9F0]();
  uint64_t v4 = (_OWORD *)[*(id *)(a1 + 32) libraryUUID];
  long long v5 = v4[1];
  v12[0] = *v4;
  v12[1] = v5;
  if ((uint64_t *)((char *)v2 + 40) == std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>((uint64_t)(v2 + 2), (unsigned int *)v12))
  {
    if (*(unsigned char *)(a1 + 48) && (char v6 = [*(id *)(a1 + 32) airData], (v7 = v6) != 0))
    {
      dispatch_data_t v8 = _MTLDispatchDataToNSData(v6, 0);
      dispatch_release(v7);
    }
    else
    {
      dispatch_data_t v8 = 0;
    }
    if (*(unsigned char *)(a1 + 49)) {
      id v9 = (void *)[*(id *)(a1 + 32) libraryPath];
    }
    else {
      id v9 = 0;
    }
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((void *)v2 + 1));
    }
    else
    {
      long long v10 = *v2;
      __p.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    libraryDescriptorFromLibraryData(v9, v4, (uint64_t)v8, (uint64_t *)&__p);
  }
}

void sub_18287B438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18287B4E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL shouldCollectLibraryData(uint64_t a1)
{
  return *(void *)(a1 + 456) != 0;
}

void MTLPipelineCollection::addLibrary(uint64_t a1, void *a2)
{
  uint64_t v4 = [a2 libraryData];
  *(void *)[a2 cacheEntry] = a1;
  BOOL v5 = *(void *)([a2 device] + 456) != 0;
  char v6 = *(NSObject **)(a1 + 288);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN21MTLPipelineCollection14addLibraryDataEbbP14MTLLibraryData_block_invoke;
  block[3] = &__block_descriptor_50_e5_v8__0l;
  block[4] = a1;
  void block[5] = v4;
  BOOL v8 = v5;
  char v9 = 1;
  dispatch_sync(v6, block);
}

void MTLPipelineCollection::addDynamicLibrary(uint64_t a1, void *a2)
{
  BOOL v4 = *(void *)([a2 device] + 456) != 0;
  BOOL v5 = *(NSObject **)(a1 + 288);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN21MTLPipelineCollection21addDynamicLibraryDataEbbPU28objcproto17MTLDynamicLibrary11objc_object_block_invoke;
  block[3] = &unk_1E5221FB8;
  block[4] = a2;
  void block[5] = a1;
  BOOL v7 = v4;
  char v8 = 1;
  dispatch_sync(v5, block);
}

void MTLPipelineCollection::addFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = *(NSObject **)(a1 + 288);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___ZN21MTLPipelineCollection11addFunctionEPU22objcproto11MTLFunction11objc_objectP14MTLLibraryDatam_block_invoke;
  _OWORD v5[3] = &unk_1E5221FE0;
  v5[4] = a2;
  v5[5] = a1;
  void v5[6] = a3;
  v5[7] = a4;
  dispatch_sync(v4, v5);
}

void ___ZN21MTLPipelineCollection11addFunctionEPU22objcproto11MTLFunction11objc_objectP14MTLLibraryDatam_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = (void *)MEMORY[0x18530C9F0]();
  BOOL v4 = (_OWORD *)[*(id *)(a1 + 32) bitCodeHash];
  long long v5 = v4[1];
  v25[0] = *v4;
  v25[1] = v5;
  HashToString((uint64_t)v25, &__p);
  char v6 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v2 + 10, (unsigned __int8 *)&__p);
  BOOL v7 = v6;
  if (!v6)
  {
    if ([*(id *)(a1 + 32) stitchingAirScript]) {
      std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v2 + 15, (unsigned __int8 *)&__p);
    }
    operator new();
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v8 = *((void *)v6 + 5);
    uint64_t v9 = *(void *)(v8 + 16);
    if ((v9 & 1) == 0)
    {
      *(void *)(v8 + 16) = v9 | 1;
      unint64_t v10 = v2[22];
      BOOL v11 = (void *)v2[21];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = v2[20];
        uint64_t v14 = ((uint64_t)v11 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - v13;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(v2 + 22), v17);
          uint64_t v8 = *((void *)v7 + 5);
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        uint64_t v20 = &v18[8 * v17];
        *(void *)uint64_t v19 = v8;
        uint64_t v12 = v19 + 8;
        char v22 = (char *)v2[20];
        char v21 = (char *)v2[21];
        if (v21 != v22)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v19 - 1) = v23;
            v19 -= 8;
          }
          while (v21 != v22);
          char v21 = (char *)v2[20];
        }
        v2[20] = v19;
        v2[21] = v12;
        v2[22] = v20;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *BOOL v11 = v8;
        uint64_t v12 = v11 + 1;
      }
      v2[21] = v12;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18287B9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MTLPipelineCollection::addStitchedLibrary(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [a2 libraryData];
  long long v5 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 296))(v4);
  long long v6 = v5[1];
  long long v26 = *v5;
  long long v27 = v6;
  uint64_t result = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(a1 + 56, (unsigned int *)&v26);
  if ((uint64_t *)(a1 + 64) == result)
  {
    if (!*(void *)[a2 cacheEntry]) {
      *(void *)[a2 cacheEntry] = a1;
    }
    uint64_t v8 = (void *)[a2 functionHashes];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v19;
      BOOL v11 = (void *)(a1 + 120);
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v8);
          }
          [*(id *)(*((void *)&v18 + 1) + 8 * v12) getValue:&v26];
          v24[0] = v26;
          v24[1] = v27;
          HashToString((uint64_t)v24, &__p);
          if (!std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v11, (unsigned __int8 *)&__p))
          {
            p_p = &__p;
            *((void *)std::__hash_table<std::__hash_value_type<std::string,MTLLibraryData *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLLibraryData *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLLibraryData *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLLibraryData *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 5) = v4;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          ++v12;
        }
        while (v9 != v12);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }
      while (v9);
    }
    id v13 = [NSString alloc];
    uint64_t v14 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 296))(v4);
    long long v15 = v14[1];
    v23[0] = *v14;
    v23[1] = v15;
    HashToString((uint64_t)v23, (std::string *)&v26);
    if ((SBYTE7(v27) & 0x80u) == 0) {
      uint64_t v16 = &v26;
    }
    else {
      uint64_t v16 = (long long *)v26;
    }
    objc_msgSend(v13, "initWithFormat:", @"StitchedLib_%s", v16);
    if (SBYTE7(v27) < 0) {
      operator delete((void *)v26);
    }
    operator new();
  }
  return result;
}

void sub_18287BD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 - 121) < 0) {
    operator delete(*(void **)(v17 - 144));
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineCollection::addSpecializedFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v5 = *(NSObject **)(a1 + 288);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN21MTLPipelineCollection22addSpecializedFunctionEPU22objcproto11MTLFunction11objc_objectS1_PU21objcproto10MTLLibrary11objc_objectP21MTLFunctionDescriptor_block_invoke;
  block[3] = &unk_1E5222008;
  void block[7] = a5;
  block[8] = a1;
  block[4] = a3;
  void block[5] = a4;
  void block[6] = a2;
  dispatch_sync(v5, block);
}

void ___ZN21MTLPipelineCollection22addSpecializedFunctionEPU22objcproto11MTLFunction11objc_objectS1_PU21objcproto10MTLLibrary11objc_objectP21MTLFunctionDescriptor_block_invoke(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = (void *)MEMORY[0x18530C9F0]();
  uint64_t v4 = *(void **)(a1 + 32);
  long long v5 = (_OWORD *)[v4 bitCodeHash];
  long long v6 = v5[1];
  v30[0] = *v5;
  v30[1] = v6;
  HashToString((uint64_t)v30, &v27);
  *(void *)&v28[0] = &v27;
  BOOL v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,MTLPipelineLibrarySerializer::MTLSpecializedFunctionDescriptor *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2 + 184, (unsigned __int8 *)&v27, (uint64_t)&std::piecewise_construct, (long long **)v28);
  uint64_t v8 = (_OWORD *)[v4 functionConstantSpecializationHash];
  long long v9 = v8[1];
  v29[0] = *v8;
  v29[1] = v9;
  HashToString((uint64_t)v29, &__p);
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((void *)v7 + 5, (unsigned __int8 *)&__p);
  if (!v10)
  {
    uint64_t v13 = [*(id *)(a1 + 40) libraryData];
    uint64_t v14 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 296))(v13);
    long long v15 = v14[1];
    v28[0] = *v14;
    v28[1] = v15;
    std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(v2 + 32, (unsigned int *)v28);
    if ([*(id *)(a1 + 48) stitchingAirScript])
    {
      uint64_t v16 = [*(id *)(a1 + 40) libraryData];
      uint64_t v17 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 296))(v16);
      long long v18 = v17[1];
      v28[0] = *v17;
      v28[1] = v18;
      uint64_t v19 = *(void *)(std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(v2 + 56, (unsigned int *)v28)[8]+ 8);
    }
    else
    {
      uint64_t v20 = [*(id *)(a1 + 40) libraryData];
      long long v21 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 296))(v20);
      long long v22 = v21[1];
      v28[0] = *v21;
      v28[1] = v22;
      uint64_t v19 = *(void *)std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(v2 + 32, (unsigned int *)v28)[8];
    }
    id v23 = [NSString alloc];
    uint64_t v24 = [v4 name];
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    [v23 initWithFormat:@"%@_%@_%s", v19, v24, p_p];
    [*(id *)(a1 + 48) name];
    [v4 name];
    operator new();
  }
  uint64_t v11 = *((void *)v10 + 5);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12 != [*(id *)(a1 + 56) options]) {
    *(void *)(v11 + 16) |= [*(id *)(a1 + 56) options];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}