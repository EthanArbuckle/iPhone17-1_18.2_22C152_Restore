int32x2_t *MTLResourceListAddResource(int32x2_t *result, uint64_t a2)
{
  int32x2_t *v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t vars8;

  v2 = result + 1;
  v3 = (0x9E3779B97F4A7C15 * a2) >> -(uint64_t)result[1].u32[1];
  v4 = *(_DWORD *)(*(void *)&result[3] + 4 * v3);
  while (v4)
  {
    v5 = __clz(__rbit32(v4));
    v4 &= ~(1 << v5);
    if (*(void *)(*(void *)&result[4] + 8 * ((v5 + v3) & (result[1].i32[0] - 1))) == a2) {
      return result;
    }
  }
  if ((MTLResourceListAddHashValue((uint64_t)&result[1], a2) & 1) == 0)
  {
    MTLResourceListGrowAndReset(v2);
    MTLResourceListAddHashValue((uint64_t)v2, a2);
  }
  MTLResourceListChunksAddEntry(v2, a2);

  return (int32x2_t *)(id)a2;
}

void *MTLResourceListChunksAddEntry(void *result, uint64_t a2)
{
  v3 = result;
  uint64_t v4 = *((unsigned int *)result + 8);
  uint64_t v5 = *((int *)result + 14);
  uint64_t v6 = result[5];
  if (v4 >= v5)
  {
    *(_DWORD *)(v6 - 24) = v4;
    uint64_t v7 = v6 - 24;
    *(void *)(v7 + 16) = result[6];
    *((_DWORD *)result + 8) = 1;
    result[6] = v7;
    result = malloc_type_malloc(8 * v5 + 24, 0xDE147B92uLL);
    result[3] = a2;
    *(_DWORD *)result = 0;
    result[1] = result + 3;
    result[2] = 0;
    v3[5] = result + 3;
  }
  else
  {
    *(void *)(v6 + 8 * v4) = a2;
    *((_DWORD *)result + 8) = v4 + 1;
  }
  return result;
}

uint64_t MTLResourceListAddHashValue(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = 0;
  int v3 = *(_DWORD *)a1 - 1;
  unint64_t v4 = (0x9E3779B97F4A7C15 * a2) >> -(uint64_t)*(unsigned int *)(a1 + 4);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = v4 & 0x3F;
  uint64_t v7 = *(void *)(v5 + 8 * (v4 >> 6)) | ~(-1 << v4);
  unsigned int v8 = v4 >> 6 << 6;
  unsigned int v9 = (v4 >> 6) + 1;
  while (v7 == -1)
  {
    unsigned int v2 = v2 - v6 + 64;
    uint64_t v7 = *(void *)(v5 + 8 * (v9 & ((*(_DWORD *)a1 >> 6) - 1)));
    v8 += 64;
    ++v9;
    int v6 = 0;
    if (v2 >= 0x80) {
      return 0;
    }
  }
  uint64_t v10 = __clz(__rbit64(~v7)) + v8;
  if ((v10 - v4) > 0x7F) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  int v14 = *(_DWORD *)a1 - 64;
  while ((v10 - v4) >= 0x20)
  {
    int v15 = v10 - 31;
    if (v10 < 0x1F)
    {
LABEL_19:
      uint64_t v20 = v10;
    }
    else
    {
      int v15 = v10 - 30;
      if (v10 >= (int)v10 - 30) {
        int v15 = v10;
      }
      int v16 = -31;
      while (1)
      {
        uint64_t v17 = (v10 + v16) & v3;
        unsigned int v18 = *(_DWORD *)(v12 + 4 * v17);
        unsigned int v19 = __clz(__rbit32(v18));
        uint64_t v20 = v10 + v16 + v19;
        if (v18 && v20 < v10) {
          break;
        }
        if (!__CFADD__(v10, ++v16)) {
          goto LABEL_19;
        }
      }
      uint64_t v23 = *(void *)(v13 + 8 * (v20 & v3));
      *(_DWORD *)(v12 + 4 * v17) = v18 & ~(1 << v19) | (1 << -(char)v16);
      *(void *)(v5 + 8 * ((v10 & v14) >> 6)) |= 1 << v10;
      *(void *)(v13 + 8 * (v10 & v3)) = v23;
      int v15 = v10 + v16;
    }
    BOOL v22 = v15 == v10;
    uint64_t v10 = v20;
    if (v22) {
      return 0;
    }
  }
  *(void *)(v13 + 8 * (v10 & v3)) = a2;
  uint64_t result = 1;
  *(_DWORD *)(v12 + 4 * v4) |= 1 << (v10 - v4);
  *(void *)(v5 + 8 * ((v10 & v14) >> 6)) |= 1 << v10;
  return result;
}

void validateMTLDataType(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 0x3D && (a1 - 78 > 0x39 || ((1 << (a1 - 78)) & 0x3FE79E0000007FFLL) == 0)) {
    MTLReportFailure(0, "validateMTLDataType", 356, @"type (%lu) is not a valid MTLDataType.", a5, a6, a7, a8, a1);
  }
}

void MTLGetTextureLevelInfoForDeviceWithOptions(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, unint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  MTLPixelFormatGetInfoForDevice(a1, a2, (uint64_t)&v28);
  unint64_t v17 = v30;
  uint64_t v18 = *((void *)&v29 + 1);
  switch(a2)
  {
    case 250:
    case 252:
      uint64_t v19 = 2;
      if (a2 == 252) {
        uint64_t v19 = 4;
      }
      if (a8 <= 1) {
        uint64_t v18 = v19;
      }
      break;
    case 253:
    case 261:
      if ((a8 | 2) == 2) {
        uint64_t v18 = 1;
      }
      break;
    case 260:
      if (a8 < 3) {
        uint64_t v18 = qword_1828F0BC8[a8];
      }
      break;
    default:
      break;
  }
  if ((WORD4(v28) & 0x400) != 0) {
    unint64_t v20 = *((void *)&v30 + 1);
  }
  else {
    unint64_t v20 = 1;
  }
  if ((WORD4(v28) & 0x400) == 0) {
    unint64_t v17 = 1;
  }
  uint64_t v21 = a3 >> a7;
  if (a3 >> a7 <= 1) {
    uint64_t v21 = 1;
  }
  uint64_t v22 = a4 >> a7;
  if (a4 >> a7 <= 1) {
    uint64_t v22 = 1;
  }
  *a9 = v21;
  a9[1] = v22;
  uint64_t v23 = a5 >> a7;
  if (a5 >> a7 <= 1) {
    uint64_t v23 = 1;
  }
  unint64_t v24 = (v21 + v17 - 1) / v17;
  a9[2] = v23;
  a9[3] = v24;
  unint64_t v25 = (v22 + v20 - 1) / v20;
  a9[4] = v25;
  a9[5] = v23;
  a9[6] = v24 * v17;
  a9[7] = v25 * v20;
  uint64_t v26 = v18 * a6;
  a9[8] = v23;
  a9[9] = v26;
  unint64_t v27 = v24 * v26;
  a9[10] = v27;
  a9[11] = v25 * v27;
  a9[12] = v25 * v27 * v23;
}

void validateVertexAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1 || !*(void *)(a1 + 8)) {
    _MTLMessageContextPush_(a4, 4, @"Attribute at index %d references a buffer at index %lu that has no stride.", a4, a5, a6, a7, a8, a2);
  }
  if (*(void *)(a3 + 8) >= 0x38uLL)
  {
    _MTLMessageContextPush_(a4, 4, @"format is not a valid MTLVertexFormat / MTLAttributeFormat.", a4, a5, a6, a7, a8, a9);
  }
}

{
  unint64_t v11;
  uint64_t vars8;

  if (!a1 || !*(void *)(a1 + 8)) {
    _MTLMessageContextPush_(a4, 4, @"Attribute at index %d references a buffer at index %lu that has no stride.", a4, a5, a6, a7, a8, a2);
  }
  v11 = *(void *)(a3 + 8);

  validateMTLAttributeFormat(v11, a4, a3, a4, a5, a6, a7, a8, a9);
}

void validateFunctionStepRate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = [a1 patchType];
  switch(a2)
  {
    case 0:
      if (a3) {
        _MTLMessageContextPush_(a4, 4, @"stepRate(%lu) must be zero if stepFunction is MTLVertexStepFunctionConstant.", v9, v10, v11, v12, v13, a3);
      }
      break;
    case 1:
      if (a1 && v8) {
        _MTLMessageContextPush_(a4, 4, @"MTLVertexStepFunctionPerVertex not allowed with postTessellationVertexFunction.", v9, v10, v11, v12, v13, v14);
      }
      if (a3 != 1) {
        _MTLMessageContextPush_(a4, 4, @"stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerVertex.", v9, v10, v11, v12, v13, a3);
      }
      break;
    case 2:
      if (!a3) {
        _MTLMessageContextPush_(a4, 4, @"stepRate(%lu) cannot be zero if stepFunction is MTLVertexStepFunctionPerInstance.", v9, v10, v11, v12, v13, 0);
      }
      break;
    case 3:
      if (a1 && !v8) {
        _MTLMessageContextPush_(a4, 4, @"MTLVertexStepFunctionPerPatch requires postTessellationVertexFunction.", v9, v10, v11, v12, v13, v14);
      }
      if (a3 != 1) {
        _MTLMessageContextPush_(a4, 4, @"stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerPatch.", v9, v10, v11, v12, v13, a3);
      }
      break;
    case 4:
      if (a1 && !v8) {
        _MTLMessageContextPush_(a4, 4, @"MTLVertexStepFunctionPerPatchControlPoint requires postTessellationVertexFunction.", v9, v10, v11, v12, v13, v14);
      }
      if (a3 != 1) {
        _MTLMessageContextPush_(a4, 4, @"stepRate(%lu) must be one if stepFunction is MTLVertexStepFunctionPerPatchAndPerInstance.", v9, v10, v11, v12, v13, a3);
      }
      break;
    default:
      return;
  }
}

void _mtlValidateArgumentsForTextureViewOnDevice(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9)
{
  uint64_t v64 = 0;
  memset(v63, 0, sizeof(v63));
  _MTLMessageContextBegin_((uint64_t)v63, (uint64_t)"_mtlValidateArgumentsForTextureViewOnDevice", 1855, (uint64_t)a1, 0, (uint64_t)"Texture Creation");
  uint64_t v17 = [a2 pixelFormat];
  uint64_t v62 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = 0u;
  MTLPixelFormatGetInfoForDevice(a1, v17, (uint64_t)&v59);
  uint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v55 = 0u;
  MTLPixelFormatGetInfoForDevice(a1, a3, (uint64_t)&v55);
  if (a9)
  {
    if ((BYTE9(v59) & 4) == 0) {
      _MTLMessageContextPush_((uint64_t)v63, 4, @"source texture (%s) is not a compressed pixel format.", v18, v19, v20, v21, v22, v59);
    }
    if ((BYTE9(v55) & 4) != 0) {
      _MTLMessageContextPush_((uint64_t)v63, 4, @"texture view pixelFormat (%s) is a compressed pixel format.", v18, v19, v20, v21, v22, v59);
    }
    if (*((void *)&v60 + 1) != *((void *)&v56 + 1)) {
      _MTLMessageContextPush_((uint64_t)v63, 4, @"source texture block size (%lu) does not match texture view pixel size (%lu)", v18, v19, v20, v21, v22, *((uint64_t *)&v60 + 1));
    }
  }
  else if (v17 != a3)
  {
    if (!(void)v60) {
      _MTLMessageContextPush_((uint64_t)v63, 4, @"source texture pixelFormat (%s) not castable.", v18, v19, v20, v21, v22, v59);
    }
    uint64_t v23 = v56;
    if (!(void)v56)
    {
      _MTLMessageContextPush_((uint64_t)v63, 4, @"texture view pixelFormat (%s) not castable.", v18, v19, v20, v21, v22, v55);
      uint64_t v23 = v56;
    }
    if ((void)v60 != v23) {
      _MTLMessageContextPush_((uint64_t)v63, 4, @"source texture pixelFormat (%s) not compatible with texture view pixelFormat (%s).", v18, v19, v20, v21, v22, v59);
    }
  }
  unint64_t v29 = [a2 textureType];
  if (a4 >= 0xA) {
    _MTLMessageContextPush_((uint64_t)v63, 4, @"type (%lu) is not a valid MTLTextureType.", v24, v25, v26, v27, v28, a4);
  }
  if (v29 >= 0xA || a4 >= 0xA) {
    abort();
  }
  if (qword_1828F0B78[v29] == qword_1828F0B78[a4])
  {
    if (a6) {
      goto LABEL_21;
    }
LABEL_39:
    _MTLMessageContextPush_((uint64_t)v63, 4, @"newLevelRange.length must not be 0.", v24, v25, v26, v27, v28, v54);
    if (a8) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }
  _MTLMessageContextPush_((uint64_t)v63, 4, @"source texture textureType (%@) not compatible with texture view textureType (%@).", v24, v25, v26, v27, v28, *((void *)&off_1E52209A8 + v29));
  if (!a6) {
    goto LABEL_39;
  }
LABEL_21:
  if (a8) {
    goto LABEL_22;
  }
LABEL_40:
  _MTLMessageContextPush_((uint64_t)v63, 4, @"newSliceRange.length must not be 0.", v24, v25, v26, v27, v28, v54);
LABEL_22:
  unint64_t v30 = a5 + a6;
  if (v30 > [a2 mipmapLevelCount])
  {
    [a2 mipmapLevelCount];
    _MTLMessageContextPush_((uint64_t)v63, 4, @"(newLevelRange.location + newLevelRange.length)(%lu) must be <= [texture mipmapLevelCount](%lu).", v44, v45, v46, v47, v48, v30);
  }
  unint64_t v31 = a7 + a8;
  uint64_t v32 = [a2 numFaces];
  if (v31 > [a2 arrayLength] * v32)
  {
    [a2 numFaces];
    [a2 arrayLength];
    _MTLMessageContextPush_((uint64_t)v63, 4, @"(newSliceRange.location + newSliceRange.length)(%lu) must be <= (%lu).", v49, v50, v51, v52, v53, v31);
  }
  if (a4 - 5 >= 2) {
    unint64_t v38 = 1;
  }
  else {
    unint64_t v38 = 6;
  }
  if (a8 % v38) {
    _MTLMessageContextPush_((uint64_t)v63, 4, @"newSliceRange.length(%lu) must be a multiple of (%lu).", v33, v34, v35, v36, v37, a8);
  }
  if (((1 << a4) & 0x16A) == 0 && a8 != v38) {
    _MTLMessageContextPush_((uint64_t)v63, 4, @"newSliceRange.length(%lu) must equal (%lu) for textureType (%@).", v33, v34, v35, v36, v37, a8);
  }
  if ([a2 sampleCount] != 1 && (WORD4(v55) & 0x100) == 0) {
    _MTLMessageContextPush_((uint64_t)v63, 4, @"newPixelFormat(%s) must be MSAA capable to be used to view a texture with sampleCount(%lu).", v39, v40, v41, v42, v43, v55);
  }
  _MTLMessageContextEnd((uint64_t)v63);
}

uint64_t MTLPipelineLibrarySerializer::deserializeColorAttachments(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  v15[0] = a2;
  v15[1] = a3;
  uint64_t result = MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v7, v15);
  if (v10 < v9)
  {
    uint64_t v5 = 0;
    while (1)
    {
      switch(v12)
      {
        case 0:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [a1 objectAtIndexedSubscript:__dst];
          uint64_t v5 = (void *)result;
          break;
        case 1:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setPixelFormat:__dst];
          break;
        case 2:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setBlendingEnabled:__dst != 0];
          break;
        case 3:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setSourceRGBBlendFactor:__dst];
          break;
        case 4:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setDestinationRGBBlendFactor:__dst];
          break;
        case 5:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setRgbBlendOperation:__dst];
          break;
        case 6:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setSourceAlphaBlendFactor:__dst];
          break;
        case 7:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setDestinationAlphaBlendFactor:__dst];
          break;
        case 8:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setAlphaBlendOperation:__dst];
          break;
        case 9:
          unsigned int __dst = 0;
          if (v13 + v14 > v8) {
            goto LABEL_28;
          }
          memcpy(&__dst, (const void *)(v7 + v14), v13);
          uint64_t result = [v5 setWriteMask:__dst];
          break;
        default:
          break;
      }
      if (++v10 >= v9) {
        break;
      }
      if (v11 + 2 > v8) {
LABEL_28:
      }
        abort();
      size_t v6 = *(unsigned __int8 *)(v7 + v11 + 1);
      int v12 = *(unsigned __int8 *)(v7 + v11);
      size_t v13 = v6;
      uint64_t v14 = v11 + 2;
      v11 += 2 + v6;
    }
  }
  return result;
}

void MTLDebugValidateMTLPixelFormat(uint64_t a1)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  MTLPixelFormatGetInfoForDevice(0, a1, (uint64_t)v6);
  if (a1)
  {
    if ((BYTE8(v6[0]) & 1) == 0) {
      MTLReportFailure(0, "MTLDebugValidateMTLPixelFormat", 1598, @"pixelFormat (%lu) is not a valid MTLPixelFormat.", v2, v3, v4, v5, a1);
    }
  }
}

void _mtlValidateStrideTextureParameters(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v45 = 0;
  memset(v44, 0, sizeof(v44));
  _MTLMessageContextBegin_((uint64_t)v44, (uint64_t)"_mtlValidateStrideTextureParameters", 1916, (uint64_t)a1, 0, (uint64_t)"Texture Descriptor Validation");
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  MTLPixelFormatGetInfoForDevice(a1, [a2 pixelFormat], (uint64_t)&v40);
  if (a6) {
    uint64_t v17 = "IOSurface";
  }
  else {
    uint64_t v17 = "Linear";
  }
  if ((BYTE9(v40) & 4) == 0 && *((void *)&v41 + 1) * a3 > a5) {
    _MTLMessageContextPush_((uint64_t)v44, 4, @"%s texture: bytesPerRow (%llu) must be greater or equal to (%llu) bytes", v12, v13, v14, v15, v16, (uint64_t)v17);
  }
  if ([a2 textureType] == 9)
  {
    uint64_t v23 = 1;
LABEL_24:
    uint64_t v25 = v23;
    goto LABEL_25;
  }
  if (*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 288) != 7085)
  {
    if (a6)
    {
      if ([a2 usage] == 1) {
        uint64_t v24 = [a1 iosurfaceReadOnlyTextureAlignmentBytes];
      }
      else {
        uint64_t v24 = [a1 iosurfaceTextureAlignmentBytes];
      }
    }
    else
    {
      uint64_t v24 = [a1 linearTextureAlignmentBytes];
    }
LABEL_23:
    uint64_t v23 = v24;
    goto LABEL_24;
  }
  if ([a2 textureType] != 3)
  {
    if ([a2 usage] == 1) {
      uint64_t v24 = [a1 deviceLinearReadOnlyTextureAlignmentBytes];
    }
    else {
      uint64_t v24 = [a1 deviceLinearTextureAlignmentBytes];
    }
    goto LABEL_23;
  }
  uint64_t v23 = [a1 linearTextureArrayAlignmentBytes];
  uint64_t v25 = [a1 linearTextureArrayAlignmentSlice];
  if (!v23 || !v25)
  {
    _MTLMessageContextPush_((uint64_t)v44, 4, @"2D linear texture array is not supported.", v18, v19, v20, v21, v22, v39);
    if (!v25) {
      goto LABEL_24;
    }
  }
LABEL_25:
  if (((v23 - 1) & a5) != 0) {
    _MTLMessageContextPush_((uint64_t)v44, 4, @"%s texture: bytesPerRow (%llu) must be aligned to %llu bytes", v18, v19, v20, v21, v22, (uint64_t)v17);
  }
  if (((v25 - 1) & a4) != 0) {
    _MTLMessageContextPush_((uint64_t)v44, 4, @"%s texture: offset (%llu) must be aligned to %llu bytes", v18, v19, v20, v21, v22, (uint64_t)v17);
  }
  if ((WORD4(v40) & 0x4000) == 0 && (BYTE8(v40) & 0x60) != 0) {
    _MTLMessageContextPush_((uint64_t)v44, 4, @"%s texture: cannot create compressed, depth, or stencil textures, pixelFormat (%s) disallowed", v18, v19, v20, v21, v22, (uint64_t)v17);
  }
  unint64_t v31 = (uint64_t *)[a2 descriptorPrivate];
  if (v31[5] != 1) {
    _MTLMessageContextPush_((uint64_t)v44, 4, @"%s texture: cannot be mipmapped, mipmapLevelCount (%lu) disallowed", v26, v27, v28, v29, v30, (uint64_t)v17);
  }
  if (v31[4] != 1) {
    _MTLMessageContextPush_((uint64_t)v44, 4, @"%s texture: must have depth == 1, depth (%lu) disallowed", v26, v27, v28, v29, v30, (uint64_t)v17);
  }
  if ([a2 textureType] != 9)
  {
    uint64_t v37 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 288);
    uint64_t v38 = *v31;
    if (v37 == 7085)
    {
      if ((unint64_t)(v38 - 4) <= 0xFFFFFFFFFFFFFFFDLL) {
        _MTLMessageContextPush_((uint64_t)v44, 4, @"%s texture: must be of type MTLTextureType2D or linear MTLTextureType2DArray, textureType (%@) disallowed", v32, v33, v34, v35, v36, (uint64_t)v17);
      }
    }
    else if (v38 != 2)
    {
      _MTLMessageContextPush_((uint64_t)v44, 4, @"%s texture: must be of type MTLTextureType2D, textureType (%@) disallowed", v32, v33, v34, v35, v36, (uint64_t)v17);
    }
  }
  _MTLMessageContextEnd((uint64_t)v44);
}

uint64_t _MTLMessageContextBegin_(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(result + 24) = a4;
  *(void *)(result + 32) = a5;
  *(_DWORD *)(result + 16) = a3;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = a6;
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = a2;
  return result;
}

void _MTLMessageContextEnd(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = objc_opt_new();
    uint64_t v3 = objc_opt_new();
    if ([*(id *)(a1 + 40) count])
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndex:", v4), "type");
        uint64_t v7 = [*(id *)(a1 + 40) objectAtIndex:v4];
        if (v6) {
          [v3 addObject:v7];
        }
        v5 |= v6;
        ++v4;
      }
      while ([*(id *)(a1 + 40) count] > v4);
    }
    else
    {
      uint64_t v5 = 0;
    }
    [v2 setObject:v3 forKey:@"MTLMessageArrayKey"];
    [v2 setObject:@"There was an issue with your Metal framework usage. Please see MTLMessageArrayKey for the NSArray of issue strings." forKey:*MEMORY[0x1E4F28568]];
    [v2 setObject:@"There was an issue with your Metal framework usage." forKey:*MEMORY[0x1E4F28588]];
    [v2 setObject:@"Please address issues included in MTLMessageArrayKey and try again." forKey:*MEMORY[0x1E4F285A0]];
    unint64_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLValidationError" code:*(void *)(a1 + 32) userInfo:v2];
    id v9 = [[MTLMessageFilter alloc] init:v5 device:*(void *)(a1 + 24)];
    _MTLNotifyMessageObservers((uint64_t)v9, (uint64_t)v8);

    if (*(void *)(a1 + 40))
    {
      unint64_t v10 = (void *)MEMORY[0x18530C9F0]();
      id v11 = *(id *)(a1 + 40);
      id v12 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F28E78]), "initWithFormat:", @"%s", *(void *)(a1 + 48));
      [v12 appendString:@"\n"];
      id v13 = objc_alloc_init(MEMORY[0x1E4F28E78]);
      id v14 = objc_alloc_init(MEMORY[0x1E4F28E78]);
      id v15 = objc_alloc_init(MEMORY[0x1E4F28E78]);
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      uint64_t v16 = *(void **)(a1 + 40);
      uint64_t v17 = [v16 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v17)
      {
        uint64_t v18 = v17;
        id v31 = v15;
        uint64_t v29 = v12;
        uint64_t v30 = v10;
        int v19 = 0;
        uint64_t v20 = *(void *)v33;
        do
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            if (*(void *)v33 != v20) {
              objc_enumerationMutation(v16);
            }
            uint64_t v22 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            uint64_t v23 = v13;
            if (([v22 type] & 4) != 0
              || (uint64_t v23 = v14, ([v22 type] & 8) != 0)
              || (uint64_t v23 = v31, ([v22 type] & 2) != 0))
            {
              [v23 appendFormat:@"%@\n", objc_msgSend(v22, "string")];
            }
            v19 |= [v22 type];
          }
          uint64_t v18 = [v16 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v18);
        id v12 = v29;
        [v29 appendFormat:@"%@%@%@", v13, v14, v31];
        if ((v19 & 4) != 0)
        {
          unint64_t v28 = 0;
          unint64_t v10 = v30;
          goto LABEL_27;
        }
        unint64_t v10 = v30;
        if ((v19 & 8) != 0)
        {
          unint64_t v28 = 1;
LABEL_27:
          MTLReportFailure(v28, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), @"%@", v24, v25, v26, v27, (uint64_t)v12);
          goto LABEL_28;
        }
      }
      else
      {
        [v12 appendFormat:@"%@%@%@", v13, v14, v15];
      }
      unint64_t v28 = 2;
      goto LABEL_27;
    }
  }
LABEL_28:
  *(void *)(a1 + 24) = 0;
}

void MTLPixelFormatGetInfoForDevice(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v3[0] = a1;
  v3[1] = (id)-1;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  __p = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 48) = 0;
  MTLPixelFormatGetInfoForFeatureSetQuery(v3, a2, (int64x2_t *)a3);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_1826FB1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void validateMTLStorageMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  while (qword_1828F0B60[v3] != a1)
  {
    if (++v3 == 3)
    {
      unint64_t v4 = objc_msgSend(NSString, "stringWithFormat:", @"invalid storageMode (%lu). Must be one of", a1);
      for (uint64_t i = 0; i != 3; ++i)
        unint64_t v4 = (void *)[v4 stringByAppendingFormat:@" %@(%lu)", *((void *)&off_1E5220988 + qword_1828F0B60[i]), qword_1828F0B60[i]];
      _MTLMessageContextPush_(a2, 4, @"%@", v6, v7, v8, v9, v10, (uint64_t)v4);
      return;
    }
  }
}

void _mtlValidateMTLTextureSwizzleKey(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 6u) {
    MTLReportFailure(0, "_mtlValidateMTLTextureSwizzle", 445, @"swizzle(%u) is not a valid MTLTextureSwizzle.", a5, a6, a7, a8, a1);
  }
  if (BYTE1(a1) >= 6u) {
    MTLReportFailure(0, "_mtlValidateMTLTextureSwizzle", 445, @"swizzle(%u) is not a valid MTLTextureSwizzle.", a5, a6, a7, a8, BYTE1(a1));
  }
  if (BYTE2(a1) >= 6u) {
    MTLReportFailure(0, "_mtlValidateMTLTextureSwizzle", 445, @"swizzle(%u) is not a valid MTLTextureSwizzle.", a5, a6, a7, a8, BYTE2(a1));
  }
  if (HIBYTE(a1) >= 6u) {
    MTLReportFailure(0, "_mtlValidateMTLTextureSwizzle", 445, @"swizzle(%u) is not a valid MTLTextureSwizzle.", a5, a6, a7, a8, HIBYTE(a1));
  }
}

void MTLReportFailure(unint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int ErrorModeType = MTLFailureTypeGetErrorModeType(a1);
  if (ErrorModeType != 4)
  {
    int v14 = ErrorModeType;
    id v15 = (id)[[NSString alloc] initWithFormat:a4 arguments:&a9];
    if (reportFailureBlock)
    {
      (*(void (**)(void))(reportFailureBlock + 16))();
    }
    else
    {
      os_log_type_t v16 = OS_LOG_TYPE_ERROR;
      uint64_t v17 = "error";
      switch(a1)
      {
        case 0uLL:
        case 1uLL:
          goto LABEL_8;
        case 2uLL:
          os_log_type_t v16 = OS_LOG_TYPE_INFO;
          uint64_t v17 = "warning";
          goto LABEL_8;
        case 3uLL:
          uint64_t v17 = "errorCheckExtended";
          goto LABEL_8;
        case 4uLL:
          if (dword_1EB226A7C >= 2)
          {
LABEL_8:
            switch(v14)
            {
              case 0:
                goto LABEL_12;
              case 1:
                uint64_t v18 = [NSString stringWithCString:a2 encoding:4];
                int v19 = (void *)MEMORY[0x1E4F1CA00];
                uint64_t v20 = *MEMORY[0x1E4F1C3A8];
                v21[0] = @"Function Name";
                v21[1] = @"Line";
                v22[0] = v18;
                v22[1] = [NSNumber numberWithUnsignedInt:a3];
                objc_exception_throw((id)objc_msgSend(v19, "exceptionWithName:reason:userInfo:", v20, v15, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v22, v21, 2)));
              case 2:
              case 6:
                if (os_log_type_enabled(MEMORY[0x1E4F14500], v16))
                {
                  *(_DWORD *)buf = 136315906;
                  uint64_t v24 = a2;
                  __int16 v25 = 1024;
                  int v26 = a3;
                  __int16 v27 = 2080;
                  unint64_t v28 = v17;
                  __int16 v29 = 2080;
                  uint64_t v30 = [v15 UTF8String];
                  _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], v16, "%s, line %u: %s '%s'\n", buf, 0x26u);
                }
                if (a1 != 4) {
LABEL_12:
                }
                  MTLReportFailure_cold_1(v15, a2, a3);
                return;
              case 3:
                fprintf_l((FILE *)*MEMORY[0x1E4F143C8], 0, "%s, line %u: %s '%s'\n", a2, a3, v17, (const char *)[v15 UTF8String]);
                return;
              case 5:
                break;
              default:
                goto LABEL_16;
            }
          }
          NSLog(&stru_1ECACAF48.isa, v15);
          break;
        default:
LABEL_16:
          abort();
      }
    }
  }
}

void _MTLMessageContextPush_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!*(void *)(a1 + 40)) {
    *(void *)(a1 + 40) = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:1];
  }
  id v12 = (void *)[[NSString alloc] initWithFormat:a3 arguments:&a9];
  id v13 = [[MTLMessage alloc] init:a2 message:v12];

  [*(id *)(a1 + 40) addObject:v13];
  if ((a2 & 0xC) != 0) {
    ++*(void *)a1;
  }
}

uint64_t MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a2[1];
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = v3;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *v2;
  *(void *)(result + 32) = 1;
  if (!v4) {
    return result;
  }
  *(void *)(result + 16) = v4;
  if (v3 <= 2) {
LABEL_6:
  }
    abort();
  int v5 = v2[1];
  uint64_t v6 = v2[2];
  *(_DWORD *)(result + 40) = v5;
  *(void *)(result + 48) = v6;
  *(void *)(result + 56) = 3;
  *(void *)(result + 32) = v6 + 3;
  return result;
}

BOOL MTLPipelineDataCache::parseDataFileHeader(MTLPipelineDataCache *this)
{
  uint64_t v1 = *((void *)this + 17);
  if (v1 && (unint64_t v2 = *((void *)this + 18), v2 > 0x27))
  {
    if (*(_DWORD *)v1 == 1297109068
      && *(_WORD *)(v1 + 4) == 1
      && !*(_WORD *)(v1 + 6)
      && (int v5 = *(_DWORD *)(v1 + 8), v5 == *((_DWORD *)this + 38))
      && (int v6 = *(_DWORD *)(v1 + 12), v6 == *((_DWORD *)this + 39))
      && *(void *)(v1 + 16) == v2)
    {
      *((_DWORD *)this + 38) = v5;
      *((_DWORD *)this + 39) = v6;
      unint64_t v7 = *(void *)(v1 + 32);
      unint64_t v8 = v2 - v7;
      if (v2 < v7 || (unint64_t v9 = *(void *)(v1 + 24), v9 > v2 - 8))
      {
        uint64_t v22 = MTLPipelineLibraryDebugLog();
        BOOL result = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
        if (result)
        {
          MTLPipelineDataCache::parseDataFileHeader();
          return 0;
        }
      }
      else
      {
        unint64_t v10 = *(void *)(v1 + v9);
        BOOL v11 = !is_mul_ok(v10, 0x30uLL);
        BOOL v12 = __CFADD__(v9 + 8, 48 * v10);
        if (v11 || v12 || v9 + 8 + 48 * v10 > v2)
        {
          uint64_t v23 = MTLPipelineLibraryDebugLog();
          BOOL result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if (result)
          {
            MTLPipelineDataCache::parseDataFileHeader();
            return 0;
          }
        }
        else
        {
          if (v10)
          {
            uint64_t v13 = v1 + v7;
            int v14 = (char *)this + 64;
            for (uint64_t i = (void *)(v9 + v1 + 48); ; i += 6)
            {
              os_log_type_t v16 = operator new(0x28uLL);
              __p = v16;
              long long v26 = xmmword_1828D4980;
              long long v17 = *(_OWORD *)(i - 3);
              *os_log_type_t v16 = *(_OWORD *)(i - 5);
              v16[1] = v17;
              *((unsigned char *)v16 + 32) = 0;
              uint64_t v18 = *(i - 1);
              uint64_t v19 = *i;
              if (__CFADD__(v18, *i) || v18 + *i > v8) {
                break;
              }
              p_p = &__p;
              uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v14, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
              *((void *)v20 + 5) = v19;
              *((void *)v20 + 6) = v18;
              *((void *)v20 + 7) = v13 + v18;
              if (SHIBYTE(v26) < 0) {
                operator delete(__p);
              }
              BOOL result = 1;
              if (!--v10) {
                return result;
              }
            }
            uint64_t v24 = MTLPipelineLibraryDebugLog();
            if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)
              || (MTLPipelineDataCache::parseDataFileHeader((uint64_t)v24, (unsigned __int8 *)&v26 + 15) & 1) != 0)
            {
              operator delete(__p);
            }
            return 0;
          }
          return 1;
        }
      }
    }
    else
    {
      uint64_t v21 = MTLPipelineLibraryDebugLog();
      BOOL result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
      if (result)
      {
        MTLPipelineDataCache::parseDataFileHeader();
        return 0;
      }
    }
  }
  else
  {
    unint64_t v3 = MTLPipelineLibraryDebugLog();
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      MTLPipelineDataCache::parseDataFileHeader();
      return 0;
    }
  }
  return result;
}

void sub_1826FBEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1826FC170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

void std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = (std::string *)(v8 + 2);
  uint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1826FC51C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t MTLLibraryDataWithArchive::parseArchiveSync(uint64_t a1, NSError **a2, int a3, void *a4)
{
  int v75 = a3;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t, void))(*(void *)a1 + 312))(a1, 0);
  if ((*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(void *)a1 + 320))(a1, &v87, 8) != 8)
  {
    if (a2)
    {
      uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file (unexpected end of file)" forKey:*MEMORY[0x1E4F28568]];
      uint64_t v15 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v14];
LABEL_115:
      uint64_t v58 = 0;
      *a2 = v15;
      return v58;
    }
    return 0;
  }
  if (v87 >> 1 != 1599962981) {
    goto LABEL_24;
  }
  if (_MTLGetMTLCompilerLLVMVersionForDevice(a4) - 32023 >= 2) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = 131079;
  }
  if (!v88)
  {
LABEL_32:
    if (a2)
    {
      uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Fat library file but no AIR slice" forKey:*MEMORY[0x1E4F28568]];
      uint64_t v15 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v21];
      goto LABEL_115;
    }
    return 0;
  }
  unsigned int v8 = 0;
  char v9 = 0;
  int v10 = 0;
  unsigned int v11 = bswap32(v88);
  if (v11 <= 1) {
    unsigned int v11 = 1;
  }
  int v12 = -v11;
  do
  {
    ++v10;
    while (1)
    {
      if ((*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 320))(a1, v84, 20) != 20)
      {
        if (a2)
        {
          uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file (unexpected end of file)" forKey:*MEMORY[0x1E4F28568]];
          *a2 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v16];
        }
        return 0;
      }
      if (LODWORD(v84[0]) == 385875969)
      {
        unsigned int v13 = bswap32(DWORD1(v84[0]));
        if (v13 <= v7 && (v9 & (v13 <= v8)) == 0) {
          break;
        }
      }
      ++v10;
      if (v12 + v10 == 1)
      {
        if (v9) {
          goto LABEL_24;
        }
        goto LABEL_32;
      }
    }
    *(void *)(a1 + 240) = bswap32(DWORD2(v84[0]));
    char v9 = 1;
    unsigned int v8 = v13;
  }
  while (v12 + v10);
LABEL_24:
  (*(void (**)(uint64_t, void))(*(void *)a1 + 312))(a1, 0);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 320))(a1, a1 + 152, 88);
  unint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 328))(a1);
  BOOL v19 = v17 == 88 && *(_DWORD *)(a1 + 152) == 1112298573;
  if (!v19 || *(void *)(a1 + 168) > v18)
  {
    if (a2)
    {
      uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file" forKey:*MEMORY[0x1E4F28568]];
      uint64_t v15 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v20];
      goto LABEL_115;
    }
    return 0;
  }
  __int16 v22 = *(_WORD *)(a1 + 156);
  *(_WORD *)(a1 + 156) = v22 & 0x7FFF;
  if ((v22 & 0x7FFF) == 0)
  {
LABEL_37:
    if (a2)
    {
      uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"This version of metallib is too old and not supported any longer." forKey:*MEMORY[0x1E4F28568]];
      uint64_t v15 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v24];
      goto LABEL_115;
    }
    return 0;
  }
  if ((v22 & 0x7FFF) != 1) {
    goto LABEL_113;
  }
  unsigned int v23 = *(unsigned __int16 *)(a1 + 158);
  if (v23 <= 1) {
    goto LABEL_37;
  }
  if (v23 != 2)
  {
LABEL_113:
    if (a2)
    {
      uint64_t v57 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"This version of metallib is too recent and not supported." forKey:*MEMORY[0x1E4F28568]];
      uint64_t v15 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v57];
      goto LABEL_115;
    }
    return 0;
  }
  unsigned int v86 = 0;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 312))(a1, *(void *)(a1 + 176));
  if ((*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(void *)a1 + 320))(a1, &v86, 4) != 4)
  {
    generateNSError(a2, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, &cfstr_InvalidLibrary_1.isa);
    return 0;
  }
  long long v25 = 0uLL;
  memset(v84, 0, sizeof(v84));
  int v85 = 1065353216;
  v83[0] = 0;
  v83[1] = 0;
  v82 = (uint64_t *)v83;
  if (!v86)
  {
    LOBYTE(v27) = 0;
LABEL_120:
    *(unsigned char *)(a1 + 616) = v27 & 1;
    *(_OWORD *)(a1 + 520) = v25;
    *(_OWORD *)(a1 + 536) = v25;
    *(_OWORD *)(a1 + 552) = v25;
    *(_OWORD *)(a1 + 568) = v25;
    *(_OWORD *)(a1 + 584) = v25;
    *(_OWORD *)(a1 + 600) = v25;
    long long v60 = *(_OWORD *)(a1 + 200);
    v76[2] = *(_OWORD *)(a1 + 184);
    v76[3] = v60;
    v76[4] = *(_OWORD *)(a1 + 216);
    uint64_t v77 = *(void *)(a1 + 232);
    long long v61 = *(_OWORD *)(a1 + 168);
    v76[0] = *(_OWORD *)(a1 + 152);
    v76[1] = v61;
    if (!MTLLibraryDataWithArchive::parseHeaderExtension((void *)a1, (uint64_t)v76, a1 + 520, a2)
      || !MTLLibraryDataWithArchive::parseDynamicHeaderSection((MTLLibraryDataWithArchive *)a1, a2)
      || !MTLLibraryDataWithArchive::parseImportedSymbolListSection((MTLLibraryDataWithArchive *)a1, a2)
      || !MTLLibraryDataWithArchive::parseVariableListSection((MTLLibraryDataWithArchive *)a1, a2)
      || !MTLLibraryDataWithArchive::generateHashForSpecializedFunctionScripts((MTLLibraryDataWithArchive *)a1, (uint64_t)v84, a2)|| !MTLLibraryDataWithArchive::parseStitchingScript((MTLLibraryDataWithArchive *)a1, &v82, a2))
    {
      goto LABEL_140;
    }
    uint64_t v58 = MTLLibraryDataWithArchive::parseScriptSection((MTLLibraryDataWithArchive *)a1, a2);
    goto LABEL_141;
  }
  int v26 = 0;
  int v72 = 0;
  LODWORD(v73) = 0;
  uint64_t v27 = 0;
  int v68 = v22;
  uint64_t v69 = a1 + 320;
  uint64_t v71 = a1 + 280;
LABEL_43:
  unint64_t v81 = 0;
  unint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
  unsigned int v80 = 0;
  uint64_t v28 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(void *)a1 + 320))(a1, &v80, 4);
  int v70 = v26;
  if (v28 != 4)
  {
    if (!a2) {
      goto LABEL_140;
    }
    goto LABEL_131;
  }
  unsigned __int8 v29 = 0;
  int v74 = 0;
  int v79 = 0;
  unsigned __int16 v78 = 0;
  while (1)
  {
    if ((*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 320))(a1, &v79, 4) != 4)
    {
LABEL_135:
      generateNSError(a2, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, &cfstr_InvalidLibrary_1.isa);
      goto LABEL_140;
    }
    unsigned int v30 = v79;
    int v31 = bswap32(v79);
    int v79 = v31;
    if (((v30 == 1413762629) & v29) != 0) {
      goto LABEL_110;
    }
    if (v30 != 1413762629)
    {
      if ((*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)a1 + 320))(a1, &v78, 2) != 2) {
        goto LABEL_135;
      }
      int v31 = v79;
    }
    if (v31 > 1397769032) {
      break;
    }
    if (v31 > 1212240711)
    {
      if (v31 == 1212240712)
      {
        if ((*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 320))(a1, v90, 32) != 32) {
          goto LABEL_135;
        }
        unint64_t v34 = v81;
        v89 = (long long *)v90;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(v69, (unint64_t *)v90, (uint64_t)&std::piecewise_construct, &v89);
        v74 |= 4u;
        v35[6] = v34;
        goto LABEL_109;
      }
      if (v31 != 1312902469) {
        goto LABEL_88;
      }
      uint64_t v46 = v78;
      MEMORY[0x1F4188790]();
      long long v42 = &v67[-v47];
      if ((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 320))(a1, &v67[-v47], v46) != v46)
      {
        v63 = @"Invalid library file (unexpected end of file)";
LABEL_137:
        generateNSError(a2, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, &v63->isa);
        goto LABEL_140;
      }
      if (v42[v46 - 1])
      {
        v63 = @"Non zero terminated function name!";
        goto LABEL_137;
      }
      uint64_t v43 = (void *)[[NSString alloc] initWithUTF8String:v42];
      if (!v43)
      {
LABEL_139:
        generateNSError(a2, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, (NSString *)[NSString stringWithFormat:@"Corrupted function name: %@!", objc_msgSend(NSString, "stringWithFormat:", @"%s", v42)]);
        goto LABEL_140;
      }
      goto LABEL_85;
    }
    if (v31 == 1095518547)
    {
      uint64_t v40 = v78;
      MEMORY[0x1F4188790]();
      long long v42 = &v67[-v41];
      if ((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 320))(a1, &v67[-v41], v40) != v40)
      {
        v63 = @"Invalid library file (unexpected end of file)";
        goto LABEL_137;
      }
      if (v42[v40 - 1])
      {
        v63 = @"Non zero terminated function name!";
        goto LABEL_137;
      }
      uint64_t v43 = (void *)[[NSString alloc] initWithUTF8String:v42];
      if (!v43) {
        goto LABEL_139;
      }
LABEL_85:

      unint64_t v48 = v81;
      std::string::basic_string[abi:ne180100]<0>(v90, v42);
      v89 = (long long *)v90;
      *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v71, (unsigned __int8 *)v90, (uint64_t)&std::piecewise_construct, &v89)+ 5) = v48;
      if (SHIBYTE(v91) < 0) {
        operator delete(v90[0]);
      }
      v74 |= 1u;
      goto LABEL_109;
    }
    if (v31 != 1162757204) {
      goto LABEL_88;
    }
LABEL_109:
    v29 |= v73 & (v74 == 7);
    if (v79 == 1162757204)
    {
LABEL_110:
      (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 312))(a1, v81 + v80);
      int v26 = v70 + 1;
      if (v70 + 1 < v86) {
        goto LABEL_43;
      }
      long long v25 = 0uLL;
      if (v72 & v27)
      {
        generateNSError(a2, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, &cfstr_LibraryWithBot.isa);
        goto LABEL_140;
      }
      goto LABEL_120;
    }
  }
  if (v31 <= 1398031176)
  {
    if (v31 == 1397769033)
    {
      uint64_t v44 = (char *)malloc_type_malloc(v78, 0xCF4093CFuLL);
      uint64_t v45 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)a1 + 320))(a1, v44, v78);
      if (v45 != v78) {
        goto LABEL_135;
      }
      MTLLibraryDataWithArchive::decodeSPCIToken(a1, (uint64_t)v84, v44, v78, v81);
      free(v44);
      goto LABEL_109;
    }
    if (v31 != 1398031173)
    {
LABEL_88:
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v49 + v78) & 1) == 0) {
        goto LABEL_135;
      }
      goto LABEL_109;
    }
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v33 + v78)) {
      goto LABEL_135;
    }
LABEL_68:
    LOBYTE(v90[0]) = 0;
    if ((*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 320))(a1, v90, 1) == 1)
    {
      uint64_t v27 = (LOBYTE(v90[0]) == 5) | v27;
      v72 |= LOBYTE(v90[0]) != 5;
      v74 |= 2u;
      goto LABEL_109;
    }
    if (!a2) {
      goto LABEL_140;
    }
LABEL_131:
    uint64_t v62 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file (unexpected end of file)" forKey:*MEMORY[0x1E4F28568]];
    *a2 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v62];
    goto LABEL_140;
  }
  if (v31 == 1398031177)
  {
    uint64_t v36 = (char *)malloc_type_malloc(v78, 0x1FB40D03uLL);
    uint64_t v37 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)a1 + 320))(a1, v36, v78);
    if (v37 != v78) {
      goto LABEL_135;
    }
    MTLLibraryDataWithArchive::decodeSTCIToken(v36, v78, (uint64_t)v90);
    v89 = (long long *)&v81;
    unint64_t v38 = std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(&v82, &v81, (uint64_t)&std::piecewise_construct, (void **)&v89);
    unint64_t v39 = (char *)v90[1];
    v38[5] = (uint64_t *)v90[0];
    std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)v38 + 48, v39, v91, (v91 - (uint64_t)v39) >> 5);
    free(v36);
    if (v39) {
      operator delete(v39);
    }
    goto LABEL_109;
  }
  if (v31 == 1415139397) {
    goto LABEL_68;
  }
  if (v31 != 1447383635) {
    goto LABEL_88;
  }
  if (v73)
  {
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v32 + v78) & 1) == 0) {
      goto LABEL_135;
    }
LABEL_108:
    LODWORD(v73) = 1;
    goto LABEL_109;
  }
  if ((*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 320))(a1, v90, 8) != 8) {
    goto LABEL_135;
  }
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    uint64_t v50 = v27;
    LODWORD(v27) = WORD1(v90[0]) | (LOWORD(v90[0]) << 16);
    goto LABEL_102;
  }
  uint64_t v50 = v27;
  unsigned int v51 = _MTLGetMTLCompilerLLVMVersionForDevice(a4) - 32023;
  if (v51 >= 2) {
    unsigned int v52 = 0;
  }
  else {
    unsigned int v52 = 131079;
  }
  unint64_t v73 = [a4 featureProfile];
  if (v51 >= 2) {
    unsigned int v53 = 0;
  }
  else {
    unsigned int v53 = 196610;
  }
  uint64_t v54 = WORD2(v90[0]);
  uint64_t v55 = HIWORD(v90[0]);
  if (validateLanguageVersion(HIWORD(v90[0]) | (WORD2(v90[0]) << 16), v53))
  {
    uint64_t v27 = WORD1(v90[0]) | (LOWORD(v90[0]) << 16);
    if (!validateAIRVersion(WORD1(v90[0]) | (LOWORD(v90[0]) << 16), v52))
    {
      v66 = "OS";
      if (v73 < 7) {
        v66 = "device";
      }
      v65 = (NSString *)objc_msgSend(NSString, "stringWithFormat:", @"This library is using a deployment target (0x%08X) that is not supported on this %s.", v27, v66);
      goto LABEL_150;
    }
LABEL_102:
    *(_DWORD *)(a1 + 620) = v27;
    char v56 = _os_feature_enabled_impl();
    uint64_t v27 = v50;
    if (v75)
    {
      if (v56)
      {
        if (v68 < 0) {
          goto LABEL_146;
        }
      }
      else if (v68 < 0 && *(_DWORD *)(a1 + 620) <= 0x20003u)
      {
LABEL_146:
        generateNSError(a2, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, &cfstr_ThisLibraryFor.isa);
        goto LABEL_140;
      }
    }
    goto LABEL_108;
  }
  uint64_t v64 = "OS";
  if (v73 < 7) {
    uint64_t v64 = "device";
  }
  v65 = (NSString *)objc_msgSend(NSString, "stringWithFormat:", @"This library is using language version %u.%u which is not supported on this %s.", v54, v55, v64);
LABEL_150:
  generateNSError(a2, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, v65);
LABEL_140:
  uint64_t v58 = 0;
LABEL_141:
  std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy((uint64_t)&v82, v83[0]);
  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::~__hash_table((uint64_t)v84);
  return v58;
}

void sub_1826FDB88(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy(v1 + 184, *(void **)(v1 + 192));
  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::~__hash_table(v2 - 192);
  _Unwind_Resume(a1);
}

size_t LibraryWithFile::readBytes(FILE **this, void *__ptr, size_t __size)
{
  return fread(__ptr, __size, 1uLL, this[81]) * __size;
}

size_t LibraryWithData::readBytes(LibraryWithData *this, void *__dst, size_t a3)
{
  uint64_t v3 = *((void *)this + 83);
  if (v3 + a3 > *((void *)this + 82)) {
    return 0;
  }
  size_t v4 = a3;
  memcpy(__dst, (const void *)(*((void *)this + 81) + v3), a3);
  *((void *)this + 83) += v4;
  return v4;
}

BOOL LibraryWithFile::setPosition(FILE **this, uint64_t a2)
{
  return fseek(this[81], (uint64_t)this[30] + a2, 0) == 0;
}

uint64_t LibraryWithFile::getPosition(LibraryWithFile *this)
{
  return MEMORY[0x18530C780](*((void *)this + 81)) - *((void *)this + 30);
}

uint64_t arraySizeFromTypeName(void *__src, size_t __len)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v5 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v5 = __len | 7;
    }
    size_t v6 = v5 + 1;
    size_t v4 = operator new(v5 + 1);
    v14[1] = __len;
    int64_t v15 = v6 | 0x8000000000000000;
    v14[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v15) = __len;
  size_t v4 = v14;
  if (__len) {
LABEL_8:
  }
    memmove(v4, __src, __len);
  *((unsigned char *)v4 + __len) = 0;
  int v7 = SHIBYTE(v15);
  unsigned int v8 = (void *)v14[0];
  if (v15 >= 0) {
    char v9 = (const char *)v14;
  }
  else {
    char v9 = (const char *)v14[0];
  }
  v16[0] = 0;
  uint64_t v17 = v9;
  v16[1] = strlen(v9);
  NextToken = BasicParser::getNextToken((BasicParser *)v16);
  if (!strcmp(NextToken, "array"))
  {
    uint64_t v12 = 0;
    if ((v7 & 0x80000000) == 0) {
      return v12;
    }
    goto LABEL_15;
  }
  do
  {
    unsigned int v11 = NextToken;
    NextToken = BasicParser::getNextToken((BasicParser *)v16);
  }
  while (NextToken);
  uint64_t v12 = atol(v11);
  if (v7 < 0) {
LABEL_15:
  }
    operator delete(v8);
  return v12;
}

void dataTypeInfoFromString(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 >= 0x17)
  {
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v7 = a2 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)a2;
    int64_t v31 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v31) = a2;
    size_t v6 = __dst;
    if (!a2) {
      goto LABEL_9;
    }
  }
  memmove(v6, a1, a2);
LABEL_9:
  *((unsigned char *)v6 + a2) = 0;
  if (v31 >= 0) {
    char v9 = (const char *)__dst;
  }
  else {
    char v9 = (const char *)__dst[0];
  }
  v32[0] = 0;
  uint64_t v33 = v9;
  v32[1] = strlen(v9);
  while (1)
  {
    NextToken = BasicParser::getNextToken((BasicParser *)v32);
    if (!NextToken) {
      goto LABEL_31;
    }
    uint64_t v11 = bufferTypeMap();
    std::string::basic_string[abi:ne180100]<0>(&__p, NextToken);
    uint64_t v12 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(v11, (const void **)&__p);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p);
    }
    if (bufferTypeMap() + 8 == v12) {
      break;
    }
    if (*(_DWORD *)(v12 + 56) != 1)
    {
      LODWORD(NextToken) = 0;
      int v13 = 0;
      int v14 = *(_DWORD *)(v12 + 60);
      uint64_t v15 = *(void *)(v12 + 64);
      goto LABEL_32;
    }
  }
  uint64_t v16 = pixelFormatTypeMap();
  std::string::basic_string[abi:ne180100]<0>(&__p, NextToken);
  uint64_t v17 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(v16, (const void **)&__p);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  if (pixelFormatTypeMap() + 8 == v17)
  {
    LODWORD(NextToken) = 0;
LABEL_31:
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_32;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&__p, v17 + 56);
  int v13 = (int)__p;
  if ((v28 & 0x80u) == 0) {
    uint64_t v18 = &v26;
  }
  else {
    uint64_t v18 = v26;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v19 = v28;
  }
  else {
    uint64_t v19 = v27;
  }
  dataTypeInfoFromString(&v23, v18, v19);
  int v14 = v29;
  uint64_t v21 = v24;
  NextToken = BasicParser::getNextToken((BasicParser *)v32);
  size_t v20 = strlen(NextToken);
  dataTypeInfoFromString(&v22, NextToken, v20);
  LODWORD(NextToken) = v22;
  uint64_t v15 = v21;
  if ((char)v28 < 0)
  {
    operator delete(v26);
    uint64_t v15 = v21;
  }
LABEL_32:
  *(_DWORD *)a3 = v14;
  *(void *)(a3 + 4) = v15;
  *(_DWORD *)(a3 + 12) = v13;
  *(_DWORD *)(a3 + 16) = NextToken;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1826FE11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0) {
    operator delete(a17);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bufferTypeMap(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&bufferTypeMapOnce, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&bufferTypeMapOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<bufferTypeMap(void)::$_0 &&>>);
  }
  return bufferTypeMap(void)::nonGlobalBufferTypeMap;
}

char *BasicParser::getNextToken(BasicParser *this)
{
  uint64_t v2 = *(unsigned int *)this;
  unsigned int v1 = *((_DWORD *)this + 1);
  if (v2 < v1)
  {
    uint64_t v3 = (char *)(*((void *)this + 1) + v2);
    while (1)
    {
      unsigned int v4 = *v3++;
      uint64_t v5 = (1 << v4) & 0x5000144100000001;
      if (v4 > 0x3E || v5 == 0) {
        break;
      }
      LODWORD(v2) = v2 + 1;
      *(_DWORD *)this = v2;
      if (v1 == v2)
      {
        LODWORD(v2) = v1;
        goto LABEL_10;
      }
    }
  }
  if (v2 <= v1)
  {
LABEL_10:
    uint64_t v7 = 0;
    uint64_t v8 = *((void *)this + 1);
    while (*(char *)(v8 + (v2 + v7)) > 0x3E
         || ((1 << *(unsigned char *)(v8 + (v2 + v7))) & 0x5000144100000001) == 0)
    {
      if (v7 == 63)
      {
        uint64_t v12 = (char *)this + 16;
        *((unsigned char *)this + 79) = 0;
        return v12;
      }
      int v10 = v7 + 1;
      *((unsigned char *)this + v7 + 16) = *(unsigned char *)(v8 + (v2 + v7));
      *(_DWORD *)this = v2 + v7 + 1;
      unsigned int v11 = v2 + ++v7;
      if (v11 > v1)
      {
        if (!v10) {
          return 0;
        }
        return (char *)this + 16;
      }
    }
    *((unsigned char *)this + v7 + 16) = 0;
    if (v7) {
      return (char *)this + 16;
    }
  }
  return 0;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    size_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  long long v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_48:
    *uint64_t v24 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1826FE6C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, (unsigned __int8 *)i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  float v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *uint64_t v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *float v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1826FE94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

BOOL LibraryWithData::setPosition(LibraryWithData *this, uint64_t a2)
{
  unint64_t v2 = *((void *)this + 30) + a2;
  unint64_t v3 = *((void *)this + 82);
  if (v3 >= v2) {
    *((void *)this + 83) = (*((_DWORD *)this + 60) + a2);
  }
  return v3 >= v2;
}

uint64_t pixelFormatTypeMap(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&pixelFormatTypeMapOnce, memory_order_acquire) != -1)
  {
    unint64_t v3 = &v1;
    unint64_t v2 = &v3;
    std::__call_once(&pixelFormatTypeMapOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>);
  }
  return pixelFormatTypeMap(void)::nonGlobalPixelFormatTypeMap;
}

uint64_t LibraryWithData::getPosition(LibraryWithData *this)
{
  return *((void *)this + 83) - *((void *)this + 30);
}

uint64_t _MTLGetMTLCompilerLLVMVersionForDevice(void *a1)
{
  if (_MTLIsInternalBuild() && getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersionOnceToken != -1) {
    dispatch_once(&getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersionOnceToken, &__block_literal_global_1671);
  }
  uint64_t result = getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersion;
  if (!getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersion)
  {
    if (_MTLIsInternalBuild()
      && _MTLGetMTLCompilerLLVMVersionForDevice(objc_object  {objcproto9MTLDevice}*)::deviceLLVMVersionOnceToken != -1)
    {
      dispatch_once(&_MTLGetMTLCompilerLLVMVersionForDevice(objc_object  {objcproto9MTLDevice}*)::deviceLLVMVersionOnceToken, &__block_literal_global_16);
    }
    if (_MTLGetMTLCompilerLLVMVersionForDevice(objc_object  {objcproto9MTLDevice}*)::useDeviceForLLVMVersion)
    {
      LODWORD(result) = [a1 llvmVersion];
      if ((int)result <= 32023) {
        return 32023;
      }
      else {
        return result;
      }
    }
    else if ((unint64_t)[a1 featureProfile] >= 7)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZL26getMaxSupportedLLVMVersionb_block_invoke;
      block[3] = &__block_descriptor_33_e5_v8__0l;
      char v4 = 0;
      if (getMaxSupportedLLVMVersion(BOOL)::onceToken != -1) {
        dispatch_once(&getMaxSupportedLLVMVersion(BOOL)::onceToken, block);
      }
      return getMaxSupportedLLVMVersion(BOOL)::llvmVersion;
    }
    else
    {
      return 32023;
    }
  }
  return result;
}

BOOL validateLanguageVersion(int a1, unsigned int a2)
{
  if (a1 < 196608)
  {
    BOOL result = 1;
    switch(a1)
    {
      case 131072:
        return result;
      case 131073:
        return a2 > 0x20000;
      case 131074:
        unsigned int v3 = 131073;
        goto LABEL_6;
      case 131075:
        unsigned int v3 = 131074;
        goto LABEL_6;
      case 131076:
        unsigned int v3 = 131075;
        goto LABEL_6;
      case 131077:
        goto LABEL_9;
      case 131078:
        goto LABEL_10;
      default:
        if ((a1 - 0x10000) >= 3) {
          return 0;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 196608:
LABEL_9:
        BOOL v4 = HIWORD(a2) > 2u;
        break;
      case 196609:
LABEL_10:
        BOOL v4 = a2 > 0x30000;
        break;
      case 196610:
        unsigned int v3 = 196609;
LABEL_6:
        BOOL v4 = a2 > v3;
        break;
      default:
        return 0;
    }
    return v4;
  }
  return result;
}

BOOL validateAIRVersion(int a1, unsigned int a2)
{
  BOOL result = 1;
  switch(a1)
  {
    case 131072:
      return result;
    case 131073:
      BOOL v4 = a2 > 0x20000;
      goto LABEL_13;
    case 131074:
      unsigned int v6 = 131073;
      goto LABEL_12;
    case 131075:
      unsigned int v6 = 131074;
      goto LABEL_12;
    case 131076:
      unsigned int v6 = 131075;
      goto LABEL_12;
    case 131077:
      unsigned int v6 = 131076;
      goto LABEL_12;
    case 131078:
      unsigned int v6 = 131077;
      goto LABEL_12;
    case 131079:
      unsigned int v6 = 131078;
LABEL_12:
      BOOL v4 = a2 > v6;
LABEL_13:
      BOOL result = v4;
      break;
    default:
      unsigned int v5 = a1 - 65542;
      if (v5 > 5 || v5 == 1) {
        BOOL result = 0;
      }
      break;
  }
  return result;
}

uint64_t FunctionHashFactory::createHash(uint64_t a1, int a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v19.wbuf[6] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v19.wbuf[10] = v10;
  *(void *)&v19.wbuf[14] = *(void *)(a1 + 96);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v19.count = *(_OWORD *)a1;
  *(_OWORD *)&v19.hash[2] = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v19.hash[6] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v19.wbuf[2] = v12;
  unint64_t v13 = FunctionHashFactory::functionHashStringForType(a1, a2);
  if (v13)
  {
    int v14 = v13;
    CC_LONG v15 = strlen(v13);
    CC_SHA256_Update(&v19, v14, v15);
  }
  if (a3 && a4) {
    CC_SHA256_Update(&v19, a3, a4);
  }
  if (a5 && a6) {
    CC_SHA256_Update(&v19, a5, a6);
  }
  CC_SHA256_Final(md, &v19);
  MTLHashKey::MTLHashKey((uint64_t)&v20, (uint64_t)md);
  unint64_t v16 = [MTLBinaryKey alloc];
  uint64_t v17 = -[MTLBinaryKey initWithHash:](v16, "initWithHash:", &v20, *(_OWORD *)v19.count, *(_OWORD *)&v19.hash[2], *(_OWORD *)&v19.hash[6], *(_OWORD *)&v19.wbuf[2], *(_OWORD *)&v19.wbuf[6], *(_OWORD *)&v19.wbuf[10], *(void *)&v19.wbuf[14]);
  MTLHashKey::~MTLHashKey(&v20);
  return v17;
}

void sub_1826FEF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, MTLHashKey *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void sub_1826FF034(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1020C405FF5E128);
  _Unwind_Resume(a1);
}

void MTLHashKey::MTLHashKey(MTLHashKey *this, const MTLHashKey *a2)
{
  this->var0.var2 = 4;
  this->var2.var0 = 0;
  *(_OWORD *)&this->var0.var0 = xmmword_1828D4A00;
  this->var2.var1 = 0;
  this->var2.var2.var0 = 0;
  this->var0.var2 = a2->var0.var2;
  *(_OWORD *)&this->var0.var0 = *(_OWORD *)&a2->var0.var0;
  long long v2 = *(_OWORD *)a2->var1.var0;
  *(_OWORD *)&this->var1.var0[16] = *(_OWORD *)&a2->var1.var0[16];
  *(_OWORD *)this->var1.var0 = v2;
  if (this != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)&this->var2, (char *)a2->var2.var0, (uint64_t)a2->var2.var1, (a2->var2.var1 - a2->var2.var0) >> 5);
  }
}

void sub_1826FF0E4(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<MTLUINT256_t>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      CC_SHA256_CTX v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    CC_SHA256_CTX v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

void MTLHashKey::~MTLHashKey(MTLHashKey *this)
{
  var0 = this->var2.var0;
  if (var0)
  {
    this->var2.var1 = var0;
    operator delete(var0);
  }
}

__n128 MTLHashKey::MTLHashKey(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 16) = 4;
  *(_OWORD *)a1 = xmmword_1828D4A00;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 16);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

const char *FunctionHashFactory::functionHashStringForType(uint64_t a1, int a2)
{
  int v3 = useRelaxedMath();
  switch(a2)
  {
    case 0:
      if (v3) {
        return "RM_Bin";
      }
      else {
        return 0;
      }
    case 1:
      unsigned int v5 = "linking";
      unsigned int v6 = "RM_linking";
      goto LABEL_9;
    case 2:
      unsigned int v5 = "reflection";
      unsigned int v6 = "RM_reflection";
      goto LABEL_9;
    case 3:
      unsigned int v5 = "pipelineStatistics";
      unsigned int v6 = "RM_pipelineStatistics";
      goto LABEL_9;
    case 6:
      unsigned int v5 = "debugInstrumentation";
      unsigned int v6 = "RM_debugInstrumentation";
LABEL_9:
      if (v3) {
        return v6;
      }
      else {
        return v5;
      }
    default:
      abort();
  }
}

uint64_t useRelaxedMath(void)
{
  if (_MTLIsInternalBuild() && useRelaxedMath(void)::onceToken != -1) {
    dispatch_once(&useRelaxedMath(void)::onceToken, &__block_literal_global_1858);
  }
  return useRelaxedMath(void)::useRlxMath;
}

uint64_t _MTLIsInternalBuild()
{
  return os_variant_has_internal_diagnostics();
}

char *std::vector<MTLUINT256_t>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void *FunctionReplyParameters::FunctionReplyParameters(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a2;
  a1[1] = a3;
  char v9 = 0;
  uint64_t v10 = &v9;
  a1[2] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  char v9 = 0;
  uint64_t v10 = &v9;
  a1[3] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  char v9 = 2;
  uint64_t v10 = &v9;
  a1[4] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  char v9 = 2;
  uint64_t v10 = &v9;
  a1[5] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  char v9 = 1;
  uint64_t v10 = &v9;
  a1[6] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  char v9 = 1;
  uint64_t v10 = &v9;
  a1[7] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  char v9 = 3;
  uint64_t v10 = &v9;
  a1[8] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  char v9 = 3;
  uint64_t v10 = &v9;
  a1[9] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  char v9 = 6;
  uint64_t v10 = &v9;
  a1[12] = objc_msgSend((id)std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a5, &v9, (uint64_t)&std::piecewise_construct, &v10)[3], "value");
  char v9 = 6;
  uint64_t v10 = &v9;
  a1[13] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  char v9 = 4;
  uint64_t v10 = &v9;
  a1[10] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  char v9 = 5;
  uint64_t v10 = &v9;
  a1[11] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  char v9 = 7;
  uint64_t v10 = &v9;
  a1[14] = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(a4, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
  return a1;
}

void *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  MTLHashKey v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    *MTLHashKey v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    MTLHashKey v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1826FF900(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t MTLLibraryDataWithArchive::parseHeaderExtension(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a2 + 4) != 1) {
    return 1;
  }
  if (*(_WORD *)(a2 + 6) != 2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a2 + 8) < 3u) {
    return 1;
  }
  uint64_t v4 = *(void *)(a2 + 24) + *(void *)(a2 + 32);
  if (v4 == -4) {
    return 1;
  }
  (*(void (**)(void *, uint64_t))(*a1 + 312))(a1, v4 + 4);
  signed int v15 = 0;
  while ((*(uint64_t (**)(void *, signed int *, uint64_t))(*a1 + 320))(a1, &v15, 4) == 4)
  {
    signed int v8 = v15;
    unsigned int v9 = bswap32(v15);
    signed int v15 = v9;
    unsigned __int16 v14 = 0;
    if (v8 != 1413762629)
    {
      if ((*(uint64_t (**)(void *, unsigned __int16 *, uint64_t))(*a1 + 320))(a1, &v14, 2) != 2) {
        break;
      }
      if (v15 > 1380733779)
      {
        if (v15 > 1431652675)
        {
          if (v15 == 1431652676)
          {
            if ((*(uint64_t (**)(void *, unsigned char *, uint64_t))(*a1 + 320))(a1, v16, 16) != 16) {
              break;
            }
            a1[17] = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:v16];
            goto LABEL_33;
          }
          if (v15 != 1447842644) {
            goto LABEL_39;
          }
          if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 32, 8) != 8) {
            goto LABEL_40;
          }
          uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 40, 8);
        }
        else
        {
          if (v15 == 1380733780)
          {
            if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 64, 8) != 8) {
              goto LABEL_40;
            }
            uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 72, 8);
            goto LABEL_32;
          }
          if (v15 != 1397510996) {
            goto LABEL_39;
          }
          if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 80, 8) != 8) {
            goto LABEL_40;
          }
          uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 88, 8);
        }
      }
      else
      {
        if (v15 > 1213420098)
        {
          if ((v15 - 1213420099) < 2)
          {
            if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3, 8) != 8
              || (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 8, 8) != 8)
            {
              break;
            }
            goto LABEL_33;
          }
          if (v15 == 1229738836)
          {
            if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 48, 8) != 8) {
              goto LABEL_40;
            }
            uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 56, 8);
            goto LABEL_32;
          }
LABEL_39:
          uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 336))(a1);
          if (((*(uint64_t (**)(void *, uint64_t))(*a1 + 312))(a1, v11 + v14) & 1) == 0)
          {
LABEL_40:
            generateNSError(a4, &cfstr_Mtllibraryerro.isa, MTLLibraryErrorUnsupported, &cfstr_InvalidLibrary_1.isa);
            return 0;
          }
LABEL_33:
          unsigned int v9 = v15;
          goto LABEL_34;
        }
        if (v15 != 1212438862)
        {
          if (v15 == 1162757204) {
            return 1;
          }
          goto LABEL_39;
        }
        if ((*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 16, 8) != 8) {
          goto LABEL_40;
        }
        uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 320))(a1, a3 + 24, 8);
      }
LABEL_32:
      if (v10 != 8) {
        goto LABEL_40;
      }
      goto LABEL_33;
    }
LABEL_34:
    if (v9 == 1162757204) {
      return 1;
    }
  }
  if (a4)
  {
    uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file (unexpected end of file)" forKey:*MEMORY[0x1E4F28568]];
    *a4 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v13];
  }
  return 0;
}

void std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  long long v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    long long v2 = __p;
    do
    {
      int v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[6];
      if (v4)
      {
        v2[7] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      long long v2 = v3;
    }
    while (v3);
  }
}

uint64_t MTLLibraryDataWithArchive::generateHashForSpecializedFunctionScripts(MTLLibraryDataWithArchive *a1, uint64_t a2, NSError **a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!*((void *)a1 + 76)) {
    return 1;
  }
  unint64_t v5 = (uint64_t *)*((void *)a1 + 50);
  uint64_t v6 = (uint64_t *)((char *)a1 + 408);
  if (v5 == (uint64_t *)((char *)a1 + 408))
  {
LABEL_10:
    unint64_t v12 = (uint64_t **)((char *)a1 + 400);
    for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    {
      uint64_t v14 = i[6];
      if (i[7] != v14)
      {
        unint64_t v15 = 0;
        unsigned int v16 = 1;
        do
        {
          *(void *)&v28[0] = v14 + 16 * v15;
          uint64_t v17 = std::__tree<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v12, *(unint64_t **)&v28[0], (uint64_t)&std::piecewise_construct, (uint64_t **)v28)[5];
          memset(v28, 0, sizeof(v28));
          size_t v18 = *(const void **)v17;
          uint64_t v19 = *(void *)(v17 + 8);
          if (*(void *)(v17 + 16)) {
            MTLHashKey v20 = objc_msgSend(NSString, "stringWithUTF8String:");
          }
          else {
            MTLHashKey v20 = 0;
          }
          createHashForType(15, v18, v19, i + 2, 0, v20, 0, (unsigned __int8 *)v28);
          uint64_t v21 = *(void *)(i[6] + 16 * v15 + 8);
          uint64_t v27 = v28;
          std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>((uint64_t)a1 + 440, (unint64_t *)v28, (uint64_t)&std::piecewise_construct, &v27)[6] = v21;
          unint64_t v15 = v16;
          uint64_t v14 = i[6];
          ++v16;
        }
        while (v15 < (i[7] - v14) >> 4);
      }
    }
    if (*((void *)a1 + 52))
    {
      uint64_t v22 = *v12;
      if (*v12 != v6)
      {
        do
        {
          uint64_t v23 = v22[5];
          if (*(void *)v23) {
            free(*(void **)v23);
          }
          unint64_t v24 = *(void **)(v23 + 16);
          if (v24) {
            free(v24);
          }
          free((void *)v22[5]);
          size_t v25 = (uint64_t *)v22[1];
          if (v25)
          {
            do
            {
              uint64_t v26 = v25;
              size_t v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              uint64_t v26 = (uint64_t *)v22[2];
              BOOL v11 = *v26 == (void)v22;
              uint64_t v22 = v26;
            }
            while (!v11);
          }
          uint64_t v22 = v26;
        }
        while (v26 != v6);
      }
    }
    std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)v12, *((void **)a1 + 51));
    *((void *)a1 + 51) = 0;
    *((void *)a1 + 52) = 0;
    uint64_t result = 1;
    *((void *)a1 + 50) = v6;
  }
  else
  {
    while (1)
    {
      (*(void (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)a1 + 312))(a1, v5[4] + *((void *)a1 + 75));
      uint64_t result = MTLLibraryDataWithArchive::serializeSpecFunctionScript(a1, (void *)v5[5], a3);
      if (!result) {
        break;
      }
      unsigned int v9 = (uint64_t *)v5[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          unsigned int v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (uint64_t *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          unint64_t v5 = v10;
        }
        while (!v11);
      }
      unint64_t v5 = v10;
      if (v10 == v6) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t MTLLibraryDataWithArchive::parseImportedSymbolListSection(MTLLibraryDataWithArchive *this, NSError **a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 72)) {
    return 1;
  }
  (*(void (**)(MTLLibraryDataWithArchive *, void))(*(void *)this + 312))(this, *((void *)this + 71));
  unsigned int v29 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(void *)this + 320))(this, &v29, 4) == 4)
  {
    id v4 = objc_alloc(MEMORY[0x1E4F1CA48]);
    unint64_t v5 = (void *)[v4 initWithCapacity:v29];
    if (!v29) {
      goto LABEL_18;
    }
    size_t v25 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
LABEL_5:
    int v28 = 0;
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(void *)this + 320))(this, &v28, 4) == 4)
    {
      int v8 = 0;
      unsigned int v27 = 0;
      while ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(void *)this + 320))(this, &v27, 4) == 4)
      {
        unsigned int v9 = v27;
        unsigned int v27 = bswap32(v27);
        unsigned __int16 v26 = 0;
        if (v9 == 1413762629) {
          goto LABEL_13;
        }
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned __int16 *, uint64_t))(*(void *)this
                                                                                                 + 320))(this, &v26, 2) != 2)break;
        if (v27 != 1312902469)
        {
LABEL_13:
          uint64_t v13 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 336))(this);
          if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)this + 312))(this, v13 + v26) & 1) == 0)
          {
            uint64_t v14 = v25;
            if (!v25) {
              goto LABEL_27;
            }
            size_t v18 = (void *)MEMORY[0x1E4F1C9E8];
            uint64_t v19 = *MEMORY[0x1E4F28568];
            MTLHashKey v20 = @"Invalid library file (unexpected end of file)";
LABEL_26:
            uint64_t v21 = objc_msgSend(v18, "dictionaryWithObject:forKey:", v20, v19, v25);
            *uint64_t v14 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v21];
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v10 = v26;
          MEMORY[0x1F4188790]();
          unint64_t v12 = (char *)&v25 - v11;
          if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(void *)this + 320))(this, (char *)&v25 - v11, v10) != v10)
          {
            uint64_t v22 = v25;
            if (v25)
            {
              uint64_t v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid metallib file, unexpected end of file while parsing imported symbol names", *MEMORY[0x1E4F28568] forKey];
              *uint64_t v22 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v23];
            }
            goto LABEL_27;
          }
          objc_msgSend(v5, "setObject:atIndexedSubscript:", objc_msgSend(NSString, "stringWithUTF8String:", v12), v6);
          uint64_t v7 = (v7 + 1);
        }
        --v8;
        if (v27 == 1162757204)
        {
          if (v8)
          {
            if (++v6 < (unint64_t)v29) {
              goto LABEL_5;
            }
            uint64_t v14 = v25;
            if (v7 == v29)
            {
LABEL_18:
              *((void *)this + 14) = v5;
              return 1;
            }
            uint64_t v24 = [NSString stringWithFormat:@"failed to parse imported symbol names, expected %u symbols, found only %u", v29, v7];
            if (!v14) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v24 = [NSString stringWithFormat:@"failed to parse imported symbol names, no tokens read"];
            uint64_t v14 = v25;
            if (!v25) {
              goto LABEL_27;
            }
          }
          MTLHashKey v20 = (__CFString *)v24;
          size_t v18 = (void *)MEMORY[0x1E4F1C9E8];
          uint64_t v19 = *MEMORY[0x1E4F28568];
          goto LABEL_26;
        }
      }
    }
    uint64_t v14 = v25;
    if (v25)
    {
      size_t v18 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v19 = *MEMORY[0x1E4F28568];
      MTLHashKey v20 = @"Invalid metallib file, unexpected end of file while parsing imported symbol names";
      goto LABEL_26;
    }
LABEL_27:
  }
  else if (a2)
  {
    uint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid metallib file, unexpected end of file while parsing imported symbol names", *MEMORY[0x1E4F28568] forKey];
    uint64_t v17 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v16];
    uint64_t result = 0;
    *a2 = v17;
    return result;
  }
  return 0;
}

uint64_t MTLLibraryDataWithArchive::parseDynamicHeaderSection(MTLLibraryDataWithArchive *this, NSError **a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 68)) {
    return 1;
  }
  (*(void (**)(MTLLibraryDataWithArchive *, void))(*(void *)this + 312))(this, *((void *)this + 67));
  unsigned int v59 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(void *)this + 320))(this, &v59, 4) != 4)
  {
    BOOL v7 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v7) {
      MTLLibraryDataWithArchive::parseDynamicHeaderSection(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    return 0;
  }
  unsigned int v4 = v59;
  unsigned int v59 = bswap32(v59);
  char v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  if (v4 == 1413762629)
  {
    unint64_t v5 = 0;
LABEL_5:
    uint64_t v6 = 1;
    if (v5) {
      goto LABEL_54;
    }
    return v6;
  }
  do
  {
    unsigned __int16 v55 = 0;
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned __int16 *, uint64_t))(*(void *)this + 320))(this, &v55, 2) != 2)
    {
      BOOL v36 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v36) {
LABEL_46:
      }
        MTLLibraryDataWithArchive::parseDynamicHeaderSection(v36, v37, v38, v39, v40, v41, v42, v43);
LABEL_52:
      uint64_t v6 = 0;
      goto LABEL_53;
    }
    if (v59 == 1312902469)
    {
      uint64_t v21 = v55;
      MEMORY[0x1F4188790]();
      uint64_t v23 = &v54[-v22];
      if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned char *, uint64_t))(*(void *)this + 320))(this, &v54[-v22], v21) != v21)
      {
        BOOL v36 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (!v36) {
          goto LABEL_52;
        }
        goto LABEL_46;
      }
      if (v21) {
        *((void *)this + 12) = [[NSString alloc] initWithUTF8String:v23];
      }
    }
    else if (v59 == 1146703436)
    {
      uint64_t v15 = v55;
      MEMORY[0x1F4188790]();
      uint64_t v17 = &v54[-v16];
      if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned char *, uint64_t))(*(void *)this + 320))(this, &v54[-v16], v15) != v15)
      {
        BOOL v44 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (v44) {
          MTLLibraryDataWithArchive::parseDynamicHeaderSection(v44, v45, v46, v47, v48, v49, v50, v51);
        }
        goto LABEL_52;
      }
      uint64_t v18 = [NSString stringWithUTF8String:v17];
      uint64_t v19 = v18;
      MTLHashKey v20 = v57;
      if (v57 >= (uint64_t *)v58)
      {
        uint64_t v25 = ((char *)v57 - v56) >> 3;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v58 - v56;
        if ((v58 - v56) >> 2 > v26) {
          unint64_t v26 = v27 >> 2;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28) {
          unsigned int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v58, v28);
        }
        else {
          unsigned int v29 = 0;
        }
        uint64_t v30 = (uint64_t *)&v29[8 * v25];
        *uint64_t v30 = v19;
        int64_t v31 = v30 + 1;
        uint64_t v33 = (uint64_t *)v56;
        uint64_t v32 = v57;
        if (v57 != (uint64_t *)v56)
        {
          do
          {
            uint64_t v34 = *--v32;
            *--uint64_t v30 = v34;
          }
          while (v32 != v33);
          uint64_t v32 = (uint64_t *)v56;
        }
        char v56 = (char *)v30;
        uint64_t v57 = v31;
        uint64_t v58 = &v29[8 * v28];
        if (v32) {
          operator delete(v32);
        }
        uint64_t v57 = v31;
      }
      else
      {
        *uint64_t v57 = v18;
        uint64_t v57 = v20 + 1;
      }
    }
    else
    {
      uint64_t v24 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 336))(this);
      if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)this + 312))(this, v24 + v55) & 1) == 0)
      {
        if (a2)
        {
          uint64_t v52 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file (unexpected end of file)" forKey:*MEMORY[0x1E4F28568]];
          *a2 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v52];
        }
        goto LABEL_52;
      }
    }
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(void *)this + 320))(this, &v59, 4) != 4)
    {
      BOOL v36 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (v36) {
        goto LABEL_46;
      }
      goto LABEL_52;
    }
    unsigned int v35 = v59;
    unsigned int v59 = bswap32(v59);
  }
  while (v35 != 1413762629);
  unint64_t v5 = (uint64_t *)v56;
  if (v57 == (uint64_t *)v56) {
    goto LABEL_5;
  }
  *((void *)this + 13) = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:count:");
  uint64_t v6 = 1;
LABEL_53:
  unint64_t v5 = (uint64_t *)v56;
  if (v56)
  {
LABEL_54:
    uint64_t v57 = v5;
    operator delete(v5);
  }
  return v6;
}

void sub_182701074(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLLibraryDataWithArchive::parseVariableListSection(MTLLibraryDataWithArchive *this, NSError **a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 70)) {
    return 1;
  }
  (*(void (**)(MTLLibraryDataWithArchive *, void))(*(void *)this + 312))(this, *((void *)this + 69));
  unsigned int v37 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(void *)this + 320))(this, &v37, 4) == 4)
  {
    int64_t v31 = a2;
    unsigned int v4 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v37];
    if (v37)
    {
      int v5 = 0;
      unsigned int v29 = v39;
      uint64_t v30 = v40;
LABEL_5:
      int v36 = 0;
      if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(void *)this + 320))(this, &v36, 4) == 4)
      {
        int v6 = 0;
        signed int v35 = 0;
        unsigned __int16 v34 = 0;
        while ((*(uint64_t (**)(MTLLibraryDataWithArchive *, signed int *, uint64_t))(*(void *)this + 320))(this, &v35, 4) == 4)
        {
          signed int v7 = v35;
          signed int v35 = bswap32(v35);
          if (v7 == 1413762629) {
            goto LABEL_28;
          }
          if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned __int16 *, uint64_t))(*(void *)this + 320))(this, &v34, 2) != 2)break; {
          if (v35 <= 1312902468)
          }
          {
            if (v35 == 1212240712)
            {
              if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, void *, uint64_t))(*(void *)this + 320))(this, v29, 32) != 32)break; {
            }
              }
            else
            {
              if (v35 != 1296323418)
              {
LABEL_26:
                uint64_t v11 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 336))(this);
                if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)this + 312))(this, v11 + v34) & 1) == 0)
                {
                  uint64_t v19 = v31;
                  if (!v31) {
                    return 0;
                  }
                  MTLHashKey v20 = (void *)MEMORY[0x1E4F1C9E8];
                  uint64_t v21 = *MEMORY[0x1E4F28568];
                  uint64_t v22 = @"Invalid library file (unexpected end of file)";
                  goto LABEL_38;
                }
                goto LABEL_27;
              }
              if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned char *, uint64_t))(*(void *)this + 320))(this, v30, 8) != 8)break; {
            }
              }
          }
          else
          {
            switch(v35)
            {
              case 1447383635:
                if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, long long *, uint64_t))(*(void *)this
                                                                                                 + 320))(this, &v32, 8) != 8)goto LABEL_36;
                uint64_t v41 = v32;
                *((_DWORD *)this + 155) = WORD1(v32) | ((unsigned __int16)v32 << 16);
                break;
              case 1330005588:
                if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, long long *, uint64_t))(*(void *)this
                                                                                                 + 320))(this, &v32, 24) != 24)goto LABEL_36;
                *(_OWORD *)&v40[8] = v32;
                v39[4] = v33;
                break;
              case 1312902469:
                uint64_t v8 = v34;
                MEMORY[0x1F4188790]();
                uint64_t v10 = (char *)&v28 - v9;
                if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(void *)this + 320))(this, (char *)&v28 - v9, v8) != v8)
                {
                  uint64_t v25 = v31;
                  if (v31)
                  {
                    uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid metallib file, unexpected end of file while parsing the variable list", *MEMORY[0x1E4F28568] forKey];
                    *uint64_t v25 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v26];
                  }
                  return 0;
                }
                uint64_t v38 = [NSString stringWithCString:v10 encoding:4];
                [v4 addObject:v38];
                break;
              default:
                goto LABEL_26;
            }
          }
LABEL_27:
          ++v6;
          if (v35 == 1162757204)
          {
LABEL_28:
            if (v6)
            {
              if (++v5 < v37) {
                goto LABEL_5;
              }
              goto LABEL_30;
            }
            uint64_t v27 = [NSString stringWithFormat:@"failed to parse variable list, no tokens read"];
            uint64_t v19 = v31;
            if (!v31) {
              return 0;
            }
            uint64_t v22 = (__CFString *)v27;
            MTLHashKey v20 = (void *)MEMORY[0x1E4F1C9E8];
            uint64_t v21 = *MEMORY[0x1E4F28568];
            goto LABEL_38;
          }
        }
      }
LABEL_36:
      uint64_t v19 = v31;
      if (v31)
      {
        MTLHashKey v20 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v21 = *MEMORY[0x1E4F28568];
        uint64_t v22 = @"Invalid metallib file, unexpected end of file while parsing the variable list";
LABEL_38:
        uint64_t v23 = [v20 dictionaryWithObject:v22 forKey:v21];
        *uint64_t v19 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v23];
      }
      return 0;
    }
LABEL_30:
    uint64_t v12 = [v4 count];
    if (v37 == v12)
    {
      *((void *)this + 15) = [objc_alloc(MEMORY[0x1E4F1C978]) initWithArray:v4];
      return 1;
    }
    uint64_t v24 = [NSString stringWithFormat:@"failed to parse the variable list, expected %u variables, found only %u", v37, v12];
    a2 = v31;
    if (v31)
    {
      uint64_t v16 = (__CFString *)v24;
      uint64_t v14 = (void *)MEMORY[0x1E4F1C9E8];
      uint64_t v15 = *MEMORY[0x1E4F28568];
      goto LABEL_35;
    }
  }
  else if (a2)
  {
    uint64_t v14 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v15 = *MEMORY[0x1E4F28568];
    uint64_t v16 = @"Invalid metallib file, unexpected end of file while parsing the variable list";
LABEL_35:
    uint64_t v17 = [v14 dictionaryWithObject:v16 forKey:v15];
    uint64_t v18 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v17];
    uint64_t result = 0;
    *a2 = v18;
    return result;
  }
  return 0;
}

uint64_t MTLLibraryDataWithArchive::parseStitchingScript(MTLLibraryDataWithArchive *a1, void *a2, NSError **a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!*((void *)a1 + 76)) {
    return 1;
  }
  int v3 = a2 + 1;
  unsigned int v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 1;
  }
  uint64_t v7 = (uint64_t)a1 + 480;
  while (1)
  {
    uint64_t v8 = v4[4];
    uint64_t v18 = v4[5];
    MTLHashKey v20 = 0;
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(&v19, (const void *)v4[6], v4[7], (uint64_t)(v4[7] - v4[6]) >> 5);
    (*(void (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)a1 + 312))(a1, v18 + *((void *)a1 + 75));
    uint64_t v17 = 0;
    if ((MTLLibraryDataWithArchive::extractScript(a1, &v17, &v16, a3) & 1) == 0) {
      break;
    }
    uint64_t v9 = v17;
    uint64_t v10 = *(unsigned int *)v17;
    memset(__p, 0, sizeof(__p));
    std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(__p, v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 5);
    MTLCalculateStitchingHash((int *)&v9[v10], (long long *)__p, v23);
    uint64_t v22 = v23;
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t&&>,std::tuple<>>(v7, v23, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22)[6] = v8;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    free(v17);
    if (v19)
    {
      MTLHashKey v20 = v19;
      operator delete(v19);
    }
    uint64_t v11 = (void *)v4[1];
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        uint64_t v12 = (void *)v4[2];
        BOOL v13 = *v12 == (void)v4;
        unsigned int v4 = v12;
      }
      while (!v13);
    }
    unsigned int v4 = v12;
    if (v12 == v3) {
      return 1;
    }
  }
  if (v19)
  {
    MTLHashKey v20 = v19;
    operator delete(v19);
  }
  return 0;
}

void sub_1827019DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLLibraryDataWithArchive::parseScriptSection(MTLLibraryDataWithArchive *this, NSError **a2)
{
  if (!*((void *)this + 76)) {
    return 1;
  }
  (*(void (**)(MTLLibraryDataWithArchive *, void))(*(void *)this + 312))(this, *((void *)this + 75));
  unsigned int v11 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(void *)this + 320))(this, &v11, 4) != 4)
  {
    if (!a2) {
      return 0;
    }
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid metallib file, unexpected end of file while parsing the script list", *MEMORY[0x1E4F28568] forKey];
    uint64_t v9 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v8];
    uint64_t result = 0;
    *a2 = v9;
    return result;
  }
  if (!v11) {
    return 1;
  }
  int v4 = 0;
  while (1)
  {
    *(void *)&size[1] = 0;
    size[0] = 0;
    uint64_t result = MTLLibraryDataWithArchive::extractScript(this, (char **)&size[1], size, a2);
    if (!result) {
      break;
    }
    int v6 = *(void **)&size[1];
    uint64_t v7 = (const char *)(*(void *)&size[1] + 4);
    if (!strncmp((const char *)(*(void *)&size[1] + 4), "AIRC", 4uLL) || !strncmp(v7, "AIRS", 4uLL))
    {
      free(v6);
    }
    else if (!strncmp(v7, "MTLP", 4uLL))
    {
      MTLLibraryDataWithArchive::handleMetalScript(this, (char *)v6, size[0]);
    }
    if (++v4 >= v11) {
      return 1;
    }
  }
  return result;
}

uint64_t LibraryWithData::getFileSize(LibraryWithData *this)
{
  return *((void *)this + 82) - *((void *)this + 30);
}

uint64_t LibraryWithFile::getFileSize(LibraryWithFile *this)
{
  uint64_t v2 = MEMORY[0x18530C780](*((void *)this + 81));
  fseek(*((FILE **)this + 81), 0, 2);
  uint64_t v3 = MEMORY[0x18530C780](*((void *)this + 81));
  fseek(*((FILE **)this + 81), v2, 0);
  return v3 - *((void *)this + 30);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t ___ZL26storeStitchingTrackingDatamP7NSArrayIPU22objcproto11MTLFunction11objc_objectENSt3__110shared_ptrINS4_6vectorI21stitchedAirDescriptorNS4_9allocatorIS7_EEEEEEPU21objcproto10MTLLibrary11objc_object_block_invoke()
{
  uint64_t result = MTLGetEnvDefault("MTL_ENABLE_METAL_SCRIPT_COLLECTION", 0);
  storeStitchingTrackingData(unsigned long,NSArray<objc_object  {objcproto11MTLFunction}*> *,std::shared_ptr<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector<stitchedAirDescriptor,NSArray<objc_object  {objcproto11MTLFunction}*> *::allocator<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector>>>,objc_object  {objcproto10MTLLibrary}*)::enableMetalScriptCollection = result != 0;
  return result;
}

void __MTLAddDevice_block_invoke(uint64_t a1)
{
  if (_getWrappedDeviceFn)
  {
    uint64_t v2 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) _deviceWrapper];
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v2 == *(void *)(v3 + 40))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = _getWrappedDeviceFn();
      int v4 = 1;
    }
    else
    {
      int v4 = 0;
      *(void *)(v3 + 40) = v2;
    }
  }
  else
  {
    int v4 = 0;
  }
  [(id)_deviceArray addObject:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
  if (v4)
  {
    int v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
}

void ___ZL14getGlobalStatev_block_invoke()
{
}

void LoaderGlobalState::LoaderGlobalState(LoaderGlobalState *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  uint64_t v2 = (void *)MEMORY[0x18530C9F0]();
  *(void *)this = (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "executableURL"), "path"), "stringByDeletingLastPathComponent");
  *((void *)this + 1) = dispatch_queue_create("MTLLoader global file queue", 0);
}

uint64_t ___ZN17MTLLibraryBuilder18newLibraryWithFileEPU19objcproto9MTLDevice11objc_objectP8NSStringPP7NSError_block_invoke(uint64_t a1, void *a2)
{
  int v4 = fopen(*(const char **)(a1 + 56), "rb");
  if (v4)
  {
    fileno(v4);
    change_fdguard_np();
    operator new();
  }
  int v5 = __error();
  int v6 = strerror(*v5);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    ___ZN17MTLLibraryBuilder18newLibraryWithFileEPU19objcproto9MTLDevice11objc_objectP8NSStringPP7NSError_block_invoke_cold_1((uint64_t)v6);
    if (!a2) {
      return 0;
    }
    goto LABEL_5;
  }
  if (a2)
  {
LABEL_5:
    uint64_t v7 = objc_msgSend(NSString, "stringWithFormat:", @"metal library file %s failed to open with error: %s", *(void *)(a1 + 56), v6);
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v7 forKey:*MEMORY[0x1E4F28568]];
    *a2 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v8];
  }
  return 0;
}

void sub_182702484(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A1C401F86E653);
  _Unwind_Resume(a1);
}

uint64_t LibraryWithFile::LibraryWithFile(void *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = objc_msgSend((id)+[MTLLoader canonicalURL:]((uint64_t)MTLLoader, a5), "path");
  uint64_t result = MTLLibraryDataWithArchive::MTLLibraryDataWithArchive((uint64_t)a1, a2, a3, v9);
  *a1 = &unk_1ECAC57F8;
  a1[81] = a4;
  return result;
}

uint64_t ___ZL15initWrapperTypev_block_invoke()
{
  v12[1] = *MEMORY[0x1E4F143B8];
  v0 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  unsigned int v11 = @"METAL_DEVICE_WRAPPER_TYPE";
  v12[0] = &unk_1ECB150F0;
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
  _CFXPreferencesRegisterDefaultValues();
  uint64_t v1 = MTLGetEnvDefault("MTL_DEBUG_LAYER", 0);
  uint64_t v2 = MTLGetEnvDefault("MTL_SHADER_VALIDATION", 0);
  uint64_t v3 = getenv((const char *)[@"METAL_DEVICE_WRAPPER_TYPE" UTF8String]);
  if (v3)
  {
    uint64_t result = strtol(v3, 0, 0);
    wrapperType = result;
    goto LABEL_4;
  }
  uint64_t result = [v0 integerForKey:@"METAL_DEVICE_WRAPPER_TYPE"];
  wrapperType = result;
  if (result)
  {
LABEL_4:
    BOOL v6 = result == 4 && v1 != 0;
    if (v2) {
      BOOL v7 = result == 1;
    }
    else {
      BOOL v7 = 0;
    }
    int v8 = 5;
    if (!v7 && !v6)
    {
      if ((result - 1) < 2) {
        return result;
      }
      goto LABEL_21;
    }
LABEL_20:
    wrapperType = v8;
    goto LABEL_21;
  }
  if (v1 && v2)
  {
    int v8 = 5;
    goto LABEL_20;
  }
  if (v1)
  {
    int v9 = 1;
    goto LABEL_24;
  }
  if (v2)
  {
    int v8 = 4;
    goto LABEL_20;
  }
LABEL_21:
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"UseMetalTelemetry", @"com.apple.Metal", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat && result)
  {
    int v9 = 2;
LABEL_24:
    wrapperType = v9;
  }
  return result;
}

id MTLCreateSystemDefaultDevice(void)
{
  MTLDeviceArrayInitialize();
  uint64_t v3 = 0;
  int v4 = &v3;
  uint64_t v5 = 0x3052000000;
  BOOL v6 = __Block_byref_object_copy__6;
  BOOL v7 = __Block_byref_object_dispose__6;
  uint64_t v8 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MTLCreateSystemDefaultDevice_block_invoke;
  block[3] = &unk_1E5220550;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)_deviceArrayQueue, block);
  v0 = (void *)v4[5];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void MTLDeviceArrayInitialize(void)
{
  if (MTLDeviceArrayInitialize(void)::pred != -1) {
    dispatch_once(&MTLDeviceArrayInitialize(void)::pred, &__block_literal_global_1181);
  }
  if (initWrapperType(void)::pred != -1) {
    dispatch_once(&initWrapperType(void)::pred, &__block_literal_global_1259);
  }
  os_unfair_lock_lock(&MTLInitializeInterpose(void)::lock);
  if (MTLInitializeInterpose(void)::interposeInitialized) {
    goto LABEL_69;
  }
  os_unfair_lock_unlock(&MTLInitializeInterpose(void)::lock);
  BOOL v0 = 1;
  if (!MTLGetEnvDefault("METAL_CAPTURE_ENABLED", 0) && !MTLGetEnvDefault("MTL_CAPTURE_ENABLED", 0))
  {
    BOOL v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"MetalCaptureEnabled");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || ([v13 BOOLValue] & 1) == 0)
    {
      uint64_t v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"MetalForceCaptureEnabled");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || ([v14 BOOLValue] & 1) == 0) {
        BOOL v0 = 0;
      }
    }
  }
  uint64_t v1 = getenv("MTL_CAPTURE_PATH");
  if (v1) {
    BOOL v0 = 1;
  }
  if (MTLGetEnvDefault("METAL_LOAD_INTERPOSER", 0))
  {
    uint64_t v2 = getenv("DYMTL_TOOLS_DYLIB_PATH");
    if (v1) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = v2 == 0;
    }
    int v4 = v3;
    if (!v3) {
      uint64_t v1 = v2;
    }
    if ((v0 | v4 ^ 1))
    {
LABEL_21:
      if (v1)
      {
        uint64_t v5 = v1;
        int v6 = 272;
      }
      else
      {
        if ((_MTLIsInternalBuild() & 1) == 0
          && objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "appStoreReceiptURL"), "path"), "rangeOfString:", @"sandboxReceipt") == 0x7FFFFFFFFFFFFFFFLL)
        {
          MTLReportFailure(2uLL, "LoadCaptureLayer", 345, @"Metal GPU Frame Capture is not allowed for App Store apps, try deploying through TestFlight", v9, v10, v11, v12, v30);
          uint64_t v8 = 0;
LABEL_35:
          int v7 = 1;
          goto LABEL_36;
        }
        uint64_t v5 = "/System/Library/PrivateFrameworks/GPUToolsCapture.framework/GPUToolsCapture";
        int v6 = 4;
      }
      uint64_t v8 = dlopen(v5, v6);
      goto LABEL_35;
    }
  }
  else if (v0)
  {
    goto LABEL_21;
  }
  int v7 = 0;
  uint64_t v8 = 0;
LABEL_36:
  uint64_t v15 = MTLGetEnvDefault("MTL_HUD_ENABLED", 0);
  unsigned int v16 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "objectForInfoDictionaryKey:", @"MetalHudEnabled");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v17 = [v16 BOOLValue];
  }
  else {
    char v17 = 0;
  }
  uint64_t v18 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"MetalForceHudEnabled");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v19 = [v18 BOOLValue];
  }
  else {
    int v19 = 0;
  }
  if (v15) {
    char v20 = 1;
  }
  else {
    char v20 = v17;
  }
  if ((v20 & 1) != 0 || v19)
  {
    uint64_t v25 = dlopen("/usr/lib/libMTLHud.dylib", 4);
    os_unfair_lock_lock(&MTLInitializeInterpose(void)::lock);
    if ((MTLInitializeInterpose(void)::interposeInitialized & 1) == 0)
    {
LABEL_54:
      if (v7)
      {
        if (!v8 || (_getWrappedDeviceFn = (uint64_t (*)(void))dlsym(v8, "DYMTLWrapDeviceWithDebugLayer")) == 0) {
          MTLReportFailure(2uLL, "MTLInitializeInterpose", 447, @"Metal GPU Frame Capture could not be enabled", v21, v22, v23, v24, v30);
        }
      }
      else
      {
        switch(wrapperType)
        {
          case 0:
            break;
          case 1:
            uint64_t v26 = (void *)&unk_1E8F5C000;
            uint64_t v27 = MTLWrapWithDebugDevice;
            goto LABEL_64;
          case 2:
            uint64_t v26 = (void *)&unk_1E8F5C000;
            uint64_t v27 = MTLWrapWithTelemetryDevice;
            goto LABEL_64;
          case 3:
            uint64_t v26 = &unk_1E8F5C000;
            uint64_t v27 = MTLWrapWithCountersDevice;
LABEL_64:
            v26[196] = v27;
            break;
          case 4:
            uint64_t v28 = (void *)&unk_1E8F5C000;
            unsigned int v29 = MTLWrapWithGPUDebugDevice;
            goto LABEL_67;
          case 5:
            uint64_t v28 = &unk_1E8F5C000;
            unsigned int v29 = MTLWrapWithAllDebugDevice;
LABEL_67:
            v28[196] = v29;
            _gpuDebugEnabled = 1;
            break;
          default:
            MTLReportFailure(0, "MTLInitializeInterpose", 485, @"Unknown Wrapper Type : %d", v21, v22, v23, v24, wrapperType);
            break;
        }
      }
      MTLLogAPIValidationType(wrapperType);
      MTLInitializeInterpose(void)::interposeInitialized = 1;
      goto LABEL_69;
    }
    if (v25) {
      dlclose(v25);
    }
  }
  else
  {
    os_unfair_lock_lock(&MTLInitializeInterpose(void)::lock);
    if ((MTLInitializeInterpose(void)::interposeInitialized & 1) == 0) {
      goto LABEL_54;
    }
  }
  if (v8) {
    dlclose(v8);
  }
LABEL_69:
  os_unfair_lock_unlock(&MTLInitializeInterpose(void)::lock);

  MTLRegisterDevices();
}

void MTLRegisterDevices()
{
  BOOL v0 = (void *)MEMORY[0x18530C9F0]();
  os_unfair_lock_lock((os_unfair_lock_t)&MTLRegisterDevices_lock);
  if (!_mtlIOAccelServiceGlobalContext)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&MTLRegisterDevices_lock);
    uint64_t v1 = objc_alloc_init(MTLIOAccelServiceGlobalContext);
    os_unfair_lock_lock((os_unfair_lock_t)&MTLRegisterDevices_lock);
    if (_mtlIOAccelServiceGlobalContext || !v1)
    {
    }
    else
    {
      _mtlIOAccelServiceGlobalContext = (uint64_t)v1;
      [(MTLIOAccelServiceGlobalContext *)v1 processPendingCreateIOAccelServiceRequests];
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&MTLRegisterDevices_lock);
}

uint64_t MTLGetEnvDefault(const char *a1, uint64_t a2)
{
  BOOL v3 = getenv(a1);
  if (!v3) {
    return a2;
  }

  return strtol(v3, 0, 0);
}

void *getMetalPluginClassForService(io_registry_entry_t a1)
{
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a1, @"MetalPluginName", 0, 0);
  if (CFProperty)
  {
    BOOL v3 = CFProperty;
    CFTypeID v4 = CFGetTypeID(CFProperty);
    if (v4 != CFStringGetTypeID() {
      || (uint64_t v5 = [MEMORY[0x1E4F28B50] bundleWithPath:objc_msgSend((id)objc_msgSend(@"/System/Library/Extensions", "stringByAppendingPathComponent:", v3), "stringByAppendingString:", @".bundle"]) == 0)
    }
    {
      uint64_t v10 = 0;
LABEL_14:
      CFRelease(v3);
      return v10;
    }
    int v6 = (void *)v5;
    CFTypeRef v7 = IORegistryEntryCreateCFProperty(a1, @"MetalPluginClassName", 0, 0);
    if (v7)
    {
      uint64_t v8 = v7;
      CFTypeID v9 = CFGetTypeID(v7);
      if (v9 == CFStringGetTypeID())
      {
        uint64_t v10 = (void *)[v6 classNamed:v8];
        CFRelease(v8);
        if (v10) {
          goto LABEL_12;
        }
      }
      else
      {
        CFRelease(v8);
      }
    }
    uint64_t v10 = (void *)[v6 principalClass];
LABEL_12:
    if (![v10 isSubclassOfClass:objc_opt_class()]) {
      uint64_t v10 = 0;
    }
    goto LABEL_14;
  }
  return 0;
}

void MTLAddDevice(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x3052000000;
  unsigned int v16 = __Block_byref_object_copy__6;
  char v17 = __Block_byref_object_dispose__6;
  uint64_t v18 = a1;
  if (!_deviceArray)
  {
    CFTypeID v9 = "_deviceArray != NULL";
    uint64_t v10 = 983;
    goto LABEL_10;
  }
  if (![a1 conformsToProtocol:&unk_1ECB3F6B8])
  {
    CFTypeID v9 = "[newDevice conformsToProtocol:@protocol(MTLDevice)]";
    uint64_t v10 = 984;
    goto LABEL_10;
  }
  if (([(id)v14[5] conformsToProtocol:&unk_1ECB419F8] & 1) == 0)
  {
    CFTypeID v9 = "[newDevice conformsToProtocol:@protocol(MTLDeviceSPI)]";
    uint64_t v10 = 985;
LABEL_10:
    MTLReleaseAssertionFailure((uint64_t)"MTLAddDevice", v10, (uint64_t)v9, 0, a5, a6, a7, a8, v11);
  }
  [(id)v14[5] initLimits];
  [(id)v14[5] initFeatureQueries];
  [(id)v14[5] initWorkarounds];
  if (_CFMZEnabled()) {
    [a1 allowLibrariesFromOtherPlatforms];
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __MTLAddDevice_block_invoke;
  block[3] = &unk_1E5220550;
  void block[4] = &v13;
  dispatch_sync((dispatch_queue_t)_deviceArrayQueue, block);
  _Block_object_dispose(&v13, 8);
}

void sub_1827032BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void MTLLogAPIValidationType(int a1)
{
  switch(a1)
  {
    case 1:
      if (MTLFailureTypeGetEnabled(3uLL))
      {
        NSLog(&cfstr_MetalApiExtend.isa);
      }
      else
      {
        BOOL v1 = MTLReportFailureTypeEnabled(1uLL);
        uint64_t v2 = "Disabled";
        if (v1) {
          uint64_t v2 = "Enabled";
        }
        NSLog(&cfstr_MetalApiValida.isa, v2);
      }
      break;
    case 2:
      NSLog(&cfstr_MetalApiTeleme.isa);
      break;
    case 3:
      NSLog(&cfstr_MetalApiCounte.isa);
      break;
    case 4:
      goto LABEL_6;
    case 5:
      MTLLogAPIValidationType(1);
LABEL_6:
      NSLog(&cfstr_MetalGpuValida.isa);
      break;
    default:
      return;
  }
}

void sub_1827044BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void createCommandQueueRateLimitingTelemetry()
{
  if (createCommandQueueRateLimitingTelemetry::onceToken != -1) {
    dispatch_once(&createCommandQueueRateLimitingTelemetry::onceToken, &__block_literal_global_12);
  }
}

void sub_182704AB0(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A0C405C0B448ELL);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryBuilder::MTLLibraryBuilder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  if (MTLGetModulesCachePath::onceToken != -1) {
    dispatch_once(&MTLGetModulesCachePath::onceToken, &__block_literal_global_6);
  }
  *(void *)(a1 + 48) = (id)MTLGetModulesCachePath::result;
  return a1;
}

void sub_182704BB0(_Unwind_Exception *a1)
{
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t MTLAtomicIncrement(atomic_uint *a1)
{
  return atomic_fetch_add(a1, 1u) + 1;
}

_DWORD *MTLConstantStorage::serializedConstantDataForFunction(MTLConstantStorage *this, _MTLFunction *a2, unint64_t *a3, NSString **a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int ConstantCountForFunction = MTLConstantStorage::getConstantCountForFunction(this, a2, a4);
  if (ConstantCountForFunction == -1) {
    return 0;
  }
  int v7 = ConstantCountForFunction;
  uint64_t v8 = (void *)[(_MTLFunction *)a2 functionConstants];
  size_t v9 = (20 * v7) + 4;
  uint64_t v10 = malloc_type_malloc(v9, 0xFA8FEB0CuLL);
  *uint64_t v10 = v7;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = v8;
  uint64_t v11 = [v8 countByEnumeratingWithState:&v29 objects:v33 count:16];
  uint64_t v26 = a3;
  if (v11)
  {
    uint64_t v12 = *(void *)v30;
    unint64_t v13 = 4;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v30 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(MTLFunctionConstant **)(*((void *)&v29 + 1) + 8 * i);
        ConstantValue = MTLConstantStorage::findConstantValue(this, v15);
        if (ConstantValue)
        {
          __int16 v17 = [(MTLFunctionConstant *)v15 index];
          if (v13 >= 0xFFFFFFFFFFFFFFFELL) {
            abort();
          }
          __int16 v18 = v17;
          size_t v19 = v13 + 2;
          if (v9 < v13 + 2)
          {
            if (!v9) {
              size_t v9 = 128;
            }
            while (v9 < v19)
            {
              if (v9 >> 1 >= ~v9) {
                size_t v9 = v13 + 2;
              }
              else {
                v9 += v9 >> 1;
              }
            }
            uint64_t v10 = malloc_type_realloc(v10, v9, 0x227314A4uLL);
            if (!v10) {
              goto LABEL_41;
            }
          }
          *(_WORD *)((char *)v10 + v13) = v18;
          if (v13 == -3) {
            abort();
          }
          char v20 = *(unsigned char *)ConstantValue;
          unint64_t v21 = v13 + 3;
          if (v9 <= v19)
          {
            if (!v9) {
              size_t v9 = 128;
            }
            while (v9 <= v19)
            {
              if (v9 >> 1 >= ~v9) {
                size_t v9 = v13 + 3;
              }
              else {
                v9 += v9 >> 1;
              }
            }
            uint64_t v10 = malloc_type_realloc(v10, v9, 0x227314A4uLL);
            if (!v10) {
              goto LABEL_41;
            }
          }
          *((unsigned char *)v10 + v19) = v20;
          uint64_t v22 = (const void *)*((void *)ConstantValue + 1);
          unint64_t v23 = _MTLConstantDataSize(*(unsigned __int8 *)ConstantValue);
          size_t v24 = v23;
          if (-4 - v13 < v23) {
            abort();
          }
          unint64_t v13 = v23 + v21;
          if (v9 < v23 + v21)
          {
            do
            {
              if (v9 >> 1 >= ~v9) {
                size_t v9 = v23 + v21;
              }
              else {
                v9 += v9 >> 1;
              }
            }
            while (v9 < v13);
            uint64_t v10 = malloc_type_realloc(v10, v9, 0x227314A4uLL);
            if (!v10) {
LABEL_41:
            }
              abort();
          }
          memcpy((char *)v10 + v21, v22, v24);
        }
      }
      uint64_t v11 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v11);
  }
  else
  {
    unint64_t v13 = 4;
  }
  *uint64_t v26 = v13;
  return v10;
}

void sub_182706198(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

unsigned __int16 *MTLConstantStorage::findConstantValue(MTLConstantStorage *this, MTLFunctionConstant *a2)
{
  unsigned __int16 v4 = [(MTLFunctionConstant *)a2 index];
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    int v6 = (unsigned __int16 *)((char *)this + 32);
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v5 + 32);
      BOOL v8 = v7 >= v4;
      if (v7 >= v4) {
        size_t v9 = (uint64_t *)v5;
      }
      else {
        size_t v9 = (uint64_t *)(v5 + 8);
      }
      if (v8) {
        int v6 = (unsigned __int16 *)v5;
      }
      uint64_t v5 = *v9;
    }
    while (*v9);
    if (v6 != (unsigned __int16 *)((char *)this + 32) && v6[16] <= v4) {
      return v6 + 20;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[(NSString *)[(MTLFunctionConstant *)a2 name] UTF8String]);
  uint64_t v10 = (MTLConstantStorage *)std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>((uint64_t)this, (const void **)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if ((MTLConstantStorage *)((char *)this + 8) == v10) {
    return 0;
  }
  else {
    return (unsigned __int16 *)((char *)v10 + 56);
  }
}

void sub_182706284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _MTLConstantDataSize(uint64_t a1)
{
  uint64_t result = 4;
  switch(a1)
  {
    case 3:
    case 17:
    case 29:
    case 33:
    case 38:
    case 42:
    case 48:
    case 52:
    case 56:
      return result;
    case 4:
    case 19:
    case 30:
    case 34:
    case 40:
    case 44:
    case 81:
    case 85:
LABEL_5:
      uint64_t result = 8;
      break;
    case 5:
    case 31:
    case 35:
      uint64_t result = 12;
      break;
    case 6:
    case 32:
    case 36:
    case 82:
    case 86:
      uint64_t result = 16;
      break;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
LABEL_12:
      uint64_t result = 0;
      break;
    case 16:
    case 37:
    case 41:
    case 46:
    case 50:
    case 54:
LABEL_4:
      uint64_t result = 2;
      break;
    case 18:
    case 39:
    case 43:
LABEL_6:
      uint64_t result = 6;
      break;
    case 45:
    case 49:
    case 53:
      uint64_t result = 1;
      break;
    case 47:
    case 51:
    case 55:
      uint64_t result = 3;
      break;
    case 83:
    case 87:
      uint64_t result = 24;
      break;
    case 84:
    case 88:
      uint64_t result = 32;
      break;
    default:
      switch(a1)
      {
        case 'y':
          goto LABEL_4;
        case 'z':
          return result;
        case '{':
          goto LABEL_6;
        case '|':
          goto LABEL_5;
        default:
          goto LABEL_12;
      }
  }
  return result;
}

uint64_t deserializeArguments(void *a1, DeserialContext *this, int a3, void **a4, void *a5, unsigned int a6, uint64_t a7)
{
  uint64_t v81 = DeserialContext::deserializeUint32(this);
  if (v81)
  {
    int v79 = a3;
    v82 = a5;
    unsigned int v83 = a6;
    size_t v101 = 8 * v81;
    uint64_t v12 = 0;
    *a4 = malloc_type_malloc(v101, 0x80040B8603338uLL);
    v84 = a4;
    char v13 = this;
    unsigned int v98 = a7;
    do
    {
      uint64_t v14 = DeserialContext::stringFromSerializedData(v13);
      unsigned int v15 = DeserialContext::deserializeUint32(v13);
      if ((v15 & 0xF) == 6)
      {
        unsigned int v16 = 0;
        unsigned int v17 = 1;
      }
      else
      {
        unsigned int v16 = DeserialContext::deserializeUint32(v13);
        unsigned int v17 = DeserialContext::deserializeUint32(v13);
      }
      int v18 = v15 & 0x1F;
      uint64_t v19 = (v15 >> 5) & 0xF;
      switch(v15 & 0x1F)
      {
        case 1u:
        case 2u:
        case 0xEu:
          unsigned int v88 = v16;
          uint64_t v91 = v14;
          unsigned int v20 = DeserialContext::deserializeUint32(v13);
          unsigned int v21 = DeserialContext::deserializeUint32(v13);
          unsigned int v22 = DeserialContext::deserializeUint32(v13);
          unsigned __int16 v23 = DeserialContext::deserializeUint32(v13);
          unsigned int v85 = DeserialContext::deserializeUint32(v13);
          if (v18 == 1 && [a1 minConstantBufferAlignmentBytes] >= (unint64_t)v23) {
            unsigned __int16 v23 = [a1 minConstantBufferAlignmentBytes];
          }
          uint64_t v24 = v20;
          uint64_t v25 = (v15 >> 9) & 1;
          if (v18 == 14) {
            uint64_t v26 = 22;
          }
          else {
            uint64_t v26 = 0;
          }
          LOBYTE(v78) = v18 == 1;
          uint64_t v27 = [[MTLBufferBindingInternal alloc] initWithName:v91 type:v26 access:v19 isActive:v25 locationIndex:v88 arraySize:v17 dataType:v24 pixelFormat:v21 aluType:v22 isConstantBuffer:v78 dataSize:v85 alignment:v23];
          a7 = v98;
          [(MTLBindingInternal *)v27 setIsArgument:v98];
          a4 = v84;
          *(void *)((char *)*v84 + v12) = v27;
          goto LABEL_14;
        case 3u:
          unsigned int v92 = (v15 >> 9) & 1;
          uint64_t v28 = DeserialContext::deserializeUint32(v13);
          DeserialContext::deserializeUint32(v13);
          DeserialContext::deserializeUint32(v13);
          unsigned __int16 v29 = DeserialContext::deserializeUint32(v13);
          uint64_t v73 = v28;
          a7 = v98;
          long long v30 = [[MTLThreadgroupMemoryBindingInternal alloc] initWithName:v14 type:1 access:v19 isActive:v92 locationIndex:v16 arraySize:v17 dataType:v73 dataSize:DeserialContext::deserializeUint32(v13) alignment:v29];
          goto LABEL_33;
        case 4u:
          unsigned int v93 = (v15 >> 9) & 1;
          uint64_t v31 = DeserialContext::deserializeUint32(v13);
          int v32 = DeserialContext::deserializeUint32(v13);
          LOBYTE(v75) = BYTE2(v32) & 1;
          a7 = v98;
          long long v30 = [[MTLTextureBindingInternal alloc] initWithName:v14 access:v19 isActive:v93 locationIndex:v16 arraySize:v17 dataType:v31 textureType:(unsigned __int16)v32 isDepthTexture:v75];
          goto LABEL_33;
        case 5u:
          uint64_t v33 = (v15 >> 9) & 1;
          uint64_t v34 = [MTLBindingInternal alloc];
          uint64_t v35 = v16;
          uint64_t v36 = v17;
          uint64_t v37 = v14;
          uint64_t v38 = 3;
          goto LABEL_32;
        case 6u:
          uint64_t v39 = (v15 >> 9) & 1;
          uint64_t v40 = DeserialContext::deserializeUint32(v13);
          long long v30 = [[MTLBuiltInArgument alloc] initWithName:v14 type:15 access:v19 active:v39 index:v16 dataType:v40 builtInType:DeserialContext::deserializeUint32(v13)];
          goto LABEL_33;
        case 8u:
          unsigned int v94 = (v15 >> 9) & 1;
          uint64_t v41 = DeserialContext::deserializeUint32(v13);
          uint64_t v42 = DeserialContext::deserializeUint32(v13);
          uint64_t v43 = DeserialContext::deserializeUint32(v13);
          unsigned __int16 v44 = DeserialContext::deserializeUint32(this);
          uint64_t v76 = v43;
          char v13 = this;
          uint64_t v74 = v42;
          a7 = v98;
          long long v30 = [[MTLIndirectConstantArgument alloc] initWithName:v14 type:4 access:v19 isActive:v94 locationIndex:v16 dataType:v41 pixelFormat:v74 aluType:v76 dataSize:DeserialContext::deserializeUint32(this) alignment:v44];
          goto LABEL_33;
        case 9u:
          unsigned int v95 = (v15 >> 9) & 1;
          uint64_t v45 = DeserialContext::deserializeUint32(v13);
          v109[0] = 0;
          char v108 = 1;
          uint64_t v46 = structTypeFromSerializedContext((uint64_t)a1, v13, v109, v82, &v108, v83);
          BOOL v47 = DeserialContext::deserializeUint32(v13) != 0;
          HIDWORD(v75) = DeserialContext::deserializeUint32(v13);
          LOBYTE(v75) = v47;
          a7 = v98;
          uint64_t v48 = -[MTLImageBlockDataArgument initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:]([MTLImageBlockDataArgument alloc], "initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v14, 16, v19, v95, v16, v45, v46, v75);
          [(MTLBindingInternal *)v48 setIsArgument:v98];
          if (v108) {
            goto LABEL_21;
          }
          goto LABEL_22;
        case 0xAu:
          unsigned int v96 = (v15 >> 9) & 1;
          uint64_t v89 = DeserialContext::deserializeUint32(v13);
          uint64_t v49 = v14;
          int v50 = DeserialContext::deserializeUint32(v13);
          char v107 = 0;
          char v106 = 1;
          uint64_t v46 = structTypeFromSerializedContext((uint64_t)a1, v13, &v107, v82, &v106, v83);
          BOOL v51 = DeserialContext::deserializeUint32(v13) != 0;
          HIDWORD(v77) = DeserialContext::deserializeUint32(v13);
          LOBYTE(v77) = v51;
          a7 = v98;
          LODWORD(v72) = v50;
          uint64_t v48 = -[MTLImageBlockArgument initWithName:type:access:isActive:index:kind:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:]([MTLImageBlockArgument alloc], "initWithName:type:access:isActive:index:kind:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v49, 17, v19, v96, v16, v89, v72, v46, v77);
          [(MTLBindingInternal *)v48 setIsArgument:v98];
          if (!v106) {
            goto LABEL_22;
          }
LABEL_21:

LABEL_22:
          *(void *)((char *)*a4 + v12) = v48;
          break;
        case 0xBu:
          uint64_t v33 = (v15 >> 9) & 1;
          uint64_t v34 = [MTLBindingInternal alloc];
          uint64_t v35 = v16;
          uint64_t v36 = v17;
          uint64_t v37 = v14;
          uint64_t v38 = 20;
          goto LABEL_32;
        case 0xCu:
          uint64_t v33 = (v15 >> 9) & 1;
          uint64_t v34 = [MTLBindingInternal alloc];
          uint64_t v35 = v16;
          uint64_t v36 = v17;
          uint64_t v37 = v14;
          uint64_t v38 = 19;
          goto LABEL_32;
        case 0xDu:
          uint64_t v33 = (v15 >> 9) & 1;
          uint64_t v34 = [MTLBindingInternal alloc];
          uint64_t v35 = v16;
          uint64_t v36 = v17;
          uint64_t v37 = v14;
          uint64_t v38 = 21;
          goto LABEL_32;
        case 0x10u:
          uint64_t v33 = (v15 >> 9) & 1;
          uint64_t v34 = [MTLBindingInternal alloc];
          uint64_t v35 = v16;
          uint64_t v36 = v17;
          uint64_t v37 = v14;
          uint64_t v38 = 24;
          goto LABEL_32;
        case 0x11u:
          uint64_t v33 = (v15 >> 9) & 1;
          uint64_t v34 = [MTLBindingInternal alloc];
          uint64_t v35 = v16;
          uint64_t v36 = v17;
          uint64_t v37 = v14;
          uint64_t v38 = 27;
          goto LABEL_32;
        case 0x12u:
          uint64_t v33 = (v15 >> 9) & 1;
          uint64_t v34 = [MTLBindingInternal alloc];
          uint64_t v35 = v16;
          uint64_t v36 = v17;
          uint64_t v37 = v14;
          uint64_t v38 = 25;
          goto LABEL_32;
        case 0x13u:
          uint64_t v33 = (v15 >> 9) & 1;
          uint64_t v34 = [MTLBindingInternal alloc];
          uint64_t v35 = v16;
          uint64_t v36 = v17;
          uint64_t v37 = v14;
          uint64_t v38 = 26;
LABEL_32:
          long long v30 = [(MTLBindingInternal *)v34 initWithName:v37 type:v38 access:v19 index:v35 active:v33 arrayLength:v36];
          goto LABEL_33;
        case 0x15u:
          uint64_t v53 = DeserialContext::deserializeUint32(v13);
          DeserialContext::deserializeUint32(v13);
          DeserialContext::deserializeUint32(v13);
          uint64_t v54 = v14;
          unsigned __int16 v55 = DeserialContext::deserializeUint32(v13);
          unsigned int v56 = DeserialContext::deserializeUint32(v13);
          uint64_t v57 = [MTLObjectPayloadBindingInternal alloc];
          uint64_t v58 = v56;
          char v13 = this;
          long long v30 = [(MTLObjectPayloadBindingInternal *)v57 initWithName:v54 type:34 access:(v15 >> 5) & 0xF isActive:(v15 >> 9) & 1 arraySize:v17 dataType:v53 dataSize:v58 alignment:v55];
LABEL_33:
          uint64_t v52 = v30;
          [(MTLBindingInternal *)v30 setIsArgument:a7];
          *(void *)((char *)*a4 + v12) = v52;
          break;
        case 0x16u:
          unsigned int v97 = (v15 >> 9) & 1;
          uint64_t v90 = DeserialContext::deserializeUint32(v13);
          uint64_t v87 = DeserialContext::deserializeUint32(v13);
          __int16 v86 = DeserialContext::deserializeUint32(v13);
          __int16 v80 = DeserialContext::deserializeUint32(v13);
          uint64_t v59 = DeserialContext::deserializeUint32(v13);
          char v105 = 0;
          char v104 = 1;
          unsigned int v60 = v16;
          long long v61 = structTypeFromSerializedContext((uint64_t)a1, v13, &v105, v82, &v104, v83);
          a7 = v98;
          uint64_t v62 = structTypeFromSerializedContext((uint64_t)a1, v13, &v105, v82, &v104, v83);
          v63 = [MTLBuiltInMeshArgument alloc];
          uint64_t v64 = v60;
          WORD1(v78) = v80;
          LOWORD(v78) = v86;
          a4 = v84;
          v65 = -[MTLBuiltInMeshArgument initWithName:type:access:active:index:dataType:builtInType:meshVertexStructType:meshPrimitiveStructType:meshVertexCount:meshPrimitiveCount:meshTopologyType:](v63, "initWithName:type:access:active:index:dataType:builtInType:meshVertexStructType:meshPrimitiveStructType:meshVertexCount:meshPrimitiveCount:meshTopologyType:", v14, 35, v19, v97, v64, v90, v87, v61, v62, v78, v59);
          [(MTLBindingInternal *)v65 setIsArgument:v98];
          *(void *)((char *)*v84 + v12) = v65;
          if (v104)
          {
          }
LABEL_14:
          char v13 = this;
          break;
        default:
          abort();
      }
      v12 += 8;
    }
    while (v101 != v12);
    if (v79)
    {
      for (uint64_t i = 0; 8 * v81 != i; i += 8)
      {
        char v103 = 0;
        unsigned __int8 v102 = 1;
        v67 = structTypeFromSerializedContext((uint64_t)a1, this, &v103, v82, &v102, v83);
        if (v67)
        {
          int v68 = v67;
          uint64_t v69 = [*(id *)((char *)*a4 + i) type];
          if (v69 <= 15)
          {
            if ((unint64_t)v69 > 1) {
              goto LABEL_53;
            }
          }
          else
          {
            if ((unint64_t)(v69 - 16) < 2)
            {
              [*(id *)((char *)*a4 + i) setStructType:v68];
LABEL_53:
              if (!v102) {
                continue;
              }
LABEL_49:

              continue;
            }
            if (v69 != 34 && v69 != 22) {
              goto LABEL_53;
            }
          }
          int v70 = v102;
          [*(id *)((char *)*a4 + i) setStructType:v68 doRetain:v102];
          if (v70) {
            goto LABEL_49;
          }
        }
      }
    }
  }
  return v81;
}

MTLStructTypeInternal *deserializeStructArgument(void *a1, unsigned int *a2, uint64_t a3, ReflectionDeserializeContext *a4, unsigned char *a5)
{
  uint64_t v8 = a3 + 4;
  size_t v9 = (unsigned int *)(a3 + 4 + 4 * *a2);
  uint64_t v10 = AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v9 + *v9));
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (int *)v10;
  StructForId = (void *)ReflectionDeserializeContext::getStructForId(a4, *a2);
  if (StructForId)
  {
    if (a5) {
      *a5 = 0;
    }
    return (MTLStructTypeInternal *)StructForId;
  }
  unsigned int v15 = [MTLStructTypeInternal alloc];
  unint64_t v16 = *((void *)a4 + 5) + *((void *)a4 + 4) - 1;
  uint64_t v17 = *(void *)(*((void *)a4 + 1) + 8 * (v16 / 0x49)) + 56 * (v16 % 0x49) + 16;
  *(void *)&long long v128 = *a2;
  *((void *)&v128 + 1) = v15;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,MTLStructTypeInternal *>>(v17, (unint64_t *)&v128, &v128);
  int v18 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v18 < 5u || (uint64_t v19 = v18[2]) == 0)
  {
    unsigned __int16 v23 = 0;
    goto LABEL_20;
  }
  uint64_t v20 = *(unsigned int *)((char *)v11 + v19);
  size_t v21 = *(unsigned int *)((char *)v11 + v19 + v20);
  unsigned int v22 = malloc_type_calloc(v21, 8uLL, 0x80040B8603338uLL);
  unsigned __int16 v23 = v22;
  if (!v21)
  {
LABEL_20:
    uint64_t v14 = [(MTLStructTypeInternal *)v15 initWithMembers:v23 count:0];
    uint64_t v29 = 0;
    goto LABEL_21;
  }
  size_t v24 = 0;
  uint64_t v25 = (uint64_t)v11 + v20 + v19 + 24;
  v121 = a4;
  uint64_t v119 = v8;
  v118 = v15;
  while (1)
  {
    uint64_t v26 = *(unsigned int *)(v25 - 20) - (uint64_t)*(int *)(v25 + *(unsigned int *)(v25 - 20) - 20);
    unsigned int v27 = *(unsigned __int16 *)(v25 + v26 - 20);
    if (v27 >= 0x13 && (*(_WORD *)(v25 + v26 - 2) || v27 >= 0x15 && *(_WORD *)(v25 + v26))) {
      break;
    }
    ++v24;
    v25 += 4;
    if (v24 >= v21)
    {
      unsigned int v28 = 0;
      goto LABEL_24;
    }
  }
  unsigned int v28 = 1;
LABEL_24:
  uint64_t v30 = 0;
  unsigned int v120 = v28;
  v123 = v22;
  uint64_t v124 = v28;
  uint64_t v31 = (uint64_t)v11 + v20 + v19 + 28;
  size_t v122 = v21;
  do
  {
    uint64_t v32 = *(unsigned int *)(v31 - 24);
    uint64_t v33 = v31 + v32;
    uint64_t v34 = v31 + v32 - *(int *)(v31 + v32 - 24);
    if (*(unsigned __int16 *)(v34 - 24) < 0xDu)
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = *(unsigned __int16 *)(v34 - 12);
      if (v35) {
        uint64_t v35 = v31 + v32 + v35 + *(unsigned int *)(v31 + v32 + v35 - 24) - 24;
      }
    }
    uint64_t v36 = (const void *)(v35 + 4);
    size_t v37 = strlen((const char *)(v35 + 4));
    unint64_t v38 = pixelFormatAndALUTypeFromString(v36, v37);
    uint64_t v39 = v32 - *(int *)(v33 - 24);
    uint64_t v40 = v31 + v39;
    unsigned int v41 = *(unsigned __int16 *)(v31 + v39 - 24);
    if (v41 < 0x15)
    {
      if (v41 < 0x13)
      {
        uint64_t v42 = 0;
        uint64_t v47 = 0;
        uint64_t v46 = 0;
        if (v41 < 5) {
          goto LABEL_60;
        }
LABEL_41:
        if (*(_WORD *)(v31 + v39 - 20))
        {
          unint64_t v48 = *((void *)v121 + 5) + *((void *)v121 + 4) - 1;
          uint64_t v49 = *(void *)(*(void *)(*((void *)v121 + 1) + 8 * (v48 / 0x49)) + 56 * (v48 % 0x49));
          memset(v129, 0, sizeof(v129));
          int v130 = 1065353216;
          *(void *)&long long v128 = v49;
          BYTE8(v128) = 1;
          memset(v131, 0, sizeof(v131));
          int v132 = 1065353216;
          std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v129, (uint64_t *)v131);
          std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v131);
          std::deque<ContextStack>::push_back(v121, (uint64_t *)&v128);
          ContextStack::~ContextStack((ContextStack *)&v128);
          uint64_t v50 = v31 + v32 - *(int *)(v33 - 24);
          if (*(unsigned __int16 *)(v50 - 24) >= 5u && (unsigned __int16 v51 = *(_WORD *)(v50 - 20)) != 0) {
            uint64_t v52 = v31 + v32 + v51 - 24;
          }
          else {
            uint64_t v52 = 0;
          }
          uint64_t v46 = (MTLArrayTypeInternal *)deserializeStructArgument(a1, v52, a3, v121, 0);
          std::deque<ContextStack>::pop_back(v121);
          uint64_t v47 = 1;
        }
        else
        {
          uint64_t v47 = 0;
          uint64_t v46 = 0;
        }
        goto LABEL_60;
      }
    }
    else if (*(_WORD *)(v40 - 4))
    {
      uint64_t v42 = *(unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v40 - 4) - 24);
      goto LABEL_34;
    }
    uint64_t v42 = 0;
LABEL_34:
    uint64_t v43 = v31 + v39;
    if (!*(_WORD *)(v31 + v39 - 6)) {
      goto LABEL_41;
    }
    *(void *)&long long v128 = 0;
    if (*(_WORD *)(v43 - 6)) {
      unsigned __int16 v44 = (unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v43 - 6) - 24);
    }
    else {
      unsigned __int16 v44 = 0;
    }
    deserializeArgument(a1, v44, a3, v121, (MTLBuiltInMeshArgument **)&v128);
    uint64_t v45 = (void *)v128;
    if ((void)v128)
    {
      uint64_t v46 = (MTLArrayTypeInternal *)(id)v128;
      uint64_t v42 = [v45 index];
      uint64_t v47 = 57;
    }
    else
    {
      uint64_t v53 = v31 + v32 - *(int *)(v33 - 24);
      if (*(unsigned __int16 *)(v53 - 24) < 0xDu)
      {
        uint64_t v54 = 0;
      }
      else
      {
        uint64_t v54 = *(unsigned __int16 *)(v53 - 12);
        if (v54) {
          uint64_t v54 = v31 + v32 + v54 + *(unsigned int *)(v31 + v32 + v54 - 24) - 24;
        }
      }
      unsigned __int16 v55 = (const void *)(v54 + 4);
      size_t v56 = strlen((const char *)(v54 + 4));
      if (dataTypeFromString(v55, v56))
      {
        uint64_t v57 = v31 + v32 - *(int *)(v33 - 24);
        if (*(unsigned __int16 *)(v57 - 24) < 0xDu)
        {
          uint64_t v58 = 0;
        }
        else
        {
          uint64_t v58 = *(unsigned __int16 *)(v57 - 12);
          if (v58) {
            uint64_t v58 = v31 + v32 + v58 + *(unsigned int *)(v31 + v32 + v58 - 24) - 24;
          }
        }
        uint64_t v59 = (const void *)(v58 + 4);
        size_t v60 = strlen((const char *)(v58 + 4));
        uint64_t v46 = 0;
        uint64_t v47 = dataTypeFromString(v59, v60);
      }
      else
      {
        uint64_t v47 = 0;
        uint64_t v46 = 0;
      }
    }

LABEL_60:
    int v61 = *(_DWORD *)(v33 - 24);
    if (*(unsigned __int16 *)(v31 + v32 - v61 - 24) < 5u)
    {
      uint64_t v62 = v124;
    }
    else
    {
      uint64_t v62 = v124;
      if (*(_WORD *)(v31 + v32 - v61 - 20))
      {
        v63 = (unsigned int *)(v119
                             + 4 * *(unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v31 + v32 - v61 - 20) - 24));
        uint64_t v64 = (int *)AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v63 + *v63));
        v65 = (unsigned __int16 *)((char *)v64 - *v64);
        if (*v65 >= 5u && (uint64_t v66 = v65[2]) != 0) {
          v67 = (int *)((char *)v64 + v66 + *(unsigned int *)((char *)v64 + v66));
        }
        else {
          v67 = 0;
        }
        unsigned int StructIndirectArgumentIndexStride = getStructIndirectArgumentIndexStride(v67, a3);
        int v61 = *(_DWORD *)(v33 - 24);
        uint64_t v62 = v124;
        if (StructIndirectArgumentIndexStride > v120)
        {
          uint64_t v69 = (unsigned int *)(v119
                               + 4
                               * *(unsigned int *)(v31
                                                 + v32
                                                 + *(unsigned __int16 *)(v31 + v32 - *(int *)(v33 - 24) - 20)
                                                 - 24));
          int v70 = (int *)AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v69 + *v69));
          uint64_t v71 = (unsigned __int16 *)((char *)v70 - *v70);
          if (*v71 >= 5u && (uint64_t v72 = v71[2]) != 0) {
            uint64_t v73 = (int *)((char *)v70 + v72 + *(unsigned int *)((char *)v70 + v72));
          }
          else {
            uint64_t v73 = 0;
          }
          uint64_t v62 = getStructIndirectArgumentIndexStride(v73, a3);
          int v61 = *(_DWORD *)(v33 - 24);
        }
      }
    }
    unsigned int v74 = *(unsigned __int16 *)(v31 + v32 - v61 - 24);
    if (v74 < 0xB) {
      goto LABEL_79;
    }
    uint64_t v75 = v32 - v61;
    if (!*(_WORD *)(v31 + v75 - 14)
      || (uint64_t v76 = *(unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v31 + v75 - 14) - 24), !v76))
    {
      if (v74 < 0xD)
      {
LABEL_79:
        uint64_t v77 = 0;
      }
      else
      {
        uint64_t v77 = *(unsigned __int16 *)(v31 + v75 - 12);
        if (v77) {
          uint64_t v77 = v31 + v32 + v77 + *(unsigned int *)(v31 + v32 + v77 - 24) - 24;
        }
      }
      uint64_t v78 = (void *)(v77 + 4);
      size_t v79 = strlen((const char *)(v77 + 4));
      uint64_t v76 = arraySizeFromTypeName(v78, v79);
    }
    uint64_t v127 = v42;
    unint64_t v80 = HIDWORD(v38);
    unint64_t v38 = v38;
    if (v76 < 1) {
      goto LABEL_90;
    }
    if (v46)
    {
      uint64_t v81 = [MTLArrayTypeInternal alloc];
      uint64_t v82 = v31 + v32 - *(int *)(v33 - 24);
      if (*(unsigned __int16 *)(v82 - 24) >= 9u && (uint64_t v83 = *(unsigned __int16 *)(v82 - 16)) != 0) {
        uint64_t v84 = *(unsigned int *)(v31 + v32 + v83 - 24);
      }
      else {
        uint64_t v84 = 0;
      }
      unsigned int v85 = [(MTLArrayTypeInternal *)v81 initWithArrayLength:v76 elementType:v47 stride:v84 pixelFormat:v38 aluType:v80 details:v46];

      if (!v62) {
        goto LABEL_89;
      }
    }
    else
    {
      if (!v47)
      {
        uint64_t v92 = v31 + v32 - *(int *)(v33 - 24);
        if (*(unsigned __int16 *)(v92 - 24) < 0xDu)
        {
          uint64_t v93 = 0;
        }
        else
        {
          uint64_t v93 = *(unsigned __int16 *)(v92 - 12);
          if (v93) {
            uint64_t v93 = v31 + v32 + v93 + *(unsigned int *)(v31 + v32 + v93 - 24) - 24;
          }
        }
        unsigned int v94 = (const void *)(v93 + 4);
        size_t v95 = strlen((const char *)(v93 + 4));
        uint64_t v47 = dataTypeFromString(v94, v95);
      }
      unsigned int v96 = [MTLArrayTypeInternal alloc];
      uint64_t v97 = v31 + v32 - *(int *)(v33 - 24);
      if (*(unsigned __int16 *)(v97 - 24) >= 9u && (uint64_t v98 = *(unsigned __int16 *)(v97 - 16)) != 0) {
        uint64_t v99 = *(unsigned int *)(v31 + v32 + v98 - 24);
      }
      else {
        uint64_t v99 = 0;
      }
      unsigned int v85 = [(MTLArrayTypeInternal *)v96 initWithArrayLength:v76 elementType:v47 stride:v99 pixelFormat:v38 aluType:v80 details:0];
      if (!v62) {
        goto LABEL_89;
      }
    }
    [(MTLArrayTypeInternal *)v85 setArgumentIndexStride:v62];
LABEL_89:
    [(MTLArrayTypeInternal *)v85 setIsIndirectArgumentBuffer:v120];
    unint64_t v38 = 0;
    unint64_t v80 = 0;
    uint64_t v47 = 2;
    uint64_t v46 = v85;
LABEL_90:
    uint64_t v86 = 0;
    uint64_t v87 = *(int *)(v33 - 24);
    uint64_t v88 = v32 - v87;
    uint64_t v89 = v31 + v32 - v87;
    unsigned int v90 = *(unsigned __int16 *)(v89 - 24);
    if (v90 < 5) {
      goto LABEL_114;
    }
    uint64_t v91 = -v87;
    if (*(_WORD *)(v89 - 20)) {
      goto LABEL_115;
    }
    if (v90 < 0xB) {
      goto LABEL_113;
    }
    if (!*(_WORD *)(v31 + v88 - 14) || !*(_DWORD *)(v31 + v32 + *(unsigned __int16 *)(v31 + v88 - 14) - 24))
    {
      if (v90 < 0x13)
      {
        if (v90 >= 0xD) {
          goto LABEL_111;
        }
LABEL_113:
        uint64_t v86 = 0;
      }
      else
      {
        if (*(_WORD *)(v31 + v88 - 6)) {
          goto LABEL_115;
        }
LABEL_111:
        uint64_t v86 = *(unsigned __int16 *)(v31 + v88 - 12);
        if (*(_WORD *)(v31 + v88 - 12)) {
          uint64_t v86 = v31 + v32 + v86 + *(unsigned int *)(v31 + v32 + v86 - 24) - 24;
        }
      }
LABEL_114:
      v100 = (const void *)(v86 + 4);
      size_t v101 = strlen((const char *)(v86 + 4));
      uint64_t v47 = dataTypeFromString(v100, v101);
      uint64_t v91 = -(uint64_t)*(int *)(v33 - 24);
    }
LABEL_115:
    unsigned int v102 = *(unsigned __int16 *)(v31 + v32 + v91 - 24);
    char v103 = &stru_1ECAC84A8;
    if (v102 >= 0xF)
    {
      if (*(_WORD *)(v31 + v91 + v32 - 10))
      {
        uint64_t v104 = v31 + v32 + *(unsigned __int16 *)(v31 + v91 + v32 - 10);
        uint64_t v105 = [NSString stringWithUTF8String:v104 + *(unsigned int *)(v104 - 24) - 20];
LABEL_118:
        char v103 = (__CFString *)v105;
        goto LABEL_122;
      }
      if (v102 >= 0x11)
      {
        uint64_t v106 = *(unsigned __int16 *)(v31 + v91 + v32 - 8);
        if (v106)
        {
          uint64_t v105 = objc_msgSend(NSString, "stringWithFormat:", @"user(%s)", v31 + v32 + v106 + *(unsigned int *)(v31 + v32 + v106 - 24) - 20);
          goto LABEL_118;
        }
      }
    }
LABEL_122:
    uint64_t v107 = v31 + v32 - *(int *)(v33 - 24);
    if (*(unsigned __int16 *)(v107 - 24) >= 7u && (uint64_t v108 = *(unsigned __int16 *)(v107 - 18)) != 0) {
      uint64_t v109 = *(unsigned int *)(v31 + v32 + v108 - 24);
    }
    else {
      uint64_t v109 = 0;
    }
    v110 = [MTLStructMemberInternal alloc];
    uint64_t v111 = v32 - *(int *)(v33 - 24);
    unsigned int v112 = *(unsigned __int16 *)(v31 + v111 - 24);
    if (v112 < 0x19)
    {
      uint64_t v113 = 0xFFFFFFFFLL;
      uint64_t v114 = 0xFFFFFFFFLL;
      if (v112 < 0x17) {
        goto LABEL_135;
      }
    }
    else if (*(_WORD *)(v31 + v111))
    {
      uint64_t v113 = *(unsigned int *)(v31 + v32 + *(unsigned __int16 *)(v31 + v111) - 24);
    }
    else
    {
      uint64_t v113 = 0xFFFFFFFFLL;
    }
    unsigned __int16 v115 = *(_WORD *)(v31 + v111 - 2);
    if (v115) {
      uint64_t v114 = *(unsigned int *)(v31 + v32 + v115 - 24);
    }
    else {
      uint64_t v114 = 0xFFFFFFFFLL;
    }
LABEL_135:
    uint64_t v116 = [(MTLStructMemberInternal *)v110 initWithName:v103 offset:v109 dataType:v47 pixelFormat:v38 aluType:v80 indirectArgumentIndex:v127 render_target:v113 raster_order_group:v114 details:v46];
    unsigned __int16 v23 = v123;
    *((void *)v123 + v30) = v116;
    if (v46) {

    }
    ++v30;
    v31 += 4;
  }
  while (v122 != v30);
  uint64_t v14 = [(MTLStructTypeInternal *)v118 initWithMembers:v123 count:v122];
  for (uint64_t i = 0; i != v122; ++i)

  uint64_t v29 = v120;
LABEL_21:
  free(v23);
  [(MTLStructTypeInternal *)v14 setIsIndirectArgumentBuffer:v29];
  return v14;
}

void sub_182707B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  ContextStack::~ContextStack((ContextStack *)va);
  _Unwind_Resume(a1);
}

uint64_t pixelFormatAndALUTypeFromString(const void *a1, size_t a2)
{
  dataTypeInfoFromString(a1, a2, (uint64_t)v3);
  return v4;
}

uint64_t dataTypeFromString(const void *a1, size_t a2)
{
  dataTypeInfoFromString(a1, a2, (uint64_t)v3);
  return v3[0];
}

MTLStructTypeInternal *structTypeFromSerializedContext(uint64_t a1, DeserialContext *a2, unsigned char *a3, void *a4, unsigned char *a5, unsigned int a6)
{
  uint64_t v37 = a1;
  v44[1] = *(_DWORD **)MEMORY[0x1E4F143B8];
  uint64_t v11 = (void *)MEMORY[0x18530C9F0]();
  *a5 = 1;
  unsigned int v38 = a6;
  if (!a6)
  {
    unsigned int v14 = DeserialContext::deserializeUint32(a2);
    if (v14)
    {
LABEL_6:
      unsigned int v15 = objc_alloc_init(MTLStructTypeInternal);
      char v13 = v15;
      goto LABEL_7;
    }
LABEL_19:
    char v13 = 0;
    goto LABEL_20;
  }
  unsigned int v43 = DeserialContext::deserializeUint32(a2);
  if (!v43) {
    goto LABEL_19;
  }
  uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::find<unsigned int>(a4, &v43);
  if (v12)
  {
    *a5 = 0;
    char v13 = (MTLStructTypeInternal *)v12[3];
    goto LABEL_20;
  }
  char v13 = objc_alloc_init(MTLStructTypeInternal);
  v44[0] = &v43;
  std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)a4, &v43, (uint64_t)&std::piecewise_construct, v44)[3] = v13;
  unsigned int v15 = (MTLStructTypeInternal *)DeserialContext::deserializeUint32(a2);
  if (!v15) {
    goto LABEL_20;
  }
  unsigned int v14 = v15;
  if (!v13) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v33 = v13;
  uint64_t v34 = a3;
  uint64_t v35 = v11;
  uint64_t v36 = a4;
  v32[1] = v32;
  LOBYTE(v44[0]) = 0;
  uint64_t v40 = v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v39 = (char *)v32 - v16;
  uint64_t v17 = 0;
  do
  {
    uint64_t v18 = DeserialContext::stringFromSerializedData(a2);
    unsigned int v19 = DeserialContext::deserializeUint32(a2);
    unsigned int v20 = DeserialContext::deserializeUint32(a2);
    unsigned int v21 = DeserialContext::deserializeUint32(a2);
    unsigned int v22 = DeserialContext::deserializeUint32(a2);
    unsigned int v23 = DeserialContext::deserializeUint32(a2);
    int v24 = 1;
    LOBYTE(v43) = 1;
    unsigned int v41 = v20;
    unsigned int v42 = v19;
    switch(v21)
    {
      case 0x39u:
        uint64_t v25 = (void *)newArgumentTypeFromSerializedContext(v37, a2);
        LOBYTE(v44[0]) = 1;
        break;
      case 2u:
        uint64_t v25 = newArrayTypeFromSerializedContext(v37, a2, v44, (uint64_t)v36, v38);
        break;
      case 1u:
        uint64_t v25 = (void *)structTypeFromSerializedContext(v37, a2, v44, v36, &v43, v38);
        int v24 = v43;
        break;
      default:
        uint64_t v25 = 0;
        break;
    }
    unsigned int v26 = DeserialContext::deserializeUint32(a2);
    unsigned int v27 = DeserialContext::deserializeUint32(a2);
    unsigned int v28 = [MTLStructMemberInternal alloc];
    uint64_t v29 = [(MTLStructMemberInternal *)v28 initWithName:v18 offset:v42 dataType:v21 pixelFormat:v22 aluType:v23 indirectArgumentIndex:v41 render_target:v26 raster_order_group:v27 details:v25];
    *(void *)&v39[8 * v17] = v29;
    if (v24) {

    }
    ++v17;
  }
  while (v40 != v17);
  int v30 = LOBYTE(v44[0]);
  char v13 = v33;
  *v34 |= LOBYTE(v44[0]);
  [(MTLStructTypeInternal *)v13 setMembers:v39 count:v40];
  [(MTLStructTypeInternal *)v13 setIsIndirectArgumentBuffer:v30 != 0];
  uint64_t v11 = v35;
LABEL_20:
  return v13;
}

uint64_t DeserialContext::deserializeUint32(DeserialContext *this)
{
  unint64_t v1 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  BOOL v4 = v1 >= v2;
  BOOL v5 = v1 == v2;
  unint64_t v3 = v1 - v2;
  if (!v5 && v4)
  {
    BOOL v4 = v3 >= 3;
    BOOL v5 = v3 == 3;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  if (v5 || !v4) {
    abort();
  }
  uint64_t v6 = *(unsigned int *)(*(void *)this + v2);
  *((void *)this + 2) = v2 + 4;
  return v6;
}

uint64_t DeserialContext::stringFromSerializedData(DeserialContext *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v1 = *((void *)this + 2);
  size_t v3 = v2 - v1;
  if (v2 <= v1 || (BOOL v5 = (const char *)(*(void *)this + v1), v6 = strnlen(v5, v3), v6 == v3)) {
    abort();
  }
  size_t v7 = v6;
  uint64_t result = [NSString stringWithCString:v5 encoding:4];
  *((void *)this + 2) += v7 + 1;
  return result;
}

uint64_t AirReflection::Node::node_as_StructTypeInfo(AirReflection::Node *this)
{
  unint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524289) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  size_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *unsigned int v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_182708984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ContextStack>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<ContextStack>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = *a2;
  unint64_t v9 = *(void *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  *(unsigned char *)(v9 + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t v9 = v8;
  uint64_t result = std::unordered_map<unsigned long,MTLStructTypeInternal *>::unordered_map(v9 + 16, (uint64_t)(a2 + 2));
  ++a1[5];
  return result;
}

uint64_t std::unordered_map<unsigned long,MTLStructTypeInternal *>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,MTLStructTypeInternal *> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_182708ABC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        int8x8_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t ReflectionDeserializeContext::getStructForId(ReflectionDeserializeContext *this, unint64_t a2)
{
  unint64_t v13 = a2;
  unint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = (void *)(v4 + 8 * (v3 / 0x49));
  if (v5 == v4) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *v6 + 56 * (v3 % 0x49);
  }
  while (1)
  {
    if (v5 == v4)
    {
      unint64_t v9 = 0;
    }
    else
    {
      unint64_t v8 = *((void *)this + 5) + *((void *)this + 4);
      unint64_t v9 = *(void *)(v4 + 8 * (v8 / 0x49)) + 56 * (v8 % 0x49);
    }
    if (v7 == v9) {
      return 0;
    }
    uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::find<unsigned long>((void *)(v7 + 16), &v13);
    if (v10) {
      break;
    }
    v7 += 56;
    if (v7 - *v6 == 4088)
    {
      unint64_t v11 = v6[1];
      ++v6;
      unint64_t v7 = v11;
    }
    uint64_t v4 = *((void *)this + 1);
    uint64_t v5 = *((void *)this + 2);
  }
  return v10[3];
}

void *std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::find<unsigned long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,MTLStructTypeInternal *>>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182709280(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ContextStack>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 73 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x49) {
    a2 = 1;
  }
  if (v5 < 0x92) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::deque<ContextStack>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  ContextStack::~ContextStack((ContextStack *)(*(void *)(a1[1] + 8 * (v2 / 0x49)) + 56 * (v2 % 0x49)));
  --a1[5];

  return std::deque<ContextStack>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

MTLArrayTypeInternal *newDataTypeDescriptionForIndirectArgument(void *a1, uint64_t *a2)
{
  uint64_t v4 = [a1 type];
  switch(v4)
  {
    case 19:
      if ((unint64_t)[a1 arrayLength] >= 2)
      {
        *a2 = 2;
        uint8x8_t v8 = [MTLArrayTypeInternal alloc];
        uint64_t v9 = [a1 arrayLength];
        uint64_t v10 = v8;
        uint64_t v11 = 78;
        goto LABEL_20;
      }
      BOOL v14 = 0;
      uint64_t v16 = 78;
      goto LABEL_35;
    case 20:
      if ((unint64_t)[a1 arrayLength] >= 2)
      {
        *a2 = 2;
        float v12 = [MTLArrayTypeInternal alloc];
        uint64_t v9 = [a1 arrayLength];
        uint64_t v10 = v12;
        uint64_t v11 = 79;
        goto LABEL_20;
      }
      BOOL v14 = 0;
      uint64_t v16 = 79;
      goto LABEL_35;
    case 21:
      if ((unint64_t)[a1 arrayLength] < 2)
      {
        BOOL v14 = 0;
        uint64_t v16 = 80;
        goto LABEL_35;
      }
      *a2 = 2;
      float v13 = [MTLArrayTypeInternal alloc];
      uint64_t v9 = [a1 arrayLength];
      uint64_t v10 = v13;
      uint64_t v11 = 80;
LABEL_20:
      BOOL v14 = [(MTLArrayTypeInternal *)v10 initWithArrayLength:v9 elementType:v11 stride:8 pixelFormat:0 aluType:0 details:0];
      [(MTLArrayTypeInternal *)v14 setArgumentIndexStride:1];
      return v14;
    case 22:
    case 23:
LABEL_37:
      abort();
    case 24:
    case 25:
    case 26:
    case 27:
      if ([a1 type] == 24)
      {
        uint64_t v5 = 115;
      }
      else if ([a1 type] == 25)
      {
        uint64_t v5 = 117;
      }
      else if ([a1 type] == 26)
      {
        uint64_t v5 = 118;
      }
      else
      {
        if ([a1 type] != 27) {
          goto LABEL_32;
        }
        uint64_t v5 = 116;
      }
      *a2 = v5;
LABEL_32:
      if ((unint64_t)[a1 arrayLength] < 2) {
        return 0;
      }
      BOOL v14 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayTypeInternal alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", [a1 arrayLength], *a2, 8, 0, 0, 0);
      [(MTLArrayTypeInternal *)v14 setArgumentIndexStride:1];
      uint64_t v16 = 2;
LABEL_35:
      *a2 = v16;
      return v14;
    default:
      switch(v4)
      {
        case 0:
          *a2 = 60;
          unint64_t v6 = (void *)[a1 dataTypeDescription];
          return (MTLArrayTypeInternal *)v6;
        case 2:
          BOOL v14 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:]([MTLTextureReferenceType alloc], "initWithDataType:textureType:access:isDepthTexture:", [a1 textureDataType], objc_msgSend(a1, "textureType"), objc_msgSend(a1, "access"), objc_msgSend(a1, "isDepthTexture"));
          if ((unint64_t)[a1 arrayLength] < 2)
          {
            uint64_t v16 = 58;
          }
          else
          {
            unint64_t v15 = -[MTLArrayTypeInternal initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayTypeInternal alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", [a1 arrayLength], 58, 8, 0, 0, v14);
            [(MTLArrayTypeInternal *)v15 setArgumentIndexStride:1];

            uint64_t v16 = 2;
            BOOL v14 = v15;
          }
          goto LABEL_35;
        case 3:
          if ((unint64_t)[a1 arrayLength] >= 2)
          {
            *a2 = 2;
            size_t v17 = [MTLArrayTypeInternal alloc];
            uint64_t v9 = [a1 arrayLength];
            uint64_t v10 = v17;
            uint64_t v11 = 59;
            goto LABEL_20;
          }
          BOOL v14 = 0;
          uint64_t v16 = 59;
          break;
        case 4:
          BOOL v14 = 0;
          *a2 = [a1 indirectConstantDataType];
          return v14;
        default:
          goto LABEL_37;
      }
      goto LABEL_35;
  }
}

MTLArrayTypeInternal *newArrayTypeFromSerializedContext(uint64_t a1, DeserialContext *a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v19 = DeserialContext::deserializeUint32(a2);
  unsigned int v10 = DeserialContext::deserializeUint32(a2);
  unsigned int v18 = DeserialContext::deserializeUint32(a2);
  unsigned int v11 = DeserialContext::deserializeUint32(a2);
  uint64_t v12 = DeserialContext::deserializeUint32(a2);
  uint64_t v13 = DeserialContext::deserializeUint32(a2);
  char v21 = 0;
  char v20 = 1;
  switch(v10)
  {
    case 0x39u:
      BOOL v14 = (void *)newArgumentTypeFromSerializedContext(a1, a2);
      BOOL v15 = 0;
      char v21 = 1;
      break;
    case 2u:
      BOOL v14 = (void *)newArrayTypeFromSerializedContext(a1, a2, &v21, a4, a5);
      BOOL v15 = 0;
      break;
    case 1u:
      BOOL v14 = (void *)structTypeFromSerializedContext(a1, a2, &v21, a4, &v20, a5);
      BOOL v15 = v20 == 0;
      break;
    default:
      BOOL v15 = 0;
      BOOL v14 = 0;
      break;
  }
  uint64_t v16 = [[MTLArrayTypeInternal alloc] initWithArrayLength:v19 elementType:v10 stride:v18 pixelFormat:v12 aluType:v13 details:v14];
  if (!v15) {

  }
  if (v11) {
    [(MTLArrayTypeInternal *)v16 setArgumentIndexStride:v11];
  }
  *a3 |= v21;
  -[MTLArrayTypeInternal setIsIndirectArgumentBuffer:](v16, "setIsIndirectArgumentBuffer:");
  return v16;
}

_DWORD *getStructIndirectArgumentIndexStride(_DWORD *result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  if (!*result) {
    return 0;
  }
  uint64_t v3 = (_DWORD *)((char *)&result[*result - 1 + 1] + result[*result - 1 + 1]);
  uint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  if (v5 < 0x15)
  {
    int v6 = 0;
    int StructIndirectArgumentIndexStride = 0;
    if (v5 < 5) {
      goto LABEL_25;
    }
  }
  else if (v4[10])
  {
    int v6 = *(int *)((char *)v3 + v4[10]);
  }
  else
  {
    int v6 = 0;
  }
  if (v4[2])
  {
    uint64_t v8 = a2 + 4 * *(unsigned int *)((char *)v3 + v4[2]);
    uint64_t v9 = (int *)AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)(v8 + 4 + *(unsigned int *)(v8 + 4)));
    unsigned int v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
      uint64_t v12 = (char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int StructIndirectArgumentIndexStride = getStructIndirectArgumentIndexStride(v12, a2);
  }
  else
  {
    if (v5 >= 0x13)
    {
      unsigned __int16 v13 = v4[9];
      if (v13)
      {
        uint64_t v14 = a2 + 4 * *(unsigned int *)((char *)v3 + v13);
        BOOL v15 = (AirReflection::Node *)(v14 + 4 + *(unsigned int *)(v14 + 4));
        uint64_t v16 = (unsigned __int16 *)((char *)v15 - *(int *)v15);
        if (*v16 < 5u)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          uint64_t v17 = v16[2];
          if (v17)
          {
            LODWORD(v17) = *(_DWORD *)((char *)v15 + v17);
            switch((int)v17)
            {
              case 262144:
                unsigned int v18 = (int *)AirReflection::Node::node_as_BufferArg(v15);
                goto LABEL_35;
              case 262145:
                unsigned int v22 = (int *)AirReflection::Node::node_as_SamplerArg(v15);
                goto LABEL_47;
              case 262146:
                unsigned int v22 = (int *)AirReflection::Node::node_as_TextureArg(v15);
                goto LABEL_47;
              case 262148:
                unsigned int v18 = (int *)AirReflection::Node::node_as_IndirectBufferArg(v15);
LABEL_35:
                unsigned int v23 = v18;
                int v24 = (unsigned __int16 *)((char *)v18 - *v18);
                unsigned int v25 = *v24;
                if (v25 < 0xB)
                {
                  int StructIndirectArgumentIndexStride = 1;
                  if (v25 < 9) {
                    goto LABEL_57;
                  }
                }
                else if (v24[5])
                {
                  int StructIndirectArgumentIndexStride = *(int *)((char *)v18 + v24[5]);
                }
                else
                {
                  int StructIndirectArgumentIndexStride = 1;
                }
                unsigned __int16 v28 = v24[4];
                goto LABEL_54;
              case 262149:
                unsigned int v22 = (int *)AirReflection::Node::node_as_IndirectConstantArg(v15);
                goto LABEL_47;
              case 262150:
                unsigned int v22 = (int *)AirReflection::Node::node_as_CommandBufferArg(v15);
                goto LABEL_47;
              case 262151:
                unsigned int v22 = (int *)AirReflection::Node::node_as_ComputePipelineStateArg(v15);
                goto LABEL_47;
              case 262152:
                unsigned int v22 = (int *)AirReflection::Node::node_as_RenderPipelineStateArg(v15);
                goto LABEL_47;
              case 262153:
                unsigned int v22 = (int *)AirReflection::Node::node_as_VisibleFunctionTableArg(v15);
                goto LABEL_47;
              case 262154:
                unsigned int v22 = (int *)AirReflection::Node::node_as_IntersectionFunctionTableArg(v15);
                goto LABEL_47;
              case 262155:
                unsigned int v22 = (int *)AirReflection::Node::node_as_InstanceAccelerationStructureArg(v15);
                goto LABEL_47;
              case 262156:
                unsigned int v22 = (int *)AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(v15);
                goto LABEL_47;
              case 262157:
                unsigned int v22 = (int *)AirReflection::Node::node_as_BufferStrideArg(v15);
LABEL_47:
                unsigned int v23 = v22;
                unsigned int v26 = (unsigned __int16 *)((char *)v22 - *v22);
                unsigned int v27 = *v26;
                if (v27 < 9)
                {
                  int StructIndirectArgumentIndexStride = 1;
                  if (v27 < 7) {
                    goto LABEL_57;
                  }
                }
                else if (v26[4])
                {
                  int StructIndirectArgumentIndexStride = *(int *)((char *)v22 + v26[4]);
                }
                else
                {
                  int StructIndirectArgumentIndexStride = 1;
                }
                unsigned __int16 v28 = v26[3];
LABEL_54:
                if (v28)
                {
                  int v6 = *(int *)((char *)v23 + v28);
                  goto LABEL_25;
                }
LABEL_57:
                int v6 = 0;
                break;
              default:
                goto LABEL_23;
            }
            goto LABEL_25;
          }
        }
LABEL_23:
        AirReflection::EnumNameNodeType(v17);
      }
    }
    int StructIndirectArgumentIndexStride = 0;
  }
LABEL_25:
  unsigned int v19 = (unsigned __int16 *)((char *)v3 - *v3);
  if (*v19 >= 0xBu)
  {
    uint64_t v20 = v19[5];
    if (v20)
    {
      unsigned int v21 = *(int *)((char *)v3 + v20);
      if (v21 <= 1) {
        unsigned int v21 = 1;
      }
      StructIndirectArgumentIndexStride *= v21;
    }
  }
  return (_DWORD *)(StructIndirectArgumentIndexStride + v6);
}

void std::deque<ContextStack>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unsigned int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unsigned int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unsigned int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF8uLL);
      std::__split_buffer<ContextStack *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF8uLL);
    std::__split_buffer<ContextStack *>::push_front((uint64_t)a1, &v54);
    unsigned __int16 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unsigned __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unsigned __int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unsigned int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  size_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF8uLL);
  std::__split_buffer<ContextStack *>::push_back(&v54, &v53);
  unsigned int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<ContextStack *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_18270A2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<ContextStack *>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(a1[4], v16);
      unsigned int v19 = &v17[8 * (v16 >> 2)];
      int64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  uint64_t v5 = (char *)a1[3];
  unint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    BOOL v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      uint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unsigned int v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      uint64_t v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      int64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      unint64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

uint64_t newArgumentTypeFromSerializedContext(int a1, DeserialContext *a2)
{
  deserializeArguments(a1, a2);
  uint64_t v2 = MEMORY[0];
  free(0);
  return v2;
}

void sub_18270AF28(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void __MTLCreateSystemDefaultDevice_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ([(id)_deviceArray count])
  {
    if ([(id)_deviceArray count] == 1)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = (id)[(id)_deviceArray objectAtIndex:0];
    }
    else
    {
      MTLReportFailure(0, "MTLCreateSystemDefaultDevice_block_invoke", 764, @"MTLCreateSystemDefaultDevice doesn't know what to do with more than one device", v10, v11, v12, v13, a9);
    }
  }
}

uint64_t MTLSerializePluginDataDictionary(void *a1, unsigned char *a2)
{
  if (![a1 count]) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  uint64_t v12 = 0;
  if (a2)
  {
    *a2 = [a1 count];
    unint64_t v4 = v10 + 3;
    uint64_t v5 = v10[3] + 1;
  }
  else
  {
    unint64_t v4 = &v12;
    uint64_t v5 = 1;
  }
  *unint64_t v4 = v5;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __MTLSerializePluginDataDictionary_block_invoke;
  v8[3] = &unk_1E5221E00;
  v8[4] = &v9;
  v8[5] = a2;
  [a1 enumerateKeysAndObjectsUsingBlock:v8];
  uint64_t v6 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_18270B388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSUInteger createLinkedFunctions(flatbuffers::FlatBufferBuilder *a1, MTLLinkedFunctions *a2)
{
  if ([(NSArray *)[(MTLLinkedFunctions *)a2 functions] count]) {
    int FunctionArray = createFunctionArray(a1, [(MTLLinkedFunctions *)a2 functions]);
  }
  else {
    int FunctionArray = 0;
  }
  if ([(NSArray *)[(MTLLinkedFunctions *)a2 privateFunctions] count]) {
    int v5 = createFunctionArray(a1, [(MTLLinkedFunctions *)a2 privateFunctions]);
  }
  else {
    int v5 = 0;
  }
  if ([(NSDictionary *)[(MTLLinkedFunctions *)a2 groups] count])
  {
    uint64_t v6 = [(MTLLinkedFunctions *)a2 groups];
    uint64_t v13 = 0;
    int64_t v14 = &v13;
    uint64_t v15 = 0x4812000000;
    unint64_t v16 = __Block_byref_object_copy__7;
    uint64_t v17 = __Block_byref_object_dispose__7;
    uint64_t v18 = &unk_1828FE28A;
    int64_t v20 = 0;
    uint64_t v21 = 0;
    __p = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = ___ZL12createGroupsRN11flatbuffers17FlatBufferBuilderEP12NSDictionaryIP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_block_invoke;
    v12[3] = &unk_1E52202E0;
    v12[4] = &v13;
    v12[5] = a1;
    [(NSDictionary *)v6 enumerateKeysAndObjectsUsingBlock:v12];
    uint64_t v7 = v14[7] - v14[6];
    if (v7) {
      BOOL v8 = (void *)v14[6];
    }
    else {
      BOOL v8 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionGroup>,std::allocator<flatbuffers::Offset<Air::FunctionGroup>>>(std::vector<flatbuffers::Offset<Air::FunctionGroup>> const&)::t;
    }
    int v9 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v8, v7 >> 2);
    _Block_object_dispose(&v13, 8);
    if (__p)
    {
      int64_t v20 = __p;
      operator delete(__p);
    }
  }
  else
  {
    int v9 = 0;
  }
  if ([(NSArray *)[(MTLLinkedFunctions *)a2 functions] count]
    || [(NSArray *)[(MTLLinkedFunctions *)a2 privateFunctions] count]
    || (NSUInteger result = [(NSDictionary *)[(MTLLinkedFunctions *)a2 groups] count]) != 0)
  {
    *((unsigned char *)a1 + 70) = 1;
    int v11 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, FunctionArray);
    flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v5);
    flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 8, v9);
    return flatbuffers::FlatBufferBuilder::EndTable(a1, v11);
  }
  return result;
}

void sub_18270B5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t createFunctionArray(flatbuffers::FlatBufferBuilder *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  __p = 0;
  long long v32 = 0;
  unint64_t v33 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v4 = [a2 countByEnumeratingWithState:&v27 objects:v34 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v28 != v5) {
          objc_enumerationMutation(a2);
        }
        uint64_t v7 = (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v27 + 1) + 8 * i), "name"), "UTF8String");
        size_t v8 = strlen(v7);
        int String = flatbuffers::FlatBufferBuilder::CreateString(a1, v7, v8);
        int v10 = String;
        int v11 = v32;
        if (v32 >= v33)
        {
          uint64_t v13 = (char *)__p;
          uint64_t v14 = (v32 - (unsigned char *)__p) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v33 - (unsigned char *)__p;
          if ((v33 - (unsigned char *)__p) >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v33, v17);
            uint64_t v13 = (char *)__p;
            int v11 = v32;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unsigned int v19 = &v18[4 * v14];
          *(_DWORD *)unsigned int v19 = v10;
          uint64_t v12 = v19 + 4;
          while (v11 != v13)
          {
            int v20 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          __p = v19;
          long long v32 = v12;
          unint64_t v33 = &v18[4 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_DWORD *)long long v32 = String;
          uint64_t v12 = v11 + 4;
        }
        long long v32 = v12;
      }
      uint64_t v4 = [a2 countByEnumeratingWithState:&v27 objects:v34 count:16];
    }
    while (v4);
    uint64_t v21 = __p;
    uint64_t v22 = v32;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v21 = 0;
  }
  uint64_t v23 = v22 - v21;
  if (v23) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  }
  uint64_t v25 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v24, v23 >> 2);
  if (__p)
  {
    long long v32 = (char *)__p;
    operator delete(__p);
  }
  return v25;
}

void sub_18270BB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>(uint64_t a1, int *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 5)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 6uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 6;
  int v5 = *a2;
  *(_WORD *)(v4 - 2) = *((_WORD *)a2 + 2);
  *(_DWORD *)(v4 - 6) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t _MTLCreateRenderPipelineScriptFromDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLRenderPipelineDescriptor *a2)
{
  if ([(MTLRenderPipelineDescriptor *)a2 objectFunction]
    || [(MTLRenderPipelineDescriptor *)a2 meshFunction])
  {
    return 0;
  }
  if ([(MTLRenderPipelineDescriptor *)a2 vertexFunction])
  {
    int v5 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLRenderPipelineDescriptor vertexFunction](a2, "vertexFunction"), "name"), "UTF8String");
    size_t v6 = strlen(v5);
    int String = flatbuffers::FlatBufferBuilder::CreateString(a1, v5, v6);
  }
  else
  {
    int String = 0;
  }
  if ([(MTLRenderPipelineDescriptor *)a2 fragmentFunction])
  {
    uint64_t v7 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction"), "name"), "UTF8String");
    size_t v8 = strlen(v7);
    int v78 = flatbuffers::FlatBufferBuilder::CreateString(a1, v7, v8);
  }
  else
  {
    int v78 = 0;
  }
  int v9 = a2 + 1;
  unint64_t maxVertexCallStackDepth = a2[6]._maxVertexCallStackDepth;
  if (!maxVertexCallStackDepth)
  {
    int v33 = 0;
    goto LABEL_93;
  }
  uint64_t v11 = *(void *)(maxVertexCallStackDepth + 16);
  if (!v11)
  {
    unint64_t v32 = 0;
    goto LABEL_52;
  }
  unint64_t v77 = a2[6]._maxVertexCallStackDepth;
  uint64_t v12 = 0;
  __p = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  do
  {
    uint64_t v13 = *(void **)(v11 + 8 + 8 * v12);
    *((unsigned char *)a1 + 70) = 1;
    int v14 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v13)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, [v13 format], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, [v13 offset], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 8, [v13 bufferIndex], 0);
      int v15 = flatbuffers::FlatBufferBuilder::EndTable(a1, v14);
      uint64_t v16 = v81;
      if (v81 < v82) {
        goto LABEL_24;
      }
      unint64_t v17 = (char *)__p;
      uint64_t v18 = (v81 - (unsigned char *)__p) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v82 - (unsigned char *)__p;
      if ((v82 - (unsigned char *)__p) >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v82, v21);
        unint64_t v17 = (char *)__p;
        uint64_t v16 = v81;
      }
      else
      {
        uint64_t v22 = 0;
      }
      long long v27 = &v22[4 * v18];
      *(_DWORD *)long long v27 = v15;
      uint64_t v23 = v27 + 4;
      while (v16 != v17)
      {
        int v28 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v27 - 1) = v28;
        v27 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, 0, 0);
      int v15 = flatbuffers::FlatBufferBuilder::EndTable(a1, v14);
      uint64_t v16 = v81;
      if (v81 < v82)
      {
LABEL_24:
        *(_DWORD *)uint64_t v16 = v15;
        uint64_t v23 = v16 + 4;
        goto LABEL_43;
      }
      unint64_t v17 = (char *)__p;
      uint64_t v24 = (v81 - (unsigned char *)__p) >> 2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v82 - (unsigned char *)__p;
      if ((v82 - (unsigned char *)__p) >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v25;
      }
      if (v21)
      {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v82, v21);
        unint64_t v17 = (char *)__p;
        uint64_t v16 = v81;
      }
      else
      {
        uint64_t v22 = 0;
      }
      long long v27 = &v22[4 * v24];
      *(_DWORD *)long long v27 = v15;
      uint64_t v23 = v27 + 4;
      while (v16 != v17)
      {
        int v29 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
    }
    __p = v27;
    uint64_t v81 = v23;
    uint64_t v82 = &v22[4 * v21];
    if (v17) {
      operator delete(v17);
    }
LABEL_43:
    uint64_t v81 = v23;
    ++v12;
  }
  while (v12 != 31);
  if (v23 == __p) {
    long long v30 = &flatbuffers::data<flatbuffers::Offset<Air::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Air::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Air::AttributeDescriptor>> const&)::t;
  }
  else {
    long long v30 = __p;
  }
  unsigned int v31 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v30, (v23 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v81 = (char *)__p;
    operator delete(__p);
  }
  unint64_t v32 = v31;
  unint64_t maxVertexCallStackDepth = v77;
LABEL_52:
  uint64_t v34 = *(void *)(maxVertexCallStackDepth + 8);
  if (!v34)
  {
    int v54 = 0;
    goto LABEL_92;
  }
  unint64_t v77 = v32;
  uint64_t v35 = 0;
  __p = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  while (2)
  {
    uint64_t v36 = *(void **)(v34 + 8 + 8 * v35);
    *((unsigned char *)a1 + 70) = 1;
    int v37 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v36)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, [v36 stepFunction], 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, [v36 stepRate], 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 8, [v36 stride], 0);
      int v38 = flatbuffers::FlatBufferBuilder::EndTable(a1, v37);
      uint64_t v39 = v81;
      if (v81 >= v82)
      {
        uint64_t v40 = (char *)__p;
        uint64_t v41 = (v81 - (unsigned char *)__p) >> 2;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v43 = v82 - (unsigned char *)__p;
        if ((v82 - (unsigned char *)__p) >> 1 > v42) {
          unint64_t v42 = v43 >> 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v82, v44);
          uint64_t v40 = (char *)__p;
          uint64_t v39 = v81;
        }
        else
        {
          uint64_t v45 = 0;
        }
        uint64_t v50 = &v45[4 * v41];
        *(_DWORD *)uint64_t v50 = v38;
        unint64_t v46 = v50 + 4;
        while (v39 != v40)
        {
          int v51 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v50 - 1) = v51;
          v50 -= 4;
        }
        goto LABEL_82;
      }
LABEL_65:
      *(_DWORD *)uint64_t v39 = v38;
      unint64_t v46 = v39 + 4;
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, 1, 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, 1, 1);
      int v38 = flatbuffers::FlatBufferBuilder::EndTable(a1, v37);
      uint64_t v39 = v81;
      if (v81 < v82) {
        goto LABEL_65;
      }
      uint64_t v40 = (char *)__p;
      uint64_t v47 = (v81 - (unsigned char *)__p) >> 2;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = v82 - (unsigned char *)__p;
      if ((v82 - (unsigned char *)__p) >> 1 > v48) {
        unint64_t v48 = v49 >> 1;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v48;
      }
      if (v44)
      {
        uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v82, v44);
        uint64_t v40 = (char *)__p;
        uint64_t v39 = v81;
      }
      else
      {
        uint64_t v45 = 0;
      }
      uint64_t v50 = &v45[4 * v47];
      *(_DWORD *)uint64_t v50 = v38;
      unint64_t v46 = v50 + 4;
      while (v39 != v40)
      {
        int v52 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v50 - 1) = v52;
        v50 -= 4;
      }
LABEL_82:
      __p = v50;
      uint64_t v81 = v46;
      uint64_t v82 = &v45[4 * v44];
      if (v40) {
        operator delete(v40);
      }
    }
    uint64_t v81 = v46;
    if (++v35 != 31) {
      continue;
    }
    break;
  }
  if (v46 == __p) {
    uint64_t v53 = &flatbuffers::data<flatbuffers::Offset<Air::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Air::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>> const&)::t;
  }
  else {
    uint64_t v53 = __p;
  }
  int v54 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v53, (v46 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    uint64_t v81 = (char *)__p;
    operator delete(__p);
  }
LABEL_92:
  *((unsigned char *)a1 + 70) = 1;
  int v55 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v32);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v54);
  int v33 = flatbuffers::FlatBufferBuilder::EndTable(a1, v55);
  int v9 = a2 + 1;
LABEL_93:
  int PipelineBufferDescriptorVector = createPipelineBufferDescriptorVector(a1, (const MTLPipelineBufferDescriptorArrayInternal *)v9[8]._fragmentPreloadedLibraries);
  BOOL v57 = 1;
  BOOL v58 = 1;
  if (![(MTLRenderPipelineDescriptor *)a2 supportAddingVertexBinaryFunctions]) {
    BOOL v58 = [(NSArray *)[(MTLLinkedFunctions *)[(MTLRenderPipelineDescriptor *)a2 vertexLinkedFunctions] binaryFunctions] count] != 0;
  }
  int LinkedFunctions = createLinkedFunctions(a1, [(MTLRenderPipelineDescriptor *)a2 vertexLinkedFunctions]);
  uint64_t v60 = [(MTLRenderPipelineDescriptor *)a2 maxVertexAmplificationCount];
  *((unsigned char *)a1 + 70) = 1;
  int v61 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v33);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 8, [(MTLRenderPipelineDescriptor *)a2 isRasterizationEnabled], 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 10, [(MTLRenderPipelineDescriptor *)a2 inputPrimitiveTopology], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 12, [(MTLRenderPipelineDescriptor *)a2 maxTessellationFactor], 16);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 14, [(MTLRenderPipelineDescriptor *)a2 isTessellationFactorScaleEnabled], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 16, [(MTLRenderPipelineDescriptor *)a2 tessellationFactorFormat], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 18, [(MTLRenderPipelineDescriptor *)a2 tessellationControlPointIndexType], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, [(MTLRenderPipelineDescriptor *)a2 tessellationFactorStepFunction], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 22, [(MTLRenderPipelineDescriptor *)a2 tessellationOutputWindingOrder], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 24, [(MTLRenderPipelineDescriptor *)a2 tessellationPartitionMode], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 26, v60, 1);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 30, PipelineBufferDescriptorVector);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 32, [(MTLRenderPipelineDescriptor *)a2 supportIndirectCommandBuffers], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 28, [(MTLRenderPipelineDescriptor *)a2 vertexAmplificationMode], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 36, [(MTLRenderPipelineDescriptor *)a2 textureWriteRoundingMode], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 38, [(MTLRenderPipelineDescriptor *)a2 clipDistanceEnableMask], 255);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 40, [(MTLRenderPipelineDescriptor *)a2 vertexDepthCompareClampMask], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 42, [(MTLRenderPipelineDescriptor *)a2 needsCustomBorderColorSamplers], 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 44, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 34, v58, 0);
  int v62 = flatbuffers::FlatBufferBuilder::EndTable(a1, v61);
  uint64_t v63 = [(MTLRenderPipelineDescriptor *)a2 _descriptorPrivate];
  int FragmentColorAttachmentDescriptorVector = createFragmentColorAttachmentDescriptorVector(a1, *(const MTLRenderPipelineColorAttachmentDescriptorArrayInternal **)v63);
  int v65 = createPipelineBufferDescriptorVector(a1, *(const MTLPipelineBufferDescriptorArrayInternal **)(v63 + 416));
  if (!*(unsigned char *)(v63 + 569)) {
    BOOL v57 = objc_msgSend((id)objc_msgSend(*(id *)(v63 + 496), "binaryFunctions"), "count") != 0;
  }
  int v66 = createLinkedFunctions(a1, *(MTLLinkedFunctions **)(v63 + 496));
  *((unsigned char *)a1 + 70) = 1;
  int v67 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 22, FragmentColorAttachmentDescriptorVector);
  int v68 = *(_DWORD *)(v63 + 72);
  if ((v68 - 1) >= 0x285) {
    LOWORD(v68) = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 24, (unsigned __int16)v68, 0);
  int v69 = *(_DWORD *)(v63 + 80);
  if ((v69 - 1) >= 0x285) {
    LOWORD(v69) = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 26, (unsigned __int16)v69, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 8, *(_DWORD *)(v63 + 224) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 10, (*(unsigned __int8 *)(v63 + 224) >> 1) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 6, (*(unsigned __int8 *)(v63 + 224) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 12, *(void *)(v63 + 184), 1);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 28, v65);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 30, *(unsigned __int8 *)(v63 + 152), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 14, *(void *)(v63 + 216), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 16, *(void *)(v63 + 192), -1);
  flatbuffers::FlatBufferBuilder::AddElement<float>(a1, 18, *(float *)(v63 + 200), 1.0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, (*(_DWORD *)(v63 + 224) >> 8) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 34, *(unsigned __int8 *)(v63 + 176), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 36, *(_DWORD *)(v63 + 224) >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 38, (*(_DWORD *)(v63 + 224) >> 27) & 0xF, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 40, (*(_DWORD *)(v63 + 224) >> 26) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 42, (*(_DWORD *)(v63 + 224) >> 23) & 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 44, (*(_DWORD *)(v63 + 224) >> 14) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 46, (*(unsigned __int8 *)(v63 + 224) >> 6) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 48, (*(void *)(v63 + 224) >> 7) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 52, *(_DWORD *)(v63 + 236), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 50, *(unsigned __int8 *)(v63 + 472), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 54, v66);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 32, v57, 0);
  int v70 = flatbuffers::FlatBufferBuilder::EndTable(a1, v67);
  *((unsigned char *)a1 + 70) = 1;
  int v71 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v78);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 8, v62);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v70);
  int v72 = flatbuffers::FlatBufferBuilder::EndTable(a1, v71);
  __p = (void *)0x300000000;
  LODWORD(v81) = 0;
  *((unsigned char *)a1 + 70) = 1;
  int v73 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v72);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(a1, 4, (uint64_t *)&__p);
  unsigned int v74 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 1);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 8, v74);
  unsigned int v75 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 6, v75);
  int v76 = flatbuffers::FlatBufferBuilder::EndTable(a1, v73);
  flatbuffers::FlatBufferBuilder::Finish(a1, v76, "AIRP", 0);
  return *((void *)a1 + 6) + **((unsigned int **)a1 + 6);
}

void sub_18270CA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = result;
  if (a3 != a4 || *((unsigned char *)result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

void *flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(void *result, uint64_t a2, int a3, int a4)
{
  int v5 = result;
  if (a3 != a4 || *((unsigned char *)result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t createPipelineBufferDescriptorVector(flatbuffers::FlatBufferBuilder *a1, const MTLPipelineBufferDescriptorArrayInternal *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  __p = 0;
  int v28 = 0;
  int v29 = 0;
  do
  {
    int v5 = a2->_descriptors[v4];
    *((unsigned char *)a1 + 70) = 1;
    uint64_t v6 = *((void *)a1 + 5);
    uint64_t v7 = *((void *)a1 + 6);
    uint64_t v8 = *((void *)a1 + 4);
    if (v5)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, [(MTLPipelineBufferDescriptorInternal *)v5 mutability], 0);
      int v9 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v8 - (unsigned __int16)v7 + (unsigned __int16)v6);
      int v10 = v28;
      if (v28 < v29) {
        goto LABEL_14;
      }
      uint64_t v11 = __p;
      uint64_t v12 = (v28 - __p) >> 2;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v29 - __p;
      if ((v29 - __p) >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v29, v15);
        uint64_t v11 = __p;
        int v10 = v28;
      }
      else
      {
        uint64_t v16 = 0;
      }
      unint64_t v21 = &v16[4 * v12];
      *(_DWORD *)unint64_t v21 = v9;
      unint64_t v17 = v21 + 4;
      while (v10 != v11)
      {
        int v22 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v22;
        v21 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, 0, 0);
      int v9 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v8 - (unsigned __int16)v7 + (unsigned __int16)v6);
      int v10 = v28;
      if (v28 < v29)
      {
LABEL_14:
        *(_DWORD *)int v10 = v9;
        unint64_t v17 = v10 + 4;
        goto LABEL_33;
      }
      uint64_t v11 = __p;
      uint64_t v18 = (v28 - __p) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v29 - __p;
      if ((v29 - __p) >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v19;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v29, v15);
        uint64_t v11 = __p;
        int v10 = v28;
      }
      else
      {
        uint64_t v16 = 0;
      }
      unint64_t v21 = &v16[4 * v18];
      *(_DWORD *)unint64_t v21 = v9;
      unint64_t v17 = v21 + 4;
      while (v10 != v11)
      {
        int v23 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v23;
        v21 -= 4;
      }
    }
    __p = v21;
    int v29 = &v16[4 * v15];
    if (v11) {
      operator delete(v11);
    }
LABEL_33:
    int v28 = v17;
    ++v4;
  }
  while (v4 != 31);
  if (v17 == __p) {
    uint64_t v24 = (char *)&flatbuffers::data<flatbuffers::Offset<Air::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Air::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Air::PipelineBufferDescriptor>> const&)::t;
  }
  else {
    uint64_t v24 = __p;
  }
  uint64_t v25 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v24, (v17 - __p) >> 2);
  if (__p) {
    operator delete(__p);
  }
  return v25;
}

void sub_18270CEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(void *result, uint64_t a2, int a3, int a4)
{
  int v5 = result;
  if (a3 != a4 || *((unsigned char *)result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, __int16 a2)
{
  uint64_t v4 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 0);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u) {
    unint64_t v5 = 4;
  }
  else {
    unint64_t v5 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  }
  *((_WORD *)this + 34) = v5;
  uint64_t v6 = *((void *)this + 6);
  if (v6 - *((void *)this + 7) < v5)
  {
    flatbuffers::vector_downward::reallocate(this, v5);
    uint64_t v6 = *((void *)this + 6);
  }
  *((void *)this + 6) = v6 - v5;
  bzero((void *)(v6 - v5), v5);
  unsigned __int16 v7 = v4 - a2;
  int v9 = (unsigned __int16 *)*((void *)this + 6);
  unint64_t v8 = *((void *)this + 7);
  v9[1] = v7;
  *int v9 = *((_WORD *)this + 34);
  uint64_t v10 = *((unsigned int *)this + 16);
  uint64_t v11 = (char *)(v8 - 8 * v10);
  if (v10)
  {
    uint64_t v12 = (_WORD *)(v8 - 8 * v10);
    do
    {
      *(unsigned __int16 *)((char *)v9 + (unsigned __int16)v12[2]) = v4 - *v12;
      v12 += 4;
    }
    while ((unint64_t)v12 < v8);
  }
  *((void *)this + 7) = v11;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  uint64_t v13 = *((void *)this + 4);
  unint64_t v14 = *((void *)this + 5);
  int v15 = v13 - v9 + v14;
  if (*((unsigned char *)this + 81) && v14 < (unint64_t)v11)
  {
    size_t v16 = *v9;
    uint64_t v17 = v14 + v13;
    uint64_t v18 = (unsigned int *)*((void *)this + 5);
    while (1)
    {
      uint64_t v19 = *v18;
      if (v16 == *(unsigned __int16 *)(v17 - v19) && !memcmp((const void *)(v17 - v19), v9, v16)) {
        break;
      }
      if (++v18 >= (unsigned int *)v11)
      {
        int v15 = v13 - v9 + v14;
        goto LABEL_17;
      }
    }
    int v9 = (unsigned __int16 *)((char *)v9 + (v13 - v9 + v14 - v4));
    *((void *)this + 6) = v9;
    int v15 = v19;
  }
LABEL_17:
  if (v15 == v13 + v14 - v9)
  {
    if ((unint64_t)((char *)v9 - v11) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      uint64_t v11 = (char *)*((void *)this + 7);
      uint64_t v13 = *((void *)this + 4);
      unint64_t v14 = *((void *)this + 5);
    }
    *(_DWORD *)uint64_t v11 = v15;
    *((void *)this + 7) = v11 + 4;
  }
  *(_DWORD *)(v14 + v13 - v4) = v15 - v4;
  *((unsigned char *)this + 70) = 0;
  return v4;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(uint64_t a1, char a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 == *(void *)(a1 + 56))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 1uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 1;
  *(unsigned char *)(v4 - 1) = a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  *((unsigned char *)a1 + 70) = 1;
  uint64_t v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 4uLL);
  if (a3)
  {
    uint64_t v7 = a2 - 4;
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = v8 - 1;
      flatbuffers::FlatBufferBuilder::PushElement<Air::FunctionConstantValue>(a1, *(_DWORD *)(v7 + 4 * v8));
      uint64_t v8 = v9;
    }
    while (v9);
  }
  *((unsigned char *)a1 + 70) = 0;

  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, a3);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<Air::FunctionConstantValue>(flatbuffers::FlatBufferBuilder *a1, int a2)
{
  flatbuffers::FlatBufferBuilder::Align(a1, 4uLL);
  int v4 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10) - a2 + 4;

  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v4);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(uint64_t a1, int a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = a2;
  uint64_t v5 = v4 - 4;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void *flatbuffers::vector_downward::fill(void *this, unint64_t a2)
{
  BOOL v3 = this;
  uint64_t v4 = this[6];
  if (v4 - this[7] >= a2)
  {
    this[6] = v4 - a2;
    if (!a2) {
      return this;
    }
  }
  else
  {
    this = (void *)flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a2);
    v3[6] -= a2;
  }
  uint64_t v5 = 0;
  do
    *(unsigned char *)(v3[6] + v5++) = 0;
  while (a2 != v5);
  return this;
}

void *flatbuffers::FlatBufferBuilder::Align(flatbuffers::FlatBufferBuilder *this, unint64_t a2)
{
  if (*((void *)this + 9) < a2) {
    *((void *)this + 9) = a2;
  }
  return flatbuffers::vector_downward::fill(this, (a2 - 1) & -(uint64_t)(*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10)));
}

void *flatbuffers::FlatBufferBuilder::PreAlign(flatbuffers::FlatBufferBuilder *this, uint64_t a2, unint64_t a3)
{
  if (*((void *)this + 9) < a3) {
    *((void *)this + 9) = a3;
  }
  return flatbuffers::vector_downward::fill(this, (a3 - 1) & (-a2 - (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10))));
}

uint64_t flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *((void *)this + 5);
  uint64_t v5 = v3 - *((void *)this + 6) + v4;
  uint64_t v6 = *((void *)this + 7) - v4;
  if (v3) {
    unint64_t v7 = v3 >> 1;
  }
  else {
    unint64_t v7 = *((void *)this + 2);
  }
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  uint64_t v8 = (*((void *)this + 3) + v3 + v7 - 1) & -*((void *)this + 3);
  *((void *)this + 4) = v8;
  uint64_t v9 = *(void *)this;
  if (v4)
  {
    if (!v9)
    {
      uint64_t v12 = &unk_1ECAC6B28;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, void, void))(*(void *)v9 + 32))(v9, v4, v3, v8, v5, v6);
  }
  else
  {
    if (!v9)
    {
      uint64_t v12 = &unk_1ECAC6B28;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8);
  }
  uint64_t v11 = result + *((void *)this + 4) - v5;
  *((void *)this + 5) = result;
  *((void *)this + 6) = v11;
  *((void *)this + 7) = result + v6;
  return result;
}

uint64_t _MTLCreateComputePipelineScriptFromDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLComputePipelineDescriptor *a2)
{
  uint64_t v4 = a2 + 1;
  insertLibraries = a2[2]._insertLibraries;
  if (!insertLibraries)
  {
    int v27 = 0;
    goto LABEL_84;
  }
  int v65 = a2 + 1;
  Class isa = insertLibraries[2].super.isa;
  if (!isa)
  {
    uint64_t v26 = 0;
    goto LABEL_43;
  }
  uint64_t v7 = 0;
  __p = 0;
  int v67 = 0;
  int v68 = 0;
  do
  {
    uint64_t v8 = (void *)*((void *)isa + v7 + 1);
    *((unsigned char *)a1 + 70) = 1;
    int v9 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v8)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, [v8 format], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, [v8 offset], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 8, [v8 bufferIndex], 0);
      int v10 = flatbuffers::FlatBufferBuilder::EndTable(a1, v9);
      uint64_t v11 = v67;
      if (v67 < v68) {
        goto LABEL_15;
      }
      uint64_t v12 = (char *)__p;
      uint64_t v13 = (v67 - (unsigned char *)__p) >> 2;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v68 - (unsigned char *)__p;
      if ((v68 - (unsigned char *)__p) >> 1 > v14) {
        unint64_t v14 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v68, v16);
        uint64_t v12 = (char *)__p;
        uint64_t v11 = v67;
      }
      else
      {
        uint64_t v17 = 0;
      }
      int v22 = &v17[4 * v13];
      *(_DWORD *)int v22 = v10;
      uint64_t v18 = v22 + 4;
      while (v11 != v12)
      {
        int v23 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, 0, 0);
      int v10 = flatbuffers::FlatBufferBuilder::EndTable(a1, v9);
      uint64_t v11 = v67;
      if (v67 < v68)
      {
LABEL_15:
        *(_DWORD *)uint64_t v11 = v10;
        uint64_t v18 = v11 + 4;
        goto LABEL_34;
      }
      uint64_t v12 = (char *)__p;
      uint64_t v19 = (v67 - (unsigned char *)__p) >> 2;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v21 = v68 - (unsigned char *)__p;
      if ((v68 - (unsigned char *)__p) >> 1 > v20) {
        unint64_t v20 = v21 >> 1;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v20;
      }
      if (v16)
      {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v68, v16);
        uint64_t v12 = (char *)__p;
        uint64_t v11 = v67;
      }
      else
      {
        uint64_t v17 = 0;
      }
      int v22 = &v17[4 * v19];
      *(_DWORD *)int v22 = v10;
      uint64_t v18 = v22 + 4;
      while (v11 != v12)
      {
        int v24 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v22 - 1) = v24;
        v22 -= 4;
      }
    }
    __p = v22;
    int v67 = v18;
    int v68 = &v17[4 * v16];
    if (v12) {
      operator delete(v12);
    }
LABEL_34:
    int v67 = v18;
    ++v7;
  }
  while (v7 != 31);
  if (v18 == __p) {
    uint64_t v25 = &flatbuffers::data<flatbuffers::Offset<Air::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Air::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Air::AttributeDescriptor>> const&)::t;
  }
  else {
    uint64_t v25 = __p;
  }
  LODWORD(v26) = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v25, (v18 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    int v67 = (char *)__p;
    operator delete(__p);
  }
  uint64_t v26 = v26;
LABEL_43:
  Class v28 = insertLibraries[1].super.isa;
  if (!v28)
  {
    int v48 = 0;
    goto LABEL_83;
  }
  uint64_t v64 = v26;
  uint64_t v29 = 0;
  __p = 0;
  int v67 = 0;
  int v68 = 0;
  while (2)
  {
    long long v30 = (void *)*((void *)v28 + v29 + 1);
    *((unsigned char *)a1 + 70) = 1;
    int v31 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v30)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, [v30 stepFunction], 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, [v30 stepRate], 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 8, [v30 stride], 0);
      int v32 = flatbuffers::FlatBufferBuilder::EndTable(a1, v31);
      int v33 = v67;
      if (v67 >= v68)
      {
        uint64_t v34 = (char *)__p;
        uint64_t v35 = (v67 - (unsigned char *)__p) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v68 - (unsigned char *)__p;
        if ((v68 - (unsigned char *)__p) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v68, v38);
          uint64_t v34 = (char *)__p;
          int v33 = v67;
        }
        else
        {
          uint64_t v39 = 0;
        }
        unint64_t v44 = &v39[4 * v35];
        *(_DWORD *)unint64_t v44 = v32;
        uint64_t v40 = v44 + 4;
        while (v33 != v34)
        {
          int v45 = *((_DWORD *)v33 - 1);
          v33 -= 4;
          *((_DWORD *)v44 - 1) = v45;
          v44 -= 4;
        }
        goto LABEL_73;
      }
LABEL_56:
      *(_DWORD *)int v33 = v32;
      uint64_t v40 = v33 + 4;
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, 1, 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, 1, 1);
      int v32 = flatbuffers::FlatBufferBuilder::EndTable(a1, v31);
      int v33 = v67;
      if (v67 < v68) {
        goto LABEL_56;
      }
      uint64_t v34 = (char *)__p;
      uint64_t v41 = (v67 - (unsigned char *)__p) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v43 = v68 - (unsigned char *)__p;
      if ((v68 - (unsigned char *)__p) >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v42;
      }
      if (v38)
      {
        uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v68, v38);
        uint64_t v34 = (char *)__p;
        int v33 = v67;
      }
      else
      {
        uint64_t v39 = 0;
      }
      unint64_t v44 = &v39[4 * v41];
      *(_DWORD *)unint64_t v44 = v32;
      uint64_t v40 = v44 + 4;
      while (v33 != v34)
      {
        int v46 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v44 - 1) = v46;
        v44 -= 4;
      }
LABEL_73:
      __p = v44;
      int v67 = v40;
      int v68 = &v39[4 * v38];
      if (v34) {
        operator delete(v34);
      }
    }
    int v67 = v40;
    if (++v29 != 31) {
      continue;
    }
    break;
  }
  if (v40 == __p) {
    uint64_t v47 = &flatbuffers::data<flatbuffers::Offset<Air::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Air::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Air::BufferLayoutDescriptor>> const&)::t;
  }
  else {
    uint64_t v47 = __p;
  }
  int v48 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v47, (v40 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    int v67 = (char *)__p;
    operator delete(__p);
  }
LABEL_83:
  *((unsigned char *)a1 + 70) = 1;
  int v49 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v26);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v48);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 8, [(NSArray *)insertLibraries indexBufferIndex], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 10, [(NSArray *)insertLibraries indexType], 0);
  int v27 = flatbuffers::FlatBufferBuilder::EndTable(a1, v49);
  uint64_t v4 = v65;
LABEL_84:
  int PipelineBufferDescriptorVector = createPipelineBufferDescriptorVector(a1, (const MTLPipelineBufferDescriptorArrayInternal *)v4[3].super.isa);
  BOOL v51 = 1;
  if (![(MTLComputePipelineDescriptor *)a2 supportAddingBinaryFunctions]) {
    BOOL v51 = [(NSArray *)[(MTLLinkedFunctions *)[(MTLComputePipelineDescriptor *)a2 linkedFunctions] binaryFunctions] count] != 0;
  }
  int LinkedFunctions = createLinkedFunctions(a1, [(MTLComputePipelineDescriptor *)a2 linkedFunctions]);
  uint64_t v53 = [(MTLComputePipelineDescriptor *)a2 maxCallStackDepth];
  *((unsigned char *)a1 + 70) = 1;
  int v54 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v27);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 8, v53, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, [(MTLComputePipelineDescriptor *)a2 threadGroupSizeIsMultipleOfThreadExecutionWidth], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, [(MTLComputePipelineDescriptor *)a2 maxTotalThreadsPerThreadgroup], 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 12, PipelineBufferDescriptorVector);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 14, [(MTLComputePipelineDescriptor *)a2 supportIndirectCommandBuffers], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 16, v51, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 18, [(MTLComputePipelineDescriptor *)a2 textureWriteRoundingMode], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, [(MTLComputePipelineDescriptor *)a2 needsCustomBorderColorSamplers], 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 22, LinkedFunctions);
  int v55 = flatbuffers::FlatBufferBuilder::EndTable(a1, v54);
  size_t v56 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLComputePipelineDescriptor computeFunction](a2, "computeFunction"), "name"), "UTF8String");
  size_t v57 = strlen(v56);
  int String = flatbuffers::FlatBufferBuilder::CreateString(a1, v56, v57);
  *((unsigned char *)a1 + 70) = 1;
  LODWORD(v56) = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v55);
  int v59 = flatbuffers::FlatBufferBuilder::EndTable(a1, (__int16)v56);
  __p = (void *)0x300000000;
  LODWORD(v67) = 0;
  *((unsigned char *)a1 + 70) = 1;
  LODWORD(v56) = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v59);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(a1, 4, (uint64_t *)&__p);
  unsigned int v60 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 8, v60);
  unsigned int v61 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 6, v61);
  int v62 = flatbuffers::FlatBufferBuilder::EndTable(a1, (__int16)v56);
  flatbuffers::FlatBufferBuilder::Finish(a1, v62, "AIRP", 0);
  return *((void *)a1 + 6) + **((unsigned int **)a1 + 6);
}

void sub_18270DF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  return (*((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
}

void *flatbuffers::vector_downward::push(void *this, const unsigned __int8 *__src, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = this;
    uint64_t v6 = this[6];
    if (v6 - this[7] < a3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, a3);
      uint64_t v6 = v5[6];
    }
    v5[6] = v6 - a3;
    return memcpy((void *)(v6 - a3), __src, a3);
  }
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, int a2, const char *a3, int a4)
{
  *((void *)this + 7) = *((void *)this + 5);
  uint64_t v8 = 4;
  if (a4) {
    uint64_t v8 = 8;
  }
  flatbuffers::FlatBufferBuilder::PreAlign(this, v8 + 4 * (a3 != 0), *((void *)this + 9));
  if (a3)
  {
    uint64_t v9 = *((void *)this + 6);
    if ((unint64_t)(v9 - *((void *)this + 7)) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      uint64_t v9 = *((void *)this + 6);
    }
    *((void *)this + 6) = v9 - 4;
    *(_DWORD *)(v9 - 4) = *(_DWORD *)a3;
  }
  flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
  uint64_t result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10) - a2 + 4);
  if (a4) {
    uint64_t result = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10));
  }
  *((unsigned char *)this + 71) = 1;
  return result;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(flatbuffers::FlatBufferBuilder *result, uint64_t a2, uint64_t *a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    uint64_t v6 = *((void *)v5 + 6);
    if ((unint64_t)(v6 - *((void *)v5 + 7)) <= 0xB)
    {
      flatbuffers::vector_downward::reallocate(v5, 0xCuLL);
      uint64_t v6 = *((void *)v5 + 6);
    }
    *((void *)v5 + 6) = v6 - 12;
    uint64_t v7 = *a3;
    *(_DWORD *)(v6 - 4) = *((_DWORD *)a3 + 2);
    *(void *)(v6 - 12) = v7;
    unsigned int v8 = *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10);
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v8);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>(uint64_t a1, uint64_t a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(v4 - 8) = a2;
  uint64_t v5 = v4 - 8;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void *flatbuffers::FlatBufferBuilder::AddElement<float>(void *result, uint64_t a2, float a3, float a4)
{
  uint64_t v5 = result;
  if (a3 != a4 || *((unsigned char *)result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<float>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

void flatbuffers::DefaultAllocator::deallocate(flatbuffers::DefaultAllocator *this, unsigned __int8 *a2)
{
  if (a2) {
    JUMPOUT(0x18530C120);
  }
}

void MTLResourceListChunkFreeEntries(MTLResourceListChunk *a1)
{
  if (a1->currentEntry)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      entries = a1->entries;
      _X9 = &entries[(v2 * 8) & 0xFFFFFFF8];
      __asm { PRFM            #4, [X9] }

      ++v3;
      ++v2;
    }
    while (v3 < a1->currentEntry);
  }
}

BOOL MTLReportFailureTypeEnabled(unint64_t a1)
{
  return MTLFailureTypeGetErrorModeType(a1) != 4;
}

uint64_t _MTLShouldRemapPresent()
{
  if (_MTLShouldRemapPresent_onceToken != -1) {
    dispatch_once(&_MTLShouldRemapPresent_onceToken, &__block_literal_global_21);
  }
  return (_MTLShouldRemapPresent_shouldRemapPresent != 0) & objc_opt_respondsToSelector();
}

void *MTLDispatchListAppendBlock(void *result, void **a2, const void *a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    unsigned int v6 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
    uint64_t result = _Block_copy(a3);
    *unsigned int v6 = 0;
    v6[1] = result;
    uint64_t v7 = *a2;
    if (*a2)
    {
      unsigned int v8 = a2;
    }
    else
    {
      uint64_t v7 = a2;
      unsigned int v8 = v5;
    }
    *uint64_t v7 = v6;
    *unsigned int v8 = v6;
  }
  return result;
}

void ___ZL16initFailureModesv_block_invoke()
{
  v19[1] = *MEMORY[0x1E4F143B8];
  BOOL v0 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v1 = operator new(0x40uLL);
  *(void *)uint64_t v1 = "ignore";
  v1[2] = 4;
  int v10 = v1 + 16;
  uint64_t v11 = (char *)(v1 + 16);
  *((void *)v1 + 2) = "assert";
  v1[6] = 6;
  *((void *)v1 + 4) = "nslog";
  v1[10] = 5;
  *((void *)v1 + 6) = "exception";
  v1[14] = 1;
  __p = v1;
  uint64_t v18 = @"METAL_ERROR_MODE";
  v19[0] = &unk_1ECB15108;
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  _CFXPreferencesRegisterDefaultValues();
  uint64_t v2 = getenv((const char *)[@"METAL_ERROR_MODE" UTF8String]);
  if (v2)
  {
    errorModes[0] = strtol(v2, 0, 0);
  }
  else
  {
    errorModes[0] = [v0 integerForKey:@"METAL_ERROR_MODE"];
    MTLGetEnvCase<MTLErrorModeType>("MTL_ERROR_MODE", errorModes, (const char ***)&__p);
  }
  unint64_t v16 = @"METAL_DEBUG_ERROR_MODE";
  unint64_t v3 = NSNumber;
  if (MTLValidationEnabled()) {
    uint64_t v4 = 6;
  }
  else {
    uint64_t v4 = 4;
  }
  uint64_t v17 = [v3 numberWithInt:v4];
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
  _CFXPreferencesRegisterDefaultValues();
  uint64_t v5 = getenv((const char *)[@"METAL_DEBUG_ERROR_MODE" UTF8String]);
  if (v5)
  {
    dword_1EB226A7C = strtol(v5, 0, 0);
  }
  else
  {
    dword_1EB226A7C = [v0 integerForKey:@"METAL_DEBUG_ERROR_MODE"];
    MTLGetEnvCase<MTLErrorModeType>("MTL_DEBUG_LAYER_ERROR_MODE", &dword_1EB226A7C, (const char ***)&__p);
  }
  unint64_t v14 = @"METAL_WARNING_MODE";
  uint64_t v15 = &unk_1ECB15120;
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v15 forKeys:&v14 count:1];
  _CFXPreferencesRegisterDefaultValues();
  unsigned int v6 = getenv((const char *)[@"METAL_WARNING_MODE" UTF8String]);
  if (v6)
  {
    dword_1EB226A80 = strtol(v6, 0, 0);
  }
  else
  {
    dword_1EB226A80 = [v0 integerForKey:@"METAL_WARNING_MODE"];
    MTLGetEnvCase<MTLErrorModeType>("MTL_DEBUG_LAYER_WARNING_MODE", &dword_1EB226A80, (const char ***)&__p);
  }
  uint64_t v12 = @"METAL_ERROR_CHECK_EXTENDED_MODE";
  uint64_t v13 = &unk_1ECB15120;
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  _CFXPreferencesRegisterDefaultValues();
  uint64_t v7 = getenv((const char *)[@"METAL_ERROR_CHECK_EXTENDED_MODE" UTF8String]);
  if (v7) {
    int v8 = strtol(v7, 0, 0);
  }
  else {
    int v8 = [v0 integerForKey:@"METAL_ERROR_CHECK_EXTENDED_MODE"];
  }
  dword_1EB226A84 = v8;
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
}

void sub_18270F2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MTLValidationEnabled()
{
  if (initWrapperType(void)::pred != -1) {
    dispatch_once(&initWrapperType(void)::pred, &__block_literal_global_1259);
  }
  return (wrapperType & 0xFFFFFFFB) == 1;
}

BOOL MTLGetEnvCase<MTLErrorModeType>(const char *a1, _DWORD *a2, const char ***a3)
{
  unsigned int v6 = getenv(a1);
  if (v6)
  {
    uint64_t v7 = *a3;
    int v8 = a3[1];
    while (1)
    {
      if (v7 == v8) {
        MTLGetEnvCase<MTLErrorModeType>(a1, a3, a3 + 1);
      }
      if (!strcmp(v6, *v7)) {
        break;
      }
      v7 += 2;
    }
    *a2 = *((_DWORD *)v7 + 2);
  }
  return v6 != 0;
}

void sub_18271095C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1020C404C310C12);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::destroy(a1, a2[1]);
    uint64_t v4 = a2[6];
    if (v4) {
      MEMORY[0x18530C120](v4, 0x1000C8077774924);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    MEMORY[0x18530C120](v2, 0x1000C8077774924);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void MTLConstantStorage::MTLConstantStorage(MTLConstantStorage *this, const void ***a2)
{
  unint64_t v3 = std::map<std::string,MTLConstantStorage::ConstantData>::map[abi:ne180100](this, a2);
  std::map<unsigned short,MTLConstantStorage::ConstantData>::map[abi:ne180100](v3 + 3, (uint64_t)(a2 + 3));
}

void sub_182710C84(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::map<std::string,MTLConstantStorage::ConstantData>::map[abi:ne180100](void *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
  std::map<std::string,MTLConstantStorage::ConstantData>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_182710CDC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::map<unsigned short,MTLConstantStorage::ConstantData>::map[abi:ne180100](void *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
  std::map<unsigned short,MTLConstantStorage::ConstantData>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__tree_node<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,void *> *,long>>>((uint64_t)a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_182710D34(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_182710EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

__CFString *MTLFunctionTypeString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7) {
    return @"Unknown";
  }
  else {
    return (__CFString *)*((void *)&off_1E5221760 + a1 - 1);
  }
}

void PipelineLibraryData::~PipelineLibraryData(PipelineLibraryData *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void MTLPipelineDataCache::~MTLPipelineDataCache(MTLPipelineDataCache *this)
{
  MTLPipelineDataCache::~MTLPipelineDataCache(this);

  JUMPOUT(0x18530C140);
}

{
  void *v2;
  void **v3;
  void **v4;

  *(void *)this = &unk_1ECAC5CF0;
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2) {
    munmap(v2, *((void *)this + 18));
  }
  free(*((void **)this + 7));
  unint64_t v3 = (void **)*((void *)this + 14);
  uint64_t v4 = (void **)*((void *)this + 15);
  if (v3 != v4)
  {
    do
    {
      free(v3[2]);
      id v3[2] = 0;
      v3 += 3;
    }
    while (v3 != v4);
    unint64_t v3 = (void **)*((void *)this + 14);
  }
  if (v3)
  {
    *((void *)this + 15) = v3;
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 64);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

BOOL MTLFailureTypeGetEnabled(unint64_t a1)
{
  return MTLFailureTypeGetErrorModeType(a1) != 4;
}

uint64_t MTLFailureTypeGetErrorModeType(unint64_t a1)
{
  if (initFailureModes(void)::pred != -1) {
    dispatch_once(&initFailureModes(void)::pred, &__block_literal_global_19);
  }
  if (a1 >= 5) {
    MTLFailureTypeGetErrorModeType_cold_1();
  }
  if (a1 == 4) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = a1;
  }
  return errorModes[v2];
}

void MTLPixelFormatGetInfoForFeatureSetQuery(id *this@<X0>, uint64_t a2@<X1>, int64x2_t *a3@<X8>)
{
  switch(a2)
  {
    case 1:
      a3->i64[0] = (uint64_t)"MTLPixelFormatA8Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v6 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v6 = MTLGPUFamilyMac1;
      }
      int v7 = MTLPixelFormatQuery::supportsFamily(this, v6);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v8 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v8 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v8)) {
        int v9 = 8;
      }
      else {
        int v9 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v10 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v10 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v10)) {
        int v11 = 16;
      }
      else {
        int v11 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v12 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v12 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v12)) {
        int v13 = 128;
      }
      else {
        int v13 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v14 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v14 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v14)) {
        int v15 = 256;
      }
      else {
        int v15 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v16 = 0x4000000;
      }
      else {
        int v16 = 0;
      }
      if (v7) {
        int v17 = -2041;
      }
      else {
        int v17 = -2043;
      }
      int v18 = v17 | v9 | v11 | v13;
      goto LABEL_69;
    case 10:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v19 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v20 = 0x2000000;
      }
      else {
        int v20 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v21 = 0x4000000;
      }
      else {
        int v21 = 0;
      }
      if (v19) {
        int v22 = 16974239;
      }
      else {
        int v22 = 197023;
      }
      int v23 = v22 | v20;
      goto LABEL_2511;
    case 11:
      int v24 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Unorm_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v24 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30800;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v25 = 2;
        }
        else {
          int v25 = 0;
        }
        int v741 = v25;
      }
      else
      {
        int v741 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v474 = 4;
        }
        else {
          int v474 = 0;
        }
        int v736 = v474;
      }
      else
      {
        int v736 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v556 = 8;
        }
        else {
          int v556 = 0;
        }
      }
      else
      {
        int v556 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v594 = 16;
        }
        else {
          int v594 = 0;
        }
      }
      else
      {
        int v594 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v616 = 128;
        }
        else {
          int v616 = 0;
        }
      }
      else
      {
        int v616 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v634 = 256;
        }
        else {
          int v634 = 0;
        }
      }
      else
      {
        int v634 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v649 = 0x1000000;
      }
      else {
        int v649 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v650 = 0x2000000;
      }
      else {
        int v650 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v651 = 0x4000000;
      }
      else {
        int v651 = 0;
      }
      int v23 = v24 | v741 | v736 | v556 | v594 | v616 | v634 | v649;
      int v21 = v650 | v651;
LABEL_2511:
      int v29 = v23 | v21;
      goto LABEL_2512;
    case 12:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Snorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v26 = MTLGPUFamilyApple2;
      }
      else {
        MTLGPUFamily v26 = MTLGPUFamilyMac1;
      }
      int v27 = MTLPixelFormatQuery::supportsFamily(this, v26);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v28 = MTLGPUFamilyApple1;
      }
      else {
        MTLGPUFamily v28 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v28)) {
        int v15 = 256;
      }
      else {
        int v15 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v16 = 0x4000000;
      }
      else {
        int v16 = 0;
      }
      if (v27) {
        int v18 = -1889;
      }
      else {
        int v18 = -2017;
      }
LABEL_69:
      int v29 = (v18 | v15) + v16 + 198656;
      goto LABEL_2512;
    case 13:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v29 = 69730579;
      }
      else {
        int v29 = 2621715;
      }
      goto LABEL_2512;
    case 14:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR8Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v29 = 68419859;
      }
      else {
        int v29 = 1310995;
      }
LABEL_2512:
      a3->i32[2] = v29;
      unint64_t v652 = 1;
      goto LABEL_2522;
    case 20:
      long long v30 = "MTLPixelFormatR16Unorm";
      goto LABEL_78;
    case 22:
      long long v30 = "MTLPixelFormatR16Snorm";
LABEL_78:
      a3->i64[0] = (uint64_t)v30;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v31 = MTLGPUFamilyApple4;
      }
      else {
        MTLGPUFamily v31 = MTLGPUFamilyMac1;
      }
      int v32 = MTLPixelFormatQuery::supportsFamily(this, v31);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v33 = 0x1000000;
      }
      else {
        int v33 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v34 = 0x2000000;
      }
      else {
        int v34 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v35 = 0x4000000;
      }
      else {
        int v35 = 0;
      }
      if (v32) {
        int v36 = -1633;
      }
      else {
        int v36 = -1761;
      }
      int v37 = v36 + v33 + 198656;
      int v38 = v34 | v35;
      goto LABEL_120;
    case 23:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR16Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v39 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v40 = 0x2000000;
      }
      else {
        int v40 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v38 = 0x4000000;
      }
      else {
        int v38 = 0;
      }
      if (v39) {
        int v41 = 19398931;
      }
      else {
        int v41 = 2621715;
      }
      goto LABEL_119;
    case 24:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR16Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v42 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v40 = 0x2000000;
      }
      else {
        int v40 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v38 = 0x4000000;
      }
      else {
        int v38 = 0;
      }
      BOOL v43 = v42 == 0;
      int v41 = 1310995;
      int v44 = 18088211;
      goto LABEL_117;
    case 25:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR16Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v45 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v40 = 0x2000000;
      }
      else {
        int v40 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v38 = 0x4000000;
      }
      else {
        int v38 = 0;
      }
      int v41 = 197023;
      BOOL v43 = v45 == 0;
      int v44 = 16974239;
LABEL_117:
      if (!v43) {
        int v41 = v44;
      }
LABEL_119:
      int v37 = v41 | v40;
LABEL_120:
      int v46 = v37 | v38;
      goto LABEL_121;
    case 26:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR16Bfloat";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v48 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8) | 0x30000;
      }
      else {
        int v48 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
          int v475 = 2;
        }
        else {
          int v475 = 0;
        }
      }
      else
      {
        int v475 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
          int v557 = 16;
        }
        else {
          int v557 = 0;
        }
      }
      else
      {
        int v557 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v46 = v48 | v475 | v557;
LABEL_121:
      a3->i32[2] = v46;
      int64x2_t v47 = vdupq_n_s64(2uLL);
      goto LABEL_2827;
    case 30:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v49 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v50 = 0x4000000;
      }
      else {
        int v50 = 0;
      }
      int v51 = 197023;
      BOOL v52 = v49 == 0;
      int v53 = 16974239;
      goto LABEL_164;
    case 31:
      int v54 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Unorm_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v54 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30800;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v55 = 2;
        }
        else {
          int v55 = 0;
        }
        int v742 = v55;
      }
      else
      {
        int v742 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v476 = 4;
        }
        else {
          int v476 = 0;
        }
      }
      else
      {
        int v476 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v558 = 8;
        }
        else {
          int v558 = 0;
        }
      }
      else
      {
        int v558 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v595 = 16;
        }
        else {
          int v595 = 0;
        }
      }
      else
      {
        int v595 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v617 = 128;
        }
        else {
          int v617 = 0;
        }
      }
      else
      {
        int v617 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v635 = 256;
        }
        else {
          int v635 = 0;
        }
      }
      else
      {
        int v635 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v653 = 0x1000000;
      }
      else {
        int v653 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v50 = 0x4000000;
      }
      else {
        int v50 = 0;
      }
      int v51 = v54 | v742 | v476 | v558 | v595 | v617 | v635 | v653;
      goto LABEL_2521;
    case 32:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Snorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v56 = MTLGPUFamilyApple2;
      }
      else {
        MTLGPUFamily v56 = MTLGPUFamilyMac1;
      }
      int v57 = MTLPixelFormatQuery::supportsFamily(this, v56);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v58 = MTLGPUFamilyApple1;
      }
      else {
        MTLGPUFamily v58 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v58)) {
        int v59 = 256;
      }
      else {
        int v59 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v60 = 0x1000000;
      }
      else {
        int v60 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v50 = 0x4000000;
      }
      else {
        int v50 = 0;
      }
      if (v57) {
        int v61 = -1889;
      }
      else {
        int v61 = -2017;
      }
      int v51 = (v61 | v59) + v60 + 198656;
      goto LABEL_2521;
    case 33:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v62 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v50 = 0x4000000;
      }
      else {
        int v50 = 0;
      }
      if (v62) {
        int v51 = 19398931;
      }
      else {
        int v51 = 2621715;
      }
      goto LABEL_2521;
    case 34:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG8Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v63 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v50 = 0x4000000;
      }
      else {
        int v50 = 0;
      }
      BOOL v52 = v63 == 0;
      int v51 = 1310995;
      int v53 = 18088211;
LABEL_164:
      if (!v52) {
        int v51 = v53;
      }
LABEL_2521:
      a3->i32[2] = v51 | v50;
      unint64_t v652 = 2;
LABEL_2522:
      a3[1] = vdupq_n_s64(v652);
      a3[2].i8[0] = v652;
      goto LABEL_2885;
    case 40:
      a3->i64[0] = (uint64_t)"MTLPixelFormatB5G6R5Unorm";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v64 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30000;
      }
      else {
        int v64 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v477 = 4;
        }
        else {
          int v477 = 0;
        }
      }
      else
      {
        int v477 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v559 = 8;
        }
        else {
          int v559 = 0;
        }
      }
      else
      {
        int v559 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v596 = 16;
        }
        else {
          int v596 = 0;
        }
      }
      else
      {
        int v596 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v618 = 128;
        }
        else {
          int v618 = 0;
        }
      }
      else
      {
        int v618 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v636 = 256;
        }
        else {
          int v636 = 0;
        }
      }
      else
      {
        int v636 = 0;
      }
      a3->i32[2] = v64 | v477 | v559 | v596 | v618 | v636;
      int64x2_t v434 = vdupq_n_s64(2uLL);
      goto LABEL_2369;
    case 41:
      int v65 = "MTLPixelFormatA1BGR5Unorm";
      goto LABEL_189;
    case 42:
      int v65 = "MTLPixelFormatABGR4Unorm";
      goto LABEL_189;
    case 43:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGR5A1Unorm";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v66 = MTLGPUFamilyApple1;
      }
      else {
        MTLGPUFamily v66 = MTLGPUFamilyMac1;
      }
      int v67 = MTLPixelFormatQuery::supportsFamily(this, v66);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v68 = MTLGPUFamilyApple1;
      }
      else {
        MTLGPUFamily v68 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v68)) {
        int v69 = 4;
      }
      else {
        int v69 = 0;
      }
      int v70 = 0;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v70 = 8;
        }
        else {
          int v70 = 0;
        }
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v71 = 16;
        }
        else {
          int v71 = 0;
        }
      }
      else
      {
        int v71 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v478 = 128;
        }
        else {
          int v478 = 0;
        }
      }
      else
      {
        int v478 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v560 = 256;
        }
        else {
          int v560 = 0;
        }
      }
      else
      {
        int v560 = 0;
      }
      int v78 = v69 | v67 | v70 | v71 | v478 | v560 | 0x30000;
      goto LABEL_2233;
    case 44:
      int v65 = "MTLPixelFormatBGRA4Unorm";
LABEL_189:
      a3->i64[0] = (uint64_t)v65;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v72 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30000;
      }
      else {
        int v72 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v73 = 4;
        }
        else {
          int v73 = 0;
        }
      }
      else
      {
        int v73 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v74 = 8;
        }
        else {
          int v74 = 0;
        }
      }
      else
      {
        int v74 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v75 = 16;
        }
        else {
          int v75 = 0;
        }
      }
      else
      {
        int v75 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v76 = 128;
        }
        else {
          int v76 = 0;
        }
      }
      else
      {
        int v76 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v77 = 256;
        }
        else {
          int v77 = 0;
        }
      }
      else
      {
        int v77 = 0;
      }
      int v78 = v72 | v73 | v74 | v75 | v76 | v77;
LABEL_2233:
      a3->i32[2] = v78;
      int64x2_t v424 = vdupq_n_s64(2uLL);
      goto LABEL_2883;
    case 53:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR32Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v79 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1637;
      }
      if (*this)
      {
        int v79 = [*this isMsaa32bSupported];
LABEL_1637:
        BOOL v479 = v79;
        goto LABEL_2629;
      }
      BOOL v479 = this[1] == (id)-1;
LABEL_2629:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v688 = 0x4000000;
      }
      else {
        int v688 = 0;
      }
      int v689 = 524307;
      goto LABEL_2638;
    case 54:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR32Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v80 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1639;
      }
      if (*this)
      {
        int v80 = [*this isMsaa32bSupported];
LABEL_1639:
        BOOL v479 = v80;
        goto LABEL_2634;
      }
      BOOL v479 = this[1] == (id)-1;
LABEL_2634:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v688 = 0x4000000;
      }
      else {
        int v688 = 0;
      }
      int v689 = 262163;
LABEL_2638:
      if (v479) {
        v689 |= 0x100u;
      }
      int v690 = v689 | v688;
      goto LABEL_2826;
    case 55:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v81 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1641;
      }
      if (*this)
      {
        int v81 = [*this isFloat32FilteringSupported];
LABEL_1641:
        BOOL v480 = v81;
        goto LABEL_2642;
      }
      BOOL v480 = this[1] == (id)-1;
LABEL_2642:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v691 = [*this isMsaa32bSupported];
        }
        else {
          int v691 = this[1] == (id)-1;
        }
      }
      else
      {
        int v691 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v691) {
        int v719 = 128;
      }
      else {
        int v719 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v720 = 0x4000000;
      }
      else {
        int v720 = 0;
      }
      if (v480) {
        int v721 = -1761;
      }
      else {
        int v721 = -1765;
      }
      int v690 = (v721 | v719) + v720 + 198656;
LABEL_2826:
      a3->i32[2] = v690;
      int64x2_t v47 = (int64x2_t)xmmword_1828E2220;
      goto LABEL_2827;
    case 60:
      uint64_t v82 = "MTLPixelFormatRG16Unorm";
      goto LABEL_229;
    case 62:
      uint64_t v82 = "MTLPixelFormatRG16Snorm";
LABEL_229:
      a3->i64[0] = (uint64_t)v82;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v83 = MTLGPUFamilyApple4;
      }
      else {
        MTLGPUFamily v83 = MTLGPUFamilyMac1;
      }
      int v84 = MTLPixelFormatQuery::supportsFamily(this, v83);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v85 = 0x1000000;
      }
      else {
        int v85 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v86 = 0x2000000;
      }
      else {
        int v86 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v87 = 0x4000000;
      }
      else {
        int v87 = 0;
      }
      if (v84) {
        int v88 = -1633;
      }
      else {
        int v88 = -1761;
      }
      int v89 = v88 + v85 + 198656;
      int v90 = v86 | v87;
      goto LABEL_271;
    case 63:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG16Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v91 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v92 = 0x2000000;
      }
      else {
        int v92 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v90 = 0x4000000;
      }
      else {
        int v90 = 0;
      }
      if (v91) {
        int v93 = 19398931;
      }
      else {
        int v93 = 2621715;
      }
      goto LABEL_270;
    case 64:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG16Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v94 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v92 = 0x2000000;
      }
      else {
        int v92 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v90 = 0x4000000;
      }
      else {
        int v90 = 0;
      }
      BOOL v95 = v94 == 0;
      int v93 = 1310995;
      int v96 = 18088211;
      goto LABEL_268;
    case 65:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG16Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v97 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v92 = 0x2000000;
      }
      else {
        int v92 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v90 = 0x4000000;
      }
      else {
        int v90 = 0;
      }
      int v93 = 197023;
      BOOL v95 = v97 == 0;
      int v96 = 16974239;
LABEL_268:
      if (!v95) {
        int v93 = v96;
      }
LABEL_270:
      int v89 = v93 | v92;
LABEL_271:
      int v98 = v89 | v90;
      goto LABEL_272;
    case 66:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG16Bfloat";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v100 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8) | 0x30000;
      }
      else {
        int v100 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
          int v481 = 2;
        }
        else {
          int v481 = 0;
        }
      }
      else
      {
        int v481 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
          int v561 = 16;
        }
        else {
          int v561 = 0;
        }
      }
      else
      {
        int v561 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v98 = v100 | v481 | v561;
LABEL_272:
      a3->i32[2] = v98;
      long long v99 = xmmword_1828E2220;
      goto LABEL_2864;
    case 70:
      size_t v101 = "MTLPixelFormatRGBA8Unorm";
      goto LABEL_316;
    case 71:
      unsigned int v102 = "MTLPixelFormatRGBA8Unorm_sRGB";
      goto LABEL_327;
    case 72:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA8Snorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v103 = MTLGPUFamilyApple2;
      }
      else {
        MTLGPUFamily v103 = MTLGPUFamilyMac1;
      }
      int v104 = MTLPixelFormatQuery::supportsFamily(this, v103);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v105 = MTLGPUFamilyApple1;
      }
      else {
        MTLGPUFamily v105 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v105)) {
        int v106 = 256;
      }
      else {
        int v106 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v107 = 0x1000000;
      }
      else {
        int v107 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v108 = 0x2000000;
      }
      else {
        int v108 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v109 = 0x4000000;
      }
      else {
        int v109 = 0;
      }
      if (v104) {
        int v110 = -1889;
      }
      else {
        int v110 = -2017;
      }
      int v111 = (v110 | v106) + v107 + 198656;
      int v112 = v108 | v109;
      goto LABEL_1388;
    case 73:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA8Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v113 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v114 = 0x2000000;
      }
      else {
        int v114 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v112 = 0x4000000;
      }
      else {
        int v112 = 0;
      }
      if (v113) {
        int v115 = 19398931;
      }
      else {
        int v115 = 2621715;
      }
      goto LABEL_325;
    case 74:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA8Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v116 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v114 = 0x2000000;
      }
      else {
        int v114 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v112 = 0x4000000;
      }
      else {
        int v112 = 0;
      }
      BOOL v117 = v116 == 0;
      int v115 = 1310995;
      int v118 = 18088211;
      goto LABEL_323;
    case 80:
      size_t v101 = "MTLPixelFormatBGRA8Unorm";
LABEL_316:
      a3->i64[0] = (uint64_t)v101;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v119 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v114 = 0x2000000;
      }
      else {
        int v114 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v112 = 0x4000000;
      }
      else {
        int v112 = 0;
      }
      int v115 = 197023;
      BOOL v117 = v119 == 0;
      int v118 = 16974239;
LABEL_323:
      if (!v117) {
        int v115 = v118;
      }
LABEL_325:
      int v111 = v115 | v114;
      goto LABEL_1388;
    case 81:
      unsigned int v102 = "MTLPixelFormatBGRA8Unorm_sRGB";
LABEL_327:
      a3->i64[0] = (uint64_t)v102;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v120 = 415;
        }
        else {
          int v120 = 413;
        }
        int v121 = v120 + 198656;
      }
      else
      {
        int v121 = 199069;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v411 = 0x1000000;
      }
      else {
        int v411 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v142 = 0x2000000;
      }
      else {
        int v142 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v143 = 0x4000000;
      }
      else {
        int v143 = 0;
      }
      int v111 = v121 | v411;
      goto LABEL_1276;
    case 84:
      size_t v122 = "MTLPixelFormatARGB8Unorm";
      goto LABEL_659;
    case 85:
      a3->i64[0] = (uint64_t)"MTLPixelFormatARGB8Unorm_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v123 = 415;
        }
        else {
          int v123 = 413;
        }
        int v124 = v123 + 198656;
      }
      else
      {
        int v124 = 199069;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      goto LABEL_1744;
    case 90:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A2Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      BOOL v125 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) == 0;
      uint64_t v126 = 2001;
      goto LABEL_371;
    case 91:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A2Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v127 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v127 = MTLGPUFamilyMac1;
      }
      int v128 = MTLPixelFormatQuery::supportsFamily(this, v127);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v129 = 0x1000000;
      }
      else {
        int v129 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v130 = 0x2000000;
      }
      else {
        int v130 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v131 = 0x4000000;
      }
      else {
        int v131 = 0;
      }
      if (v128) {
        int v111 = 2621715;
      }
      else {
        int v111 = 2621713;
      }
      int v132 = v129 | v130;
      goto LABEL_1387;
    case 92:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG11B10Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v133 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v133 = MTLGPUFamilyMac1;
      }
      int v134 = MTLPixelFormatQuery::supportsFamily(this, v133);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (v134) {
        int v135 = -1633;
      }
      else {
        int v135 = -1635;
      }
      int v136 = v135 + 198656;
      goto LABEL_2356;
    case 93:
      int v137 = 229381;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB9E5Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v137 = 229383;
        }
        else {
          int v137 = 229381;
        }
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v138 = 8;
        }
        else {
          int v138 = 0;
        }
      }
      else
      {
        int v138 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v482 = 16;
        }
        else {
          int v482 = 0;
        }
      }
      else
      {
        int v482 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v562 = 128;
        }
        else {
          int v562 = 0;
        }
      }
      else
      {
        int v562 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
          int v597 = 256;
        }
        else {
          int v597 = 0;
        }
      }
      else
      {
        int v597 = 0;
      }
      int v136 = v137 | v138 | v482 | v562 | v597;
LABEL_2356:
      a3->i32[2] = v136;
      int64x2_t v434 = (int64x2_t)xmmword_1828E2220;
      goto LABEL_2369;
    case 94:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGR10A2Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      BOOL v125 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) == 0;
      uint64_t v126 = 2002;
LABEL_371:
      if (v125) {
        MTLGPUFamily v139 = v126;
      }
      else {
        MTLGPUFamily v139 = MTLGPUFamilyApple3;
      }
      int v140 = MTLPixelFormatQuery::supportsFamily(this, v139);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v141 = 0x1000000;
      }
      else {
        int v141 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v142 = 0x2000000;
      }
      else {
        int v142 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v143 = 0x4000000;
      }
      else {
        int v143 = 0;
      }
      if (v140) {
        int v144 = -1633;
      }
      else {
        int v144 = -1635;
      }
      int v111 = v144 + v141 + 198656;
LABEL_1276:
      int v112 = v142 | v143;
      goto LABEL_1388;
    case 103:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG32Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v145 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1655;
      }
      if (*this)
      {
        int v145 = [*this isMsaa32bSupported];
LABEL_1655:
        BOOL v483 = v145;
        goto LABEL_2647;
      }
      BOOL v483 = this[1] == (id)-1;
LABEL_2647:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v692 = 0x4000000;
      }
      else {
        int v692 = 0;
      }
      int v693 = 537395219;
      goto LABEL_2656;
    case 104:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG32Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v146 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1657;
      }
      if (*this)
      {
        int v146 = [*this isMsaa32bSupported];
LABEL_1657:
        BOOL v483 = v146;
        goto LABEL_2652;
      }
      BOOL v483 = this[1] == (id)-1;
LABEL_2652:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v692 = 0x4000000;
      }
      else {
        int v692 = 0;
      }
      int v693 = 262163;
LABEL_2656:
      if (v483) {
        v693 |= 0x100u;
      }
      goto LABEL_2863;
    case 105:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v147 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1659;
      }
      if (*this)
      {
        int v147 = [*this isFloat32FilteringSupported];
LABEL_1659:
        BOOL v484 = v147;
        goto LABEL_2660;
      }
      BOOL v484 = this[1] == (id)-1;
LABEL_2660:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v694 = [*this isMsaa32bSupported];
        }
        else {
          int v694 = this[1] == (id)-1;
        }
      }
      else
      {
        int v694 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v694) {
        int v722 = 128;
      }
      else {
        int v722 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v723 = [*this isMsaa32bSupported];
        }
        else {
          int v723 = this[1] == (id)-1;
        }
      }
      else
      {
        int v723 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v723) {
        int v727 = 256;
      }
      else {
        int v727 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v692 = 0x4000000;
      }
      else {
        int v692 = 0;
      }
      if (v484) {
        int v728 = -2017;
      }
      else {
        int v728 = -2021;
      }
      int v693 = (v728 + 198656) | v722 | v727;
LABEL_2863:
      a3->i32[2] = v693 | v692;
      long long v99 = xmmword_1828E2210;
      goto LABEL_2864;
    case 110:
      v148 = "MTLPixelFormatRGBA16Unorm";
      goto LABEL_398;
    case 112:
      v148 = "MTLPixelFormatRGBA16Snorm";
LABEL_398:
      a3->i64[0] = (uint64_t)v148;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v149 = MTLGPUFamilyApple4;
      }
      else {
        MTLGPUFamily v149 = MTLGPUFamilyMac1;
      }
      int v150 = MTLPixelFormatQuery::supportsFamily(this, v149);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v151 = 0x1000000;
      }
      else {
        int v151 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v152 = 0x2000000;
      }
      else {
        int v152 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v153 = 0x4000000;
      }
      else {
        int v153 = 0;
      }
      if (v150) {
        int v154 = -1633;
      }
      else {
        int v154 = -1761;
      }
      int v155 = v154 + v151 + 198656;
      int v156 = v152 | v153;
      goto LABEL_440;
    case 113:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA16Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v157 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v158 = 0x2000000;
      }
      else {
        int v158 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v156 = 0x4000000;
      }
      else {
        int v156 = 0;
      }
      if (v157) {
        int v159 = 19398931;
      }
      else {
        int v159 = 2621715;
      }
      goto LABEL_439;
    case 114:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA16Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v160 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v158 = 0x2000000;
      }
      else {
        int v158 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v156 = 0x4000000;
      }
      else {
        int v156 = 0;
      }
      BOOL v161 = v160 == 0;
      int v159 = 1310995;
      int v162 = 18088211;
      goto LABEL_437;
    case 115:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA16Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v163 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v158 = 0x2000000;
      }
      else {
        int v158 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v156 = 0x4000000;
      }
      else {
        int v156 = 0;
      }
      int v159 = 197023;
      BOOL v161 = v163 == 0;
      int v162 = 16974239;
LABEL_437:
      if (!v161) {
        int v159 = v162;
      }
LABEL_439:
      int v155 = v159 | v158;
LABEL_440:
      int v164 = v155 | v156;
      goto LABEL_2243;
    case 116:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA16Bfloat";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v165 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8) | 0x30000;
      }
      else {
        int v165 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
          int v485 = 2;
        }
        else {
          int v485 = 0;
        }
      }
      else
      {
        int v485 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
          int v563 = 16;
        }
        else {
          int v563 = 0;
        }
      }
      else
      {
        int v563 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v164 = v165 | v485 | v563;
      goto LABEL_2243;
    case 123:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA32Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v166 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1666;
      }
      if (*this)
      {
        int v166 = [*this isMsaa32bSupported];
LABEL_1666:
        BOOL v486 = v166;
        goto LABEL_2665;
      }
      BOOL v486 = this[1] == (id)-1;
LABEL_2665:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v695 = 0x4000000;
      }
      else {
        int v695 = 0;
      }
      int v696 = 524307;
      goto LABEL_2674;
    case 124:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA32Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v167 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1668;
      }
      if (*this)
      {
        int v167 = [*this isMsaa32bSupported];
LABEL_1668:
        BOOL v486 = v167;
        goto LABEL_2670;
      }
      BOOL v486 = this[1] == (id)-1;
LABEL_2670:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v695 = 0x4000000;
      }
      else {
        int v695 = 0;
      }
      int v696 = 262163;
LABEL_2674:
      if (v486) {
        v696 |= 0x100u;
      }
      goto LABEL_2881;
    case 125:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBA32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v168 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1670;
      }
      if (*this)
      {
        int v168 = [*this isFloat32FilteringSupported];
LABEL_1670:
        BOOL v487 = v168;
        goto LABEL_2678;
      }
      BOOL v487 = this[1] == (id)-1;
LABEL_2678:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v697 = [*this isMsaa32bSupported];
        }
        else {
          int v697 = this[1] == (id)-1;
        }
      }
      else
      {
        int v697 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v697) {
        int v716 = 128;
      }
      else {
        int v716 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v724 = [*this isMsaa32bSupported];
        }
        else {
          int v724 = this[1] == (id)-1;
        }
      }
      else
      {
        int v724 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v724) {
        int v725 = 256;
      }
      else {
        int v725 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v695 = 0x4000000;
      }
      else {
        int v695 = 0;
      }
      BOOL v729 = !v487;
      int v730 = -2021;
      int v731 = -2017;
      goto LABEL_2878;
    case 130:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC1_RGBA";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v169 = [*this supportsBCTextureCompression];
        }
        else {
          int v169 = this[1] == (id)-1;
        }
      }
      else
      {
        int v169 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v698 = v169 | 0x430404;
      goto LABEL_2686;
    case 131:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC1_RGBA_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v170 = [*this supportsBCTextureCompression];
        }
        else {
          int v170 = this[1] == (id)-1;
        }
      }
      else
      {
        int v170 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v698 = v170 | 0x430C04;
LABEL_2686:
      a3->i32[2] = v698;
      long long v184 = xmmword_1828E2200;
      goto LABEL_2769;
    case 132:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC2_RGBA";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v171 = [*this supportsBCTextureCompression];
        }
        else {
          int v171 = this[1] == (id)-1;
        }
      }
      else
      {
        int v171 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v699 = v171 | 0x430404;
      goto LABEL_2691;
    case 133:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC2_RGBA_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v172 = [*this supportsBCTextureCompression];
        }
        else {
          int v172 = this[1] == (id)-1;
        }
      }
      else
      {
        int v172 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v699 = v172 | 0x430C04;
LABEL_2691:
      a3->i32[2] = v699;
      long long v184 = xmmword_1828E21F0;
      goto LABEL_2769;
    case 134:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC3_RGBA";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v173 = [*this supportsBCTextureCompression];
        }
        else {
          int v173 = this[1] == (id)-1;
        }
      }
      else
      {
        int v173 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v700 = v173 | 0x430404;
      goto LABEL_2696;
    case 135:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC3_RGBA_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v174 = [*this supportsBCTextureCompression];
        }
        else {
          int v174 = this[1] == (id)-1;
        }
      }
      else
      {
        int v174 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v700 = v174 | 0x430C04;
LABEL_2696:
      a3->i32[2] = v700;
      long long v184 = xmmword_1828E21E0;
      goto LABEL_2769;
    case 140:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC4_RUnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v175 = [*this supportsBCTextureCompression];
        }
        else {
          int v175 = this[1] == (id)-1;
        }
      }
      else
      {
        int v175 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v701 = v175 | 0x430404;
      goto LABEL_2701;
    case 141:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC4_RSnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v176 = [*this supportsBCTextureCompression];
        }
        else {
          int v176 = this[1] == (id)-1;
        }
      }
      else
      {
        int v176 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v701 = v176 | 0x430C04;
LABEL_2701:
      a3->i32[2] = v701;
      long long v184 = xmmword_1828E21D0;
      goto LABEL_2769;
    case 142:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC5_RGUnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v177 = [*this supportsBCTextureCompression];
        }
        else {
          int v177 = this[1] == (id)-1;
        }
      }
      else
      {
        int v177 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v702 = v177 | 0x430404;
      goto LABEL_2706;
    case 143:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC5_RGSnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v178 = [*this supportsBCTextureCompression];
        }
        else {
          int v178 = this[1] == (id)-1;
        }
      }
      else
      {
        int v178 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v702 = v178 | 0x430C04;
LABEL_2706:
      a3->i32[2] = v702;
      long long v184 = xmmword_1828E21C0;
      goto LABEL_2769;
    case 150:
      v179 = "MTLPixelFormatBC6H_RGBFloat";
      goto LABEL_484;
    case 151:
      v179 = "MTLPixelFormatBC6H_RGBUfloat";
LABEL_484:
      a3->i64[0] = (uint64_t)v179;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v180 = [*this supportsBCTextureCompression];
        }
        else {
          int v180 = this[1] == (id)-1;
        }
      }
      else
      {
        int v180 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      a3->i32[2] = v180 | 0x430404;
      long long v184 = xmmword_1828E21B0;
      goto LABEL_2769;
    case 152:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC7_RGBAUnorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v181 = [*this supportsBCTextureCompression];
        }
        else {
          int v181 = this[1] == (id)-1;
        }
      }
      else
      {
        int v181 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v703 = v181 | 0x430404;
      goto LABEL_2711;
    case 153:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBC7_RGBAUnorm_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v182 = [*this supportsBCTextureCompression];
        }
        else {
          int v182 = this[1] == (id)-1;
        }
      }
      else
      {
        int v182 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      int v703 = v182 | 0x430C04;
LABEL_2711:
      a3->i32[2] = v703;
      long long v184 = xmmword_1828E21A0;
      goto LABEL_2769;
    case 160:
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGB_2BPP";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v183 = 205828;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_494;
      }
      goto LABEL_495;
    case 161:
      int v183 = 207876;
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGB_2BPP_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_495;
      }
LABEL_494:
      v183 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
LABEL_495:
      a3->i32[2] = v183;
      long long v184 = xmmword_1828E2190;
      goto LABEL_2787;
    case 162:
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGB_4BPP";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v185 = 205828;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_499;
      }
      goto LABEL_500;
    case 163:
      int v185 = 207876;
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGB_4BPP_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_500;
      }
LABEL_499:
      v185 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
LABEL_500:
      a3->i32[2] = v185;
      long long v184 = xmmword_1828E2180;
      goto LABEL_2769;
    case 164:
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGBA_2BPP";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v186 = 205828;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_504;
      }
      goto LABEL_505;
    case 165:
      int v186 = 207876;
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGBA_2BPP_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_505;
      }
LABEL_504:
      v186 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
LABEL_505:
      a3->i32[2] = v186;
      long long v184 = xmmword_1828E2170;
      goto LABEL_2787;
    case 166:
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGBA_4BPP";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v187 = 205828;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_509;
      }
      goto LABEL_510;
    case 167:
      int v187 = 207876;
      a3->i64[0] = (uint64_t)"MTLPixelFormatPVRTC_RGBA_4BPP_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_510;
      }
LABEL_509:
      v187 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
LABEL_510:
      a3->i32[2] = v187;
      long long v184 = xmmword_1828E2160;
      goto LABEL_2769;
    case 170:
      v188 = "MTLPixelFormatEAC_R11Unorm";
      goto LABEL_515;
    case 172:
      v188 = "MTLPixelFormatEAC_R11Snorm";
LABEL_515:
      a3->i64[0] = (uint64_t)v188;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v189 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v189 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      }
      a3->i32[2] = v189;
      long long v184 = xmmword_1828E2150;
      goto LABEL_2769;
    case 174:
      v190 = "MTLPixelFormatEAC_RG11Unorm";
      goto LABEL_520;
    case 176:
      v190 = "MTLPixelFormatEAC_RG11Snorm";
LABEL_520:
      a3->i64[0] = (uint64_t)v190;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v191 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v191 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      }
      a3->i32[2] = v191;
      long long v184 = xmmword_1828E2140;
      goto LABEL_2769;
    case 178:
      a3->i64[0] = (uint64_t)"MTLPixelFormatEAC_RGBA8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v192 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v192 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      }
      a3->i32[2] = v192;
      goto LABEL_1685;
    case 179:
      a3->i64[0] = (uint64_t)"MTLPixelFormatEAC_RGBA8_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v193 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30C04;
      }
      else {
        int v193 = 199684;
      }
      a3->i32[2] = v193;
LABEL_1685:
      long long v184 = xmmword_1828E2130;
      goto LABEL_2769;
    case 180:
      a3->i64[0] = (uint64_t)"MTLPixelFormatETC2_RGB8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v194 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v194 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      }
      a3->i32[2] = v194;
      goto LABEL_1688;
    case 181:
      a3->i64[0] = (uint64_t)"MTLPixelFormatETC2_RGB8_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v195 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30C04;
      }
      else {
        int v195 = 199684;
      }
      a3->i32[2] = v195;
LABEL_1688:
      long long v184 = xmmword_1828E2120;
      goto LABEL_2769;
    case 182:
      a3->i64[0] = (uint64_t)"MTLPixelFormatETC2_RGB8A1";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v196 = 197636;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v196 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30404;
      }
      a3->i32[2] = v196;
      goto LABEL_1691;
    case 183:
      a3->i64[0] = (uint64_t)"MTLPixelFormatETC2_RGB8A1_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v197 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30C04;
      }
      else {
        int v197 = 199684;
      }
      a3->i32[2] = v197;
LABEL_1691:
      long long v184 = xmmword_1828E2110;
      goto LABEL_2769;
    case 185:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_4x2_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v198 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v198 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v198 = this[1] == (id)-1;
      }
      int v672 = v198 | 0x31C04;
      goto LABEL_2765;
    case 186:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_4x4_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v199 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v199 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v199 = this[1] == (id)-1;
      }
      int v673 = v199 | 0x31C04;
      goto LABEL_2768;
    case 187:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_5x4_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v200 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v200 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v200 = this[1] == (id)-1;
      }
      int v674 = v200 | 0x31C04;
      goto LABEL_2774;
    case 188:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_5x5_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v201 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v201 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v201 = this[1] == (id)-1;
      }
      int v675 = v201 | 0x31C04;
      goto LABEL_2777;
    case 189:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_6x5_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v202 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v202 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v202 = this[1] == (id)-1;
      }
      int v676 = v202 | 0x31C04;
      goto LABEL_2780;
    case 190:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_6x6_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v203 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v203 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v203 = this[1] == (id)-1;
      }
      int v677 = v203 | 0x31C04;
      goto LABEL_2783;
    case 191:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_8x4_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v204 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v204 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v204 = this[1] == (id)-1;
      }
      int v678 = v204 | 0x31C04;
      goto LABEL_2786;
    case 192:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_8x5_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v205 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v205 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v205 = this[1] == (id)-1;
      }
      int v679 = v205 | 0x31C04;
      goto LABEL_2790;
    case 193:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_8x6_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v206 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v206 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v206 = this[1] == (id)-1;
      }
      int v680 = v206 | 0x31C04;
      goto LABEL_2793;
    case 194:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_8x8_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v207 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v207 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v207 = this[1] == (id)-1;
      }
      int v681 = v207 | 0x31C04;
      goto LABEL_2796;
    case 195:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_10x5_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v208 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v208 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v208 = this[1] == (id)-1;
      }
      int v682 = v208 | 0x31C04;
      goto LABEL_2799;
    case 196:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_10x6_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v209 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v209 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v209 = this[1] == (id)-1;
      }
      int v683 = v209 | 0x31C04;
      goto LABEL_2802;
    case 197:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_10x8_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v210 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v210 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v210 = this[1] == (id)-1;
      }
      int v684 = v210 | 0x31C04;
      goto LABEL_2805;
    case 198:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_10x10_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v211 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v211 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v211 = this[1] == (id)-1;
      }
      int v685 = v211 | 0x31C04;
      goto LABEL_2808;
    case 199:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_12x10_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v212 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v212 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v212 = this[1] == (id)-1;
      }
      int v686 = v212 | 0x31C04;
      goto LABEL_2811;
    case 200:
      a3->i64[0] = (uint64_t)"MTLPixelFormatASTC_12x12_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v213 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v213 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v213 = this[1] == (id)-1;
      }
      int v687 = v213 | 0x31C04;
      goto LABEL_2814;
    case 203:
      v214 = "MTLPixelFormatASTC_4x2_LDR";
      goto LABEL_587;
    case 204:
      v215 = "MTLPixelFormatASTC_4x4_LDR";
      goto LABEL_590;
    case 205:
      v216 = "MTLPixelFormatASTC_5x4_LDR";
      goto LABEL_593;
    case 206:
      v217 = "MTLPixelFormatASTC_5x5_LDR";
      goto LABEL_596;
    case 207:
      v218 = "MTLPixelFormatASTC_6x5_LDR";
      goto LABEL_599;
    case 208:
      v219 = "MTLPixelFormatASTC_6x6_LDR";
      goto LABEL_602;
    case 209:
      v220 = "MTLPixelFormatASTC_8x4_LDR";
      goto LABEL_605;
    case 210:
      v221 = "MTLPixelFormatASTC_8x5_LDR";
      goto LABEL_608;
    case 211:
      v222 = "MTLPixelFormatASTC_8x6_LDR";
      goto LABEL_611;
    case 212:
      v223 = "MTLPixelFormatASTC_8x8_LDR";
      goto LABEL_614;
    case 213:
      v224 = "MTLPixelFormatASTC_10x5_LDR";
      goto LABEL_617;
    case 214:
      v225 = "MTLPixelFormatASTC_10x6_LDR";
      goto LABEL_620;
    case 215:
      v226 = "MTLPixelFormatASTC_10x8_LDR";
      goto LABEL_623;
    case 216:
      v227 = "MTLPixelFormatASTC_10x10_LDR";
      goto LABEL_626;
    case 217:
      v228 = "MTLPixelFormatASTC_12x10_LDR";
      goto LABEL_629;
    case 218:
      v229 = "MTLPixelFormatASTC_12x12_LDR";
      goto LABEL_632;
    case 221:
      v214 = "MTLPixelFormatASTC_4x2_HDR";
LABEL_587:
      a3->i64[0] = (uint64_t)v214;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v230 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v230 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v230 = this[1] == (id)-1;
      }
      int v672 = v230 | 0x31404;
LABEL_2765:
      a3->i32[2] = v672;
      long long v184 = xmmword_1828E20F0;
      int64x2_t v247 = (int64x2_t)xmmword_1828E2100;
      goto LABEL_2771;
    case 222:
      v215 = "MTLPixelFormatASTC_4x4_HDR";
LABEL_590:
      a3->i64[0] = (uint64_t)v215;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v231 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v231 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v231 = this[1] == (id)-1;
      }
      int v673 = v231 | 0x31404;
LABEL_2768:
      a3->i32[2] = v673;
      long long v184 = xmmword_1828E20E0;
LABEL_2769:
      unint64_t v718 = 4;
      goto LABEL_2770;
    case 223:
      v216 = "MTLPixelFormatASTC_5x4_HDR";
LABEL_593:
      a3->i64[0] = (uint64_t)v216;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v232 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v232 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v232 = this[1] == (id)-1;
      }
      int v674 = v232 | 0x31404;
LABEL_2774:
      a3->i32[2] = v674;
      long long v184 = xmmword_1828E20C0;
      int64x2_t v247 = (int64x2_t)xmmword_1828E20D0;
      goto LABEL_2771;
    case 224:
      v217 = "MTLPixelFormatASTC_5x5_HDR";
LABEL_596:
      a3->i64[0] = (uint64_t)v217;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v233 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v233 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v233 = this[1] == (id)-1;
      }
      int v675 = v233 | 0x31404;
LABEL_2777:
      a3->i32[2] = v675;
      long long v184 = xmmword_1828E20B0;
      unint64_t v718 = 5;
      goto LABEL_2770;
    case 225:
      v218 = "MTLPixelFormatASTC_6x5_HDR";
LABEL_599:
      a3->i64[0] = (uint64_t)v218;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v234 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v234 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v234 = this[1] == (id)-1;
      }
      int v676 = v234 | 0x31404;
LABEL_2780:
      a3->i32[2] = v676;
      long long v184 = xmmword_1828E2090;
      int64x2_t v247 = (int64x2_t)xmmword_1828E20A0;
      goto LABEL_2771;
    case 226:
      v219 = "MTLPixelFormatASTC_6x6_HDR";
LABEL_602:
      a3->i64[0] = (uint64_t)v219;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v235 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v235 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v235 = this[1] == (id)-1;
      }
      int v677 = v235 | 0x31404;
LABEL_2783:
      a3->i32[2] = v677;
      long long v184 = xmmword_1828E2080;
      unint64_t v718 = 6;
      goto LABEL_2770;
    case 227:
      v220 = "MTLPixelFormatASTC_8x4_HDR";
LABEL_605:
      a3->i64[0] = (uint64_t)v220;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v236 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v236 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v236 = this[1] == (id)-1;
      }
      int v678 = v236 | 0x31404;
LABEL_2786:
      a3->i32[2] = v678;
      long long v184 = xmmword_1828E2060;
LABEL_2787:
      int64x2_t v247 = (int64x2_t)xmmword_1828E2070;
      goto LABEL_2771;
    case 228:
      v221 = "MTLPixelFormatASTC_8x5_HDR";
LABEL_608:
      a3->i64[0] = (uint64_t)v221;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v237 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v237 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v237 = this[1] == (id)-1;
      }
      int v679 = v237 | 0x31404;
LABEL_2790:
      a3->i32[2] = v679;
      long long v184 = xmmword_1828E2040;
      int64x2_t v247 = (int64x2_t)xmmword_1828E2050;
      goto LABEL_2771;
    case 229:
      v222 = "MTLPixelFormatASTC_8x6_HDR";
LABEL_611:
      a3->i64[0] = (uint64_t)v222;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v238 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v238 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v238 = this[1] == (id)-1;
      }
      int v680 = v238 | 0x31404;
LABEL_2793:
      a3->i32[2] = v680;
      long long v184 = xmmword_1828E2020;
      int64x2_t v247 = (int64x2_t)xmmword_1828E2030;
      goto LABEL_2771;
    case 230:
      v223 = "MTLPixelFormatASTC_8x8_HDR";
LABEL_614:
      a3->i64[0] = (uint64_t)v223;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v239 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v239 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v239 = this[1] == (id)-1;
      }
      int v681 = v239 | 0x31404;
LABEL_2796:
      a3->i32[2] = v681;
      long long v184 = xmmword_1828E2010;
      unint64_t v718 = 8;
      goto LABEL_2770;
    case 231:
      v224 = "MTLPixelFormatASTC_10x5_HDR";
LABEL_617:
      a3->i64[0] = (uint64_t)v224;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v240 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v240 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v240 = this[1] == (id)-1;
      }
      int v682 = v240 | 0x31404;
LABEL_2799:
      a3->i32[2] = v682;
      long long v184 = xmmword_1828E1FF0;
      int64x2_t v247 = (int64x2_t)xmmword_1828E2000;
      goto LABEL_2771;
    case 232:
      v225 = "MTLPixelFormatASTC_10x6_HDR";
LABEL_620:
      a3->i64[0] = (uint64_t)v225;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v241 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v241 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v241 = this[1] == (id)-1;
      }
      int v683 = v241 | 0x31404;
LABEL_2802:
      a3->i32[2] = v683;
      long long v184 = xmmword_1828E1FD0;
      int64x2_t v247 = (int64x2_t)xmmword_1828E1FE0;
      goto LABEL_2771;
    case 233:
      v226 = "MTLPixelFormatASTC_10x8_HDR";
LABEL_623:
      a3->i64[0] = (uint64_t)v226;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v242 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v242 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v242 = this[1] == (id)-1;
      }
      int v684 = v242 | 0x31404;
LABEL_2805:
      a3->i32[2] = v684;
      long long v184 = xmmword_1828E1FB0;
      int64x2_t v247 = (int64x2_t)xmmword_1828E1FC0;
      goto LABEL_2771;
    case 234:
      v227 = "MTLPixelFormatASTC_10x10_HDR";
LABEL_626:
      a3->i64[0] = (uint64_t)v227;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v243 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v243 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v243 = this[1] == (id)-1;
      }
      int v685 = v243 | 0x31404;
LABEL_2808:
      a3->i32[2] = v685;
      long long v184 = xmmword_1828E1FA0;
      unint64_t v718 = 10;
      goto LABEL_2770;
    case 235:
      v228 = "MTLPixelFormatASTC_12x10_HDR";
LABEL_629:
      a3->i64[0] = (uint64_t)v228;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v244 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v244 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v244 = this[1] == (id)-1;
      }
      int v686 = v244 | 0x31404;
LABEL_2811:
      a3->i32[2] = v686;
      long long v184 = xmmword_1828E1F80;
      int64x2_t v247 = (int64x2_t)xmmword_1828E1F90;
      goto LABEL_2771;
    case 236:
      v229 = "MTLPixelFormatASTC_12x12_HDR";
LABEL_632:
      a3->i64[0] = (uint64_t)v229;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v245 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
      }
      else if (*this)
      {
        int v245 = [*this supportsASTCTextureCompression];
      }
      else
      {
        int v245 = this[1] == (id)-1;
      }
      int v687 = v245 | 0x31404;
LABEL_2814:
      a3->i32[2] = v687;
      long long v184 = xmmword_1828E1F70;
      unint64_t v718 = 12;
LABEL_2770:
      int64x2_t v247 = vdupq_n_s64(v718);
      goto LABEL_2771;
    case 240:
      v246 = "MTLPixelFormatGBGR422";
      goto LABEL_636;
    case 241:
      v246 = "MTLPixelFormatBGRG422";
LABEL_636:
      a3->i64[0] = (uint64_t)v246;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      a3->i32[2] = 214021;
      long long v184 = xmmword_1828E1E30;
      int64x2_t v247 = (int64x2_t)xmmword_1828D63C0;
LABEL_2771:
      a3[1] = (int64x2_t)v184;
      a3[2] = v247;
      a3[3].i64[0] = 1;
      goto LABEL_2885;
    case 250:
      a3->i64[0] = (uint64_t)"MTLPixelFormatDepth16Unorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v248 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v248 = MTLGPUFamilyMac1;
      }
      int v249 = MTLPixelFormatQuery::supportsFamily(this, v248);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v250 = 0;
      }
      else if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
      {
        int v250 = 512;
      }
      else
      {
        int v250 = 0;
      }
      if (v249) {
        int v488 = -1627;
      }
      else {
        int v488 = -1755;
      }
      int v461 = v488 + 198656;
      goto LABEL_1731;
    case 252:
      a3->i64[0] = (uint64_t)"MTLPixelFormatDepth32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v251 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1733;
      }
      if (*this)
      {
        int v251 = [*this isFloat32FilteringSupported];
LABEL_1733:
        BOOL v489 = v251;
        goto LABEL_2713;
      }
      BOOL v489 = this[1] == (id)-1;
LABEL_2713:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v704 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v704 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v704)) {
        int v705 = 128;
      }
      else {
        int v705 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      char v706 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v707 = 0;
      if ((v706 & 1) == 0)
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1)) {
          int v707 = 512;
        }
        else {
          int v707 = 0;
        }
      }
      if (v489) {
        int v708 = -1755;
      }
      else {
        int v708 = -1759;
      }
      a3->i32[2] = (v708 + 198656) | v707 | v705;
      int64x2_t v47 = (int64x2_t)xmmword_1828E1E30;
LABEL_2827:
      a3[1] = v47;
      char v622 = 1;
      goto LABEL_2884;
    case 253:
      a3->i64[0] = (uint64_t)"MTLPixelFormatStencil8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v252 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v252 = MTLGPUFamilyMac2;
      }
      int v253 = MTLPixelFormatQuery::supportsFamily(this, v252);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v254 = 0;
      }
      else if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
      {
        int v254 = 512;
      }
      else
      {
        int v254 = 0;
      }
      if (v253) {
        int v490 = 174;
      }
      else {
        int v490 = 46;
      }
      int v491 = v490 + 2621715;
      goto LABEL_2483;
    case 260:
      a3->i64[0] = (uint64_t)"MTLPixelFormatDepth32Float_Stencil8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v255 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1742;
      }
      if (*this)
      {
        int v255 = [*this isFloat32FilteringSupported];
LABEL_1742:
        BOOL v492 = v255;
        goto LABEL_2728;
      }
      BOOL v492 = this[1] == (id)-1;
LABEL_2728:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v709 = MTLGPUFamilyApple3;
      }
      else {
        MTLGPUFamily v709 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v709)) {
        int v710 = 128;
      }
      else {
        int v710 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v711 = MTLGPUFamilyApple1;
      }
      else {
        MTLGPUFamily v711 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v711)) {
        int v712 = 512;
      }
      else {
        int v712 = 0;
      }
      if (v492) {
        int v713 = -1691;
      }
      else {
        int v713 = -1695;
      }
      a3->i32[2] = (v713 | v710 | v712) + 8587264;
      long long v99 = xmmword_1828E1F60;
LABEL_2864:
      a3[1] = (int64x2_t)v99;
      char v622 = 2;
      goto LABEL_2884;
    case 261:
      int v256 = 11010369;
      a3->i64[0] = (uint64_t)"MTLPixelFormatX32_Stencil8";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if ((MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) & 1) == 0)
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1)) {
          int v256 = 11010881;
        }
        else {
          int v256 = 11010369;
        }
      }
      a3->i32[2] = v256;
      int64x2_t v47 = (int64x2_t)xmmword_1828E1F50;
      goto LABEL_2827;
    case 300:
      size_t v122 = "MTLPixelFormatRGBX8Unorm";
LABEL_659:
      a3->i64[0] = (uint64_t)v122;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v257 = 197023;
      goto LABEL_1389;
    case 301:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX8Unorm_sRGB";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v258 = 399;
        }
        else {
          int v258 = 397;
        }
        int v124 = v258 + 198656;
      }
      else
      {
        int v124 = 199053;
      }
LABEL_1744:
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      a3->i32[2] = v124;
      goto LABEL_1390;
    case 302:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX8Snorm";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v259 = 196623;
      }
      else
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1)) {
          int v493 = -2017;
        }
        else {
          int v493 = -2033;
        }
        int v259 = v493 + 198656;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v494 = MTLGPUFamilyApple2;
      }
      else {
        MTLGPUFamily v494 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v494)) {
        int v495 = 128;
      }
      else {
        int v495 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        MTLGPUFamily v496 = MTLGPUFamilyApple1;
      }
      else {
        MTLGPUFamily v496 = MTLGPUFamilyMac1;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, v496)) {
        int v112 = 256;
      }
      else {
        int v112 = 0;
      }
      int v111 = v259 | v495;
      goto LABEL_1388;
    case 303:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX8Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v257 = 2621699;
      goto LABEL_1389;
    case 304:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX8Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v257 = 1310979;
      goto LABEL_1389;
    case 313:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX16Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v164 = 2621699;
      goto LABEL_2243;
    case 314:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX16Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v164 = 1310979;
      goto LABEL_2243;
    case 315:
      v260 = "MTLPixelFormatRGBX16Float";
      goto LABEL_830;
    case 323:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX32Uint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v261 = [*this isMsaa32bSupported];
        }
        else {
          int v261 = this[1] == (id)-1;
        }
      }
      else
      {
        int v261 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v261) {
        int v714 = 524547;
      }
      else {
        int v714 = 524291;
      }
      goto LABEL_2882;
    case 324:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX32Sint";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v262 = [*this isMsaa32bSupported];
        }
        else {
          int v262 = this[1] == (id)-1;
        }
      }
      else
      {
        int v262 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v262) {
        int v715 = 240;
      }
      else {
        int v715 = -16;
      }
      int v714 = v715 + 262163;
      goto LABEL_2882;
    case 325:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGBX32Float";
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v263 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
        goto LABEL_1765;
      }
      if (*this)
      {
        int v263 = [*this isFloat32FilteringSupported];
LABEL_1765:
        BOOL v497 = v263;
        goto LABEL_2754;
      }
      BOOL v497 = this[1] == (id)-1;
LABEL_2754:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        int v716 = 0;
      }
      else if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1))
      {
        int v716 = 8;
      }
      else
      {
        int v716 = 0;
      }
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v717 = [*this isMsaa32bSupported];
        }
        else {
          int v717 = this[1] == (id)-1;
        }
      }
      else
      {
        int v717 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v717) {
        int v725 = 128;
      }
      else {
        int v725 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (*this) {
          int v726 = [*this isMsaa32bSupported];
        }
        else {
          int v726 = this[1] == (id)-1;
        }
      }
      else
      {
        int v726 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyMac1);
      }
      if (v726) {
        int v695 = 256;
      }
      else {
        int v695 = 0;
      }
      BOOL v729 = !v497;
      int v730 = -2029;
      int v731 = -2025;
LABEL_2878:
      if (!v729) {
        int v730 = v731;
      }
      int v696 = (v730 + 198656) | v716 | v725;
LABEL_2881:
      int v714 = v696 | v695;
LABEL_2882:
      a3->i32[2] = v714;
      int64x2_t v424 = (int64x2_t)xmmword_1828E2230;
LABEL_2883:
      a3[1] = v424;
      char v622 = 4;
LABEL_2884:
      a3[2].i8[0] = v622;
LABEL_2885:
      __int32 v732 = a3->i32[2];
      if (*this) {
        BOOL v733 = (a3->i32[2] & 1) == 0;
      }
      else {
        BOOL v733 = 1;
      }
      if (v733)
      {
        a3->i32[2] = v732 & 0xFFFFFC01;
        if ((v732 & 0x400) == 0)
        {
          a3[2].i8[1] = 0;
          a3[2].i64[1] = 0;
          a3[3].i64[0] = 0;
          if (v732) {
            return;
          }
          goto LABEL_2896;
        }
        if ((v732 & 1) == 0)
        {
LABEL_2896:
          bzero(a3, 0x38uLL);
          a3->i64[0] = (uint64_t)"MTLPixelFormatInvalid";
        }
      }
      else
      {
        if ((v732 & 0x400) == 0)
        {
          int v734 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
          int v735 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4);
          adjustPixelFormatForiOSDevice(a2, (uint64_t)a3, &a3[2].u64[1], a3[3].i64, &a3[2].i8[1], v734, v735);
          __int32 v732 = a3->i32[2];
        }
        if ((v732 & 1) == 0) {
          goto LABEL_2896;
        }
      }
      return;
    case 500:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_420_2P";
      int v264 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v264 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x830000;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1345;
      }
      v265 = this;
      MTLGPUFamily v266 = MTLGPUFamilyApple1;
      goto LABEL_741;
    case 501:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_1P";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v267 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30000;
      }
      else {
        int v267 = 196608;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1772;
      }
      v286 = this;
      MTLGPUFamily v287 = MTLGPUFamilyApple1;
      goto LABEL_1769;
    case 502:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_2P";
      int v268 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_688;
      }
      goto LABEL_689;
    case 503:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_444_2P";
      int v270 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_694;
      }
      goto LABEL_695;
    case 504:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v272 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30000;
      }
      else {
        int v272 = 196608;
      }
      goto LABEL_1785;
    case 505:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_420_2P";
      int v273 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_702;
      }
      goto LABEL_703;
    case 506:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_422_2P";
      int v275 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_708;
      }
      goto LABEL_709;
    case 507:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_2P";
      int v277 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_714;
      }
      goto LABEL_715;
    case 508:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_420_2P_PACKED";
      int v279 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_720;
      }
      goto LABEL_721;
    case 509:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_422_2P_PACKED";
      int v281 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_726;
      }
      goto LABEL_727;
    case 510:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_2P_PACKED";
      int v283 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v283 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x830000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v284 = 2;
        }
        else {
          int v284 = 0;
        }
      }
      else
      {
        int v284 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v508 = 4;
        }
        else {
          int v508 = 0;
        }
      }
      else
      {
        int v508 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v564 = 16;
        }
        else {
          int v564 = 0;
        }
      }
      else
      {
        int v564 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v598 = 0x1000000;
      }
      else {
        int v598 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v599 = 0x2000000;
      }
      else {
        int v599 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v600 = 0x4000000;
      }
      else {
        int v600 = 0;
      }
      int v568 = v283 | v284 | v508 | v564 | v598;
      int v569 = v599 | v600;
      goto LABEL_2255;
    case 520:
      int v264 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_420_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v264 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830800;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v265 = this;
        MTLGPUFamily v266 = MTLGPUFamilyApple2;
LABEL_741:
        if (MTLPixelFormatQuery::supportsFamily(v265, v266)) {
          int v285 = 4;
        }
        else {
          int v285 = 0;
        }
      }
      else
      {
LABEL_1345:
        int v285 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v419 = 8;
        }
        else {
          int v419 = 0;
        }
      }
      else
      {
        int v419 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v438 = 16;
        }
        else {
          int v438 = 0;
        }
      }
      else
      {
        int v438 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v455 = 0x1000000;
      }
      else {
        int v455 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v456 = 0x2000000;
      }
      else {
        int v456 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v457 = 0x4000000;
      }
      else {
        int v457 = 0;
      }
      a3->i32[2] = v264 | v285 | v419 | v438 | v455 | v456 | v457;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1F40;
      goto LABEL_2369;
    case 521:
      int v267 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_1P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v267 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30800;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v286 = this;
        MTLGPUFamily v287 = MTLGPUFamilyApple2;
LABEL_1769:
        if (MTLPixelFormatQuery::supportsFamily(v286, v287)) {
          int v498 = 4;
        }
        else {
          int v498 = 0;
        }
      }
      else
      {
LABEL_1772:
        int v498 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v499 = 8;
        }
        else {
          int v499 = 0;
        }
      }
      else
      {
        int v499 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v500 = 16;
        }
        else {
          int v500 = 0;
        }
      }
      else
      {
        int v500 = 0;
      }
      a3->i32[2] = v267 | v498 | v499 | v500;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1F30;
      goto LABEL_2369;
    case 522:
      int v268 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_688:
      }
        v268 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_689:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v269 = 4;
        }
        else {
          int v269 = 0;
        }
      }
      else
      {
        int v269 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v412 = 8;
        }
        else {
          int v412 = 0;
        }
      }
      else
      {
        int v412 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v426 = 16;
        }
        else {
          int v426 = 0;
        }
      }
      else
      {
        int v426 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v444 = 0x1000000;
      }
      else {
        int v444 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v445 = 0x2000000;
      }
      else {
        int v445 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v446 = 0x4000000;
      }
      else {
        int v446 = 0;
      }
      a3->i32[2] = v268 | v269 | v412 | v426 | v444 | v445 | v446;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1F20;
      goto LABEL_2369;
    case 523:
      int v270 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_444_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_694:
      }
        v270 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_695:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v271 = 2;
        }
        else {
          int v271 = 0;
        }
      }
      else
      {
        int v271 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v413 = 4;
        }
        else {
          int v413 = 0;
        }
      }
      else
      {
        int v413 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v427 = 8;
        }
        else {
          int v427 = 0;
        }
      }
      else
      {
        int v427 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v447 = 16;
        }
        else {
          int v447 = 0;
        }
      }
      else
      {
        int v447 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v463 = 0x1000000;
      }
      else {
        int v463 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v464 = 0x2000000;
      }
      else {
        int v464 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v465 = 0x4000000;
      }
      else {
        int v465 = 0;
      }
      a3->i32[2] = v270 | v271 | v413 | v427 | v447 | v463 | v464 | v465;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1F10;
      goto LABEL_2369;
    case 524:
      int v272 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v272 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30800;
      }
LABEL_1785:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v501 = 2;
        }
        else {
          int v501 = 0;
        }
      }
      else
      {
        int v501 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v502 = 4;
        }
        else {
          int v502 = 0;
        }
      }
      else
      {
        int v502 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v503 = 8;
        }
        else {
          int v503 = 0;
        }
      }
      else
      {
        int v503 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v504 = 16;
        }
        else {
          int v504 = 0;
        }
      }
      else
      {
        int v504 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v505 = 0x1000000;
      }
      else {
        int v505 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v506 = 0x2000000;
      }
      else {
        int v506 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v507 = 0x4000000;
      }
      else {
        int v507 = 0;
      }
      a3->i32[2] = v272 | v501 | v502 | v503 | v504 | v505 | v506 | v507;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1F00;
      goto LABEL_2369;
    case 525:
      int v273 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_420_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_702:
      }
        v273 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_703:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v274 = 4;
        }
        else {
          int v274 = 0;
        }
      }
      else
      {
        int v274 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v414 = 8;
        }
        else {
          int v414 = 0;
        }
      }
      else
      {
        int v414 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v428 = 16;
        }
        else {
          int v428 = 0;
        }
      }
      else
      {
        int v428 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v448 = 0x1000000;
      }
      else {
        int v448 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v449 = 0x2000000;
      }
      else {
        int v449 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v450 = 0x4000000;
      }
      else {
        int v450 = 0;
      }
      a3->i32[2] = v273 | v274 | v414 | v428 | v448 | v449 | v450;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1EF0;
      goto LABEL_2369;
    case 526:
      int v275 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_422_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_708:
      }
        v275 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_709:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v276 = 4;
        }
        else {
          int v276 = 0;
        }
      }
      else
      {
        int v276 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v415 = 8;
        }
        else {
          int v415 = 0;
        }
      }
      else
      {
        int v415 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v429 = 16;
        }
        else {
          int v429 = 0;
        }
      }
      else
      {
        int v429 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v451 = 0x1000000;
      }
      else {
        int v451 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v452 = 0x2000000;
      }
      else {
        int v452 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v453 = 0x4000000;
      }
      else {
        int v453 = 0;
      }
      a3->i32[2] = v275 | v276 | v415 | v429 | v451 | v452 | v453;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1EE0;
      goto LABEL_2369;
    case 527:
      int v277 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_2P_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_714:
      }
        v277 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2);
LABEL_715:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v278 = 2;
        }
        else {
          int v278 = 0;
        }
      }
      else
      {
        int v278 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v416 = 4;
        }
        else {
          int v416 = 0;
        }
      }
      else
      {
        int v416 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v430 = 8;
        }
        else {
          int v430 = 0;
        }
      }
      else
      {
        int v430 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v454 = 16;
        }
        else {
          int v454 = 0;
        }
      }
      else
      {
        int v454 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v466 = 0x1000000;
      }
      else {
        int v466 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v467 = 0x2000000;
      }
      else {
        int v467 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v468 = 0x4000000;
      }
      else {
        int v468 = 0;
      }
      a3->i32[2] = v277 | v278 | v416 | v430 | v454 | v466 | v467 | v468;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1ED0;
      goto LABEL_2369;
    case 528:
      int v279 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_420_2P_PACKED_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_720:
      }
        v279 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3);
LABEL_721:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v280 = 4;
        }
        else {
          int v280 = 0;
        }
      }
      else
      {
        int v280 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v417 = 16;
        }
        else {
          int v417 = 0;
        }
      }
      else
      {
        int v417 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v431 = 0x1000000;
      }
      else {
        int v431 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v432 = 0x2000000;
      }
      else {
        int v432 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v433 = 0x4000000;
      }
      else {
        int v433 = 0;
      }
      a3->i32[2] = v279 | v280 | v417 | v431 | v432 | v433;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1EC0;
      goto LABEL_2369;
    case 529:
      int v281 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_422_2P_PACKED_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_726:
      }
        v281 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3);
LABEL_727:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v282 = 4;
        }
        else {
          int v282 = 0;
        }
      }
      else
      {
        int v282 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v418 = 16;
        }
        else {
          int v418 = 0;
        }
      }
      else
      {
        int v418 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v435 = 0x1000000;
      }
      else {
        int v435 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v436 = 0x2000000;
      }
      else {
        int v436 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v437 = 0x4000000;
      }
      else {
        int v437 = 0;
      }
      a3->i32[2] = v281 | v282 | v418 | v435 | v436 | v437;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1EB0;
      goto LABEL_2369;
    case 530:
      int v288 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_2P_PACKED_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v288 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x830800;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v289 = 4;
        }
        else {
          int v289 = 0;
        }
      }
      else
      {
        int v289 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v509 = 16;
        }
        else {
          int v509 = 0;
        }
      }
      else
      {
        int v509 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v565 = 0x1000000;
      }
      else {
        int v565 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v566 = 0x2000000;
      }
      else {
        int v566 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v567 = 0x4000000;
      }
      else {
        int v567 = 0;
      }
      int v568 = v288 | v289 | v509 | v565;
      int v569 = v566 | v567;
LABEL_2255:
      a3->i32[2] = v568 | v569;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1EA0;
      goto LABEL_2369;
    case 540:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB8_420_2P";
      int v290 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v290 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x830000;
      }
      goto LABEL_1865;
    case 541:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB8_422_2P";
      int v290 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v290 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830000;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1870;
      }
      v291 = this;
      MTLGPUFamily v292 = MTLGPUFamilyApple2;
      goto LABEL_1867;
    case 542:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB8_444_2P";
      int v293 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v293 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v294 = 2;
        }
        else {
          int v294 = 0;
        }
      }
      else
      {
        int v294 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v510 = 4;
        }
        else {
          int v510 = 0;
        }
      }
      else
      {
        int v510 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v570 = 8;
        }
        else {
          int v570 = 0;
        }
      }
      else
      {
        int v570 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v601 = 16;
        }
        else {
          int v601 = 0;
        }
      }
      else
      {
        int v601 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v619 = 0x1000000;
      }
      else {
        int v619 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v620 = 0x2000000;
      }
      else {
        int v620 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v621 = 0x4000000;
      }
      else {
        int v621 = 0;
      }
      int v353 = v293 | v294 | v510 | v570 | v601 | v619;
      int v354 = v620 | v621;
      goto LABEL_2368;
    case 543:
      v295 = "MTLPixelFormatRGB10_420_2P";
      goto LABEL_784;
    case 544:
      v295 = "MTLPixelFormatRGB10_422_2P";
LABEL_784:
      a3->i64[0] = (uint64_t)v295;
      int v296 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v296 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v297 = 4;
        }
        else {
          int v297 = 0;
        }
      }
      else
      {
        int v297 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v336 = 8;
        }
        else {
          int v336 = 0;
        }
      }
      else
      {
        int v336 = 0;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1451;
      }
      v337 = this;
      MTLGPUFamily v338 = MTLGPUFamilyApple3;
      goto LABEL_969;
    case 545:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10_444_2P";
      int v298 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v298 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x830000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v299 = 2;
        }
        else {
          int v299 = 0;
        }
      }
      else
      {
        int v299 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v339 = 4;
        }
        else {
          int v339 = 0;
        }
      }
      else
      {
        int v339 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v340 = 8;
        }
        else {
          int v340 = 0;
        }
      }
      else
      {
        int v340 = 0;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_2264;
      }
      v341 = this;
      MTLGPUFamily v342 = MTLGPUFamilyApple3;
      goto LABEL_949;
    case 546:
      v300 = "MTLPixelFormatRGB10_420_2P_PACKED";
      goto LABEL_799;
    case 547:
      v300 = "MTLPixelFormatRGB10_422_2P_PACKED";
      goto LABEL_799;
    case 548:
      v300 = "MTLPixelFormatRGB10_444_2P_PACKED";
LABEL_799:
      a3->i64[0] = (uint64_t)v300;
      int v301 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v301 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x830000;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_850;
      }
      v302 = this;
      MTLGPUFamily v303 = MTLGPUFamilyApple3;
      goto LABEL_847;
    case 550:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_XR10";
      int v304 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_804;
      }
      goto LABEL_805;
    case 551:
      int v304 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_XR10_sRGB";
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_805;
      }
LABEL_804:
      v304 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3);
LABEL_805:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v305 = 2;
        }
        else {
          int v305 = 0;
        }
      }
      else
      {
        int v305 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v368 = 4;
        }
        else {
          int v368 = 0;
        }
      }
      else
      {
        int v368 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v369 = 8;
        }
        else {
          int v369 = 0;
        }
      }
      else
      {
        int v369 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v370 = 16;
        }
        else {
          int v370 = 0;
        }
      }
      else
      {
        int v370 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v371 = 0x1000000;
      }
      else {
        int v371 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v372 = 0x2000000;
      }
      else {
        int v372 = 0;
      }
      v373 = this;
      MTLGPUFamily v374 = MTLGPUFamilyApple8;
      goto LABEL_1583;
    case 552:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10_XR";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v306 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30000;
      }
      else {
        int v306 = 196608;
      }
      int v748 = v306;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v511 = 2;
        }
        else {
          int v511 = 0;
        }
        int v737 = v511;
      }
      else
      {
        int v737 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v571 = 4;
        }
        else {
          int v571 = 0;
        }
      }
      else
      {
        int v571 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v603 = 8;
        }
        else {
          int v603 = 0;
        }
      }
      else
      {
        int v603 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v623 = 16;
        }
        else {
          int v623 = 0;
        }
      }
      else
      {
        int v623 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v637 = 128;
        }
        else {
          int v637 = 0;
        }
      }
      else
      {
        int v637 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v654 = 256;
        }
        else {
          int v654 = 0;
        }
      }
      else
      {
        int v654 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v665 = 0x1000000;
      }
      else {
        int v665 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v666 = 0x2000000;
      }
      else {
        int v666 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v667 = 0x4000000;
      }
      else {
        int v667 = 0;
      }
      int v402 = v748 | v737 | v571 | v603 | v623 | v637 | v654 | v665;
      int v401 = v666 | v667;
      goto LABEL_2593;
    case 553:
      int v307 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10_XR_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v307 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30800;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v308 = 2;
        }
        else {
          int v308 = 0;
        }
        int v743 = v308;
      }
      else
      {
        int v743 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v512 = 4;
        }
        else {
          int v512 = 0;
        }
        int v738 = v512;
      }
      else
      {
        int v738 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v572 = 8;
        }
        else {
          int v572 = 0;
        }
      }
      else
      {
        int v572 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v604 = 16;
        }
        else {
          int v604 = 0;
        }
      }
      else
      {
        int v604 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v624 = 128;
        }
        else {
          int v624 = 0;
        }
      }
      else
      {
        int v624 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v638 = 256;
        }
        else {
          int v638 = 0;
        }
      }
      else
      {
        int v638 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v655 = 0x1000000;
      }
      else {
        int v655 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v656 = 0x2000000;
      }
      else {
        int v656 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v657 = 0x4000000;
      }
      else {
        int v657 = 0;
      }
      int v402 = v307 | v743 | v738 | v572 | v604 | v624 | v638 | v655;
      int v401 = v656 | v657;
      goto LABEL_2593;
    case 554:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGR10_XR";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v309 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30000;
      }
      else {
        int v309 = 196608;
      }
      int v749 = v309;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v513 = 2;
        }
        else {
          int v513 = 0;
        }
        int v739 = v513;
      }
      else
      {
        int v739 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v573 = 4;
        }
        else {
          int v573 = 0;
        }
      }
      else
      {
        int v573 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v605 = 8;
        }
        else {
          int v605 = 0;
        }
      }
      else
      {
        int v605 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v625 = 16;
        }
        else {
          int v625 = 0;
        }
      }
      else
      {
        int v625 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v639 = 128;
        }
        else {
          int v639 = 0;
        }
      }
      else
      {
        int v639 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v658 = 256;
        }
        else {
          int v658 = 0;
        }
      }
      else
      {
        int v658 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v668 = 0x1000000;
      }
      else {
        int v668 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v669 = 0x2000000;
      }
      else {
        int v669 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v670 = 0x4000000;
      }
      else {
        int v670 = 0;
      }
      int v662 = v749 | v739 | v573 | v605 | v625 | v639 | v658 | v668;
      int v663 = v669 | v670;
      goto LABEL_2584;
    case 555:
      int v310 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGR10_XR_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v310 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2) | 0x30800;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v311 = 2;
        }
        else {
          int v311 = 0;
        }
        int v744 = v311;
      }
      else
      {
        int v744 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v514 = 4;
        }
        else {
          int v514 = 0;
        }
        int v740 = v514;
      }
      else
      {
        int v740 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v574 = 8;
        }
        else {
          int v574 = 0;
        }
      }
      else
      {
        int v574 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v606 = 16;
        }
        else {
          int v606 = 0;
        }
      }
      else
      {
        int v606 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v626 = 128;
        }
        else {
          int v626 = 0;
        }
      }
      else
      {
        int v626 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple2)) {
          int v640 = 256;
        }
        else {
          int v640 = 0;
        }
      }
      else
      {
        int v640 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v659 = 0x1000000;
      }
      else {
        int v659 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v660 = 0x2000000;
      }
      else {
        int v660 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v661 = 0x4000000;
      }
      else {
        int v661 = 0;
      }
      int v662 = v310 | v744 | v740 | v574 | v606 | v626 | v640 | v659;
      int v663 = v660 | v661;
LABEL_2584:
      a3->i32[2] = v662 | v663;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1E90;
      goto LABEL_2369;
    case 556:
      v260 = "MTLPixelFormatRGBA16Float_XR";
LABEL_830:
      a3->i64[0] = (uint64_t)v260;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      int v164 = 197023;
LABEL_2243:
      a3->i32[2] = v164;
      int64x2_t v424 = (int64x2_t)xmmword_1828E2210;
      goto LABEL_2883;
    case 560:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCRA8_444_1P";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v312 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4) | 0x30000;
      }
      else {
        int v312 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v515 = 2;
        }
        else {
          int v515 = 0;
        }
      }
      else
      {
        int v515 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v575 = 4;
        }
        else {
          int v575 = 0;
        }
      }
      else
      {
        int v575 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v607 = 8;
        }
        else {
          int v607 = 0;
        }
      }
      else
      {
        int v607 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple4)) {
          int v627 = 16;
        }
        else {
          int v627 = 0;
        }
      }
      else
      {
        int v627 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v641 = 0x1000000;
      }
      else {
        int v641 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v642 = 0x2000000;
      }
      else {
        int v642 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v643 = 0x4000000;
      }
      else {
        int v643 = 0;
      }
      a3->i32[2] = v312 | v515 | v575 | v607 | v627 | v641 | v642 | v643;
      int64x2_t v424 = (int64x2_t)xmmword_1828E1E30;
      goto LABEL_2883;
    case 562:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR8_422_1P_REV";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v290 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1) | 0x30000;
      }
      else {
        int v290 = 196608;
      }
LABEL_1865:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v291 = this;
        MTLGPUFamily v292 = MTLGPUFamilyApple1;
LABEL_1867:
        if (MTLPixelFormatQuery::supportsFamily(v291, v292)) {
          int v516 = 4;
        }
        else {
          int v516 = 0;
        }
      }
      else
      {
LABEL_1870:
        int v516 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v517 = 8;
        }
        else {
          int v517 = 0;
        }
      }
      else
      {
        int v517 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v518 = 16;
        }
        else {
          int v518 = 0;
        }
      }
      else
      {
        int v518 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v519 = 0x1000000;
      }
      else {
        int v519 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v520 = 0x2000000;
      }
      else {
        int v520 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v521 = 0x4000000;
      }
      else {
        int v521 = 0;
      }
      int v353 = v290 | v516 | v517 | v518 | v519;
      int v354 = v520 | v521;
      goto LABEL_2368;
    case 563:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P_PQ";
      int v298 = 134414336;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_932;
      }
      goto LABEL_931;
    case 564:
      v313 = "MTLPixelFormatYCBCR10_420_2P_PQ";
      goto LABEL_858;
    case 565:
      v313 = "MTLPixelFormatYCBCR10_422_2P_PQ";
      goto LABEL_858;
    case 566:
      v314 = "MTLPixelFormatYCBCR10_444_2P_PQ";
      goto LABEL_861;
    case 567:
      v315 = "MTLPixelFormatYCBCR10_420_2P_PACKED_PQ";
      goto LABEL_843;
    case 568:
      v315 = "MTLPixelFormatYCBCR10_422_2P_PACKED_PQ";
      goto LABEL_843;
    case 569:
      v315 = "MTLPixelFormatYCBCR10_444_2P_PACKED_PQ";
LABEL_843:
      a3->i64[0] = (uint64_t)v315;
      int v301 = 142802944;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v301 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x8830000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v302 = this;
        MTLGPUFamily v303 = MTLGPUFamilyApple6;
LABEL_847:
        if (MTLPixelFormatQuery::supportsFamily(v302, v303)) {
          int v316 = 4;
        }
        else {
          int v316 = 0;
        }
      }
      else
      {
LABEL_850:
        int v316 = 0;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_905;
      }
      v317 = this;
      MTLGPUFamily v318 = MTLGPUFamilyApple7;
      goto LABEL_902;
    case 570:
      v319 = "MTLPixelFormatYCBCR12_420_2P";
      goto LABEL_915;
    case 571:
      v319 = "MTLPixelFormatYCBCR12_422_2P";
      goto LABEL_915;
    case 572:
      v320 = "MTLPixelFormatYCBCR12_444_2P";
      goto LABEL_930;
    case 573:
      v313 = "MTLPixelFormatYCBCR12_420_2P_PQ";
      goto LABEL_858;
    case 574:
      v313 = "MTLPixelFormatYCBCR12_422_2P_PQ";
LABEL_858:
      a3->i64[0] = (uint64_t)v313;
      int v296 = 142802944;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_917;
      }
      goto LABEL_916;
    case 575:
      v314 = "MTLPixelFormatYCBCR12_444_2P_PQ";
LABEL_861:
      a3->i64[0] = (uint64_t)v314;
      int v298 = 142802944;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_932;
      }
      goto LABEL_931;
    case 576:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Unorm_X6";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v321 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5) | 0x30000;
      }
      else {
        int v321 = 196608;
      }
      goto LABEL_1892;
    case 577:
      int v321 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Unorm_X6_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v321 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5) | 0x30800;
      }
LABEL_1892:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5)) {
          int v522 = 2;
        }
        else {
          int v522 = 0;
        }
      }
      else
      {
        int v522 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5)) {
          int v523 = 4;
        }
        else {
          int v523 = 0;
        }
      }
      else
      {
        int v523 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5)) {
          int v524 = 8;
        }
        else {
          int v524 = 0;
        }
      }
      else
      {
        int v524 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5)) {
          int v525 = 16;
        }
        else {
          int v525 = 0;
        }
      }
      else
      {
        int v525 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v526 = 0x1000000;
      }
      else {
        int v526 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v527 = 0x2000000;
      }
      else {
        int v527 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v528 = 0x4000000;
      }
      else {
        int v528 = 0;
      }
      int v529 = v321 | v522 | v523 | v524 | v525 | v526;
      int v530 = v527 | v528;
      goto LABEL_2328;
    case 578:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Unorm_X12";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v322 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5) | 0x30000;
      }
      else {
        int v322 = 196608;
      }
      goto LABEL_1923;
    case 579:
      int v322 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Unorm_X12_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v322 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5) | 0x30800;
      }
LABEL_1923:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5)) {
          int v531 = 2;
        }
        else {
          int v531 = 0;
        }
      }
      else
      {
        int v531 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5)) {
          int v532 = 4;
        }
        else {
          int v532 = 0;
        }
      }
      else
      {
        int v532 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5)) {
          int v533 = 8;
        }
        else {
          int v533 = 0;
        }
      }
      else
      {
        int v533 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple5)) {
          int v534 = 16;
        }
        else {
          int v534 = 0;
        }
      }
      else
      {
        int v534 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v535 = 0x1000000;
      }
      else {
        int v535 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v536 = 0x2000000;
      }
      else {
        int v536 = 0;
      }
      int v537 = v322 | v531 | v532 | v533 | v534 | v535;
      goto LABEL_2205;
    case 580:
      v323 = "MTLPixelFormatYCBCR12_420_2P_PACKED";
      goto LABEL_955;
    case 581:
      v323 = "MTLPixelFormatYCBCR12_422_2P_PACKED";
      goto LABEL_955;
    case 582:
      v323 = "MTLPixelFormatYCBCR12_444_2P_PACKED";
      goto LABEL_955;
    case 583:
      v324 = "MTLPixelFormatYCBCR12_420_2P_PACKED_PQ";
      goto LABEL_877;
    case 584:
      v324 = "MTLPixelFormatYCBCR12_422_2P_PACKED_PQ";
      goto LABEL_877;
    case 585:
      v324 = "MTLPixelFormatYCBCR12_444_2P_PACKED_PQ";
LABEL_877:
      a3->i64[0] = (uint64_t)v324;
      int v296 = 142802944;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_957;
      }
      goto LABEL_956;
    case 586:
      v325 = "MTLPixelFormatRGB10A2Unorm_sRGB";
      goto LABEL_1124;
    case 587:
      int v326 = 134414337;
      v327 = "MTLPixelFormatRGB10A2Unorm_PQ";
      goto LABEL_1129;
    case 588:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Unorm_PACKED";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v328 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x30000;
      }
      else {
        int v328 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v538 = 2;
        }
        else {
          int v538 = 0;
        }
      }
      else
      {
        int v538 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v576 = 4;
        }
        else {
          int v576 = 0;
        }
      }
      else
      {
        int v576 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v608 = 8;
        }
        else {
          int v608 = 0;
        }
      }
      else
      {
        int v608 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v628 = 16;
        }
        else {
          int v628 = 0;
        }
      }
      else
      {
        int v628 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v644 = 0x1000000;
      }
      else {
        int v644 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v645 = 0x2000000;
      }
      else {
        int v645 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v646 = 0x4000000;
      }
      else {
        int v646 = 0;
      }
      int v491 = v328 | v538 | v576 | v608 | v628 | v644;
      int v254 = v645 | v646;
      goto LABEL_2483;
    case 589:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Unorm_PACKED";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v329 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3) | 0x30000;
      }
      else {
        int v329 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v539 = 2;
        }
        else {
          int v539 = 0;
        }
      }
      else
      {
        int v539 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple3)) {
          int v577 = 4;
        }
        else {
          int v577 = 0;
        }
      }
      else
      {
        int v577 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v609 = 8;
        }
        else {
          int v609 = 0;
        }
      }
      else
      {
        int v609 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v629 = 16;
        }
        else {
          int v629 = 0;
        }
      }
      else
      {
        int v629 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v647 = 0x1000000;
      }
      else {
        int v647 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v592 = 0x2000000;
      }
      else {
        int v592 = 0;
      }
      int v593 = v329 | v539 | v577 | v609 | v629 | v647;
      goto LABEL_2492;
    case 590:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P_XR";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v298 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x30000;
      }
      else {
        int v298 = 196608;
      }
      goto LABEL_932;
    case 591:
      v319 = "MTLPixelFormatYCBCR10_420_2P_XR";
      goto LABEL_915;
    case 592:
      v319 = "MTLPixelFormatYCBCR10_422_2P_XR";
      goto LABEL_915;
    case 593:
      v320 = "MTLPixelFormatYCBCR10_444_2P_XR";
      goto LABEL_930;
    case 594:
      v330 = "MTLPixelFormatYCBCR10_420_2P_PACKED_XR";
      goto LABEL_893;
    case 595:
      v330 = "MTLPixelFormatYCBCR10_422_2P_PACKED_XR";
      goto LABEL_893;
    case 596:
      v330 = "MTLPixelFormatYCBCR10_444_2P_PACKED_XR";
LABEL_893:
      a3->i64[0] = (uint64_t)v330;
      int v301 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v301 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x830000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v316 = 4;
        }
        else {
          int v316 = 0;
        }
      }
      else
      {
        int v316 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v317 = this;
        MTLGPUFamily v318 = MTLGPUFamilyApple6;
LABEL_902:
        if (MTLPixelFormatQuery::supportsFamily(v317, v318)) {
          int v331 = 16;
        }
        else {
          int v331 = 0;
        }
      }
      else
      {
LABEL_905:
        int v331 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v332 = 0x1000000;
      }
      else {
        int v332 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v333 = 0x2000000;
      }
      else {
        int v333 = 0;
      }
      v334 = this;
      MTLGPUFamily v335 = MTLGPUFamilyApple8;
      goto LABEL_1011;
    case 597:
      v319 = "MTLPixelFormatYCBCR12_420_2P_XR";
      goto LABEL_915;
    case 598:
      v319 = "MTLPixelFormatYCBCR12_422_2P_XR";
LABEL_915:
      a3->i64[0] = (uint64_t)v319;
      int v296 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_916:
      }
        v296 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6);
LABEL_917:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v297 = 4;
        }
        else {
          int v297 = 0;
        }
      }
      else
      {
        int v297 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v336 = 8;
        }
        else {
          int v336 = 0;
        }
      }
      else
      {
        int v336 = 0;
      }
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1451;
      }
      v337 = this;
      MTLGPUFamily v338 = MTLGPUFamilyApple6;
      goto LABEL_969;
    case 599:
      v320 = "MTLPixelFormatYCBCR12_444_2P_XR";
LABEL_930:
      a3->i64[0] = (uint64_t)v320;
      int v298 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_931:
      }
        v298 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6);
LABEL_932:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v299 = 2;
        }
        else {
          int v299 = 0;
        }
      }
      else
      {
        int v299 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v339 = 4;
        }
        else {
          int v339 = 0;
        }
      }
      else
      {
        int v339 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v340 = 8;
        }
        else {
          int v340 = 0;
        }
      }
      else
      {
        int v340 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v341 = this;
        MTLGPUFamily v342 = MTLGPUFamilyApple6;
LABEL_949:
        if (MTLPixelFormatQuery::supportsFamily(v341, v342)) {
          int v343 = 16;
        }
        else {
          int v343 = 0;
        }
      }
      else
      {
LABEL_2264:
        int v343 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v355 = 0x1000000;
      }
      else {
        int v355 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v356 = 0x2000000;
      }
      else {
        int v356 = 0;
      }
      v357 = this;
      MTLGPUFamily v358 = MTLGPUFamilyApple8;
      goto LABEL_2272;
    case 600:
      v323 = "MTLPixelFormatYCBCR12_420_2P_PACKED_XR";
      goto LABEL_955;
    case 601:
      v323 = "MTLPixelFormatYCBCR12_422_2P_PACKED_XR";
      goto LABEL_955;
    case 602:
      v323 = "MTLPixelFormatYCBCR12_444_2P_PACKED_XR";
LABEL_955:
      a3->i64[0] = (uint64_t)v323;
      int v296 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_956:
      }
        v296 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7);
LABEL_957:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v297 = 4;
        }
        else {
          int v297 = 0;
        }
      }
      else
      {
        int v297 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v336 = 8;
        }
        else {
          int v336 = 0;
        }
      }
      else
      {
        int v336 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        v337 = this;
        MTLGPUFamily v338 = MTLGPUFamilyApple7;
LABEL_969:
        if (MTLPixelFormatQuery::supportsFamily(v337, v338)) {
          int v344 = 16;
        }
        else {
          int v344 = 0;
        }
      }
      else
      {
LABEL_1451:
        int v344 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v359 = 0x1000000;
      }
      else {
        int v359 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v360 = 0x2000000;
      }
      else {
        int v360 = 0;
      }
      v361 = this;
      MTLGPUFamily v362 = MTLGPUFamilyApple8;
      goto LABEL_1459;
    case 603:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR12Unorm_X4";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v345 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x30000;
      }
      else {
        int v345 = 196608;
      }
      goto LABEL_1962;
    case 604:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR12Unorm_X4_PQ";
      int v345 = 134414336;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v345 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x8030000;
      }
LABEL_1962:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v540 = 4;
        }
        else {
          int v540 = 0;
        }
      }
      else
      {
        int v540 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v541 = 8;
        }
        else {
          int v541 = 0;
        }
      }
      else
      {
        int v541 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v542 = 16;
        }
        else {
          int v542 = 0;
        }
      }
      else
      {
        int v542 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v543 = 0x1000000;
      }
      else {
        int v543 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v544 = 0x2000000;
      }
      else {
        int v544 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v545 = 0x4000000;
      }
      else {
        int v545 = 0;
      }
      a3->i32[2] = v345 | v540 | v541 | v542 | v543 | v544 | v545;
      int64x2_t v47 = (int64x2_t)xmmword_1828E1E40;
      goto LABEL_2827;
    case 605:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG12Unorm_X8";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v346 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x30000;
      }
      else {
        int v346 = 196608;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v546 = 4;
        }
        else {
          int v546 = 0;
        }
      }
      else
      {
        int v546 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v578 = 8;
        }
        else {
          int v578 = 0;
        }
      }
      else
      {
        int v578 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v610 = 16;
        }
        else {
          int v610 = 0;
        }
      }
      else
      {
        int v610 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v630 = 0x1000000;
      }
      else {
        int v630 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v631 = 0x2000000;
      }
      else {
        int v631 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v632 = 0x4000000;
      }
      else {
        int v632 = 0;
      }
      a3->i32[2] = v346 | v546 | v578 | v610 | v630 | v631 | v632;
      long long v99 = xmmword_1828E1E30;
      goto LABEL_2864;
    case 606:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Unorm_X6_PQ";
      int v347 = 134414336;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v347 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6) | 0x8030000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v348 = 4;
        }
        else {
          int v348 = 0;
        }
      }
      else
      {
        int v348 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v547 = 8;
        }
        else {
          int v547 = 0;
        }
      }
      else
      {
        int v547 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple6)) {
          int v579 = 16;
        }
        else {
          int v579 = 0;
        }
      }
      else
      {
        int v579 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v611 = 0x1000000;
      }
      else {
        int v611 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v612 = 0x2000000;
      }
      else {
        int v612 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple8)) {
        int v613 = 0x4000000;
      }
      else {
        int v613 = 0;
      }
      int v529 = v347 | v348 | v547 | v579 | v611;
      int v530 = v612 | v613;
      goto LABEL_2328;
    case 607:
      a3->i64[0] = (uint64_t)"MTLPixelFormatYCBCR10_444_1P_HLG";
      int v298 = 268632064;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1020;
      }
      goto LABEL_1019;
    case 608:
      v349 = "MTLPixelFormatYCBCR10_420_2P_HLG";
      goto LABEL_1050;
    case 609:
      v349 = "MTLPixelFormatYCBCR10_422_2P_HLG";
      goto LABEL_1050;
    case 610:
      v350 = "MTLPixelFormatYCBCR10_444_2P_HLG";
      goto LABEL_1018;
    case 611:
      v351 = "MTLPixelFormatYCBCR10_420_2P_PACKED_HLG";
      goto LABEL_992;
    case 612:
      v351 = "MTLPixelFormatYCBCR10_422_2P_PACKED_HLG";
      goto LABEL_992;
    case 613:
      v351 = "MTLPixelFormatYCBCR10_444_2P_PACKED_HLG";
LABEL_992:
      a3->i64[0] = (uint64_t)v351;
      int v301 = 277020672;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v301 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9) | 0x10830000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v316 = 4;
        }
        else {
          int v316 = 0;
        }
      }
      else
      {
        int v316 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v331 = 16;
        }
        else {
          int v331 = 0;
        }
      }
      else
      {
        int v331 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v332 = 0x1000000;
      }
      else {
        int v332 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v333 = 0x2000000;
      }
      else {
        int v333 = 0;
      }
      v334 = this;
      MTLGPUFamily v335 = MTLGPUFamilyApple9;
LABEL_1011:
      if (MTLPixelFormatQuery::supportsFamily(v334, v335)) {
        int v352 = 0x4000000;
      }
      else {
        int v352 = 0;
      }
      int v353 = v301 | v316 | v331 | v332;
      int v354 = v333 | v352;
LABEL_2368:
      a3->i32[2] = v353 | v354;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1E20;
      goto LABEL_2369;
    case 615:
      v349 = "MTLPixelFormatYCBCR12_420_2P_HLG";
      goto LABEL_1050;
    case 616:
      v349 = "MTLPixelFormatYCBCR12_422_2P_HLG";
      goto LABEL_1050;
    case 617:
      v350 = "MTLPixelFormatYCBCR12_444_2P_HLG";
LABEL_1018:
      a3->i64[0] = (uint64_t)v350;
      int v298 = 277020672;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
LABEL_1019:
      }
        v298 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9);
LABEL_1020:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v299 = 2;
        }
        else {
          int v299 = 0;
        }
      }
      else
      {
        int v299 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v339 = 4;
        }
        else {
          int v339 = 0;
        }
      }
      else
      {
        int v339 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v340 = 8;
        }
        else {
          int v340 = 0;
        }
      }
      else
      {
        int v340 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v343 = 16;
        }
        else {
          int v343 = 0;
        }
      }
      else
      {
        int v343 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v355 = 0x1000000;
      }
      else {
        int v355 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v356 = 0x2000000;
      }
      else {
        int v356 = 0;
      }
      v357 = this;
      MTLGPUFamily v358 = MTLGPUFamilyApple9;
LABEL_2272:
      if (MTLPixelFormatQuery::supportsFamily(v357, v358)) {
        int v602 = 0x4000000;
      }
      else {
        int v602 = 0;
      }
      int v440 = v298 | v299 | v339 | v340 | v343 | v355;
      int v441 = v356 | v602;
      goto LABEL_2276;
    case 618:
      v349 = "MTLPixelFormatYCBCR12_420_2P_PACKED_HLG";
      goto LABEL_1050;
    case 619:
      v349 = "MTLPixelFormatYCBCR12_422_2P_PACKED_HLG";
      goto LABEL_1050;
    case 620:
      v349 = "MTLPixelFormatYCBCR12_444_2P_PACKED_HLG";
LABEL_1050:
      a3->i64[0] = (uint64_t)v349;
      int v296 = 277020672;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v296 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9) | 0x10830000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v297 = 4;
        }
        else {
          int v297 = 0;
        }
      }
      else
      {
        int v297 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v336 = 8;
        }
        else {
          int v336 = 0;
        }
      }
      else
      {
        int v336 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v344 = 16;
        }
        else {
          int v344 = 0;
        }
      }
      else
      {
        int v344 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v359 = 0x1000000;
      }
      else {
        int v359 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v360 = 0x2000000;
      }
      else {
        int v360 = 0;
      }
      v361 = this;
      MTLGPUFamily v362 = MTLGPUFamilyApple9;
LABEL_1459:
      if (MTLPixelFormatQuery::supportsFamily(v361, v362)) {
        int v439 = 0x4000000;
      }
      else {
        int v439 = 0;
      }
      int v440 = v296 | v297 | v336 | v344 | v359;
      int v441 = v360 | v439;
LABEL_2276:
      a3->i32[2] = v440 | v441;
      int64x2_t v434 = (int64x2_t)xmmword_1828E1E10;
LABEL_2369:
      a3[1] = v434;
      char v622 = 3;
      goto LABEL_2884;
    case 621:
      v363 = "MTLPixelFormatR10Unorm_X6_HLG";
      goto LABEL_1076;
    case 622:
      v363 = "MTLPixelFormatR12Unorm_X4_HLG";
LABEL_1076:
      a3->i64[0] = (uint64_t)v363;
      int v364 = 268632064;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v364 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9) | 0x10030000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v365 = 4;
        }
        else {
          int v365 = 0;
        }
      }
      else
      {
        int v365 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v420 = 8;
        }
        else {
          int v420 = 0;
        }
      }
      else
      {
        int v420 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v442 = 16;
        }
        else {
          int v442 = 0;
        }
      }
      else
      {
        int v442 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v458 = 0x1000000;
      }
      else {
        int v458 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v459 = 0x2000000;
      }
      else {
        int v459 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v460 = 0x4000000;
      }
      else {
        int v460 = 0;
      }
      int v461 = v364 | v365 | v420 | v442 | v458;
      int v250 = v459 | v460;
LABEL_1731:
      a3->i32[2] = v461 | v250;
      int64x2_t v47 = (int64x2_t)xmmword_1828E1E10;
      goto LABEL_2827;
    case 623:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A2Unorm_HLG";
      int v366 = 268632064;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v366 = MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9) | 0x10030000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v367 = 4;
        }
        else {
          int v367 = 0;
        }
      }
      else
      {
        int v367 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v548 = 8;
        }
        else {
          int v548 = 0;
        }
      }
      else
      {
        int v548 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v580 = 16;
        }
        else {
          int v580 = 0;
        }
      }
      else
      {
        int v580 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v614 = 128;
        }
        else {
          int v614 = 0;
        }
      }
      else
      {
        int v614 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v112 = 256;
        }
        else {
          int v112 = 0;
        }
      }
      else
      {
        int v112 = 0;
      }
      int v111 = v366 | v367 | v548 | v580 | v614;
      goto LABEL_1388;
    case 624:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P";
      int v304 = 8585216;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1089;
      }
      goto LABEL_1090;
    case 625:
      int v304 = 8587264;
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_sRGB";
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1090;
      }
      goto LABEL_1089;
    case 626:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_PQ";
      int v304 = 142802944;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1090;
      }
      goto LABEL_1089;
    case 627:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRGB10A8_2P_HLG";
      int v304 = 277020672;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1090;
      }
LABEL_1089:
      v304 |= MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9);
LABEL_1090:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v305 = 2;
        }
        else {
          int v305 = 0;
        }
      }
      else
      {
        int v305 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v368 = 4;
        }
        else {
          int v368 = 0;
        }
      }
      else
      {
        int v368 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v369 = 8;
        }
        else {
          int v369 = 0;
        }
      }
      else
      {
        int v369 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
          int v370 = 16;
        }
        else {
          int v370 = 0;
        }
      }
      else
      {
        int v370 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v371 = 0x1000000;
      }
      else {
        int v371 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple9)) {
        int v372 = 0x2000000;
      }
      else {
        int v372 = 0;
      }
      v373 = this;
      MTLGPUFamily v374 = MTLGPUFamilyApple9;
LABEL_1583:
      if (MTLPixelFormatQuery::supportsFamily(v373, v374)) {
        int v469 = 0x4000000;
      }
      else {
        int v469 = 0;
      }
      a3->i32[2] = v304 | v305 | v368 | v369 | v370 | v371 | v372 | v469;
      int64x2_t v424 = (int64x2_t)xmmword_1828E1E00;
      goto LABEL_2883;
    case 628:
      v325 = "MTLPixelFormatBGR10A2Unorm_sRGB";
LABEL_1124:
      a3->i64[0] = (uint64_t)v325;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v326 = 198661;
        }
        else {
          int v326 = 198657;
        }
      }
      else
      {
        int v326 = 198657;
      }
      goto LABEL_1366;
    case 629:
      int v326 = 134414337;
      v327 = "MTLPixelFormatBGR10A2Unorm_PQ";
LABEL_1129:
      a3->i64[0] = (uint64_t)v327;
      MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1);
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v326 = 134414341;
        }
        else {
          int v326 = 134414337;
        }
      }
LABEL_1366:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v421 = 8;
        }
        else {
          int v421 = 0;
        }
      }
      else
      {
        int v421 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v422 = 16;
        }
        else {
          int v422 = 0;
        }
      }
      else
      {
        int v422 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v423 = 128;
        }
        else {
          int v423 = 0;
        }
      }
      else
      {
        int v423 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple7)) {
          int v131 = 256;
        }
        else {
          int v131 = 0;
        }
      }
      else
      {
        int v131 = 0;
      }
      int v111 = v326 | v421;
      int v132 = v422 | v423;
LABEL_1387:
      int v112 = v132 | v131;
LABEL_1388:
      int v257 = v111 | v112;
LABEL_1389:
      a3->i32[2] = v257;
LABEL_1390:
      int64x2_t v424 = (int64x2_t)xmmword_1828E2220;
      goto LABEL_2883;
    case 630:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Uint_PACKED";
      int v375 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v375 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v376 = 2;
        }
        else {
          int v376 = 0;
        }
      }
      else
      {
        int v376 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v549 = 16;
        }
        else {
          int v549 = 0;
        }
      }
      else
      {
        int v549 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v581 = 0x1000000;
      }
      else {
        int v581 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v388 = 0x2000000;
      }
      else {
        int v388 = 0;
      }
      int v389 = v375 | v376 | v549 | v581;
      goto LABEL_2161;
    case 631:
      v377 = "MTLPixelFormatBGRA10_XR_PACKED";
      goto LABEL_1142;
    case 632:
      int v378 = 198656;
      v379 = "MTLPixelFormatBGRA10_XR_PACKED_sRGB";
      goto LABEL_1145;
    case 633:
      v377 = "MTLPixelFormatBGRA10Unorm_PACKED";
LABEL_1142:
      a3->i64[0] = (uint64_t)v377;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v380 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x30000;
      }
      else {
        int v380 = 196608;
      }
      int v747 = v380;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v425 = 2;
        }
        else {
          int v425 = 0;
        }
      }
      else
      {
        int v425 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v443 = 4;
        }
        else {
          int v443 = 0;
        }
      }
      else
      {
        int v443 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v462 = 8;
        }
        else {
          int v462 = 0;
        }
      }
      else
      {
        int v462 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v470 = 16;
        }
        else {
          int v470 = 0;
        }
      }
      else
      {
        int v470 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v471 = 128;
        }
        else {
          int v471 = 0;
        }
      }
      else
      {
        int v471 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v472 = 256;
        }
        else {
          int v472 = 0;
        }
      }
      else
      {
        int v472 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v473 = 0x1000000;
      }
      else {
        int v473 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v388 = 0x2000000;
      }
      else {
        int v388 = 0;
      }
      int v389 = v747 | v425 | v443 | v462 | v470 | v471 | v472 | v473;
      goto LABEL_2161;
    case 634:
      int v378 = 198656;
      v379 = "MTLPixelFormatBGRA10Unorm_PACKED_sRGB";
LABEL_1145:
      a3->i64[0] = (uint64_t)v379;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1146;
      }
      goto LABEL_1147;
    case 635:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_PACKED_HLG";
      int v378 = 268632064;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1147;
      }
      goto LABEL_1146;
    case 636:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_PACKED_PQ";
      int v378 = 134414336;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1147;
      }
LABEL_1146:
      v378 |= MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009);
LABEL_1147:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v381 = 2;
        }
        else {
          int v381 = 0;
        }
        int v745 = v381;
      }
      else
      {
        int v745 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v382 = 4;
        }
        else {
          int v382 = 0;
        }
      }
      else
      {
        int v382 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v383 = 8;
        }
        else {
          int v383 = 0;
        }
      }
      else
      {
        int v383 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v384 = 16;
        }
        else {
          int v384 = 0;
        }
      }
      else
      {
        int v384 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v385 = 128;
        }
        else {
          int v385 = 0;
        }
      }
      else
      {
        int v385 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v386 = 256;
        }
        else {
          int v386 = 0;
        }
      }
      else
      {
        int v386 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v387 = 0x1000000;
      }
      else {
        int v387 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v388 = 0x2000000;
      }
      else {
        int v388 = 0;
      }
      int v389 = v378 | v745 | v382 | v383 | v384 | v385 | v386 | v387;
LABEL_2161:
      a3->i32[2] = v389 | v388;
      int64x2_t v424 = (int64x2_t)xmmword_1828E1E80;
      goto LABEL_2883;
    case 637:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Uint";
      int v390 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v390 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v391 = 2;
        }
        else {
          int v391 = 0;
        }
      }
      else
      {
        int v391 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v550 = 16;
        }
        else {
          int v550 = 0;
        }
      }
      else
      {
        int v550 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v582 = 0x1000000;
      }
      else {
        int v582 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v401 = 0x2000000;
      }
      else {
        int v401 = 0;
      }
      int v402 = v390 | v391 | v550 | v582;
      goto LABEL_2593;
    case 638:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v392 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x30000;
      }
      else {
        int v392 = 196608;
      }
      int v750 = v392;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v551 = 2;
        }
        else {
          int v551 = 0;
        }
      }
      else
      {
        int v551 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v583 = 4;
        }
        else {
          int v583 = 0;
        }
      }
      else
      {
        int v583 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v615 = 8;
        }
        else {
          int v615 = 0;
        }
      }
      else
      {
        int v615 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v633 = 16;
        }
        else {
          int v633 = 0;
        }
      }
      else
      {
        int v633 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v648 = 128;
        }
        else {
          int v648 = 0;
        }
      }
      else
      {
        int v648 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v664 = 256;
        }
        else {
          int v664 = 0;
        }
      }
      else
      {
        int v664 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v671 = 0x1000000;
      }
      else {
        int v671 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v401 = 0x2000000;
      }
      else {
        int v401 = 0;
      }
      int v402 = v750 | v551 | v583 | v615 | v633 | v648 | v664 | v671;
      goto LABEL_2593;
    case 639:
      int v393 = 198656;
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_sRGB";
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1198;
      }
      goto LABEL_1199;
    case 640:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_HLG";
      int v393 = 268632064;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1199;
      }
      goto LABEL_1198;
    case 641:
      a3->i64[0] = (uint64_t)"MTLPixelFormatBGRA10Unorm_PQ";
      int v393 = 134414336;
      if (!MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        goto LABEL_1199;
      }
LABEL_1198:
      v393 |= MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009);
LABEL_1199:
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v394 = 2;
        }
        else {
          int v394 = 0;
        }
        int v746 = v394;
      }
      else
      {
        int v746 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v395 = 4;
        }
        else {
          int v395 = 0;
        }
      }
      else
      {
        int v395 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v396 = 8;
        }
        else {
          int v396 = 0;
        }
      }
      else
      {
        int v396 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v397 = 16;
        }
        else {
          int v397 = 0;
        }
      }
      else
      {
        int v397 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v398 = 128;
        }
        else {
          int v398 = 0;
        }
      }
      else
      {
        int v398 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v399 = 256;
        }
        else {
          int v399 = 0;
        }
      }
      else
      {
        int v399 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v400 = 0x1000000;
      }
      else {
        int v400 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v401 = 0x2000000;
      }
      else {
        int v401 = 0;
      }
      int v402 = v393 | v746 | v395 | v396 | v397 | v398 | v399 | v400;
LABEL_2593:
      a3->i32[2] = v402 | v401;
      int64x2_t v424 = (int64x2_t)xmmword_1828E1E70;
      goto LABEL_2883;
    case 642:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Uint_X6";
      int v403 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v403 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v404 = 2;
        }
        else {
          int v404 = 0;
        }
      }
      else
      {
        int v404 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v552 = 16;
        }
        else {
          int v552 = 0;
        }
      }
      else
      {
        int v552 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v584 = 0x1000000;
      }
      else {
        int v584 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v585 = 0x2000000;
      }
      else {
        int v585 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v586 = 0x4000000;
      }
      else {
        int v586 = 0;
      }
      int v529 = v403 | v404 | v552 | v584;
      int v530 = v585 | v586;
LABEL_2328:
      a3->i32[2] = v529 | v530;
      int64x2_t v47 = (int64x2_t)xmmword_1828E1E50;
      goto LABEL_2827;
    case 643:
      a3->i64[0] = (uint64_t)"MTLPixelFormatR10Uint_PACKED";
      int v405 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v405 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v406 = 2;
        }
        else {
          int v406 = 0;
        }
      }
      else
      {
        int v406 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v553 = 16;
        }
        else {
          int v553 = 0;
        }
      }
      else
      {
        int v553 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v587 = 0x1000000;
      }
      else {
        int v587 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v588 = 0x2000000;
      }
      else {
        int v588 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v589 = 0x4000000;
      }
      else {
        int v589 = 0;
      }
      int v491 = v405 | v406 | v553 | v587;
      int v254 = v588 | v589;
LABEL_2483:
      a3->i32[2] = v491 | v254;
      int64x2_t v47 = (int64x2_t)xmmword_1828E1E20;
      goto LABEL_2827;
    case 644:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Uint_X12";
      int v407 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v407 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v408 = 2;
        }
        else {
          int v408 = 0;
        }
      }
      else
      {
        int v408 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v554 = 16;
        }
        else {
          int v554 = 0;
        }
      }
      else
      {
        int v554 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v590 = 0x1000000;
      }
      else {
        int v590 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v536 = 0x2000000;
      }
      else {
        int v536 = 0;
      }
      int v537 = v407 | v408 | v554 | v590;
LABEL_2205:
      a3->i32[2] = v537 | v536;
      long long v99 = xmmword_1828E1E60;
      goto LABEL_2864;
    case 645:
      a3->i64[0] = (uint64_t)"MTLPixelFormatRG10Uint_PACKED";
      int v409 = 2621440;
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1)) {
        int v409 = MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009) | 0x280000;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v410 = 2;
        }
        else {
          int v410 = 0;
        }
      }
      else
      {
        int v410 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, MTLGPUFamilyApple1))
      {
        if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
          int v555 = 16;
        }
        else {
          int v555 = 0;
        }
      }
      else
      {
        int v555 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v591 = 0x1000000;
      }
      else {
        int v591 = 0;
      }
      if (MTLPixelFormatQuery::supportsFamily(this, (MTLGPUFamily)-1009)) {
        int v592 = 0x2000000;
      }
      else {
        int v592 = 0;
      }
      int v593 = v409 | v410 | v555 | v591;
LABEL_2492:
      a3->i32[2] = v593 | v592;
      long long v99 = xmmword_1828E1E10;
      goto LABEL_2864;
    default:
      a3->i32[2] = 0;
      goto LABEL_2885;
  }
}

uint64_t MTLPixelFormatQuery::supportsFamily(id *this, MTLGPUFamily a2)
{
  if (*this) {
    return [*this supportsFamily:a2];
  }
  if (this[1] == (id)-1) {
    return 1;
  }
  uint64_t v4 = this[2];
  unint64_t v3 = this[3];
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = this[3];
        return v4 != v3;
      }
    }
  }
  return v4 != v3;
}

uint64_t adjustPixelFormatForiOSDevice(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t *a4, unsigned char *a5, int a6, int a7)
{
  if ((*(unsigned char *)(a2 + 9) & 4) != 0)
  {
    unint64_t v7 = 0;
    LOBYTE(v8) = 0;
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 24);
    LOBYTE(v8) = 4;
    if (a7) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = 4;
    }
    if (v7 <= v9) {
      unint64_t v7 = v9;
    }
    if (a7)
    {
      unint64_t v8 = v7 / *(unsigned __int8 *)(a2 + 32);
      if (v8 <= 1) {
        LOBYTE(v8) = 1;
      }
    }
  }
  if (result <= 499)
  {
    uint64_t v10 = v7;
    switch(result)
    {
      case 'F':
      case 'P':
LABEL_38:
        unint64_t v7 = 4;
        if (a7)
        {
          unsigned int v11 = *(unsigned __int8 *)(a2 + 32);
          uint64_t v10 = 4;
          goto LABEL_16;
        }
        uint64_t v10 = 4;
        goto LABEL_47;
      case 'G':
      case 'H':
      case 'Q':
      case '[':
        unint64_t v7 = 4;
        if (a7) {
          goto LABEL_15;
        }
        uint64_t v10 = 8;
LABEL_47:
        LOBYTE(v8) = 4;
        break;
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
        break;
      case 'Z':
      case '\\':
      case ']':
      case '^':
LABEL_14:
        unint64_t v7 = 8;
        if (a7)
        {
LABEL_15:
          unsigned int v11 = *(unsigned __int8 *)(a2 + 32);
          uint64_t v10 = 8;
LABEL_16:
          LODWORD(v8) = v7 / v11;
        }
        else
        {
          LOBYTE(v8) = 4;
          uint64_t v10 = 8;
        }
        break;
      default:
        switch(result)
        {
          case '(':
          case ')':
          case '*':
          case '+':
            goto LABEL_38;
          case ',':
            goto LABEL_14;
          default:
            uint64_t v10 = v7;
            if (result == 253)
            {
              LOBYTE(v8) = 4;
              if (a7) {
                LOBYTE(v8) = *(unsigned char *)(a2 + 32) == 1;
              }
              unint64_t v7 = 1;
              uint64_t v10 = 1;
            }
            break;
        }
        break;
    }
  }
  else
  {
    uint64_t v10 = v7;
    switch(result)
    {
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 550:
      case 551:
      case 554:
      case 555:
      case 560:
      case 562:
      case 586:
      case 587:
        goto LABEL_14;
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 549:
      case 552:
      case 553:
      case 556:
      case 557:
      case 558:
      case 559:
      case 561:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
        break;
      case 588:
        unint64_t v7 = 2;
        if (a7)
        {
          unsigned int v11 = *(unsigned __int8 *)(a2 + 32);
          uint64_t v10 = 2;
          goto LABEL_16;
        }
        LOBYTE(v8) = 4;
        uint64_t v10 = 2;
        break;
      case 589:
        goto LABEL_38;
      default:
        uint64_t v10 = v7;
        switch(result)
        {
          case 623:
          case 624:
          case 625:
          case 626:
          case 627:
          case 628:
          case 629:
            goto LABEL_14;
          default:
            goto LABEL_18;
        }
        break;
    }
  }
LABEL_18:
  if (a6)
  {
    switch(result)
    {
      case '(':
        if ((a7 & 1) == 0)
        {
          LOBYTE(v8) = 4;
          unint64_t v7 = 8;
          goto LABEL_51;
        }
LABEL_45:
        LOBYTE(v8) = 2;
        unint64_t v7 = 6;
        uint64_t v10 = 6;
        break;
      case ')':
      case '*':
      case '+':
        unint64_t v7 = 8;
        if (a7)
        {
          unsigned int v12 = *(unsigned __int8 *)(a2 + 32);
LABEL_22:
          uint64_t v10 = 8;
          goto LABEL_43;
        }
        LOBYTE(v8) = 4;
LABEL_51:
        uint64_t v10 = 8;
        break;
      default:
        if (result != 70 && result != 80) {
          goto LABEL_31;
        }
        if (a7)
        {
LABEL_42:
          unsigned int v12 = *(unsigned __int8 *)(a2 + 32);
          unint64_t v7 = 4;
          uint64_t v10 = 4;
LABEL_43:
          LODWORD(v8) = v7 / v12;
        }
        else
        {
          uint64_t v10 = 8;
          unint64_t v7 = 4;
LABEL_30:
          LOBYTE(v8) = 4;
        }
        break;
    }
  }
  else
  {
LABEL_31:
    if (a7)
    {
      if (result <= 499)
      {
        if ((unint64_t)result <= 0x1F3)
        {
          switch(result)
          {
            case 300:
            case 301:
            case 302:
            case 303:
            case 304:
              LOBYTE(v8) = 1;
              unint64_t v7 = 3;
              uint64_t v10 = 3;
              goto LABEL_52;
            case 305:
            case 306:
            case 307:
            case 308:
            case 309:
            case 310:
            case 311:
            case 312:
            case 316:
            case 317:
            case 318:
            case 319:
            case 320:
            case 321:
            case 322:
              goto LABEL_52;
            case 313:
              goto LABEL_45;
            case 314:
            case 315:
              LOBYTE(v8) = 2;
              uint64_t v10 = 6;
              unint64_t v7 = 6;
              goto LABEL_52;
            case 323:
            case 324:
            case 325:
              LOBYTE(v8) = 4;
              uint64_t v10 = 12;
              unint64_t v7 = 12;
              goto LABEL_52;
            default:
              JUMPOUT(0);
          }
        }
        switch(result)
        {
          case 'F':
          case 'G':
          case 'H':
          case 'P':
          case 'Q':
            goto LABEL_42;
          case 'Z':
          case '\\':
          case ']':
          case '^':
            unint64_t v7 = 4;
            uint64_t v10 = 4;
            goto LABEL_30;
          case '[':
            unsigned int v12 = *(unsigned __int8 *)(a2 + 32);
            unint64_t v7 = 8;
            goto LABEL_22;
          default:
            break;
        }
      }
      else
      {
        switch(result)
        {
          case 500:
          case 501:
          case 502:
          case 503:
          case 504:
          case 505:
          case 506:
          case 507:
          case 520:
          case 521:
          case 522:
          case 523:
          case 524:
          case 525:
          case 526:
          case 527:
          case 540:
          case 541:
          case 542:
          case 543:
          case 544:
          case 545:
          case 554:
          case 555:
          case 562:
          case 563:
          case 564:
          case 565:
          case 566:
          case 567:
          case 568:
          case 569:
          case 570:
          case 571:
          case 572:
          case 573:
          case 574:
          case 575:
          case 607:
          case 608:
          case 609:
          case 610:
          case 611:
          case 612:
          case 613:
          case 615:
          case 616:
          case 617:
            uint64_t v10 = 6;
            unint64_t v7 = 6;
            LOBYTE(v8) = 6u / *(unsigned char *)(a2 + 32);
            break;
          default:
            break;
        }
      }
    }
  }
LABEL_52:
  if (a3) {
    *a3 = v7;
  }
  if (a4) {
    *a4 = v10;
  }
  if (a5) {
    *a5 = v8;
  }
  return result;
}

unint64_t MTLRangeAllocatorGetMaxFreeSize(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = a1[2];
  if (!v2) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v5 = (uint64_t *)(*(void *)a1 + 8);
  do
  {
    unint64_t v6 = *(v5 - 1);
    if (a2)
    {
      if (v6 % a2) {
        unint64_t v7 = a2 - v6 % a2;
      }
      else {
        unint64_t v7 = 0;
      }
      v6 += v7;
    }
    uint64_t v8 = *v5;
    v5 += 2;
    unint64_t v9 = v8 + 1;
    unint64_t v10 = v8 + 1 - v6;
    if (v10 <= result) {
      unint64_t v10 = result;
    }
    if (v9 > v6) {
      unint64_t result = v10;
    }
    --v2;
  }
  while (v2);
  return result;
}

void sub_18271BA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v16 - 72) = &a16;
  std::vector<std::unique_ptr<LoaderContext::Image>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 72));
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<LoaderContext::Image>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<LoaderContext::Image>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

id LoaderContext::finish(LoaderContext *this, uint64_t a2, id *a3)
{
  if (!*((unsigned char *)this + 72)) {
    return MEMORY[0x1E4F1CBF0];
  }
  if (*((void *)this + 5))
  {
    uint64_t v6 = 0;
    unint64_t v7 = *((void *)this + 4);
    while (1)
    {
      uint64_t v8 = *(void *)(*((void *)this + 6) + 8 * v6);
      if ((LoaderContext::loadRecursive((uint64_t)this, v8, v7, *(__CFString **)(v8 + 8), a2, a3) & 1) == 0) {
        return 0;
      }
      if ((unint64_t)++v6 >= *((void *)this + 5)) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    unint64_t v9 = (uint64_t *)*((void *)this + 6);
    unint64_t v10 = (uint64_t *)*((void *)this + 7);
    unint64_t v11 = 126 - 2 * __clz(v10 - v9);
    if (v10 == v9) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11;
    }
    std::__introsort<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,false>(v9, v10, (uint64_t)&v17, v12, 1);
    int v13 = objc_opt_new();
    uint64_t v15 = *((void *)this + 6);
    uint64_t v14 = *((void *)this + 7);
    while (v15 != v14)
    {
      if (*(void *)(*(void *)v15 + 32)) {
        objc_msgSend(v13, "addObject:");
      }
      v15 += 8;
    }
  }
  return v13;
}

uint64_t LoaderContext::setInsertLibraries(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  memset(v6, 0, sizeof(v6));
  uint64_t result = [a2 countByEnumeratingWithState:v6 objects:v7 count:16];
  if (result)
  {
    uint64_t v4 = (void *)**((void **)&v6[0] + 1);
    [**((id **)&v6[0] + 1) libraryPath];
    id v5 = v4;
    LoaderContext::addImage();
  }
  a1[5] = (uint64_t)(a1[7] - a1[6]) >> 3;
  return result;
}

void sub_18271BE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void sub_18271C708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,MTLHashKey *a33)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LoaderContext::load(LoaderContext *this, _MTLFunction *a2, uint64_t a3, id *a4)
{
  uint64_t v8 = [(_MTLFunction *)a2 libraryData];
  unint64_t v9 = (__CFString *)(*(uint64_t (**)(MTLLibraryData *))(*(void *)v8 + 304))(v8);
  if (!v9) {
    unint64_t v9 = (__CFString *)[(_MTLFunction *)a2 inheritedLibraryPath];
  }
  if (LoaderContext::getImage(this, &v9->isa)) {
    return 1;
  }
  uint64_t v11 = LoaderContext::addImage(this, v8, &v9->isa);
  if (!v11) {
    return 1;
  }
  *((void *)this + 2) = [(__CFString *)v9 stringByDeletingLastPathComponent];

  return LoaderContext::loadRecursive((uint64_t)this, v11, 0, v9, a3, a4);
}

uint64_t MTLLibraryDataWithArchive::libraryPath(MTLLibraryDataWithArchive *this)
{
  return *((void *)this + 80);
}

uint64_t LoaderContext::getImage(LoaderContext *this, NSString *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 7);
  if (v2 == v3) {
    return 0;
  }
  while (([*(id *)(*(void *)v2 + 8) isEqualToString:a2] & 1) == 0)
  {
    v2 += 8;
    if (v2 == v3) {
      return 0;
    }
  }
  return *(void *)v2;
}

uint64_t LoaderContext::addImage(LoaderContext *this, MTLLibraryData *a2, NSString *a3)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(MTLLibraryData *))(*(void *)a2 + 72))(a2);
  id v5 = (void *)(*(uint64_t (**)(MTLLibraryData *))(*(void *)a2 + 64))(a2);
  if ([v4 count] || objc_msgSend(v5, "count")) {
    operator new();
  }
  return 0;
}

void sub_18271CAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MTLCachedLibraryData::importedLibraries(MTLCachedLibraryData *this)
{
  return *((void *)this + 13);
}

uint64_t MTLCachedLibraryData::importedSymbols(MTLCachedLibraryData *this)
{
  return *((void *)this + 14);
}

uint64_t createHashForType@<X0>(int a1@<W0>, const void *a2@<X1>, uint64_t a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X6>, unsigned __int8 *a8@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int data = a1;
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, &data, 4u);
  CC_SHA256_Update(&c, a4, 0x20u);
  if (a3) {
    CC_SHA256_Update(&c, a2, a3);
  }
  if (a5)
  {
    uint64_t v15 = *(void **)(a5 + 88);
    if (v15 && [*(id *)(a5 + 88) count])
    {
      CC_SHA256_Update(&c, "functions", 9u);
      uint64_t v16 = (long long *)objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 0), "bitCodeHash");
      long long v17 = v16[1];
      long long v49 = *v16;
      long long v50 = v17;
      if ((unint64_t)[v15 count] >= 2)
      {
        unint64_t v18 = 1;
        do
        {
          uint64_t v19 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", v18), "bitCodeHash");
          for (uint64_t i = 0; i != 32; i += 8)
            *(void *)((char *)&v49 + i) ^= *(void *)(v19 + i);
          unint64_t v18 = (v18 + 1);
        }
        while ([v15 count] > v18);
      }
      CC_SHA256_Update(&c, &v49, 0x20u);
    }
    int v21 = *(void **)(a5 + 104);
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v22 = [v21 countByEnumeratingWithState:&v42 objects:v48 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v43;
      do
      {
        for (uint64_t j = 0; j != v23; ++j)
        {
          if (*(void *)v43 != v24) {
            objc_enumerationMutation(v21);
          }
          MTLGPUFamily v26 = *(void **)(*((void *)&v42 + 1) + 8 * j);
          int v27 = (void *)[v21 objectForKeyedSubscript:v26];
          uint64_t v28 = [v26 UTF8String];
          if (v27)
          {
            int v29 = (const char *)v28;
            if ([v27 count])
            {
              if (v29)
              {
                CC_LONG v30 = strlen(v29);
                CC_SHA256_Update(&c, v29, v30);
              }
              MTLGPUFamily v31 = (long long *)objc_msgSend((id)objc_msgSend(v27, "objectAtIndexedSubscript:", 0), "bitCodeHash");
              long long v32 = v31[1];
              long long v49 = *v31;
              long long v50 = v32;
              if ((unint64_t)[v27 count] >= 2)
              {
                unint64_t v33 = 1;
                do
                {
                  uint64_t v34 = objc_msgSend((id)objc_msgSend(v27, "objectAtIndexedSubscript:", v33), "bitCodeHash");
                  for (uint64_t k = 0; k != 32; k += 8)
                    *(void *)((char *)&v49 + k) ^= *(void *)(v34 + k);
                  unint64_t v33 = (v33 + 1);
                }
                while ([v27 count] > v33);
              }
              CC_SHA256_Update(&c, &v49, 0x20u);
            }
          }
        }
        uint64_t v23 = [v21 countByEnumeratingWithState:&v42 objects:v48 count:16];
      }
      while (v23);
    }
    a7 = *(void **)(a5 + 96);
  }
  if (a7 && [a7 count])
  {
    CC_SHA256_Update(&c, "privateFunctions", 0x10u);
    int v36 = (long long *)objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", 0), "bitCodeHash");
    long long v37 = v36[1];
    long long v49 = *v36;
    long long v50 = v37;
    if ((unint64_t)[a7 count] >= 2)
    {
      unint64_t v38 = 1;
      do
      {
        uint64_t v39 = objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", v38), "bitCodeHash");
        for (uint64_t m = 0; m != 32; m += 8)
          *(void *)((char *)&v49 + m) ^= *(void *)(v39 + m);
        unint64_t v38 = (v38 + 1);
      }
      while ([a7 count] > v38);
    }
    CC_SHA256_Update(&c, &v49, 0x20u);
  }
  if (a6)
  {
    *(void *)&long long v49 = [a6 hash];
    CC_SHA256_Update(&c, &v49, 8u);
  }
  if (useRelaxedMath())
  {
    *(void *)&long long v49 = 1;
    CC_SHA256_Update(&c, &v49, 8u);
  }
  return CC_SHA256_Final(a8, &c);
}

uint64_t MultiLevelFunctionCache::newFunctionWithKey(MultiLevelFunctionCache *this, const MTLHashKey *a2, NSString *a3)
{
  dispatch_data_t v14 = 0;
  p_var1 = &a2->var1;
  uint64_t result = [*((id *)this + 6) newSpecializedFunctionWithHash:&a2->var1 libraryPath:a3];
  if (!result)
  {
    if ([*((id *)this + 5) count])
    {
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t result = objc_msgSend((id)objc_msgSend(*((id *)this + 5), "objectAtIndexedSubscript:", v7), "newSpecializedFunctionWithHash:libraryPath:", p_var1, a3);
        if (result) {
          break;
        }
        if (++v7 >= (unint64_t)[*((id *)this + 5) count]) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      if ((*(uint64_t (**)(MultiLevelFunctionCache *))(*(void *)this + 120))(this)) {
        return 0;
      }
      MultiLevelCacheBase::getElement(this, p_var1, &v14);
      uint64_t v11 = v14;
      if (!v14)
      {
        return 0;
      }
      else
      {
        uint64_t v12 = MTLLibraryBuilder::newLibraryWithData(*(void *)(*((void *)this + 7) + 424), *((_MTLDevice **)this + 7), v14, (uint64_t)a3, 0, v8, v9, v10);
        uint64_t v13 = [(_MTLLibrary *)v12 newFunctionWithName:[(NSArray *)[(_MTLLibrary *)v12 functionNames] objectAtIndex:0]];

        dispatch_release(v11);
        return v13;
      }
    }
  }
  return result;
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithData(uint64_t a1, _MTLDevice *a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a5) {
    *a5 = 0;
  }
  if (!a2)
  {
    unint64_t v18 = @"device must not be nil.";
    unint64_t v19 = 0;
    uint64_t v20 = 6266;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v18 = @"device is not a MTLDevice.";
    unint64_t v19 = 1;
    uint64_t v20 = 6269;
LABEL_9:
    MTLReportFailure(v19, "newLibraryWithData", v20, (uint64_t)v18, (uint64_t)a5, a6, a7, a8, v23);
    if (a3) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  if (a3)
  {
LABEL_6:
    uint64_t v13 = _MTLGetLibrariesCache(a2);
    uint64_t v23 = 0;
    buffer_ptr = 0;
    map = dispatch_data_create_map(a3, (const void **)&buffer_ptr, (size_t *)&v23);
    uint64_t v15 = buffer_ptr;
    CC_LONG v16 = v23;
    *(_OWORD *)md = 0u;
    long long v30 = 0u;
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, v15, v16);
    CC_SHA256_Final(md, &c);
    dispatch_release(map);
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    long long v27 = *(_OWORD *)md;
    v26[2] = ___ZN17MTLLibraryBuilder18newLibraryWithDataEPU19objcproto9MTLDevice11objc_objectPU27objcproto16OS_dispatch_data8NSObjectP8NSStringPP7NSError_block_invoke;
    void v26[3] = &unk_1E52210B0;
    v26[7] = a1;
    v26[8] = v13;
    long long v28 = v30;
    v26[4] = a3;
    v26[5] = a4;
    v26[6] = a2;
    return MTLLibraryBuilder::newLibraryWithArchive(a1, (long long *)md, a5, (uint64_t)v26);
  }
LABEL_10:
  if (!a5) {
    return 0;
  }
  uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"data should not be null" forKey:*MEMORY[0x1E4F28568]];
  id v22 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v21];
  uint64_t result = 0;
  *a5 = v22;
  return result;
}

uint64_t MultiLevelAirCache::failOnBinaryArchiveMiss(MultiLevelAirCache *this)
{
  return (*((unsigned __int8 *)this + 32) >> 1) & 1;
}

void MultiLevelCacheFactory::createFunctionCache(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count_vtbl *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, void *a7@<X8>)
{
  dispatch_data_t v14 = (std::__shared_weak_count *)operator new(0x58uLL);
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7578;
  v14[1].__shared_weak_owners_ = 0;
  v14[2].__vftable = 0;
  LODWORD(v14[2].__shared_owners_) = 0;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC6198;
  v14[1].__shared_owners_ = 0;
  v14[3].__vftable = a3;
  v14[3].__shared_owners_ = a1;
  v14[2].__shared_weak_owners_ = a2;
  if (MultiLevelCacheBase::initialize((uint64_t)&v14[1], a4, a5, a6))
  {
    *a7 = v14 + 1;
    a7[1] = v14;
  }
  else
  {
    *a7 = 0;
    a7[1] = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_18271D500(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithArchive(uint64_t a1, long long *a2, void *a3, uint64_t a4)
{
  char v17 = 0;
  uint64_t v8 = MTLLibraryBuilder::findOrCreateLibraryContainer((os_unfair_lock_s *)a1, a2, &v17);
  uint64_t v9 = (MTLLibraryContainer *)v8;
  if (!v17)
  {
    dispatch_group_wait(*(dispatch_group_t *)(v8 + 80), 0xFFFFFFFFFFFFFFFFLL);
    if (v9->var3)
    {
      dispatch_data_t v14 = [[_MTLLibrary alloc] initWithLibraryContainer:v9 device:*(void *)(a1 + 32)];
      if (!a3) {
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_data_t v14 = 0;
      if (!a3) {
        goto LABEL_14;
      }
    }
LABEL_13:
    *a3 = (id)[v9->var8 copy];
LABEL_14:
    MTLLibraryBuilder::releaseCacheEntry((MTLLibraryBuilder *)a1, v9);
    return v14;
  }
  uint64_t v10 = _MTLGetLibrariesCache(*(_MTLDevice **)(a1 + 32));
  CC_LONG v16 = 0;
  uint64_t v11 = MTLLibraryCache::newLibraryData(v10, a2, (uint64_t)&v16, a4);
  if (v11)
  {
    uint64_t v12 = (MTLLibraryData *)v11;
    uint64_t v13 = (NSMutableDictionary *)objc_opt_new();
    MTLLibraryContainer::init(v9, v12, v13, 0, v16);
    if (v9->var3) {
      dispatch_data_t v14 = [[_MTLLibrary alloc] initWithLibraryContainer:v9 device:*(void *)(a1 + 32)];
    }
    else {
      dispatch_data_t v14 = 0;
    }

    (*(void (**)(MTLLibraryData *))(*(void *)v12 + 24))(v12);
    if (!a3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  MTLLibraryContainer::init(v9, 0, 0, 0, v16);
  if (a3) {
    *a3 = (id)[v9->var8 copy];
  }
  MTLLibraryBuilder::releaseCacheEntry((MTLLibraryBuilder *)a1, v9);
  return 0;
}

void MTLCachedLibraryData::release(MTLLibraryData *this)
{
}

uint64_t _MTLGetLibrariesCache(_MTLDevice *a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZL21_MTLGetLibrariesCacheP10_MTLDevice_block_invoke;
  block[3] = &unk_1E521F9E8;
  void block[4] = a1;
  if (_MTLGetLibrariesCache(_MTLDevice *)::onceToken != -1) {
    dispatch_once(&_MTLGetLibrariesCache(_MTLDevice *)::onceToken, block);
  }
  return _MTLGetLibrariesCache(_MTLDevice *)::gLibrariesCache;
}

void MTLLibraryBuilder::releaseCacheEntry(MTLLibraryBuilder *this, MTLLibraryContainer *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)this);
  if (!MTLAtomicDecrement(&a2->var1))
  {
    long long v4 = *(_OWORD *)&a2->var2.var0[16];
    v6[0] = *(_OWORD *)a2->var2.var0;
    v6[1] = v4;
    id v5 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>((uint64_t)this + 8, (unsigned int *)v6);
    if ((uint64_t *)((char *)this + 16) != v5)
    {
      std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__remove_node_pointer((uint64_t **)this + 1, v5);
      operator delete(v5);
    }
    MTLLibraryContainer::~MTLLibraryContainer(a2);
    MEMORY[0x18530C140]();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this);
}

void sub_18271D94C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLLibraryCache::releaseLibraryData(os_unfair_lock_s *this, MTLLibraryData *a2)
{
  os_unfair_lock_lock(this);
  MTLCachedLibraryData::trueRelease((atomic_uint *)a2);

  os_unfair_lock_unlock(this);
}

void sub_18271D9A8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLCachedLibraryData::trueRelease(atomic_uint *this)
{
  uint64_t result = MTLAtomicDecrement(this + 20);
  if (this && !result)
  {
    uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)this + 8);
    return v3(this);
  }
  return result;
}

uint64_t MTLAtomicDecrement(atomic_uint *a1)
{
  return atomic_fetch_add(a1, 0xFFFFFFFF) - 1;
}

uint64_t *std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    long long v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      long long v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    long long v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      long long v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    id v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      CC_LONG v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        CC_LONG v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    CC_LONG v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    char v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      char v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    char v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void MTLLibraryContainer::init(MTLLibraryContainer *this, MTLLibraryData *a2, NSMutableDictionary *a3, NSArray *a4, NSError *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  this->var3 = a2;
  if (a2) {
    (*(void (**)(MTLLibraryData *))(*(void *)a2 + 16))(a2);
  }
  this->var4 = a3;
  if (a4)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v9 = [(NSArray *)a4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (!v9) {
      goto LABEL_16;
    }
    uint64_t v10 = v9;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(a4);
        }
        if (objc_msgSend((id)objc_msgSend(this->var4, "objectForKey:", *(void *)(*((void *)&v15 + 1) + 8 * i)), "functionType") == 4)++v11; {
      }
        }
      uint64_t v10 = [(NSArray *)a4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v10);
    if (v11)
    {
      if (v11 == [(NSArray *)a4 count])
      {
        this->var6 = a4;
        this->var5 = objc_alloc_init(MEMORY[0x1E4F1C978]);
      }
      else
      {
        uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Compiler found unsupported library with both qualified functions and extern functions" forKey:*MEMORY[0x1E4F28568]];
        this->var8 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:2 userInfo:v14];
      }
    }
    else
    {
LABEL_16:
      this->var5 = a4;
      this->var6 = objc_alloc_init(MEMORY[0x1E4F1C978]);
    }
  }
  if (!this->var8) {
    this->var8 = a5;
  }
  dispatch_group_leave((dispatch_group_t)this->var7);
}

uint64_t MTLLibraryCache::newLibraryData(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  long long v8 = a2[1];
  long long v14 = *a2;
  long long v15 = v8;
  uint64_t v9 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(a1 + 8, (unsigned int *)&v14);
  if ((uint64_t *)(a1 + 16) == v9)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, a3);
    if (v10)
    {
      long long v11 = a2[1];
      long long v14 = *a2;
      long long v15 = v11;
      uint64_t v13 = &v14;
      *((void *)std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__emplace_unique_key_args<MTLLibraryIdentifier,std::piecewise_construct_t const&,std::tuple<MTLLibraryIdentifier&&>,std::tuple<>>((uint64_t **)(a1 + 8), (unsigned int *)&v14, (uint64_t)&std::piecewise_construct, &v13)+ 8) = v10;
    }
  }
  else
  {
    uint64_t v10 = v9[8];
    (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return v10;
}

void sub_18271E214(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryBuilder::findOrCreateLibraryContainer(os_unfair_lock_s *a1, _OWORD *a2, unsigned char *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock(a1);
  long long v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  uint64_t v7 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>((uint64_t)&a1[2], (unsigned int *)v10);
  if (&a1[4] == (os_unfair_lock_s *)v7 || (uint64_t v8 = v7[8]) == 0) {
    operator new();
  }
  MTLAtomicIncrement((atomic_uint *)(v8 + 8));
  *a3 = 0;
  os_unfair_lock_unlock(a1);
  return v8;
}

void sub_18271E370(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t result = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__lower_bound<MTLLibraryIdentifier>(a1, a2, *(uint64_t **)(a1 + 8), (uint64_t *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  unsigned int v5 = *((_DWORD *)result + 8);
  if (*a2 < v5) {
    return v3;
  }
  if (*a2 <= v5)
  {
    for (unint64_t i = 0; i != 7; ++i)
    {
      unsigned int v7 = a2[i + 1];
      unsigned int v8 = *((_DWORD *)result + i + 9);
      if (v7 < v8)
      {
        if (i <= 6) {
          return v3;
        }
        return result;
      }
      if (v7 > v8) {
        return result;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__lower_bound<MTLLibraryIdentifier>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unsigned int v7 = *a2;
    unsigned int v5 = a2 + 1;
    unsigned int v6 = v7;
    do
    {
      unsigned int v8 = *((_DWORD *)a3 + 8);
      if (v8 >= v6)
      {
        if (v8 <= v6)
        {
          unint64_t v9 = 0;
          while (v9 != 7)
          {
            unsigned int v10 = *((_DWORD *)a3 + v9 + 9);
            unsigned int v11 = v5[v9];
            if (v10 < v11)
            {
              if (v9 < 7) {
                ++a3;
              }
              else {
                uint64_t result = a3;
              }
              goto LABEL_11;
            }
            ++v9;
            if (v10 > v11) {
              break;
            }
          }
        }
        uint64_t result = a3;
      }
      else
      {
        ++a3;
      }
LABEL_11:
      a3 = (uint64_t *)*a3;
    }
    while (a3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__emplace_unique_key_args<MTLLibraryIdentifier,std::piecewise_construct_t const&,std::tuple<MTLLibraryIdentifier&&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _OWORD **a4)
{
  unsigned int v6 = (void **)std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__find_equal<MTLLibraryIdentifier>((uint64_t)a1, &v11, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    unsigned int v7 = operator new(0x48uLL);
    long long v9 = (*a4)[1];
    v7[2] = **a4;
    v7[3] = v9;
    *((void *)v7 + 8) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__find_equal<MTLLibraryIdentifier>(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v8 = *a3;
    unsigned int v6 = a3 + 1;
    unsigned int v7 = v8;
    while (1)
    {
      while (1)
      {
        long long v9 = (void *)v4;
        unsigned int v10 = *(_DWORD *)(v4 + 32);
        if (v7 >= v10) {
          break;
        }
LABEL_4:
        uint64_t v4 = *v9;
        uint64_t result = v9;
        if (!*v9) {
          goto LABEL_23;
        }
      }
      if (v7 <= v10)
      {
        unint64_t v11 = 0;
        while (v11 != 7)
        {
          unsigned int v12 = v6[v11];
          unsigned int v13 = *((_DWORD *)v9 + v11 + 9);
          if (v12 < v13)
          {
            if (v11 <= 6) {
              goto LABEL_4;
            }
            break;
          }
          ++v11;
          if (v12 > v13) {
            break;
          }
        }
        if (v7 <= v10) {
          break;
        }
      }
LABEL_20:
      uint64_t result = v9 + 1;
      uint64_t v4 = v9[1];
      if (!v4) {
        goto LABEL_23;
      }
    }
    unint64_t v14 = 0;
    while (v14 != 7)
    {
      unsigned int v15 = *((_DWORD *)v9 + v14 + 9);
      unsigned int v16 = v6[v14];
      if (v15 < v16)
      {
        if (v14 > 6) {
          break;
        }
        goto LABEL_20;
      }
      ++v14;
      if (v15 > v16) {
        break;
      }
    }
  }
  else
  {
    long long v9 = result;
  }
LABEL_23:
  *a2 = v9;
  return result;
}

void ___ZN17MTLLibraryBuilder18newLibraryWithDataEPU19objcproto9MTLDevice11objc_objectPU27objcproto16OS_dispatch_data8NSObjectP8NSStringPP7NSError_block_invoke()
{
}

void sub_18271E67C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C4047F5CA44);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::parseArchive(os_unfair_lock_s *a1, NSError **a2, int a3, void *a4)
{
  unsigned int v8 = a1 + 21;
  os_unfair_lock_lock(a1 + 21);
  uint64_t v9 = MTLLibraryDataWithArchive::parseArchiveSync((uint64_t)a1, a2, a3, a4);
  os_unfair_lock_unlock(v8);
  return v9;
}

void sub_18271E70C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *LibraryWithData::LibraryWithData(void *a1, uint64_t a2, long long *a3, NSObject *a4, void *a5)
{
  unsigned int v7 = (void *)MTLLibraryDataWithArchive::MTLLibraryDataWithArchive((uint64_t)a1, a2, a3, a5);
  *unsigned int v7 = &unk_1ECAC5690;
  v7[83] = 0;
  v7[84] = a4;
  dispatch_retain(a4);
  buffer_ptr = 0;
  a1[85] = dispatch_data_create_map(a4, (const void **)&buffer_ptr, a1 + 82);
  a1[81] = buffer_ptr;
  return a1;
}

uint64_t MTLLibraryDataWithArchive::MTLLibraryDataWithArchive(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  *(void *)a1 = &unk_1ECAC5530;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  long long v5 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = a2;
  *(void *)a1 = &unk_1ECAC63D0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = a1 + 408;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + 512) = 1065353216;
  *(unsigned char *)(a1 + 616) = 0;
  *(void *)(a1 + 620) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = a4;
  id v6 = a4;
  return a1;
}

void sub_18271E8BC(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1 + 440);
  unsigned int v8 = *(std::__shared_weak_count **)(v1 + 432);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(v4, *(void **)(v1 + 408));
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v1 + 280);
  MTLCachedLibraryData::~MTLCachedLibraryData((MTLCachedLibraryData *)v1);
  _Unwind_Resume(a1);
}

void MTLLibraryContainer::~MTLLibraryContainer(MTLLibraryContainer *this)
{
  [this->var4 removeAllObjects];

  this->var4 = 0;
  this->var5 = 0;

  this->var6 = 0;
  var3 = this->var3;
  if (var3) {
    (*(void (**)(MTLLibraryData *))(*(void *)var3 + 24))(var3);
  }

  dispatch_release((dispatch_object_t)this->var7);
}

void sub_18271EE48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::functionNames(os_unfair_lock_s *this)
{
  return *(void *)&this[32]._os_unfair_lock_opaque;
}

void MTLLibraryDataWithArchive::allocateFunctionNames(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 21;
  os_unfair_lock_lock(this + 21);
  if (!*(void *)&this[32]._os_unfair_lock_opaque) {
    operator new[]();
  }

  os_unfair_lock_unlock(v2);
}

void sub_18271F0B0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void LibraryWithData::~LibraryWithData(dispatch_object_t *this)
{
  LibraryWithData::~LibraryWithData(this);

  JUMPOUT(0x18530C140);
}

{
  uint64_t vars8;

  *this = (dispatch_object_t)&unk_1ECAC5690;
  dispatch_release(this[85]);
  dispatch_release(this[84]);

  MTLLibraryDataWithArchive::~MTLLibraryDataWithArchive((id *)this);
}

void MTLCachedLibraryData::~MTLCachedLibraryData(MTLCachedLibraryData *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1ECAC5B90;
  uint64_t v2 = *((void *)this + 18);
  long long v3 = *(_OWORD *)((char *)this + 24);
  v4[0] = *(_OWORD *)((char *)this + 8);
  v4[1] = v3;
  MTLLibraryCache::removeLibraryData(v2, v4);

  *((void *)this + 17) = 0;
  *((void *)this + 12) = 0;

  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;

  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;

  MTLLibraryData::~MTLLibraryData((MTLLibraryData *)this);
}

void sub_18271F274(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void MTLLibraryCache::removeLibraryData(uint64_t a1, _OWORD *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v3 = (uint64_t **)(a1 + 8);
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  uint64_t v5 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(a1 + 8, (unsigned int *)v6);
  if ((uint64_t *)(a1 + 16) != v5)
  {
    std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__remove_node_pointer(v3, v5);
    operator delete(v5);
  }
}

void ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke_2()
{
}

void sub_18271FA40(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C4047F5CA44);
  _Unwind_Resume(a1);
}

void LibraryWithFile::~LibraryWithFile(LibraryWithFile *this)
{
  LibraryWithFile::~LibraryWithFile(this);

  JUMPOUT(0x18530C140);
}

{
  FILE *v2;

  *(void *)this = &unk_1ECAC57F8;
  uint64_t v2 = (FILE *)*((void *)this + 81);
  if (v2)
  {
    fileno(v2);
    change_fdguard_np();
    uint64_t v2 = (FILE *)*((void *)this + 81);
  }
  fclose(v2);
  *((void *)this + 81) = 0;
  MTLLibraryDataWithArchive::~MTLLibraryDataWithArchive((id *)this);
}

uint64_t MultiLevelCacheBase::failOnFSCacheMiss(MultiLevelCacheBase *this)
{
  return (*((unsigned __int8 *)this + 32) >> 2) & 1;
}

NSString *MTLCompilerFunctionRequest::setSpecializedName(MTLCompilerFunctionRequest *this, NSString *a2)
{
  id var15 = this->var15;
  if (var15) {

  }
  uint64_t result = a2;
  this->id var15 = result;
  return result;
}

MTLCompilerFunctionRequest *MTLCompilerFunctionRequest::setFunction(MTLCompilerFunctionRequest *this, _MTLFunction *a2)
{
  var4 = (_MTLFunction *)this->var4;
  if (var4 != a2)
  {
    long long v4 = this;
    if (var4) {

    }
    this = a2;
    v4->var4 = this;
  }
  return this;
}

uint64_t MultiLevelBinaryCache::getElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = [[MTLBinaryKey alloc] initWithHash:a2];
  uint64_t v6 = (*(uint64_t (**)(uint64_t, MTLBinaryKey *, uint64_t))(*(void *)a1 + 112))(a1, v5, a3);

  return v6;
}

void MTLLibraryData::~MTLLibraryData(MTLLibraryData *this)
{
  *(void *)this = &unk_1ECAC5530;

  *((void *)this + 11) = 0;
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 40);
}

void MTLLibraryDataWithArchive::~MTLLibraryDataWithArchive(id *this)
{
  *this = &unk_1ECAC63D0;

  this[31] = 0;
  for (dispatch_object_t i = (dispatch_object_t)this[47]; i; dispatch_object_t i = (dispatch_object_t)i->isa)
    dispatch_release((dispatch_object_t)i[5].isa);
  long long v3 = this[79];
  if (v3) {
    dispatch_release(v3);
  }

  this[32] = 0;
  this[33] = 0;

  this[34] = 0;
  this[80] = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)(this + 60));
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)(this + 55));
  long long v4 = (std::__shared_weak_count *)this[54];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)(this + 50), this[51]);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)(this + 45));
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)(this + 40));
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)(this + 35));

  MTLCachedLibraryData::~MTLCachedLibraryData((MTLCachedLibraryData *)this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      long long v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(a1, *a2);
    std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_182721F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, MTLHashKey *a19, std::__shared_weak_count *a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22)
{
  _Block_object_dispose((const void *)(v22 - 224), 8);
  MTLHashKey::~MTLHashKey(a19);
  std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  if (STACK[0x2A8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2A8]);
  }
  _Block_object_dispose((const void *)(v22 - 256), 8);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType&&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_182722374(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void ContextStack::~ContextStack(ContextStack *this)
{
  for (dispatch_object_t i = (id *)((char *)this + 32); ; i[3])
  {
    dispatch_object_t i = (id *)*i;
    if (!i) {
      break;
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 16);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *FunctionHashFactory::createHash(uint64_t a1, int a2, dispatch_data_t data, NSObject *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  size_t size_ptr = 0;
  buffer_ptr = 0;
  if (data) {
    unint64_t v8 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  }
  else {
    unint64_t v8 = 0;
  }
  size_t v23 = 0;
  uint64_t v24 = 0;
  if (a4)
  {
    uint8x8_t v9 = dispatch_data_create_map(a4, (const void **)&v24, &v23);
    size_t v11 = v23;
    unsigned int v10 = v24;
  }
  else
  {
    size_t v11 = 0;
    unsigned int v10 = 0;
    uint8x8_t v9 = 0;
  }
  Hash = (void *)FunctionHashFactory::createHash(a1, a2, buffer_ptr, size_ptr, v10, v11);
  if (v8) {
    dispatch_release(v8);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (*(unsigned char *)(a1 + 104))
  {
    if (a2) {
      float v13 = FunctionHashFactory::functionHashStringForType(a1, a2);
    }
    else {
      float v13 = "function binary";
    }
    if (!((unint64_t)data | (unint64_t)a4))
    {
      unint64_t v16 = 0;
LABEL_23:
      uint64_t v17 = *(void *)(a1 + 112);
      size_t v18 = (_OWORD *)[Hash value];
      long long v19 = v18[1];
      v27[0] = *v18;
      v27[1] = v19;
      uint64_t v20 = _MTLRequestHashToString((uint64_t)v27);
      if (v16) {
        unint64_t v21 = (const char *)[v16 UTF8String];
      }
      else {
        unint64_t v21 = "";
      }
      NSLog(&cfstr_HashForSHashS.isa, v17, v13, v20, v21);
      return Hash;
    }
    if (data)
    {
      _MTLHashForData(data, v29);
      float v14 = (__CFString *)_MTLRequestHashToString((uint64_t)v29);
      if (a4)
      {
LABEL_18:
        _MTLHashForData(a4, v28);
        BOOL v15 = (__CFString *)_MTLRequestHashToString((uint64_t)v28);
LABEL_22:
        unint64_t v16 = (void *)[NSString stringWithFormat:@"[driver key(%@), framework key(%@)]", v14, v15];
        goto LABEL_23;
      }
    }
    else
    {
      float v14 = @"<null>";
      if (a4) {
        goto LABEL_18;
      }
    }
    BOOL v15 = @"<null>";
    goto LABEL_22;
  }
  return Hash;
}

uint64_t MultiLevelCacheBase::getElement(void *a1, _OWORD *a2, dispatch_data_t *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  size_t v10 = 0;
  size_t v11 = 0;
  uint64_t v6 = a1[1];
  if (v6)
  {
    long long v7 = a2[1];
    v13[0] = *a2;
    v13[1] = v7;
    if ((*(unsigned int (**)(uint64_t, _OWORD *, const void **, size_t *))(*(void *)v6 + 32))(v6, v13, &v11, &v10))
    {
      goto LABEL_7;
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 24))(a1)) {
    return 0;
  }
  uint64_t result = a1[2];
  if (result)
  {
    long long v9 = a2[1];
    v12[0] = *a2;
    v12[1] = v9;
    uint64_t result = (*(uint64_t (**)(uint64_t, _OWORD *, const void **, size_t *))(*(void *)result + 32))(result, v12, &v11, &v10);
    if (result)
    {
LABEL_7:
      *a3 = dispatch_data_create(v11, v10, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);
      return 1;
    }
  }
  return result;
}

uint64_t MultiLevelBinaryCache::getElement(void *a1, void *a2, dispatch_data_t *a3)
{
  if (*((unsigned char *)a1 + 48)) {
    NSLog(&cfstr_LookingForFunc.isa, [a2 description]);
  }
  for (unint64_t i = 0; i < [(id)a1[5] count]; ++i)
  {
    if (objc_msgSend((id)objc_msgSend((id)a1[5], "objectAtIndexedSubscript:", i), "supportsAIRNT")) {
      long long v7 = 0;
    }
    else {
      long long v7 = objc_msgSend((id)objc_msgSend((id)a1[5], "objectAtIndexedSubscript:", i), "getBinaryDataForKey:reflectionType:", a2, 0);
    }
    if (v7)
    {
      unint64_t v8 = [v7 data];
      *a3 = v8;
      dispatch_retain(v8);
      return 1;
    }
  }
  if ((*(uint64_t (**)(void *))(*a1 + 88))(a1)) {
    return 0;
  }
  size_t v10 = (_OWORD *)[a2 value];

  return MultiLevelCacheBase::getElement(a1, v10, a3);
}

uint64_t MultiLevelBinaryCache::failOnBinaryArchiveMiss(MultiLevelBinaryCache *this)
{
  return (*((unsigned __int8 *)this + 32) >> 1) & 1;
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 24);
}

uint64_t MTLPipelineDataCache::getElement(uint64_t a1, _OWORD *a2, void *a3, void *a4)
{
  unint64_t v8 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  long long v9 = operator new(0x28uLL);
  __p = v9;
  long long v17 = xmmword_1828D4980;
  long long v10 = a2[1];
  *long long v9 = *a2;
  v9[1] = v10;
  *((unsigned char *)v9 + 32) = 0;
  size_t v11 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((void *)(a1 + 64), (unsigned __int8 *)&__p);
  unint64_t v12 = v11;
  if (v11)
  {
    float v13 = malloc_type_malloc(*((void *)v11 + 5), 0x79B4D9F0uLL);
    *a3 = v13;
    memcpy(v13, *((const void **)v12 + 7), *((void *)v12 + 5));
    *a4 = *((void *)v12 + 5);
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v8);
  return v14;
}

void sub_182722A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  size_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(v12, v11 + 16, a2))return v11; {
      }
        }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      size_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  long long v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    long long v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t MTLGetCompilerOptions(void *a1, unint64_t a2, unsigned int a3, unint64_t a4, int a5)
{
  if ((a2 & 0x200000) != 0) {
    int v7 = 129;
  }
  else {
    int v7 = 0;
  }
  unsigned int v26 = a2 >> 2;
  unsigned int v8 = (a2 >> 10) & 0x100 | v7;
  int v9 = (a2 >> 22) & 1 | _MTLCompilePerformanceStatisticsEnabled();
  BOOL v10 = v9 == 0;
  if (v9) {
    int v11 = v8 | 0x200;
  }
  else {
    int v11 = v8;
  }
  if (v10) {
    unint64_t v12 = 0xFFFFFFFD28C7FFFBLL;
  }
  else {
    unint64_t v12 = 0xFFFFFFFD2887FFFBLL;
  }
  if ((a2 & 0x80000) != 0) {
    v11 |= 0x11u;
  }
  if ((a2 & 0x100000) != 0) {
    int v13 = v11 | 0x21;
  }
  else {
    int v13 = v11;
  }
  int v14 = [a1 supportsFamily:1005];
  uint64_t v15 = 65539;
  if (!v14) {
    uint64_t v15 = v12;
  }
  int v16 = (a2 >> 9) & 0x80000 | (a2 >> 12) & 0x1000 | ((v26 & 1) << 14) | (a2 >> 9) & 0x10000 | (a2 >> 13) & 0x2000 | (a2 >> 30 << 24) | (a2 >> 3) & 0x40000000 | ((v15 & a2) != 0) | v13;
  if (a1)
  {
    if ([a1 supportsVertexAmplification]) {
      int v17 = 1024;
    }
    else {
      int v17 = 2048;
    }
    int v18 = v17 | v16;
    if ([a1 supportsUnalignedVertexFetch]) {
      int v16 = v18 | 0x20000;
    }
    else {
      int v16 = v18;
    }
    if ([a1 requiresRaytracingEmulation]
      && [a1 supportsRaytracing])
    {
      v16 |= 0x40000u;
    }
    unint64_t v19 = a4;
    if (a4 <= 1 && ((v16 & 0x80) == 0 || ([a1 supportsTLS] & 1) == 0)) {
      v16 |= 0x400000u;
    }
    if ([a1 supportsBfloat16Buffers]
      && [a1 requiresBFloat16Emulation])
    {
      v16 |= 0x80000000;
    }
  }
  else
  {
    unint64_t v19 = a4;
  }
  int v20 = v16 | 2;
  if (!a5) {
    int v20 = v16;
  }
  uint64_t v21 = (a3 << 13) & 0x200000 | (((a3 >> 7) & 1) << 15) & 0xFF7FFFFF | (((a3 >> 9) & 1) << 23) | v20;
  if (v19 == 1)
  {
    if (![a1 supportsGlobalVariableRelocationCompute]) {
      return v21;
    }
    return v21 | 0x4000000;
  }
  if (!v19 && ([a1 supportsGlobalVariableRelocationRender] & 1) != 0) {
    return v21 | 0x4000000;
  }
  return v21;
}

uint64_t _MTLCompilePerformanceStatisticsEnabled()
{
  if (_MTLCompilePerformanceStatisticsEnabled::onceToken != -1) {
    dispatch_once(&_MTLCompilePerformanceStatisticsEnabled::onceToken, &__block_literal_global_1649);
  }
  return _collectCompilePerformanceStats;
}

uint64_t std::__shared_ptr_emplace<MultiLevelBinaryFSCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void MultiLevelCacheFactory::createBinaryCache(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, std::__shared_weak_count **a6@<X8>)
{
  if (a2)
  {
    if ([a2 supportsAIRNT])
    {
      unint64_t v12 = (std::__shared_weak_count *)operator new(0x58uLL);
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC75B0;
      int v13 = v12 + 1;
      v12[1].__shared_weak_owners_ = 0;
      v12[2].__vftable = 0;
      LODWORD(v12[2].__shared_owners_) = 0;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC65E0;
      v12[1].__shared_owners_ = 0;
      v12[3].__shared_owners_ = (uint64_t)a2;
      BOOL v14 = MultiLevelBinaryCache::initialize((uint64_t)&v12[1], a1, a3, a4, a5);
      goto LABEL_8;
    }
    if (([a2 supportsAIRNT] & 1) == 0)
    {
      unint64_t v12 = (std::__shared_weak_count *)operator new(0x58uLL);
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC75E8;
      int v13 = v12 + 1;
      v12[1].__shared_weak_owners_ = 0;
      v12[2].__vftable = 0;
      LODWORD(v12[2].__shared_owners_) = 0;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC66D8;
      v12[1].__shared_owners_ = 0;
      v12[3].__shared_owners_ = (uint64_t)a2;
      BOOL v14 = MultiLevelBinaryCache::initialize((uint64_t)&v12[1], a1, a3, a4, a5);
LABEL_8:
      if (v14)
      {
        *a6 = v13;
        goto LABEL_10;
      }
      goto LABEL_11;
    }
  }
  unint64_t v12 = (std::__shared_weak_count *)operator new(0x50uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7540;
  v12[1].__shared_weak_owners_ = 0;
  v12[2].__vftable = 0;
  LODWORD(v12[2].__shared_owners_) = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC60C8;
  v12[1].__shared_owners_ = 0;
  if (MultiLevelBinaryFSCache::initialize((uint64_t)&v12[1], a1, a3, a4, a5))
  {
    *a6 = v12 + 1;
LABEL_10:
    a6[1] = v12;
    return;
  }
LABEL_11:
  *a6 = 0;
  a6[1] = 0;

  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
}

void sub_182723114(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL MultiLevelCacheBase::initialize(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  *(_DWORD *)(a1 + 32) = a4;
  if (!a2) {
    goto LABEL_5;
  }
  if (_MTLDebugIgnorePrecompiledBinaries(void)::onceToken != -1) {
    dispatch_once(&_MTLDebugIgnorePrecompiledBinaries(void)::onceToken, &__block_literal_global);
  }
  if (_MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries)
  {
LABEL_5:
    *(void *)(a1 + 8) = a3;
    *(void *)(a1 + 16) = 0;
LABEL_6:
    *(void *)(a1 + 24) = a3;
    goto LABEL_7;
  }
  uint64_t v8 = [a2 cache];
  int v9 = *(_DWORD *)(a1 + 32);
  int v10 = v9 | [a2 disableRunTimeCompilation];
  *(_DWORD *)(a1 + 32) = v10;
  if (!v8)
  {
    if (v10)
    {
      BOOL v11 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v11) {
        return result;
      }
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "The pipeline library's cache is nil, but disableRunTimeCompilation was set. Cache lookups will always fail.", v12, 2u);
      return 0;
    }
    goto LABEL_5;
  }
  *(void *)(a1 + 8) = v8;
  if (![a2 writable])
  {
    *(void *)(a1 + 16) = a3;
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = [a2 cache];
  *(_DWORD *)(a1 + 32) &= ~1u;
LABEL_7:
  if (!*(void *)(a1 + 8))
  {
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    MultiLevelCacheBase::initialize();
    return 0;
  }
  if (_MTLDebugIgnoreFailOnMissFlag()) {
    *(_DWORD *)(a1 + 32) &= 4u;
  }
  return 1;
}

BOOL _MTLDebugIgnoreFailOnMissFlag(void)
{
  if (_MTLDebugIgnoreFailOnMissFlag(void)::onceToken != -1) {
    dispatch_once(&_MTLDebugIgnoreFailOnMissFlag(void)::onceToken, &__block_literal_global_8);
  }
  if (_MTLDebugIgnoreFailOnMissFlag(void)::ignoreFailOnMiss) {
    return 1;
  }
  if (_MTLDebugIgnorePrecompiledBinaries(void)::onceToken != -1) {
    dispatch_once(&_MTLDebugIgnorePrecompiledBinaries(void)::onceToken, &__block_literal_global);
  }
  return _MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries != 0;
}

BOOL MultiLevelBinaryFSCache::initialize(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  *(void *)(a1 + 40) = a2;
  if (_MTLDebugShouldLogKeys(void)::onceToken != -1) {
    dispatch_once(&_MTLDebugShouldLogKeys(void)::onceToken, &__block_literal_global_11);
  }
  *(unsigned char *)(a1 + 48) = _MTLDebugShouldLogKeys(void)::shouldLogHashKeys;

  return MultiLevelCacheBase::initialize(a1, a3, a4, a5);
}

BOOL MultiLevelBinaryCache::getElement(uint64_t a1, void *a2, dispatch_object_t *a3, dispatch_object_t *a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 48)) {
    NSLog(&cfstr_LookingForFunc.isa, [a2 description]);
  }
  unint64_t v10 = 0;
  while (1)
  {
    unint64_t v11 = v10;
    unint64_t v12 = [*(id *)(a1 + 40) count];
    if (v11 >= v12) {
      break;
    }
    if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v11), "supportsAIRNT"))int v13 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v11), "getBinaryDataForKey:reflectionType:", a2, a5); {
    else
    }
      int v13 = 0;
    unint64_t v10 = v11 + 1;
    if (v13)
    {
      *a3 = (dispatch_object_t)[v13 data];
      *a4 = (dispatch_object_t)[v13 reflectionBlock];
      dispatch_retain(*a3);
      dispatch_retain(*a4);
      return v11 < v12;
    }
  }
  return v11 < v12;
}

uint64_t MultiLevelCacheBase::failOnPipelineCacheMiss(MultiLevelCacheBase *this)
{
  return *((_DWORD *)this + 8) & 1;
}

CC_SHA256_CTX *FunctionHashFactory::FunctionHashFactory(CC_SHA256_CTX *a1, void *a2, uint64_t a3, int a4, void *a5, void *a6, void *a7)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  CC_SHA256_Init(a1);
  int v69 = (_OWORD *)(a3 + 56);
  CC_SHA256_Update(a1, (const void *)(a3 + 56), 0x20u);
  CC_SHA256_Update(a1, (const void *)objc_msgSend((id)objc_msgSend(a2, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(a2, "name"), "length"));
  MTLGPUFamily v68 = (unsigned __int8 *)(a3 + 88);
  CC_SHA256_Update(a1, (const void *)(a3 + 88), 1u);
  unint64_t data = a4 & 0xC7DC1C98;
  CC_SHA256_Update(a1, &data, 8u);
  GPUCompilerSPIOptionsMasuint64_t k = FunctionHashFactory::getGPUCompilerSPIOptionsMask((uint64_t)a1, a5);
  if (GPUCompilerSPIOptionsMask) {
    CC_SHA256_Update(a1, &GPUCompilerSPIOptionsMask, 4u);
  }
  __p = 0;
  uint64_t v82 = 0;
  unint64_t v83 = 0;
  if (!a6)
  {
    uint64_t v14 = 0;
    if (a7) {
      goto LABEL_5;
    }
LABEL_7:
    uint64_t v15 = 0;
    goto LABEL_8;
  }
  uint64_t v14 = [a6 count];
  if (!a7) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v15 = [a7 count];
LABEL_8:
  std::vector<MTLUINT256_t>::reserve(&__p, v15 + v14);
  int v70 = a1;
  if (a6)
  {
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    uint64_t v16 = [a6 countByEnumeratingWithState:&v77 objects:v90 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v78;
      do
      {
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (*(void *)v78 != v17) {
            objc_enumerationMutation(a6);
          }
          uint64_t v19 = [*(id *)(*((void *)&v77 + 1) + 8 * i) functionData];
          int v20 = (_OWORD *)(v19 + 56);
          uint64_t v21 = v82;
          if ((unint64_t)v82 >= v83)
          {
            uint64_t v24 = (char *)__p;
            int64_t v25 = (v82 - (unsigned char *)__p) >> 5;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 59) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v27 = v83 - (void)__p;
            if ((uint64_t)(v83 - (void)__p) >> 4 > v26) {
              unint64_t v26 = v27 >> 4;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v83, v28);
              uint64_t v24 = (char *)__p;
              uint64_t v21 = v82;
            }
            else
            {
              int v29 = 0;
            }
            long long v30 = v20[1];
            uint64_t v31 = &v29[32 * v25];
            *(_OWORD *)uint64_t v31 = *v20;
            *((_OWORD *)v31 + 1) = v30;
            if (v21 == v24)
            {
              uint64_t v34 = &v29[32 * v25];
            }
            else
            {
              long long v32 = &v29[32 * v25];
              do
              {
                long long v33 = *((_OWORD *)v21 - 1);
                uint64_t v34 = v32 - 32;
                *((_OWORD *)v32 - 2) = *((_OWORD *)v21 - 2);
                *((_OWORD *)v32 - 1) = v33;
                v21 -= 32;
                v32 -= 32;
              }
              while (v21 != v24);
            }
            size_t v23 = (unint64_t *)(v31 + 32);
            __p = v34;
            uint64_t v82 = v31 + 32;
            unint64_t v83 = (unint64_t)&v29[32 * v28];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            long long v22 = *(_OWORD *)(v19 + 72);
            *(_OWORD *)uint64_t v82 = *v20;
            *((_OWORD *)v21 + 1) = v22;
            size_t v23 = (unint64_t *)(v21 + 32);
          }
          uint64_t v82 = (char *)v23;
        }
        uint64_t v16 = [a6 countByEnumeratingWithState:&v77 objects:v90 count:16];
      }
      while (v16);
    }
  }
  if (a7)
  {
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    uint64_t v35 = [a7 countByEnumeratingWithState:&v73 objects:v89 count:16];
    if (v35)
    {
      uint64_t v36 = *(void *)v74;
      do
      {
        for (uint64_t j = 0; j != v35; ++j)
        {
          if (*(void *)v74 != v36) {
            objc_enumerationMutation(a7);
          }
          uint64_t v38 = [*(id *)(*((void *)&v73 + 1) + 8 * j) functionData];
          uint64_t v39 = (_OWORD *)(v38 + 56);
          int v40 = v82;
          if ((unint64_t)v82 >= v83)
          {
            long long v43 = (char *)__p;
            int64_t v44 = (v82 - (unsigned char *)__p) >> 5;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 59) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v46 = v83 - (void)__p;
            if ((uint64_t)(v83 - (void)__p) >> 4 > v45) {
              unint64_t v45 = v46 >> 4;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v47 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v47 = v45;
            }
            if (v47)
            {
              int v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v83, v47);
              long long v43 = (char *)__p;
              int v40 = v82;
            }
            else
            {
              int v48 = 0;
            }
            long long v49 = v39[1];
            long long v50 = &v48[32 * v44];
            *(_OWORD *)long long v50 = *v39;
            *((_OWORD *)v50 + 1) = v49;
            if (v40 == v43)
            {
              int v53 = &v48[32 * v44];
            }
            else
            {
              uint64_t v51 = &v48[32 * v44];
              do
              {
                long long v52 = *((_OWORD *)v40 - 1);
                int v53 = v51 - 32;
                *((_OWORD *)v51 - 2) = *((_OWORD *)v40 - 2);
                *((_OWORD *)v51 - 1) = v52;
                v40 -= 32;
                v51 -= 32;
              }
              while (v40 != v43);
            }
            long long v42 = (unint64_t *)(v50 + 32);
            __p = v53;
            uint64_t v82 = v50 + 32;
            unint64_t v83 = (unint64_t)&v48[32 * v47];
            if (v43) {
              operator delete(v43);
            }
          }
          else
          {
            long long v41 = *(_OWORD *)(v38 + 72);
            *(_OWORD *)uint64_t v82 = *v39;
            *((_OWORD *)v40 + 1) = v41;
            long long v42 = (unint64_t *)(v40 + 32);
          }
          uint64_t v82 = (char *)v42;
        }
        uint64_t v35 = [a7 countByEnumeratingWithState:&v73 objects:v89 count:16];
      }
      while (v35);
    }
  }
  if (__p != v82)
  {
    std::__introsort<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **,false>((unint64_t *)__p, (unint64_t *)v82, (uint64_t)&c, 126 - 2 * __clz((v82 - (unsigned char *)__p) >> 5), 1);
    CC_SHA256_Update(v70, __p, (v82 - __p) & 0xFFFFFFE0);
  }
  *(void *)v70[1].hash = 0;
  if (FunctionHashFactory::shouldLogHashKeys(void)::onceToken != -1) {
    dispatch_once(&FunctionHashFactory::shouldLogHashKeys(void)::onceToken, &__block_literal_global_1870);
  }
  int v54 = FunctionHashFactory::shouldLogHashKeys(void)::shouldLogHashKeys;
  LOBYTE(v70[1].count[0]) = FunctionHashFactory::shouldLogHashKeys(void)::shouldLogHashKeys;
  if (v54)
  {
    *(void *)v70[1].hash = (id)[a2 name];
    long long v55 = *(_OWORD *)&v70->wbuf[10];
    *(_OWORD *)&c.wbuf[6] = *(_OWORD *)&v70->wbuf[6];
    *(_OWORD *)&c.wbuf[10] = v55;
    *(void *)&c.wbuf[14] = *(void *)&v70->wbuf[14];
    long long v56 = *(_OWORD *)&v70->hash[2];
    *(_OWORD *)c.count = *(_OWORD *)v70->count;
    *(_OWORD *)&c.hash[2] = v56;
    long long v57 = *(_OWORD *)&v70->wbuf[2];
    *(_OWORD *)&c.hash[6] = *(_OWORD *)&v70->hash[6];
    *(_OWORD *)&c.wbuf[2] = v57;
    CC_SHA256_Final((unsigned __int8 *)md, &c);
    uint64_t v58 = *(void *)v70[1].hash;
    uint64_t v59 = [a2 functionType];
    int v60 = (unint64_t)(v59 - 1) > 7 ? @"Unknown" : (__CFString *)*((void *)&off_1E5221760 + v59 - 1);
    v87[0] = md[0];
    v87[1] = md[1];
    uint64_t v61 = _MTLRequestHashToString((uint64_t)v87);
    uint64_t v62 = *(void *)v70[1].hash;
    long long v63 = v69[1];
    v86[0] = *v69;
    v86[1] = v63;
    uint64_t v64 = _MTLRequestHashToString((uint64_t)v86);
    uint64_t v65 = *v68;
    std::to_string(&v71, data);
    MTLGPUFamily v66 = (v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v71
        : (std::string *)v71.__r_.__value_.__r.__words[0];
    NSLog(&cfstr_HashForBaseHas.isa, v58, v60, v61, v62, v64, v65, v66);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
  }
  if (__p)
  {
    uint64_t v82 = (char *)__p;
    operator delete(__p);
  }
  return v70;
}

void sub_182723B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a57) {
    operator delete(a57);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MTLUINT256_t>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    int v9 = &v6[32 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t FunctionHashFactory::getGPUCompilerSPIOptionsMask(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-shader-validation");
  int v20 = 1;
  std::string::basic_string[abi:ne180100]<0>(v21, "disable-shader-validation");
  int v22 = 2;
  std::string::basic_string[abi:ne180100]<0>(v23, "enable-bounds-checking");
  int v24 = 4;
  std::string::basic_string[abi:ne180100]<0>(v25, "enable-threadgroup-memory-checks");
  int v26 = 8;
  std::string::basic_string[abi:ne180100]<0>(v27, "enable-texture-checks");
  int v28 = 16;
  std::string::basic_string[abi:ne180100]<0>(v29, "enable-resource-usage-validation");
  int v30 = 32;
  std::string::basic_string[abi:ne180100]<0>(v31, "enable-stack-overflow");
  int v32 = 64;
  std::unordered_map<std::string,FunctionHashFactory::hashFactoryMask>::unordered_map((uint64_t)v16, (unsigned __int8 *)__p, 7);
  for (uint64_t i = 0; i != -28; i -= 4)
  {
    if (SHIBYTE(v31[i + 2]) < 0) {
      operator delete((void *)v31[i]);
    }
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = 0;
  uint64_t v5 = [a2 countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(a2);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[*(id *)(*((void *)&v12 + 1) + 8 * v7) UTF8String]);
        uint64_t v8 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v16, (unsigned __int8 *)__p);
        int v9 = v8;
        if ((v19 & 0x80000000) == 0)
        {
          if (!v8) {
            goto LABEL_14;
          }
LABEL_13:
          uint64_t v4 = *((_DWORD *)v9 + 10) | v4;
          goto LABEL_14;
        }
        operator delete(__p[0]);
        if (v9) {
          goto LABEL_13;
        }
LABEL_14:
        ++v7;
      }
      while (v5 != v7);
      uint64_t v10 = [a2 countByEnumeratingWithState:&v12 objects:v17 count:16];
      uint64_t v5 = v10;
    }
    while (v10);
  }
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)v16);
  return v4;
}

void sub_182723E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,MTLBinaryKey *>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<MultiLevelFunctionCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<MultiLevelAirCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__introsort<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v26 = *(a2 - 4);
          int64_t v25 = a2 - 4;
          unint64_t v27 = bswap64(v26);
          unint64_t v28 = bswap64(*v11);
          if (v27 == v28
            && (unint64_t v27 = bswap64(v25[1]), v28 = bswap64(v11[1]), v27 == v28)
            && (unint64_t v27 = bswap64(v25[2]), v28 = bswap64(v11[2]), v27 == v28)
            && (unint64_t v27 = bswap64(v25[3]), v28 = bswap64(v11[3]), v27 == v28))
          {
            int v29 = 0;
          }
          else if (v27 < v28)
          {
            int v29 = -1;
          }
          else
          {
            int v29 = 1;
          }
          if (v29 < 0)
          {
            long long v32 = *(_OWORD *)v11;
            long long v34 = *((_OWORD *)v11 + 1);
            long long v30 = *((_OWORD *)v25 + 1);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v25;
            *((_OWORD *)v11 + 1) = v30;
            *(_OWORD *)int64_t v25 = v32;
            *((_OWORD *)v25 + 1) = v34;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11, v11 + 4, a2 - 4);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11, v11 + 4, v11 + 8, a2 - 4);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11, v11 + 4, v11 + 8, v11 + 12, a2 - 4);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[4 * (v15 >> 1)];
    if ((unint64_t)v14 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11, &v11[4 * (v15 >> 1)], a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11 + 4, v17 - 4, a2 - 8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11 + 8, &v11[4 * v16 + 4], a2 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v17 - 4, v17, &v11[4 * v16 + 4]);
      long long v31 = *(_OWORD *)v11;
      long long v33 = *((_OWORD *)v11 + 1);
      long long v18 = *((_OWORD *)v17 + 1);
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
      *((_OWORD *)v11 + 1) = v18;
      *(_OWORD *)uint64_t v17 = v31;
      *((_OWORD *)v17 + 1) = v33;
      if (a5) {
        goto LABEL_21;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(&v11[4 * (v15 >> 1)], v11, a2 - 4);
      if (a5) {
        goto LABEL_21;
      }
    }
    unint64_t v19 = bswap64(*(v11 - 4));
    unint64_t v20 = bswap64(*v11);
    if (v19 == v20
      && (unint64_t v19 = bswap64(*(v11 - 3)), v20 = bswap64(v11[1]), v19 == v20)
      && (unint64_t v19 = bswap64(*(v11 - 2)), v20 = bswap64(v11[2]), v19 == v20)
      && (unint64_t v19 = bswap64(*(v11 - 1)), v20 = bswap64(v11[3]), v19 == v20))
    {
      int v21 = 0;
    }
    else if (v19 < v20)
    {
      int v21 = -1;
    }
    else
    {
      int v21 = 1;
    }
    if ((v21 & 0x80000000) == 0)
    {
      unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &>(v11, a2);
      goto LABEL_26;
    }
LABEL_21:
    int v22 = (unint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &>((long long *)v11, (long long *)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_24;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11, v22);
    unint64_t v11 = v22 + 4;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v22 + 4, a2))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_24:
      std::__introsort<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **,false>(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 4;
LABEL_26:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(v11, a2);
  }
}

  unint64_t v11 = (long long *)((char *)a2 - 24);
  uint64_t v12 = (const void **)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    unint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)a2 - 3, v12))
          {
            long long v31 = v12[2];
            int v29 = *(_OWORD *)v12;
            unint64_t v27 = *v11;
            _OWORD v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)uint64_t v12 = v27;
            *unint64_t v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v12 + 3, (const void **)a2 - 3, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)(v12 + 9), (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    uint64_t v17 = v16 >> 1;
    long long v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, &v12[3 * (v16 >> 1)], (const void **)a2 - 3, a3);
      unint64_t v19 = 3 * v17;
      unint64_t v20 = &v12[3 * v17 - 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12 + 3, v20, (const void **)a2 - 6, a3);
      int v21 = v12 + 6;
      int v22 = &v12[v19 + 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v21, v22, (const void **)a2 - 9, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v20, v18, v22, a3);
      long long v30 = *(const void **)(a1 + 16);
      unint64_t v28 = *(_OWORD *)a1;
      char v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      v18[2] = v30;
      *(_OWORD *)long long v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v12[3 * (v16 >> 1)], v12, (const void **)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    BOOL v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((long long *)a1, (const void **)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v24, a3);
    uint64_t v12 = (const void **)(v24 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v24 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = (const void **)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, (const void **)a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, (const void **)a2, a3);
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int64_t v25 = (void *)*(a2 - 1);
          unint64_t v26 = (void *)*v11;
          unint64_t v27 = v25[3];
          unint64_t v28 = *(void *)(*v11 + 24);
          if (v27 < v28 || v28 >= v27 && *v25 < *v26)
          {
            *unint64_t v11 = (uint64_t)v25;
            *(a2 - 1) = (uint64_t)v26;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v11, (uint64_t)(v11 + 1), (uint64_t)(a2 - 1));
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v11, (uint64_t)(v11 + 1), (uint64_t)(v11 + 2), (uint64_t)(a2 - 1));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v11, (uint64_t)(v11 + 1), (uint64_t)(v11 + 2), (uint64_t)(v11 + 3), (uint64_t)(a2 - 1));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,std::unique_ptr<LoaderContext::Image>*>(v11, a2, (uint64_t)a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v11, (uint64_t)&v11[v15 >> 1], (uint64_t)(a2 - 1));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)(v11 + 1), (uint64_t)(v17 - 1), (uint64_t)(a2 - 2));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)(v11 + 2), (uint64_t)&v11[v16 + 1], (uint64_t)(a2 - 3));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)(v17 - 1), (uint64_t)v17, (uint64_t)&v11[v16 + 1]);
      long long v18 = *v11;
      *unint64_t v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)&v11[v15 >> 1], (uint64_t)v11, (uint64_t)(a2 - 1));
      if (a5) {
        goto LABEL_15;
      }
    }
    unint64_t v19 = (void *)*(v11 - 1);
    unint64_t v20 = v19[3];
    int v21 = *(void *)(*v11 + 24);
    if (v20 >= v21 && (v21 < v20 || *v19 >= *(void *)*v11))
    {
      unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<LoaderContext::Image> *,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &>(v11, a2);
      goto LABEL_20;
    }
LABEL_15:
    int v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<LoaderContext::Image> *,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &>(v11, (void **)a2);
    if ((v23 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)v11, (uint64_t)v22);
    unint64_t v11 = v22 + 1;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)(v22 + 1), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,false>(a1, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 1;
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(v11, a2);
  }
}

void std::__shared_ptr_emplace<MTLPipelineDescriptions>::__on_zero_shared(uint64_t a1)
{
}

BOOL MultiLevelBinaryCache::failOnCacheMiss(MultiLevelBinaryCache *this)
{
  return (*((unsigned char *)this + 32) & 7) != 0;
}

void MTLCompilerFunctionRequest::setAirScript(uint64_t a1, dispatch_object_t object)
{
  uint64_t v4 = *(NSObject **)(a1 + 152);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(a1 + 152) = object;

  dispatch_retain(object);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 24);
}

uint64_t std::__shared_ptr_emplace<MultiLevelLibraryCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

dispatch_data_t _MTLCreateRenderPipelineScriptFromDescriptor(MTLRenderPipelineDescriptor *a1)
{
  uint64_t v11 = 0;
  char v12 = 0;
  long long v13 = xmmword_1828D6640;
  long long v14 = 0u;
  *(_OWORD *)buffer = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 1;
  __int16 v18 = 256;
  uint64_t v19 = 0;
  if (_MTLCreateRenderPipelineScriptFromDescriptor((flatbuffers::FlatBufferBuilder *)&v11, a1))
  {
    uint64_t v1 = buffer[0];
    size_t v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
    uint64_t v5 = v11;
    char v6 = v12;
    uint64_t v7 = *((void *)&v14 + 1);
    uint64_t v8 = v14;
    int v9 = buffer[0];
    size_t v10 = v2;
    if (v12)
    {
      uint64_t v11 = 0;
      char v12 = 0;
    }
    long long v14 = 0u;
    *(_OWORD *)buffer = 0u;
    dispatch_data_t v3 = dispatch_data_create(v1, v2, 0, 0);
    flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  }
  else
  {
    dispatch_data_t v3 = 0;
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_182724D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void validateWithDevice(id *a1, uint64_t a2)
{
  uint64_t v50 = 0;
  memset(v49, 0, sizeof(v49));
  _MTLMessageContextBegin_((uint64_t)v49, (uint64_t)"validateWithDevice", 4704, (uint64_t)a1, 3, (uint64_t)"Render Pipeline Descriptor Validation");
  validateFunction((uint64_t)v49, (uint64_t)a1, *(void **)(a2 + 256), (uint64_t)"vertexFunction", *(void *)(a2 + 288) == 0, v4, v5, v6);
  validateFunction((uint64_t)v49, (uint64_t)a1, *(void **)(a2 + 264), (uint64_t)"fragmentFunction", 0, v7, v8, v9);
  validateFunction((uint64_t)v49, (uint64_t)a1, *(void **)(a2 + 280), (uint64_t)"objectFunction", 0, v10, v11, v12);
  validateFunction((uint64_t)v49, (uint64_t)a1, *(void **)(a2 + 288), (uint64_t)"meshFunction", 0, v13, v14, v15);
  int v21 = *(void **)(a2 + 256);
  if (v21 && *(void *)(a2 + 288))
  {
    _MTLMessageContextPush_((uint64_t)v49, 4, @"vertexFunction must be nil when meshFunction is not nil.", v16, v17, v18, v19, v20, v48);
    int v21 = *(void **)(a2 + 256);
    if (!v21) {
      goto LABEL_14;
    }
  }
  else if (!v21)
  {
    goto LABEL_14;
  }
  if ([v21 patchType])
  {
    MTLValidateFeatureSupport(a1, 77, 0);
    if (*(void *)(a2 + 96) > (unint64_t)*(unsigned int *)([a1 limits] + 192)) {
      _MTLMessageContextPush_((uint64_t)v49, 4, @"maxTessellationFactor(%lu) must be <= %lu.", v22, v23, v24, v25, v26, *(void *)(a2 + 96));
    }
    uint64_t v27 = *(void *)(a2 + 88);
    if ((unint64_t)(v27 - 2) < 2)
    {
      if (*(void *)(a2 + 96)) {
        _MTLMessageContextPush_((uint64_t)v49, 4, @"maxTessellationFactor(%lu) must be even when using MTLTessellationPartitionModeFractionalOdd or MTLTessellationPartitionModeFractionalEven.", v22, v23, v24, v25, v26, *(void *)(a2 + 96));
      }
    }
    else if (v27 != 1)
    {
      if (v27) {
        abort();
      }
      if ((*(void *)(a2 + 96) & (*(void *)(a2 + 96) - 1)) != 0) {
        _MTLMessageContextPush_((uint64_t)v49, 4, @"maxTessellationFactor(%lu) must be a power of 2 when using MTLTessellationPartitionModePow2.", v22, v23, v24, v25, v26, *(void *)(a2 + 96));
      }
    }
  }
LABEL_14:
  if (*(void *)(a2 + 256) && *(void *)(a2 + 272))
  {
    uint64_t v28 = 0;
    while (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 272), "layouts"), "objectAtIndexedSubscript:", v28), "stride") != -1)
    {
      if (++v28 == 31) {
        goto LABEL_22;
      }
    }
    if (([a1 supportsDynamicAttributeStride] & 1) == 0) {
      _MTLMessageContextPush_((uint64_t)v49, 4, @"MTLBufferLayoutStrideDynamic set on buffer-layout index %u; device does not support dynamic attribute strides.",
    }
        v29,
        v30,
        v31,
        v32,
        v33,
        v28);
  }
LABEL_22:
  if ([*(id *)(a2 + 256) renderTargetArrayIndexType])
  {
    if (*(void *)(a2 + 216)) {
      _MTLMessageContextPush_((uint64_t)v49, 4, @"colorSampleCount not 0 but the pipeline vertex function is writing to render_target_array_index.", v34, v35, v36, v37, v38, v48);
    }
    char v39 = [a1 supportsTexture2DMultisampleArray];
    if (*(void *)(a2 + 184) != 1 && (v39 & 1) == 0) {
      _MTLMessageContextPush_((uint64_t)v49, 4, @"Pipeline rasterSampleCount (%u) is greater than 1 but the pipeline vertex function is writing to render_target_array_index.", v34, v35, v36, v37, v38, *(void *)(a2 + 184));
    }
  }
  uint64_t v40 = *(void *)(a2 + 112);
  if (v40 && (v40 != 1 || ([a1 supportsFP32TessFactors] & 1) == 0)) {
    _MTLMessageContextPush_((uint64_t)v49, 4, @"tessellationFactorFormat(%d) is not a valid MTLTessellationFactorFormat.", v34, v35, v36, v37, v38, v40);
  }
  validateRenderRasterAndLater<MTLRenderPipelineDescriptorPrivate>((uint64_t)v49, a1, a2);
  unint64_t v41 = *(void *)(a2 + 616);
  if (v41 > [a1 maxAccelerationStructureTraversalDepth])
  {
    uint64_t v42 = *(void *)(a2 + 616);
    [a1 maxAccelerationStructureTraversalDepth];
    _MTLMessageContextPush_((uint64_t)v49, 4, @"maxAccelerationStructureTraversalDepth (%lu) must be less than or equal to %lu", v43, v44, v45, v46, v47, v42);
  }
  _MTLMessageContextEnd((uint64_t)v49);
}

void validateFunction(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3 && a5)
  {
    _MTLMessageContextPush_(a1, 4, @"%s must not be nil.", a4, a5, a6, a7, a8, a4);
  }
  else if (a3)
  {
    if ([a3 device] != a2) {
      _MTLMessageContextPush_(a1, 4, @"%s is associated with a different device.", v11, v12, v13, v14, v15, a4);
    }
    if ([a3 needsFunctionConstantValues])
    {
      [a3 name];
      _MTLMessageContextPush_(a1, 4, @"%s %@ cannot be used to build a pipeline state. Use newFunctionWithName:constantValues:... to get the specialized function", v16, v17, v18, v19, v20, a4);
    }
  }
}

void validateWithDevice(void *a1, uint64_t a2)
{
  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
  _MTLMessageContextBegin_((uint64_t)v42, (uint64_t)"validateWithDevice", 1437, (uint64_t)a1, 1, (uint64_t)"Compute Pipeline Descriptor Validation");
  uint64_t v9 = *(void **)(a2 + 8);
  if (v9
    || (_MTLMessageContextPush_((uint64_t)v42, 4, @"computeFunction must not be nil.", v4, v5, v6, v7, v8, v41), (uint64_t v9 = *(void **)(a2 + 8)) != 0))
  {
    if ((void *)[v9 device] != a1) {
      _MTLMessageContextPush_((uint64_t)v42, 8, @"computeFunction is associated with a different device", v10, v11, v12, v13, v14, v41);
    }
    uint64_t v15 = *(void **)(a2 + 8);
    if (v15)
    {
      if ([v15 needsFunctionConstantValues])
      {
        uint64_t v35 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "name"), "UTF8String");
        _MTLMessageContextPush_((uint64_t)v42, 4, @"function %s cannot be used to build a pipeline state. Use newFunctionWithName:constantValues:... to get the specialized function", v36, v37, v38, v39, v40, v35);
      }
      if (*(void *)(a2 + 8) && *(void *)(a2 + 24))
      {
        uint64_t v16 = 0;
        while (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 24), "layouts"), "objectAtIndexedSubscript:", v16), "stride") != -1)
        {
          if (++v16 == 31) {
            goto LABEL_15;
          }
        }
        if (([a1 supportsDynamicAttributeStride] & 1) == 0) {
          _MTLMessageContextPush_((uint64_t)v42, 4, @"MTLBufferLayoutStrideDynamic set on buffer-layout index %u; device does not support dynamic attribute strides.",
        }
            v17,
            v18,
            v19,
            v20,
            v21,
            v16);
      }
    }
  }
LABEL_15:
  if (([a1 supportsTextureWriteRoundingMode:*(void *)(a2 + 104)] & 1) == 0)
  {
    uint64_t v23 = MTLRoundingModeString(*(void *)(a2 + 104));
    _MTLMessageContextPush_((uint64_t)v42, 4, @"device does not support %@", v24, v25, v26, v27, v28, (uint64_t)v23);
  }
  unint64_t v22 = *(void *)(a2 + 184);
  if (v22 > [a1 maxAccelerationStructureTraversalDepth])
  {
    uint64_t v29 = *(void *)(a2 + 184);
    [a1 maxAccelerationStructureTraversalDepth];
    _MTLMessageContextPush_((uint64_t)v42, 4, @"maxAccelerationStructureTraversalDepth (%lu) must be less than or equal to %lu", v30, v31, v32, v33, v34, v29);
  }
  _MTLMessageContextEnd((uint64_t)v42);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  long long v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __CFString *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  long long v72;
  long long v73;
  long long v74;
  uint64_t v75;
  _OWORD v76[3];
  uint64_t v77;
  void v78[56];
  uint64_t v79[10];

  v79[8] = *MEMORY[0x1E4F143B8];
  long long v77 = 0;
  memset(v76, 0, sizeof(v76));
  _MTLMessageContextBegin_((uint64_t)v76, (uint64_t)"validateWithDevice", 1052, (uint64_t)a1, 9, (uint64_t)"Tile Render Pipeline Descriptor Validation");
  uint64_t v9 = *(void **)(a2 + 24);
  if (!v9)
  {
    _MTLMessageContextPush_((uint64_t)v76, 4, @"tileFunction must not be nil", v4, v5, v6, v7, v8, v70);
    uint64_t v9 = *(void **)(a2 + 24);
  }
  if ((void *)[v9 device] != a1) {
    _MTLMessageContextPush_((uint64_t)v76, 8, @"tileFunction is associated with a different device", v10, v11, v12, v13, v14, v70);
  }
  if ([*(id *)(a2 + 24) needsFunctionConstantValues])
  {
    long long v52 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 24), "name"), "UTF8String");
    _MTLMessageContextPush_((uint64_t)v76, 4, @"function %s cannot be used to build a pipeline state without setting constant values first.", v53, v54, v55, v56, v57, v52);
  }
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v16 = [a1 supportsSeparateVisibilityAndShadingRate];
  unint64_t v22 = *(void *)(a2 + 48);
  if (v16)
  {
    uint64_t v23 = *(void *)(a2 + 8);
    if (v22 && v22 > v23)
    {
      _MTLMessageContextPush_((uint64_t)v76, 4, @"colorSampleCount expected to be smaller or equal to rasterSampleCount", v17, v18, v19, v20, v21, v70);
      uint64_t v23 = *(void *)(a2 + 8);
      unint64_t v22 = *(void *)(a2 + 48);
      if (!v23) {
        goto LABEL_13;
      }
    }
    else if (!v23)
    {
      goto LABEL_13;
    }
    if (v23 < v22)
    {
      _MTLMessageContextPush_((uint64_t)v76, 4, @"rasterSampleCount expected to be greater or equal to colorSampleCount", v17, v18, v19, v20, v21, v70);
      unint64_t v22 = *(void *)(a2 + 48);
    }
LABEL_13:
    if (v22)
    {
      uint64_t v24 = objc_msgSend(a1, "supportsTextureSampleCount:");
      uint64_t v30 = *(void *)(a2 + 48);
      if ((v24 & 1) == 0)
      {
        _MTLMessageContextPush_((uint64_t)v76, 4, @"colorSampleCount (%lu) is not supported by device.", v25, v26, v27, v28, v29, *(void *)(a2 + 48));
        uint64_t v30 = *(void *)(a2 + 48);
      }
      if (v30) {
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
  if (v22) {
    _MTLMessageContextPush_((uint64_t)v76, 4, @"colorSampleCount expected to be 0.", v17, v18, v19, v20, v21, v70);
  }
LABEL_20:
  uint64_t v30 = v15;
LABEL_21:
  std::string v71 = v30;
  if (([a1 supportsTextureWriteRoundingMode:*(void *)(a2 + 72)] & 1) == 0)
  {
    uint64_t v58 = MTLRoundingModeString(*(void *)(a2 + 72));
    _MTLMessageContextPush_((uint64_t)v76, 4, @"device does not support %@", v59, v60, v61, v62, v63, (uint64_t)v58);
  }
  uint64_t v31 = [a1 maxColorAttachments];
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  do
  {
    uint64_t v34 = *(void *)(*(void *)a2 + 8 + 8 * v32);
    if (v34)
    {
      uint64_t v35 = *(unsigned int *)(v34 + 8);
      long long v75 = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      int v72 = 0u;
      MTLPixelFormatGetInfoForDevice(a1, v35, (uint64_t)&v72);
      if (v35)
      {
        if (v32 >= v31) {
          _MTLMessageContextPush_((uint64_t)v76, 4, @"MTLTileRenderPipelineDescriptor color render target(%lu) exceeds platform max(%lu).", v36, v37, v38, v39, v40, v32);
        }
        if (BYTE8(v72))
        {
          if ((BYTE8(v72) & 0x10) != 0)
          {
LABEL_30:
            v79[v33] = v35;
            uint64_t v41 = &v78[7 * v33++];
            uint64_t v42 = v73;
            *(_OWORD *)uint64_t v41 = v72;
            *((_OWORD *)v41 + 1) = v42;
            *((_OWORD *)v41 + 2) = v74;
            v41[6] = v75;
            goto LABEL_31;
          }
        }
        else
        {
          _MTLMessageContextPush_((uint64_t)v76, 4, @"pixelFormat, for color render target(%lu), is not a valid MTLPixelFormat.", v36, v37, v38, v39, v40, v32);
          if ((BYTE8(v72) & 0x10) != 0) {
            goto LABEL_30;
          }
        }
        _MTLMessageContextPush_((uint64_t)v76, 4, @"pixelFormat, for color render target(%lu), %s is not color renderable.", v36, v37, v38, v39, v40, v32);
        goto LABEL_30;
      }
    }
LABEL_31:
    ++v32;
  }
  while (v32 != 8);
  uint64_t v43 = [a1 maxFramebufferStorageBits];
  uint64_t v44 = MTLPixelFormatComputeTotalSizeUsed((uint64_t)v78, v79, v33, v71 > 1);
  uint64_t v45 = [a1 isLargeMRTSupported];
  if ((v45 & 1) == 0 && 8 * v44 > v43) {
    _MTLMessageContextPush_((uint64_t)v76, 4, @"This set of render targets requires %lu bytes of pixel storage. This device supports %lu bytes.", v46, v47, v48, v49, v50, v44 & 0x1FFFFFFFFFFFFFFFLL);
  }
  uint64_t v51 = *(void *)(a2 + 136);
  if (v51 > [a1 maxAccelerationStructureTraversalDepth])
  {
    uint64_t v64 = *(void *)(a2 + 136);
    [a1 maxAccelerationStructureTraversalDepth];
    _MTLMessageContextPush_((uint64_t)v76, 4, @"maxAccelerationStructureTraversalDepth (%lu) must be less than or equal to %lu", v65, v66, v67, v68, v69, v64);
  }
  _MTLMessageContextEnd((uint64_t)v76);
}

uint64_t createFragmentColorAttachmentDescriptorVector(flatbuffers::FlatBufferBuilder *a1, const MTLRenderPipelineColorAttachmentDescriptorArrayInternal *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  __p = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  do
  {
    uint64_t v5 = a2->_descriptors[v4];
    *((unsigned char *)a1 + 70) = 1;
    int v6 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v5)
    {
      int v7 = [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 pixelFormat];
      if ((v7 - 1) >= 0x285) {
        unsigned __int16 v8 = 0;
      }
      else {
        unsigned __int16 v8 = v7;
      }
      flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 4, v8, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 6, [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 writeMask], 15);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 8, [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 isBlendingEnabled], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 10, [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 alphaBlendOperation], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 12, [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 rgbBlendOperation], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 14, [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 destinationAlphaBlendFactor], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 16, [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 destinationRGBBlendFactor], 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 18, [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 sourceAlphaBlendFactor], 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, [(MTLRenderPipelineColorAttachmentDescriptorInternal *)v5 sourceRGBBlendFactor], 1);
      int v9 = flatbuffers::FlatBufferBuilder::EndTable(a1, v6);
      uint64_t v10 = v28;
      if (v28 < v29)
      {
LABEL_17:
        *(_DWORD *)uint64_t v10 = v9;
        uint64_t v17 = v10 + 4;
        goto LABEL_36;
      }
      uint64_t v11 = __p;
      uint64_t v12 = (v28 - __p) >> 2;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v29 - __p;
      if ((v29 - __p) >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v29, v15);
        uint64_t v11 = __p;
        uint64_t v10 = v28;
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v21 = &v16[4 * v12];
      *(_DWORD *)uint64_t v21 = v9;
      uint64_t v17 = v21 + 4;
      while (v10 != v11)
      {
        int v22 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v22;
        v21 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 4, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, 1, 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 18, 1, 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 16, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 14, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 12, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 10, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 6, 15, 15);
      int v9 = flatbuffers::FlatBufferBuilder::EndTable(a1, v6);
      uint64_t v10 = v28;
      if (v28 < v29) {
        goto LABEL_17;
      }
      uint64_t v11 = __p;
      uint64_t v18 = (v28 - __p) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v29 - __p;
      if ((v29 - __p) >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v19;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v29, v15);
        uint64_t v11 = __p;
        uint64_t v10 = v28;
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v21 = &v16[4 * v18];
      *(_DWORD *)uint64_t v21 = v9;
      uint64_t v17 = v21 + 4;
      while (v10 != v11)
      {
        int v23 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v23;
        v21 -= 4;
      }
    }
    __p = v21;
    uint64_t v29 = &v16[4 * v15];
    if (v11) {
      operator delete(v11);
    }
LABEL_36:
    uint64_t v28 = v17;
    ++v4;
  }
  while (v4 != 8);
  if (v17 == __p) {
    uint64_t v24 = (char *)&flatbuffers::data<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>> const&)::t;
  }
  else {
    uint64_t v24 = __p;
  }
  uint64_t v25 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v24, (v17 - __p) >> 2);
  if (__p) {
    operator delete(__p);
  }
  return v25;
}

void sub_182725A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

dispatch_data_t MTLConstantStorage::constantAirScriptForFunction(MTLConstantStorage *this, _MTLFunction *a2, NSString *a3, NSString *a4, NSString **a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (MTLConstantStorage::getConstantCountForFunction(this, a2, a5) == -1) {
    return 0;
  }
  uint64_t v67 = 0;
  char v68 = 0;
  long long v69 = xmmword_1828D6640;
  long long v70 = 0u;
  long long buffer = 0u;
  uint64_t v72 = 0;
  uint64_t v73 = 1;
  __int16 v74 = 256;
  uint64_t v75 = 0;
  uint64_t v51 = a4;
  long long v52 = a3;
  __p = 0;
  uint64_t v65 = 0;
  MTLGPUFamily v66 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id obj = (id)[(_MTLFunction *)a2 functionConstants];
  int v9 = (MTLConstantStorage *)[obj countByEnumeratingWithState:&v60 objects:v76 count:16];
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = *(void *)v61;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v61 != v11) {
          objc_enumerationMutation(obj);
        }
        unint64_t v13 = *(MTLFunctionConstant **)(*((void *)&v60 + 1) + 8 * (void)v12);
        Constantint Value = MTLConstantStorage::findConstantValue(this, v13);
        if (ConstantValue)
        {
          unint64_t v15 = [(MTLFunctionConstant *)v13 index];
          unsigned __int16 v16 = (unsigned __int16)v15;
          int v17 = *(unsigned __int8 *)ConstantValue;
          int Value = MTLConstantStorage::makeValue(v15, (flatbuffers::FlatBufferBuilder *)&v67, (MTLDataType)*(unsigned __int8 *)ConstantValue, *((uint64_t **)ConstantValue + 1));
          BYTE6(v72) = 1;
          __int16 v19 = buffer;
          __int16 v20 = v70;
          __int16 v21 = WORD4(v70);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(&v67, 4, v16, 0);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(&v67, 6, v17, 0);
          flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v67, 8, Value);
          int v22 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v67, v20 - v19 + v21);
          int v23 = v22;
          uint64_t v24 = v65;
          if (v65 >= v66)
          {
            uint64_t v26 = (char *)__p;
            uint64_t v27 = (v65 - (unsigned char *)__p) >> 2;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v29 = v66 - (unsigned char *)__p;
            if ((v66 - (unsigned char *)__p) >> 1 > v28) {
              unint64_t v28 = v29 >> 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v66, v30);
              uint64_t v26 = (char *)__p;
              uint64_t v24 = v65;
            }
            else
            {
              uint64_t v31 = 0;
            }
            uint64_t v32 = &v31[4 * v27];
            *(_DWORD *)uint64_t v32 = v23;
            uint64_t v25 = v32 + 4;
            while (v24 != v26)
            {
              int v33 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v32 - 1) = v33;
              v32 -= 4;
            }
            __p = v32;
            uint64_t v65 = v25;
            MTLGPUFamily v66 = &v31[4 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v65 = v22;
            uint64_t v25 = v24 + 4;
          }
          uint64_t v65 = v25;
        }
        uint64_t v12 = (MTLConstantStorage *)((char *)v12 + 1);
      }
      while (v12 != v10);
      int v9 = (MTLConstantStorage *)[obj countByEnumeratingWithState:&v60 objects:v76 count:16];
      uint64_t v10 = v9;
    }
    while (v9);
  }
  uint64_t v34 = (MTLConstantStorage *)MTLConstantStorage::addString(v9, (flatbuffers::FlatBufferBuilder *)&v67, v52);
  int v35 = (int)v34;
  int v36 = MTLConstantStorage::addString(v34, (flatbuffers::FlatBufferBuilder *)&v67, v51);
  if (v65 == __p) {
    uint64_t v37 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionConstantValue>,std::allocator<flatbuffers::Offset<Air::FunctionConstantValue>>>(std::vector<flatbuffers::Offset<Air::FunctionConstantValue>> const&)::t;
  }
  else {
    uint64_t v37 = __p;
  }
  int v38 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)&v67, (uint64_t)v37, (v65 - (unsigned char *)__p) >> 2);
  BYTE6(v72) = 1;
  __int16 v39 = buffer;
  __int16 v40 = v70;
  __int16 v41 = WORD4(v70);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v67, 4, v35);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v67, 6, v36);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v67, 8, v38);
  int v42 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v67, v40 - v39 + v41);
  BYTE6(v72) = 1;
  __int16 v43 = buffer;
  __int16 v44 = v70;
  LOWORD(v38) = WORD4(v70);
  unsigned int v45 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)&v67, 2);
  flatbuffers::FlatBufferBuilder::TrackField(&v67, 6, v45);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)&v67, 8, v42);
  int v46 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v67, v44 - v43 + v38);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v67, v46, "AIRC", 0);
  uint64_t v47 = (const void *)buffer;
  size_t v48 = (v70 + DWORD2(v70) - buffer);
  uint64_t v54 = v67;
  char v55 = v68;
  uint64_t v56 = *((void *)&v70 + 1);
  uint64_t v57 = v70;
  uint64_t v58 = buffer;
  size_t v59 = v48;
  if (v68)
  {
    uint64_t v67 = 0;
    char v68 = 0;
  }
  long long v70 = 0u;
  long long buffer = 0u;
  dispatch_data_t v49 = dispatch_data_create(v47, v48, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v54);
  if (__p)
  {
    uint64_t v65 = (char *)__p;
    operator delete(__p);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v67);
  return v49;
}

void sub_182725F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&a30);
  _Unwind_Resume(a1);
}

void *flatbuffers::FlatBufferBuilder::TrackField(void *this, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = this;
  int v6 = (unint64_t *)this[7];
  if (this[6] - (void)v6 <= 7uLL)
  {
    this = (void *)flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 8uLL);
    int v6 = (unint64_t *)v5[7];
  }
  *int v6 = a3 | (unint64_t)(a2 << 32);
  v5[7] += 8;
  ++*((_DWORD *)v5 + 16);
  unsigned int v7 = *((unsigned __int16 *)v5 + 34);
  if (v7 <= a2) {
    LOWORD(v7) = a2;
  }
  *((_WORD *)v5 + 34) = v7;
  return this;
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddOffset<void>(flatbuffers::FlatBufferBuilder *result, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    int v6 = *((_DWORD *)v5 + 8) - *((_DWORD *)v5 + 12) + *((_DWORD *)v5 + 10) - a3 + 4;
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, a2, v6, 0);
  }
  return result;
}

void *flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(void *result, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = result;
  if (a3 != a4 || *((unsigned char *)result + 80))
  {
    unsigned int v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned short>((uint64_t)result, a3);
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<unsigned short>(uint64_t a1, __int16 a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 1)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 2uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = a2;
  uint64_t v5 = v4 - 2;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t MTLConstantStorage::makeValue(MTLConstantStorage *this, flatbuffers::FlatBufferBuilder *a2, MTLDataType a3, uint64_t *a4)
{
  switch(a3)
  {
    case MTLDataTypeFloat:
    case MTLDataTypeInt:
    case MTLDataTypeUInt:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>((uint64_t)a2, a4);
      break;
    case MTLDataTypeFloat2:
    case MTLDataTypeInt2:
    case MTLDataTypeUInt2:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>((uint64_t)a2, a4);
      break;
    case MTLDataTypeFloat3:
    case MTLDataTypeInt3:
    case MTLDataTypeUInt3:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>((uint64_t)a2, a4);
      break;
    case MTLDataTypeFloat4:
    case MTLDataTypeInt4:
    case MTLDataTypeUInt4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>((uint64_t)a2, a4);
      break;
    case MTLDataTypeHalf:
    case MTLDataTypeShort:
    case MTLDataTypeUShort:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)a2, a4);
      break;
    case MTLDataTypeHalf2:
    case MTLDataTypeShort2:
    case MTLDataTypeUShort2:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>((uint64_t)a2, a4);
      break;
    case MTLDataTypeHalf3:
    case MTLDataTypeShort3:
    case MTLDataTypeUShort3:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>((uint64_t)a2, (int *)a4);
      break;
    case MTLDataTypeHalf4:
    case MTLDataTypeShort4:
    case MTLDataTypeUShort4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>((uint64_t)a2, a4);
      break;
    case MTLDataTypeChar:
    case MTLDataTypeUChar:
    case MTLDataTypeBool:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>((uint64_t)a2, a4);
      break;
    case MTLDataTypeChar2:
    case MTLDataTypeUChar2:
    case MTLDataTypeBool2:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>((uint64_t)a2, a4);
      break;
    case MTLDataTypeChar3:
    case MTLDataTypeUChar3:
    case MTLDataTypeBool3:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>((uint64_t)a2, (__int16 *)a4);
      break;
    case MTLDataTypeChar4:
    case MTLDataTypeUChar4:
    case MTLDataTypeBool4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>((uint64_t)a2, a4);
      break;
    case MTLDataTypeLong:
    case MTLDataTypeULong:
    case MTLDataTypeULong4|MTLDataTypeStruct:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>((uint64_t)a2, a4);
      break;
    case MTLDataTypeLong2:
    case MTLDataTypeULong2:
    case MTLDataTypeULong4|MTLDataTypeArray:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>((uint64_t)a2, a4);
      break;
    case MTLDataTypeLong3:
    case MTLDataTypeULong3:
    case MTLDataTypeULong4|MTLDataTypeFloat:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>((uint64_t)a2, (long long *)a4);
      break;
    case MTLDataTypeLong4:
    case MTLDataTypeULong4:
    case MTLDataTypeULong4|MTLDataTypeFloat2:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>((uint64_t)a2, a4);
      break;
    case MTLDataTypeULong4|MTLDataTypeFloat3:
    case MTLDataTypeR16Snorm|MTLDataTypeInt4:
    case MTLDataTypeRG8Snorm|MTLDataTypeInt4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>((uint64_t)a2, a4);
      break;
    case MTLDataTypeULong4|MTLDataTypeFloat4:
    case MTLDataTypeRG8Unorm|MTLDataTypeInt4:
    case MTLDataTypeRG16Unorm|MTLDataTypeInt4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>((uint64_t)a2, (long long *)a4);
      break;
    case MTLDataTypeULong4|MTLDataTypeFloat2x2:
    case MTLDataTypeRG16Snorm|MTLDataTypeInt4:
    case MTLDataTypeRGBA8Unorm_sRGB|MTLDataTypeInt4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>((uint64_t)a2, a4);
      break;
    case MTLDataTypeR16Unorm|MTLDataTypeInt4:
    case MTLDataTypeRGBA8Unorm|MTLDataTypeInt4:
    case MTLDataTypeRGBA8Snorm|MTLDataTypeInt4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>((uint64_t)a2, a4);
      break;
    case MTLDataTypeRGBA16Unorm|MTLDataTypeInt4:
    case MTLDataTypeRGB10A2Unorm|MTLDataTypeInt4:
    case MTLDataTypeInstanceAccelerationStructure|MTLDataTypeStruct:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>((uint64_t)a2, a4);
      break;
    case MTLDataTypeRGBA16Snorm|MTLDataTypeInt4:
    case MTLDataTypeRG11B10Float|MTLDataTypeInt4:
    case MTLDataTypeULong4|MTLDataTypeInt4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>((uint64_t)a2, a4);
      break;
    case MTLDataTypeRGB9E5Float|MTLDataTypeInt4:
    case MTLDataTypeComputePipeline|MTLDataTypeInt4:
    case MTLDataTypeLong|MTLDataTypeInt4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>((uint64_t)a2, (long long *)a4);
      break;
    case MTLDataTypeRenderPipeline|MTLDataTypeInt4:
    case MTLDataTypeIndirectCommandBuffer|MTLDataTypeInt4:
    case MTLDataTypeLong2|MTLDataTypeInt4:
      uint64_t result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>((uint64_t)a2, (long long *)a4);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>(uint64_t a1, unsigned char *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 == *(void *)(a1 + 56))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 1uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 1;
  *(unsigned char *)(v4 - 1) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t MTLConstantStorage::addString(MTLConstantStorage *this, flatbuffers::FlatBufferBuilder *a2, NSString *a3)
{
  if (!a3 || [(NSString *)a3 isEqualToString:&stru_1ECAC84A8]) {
    return 0;
  }
  unsigned int v6 = [(NSString *)a3 cStringUsingEncoding:4];
  size_t v7 = strlen(v6);

  return flatbuffers::FlatBufferBuilder::CreateString(a2, v6, v7);
}

uint64_t MTLConstantStorage::getConstantCountForFunction(MTLConstantStorage *this, _MTLFunction *a2, NSString **a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  unsigned int v6 = (void *)[(_MTLFunction *)a2 functionConstants];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  int v23 = a3;
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)v25;
  while (2)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v25 != v10) {
        objc_enumerationMutation(v6);
      }
      uint64_t v12 = *(MTLFunctionConstant **)(*((void *)&v24 + 1) + 8 * i);
      Constantint Value = MTLConstantStorage::findConstantValue(this, v12);
      if (ConstantValue)
      {
        uint64_t v14 = ConstantValue;
        uint64_t v15 = *(unsigned __int8 *)ConstantValue;
        if ([(MTLFunctionConstant *)v12 type] != v15)
        {
          unsigned __int16 v16 = NSString;
          uint64_t v17 = [(MTLFunctionConstant *)v12 name];
          uint64_t v18 = [(MTLFunctionConstant *)v12 index];
          __int16 v19 = MTLDataTypeString([(MTLFunctionConstant *)v12 type]);
          uint64_t v20 = [v16 stringWithFormat:@"Constant %@ (%lu) is of type %@ but value found has type %@", v17, v18, v19, MTLDataTypeString(*(unsigned __int8 *)v14)];
LABEL_17:
          *int v23 = (NSString *)v20;
          return 0xFFFFFFFFLL;
        }
        uint64_t v9 = (v9 + 1);
      }
      else if ([(MTLFunctionConstant *)v12 required] && MTLFailureTypeGetEnabled(1uLL))
      {
        uint64_t v20 = [NSString stringWithFormat:@"Constant %@ (%lu) value is required by function %@", -[MTLFunctionConstant name](v12, "name"), -[MTLFunctionConstant index](v12, "index"), -[_MTLFunction name](a2, "name"), v22];
        goto LABEL_17;
      }
    }
    uint64_t v8 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v8) {
      continue;
    }
    return v9;
  }
}

void sub_182726954(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLLibraryDataWithArchive::readFunctionPublicOrPrivateMetadata(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v151 = a3;
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1) & 1) == 0)
  {
    MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5653, @"Invalid library file/data (unexpected end of file)", v10, v11, v12, v13, a9);
    return;
  }
  int v159 = 0;
  if ((*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 320))(a1, &v159, 4) != 4)
  {
    MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5658, @"Invalid library file/data (unexpected end of file)", v14, v15, v16, v17, v149);
    return;
  }
  unsigned int v18 = 0;
  uint64_t v19 = 0;
  unsigned __int16 v158 = 0;
  int v150 = &v156;
  int v157 = 0;
  int v154 = 0;
  int v155 = 0;
  int v156 = 0;
  do
  {
    if ((*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 320))(a1, &v157, 4) != 4)
    {
      MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5670, @"Invalid library file/data (unexpected end of file)", v20, v21, v22, v23, v149);
      goto LABEL_170;
    }
    signed int v24 = v157;
    unsigned int v25 = bswap32(v157);
    int v157 = v25;
    unsigned __int16 v153 = 0;
    if (v24 != 1413762629)
    {
      if ((*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)a1 + 320))(a1, &v153, 2) != 2)
      {
        uint64_t v148 = 5677;
        goto LABEL_165;
      }
      if (v157 > 1129206611)
      {
        if (v157 <= 1380275281)
        {
          switch(v157)
          {
            case 1129206612:
              std::string v71 = malloc_type_malloc(v153, 0x8532C51EuLL);
              uint64_t v72 = (*(uint64_t (**)(uint64_t, _WORD *, void))(*(void *)a1 + 320))(a1, v71, v153);
              if (v72 != v153)
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5688, @"Invalid library file/data (unexpected end of file)", v73, v74, v75, v76, v149);
                goto LABEL_170;
              }
              if (v153 >= 2u && (unsigned int v77 = (unsigned __int16)*v71, *v71))
              {
                uint64_t v149 = v19;
                std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v154, ((v155 - v154) >> 3) + v77);
                int v78 = 0;
                LODWORD(v19) = 2;
                do
                {
                  unint64_t v79 = v153;
                  uint64_t v80 = v19;
                  if (v19 >= (unint64_t)v153)
                  {
LABEL_50:
                    unint64_t v83 = &stru_1ECAC84A8;
                  }
                  else
                  {
                    int v81 = (unsigned __int8 *)v71 + v19;
                    while (*v81++)
                    {
                      LODWORD(v19) = v19 + 1;
                      if (v19 >= v153)
                      {
                        LODWORD(v19) = v153;
                        goto LABEL_50;
                      }
                    }
                    unint64_t v83 = (__CFString *)[NSString stringWithUTF8String:(char *)v71 + v80];
                    LODWORD(v19) = v19 + 1;
                    unint64_t v79 = v153;
                  }
                  unint64_t v84 = v19;
                  if (v79 <= v19)
                  {
                    uint64_t v85 = 0;
                  }
                  else
                  {
                    uint64_t v19 = (v19 + 1);
                    uint64_t v85 = *((unsigned __int8 *)v71 + v84);
                    unint64_t v84 = v19;
                  }
                  int v86 = v84 + 2;
                  if (v84 + 2 <= v79)
                  {
                    uint64_t v87 = *(unsigned __int16 *)((char *)v71 + v84);
                    unint64_t v84 = (v84 + 2);
                    LODWORD(v19) = v86;
                  }
                  else
                  {
                    uint64_t v87 = 0;
                  }
                  if (v84 >= v79)
                  {
                    int v88 = 0;
                  }
                  else
                  {
                    LODWORD(v19) = v19 + 1;
                    int v88 = *((unsigned __int8 *)v71 + v84);
                  }
                  int v89 = [[MTLFunctionConstantInternal alloc] initWithName:v83 type:v85 index:v87 required:v88 != 0];
                  int v90 = v89;
                  uint64_t v91 = v155;
                  if (v155 >= v156)
                  {
                    uint64_t v93 = (v155 - v154) >> 3;
                    if ((unint64_t)(v93 + 1) >> 61) {
                      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v94 = (v156 - v154) >> 2;
                    if (v94 <= v93 + 1) {
                      unint64_t v94 = v93 + 1;
                    }
                    if ((unint64_t)(v156 - v154) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v95 = v94;
                    }
                    if (v95) {
                      int v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v150, v95);
                    }
                    else {
                      int v96 = 0;
                    }
                    int v97 = (MTLFunctionConstantInternal **)&v96[8 * v93];
                    *int v97 = v90;
                    int v92 = (char *)(v97 + 1);
                    long long v99 = v154;
                    int v98 = v155;
                    if (v155 != v154)
                    {
                      do
                      {
                        int v100 = (MTLFunctionConstantInternal *)*((void *)v98 - 1);
                        v98 -= 8;
                        *--int v97 = v100;
                      }
                      while (v98 != v99);
                      int v98 = v154;
                    }
                    int v154 = (char *)v97;
                    int v155 = v92;
                    int v156 = &v96[8 * v95];
                    if (v98) {
                      operator delete(v98);
                    }
                  }
                  else
                  {
                    *(void *)int v155 = v89;
                    int v92 = v91 + 8;
                  }
                  int v155 = v92;
                  ++v78;
                }
                while (v78 != v77);
                free(v71);
                uint64_t v19 = v149;
              }
              else
              {
                free(v71);
              }
              goto LABEL_151;
            case 1145389641:
              MEMORY[0x1F4188790](2);
              int v42 = (unsigned int *)((char *)&v149 - v41);
              uint64_t v43 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)a1 + 320))(a1, (char *)&v149 - v41, v153);
              if (v43 != v153)
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5879, @"Invalid library file/data (unexpected end of file)", v44, v45, v46, v47, v149);
                goto LABEL_170;
              }
              [v151 setLineNumber:*v42];
              if (v153 >= 5u)
              {
                size_t v48 = (unsigned __int8 *)(v42 + 1);
                int v49 = v153 - 4;
                while (*v48++)
                {
                  if (!--v49) {
                    goto LABEL_151;
                  }
                }
                uint64_t v143 = [NSString stringWithUTF8String:v42 + 1];
                [v151 setFilePath:v143];
              }
              goto LABEL_151;
            case 1162757204:
              goto LABEL_153;
          }
        }
        else
        {
          switch(v157)
          {
            case 1380275282:
              MEMORY[0x1F4188790](2);
              unsigned int v102 = (char *)&v149 - v101;
              uint64_t v103 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)a1 + 320))(a1, (char *)&v149 - v101, v153);
              if (v103 != v153)
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5836, @"Invalid library file/data (unexpected end of file)", v104, v105, v106, v107, v149);
                goto LABEL_170;
              }
              unsigned int v152 = 0;
              if (v153)
              {
                MTLDataType v108 = (unint64_t)*(unsigned __int8 *)v102;
                unsigned int v152 = 1;
              }
              else
              {
                MTLDataType v108 = MTLDataTypeNone;
              }
              int v138 = typeFromBuffer(v108, v102, &v152, v153);
              [v151 setReturnType:v138];

              goto LABEL_151;
            case 1447122004:
              MEMORY[0x1F4188790](2);
              uint64_t v57 = (unsigned __int16 *)((char *)&v149 - v56);
              uint64_t v58 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)a1 + 320))(a1, (char *)&v149 - v56, v153);
              if (v58 != v153)
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5716, @"Invalid library file/data (unexpected end of file)", v59, v60, v61, v62, v149);
                goto LABEL_170;
              }
              if (v153 > 1u)
              {
                unsigned __int16 v158 = *v57;
                if (v158 && !v19)
                {
                  uint64_t v19 = (uint64_t)malloc_type_malloc(8 * v158, 0x80040B8603338uLL);
                  bzero((void *)v19, 8 * v158);
                  if (v158)
                  {
                    unint64_t v110 = 0;
                    unsigned int v111 = 2;
                    do
                    {
                      if (v111 >= v153)
                      {
                        int v115 = 0;
                      }
                      else
                      {
                        uint64_t v112 = v111;
                        int v113 = (unsigned __int8 *)v57 + v111;
                        while (1)
                        {
                          int v114 = *v113++;
                          ++v111;
                          if (!v114) {
                            break;
                          }
                          if (v111 >= v153)
                          {
                            int v115 = 0;
                            unsigned int v111 = v153;
                            goto LABEL_101;
                          }
                        }
                        int v115 = (char *)v57 + v112;
                      }
LABEL_101:
                      if (v115) {
                        int v116 = v115;
                      }
                      else {
                        int v116 = "";
                      }
                      uint64_t v117 = [NSString stringWithUTF8String:v116];
                      if ((unint64_t)v111 + 2 <= v153)
                      {
                        unsigned int v118 = *(unsigned __int16 *)((char *)v57 + v111);
                        uint64_t v120 = v118 >> 15;
                        int v121 = (v118 >> 13) & 3;
                        uint64_t v122 = v120 | 2;
                        if (v121 == 2) {
                          v120 |= 4uLL;
                        }
                        if (v121 == 1) {
                          uint64_t v119 = v122;
                        }
                        else {
                          uint64_t v119 = v120;
                        }
                        v111 += 2;
                      }
                      else
                      {
                        LOWORD(v118) = 0;
                        uint64_t v119 = 0;
                      }
                      uint64_t v123 = [v151 functionType];
                      int v124 = off_1E521F4F8;
                      if (v123 != 1) {
                        int v124 = off_1E521F108;
                      }
                      *(void *)(v19 + 8 * v110++) = (id)[objc_alloc(*v124) initWithName:v117 attributeIndex:v118 & 0x1FFF attributeType:0 flags:v119];
                      unsigned int v18 = v158;
                    }
                    while (v110 < v158);
                  }
                  else
                  {
                    unsigned int v18 = 0;
                  }
                }
              }
              else
              {
                unsigned __int16 v158 = 0;
              }
              goto LABEL_151;
            case 1447122009:
              unint64_t v30 = malloc_type_malloc(v153, 0x29AA0C57uLL);
              uint64_t v31 = (*(uint64_t (**)(uint64_t, _WORD *, void))(*(void *)a1 + 320))(a1, v30, v153);
              if (v31 == v153)
              {
                if (v153 >= 2u && v19 && *v30 && (unsigned __int16)*v30 == v158)
                {
                  unint64_t v140 = 0;
                  unint64_t v141 = 2;
                  do
                  {
                    if (v141 >= v153) {
                      uint64_t v142 = 0;
                    }
                    else {
                      uint64_t v142 = *((unsigned __int8 *)v30 + v141++);
                    }
                    [*(id *)(v19 + 8 * v140++) setAttributeType:v142];
                  }
                  while (v140 < v158);
                  char v109 = 1;
                  if (!v30)
                  {
LABEL_88:
                    if ((v109 & 1) == 0) {
                      goto LABEL_170;
                    }
                    goto LABEL_151;
                  }
LABEL_87:
                  free(v30);
                  goto LABEL_88;
                }
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5784, @"Invalid library file/data (bad VATY token)", v32, v33, v34, v35, v149);
              }
              else
              {
                MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5777, @"Invalid library file/data (unexpected end of file)", v32, v33, v34, v35, v149);
              }
              char v109 = 0;
              if (!v30) {
                goto LABEL_88;
              }
              goto LABEL_87;
          }
        }
LABEL_137:
        uint64_t v139 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 336))(a1);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v139 + v153) & 1) == 0)
        {
          uint64_t v148 = 5900;
          goto LABEL_165;
        }
LABEL_151:
        unsigned int v25 = v157;
        continue;
      }
      if (v157 <= 1095911234)
      {
        if (v157 != 1095192643)
        {
          if (v157 == 1095192660)
          {
            MEMORY[0x1F4188790](2);
            uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
            if (v51 != v153)
            {
              MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5827, @"Invalid library file/data (unexpected end of file)", v52, v53, v54, v55, v149);
              goto LABEL_170;
            }
            goto LABEL_151;
          }
          goto LABEL_137;
        }
        if ((*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)a1 + 320))(a1, &v158, 2) == 2) {
          goto LABEL_151;
        }
        uint64_t v148 = 5819;
      }
      else
      {
        if (v157 != 1095911235)
        {
          if (v157 == 1095911250)
          {
            MEMORY[0x1F4188790](2);
            uint64_t v64 = (char *)&v149 - v63;
            uint64_t v65 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)a1 + 320))(a1, (char *)&v149 - v63, v153);
            if (v65 != v153)
            {
              MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5849, @"Invalid library file/data (unexpected end of file)", v66, v67, v68, v69, v149);
              goto LABEL_170;
            }
            unsigned int v152 = 0;
            uint64_t v149 = v19;
            if (v153)
            {
              uint64_t v70 = *(unsigned __int8 *)v64;
              unsigned int v152 = 1;
            }
            else
            {
              uint64_t v70 = 0;
            }
            BOOL v125 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", v70, v149);
            if (v70)
            {
              for (uint64_t i = 0; i != v70; ++i)
              {
                uint64_t v127 = v152;
                if (v152 >= v153)
                {
LABEL_124:
                  int v131 = 0;
                  unsigned int v152 = v127;
                }
                else
                {
                  int v128 = &v64[v152];
                  unsigned int v129 = v152;
                  while (1)
                  {
                    int v130 = *(unsigned __int8 *)v128++;
                    ++v129;
                    if (!v130) {
                      break;
                    }
                    if (v129 >= v153)
                    {
                      LODWORD(v127) = v153;
                      goto LABEL_124;
                    }
                  }
                  unsigned int v152 = v129;
                  int v131 = &v64[v127];
                }
                if (v131) {
                  int v132 = v131;
                }
                else {
                  int v132 = "";
                }
                uint64_t v133 = [NSString stringWithUTF8String:v132];
                if (v152 >= v153) {
                  MTLDataType v134 = MTLDataTypeNone;
                }
                else {
                  MTLDataType v134 = (unint64_t)v64[v152++];
                }
                int v135 = typeFromBuffer(v134, v64, &v152, v153);
                int v136 = [[MTLBindingInternal alloc] initWithName:v133 type:18 access:0 index:0 active:1 arrayLength:1 typeDescription:v135];
                [v125 setObject:v136 atIndexedSubscript:i];
              }
            }
            uint64_t v137 = [MEMORY[0x1E4F1C978] arrayWithArray:v125];
            [v151 setArguments:v137];
            uint64_t v19 = v149;
            goto LABEL_151;
          }
          if (v157 == 1095911252)
          {
            MEMORY[0x1F4188790](2);
            uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
            if (v36 != v153)
            {
              MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", 5810, @"Invalid library file/data (unexpected end of file)", v37, v38, v39, v40, v149);
              goto LABEL_170;
            }
            goto LABEL_151;
          }
          goto LABEL_137;
        }
        if ((*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)a1 + 320))(a1, &v158, 2) == 2) {
          goto LABEL_151;
        }
        uint64_t v148 = 5802;
      }
LABEL_165:
      MTLReportFailure(0, "readFunctionPublicOrPrivateMetadata", v148, @"Invalid library file/data (unexpected end of file)", v26, v27, v28, v29, v149);
      goto LABEL_170;
    }
  }
  while (v25 != 1162757204);
LABEL_153:
  if (v155 != v154)
  {
    int v144 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:count:");
    [v151 setFunctionConstants:v144];

    int v145 = (id *)v154;
    int v146 = (id *)v155;
    while (v145 != v146)
  }
  if (v19)
  {
    uint64_t v147 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:v18];
    free((void *)v19);
    uint64_t v19 = 0;
    [v151 setVertexAttributes:v147];
  }
LABEL_170:
  if (v154)
  {
    int v155 = v154;
    operator delete(v154);
  }
  if (v19) {
    free((void *)v19);
  }
}

void sub_182727928(_Unwind_Exception *exception_object)
{
  *(void *)(v2 - 160) = v1;
  uint64_t v4 = *(void **)(v2 - 128);
  if (v4)
  {
    *(void *)(v2 - 120) = v4;
    operator delete(v4);
  }
  if (*(void *)(v2 - 160)) {
    free(*(void **)(v2 - 160));
  }
  _Unwind_Resume(exception_object);
}

void MTLLibraryDataWithArchive::readFunctionMetadata(MTLLibraryDataWithArchive *this, unint64_t a2, _MTLFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a4 == 2) {
    MTLLibraryDataWithArchive::readFunctionSourceArchiveMetadata(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else {
    MTLLibraryDataWithArchive::readFunctionPublicOrPrivateMetadata((uint64_t)this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

dispatch_data_t _MTLCreateComputePipelineScriptFromDescriptor(MTLComputePipelineDescriptor *a1)
{
  uint64_t v11 = 0;
  char v12 = 0;
  long long v13 = xmmword_1828D6640;
  long long v14 = 0u;
  *(_OWORD *)long long buffer = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 1;
  __int16 v18 = 256;
  uint64_t v19 = 0;
  _MTLCreateComputePipelineScriptFromDescriptor((flatbuffers::FlatBufferBuilder *)&v11, a1);
  uint64_t v1 = buffer[0];
  size_t v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
  uint64_t v5 = v11;
  char v6 = v12;
  uint64_t v7 = *((void *)&v14 + 1);
  uint64_t v8 = v14;
  uint64_t v9 = buffer[0];
  size_t v10 = v2;
  if (v12)
  {
    uint64_t v11 = 0;
    char v12 = 0;
  }
  long long v14 = 0u;
  *(_OWORD *)long long buffer = 0u;
  dispatch_data_t v3 = dispatch_data_create(v1, v2, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_182727AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(*((void *)this + 11), *(void **)(v2 + 8));
    MEMORY[0x18530C140](v2, 0x1060C40C2B13FB5);
  }

  flatbuffers::vector_downward::~vector_downward(this);
}

void flatbuffers::vector_downward::~vector_downward(flatbuffers::vector_downward *this)
{
  if (*((unsigned char *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
}

void *flatbuffers::vector_downward::clear_buffer(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[5];
  if (v2)
  {
    uint64_t v3 = *this;
    if (*v1)
    {
      this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
    else
    {
      uint64_t v4 = &unk_1ECAC6B28;
      this = (void *)MEMORY[0x18530C120](v2, 0x1000C8077774924);
    }
  }
  v1[5] = 0;
  return this;
}

void flatbuffers::DetachedBuffer::~DetachedBuffer(flatbuffers::DetachedBuffer *this)
{
  uint64_t v3 = (_OWORD *)((char *)this + 16);
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v4 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      MEMORY[0x18530C120](v2, 0x1000C8077774924);
    }
  }
  if (*((unsigned char *)this + 8) && *(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
  _OWORD *v3 = 0u;
  v3[1] = 0u;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>(uint64_t a1, _DWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(_DWORD *)(v4 - 4) = *a2;
  uint64_t v5 = v4 - 4;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void validateRenderRasterAndLater<MTLRenderPipelineDescriptorPrivate>(uint64_t a1, void *a2, uint64_t a3)
{
  v151[56] = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)(a3 + 184);
  int v7 = [a2 supportsSeparateVisibilityAndShadingRate];
  unint64_t v13 = *(void *)(a3 + 216);
  if (!v7)
  {
    if (v13) {
      _MTLMessageContextPush_(a1, 4, @"colorSampleCount expected to be 0.", v8, v9, v10, v11, v12, v141);
    }
    goto LABEL_17;
  }
  unint64_t v14 = *(void *)(a3 + 184);
  if (v13) {
    BOOL v15 = v13 > v14;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    _MTLMessageContextPush_(a1, 4, @"colorSampleCount expected to be smaller or equal to rasterSampleCount", v8, v9, v10, v11, v12, v141);
    unint64_t v14 = *(void *)(a3 + 184);
    unint64_t v13 = *(void *)(a3 + 216);
    if (v14)
    {
LABEL_7:
      if (v14 < v13)
      {
        _MTLMessageContextPush_(a1, 4, @"rasterSampleCount expected to be greater or equal to colorSampleCount", v8, v9, v10, v11, v12, v141);
        unint64_t v13 = *(void *)(a3 + 216);
      }
    }
  }
  else if (v14)
  {
    goto LABEL_7;
  }
  if (v13)
  {
    char v16 = objc_msgSend(a2, "supportsTextureSampleCount:");
    unint64_t v22 = *(void *)(a3 + 216);
    if ((v16 & 1) == 0)
    {
      _MTLMessageContextPush_(a1, 4, @"colorSampleCount (%lu) is not supported by device.", v17, v18, v19, v20, v21, *(void *)(a3 + 216));
      unint64_t v22 = *(void *)(a3 + 216);
    }
    if (v22) {
      unint64_t v6 = v22;
    }
  }
LABEL_17:
  unint64_t v142 = v6;
  int v144 = a2;
  unint64_t v143 = [a2 maxColorAttachments];
  uint64_t v23 = 0;
  int v24 = 0;
  BOOL v145 = 0;
  for (unint64_t i = 0; i != 8; ++i)
  {
    uint64_t v26 = *(void *)(*(void *)a3 + 8 + 8 * i);
    if (!v26) {
      continue;
    }
    uint64_t v27 = *(void *)(v26 + 8) >> 36;
    if (!v27) {
      continue;
    }
    uint64_t v149 = 0;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v146 = 0u;
    MTLPixelFormatGetInfoForDevice(v144, v27, (uint64_t)&v146);
    unint64_t v33 = *(void *)(v26 + 8);
    if (v33)
    {
      if ((BYTE8(v146) & 8) == 0)
      {
        _MTLMessageContextPush_(a1, 4, @"Blending is enabled for render target %lu; however, the pixelformat %s for this render target is not blendable.",
          v28,
          v29,
          v30,
          v31,
          v32,
          i);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0xF80) >= 0x980)
      {
        _MTLMessageContextPush_(a1, 4, @"factor is not a valid MTLBlendFactor.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0x1F000) >= 0x13000)
      {
        _MTLMessageContextPush_(a1, 4, @"factor is not a valid MTLBlendFactor.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0x3E0000) >= 0x260000)
      {
        _MTLMessageContextPush_(a1, 4, @"factor is not a valid MTLBlendFactor.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if (((v33 >> 22) & 0x1F) >= 0x13)
      {
        _MTLMessageContextPush_(a1, 4, @"factor is not a valid MTLBlendFactor.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0xE) >= 0xA)
      {
        _MTLMessageContextPush_(a1, 4, @"func is not a valid MTLBlendOperation.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      if ((v33 & 0x70) >= 0x50)
      {
        _MTLMessageContextPush_(a1, 4, @"func is not a valid MTLBlendOperation.", v28, v29, v30, v31, v32, v141);
        unint64_t v33 = *(void *)(v26 + 8);
      }
      validateMTLPixelFormat(v33 >> 36, a1);
      unsigned int v40 = *(_DWORD *)(v26 + 8);
      uint64_t v41 = (v40 >> 7) & 0x1F;
      if (i)
      {
        validateBlendFactorNotDualSourced(i, v41, a1, v35, v36, v37, v38, v39);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 12) & 0x1F, a1, v42, v43, v44, v45, v46);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 17) & 0x1F, a1, v47, v48, v49, v50, v51);
        validateBlendFactorNotDualSourced(i, (*(_DWORD *)(v26 + 8) >> 22) & 0x1F, a1, v52, v53, v54, v55, v56);
      }
      else
      {
        blendFactorSource((v40 >> 7) & 0x1F, v41, v34, v35, v36, v37, v38, v39);
        if (v59 == 2
          || (blendFactorSource((*(_DWORD *)(v26 + 8) >> 12) & 0x1F, v57, v58, v28, v29, v30, v31, v32), v62 == 2)
          || (blendFactorSource((*(_DWORD *)(v26 + 8) >> 17) & 0x1F, v60, v61, v28, v29, v30, v31, v32), v65 == 2))
        {
          BOOL v66 = 1;
        }
        else
        {
          blendFactorSource((*(_DWORD *)(v26 + 8) >> 22) & 0x1F, v63, v64, v28, v29, v30, v31, v32);
          BOOL v66 = v71 == 2;
        }
        BOOL v145 = v66;
      }
    }
    uint64_t v67 = (*(void *)(*(void *)(*(void *)a3 + 8 + 8 * i) + 8) >> 27) & 0xFLL;
    if (v67) {
      BOOL v68 = v67 == 15;
    }
    else {
      BOOL v68 = 1;
    }
    if (!v68 && (BYTE9(v146) & 0x80) != 0) {
      _MTLMessageContextPush_(a1, 4, @"writeMask(0x%lx) is not MTLColorWriteMaskAll or MTLColorWriteMaskNone for render target %lu; however, the pixelformat %s for this render target requires MTLColorWriteMaskAll or MTLColorWriteMaskNone.",
    }
        v28,
        v29,
        v30,
        v31,
        v32,
        v67);
    if (i >= v143) {
      _MTLMessageContextPush_(a1, 4, @"MTLRenderPipelineDescriptor color render target(%lu) exceeds platform max(%lu).", v28, v29, v30, v31, v32, i);
    }
    if (BYTE8(v146))
    {
      if ((BYTE8(v146) & 0x10) == 0) {
        goto LABEL_59;
      }
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, @"pixelFormat, for color render target(%lu), is not a valid MTLPixelFormat.", v28, v29, v30, v31, v32, i);
      if ((BYTE8(v146) & 0x10) == 0) {
LABEL_59:
      }
        _MTLMessageContextPush_(a1, 4, @"pixelFormat, for color render target(%lu), %s is not color renderable.", v28, v29, v30, v31, v32, i);
    }
    if (i != 0 && v145) {
      _MTLMessageContextPush_(a1, 4, @"Dual source blending is used in combination with multiple render targets", v28, v29, v30, v31, v32, v141);
    }
    v150[v23] = v27;
    uint64_t v69 = &v151[7 * v23++];
    long long v70 = v147;
    *(_OWORD *)uint64_t v69 = v146;
    *((_OWORD *)v69 + 1) = v70;
    *((_OWORD *)v69 + 2) = v148;
    v69[6] = v149;
    int v24 = 1;
  }
  uint64_t v72 = *(void *)(*(void *)a3 + 8);
  if (v72)
  {
    uint64_t v73 = *(void *)(v72 + 8) >> 36;
    if (v73)
    {
      uint64_t v149 = 0;
      long long v147 = 0u;
      long long v148 = 0u;
      long long v146 = 0u;
      MTLPixelFormatGetInfoForDevice(v144, v73, (uint64_t)&v146);
      uint64_t v79 = *(void *)(a3 + 224);
      char v80 = BYTE8(v146);
      if ((v79 & 1) != 0 && (BYTE8(v146) & 8) == 0)
      {
        _MTLMessageContextPush_(a1, 4, @"MTLRenderPipelineDescriptor with alphaToCoverageEnabled requires a float/unorm pixel format, but colorAttachments[0].pixelFormat(%s) is not blendable", v74, v75, v76, v77, v78, v146);
        char v80 = BYTE8(v146);
        if ((*(void *)(a3 + 224) & 2) != 0) {
          goto LABEL_65;
        }
      }
      else if ((v79 & 2) != 0)
      {
LABEL_65:
        if ((v80 & 8) == 0) {
          _MTLMessageContextPush_(a1, 4, @"MTLRenderPipelineDescriptor with alphaToOneEnabled requires a float/unorm pixel format, but colorAttachments[0].pixelFormat(%s) is not blendable", v74, v75, v76, v77, v78, v146);
        }
      }
    }
  }
  unint64_t v81 = [v144 maxFramebufferStorageBits];
  uint64_t v82 = MTLPixelFormatComputeTotalSizeUsed((uint64_t)v151, v150, v23, v142 > 1);
  if (([v144 isLargeMRTSupported] & 1) == 0 && 8 * v82 > v81) {
    _MTLMessageContextPush_(a1, 4, @"This set of render targets requires %lu bytes of pixel storage. This device supports %lu bytes.", v83, v84, v85, v86, v87, v82 & 0x1FFFFFFFFFFFFFFFLL);
  }
  uint64_t v88 = *(void *)(a3 + 72);
  if (v88)
  {
    MTLPixelFormatGetInfoForDevice(v144, v88, (uint64_t)&v146);
    uint64_t v94 = v146;
    LOBYTE(v81) = BYTE8(v146);
    if (BYTE8(v146))
    {
      if ((BYTE8(v146) & 0x20) != 0) {
        goto LABEL_73;
      }
LABEL_99:
      _MTLMessageContextPush_(a1, 4, @"depthAttachmentPixelFormat %s is not depth renderable.", v89, v90, v91, v92, v93, v94);
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, @"depthAttachmentPixelFormat is not a valid MTLPixelFormat.", v89, v90, v91, v92, v93, v141);
      if ((v81 & 0x20) == 0) {
        goto LABEL_99;
      }
    }
LABEL_73:
    int v24 = 1;
  }
  uint64_t v95 = *(void *)(a3 + 80);
  if (v95)
  {
    MTLPixelFormatGetInfoForDevice(v144, v95, (uint64_t)&v146);
    uint64_t v101 = v146;
    LOBYTE(i) = BYTE8(v146);
    if (BYTE8(v146))
    {
      if ((BYTE8(v146) & 0x40) != 0) {
        goto LABEL_77;
      }
LABEL_101:
      _MTLMessageContextPush_(a1, 4, @"stencilAttachmentPixelFormat %s is not stencil renderable.", v96, v97, v98, v99, v100, v101);
    }
    else
    {
      _MTLMessageContextPush_(a1, 4, @"stencilAttachmentPixelFormat is not a valid MTLPixelFormat.", v96, v97, v98, v99, v100, v141);
      if ((i & 0x40) == 0) {
        goto LABEL_101;
      }
    }
LABEL_77:
    int v24 = 1;
  }
  if (dyld_program_sdk_at_least()
    && (([v144 supportsRenderPassWithoutRenderTarget] | v24) & 1) == 0)
  {
    _MTLMessageContextPush_(a1, 4, @"No valid pixelFormats set.", v102, v103, v104, v105, v106, v141);
  }
  uint64_t v107 = *(void *)(a3 + 72);
  uint64_t v108 = *(void *)(a3 + 80);
  if (v107 && v108 && i & 0x20 | v81 & 0x40 && v107 != v108)
  {
    uint64_t Name = MTLPixelFormatGetName(v107);
    MTLPixelFormatGetName(*(void *)(a3 + 80));
    _MTLMessageContextPush_(a1, 4, @"depthAttachmentPixelFormat (%s) and stencilAttachmentPixelFormat (%s) must match.", v130, v131, v132, v133, v134, Name);
    uint64_t v108 = *(void *)(a3 + 80);
    if (*(void *)(a3 + 72)) {
      goto LABEL_86;
    }
  }
  else if (v107)
  {
LABEL_86:
    if (v108)
    {
      char v109 = [v144 supportsSeparateDepthStencil];
      if (i & 0x20 | v81 & 0x40 || (v109 & 1) == 0)
      {
        uint64_t v110 = *(void *)(a3 + 72);
        if (v110 != *(void *)(a3 + 80))
        {
          uint64_t v135 = MTLPixelFormatGetName(v110);
          MTLPixelFormatGetName(*(void *)(a3 + 80));
          _MTLMessageContextPush_(a1, 4, @"depthAttachmentPixelFormat (%s) and stencilAttachmentPixelFormat (%s) must match.", v136, v137, v138, v139, v140, v135);
        }
      }
    }
  }
  unsigned int v111 = *(_DWORD *)(a3 + 476);
  if (!v111)
  {
    _MTLMessageContextPush_(a1, 4, @"maxVertexAmplificationCount (%u) cannot be set to zero.", v102, v103, v104, v105, v106, 0);
    unsigned int v111 = *(_DWORD *)(a3 + 476);
  }
  if (([v144 supportsVertexAmplificationCount:v111] & 1) == 0) {
    _MTLMessageContextPush_(a1, 4, @"maxVertexAmplificationCount (%u) is not supported on this device. See supportsVertexAmplificationCount:(NSUInteger).", v112, v113, v114, v115, v116, *(unsigned int *)(a3 + 476));
  }
  if (([v144 supportsTextureWriteRoundingMode:*(void *)(a3 + 176)] & 1) == 0)
  {
    uint64_t v123 = MTLRoundingModeString(*(void *)(a3 + 176));
    _MTLMessageContextPush_(a1, 4, @"device does not support %@", v124, v125, v126, v127, v128, (uint64_t)v123);
  }
  validateMTLCompareFunction((*(void *)(a3 + 224) >> 23) & 7, a1, v117, v118, v119, v120, v121, v122, v141);
  validateMTLPixelFormat(*(void *)(a3 + 72), a1);
  validateMTLPixelFormat(*(void *)(a3 + 80), a1);
}

void validateMTLPixelFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  MTLPixelFormatGetInfoForDevice(0, a1, (uint64_t)v9);
  if (a1)
  {
    if ((BYTE8(v9[0]) & 1) == 0) {
      _MTLMessageContextPush_(a2, 4, @"pixelFormat is not a valid MTLPixelFormat.", v4, v5, v6, v7, v8, *(uint64_t *)&v9[0]);
    }
  }
}

void validateMTLCompareFunction(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1 >= 8) {
    _MTLMessageContextPush_(a2, 4, @"function is not a valid MTLCompareFunction.", a4, a5, a6, a7, a8, a9);
  }
}

uint64_t MTLPixelFormatComputeTotalSizeUsed(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (a3)
  {
    uint64_t result = 0;
    uint64_t v6 = (uint64_t *)(a1 + 48);
    while (1)
    {
      uint64_t v8 = *a2++;
      uint64_t v7 = v8;
      if ((unint64_t)(v8 - 603) < 2)
      {
        uint64_t v9 = 4;
      }
      else
      {
        uint64_t v9 = 4;
        if (v7 != 622)
        {
          if (v7 != 605)
          {
            int v10 = *((unsigned __int8 *)v6 - 15);
            uint64_t v9 = *(v6 - 1);
            uint64_t v11 = *v6;
            goto LABEL_9;
          }
          uint64_t v9 = 8;
        }
      }
      int v10 = 4;
      uint64_t v11 = v9;
LABEL_9:
      v6 += 7;
      if (a4) {
        uint64_t v9 = v11;
      }
      uint64_t result = ((result + v10 - 1) & -v10) + v9;
      if (!--a3) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>(uint64_t a1, _DWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 4;
  *(_DWORD *)(v4 - 4) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>(uint64_t a1, _WORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 1)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 2uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 2;
  *(_WORD *)(v4 - 2) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

void validateBlendFactorNotDualSourced(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = a2;
  blendFactorSource(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11 == 2)
  {
    MTLBlendFactorString((MTLBlendFactor)v9);
    _MTLMessageContextPush_(a3, 4, @"MTLRenderPipelineDescriptor color render target(%lu) is using a blend factor (%@)which is can only be used for render target 0", v12, v13, v14, v15, v16, a1);
  }
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>(uint64_t a1, _OWORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 0xF)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x10uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 16;
  *(_OWORD *)(v4 - 16) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>(uint64_t a1, void *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 48) = v4 - 8;
  *(void *)(v4 - 8) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(uint64_t a1, _WORD *a2)
{
  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  uint64_t v4 = *(void *)(a1 + 48);
  if ((unint64_t)(v4 - *(void *)(a1 + 56)) <= 1)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 2uLL);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = *a2;
  uint64_t v5 = v4 - 2;
  *(void *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

void sub_182729344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182729E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _MTLFixIABReflectionOffsetsWithLayout(void *a1, void *a2, void *a3)
{
  char v6 = [a2 bufferLayoutMatchesFrontEndLayout];
  if ((v6 & 1) == 0)
  {
    objc_msgSend(a1, "setDataSize:", objc_msgSend(a2, "encodedLength"));
    uint64_t v7 = (void *)[a1 dataTypeDescription];
    updatePointerType(v7, a2, a3);
    objc_msgSend(a1, "setAlignment:", objc_msgSend(v7, "alignment"));
  }
  uint64_t result = objc_msgSend((id)objc_msgSend(a1, "bufferStructType"), "isIndirectArgumentBuffer");
  if (result)
  {
    uint64_t result = getGlobalConstantOffsets((void *)[a1 bufferStructType], 0, a2, a3, v10);
    if ((v6 & 1) == 0)
    {
      unsigned int v9 = (MTLStructType *)[a1 bufferStructType];
      return makeOffsetRelative(v9, 0);
    }
  }
  return result;
}

uint64_t MTLIndirectResourceEnumerator::collectIndirectResources(MTLIndirectResourceEnumerator *this, MTLStructType *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    uint64_t v4 = [(MTLStructType *)a2 members];
    uint64_t v5 = [(NSArray *)v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      unint64_t v7 = 0;
      uint64_t v8 = *(void *)v19;
      while (1)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v4);
          }
          int v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          unint64_t v11 = [v10 indirectArgumentIndex] + a3;
          uint64_t v12 = [v10 dataType];
          if ((unint64_t)(v12 - 58) <= 0x16)
          {
            if (((1 << (v12 - 58)) & 0x700003) != 0) {
              goto LABEL_9;
            }
            if (v12 == 60)
            {
              uint64_t v14 = (void *)[v10 dataTypeDescription];
              if ([v14 elementIsArgumentBuffer]
                && [v14 elementTypeDescription])
              {
                (*(void (**)(void))(*(void *)this + 16))();
              }
LABEL_9:
              unint64_t v13 = v11 + 1;
              goto LABEL_19;
            }
          }
          if (v12 == 2)
          {
            unint64_t v15 = MTLIndirectResourceEnumerator::collectIndirectResources(this, (MTLArrayType *)[v10 arrayType], v11);
          }
          else
          {
            if (v12 != 1) {
              goto LABEL_9;
            }
            unint64_t v15 = MTLIndirectResourceEnumerator::collectIndirectResources(this, (MTLStructType *)[v10 structType], v11);
          }
          unint64_t v13 = v15 + v11;
LABEL_19:
          if (v13 > v7) {
            unint64_t v7 = v13;
          }
        }
        uint64_t v6 = [(NSArray *)v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (!v6) {
          return v7 - a3;
        }
      }
    }
  }
  unint64_t v7 = 0;
  return v7 - a3;
}

uint64_t getGlobalConstantOffsets@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v7 = [a3 bufferLayoutMatchesFrontEndLayout];
  *a5 = 1;
  a5[1] = -1;
  a5[2] = -1;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id obj = (id)[a1 members];
  uint64_t result = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (!result)
  {
    uint64_t v19 = 0;
    goto LABEL_32;
  }
  uint64_t v9 = result;
  uint64_t v10 = *(void *)v27;
  unint64_t v11 = -1;
  do
  {
    uint64_t v12 = 0;
    do
    {
      if (*(void *)v27 != v10) {
        objc_enumerationMutation(obj);
      }
      unint64_t v13 = *(void **)(*((void *)&v26 + 1) + 8 * v12);
      uint64_t v14 = [v13 indirectArgumentIndex];
      uint64_t v15 = [v13 dataType];
      if ((unint64_t)(v15 - 57) <= 0x3D)
      {
        if (((1 << (v15 - 57)) & 0x3C00000000E00006) != 0)
        {
          unint64_t v16 = -1;
          uint64_t v17 = -1;
          uint64_t v18 = 1;
          goto LABEL_17;
        }
        if (v15 == 60)
        {
          getGlobalConstantOffsets((void *)[v13 dataTypeDescription], a4, v25);
LABEL_16:
          uint64_t v18 = v25[0];
          unint64_t v16 = v25[1];
          uint64_t v17 = v25[2];
LABEL_17:
          uint64_t v19 = v18 + v14;
          if ((v7 & 1) == 0) {
            goto LABEL_18;
          }
          goto LABEL_22;
        }
        if (v15 == 57) {
          abort();
        }
      }
      uint64_t v17 = v14 + a2;
      if (v15 == 2)
      {
        getGlobalConstantOffsets((void *)[v13 arrayType], v17, a3, a4, v25);
        goto LABEL_16;
      }
      if (v15 == 1)
      {
        getGlobalConstantOffsets(v25, [v13 structType], v17, a3, a4);
        goto LABEL_16;
      }
      if (!v7)
      {
        unint64_t v16 = [a3 constantOffsetAtIndex:v14 + a2];
        uint64_t v19 = v14 + 1;
LABEL_18:
        if (v17 == -1) {
          uint64_t v20 = -1;
        }
        else {
          uint64_t v20 = v16;
        }
        [v13 setOffset:v20];
        goto LABEL_22;
      }
      unint64_t v16 = 0;
      uint64_t v19 = v14 + 1;
LABEL_22:
      if (v16 < v11)
      {
        a5[1] = v16;
        a5[2] = v17;
        unint64_t v11 = v16;
      }
      ++v12;
    }
    while (v9 != v12);
    uint64_t result = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
    uint64_t v9 = result;
  }
  while (result);
LABEL_32:
  *a5 = v19;
  return result;
}

uint64_t structIsIndirectArgumentBuffer(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = (void *)result;
    if ([(id)result isIndirectArgumentBuffer]) {
      return 1;
    }
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v2 = objc_msgSend(v1, "members", 0);
    uint64_t result = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (result)
    {
      uint64_t v3 = result;
      uint64_t v4 = *(void *)v10;
LABEL_6:
      uint64_t v5 = 0;
      while (1)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * v5);
        uint64_t v7 = [v6 dataType];
        if (v7 <= 1)
        {
          if (v7 != 1) {
            return 0;
          }
          if (structIsIndirectArgumentBuffer([v6 structType])) {
            return 1;
          }
        }
        else
        {
          uint64_t v8 = v7;
          if (v7 != 2)
          {
            uint64_t result = 1;
            if ((unint64_t)(v8 - 57) >= 4 && (unint64_t)(v8 - 78) >= 3) {
              return 0;
            }
            return result;
          }
          if (arrayIsIndirectArgumentBuffer((void *)[v6 arrayType])) {
            return 1;
          }
        }
        if (v3 == ++v5)
        {
          uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
          uint64_t result = 0;
          if (v3) {
            goto LABEL_6;
          }
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t arrayIsIndirectArgumentBuffer(void *a1)
{
  while (1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = [a1 elementType];
    if (v2 != 2) {
      break;
    }
    a1 = (void *)[v1 elementArrayType];
  }
  if ((unint64_t)(v2 - 57) <= 0x17 && ((1 << (v2 - 57)) & 0xE0000F) != 0) {
    return 1;
  }
  if (v2 != 1) {
    return 0;
  }
  uint64_t v4 = [v1 elementStructType];

  return structIsIndirectArgumentBuffer(v4);
}

void getGlobalConstantOffsets(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 1;
  a3[1] = -1;
  a3[2] = -1;
  if ([a1 elementIsArgumentBuffer])
  {
    uint64_t v5 = (MTLStructType *)[a1 elementTypeDescription];
    id v6 = (id)[a2 newIndirectArgumentBufferLayoutWithStructType:v5];
    getGlobalConstantOffsets(v7, v5, 0, v6, a2);
    if (([v6 bufferLayoutMatchesFrontEndLayout] & 1) == 0)
    {
      updatePointerType(a1, v6, a2);
      makeOffsetRelative(v5, 0);
    }
  }
}

void sub_18272B050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

dispatch_data_t _MTLNewReflectionData(dispatch_data_t data, unsigned int a2)
{
  uint64_t v2 = data;
  if (!data) {
    return v2;
  }
  if (MTLUseAirntReflection(void)::once_token != -1) {
    dispatch_once(&MTLUseAirntReflection(void)::once_token, &__block_literal_global_4);
  }
  size_t v17 = 0;
  buffer_ptr = 0;
  subrange = dispatch_data_create_subrange(v2, 0, 0x50uLL);
  uint64_t v5 = dispatch_data_create_map(subrange, (const void **)&buffer_ptr, &v17);
  dispatch_release(subrange);
  id v6 = buffer_ptr;
  if (*(void *)buffer_ptr != 0x8EF13C710)
  {
    dispatch_release(v5);
    if (*(void *)buffer_ptr != 0x56484645524C544DLL)
    {
      dispatch_retain(v2);
      return v2;
    }
    size_t size_ptr = 0;
    uint64_t v20 = 0;
    uint64_t v5 = dispatch_data_create_map(v2, (const void **)&v20, &size_ptr);
    size_t v9 = *((void *)v20 + 2);
    if (a2 == 4)
    {
      size_t v14 = *((void *)v20 + 6);
      if (v14)
      {
        size_t v15 = v9 + *((void *)v20 + 3) + *((void *)v20 + 4) + *((void *)v20 + 5);
LABEL_28:
        size_t v11 = v15 + 56;
        long long v10 = v2;
        size_t v9 = v14;
        goto LABEL_29;
      }
    }
    else
    {
      if (a2 == 3)
      {
LABEL_12:
        long long v10 = v2;
        size_t v11 = 56;
LABEL_29:
        uint64_t v2 = dispatch_data_create_subrange(v10, v11, v9);
LABEL_32:
        dispatch_release(v5);
        return v2;
      }
      size_t v14 = *((void *)v20 + a2 + 3);
      if (v14)
      {
        size_t v15 = v9 + *((void *)v20 + a2 + 2);
        goto LABEL_28;
      }
      if (v9) {
        goto LABEL_12;
      }
    }
LABEL_31:
    uint64_t v2 = 0;
    goto LABEL_32;
  }
  switch(a2)
  {
    case 1u:
      size_t v7 = *((void *)buffer_ptr + 7);
      if (!v7) {
        goto LABEL_18;
      }
      uint64_t v8 = (size_t *)((char *)buffer_ptr + 48);
      break;
    case 2u:
      size_t v7 = *((void *)buffer_ptr + 5);
      if (!v7) {
        goto LABEL_18;
      }
      uint64_t v8 = (size_t *)((char *)buffer_ptr + 32);
      break;
    case 3u:
      size_t v7 = *((void *)buffer_ptr + 3);
      if (!v7) {
        goto LABEL_18;
      }
      uint64_t v8 = (size_t *)((char *)buffer_ptr + 16);
      break;
    case 4u:
      size_t v9 = *((void *)buffer_ptr + 9);
      if (!v9) {
        goto LABEL_31;
      }
      size_t v11 = *((void *)buffer_ptr + 8);
      long long v10 = v2;
      goto LABEL_29;
    default:
      goto LABEL_18;
  }
  dispatch_data_t v12 = dispatch_data_create_subrange(v2, *v8, v7);
  if (!v12)
  {
LABEL_18:
    size_t v13 = v6[3];
    if (v13) {
      dispatch_data_t v12 = dispatch_data_create_subrange(v2, v6[2], v13);
    }
    else {
      dispatch_data_t v12 = 0;
    }
  }
  dispatch_release(v5);
  return v12;
}

void MTLArgumentDeserializer::deserializePluginData(uint64_t a1, dispatch_data_t data)
{
  if (!*(void *)(a1 + 48))
  {
    size_t v7 = 0;
    buffer_ptr = 0;
    if (data)
    {
      dispatch_data_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v7);
      if (v3)
      {
        uint64_t v4 = v3;
        if (v7)
        {
          id v5 = objc_alloc(MEMORY[0x1E4F1C9B8]);
          uint64_t v6 = [v5 initWithBytes:buffer_ptr length:v7];
        }
        else
        {
          uint64_t v6 = 0;
        }
        *(void *)(a1 + 48) = v6;
        dispatch_release(v4);
      }
    }
  }
}

uint64_t ReflectionValidator<MTLVertexReflectionReader>::Validate()
{
  return 1;
}

dispatch_data_t MTLNewReflectionPluginData(NSObject *a1)
{
  return _MTLNewReflectionData(a1, 4u);
}

dispatch_data_t MTLNewEmulationReflectionData(NSObject *a1)
{
  return _MTLNewReflectionData(a1, 2u);
}

uint64_t MTLFragmentReflectionReader::deserialize(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void _MTLFixIABReflectionOffsets(void *a1, void *a2)
{
  if (![a1 type] && objc_msgSend(a1, "bufferDataType") == 1)
  {
    uint64_t v4 = (void *)[a1 dataTypeDescription];
    if ([v4 elementIsArgumentBuffer])
    {
      id v5 = (id)objc_msgSend(a2, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v4, "elementTypeDescription"));
      _MTLFixIABReflectionOffsetsWithLayout(a1, v5, a2);
    }
  }
}

void ReflectionReaderFactory<MTLComputeReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
}

void sub_18272BA20(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C404B152E84);
  _Unwind_Resume(a1);
}

void MTLArgumentDeserializer::MTLArgumentDeserializer(MTLArgumentDeserializer *this, uint64_t a2)
{
  *(void *)this = &unk_1ECAC6050;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 1065353216;
  *((void *)this + 12) = a2;
  *((_DWORD *)this + 26) = 0;
}

uint64_t ShouldCreateAIRVersion(NSObject *a1)
{
  if (!a1) {
    return 0;
  }
  size_t v7 = 0;
  size_t size_ptr = 0;
  dispatch_data_t v1 = dispatch_data_create_map(a1, (const void **)&v7, &size_ptr);
  uint64_t v2 = v1;
  if (size_ptr < 8)
  {
    uint64_t v5 = 0;
    if (!v1) {
      return v5;
    }
LABEL_10:
    dispatch_release(v2);
    return v5;
  }
  uint64_t v3 = *v7;
  unsigned int v4 = MTLUseAirntReflection();
  if (v3 == 0x4E494253504C544DLL) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v2) {
    goto LABEL_10;
  }
  return v5;
}

uint64_t MTLUseAirntReflection(void)
{
  if (MTLUseAirntReflection(void)::once_token != -1) {
    dispatch_once(&MTLUseAirntReflection(void)::once_token, &__block_literal_global_4);
  }
  return 1;
}

void *MTLInputStageReflectionReader::MTLInputStageReflectionReader(void *result, uint64_t a2)
{
  *uint64_t result = &unk_1ECAC67F8;
  result[1] = a2;
  result[2] = a2;
  return result;
}

void MTLComputeReflectionReader::~MTLComputeReflectionReader(MTLComputeReflectionReader *this)
{
  *(void *)this = &unk_1ECAC59C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;

  JUMPOUT(0x18530C140);
}

{
  uint64_t v2;

  *(void *)this = &unk_1ECAC59C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
}

void MTLInputStageReflectionDeserializer::~MTLInputStageReflectionDeserializer(MTLInputStageReflectionDeserializer *this)
{
  MTLInputStageReflectionDeserializer::~MTLInputStageReflectionDeserializer(this);

  JUMPOUT(0x18530C140);
}

{
  unint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1ECAC6978;
  if (*((_DWORD *)this + 28))
  {
    uint64_t v2 = 0;
    do

    while (v2 < *((unsigned int *)this + 28));
  }
  free(*((void **)this + 15));
  *((void *)this + 15) = 0;

  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
}

void MTLArgumentDeserializer::~MTLArgumentDeserializer(MTLArgumentDeserializer *this)
{
  *(void *)this = &unk_1ECAC6050;
  if (*((_DWORD *)this + 4))
  {
    unint64_t v2 = 0;
    do

    while (v2 < *((unsigned int *)this + 4));
  }
  free(*((void **)this + 1));
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    if (*((_DWORD *)this + 8))
    {
      unint64_t v4 = 0;
      do

      while (v4 < *((unsigned int *)this + 8));
      uint64_t v3 = (void *)*((void *)this + 3);
    }
    free(v3);
  }

  *((void *)this + 6) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 56);
}

void MTLInputStageReflectionDeserializer::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (data)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    unint64_t v6 = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 151) = 0;
    unint64_t v7 = *(void *)(a1 + 96);
    size_t v9 = size_ptr;
    uint64_t v8 = buffer_ptr;
    uint64_t v57 = (char *)buffer_ptr;
    size_t v58 = size_ptr;
    size_t v59 = 0;
    *(_DWORD *)(a1 + 104) = 0;
    if (v9 >= 8)
    {
      if (*(void *)v8 == 0x4E494253504C544DLL)
      {
        size_t v59 = 8;
        if (v9 < 9 || (v9 & 0xFFFFFFFFFFFFFFFCLL) == 8) {
          goto LABEL_68;
        }
        int v10 = v8[2];
        unint64_t v6 = 12;
        size_t v59 = 12;
        *(_DWORD *)(a1 + 104) = v10;
      }
      else
      {
        unint64_t v6 = 0;
      }
    }
    unint64_t v11 = v9 - v6;
    if (v9 <= v6 || v11 <= 3) {
      goto LABEL_68;
    }
    int v12 = v8[v6 / 4];
    unint64_t v13 = v6 + 4;
    size_t v59 = v13;
    *(_DWORD *)(a1 + 160) = v12;
    if (v12)
    {
      unint64_t v14 = v11 - 4;
      while (v13 < v9 && v14 > 3)
      {
        uint64_t v15 = *(unsigned int *)((char *)v8 + v13);
        v13 += 4;
        size_t v59 = v13;
        *(unsigned char *)(a1 + v15 + 128) = 1;
        v14 -= 4;
        if (!--v12) {
          goto LABEL_16;
        }
      }
LABEL_68:
      abort();
    }
LABEL_16:
    uint64_t v16 = (v7 >> 1) & 1;
    deserializeArgumentsWithDeserializer(a2, a1, (DeserialContext *)&v57, (v7 >> 1) & 1);
    unint64_t v18 = v58;
    size_t v17 = v59;
    if (v58 <= v59) {
      goto LABEL_68;
    }
    if (v58 - v59 <= 3) {
      goto LABEL_68;
    }
    uint64_t v19 = v57;
    int v20 = *(_DWORD *)&v57[v59];
    v59 += 4;
    *(_DWORD *)(a1 + 108) = v20;
    if (v18 <= v17 + 4) {
      goto LABEL_68;
    }
    if (v18 - (v17 + 4) <= 3) {
      goto LABEL_68;
    }
    uint64_t v21 = *(void *)(a1 + 96);
    size_t v22 = *(unsigned int *)&v19[v17 + 4];
    size_t v59 = v17 + 8;
    BOOL v31 = v18 > v17 + 8;
    unint64_t v23 = v18 - (v17 + 8);
    if (!v31 || v23 <= 3) {
      goto LABEL_68;
    }
    unsigned int v24 = *(_DWORD *)&v19[v17 + 8];
    size_t v25 = v17 + 12;
    size_t v59 = v25;
    if ((v21 & 0x80000) != 0) {
      unsigned int v26 = v24;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v26)
    {
      int v53 = v21;
      size_t v54 = v22;
      int v55 = v16;
      uint64_t v56 = v5;
      unsigned int v52 = v26;
      size_t v27 = 8 * v26;
      uint64_t v28 = 0;
      *(void *)(a1 + 120) = malloc_type_malloc(v27, 0x80040B8603338uLL);
      do
      {
        uint64_t v29 = DeserialContext::stringFromSerializedData((DeserialContext *)&v57);
        size_t v30 = v59;
        BOOL v31 = v58 > v59 && v58 - v59 > 3;
        if (!v31) {
          goto LABEL_68;
        }
        uint64_t v32 = *(unsigned int *)&v57[v59];
        v59 += 4;
        if (v58 <= v30 + 4 || v58 - (v30 + 4) <= 3) {
          goto LABEL_68;
        }
        uint64_t v34 = *(unsigned int *)&v57[v30 + 4];
        size_t v59 = v30 + 8;
        if (v58 <= v30 + 8 || v58 - (v30 + 8) <= 3) {
          goto LABEL_68;
        }
        uint64_t v36 = v29;
        uint64_t v37 = *(unsigned int *)&v57[v30 + 8];
        size_t v59 = v30 + 12;
        uint64_t v38 = DeserialContext::stringFromSerializedData((DeserialContext *)&v57);
        if (v58 <= v59 || v58 - v59 <= 3) {
          goto LABEL_68;
        }
        uint64_t v39 = *(unsigned int *)&v57[v59];
        v59 += 4;
        *(void *)(*(void *)(a1 + 120) + v28) = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:v36 dataType:v32 pixelFormat:v34 aluType:v37 name:v38 offset:v39];
        v28 += 8;
      }
      while (v27 != v28);
      size_t v25 = v59;
      uint64_t v5 = v56;
      size_t v22 = v54;
      LODWORD(v16) = v55;
      unsigned int v26 = v52;
      LODWORD(v21) = v53;
    }
    if ((v21 & 0x80000) != 0 && v25 != v22) {
      goto LABEL_68;
    }
    size_t v59 = v22;
    size_t v40 = v58;
    unint64_t v42 = v58 - v22;
    BOOL v41 = v58 > v22;
    if (v58 < v22) {
      goto LABEL_68;
    }
    *(_DWORD *)(a1 + 112) = v26;
    if (!v41 || v42 <= 3) {
      goto LABEL_68;
    }
    uint64_t v43 = v57;
    int v44 = *(_DWORD *)&v57[v22];
    size_t v45 = v22 + 4;
    size_t v59 = v22 + 4;
    *(_DWORD *)(a1 + 40) = v44;
    unsigned int v46 = *(_DWORD *)(a1 + 104);
    if (HIWORD(v46))
    {
      BOOL v31 = v40 > v45;
      unint64_t v47 = v40 - v45;
      if (!v31 || v47 <= 3) {
        goto LABEL_68;
      }
      uint64_t v48 = *(unsigned int *)&v43[v45];
      size_t v59 = v22 + 8;
      if (v48)
      {
        id v49 = objc_alloc(MEMORY[0x1E4F1C9B8]);
        size_t v50 = v59;
        if (v59 >= v58) {
          goto LABEL_68;
        }
        v59 += v48;
        if (v50 + v48 > v58) {
          goto LABEL_68;
        }
        uint64_t v51 = [v49 initWithBytes:&v57[v50] length:v48];
        unsigned int v46 = *(_DWORD *)(a1 + 104);
      }
      else
      {
        uint64_t v51 = 0;
      }
      *(void *)(a1 + 48) = v51;
      if (v46 >= 0x20000) {
        deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v57, v16);
      }
    }
    if (v59 != size_ptr) {
      goto LABEL_68;
    }
    size_t v59 = size_ptr;
    if (v58 < size_ptr) {
      goto LABEL_68;
    }
    dispatch_release(v5);
  }
  else
  {
    *(_DWORD *)(a1 + 40) = -1;
  }
}

uint64_t DeserialContext::moveToOffset(uint64_t this, unint64_t a2, int a3)
{
  if (a3 && *(void *)(this + 16) != a2 || (*(void *)(this + 16) = a2, *(void *)(this + 8) < a2)) {
    abort();
  }
  return this;
}

uint64_t deserializeGlobalBindingsWithDeserializer(void *a1, uint64_t a2, DeserialContext *this, int a4)
{
  unsigned int v8 = DeserialContext::deserializeUint32(this);
  *(_DWORD *)(a2 + 32) = deserializeArguments(a1, this, a4, (void **)(a2 + 24), (void *)(a2 + 56), *(_DWORD *)(a2 + 104), 0);

  return DeserialContext::moveToOffset((uint64_t)this, v8, a4);
}

uint64_t deserializeArgumentsWithDeserializer(void *a1, uint64_t a2, DeserialContext *this, int a4)
{
  *(_DWORD *)(a2 + 36) = DeserialContext::deserializeUint32(this);
  unsigned int v8 = DeserialContext::deserializeUint32(this);
  *(_DWORD *)(a2 + 16) = deserializeArguments(a1, this, a4, (void **)(a2 + 8), (void *)(a2 + 56), *(_DWORD *)(a2 + 104), 1);

  return DeserialContext::moveToOffset((uint64_t)this, v8, a4);
}

uint64_t MTLInputStageReflectionDeserializer::deserialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 24))(a1, a2, a3, 0);
}

void MTLFragmentReflectionReader::~MTLFragmentReflectionReader(MTLFragmentReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);

  JUMPOUT(0x18530C140);
}

void MTLArgumentReader::~MTLArgumentReader(MTLArgumentReader *this)
{
  *(void *)this = &unk_1ECAC59C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
}

{
  uint64_t v2;

  *(void *)this = &unk_1ECAC59C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1ECAC59C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;

  JUMPOUT(0x18530C140);
}

void ReflectionReaderFactory<MTLFragmentReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
}

void sub_18272C4D0(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A1C40B6334502);
  _Unwind_Resume(a1);
}

void MTLArgumentReader::MTLArgumentReader(MTLArgumentReader *this, MTLArgumentDeserializer *a2)
{
  *(void *)this = &unk_1ECAC59C8;
  *((void *)this + 1) = a2;
}

uint64_t MTLInputStageReflectionReader::deserialize(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[2] + 24))(a1[2]);
  if (a4)
  {
    uint64_t v7 = (uint64_t)(a1[2] + 16);
    unsigned int v8 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[3];
    return v8(a1, a4, v7);
  }
  return result;
}

void ReflectionReaderFactory<MTLVertexReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
}

void sub_18272C754(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C404B152E84);
  _Unwind_Resume(a1);
}

void MTLVertexReflectionReader::~MTLVertexReflectionReader(MTLVertexReflectionReader *this)
{
  *(void *)this = &unk_1ECAC59C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;

  JUMPOUT(0x18530C140);
}

{
  uint64_t v2;

  *(void *)this = &unk_1ECAC59C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 1) = 0;
}

void MTLVertexReflectionDeserializerAIR::~MTLVertexReflectionDeserializerAIR(MTLVertexReflectionDeserializerAIR *this)
{
  MTLInputStageReflectionDeserializer::~MTLInputStageReflectionDeserializer(this);

  JUMPOUT(0x18530C140);
}

void MTLFragmentReflectionDeserializerAIR::~MTLFragmentReflectionDeserializerAIR(id *this)
{
  MTLFragmentReflectionDeserializer::~MTLFragmentReflectionDeserializer(this);

  JUMPOUT(0x18530C140);
}

void MTLFragmentReflectionDeserializer::~MTLFragmentReflectionDeserializer(id *this)
{
  *this = &unk_1ECAC6868;
  if (*((unsigned char *)this + 120)) {

  }
  this[14] = 0;

  MTLArgumentDeserializer::~MTLArgumentDeserializer((MTLArgumentDeserializer *)this);
}

void MTLFragmentReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (data)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    unint64_t v6 = v5;
    uint64_t v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    uint64_t v8 = *v7;
    uint64_t v9 = -v8;
    int v10 = (unsigned __int16 *)((char *)v7 - v8);
    if (*v10 >= 5u)
    {
      unsigned __int16 v11 = v10[2];
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
        uint64_t v9 = -(uint64_t)*v7;
      }
    }
    int v12 = (unsigned __int16 *)((char *)v7 + v9);
    unsigned int v13 = *v12;
    if (v13 >= 7
      && (!v12[3] ? (unint64_t v14 = 0) : (unint64_t v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
          v13 >= 9 && (uint64_t v15 = v12[4]) != 0 && v14 && *v14))
    {
      uint64_t v16 = v14 + 1;
      size_t v17 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4) + 1];
      unint64_t v18 = (int *)AirReflection::Node::node_as_FragmentFunction((AirReflection::Node *)((char *)v17 + *v17));
      long long v68 = 0u;
      memset(v67, 0, sizeof(v67));
      long long v74 = 0u;
      long long v73 = 0u;
      int v75 = 1065353216;
      uint64_t v71 = 2;
      char v72 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      int v78 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)&v73, (uint64_t *)&v76);
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&v76);
      std::deque<ContextStack>::push_back(v67, &v71);
      ContextStack::~ContextStack((ContextStack *)&v71);
      uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
        uint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v22 = deserializeArguments(a2, v21, (uint64_t)v14, v67, (void **)(a1 + 8), (*(void *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
      unint64_t v23 = (unsigned __int16 *)((char *)v7 - *v7);
      unint64_t v66 = v22;
      if (*v23 >= 0x1Du && (uint64_t v24 = v23[14]) != 0) {
        size_t v25 = (unsigned int *)((char *)v7 + v24 + *(unsigned int *)((char *)v7 + v24));
      }
      else {
        size_t v25 = 0;
      }
      uint64_t v65 = deserializeGlobalBindings(a2, v25, v67, (uint64_t)v14, (void **)(a1 + 24));
      unsigned int v26 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v26 >= 7u)
      {
        uint64_t v27 = v26[3];
        if (v27)
        {
          uint64_t v28 = (char *)v18 + v27;
          uint64_t v29 = *(unsigned int *)((char *)v18 + v27);
          if (*(int *)((char *)v18 + v27 + v29))
          {
            unint64_t v30 = 0;
            uint64_t v31 = (uint64_t)v18 + v27 + v29 + 4;
            do
            {
              uint64_t v32 = &v16[*(unsigned int *)(v31 + 4 * v30)];
              unint64_t v33 = (AirReflection::Node *)((char *)v32 + *v32);
              uint64_t v34 = (unsigned __int16 *)((char *)v33 - *(int *)v33);
              if (*v34 >= 5u && (uint64_t v35 = v34[2]) != 0)
              {
                int v36 = *(_DWORD *)((char *)v33 + v35);
                if (v36 > 135171)
                {
                  if ((v36 - 143360) < 4 || (v36 - 139264) < 3) {
                    goto LABEL_35;
                  }
                  if (v36 == 135172)
                  {
                    uint64_t v37 = (int *)AirReflection::Node::node_as_ImageblockDataRet(v33);
                    uint64_t v38 = *v37;
                    uint64_t v39 = -v38;
                    size_t v40 = (char *)v37 - v38;
                    unsigned int v41 = *(unsigned __int16 *)((char *)v37 - v38);
                    if (v41 < 0x15)
                    {
                      int v62 = &stru_1ECAC84A8;
LABEL_44:
                      if (v41 >= 7) {
                        goto LABEL_47;
                      }
                      unsigned int v61 = 0;
                    }
                    else
                    {
                      uint64_t v42 = *((unsigned __int16 *)v40 + 10);
                      if (v42)
                      {
                        int v62 = (__CFString *)[NSString stringWithUTF8String:(char *)v37 + v42 + *(unsigned int *)((char *)v37 + v42) + 4];
                        uint64_t v43 = *v37;
                        uint64_t v39 = -v43;
                        unsigned int v41 = *(unsigned __int16 *)((char *)v37 - v43);
                        goto LABEL_44;
                      }
                      int v62 = &stru_1ECAC84A8;
LABEL_47:
                      int v44 = (char *)v37 + v39;
                      if (*((_WORD *)v44 + 3)) {
                        unsigned int v61 = *(int *)((char *)v37 + *((unsigned __int16 *)v44 + 3));
                      }
                      else {
                        unsigned int v61 = 0;
                      }
                      if (v41 >= 0xB && *((_WORD *)v44 + 5))
                      {
                        size_t v45 = &v16[*(int *)((char *)v37 + *((unsigned __int16 *)v44 + 5))];
                        AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v45 + *v45));
                        uint64_t v46 = *(void *)(*(void *)(*((void *)&v67[0] + 1)
                                                    + 8 * ((*((void *)&v68 + 1) + (void)v68 - 1) / 0x49uLL))
                                        + 56 * ((*((void *)&v68 + 1) + (void)v68 - 1) % 0x49uLL));
                        long long v73 = 0u;
                        long long v74 = 0u;
                        int v75 = 1065353216;
                        uint64_t v71 = v46;
                        char v72 = 1;
                        long long v76 = 0u;
                        long long v77 = 0u;
                        int v78 = 1065353216;
                        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)&v73, (uint64_t *)&v76);
                        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&v76);
                        std::deque<ContextStack>::push_back(v67, &v71);
                        ContextStack::~ContextStack((ContextStack *)&v71);
                        unint64_t v47 = (unsigned __int16 *)((char *)v37 - *v37);
                        if (*v47 >= 0xBu && (unsigned __int16 v48 = v47[5]) != 0) {
                          id v49 = (unsigned int *)((char *)v37 + v48);
                        }
                        else {
                          id v49 = 0;
                        }
                        uint64_t v64 = deserializeStructArgument(a2, v49, (uint64_t)v14, (ReflectionDeserializeContext *)v67, 0);
                        std::deque<ContextStack>::pop_back(v67);
LABEL_56:
                        uint64_t v50 = *(void *)(*(void *)(*((void *)&v67[0] + 1)
                                                    + 8 * ((*((void *)&v68 + 1) + (void)v68 - 1) / 0x49uLL))
                                        + 56 * ((*((void *)&v68 + 1) + (void)v68 - 1) % 0x49uLL));
                        long long v73 = 0u;
                        long long v74 = 0u;
                        int v75 = 1065353216;
                        uint64_t v71 = v50;
                        char v72 = 1;
                        long long v76 = 0u;
                        long long v77 = 0u;
                        int v78 = 1065353216;
                        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)&v73, (uint64_t *)&v76);
                        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&v76);
                        std::deque<ContextStack>::push_back(v67, &v71);
                        ContextStack::~ContextStack((ContextStack *)&v71);
                        uint64_t v51 = (unsigned __int16 *)((char *)v37 - *v37);
                        if (*v51 >= 9u && (unsigned __int16 v52 = v51[4]) != 0) {
                          int v53 = (unsigned int *)((char *)v37 + v52);
                        }
                        else {
                          int v53 = 0;
                        }
                        uint64_t v63 = deserializeStructArgument(a2, v53, (uint64_t)v14, (ReflectionDeserializeContext *)v67, 0);
                        std::deque<ContextStack>::pop_back(v67);
                        size_t v54 = (unsigned __int16 *)((char *)v37 - *v37);
                        unsigned int v55 = *v54;
                        if (v55 < 0xD)
                        {
                          BOOL v60 = 0;
                        }
                        else
                        {
                          if (v54[6]) {
                            BOOL v60 = *((unsigned char *)v37 + v54[6]) != 0;
                          }
                          else {
                            BOOL v60 = 0;
                          }
                          if (v55 >= 0xF)
                          {
                            unsigned __int16 v56 = v54[7];
                            if (v56)
                            {
                              int v57 = *(int *)((char *)v37 + v56);
LABEL_69:
                              HIDWORD(v59) = v57;
                              LOBYTE(v59) = v60;
                              size_t v58 = -[MTLImageBlockDataArgument initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:]([MTLImageBlockDataArgument alloc], "initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v62, 16, 0, 1, 0, v61, v64, v59);
                              [(MTLImageBlockDataArgument *)v58 setStructType:v63];

                              [(MTLBindingInternal *)v58 setIsArgument:1];
                              if (v58 && v58->super._type == 16)
                              {
                                *(void *)(a1 + 112) = v58;
                                *(unsigned char *)(a1 + 120) = 1;
                              }
                              goto LABEL_35;
                            }
                          }
                        }
                        int v57 = -1;
                        goto LABEL_69;
                      }
                    }
                    uint64_t v64 = 0;
                    goto LABEL_56;
                  }
                }
                else if ((v36 - 0x20000) < 6 || (v36 - 135168) < 4)
                {
                  goto LABEL_35;
                }
              }
              else
              {
                int v36 = 0;
              }
              AirReflection::EnumNameNodeType(v36);
LABEL_35:
              ++v30;
            }
            while (v30 < *(unsigned int *)&v28[v29]);
          }
        }
      }
      *(_DWORD *)(a1 + 16) = HIDWORD(v66);
      *(_DWORD *)(a1 + 32) = HIDWORD(v65);
      *(_DWORD *)(a1 + 36) = v66;
      dispatch_release(v6);
      std::deque<ContextStack>::~deque[abi:ne180100](v67);
    }
    else
    {
      dispatch_release(v5);
    }
  }
}

void sub_18272CFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t AirReflection::Node::node_as_FragmentFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 1) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t MTLFragmentReflectionDeserializerAIR::deserialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 24))(a1, a2, a3, 0);
}

dispatch_data_t MTLNewReflectionData(NSObject *a1)
{
  return _MTLNewReflectionData(a1, 1u);
}

void MTLFragmentReflectionDeserializerLegacy::~MTLFragmentReflectionDeserializerLegacy(id *this)
{
  MTLFragmentReflectionDeserializer::~MTLFragmentReflectionDeserializer(this);

  JUMPOUT(0x18530C140);
}

void MTLFragmentReflectionDeserializerLegacy::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (!data)
  {
    *(_DWORD *)(a1 + 40) = -1;
    return;
  }
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  unint64_t v6 = *(void *)(a1 + 96);
  size_t v8 = size_ptr;
  uint64_t v7 = buffer_ptr;
  unsigned int v26 = (char *)buffer_ptr;
  size_t v27 = size_ptr;
  size_t v28 = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (v8 >= 8 && *(void *)v7 == 0x4E494253504C544DLL)
  {
    if (v8 < 9 || (v8 & 0xFFFFFFFFFFFFFFFCLL) == 8) {
      goto LABEL_29;
    }
    int v9 = v7[2];
    size_t v28 = 12;
    *(_DWORD *)(a1 + 104) = v9;
  }
  uint64_t v10 = (v6 >> 1) & 1;
  deserializeArgumentsWithDeserializer(a2, a1, (DeserialContext *)&v26, (v6 >> 1) & 1);
  size_t v11 = v27;
  if (v27 <= v28 || v27 - v28 <= 3) {
    goto LABEL_29;
  }
  int v12 = *(_DWORD *)&v26[v28];
  size_t v13 = v28 + 4;
  v28 += 4;
  if (v12)
  {
    *(unsigned char *)(a1 + 120) = 1;
    size_t v25 = 0;
    deserializeArguments(a2, (DeserialContext *)&v26, 1, &v25, (void *)(a1 + 56), *(_DWORD *)(a1 + 104), 1);
    unint64_t v14 = v25;
    *(void *)(a1 + 112) = *(void *)v25;
    free(v14);
    size_t v11 = v27;
    size_t v13 = v28;
  }
  if (v11 <= v13 || v11 - v13 <= 3) {
    goto LABEL_29;
  }
  uint64_t v15 = v26;
  int v16 = *(_DWORD *)&v26[v13];
  size_t v17 = v13 + 4;
  size_t v28 = v13 + 4;
  *(_DWORD *)(a1 + 40) = v16;
  unsigned int v18 = *(_DWORD *)(a1 + 104);
  if (v18 < 0x10000) {
    goto LABEL_25;
  }
  BOOL v19 = v11 > v17;
  unint64_t v20 = v11 - v17;
  if (!v19 || v20 <= 3) {
LABEL_29:
  }
    abort();
  uint64_t v21 = *(unsigned int *)&v15[v17];
  size_t v28 = v13 + 8;
  if (v21)
  {
    id v22 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    size_t v23 = v28;
    if (v28 < v27)
    {
      v28 += v21;
      if (v23 + v21 <= v27)
      {
        uint64_t v24 = [v22 initWithBytes:&v26[v23] length:v21];
        unsigned int v18 = *(_DWORD *)(a1 + 104);
        goto LABEL_23;
      }
    }
    goto LABEL_29;
  }
  uint64_t v24 = 0;
LABEL_23:
  *(void *)(a1 + 48) = v24;
  if (v18 >= 0x20000) {
    deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v26, v10);
  }
LABEL_25:
  if (v28 != size_ptr) {
    goto LABEL_29;
  }
  size_t v28 = size_ptr;
  if (v27 < size_ptr) {
    goto LABEL_29;
  }
  dispatch_release(v5);
}

uint64_t readDynamicLibraryReflectionData(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = [a3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(a3);
        }
        int v9 = [*(id *)(*((void *)&v12 + 1) + 8 * i) reflectionData];
        if (v9) {
          ReflectionReaderFactory<MTLDynamicLibraryReflectionReader>::Create(a4, v9);
        }
      }
      uint64_t v6 = [a3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
  return 0;
}

void std::vector<MTLRasterizationRateLayerDescriptor *>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<MTLRasterizationRateLayerDescriptor *>::__append((void **)a1, a2 - v3, a3);
  }
}

void MTLComputeReflectionDeserializerAIR::~MTLComputeReflectionDeserializerAIR(MTLComputeReflectionDeserializerAIR *this)
{
  MTLInputStageReflectionDeserializer::~MTLInputStageReflectionDeserializer(this);

  JUMPOUT(0x18530C140);
}

uint64_t MTLComputeReflectionDeserializerAIR::deserialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 24))(a1, a2, a3, 0);
}

void MTLVertexReflectionReader::deserializeStageData(uint64_t a1, dispatch_data_t data, uint64_t a3)
{
  size_t v6 = 0;
  buffer_ptr = 0;
  uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v6);
  if ((*((unsigned char *)buffer_ptr + 8) & 2) != 0) {
    (*(void (**)(void, char *, size_t, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), (char *)buffer_ptr + 12, v6 - 12, a3);
  }
  dispatch_release(v5);
}

void sub_18272D5D0(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A0C40EA59D502);
  _Unwind_Resume(a1);
}

uint64_t _MTLIndirectArgumentBufferLayoutPrivate::_MTLIndirectArgumentBufferLayoutPrivate(uint64_t a1, MTLStructType *a2, void *a3)
{
  *(void *)a1 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN39_MTLIndirectArgumentBufferLayoutPrivateC2EP13MTLStructTypePU23objcproto12MTLDeviceSPI11objc_object_block_invoke;
  void v7[3] = &unk_1E521FA90;
  v7[4] = a3;
  v7[5] = a1;
  size_t v8 = v7;
  MTLIndirectResourceEnumerator::collectIndirectResources((MTLIndirectResourceEnumerator *)&v8, a2, 0);
  return a1;
}

void sub_18272D6AC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void _MTLIndirectArgumentBufferLayoutPrivate::~_MTLIndirectArgumentBufferLayoutPrivate(id *this)
{
  for (uint64_t i = this + 3; ; i[3])
  {
    uint64_t i = (id *)*i;
    if (!i) {
      break;
    }
  }

  *this = 0;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)(this + 1));
}

void MTLComputeReflectionReader::deserializeStageData(uint64_t a1, dispatch_data_t data, uint64_t a3)
{
  if (data)
  {
    size_t v8 = 0;
    buffer_ptr = 0;
    uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &v8);
    int v6 = *((_DWORD *)buffer_ptr + 2);
    if (v6)
    {
      if ((v6 & 0x20) != 0) {
        uint64_t v7 = (char *)buffer_ptr + 20;
      }
      else {
        uint64_t v7 = (char *)buffer_ptr + 12;
      }
      (*(void (**)(void, char *, size_t, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, v8 - 12, a3);
    }
    dispatch_release(v5);
  }
}

uint64_t MTLComputeReflectionReader::deserialize(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[2] + 24))(a1[2]);
  if (a4)
  {
    uint64_t v7 = (uint64_t)(a1[2] + 16);
    size_t v8 = (uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[3];
    return v8(a1, a4, v7);
  }
  return result;
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

double __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  return result;
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
}

void ___ZN35MTLCompilerConnectionManagerPrivate22registerCompilerPluginEPKcPU27objcproto16OS_dispatch_data8NSObject_block_invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 48);
  unint64_t v3 = (char **)(v2 + 4);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = ((v2[5] - v2[4]) >> 4) + 1;
  size_t v4 = strlen(*(const char **)(a1 + 56)) + 1;
  uint64_t v5 = malloc_type_malloc(v4, 0xC23B3CC4uLL);
  memcpy(v5, *(const void **)(a1 + 56), v4);
  dispatch_retain(*(dispatch_object_t *)(a1 + 32));
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = (void *)v2[5];
  unint64_t v8 = v2[6];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = ((char *)v7 - *v3) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*v3;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)(v2 + 6), v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[16 * v10];
    int v16 = &v14[16 * v13];
    *(void *)long long v15 = v5;
    *((void *)v15 + 1) = v6;
    int v9 = v15 + 16;
    unsigned int v18 = (char *)v2[4];
    uint64_t v17 = (char *)v2[5];
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = *v3;
    }
    v2[4] = v15;
    v2[5] = v9;
    v2[6] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v7 = v5;
    v7[1] = v6;
    int v9 = v7 + 2;
  }
  v2[5] = v9;
}

void MTLLibraryDataWithArchive::decodeSPCIToken(uint64_t a1, uint64_t a2, char *__s1, size_t __n, unint64_t a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  size_t v9 = strnlen(__s1, __n);
  long long v10 = *(_OWORD *)&__s1[v9 + 17];
  v35[0] = *(_OWORD *)&__s1[v9 + 1];
  v35[1] = v10;
  unint64_t v11 = *(void *)&__s1[v9 + 33];
  unint64_t v33 = v11;
  uint64_t v34 = (unint64_t *)v35;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a2, (unint64_t *)v35, (uint64_t)&std::piecewise_construct, (_OWORD **)&v34);
  unint64_t v13 = v12;
  long long v14 = (unint64_t *)v12[7];
  uint64_t v15 = (uint64_t)(v12 + 8);
  unint64_t v16 = v12[8];
  if ((unint64_t)v14 >= v16)
  {
    unsigned int v18 = (void **)(v12 + 6);
    BOOL v19 = (unint64_t *)v12[6];
    uint64_t v20 = ((char *)v14 - (char *)v19) >> 4;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v16 - (void)v19;
    if (v22 >> 3 > v21) {
      unint64_t v21 = v22 >> 3;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v15, v23);
      BOOL v19 = (unint64_t *)v13[6];
      long long v14 = (unint64_t *)v13[7];
    }
    else
    {
      uint64_t v24 = 0;
    }
    size_t v25 = (unint64_t *)&v24[16 * v20];
    unsigned int v26 = &v24[16 * v23];
    *size_t v25 = v11;
    v25[1] = a5;
    uint64_t v17 = v25 + 2;
    if (v14 != v19)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
        v25 -= 2;
        v14 -= 2;
      }
      while (v14 != v19);
      BOOL v19 = (unint64_t *)*v18;
    }
    v13[6] = v25;
    v13[7] = v17;
    v13[8] = v26;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *long long v14 = v11;
    v14[1] = a5;
    uint64_t v17 = v14 + 2;
  }
  v13[7] = v17;
  size_t v27 = *(void **)(a1 + 408);
  if (!v27) {
    goto LABEL_28;
  }
  size_t v28 = (void *)(a1 + 408);
  do
  {
    unint64_t v29 = v27[4];
    BOOL v30 = v29 >= v33;
    if (v29 >= v33) {
      uint64_t v31 = v27;
    }
    else {
      uint64_t v31 = v27 + 1;
    }
    if (v30) {
      size_t v28 = v27;
    }
    size_t v27 = (void *)*v31;
  }
  while (*v31);
  if (v28 == (void *)(a1 + 408) || v33 < v28[4])
  {
LABEL_28:
    uint64_t v32 = malloc_type_malloc(0x18uLL, 0x1050040EE29081CuLL);
    uint64_t v34 = &v33;
    std::__tree<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 400), &v33, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34)[5] = (uint64_t)v32;
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x48uLL);
  *uint64_t i = 0;
  i[1] = v7;
  long long v17 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v17;
  i[7] = 0;
  i[8] = 0;
  i[6] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v23);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  size_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *uint64_t i = *v25;
LABEL_48:
    *size_t v25 = i;
    goto LABEL_49;
  }
  *uint64_t i = *v16;
  *unint64_t v16 = i;
  *(void *)(v24 + 8 * v4) = v16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    size_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182732E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void MTLConstantStorage::setConstantData(MTLConstantStorage *this, const char *a2, uint64_t a3, const void *a4)
{
}

void sub_182732F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x18530C120](v15, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    uint8x8_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    *uint8x8_t v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *((unsigned char *)v7 + 56) = 0;
    *((void *)v7 + 8) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void *std::map<std::string,MTLConstantStorage::ConstantData>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *> *,long>>>(void *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLConstantStorage::ConstantData> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      unint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = (const void ***)v7;
          unint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

const void *std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLConstantStorage::ConstantData> const&>(void *a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = *std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  if (!v6) {
    std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__construct_node<std::pair<std::string const,MTLConstantStorage::ConstantData> const&>((uint64_t)a1, a4, (uint64_t)v8);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__construct_node<std::pair<std::string const,MTLConstantStorage::ConstantData> const&>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::pair<std::string const,MTLConstantStorage::ConstantData>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
}

void sub_18273325C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::pair<std::string const,MTLConstantStorage::ConstantData>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  _MTLConstantDataSize(*((unsigned __int8 *)a2 + 24));
  this[1].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 24);
  operator new[]();
}

void sub_182733304(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_182733484(_Unwind_Exception *a1)
{
  MEMORY[0x18530C120](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_1827335A8(_Unwind_Exception *a1)
{
  MEMORY[0x18530C120](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x38uLL);
    v11[16] = **a4;
    *((unsigned char *)v11 + 40) = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::map<unsigned short,MTLConstantStorage::ConstantData>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__tree_node<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,void *> *,long>>>(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    uint64_t v5 = (void *)result;
    uint64_t v6 = (uint64_t *)(result + 8);
    do
    {
      __n128 result = std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,MTLConstantStorage::ConstantData> const&>(v5, v6, v4 + 16, (uint64_t)(v4 + 16));
      unint64_t v7 = (unsigned __int16 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          unint64_t v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (unsigned __int16 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,MTLConstantStorage::ConstantData> const&>(void *a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t result = *std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__find_equal<unsigned short>(a1, a2, &v9, &v8, a3);
  if (!result) {
    std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__construct_node<std::pair<unsigned short const,MTLConstantStorage::ConstantData> const&>((uint64_t)a1, a4, (uint64_t)v7);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unsigned int v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      long long v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            BOOL v9 = (uint64_t **)a2[2];
          }
          else
          {
            BOOL v9 = (uint64_t **)v2[1];
            unsigned int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _OWORD v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *BOOL v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            unsigned int v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *unsigned int v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unsigned int v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *unsigned int v2 = (uint64_t)v3;
LABEL_27:
        id v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__find_equal<unsigned short>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unsigned int v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        unsigned int v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        unsigned int v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    float v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      float v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__construct_node<std::pair<unsigned short const,MTLConstantStorage::ConstantData> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned int v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::pair<unsigned short const,MTLConstantStorage::ConstantData>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
}

void sub_182733BA4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::pair<unsigned short const,MTLConstantStorage::ConstantData>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  _MTLConstantDataSize(*(unsigned __int8 *)(a2 + 8));
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  operator new[]();
}

void MTLComputeReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (!data) {
    return;
  }
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  unsigned int v6 = v5;
  unsigned int v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
  uint64_t v8 = *v7;
  uint64_t v9 = -v8;
  unsigned int v10 = (unsigned __int16 *)((char *)v7 - v8);
  if (*v10 >= 5u)
  {
    unsigned __int16 v11 = v10[2];
    if (v11)
    {
      *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
      uint64_t v9 = -(uint64_t)*v7;
    }
  }
  uint64_t v12 = (unsigned __int16 *)((char *)v7 + v9);
  unsigned int v13 = *v12;
  if (v13 < 7
    || (!v12[3] ? (BOOL v14 = 0) : (BOOL v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
        v13 < 0xD || (uint64_t v15 = v12[6]) == 0 || !v14 || !*v14))
  {
    dispatch_release(v5);
    return;
  }
  uint64_t v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
  long long v17 = (int *)AirReflection::Node::node_as_KernelFunction((AirReflection::Node *)((char *)v16 + v16[1]
                                                                                               + 4));
  unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
    uint64_t v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    uint64_t v20 = 0;
  }
  memset(v35, 0, sizeof(v35));
  memset(v33, 0, sizeof(v33));
  int v34 = 1065353216;
  __p = (void *)3;
  LOBYTE(v32) = 0;
  memset(v38, 0, sizeof(v38));
  int v39 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v33, (uint64_t *)v38);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v38);
  std::deque<ContextStack>::push_back(v35, (uint64_t *)&__p);
  ContextStack::~ContextStack((ContextStack *)&__p);
  unint64_t v21 = deserializeArguments(a2, v20, (uint64_t)v14, v35, (void **)(a1 + 8), (*(void *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
  unsigned int v22 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v22 >= 0x1Du && (uint64_t v23 = v22[14]) != 0) {
    uint64_t v24 = (unsigned int *)((char *)v7 + v23 + *(unsigned int *)((char *)v7 + v23));
  }
  else {
    uint64_t v24 = 0;
  }
  int v25 = (unint64_t)deserializeGlobalBindings(a2, v24, v35, (uint64_t)v14, (void **)(a1 + 24)) >> 32;
  deserializeInputArguments((AirReflection::Node *)v20, (uint64_t)v14, a1);
  *(_DWORD *)(a1 + 16) = HIDWORD(v21);
  *(_DWORD *)(a1 + 32) = v25;
  *(_DWORD *)(a1 + 36) = v21;
  getPostVertexDumpOutputKernel(v7, (_DWORD *)(a1 + 108), a2, (uint64_t)&__p);
  unint64_t v26 = (id *)__p;
  size_t v27 = v32;
  if ((*(unsigned char *)(a1 + 98) & 8) == 0) {
    goto LABEL_28;
  }
  size_t v28 = ((char *)v32 - (unsigned char *)__p) >> 3;
  *(_DWORD *)(a1 + 112) = v28;
  if (!*(_DWORD *)(a1 + 108)) {
    goto LABEL_28;
  }
  *(void *)(a1 + 120) = malloc_type_calloc(v28, 8uLL, 0x80040B8603338uLL);
  unint64_t v26 = (id *)__p;
  if (v32 != __p)
  {
    unint64_t v29 = 0;
    do
    {
      *(void *)(*(void *)(a1 + 120) + 8 * v29) = v26[v29];
      ++v29;
      unint64_t v26 = (id *)__p;
      size_t v27 = v32;
    }
    while (v29 < ((char *)v32 - (unsigned char *)__p) >> 3);
LABEL_28:
    if (v27 != v26)
    {
      unint64_t v30 = 0;
      do
      {

        unint64_t v26 = (id *)__p;
      }
      while (v30 < ((char *)v32 - (unsigned char *)__p) >> 3);
    }
  }
  dispatch_release(v6);
  if (__p)
  {
    uint64_t v32 = (id *)__p;
    operator delete(__p);
  }
  std::deque<ContextStack>::~deque[abi:ne180100](v35);
}

void sub_182733F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::deque<ContextStack>::~deque[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void MTLVertexReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (!data) {
    return;
  }
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  unsigned int v6 = v5;
  unsigned int v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
  uint64_t v8 = *v7;
  uint64_t v9 = -v8;
  unsigned int v10 = (unsigned __int16 *)((char *)v7 - v8);
  if (*v10 >= 5u)
  {
    unsigned __int16 v11 = v10[2];
    if (v11)
    {
      *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
      uint64_t v9 = -(uint64_t)*v7;
    }
  }
  uint64_t v12 = (unsigned __int16 *)((char *)v7 + v9);
  unsigned int v13 = *v12;
  if (v13 < 7
    || (!v12[3] ? (BOOL v14 = 0) : (BOOL v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
        v13 < 0xF || (uint64_t v15 = v12[7]) == 0 || !v14 || !*v14))
  {
    dispatch_release(v5);
    return;
  }
  uint64_t v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
  long long v17 = (int *)AirReflection::Node::node_as_VertexFunction((AirReflection::Node *)((char *)v16 + v16[1]
                                                                                               + 4));
  unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
    uint64_t v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    uint64_t v20 = 0;
  }
  memset(v35, 0, sizeof(v35));
  memset(v33, 0, sizeof(v33));
  int v34 = 1065353216;
  __p = (void *)1;
  LOBYTE(v32) = 0;
  memset(v38, 0, sizeof(v38));
  int v39 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v33, (uint64_t *)v38);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v38);
  std::deque<ContextStack>::push_back(v35, (uint64_t *)&__p);
  ContextStack::~ContextStack((ContextStack *)&__p);
  unint64_t v21 = deserializeArguments(a2, v20, (uint64_t)v14, v35, (void **)(a1 + 8), (*(void *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
  unsigned int v22 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v22 >= 0x1Du && (uint64_t v23 = v22[14]) != 0) {
    uint64_t v24 = (unsigned int *)((char *)v7 + v23 + *(unsigned int *)((char *)v7 + v23));
  }
  else {
    uint64_t v24 = 0;
  }
  int v25 = (unint64_t)deserializeGlobalBindings(a2, v24, v35, (uint64_t)v14, (void **)(a1 + 24)) >> 32;
  deserializeInputArguments((AirReflection::Node *)v20, (uint64_t)v14, a1);
  *(_DWORD *)(a1 + 16) = HIDWORD(v21);
  *(_DWORD *)(a1 + 32) = v25;
  *(_DWORD *)(a1 + 36) = v21;
  getPostVertexDumpOutputVertex(v7, (_DWORD *)(a1 + 108), a2, (uint64_t)&__p);
  unint64_t v26 = (id *)__p;
  size_t v27 = v32;
  if ((*(unsigned char *)(a1 + 98) & 8) == 0) {
    goto LABEL_28;
  }
  size_t v28 = ((char *)v32 - (unsigned char *)__p) >> 3;
  *(_DWORD *)(a1 + 112) = v28;
  if (!*(_DWORD *)(a1 + 108)) {
    goto LABEL_28;
  }
  *(void *)(a1 + 120) = malloc_type_calloc(v28, 8uLL, 0x80040B8603338uLL);
  unint64_t v26 = (id *)__p;
  if (v32 != __p)
  {
    unint64_t v29 = 0;
    do
    {
      *(void *)(*(void *)(a1 + 120) + 8 * v29) = v26[v29];
      ++v29;
      unint64_t v26 = (id *)__p;
      size_t v27 = v32;
    }
    while (v29 < ((char *)v32 - (unsigned char *)__p) >> 3);
LABEL_28:
    if (v27 != v26)
    {
      unint64_t v30 = 0;
      do
      {

        unint64_t v26 = (id *)__p;
      }
      while (v30 < ((char *)v32 - (unsigned char *)__p) >> 3);
    }
  }
  dispatch_release(v6);
  if (__p)
  {
    uint64_t v32 = (id *)__p;
    operator delete(__p);
  }
  std::deque<ContextStack>::~deque[abi:ne180100](v35);
}

void sub_1827342A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::deque<ContextStack>::~deque[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ContextStack>::~deque[abi:ne180100](void *a1)
{
  unsigned int v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    long long v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    long long v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unsigned int v6 = &v2[v5 / 0x49];
    unsigned int v7 = (ContextStack *)((char *)*v6 + 56 * (v5 % 0x49));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v7 != (ContextStack *)v8)
    {
      do
      {
        ContextStack::~ContextStack(v7);
        unsigned int v7 = (ContextStack *)(v9 + 56);
        if (v7 - (ContextStack *)*v6 == 4088)
        {
          unsigned int v10 = (ContextStack *)v6[1];
          ++v6;
          unsigned int v7 = v10;
        }
      }
      while (v7 != (ContextStack *)v8);
      unsigned int v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *long long v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unsigned int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 36;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 73;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    BOOL v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<ContextStack *>::~__split_buffer((uint64_t)a1);
}

uint64_t deserializeGlobalBindings(void *a1, unsigned int *a2, void *a3, uint64_t a4, void **a5)
{
  if (a2 && (uint64_t v10 = *a2, *a5 = malloc_type_malloc(8 * v10, 0x80040B8603338uLL), v10))
  {
    unsigned int v11 = 0;
    LODWORD(v12) = 0;
    LODWORD(v13) = 0;
    BOOL v14 = a2 + 1;
    do
    {
      unsigned int v15 = *v14++;
      uint64_t v16 = (int *)AirReflection::Node::node_as_GlobalBinding((AirReflection::Node *)(a4
                                                                                    + 4
                                                                                    + 4 * v15
                                                                                    + *(unsigned int *)(a4 + 4 + 4 * v15)));
      long long v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 7u && (unsigned __int16 v18 = v17[3]) != 0) {
        uint64_t v19 = (unsigned int *)((char *)v16 + v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = deserializeArgument(a1, v19, a4, a3, (MTLBuiltInMeshArgument **)*a5 + v11);
      uint64_t v13 = (v13 + HIDWORD(v20));
      uint64_t v12 = (v12 + v20);
      v11 += HIDWORD(v20);
      --v10;
    }
    while (v10);
    uint64_t v21 = v13 << 32;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v12 = 0;
  }
  return v21 | v12;
}

uint64_t std::__split_buffer<ContextStack *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  long long v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t AirReflection::Node::node_as_VertexFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 3) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

AirReflection::Node *deserializeInputArguments(AirReflection::Node *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = *(unsigned int *)result;
    if (v3)
    {
      unint64_t v5 = (unsigned int *)((char *)result + 4);
      uint64_t v6 = a2 + 4;
      do
      {
        unsigned int v7 = *v5++;
        uint64_t result = (AirReflection::Node *)(v6 + 4 * v7 + *(unsigned int *)(v6 + 4 * v7));
        unint64_t v8 = (unsigned __int16 *)((char *)result - *(int *)result);
        if (*v8 >= 5u)
        {
          uint64_t v9 = v8[2];
          if (v9)
          {
            int v10 = *(_DWORD *)((char *)result + v9);
            if (v10 == 266249)
            {
              uint64_t result = (AirReflection::Node *)AirReflection::Node::node_as_StageInArg(result);
              goto LABEL_10;
            }
            if (v10 == 270340)
            {
              uint64_t result = (AirReflection::Node *)AirReflection::Node::node_as_VertexInputArg(result);
LABEL_10:
              unsigned int v11 = (unsigned __int16 *)((char *)result - *(int *)result);
              uint64_t v12 = *(unsigned int *)((char *)result + v11[3]);
              if (*v11 < 0xFu)
              {
                LOBYTE(v13) = 0;
              }
              else
              {
                unsigned int v13 = v11[7];
                if (v13) {
                  LOBYTE(v13) = *((unsigned char *)result + v13) != 0;
                }
              }
              *(unsigned char *)(a3 + v12 + 128) = v13 ^ 1;
            }
          }
        }
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t getPostVertexDumpOutputVertex@<X0>(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unsigned int v7 = (char *)a1 - *a1;
  if (*((_WORD *)v7 + 3)) {
    uint64_t v8 = (uint64_t)a1 + *((unsigned __int16 *)v7 + 3) + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v7 + 3));
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v8
     + 4
     * *(unsigned int *)((char *)a1
                       + *((unsigned __int16 *)v7 + 7)
                       + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v7 + 7))
                       + 4);
  int v10 = (int *)AirReflection::Node::node_as_VertexFunction((AirReflection::Node *)(v9 + 4 + *(unsigned int *)(v9 + 4)));
  unsigned int v11 = v10;
  uint64_t v12 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v12 >= 0xBu && (unsigned __int16 v13 = v12[5]) != 0) {
    BOOL v14 = (unsigned int *)((char *)v10 + v13);
  }
  else {
    BOOL v14 = 0;
  }
  uint64_t result = getDefaultPostVertexBuiltins(v8, (void **)a4, 0, v14, a3);
  uint64_t v16 = result;
  long long v17 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v17 >= 7u)
  {
    uint64_t v18 = v17[3];
    if (v18)
    {
      uint64_t v19 = (int *)((char *)v11 + v18 + *(unsigned int *)((char *)v11 + v18));
      if (*v19)
      {
        unint64_t v20 = 0;
        uint64_t v21 = v19 + 1;
        do
        {
          uint64_t result = getPostVertexDumpOutputForNode(v21, v8, (void **)a4, v16);
          uint64_t v16 = result;
          ++v20;
          ++v21;
        }
        while (v20 < *v19);
      }
    }
  }
  *a2 = v16;
  return result;
}

void sub_182734860(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getDefaultPostVertexBuiltins(uint64_t a1, void **a2, unsigned int a3, unsigned int *a4, void *a5)
{
  unsigned int v7 = a3;
  if (!a4)
  {
    int v10 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:@"air.vertex_id" dataType:33 pixelFormat:0 aluType:33 name:&stru_1ECAC84A8 offset:a3];
    unint64_t v11 = (unint64_t)a2[2];
    uint64_t v12 = (MTLPostVertexDumpOutput **)a2[1];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = ((char *)v12 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v14 + 1) >> 61) {
        goto LABEL_111;
      }
      uint64_t v15 = v11 - (void)*a2;
      uint64_t v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
        uint64_t v16 = v14 + 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = (MTLPostVertexDumpOutput **)&v18[8 * v14];
      unint64_t v20 = &v18[8 * v17];
      *uint64_t v19 = v10;
      unsigned __int16 v13 = v19 + 1;
      unsigned int v22 = (char *)*a2;
      uint64_t v21 = (char *)a2[1];
      if (v21 != *a2)
      {
        do
        {
          uint64_t v23 = (MTLPostVertexDumpOutput *)*((void *)v21 - 1);
          v21 -= 8;
          *--uint64_t v19 = v23;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a2;
      }
      *a2 = v19;
      a2[1] = v13;
      a2[2] = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *uint64_t v12 = v10;
      unsigned __int16 v13 = v12 + 1;
    }
    a2[1] = v13;
    v7 += 4;
  }
  uint64_t v24 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:@"air.instance_id" dataType:33 pixelFormat:0 aluType:33 name:&stru_1ECAC84A8 offset:v7];
  int v25 = v24;
  unint64_t v26 = (unint64_t)a2[2];
  size_t v27 = (MTLPostVertexDumpOutput **)a2[1];
  if ((unint64_t)v27 >= v26)
  {
    uint64_t v29 = ((char *)v27 - (unsigned char *)*a2) >> 3;
    if ((unint64_t)(v29 + 1) >> 61) {
      goto LABEL_111;
    }
    uint64_t v30 = v26 - (void)*a2;
    uint64_t v31 = v30 >> 2;
    if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
      uint64_t v31 = v29 + 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32) {
      unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v32);
    }
    else {
      unint64_t v33 = 0;
    }
    int v34 = (MTLPostVertexDumpOutput **)&v33[8 * v29];
    uint64_t v35 = &v33[8 * v32];
    *int v34 = v25;
    size_t v28 = v34 + 1;
    uint64_t v37 = (char *)*a2;
    uint64_t v36 = (char *)a2[1];
    if (v36 != *a2)
    {
      do
      {
        uint64_t v38 = (MTLPostVertexDumpOutput *)*((void *)v36 - 1);
        v36 -= 8;
        *--int v34 = v38;
      }
      while (v36 != v37);
      uint64_t v36 = (char *)*a2;
    }
    *a2 = v34;
    a2[1] = v28;
    a2[2] = v35;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *size_t v27 = v24;
    size_t v28 = v27 + 1;
  }
  a2[1] = v28;
  uint64_t v39 = v7 + 4;
  if (a4)
  {
    size_t v40 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:@"air.patch_id" dataType:33 pixelFormat:0 aluType:33 name:&stru_1ECAC84A8 offset:v7 + 4];
    unsigned int v41 = v40;
    uint64_t v43 = (MTLPostVertexDumpOutput **)a2[1];
    unint64_t v42 = (unint64_t)a2[2];
    if ((unint64_t)v43 >= v42)
    {
      uint64_t v45 = ((char *)v43 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v45 + 1) >> 61) {
        goto LABEL_111;
      }
      uint64_t v46 = v42 - (void)*a2;
      uint64_t v47 = v46 >> 2;
      if (v46 >> 2 <= (unint64_t)(v45 + 1)) {
        uint64_t v47 = v45 + 1;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48) {
        id v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v48);
      }
      else {
        id v49 = 0;
      }
      uint64_t v50 = (MTLPostVertexDumpOutput **)&v49[8 * v45];
      uint64_t v51 = &v49[8 * v48];
      *uint64_t v50 = v41;
      int v44 = v50 + 1;
      int v53 = (char *)*a2;
      unsigned __int16 v52 = (char *)a2[1];
      if (v52 != *a2)
      {
        do
        {
          size_t v54 = (MTLPostVertexDumpOutput *)*((void *)v52 - 1);
          v52 -= 8;
          *--uint64_t v50 = v54;
        }
        while (v52 != v53);
        unsigned __int16 v52 = (char *)*a2;
      }
      *a2 = v50;
      a2[1] = v44;
      a2[2] = v51;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      *uint64_t v43 = v40;
      int v44 = v43 + 1;
    }
    a2[1] = v44;
    uint64_t v39 = v7 + 8;
    unsigned int v55 = (int *)AirReflection::Node::node_as_PatchFnAttr((AirReflection::Node *)(a1
                                                                                + 4 * *a4
                                                                                + 4
                                                                                + *(unsigned int *)(a1 + 4 * *a4 + 4)));
    unsigned __int16 v56 = (unsigned __int16 *)((char *)v55 - *v55);
    if (*v56 >= 5u)
    {
      uint64_t v57 = v56[2];
      if (v57)
      {
        int v58 = *((unsigned __int8 *)v55 + v57);
        if (v58 == 1)
        {
          uint64_t v91 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:@"air.position_in_patch" dataType:4 pixelFormat:0 aluType:3 name:&stru_1ECAC84A8 offset:v7 + 8];
          uint64_t v92 = v91;
          uint64_t v94 = (MTLPostVertexDumpOutput **)a2[1];
          unint64_t v93 = (unint64_t)a2[2];
          if ((unint64_t)v94 >= v93)
          {
            uint64_t v95 = ((char *)v94 - (unsigned char *)*a2) >> 3;
            if ((unint64_t)(v95 + 1) >> 61) {
              goto LABEL_111;
            }
            uint64_t v96 = v93 - (void)*a2;
            uint64_t v97 = v96 >> 2;
            if (v96 >> 2 <= (unint64_t)(v95 + 1)) {
              uint64_t v97 = v95 + 1;
            }
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v98 = v97;
            }
            if (v98) {
              uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v98);
            }
            else {
              uint64_t v99 = 0;
            }
            uint64_t v100 = (MTLPostVertexDumpOutput **)&v99[8 * v95];
            uint64_t v101 = &v99[8 * v98];
            MTLFunctionConstantInternal *v100 = v92;
            uint64_t v63 = v100 + 1;
            uint64_t v103 = (char *)*a2;
            uint64_t v102 = (char *)a2[1];
            if (v102 != *a2)
            {
              do
              {
                uint64_t v104 = (MTLPostVertexDumpOutput *)*((void *)v102 - 1);
                v102 -= 8;
                *--uint64_t v100 = v104;
              }
              while (v102 != v103);
              uint64_t v102 = (char *)*a2;
            }
            *a2 = v100;
            a2[1] = v63;
            a2[2] = v101;
            if (v102) {
              operator delete(v102);
            }
          }
          else
          {
            *uint64_t v94 = v91;
            uint64_t v63 = v94 + 1;
          }
          int v74 = 16;
          goto LABEL_74;
        }
        if (v58) {
          goto LABEL_75;
        }
      }
    }
    uint64_t v59 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:@"air.position_in_patch" dataType:5 pixelFormat:0 aluType:3 name:&stru_1ECAC84A8 offset:v7 + 8];
    BOOL v60 = v59;
    int v62 = (MTLPostVertexDumpOutput **)a2[1];
    unint64_t v61 = (unint64_t)a2[2];
    if ((unint64_t)v62 >= v61)
    {
      uint64_t v64 = ((char *)v62 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v64 + 1) >> 61) {
        goto LABEL_111;
      }
      uint64_t v65 = v61 - (void)*a2;
      uint64_t v66 = v65 >> 2;
      if (v65 >> 2 <= (unint64_t)(v64 + 1)) {
        uint64_t v66 = v64 + 1;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v66;
      }
      if (v67) {
        long long v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v67);
      }
      else {
        long long v68 = 0;
      }
      uint64_t v69 = (MTLPostVertexDumpOutput **)&v68[8 * v64];
      long long v70 = &v68[8 * v67];
      *uint64_t v69 = v60;
      uint64_t v63 = v69 + 1;
      char v72 = (char *)*a2;
      uint64_t v71 = (char *)a2[1];
      if (v71 != *a2)
      {
        do
        {
          long long v73 = (MTLPostVertexDumpOutput *)*((void *)v71 - 1);
          v71 -= 8;
          *--uint64_t v69 = v73;
        }
        while (v71 != v72);
        uint64_t v71 = (char *)*a2;
      }
      *a2 = v69;
      a2[1] = v63;
      a2[2] = v70;
      if (v71) {
        operator delete(v71);
      }
    }
    else
    {
      *int v62 = v59;
      uint64_t v63 = v62 + 1;
    }
    int v74 = 20;
LABEL_74:
    a2[1] = v63;
    uint64_t v39 = v7 + v74;
  }
LABEL_75:
  if ([a5 supportsVertexAmplificationCount:2])
  {
    int v75 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:@"air.amplification_id" dataType:33 pixelFormat:0 aluType:33 name:&stru_1ECAC84A8 offset:v39];
    long long v76 = v75;
    int v78 = (MTLPostVertexDumpOutput **)a2[1];
    unint64_t v77 = (unint64_t)a2[2];
    if ((unint64_t)v78 < v77)
    {
      *int v78 = v75;
      uint64_t v79 = v78 + 1;
LABEL_92:
      a2[1] = v79;
      return (v39 + 4);
    }
    uint64_t v80 = ((char *)v78 - (unsigned char *)*a2) >> 3;
    if (!((unint64_t)(v80 + 1) >> 61))
    {
      uint64_t v81 = v77 - (void)*a2;
      uint64_t v82 = v81 >> 2;
      if (v81 >> 2 <= (unint64_t)(v80 + 1)) {
        uint64_t v82 = v80 + 1;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v83 = v82;
      }
      if (v83) {
        uint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a2 + 2), v83);
      }
      else {
        uint64_t v84 = 0;
      }
      uint64_t v85 = (MTLPostVertexDumpOutput **)&v84[8 * v80];
      uint64_t v86 = &v84[8 * v83];
      *uint64_t v85 = v76;
      uint64_t v79 = v85 + 1;
      uint64_t v88 = (char *)*a2;
      uint64_t v87 = (char *)a2[1];
      if (v87 != *a2)
      {
        do
        {
          uint64_t v89 = (MTLPostVertexDumpOutput *)*((void *)v87 - 1);
          v87 -= 8;
          *--uint64_t v85 = v89;
        }
        while (v87 != v88);
        uint64_t v87 = (char *)*a2;
      }
      *a2 = v85;
      a2[1] = v79;
      a2[2] = v86;
      if (v87) {
        operator delete(v87);
      }
      goto LABEL_92;
    }
LABEL_111:
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  return v39;
}

uint64_t getPostVertexDumpOutputForNode(unsigned int *a1, uint64_t a2, void **a3, uint64_t a4)
{
  unint64_t v5 = (AirReflection::Node *)(a2 + 4 * *a1 + 4 + *(unsigned int *)(a2 + 4 * *a1 + 4));
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *(int *)v5);
  if (*v6 < 5u) {
    return a4;
  }
  uint64_t v7 = v6[2];
  if (!v7) {
    return a4;
  }
  int v9 = *(_DWORD *)((char *)v5 + v7);
  unsigned int v230 = 0;
  if (v9 >= 139264)
  {
    if (v9 >= 143360)
    {
      switch(v9)
      {
        case 143360:
          uint64_t v14 = (int *)AirReflection::Node::node_as_MeshPrimitiveDataRet(v5);
          uint64_t v15 = *v14;
          uint64_t v16 = -v15;
          unint64_t v17 = (unsigned __int16 *)((char *)v14 - v15);
          if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0)
          {
            uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v18 + *(unsigned int *)((char *)v14 + v18) + 4];
            uint64_t v16 = -(uint64_t)*v14;
          }
          else
          {
            uint64_t v19 = &stru_1ECAC84A8;
          }
          uint64_t v80 = (unsigned __int16 *)((char *)v14 + v16);
          if (*v80 < 0xDu)
          {
            uint64_t v81 = 0;
          }
          else
          {
            uint64_t v81 = v80[6];
            if (v81) {
              v81 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v81);
            }
          }
          uint64_t v121 = (const void *)(v81 + 4);
          size_t v122 = strlen((const char *)(v81 + 4));
          unsigned int v123 = dataTypeFromString(v121, v122, 0, &v230);
          uint64_t v124 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v124 < 0xDu)
          {
            uint64_t v136 = 0;
            uint64_t v126 = @"air.mesh_primitive_data";
            goto LABEL_152;
          }
          unsigned int v125 = v124[6];
          uint64_t v126 = @"air.mesh_primitive_data";
          if (v125) {
            goto LABEL_151;
          }
          goto LABEL_147;
        case 143361:
          uint64_t v14 = (int *)AirReflection::Node::node_as_MeshVertexDataRet(v5);
          uint64_t v48 = *v14;
          uint64_t v49 = -v48;
          uint64_t v50 = (unsigned __int16 *)((char *)v14 - v48);
          if (*v50 >= 0xFu && (uint64_t v51 = v50[7]) != 0)
          {
            uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v51 + *(unsigned int *)((char *)v14 + v51) + 4];
            uint64_t v49 = -(uint64_t)*v14;
          }
          else
          {
            uint64_t v19 = &stru_1ECAC84A8;
          }
          uint64_t v96 = (unsigned __int16 *)((char *)v14 + v49);
          if (*v96 < 0xDu)
          {
            uint64_t v97 = 0;
          }
          else
          {
            uint64_t v97 = v96[6];
            if (v97) {
              v97 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v97);
            }
          }
          int v174 = (const void *)(v97 + 4);
          size_t v175 = strlen((const char *)(v97 + 4));
          unsigned int v123 = dataTypeFromString(v174, v175, 0, &v230);
          int v176 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v176 < 0xDu)
          {
            uint64_t v136 = 0;
            uint64_t v126 = @"air.vertex_data";
            goto LABEL_152;
          }
          unsigned int v125 = v176[6];
          uint64_t v126 = @"air.vertex_data";
          if (v125) {
            goto LABEL_151;
          }
          goto LABEL_147;
        case 143362:
          uint64_t v14 = (int *)AirReflection::Node::node_as_PrimitiveCulledRet(v5);
          uint64_t v52 = *v14;
          uint64_t v53 = -v52;
          size_t v54 = (unsigned __int16 *)((char *)v14 - v52);
          if (*v54 >= 0xBu && (uint64_t v55 = v54[5]) != 0)
          {
            uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v55 + *(unsigned int *)((char *)v14 + v55) + 4];
            uint64_t v53 = -(uint64_t)*v14;
          }
          else
          {
            uint64_t v19 = &stru_1ECAC84A8;
          }
          unint64_t v98 = (unsigned __int16 *)((char *)v14 + v53);
          if (*v98 < 9u)
          {
            uint64_t v99 = 0;
          }
          else
          {
            uint64_t v99 = v98[4];
            if (v99) {
              v99 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v99);
            }
          }
          int v177 = (const void *)(v99 + 4);
          size_t v178 = strlen((const char *)(v99 + 4));
          unsigned int v123 = dataTypeFromString(v177, v178, 0, &v230);
          v179 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v179 < 9u)
          {
            uint64_t v136 = 0;
            uint64_t v126 = @"air.primitive_culled";
            goto LABEL_152;
          }
          unsigned int v125 = v179[4];
          uint64_t v126 = @"air.primitive_culled";
          if (v125) {
            goto LABEL_151;
          }
          goto LABEL_147;
        case 143363:
          uint64_t v14 = (int *)AirReflection::Node::node_as_PrimitiveIDRet(v5);
          uint64_t v56 = *v14;
          uint64_t v57 = -v56;
          int v58 = (unsigned __int16 *)((char *)v14 - v56);
          if (*v58 >= 0xBu && (uint64_t v59 = v58[5]) != 0)
          {
            uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v59 + *(unsigned int *)((char *)v14 + v59) + 4];
            uint64_t v57 = -(uint64_t)*v14;
          }
          else
          {
            uint64_t v19 = &stru_1ECAC84A8;
          }
          uint64_t v100 = (unsigned __int16 *)((char *)v14 + v57);
          if (*v100 < 9u)
          {
            uint64_t v101 = 0;
          }
          else
          {
            uint64_t v101 = v100[4];
            if (v101) {
              v101 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v101);
            }
          }
          int v180 = (const void *)(v101 + 4);
          size_t v181 = strlen((const char *)(v101 + 4));
          unsigned int v123 = dataTypeFromString(v180, v181, 0, &v230);
          int v182 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v182 < 9u)
          {
            uint64_t v136 = 0;
            uint64_t v126 = @"air.primitive_id";
            goto LABEL_152;
          }
          unsigned int v125 = v182[4];
          uint64_t v126 = @"air.primitive_id";
          if (v125) {
            goto LABEL_151;
          }
          break;
        default:
          return a4;
      }
      goto LABEL_147;
    }
    switch(v9)
    {
      case 139264:
        uint64_t v14 = (int *)AirReflection::Node::node_as_AcceptIntersectionRet(v5);
        uint64_t v72 = *v14;
        uint64_t v73 = -v72;
        int v74 = (unsigned __int16 *)((char *)v14 - v72);
        if (*v74 >= 9u && (uint64_t v75 = v74[4]) != 0)
        {
          uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v75 + *(unsigned int *)((char *)v14 + v75) + 4];
          uint64_t v73 = -(uint64_t)*v14;
        }
        else
        {
          uint64_t v19 = &stru_1ECAC84A8;
        }
        uint64_t v108 = (unsigned __int16 *)((char *)v14 + v73);
        if (*v108 < 7u)
        {
          uint64_t v109 = 0;
        }
        else
        {
          uint64_t v109 = v108[3];
          if (v109) {
            v109 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v109);
          }
        }
        int v192 = (const void *)(v109 + 4);
        size_t v193 = strlen((const char *)(v109 + 4));
        unsigned int v123 = dataTypeFromString(v192, v193, 0, &v230);
        int v194 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v194 < 7u)
        {
          uint64_t v136 = 0;
          uint64_t v126 = @"air.accept_intersection";
          goto LABEL_152;
        }
        unsigned int v125 = v194[3];
        uint64_t v126 = @"air.accept_intersection";
        if (!v125) {
          goto LABEL_147;
        }
        break;
      case 139265:
        uint64_t v14 = (int *)AirReflection::Node::node_as_ContinueSearchRet(v5);
        uint64_t v76 = *v14;
        uint64_t v77 = -v76;
        int v78 = (unsigned __int16 *)((char *)v14 - v76);
        if (*v78 >= 9u && (uint64_t v79 = v78[4]) != 0)
        {
          uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v79 + *(unsigned int *)((char *)v14 + v79) + 4];
          uint64_t v77 = -(uint64_t)*v14;
        }
        else
        {
          uint64_t v19 = &stru_1ECAC84A8;
        }
        uint64_t v110 = (unsigned __int16 *)((char *)v14 + v77);
        if (*v110 < 7u)
        {
          uint64_t v111 = 0;
        }
        else
        {
          uint64_t v111 = v110[3];
          if (v111) {
            v111 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v111);
          }
        }
        int v195 = (const void *)(v111 + 4);
        size_t v196 = strlen((const char *)(v111 + 4));
        unsigned int v123 = dataTypeFromString(v195, v196, 0, &v230);
        int v197 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v197 < 7u)
        {
          uint64_t v136 = 0;
          uint64_t v126 = @"air.continue_search";
          goto LABEL_152;
        }
        unsigned int v125 = v197[3];
        uint64_t v126 = @"air.continue_search";
        if (!v125) {
          goto LABEL_147;
        }
        break;
      case 139266:
        uint64_t v14 = (int *)AirReflection::Node::node_as_DistanceRet(v5);
        uint64_t v24 = *v14;
        uint64_t v25 = -v24;
        unint64_t v26 = (unsigned __int16 *)((char *)v14 - v24);
        if (*v26 >= 9u && (uint64_t v27 = v26[4]) != 0)
        {
          uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v27 + *(unsigned int *)((char *)v14 + v27) + 4];
          uint64_t v25 = -(uint64_t)*v14;
        }
        else
        {
          uint64_t v19 = &stru_1ECAC84A8;
        }
        uint64_t v84 = (unsigned __int16 *)((char *)v14 + v25);
        if (*v84 < 7u)
        {
          uint64_t v85 = 0;
        }
        else
        {
          uint64_t v85 = v84[3];
          if (v85) {
            v85 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v85);
          }
        }
        uint64_t v130 = (const void *)(v85 + 4);
        size_t v131 = strlen((const char *)(v85 + 4));
        unsigned int v123 = dataTypeFromString(v130, v131, 0, &v230);
        uint64_t v132 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v132 >= 7u)
        {
          unsigned int v125 = v132[3];
          uint64_t v126 = @"air.distance";
          if (!v125)
          {
LABEL_147:
            uint64_t v136 = 0;
            goto LABEL_152;
          }
          break;
        }
        uint64_t v136 = 0;
        uint64_t v126 = @"air.distance";
LABEL_152:
        uint64_t v140 = v136 + 4;
        size_t v141 = strlen(v136 + 4);
        unint64_t v142 = pixelFormatAndALUTypeFromString(v140, v141);
        unint64_t v143 = HIDWORD(v142);
        uint64_t v144 = v142;
        uint64_t ComponentType = MTLDataTypeGetComponentType(v123);
        int ComponentCount = MTLDataTypeGetComponentCount(v123);
        unsigned int v147 = MTLDataTypeGetSize(ComponentType) * ComponentCount;
        if (v147 <= 4) {
          int v148 = 4;
        }
        else {
          int v148 = v147;
        }
        uint64_t v149 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:v126 dataType:v123 pixelFormat:v144 aluType:v143 name:v19 offset:a4];
        unint64_t v150 = (unint64_t)a3[2];
        id v151 = (MTLPostVertexDumpOutput **)a3[1];
        if ((unint64_t)v151 >= v150)
        {
          uint64_t v153 = ((char *)v151 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v153 + 1) >> 61) {
            goto LABEL_282;
          }
          uint64_t v154 = v150 - (void)*a3;
          uint64_t v155 = v154 >> 2;
          if (v154 >> 2 <= (unint64_t)(v153 + 1)) {
            uint64_t v155 = v153 + 1;
          }
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v156 = v155;
          }
          if (v156) {
            int v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a3 + 2), v156);
          }
          else {
            int v157 = 0;
          }
          unsigned __int16 v158 = (MTLPostVertexDumpOutput **)&v157[8 * v153];
          int v159 = &v157[8 * v156];
          *unsigned __int16 v158 = v149;
          unsigned int v152 = v158 + 1;
          BOOL v161 = (char *)*a3;
          uint64_t v160 = (char *)a3[1];
          if (v160 != *a3)
          {
            do
            {
              int v162 = (MTLPostVertexDumpOutput *)*((void *)v160 - 1);
              v160 -= 8;
              *--unsigned __int16 v158 = v162;
            }
            while (v160 != v161);
            uint64_t v160 = (char *)*a3;
          }
          *a3 = v158;
          a3[1] = v152;
          a3[2] = v159;
          if (v160) {
            operator delete(v160);
          }
        }
        else
        {
          *id v151 = v149;
          unsigned int v152 = v151 + 1;
        }
        int v163 = v148 + 3;
LABEL_172:
        a3[1] = v152;
        return (v163 & 0xFFFFFFFC) + a4;
      default:
        return a4;
    }
LABEL_151:
    uint64_t v136 = (char *)v14 + v125 + *(int *)((char *)v14 + v125);
    goto LABEL_152;
  }
  switch(v9)
  {
    case 131072:
      int v10 = (int *)AirReflection::Node::node_as_ClipDistanceRet(v5);
      unint64_t v11 = v10;
      uint64_t v12 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v12 < 0xBu)
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = v12[5];
        if (v13) {
          v13 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v13);
        }
      }
      uint64_t v112 = (const void *)(v13 + 4);
      size_t v113 = strlen((const char *)(v13 + 4));
      uint64_t v114 = dataTypeFromString(v112, v113, 0, &v230);
      uint64_t v115 = *v11;
      uint64_t v116 = (char *)v11 - v115;
      unsigned int v117 = *(unsigned __int16 *)((char *)v11 - v115);
      if (v117 < 7) {
        goto LABEL_261;
      }
      if (!*((_WORD *)v116 + 3))
      {
        if (v117 >= 0xD && *((_WORD *)v116 + 6)) {
          v215 = (__CFString *)[NSString stringWithUTF8String:(char *)v11+ *((unsigned __int16 *)v116 + 6)+ *(unsigned int *)((char *)v11 + *((unsigned __int16 *)v116 + 6))+ 4];
        }
        else {
LABEL_261:
        }
          v215 = &stru_1ECAC84A8;
        if (v230 <= 4) {
          int v216 = 4;
        }
        else {
          int v216 = v230;
        }
        v217 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:@"air.clip_distance" dataType:v114 pixelFormat:0 aluType:0 name:v215 offset:a4];
        unint64_t v218 = (unint64_t)a3[2];
        v219 = (MTLPostVertexDumpOutput **)a3[1];
        if ((unint64_t)v219 < v218)
        {
          const char *v219 = v217;
          unsigned int v152 = v219 + 1;
LABEL_281:
          int v163 = v216 + 3;
          goto LABEL_172;
        }
        uint64_t v220 = ((char *)v219 - (unsigned char *)*a3) >> 3;
        if (!((unint64_t)(v220 + 1) >> 61))
        {
          uint64_t v221 = v218 - (void)*a3;
          uint64_t v222 = v221 >> 2;
          if (v221 >> 2 <= (unint64_t)(v220 + 1)) {
            uint64_t v222 = v220 + 1;
          }
          if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v223 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v223 = v222;
          }
          if (v223) {
            v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a3 + 2), v223);
          }
          else {
            v224 = 0;
          }
          v225 = (MTLPostVertexDumpOutput **)&v224[8 * v220];
          v226 = &v224[8 * v223];
          const char *v225 = v217;
          unsigned int v152 = v225 + 1;
          v228 = (char *)*a3;
          v227 = (char *)a3[1];
          if (v227 != *a3)
          {
            do
            {
              v229 = (MTLPostVertexDumpOutput *)*((void *)v227 - 1);
              v227 -= 8;
              *--v225 = v229;
            }
            while (v227 != v228);
            v227 = (char *)*a3;
          }
          *a3 = v225;
          a3[1] = v152;
          a3[2] = v226;
          if (v227) {
            operator delete(v227);
          }
          goto LABEL_281;
        }
LABEL_282:
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v118 = -v115;
      if (v117 >= 0xD && (uint64_t v119 = *((unsigned __int16 *)v116 + 6)) != 0)
      {
        uint64_t v120 = (__CFString *)[NSString stringWithUTF8String:(char *)v11 + v119 + *(unsigned int *)((char *)v11 + v119) + 4];
        uint64_t v118 = -(uint64_t)*v11;
      }
      else
      {
        uint64_t v120 = &stru_1ECAC84A8;
      }
      if (*(int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 + v118 + 6)))
      {
        uint64_t v198 = 0;
        do
        {
          uint64_t v199 = [NSString stringWithFormat:@"%@[%d]", v120, v198];
          if (v230 <= 4) {
            int v200 = 4;
          }
          else {
            int v200 = v230;
          }
          int v201 = [[MTLPostVertexDumpOutput alloc] initWithAirMDType:@"air.clip_distance" dataType:v114 pixelFormat:0 aluType:0 name:v199 offset:a4];
          int v202 = v201;
          int v204 = (MTLPostVertexDumpOutput **)a3[1];
          unint64_t v203 = (unint64_t)a3[2];
          if ((unint64_t)v204 >= v203)
          {
            uint64_t v206 = ((char *)v204 - (unsigned char *)*a3) >> 3;
            if ((unint64_t)(v206 + 1) >> 61) {
              goto LABEL_282;
            }
            uint64_t v207 = v203 - (void)*a3;
            uint64_t v208 = v207 >> 2;
            if (v207 >> 2 <= (unint64_t)(v206 + 1)) {
              uint64_t v208 = v206 + 1;
            }
            if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v209 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v209 = v208;
            }
            if (v209) {
              int v210 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a3 + 2), v209);
            }
            else {
              int v210 = 0;
            }
            int v211 = (MTLPostVertexDumpOutput **)&v210[8 * v206];
            *int v211 = v202;
            int v205 = v211 + 1;
            int v213 = (char *)*a3;
            int v212 = (char *)a3[1];
            if (v212 != *a3)
            {
              do
              {
                v214 = (MTLPostVertexDumpOutput *)*((void *)v212 - 1);
                v212 -= 8;
                *--int v211 = v214;
              }
              while (v212 != v213);
              int v212 = (char *)*a3;
            }
            *a3 = v211;
            a3[1] = v205;
            a3[2] = &v210[8 * v209];
            if (v212) {
              operator delete(v212);
            }
          }
          else
          {
            *int v204 = v201;
            int v205 = v204 + 1;
          }
          a3[1] = v205;
          a4 = ((v200 + 3) & 0xFFFFFFFC) + a4;
          uint64_t v198 = (v198 + 1);
        }
        while (v198 < *(int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 6)));
      }
      return a4;
    case 131073:
      uint64_t v14 = (int *)AirReflection::Node::node_as_PointSizeRet(v5);
      uint64_t v28 = *v14;
      uint64_t v29 = -v28;
      uint64_t v30 = (unsigned __int16 *)((char *)v14 - v28);
      if (*v30 >= 0xBu && (uint64_t v31 = v30[5]) != 0)
      {
        uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v31 + *(unsigned int *)((char *)v14 + v31) + 4];
        uint64_t v29 = -(uint64_t)*v14;
      }
      else
      {
        uint64_t v19 = &stru_1ECAC84A8;
      }
      uint64_t v86 = (unsigned __int16 *)((char *)v14 + v29);
      if (*v86 < 9u)
      {
        uint64_t v87 = 0;
      }
      else
      {
        uint64_t v87 = v86[4];
        if (v87) {
          v87 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v87);
        }
      }
      uint64_t v133 = (const void *)(v87 + 4);
      size_t v134 = strlen((const char *)(v87 + 4));
      unsigned int v123 = dataTypeFromString(v133, v134, 0, &v230);
      uint64_t v135 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v135 < 9u)
      {
        uint64_t v136 = 0;
        uint64_t v126 = @"air.point_size";
        goto LABEL_152;
      }
      unsigned int v125 = v135[4];
      uint64_t v126 = @"air.point_size";
      if (v125) {
        goto LABEL_151;
      }
      goto LABEL_147;
    case 131074:
      uint64_t v14 = (int *)AirReflection::Node::node_as_PositionRet(v5);
      uint64_t v32 = *v14;
      uint64_t v33 = -v32;
      int v34 = (unsigned __int16 *)((char *)v14 - v32);
      if (*v34 >= 0xDu && (uint64_t v35 = v34[6]) != 0)
      {
        uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v35 + *(unsigned int *)((char *)v14 + v35) + 4];
        uint64_t v33 = -(uint64_t)*v14;
      }
      else
      {
        uint64_t v19 = &stru_1ECAC84A8;
      }
      uint64_t v88 = (unsigned __int16 *)((char *)v14 + v33);
      if (*v88 < 0xBu)
      {
        uint64_t v89 = 0;
      }
      else
      {
        uint64_t v89 = v88[5];
        if (v89) {
          v89 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v89);
        }
      }
      uint64_t v137 = (const void *)(v89 + 4);
      size_t v138 = strlen((const char *)(v89 + 4));
      unsigned int v123 = dataTypeFromString(v137, v138, 0, &v230);
      uint64_t v139 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v139 < 0xBu)
      {
        uint64_t v136 = 0;
        uint64_t v126 = @"air.position";
        goto LABEL_152;
      }
      unsigned int v125 = v139[5];
      uint64_t v126 = @"air.position";
      if (!v125) {
        goto LABEL_147;
      }
      goto LABEL_151;
    case 131075:
      uint64_t v14 = (int *)AirReflection::Node::node_as_RenderTargetArrayIndexRet(v5);
      uint64_t v36 = *v14;
      uint64_t v37 = -v36;
      uint64_t v38 = (unsigned __int16 *)((char *)v14 - v36);
      if (*v38 >= 0xBu && (uint64_t v39 = v38[5]) != 0)
      {
        uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v39 + *(unsigned int *)((char *)v14 + v39) + 4];
        uint64_t v37 = -(uint64_t)*v14;
      }
      else
      {
        uint64_t v19 = &stru_1ECAC84A8;
      }
      uint64_t v90 = (unsigned __int16 *)((char *)v14 + v37);
      if (*v90 < 9u)
      {
        uint64_t v91 = 0;
      }
      else
      {
        uint64_t v91 = v90[4];
        if (v91) {
          v91 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v91);
        }
      }
      int v165 = (const void *)(v91 + 4);
      size_t v166 = strlen((const char *)(v91 + 4));
      unsigned int v123 = dataTypeFromString(v165, v166, 0, &v230);
      int v167 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v167 < 9u)
      {
        uint64_t v136 = 0;
        uint64_t v126 = @"air.render_target_array_index";
        goto LABEL_152;
      }
      unsigned int v125 = v167[4];
      uint64_t v126 = @"air.render_target_array_index";
      if (v125) {
        goto LABEL_151;
      }
      goto LABEL_147;
    case 131076:
      uint64_t v14 = (int *)AirReflection::Node::node_as_VertexOutputRet(v5);
      uint64_t v40 = *v14;
      uint64_t v41 = -v40;
      unint64_t v42 = (unsigned __int16 *)((char *)v14 - v40);
      if (*v42 >= 0xFu && (uint64_t v43 = v42[7]) != 0)
      {
        uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v43 + *(unsigned int *)((char *)v14 + v43) + 4];
        uint64_t v41 = -(uint64_t)*v14;
      }
      else
      {
        uint64_t v19 = &stru_1ECAC84A8;
      }
      uint64_t v92 = (unsigned __int16 *)((char *)v14 + v41);
      if (*v92 < 0xDu)
      {
        uint64_t v93 = 0;
      }
      else
      {
        uint64_t v93 = v92[6];
        if (v93) {
          v93 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v93);
        }
      }
      int v168 = (const void *)(v93 + 4);
      size_t v169 = strlen((const char *)(v93 + 4));
      unsigned int v123 = dataTypeFromString(v168, v169, 0, &v230);
      int v170 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v170 < 0xDu)
      {
        uint64_t v136 = 0;
        uint64_t v126 = @"air.vertex_output";
        goto LABEL_152;
      }
      unsigned int v125 = v170[6];
      uint64_t v126 = @"air.vertex_output";
      if (v125) {
        goto LABEL_151;
      }
      goto LABEL_147;
    case 131077:
      uint64_t v14 = (int *)AirReflection::Node::node_as_ViewportArrayIndexRet(v5);
      uint64_t v44 = *v14;
      uint64_t v45 = -v44;
      uint64_t v46 = (unsigned __int16 *)((char *)v14 - v44);
      if (*v46 >= 0xBu && (uint64_t v47 = v46[5]) != 0)
      {
        uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v47 + *(unsigned int *)((char *)v14 + v47) + 4];
        uint64_t v45 = -(uint64_t)*v14;
      }
      else
      {
        uint64_t v19 = &stru_1ECAC84A8;
      }
      uint64_t v94 = (unsigned __int16 *)((char *)v14 + v45);
      if (*v94 < 9u)
      {
        uint64_t v95 = 0;
      }
      else
      {
        uint64_t v95 = v94[4];
        if (v95) {
          v95 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v95);
        }
      }
      int v171 = (const void *)(v95 + 4);
      size_t v172 = strlen((const char *)(v95 + 4));
      unsigned int v123 = dataTypeFromString(v171, v172, 0, &v230);
      int v173 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v173 < 9u)
      {
        uint64_t v136 = 0;
        uint64_t v126 = @"air.viewport_array_index";
        goto LABEL_152;
      }
      unsigned int v125 = v173[4];
      uint64_t v126 = @"air.viewport_array_index";
      if (v125) {
        goto LABEL_151;
      }
      goto LABEL_147;
    default:
      switch(v9)
      {
        case 135168:
          uint64_t v14 = (int *)AirReflection::Node::node_as_RenderTargetRet(v5);
          uint64_t v20 = *v14;
          uint64_t v21 = -v20;
          unsigned int v22 = (unsigned __int16 *)((char *)v14 - v20);
          if (*v22 >= 0x11u && (uint64_t v23 = v22[8]) != 0)
          {
            uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v23 + *(unsigned int *)((char *)v14 + v23) + 4];
            uint64_t v21 = -(uint64_t)*v14;
          }
          else
          {
            uint64_t v19 = &stru_1ECAC84A8;
          }
          uint64_t v82 = (unsigned __int16 *)((char *)v14 + v21);
          if (*v82 < 0xFu)
          {
            uint64_t v83 = 0;
          }
          else
          {
            uint64_t v83 = v82[7];
            if (v83) {
              v83 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v83);
            }
          }
          uint64_t v127 = (const void *)(v83 + 4);
          size_t v128 = strlen((const char *)(v83 + 4));
          unsigned int v123 = dataTypeFromString(v127, v128, 0, &v230);
          unsigned int v129 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v129 < 0xFu)
          {
            uint64_t v136 = 0;
            uint64_t v126 = @"air.render_target";
            goto LABEL_152;
          }
          unsigned int v125 = v129[7];
          uint64_t v126 = @"air.render_target";
          if (v125) {
            goto LABEL_151;
          }
          goto LABEL_147;
        case 135169:
          uint64_t v14 = (int *)AirReflection::Node::node_as_DepthRet(v5);
          uint64_t v60 = *v14;
          uint64_t v61 = -v60;
          int v62 = (unsigned __int16 *)((char *)v14 - v60);
          if (*v62 >= 0xBu && (uint64_t v63 = v62[5]) != 0)
          {
            uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v63 + *(unsigned int *)((char *)v14 + v63) + 4];
            uint64_t v61 = -(uint64_t)*v14;
          }
          else
          {
            uint64_t v19 = &stru_1ECAC84A8;
          }
          uint64_t v102 = (unsigned __int16 *)((char *)v14 + v61);
          if (*v102 < 9u)
          {
            uint64_t v103 = 0;
          }
          else
          {
            uint64_t v103 = v102[4];
            if (v103) {
              v103 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v103);
            }
          }
          int v183 = (const void *)(v103 + 4);
          size_t v184 = strlen((const char *)(v103 + 4));
          unsigned int v123 = dataTypeFromString(v183, v184, 0, &v230);
          int v185 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v185 < 9u)
          {
            uint64_t v136 = 0;
            uint64_t v126 = @"air.depth";
            goto LABEL_152;
          }
          unsigned int v125 = v185[4];
          uint64_t v126 = @"air.depth";
          if (v125) {
            goto LABEL_151;
          }
          goto LABEL_147;
        case 135170:
          uint64_t v14 = (int *)AirReflection::Node::node_as_StencilRet(v5);
          uint64_t v64 = *v14;
          uint64_t v65 = -v64;
          uint64_t v66 = (unsigned __int16 *)((char *)v14 - v64);
          if (*v66 >= 9u && (uint64_t v67 = v66[4]) != 0)
          {
            uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v67 + *(unsigned int *)((char *)v14 + v67) + 4];
            uint64_t v65 = -(uint64_t)*v14;
          }
          else
          {
            uint64_t v19 = &stru_1ECAC84A8;
          }
          uint64_t v104 = (unsigned __int16 *)((char *)v14 + v65);
          if (*v104 < 7u)
          {
            uint64_t v105 = 0;
          }
          else
          {
            uint64_t v105 = v104[3];
            if (v105) {
              v105 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v105);
            }
          }
          int v186 = (const void *)(v105 + 4);
          size_t v187 = strlen((const char *)(v105 + 4));
          unsigned int v123 = dataTypeFromString(v186, v187, 0, &v230);
          v188 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v188 < 7u)
          {
            uint64_t v136 = 0;
            uint64_t v126 = @"air.stencil";
            goto LABEL_152;
          }
          unsigned int v125 = v188[3];
          uint64_t v126 = @"air.stencil";
          if (v125) {
            goto LABEL_151;
          }
          goto LABEL_147;
        case 135171:
          uint64_t v14 = (int *)AirReflection::Node::node_as_SampleMaskRet(v5);
          uint64_t v68 = *v14;
          uint64_t v69 = -v68;
          long long v70 = (unsigned __int16 *)((char *)v14 - v68);
          if (*v70 >= 9u && (uint64_t v71 = v70[4]) != 0)
          {
            uint64_t v19 = (__CFString *)[NSString stringWithUTF8String:(char *)v14 + v71 + *(unsigned int *)((char *)v14 + v71) + 4];
            uint64_t v69 = -(uint64_t)*v14;
          }
          else
          {
            uint64_t v19 = &stru_1ECAC84A8;
          }
          uint64_t v106 = (unsigned __int16 *)((char *)v14 + v69);
          if (*v106 < 7u)
          {
            uint64_t v107 = 0;
          }
          else
          {
            uint64_t v107 = v106[3];
            if (v107) {
              v107 += (uint64_t)v14 + *(unsigned int *)((char *)v14 + v107);
            }
          }
          int v189 = (const void *)(v107 + 4);
          size_t v190 = strlen((const char *)(v107 + 4));
          unsigned int v123 = dataTypeFromString(v189, v190, 0, &v230);
          int v191 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v191 < 7u)
          {
            uint64_t v136 = 0;
            uint64_t v126 = @"air.sample_mask";
            goto LABEL_152;
          }
          unsigned int v125 = v191[3];
          uint64_t v126 = @"air.sample_mask";
          if (v125) {
            goto LABEL_151;
          }
          break;
        default:
          return a4;
      }
      goto LABEL_147;
  }
}

uint64_t dataTypeFromString(const void *a1, size_t a2, _DWORD *a3, _DWORD *a4)
{
  dataTypeInfoFromString(a1, a2, (uint64_t)v7);
  uint64_t result = v7[0];
  if (a3) {
    *a3 = v7[1];
  }
  if (a4) {
    *a4 = v7[2];
  }
  return result;
}

uint64_t MTLDataTypeGetComponentCount(uint64_t a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 3:
    case 16:
    case 29:
    case 33:
    case 37:
    case 41:
    case 45:
    case 49:
    case 53:
    case 81:
    case 85:
      return result;
    case 4:
    case 17:
    case 30:
    case 34:
    case 38:
    case 42:
    case 46:
    case 50:
    case 54:
    case 82:
    case 86:
LABEL_3:
      uint64_t result = 2;
      break;
    case 5:
    case 18:
    case 31:
    case 35:
    case 39:
    case 43:
    case 47:
    case 51:
    case 55:
    case 83:
    case 87:
LABEL_4:
      uint64_t result = 3;
      break;
    case 6:
    case 19:
    case 32:
    case 36:
    case 40:
    case 44:
    case 48:
    case 52:
    case 56:
    case 84:
    case 88:
LABEL_5:
      uint64_t result = 4;
      break;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
LABEL_6:
      uint64_t result = 0;
      break;
    default:
      switch(a1)
      {
        case 'y':
          return result;
        case 'z':
          goto LABEL_3;
        case '{':
          goto LABEL_4;
        case '|':
          goto LABEL_5;
        default:
          goto LABEL_6;
      }
  }
  return result;
}

uint64_t MTLDataTypeGetComponentType(uint64_t result)
{
  switch(result)
  {
    case 16:
    case 29:
    case 33:
    case 37:
    case 41:
    case 45:
    case 49:
    case 53:
    case 81:
    case 85:
    case 121:
      return result;
    case 17:
    case 18:
    case 19:
      uint64_t result = 16;
      break;
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
      goto LABEL_15;
    case 30:
    case 31:
    case 32:
      uint64_t result = 29;
      break;
    case 34:
    case 35:
    case 36:
      uint64_t result = 33;
      break;
    case 38:
    case 39:
    case 40:
      uint64_t result = 37;
      break;
    case 42:
    case 43:
    case 44:
      uint64_t result = 41;
      break;
    case 46:
    case 47:
    case 48:
      uint64_t result = 45;
      break;
    case 50:
    case 51:
    case 52:
      uint64_t result = 49;
      break;
    case 54:
    case 55:
    case 56:
      uint64_t result = 53;
      break;
    case 82:
    case 83:
    case 84:
      uint64_t result = 81;
      break;
    case 86:
    case 87:
    case 88:
      uint64_t result = 85;
      break;
    case 122:
    case 123:
    case 124:
      uint64_t result = 121;
      break;
    default:
      if ((unint64_t)(result - 3) >= 4) {
LABEL_15:
      }
        uint64_t result = 0;
      else {
        uint64_t result = 3;
      }
      break;
  }
  return result;
}

uint64_t MTLDataTypeGetSize(uint64_t a1)
{
  if ((unint64_t)(a1 - 3) > 0x84) {
    return 0;
  }
  else {
    return qword_1828F22C8[a1 - 3];
  }
}

uint64_t AirReflection::Node::node_as_VertexOutputRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131076) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PositionRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131074) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_VertexInputArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270340) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t getPostVertexDumpOutputKernel@<X0>(int *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v7 = (char *)a1 - *a1;
  if (*((_WORD *)v7 + 3)) {
    uint64_t v8 = (uint64_t)a1 + *((unsigned __int16 *)v7 + 3) + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v7 + 3));
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v8
     + 4
     * *(unsigned int *)((char *)a1
                       + *((unsigned __int16 *)v7 + 6)
                       + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v7 + 6))
                       + 4);
  int v10 = (int *)AirReflection::Node::node_as_KernelFunction((AirReflection::Node *)(v9 + 4 + *(unsigned int *)(v9 + 4)));
  uint64_t result = getDefaultPostVertexBuiltins(v8, (void **)a4, 0, 0, a3);
  uint64_t v12 = result;
  uint64_t v13 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v13 >= 7u)
  {
    uint64_t v14 = v13[3];
    if (v14)
    {
      uint64_t v15 = (int *)((char *)v10 + v14 + *(unsigned int *)((char *)v10 + v14));
      if (*v15)
      {
        unint64_t v16 = 0;
        unint64_t v17 = v15 + 1;
        do
        {
          uint64_t result = getPostVertexDumpOutputForNode(v17, v8, (void **)a4, v12);
          uint64_t v12 = result;
          ++v16;
          ++v17;
        }
        while (v16 < *v15);
      }
    }
  }
  *a2 = v12;
  return result;
}

void sub_182736694(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AirReflection::Node::node_as_KernelFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 2) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t std::map<std::string,TokenData>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TokenData> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_182736770(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TokenData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__construct_node<std::pair<std::string const,TokenData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  unint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      unint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    unint64_t v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      unint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

__n128 std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__construct_node<std::pair<std::string const,TokenData> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_182736AE4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t AirReflection::Node::node_as_ClipDistanceRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x20000)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_PointSizeRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131073) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t ___ZN21XPCCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  int v2 = *(_DWORD *)(result + 72);
  if (v2 <= 2)
  {
    uint64_t v3 = result;
    do
    {
      __n128 result = XPCCompilerConnection::BuildRequestInternal(v1, *(int **)(v3 + 56), *(const char **)(v3 + 64), *(NSObject **)(v3 + 32), v2, *(unsigned __int8 *)(v3 + 76), *(void *)(v3 + 40));
      if (result) {
        break;
      }
    }
    while (v2++ != 2);
  }
  atomic_fetch_add((atomic_uint *volatile)(v1 + 28), 0xFFFFFFFF);
  return result;
}

BOOL XPCCompilerConnection::BuildRequestInternal(uint64_t a1, int *a2, const char *a3, NSObject *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v13 = _os_activity_create(&dword_1826F6000, "compiling shader", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v13, &state);
  int v14 = MTLAtomicIncrement(CompilerConnection::_compileCount);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 64), 0xFFFFFFFFFFFFFFFFLL);
  if (MTLTraceEnabled()) {
    kdebug_trace();
  }
  uint64_t v51 = 0;
  uint64_t v15 = (*(uint64_t (**)(int *, void, void **))(*(void *)a2 + 16))(a2, *(unsigned int *)(a1 + 32), &v51);
  if (v15)
  {
    int v30 = v14;
    xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_uint64(v16, "llvmVersion", *(int *)(a1 + 32));
    int v17 = a2[2];
    xpc_dictionary_set_uint64(v16, "requestType", v17);
    BOOL v18 = (v17 & 0xFFFFFFFE) == 16;
    if (v17 > 13)
    {
      if (v17 == 14)
      {
        uint64_t v21 = 2;
        if (!*((unsigned char *)a2 + 88)) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      if (v17 != 15)
      {
LABEL_21:
        uint64_t v21 = 1;
        if (v17 != 3 && v17 != 13)
        {
          if (!v18) {
            goto LABEL_27;
          }
          uint64_t v21 = 2;
        }
LABEL_26:
        unsigned int v22 = (void *)XPCCompilerConnection::setupSandbox((XPCCompilerConnection *)v21);
        xpc_dictionary_set_value(v16, "sandboxTokens", v22);
LABEL_27:
        if (a4)
        {
          xpc_object_t v23 = xpc_data_create_with_dispatch_data(a4);
          xpc_dictionary_set_value(v16, "targetData", v23);
          xpc_release(v23);
        }
        xpc_object_t v24 = xpc_data_create_with_dispatch_data(v15);
        xpc_dictionary_set_value(v16, "data", v24);
        xpc_release(v24);
        if (a3) {
          xpc_dictionary_set_string(v16, "pluginPath", a3);
        }
        if (a2[2] == 16)
        {
          xpc_object_t v25 = xpc_fd_create(a2[7]);
          xpc_dictionary_set_value(v16, "machOFD", v25);
          xpc_release(v25);
        }
        if (_MTLIsInternalBuild() && enableRelaxedMath(void)::onceToken != -1) {
          dispatch_once(&enableRelaxedMath(void)::onceToken, &__block_literal_global_68);
        }
        if (enableRelaxedMath(void)::relaxedMathSet == 1) {
          xpc_dictionary_set_uint64(v16, "setRelaxedMath", 1uLL);
        }
        unint64_t v26 = (const char *)MTLGetProcessName();
        if (v26) {
          xpc_dictionary_set_string(v16, "client_name", v26);
        }
        uint64_t v47 = 0;
        uint64_t v48 = &v47;
        uint64_t v49 = 0x2020000000;
        char v50 = 1;
        handler[0] = MEMORY[0x1E4F143A8];
        handler[1] = 3221225472;
        int v34 = ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke;
        uint64_t v35 = &unk_1E5220680;
        unint64_t v42 = a2;
        uint64_t v43 = a3;
        xpc_object_t v36 = v16;
        uint64_t v37 = a4;
        char v46 = a6;
        uint64_t v40 = &v47;
        uint64_t v41 = a1;
        int v44 = a5;
        int v45 = v30;
        uint64_t v38 = v13;
        uint64_t v39 = a7;
        if (a5 <= 0 && *(void *)(a1 + 56) && !*(unsigned char *)(a1 + 73)
          || (BOOL v32 = 0, XPCCompilerConnection::checkConnectionActive((XPCCompilerConnection *)a1, &v32)))
        {
          uint64_t v27 = *(_xpc_connection_s **)(a1 + 56);
          if (a6)
          {
            xpc_object_t v28 = xpc_connection_send_message_with_reply_sync(v27, v16);
            v34((uint64_t)handler, v28);
            xpc_release(v28);
            BOOL v19 = *((unsigned char *)v48 + 24) != 0;
LABEL_54:
            _Block_object_dispose(&v47, 8);
            goto LABEL_55;
          }
          xpc_connection_send_message_with_reply(v27, v16, *(dispatch_queue_t *)(a1 + 16), handler);
        }
        else
        {
          XPCCompilerConnection::reportError(a1, a6, (uint64_t)"MTLCompiler: Compiler service could not be reached.", a7, v32);
          (*(void (**)(int *))(*(void *)a2 + 8))(a2);
          if (MTLTraceEnabled()) {
            kdebug_trace();
          }
          if ((a6 & 1) == 0) {
            atomic_fetch_add((atomic_uint *volatile)(a1 + 28), 0xFFFFFFFF);
          }
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));
        }
        BOOL v19 = 1;
        goto LABEL_54;
      }
    }
    else if (v17 != 1 && v17 != 10)
    {
      goto LABEL_21;
    }
    BOOL v18 = (v17 & 0xFFFFFFFE) == 0x10 || *((unsigned char *)a2 + 132) != 0;
    goto LABEL_21;
  }
  XPCCompilerConnection::reportError(a1, a6, (uint64_t)v51, a7, 0);
  (*(void (**)(int *))(*(void *)a2 + 8))(a2);
  free(v51);
  if (MTLTraceEnabled()) {
    kdebug_trace();
  }
  if ((a6 & 1) == 0) {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 28), 0xFFFFFFFF);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 64));

  BOOL v19 = 1;
LABEL_55:
  os_activity_scope_leave(&state);
  return v19;
}

void sub_182737170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v27 - 104));
  _Unwind_Resume(a1);
}

id MTLCompilerFunctionRequest::serializedRequest(MTLCompilerFunctionRequest *this, int a2, char **a3)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  id var10 = this->var10;
  if (var10) {
    return var10;
  }
  BOOL var19 = this->var19;
  var22 = this->var22;
  int v10 = var19 && var22 != 0;
  buffer_ptr = 0;
  size_t size_ptr = 0;
  if (var22)
  {
    uint64_t v84 = dispatch_data_create_map(var22, (const void **)&buffer_ptr, &size_ptr);
    BOOL v112 = strncmp((const char *)buffer_ptr + 4, "AIRC", 4uLL) != 0;
  }
  else
  {
    BOOL v112 = v10;
    uint64_t v84 = 0;
  }
  id var4 = this->var4;
  id var5 = this->var5;
  int var1 = this->var1;
  if (var1 == 10) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = var1 == 7 && this->var16 == 10;
  }
  unint64_t v142 = this;
  id v136 = this->var4;
  if (var4) {
    int v14 = (void *)[var4 device];
  }
  else {
    int v14 = (void *)[var5 device];
  }
  uint64_t v15 = v14;
  int v16 = _MTLGetMTLCompilerLLVMVersionForDevice(v14);
  _MTLGetLLVMVersionFromDevice(v15);
  long long v180 = 0u;
  long long v181 = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  __int16 v169 = 0;
  char v170 = 0;
  long long v176 = 0u;
  long long v177 = 0u;
  active_platforuint64_t m = dyld_get_active_platform();
  int v17 = v142;
  var20 = v142->var20;
  if (var20) {
    LODWORD(var20) = v142->var19 << 23;
  }
  if (v13) {
    int v19 = 0x2000000;
  }
  else {
    int v19 = 100663296;
  }
  if (v16 != a2) {
    int v19 = 0;
  }
  unsigned int v133 = var20 | v19;
  if (v136)
  {
    uint64_t v20 = [v136 libraryData];
    int v17 = v142;
    if ([(id)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 72))(v20) count]
      || (int v17 = v142, [(id)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 64))(v20) count]))
    {
      v133 |= 0x8000000u;
    }
  }
  *a3 = 0;
  __srCC_SHA256_CTX c = 0;
  size_t __n = 0;
  var2 = v17->var2;
  if (var2)
  {
    object = dispatch_data_create_map(var2, (const void **)&__src, &__n);
    int v22 = __n;
  }
  else
  {
    int v22 = 0;
    object = 0;
  }
  char v23 = gCompilerTestMode;
  xpc_object_t v24 = v17;
  int var17 = v17->var17;
  unsigned int var6 = v24->var6;
  uint64_t v26 = *(void *)&v24->var7;
  unint64_t var11 = v24->var11;
  int v107 = v22 - var11;
  int v109 = var11;
  uint64_t v106 = (v22 - var11) + 288;
  unint64_t v28 = v106 + var11;
  if (v136)
  {
    uint64_t v29 = (void *)[v136 libraryData];
    int v30 = (void *)v29[11];
    if (v30)
    {
      __s = (char *)[v30 UTF8String];
      int v105 = v28;
      size_t v123 = strlen(__s) + 1;
      v28 += v123;
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v29 = (void *)[var5 libraryData];
  }
  int v105 = 0;
  LODWORD(v123) = 0;
  __s = 0;
LABEL_38:
  unint64_t v126 = v28 + 7;
  int v104 = (v28 + 7) & 0xFFFFFFF8;
  size_t size = (v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  int var18 = v142->var18;
  if (!var18) {
    int var18 = 32023;
  }
  unsigned int v128 = var18;
  uint64_t v165 = 0;
  _getForcedAIRVersion((_DWORD *)&v165 + 1, &v165);
  uint64_t v124 = v165;
  if (!v165 && v128 <= 0x7D16)
  {
    unsigned int v32 = _MTLGetAIRVersionForLLVMBitcodeVersion(v128);
    HIDWORD(v124) = HIWORD(v32);
    LODWORD(v124) = (unsigned __int16)v32;
  }
  int v164 = 0;
  size_t v163 = 0;
  var9 = v142->var9;
  if (var9)
  {
    uint64_t v103 = dispatch_data_create_map(var9, (const void **)&v164, &v163);
    size_t v34 = v163;
  }
  else
  {
    size_t v34 = 0;
    uint64_t v103 = 0;
  }
  unsigned int v122 = v34;
  unint64_t v135 = ((v126 | 7) + v34) & 0xFFFFFFFFFFFFFFF8;
  if (v136)
  {
    unsigned int v125 = (void *)[v136 name];
    int v35 = strlen((const char *)[v125 UTF8String]);
    __int16 v102 = [v136 bitcodeType];
    size_t v36 = ((v35 + 8) & 0xFFFFFFF8) + v135;
    size_t size = v36;
    if ([v136 bitCodeFileSize]) {
      [v136 pluginData];
    }
    uint64_t v162 = 0;
    uint64_t v161 = 0;
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t *, uint64_t *))(*v29 + 200))(v29, [v136 bitCodeOffset], objc_msgSend(v136, "bitCodeFileSize"), &v161, &v162);
    uint64_t v129 = v162;
    uint64_t v127 = objc_msgSend((id)objc_msgSend(v136, "pluginData"), "length");
    int v121 = v135;
    __int16 v37 = v35 + 1;
    int v120 = v129 + v36;
    size_t v130 = v127 + v129 + v36;
    LODWORD(v135) = v36;
  }
  else
  {
    uint64_t v162 = 0;
    uint64_t v161 = 0;
    if (var5)
    {
      (*(void (**)(void *, uint64_t *, uint64_t *))(*v29 + 216))(v29, &v161, &v162);
      uint64_t v38 = v162;
    }
    else
    {
      uint64_t v38 = 0;
    }
    int v121 = 0;
    __int16 v37 = 0;
    __int16 v102 = 0;
    unsigned int v125 = 0;
    int v120 = 0;
    LODWORD(v127) = 0;
    LODWORD(v129) = v38;
    size_t v130 = v38 + v135;
  }
  int v101 = [v142->var12 count];
  std::vector<MTLBuildBinaryRequest>::vector(&v159, [v142->var12 count]);
  __int16 v100 = v37;
  unsigned int v39 = 0;
  int v141 = (var17 << 31) | ((v23 & 3) << 28) | v133 & 0xF800000 | ((v136 == 0) << 30);
  size_t size = v130 + 56 * [v142->var12 count];
  uint64_t v40 = v142;
  while ([v142->var12 count] > (unint64_t)v39)
  {
    uint64_t v41 = (void *)[v142->var12 objectAtIndexedSubscript:v39];
    prepareVisibleFunctionHeader(v41, (uint64_t)v159 + 56 * v39++, (uint64_t *)&size);
  }
  size_t v132 = size;
  size_t v113 = v15;
  uint64_t v114 = v29;
  if (v142->var14)
  {
    __p = 0;
    unint64_t v42 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    id obj = v142->var14;
    uint64_t v43 = [obj countByEnumeratingWithState:&v155 objects:v175 count:16];
    if (v43)
    {
      size_t count = *(void *)v156;
      do
      {
        for (uint64_t i = 0; i != v43; ++i)
        {
          if (*(void *)v156 != count) {
            objc_enumerationMutation(obj);
          }
          uint64_t v45 = *(void *)(*((void *)&v155 + 1) + 8 * i);
          objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E4F1CA48], "array"), v45);
          long long v153 = 0u;
          long long v154 = 0u;
          long long v151 = 0u;
          long long v152 = 0u;
          char v46 = (void *)[v142->var14 objectForKeyedSubscript:v45];
          uint64_t v47 = [v46 countByEnumeratingWithState:&v151 objects:v174 count:16];
          if (v47)
          {
            uint64_t v48 = *(void *)v152;
            do
            {
              for (uint64_t j = 0; j != v47; ++j)
              {
                if (*(void *)v152 != v48) {
                  objc_enumerationMutation(v46);
                }
                objc_msgSend((id)objc_msgSend(v42, "objectForKeyedSubscript:", v45), "addObject:", objc_msgSend(*(id *)(*((void *)&v151 + 1) + 8 * j), "name"));
              }
              uint64_t v47 = [v46 countByEnumeratingWithState:&v151 objects:v174 count:16];
            }
            while (v47);
          }
        }
        uint64_t v43 = [obj countByEnumeratingWithState:&v155 objects:v175 count:16];
      }
      while (v43);
    }
    uint64_t v40 = v142;
    uint64_t v15 = v113;
    uint64_t v29 = v114;
    char v50 = (void *)[MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v42 requiringSecureCoding:0 error:&__p];
    int v51 = [v50 length];
    int v118 = v132;
    v132 += [v50 length];
  }
  else
  {
    int v51 = 0;
    int v118 = 0;
    char v50 = 0;
  }
  int v97 = [v40->var13 count];
  std::vector<MTLBuildBinaryRequest>::vector(&__p, [v40->var13 count]);
  uint64_t v95 = v50;
  int v96 = v51;
  unsigned int v52 = 0;
  size_t size = v132 + 56 * [v40->var13 count];
  while ([v40->var13 count] > (unint64_t)v52)
  {
    uint64_t v53 = (void *)[v40->var13 objectAtIndexedSubscript:v52];
    prepareVisibleFunctionHeader(v53, (uint64_t)__p + 56 * v52++, (uint64_t *)&size);
  }
  int v85 = v40->var1;
  if (v85 == 15)
  {
    size_t v54 = (long long *)[v136 bitCodeHash];
    long long v55 = v54[1];
    long long v176 = *v54;
    long long v177 = v55;
    id var15 = v40->var15;
    p_id var15 = &v40->var15;
    if (var15)
    {
      [var15 UTF8String];
      int v57 = [*p_var15 lengthOfBytesUsingEncoding:4];
      int v115 = size;
      uint64_t v93 = (v57 & 0xFFFFFFF8) + 8;
      size += v93;
    }
    else
    {
      int v115 = 0;
      LODWORD(v93) = 0;
    }
  }
  else
  {
    int v115 = 0;
    LODWORD(v93) = 0;
    p_id var15 = &v40->var15;
  }
  int var16 = v40->var16;
  if (!var16) {
    int var16 = v40->var1;
  }
  int v91 = var16;
  int v92 = v40->var1;
  unsigned int var3 = v40->var3;
  if ((v133 & 0x800000) != 0)
  {
    int v116 = (size + 7) & 0xFFFFFFF8;
    uint64_t v90 = strlen(v40->var20) + 1;
    size_t v59 = ((size + 7) | 7) + v90;
    int v117 = v59 & 0xFFFFFFF8;
    size_t size = v59 & 0xFFFFFFFFFFFFFFF8;
    if (v112)
    {
      uint64_t v60 = ((*((void *)v40->var21 + 8) - *((void *)v40->var21 + 7)) >> 5);
      uint64_t v89 = (*((void *)v40->var21 + 8) - *((void *)v40->var21 + 7)) >> 5;
      uint64_t v61 = (v59 | 7) + 4 * v60;
      int v99 = v61 & 0xFFFFFFF8;
      size_t size = (v61 + 32 * v60) & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_89;
    }
  }
  else
  {
    int v116 = 0;
    LODWORD(v90) = 0;
  }
  LODWORD(v89) = 0;
  int v117 = 0;
  int v99 = 0;
LABEL_89:
  if (v40->var22)
  {
    int v134 = size;
    int v88 = size_ptr;
    size_t size = (size + size_ptr + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    int v134 = 0;
    int v88 = 0;
  }
  size_t v147 = 0;
  int v148 = 0;
  var24 = v40->var24;
  unint64_t var23 = v40->var23;
  if (!var24)
  {
    int v87 = 0;
    dispatch_object_t v82 = 0;
    size_t v64 = size;
LABEL_97:
    size_t counta = v64;
    goto LABEL_98;
  }
  dispatch_data_t v63 = dispatch_data_create_map(var24, (const void **)&v148, &v147);
  size_t v64 = size;
  dispatch_object_t v82 = v63;
  if (!v147)
  {
    int v87 = 0;
    goto LABEL_97;
  }
  int v87 = v147;
  size_t counta = (size + v147 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t size = counta;
LABEL_98:
  int obja = v64;
  if (objc_msgSend(v40->var25, "count", v82))
  {
    uint64_t v65 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28E78]), "initWithCapacity:", objc_msgSend(v40->var25, "count") << 7);
    id var25 = v40->var25;
    long long v143 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    uint64_t v67 = [var25 countByEnumeratingWithState:&v143 objects:v173 count:16];
    if (v67)
    {
      uint64_t v68 = *(void *)v144;
      do
      {
        for (uint64_t k = 0; k != v67; ++k)
        {
          if (*(void *)v144 != v68) {
            objc_enumerationMutation(var25);
          }
          long long v70 = *(void **)(*((void *)&v143 + 1) + 8 * k);
          uint64_t v71 = (__CFString *)[v142->var25 objectForKeyedSubscript:v70];
          if ([v70 isEqualToString:@"enable-acceleration-structure-viewer-intersect-instrumentation"])
          {
            v141 |= 0x1000000u;
          }
          else
          {
            [v65 appendString:@"-"];
            [v65 appendString:v70];
            if (v71 != (__CFString *)[MEMORY[0x1E4F1CA98] null])
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v72 = v71;
              }
              else
              {
                objc_opt_class();
                uint64_t v72 = &stru_1ECAC84A8;
                if (objc_opt_isKindOfClass()) {
                  uint64_t v72 = (__CFString *)[(__CFString *)v71 stringValue];
                }
              }
              [v65 appendString:@"="];
              [v65 appendString:v72];
            }
            [v65 appendString:@" "];
          }
        }
        uint64_t v67 = [var25 countByEnumeratingWithState:&v143 objects:v173 count:16];
      }
      while (v67);
    }
    uint64_t v40 = v142;
    uint64_t v15 = v113;
    uint64_t v29 = v114;
    LODWORD(v64) = obja;
    if ([v65 length])
    {
      objc_msgSend(v65, "deleteCharactersInRange:", objc_msgSend(v65, "length") - 1, 1);
      unint64_t v73 = ([v65 lengthOfBytesUsingEncoding:4] + 7) & 0xFFFFFFFFFFFFFFF8;
      size_t size = counta + v73;
      int v74 = (void *)[v65 copy];
      int v75 = counta;
      counta += v73;
      LODWORD(v64) = obja;
    }
    else
    {
      int v75 = 0;
      LODWORD(v73) = 0;
      int v74 = 0;
    }
  }
  else
  {
    int v75 = 0;
    LODWORD(v73) = 0;
    int v74 = 0;
  }
  char v76 = [v15 supportsGlobalVariableBindingInDylibs];
  uint64_t v77 = (char *)malloc_type_calloc(counta, 1uLL, 0x1BD9D09DuLL);
  *((_DWORD *)v77 + 1) = var6;
  *((_DWORD *)v77 + 2) = 288;
  *((_DWORD *)v77 + 3) = v107;
  *((_DWORD *)v77 + 4) = v106;
  *((_DWORD *)v77 + 5) = v109;
  *((_DWORD *)v77 + 6) = v104;
  *((_DWORD *)v77 + 12) = HIDWORD(v124);
  *((_DWORD *)v77 + 13) = v124;
  *((_WORD *)v77 + 46) = v100;
  *((_WORD *)v77 + 47) = v102;
  *((_DWORD *)v77 + 36) = v101;
  *((_DWORD *)v77 + 38) = v96;
  *((_DWORD *)v77 + 40) = v97;
  *((_DWORD *)v77 + 43) = v93;
  *((_DWORD *)v77 + 45) = v90;
  *((_DWORD *)v77 + 46) = v89;
  *((_DWORD *)v77 + 50) = v88;
  *((void *)v77 + 26) = var23;
  *((_DWORD *)v77 + 54) = v92;
  *((_DWORD *)v77 + 55) = v91;
  *((_DWORD *)v77 + 56) = v128;
  v77[228] = v76;
  v77[231] = v170;
  *(_WORD *)(v77 + 229) = v169;
  *(_DWORD *)uint64_t v77 = v141;
  *((_DWORD *)v77 + 42) = v115;
  *((_DWORD *)v77 + 44) = v116;
  *((void *)v77 + 5) = v26;
  long long v78 = v181;
  *(_OWORD *)(v77 + 56) = v180;
  *(_OWORD *)(v77 + 72) = v78;
  long long v79 = v179;
  *((_OWORD *)v77 + 7) = v178;
  *((_OWORD *)v77 + 8) = v79;
  long long v80 = v176;
  *(_OWORD *)(v77 + 252) = v177;
  *((_DWORD *)v77 + 7) = v122;
  *((_DWORD *)v77 + 8) = v105;
  *((_DWORD *)v77 + 9) = v123;
  *((_DWORD *)v77 + 22) = v121;
  *((_DWORD *)v77 + 24) = v135;
  *((_DWORD *)v77 + 25) = v129;
  *((_DWORD *)v77 + 26) = v120;
  *((_DWORD *)v77 + 27) = v127;
  *((_DWORD *)v77 + 37) = v130;
  *((_DWORD *)v77 + 39) = v118;
  *((_DWORD *)v77 + 41) = v132;
  *((_DWORD *)v77 + 47) = v117;
  *((_DWORD *)v77 + 48) = v99;
  *((_DWORD *)v77 + 49) = v134;
  *((_DWORD *)v77 + 51) = 0;
  *((_DWORD *)v77 + 58) = var3;
  *(_OWORD *)(v77 + 236) = v80;
  *((_DWORD *)v77 + 67) = active_platform;
  *((_DWORD *)v77 + 68) = v64;
  *((_DWORD *)v77 + 69) = v87;
  *((_DWORD *)v77 + 70) = v75;
  *((_DWORD *)v77 + 71) = v73;
  memcpy(v77 + 288, __src, __n);
  if (object) {
    dispatch_release(object);
  }
  if (v164) {
    memcpy(&v77[v126 & 0xFFFFFFF8], v164, v122);
  }
  if (v103) {
    dispatch_release(v103);
  }
  if (__s) {
    memcpy(&v77[v105], __s, v123);
  }
  if ((v141 & 0x800000) != 0)
  {
    strcpy(&v77[v116], v40->var20);
    if (v112) {
      MTLHashKey::getHashTools((unint64_t *)v40->var21, &v77[v99], &v77[v117]);
    }
  }
  if (v40->var22)
  {
    memcpy(&v77[v134], buffer_ptr, size_ptr);
    dispatch_release(v84);
  }
  if (v147)
  {
    memcpy(&v77[obja], v148, v147);
    dispatch_release(v83);
  }
  if (v125) {
    strcpy(&v77[v121], (const char *)[v125 UTF8String]);
  }
  (*(void (**)(void *, char *, uint64_t, void))(*v29 + 208))(v29, &v77[v135], v161, v129);
  if (v136) {
    objc_msgSend((id)objc_msgSend(v136, "pluginData"), "getBytes:length:", &v77[v120], v127);
  }
  if (v160 != v159) {
    memmove(&v77[v130], v159, v160 - (unsigned char *)v159);
  }
  serializeVisibleFunctions(v40->var12, &v159, (uint64_t)v77);
  if (v40->var14) {
    objc_msgSend(v95, "getBytes:length:", &v77[v118], objc_msgSend(v95, "length"));
  }
  if (v150 != __p) {
    memmove(&v77[v132], __p, v150 - (unsigned char *)__p);
  }
  serializeVisibleFunctions(v40->var13, &__p, (uint64_t)v77);
  if (v85 == 15 && *p_var15) {
    strcpy(&v77[v115], (const char *)[*p_var15 UTF8String]);
  }
  if (v74)
  {
    strncpy(&v77[v75], (const char *)[v74 UTF8String], v73);
  }
  v40->id var10 = dispatch_data_create(v77, size, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);
  if (v40->var4 != v136) {

  }
  if (v40->var5 != var5) {
  id var10 = v40->var10;
  }
  if (__p)
  {
    unint64_t v150 = __p;
    operator delete(__p);
  }
  if (v159)
  {
    uint64_t v160 = v159;
    operator delete(v159);
  }
  return var10;
}

void sub_1827381FC(_Unwind_Exception *a1)
{
  int v2 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void *std::vector<MTLBuildBinaryRequest>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLBuildBinaryRequest>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_182738364(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t serializeVisibleFunctions(void *a1, void *a2, uint64_t a3)
{
  unint64_t result = [a1 count];
  if (result)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      uint64_t v9 = (unsigned int *)(*a2 + 56 * v7);
      int v10 = (void *)[a1 objectAtIndexedSubscript:v7];
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v11 = [v10 libraryData];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 200))(v11, [v10 bitCodeOffset], objc_msgSend(v10, "bitCodeFileSize"), &v15, &v16);
      uint64_t v12 = a3 + v9[2];
      uint64_t v13 = [v10 libraryData];
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 208))(v13, v12, v15, v9[3]);
      strcpy((char *)(a3 + *v9), (const char *)objc_msgSend((id)objc_msgSend(v10, "name"), "UTF8String"));
      objc_msgSend((id)objc_msgSend(v10, "pluginData"), "getBytes:length:", a3 + v9[4], v9[5]);
      uint64_t v7 = v8;
      unint64_t result = [a1 count];
    }
    while (result > v8++);
  }
  return result;
}

BOOL MTLLibraryDataWithArchive::parseBitCodeHeader(os_unfair_lock_s *this, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  int v10 = this + 21;
  os_unfair_lock_lock(this + 21);
  if ((*(unsigned int (**)(os_unfair_lock_s *, unint64_t))(*(void *)&this->_os_unfair_lock_opaque
                                                                            + 312))(this, a2))
  {
    BOOL v12 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t *, uint64_t))(*(void *)&this->_os_unfair_lock_opaque
                                                                            + 320))(this, &v14, 20) == 20&& v14 == 186106078;
  }
  else
  {
    BOOL v12 = 0;
  }
  os_unfair_lock_unlock(v10);
  *a4 = a2;
  if (!a3) {
    a3 = (HIDWORD(v15) + v15 + 15) & 0xFFFFFFF0;
  }
  *a5 = a3;
  return v12;
}

void sub_182738600(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLLibraryData::copyBitCode(MTLLibraryData *this, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = (os_unfair_lock_s *)((char *)this + 84);
  os_unfair_lock_lock((os_unfair_lock_t)this + 21);
  (*(void (**)(MTLLibraryData *, uint64_t))(*(void *)this + 312))(this, a3);
  (*(void (**)(MTLLibraryData *, void *, uint64_t))(*(void *)this + 320))(this, a2, a4);

  os_unfair_lock_unlock(v8);
}

void sub_1827386E0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void _getForcedAIRVersion(_DWORD *a1, _DWORD *a2)
{
  if (_getForcedAIRVersion::onceToken != -1) {
    dispatch_once(&_getForcedAIRVersion::onceToken, &__block_literal_global_52_0);
  }
  *a1 = _getForcedAIRVersion::major;
  *a2 = _getForcedAIRVersion::minor;
}

uint64_t MTLGetProcessName()
{
  if (MTLGetProcessName::onceToken != -1) {
    dispatch_once(&MTLGetProcessName::onceToken, &__block_literal_global_10);
  }
  return MTLGetProcessName::tmp;
}

void ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke(uint64_t a1, id a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 72);
  int v5 = *(_DWORD *)(*(void *)(a1 + 80) + 8);
  if (object_getClass(a2) != (Class)MEMORY[0x1E4F14590])
  {
    if (object_getClass(a2) == (Class)MEMORY[0x1E4F145A8])
    {
      if (a2 == (id)MEMORY[0x1E4F14520])
      {
        BOOL v31 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (v31) {
          ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_2(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        xpc_release(*(xpc_object_t *)(a1 + 32));
        int v39 = *(_DWORD *)(a1 + 96);
        if (v39 == 2) {
          os_log_type_t v40 = OS_LOG_TYPE_FAULT;
        }
        else {
          os_log_type_t v40 = OS_LOG_TYPE_DEFAULT;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], v40))
        {
          v52[0] = 67109120;
          v52[1] = v39 + 1;
          _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], v40, "MTLCompiler: Compilation failed with XPC_ERROR_CONNECTION_INTERRUPTED on %d try", (uint8_t *)v52, 8u);
        }
        int v15 = 2;
      }
      else if (a2 == (id)MEMORY[0x1E4F14528])
      {
        BOOL v41 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (v41) {
          ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_4(v41, v42, v43, v44, v45, v46, v47, v48);
        }
        xpc_release(*(xpc_object_t *)(a1 + 32));
        uint64_t v49 = XPCCompilerConnection::cancelConnection((XPCCompilerConnection *)v4);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_3(a1, (uint64_t)v49);
        }
        int v15 = 1;
      }
      else
      {
        id v6 = (id)MEMORY[0x1E4F14550];
        BOOL v7 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (a2 == v6)
        {
          if (v7) {
            ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_5(v7, v8, v9, v10, v11, v12, v13, v14);
          }
          int v15 = 3;
        }
        else
        {
          if (v7) {
            ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_6(v7, v8, v9, v10, v11, v12, v13, v14);
          }
          int v15 = 4;
        }
        xpc_release(*(xpc_object_t *)(a1 + 32));
      }
      if (v5 != 8 && (*(_DWORD *)(a1 + 96) == 2 || *(unsigned char *)(v4 + 72))) {
        uint64_t v25 = newLogReplayRequest(*(_DWORD **)(a1 + 80), *(const char **)(a1 + 88), *(NSObject **)(a1 + 40), *(unsigned int *)(v4 + 32));
      }
      else {
        uint64_t v25 = 0;
      }
      if (v15 != 1)
      {
        int v50 = *(_DWORD *)(a1 + 96);
        if (v50 <= 1)
        {
          if (*(unsigned char *)(a1 + 104)) {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
          }
          else {
            (*(void (**)(uint64_t, void, void, void, void, void, void))(*(void *)v4 + 16))(v4, *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 40), (v50 + 1), 0, *(void *)(a1 + 56));
          }
          goto LABEL_27;
        }
      }
      uint64_t v51 = *(void *)(a1 + 56);
      if (v15 == 1)
      {
        MTLCompiler_encountered_XPC_ERROR_CONNECTION_INVALID(v51);
LABEL_25:
        uint64_t v30 = *(void *)(a1 + 80);
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        goto LABEL_27;
      }
      uint64_t v29 = *(void (**)(void))(v51 + 16);
LABEL_24:
      v29();
      goto LABEL_25;
    }
LABEL_15:
    xpc_release(*(xpc_object_t *)(a1 + 32));
    xpc_object_t value = xpc_dictionary_get_value(a2, "reply");
    if (object_getClass(value) == (Class)MEMORY[0x1E4F14580]
      && ((xpc_data_get_bytes_ptr(value),
           xpc_data_get_length(value),
           uint64_t v27 = getenv("AGX_LOG_SHADER_COMPILER_REQUEST"),
           v5 != 8)
        ? (BOOL v28 = v27 == 0)
        : (BOOL v28 = 1),
          !v28 && *v27 == 49))
    {
      uint64_t v25 = newLogReplayRequest(*(_DWORD **)(a1 + 80), *(const char **)(a1 + 88), *(NSObject **)(a1 + 40), *(unsigned int *)(v4 + 32));
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v29 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    goto LABEL_24;
  }
  if (!xpc_dictionary_get_uint64(a2, "error")) {
    goto LABEL_15;
  }
  BOOL v16 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (v16) {
    ___ZN21XPCCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
  xpc_dictionary_get_uint64(a2, "error");
  xpc_dictionary_get_string(a2, "errorMessage");
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  uint64_t v24 = *(void *)(a1 + 80);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = 0;
LABEL_27:
  if (MTLTraceEnabled()) {
    kdebug_trace();
  }
  if (!*(unsigned char *)(a1 + 104)) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 28), 0xFFFFFFFF);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v4 + 64));

  if (v25) {
    XPCCompilerConnection::DispatchLogReplayRequest((XPCCompilerConnection *)v4, v25, *(void *)(a1 + 88), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 104));
  }
}

void ___ZN35MTLCompilerConnectionManagerPrivate12buildRequestEjP18MTLCompilerRequestbU13block_pointerFv16MTLCompilerErrorPU27objcproto16OS_dispatch_data8NSObjectPKcE_block_invoke_2(uint64_t a1, int a2, void *buffer, size_t size)
{
  if (buffer && size)
  {
    int v5 = dispatch_data_create(buffer, size, 0, 0);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    dispatch_release(v5);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  id v6 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a1 + 40) + 8) + 56);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void MTLCompilerFunctionRequest::~MTLCompilerFunctionRequest(MTLCompilerFunctionRequest *this)
{
  MTLCompilerFunctionRequest::~MTLCompilerFunctionRequest(this);

  JUMPOUT(0x18530C140);
}

{
  NSObject *var10;
  NSObject *var9;
  char *var20;
  NSObject *var22;
  NSObject *var24;
  NSObject *var2;

  this->var0 = (void **)&unk_1ECAC6588;

  this->var12 = 0;
  this->var13 = 0;

  this->var14 = 0;
  this->id var15 = 0;
  id var10 = this->var10;
  if (var10)
  {
    dispatch_release(var10);
    this->id var10 = 0;
  }
  var9 = this->var9;
  if (var9)
  {
    dispatch_release(var9);
    this->var9 = 0;
  }
  var20 = this->var20;
  if (var20)
  {
    free(var20);
    this->var20 = 0;
  }
  var22 = this->var22;
  if (var22)
  {
    dispatch_release(var22);
    this->var22 = 0;
  }
  var24 = this->var24;
  if (var24)
  {
    dispatch_release(var24);
    this->var24 = 0;
  }

  this->id var25 = 0;
  this->var0 = (void **)&unk_1ECAC5A78;
  var2 = this->var2;
  if (var2) {
    dispatch_release(var2);
  }
}

void sub_182739194(_Unwind_Exception *a1, MTLHashKey *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void MultiLevelAirCache::addElement(MultiLevelAirCache *this, const MTLHashKey *a2, MTLAirEntry *a3)
{
  int v5 = [[MTLBinaryKey alloc] initWithHash:a2];
  (*(void (**)(MultiLevelAirCache *, MTLBinaryKey *, MTLAirEntry *))(*(void *)this + 104))(this, v5, a3);
}

BOOL MTLTraceEnabled()
{
  return *(_DWORD *)*MEMORY[0x1E4F6EC08] != 0;
}

void MTLDispatchListApply(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      int v2 = *(void **)v1;
      (*(void (**)(void))(*((void *)v1 + 1) + 16))();
      _Block_release(*((const void **)v1 + 1));
      free(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_18273A068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18273A2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *_getPipelineFrameworkHash(Air::PipelineScript *a1, int a2)
{
  int v2 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v2 < 9u) {
    return 0;
  }
  uint64_t v3 = v2[4];
  if (!v3) {
    return 0;
  }
  switch(*((unsigned char *)a1 + v3))
  {
    case 1:
      int v5 = (int *)Air::PipelineScript::pipeline_as_render(a1);
      id v6 = (unsigned __int16 *)((char *)v5 - *v5);
      unsigned int v7 = *v6;
      if (a2 == 1)
      {
        if (v7 >= 9 && (uint64_t v8 = v6[4]) != 0) {
          uint64_t v9 = (int *)((char *)v5 + v8 + *(unsigned int *)((char *)v5 + v8));
        }
        else {
          uint64_t v9 = 0;
        }
        return getVertexHash(v9);
      }
      if (v7 >= 0xB)
      {
        uint64_t v19 = v6[5];
        if (v19) {
          goto LABEL_35;
        }
      }
      goto LABEL_36;
    case 2:
      Air::PipelineScript::pipeline_as_compute(a1);
      goto LABEL_9;
    case 3:
      uint64_t v11 = (int *)Air::PipelineScript::pipeline_as_tile_render(a1);
      uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
        uint64_t v14 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
      }
      else {
        uint64_t v14 = 0;
      }
      return getTileHash(v14);
    case 4:
      switch(a2)
      {
        case 2:
          int v5 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
          uint64_t v20 = (unsigned __int16 *)((char *)v5 - *v5);
          if (*v20 >= 0xFu && (uint64_t v19 = v20[7]) != 0) {
LABEL_35:
          }
            uint64_t v21 = (int *)((char *)v5 + v19 + *(unsigned int *)((char *)v5 + v19));
          else {
LABEL_36:
          }
            uint64_t v21 = 0;
          unint64_t result = getFragmentHash(v21);
          break;
        case 8:
          Air::PipelineScript::pipeline_as_mesh_render(a1);
LABEL_9:
          unint64_t result = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
          break;
        case 7:
          int v15 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
          BOOL v16 = (unsigned __int16 *)((char *)v15 - *v15);
          if (*v16 >= 0xDu && (uint64_t v17 = v16[6]) != 0) {
            uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
          }
          else {
            uint64_t v18 = 0;
          }
          unint64_t result = getMeshHash(v18);
          break;
        default:
          return 0;
      }
      break;
    default:
      return 0;
  }
  return result;
}

void *std::vector<MTLUINT256_t const*>::__init_with_size[abi:ne180100]<MTLUINT256_t const**,MTLUINT256_t const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    unint64_t result = std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18273A584(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MTLHashKey::MTLHashKey(MTLHashKey *this, const MTLFunctionToolList *a2)
{
  this->var0.var2 = 4;
  *(_OWORD *)&this->var0.var0 = xmmword_1828D4A00;
  this->var2.var0 = 0;
  p_var2 = &this->var2;
  this->var2.int var1 = 0;
  this->var2.var2.var0 = 0;
  std::vector<MTLUINT256_t>::reserve((void **)&this->var2.var0, 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2)+ ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3)+ 1);
  int v5 = *(_OWORD **)a2;
  uint64_t v7 = &this->var2.var2;
  var0 = this->var2.var2.var0;
  int var1 = this->var2.var1;
  if (var1 >= var0)
  {
    uint64_t v11 = (var1 - p_var2->var0) >> 5;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = var0 - p_var2->var0;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&this->var2.var2, v14);
    }
    else {
      int v15 = 0;
    }
    BOOL v16 = &v15[32 * v11];
    uint64_t v17 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)&v15[32 * v14];
    long long v18 = v5[1];
    *(_OWORD *)BOOL v16 = *v5;
    *((_OWORD *)v16 + 1) = v18;
    uint64_t v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v16 + 32);
    uint64_t v20 = this->var2.var0;
    uint64_t v19 = this->var2.var1;
    if (v19 != v20)
    {
      do
      {
        long long v21 = *((_OWORD *)v19 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v19 - 2);
        *((_OWORD *)v16 - 1) = v21;
        v16 -= 32;
        uint64_t v19 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v19 - 32);
      }
      while (v19 != v20);
      uint64_t v19 = p_var2->var0;
    }
    this->var2.var0 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)v16;
    this->var2.int var1 = v10;
    this->var2.var2.var0 = v17;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    long long v9 = v5[1];
    *(_OWORD *)int var1 = *v5;
    *((_OWORD *)var1 + 1) = v9;
    uint64_t v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)var1 + 32);
  }
  this->var2.int var1 = v10;
  this->var0.var0 |= 1uLL;
  uint64_t v56 = a2;
  uint64_t v22 = (_OWORD **)*((void *)a2 + 1);
  for (uint64_t i = (_OWORD **)*((void *)a2 + 2); v22 != i; ++v22)
  {
    uint64_t v24 = *v22;
    if (v10 >= v7->var0)
    {
      uint64_t v26 = (v10 - p_var2->var0) >> 5;
      if ((unint64_t)(v26 + 1) >> 59) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v7->var0 - p_var2->var0;
      uint64_t v28 = v27 >> 4;
      if (v27 >> 4 <= (unint64_t)(v26 + 1)) {
        uint64_t v28 = v26 + 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29) {
        uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&this->var2.var2, v29);
      }
      else {
        uint64_t v30 = 0;
      }
      BOOL v31 = &v30[32 * v26];
      long long v32 = v24[1];
      *(_OWORD *)BOOL v31 = *v24;
      *((_OWORD *)v31 + 1) = v32;
      uint64_t v34 = this->var2.var0;
      uint64_t v33 = this->var2.var1;
      uint64_t v35 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)v31;
      if (v33 != v34)
      {
        do
        {
          long long v36 = *((_OWORD *)v33 - 1);
          *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
          *((_OWORD *)v35 - 1) = v36;
          uint64_t v35 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v35 - 32);
          uint64_t v33 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v33 - 32);
        }
        while (v33 != v34);
        uint64_t v33 = p_var2->var0;
      }
      uint64_t v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v31 + 32);
      this->var2.var0 = v35;
      this->var2.int var1 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v31 + 32);
      this->var2.var2.var0 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)&v30[32 * v29];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      long long v25 = v24[1];
      *(_OWORD *)uint64_t v10 = *v24;
      *((_OWORD *)v10 + 1) = v25;
      uint64_t v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v10 + 32);
    }
    this->var2.int var1 = v10;
    this->var0.var0 += 1 << this->var0.var2;
  }
  uint64_t v37 = p_var2->var0;
  if ((unint64_t)(v10 - p_var2->var0) > 0x20)
  {
    uint64_t v38 = (unint64_t *)((char *)v37 + 32);
    unint64_t v39 = 126 - 2 * __clz((v10 - ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v37 + 32)) >> 5);
    if (v10 == ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)v38) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = v39;
    }
    std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *,false>(v38, (unint64_t)v10, v40, 1);
    uint64_t v10 = this->var2.var1;
  }
  uint64_t v42 = (int *)*((void *)v56 + 4);
  BOOL v41 = (int *)*((void *)v56 + 5);
  if (v42 != v41)
  {
    while (1)
    {
      int v43 = *v42;
      long long v57 = *(_OWORD *)(v42 + 1);
      long long v58 = *(_OWORD *)(v42 + 5);
      if (v10 >= v7->var0)
      {
        uint64_t v45 = (v10 - p_var2->var0) >> 5;
        if ((unint64_t)(v45 + 1) >> 59) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v46 = v7->var0 - p_var2->var0;
        uint64_t v47 = v46 >> 4;
        if (v46 >> 4 <= (unint64_t)(v45 + 1)) {
          uint64_t v47 = v45 + 1;
        }
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v48 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48) {
          uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&this->var2.var2, v48);
        }
        else {
          uint64_t v49 = 0;
        }
        int v50 = &v49[32 * v45];
        *(_OWORD *)int v50 = v57;
        *((_OWORD *)v50 + 1) = v58;
        unsigned int v52 = this->var2.var0;
        uint64_t v51 = this->var2.var1;
        uint64_t v53 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)v50;
        if (v51 != v52)
        {
          do
          {
            long long v54 = *((_OWORD *)v51 - 1);
            *((_OWORD *)v53 - 2) = *((_OWORD *)v51 - 2);
            *((_OWORD *)v53 - 1) = v54;
            uint64_t v53 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v53 - 32);
            uint64_t v51 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v51 - 32);
          }
          while (v51 != v52);
          uint64_t v51 = p_var2->var0;
        }
        uint64_t v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v50 + 32);
        this->var2.var0 = v53;
        this->var2.int var1 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)(v50 + 32);
        this->var2.var2.var0 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)&v49[32 * v48];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        long long v44 = *(_OWORD *)(v42 + 5);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)(v42 + 1);
        *((_OWORD *)v10 + 1) = v44;
        uint64_t v10 = ($8EF4127CF77ECA3DDB612FCF233DC3A8 *)((char *)v10 + 32);
      }
      this->var2.int var1 = v10;
      if (v43 == 1026)
      {
        uint64_t v55 = 2;
        goto LABEL_63;
      }
      if (v43 == 1027) {
        break;
      }
      if (v43 == 1032)
      {
        uint64_t v55 = 8;
LABEL_63:
        this->var0.var0 |= v55;
      }
      v42 += 9;
      if (v42 == v41) {
        goto LABEL_65;
      }
    }
    uint64_t v55 = 4;
    goto LABEL_63;
  }
LABEL_65:
  CC_SHA256(this->var2.var0, (v10 - (unint64_t)this->var2.var0) & 0xFFFFFFE0, this->var1.var0);
}

void sub_18273A9D4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_18273AD68(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *MTLLibraryContainer::functionWithName(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 160))(*(void *)(a1 + 48));
  if (v4)
  {
    [*(id *)(a1 + 56) setObject:v4 forKey:a2];
  }
  return v4;
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newFunction(MTLLibraryDataWithArchive *a1, void *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v30, (char *)[a2 UTF8String]);
  id v6 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((void *)a1 + 35, (unsigned __int8 *)&v30);
  uint64_t v7 = v6;
  if ((SHIBYTE(v30.publicArgumentsOffset) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_3;
    }
    return 0;
  }
  operator delete((void *)v30.bitCodeOffset);
  if (!v7) {
    return 0;
  }
LABEL_3:
  unint64_t v8 = *((void *)v7 + 5);
  v30.functionInputs = 0;
  v30.airScript = 0;
  uint64_t v29 = 0;
  long long v27 = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  *(_OWORD *)long long v25 = 0u;
  *(_OWORD *)uint64_t v26 = 0u;
  if (MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v8, &v30, (MTLLibraryDataWithArchive::AdditionalFunctionData *)&v24))
  {
    if (*((void *)a1 + 48))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[a2 UTF8String]);
      long long v9 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((void *)a1 + 45, (unsigned __int8 *)__p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v9)
      {
        v30.airScript = (OS_dispatch_data *)*((void *)v9 + 5);
        std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::erase((void *)a1 + 45, (uint64_t *)v9);
      }
    }
    if (SHIBYTE(v26[0]) < 0)
    {
      if (v25[1]) {
        goto LABEL_11;
      }
    }
    else if (HIBYTE(v26[0]))
    {
LABEL_11:
      id v10 = [NSString alloc];
      if (SHIBYTE(v26[0]) >= 0) {
        uint64_t v11 = v25;
      }
      else {
        uint64_t v11 = (void **)v25[0];
      }
      uint64_t v12 = [v10 initWithUTF8String:v11];
      goto LABEL_20;
    }
    uint64_t v12 = [[NSString alloc] initWithString:a2];
LABEL_20:
    unint64_t v14 = (void *)v12;
    int v15 = [_MTLFunctionInternal alloc];
    BOOL v16 = [(_MTLFunctionInternal *)v15 initWithName:v14 type:v24 libraryData:a1 functionData:&v30 device:a3];
    uint64_t v13 = v16;
    if (*((void *)a1 + 53))
    {
      uint64_t v17 = (std::__shared_weak_count *)*((void *)a1 + 54);
      uint64_t v20 = *((void *)a1 + 53);
      long long v21 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [(_MTLFunctionInternal *)v16 setTrackingData:&v20];
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }

    if (*((void *)a1 + 66))
    {
      if (v13)
      {
        uint64_t v18 = [(_MTLFunctionInternal *)v13 sourceArchiveOffset];
        if (v18 != -1) {
          [(_MTLFunctionInternal *)v13 setSourceArchiveOffset:*((void *)a1 + 65) + v18];
        }
      }
    }
    goto LABEL_29;
  }
  uint64_t v13 = 0;
LABEL_29:
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[1]);
  }
  if (SHIBYTE(v26[0]) < 0) {
    operator delete(v25[0]);
  }
  return v13;
}

void sub_18273B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)&a17);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryData::retain(MTLLibraryData *this)
{
  return MTLAtomicIncrement((atomic_uint *)this + 20);
}

BOOL MTLLibraryDataWithArchive::getFunctionAtOffset(MTLLibraryDataWithArchive *this, unint64_t a2, MTLFunctionData *a3, MTLLibraryDataWithArchive::AdditionalFunctionData *a4)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  (*(void (**)(MTLLibraryDataWithArchive *))(*(void *)this + 312))(this);
  uint64_t v7 = (void **)((char *)a4 + 8);
  MEMORY[0x18530BF30]((char *)a4 + 8, "");
  *(void *)a4 = 0xFFFFFFFFLL;
  int v67 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(void *)this + 320))(this, &v67, 4) != 4)
  {
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    MTLLibraryDataWithArchive::parseDynamicHeaderSection(result, v10, v11, v12, v13, v14, v15, v16);
    return 0;
  }
  *(_OWORD *)&a3->baseFunctionHash.key[8] = 0u;
  *(_OWORD *)&a3->baseFunctionHash.key[24] = 0u;
  *(_OWORD *)&a3->pluginData = 0u;
  *(_OWORD *)&a3->functionInputs = 0u;
  *(_OWORD *)&a3->bitcodeHash.key[8] = 0u;
  *(_OWORD *)&a3->bitcodeHash.key[24] = 0u;
  *(_OWORD *)&a3->airMajorVersion = 0u;
  *(_OWORD *)&a3->bitCodeOffset = 0u;
  *(_OWORD *)&a3->publicArgumentsOffset = 0u;
  *(_OWORD *)&a3->sourceArchiveOffset = 0u;
  p_sourceArchiveOffset = &a3->sourceArchiveOffset;
  a3->sourceArchiveOffset = -1;
  a3->reflectionDataOffset = -1;
  if (*((_DWORD *)this + 156))
  {
    char v8 = 0;
LABEL_8:
    *((unsigned char *)a3 + 105) = v8 | 0xFC;
    goto LABEL_9;
  }
  if (dyld_program_sdk_at_least())
  {
    char v8 = *((unsigned char *)a3 + 105);
    goto LABEL_8;
  }
LABEL_9:
  int v60 = 0;
  int v17 = 0;
  signed int v66 = 0;
  p_bitcodeHash = &a3->bitcodeHash;
  p_bitCodeFileSize = &a3->bitCodeFileSize;
  uint64_t v53 = (char *)a4 + 56;
  p_baseFunctionHash = &a3->baseFunctionHash;
  long long v58 = (void **)((char *)a4 + 32);
  size_t v59 = 0;
  do
  {
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, signed int *, uint64_t))(*(void *)this + 320))(this, &v66, 4) != 4)
    {
      BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      goto LABEL_104;
    }
    signed int v18 = v66;
    unsigned int v19 = bswap32(v66);
    signed int v66 = v19;
    LOWORD(v61) = 0;
    if (v18 == 1413762629) {
      continue;
    }
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, NSError **, uint64_t))(*(void *)this + 320))(this, &v61, 2) != 2)
    {
      BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (!result) {
        return 0;
      }
      goto LABEL_104;
    }
    if (v66 <= 1380338771)
    {
      if (v66 > 1296323417)
      {
        if (v66 != 1296323418)
        {
          if (v66 != 1312902469)
          {
            if (v66 != 1330005588) {
              goto LABEL_67;
            }
            if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(void *)this + 320))(this, v64, 24) != 24)
            {
              BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
              if (!result) {
                return 0;
              }
              goto LABEL_104;
            }
            *(_OWORD *)&a3->publicArgumentsOffset = *(_OWORD *)v64;
            a3->bitCodeOffset = v65;
            v17 |= 8u;
            goto LABEL_68;
          }
          uint64_t v33 = (unsigned __int16)v61;
          MEMORY[0x1F4188790](2);
          uint64_t v35 = (char *)&v52 - v34;
          if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(void *)this + 320))(this, (char *)&v52 - v34, v33) != v33)
          {
            BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
            if (!result) {
              return 0;
            }
            goto LABEL_104;
          }
          std::string::basic_string[abi:ne180100]<0>(v64, v35);
LABEL_59:
          if (*((char *)a4 + 31) < 0) {
            operator delete(*v7);
          }
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v64;
          *((void *)a4 + 3) = v65;
          v17 |= 1u;
          goto LABEL_68;
        }
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unint64_t *, uint64_t))(*(void *)this
                                                                                                 + 320))(this, p_bitCodeFileSize, 8) == 8)goto LABEL_68;
        BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (!result) {
          return 0;
        }
      }
      else
      {
        if (v66 > 1212240711)
        {
          if (v66 == 1212240712)
          {
            if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, $CE7EE795C0049C9826BBCCC84D46E58D *, uint64_t))(*(void *)this + 320))(this, p_bitcodeHash, 32) != 32)
            {
              BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
              if (!result) {
                return 0;
              }
              goto LABEL_104;
            }
            v17 |= 4u;
          }
          else
          {
            if (v66 != 1279351122) {
              goto LABEL_67;
            }
            LOBYTE(v64[0]) = 0;
            if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(void *)this + 320))(this, v64, 1) != 1)
            {
              BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
              if (!result) {
                return 0;
              }
              goto LABEL_104;
            }
            a3->renderTargetArrayIndexType = v64[0];
          }
          goto LABEL_68;
        }
        if (v66 == 1095518547)
        {
          uint64_t v25 = (unsigned __int16)v61;
          MEMORY[0x1F4188790](2);
          long long v27 = (char *)&v52 - v26;
          if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(void *)this + 320))(this, (char *)&v52 - v26, v25) != v25)
          {
            BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
            if (!result) {
              return 0;
            }
            goto LABEL_104;
          }
          std::string::basic_string[abi:ne180100]<0>(v64, v27);
          if (*((char *)a4 + 55) < 0) {
            operator delete(*v58);
          }
          uint64_t v28 = v58;
          *(_OWORD *)long long v58 = *(_OWORD *)v64;
          _OWORD v28[2] = (void *)v65;
          size_t v29 = strlen(v27);
          std::string::basic_string[abi:ne180100]<0>(v64, &v27[v29 + 1]);
          goto LABEL_59;
        }
        if (v66 == 1162757204) {
          break;
        }
LABEL_67:
        uint64_t v36 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 336))(this);
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)this + 312))(this, v36 + (unsigned __int16)v61))goto LABEL_68; {
        BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        }
        if (!result) {
          return 0;
        }
      }
LABEL_104:
      MTLLibraryDataWithArchive::parseDynamicHeaderSection(result, v45, v46, v47, v48, v49, v50, v51);
      return 0;
    }
    if (v66 <= 1398031176)
    {
      if (v66 == 1380338772)
      {
        v64[0] = 0;
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(void *)this + 320))(this, v64, 8) != 8)
        {
          BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
          if (!result) {
            return 0;
          }
          goto LABEL_104;
        }
        a3->reflectionDataOffset = (unint64_t)v64[0];
        goto LABEL_68;
      }
      if (v66 == 1397704262)
      {
        v64[0] = 0;
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(void *)this + 320))(this, v64, 8) != 8)
        {
          BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
          if (!result) {
            return 0;
          }
          goto LABEL_104;
        }
        unint64_t *p_sourceArchiveOffset = (unint64_t)v64[0];
        goto LABEL_68;
      }
      if (v66 != 1397769033) {
        goto LABEL_67;
      }
      uint64_t v20 = (char *)malloc_type_malloc((unsigned __int16)v61, 0x190F03C4uLL);
      size_t v21 = (*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, void))(*(void *)this + 320))(this, v20, (unsigned __int16)v61);
      if (v21 != (unsigned __int16)v61)
      {
        BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (!result) {
          return 0;
        }
        goto LABEL_104;
      }
      size_t v22 = strnlen(v20, v21);
      long long v23 = *(_OWORD *)&v20[v22 + 17];
      uint64_t v24 = p_baseFunctionHash;
      *(_OWORD *)p_baseFunctionHash->key = *(_OWORD *)&v20[v22 + 1];
      *(_OWORD *)&v24->key[16] = v23;
      size_t v59 = *(char **)&v20[v22 + 33];
      free(v20);
      goto LABEL_48;
    }
    if (v66 <= 1415139396)
    {
      if (v66 != 1398031177)
      {
        if (v66 != 1413829459) {
          goto LABEL_67;
        }
        LOBYTE(v64[0]) = 0;
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(void *)this + 320))(this, v64, 1) != 1)
        {
          BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
          if (!result) {
            return 0;
          }
          goto LABEL_104;
        }
        *((unsigned char *)a3 + 105) = v64[0];
        goto LABEL_68;
      }
      MTLFunctionData v30 = (char *)malloc_type_malloc((unsigned __int16)v61, 0x7B5C10D3uLL);
      uint64_t v31 = (*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, void))(*(void *)this + 320))(this, v30, (unsigned __int16)v61);
      if (v31 != (unsigned __int16)v61)
      {
        BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
        if (!result) {
          return 0;
        }
        goto LABEL_104;
      }
      MTLLibraryDataWithArchive::decodeSTCIToken(v30, (unsigned __int16)v61, (uint64_t)v64);
      long long v32 = v64[1];
      size_t v59 = v64[0];
      std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(v53, v64[1], v65, (uint64_t)(v65 - (unint64_t)v64[1]) >> 5);
      free(v30);
      if (v32) {
        operator delete(v32);
      }
LABEL_48:
      int v60 = 1;
      goto LABEL_68;
    }
    if (v66 == 1415139397)
    {
      LOBYTE(v64[0]) = 0;
      if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(void *)this + 320))(this, v64, 1) == 1)
      {
        if (LOBYTE(v64[0]) <= 8u && ((0x1F7u >> SLOBYTE(v64[0])) & 1) != 0)
        {
          *(void *)a4 = qword_1828F1458[SLOBYTE(v64[0])];
          v17 |= 2u;
        }
        goto LABEL_68;
      }
      BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (result) {
        goto LABEL_104;
      }
      return 0;
    }
    if (v66 != 1447383635) {
      goto LABEL_67;
    }
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t *, uint64_t))(*(void *)this + 320))(this, &v63, 8) != 8)
    {
      BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
      if (!result) {
        return 0;
      }
      goto LABEL_104;
    }
    *(void *)&a3->airMajorVersion = v63;
LABEL_68:
    unsigned int v19 = v66;
  }
  while (v19 != 1162757204);
  if ((v17 & 0xF) == 0)
  {
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    MTLLibraryDataWithArchive::getFunctionAtOffset(result, v38, v39, v40, v41, v42, v43, v44);
    return 0;
  }
  a3->airScript = 0;
  if (v60)
  {
    (*(void (**)(MTLLibraryDataWithArchive *, char *))(*(void *)this + 312))(this, &v59[*((void *)this + 75)]);
    v64[0] = 0;
    unsigned int v62 = 0;
    uint64_t v61 = 0;
    if (MTLLibraryDataWithArchive::extractScript(this, v64, &v62, &v61))
    {
      a3->airScript = (OS_dispatch_data *)dispatch_data_create(v64[0], v62, 0, 0);
      free(v64[0]);
    }
  }
  unint64_t privateArgumentsOffset = a3->privateArgumentsOffset;
  a3->publicArgumentsOffset += *((void *)this + 24);
  a3->unint64_t privateArgumentsOffset = privateArgumentsOffset + *((void *)this + 26);
  a3->bitCodeOffset += *((void *)this + 28);
  return 1;
}

void sub_18273BFE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::PipelineScript::pipeline_as_compute(Air::PipelineScript *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((unsigned char *)this + v1[4]) == 2) : (v3 = 0), v3 && (uint64_t v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::PipelineScript::pipeline_as_render(Air::PipelineScript *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((unsigned char *)this + v1[4]) == 1) : (v3 = 0), v3 && (uint64_t v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t MTLLibraryDataWithArchive::serializeSpecFunctionScript(MTLLibraryDataWithArchive *a1, void *a2, NSError **a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  signed int v66 = 0;
  unsigned int v65 = 0;
  uint64_t v5 = 0;
  if (MTLLibraryDataWithArchive::extractScript(a1, &v66, &v65, a3))
  {
    id v6 = v66;
    uint64_t v7 = &v66[*(unsigned int *)v66];
    char v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 < 9u || (uint64_t v9 = *((unsigned __int16 *)v8 + 4)) == 0)
    {
      if (!a3)
      {
        uint64_t v5 = 0;
LABEL_95:
        free(v6);
        return v5;
      }
      uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid script file, constant specialization script missing or invalid", *MEMORY[0x1E4F28568] forKey];
      uint64_t v15 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v14];
      uint64_t v5 = 0;
      *a3 = v15;
LABEL_94:
      id v6 = v66;
      goto LABEL_95;
    }
    uint64_t v10 = &v7[v9 + *(unsigned int *)&v7[v9]];
    uint64_t v11 = &v10[-*(int *)v10];
    long long v58 = (int *)v10;
    if (*(unsigned __int16 *)v11 > 8u && (uint64_t v12 = *((unsigned __int16 *)v11 + 4)) != 0) {
      uint64_t v13 = &v10[v12 + *(unsigned int *)&v10[v12]];
    }
    else {
      uint64_t v13 = 0;
    }
    size_t v59 = a2;
    int v16 = *(_DWORD *)v13;
    size_t v17 = (20 * *(_DWORD *)v13) + 4;
    signed int v18 = malloc_type_malloc(v17, 0xFA8FEB0CuLL);
    *signed int v18 = v16;
    if (*(_DWORD *)v13)
    {
      unint64_t v19 = 0;
      unint64_t v20 = 4;
      while (1)
      {
        size_t v21 = &v13[4 * v19 + 4 + *(unsigned int *)&v13[4 * v19 + 4]];
        size_t v22 = &v21[-*(int *)v21];
        if (*(unsigned __int16 *)v22 >= 5u && (uint64_t v23 = *((unsigned __int16 *)v22 + 2)) != 0)
        {
          unsigned int v24 = *(unsigned __int16 *)&v21[v23];
          unsigned int v25 = v24 >> 8;
        }
        else
        {
          LOBYTE(v24) = 0;
          LOBYTE(v25) = 0;
        }
        if (v20 >= 0xFFFFFFFFFFFFFFFELL) {
          abort();
        }
        size_t v26 = v20 + 2;
        if (v17 < v20 + 2)
        {
          if (!v17) {
            size_t v17 = 128;
          }
          while (v17 < v26)
          {
            if (v17 >> 1 >= ~v17) {
              size_t v17 = v20 + 2;
            }
            else {
              v17 += v17 >> 1;
            }
          }
          signed int v18 = malloc_type_realloc(v18, v17, 0x227314A4uLL);
          if (!v18) {
            abort();
          }
        }
        long long v27 = (char *)v18 + v20;
        *long long v27 = v24;
        v27[1] = v25;
        uint64_t v28 = &v21[-*(int *)v21];
        if (*(unsigned __int16 *)v28 >= 7u && (uint64_t v29 = *((unsigned __int16 *)v28 + 3)) != 0) {
          char v30 = v21[v29];
        }
        else {
          char v30 = 0;
        }
        if (v20 == -3) {
          abort();
        }
        uint64_t v31 = v20 + 3;
        if (v17 <= v26)
        {
          if (!v17) {
            size_t v17 = 128;
          }
          while (v17 <= v26)
          {
            if (v17 >> 1 >= ~v17) {
              size_t v17 = v20 + 3;
            }
            else {
              v17 += v17 >> 1;
            }
          }
          signed int v18 = malloc_type_realloc(v18, v17, 0x227314A4uLL);
          if (!v18) {
            abort();
          }
        }
        *((unsigned char *)v18 + v26) = v30;
        long long v32 = &v21[-*(int *)v21];
        unsigned int v33 = *(unsigned __int16 *)v32;
        if (v33 >= 9) {
          break;
        }
        if (v33 >= 7) {
          goto LABEL_43;
        }
LABEL_63:
        ++v19;
        unint64_t v20 = v31;
        if (v19 >= *(unsigned int *)v13) {
          goto LABEL_66;
        }
      }
      if (*((_WORD *)v32 + 4)) {
        uint64_t v34 = &v21[*((unsigned __int16 *)v32 + 4) + *(unsigned int *)&v21[*((unsigned __int16 *)v32 + 4)]];
      }
      else {
LABEL_43:
      }
        uint64_t v34 = 0;
      uint64_t v35 = *((unsigned __int16 *)v32 + 3);
      if (v35)
      {
        int v36 = v21[v35] - 3;
        size_t v37 = 4;
        switch(v36)
        {
          case 0:
          case 14:
          case 26:
          case 30:
          case 35:
          case 39:
          case 45:
          case 49:
          case 53:
            goto LABEL_55;
          case 1:
          case 16:
          case 27:
          case 31:
          case 37:
          case 41:
          case 78:
          case 82:
            size_t v37 = 8;
            goto LABEL_55;
          case 2:
          case 28:
          case 32:
            size_t v37 = 12;
            goto LABEL_55;
          case 3:
          case 29:
          case 33:
          case 79:
          case 83:
            size_t v37 = 16;
            goto LABEL_55;
          case 13:
          case 34:
          case 38:
          case 43:
          case 47:
          case 51:
            size_t v37 = 2;
            goto LABEL_55;
          case 15:
          case 36:
          case 40:
            size_t v37 = 6;
            goto LABEL_55;
          case 42:
          case 46:
          case 50:
            size_t v37 = 1;
            goto LABEL_55;
          case 44:
          case 48:
          case 52:
            size_t v37 = 3;
            goto LABEL_55;
          case 80:
          case 84:
            size_t v37 = 24;
            goto LABEL_55;
          case 81:
          case 85:
            size_t v37 = 32;
LABEL_55:
            if (-4 - v20 < v37) {
              abort();
            }
            if (v17 < v37 + v31)
            {
              do
              {
                if (v17 >> 1 >= ~v17) {
                  size_t v17 = v37 + v31;
                }
                else {
                  v17 += v17 >> 1;
                }
              }
              while (v17 < v37 + v31);
              signed int v18 = malloc_type_realloc(v18, v17, 0x227314A4uLL);
              if (!v18) {
                abort();
              }
            }
            memcpy((char *)v18 + v31, v34, v37);
            v31 += v37;
            break;
          default:
            goto LABEL_63;
        }
      }
      goto LABEL_63;
    }
    uint64_t v31 = 4;
LABEL_66:
    *size_t v59 = v18;
    v59[1] = v31;
    uint64_t v38 = (unsigned __int16 *)((char *)v58 - *v58);
    if (*v38 < 7u) {
      goto LABEL_93;
    }
    uint64_t v39 = v38[3];
    if (!v38[3]) {
      goto LABEL_93;
    }
    uint64_t v40 = (char *)v58 + v39;
    uint64_t v41 = *(unsigned int *)((char *)v58 + v39);
    std::string::basic_string[abi:ne180100](&__s1, (char *)v58 + v38[2] + *(unsigned int *)((char *)v58 + v38[2]) + 4, *(unsigned int *)((char *)v58 + v38[2] + *(unsigned int *)((char *)v58 + v38[2])));
    uint64_t v42 = &v40[v41];
    unsigned int v44 = *(_DWORD *)v42;
    uint64_t v43 = v42 + 4;
    std::string::basic_string[abi:ne180100](__p, v43, v44);
    unsigned __int8 v45 = v64;
    if ((v64 & 0x80u) == 0) {
      size_t v46 = v64;
    }
    else {
      size_t v46 = __n;
    }
    unint64_t v47 = v61;
    int v48 = (char)v61;
    if ((v61 & 0x80u) != 0) {
      unint64_t v47 = (unint64_t)__p[1];
    }
    if (v46 == v47)
    {
      if ((v61 & 0x80u) == 0) {
        uint64_t v49 = __p;
      }
      else {
        uint64_t v49 = (void **)__p[0];
      }
      if ((char)v64 < 0)
      {
        BOOL v55 = memcmp(__s1, v49, __n) != 0;
      }
      else if (v64)
      {
        uint64_t v50 = v64 - 1;
        p_s1 = &__s1;
        do
        {
          int v53 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v52 = v53;
          int v54 = *(unsigned __int8 *)v49;
          uint64_t v49 = (void **)((char *)v49 + 1);
          BOOL v55 = v52 != v54;
        }
        while (v52 == v54 && v50-- != 0);
      }
      else
      {
        BOOL v55 = 0;
      }
    }
    else
    {
      BOOL v55 = 1;
    }
    if (v48 < 0)
    {
      operator delete(__p[0]);
      if ((v64 & 0x80) == 0)
      {
LABEL_91:
        if (v55) {
LABEL_92:
        }
          v59[2] = strdup((const char *)v43);
LABEL_93:
        uint64_t v5 = 1;
        goto LABEL_94;
      }
    }
    else if ((v45 & 0x80) == 0)
    {
      goto LABEL_91;
    }
    operator delete(__s1);
    if (!v55) {
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  return v5;
}

void sub_18273C5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  free(0);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::extractScript(MTLLibraryDataWithArchive *this, char **a2, unsigned int *a3, NSError **a4)
{
  int v11 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(void *)this + 320))(this, &v11, 4) == 4)return MTLLibraryDataWithArchive::extractFlatbuffer(this, a2, a3, a4); {
  if (!a4)
  }
    return 0;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid metallib file, unexpected end of file while parsing scripts", *MEMORY[0x1E4F28568] forKey];
  uint64_t v10 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v9];
  uint64_t result = 0;
  *a4 = v10;
  return result;
}

uint64_t MTLLibraryDataWithArchive::extractFlatbuffer(MTLLibraryDataWithArchive *this, char **a2, unsigned int *a3, NSError **a4)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v25 = 0;
  while (1)
  {
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(void *)this + 320))(this, (char *)&v25 + 4, 4) != 4)
    {
LABEL_19:
      if (a4)
      {
        unint64_t v19 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v20 = *MEMORY[0x1E4F28568];
        size_t v21 = @"Invalid library file/data (unexpected end of file)";
LABEL_21:
        uint64_t v22 = [v19 dictionaryWithObject:v21 forKey:v20];
        uint64_t v23 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v22];
        uint64_t result = 0;
        *a4 = v23;
        return result;
      }
      return 0;
    }
    int v8 = HIDWORD(v25);
    unsigned int v9 = bswap32(HIDWORD(v25));
    HIDWORD(v25) = v9;
    if (v8 != 1413762629) {
      break;
    }
LABEL_17:
    if (v9 == 1162757204) {
      return 1;
    }
  }
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t *, uint64_t))(*(void *)this + 320))(this, &v25, 4) != 4)goto LABEL_19; {
  if (HIDWORD(v25) != 1380078918 && HIDWORD(v25) != 1396856134)
  }
  {
    if (HIDWORD(v25) == 1162757204) {
      return 1;
    }
    uint64_t v10 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 336))(this);
    if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(void *)this + 312))(this, v10 + v25) & 1) == 0)
    {
      if (a4)
      {
        unint64_t v19 = (void *)MEMORY[0x1E4F1C9E8];
        uint64_t v20 = *MEMORY[0x1E4F28568];
        size_t v21 = @"Invalid library file (unexpected end of file)";
        goto LABEL_21;
      }
      return 0;
    }
    goto LABEL_16;
  }
  unint64_t v11 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)this + 336))(this);
  uint64_t result = 0;
  unint64_t v13 = v11 + 15;
  uint64_t v14 = v11 >= 0xFFFFFFFFFFFFFFF1;
  uint64_t v15 = v14 << 63 >> 63;
  if (v15 != v14 || v15 < 0) {
    return result;
  }
  unint64_t v16 = v13 & 0xFFFFFFFFFFFFFFF0;
  unint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF0) - v11;
  if (v17 > v25) {
    return 0;
  }
  size_t v18 = (v25 - v17);
  if (malloc_type_posix_memalign((void **)a2, 0x10uLL, v18, 0xEF4C5D4BuLL)) {
    return 0;
  }
  (*(void (**)(MTLLibraryDataWithArchive *, unint64_t))(*(void *)this + 312))(this, v16);
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, void, size_t))(*(void *)this + 320))(this, *a2, v18) == v18)
  {
    *a3 = v18;
LABEL_16:
    unsigned int v9 = HIDWORD(v25);
    goto LABEL_17;
  }
  if (a4)
  {
    uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"Invalid library file/data (unexpected end of file)" forKey:*MEMORY[0x1E4F28568]];
    *a4 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v24];
  }
  free(*a2);
  uint64_t result = 0;
  *a2 = 0;
  return result;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    id v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *unsigned int __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    id v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

unsigned __int8 *getFragmentHash(int *a1)
{
  char v2 = 1;
  BOOL v3 = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  md = v3;
  if (*v4 < 0x17u)
  {
    size_t v7 = 0;
LABEL_12:
    unsigned __int16 v10 = 0;
    goto LABEL_14;
  }
  uint64_t v5 = v4[11];
  if (!v4[11])
  {
    size_t v7 = 0;
    unsigned __int16 v10 = 0;
    char v2 = 1;
    goto LABEL_14;
  }
  uint64_t v6 = *(unsigned int *)((char *)a1 + v5);
  size_t v7 = (int *)((char *)a1 + v5 + v6);
  uint64_t v8 = *v7;
  if (!v8)
  {
    char v2 = 0;
    goto LABEL_12;
  }
  unint64_t v9 = 0;
  unsigned __int16 v10 = 0;
  uint64_t v11 = 4 * v8;
  uint64_t v12 = (char *)a1 + v5 + v6;
  do
  {
    uint64_t v13 = *(unsigned int *)&v12[v9 + 4];
    uint64_t v14 = &v12[v9 + v13 - *(int *)((char *)&v7[v9 / 4 + 1] + v13)];
    if (*((unsigned __int16 *)v14 + 2) >= 5u)
    {
      uint64_t v15 = *((unsigned __int16 *)v14 + 4);
      if (v15)
      {
        if (*(_WORD *)&v12[v9 + 4 + v13 + v15]) {
          ++v10;
        }
      }
    }
    v9 += 4;
  }
  while (v11 != v9);
  char v2 = 0;
LABEL_14:
  size_t v16 = 2 * v10 + 8;
  unint64_t v17 = malloc_type_malloc(v16, 0x9CEBF689uLL);
  bzero(v17, v16);
  *unint64_t v17 = v10;
  size_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0x1Bu)
  {
    LOWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[13];
    if (v18[13]) {
      LOWORD(v19) = *(_WORD *)((char *)a1 + v19);
    }
  }
  v17[2] = v19;
  if (*v18 < 0x19u)
  {
    LOWORD(v20) = 0;
  }
  else
  {
    uint64_t v20 = v18[12];
    if (v20) {
      LOWORD(v20) = *(_WORD *)((char *)a1 + v20);
    }
  }
  v17[1] = v20;
  if ((v2 & 1) == 0 && *v7)
  {
    uint64_t v21 = 0;
    int v22 = 0;
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = v7[v21 + 1];
      uint64_t v25 = (char *)&v7[v21] + v24;
      size_t v26 = (char *)&v7[v21] + v24 - *((int *)v25 + 1);
      if (*((unsigned __int16 *)v26 + 2) >= 5u)
      {
        uint64_t v27 = *((unsigned __int16 *)v26 + 4);
        if (v27)
        {
          if (*(_WORD *)((char *)&v7[v21 + 1] + v24 + v27))
          {
            uint64_t v28 = &v17[v22];
            __int16 v30 = v28[4];
            uint64_t v29 = v28 + 4;
            *uint64_t v29 = v30 & 0xFFF0 | v23 & 0xF;
            uint64_t v31 = v24 - *((int *)v25 + 1);
            if (*(unsigned __int16 *)((char *)&v7[v21 + 1] + v31) >= 5u
              && (uint64_t v32 = *(unsigned __int16 *)((char *)&v7[v21 + 2] + v31)) != 0)
            {
              __int16 v33 = *(_WORD *)((char *)&v7[v21 + 1] + v24 + v32);
            }
            else
            {
              __int16 v33 = 0;
            }
            *uint64_t v29 = v23 & 0xF | (16 * v33);
            uint64_t v34 = v7[v21 + 1];
            uint64_t v35 = (char *)&v7[v21] + v34 - *(int *)((char *)&v7[v21 + 1] + v34);
            if (*((unsigned __int16 *)v35 + 2) >= 9u)
            {
              uint64_t v36 = *((unsigned __int16 *)v35 + 6);
              if (v36)
              {
                if (*((unsigned char *)&v7[v21 + 1] + v34 + v36))
                {
                  uint64_t v37 = v24 - *((int *)v25 + 1);
                  unsigned int v38 = *(unsigned __int16 *)((char *)&v7[v21 + 1] + v37);
                  if (v38 >= 0x15 && *(_WORD *)((char *)&v7[v21 + 6] + v37)) {
                    unsigned int v39 = *((unsigned __int8 *)&v7[v21 + 1] + v24 + *(unsigned __int16 *)((char *)&v7[v21 + 6] + v37));
                  }
                  else {
                    unsigned int v39 = 1;
                  }
                  if (blendFactorSource(v39) == 2
                    || (v38 < 0x13 || !*(_WORD *)((char *)&v7[v21 + 5] + v37 + 2)
                      ? (unsigned int v40 = 1)
                      : (unsigned int v40 = *((unsigned __int8 *)&v7[v21 + 1]
                               + v24
                               + *(unsigned __int16 *)((char *)&v7[v21 + 5] + v37 + 2))),
                        blendFactorSource(v40) == 2
                     || (v38 < 0x11 || !*(_WORD *)((char *)&v7[v21 + 5] + v37)
                       ? (unsigned int v41 = 0)
                       : (unsigned int v41 = *((unsigned __int8 *)&v7[v21 + 1]
                                + v24
                                + *(unsigned __int16 *)((char *)&v7[v21 + 5] + v37))),
                         blendFactorSource(v41) == 2
                      || (v38 < 0xF || !*(_WORD *)((char *)&v7[v21 + 4] + v37 + 2)
                        ? (unsigned int v42 = 0)
                        : (unsigned int v42 = *((unsigned __int8 *)&v7[v21 + 1]
                                 + v24
                                 + *(unsigned __int16 *)((char *)&v7[v21 + 4] + v37 + 2))),
                          blendFactorSource(v42) == 2))))
                  {
                    int v43 = (unsigned __int16)v17[3];
                    int v44 = v43 | (1 << v23 << 8);
                    v17[3] = v43 | ((unsigned __int16)(1 << v23) << 8);
                  }
                  else
                  {
                    LOWORD(v44) = v17[3];
                  }
                  if ((unsigned __int16)v44 >= 0x100u)
                  {
                    uint64_t v45 = v24 - *((int *)v25 + 1);
                    size_t v46 = (char *)&v7[v21] + v45;
                    unsigned int v47 = *((unsigned __int16 *)v46 + 2);
                    if (v47 >= 0x15 && (uint64_t v48 = *((unsigned __int16 *)v46 + 12)) != 0) {
                      unsigned int v49 = *((unsigned __int8 *)&v7[v21 + 1] + v24 + v48);
                    }
                    else {
                      unsigned int v49 = 1;
                    }
                    if (blendFactorSource(v49) == 2
                      || (v47 < 0x13 || !*(_WORD *)((char *)&v7[v21 + 5] + v45 + 2)
                        ? (unsigned int v50 = 1)
                        : (unsigned int v50 = *((unsigned __int8 *)&v7[v21 + 1]
                                 + v24
                                 + *(unsigned __int16 *)((char *)&v7[v21 + 5] + v45 + 2))),
                          blendFactorSource(v50) == 2
                       || (v47 < 0x11 || !*(_WORD *)((char *)&v7[v21 + 5] + v45)
                         ? (unsigned int v51 = 0)
                         : (unsigned int v51 = *((unsigned __int8 *)&v7[v21 + 1]
                                  + v24
                                  + *(unsigned __int16 *)((char *)&v7[v21 + 5] + v45))),
                           blendFactorSource(v51) == 2
                        || (v47 < 0xF || !*(_WORD *)((char *)&v7[v21 + 4] + v45 + 2)
                          ? (unsigned int v52 = 0)
                          : (unsigned int v52 = *((unsigned __int8 *)&v7[v21 + 1]
                                   + v24
                                   + *(unsigned __int16 *)((char *)&v7[v21 + 4] + v45 + 2))),
                            blendFactorSource(v52) == 2))))
                    {
                      v17[3] = v44 | (1 << v23);
                    }
                  }
                }
              }
            }
            ++v22;
          }
        }
      }
      ++v23;
      ++v21;
    }
    while (v23 < *v7);
  }
  CC_SHA256(v17, v16, md);
  free(v17);
  return md;
}

dispatch_data_t createSerializedFragmentData<MTLRenderPipelineDescriptorPrivate>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)(*(void *)a3 + 8 + v5);
    if (v7 && *(void *)(v7 + 8) >> 36) {
      ++v6;
    }
    v5 += 8;
  }
  while (v5 != 64);
  uint64_t v8 = *(void **)(a3 + 496);
  if (v8
    && ([v8 functions] && objc_msgSend((id)objc_msgSend(*(id *)(a3 + 496), "functions"), "count")
     || [*(id *)(a3 + 496) privateFunctions]
     && objc_msgSend((id)objc_msgSend(*(id *)(a3 + 496), "privateFunctions"), "count")))
  {
    int v9 = 1;
    uint64_t v10 = 24;
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = 16;
  }
  uint64_t v11 = v10 + 2 * v6;
  uint64_t v12 = MTLSerializePluginDataDictionary(objc_msgSend((id)objc_msgSend(*(id *)(a3 + 264), "device"), "pluginData"), 0);
  uint64_t v13 = MTLSerializePluginDataDictionary(*(void **)(a3 + 464), 0);
  uint64_t v39 = v12 + v11;
  uint64_t v40 = v11;
  uint64_t v41 = v12;
  uint64_t v42 = v13;
  if (v9) {
    _MTLPopulateLinkedFunctionExtraData(*(const MTLLinkedFunctions **)(a3 + 496));
  }
  size_t size = v13 + v12 + v11;
  uint64_t v21 = malloc_type_malloc(size, 0xA19C7A3DuLL);
  uint64_t v22 = 0;
  int v23 = 0;
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  *((_DWORD *)v21 + 2) = (a2 << 6) & 0x40000000 | v6 | (((*(_DWORD *)(a3 + 224) >> 7) & 1) << 29);
  do
  {
    uint64_t v24 = *(void *)(*(void *)a3 + 8 + 8 * v22);
    if (v24)
    {
      unint64_t v25 = *(void *)(v24 + 8);
      if (v25 >> 36)
      {
        *((_WORD *)v21 + v23++ + 8) = WORD2(v25) & 0xFFF0 | v22;
        uint64_t v26 = *(void *)(v24 + 8);
        if (v26)
        {
          blendFactorSource((v26 >> 7) & 0x1F, v14, v15, v16, v17, v18, v19, v20);
          if (v27 == 2
            || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 12) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v28 == 2)
            || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 17) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v29 == 2)
            || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 22) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v30 == 2))
          {
            int v31 = *((_DWORD *)v21 + 2) | (0x10000 << v22) & 0xFF0000;
            *((_DWORD *)v21 + 2) = v31;
          }
          else
          {
            int v31 = *((_DWORD *)v21 + 2);
          }
          if ((v31 & 0xFF0000) != 0)
          {
            blendFactorSource((*(_DWORD *)(v24 + 8) >> 7) & 0x1F, v14, v15, v16, v17, v18, v19, v20);
            if (v32 == 2
              || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 12) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v33 == 2)
              || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 17) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v34 == 2)
              || (blendFactorSource((*(_DWORD *)(v24 + 8) >> 22) & 0x1F, v14, v15, v16, v17, v18, v19, v20), v35 == 2))
            {
              *((_DWORD *)v21 + 2) |= (256 << v22) & 0xFF00;
            }
          }
        }
      }
    }
    ++v22;
  }
  while (v22 != 8);
  uint64_t v36 = *(void *)(a3 + 80);
  *((_WORD *)v21 + 6) = *(void *)(a3 + 72);
  *((_WORD *)v21 + 7) = v36;
  if (v41)
  {
    *(_DWORD *)uint64_t v21 = v40;
    MTLSerializePluginDataDictionary(objc_msgSend((id)objc_msgSend(*(id *)(a3 + 264), "device"), "pluginData"), (unsigned char *)v21 + v40);
  }
  if (v42)
  {
    *((_DWORD *)v21 + 1) = v39;
    MTLSerializePluginDataDictionary(*(void **)(a3 + 464), (unsigned char *)v21 + v39);
  }
  uint64_t v37 = (void *)*MEMORY[0x1E4F143F0];

  return dispatch_data_create(v21, size, 0, v37);
}

uint64_t blendFactorSource(unsigned int a1)
{
  if (a1 > 0x12) {
    return 5;
  }
  else {
    return dword_1828F0F60[a1];
  }
}

void blendFactorSource(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 0x13) {
    MTLReportFailure(0, "blendFactorSource", 4433, @"Invalid blend factor", a5, a6, a7, a8, vars0);
  }
}

unsigned __int8 *getVertexHash(int *a1)
{
  BOOL v2 = 1;
  BOOL v3 = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
  __int16 data = 0;
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v5 = *v4;
  if (v5 <= 8)
  {
    LOBYTE(data) = 1;
  }
  else
  {
    if (v4[4]) {
      BOOL v6 = *((unsigned char *)a1 + v4[4]) != 0;
    }
    else {
      BOOL v6 = 1;
    }
    LOBYTE(data) = v6;
    v2 = v5 < 0xB || (uint64_t v7 = v4[5]) == 0 || *((unsigned char *)a1 + v7) == 0;
  }
  HIBYTE(data) = v2;
  CC_SHA256(&data, 2u, v3);
  return v3;
}

void sub_18273D604(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newAirScriptedFunction(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::find<MTLUINT256_t>(a4, a2);
  if (!v8) {
    return 0;
  }
  unint64_t v9 = v8[6];
  if (!v9) {
    return 0;
  }
  v24.functionInputs = 0;
  v24.airScript = 0;
  uint64_t v23 = 0;
  long long v21 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)uint64_t v19 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  if (MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v9, &v24, (MTLLibraryDataWithArchive::AdditionalFunctionData *)&v18))
  {
    id v10 = [NSString alloc];
    if (SHIBYTE(v20[0]) >= 0) {
      uint64_t v11 = v19;
    }
    else {
      uint64_t v11 = (void **)v19[0];
    }
    uint64_t v12 = (void *)[v10 initWithUTF8String:v11];
    uint64_t v13 = [_MTLFunctionInternal alloc];
    uint64_t v14 = [(_MTLFunctionInternal *)v13 initWithName:v12 type:v18 libraryData:a1 functionData:&v24 inheritedLibraryPath:a5 device:a3];
    uint64_t v15 = v14;
    if (*((void *)a1 + 66))
    {
      if (v14)
      {
        uint64_t v16 = [(_MTLFunctionInternal *)v14 sourceArchiveOffset];
        if (v16 != -1) {
          [(_MTLFunctionInternal *)v15 setSourceArchiveOffset:*((void *)a1 + 65) + v16];
        }
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[1]);
  }
  if (SHIBYTE(v20[0]) < 0) {
    operator delete(v19[0]);
  }
  return v15;
}

void sub_18273D790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::find<MTLUINT256_t>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  BOOL v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2] && result[5] == a2[3]) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newSpecializedFunction(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  return MTLLibraryDataWithArchive::newAirScriptedFunction(a1, a2, a4, (void *)a1 + 55, a3);
}

void _MTLPopulateLinkedFunctionExtraData(const MTLLinkedFunctions *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18273DC40(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1010C40113C0ABBLL);
  _Unwind_Resume(a1);
}

char *std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    id v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - (void)v10;
          unint64_t v12 = (uint64_t)(a2 - (void)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v83 = *(void *)(a2 - 32);
                unint64_t v82 = a2 - 32;
                unint64_t v84 = bswap64(v83);
                unint64_t v85 = bswap64(*v10);
                if (v84 == v85
                  && (v84 = bswap64(*(void *)(v82 + 8)), unint64_t v85 = bswap64(v10[1]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 16)), unint64_t v85 = bswap64(v10[2]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 24)), unint64_t v85 = bswap64(v10[3]), v84 == v85))
                {
                  int v86 = 0;
                }
                else if (v84 < v85)
                {
                  int v86 = -1;
                }
                else
                {
                  int v86 = 1;
                }
                if (v86 < 0)
                {
                  __n128 v193 = *(__n128 *)v10;
                  long long v202 = *((_OWORD *)v10 + 1);
                  long long v155 = *(_OWORD *)(v82 + 16);
                  *(_OWORD *)id v10 = *(_OWORD *)v82;
                  *((_OWORD *)v10 + 1) = v155;
                  __n128 result = v193;
                  *(__n128 *)unint64_t v82 = v193;
                  *(_OWORD *)(v82 + 16) = v202;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, (unint64_t *)(a2 - 32));
                break;
              case 4uLL:
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
                break;
              case 5uLL:
                int v87 = v10 + 4;
                int v88 = v10 + 8;
                uint64_t v89 = v10 + 12;
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, v10 + 12).n128_u64[0];
                unint64_t v91 = *(void *)(a2 - 32);
                unint64_t v90 = a2 - 32;
                unint64_t v92 = bswap64(v91);
                unint64_t v93 = bswap64(v10[12]);
                if (v92 == v93
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 8)), v93 = bswap64(v10[13]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 16)), v93 = bswap64(v10[14]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 24)), v93 = bswap64(v10[15]), v92 == v93))
                {
                  int v94 = 0;
                }
                else if (v92 < v93)
                {
                  int v94 = -1;
                }
                else
                {
                  int v94 = 1;
                }
                if (v94 < 0)
                {
                  __n128 result = *(__n128 *)v89;
                  long long v203 = *((_OWORD *)v10 + 7);
                  long long v156 = *(_OWORD *)(v90 + 16);
                  *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
                  *((_OWORD *)v10 + 7) = v156;
                  *(__n128 *)unint64_t v90 = result;
                  *(_OWORD *)(v90 + 16) = v203;
                  unint64_t v157 = bswap64(*v89);
                  unint64_t v158 = bswap64(*v88);
                  if (v157 != v158) {
                    goto LABEL_328;
                  }
                  unint64_t v157 = bswap64(v10[13]);
                  unint64_t v158 = bswap64(v10[9]);
                  if (v157 == v158
                    && (unint64_t v157 = bswap64(v10[14]), v158 = bswap64(v10[10]), v157 == v158)
                    && (unint64_t v157 = bswap64(v10[15]), v158 = bswap64(v10[11]), v157 == v158))
                  {
                    int v159 = 0;
                  }
                  else
                  {
LABEL_328:
                    int v159 = v157 < v158 ? -1 : 1;
                  }
                  if (v159 < 0)
                  {
                    long long v170 = *(_OWORD *)v88;
                    __n128 result = *((__n128 *)v10 + 5);
                    long long v171 = *((_OWORD *)v10 + 7);
                    *(_OWORD *)int v88 = *(_OWORD *)v89;
                    *((_OWORD *)v10 + 5) = v171;
                    *(_OWORD *)uint64_t v89 = v170;
                    *((__n128 *)v10 + 7) = result;
                    unint64_t v172 = bswap64(*v88);
                    unint64_t v173 = bswap64(*v87);
                    if (v172 != v173) {
                      goto LABEL_337;
                    }
                    unint64_t v172 = bswap64(v10[9]);
                    unint64_t v173 = bswap64(v10[5]);
                    if (v172 == v173
                      && (unint64_t v172 = bswap64(v10[10]), v173 = bswap64(v10[6]), v172 == v173)
                      && (unint64_t v172 = bswap64(v10[11]), v173 = bswap64(v10[7]), v172 == v173))
                    {
                      int v174 = 0;
                    }
                    else
                    {
LABEL_337:
                      int v174 = v172 < v173 ? -1 : 1;
                    }
                    if (v174 < 0)
                    {
                      long long v175 = *(_OWORD *)v87;
                      __n128 result = *((__n128 *)v10 + 3);
                      long long v176 = *((_OWORD *)v10 + 5);
                      *(_OWORD *)int v87 = *(_OWORD *)v88;
                      *((_OWORD *)v10 + 3) = v176;
                      *(_OWORD *)int v88 = v175;
                      *((__n128 *)v10 + 5) = result;
                      unint64_t v177 = bswap64(v10[4]);
                      unint64_t v178 = bswap64(*v10);
                      if (v177 != v178) {
                        goto LABEL_346;
                      }
                      unint64_t v177 = bswap64(v10[5]);
                      unint64_t v178 = bswap64(v10[1]);
                      if (v177 == v178
                        && (unint64_t v177 = bswap64(v10[6]), v178 = bswap64(v10[2]), v177 == v178)
                        && (unint64_t v177 = bswap64(v10[7]), v178 = bswap64(v10[3]), v177 == v178))
                      {
                        int v179 = 0;
                      }
                      else
                      {
LABEL_346:
                        int v179 = v177 < v178 ? -1 : 1;
                      }
                      if (v179 < 0)
                      {
                        __n128 v195 = *(__n128 *)v10;
                        long long v205 = *((_OWORD *)v10 + 1);
                        long long v180 = *((_OWORD *)v10 + 3);
                        *(_OWORD *)id v10 = *(_OWORD *)v87;
                        *((_OWORD *)v10 + 1) = v180;
                        __n128 result = v195;
                        *(__n128 *)int v87 = v195;
                        *((_OWORD *)v10 + 3) = v205;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 767)
          {
            n128_u64 = v10 + 4;
            BOOL v97 = v10 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
            if (a4)
            {
              if (!v97)
              {
                uint64_t v98 = 0;
                int v99 = v10;
                do
                {
                  __int16 v100 = (__n128 *)n128_u64;
                  unint64_t v101 = bswap64(v99[4]);
                  unint64_t v102 = bswap64(*v99);
                  if (v101 != v102
                    || (unint64_t v101 = bswap64(v100->n128_u64[1]), v102 = bswap64(v99[1]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[0]), v102 = bswap64(v99[2]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[1]), v102 = bswap64(v99[3]), v101 != v102))
                  {
                    int v103 = v101 < v102 ? -1 : 1;
                    if (v103 < 0)
                    {
                      __n128 v190 = *v100;
                      __n128 v199 = v100[1];
                      uint64_t v104 = v98;
                      while (1)
                      {
                        int v105 = (char *)v10 + v104;
                        long long v106 = *(_OWORD *)((char *)v10 + v104 + 16);
                        *((_OWORD *)v105 + 2) = *(_OWORD *)((char *)v10 + v104);
                        *((_OWORD *)v105 + 3) = v106;
                        if (!v104) {
                          break;
                        }
                        unint64_t v107 = bswap64(v190.n128_u64[0]);
                        unint64_t v108 = bswap64(*((void *)v105 - 4));
                        if (v107 == v108
                          && (unint64_t v107 = bswap64(v190.n128_u64[1]), v108 = bswap64(*((void *)v105 - 3)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[0]), v108 = bswap64(*((void *)v105 - 2)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[1]), v108 = bswap64(*((void *)v105 - 1)), v107 == v108))
                        {
                          int v109 = 0;
                        }
                        else if (v107 < v108)
                        {
                          int v109 = -1;
                        }
                        else
                        {
                          int v109 = 1;
                        }
                        v104 -= 32;
                        if ((v109 & 0x80000000) == 0)
                        {
                          uint64_t v110 = (__n128 *)((char *)v10 + v104 + 32);
                          goto LABEL_200;
                        }
                      }
                      uint64_t v110 = (__n128 *)v10;
LABEL_200:
                      __n128 result = v190;
                      __n128 *v110 = v190;
                      v110[1] = v199;
                    }
                  }
                  n128_u64 = v100[2].n128_u64;
                  v98 += 32;
                  int v99 = (unint64_t *)v100;
                }
                while (&v100[2] != (__n128 *)a2);
              }
            }
            else if (!v97)
            {
              uint64_t v160 = v10 - 4;
              do
              {
                uint64_t v161 = (__n128 *)n128_u64;
                unint64_t v162 = bswap64(a1[4]);
                unint64_t v163 = bswap64(*a1);
                if (v162 != v163
                  || (unint64_t v162 = bswap64(v161->n128_u64[1]), v163 = bswap64(a1[1]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[0]), v163 = bswap64(a1[2]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[1]), v163 = bswap64(a1[3]), v162 != v163))
                {
                  int v164 = v162 < v163 ? -1 : 1;
                  if (v164 < 0)
                  {
                    __n128 v194 = *v161;
                    __n128 v204 = v161[1];
                    uint64_t v165 = v160;
                    do
                    {
                      long long v166 = *((_OWORD *)v165 + 3);
                      *((_OWORD *)v165 + 4) = *((_OWORD *)v165 + 2);
                      *((_OWORD *)v165 + 5) = v166;
                      unint64_t v167 = bswap64(v194.n128_u64[0]);
                      unint64_t v168 = bswap64(*v165);
                      if (v167 == v168
                        && (unint64_t v167 = bswap64(v194.n128_u64[1]), v168 = bswap64(v165[1]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[0]), v168 = bswap64(v165[2]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[1]), v168 = bswap64(v165[3]), v167 == v168))
                      {
                        int v169 = 0;
                      }
                      else if (v167 < v168)
                      {
                        int v169 = -1;
                      }
                      else
                      {
                        int v169 = 1;
                      }
                      v165 -= 4;
                    }
                    while (v169 < 0);
                    __n128 result = v194;
                    *((__n128 *)v165 + 4) = v194;
                    *((__n128 *)v165 + 5) = v204;
                  }
                }
                n128_u64 = v161[2].n128_u64;
                v160 += 4;
                a1 = (unint64_t *)v161;
              }
              while (&v161[2] != (__n128 *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (unint64_t *)a2)
            {
              int64_t v111 = (v12 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                int64_t v113 = v112;
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  int v115 = &v10[4 * v114];
                  if (2 * v113 + 2 < (uint64_t)v12)
                  {
                    unint64_t v116 = bswap64(*v115);
                    unint64_t v117 = bswap64(v115[4]);
                    if (v116 != v117) {
                      goto LABEL_212;
                    }
                    unint64_t v116 = bswap64(v115[1]);
                    unint64_t v117 = bswap64(v115[5]);
                    if (v116 == v117
                      && (unint64_t v116 = bswap64(v115[2]), v117 = bswap64(v115[6]), v116 == v117)
                      && (unint64_t v116 = bswap64(v115[3]), v117 = bswap64(v115[7]), v116 == v117))
                    {
                      int v118 = 0;
                    }
                    else
                    {
LABEL_212:
                      int v118 = v116 < v117 ? -1 : 1;
                    }
                    if (v118 < 0)
                    {
                      v115 += 4;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  uint64_t v119 = &v10[4 * v113];
                  unint64_t v120 = bswap64(*v115);
                  unint64_t v121 = bswap64(*v119);
                  if (v120 == v121
                    && (unint64_t v120 = bswap64(v115[1]), v121 = bswap64(v119[1]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[2]), v121 = bswap64(v119[2]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[3]), v121 = bswap64(v119[3]), v120 == v121)
                    || (v120 < v121 ? (int v122 = -1) : (int v122 = 1), (v122 & 0x80000000) == 0))
                  {
                    long long v191 = *(_OWORD *)v119;
                    long long v200 = *((_OWORD *)v119 + 1);
                    do
                    {
                      size_t v123 = v115;
                      long long v124 = *((_OWORD *)v115 + 1);
                      *(_OWORD *)uint64_t v119 = *(_OWORD *)v115;
                      *((_OWORD *)v119 + 1) = v124;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v125 = (2 * v114) | 1;
                      int v115 = &v10[4 * v125];
                      uint64_t v114 = 2 * v114 + 2;
                      if (v114 < (uint64_t)v12)
                      {
                        unint64_t v126 = bswap64(*v115);
                        unint64_t v127 = bswap64(v115[4]);
                        if (v126 != v127) {
                          goto LABEL_234;
                        }
                        unint64_t v126 = bswap64(v115[1]);
                        unint64_t v127 = bswap64(v115[5]);
                        if (v126 == v127
                          && (v126 = bswap64(v115[2]), unint64_t v127 = bswap64(v115[6]), v126 == v127)
                          && (v126 = bswap64(v115[3]), unint64_t v127 = bswap64(v115[7]), v126 == v127))
                        {
                          int v128 = 0;
                        }
                        else
                        {
LABEL_234:
                          int v128 = v126 < v127 ? -1 : 1;
                        }
                        if (v128 >= 0) {
                          uint64_t v114 = v125;
                        }
                        else {
                          v115 += 4;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v125;
                      }
                      unint64_t v129 = bswap64(*v115);
                      unint64_t v130 = bswap64(v191);
                      if (v129 != v130) {
                        goto LABEL_245;
                      }
                      unint64_t v129 = bswap64(v115[1]);
                      unint64_t v130 = bswap64(*((unint64_t *)&v191 + 1));
                      if (v129 == v130
                        && (v129 = bswap64(v115[2]), unint64_t v130 = bswap64(v200), v129 == v130)
                        && (v129 = bswap64(v115[3]), unint64_t v130 = bswap64(*((unint64_t *)&v200 + 1)), v129 == v130))
                      {
                        int v131 = 0;
                      }
                      else
                      {
LABEL_245:
                        int v131 = v129 < v130 ? -1 : 1;
                      }
                      uint64_t v119 = v123;
                    }
                    while ((v131 & 0x80000000) == 0);
                    *(_OWORD *)size_t v123 = v191;
                    *((_OWORD *)v123 + 1) = v200;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              uint64_t v132 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v133 = 0;
                __n128 v183 = *(__n128 *)v10;
                long long v186 = *((_OWORD *)v10 + 1);
                int v134 = v10;
                do
                {
                  unint64_t v135 = &v134[4 * v133 + 4];
                  uint64_t v136 = (2 * v133) | 1;
                  uint64_t v137 = 2 * v133 + 2;
                  if (v137 < v132)
                  {
                    unint64_t v138 = bswap64(*v135);
                    unint64_t v139 = bswap64(v135[4]);
                    if (v138 != v139) {
                      goto LABEL_259;
                    }
                    unint64_t v138 = bswap64(v135[1]);
                    unint64_t v139 = bswap64(v135[5]);
                    if (v138 == v139
                      && (unint64_t v138 = bswap64(v135[2]), v139 = bswap64(v135[6]), v138 == v139)
                      && (unint64_t v138 = bswap64(v135[3]), v139 = bswap64(v135[7]), v138 == v139))
                    {
                      int v140 = 0;
                    }
                    else
                    {
LABEL_259:
                      int v140 = v138 < v139 ? -1 : 1;
                    }
                    if (v140 < 0)
                    {
                      v135 += 4;
                      uint64_t v136 = v137;
                    }
                  }
                  long long v141 = *((_OWORD *)v135 + 1);
                  *(_OWORD *)int v134 = *(_OWORD *)v135;
                  *((_OWORD *)v134 + 1) = v141;
                  int v134 = v135;
                  uint64_t v133 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                a2 -= 32;
                if (v135 == (unint64_t *)a2)
                {
                  __n128 result = v183;
                  *(__n128 *)unint64_t v135 = v183;
                  *((_OWORD *)v135 + 1) = v186;
                }
                else
                {
                  long long v142 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)unint64_t v135 = *(_OWORD *)a2;
                  *((_OWORD *)v135 + 1) = v142;
                  __n128 result = v183;
                  *(__n128 *)a2 = v183;
                  *(_OWORD *)(a2 + 16) = v186;
                  uint64_t v143 = (char *)v135 - (char *)v10 + 32;
                  if (v143 >= 33)
                  {
                    unint64_t v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                    long long v145 = &v10[4 * v144];
                    unint64_t v146 = bswap64(*v145);
                    unint64_t v147 = bswap64(*v135);
                    if (v146 != v147
                      || (unint64_t v146 = bswap64(v145[1]), v147 = bswap64(v135[1]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[2]), v147 = bswap64(v135[2]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[3]), v147 = bswap64(v135[3]), v146 != v147))
                    {
                      int v148 = v146 < v147 ? -1 : 1;
                      if (v148 < 0)
                      {
                        __n128 v192 = *(__n128 *)v135;
                        __n128 v201 = *((__n128 *)v135 + 1);
                        do
                        {
                          uint64_t v149 = (__n128 *)v145;
                          long long v150 = *((_OWORD *)v145 + 1);
                          *(_OWORD *)unint64_t v135 = *(_OWORD *)v145;
                          *((_OWORD *)v135 + 1) = v150;
                          if (!v144) {
                            break;
                          }
                          unint64_t v144 = (v144 - 1) >> 1;
                          long long v145 = &v10[4 * v144];
                          unint64_t v151 = bswap64(*v145);
                          unint64_t v152 = bswap64(v192.n128_u64[0]);
                          if (v151 != v152) {
                            goto LABEL_283;
                          }
                          unint64_t v151 = bswap64(v145[1]);
                          unint64_t v152 = bswap64(v192.n128_u64[1]);
                          if (v151 == v152
                            && (unint64_t v151 = bswap64(v145[2]), v152 = bswap64(v201.n128_u64[0]), v151 == v152)
                            && (unint64_t v151 = bswap64(v145[3]), v152 = bswap64(v201.n128_u64[1]), v151 == v152))
                          {
                            int v153 = 0;
                          }
                          else
                          {
LABEL_283:
                            int v153 = v151 < v152 ? -1 : 1;
                          }
                          unint64_t v135 = (unint64_t *)v149;
                        }
                        while (v153 < 0);
                        __n128 result = v192;
                        *uint64_t v149 = v192;
                        v149[1] = v201;
                      }
                    }
                  }
                }
              }
              while (v132-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v12 >> 1)], (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v14 - 4, (unint64_t *)(a2 - 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v13 + 4], (unint64_t *)(a2 - 96));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v14 - 4, v14, &a1[4 * v13 + 4]);
            __n128 v187 = *(__n128 *)a1;
            long long v196 = *((_OWORD *)a1 + 1);
            long long v15 = *((_OWORD *)v14 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *((_OWORD *)a1 + 1) = v15;
            *(__n128 *)uint64_t v14 = v187;
            *((_OWORD *)v14 + 1) = v196;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v12 >> 1)], a1, (unint64_t *)(a2 - 32));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v16 = bswap64(*(a1 - 4));
          unint64_t v17 = bswap64(*a1);
          if (v16 != v17) {
            goto LABEL_15;
          }
          unint64_t v16 = bswap64(*(a1 - 3));
          unint64_t v17 = bswap64(a1[1]);
          if (v16 == v17
            && (unint64_t v16 = bswap64(*(a1 - 2)), v17 = bswap64(a1[2]), v16 == v17)
            && (unint64_t v16 = bswap64(*(a1 - 1)), v17 = bswap64(a1[3]), v16 == v17))
          {
            int v18 = 0;
          }
          else
          {
LABEL_15:
            int v18 = v16 < v17 ? -1 : 1;
          }
          if (v18 < 0) {
            break;
          }
          __n128 v182 = *(__n128 *)a1;
          long long v185 = *((_OWORD *)a1 + 1);
          unint64_t v51 = bswap64(*a1);
          unint64_t v52 = bswap64(*(void *)(a2 - 32));
          if (v51 == v52
            && (unint64_t v51 = bswap64(v182.n128_u64[1]), v52 = bswap64(*(void *)(a2 - 24)), v51 == v52)
            && (unint64_t v51 = bswap64(v185), v52 = bswap64(*(void *)(a2 - 16)), v51 == v52)
            && (unint64_t v51 = bswap64(*((unint64_t *)&v185 + 1)), v52 = bswap64(*(void *)(a2 - 8)), v51 == v52))
          {
            int v53 = 0;
          }
          else if (v51 < v52)
          {
            int v53 = -1;
          }
          else
          {
            int v53 = 1;
          }
          if (v53 < 0)
          {
            long long v58 = a1;
            id v10 = a1;
            do
            {
              unint64_t v59 = v10[4];
              v10 += 4;
              unint64_t v60 = bswap64(v182.n128_u64[0]);
              unint64_t v61 = bswap64(v59);
              if (v60 == v61
                && (unint64_t v60 = bswap64(v182.n128_u64[1]), v61 = bswap64(v58[5]), v60 == v61)
                && (unint64_t v60 = bswap64(v185), v61 = bswap64(v58[6]), v60 == v61)
                && (unint64_t v60 = bswap64(*((unint64_t *)&v185 + 1)), v61 = bswap64(v58[7]), v60 == v61))
              {
                int v62 = 0;
              }
              else if (v60 < v61)
              {
                int v62 = -1;
              }
              else
              {
                int v62 = 1;
              }
              long long v58 = v10;
            }
            while ((v62 & 0x80000000) == 0);
          }
          else
          {
            int v54 = a1 + 4;
            do
            {
              id v10 = v54;
              if ((unint64_t)v54 >= a2) {
                break;
              }
              unint64_t v55 = bswap64(v182.n128_u64[0]);
              unint64_t v56 = bswap64(*v10);
              if (v55 != v56) {
                goto LABEL_100;
              }
              unint64_t v55 = bswap64(v182.n128_u64[1]);
              unint64_t v56 = bswap64(v10[1]);
              if (v55 == v56
                && (unint64_t v55 = bswap64(v185), v56 = bswap64(v10[2]), v55 == v56)
                && (unint64_t v55 = bswap64(*((unint64_t *)&v185 + 1)), v56 = bswap64(v10[3]), v55 == v56))
              {
                int v57 = 0;
              }
              else
              {
LABEL_100:
                int v57 = v55 < v56 ? -1 : 1;
              }
              int v54 = v10 + 4;
            }
            while ((v57 & 0x80000000) == 0);
          }
          uint64_t v63 = (_OWORD *)a2;
          if ((unint64_t)v10 < a2)
          {
            unsigned __int8 v64 = (_OWORD *)a2;
            uint64_t v63 = (_OWORD *)a2;
            do
            {
              unint64_t v65 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v66 = bswap64(v182.n128_u64[0]);
              unint64_t v67 = bswap64(v65);
              if (v66 == v67
                && (unint64_t v66 = bswap64(v182.n128_u64[1]), v67 = bswap64(*((void *)v64 - 3)), v66 == v67)
                && (unint64_t v66 = bswap64(v185), v67 = bswap64(*((void *)v64 - 2)), v66 == v67)
                && (unint64_t v66 = bswap64(*((unint64_t *)&v185 + 1)), v67 = bswap64(*((void *)v64 - 1)), v66 == v67))
              {
                int v68 = 0;
              }
              else if (v66 < v67)
              {
                int v68 = -1;
              }
              else
              {
                int v68 = 1;
              }
              unsigned __int8 v64 = v63;
            }
            while (v68 < 0);
          }
          while (v10 < (unint64_t *)v63)
          {
            __n128 v189 = *(__n128 *)v10;
            long long v198 = *((_OWORD *)v10 + 1);
            long long v69 = v63[1];
            *(_OWORD *)id v10 = *v63;
            *((_OWORD *)v10 + 1) = v69;
            _OWORD *v63 = v189;
            v63[1] = v198;
            long long v70 = v10;
            do
            {
              unint64_t v71 = v10[4];
              v10 += 4;
              unint64_t v72 = bswap64(v182.n128_u64[0]);
              unint64_t v73 = bswap64(v71);
              if (v72 == v73
                && (unint64_t v72 = bswap64(v182.n128_u64[1]), v73 = bswap64(v70[5]), v72 == v73)
                && (unint64_t v72 = bswap64(v185), v73 = bswap64(v70[6]), v72 == v73)
                && (unint64_t v72 = bswap64(*((unint64_t *)&v185 + 1)), v73 = bswap64(v70[7]), v72 == v73))
              {
                int v74 = 0;
              }
              else if (v72 < v73)
              {
                int v74 = -1;
              }
              else
              {
                int v74 = 1;
              }
              long long v70 = v10;
            }
            while ((v74 & 0x80000000) == 0);
            int v75 = v63;
            do
            {
              unint64_t v76 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v77 = bswap64(v182.n128_u64[0]);
              unint64_t v78 = bswap64(v76);
              if (v77 == v78
                && (unint64_t v77 = bswap64(v182.n128_u64[1]), v78 = bswap64(*((void *)v75 - 3)), v77 == v78)
                && (unint64_t v77 = bswap64(v185), v78 = bswap64(*((void *)v75 - 2)), v77 == v78)
                && (unint64_t v77 = bswap64(*((unint64_t *)&v185 + 1)), v78 = bswap64(*((void *)v75 - 1)), v77 == v78))
              {
                int v79 = 0;
              }
              else if (v77 < v78)
              {
                int v79 = -1;
              }
              else
              {
                int v79 = 1;
              }
              int v75 = v63;
            }
            while (v79 < 0);
          }
          long long v80 = (__n128 *)(v10 - 4);
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 != a1)
          {
            long long v81 = *((_OWORD *)v10 - 1);
            *(__n128 *)a1 = *v80;
            *((_OWORD *)a1 + 1) = v81;
          }
          a4 = 0;
          __n128 result = v182;
          *long long v80 = v182;
          *((_OWORD *)v10 - 1) = v185;
        }
        uint64_t v19 = 0;
        __n128 v181 = *(__n128 *)a1;
        long long v184 = *((_OWORD *)a1 + 1);
        do
        {
          uint64_t v20 = &a1[v19];
          unint64_t v21 = bswap64(a1[v19 + 4]);
          unint64_t v22 = bswap64(v181.n128_u64[0]);
          if (v21 == v22
            && (v21 = bswap64(v20[5]), unint64_t v22 = bswap64(v181.n128_u64[1]), v21 == v22)
            && (v21 = bswap64(v20[6]), unint64_t v22 = bswap64(v184), v21 == v22)
            && (v21 = bswap64(v20[7]), unint64_t v22 = bswap64(*((unint64_t *)&v184 + 1)), v21 == v22))
          {
            int v23 = 0;
          }
          else if (v21 < v22)
          {
            int v23 = -1;
          }
          else
          {
            int v23 = 1;
          }
          v19 += 4;
        }
        while (v23 < 0);
        MTLFunctionData v24 = &a1[v19];
        unint64_t v25 = a2;
        if (v19 == 4)
        {
          int v30 = (_OWORD *)a2;
          while (v24 < (unint64_t *)v30)
          {
            uint64_t v26 = v30 - 2;
            unint64_t v31 = bswap64(*((void *)v30 - 4));
            unint64_t v32 = bswap64(v181.n128_u64[0]);
            if (v31 == v32
              && (unint64_t v31 = bswap64(*((void *)v30 - 3)), v32 = bswap64(v181.n128_u64[1]), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 2)), v32 = bswap64(v184), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 1)), v32 = bswap64(*((unint64_t *)&v184 + 1)), v31 == v32))
            {
              int v33 = 0;
            }
            else if (v31 < v32)
            {
              int v33 = -1;
            }
            else
            {
              int v33 = 1;
            }
            v30 -= 2;
            if (v33 < 0) {
              goto LABEL_53;
            }
          }
          uint64_t v26 = v30;
        }
        else
        {
          do
          {
            uint64_t v26 = (_OWORD *)(v25 - 32);
            unint64_t v27 = bswap64(*(void *)(v25 - 32));
            unint64_t v28 = bswap64(v181.n128_u64[0]);
            if (v27 == v28
              && (unint64_t v27 = bswap64(*(void *)(v25 - 24)), v28 = bswap64(v181.n128_u64[1]), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 16)), v28 = bswap64(v184), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 8)), v28 = bswap64(*((unint64_t *)&v184 + 1)), v27 == v28))
            {
              int v29 = 0;
            }
            else if (v27 < v28)
            {
              int v29 = -1;
            }
            else
            {
              int v29 = 1;
            }
            v25 -= 32;
          }
          while ((v29 & 0x80000000) == 0);
        }
LABEL_53:
        if (v24 >= (unint64_t *)v26)
        {
          unsigned int v47 = v24 - 4;
        }
        else
        {
          unint64_t v34 = (unint64_t)v24;
          int v35 = v26;
          do
          {
            long long v188 = *(_OWORD *)v34;
            long long v197 = *(_OWORD *)(v34 + 16);
            long long v36 = v35[1];
            *(_OWORD *)unint64_t v34 = *v35;
            *(_OWORD *)(v34 + 16) = v36;
            *int v35 = v188;
            v35[1] = v197;
            uint64_t v37 = (unint64_t *)v34;
            do
            {
              unint64_t v38 = *(void *)(v34 + 32);
              v34 += 32;
              unint64_t v39 = bswap64(v38);
              unint64_t v40 = bswap64(v181.n128_u64[0]);
              if (v39 == v40
                && (unint64_t v39 = bswap64(v37[5]), v40 = bswap64(v181.n128_u64[1]), v39 == v40)
                && (unint64_t v39 = bswap64(v37[6]), v40 = bswap64(v184), v39 == v40)
                && (unint64_t v39 = bswap64(v37[7]), v40 = bswap64(*((unint64_t *)&v184 + 1)), v39 == v40))
              {
                int v41 = 0;
              }
              else if (v39 < v40)
              {
                int v41 = -1;
              }
              else
              {
                int v41 = 1;
              }
              uint64_t v37 = (unint64_t *)v34;
            }
            while (v41 < 0);
            uint64_t v42 = v35;
            do
            {
              unint64_t v43 = *((void *)v35 - 4);
              v35 -= 2;
              unint64_t v44 = bswap64(v43);
              unint64_t v45 = bswap64(v181.n128_u64[0]);
              if (v44 == v45
                && (unint64_t v44 = bswap64(*((void *)v42 - 3)), v45 = bswap64(v181.n128_u64[1]), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 2)), v45 = bswap64(v184), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 1)), v45 = bswap64(*((unint64_t *)&v184 + 1)), v44 == v45))
              {
                int v46 = 0;
              }
              else if (v44 < v45)
              {
                int v46 = -1;
              }
              else
              {
                int v46 = 1;
              }
              uint64_t v42 = v35;
            }
            while ((v46 & 0x80000000) == 0);
          }
          while (v34 < (unint64_t)v35);
          unsigned int v47 = (unint64_t *)(v34 - 32);
        }
        if (v47 != a1)
        {
          long long v48 = *((_OWORD *)v47 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v47;
          *((_OWORD *)a1 + 1) = v48;
        }
        *(__n128 *)unsigned int v47 = v181;
        *((_OWORD *)v47 + 1) = v184;
        if (v24 >= (unint64_t *)v26) {
          break;
        }
LABEL_83:
        std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *,false>(a1, v47, a3, a4 & 1);
        a4 = 0;
        id v10 = v47 + 4;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, v47);
      id v10 = v47 + 4;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v47 + 4, (unint64_t *)a2))
      {
        break;
      }
      if (!v49) {
        goto LABEL_83;
      }
    }
    a2 = (unint64_t)v47;
    if (!v49) {
      continue;
    }
    return result;
  }
}

uint64_t Air::PipelineScript::pipeline_as_tile_render(Air::PipelineScript *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((unsigned char *)this + v1[4]) == 3) : (v3 = 0), v3 && (uint64_t v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

unsigned __int8 *getTileHash(int *a1)
{
  char v2 = 1;
  BOOL v3 = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 0xFu)
  {
    uint64_t v7 = 0;
LABEL_14:
    unsigned __int16 v10 = 0;
    goto LABEL_15;
  }
  uint64_t v5 = v4[7];
  if (!v4[7])
  {
    uint64_t v7 = 0;
    unsigned __int16 v10 = 0;
    char v2 = 1;
    goto LABEL_15;
  }
  uint64_t v6 = *(unsigned int *)((char *)a1 + v5);
  uint64_t v7 = (int *)((char *)a1 + v5 + v6);
  uint64_t v8 = *v7;
  if (!v8)
  {
    char v2 = 0;
    goto LABEL_14;
  }
  unint64_t v9 = 0;
  unsigned __int16 v10 = 0;
  uint64_t v11 = 4 * v8;
  unint64_t v12 = (char *)a1 + v5 + v6;
  do
  {
    uint64_t v13 = *(unsigned int *)&v12[v9 + 4];
    uint64_t v14 = &v12[v9 + v13 - *(int *)((char *)&v7[v9 / 4 + 1] + v13)];
    if (*((unsigned __int16 *)v14 + 2) >= 5u)
    {
      uint64_t v15 = *((unsigned __int16 *)v14 + 4);
      if (v15)
      {
        if (*(_WORD *)&v12[v9 + 4 + v13 + v15]) {
          ++v10;
        }
      }
    }
    v9 += 4;
  }
  while (v11 != v9);
  char v2 = 0;
LABEL_15:
  size_t v16 = 2 * v10 + 8;
  unint64_t v17 = malloc_type_malloc(v16, 0x6E6CC169uLL);
  bzero(v17, v16);
  *unint64_t v17 = v10;
  if ((v2 & 1) == 0 && *v7)
  {
    int v18 = 0;
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = (_DWORD *)((char *)&v7[v19 + 1] + v7[v19 + 1]);
      unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 5u)
      {
        uint64_t v22 = v21[2];
        if (v22)
        {
          if (*(_WORD *)((char *)v20 + v22))
          {
            int v23 = &v17[v18];
            __int16 v25 = v23[1];
            MTLFunctionData v24 = v23 + 1;
            *MTLFunctionData v24 = v25 & 0xFFF0 | v19 & 0xF;
            uint64_t v26 = (unsigned __int16 *)((char *)v20 - *v20);
            if (*v26 >= 5u && (uint64_t v27 = v26[2]) != 0) {
              __int16 v28 = *(_WORD *)((char *)v20 + v27);
            }
            else {
              __int16 v28 = 0;
            }
            *MTLFunctionData v24 = v19 & 0xF | (16 * v28);
            ++v18;
          }
        }
      }
      ++v19;
    }
    while (v19 < *v7);
  }
  CC_SHA256(v17, v16, v3);
  free(v17);
  return v3;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  char v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void sub_18273FBF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t newArchitectureNameString(int a1, int a2)
{
  if ((a1 - 16777235) <= 2 && a2 != 0)
  {
    if (a1 == 16777237)
    {
      int v9 = a2 & 0xFFFFFF;
      uint64_t v4 = "unknown";
      if ((a2 & 0xFFFFFFu) > 0x9501FF)
      {
        if ((a2 & 0xFFFFFFu) > 0x950203)
        {
          switch(v9)
          {
            case 9765380:
              uint64_t v4 = "intelgpu_kbl_gt2r4";
              break;
            case 9765633:
              uint64_t v4 = "intelgpu_kbl_gt3r1";
              break;
            case 9765638:
              uint64_t v4 = "intelgpu_kbl_gt3r6";
              break;
          }
          goto LABEL_150;
        }
        int v10 = 9765376;
        uint64_t v11 = "intelgpu_kbl_gt2r0";
        BOOL v12 = v9 == 9765378;
        uint64_t v13 = "intelgpu_kbl_gt2r2";
      }
      else
      {
        if ((a2 & 0xFFFFFFu) > 0x90309)
        {
          switch(v9)
          {
            case 590602:
              uint64_t v4 = "intelgpu_skl_gt3r10";
              break;
            case 1115655:
              uint64_t v4 = "intelgpu_icl_1x6x8r7";
              break;
            case 1116167:
              uint64_t v4 = "intelgpu_icl_1x8x8r7";
              break;
          }
          goto LABEL_150;
        }
        int v10 = 590342;
        uint64_t v11 = "intelgpu_skl_gt2r6";
        BOOL v12 = v9 == 590343;
        uint64_t v13 = "intelgpu_skl_gt2r7";
      }
      if (!v12) {
        uint64_t v13 = "unknown";
      }
      if (v9 == v10) {
        uint64_t v4 = v11;
      }
      else {
        uint64_t v4 = v13;
      }
      goto LABEL_150;
    }
    if (a1 == 16777236)
    {
      int v8 = a2 & 0xFFFFFF;
      uint64_t v4 = "unknown";
      if ((a2 & 0xFFFFFFu) <= 0x1388)
      {
        switch(v8)
        {
          case 4000:
            uint64_t v4 = "amdgpu_gfx600";
            break;
          case 4001:
            uint64_t v4 = "amdgpu_gfx600_nwh";
            break;
          case 4002:
            uint64_t v4 = "amdgpu_gfx701";
            break;
          case 4003:
            uint64_t v4 = "amdgpu_gfx704";
            break;
          case 4004:
            uint64_t v4 = "amdgpu_gfx803";
            break;
          case 4005:
            uint64_t v4 = "amdgpu_gfx802";
            break;
          default:
            if (v8 == 5000) {
              uint64_t v4 = "amdgpu_gfx900";
            }
            break;
        }
      }
      else
      {
        switch(v8)
        {
          case 6000:
            uint64_t v4 = "amdgpu_gfx1010_nsgc";
            break;
          case 6001:
            uint64_t v4 = "amdgpu_gfx1010";
            break;
          case 6002:
            uint64_t v4 = "amdgpu_gfx1011";
            break;
          case 6003:
            uint64_t v4 = "amdgpu_gfx1012";
            break;
          case 6004:
            uint64_t v4 = "amdgpu_gfx1030";
            break;
          case 6005:
            uint64_t v4 = "amdgpu_gfx1032";
            break;
          default:
            if (v8 == 5001)
            {
              uint64_t v4 = "amdgpu_gfx904";
            }
            else if (v8 == 5002)
            {
              uint64_t v4 = "amdgpu_gfx906";
            }
            break;
        }
      }
      goto LABEL_150;
    }
    if (a1 != 16777235) {
      goto LABEL_149;
    }
    int v5 = a2 & 0xFFFFFF;
    if ((a2 & 0xFFFFFFu) > 0x112)
    {
      if ((a2 & 0xFFFFFFu) <= 0x1B1)
      {
        if ((a2 & 0xFFFFFFu) > 0x161)
        {
          if ((a2 & 0xFFFFFFu) <= 0x191)
          {
            if (v5 == 354 || v5 == 370)
            {
              uint64_t v4 = "applegpu_g14p";
              goto LABEL_150;
            }
            if (v5 != 386) {
              goto LABEL_149;
            }
LABEL_110:
            uint64_t v4 = "applegpu_g14g";
            goto LABEL_150;
          }
          if ((a2 & 0xFFFFFFu) <= 0x1A1)
          {
            if (v5 != 402)
            {
              if (v5 != 403) {
                goto LABEL_149;
              }
LABEL_158:
              uint64_t v4 = "applegpu_g16g";
              goto LABEL_150;
            }
            goto LABEL_110;
          }
          if (v5 != 418)
          {
            if (v5 == 419) {
              goto LABEL_142;
            }
            goto LABEL_149;
          }
LABEL_157:
          uint64_t v4 = "applegpu_g14s";
          goto LABEL_150;
        }
        if ((a2 & 0xFFFFFFu) <= 0x131)
        {
          if (v5 != 275)
          {
            if (v5 != 290)
            {
              if (v5 != 291) {
                goto LABEL_149;
              }
LABEL_83:
              uint64_t v4 = "applegpu_g16s";
              goto LABEL_150;
            }
LABEL_145:
            uint64_t v4 = "applegpu_g13p";
            goto LABEL_150;
          }
LABEL_139:
          uint64_t v4 = "applegpu_g15g";
          goto LABEL_150;
        }
        if (v5 == 306 || v5 == 322)
        {
          uint64_t v4 = "applegpu_g13g";
          goto LABEL_150;
        }
        if (v5 != 323) {
          goto LABEL_149;
        }
        uint64_t v4 = "applegpu_g17p";
        goto LABEL_150;
      }
      if ((a2 & 0xFFFFFFu) > 0x211)
      {
        if ((a2 & 0xFFFFFFu) > 0x241)
        {
          if ((a2 & 0xFFFFFFu) > 0x261)
          {
            if (v5 == 610)
            {
              uint64_t v4 = "applegpu_g15p";
              goto LABEL_150;
            }
            if (v5 != 1602) {
              goto LABEL_149;
            }
            uint64_t v4 = "applegpu_g11g_8fstp";
          }
          else
          {
            if (v5 != 578 && v5 != 594) {
              goto LABEL_149;
            }
            uint64_t v4 = "applegpu_g13d";
          }
          goto LABEL_150;
        }
        if (v5 != 530)
        {
          if (v5 != 546 && v5 != 562) {
            goto LABEL_149;
          }
          uint64_t v4 = "applegpu_g13c";
          goto LABEL_150;
        }
LABEL_134:
        uint64_t v4 = "applegpu_g13s";
        goto LABEL_150;
      }
      if ((a2 & 0xFFFFFFu) > 0x1E1)
      {
        if (v5 == 482 || v5 == 498)
        {
          uint64_t v4 = "applegpu_g14d";
          goto LABEL_150;
        }
        if (v5 != 514) {
          goto LABEL_149;
        }
        goto LABEL_134;
      }
      if (v5 == 434) {
        goto LABEL_157;
      }
      if (v5 != 435)
      {
        if (v5 != 467) {
          goto LABEL_149;
        }
        goto LABEL_83;
      }
LABEL_135:
      uint64_t v4 = "applegpu_g16p";
      goto LABEL_150;
    }
    if ((a2 & 0xFFFFFFu) <= 0x60)
    {
      if ((a2 & 0xFFFFFFu) > 0x40)
      {
        if ((a2 & 0xFFFFFFu) > 0x50)
        {
          if (v5 == 81)
          {
            uint64_t v4 = "applegpu_g9p";
            goto LABEL_150;
          }
          if (v5 != 82)
          {
            if (v5 != 83) {
              goto LABEL_149;
            }
            goto LABEL_139;
          }
        }
        else
        {
          if (v5 == 65)
          {
            uint64_t v4 = "applegpu_g5p";
            goto LABEL_150;
          }
          if (v5 != 66)
          {
            if (v5 != 67) {
              goto LABEL_149;
            }
            goto LABEL_139;
          }
        }
        uint64_t v4 = "applegpu_g11m";
        goto LABEL_150;
      }
      if ((a2 & 0xFFFFFFu) > 0x20)
      {
        if (v5 != 33)
        {
          if (v5 == 34)
          {
            uint64_t v4 = "applegpu_g10p";
            goto LABEL_150;
          }
          if (v5 != 49) {
            goto LABEL_149;
          }
        }
        uint64_t v4 = "applegpu_g4g";
      }
      else
      {
        uint64_t v4 = "applegpu_gx2";
        if (v5 != 16)
        {
          if (v5 == 17)
          {
            uint64_t v4 = "applegpu_g4p";
            goto LABEL_150;
          }
          if (v5 != 32) {
            goto LABEL_149;
          }
        }
      }
LABEL_150:
      id v14 = [NSString alloc];
      return [v14 initWithCString:v4 encoding:1];
    }
    if ((a2 & 0xFFFFFFu) > 0x91)
    {
      if ((a2 & 0xFFFFFFu) > 0xE2)
      {
        if ((a2 & 0xFFFFFFu) > 0x102)
        {
          if (v5 == 259) {
            goto LABEL_158;
          }
          if (v5 != 274) {
            goto LABEL_149;
          }
          goto LABEL_145;
        }
        if (v5 != 227 && v5 != 243) {
          goto LABEL_149;
        }
        goto LABEL_135;
      }
      if (v5 != 146)
      {
        if (v5 != 194 && v5 != 210) {
          goto LABEL_149;
        }
        uint64_t v4 = "applegpu_g12p";
        goto LABEL_150;
      }
LABEL_126:
      uint64_t v4 = "applegpu_g11g";
      goto LABEL_150;
    }
    if ((a2 & 0xFFFFFFu) > 0x71)
    {
      if (v5 != 114)
      {
        if (v5 == 115)
        {
LABEL_142:
          uint64_t v4 = "applegpu_g15s";
          goto LABEL_150;
        }
        if (v5 != 130)
        {
LABEL_149:
          uint64_t v4 = "unknown";
          goto LABEL_150;
        }
        goto LABEL_126;
      }
    }
    else
    {
      if (v5 == 97)
      {
        uint64_t v4 = "applegpu_g9g";
        goto LABEL_150;
      }
      if (v5 != 98)
      {
        if (v5 != 99) {
          goto LABEL_149;
        }
        goto LABEL_142;
      }
    }
    uint64_t v4 = "applegpu_g11p";
    goto LABEL_150;
  }
  if (a1 == 16777239 && a2)
  {
    uint64_t v3 = (*(void *)&a2 & 0xFFFFFFLL) - 1;
    if (v3 > 0xA) {
      goto LABEL_149;
    }
    uint64_t v4 = off_1E5220598[v3];
    goto LABEL_150;
  }
  id v6 = [NSString alloc];

  return [v6 initWithFormat:@"Unknown"];
}

void sub_1827405C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _Block_object_dispose(&a16, 8);
  uint64_t v24 = a22;
  a22 = 0;
  if (v24) {
    MEMORY[0x18530C120](v24, 0x1000C800CE834B2);
  }
  _Block_object_dispose((const void *)(v22 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t isAIRHeaderExtensionCommand(const load_command *a1, unint64_t *a2, unint64_t *a3, unsigned int *a4)
{
  if (a1->cmd != 49 || a1->cmdsize != 40) {
    return 0;
  }
  uint64_t v8 = 0;
  size_t v9 = (size_t)a1[4];
  for (uint64_t i = (const char **)&off_1E5220BC0; !v9 || strncmp((const char *)&a1[1], *i, v9); i += 2)
  {
    if (++v8 == 9) {
      return 0;
    }
  }
  *a2 = (unint64_t)a1[3];
  *a3 = (unint64_t)a1[4];
  *a4 = v8;
  return 1;
}

_DWORD *validateMachHeader(_DWORD *result, int a2)
{
  if (result)
  {
    if (*result == -17958193
      && ((int v2 = result[1], (v2 - 16777235) <= 4) ? (v3 = v2 == 16777238) : (v3 = 1),
          v3 ? (BOOL v4 = v2 == -1) : (BOOL v4 = 1),
          v4 && result[3] == a2))
    {
      return (_DWORD *)(result[7] == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,SectionData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SectionData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SectionData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SectionData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v13 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v13;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182741250(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1827419FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  MTLAirNTObject::~MTLAirNTObject((MTLAirNTObject *)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827420D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1] && v11[4] == a2[2] && v11[5] == a2[3]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x50uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  long long v16 = (*a4)[1];
  *((_OWORD *)v11 + 1) = **a4;
  *((_OWORD *)v11 + 2) = v16;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t v11 = *v24;
LABEL_48:
    *uint64_t v24 = v11;
    goto LABEL_49;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v25 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_182742310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18274277C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithData(uint64_t a1, _MTLDevice *a2, NSObject *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return MTLLibraryBuilder::newLibraryWithData(a1, a2, a3, 0, a4, a6, a7, a8);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    *unint64_t v20 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1827429C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::stitchingHashes(MTLLibraryDataWithArchive *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 34);
  if (!v1)
  {
    BOOL v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    uint64_t v1 = *((void *)this + 34);
    if (!v1)
    {
      unint64_t v21 = 0;
      size_t v22 = 0;
      uint64_t v23 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v21, *((void *)this + 63));
      for (uint64_t i = (uint64_t *)*((void *)this + 62); i; uint64_t i = (uint64_t *)*i)
      {
        long long v5 = *((_OWORD *)i + 2);
        v24[0] = *((_OWORD *)i + 1);
        v24[1] = v5;
        uint64_t v25 = i[6];
        uint64_t v6 = [objc_alloc(MEMORY[0x1E4F29238]) initWithBytes:v24 objCType:"{?=[32C]}"];
        uint64_t v7 = v6;
        unint64_t v8 = v22;
        if (v22 >= v23)
        {
          uint64_t v10 = (v22 - v21) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v11 = (v23 - v21) >> 2;
          if (v11 <= v10 + 1) {
            unint64_t v11 = v10 + 1;
          }
          if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v23, v12);
          }
          else {
            float v13 = 0;
          }
          float v14 = (uint64_t *)&v13[8 * v10];
          *float v14 = v7;
          uint8x8_t v9 = (char *)(v14 + 1);
          unint64_t v16 = v21;
          BOOL v15 = v22;
          if (v22 != v21)
          {
            do
            {
              uint64_t v17 = *((void *)v15 - 1);
              v15 -= 8;
              *--float v14 = v17;
            }
            while (v15 != v16);
            BOOL v15 = v21;
          }
          unint64_t v21 = (char *)v14;
          size_t v22 = v9;
          uint64_t v23 = &v13[8 * v12];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(void *)size_t v22 = v6;
          uint8x8_t v9 = v8 + 8;
        }
        size_t v22 = v9;
      }
      uint64_t v1 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:count:");
      *((void *)this + 34) = v1;
      size_t v18 = (id *)v21;
      uint64_t v19 = (id *)v22;
      if (v21 != v22)
      {
        do

        while (v18 != v19);
        uint64_t v1 = *((void *)this + 34);
        size_t v18 = (id *)v21;
      }
      if (v18)
      {
        size_t v22 = (char *)v18;
        operator delete(v18);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_182742BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::specializationHashes(MTLLibraryDataWithArchive *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 32);
  if (!v1)
  {
    BOOL v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    uint64_t v1 = *((void *)this + 32);
    if (!v1)
    {
      unint64_t v21 = 0;
      size_t v22 = 0;
      uint64_t v23 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v21, *((void *)this + 58));
      for (uint64_t i = (uint64_t *)*((void *)this + 57); i; uint64_t i = (uint64_t *)*i)
      {
        long long v5 = *((_OWORD *)i + 2);
        v24[0] = *((_OWORD *)i + 1);
        v24[1] = v5;
        uint64_t v25 = i[6];
        uint64_t v6 = [objc_alloc(MEMORY[0x1E4F29238]) initWithBytes:v24 objCType:"{?=[32C]}"];
        uint64_t v7 = v6;
        unint64_t v8 = v22;
        if (v22 >= v23)
        {
          uint64_t v10 = (v22 - v21) >> 3;
          if ((unint64_t)(v10 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v11 = (v23 - v21) >> 2;
          if (v11 <= v10 + 1) {
            unint64_t v11 = v10 + 1;
          }
          if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v23, v12);
          }
          else {
            float v13 = 0;
          }
          float v14 = (uint64_t *)&v13[8 * v10];
          *float v14 = v7;
          uint8x8_t v9 = (char *)(v14 + 1);
          unint64_t v16 = v21;
          BOOL v15 = v22;
          if (v22 != v21)
          {
            do
            {
              uint64_t v17 = *((void *)v15 - 1);
              v15 -= 8;
              *--float v14 = v17;
            }
            while (v15 != v16);
            BOOL v15 = v21;
          }
          unint64_t v21 = (char *)v14;
          size_t v22 = v9;
          uint64_t v23 = &v13[8 * v12];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          *(void *)size_t v22 = v6;
          uint8x8_t v9 = v8 + 8;
        }
        size_t v22 = v9;
      }
      uint64_t v1 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:count:");
      *((void *)this + 32) = v1;
      size_t v18 = (id *)v21;
      uint64_t v19 = (id *)v22;
      if (v21 != v22)
      {
        do

        while (v18 != v19);
        uint64_t v1 = *((void *)this + 32);
        size_t v18 = (id *)v21;
      }
      if (v18)
      {
        size_t v22 = (char *)v18;
        operator delete(v18);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_182742E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void std::vector<MTLSerializer::ObjectRef>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint8x8_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<MTLUINT256_t,objc_object  {objcproto13MTLLibrarySPI}*,UnorderedContainerHash,std::__unordered_map_hasher,true>,std::__unordered_map_equal<MTLUINT256_t,objc_object  {objcproto13MTLLibrarySPI}*,std::__unordered_map_hasher,std::__unordered_map_hasher,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  long long v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_48:
    *uint64_t v24 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18274317C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_182743404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1827434B8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t MTLRangeAllocatorInit(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a4 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a4;
  }
  if (a3 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a3;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 32) = v7 - 1;
  uint64_t result = allocElement(a1, 0);
  if (result)
  {
    unint64_t v9 = *(void **)a1;
    *unint64_t v9 = 0;
    v9[1] = a2;
  }
  return result;
}

uint64_t MTLRangeAllocatorInitWithStartRange(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a5 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a5;
  }
  if (a4 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = a4;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 32) = v9 - 1;
  uint64_t result = allocElement(a1, 0);
  if (result)
  {
    long long v11 = *(void **)a1;
    *long long v11 = a2;
    v11[1] = a3 + a2;
  }
  return result;
}

void *MTLRangeAllocatorDeallocate(void *result, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  unint64_t v5 = ((result[4] + a3) & ~result[4]) + a2;
  unint64_t v6 = v5 - 1;
  uint64_t v7 = *((unsigned int *)result + 2);
  if (!v7)
  {
    LODWORD(v10) = 0;
LABEL_23:
    uint64_t result = (void *)allocElement((uint64_t)result, v10);
    if (result)
    {
      BOOL v19 = (unint64_t *)(*v4 + 16 * v10);
      *BOOL v19 = a2;
      v19[1] = v6;
    }
    return result;
  }
  uint64_t v8 = (void *)*result;
  unint64_t v9 = *(void *)*result;
  if (v9 < a2)
  {
    uint64_t v10 = 0;
    long long v11 = v8 + 1;
    while (v7 - 1 != v10)
    {
      unint64_t v9 = v11[1];
      v11 += 2;
      ++v10;
      if (v9 >= a2)
      {
        BOOL v12 = *(v11 - 2) + 1 >= a2;
        goto LABEL_9;
      }
    }
    if (*v11 + 1 >= a2)
    {
      uint64_t v8 = (void *)*result;
LABEL_17:
      float v14 = &v8[2 * (v7 - 1)];
      unint64_t v16 = v14[1];
      BOOL v15 = v14 + 1;
      if (v6 > v16) {
        *BOOL v15 = v6;
      }
      return result;
    }
    LODWORD(v10) = *((_DWORD *)result + 2);
    goto LABEL_23;
  }
  LODWORD(v10) = 0;
  BOOL v12 = 0;
LABEL_9:
  if (!v12)
  {
    if (v5 >= v9)
    {
      unint64_t v13 = &v8[2 * v10];
      if (*v13 > a2) {
        *unint64_t v13 = a2;
      }
      return result;
    }
    goto LABEL_23;
  }
  if (v5 < v9)
  {
    LODWORD(v7) = v10;
    goto LABEL_17;
  }
  int v17 = v7 - 1;
  float v18 = &v8[2 * v10];
  v8[2 * (v10 - 1) + 1] = v18[1];
  *((_DWORD *)v4 + 2) = v17;

  return memmove(v18, v18 + 2, 16 * (v17 - v10));
}

uint64_t MTLRangeAllocatorAllocate(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    if (a4)
    {
      uint64_t v7 = a4 - 1;
      uint64_t v8 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v7 = v8;
    }
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = 0;
    uint64_t v11 = (v8 + a2) & ~v8;
    uint64_t v12 = *(void *)a1;
    for (unsigned int i = 1; ; ++i)
    {
      float v14 = (void *)(v12 + v10);
      uint64_t v15 = *(void *)(v12 + v10);
      unint64_t v16 = *(void *)(v12 + v10 + 8);
      uint64_t v17 = (v15 + v7) & ~v7;
      uint64_t v18 = v17 + v11;
      unint64_t v19 = v17 + v11 - 1;
      if (v19 <= v16) {
        break;
      }
      v10 += 16;
      if (16 * v9 == v10) {
        return 0;
      }
    }
    if (v17 == v15)
    {
      if (v19 == v16)
      {
        *(_DWORD *)(a1 + 8) = v9 - 1;
        memmove(v14, (const void *)(v12 + v10 + 16), 16 * (v9 - i));
      }
      else
      {
        *float v14 = v18;
      }
    }
    else if (v19 == v16)
    {
      v14[1] = v17 - 1;
    }
    else
    {
      uint64_t result = allocElement(a1, i);
      if (!result) {
        return result;
      }
      unint64_t v20 = (void *)(*(void *)a1 + v10);
      v20[1] = v17 - 1;
      v20[2] = v18;
      v20[3] = v16;
    }
    *a3 = v17;
    return 1;
  }
  return result;
}

uint64_t allocElement(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 != v4 || (uint64_t v6 = *(void *)(a1 + 24)) == 0)
  {
    if (*(void *)a1)
    {
      memmove((void *)(*(void *)a1 + 16 * a2 + 16), (const void *)(*(void *)a1 + 16 * a2), 16 * (v4 - a2));
LABEL_11:
      ++*(_DWORD *)(a1 + 8);
      return 1;
    }
    uint64_t v6 = *(void *)(a1 + 24);
  }
  uint64_t v7 = v6 + v5;
  if (v6 + v5)
  {
    uint64_t result = (uint64_t)malloc_type_malloc(16 * v7, 0x10F7EB30uLL);
    if (!result) {
      return result;
    }
    uint64_t v9 = result;
    if (*(void *)a1)
    {
      memmove((void *)result, *(const void **)a1, 16 * a2);
      memmove((void *)(v9 + 16 * a2 + 16), (const void *)(*(void *)a1 + 16 * a2), 16 * (*(_DWORD *)(a1 + 8) - a2));
      free(*(void **)a1);
    }
    *(void *)a1 = v9;
    *(void *)(a1 + 16) = v7;
    goto LABEL_11;
  }
  return 0;
}

void MTLPixelFormatGetInfo(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t *LoaderGlobalState::deallocFile(LoaderGlobalState *this, MTLLoadedFile *a2)
{
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t result = std::__hash_table<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::__unordered_map_hasher<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,FileIdentifier::Hash,std::equal_to<FileIdentifier>,true>,std::__unordered_map_equal<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::equal_to<FileIdentifier>,FileIdentifier::Hash,true>,std::allocator<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>>>::find<FileIdentifier>((void *)this + 2, &a2->_identity.dev);
  if (result)
  {
    if ((MTLLoadedFile *)result[4] == a2) {
      return (uint64_t *)std::__hash_table<std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::__unordered_map_hasher<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::hash<MTLLoadedFile *>,std::equal_to<MTLLoadedFile *>,true>,std::__unordered_map_equal<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::equal_to<MTLLoadedFile *>,std::hash<MTLLoadedFile *>,true>,std::allocator<std::__hash_value_type<MTLLoadedFile *,objc_object *>>>::erase(v3, result);
    }
  }
  return result;
}

void *___ZN17LoaderGlobalState8loadFileEP5NSURLPP7NSErrorP8NSStringl_block_invoke(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = (void *)(a1[6] + 16);
  int v12 = *(_DWORD *)v2;
  uint64_t v13 = *(void *)(v2 + 8);
  uint64_t result = std::__hash_table<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::__unordered_map_hasher<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,FileIdentifier::Hash,std::equal_to<FileIdentifier>,true>,std::__unordered_map_equal<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::equal_to<FileIdentifier>,FileIdentifier::Hash,true>,std::allocator<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>>>::find<FileIdentifier>(v3, &v12);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = (void *)result[4];
    uint64_t v7 = v6[3];
    if (v7 != *(void *)(a1[7] + 48)) {
      goto LABEL_13;
    }
    uint64_t result = (void *)time(0);
    unint64_t v8 = (unint64_t)result - v7;
    if ((uint64_t)result - v7 < 0) {
      unint64_t v8 = v7 - (void)result;
    }
    if (v8 >= 2)
    {

      uint64_t result = v6;
      *(void *)(*(void *)(a1[4] + 8) + 40) = result;
    }
    else
    {
LABEL_13:
      if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
        v5[4] = *(void *)(*(void *)(a1[4] + 8) + 40);
      }
    }
  }
  else if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    uint64_t v9 = a1[7];
    uint64_t v10 = *(void *)(a1[4] + 8);
    int v12 = *(_DWORD *)v9;
    uint64_t v11 = *(void *)(v10 + 40);
    uint64_t v13 = *(void *)(v9 + 8);
    uint64_t v14 = v11;
    return std::__hash_table<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::__unordered_map_hasher<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,FileIdentifier::Hash,std::equal_to<FileIdentifier>,true>,std::__unordered_map_equal<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::equal_to<FileIdentifier>,FileIdentifier::Hash,true>,std::allocator<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>>>::__emplace_unique_key_args<FileIdentifier,std::pair<FileIdentifier,MTLLoadedFile *>>((uint64_t)v3, &v12, (uint64_t)&v12);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::__unordered_map_hasher<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,FileIdentifier::Hash,std::equal_to<FileIdentifier>,true>,std::__unordered_map_equal<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::equal_to<FileIdentifier>,FileIdentifier::Hash,true>,std::allocator<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>>>::find<FileIdentifier>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = v4 ^ v3;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4 ^ v3;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t result = *v8; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v10 = result[1];
    if (v10 == v5)
    {
      if (*((_DWORD *)result + 4) == v3 && result[3] == v4) {
        return result;
      }
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v2) {
          v10 %= *(void *)&v2;
        }
      }
      else
      {
        v10 &= *(void *)&v2 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::__unordered_map_hasher<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,FileIdentifier::Hash,std::equal_to<FileIdentifier>,true>,std::__unordered_map_equal<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::equal_to<FileIdentifier>,FileIdentifier::Hash,true>,std::allocator<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>>>::__emplace_unique_key_args<FileIdentifier,std::pair<FileIdentifier,MTLLoadedFile *>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *((void *)a2 + 1);
  unint64_t v8 = v7 ^ v6;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7 ^ v6;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v6 && v12[3] == v7) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  int v12 = operator new(0x28uLL);
  *int v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v12[4] = *(void *)(a3 + 16);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *int v12 = *v22;
LABEL_42:
    *size_t v22 = v12;
    goto LABEL_43;
  }
  *int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    size_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_182744470(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::__unordered_map_hasher<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::hash<MTLLoadedFile *>,std::equal_to<MTLLoadedFile *>,true>,std::__unordered_map_equal<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::equal_to<MTLLoadedFile *>,std::hash<MTLLoadedFile *>,true>,std::allocator<std::__hash_value_type<MTLLoadedFile *,objc_object *>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = (void **)__p;
  __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::find<MTLHashKey>(void *a1, MTLHashKey *this)
{
  unint64_t v4 = MTLHashKey::hash(this);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (MTLHashKey::operator==(v11 + 2, this)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void sub_182744F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,MTLHashKey *a31)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void MTLCompilerRequest::~MTLCompilerRequest(MTLCompilerRequest *this)
{
  *(void *)this = &unk_1ECAC5A78;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    dispatch_release(v1);
  }

  JUMPOUT(0x18530C140);
}

{
  NSObject *v1;

  *(void *)this = &unk_1ECAC5A78;
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    dispatch_release(v1);
  }
}

void sub_182745724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, MTLHashKey *a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, MTLHashKey *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  a9 = &a14;
  std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a28);
  _Unwind_Resume(a1);
}

void sub_1827457A0()
{
}

void std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (MTLHashKey *)**a1;
  if (v2)
  {
    unint64_t v4 = (MTLHashKey *)v1[1];
    int8x8_t v5 = v2;
    if (v4 != v2)
    {
      do
        MTLHashKey::~MTLHashKey(v4 - 1);
      while (v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t MTLHashKey::MTLHashKey(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t a4)
{
  *(unsigned char *)(a1 + 16) = 4;
  *(_OWORD *)a1 = xmmword_1828D4A00;
  *(void *)(a1 + 56) = 0;
  unint64_t v8 = (char **)(a1 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<MTLUINT256_t>::reserve((void **)(a1 + 56), a4);
  uint8x8_t v10 = (void *)(a1 + 72);
  unint64_t v9 = *(void *)(a1 + 72);
  uint64_t v11 = *(_OWORD **)(a1 + 64);
  if ((unint64_t)v11 >= v9)
  {
    uint64_t v14 = ((char *)v11 - *v8) >> 5;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 59) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v9 - (void)*v8;
    if (v16 >> 4 > v15) {
      unint64_t v15 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(a1 + 72, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    unint64_t v19 = &v18[32 * v14];
    size_t v20 = &v18[32 * v17];
    long long v21 = a2[1];
    *(_OWORD *)unint64_t v19 = *a2;
    *((_OWORD *)v19 + 1) = v21;
    unint64_t v13 = (unint64_t *)(v19 + 32);
    unint64_t v23 = *(char **)(a1 + 56);
    size_t v22 = *(char **)(a1 + 64);
    if (v22 != v23)
    {
      do
      {
        long long v24 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v19 - 1) = v24;
        v19 -= 32;
        v22 -= 32;
      }
      while (v22 != v23);
      size_t v22 = *v8;
    }
    *(void *)(a1 + 56) = v19;
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v20;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v12 = a2[1];
    *uint64_t v11 = *a2;
    v11[1] = v12;
    unint64_t v13 = (unint64_t *)(v11 + 2);
  }
  *(void *)(a1 + 64) = v13;
  *(void *)a1 |= 1uLL;
  unint64_t v25 = 1;
  if (a4 >= 2 && !*(_DWORD *)(a3 + 4))
  {
    unint64_t v25 = 1;
    do
    {
      uint64_t v26 = &a2[2 * v25];
      if ((unint64_t)v13 >= *v10)
      {
        uint64_t v28 = ((char *)v13 - *v8) >> 5;
        if ((unint64_t)(v28 + 1) >> 59) {
LABEL_70:
        }
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        uint64_t v29 = *v10 - (void)*v8;
        uint64_t v30 = v29 >> 4;
        if (v29 >> 4 <= (unint64_t)(v28 + 1)) {
          uint64_t v30 = v28 + 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31) {
          unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(a1 + 72, v31);
        }
        else {
          unint64_t v32 = 0;
        }
        int v33 = &v32[32 * v28];
        long long v34 = v26[1];
        *(_OWORD *)int v33 = *v26;
        *((_OWORD *)v33 + 1) = v34;
        long long v36 = *(char **)(a1 + 56);
        int v35 = *(char **)(a1 + 64);
        uint64_t v37 = v33;
        if (v35 != v36)
        {
          do
          {
            long long v38 = *((_OWORD *)v35 - 1);
            *((_OWORD *)v37 - 2) = *((_OWORD *)v35 - 2);
            *((_OWORD *)v37 - 1) = v38;
            v37 -= 32;
            v35 -= 32;
          }
          while (v35 != v36);
          int v35 = *v8;
        }
        unint64_t v13 = (unint64_t *)(v33 + 32);
        *(void *)(a1 + 56) = v37;
        *(void *)(a1 + 64) = v33 + 32;
        *(void *)(a1 + 72) = &v32[32 * v31];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        long long v27 = v26[1];
        *(_OWORD *)unint64_t v13 = *v26;
        *((_OWORD *)v13 + 1) = v27;
        v13 += 4;
      }
      *(void *)(a1 + 64) = v13;
      *(void *)a1 += 1 << *(unsigned char *)(a1 + 16);
      ++v25;
    }
    while (v25 < a4 && !*(_DWORD *)(a3 + 4 * v25));
  }
  unint64_t v39 = *v8;
  if ((unint64_t)((char *)v13 - *v8) >= 0x21)
  {
    unint64_t v40 = (unint64_t *)(v39 + 32);
    unint64_t v41 = 126 - 2 * __clz(((char *)v13 - (v39 + 32)) >> 5);
    if (v13 == v40) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = v41;
    }
    std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*,false>(v40, (unint64_t)v13, v42, 1);
  }
  if (v25 < a4)
  {
    while (1)
    {
      if (!*(_DWORD *)(a3 + 4 * v25)) {
        goto LABEL_69;
      }
      unint64_t v43 = &a2[2 * v25];
      unint64_t v44 = *(_OWORD **)(a1 + 64);
      unint64_t v45 = *(void *)(a1 + 72);
      if ((unint64_t)v44 >= v45)
      {
        uint64_t v48 = ((char *)v44 - *v8) >> 5;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59) {
          goto LABEL_70;
        }
        uint64_t v50 = v45 - (void)*v8;
        if (v50 >> 4 > v49) {
          unint64_t v49 = v50 >> 4;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v51 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51) {
          unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(a1 + 72, v51);
        }
        else {
          unint64_t v52 = 0;
        }
        int v53 = &v52[32 * v48];
        long long v54 = v43[1];
        *(_OWORD *)int v53 = *v43;
        *((_OWORD *)v53 + 1) = v54;
        unint64_t v56 = *(char **)(a1 + 56);
        unint64_t v55 = *(char **)(a1 + 64);
        int v57 = v53;
        if (v55 != v56)
        {
          do
          {
            long long v58 = *((_OWORD *)v55 - 1);
            *((_OWORD *)v57 - 2) = *((_OWORD *)v55 - 2);
            *((_OWORD *)v57 - 1) = v58;
            v57 -= 32;
            v55 -= 32;
          }
          while (v55 != v56);
          unint64_t v55 = *v8;
        }
        unsigned int v47 = v53 + 32;
        *(void *)(a1 + 56) = v57;
        *(void *)(a1 + 64) = v53 + 32;
        *(void *)(a1 + 72) = &v52[32 * v51];
        if (v55) {
          operator delete(v55);
        }
      }
      else
      {
        long long v46 = v43[1];
        *unint64_t v44 = *v43;
        v44[1] = v46;
        unsigned int v47 = v44 + 2;
      }
      *(void *)(a1 + 64) = v47;
      int v59 = *(_DWORD *)(a3 + 4 * v25);
      if (v59 == 1032)
      {
        uint64_t v60 = 8;
        goto LABEL_67;
      }
      if (v59 == 1027) {
        break;
      }
      if (v59 == 1026)
      {
        uint64_t v60 = 2;
LABEL_67:
        *(void *)a1 |= v60;
      }
      if (++v25 == a4) {
        goto LABEL_69;
      }
    }
    uint64_t v60 = 4;
    goto LABEL_67;
  }
LABEL_69:
  CC_SHA256(*(const void **)(a1 + 56), (*(_DWORD *)(a1 + 64) - *(void *)(a1 + 56)) & 0xFFFFFFE0, (unsigned __int8 *)(a1 + 24));
  return a1;
}

void sub_182745C00(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<MTLHashKey>::__push_back_slow_path<MTLHashKey const&>(uint64_t *a1, const MTLHashKey *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint8x8_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLHashKey>>(v7, v9);
  }
  else {
    uint8x8_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = (MTLHashKey *)&v10[80 * v4];
  uint64_t v16 = &v10[80 * v9];
  MTLHashKey::MTLHashKey(v14, a2);
  unint64_t v15 = v14 + 1;
  std::vector<MTLHashKey>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<MTLHashKey>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_182745D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MTLHashKey>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLHashKey>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLHashKey>,std::reverse_iterator<MTLHashKey*>,std::reverse_iterator<MTLHashKey*>,std::reverse_iterator<MTLHashKey*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<MTLHashKey>::__init_with_size[abi:ne180100]<MTLHashKey*,MTLHashKey*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<MTLHashKey>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLHashKey>,MTLHashKey*,MTLHashKey*,MTLHashKey*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_182745E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<MTLHashKey>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLHashKey>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLHashKey>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLHashKey>,std::reverse_iterator<MTLHashKey*>,std::reverse_iterator<MTLHashKey*>,std::reverse_iterator<MTLHashKey*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 80;
  while (a3 + v10 != a5)
  {
    long long v12 = (MTLHashKey *)(v11 + v10);
    v10 -= 80;
    MTLHashKey::MTLHashKey(v12, (const MTLHashKey *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLHashKey>,MTLHashKey*,MTLHashKey*,MTLHashKey*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      MTLHashKey::MTLHashKey((MTLHashKey *)(a4 + v7), (const MTLHashKey *)(a2 + v7));
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_182746004(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 80;
    do
    {
      MTLHashKey::~MTLHashKey((MTLHashKey *)(v4 + v2));
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<MTLHashKey>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    MTLHashKey::~MTLHashKey((MTLHashKey *)(i - 80));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<MTLHashKey,std::pair<MTLHashKey const,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(uint64_t a1, MTLHashKey *this, uint64_t a3)
{
  unint64_t v7 = MTLHashKey::hash(this);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    long long v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (MTLHashKey::operator==(v13 + 2, this)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__construct_node_hash<std::pair<MTLHashKey const,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *long long v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v13 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v24, 0);
  return v13;
}

void sub_1827462D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t MTLHashKey::hash(MTLHashKey *this)
{
  return *(void *)this->var1.var0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      MTLHashKey::~MTLHashKey((MTLHashKey *)(v2 + 16));
    }
    operator delete((void *)v2);
  }
}

__n128 std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__construct_node_hash<std::pair<MTLHashKey const,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x80uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  MTLHashKey::MTLHashKey((MTLHashKey *)(v8 + 16), (const MTLHashKey *)a3);
  __n128 result = *(__n128 *)(a3 + 80);
  long long v10 = *(_OWORD *)(a3 + 96);
  *((__n128 *)v8 + 6) = result;
  *((_OWORD *)v8 + 7) = v10;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1827463B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::vector<MTLHashKey>>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((void *)v10 + 2) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  long long v12 = (void *)(a1 + 16);
  long long v10 = (char *)operator new(0x30uLL);
  *(void *)long long v10 = 0;
  *((void *)v10 + 1) = v6;
  *((void *)v10 + 2) = *(void *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((void *)v10 + 5) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)long long v10 = *v20;
LABEL_38:
    *size_t v20 = v10;
    goto LABEL_39;
  }
  *(void *)long long v10 = *v12;
  *long long v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v21 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_182746614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

BOOL MTLHashKey::operator==(void *a1, void *a2)
{
  if (*a2 != *a1) {
    return 0;
  }
  return a2[3] == a1[3] && a2[4] == a1[4] && a2[5] == a1[5] && a2[6] == a1[6];
}

void *std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

NSObject *_MTLNewReflectionBlock(NSObject *a1, dispatch_data_t data, NSObject *a3)
{
  concat = data;
  long long v15 = xmmword_1828F0730;
  uint64_t v22 = 0;
  if (data) {
    size_t size = dispatch_data_get_size(data);
  }
  else {
    size_t size = 0;
  }
  size_t v19 = size;
  if (a1) {
    size_t v7 = dispatch_data_get_size(a1);
  }
  else {
    size_t v7 = 0;
  }
  size_t v17 = v7;
  if (a3) {
    size_t v8 = dispatch_data_get_size(a3);
  }
  else {
    size_t v8 = 0;
  }
  uint64_t v9 = size + 80;
  if (concat == a3) {
    uint64_t v9 = 80;
  }
  uint64_t v20 = v9;
  size_t v21 = v8;
  size_t v10 = v8 + v9;
  if (!a1) {
    size_t v10 = 0;
  }
  uint64_t v18 = 80;
  size_t v16 = v10;
  unint64_t v11 = dispatch_data_create(&v15, 0x50uLL, 0, 0);
  if ((unint64_t)concat | (unint64_t)a3)
  {
    if (concat != a3)
    {
      if (concat && a3)
      {
        concat = dispatch_data_create_concat(concat, a3);
        if (!concat) {
          goto LABEL_24;
        }
LABEL_23:
        dispatch_data_t v12 = dispatch_data_create_concat(v11, concat);
        dispatch_release(concat);
        dispatch_release(v11);
        unint64_t v11 = v12;
        goto LABEL_24;
      }
      if (!concat) {
        concat = a3;
      }
    }
    dispatch_retain(concat);
    if (!concat) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_24:
  if (a1)
  {
    dispatch_data_t v13 = dispatch_data_create_concat(v11, a1);
    dispatch_release(v11);
    return v13;
  }
  return v11;
}

uint64_t MTLGetReflectionFlags(NSObject *a1)
{
  if (!a1) {
    return 0;
  }
  size_t v5 = 0;
  buffer_ptr = 0;
  uint64_t v1 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &v5);
  if (*(void *)buffer_ptr == 0x8EF13C710)
  {
    if (*((void *)buffer_ptr + 7)) {
      int v2 = (2 * (*((void *)buffer_ptr + 5) != 0)) | 4;
    }
    else {
      int v2 = 2 * (*((void *)buffer_ptr + 5) != 0);
    }
    uint64_t v3 = v2 | (*((void *)buffer_ptr + 3) != 0);
  }
  else
  {
    uint64_t v3 = 0;
  }
  dispatch_release(v1);
  return v3;
}

void sub_1827470EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

unint64_t deserializeArguments(void *a1, unsigned int *a2, uint64_t a3, void *a4, void **a5, char a6, _DWORD *a7)
{
  if (a2)
  {
    uint64_t v8 = *a2;
    long long v54 = 0;
    unint64_t v55 = 0;
    unint64_t v56 = 0;
    __p = 0;
    unint64_t v52 = 0;
    int v53 = 0;
    if (v8)
    {
      uint64_t v12 = 0;
      unsigned int v13 = 0;
      unsigned int v14 = 0;
      unint64_t v49 = a2 + 1;
      do
      {
        uint64_t v50 = 0;
        uint64_t v15 = deserializeArgument(a1, &v49[v12], a3, a4, &v50);
        size_t v16 = v50;
        if (v50
          && [(NSString *)v50->super._name isEqualToString:@"trace.buffer"]
          && (*a7 = [(MTLBindingInternal *)v16 index], (a6 & 1) == 0))
        {
        }
        else
        {
          v13 += HIDWORD(v15);
          v14 += v15;
          if (v15)
          {
            size_t v17 = v52;
            if (v52 >= v53)
            {
              uint64_t v21 = (v52 - (unsigned char *)__p) >> 3;
              if ((unint64_t)(v21 + 1) >> 61) {
                goto LABEL_62;
              }
              unint64_t v22 = (v53 - (unsigned char *)__p) >> 2;
              if (v22 <= v21 + 1) {
                unint64_t v22 = v21 + 1;
              }
              if ((unint64_t)(v53 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v22;
              }
              if (v23) {
                long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v53, v23);
              }
              else {
                long long v24 = 0;
              }
              uint64_t v29 = (MTLBuiltInMeshArgument **)&v24[8 * v21];
              *uint64_t v29 = v16;
              uint64_t v18 = (char *)(v29 + 1);
              unint64_t v31 = (char *)__p;
              uint64_t v30 = v52;
              if (v52 != __p)
              {
                do
                {
                  unint64_t v32 = (MTLBuiltInMeshArgument *)*((void *)v30 - 1);
                  v30 -= 8;
                  *--uint64_t v29 = v32;
                }
                while (v30 != v31);
                uint64_t v30 = (char *)__p;
              }
              __p = v29;
              unint64_t v52 = v18;
              int v53 = &v24[8 * v23];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(void *)unint64_t v52 = v16;
              uint64_t v18 = v17 + 8;
            }
            unint64_t v52 = v18;
          }
          else if (HIDWORD(v15))
          {
            size_t v19 = v55;
            if (v55 >= v56)
            {
              uint64_t v25 = (v55 - (unsigned char *)v54) >> 3;
              if ((unint64_t)(v25 + 1) >> 61) {
LABEL_62:
              }
                std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
              unint64_t v26 = (v56 - (unsigned char *)v54) >> 2;
              if (v26 <= v25 + 1) {
                unint64_t v26 = v25 + 1;
              }
              if ((unint64_t)(v56 - (unsigned char *)v54) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              if (v27) {
                uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v56, v27);
              }
              else {
                uint64_t v28 = 0;
              }
              int v33 = (MTLBuiltInMeshArgument **)&v28[8 * v25];
              *int v33 = v16;
              uint64_t v20 = (char *)(v33 + 1);
              int v35 = (char *)v54;
              long long v34 = v55;
              if (v55 != v54)
              {
                do
                {
                  long long v36 = (MTLBuiltInMeshArgument *)*((void *)v34 - 1);
                  v34 -= 8;
                  *--int v33 = v36;
                }
                while (v34 != v35);
                long long v34 = (char *)v54;
              }
              long long v54 = v33;
              unint64_t v55 = v20;
              unint64_t v56 = &v28[8 * v27];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *(void *)unint64_t v55 = v16;
              uint64_t v20 = v19 + 8;
            }
            unint64_t v55 = v20;
          }
        }
        ++v12;
      }
      while (v12 != v8);
    }
    else
    {
      unsigned int v14 = 0;
      unsigned int v13 = 0;
    }
  }
  else
  {
    unsigned int v14 = 0;
    unsigned int v13 = 0;
    long long v54 = 0;
    unint64_t v55 = 0;
    unint64_t v56 = 0;
    __p = 0;
    unint64_t v52 = 0;
    int v53 = 0;
  }
  *a5 = malloc_type_malloc(8 * v13, 0x80040B8603338uLL);
  uint64_t v37 = (char *)v54;
  long long v38 = v55;
  if (v54 == v55)
  {
    uint64_t v41 = 0;
  }
  else
  {
    int v39 = 0;
    uint64_t v40 = 0;
    do
    {
      *(void *)((char *)*a5 + v40) = *(void *)&v37[v40];
      v40 += 8;
      --v39;
    }
    while (&v37[v40] != v38);
    uint64_t v41 = -v39;
  }
  uint64_t v42 = (char *)__p;
  unint64_t v43 = v52;
  if (__p != v52)
  {
    uint64_t v44 = 8 * v41;
    do
    {
      uint64_t v45 = *(void *)v42;
      v42 += 8;
      *(void *)((char *)*a5 + v44) = v45;
      v44 += 8;
    }
    while (v42 != v43);
    uint64_t v42 = (char *)__p;
  }
  if (v42)
  {
    unint64_t v52 = v42;
    operator delete(v42);
  }
  if (v54)
  {
    unint64_t v55 = (char *)v54;
    operator delete(v54);
  }
  return v14 | ((unint64_t)v13 << 32);
}

void sub_182747658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t deserializeArgument(void *a1, unsigned int *a2, uint64_t a3, void *a4, MTLBuiltInMeshArgument **a5)
{
  uint64_t v6 = a3 + 4;
  size_t v7 = (unsigned int *)(a3 + 4 + 4 * *a2);
  uint64_t v8 = (AirReflection::Node *)((char *)v7 + *v7);
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *(int *)v8);
  if (*v9 < 5u)
  {
    LODWORD(v10) = 0;
    goto LABEL_9;
  }
  uint64_t v10 = v9[2];
  if (!v10)
  {
LABEL_9:
    AirReflection::EnumNameNodeType(v10);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    return v15 | v14;
  }
  uint64_t v14 = 0;
  LODWORD(v10) = *(_DWORD *)((char *)v8 + v10);
  if ((int)v10 < 270336)
  {
    uint64_t v15 = 0;
    switch((int)v10)
    {
      case 266240:
        size_t v16 = (int *)AirReflection::Node::node_as_ThreadPositionInGridArg(v8);
        uint64_t v17 = *v16;
        uint64_t v18 = -v17;
        size_t v19 = (unsigned __int16 *)((char *)v16 - v17);
        if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v16 + v20 + *(unsigned int *)((char *)v16 + v20) + 4];
          uint64_t v18 = -(uint64_t)*v16;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v243 = (unsigned __int16 *)((char *)v16 + v18);
        if (*v243 < 7u)
        {
          uint64_t v244 = 0;
        }
        else
        {
          uint64_t v244 = v243[3];
          if (v244) {
            v244 += (uint64_t)v16 + *(unsigned int *)((char *)v16 + v244);
          }
        }
        int v345 = (const void *)(v244 + 4);
        size_t v346 = strlen((const char *)(v244 + 4));
        uint64_t v309 = dataTypeFromString(v345, v346);
        int v310 = [MTLBuiltInArgument alloc];
        int v347 = (unsigned __int16 *)((char *)v16 - *v16);
        v313 = *v347 < 0xBu || (uint64_t v348 = v347[5]) == 0 || *((unsigned __int8 *)v16 + v348) == 0;
        uint64_t v314 = 5;
        goto LABEL_475;
      case 266241:
        int v87 = (int *)AirReflection::Node::node_as_ThreadsPerGridArg(v8);
        uint64_t v88 = *v87;
        uint64_t v89 = -v88;
        unint64_t v90 = (unsigned __int16 *)((char *)v87 - v88);
        if (*v90 >= 9u && (uint64_t v91 = v90[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v87 + v91 + *(unsigned int *)((char *)v87 + v91) + 4];
          uint64_t v89 = -(uint64_t)*v87;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v251 = (unsigned __int16 *)((char *)v87 + v89);
        if (*v251 < 7u)
        {
          uint64_t v252 = 0;
        }
        else
        {
          uint64_t v252 = v251[3];
          if (v252) {
            v252 += (uint64_t)v87 + *(unsigned int *)((char *)v87 + v252);
          }
        }
        int v367 = (const void *)(v252 + 4);
        size_t v368 = strlen((const char *)(v252 + 4));
        uint64_t v309 = dataTypeFromString(v367, v368);
        int v310 = [MTLBuiltInArgument alloc];
        int v369 = (unsigned __int16 *)((char *)v87 - *v87);
        v313 = *v369 < 0xBu || (uint64_t v370 = v369[5]) == 0 || *((unsigned __int8 *)v87 + v370) == 0;
        uint64_t v314 = 6;
        goto LABEL_475;
      case 266242:
        unint64_t v92 = (int *)AirReflection::Node::node_as_ThreadgroupPositionInGridArg(v8);
        uint64_t v93 = *v92;
        uint64_t v94 = -v93;
        uint64_t v95 = (unsigned __int16 *)((char *)v92 - v93);
        if (*v95 >= 9u && (uint64_t v96 = v95[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v92 + v96 + *(unsigned int *)((char *)v92 + v96) + 4];
          uint64_t v94 = -(uint64_t)*v92;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v253 = (unsigned __int16 *)((char *)v92 + v94);
        if (*v253 < 7u)
        {
          uint64_t v254 = 0;
        }
        else
        {
          uint64_t v254 = v253[3];
          if (v254) {
            v254 += (uint64_t)v92 + *(unsigned int *)((char *)v92 + v254);
          }
        }
        int v371 = (const void *)(v254 + 4);
        size_t v372 = strlen((const char *)(v254 + 4));
        uint64_t v309 = dataTypeFromString(v371, v372);
        int v310 = [MTLBuiltInArgument alloc];
        v373 = (unsigned __int16 *)((char *)v92 - *v92);
        v313 = *v373 < 0xBu || (uint64_t v374 = v373[5]) == 0 || *((unsigned __int8 *)v92 + v374) == 0;
        uint64_t v314 = 10;
        goto LABEL_475;
      case 266243:
        BOOL v97 = (int *)AirReflection::Node::node_as_ThreadgroupsPerGridArg(v8);
        uint64_t v98 = *v97;
        uint64_t v99 = -v98;
        __int16 v100 = (unsigned __int16 *)((char *)v97 - v98);
        if (*v100 >= 9u && (uint64_t v101 = v100[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v97 + v101 + *(unsigned int *)((char *)v97 + v101) + 4];
          uint64_t v99 = -(uint64_t)*v97;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v255 = (unsigned __int16 *)((char *)v97 + v99);
        if (*v255 < 7u)
        {
          uint64_t v256 = 0;
        }
        else
        {
          uint64_t v256 = v255[3];
          if (v256) {
            v256 += (uint64_t)v97 + *(unsigned int *)((char *)v97 + v256);
          }
        }
        int v375 = (const void *)(v256 + 4);
        size_t v376 = strlen((const char *)(v256 + 4));
        uint64_t v309 = dataTypeFromString(v375, v376);
        int v310 = [MTLBuiltInArgument alloc];
        v377 = (unsigned __int16 *)((char *)v97 - *v97);
        v313 = *v377 < 0xBu || (uint64_t v378 = v377[5]) == 0 || *((unsigned __int8 *)v97 + v378) == 0;
        uint64_t v314 = 11;
        goto LABEL_475;
      case 266244:
        unint64_t v102 = (int *)AirReflection::Node::node_as_ThreadPositionInThreadgroupArg(v8);
        uint64_t v103 = *v102;
        uint64_t v104 = -v103;
        int v105 = (unsigned __int16 *)((char *)v102 - v103);
        if (*v105 >= 9u && (uint64_t v106 = v105[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v102 + v106 + *(unsigned int *)((char *)v102 + v106) + 4];
          uint64_t v104 = -(uint64_t)*v102;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v257 = (unsigned __int16 *)((char *)v102 + v104);
        if (*v257 < 7u)
        {
          uint64_t v258 = 0;
        }
        else
        {
          uint64_t v258 = v257[3];
          if (v258) {
            v258 += (uint64_t)v102 + *(unsigned int *)((char *)v102 + v258);
          }
        }
        v379 = (const void *)(v258 + 4);
        size_t v380 = strlen((const char *)(v258 + 4));
        uint64_t v309 = dataTypeFromString(v379, v380);
        int v310 = [MTLBuiltInArgument alloc];
        int v381 = (unsigned __int16 *)((char *)v102 - *v102);
        v313 = *v381 < 0xBu || (uint64_t v382 = v381[5]) == 0 || *((unsigned __int8 *)v102 + v382) == 0;
        uint64_t v314 = 7;
        goto LABEL_475;
      case 266245:
        unint64_t v107 = (int *)AirReflection::Node::node_as_ThreadsPerThreadgroupArg(v8);
        uint64_t v108 = *v107;
        uint64_t v109 = -v108;
        uint64_t v110 = (unsigned __int16 *)((char *)v107 - v108);
        if (*v110 >= 9u && (uint64_t v111 = v110[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v107 + v111 + *(unsigned int *)((char *)v107 + v111) + 4];
          uint64_t v109 = -(uint64_t)*v107;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v259 = (unsigned __int16 *)((char *)v107 + v109);
        if (*v259 < 7u)
        {
          uint64_t v260 = 0;
        }
        else
        {
          uint64_t v260 = v259[3];
          if (v260) {
            v260 += (uint64_t)v107 + *(unsigned int *)((char *)v107 + v260);
          }
        }
        int v383 = (const void *)(v260 + 4);
        size_t v384 = strlen((const char *)(v260 + 4));
        uint64_t v309 = dataTypeFromString(v383, v384);
        int v310 = [MTLBuiltInArgument alloc];
        int v385 = (unsigned __int16 *)((char *)v107 - *v107);
        v313 = *v385 < 0xBu || (uint64_t v386 = v385[5]) == 0 || *((unsigned __int8 *)v107 + v386) == 0;
        uint64_t v314 = 9;
        goto LABEL_475;
      case 266246:
      case 266249:
      case 266254:
      case 266255:
      case 266256:
      case 266258:
      case 266259:
      case 266260:
        return v15 | v14;
      case 266247:
        int64_t v112 = (int *)AirReflection::Node::node_as_ThreadIndexInThreadgroupArg(v8);
        uint64_t v113 = *v112;
        uint64_t v114 = -v113;
        int v115 = (unsigned __int16 *)((char *)v112 - v113);
        if (*v115 >= 9u && (uint64_t v116 = v115[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v112 + v116 + *(unsigned int *)((char *)v112 + v116) + 4];
          uint64_t v114 = -(uint64_t)*v112;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v261 = (unsigned __int16 *)((char *)v112 + v114);
        if (*v261 < 7u)
        {
          uint64_t v262 = 0;
        }
        else
        {
          uint64_t v262 = v261[3];
          if (v262) {
            v262 += (uint64_t)v112 + *(unsigned int *)((char *)v112 + v262);
          }
        }
        int v387 = (const void *)(v262 + 4);
        size_t v388 = strlen((const char *)(v262 + 4));
        uint64_t v309 = dataTypeFromString(v387, v388);
        int v310 = [MTLBuiltInArgument alloc];
        int v389 = (unsigned __int16 *)((char *)v112 - *v112);
        v313 = *v389 < 0xBu || (uint64_t v390 = v389[5]) == 0 || *((unsigned __int8 *)v112 + v390) == 0;
        uint64_t v314 = 8;
        goto LABEL_475;
      case 266248:
        unint64_t v117 = (int *)AirReflection::Node::node_as_ThreadExecutionWidthArg(v8);
        uint64_t v118 = *v117;
        uint64_t v119 = -v118;
        unint64_t v120 = (unsigned __int16 *)((char *)v117 - v118);
        if (*v120 >= 9u && (uint64_t v121 = v120[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v117 + v121 + *(unsigned int *)((char *)v117 + v121) + 4];
          uint64_t v119 = -(uint64_t)*v117;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v263 = (unsigned __int16 *)((char *)v117 + v119);
        if (*v263 < 7u)
        {
          uint64_t v264 = 0;
        }
        else
        {
          uint64_t v264 = v263[3];
          if (v264) {
            v264 += (uint64_t)v117 + *(unsigned int *)((char *)v117 + v264);
          }
        }
        int v391 = (const void *)(v264 + 4);
        size_t v392 = strlen((const char *)(v264 + 4));
        uint64_t v309 = dataTypeFromString(v391, v392);
        int v310 = [MTLBuiltInArgument alloc];
        int v393 = (unsigned __int16 *)((char *)v117 - *v117);
        v313 = *v393 < 0xBu || (uint64_t v394 = v393[5]) == 0 || *((unsigned __int8 *)v117 + v394) == 0;
        uint64_t v314 = 12;
        goto LABEL_475;
      case 266250:
        int v122 = (int *)AirReflection::Node::node_as_StageInGridOriginArg(v8);
        uint64_t v123 = *v122;
        uint64_t v124 = -v123;
        uint64_t v125 = (unsigned __int16 *)((char *)v122 - v123);
        if (*v125 >= 9u && (uint64_t v126 = v125[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v122 + v126 + *(unsigned int *)((char *)v122 + v126) + 4];
          uint64_t v124 = -(uint64_t)*v122;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        v265 = (unsigned __int16 *)((char *)v122 + v124);
        if (*v265 < 7u)
        {
          uint64_t v266 = 0;
        }
        else
        {
          uint64_t v266 = v265[3];
          if (v266) {
            v266 += (uint64_t)v122 + *(unsigned int *)((char *)v122 + v266);
          }
        }
        int v395 = (const void *)(v266 + 4);
        size_t v396 = strlen((const char *)(v266 + 4));
        uint64_t v309 = dataTypeFromString(v395, v396);
        int v310 = [MTLBuiltInArgument alloc];
        int v397 = (unsigned __int16 *)((char *)v122 - *v122);
        v313 = *v397 < 0xBu || (uint64_t v398 = v397[5]) == 0 || *((unsigned __int8 *)v122 + v398) == 0;
        uint64_t v314 = 15;
        goto LABEL_475;
      case 266251:
        unint64_t v127 = (int *)AirReflection::Node::node_as_StageInGridSizeArg(v8);
        uint64_t v128 = *v127;
        uint64_t v129 = -v128;
        unint64_t v130 = (unsigned __int16 *)((char *)v127 - v128);
        if (*v130 >= 9u && (uint64_t v131 = v130[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v127 + v131 + *(unsigned int *)((char *)v127 + v131) + 4];
          uint64_t v129 = -(uint64_t)*v127;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v267 = (unsigned __int16 *)((char *)v127 + v129);
        if (*v267 < 7u)
        {
          uint64_t v268 = 0;
        }
        else
        {
          uint64_t v268 = v267[3];
          if (v268) {
            v268 += (uint64_t)v127 + *(unsigned int *)((char *)v127 + v268);
          }
        }
        int v399 = (const void *)(v268 + 4);
        size_t v400 = strlen((const char *)(v268 + 4));
        uint64_t v309 = dataTypeFromString(v399, v400);
        int v310 = [MTLBuiltInArgument alloc];
        int v401 = (unsigned __int16 *)((char *)v127 - *v127);
        v313 = *v401 < 0xBu || (uint64_t v402 = v401[5]) == 0 || *((unsigned __int8 *)v127 + v402) == 0;
        uint64_t v314 = 16;
        goto LABEL_475;
      case 266252:
        uint64_t v132 = (int *)AirReflection::Node::node_as_ThreadIndexInSimdgroupArg(v8);
        uint64_t v133 = *v132;
        uint64_t v134 = -v133;
        unint64_t v135 = (unsigned __int16 *)((char *)v132 - v133);
        if (*v135 >= 9u && (uint64_t v136 = v135[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v132 + v136 + *(unsigned int *)((char *)v132 + v136) + 4];
          uint64_t v134 = -(uint64_t)*v132;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v269 = (unsigned __int16 *)((char *)v132 + v134);
        if (*v269 < 7u)
        {
          uint64_t v270 = 0;
        }
        else
        {
          uint64_t v270 = v269[3];
          if (v270) {
            v270 += (uint64_t)v132 + *(unsigned int *)((char *)v132 + v270);
          }
        }
        int v403 = (const void *)(v270 + 4);
        size_t v404 = strlen((const char *)(v270 + 4));
        uint64_t v309 = dataTypeFromString(v403, v404);
        int v310 = [MTLBuiltInArgument alloc];
        int v405 = (unsigned __int16 *)((char *)v132 - *v132);
        v313 = *v405 < 0xBu || (uint64_t v406 = v405[5]) == 0 || *((unsigned __int8 *)v132 + v406) == 0;
        uint64_t v314 = 18;
        goto LABEL_475;
      case 266253:
        uint64_t v137 = (int *)AirReflection::Node::node_as_ThreadsPerSimdgroupArg(v8);
        uint64_t v138 = *v137;
        uint64_t v139 = -v138;
        int v140 = (unsigned __int16 *)((char *)v137 - v138);
        if (*v140 >= 9u && (uint64_t v141 = v140[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v137 + v141 + *(unsigned int *)((char *)v137 + v141) + 4];
          uint64_t v139 = -(uint64_t)*v137;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v271 = (unsigned __int16 *)((char *)v137 + v139);
        if (*v271 < 7u)
        {
          uint64_t v272 = 0;
        }
        else
        {
          uint64_t v272 = v271[3];
          if (v272) {
            v272 += (uint64_t)v137 + *(unsigned int *)((char *)v137 + v272);
          }
        }
        int v407 = (const void *)(v272 + 4);
        size_t v408 = strlen((const char *)(v272 + 4));
        uint64_t v309 = dataTypeFromString(v407, v408);
        int v310 = [MTLBuiltInArgument alloc];
        int v409 = (unsigned __int16 *)((char *)v137 - *v137);
        v313 = *v409 < 0xBu || (uint64_t v410 = v409[5]) == 0 || *((unsigned __int8 *)v137 + v410) == 0;
        uint64_t v314 = 20;
        goto LABEL_475;
      case 266257:
        long long v142 = (int *)AirReflection::Node::node_as_ThreadIndexInQuadgroupArg(v8);
        uint64_t v143 = *v142;
        uint64_t v144 = -v143;
        long long v145 = (unsigned __int16 *)((char *)v142 - v143);
        if (*v145 >= 9u && (uint64_t v146 = v145[4]) != 0)
        {
          uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v142 + v146 + *(unsigned int *)((char *)v142 + v146) + 4];
          uint64_t v144 = -(uint64_t)*v142;
        }
        else
        {
          uint64_t v21 = &stru_1ECAC84A8;
        }
        int v273 = (unsigned __int16 *)((char *)v142 + v144);
        if (*v273 < 7u)
        {
          uint64_t v274 = 0;
        }
        else
        {
          uint64_t v274 = v273[3];
          if (v274) {
            v274 += (uint64_t)v142 + *(unsigned int *)((char *)v142 + v274);
          }
        }
        int v411 = (const void *)(v274 + 4);
        size_t v412 = strlen((const char *)(v274 + 4));
        uint64_t v309 = dataTypeFromString(v411, v412);
        int v310 = [MTLBuiltInArgument alloc];
        int v413 = (unsigned __int16 *)((char *)v142 - *v142);
        v313 = *v413 < 0xBu || (uint64_t v414 = v413[5]) == 0 || *((unsigned __int8 *)v142 + v414) == 0;
        uint64_t v314 = 17;
        goto LABEL_475;
      default:
        uint64_t v15 = 0;
        switch((int)v10)
        {
          case 262144:
            unint64_t v23 = (int *)AirReflection::Node::node_as_BufferArg(v8);
            uint64_t v24 = *v23;
            uint64_t v25 = -v24;
            unint64_t v26 = (unsigned __int16 *)((char *)v23 - v24);
            if (*v26 >= 0x1Bu && (uint64_t v27 = v26[13]) != 0)
            {
              uint64_t v28 = (__CFString *)[NSString stringWithUTF8String:(char *)v23 + v27 + *(unsigned int *)((char *)v23 + v27) + 4];
              uint64_t v25 = -(uint64_t)*v23;
            }
            else
            {
              uint64_t v28 = &stru_1ECAC84A8;
            }
            int v245 = (unsigned __int16 *)((char *)v23 + v25);
            if (*v245 < 0x19u)
            {
              uint64_t v246 = 0;
            }
            else
            {
              uint64_t v246 = v245[12];
              if (v246) {
                v246 += (uint64_t)v23 + *(unsigned int *)((char *)v23 + v246);
              }
            }
            v349 = (const void *)(v246 + 4);
            size_t v350 = strlen((const char *)(v246 + 4));
            unint64_t v351 = pixelFormatAndALUTypeFromString(v349, v350);
            int v352 = (unsigned __int16 *)((char *)v23 - *v23);
            unsigned int v353 = *v352;
            if (v353 >= 0x17 && v352[11]) {
              LODWORD(v354) = *(int *)((char *)v23 + v352[11]);
            }
            else {
              LOWORD(v354) = 0;
            }
            unint64_t v355 = a4[5] + a4[4] - 1;
            uint64_t v356 = *(void *)(a4[1] + 8 * (v355 / 0x49));
            unint64_t v357 = v355 % 0x49;
            if (!*(unsigned char *)(v356 + 56 * v357 + 8)) {
              goto LABEL_511;
            }
            if (v353 < 7)
            {
              BOOL v458 = 0;
              uint64_t v457 = 0;
              goto LABEL_661;
            }
            if (v352[3])
            {
              unsigned int v358 = *(int *)((char *)v23 + v352[3]);
            }
            else
            {
LABEL_511:
              if (v353 >= 0x15)
              {
                __int16 v579 = (__int16)v354;
                if (v352[10]) {
                  uint64_t v457 = *(unsigned int *)((char *)v23 + v352[10]);
                }
                else {
                  uint64_t v457 = 0;
                }
LABEL_653:
                int v354 = v28;
                if (v352[7]) {
                  int v550 = *((unsigned __int8 *)v23 + v352[7]);
                }
                else {
                  int v550 = 1;
                }
                BOOL v458 = v550 == 2;
                if (v353 >= 0x11)
                {
                  unsigned __int16 v551 = v352[8];
                  LOBYTE(v582) = 1;
                  uint64_t v581 = v457;
                  if (v551)
                  {
                    ContextStack::ContextStack((ContextStack *)v583, *(MTLFunctionType *)(v356 + 56 * v357), 1);
                    std::deque<ContextStack>::push_back(a4, v583);
                    ContextStack::~ContextStack((ContextStack *)v583);
                    v363 = (void *)deserializeStructArgument(a1, (char *)v23 + v551, a3, a4, &v582);
                    std::deque<ContextStack>::pop_back(a4);
                    uint64_t v500 = 1;
                    if (v550 != 2)
                    {
                      char v555 = 0;
                      uint64_t v28 = v354;
                      LOWORD(v354) = v579;
                      goto LABEL_671;
                    }
                    uint64_t v28 = v354;
                    LOWORD(v354) = v579;
LABEL_663:
                    char v555 = 1;
                    if ([a1 minConstantBufferAlignmentBytes] >= (unint64_t)(unsigned __int16)v354) {
                      LOWORD(v354) = [a1 minConstantBufferAlignmentBytes];
                    }
LABEL_671:
                    int v556 = (unsigned __int16 *)((char *)v23 - *v23);
                    if (*v556 >= 0xFu && (uint64_t v557 = v556[7]) != 0 && *((unsigned char *)v23 + v557) == 3)
                    {
                      int v558 = [MTLThreadgroupMemoryBindingInternal alloc];
                      int v559 = (unsigned __int16 *)((char *)v23 - *v23);
                      unsigned int v560 = *v559;
                      if (v560 < 0xD)
                      {
                        uint64_t v563 = 0;
                        BOOL v574 = 1;
                        uint64_t v561 = v581;
                      }
                      else
                      {
                        uint64_t v561 = v581;
                        if (v559[6])
                        {
                          int v562 = *((unsigned __int8 *)v23 + v559[6]);
                          if (v562 == 3) {
                            uint64_t v563 = 1;
                          }
                          else {
                            uint64_t v563 = 2 * (v562 == 2);
                          }
                        }
                        else
                        {
                          uint64_t v563 = 0;
                        }
                        BOOL v574 = v560 < 0x1D || !v559[14] || *((unsigned __int8 *)v23 + v559[14]) == 0;
                      }
                      int v545 = [(MTLThreadgroupMemoryBindingInternal *)v558 initWithName:v28 type:1 access:v563 isActive:v574 locationIndex:*(unsigned int *)((char *)v23 + v559[4]) arraySize:*(unsigned int *)((char *)v23 + v559[5]) dataType:v500 dataSize:v561 alignment:(unsigned __int16)v354];
                    }
                    else
                    {
                      uint64_t v564 = v351;
                      unint64_t v565 = HIDWORD(v351);
                      int v566 = [MTLBufferBindingInternal alloc];
                      int v567 = (unsigned __int16 *)((char *)v23 - *v23);
                      unsigned int v568 = *v567;
                      if (v568 < 0xD)
                      {
                        uint64_t v571 = 0;
                        BOOL v572 = 1;
                        uint64_t v569 = v581;
                      }
                      else
                      {
                        uint64_t v569 = v581;
                        if (v567[6])
                        {
                          int v570 = *((unsigned __int8 *)v23 + v567[6]);
                          if (v570 == 3) {
                            uint64_t v571 = 1;
                          }
                          else {
                            uint64_t v571 = 2 * (v570 == 2);
                          }
                        }
                        else
                        {
                          uint64_t v571 = 0;
                        }
                        BOOL v572 = v568 < 0x1D || !v567[14] || *((unsigned __int8 *)v23 + v567[14]) == 0;
                      }
                      LOBYTE(v578) = v555;
                      int v545 = [(MTLBufferBindingInternal *)v566 initWithName:v28 type:0 access:v571 isActive:v572 locationIndex:*(unsigned int *)((char *)v23 + v567[4]) arraySize:*(unsigned int *)((char *)v23 + v567[5]) dataType:v500 pixelFormat:v564 aluType:v565 isConstantBuffer:v578 dataSize:v569 alignment:(unsigned __int16)v354];
                    }
LABEL_691:
                    int v298 = (MTLBuiltInMeshArgument *)v545;
                    if (v500 == 1) {
                      [(MTLThreadgroupMemoryBindingInternal *)v545 setStructType:v363 doRetain:v582];
                    }
                    if (v363) {
                      goto LABEL_694;
                    }
LABEL_695:
                    int v297 = (MTLTextureBindingInternal *)v298;
LABEL_696:
                    [(MTLBindingInternal *)v297 setIsArgument:1];
                    uint64_t v14 = 0;
                    goto LABEL_697;
                  }
                  if (v353 < 0x19)
                  {
                    uint64_t v552 = 0;
                    uint64_t v28 = v354;
                  }
                  else
                  {
                    uint64_t v552 = v352[12];
                    uint64_t v28 = v354;
                    if (v552) {
                      v552 += (uint64_t)v23 + *(unsigned int *)((char *)v23 + v552);
                    }
                  }
                  LOWORD(v354) = v579;
LABEL_662:
                  int v553 = (const void *)(v552 + 4);
                  size_t v554 = strlen((const char *)(v552 + 4));
                  v363 = 0;
                  uint64_t v500 = dataTypeFromString(v553, v554);
                  if (!v458)
                  {
                    char v555 = 0;
                    goto LABEL_671;
                  }
                  goto LABEL_663;
                }
                uint64_t v28 = v354;
                LOWORD(v354) = v579;
LABEL_661:
                uint64_t v581 = v457;
                uint64_t v552 = 0;
                LOBYTE(v582) = 1;
                goto LABEL_662;
              }
              unsigned int v358 = 0;
            }
            uint64_t v457 = v358;
            if (v353 < 0xF)
            {
              BOOL v458 = 0;
              goto LABEL_661;
            }
            __int16 v579 = (__int16)v354;
            goto LABEL_653;
          case 262145:
            unint64_t v147 = (int *)AirReflection::Node::node_as_SamplerArg(v8);
            int v148 = (unsigned __int16 *)((char *)v147 - *v147);
            if (*v148 >= 0xDu && (uint64_t v149 = v148[6]) != 0) {
              long long v150 = (__CFString *)[NSString stringWithUTF8String:(char *)v147 + v149 + *(unsigned int *)((char *)v147 + v149) + 4];
            }
            else {
              long long v150 = &stru_1ECAC84A8;
            }
            int v275 = [MTLBindingInternal alloc];
            int v276 = (unsigned __int16 *)((char *)v147 - *v147);
            uint64_t v277 = *(unsigned int *)((char *)v147 + v276[3]);
            BOOL v278 = *v276 < 0xFu || !v276[7] || *((unsigned __int8 *)v147 + v276[7]) == 0;
            uint64_t v294 = *(unsigned int *)((char *)v147 + v276[4]);
            v295 = v150;
            uint64_t v296 = 3;
            goto LABEL_318;
          case 262146:
            unint64_t v151 = (int *)AirReflection::Node::node_as_TextureArg(v8);
            uint64_t v152 = *v151;
            uint64_t v153 = -v152;
            long long v154 = (unsigned __int16 *)((char *)v151 - v152);
            if (*v154 >= 0x11u && (uint64_t v155 = v154[8]) != 0)
            {
              long long v156 = (__CFString *)[NSString stringWithUTF8String:(char *)v151 + v155 + *(unsigned int *)((char *)v151 + v155) + 4];
              uint64_t v153 = -(uint64_t)*v151;
            }
            else
            {
              long long v156 = &stru_1ECAC84A8;
            }
            LODWORD(v583[0]) = 0;
            LOBYTE(v582) = 0;
            int v279 = (unsigned __int16 *)((char *)v151 + v153);
            if (*v279 < 0xFu)
            {
              uint64_t v280 = 0;
            }
            else
            {
              uint64_t v280 = v279[7];
              if (v280) {
                v280 += (uint64_t)v151 + *(unsigned int *)((char *)v151 + v280);
              }
            }
            int v415 = (void *)(v280 + 4);
            size_t v416 = strlen((const char *)(v280 + 4));
            unsigned int v417 = textureTypeFromString(v415, v416, v583, &v582);
            int v418 = [MTLTextureBindingInternal alloc];
            int v419 = (unsigned __int16 *)((char *)v151 - *v151);
            unsigned int v420 = *v419;
            if (v420 < 0xB)
            {
              uint64_t v422 = 0;
            }
            else
            {
              if (v419[5])
              {
                int v421 = *((unsigned __int8 *)v151 + v419[5]);
                if (v421 == 3) {
                  uint64_t v422 = 1;
                }
                else {
                  uint64_t v422 = 2 * (v421 == 2);
                }
              }
              else
              {
                uint64_t v422 = 0;
              }
              if (v420 >= 0x13 && v419[9])
              {
                BOOL v496 = *((unsigned __int8 *)v151 + v419[9]) == 0;
                goto LABEL_563;
              }
            }
            BOOL v496 = 1;
LABEL_563:
            LOBYTE(v576) = v582;
            int v297 = [(MTLTextureBindingInternal *)v418 initWithName:v156 access:v422 isActive:v496 locationIndex:*(unsigned int *)((char *)v151 + v419[3]) arraySize:*(unsigned int *)((char *)v151 + v419[4]) dataType:LODWORD(v583[0]) textureType:v417 isDepthTexture:v576];
LABEL_319:
            int v298 = (MTLBuiltInMeshArgument *)v297;
            goto LABEL_696;
          case 262147:
            unint64_t v157 = (int *)AirReflection::Node::node_as_ConstantArg(v8);
            uint64_t v158 = *v157;
            uint64_t v159 = -v158;
            uint64_t v160 = (unsigned __int16 *)((char *)v157 - v158);
            if (*v160 >= 0x13u && (uint64_t v161 = v160[9]) != 0)
            {
              unint64_t v162 = (__CFString *)[NSString stringWithUTF8String:(char *)v157 + v161 + *(unsigned int *)((char *)v157 + v161) + 4];
              uint64_t v159 = -(uint64_t)*v157;
            }
            else
            {
              unint64_t v162 = &stru_1ECAC84A8;
            }
            int v281 = (unsigned __int16 *)((char *)v157 + v159);
            if (*v281 < 0x11u)
            {
              uint64_t v282 = 0;
            }
            else
            {
              uint64_t v282 = v281[8];
              if (v282) {
                v282 += (uint64_t)v157 + *(unsigned int *)((char *)v157 + v282);
              }
            }
            int v423 = (const void *)(v282 + 4);
            size_t v424 = strlen((const char *)(v282 + 4));
            unint64_t v425 = pixelFormatAndALUTypeFromString(v423, v424);
            uint64_t v426 = v425;
            int v427 = (unsigned __int16 *)((char *)v157 - *v157);
            uint64_t v428 = *(unsigned __int16 *)((char *)v157 + v427[7]);
            if (*v427 < 0x11u)
            {
              uint64_t v429 = 0;
            }
            else
            {
              uint64_t v429 = v427[8];
              if (v429) {
                v429 += (uint64_t)v157 + *(unsigned int *)((char *)v157 + v429);
              }
            }
            unint64_t v442 = HIDWORD(v425);
            int v443 = (const void *)(v429 + 4);
            size_t v444 = strlen((const char *)(v429 + 4));
            uint64_t v445 = dataTypeFromString(v443, v444);
            int v446 = [MTLBufferBindingInternal alloc];
            int v447 = (unsigned __int16 *)((char *)v157 - *v157);
            BOOL v448 = *v447 < 0x15u || !v447[10] || *((unsigned __int8 *)v157 + v447[10]) == 0;
            LOBYTE(v578) = 0;
            int v297 = [(MTLBufferBindingInternal *)v446 initWithName:v162 type:22 access:0 isActive:v448 locationIndex:*(unsigned int *)((char *)v157 + v447[3]) arraySize:*(unsigned int *)((char *)v157 + v447[4]) dataType:v445 pixelFormat:v426 aluType:v442 isConstantBuffer:v578 dataSize:*(unsigned int *)((char *)v157 + v447[6]) alignment:v428];
            goto LABEL_319;
          case 262148:
            unint64_t v163 = (int *)AirReflection::Node::node_as_IndirectBufferArg(v8);
            uint64_t v164 = *v163;
            uint64_t v165 = -v164;
            long long v166 = (unsigned __int16 *)((char *)v163 - v164);
            if (*v166 >= 0x1Bu && (uint64_t v167 = v166[13]) != 0)
            {
              unint64_t v168 = (__CFString *)[NSString stringWithUTF8String:(char *)v163 + v167 + *(unsigned int *)((char *)v163 + v167) + 4];
              uint64_t v165 = -(uint64_t)*v163;
            }
            else
            {
              unint64_t v168 = &stru_1ECAC84A8;
            }
            int v283 = (unsigned __int16 *)((char *)v163 + v165);
            int v580 = v168;
            if (*v283 < 0x19u)
            {
              uint64_t v284 = 0;
            }
            else
            {
              uint64_t v284 = v283[12];
              if (v284) {
                v284 += (uint64_t)v163 + *(unsigned int *)((char *)v163 + v284);
              }
            }
            int v430 = (const void *)(v284 + 4);
            size_t v431 = strlen((const char *)(v284 + 4));
            unint64_t v432 = pixelFormatAndALUTypeFromString(v430, v431);
            int v433 = (unsigned __int16 *)((char *)v163 - *v163);
            unsigned int v434 = *v433;
            if (v434 < 0x17)
            {
              LOWORD(v435) = 0;
              BOOL v449 = 0;
              if (v434 < 0xF) {
                goto LABEL_572;
              }
            }
            else if (v433[11])
            {
              int v435 = *(int *)((char *)v163 + v433[11]);
            }
            else
            {
              LOWORD(v435) = 0;
            }
            if (v433[7]) {
              int v497 = *((unsigned __int8 *)v163 + v433[7]);
            }
            else {
              int v497 = 1;
            }
            BOOL v449 = v497 == 2;
            if (v434 >= 0x11)
            {
              unsigned __int16 v498 = v433[8];
              LOBYTE(v582) = 1;
              if (v498)
              {
                unint64_t v499 = a4[5] + a4[4] - 1;
                ContextStack::ContextStack((ContextStack *)v583, *(MTLFunctionType *)(*(void *)(a4[1] + 8 * (v499 / 0x49)) + 56 * (v499 % 0x49)), 1);
                std::deque<ContextStack>::push_back(a4, v583);
                ContextStack::~ContextStack((ContextStack *)v583);
                v363 = (void *)deserializeStructArgument(a1, (char *)v163 + v498, a3, a4, &v582);
                std::deque<ContextStack>::pop_back(a4);
                uint64_t v500 = 1;
                if (v497 != 2)
                {
LABEL_571:
                  char v501 = 0;
                  goto LABEL_577;
                }
LABEL_574:
                if ([a1 minConstantBufferAlignmentBytes] >= (unint64_t)(unsigned __int16)v435)
                {
                  __int16 v506 = [a1 minConstantBufferAlignmentBytes];
                  char v501 = 1;
                  LOWORD(v435) = v506;
                }
                else
                {
                  char v501 = 1;
                }
LABEL_577:
                unint64_t v507 = a4[5] + a4[4] - 1;
                if (*(unsigned char *)(*(void *)(a4[1] + 8 * (v507 / 0x49)) + 56 * (v507 % 0x49) + 8)
                  && (unsigned int v508 = *(unsigned __int16 *)((char *)v163 - *v163), v508 >= 7)
                  && *(_WORD *)((char *)v163 - *v163 + 6))
                {
                  uint64_t v509 = *(unsigned int *)((char *)v163 + *(unsigned __int16 *)((char *)v163 - *v163 + 6));
                }
                else
                {
                  int v510 = (unsigned __int16 *)((char *)v163 - *v163);
                  unsigned int v508 = *v510;
                  if (v508 >= 0x15)
                  {
                    if (v510[10]) {
                      uint64_t v509 = *(unsigned int *)((char *)v163 + v510[10]);
                    }
                    else {
                      uint64_t v509 = 0;
                    }
LABEL_621:
                    if (*(_WORD *)((char *)v163 - *v163 + 14)
                      && *((unsigned char *)v163 + *(unsigned __int16 *)((char *)v163 - *v163 + 14)) == 3)
                    {
                      int v533 = [MTLThreadgroupMemoryBindingInternal alloc];
                      int v534 = (unsigned __int16 *)((char *)v163 - *v163);
                      unsigned int v535 = *v534;
                      if (v535 < 0xD)
                      {
                        uint64_t v537 = 0;
                        BOOL v546 = 1;
                        int v547 = v580;
                      }
                      else
                      {
                        if (v534[6])
                        {
                          int v536 = *((unsigned __int8 *)v163 + v534[6]);
                          if (v536 == 3) {
                            uint64_t v537 = 1;
                          }
                          else {
                            uint64_t v537 = 2 * (v536 == 2);
                          }
                        }
                        else
                        {
                          uint64_t v537 = 0;
                        }
                        int v547 = v580;
                        BOOL v546 = v535 < 0x1D || !v534[14] || *((unsigned __int8 *)v163 + v534[14]) == 0;
                      }
                      int v545 = [(MTLThreadgroupMemoryBindingInternal *)v533 initWithName:v547 type:1 access:v537 isActive:v546 locationIndex:*(unsigned int *)((char *)v163 + v534[4]) arraySize:*(unsigned int *)((char *)v163 + v534[5]) dataType:v500 dataSize:v509 alignment:(unsigned __int16)v435];
                      goto LABEL_691;
                    }
LABEL_628:
                    int v538 = [MTLBufferBindingInternal alloc];
                    int v539 = (unsigned __int16 *)((char *)v163 - *v163);
                    unsigned int v540 = *v539;
                    if (v540 < 0xD)
                    {
                      uint64_t v542 = 0;
                      BOOL v543 = 1;
                      int v544 = v580;
                    }
                    else
                    {
                      if (v539[6])
                      {
                        int v541 = *((unsigned __int8 *)v163 + v539[6]);
                        if (v541 == 3) {
                          uint64_t v542 = 1;
                        }
                        else {
                          uint64_t v542 = 2 * (v541 == 2);
                        }
                      }
                      else
                      {
                        uint64_t v542 = 0;
                      }
                      int v544 = v580;
                      BOOL v543 = v540 < 0x1D || !v539[14] || *((unsigned __int8 *)v163 + v539[14]) == 0;
                    }
                    LOBYTE(v578) = v501;
                    int v545 = [(MTLBufferBindingInternal *)v538 initWithName:v544 type:0 access:v542 isActive:v543 locationIndex:*(unsigned int *)((char *)v163 + v539[4]) arraySize:*(unsigned int *)((char *)v163 + v539[5]) dataType:v500 pixelFormat:v432 aluType:HIDWORD(v432) isConstantBuffer:v578 dataSize:v509 alignment:(unsigned __int16)v435];
                    goto LABEL_691;
                  }
                  uint64_t v509 = 0;
                }
                if (v508 < 0xF) {
                  goto LABEL_628;
                }
                goto LABEL_621;
              }
              if (v434 < 0x19)
              {
                uint64_t v502 = 0;
              }
              else
              {
                uint64_t v502 = v433[12];
                if (v502) {
                  v502 += (uint64_t)v163 + *(unsigned int *)((char *)v163 + v502);
                }
              }
LABEL_573:
              int v503 = (const void *)(v502 + 4);
              size_t v504 = strlen((const char *)(v502 + 4));
              unsigned int v505 = dataTypeFromString(v503, v504);
              v363 = 0;
              uint64_t v500 = v505;
              if (!v449) {
                goto LABEL_571;
              }
              goto LABEL_574;
            }
LABEL_572:
            uint64_t v502 = 0;
            LOBYTE(v582) = 1;
            goto LABEL_573;
          case 262149:
            int v169 = (int *)AirReflection::Node::node_as_IndirectConstantArg(v8);
            uint64_t v170 = *v169;
            uint64_t v171 = -v170;
            unint64_t v172 = (unsigned __int16 *)((char *)v169 - v170);
            if (*v172 >= 0xDu && (uint64_t v173 = v172[6]) != 0)
            {
              int v174 = (__CFString *)[NSString stringWithUTF8String:(char *)v169 + v173 + *(unsigned int *)((char *)v169 + v173) + 4];
              uint64_t v171 = -(uint64_t)*v169;
            }
            else
            {
              int v174 = &stru_1ECAC84A8;
            }
            int v285 = (unsigned __int16 *)((char *)v169 + v171);
            if (*v285 < 0xBu)
            {
              uint64_t v286 = 0;
            }
            else
            {
              uint64_t v286 = v285[5];
              if (v286) {
                v286 += (uint64_t)v169 + *(unsigned int *)((char *)v169 + v286);
              }
            }
            int v436 = (const void *)(v286 + 4);
            size_t v437 = strlen((const char *)(v286 + 4));
            unint64_t v438 = pixelFormatAndALUTypeFromString(v436, v437);
            uint64_t v439 = v438;
            unsigned int v582 = 0;
            LODWORD(v583[0]) = 0;
            int v440 = (unsigned __int16 *)((char *)v169 - *v169);
            if (*v440 < 0xBu)
            {
              uint64_t v441 = 0;
            }
            else
            {
              uint64_t v441 = v440[5];
              if (v441) {
                v441 += (uint64_t)v169 + *(unsigned int *)((char *)v169 + v441);
              }
            }
            unint64_t v450 = HIDWORD(v438);
            int v451 = (const void *)(v441 + 4);
            size_t v452 = strlen((const char *)(v441 + 4));
            uint64_t v453 = dataTypeFromString(v451, v452, v583, &v582);
            int v454 = [MTLIndirectConstantArgument alloc];
            int v455 = (unsigned __int16 *)((char *)v169 - *v169);
            BOOL v456 = *v455 < 0xFu || !v455[7] || *((unsigned __int8 *)v169 + v455[7]) == 0;
            int v297 = [(MTLIndirectConstantArgument *)v454 initWithName:v174 type:4 access:0 isActive:v456 locationIndex:*(unsigned int *)((char *)v169 + v455[3]) dataType:v453 pixelFormat:v439 aluType:v450 dataSize:v582 alignment:LODWORD(v583[0])];
            goto LABEL_319;
          case 262150:
            long long v175 = (int *)AirReflection::Node::node_as_CommandBufferArg(v8);
            long long v176 = (unsigned __int16 *)((char *)v175 - *v175);
            if (*v176 >= 0xDu && (uint64_t v177 = v176[6]) != 0) {
              unint64_t v178 = (__CFString *)[NSString stringWithUTF8String:(char *)v175 + v177 + *(unsigned int *)((char *)v175 + v177) + 4];
            }
            else {
              unint64_t v178 = &stru_1ECAC84A8;
            }
            int v275 = [MTLBindingInternal alloc];
            MTLGPUFamily v287 = (unsigned __int16 *)((char *)v175 - *v175);
            uint64_t v277 = *(unsigned int *)((char *)v175 + v287[3]);
            BOOL v278 = *v287 < 0xFu || !v287[7] || *((unsigned __int8 *)v175 + v287[7]) == 0;
            uint64_t v294 = *(unsigned int *)((char *)v175 + v287[4]);
            v295 = v178;
            uint64_t v296 = 21;
            goto LABEL_318;
          case 262151:
            int v179 = (int *)AirReflection::Node::node_as_ComputePipelineStateArg(v8);
            long long v180 = (unsigned __int16 *)((char *)v179 - *v179);
            if (*v180 >= 0xDu && (uint64_t v181 = v180[6]) != 0) {
              __n128 v182 = (__CFString *)[NSString stringWithUTF8String:(char *)v179 + v181 + *(unsigned int *)((char *)v179 + v181) + 4];
            }
            else {
              __n128 v182 = &stru_1ECAC84A8;
            }
            int v275 = [MTLBindingInternal alloc];
            int v288 = (unsigned __int16 *)((char *)v179 - *v179);
            uint64_t v277 = *(unsigned int *)((char *)v179 + v288[3]);
            BOOL v278 = *v288 < 0xFu || !v288[7] || *((unsigned __int8 *)v179 + v288[7]) == 0;
            uint64_t v294 = *(unsigned int *)((char *)v179 + v288[4]);
            v295 = v182;
            uint64_t v296 = 20;
            goto LABEL_318;
          case 262152:
            __n128 v183 = (int *)AirReflection::Node::node_as_RenderPipelineStateArg(v8);
            long long v184 = (unsigned __int16 *)((char *)v183 - *v183);
            if (*v184 >= 0xDu && (uint64_t v185 = v184[6]) != 0) {
              long long v186 = (__CFString *)[NSString stringWithUTF8String:(char *)v183 + v185 + *(unsigned int *)((char *)v183 + v185) + 4];
            }
            else {
              long long v186 = &stru_1ECAC84A8;
            }
            int v275 = [MTLBindingInternal alloc];
            int v289 = (unsigned __int16 *)((char *)v183 - *v183);
            uint64_t v277 = *(unsigned int *)((char *)v183 + v289[3]);
            BOOL v278 = *v289 < 0xFu || !v289[7] || *((unsigned __int8 *)v183 + v289[7]) == 0;
            uint64_t v294 = *(unsigned int *)((char *)v183 + v289[4]);
            v295 = v186;
            uint64_t v296 = 19;
            goto LABEL_318;
          case 262153:
            __n128 v187 = (int *)AirReflection::Node::node_as_VisibleFunctionTableArg(v8);
            long long v188 = (unsigned __int16 *)((char *)v187 - *v187);
            if (*v188 >= 0x11u && (uint64_t v189 = v188[8]) != 0) {
              __n128 v190 = (__CFString *)[NSString stringWithUTF8String:(char *)v187 + v189 + *(unsigned int *)((char *)v187 + v189) + 4];
            }
            else {
              __n128 v190 = &stru_1ECAC84A8;
            }
            int v275 = [MTLBindingInternal alloc];
            int v290 = (unsigned __int16 *)((char *)v187 - *v187);
            uint64_t v277 = *(unsigned int *)((char *)v187 + v290[3]);
            BOOL v278 = *v290 < 0x13u || !v290[9] || *((unsigned __int8 *)v187 + v290[9]) == 0;
            uint64_t v294 = *(unsigned int *)((char *)v187 + v290[4]);
            v295 = v190;
            uint64_t v296 = 24;
            goto LABEL_318;
          case 262154:
            long long v191 = (int *)AirReflection::Node::node_as_IntersectionFunctionTableArg(v8);
            __n128 v192 = (unsigned __int16 *)((char *)v191 - *v191);
            if (*v192 >= 0x11u && (uint64_t v193 = v192[8]) != 0) {
              __n128 v194 = (__CFString *)[NSString stringWithUTF8String:(char *)v191 + v193 + *(unsigned int *)((char *)v191 + v193) + 4];
            }
            else {
              __n128 v194 = &stru_1ECAC84A8;
            }
            int v275 = [MTLBindingInternal alloc];
            v291 = (unsigned __int16 *)((char *)v191 - *v191);
            uint64_t v277 = *(unsigned int *)((char *)v191 + v291[3]);
            BOOL v278 = *v291 < 0x13u || !v291[9] || *((unsigned __int8 *)v191 + v291[9]) == 0;
            uint64_t v294 = *(unsigned int *)((char *)v191 + v291[4]);
            v295 = v194;
            uint64_t v296 = 27;
            goto LABEL_318;
          case 262155:
            __n128 v195 = (int *)AirReflection::Node::node_as_InstanceAccelerationStructureArg(v8);
            long long v196 = (unsigned __int16 *)((char *)v195 - *v195);
            if (*v196 >= 0x11u && (uint64_t v197 = v196[8]) != 0) {
              long long v198 = (__CFString *)[NSString stringWithUTF8String:(char *)v195 + v197 + *(unsigned int *)((char *)v195 + v197) + 4];
            }
            else {
              long long v198 = &stru_1ECAC84A8;
            }
            int v275 = [MTLBindingInternal alloc];
            MTLGPUFamily v292 = (unsigned __int16 *)((char *)v195 - *v195);
            uint64_t v277 = *(unsigned int *)((char *)v195 + v292[3]);
            BOOL v278 = *v292 < 0x13u || !v292[9] || *((unsigned __int8 *)v195 + v292[9]) == 0;
            uint64_t v294 = *(unsigned int *)((char *)v195 + v292[4]);
            v295 = v198;
            uint64_t v296 = 26;
            goto LABEL_318;
          case 262156:
            __n128 v199 = (int *)AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(v8);
            long long v200 = (unsigned __int16 *)((char *)v199 - *v199);
            if (*v200 >= 0x11u && (uint64_t v201 = v200[8]) != 0) {
              long long v202 = (__CFString *)[NSString stringWithUTF8String:(char *)v199 + v201 + *(unsigned int *)((char *)v199 + v201) + 4];
            }
            else {
              long long v202 = &stru_1ECAC84A8;
            }
            int v275 = [MTLBindingInternal alloc];
            int v293 = (unsigned __int16 *)((char *)v199 - *v199);
            uint64_t v277 = *(unsigned int *)((char *)v199 + v293[3]);
            BOOL v278 = *v293 < 0x13u || !v293[9] || *((unsigned __int8 *)v199 + v293[9]) == 0;
            uint64_t v294 = *(unsigned int *)((char *)v199 + v293[4]);
            v295 = v202;
            uint64_t v296 = 25;
LABEL_318:
            int v297 = [(MTLBindingInternal *)v275 initWithName:v295 type:v296 access:0 index:v277 active:v278 arrayLength:v294];
            goto LABEL_319;
          case 262157:
            return v15 | v14;
          default:
            goto LABEL_9;
        }
    }
  }
  if ((int)v10 >= 274432)
  {
    if ((int)v10 < 278528)
    {
      BOOL v22 = (v10 - 274432) > 0xE || ((1 << v10) & 0x61FF) == 0;
      uint64_t v15 = 0;
      if (!v22) {
        return v15 | v14;
      }
      goto LABEL_9;
    }
    if ((int)v10 <= 278531)
    {
      uint64_t v15 = 0;
      if ((v10 - 278528) < 3) {
        return v15 | v14;
      }
      if (v10 != 278531) {
        goto LABEL_9;
      }
      long long v34 = (int *)AirReflection::Node::node_as_ImageblockArg(v8);
      uint64_t v35 = *v34;
      uint64_t v36 = -v35;
      uint64_t v37 = (unsigned __int16 *)((char *)v34 - v35);
      if (*v37 >= 0x13u && (uint64_t v38 = v37[9]) != 0)
      {
        int v39 = (__CFString *)[NSString stringWithUTF8String:(char *)v34 + v38 + *(unsigned int *)((char *)v34 + v38) + 4];
        uint64_t v36 = -(uint64_t)*v34;
      }
      else
      {
        int v39 = &stru_1ECAC84A8;
      }
      int64x2_t v247 = (unsigned __int16 *)((char *)v34 + v36);
      if (*v247 < 7u)
      {
        BOOL v249 = 0;
      }
      else
      {
        unsigned __int16 v248 = v247[3];
        BOOL v249 = v248 != 0;
        if (v248)
        {
          int v250 = *(int *)((char *)v34 + v248);
          BOOL v249 = 1;
LABEL_396:
          unint64_t v359 = a4[5] + a4[4] - 1;
          ContextStack::ContextStack((ContextStack *)v583, *(MTLFunctionType *)(*(void *)(a4[1] + 8 * (v359 / 0x49)) + 56 * (v359 % 0x49)), 1);
          std::deque<ContextStack>::push_back(a4, v583);
          ContextStack::~ContextStack((ContextStack *)v583);
          int v360 = (unsigned __int16 *)((char *)v34 - *v34);
          if (*v360 >= 9u && (unsigned __int16 v361 = v360[4]) != 0) {
            MTLGPUFamily v362 = (char *)v34 + v361;
          }
          else {
            MTLGPUFamily v362 = 0;
          }
          v363 = (void *)deserializeStructArgument(a1, v362, a3, a4, 0);
          std::deque<ContextStack>::pop_back(a4);
          int v364 = (unsigned __int16 *)((char *)v34 - *v34);
          unsigned int v365 = *v364;
          if (v365 < 0xB)
          {
            BOOL v366 = 0;
          }
          else
          {
            if (v364[5]) {
              BOOL v366 = *((unsigned char *)v34 + v364[5]) != 0;
            }
            else {
              BOOL v366 = 0;
            }
            if (v365 >= 0xD)
            {
              unsigned __int16 v521 = v364[6];
              if (v521)
              {
                int v522 = *(int *)((char *)v34 + v521);
                goto LABEL_605;
              }
            }
          }
          int v522 = -1;
LABEL_605:
          int v523 = [MTLImageBlockArgument alloc];
          int v524 = (unsigned __int16 *)((char *)v34 - *v34);
          v526 = *v524 < 0x15u || (uint64_t v525 = v524[10]) == 0 || *((unsigned __int8 *)v34 + v525) == 0;
          HIDWORD(v577) = v522;
          LOBYTE(v577) = v366;
          LODWORD(v575) = v250;
          int v298 = -[MTLImageBlockArgument initWithName:type:access:isActive:index:kind:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:](v523, "initWithName:type:access:isActive:index:kind:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v39, 17, 0, v526, 0, v249, v575, 0, v577);
          [(MTLBuiltInMeshArgument *)v298 setStructType:v363];
LABEL_694:

          goto LABEL_695;
        }
      }
      int v250 = 0;
      goto LABEL_396;
    }
    if ((int)v10 < 286720)
    {
      if (v10 != 278532)
      {
        if (v10 != 282624) {
          goto LABEL_9;
        }
        uint64_t v40 = (int *)AirReflection::Node::node_as_PayloadArg(v8);
        uint64_t v41 = *v40;
        uint64_t v42 = -v41;
        unint64_t v43 = (unsigned __int16 *)((char *)v40 - v41);
        if (*v43 >= 0xFu && (uint64_t v44 = v43[7]) != 0)
        {
          uint64_t v45 = (__CFString *)[NSString stringWithUTF8String:(char *)v40 + v44 + *(unsigned int *)((char *)v40 + v44) + 4];
          uint64_t v42 = -(uint64_t)*v40;
        }
        else
        {
          uint64_t v45 = &stru_1ECAC84A8;
        }
        int v231 = (unsigned __int16 *)((char *)v40 + v42);
        unsigned int v232 = *v231;
        if (v232 >= 7 && v231[3]) {
          int v233 = (char *)v40 + v231[3];
        }
        else {
          int v233 = 0;
        }
        if (v232 < 0xB)
        {
          uint64_t v242 = 0;
          uint64_t v344 = 0;
          if (v232 < 9)
          {
LABEL_553:
            LOBYTE(v582) = 1;
            if (v233)
            {
              unint64_t v493 = a4[5] + a4[4] - 1;
              ContextStack::ContextStack((ContextStack *)v583, *(MTLFunctionType *)(*(void *)(a4[1] + 8 * (v493 / 0x49)) + 56 * (v493 % 0x49)), 1);
              std::deque<ContextStack>::push_back(a4, v583);
              ContextStack::~ContextStack((ContextStack *)v583);
              v363 = (void *)deserializeStructArgument(a1, v233, a3, a4, &v582);
              std::deque<ContextStack>::pop_back(a4);
              uint64_t v494 = 1;
            }
            else
            {
              if (v232 < 0xD)
              {
                uint64_t v495 = 0;
              }
              else
              {
                uint64_t v495 = v231[6];
                if (v495) {
                  v495 += (uint64_t)v40 + *(unsigned int *)((char *)v40 + v495);
                }
              }
              int v511 = (const void *)(v495 + 4);
              size_t v512 = strlen((const char *)(v495 + 4));
              unsigned int v513 = dataTypeFromString(v511, v512);
              v363 = 0;
              uint64_t v494 = v513;
            }
            unint64_t v514 = a4[5] + a4[4] - 1;
            BOOL v515 = *(void *)(*(void *)(a4[1] + 8 * (v514 / 0x49)) + 56 * (v514 % 0x49)) != 7;
            int v516 = [MTLObjectPayloadBindingInternal alloc];
            int v517 = (unsigned __int16 *)((char *)v40 - *v40);
            v519 = *v517 < 0x11u || (uint64_t v518 = v517[8]) == 0 || *((unsigned __int8 *)v40 + v518) == 0;
            int v520 = [(MTLObjectPayloadBindingInternal *)v516 initWithName:v45 type:34 access:v515 isActive:v519 locationIndex:0xFFFFFFFFLL arraySize:1 dataType:v494 dataSize:v344 alignment:v242];
            int v298 = (MTLBuiltInMeshArgument *)v520;
            if (!v363) {
              goto LABEL_695;
            }
            [(MTLObjectPayloadBindingInternal *)v520 setStructType:v363 doRetain:v582];
            goto LABEL_694;
          }
        }
        else if (v231[5])
        {
          uint64_t v242 = *(unsigned __int16 *)((char *)v40 + v231[5]);
        }
        else
        {
          uint64_t v242 = 0;
        }
        if (v231[4]) {
          uint64_t v344 = *(unsigned int *)((char *)v40 + v231[4]);
        }
        else {
          uint64_t v344 = 0;
        }
        goto LABEL_553;
      }
      long long v203 = (int *)AirReflection::Node::node_as_ImageblockDataArg(v8);
      uint64_t v204 = *v203;
      uint64_t v205 = -v204;
      uint64_t v206 = (unsigned __int16 *)((char *)v203 - v204);
      if (*v206 >= 0x15u && (uint64_t v207 = v206[10]) != 0)
      {
        uint64_t v208 = (__CFString *)[NSString stringWithUTF8String:(char *)v203 + v207 + *(unsigned int *)((char *)v203 + v207) + 4];
        uint64_t v205 = -(uint64_t)*v203;
      }
      else
      {
        uint64_t v208 = &stru_1ECAC84A8;
      }
      int v236 = (unsigned __int16 *)((char *)v203 + v205);
      unsigned int v237 = *v236;
      if (v237 < 7)
      {
        uint64_t v238 = 0;
      }
      else
      {
        if (v236[3]) {
          uint64_t v238 = *(unsigned int *)((char *)v203 + v236[3]);
        }
        else {
          uint64_t v238 = 0;
        }
        if (v237 >= 0xB)
        {
          unsigned __int16 v459 = v236[5];
          if (v459)
          {
            int v460 = (unsigned int *)(v6 + 4 * *(unsigned int *)((char *)v203 + v459));
            AirReflection::Node::node_as_StructTypeInfo((AirReflection::Node *)((char *)v460 + *v460));
            unint64_t v461 = a4[5] + a4[4] - 1;
            ContextStack::ContextStack((ContextStack *)v583, *(MTLFunctionType *)(*(void *)(a4[1] + 8 * (v461 / 0x49)) + 56 * (v461 % 0x49)), 1);
            std::deque<ContextStack>::push_back(a4, v583);
            ContextStack::~ContextStack((ContextStack *)v583);
            int v462 = (unsigned __int16 *)((char *)v203 - *v203);
            if (*v462 >= 0xBu && (unsigned __int16 v463 = v462[5]) != 0) {
              int v464 = (char *)v203 + v463;
            }
            else {
              int v464 = 0;
            }
            int v465 = (void *)deserializeStructArgument(a1, v464, a3, a4, 0);
            std::deque<ContextStack>::pop_back(a4);
LABEL_526:
            unint64_t v466 = a4[5] + a4[4] - 1;
            ContextStack::ContextStack((ContextStack *)v583, *(MTLFunctionType *)(*(void *)(a4[1] + 8 * (v466 / 0x49)) + 56 * (v466 % 0x49)), 1);
            std::deque<ContextStack>::push_back(a4, v583);
            ContextStack::~ContextStack((ContextStack *)v583);
            int v467 = (unsigned __int16 *)((char *)v203 - *v203);
            if (*v467 >= 9u && (unsigned __int16 v468 = v467[4]) != 0) {
              int v469 = (char *)v203 + v468;
            }
            else {
              int v469 = 0;
            }
            int v470 = (void *)deserializeStructArgument(a1, v469, a3, a4, 0);
            std::deque<ContextStack>::pop_back(a4);
            int v471 = (unsigned __int16 *)((char *)v203 - *v203);
            unsigned int v472 = *v471;
            if (v472 < 0xD)
            {
              BOOL v473 = 0;
            }
            else
            {
              if (v471[6]) {
                BOOL v473 = *((unsigned char *)v203 + v471[6]) != 0;
              }
              else {
                BOOL v473 = 0;
              }
              if (v472 >= 0xF)
              {
                unsigned __int16 v527 = v471[7];
                if (v527)
                {
                  int v528 = *(int *)((char *)v203 + v527);
                  goto LABEL_615;
                }
              }
            }
            int v528 = -1;
LABEL_615:
            int v529 = [MTLImageBlockDataArgument alloc];
            int v530 = (unsigned __int16 *)((char *)v203 - *v203);
            v532 = *v530 < 0x17u || (uint64_t v531 = v530[11]) == 0 || *((unsigned __int8 *)v203 + v531) == 0;
            HIDWORD(v576) = v528;
            LOBYTE(v576) = v473;
            int v298 = -[MTLImageBlockDataArgument initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:](v529, "initWithName:type:access:isActive:index:dataSize:masterStructMembers:aliasImplicitImageBlock:aliasImplicitImageBlockRenderTarget:", v208, 16, 0, v532, 0, v238, v465, v576);
            [(MTLBuiltInMeshArgument *)v298 setStructType:v470];

            goto LABEL_695;
          }
        }
      }
      int v465 = 0;
      goto LABEL_526;
    }
    if (v10 != 286720)
    {
      if (v10 != 290816) {
        goto LABEL_9;
      }
      long long v46 = (int *)AirReflection::Node::node_as_MeshGridPropertiesArg(v8);
      uint64_t v47 = *v46;
      uint64_t v48 = -v47;
      unint64_t v49 = (unsigned __int16 *)((char *)v46 - v47);
      if (*v49 >= 9u && (uint64_t v50 = v49[4]) != 0)
      {
        uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v46 + v50 + *(unsigned int *)((char *)v46 + v50) + 4];
        uint64_t v48 = -(uint64_t)*v46;
      }
      else
      {
        uint64_t v21 = &stru_1ECAC84A8;
      }
      int v234 = (unsigned __int16 *)((char *)v46 + v48);
      if (*v234 < 7u)
      {
        uint64_t v235 = 0;
      }
      else
      {
        uint64_t v235 = v234[3];
        if (v235) {
          v235 += (uint64_t)v46 + *(unsigned int *)((char *)v46 + v235);
        }
      }
      int v339 = (const void *)(v235 + 4);
      size_t v340 = strlen((const char *)(v235 + 4));
      uint64_t v309 = dataTypeFromString(v339, v340);
      int v310 = [MTLBuiltInArgument alloc];
      v341 = (unsigned __int16 *)((char *)v46 - *v46);
      v313 = *v341 < 0xBu || (uint64_t v342 = v341[5]) == 0 || *((unsigned __int8 *)v46 + v342) == 0;
      uint64_t v314 = 23;
LABEL_475:
      int v306 = [(MTLBuiltInArgument *)v310 initWithName:v21 type:15 access:0 active:v313 index:0 dataType:v309 builtInType:v314];
      int v298 = (MTLBuiltInMeshArgument *)v306;
      uint64_t v14 = 1;
LABEL_476:
      [(MTLBindingInternal *)v306 setIsArgument:1];
LABEL_697:
      *a5 = v298;
      uint64_t v15 = 0x100000000;
      return v15 | v14;
    }
    unint64_t v209 = (int *)AirReflection::Node::node_as_MeshArg(v8);
    uint64_t v210 = *v209;
    uint64_t v211 = -v210;
    int v212 = (unsigned __int16 *)((char *)v209 - v210);
    if (*v212 >= 0xBu && (uint64_t v213 = v212[5]) != 0)
    {
      v214 = (__CFString *)[NSString stringWithUTF8String:(char *)v209 + v213 + *(unsigned int *)((char *)v209 + v213) + 4];
      uint64_t v211 = -(uint64_t)*v209;
    }
    else
    {
      v214 = &stru_1ECAC84A8;
    }
    int v239 = (unsigned __int16 *)((char *)v209 + v211);
    unsigned int v240 = *v239;
    if (v240 < 0xD)
    {
      BOOL v241 = 1;
      if (v240 < 9)
      {
        uint64_t v343 = 0;
        goto LABEL_537;
      }
    }
    else if (v239[6])
    {
      BOOL v241 = *((unsigned __int8 *)v209 + v239[6]) == 0;
    }
    else
    {
      BOOL v241 = 1;
    }
    uint64_t v343 = v239[4];
    if (v343) {
      v343 += (uint64_t)v209 + *(unsigned int *)((char *)v209 + v343);
    }
LABEL_537:
    int v474 = (const void *)(v343 + 4);
    size_t v475 = strlen((const char *)(v343 + 4));
    unsigned int v476 = dataTypeFromString(v474, v475);
    int v477 = (unsigned int *)(v6 + 4 * *(unsigned int *)((char *)v209 + *(unsigned __int16 *)((char *)v209 - *v209 + 6)));
    int v478 = (int *)AirReflection::Node::node_as_MeshTypeInfo((AirReflection::Node *)((char *)v477 + *v477));
    BOOL v479 = v478;
    BOOL v480 = (unsigned __int16 *)((char *)v478 - *v478);
    if (*v480 >= 5u && (uint64_t v481 = v480[2]) != 0) {
      int v482 = (unsigned int *)((char *)v478 + v481 + *(unsigned int *)((char *)v478 + v481));
    }
    else {
      int v482 = 0;
    }
    uint64_t v483 = v476;
    BOOL v484 = deserializeMeshStructArgument(v482, a3);
    int v485 = (unsigned __int16 *)((char *)v479 - *v479);
    if (*v485 >= 7u && (uint64_t v486 = v485[3]) != 0) {
      BOOL v487 = (unsigned int *)((char *)v479 + v486 + *(unsigned int *)((char *)v479 + v486));
    }
    else {
      BOOL v487 = 0;
    }
    int v488 = deserializeMeshStructArgument(v487, a3);
    BOOL v489 = (unsigned __int16 *)((char *)v479 - *v479);
    unsigned int v490 = *v489;
    if (v490 < 9)
    {
      LOWORD(v492) = 0;
      LOWORD(v491) = 0;
    }
    else
    {
      if (v489[4]) {
        int v491 = *(int *)((char *)v479 + v489[4]);
      }
      else {
        LOWORD(v491) = 0;
      }
      if (v490 < 0xB)
      {
        LOWORD(v492) = 0;
      }
      else
      {
        if (v489[5]) {
          int v492 = *(int *)((char *)v479 + v489[5]);
        }
        else {
          LOWORD(v492) = 0;
        }
        if (v490 >= 0xD)
        {
          uint64_t v548 = v489[6];
          if (v548)
          {
            uint64_t v549 = *((unsigned __int8 *)v479 + v548);
LABEL_651:
            WORD1(v578) = v492;
            LOWORD(v578) = v491;
            int v298 = -[MTLBuiltInMeshArgument initWithName:type:access:active:index:dataType:builtInType:meshVertexStructType:meshPrimitiveStructType:meshVertexCount:meshPrimitiveCount:meshTopologyType:]([MTLBuiltInMeshArgument alloc], "initWithName:type:access:active:index:dataType:builtInType:meshVertexStructType:meshPrimitiveStructType:meshVertexCount:meshPrimitiveCount:meshTopologyType:", v214, 35, 2, v241, 0, v483, 24, v484, v488, v578, v549);

            uint64_t v14 = 1;
            int v306 = (MTLBuiltInArgument *)v298;
            goto LABEL_476;
          }
        }
      }
    }
    uint64_t v549 = 1;
    goto LABEL_651;
  }
  uint64_t v15 = 0;
  switch((int)v10)
  {
    case 270336:
      uint64_t v29 = (int *)AirReflection::Node::node_as_BaseInstanceArg(v8);
      uint64_t v30 = *v29;
      uint64_t v31 = -v30;
      unint64_t v32 = (unsigned __int16 *)((char *)v29 - v30);
      if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0)
      {
        uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v29 + v33 + *(unsigned int *)((char *)v29 + v33) + 4];
        uint64_t v31 = -(uint64_t)*v29;
      }
      else
      {
        uint64_t v21 = &stru_1ECAC84A8;
      }
      v215 = (unsigned __int16 *)((char *)v29 + v31);
      if (*v215 < 7u)
      {
        uint64_t v216 = 0;
      }
      else
      {
        uint64_t v216 = v215[3];
        if (v216) {
          v216 += (uint64_t)v29 + *(unsigned int *)((char *)v29 + v216);
        }
      }
      int v307 = (const void *)(v216 + 4);
      size_t v308 = strlen((const char *)(v216 + 4));
      uint64_t v309 = dataTypeFromString(v307, v308);
      int v310 = [MTLBuiltInArgument alloc];
      int v311 = (unsigned __int16 *)((char *)v29 - *v29);
      v313 = *v311 < 0xBu || (uint64_t v312 = v311[5]) == 0 || *((unsigned __int8 *)v29 + v312) == 0;
      uint64_t v314 = 4;
      goto LABEL_475;
    case 270337:
      int v57 = (int *)AirReflection::Node::node_as_BaseVertexArg(v8);
      uint64_t v58 = *v57;
      uint64_t v59 = -v58;
      uint64_t v60 = (unsigned __int16 *)((char *)v57 - v58);
      if (*v60 >= 9u && (uint64_t v61 = v60[4]) != 0)
      {
        uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v57 + v61 + *(unsigned int *)((char *)v57 + v61) + 4];
        uint64_t v59 = -(uint64_t)*v57;
      }
      else
      {
        uint64_t v21 = &stru_1ECAC84A8;
      }
      v219 = (unsigned __int16 *)((char *)v57 + v59);
      if (*v219 < 7u)
      {
        uint64_t v220 = 0;
      }
      else
      {
        uint64_t v220 = v219[3];
        if (v220) {
          v220 += (uint64_t)v57 + *(unsigned int *)((char *)v57 + v220);
        }
      }
      v315 = (const void *)(v220 + 4);
      size_t v316 = strlen((const char *)(v220 + 4));
      uint64_t v309 = dataTypeFromString(v315, v316);
      int v310 = [MTLBuiltInArgument alloc];
      v317 = (unsigned __int16 *)((char *)v57 - *v57);
      v313 = *v317 < 0xBu || (uint64_t v318 = v317[5]) == 0 || *((unsigned __int8 *)v57 + v318) == 0;
      uint64_t v314 = 3;
      goto LABEL_475;
    case 270338:
      int v62 = (int *)AirReflection::Node::node_as_InstanceIDArg(v8);
      uint64_t v63 = *v62;
      uint64_t v64 = -v63;
      unint64_t v65 = (unsigned __int16 *)((char *)v62 - v63);
      if (*v65 >= 9u && (uint64_t v66 = v65[4]) != 0)
      {
        uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v62 + v66 + *(unsigned int *)((char *)v62 + v66) + 4];
        uint64_t v64 = -(uint64_t)*v62;
      }
      else
      {
        uint64_t v21 = &stru_1ECAC84A8;
      }
      uint64_t v221 = (unsigned __int16 *)((char *)v62 + v64);
      if (*v221 < 7u)
      {
        uint64_t v222 = 0;
      }
      else
      {
        uint64_t v222 = v221[3];
        if (v222) {
          v222 += (uint64_t)v62 + *(unsigned int *)((char *)v62 + v222);
        }
      }
      v319 = (const void *)(v222 + 4);
      size_t v320 = strlen((const char *)(v222 + 4));
      uint64_t v309 = dataTypeFromString(v319, v320);
      int v310 = [MTLBuiltInArgument alloc];
      int v321 = (unsigned __int16 *)((char *)v62 - *v62);
      v313 = *v321 < 0xBu || (uint64_t v322 = v321[5]) == 0 || *((unsigned __int8 *)v62 + v322) == 0;
      uint64_t v314 = 2;
      goto LABEL_475;
    case 270339:
      unint64_t v51 = (int *)AirReflection::Node::node_as_VertexIDArg(v8);
      uint64_t v52 = *v51;
      uint64_t v53 = -v52;
      long long v54 = (unsigned __int16 *)((char *)v51 - v52);
      if (*v54 >= 9u && (uint64_t v55 = v54[4]) != 0)
      {
        unint64_t v56 = (__CFString *)[NSString stringWithUTF8String:(char *)v51 + v55 + *(unsigned int *)((char *)v51 + v55) + 4];
        uint64_t v53 = -(uint64_t)*v51;
      }
      else
      {
        unint64_t v56 = &stru_1ECAC84A8;
      }
      v217 = (unsigned __int16 *)((char *)v51 + v53);
      if (*v217 < 7u)
      {
        uint64_t v218 = 0;
      }
      else
      {
        uint64_t v218 = v217[3];
        if (v218) {
          v218 += (uint64_t)v51 + *(unsigned int *)((char *)v51 + v218);
        }
      }
      int v299 = (const void *)(v218 + 4);
      size_t v300 = strlen((const char *)(v218 + 4));
      uint64_t v301 = dataTypeFromString(v299, v300);
      v302 = [MTLBuiltInArgument alloc];
      MTLGPUFamily v303 = (unsigned __int16 *)((char *)v51 - *v51);
      v305 = *v303 < 0xBu || (uint64_t v304 = v303[5]) == 0 || *((unsigned __int8 *)v51 + v304) == 0;
      uint64_t v14 = 1;
      int v306 = [(MTLBuiltInArgument *)v302 initWithName:v56 type:15 access:0 active:v305 index:0 dataType:v301 builtInType:1];
      int v298 = (MTLBuiltInMeshArgument *)v306;
      goto LABEL_476;
    case 270340:
    case 270341:
    case 270344:
    case 270345:
      return v15 | v14;
    case 270342:
      unint64_t v67 = (int *)AirReflection::Node::node_as_PatchIDArg(v8);
      uint64_t v68 = *v67;
      uint64_t v69 = -v68;
      long long v70 = (unsigned __int16 *)((char *)v67 - v68);
      if (*v70 >= 9u && (uint64_t v71 = v70[4]) != 0)
      {
        uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v67 + v71 + *(unsigned int *)((char *)v67 + v71) + 4];
        uint64_t v69 = -(uint64_t)*v67;
      }
      else
      {
        uint64_t v21 = &stru_1ECAC84A8;
      }
      unint64_t v223 = (unsigned __int16 *)((char *)v67 + v69);
      if (*v223 < 7u)
      {
        uint64_t v224 = 0;
      }
      else
      {
        uint64_t v224 = v223[3];
        if (v224) {
          v224 += (uint64_t)v67 + *(unsigned int *)((char *)v67 + v224);
        }
      }
      v323 = (const void *)(v224 + 4);
      size_t v324 = strlen((const char *)(v224 + 4));
      uint64_t v309 = dataTypeFromString(v323, v324);
      int v310 = [MTLBuiltInArgument alloc];
      v325 = (unsigned __int16 *)((char *)v67 - *v67);
      v313 = *v325 < 0xBu || (uint64_t v326 = v325[5]) == 0 || *((unsigned __int8 *)v67 + v326) == 0;
      uint64_t v314 = 13;
      goto LABEL_475;
    case 270343:
      unint64_t v72 = (int *)AirReflection::Node::node_as_PositionInPatchArg(v8);
      uint64_t v73 = *v72;
      uint64_t v74 = -v73;
      int v75 = (unsigned __int16 *)((char *)v72 - v73);
      if (*v75 >= 9u && (uint64_t v76 = v75[4]) != 0)
      {
        uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v72 + v76 + *(unsigned int *)((char *)v72 + v76) + 4];
        uint64_t v74 = -(uint64_t)*v72;
      }
      else
      {
        uint64_t v21 = &stru_1ECAC84A8;
      }
      v225 = (unsigned __int16 *)((char *)v72 + v74);
      if (*v225 < 7u)
      {
        uint64_t v226 = 0;
      }
      else
      {
        uint64_t v226 = v225[3];
        if (v226) {
          v226 += (uint64_t)v72 + *(unsigned int *)((char *)v72 + v226);
        }
      }
      v327 = (const void *)(v226 + 4);
      size_t v328 = strlen((const char *)(v226 + 4));
      uint64_t v309 = dataTypeFromString(v327, v328);
      int v310 = [MTLBuiltInArgument alloc];
      int v329 = (unsigned __int16 *)((char *)v72 - *v72);
      BOOL v313 = *v329 < 0xBu || (v330 = v329[5]) == 0 || *((unsigned __int8 *)v72 + v330) == 0;
      uint64_t v314 = 14;
      goto LABEL_475;
    case 270350:
      unint64_t v77 = (int *)AirReflection::Node::node_as_AmplificationCountArg(v8);
      uint64_t v78 = *v77;
      uint64_t v79 = -v78;
      long long v80 = (unsigned __int16 *)((char *)v77 - v78);
      if (*v80 >= 9u && (uint64_t v81 = v80[4]) != 0)
      {
        uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v77 + v81 + *(unsigned int *)((char *)v77 + v81) + 4];
        uint64_t v79 = -(uint64_t)*v77;
      }
      else
      {
        uint64_t v21 = &stru_1ECAC84A8;
      }
      v227 = (unsigned __int16 *)((char *)v77 + v79);
      if (*v227 < 7u)
      {
        uint64_t v228 = 0;
      }
      else
      {
        uint64_t v228 = v227[3];
        if (v228) {
          v228 += (uint64_t)v77 + *(unsigned int *)((char *)v77 + v228);
        }
      }
      int v331 = (const void *)(v228 + 4);
      size_t v332 = strlen((const char *)(v228 + 4));
      uint64_t v309 = dataTypeFromString(v331, v332);
      int v310 = [MTLBuiltInArgument alloc];
      int v333 = (unsigned __int16 *)((char *)v77 - *v77);
      BOOL v313 = *v333 < 0xBu || (v334 = v333[5]) == 0 || *((unsigned __int8 *)v77 + v334) == 0;
      uint64_t v314 = 22;
      goto LABEL_475;
    case 270351:
      unint64_t v82 = (int *)AirReflection::Node::node_as_AmplificationIDArg(v8);
      uint64_t v83 = *v82;
      uint64_t v84 = -v83;
      unint64_t v85 = (unsigned __int16 *)((char *)v82 - v83);
      if (*v85 >= 9u && (uint64_t v86 = v85[4]) != 0)
      {
        uint64_t v21 = (__CFString *)[NSString stringWithUTF8String:(char *)v82 + v86 + *(unsigned int *)((char *)v82 + v86) + 4];
        uint64_t v84 = -(uint64_t)*v82;
      }
      else
      {
        uint64_t v21 = &stru_1ECAC84A8;
      }
      v229 = (unsigned __int16 *)((char *)v82 + v84);
      if (*v229 < 7u)
      {
        uint64_t v230 = 0;
      }
      else
      {
        uint64_t v230 = v229[3];
        if (v230) {
          v230 += (uint64_t)v82 + *(unsigned int *)((char *)v82 + v230);
        }
      }
      MTLGPUFamily v335 = (const void *)(v230 + 4);
      size_t v336 = strlen((const char *)(v230 + 4));
      uint64_t v309 = dataTypeFromString(v335, v336);
      int v310 = [MTLBuiltInArgument alloc];
      v337 = (unsigned __int16 *)((char *)v82 - *v82);
      v313 = *v337 < 0xBu || (uint64_t v338 = v337[5]) == 0 || *((unsigned __int8 *)v82 + v338) == 0;
      uint64_t v314 = 21;
      goto LABEL_475;
    default:
      goto LABEL_9;
  }
  return v15 | v14;
}

void sub_18274A958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  ContextStack::~ContextStack((ContextStack *)va);
  _Unwind_Resume(a1);
}

uint64_t AirReflection::Node::node_as_BufferArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x40000)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_TextureArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262146) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t textureTypeFromString(void *__src, size_t __len, _DWORD *a3, unsigned char *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v9 = __len | 7;
    }
    size_t v10 = v9 + 1;
    uint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)__len;
    int64_t v23 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v23) = __len;
  uint64_t v8 = __dst;
  if (__len) {
LABEL_8:
  }
    memmove(v8, __src, __len);
  *((unsigned char *)v8 + __len) = 0;
  if (v23 >= 0) {
    unint64_t v11 = (const char *)__dst;
  }
  else {
    unint64_t v11 = (const char *)__dst[0];
  }
  v26[0] = 0;
  uint64_t v27 = v11;
  v26[1] = strlen(v11);
  NextToken = BasicParser::getNextToken((BasicParser *)v26);
  if (!strcmp(NextToken, "array")) {
    NextToken = BasicParser::getNextToken((BasicParser *)v26);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&textureTypeMapOnce, memory_order_acquire) != -1)
  {
    __p[0] = &v24;
    uint64_t v25 = __p;
    std::__call_once(&textureTypeMapOnce, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<textureTypeMap(void)::$_0 &&>>);
  }
  uint64_t v13 = textureTypeMap(void)::nonGlobalTextureTypeMap;
  std::string::basic_string[abi:ne180100]<0>(__p, NextToken);
  uint64_t v14 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(v13, (const void **)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = *(unsigned int *)(v14 + 56);
  *a4 = *(unsigned char *)(v14 + 60);
  size_t v16 = BasicParser::getNextToken((BasicParser *)v26);
  uint64_t v17 = bufferTypeMap();
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  uint64_t v18 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::find<std::string>(v17, (const void **)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  *a3 = *(_DWORD *)(v18 + 60);
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst[0]);
  }
  return v15;
}

void sub_18274AC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ContextStack::ContextStack(ContextStack *this, MTLFunctionType a2, char a3)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(void *)this = a2;
  *((unsigned char *)this + 8) = a3;
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)this + 16, (uint64_t *)v3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v3);
}

uint64_t AirReflection::Node::node_as_IndirectConstantArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262149) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_IndirectBufferArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262148) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_SamplerArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262145) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_VertexIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270339) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadPositionInGridArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 266240)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_InstanceIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270338) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_AmplificationIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270351) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadsPerThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266245) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_VisibleFunctionTableArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262153) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadsPerGridArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266241) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void MTLResourceListRelease(void *a1)
{
  uint64_t v1 = a1[9];
  if (v1)
  {
    a1[9] = 0;
    BOOL v3 = a1;
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
    v3[10] = 0;
    unsigned int v2 = *(void **)(v1 + 16);
    v3[11] = v2;
    *unsigned int v2 = v3;
    *(void *)(v1 + 16) = v3 + 10;
    ++*(_DWORD *)(v1 + 28);
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
    a1 = (void *)v1;
  }
}

uint64_t MTLGetGPUFamilyFromFeatureSet(unint64_t a1)
{
  uint64_t v1 = (uint64_t *)((char *)&unk_1828F08A0 + 8 * a1);
  if (a1 >= 0x13) {
    uint64_t v1 = &MTLGPUFamilyNA;
  }
  return *v1;
}

void *MTLPipelineLibraryBuilder::newLibraryWithFile(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a4) {
    *a4 = 0;
  }
  if (a3)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (a2) {
        goto LABEL_6;
      }
LABEL_49:
      MTLReportFailure(0, "newLibraryWithFile", 766, @"device must not be nil.", a5, a6, a7, a8, v42);
      return a2;
    }
    int v39 = @"filePath is not a NSString.";
    unint64_t v40 = 1;
    uint64_t v41 = 764;
  }
  else
  {
    int v39 = @"filePath must not be nil.";
    unint64_t v40 = 0;
    uint64_t v41 = 761;
  }
  MTLReportFailure(v40, "newLibraryWithFile", v41, (uint64_t)v39, a5, a6, a7, a8, v42);
  if (!a2) {
    goto LABEL_49;
  }
LABEL_6:
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    MTLReportFailure(1uLL, "newLibraryWithFile", 771, @"device is not a MTLDevice.", v12, v13, v14, v15, v42);
  }
  id v16 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
  if (([v16 fileExistsAtPath:a3] & 1) == 0)
  {
    if (!a4) {
      return 0;
    }
    uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"pipeline library not found" forKey:*MEMORY[0x1E4F28568]];
    a2 = 0;
    *a4 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:6 userInfo:v24];
    return a2;
  }
  uint64_t v17 = (const char *)[a3 UTF8String];
  uint64_t v45 = 0;
  long long v46 = 0;
  *(void *)&v47.st_dev = 0;
  asprintf((char **)&v47, "%s/pipelines.desc", v17);
  uint64_t v18 = *(char **)&v47.st_dev;
  if (!stat(*(const char **)&v47.st_dev, &v47))
  {
    int v25 = open(v18, 0);
    if ((v25 & 0x80000000) == 0)
    {
      std::allocate_shared[abi:ne180100]<MTLPipelineDescriptions,std::allocator<MTLPipelineDescriptions>,objc_object  {objcproto9MTLDevice}*&,void>(a1, &v43);
      BOOL v22 = v44;
      uint64_t v45 = v43;
      long long v46 = v44;
      if (MTLPipelineDescriptions::initWithFileDescriptor(v43, v25, v17))
      {
        close(v25);
        int v23 = 1;
        goto LABEL_26;
      }
      uint64_t v28 = objc_msgSend(NSString, "stringWithFormat:", @"could not open file: %s", v18);
      if (a4)
      {
        uint64_t v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v28 forKey:*MEMORY[0x1E4F28568]];
        *a4 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v29];
      }
      close(v25);
LABEL_25:
      int v23 = 0;
      goto LABEL_26;
    }
    uint64_t v26 = objc_msgSend(NSString, "stringWithFormat:", @"could not open file: %s", v18);
    if (a4)
    {
      uint64_t v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v26 forKey:*MEMORY[0x1E4F28568]];
      id v21 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v27];
      goto LABEL_12;
    }
LABEL_21:
    BOOL v22 = 0;
    goto LABEL_25;
  }
  uint64_t v19 = objc_msgSend(NSString, "stringWithFormat:", @"file not found: %s", v18);
  if (!a4) {
    goto LABEL_21;
  }
  uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v19 forKey:*MEMORY[0x1E4F28568]];
  id v21 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:6 userInfo:v20];
LABEL_12:
  BOOL v22 = 0;
  int v23 = 0;
  *a4 = v21;
LABEL_26:
  if (v18) {
    free(v18);
  }
  if (v23)
  {
    if (objc_opt_respondsToSelector())
    {
      uint64_t v30 = (stat *)[a2 targetDeviceInfo];
    }
    else
    {
      *(void *)&v47.st_dev = 0;
      LODWORD(v47.st_ino) = 0;
      *(void *)&v47.st_uid = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)*a1, "name"), "stringByReplacingOccurrencesOfString:withString:", @" ", &stru_1ECAC84A8), "UTF8String");
      uint64_t v30 = &v47;
    }
    uint64_t v31 = objc_msgSend([NSString alloc], "initWithFormat:", @"%s/pipelines.%s", v17, *(void *)&v30->st_uid);
    unint64_t v32 = [[_MTLPipelineCache alloc] initWithFilePath:v31 readOnly:1 deviceInfo:v30];
    if (v32)
    {

      *(void *)&v47.st_dev = 0;
      LODWORD(v47.st_ino) = 0;
      *(void *)&v47.st_uid = "";
      uint64_t v33 = objc_msgSend([NSString alloc], "initWithFormat:", @"%s/functions", v17);
      if (([v16 fileExistsAtPath:v33] & 1) == 0)
      {

        uint64_t v33 = 0;
      }
      if ([[_MTLPipelineCache alloc] initWithFilePath:v33 readOnly:1 deviceInfo:&v47])
      {

        operator new();
      }
      uint64_t v36 = objc_msgSend(NSString, "stringWithFormat:", @"Could not open function cache file: %s", objc_msgSend(v33, "UTF8String"));
      if (a4)
      {
        uint64_t v37 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v36 forKey:*MEMORY[0x1E4F28568]];
        *a4 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:6 userInfo:v37];
      }
    }
    else
    {
      uint64_t v34 = objc_msgSend(NSString, "stringWithFormat:", @"Could not open pipeline cache file: %s", objc_msgSend(v31, "UTF8String"));
      if (a4)
      {
        uint64_t v35 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v34 forKey:*MEMORY[0x1E4F28568]];
        *a4 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:6 userInfo:v35];
      }
    }
  }
  a2 = 0;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return a2;
}

void sub_18274C820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  MEMORY[0x18530C140](v15, 0xA0C40D4F6A234);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(a1);
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithFile(uint64_t a1, _MTLDevice *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a4) {
    *a4 = 0;
  }
  if (!a3)
  {
    id v21 = @"filepath must not be nil.";
    unint64_t v22 = 0;
    uint64_t v23 = 6166;
    goto LABEL_22;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v21 = @"filepath is not a NSString.";
    unint64_t v22 = 1;
    uint64_t v23 = 6169;
LABEL_22:
    MTLReportFailure(v22, "newLibraryWithFile", v23, (uint64_t)v21, a5, a6, a7, a8, *(uint64_t *)v27.count);
    if (a2) {
      goto LABEL_6;
    }
LABEL_23:
    uint64_t v24 = @"device must not be nil.";
    unint64_t v25 = 0;
    uint64_t v26 = 6173;
    goto LABEL_25;
  }
  if (!a2) {
    goto LABEL_23;
  }
LABEL_6:
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    goto LABEL_7;
  }
  uint64_t v24 = @"device is not a MTLDevice.";
  unint64_t v25 = 1;
  uint64_t v26 = 6176;
LABEL_25:
  MTLReportFailure(v25, "newLibraryWithFile", v26, (uint64_t)v24, a5, a6, a7, a8, *(uint64_t *)v27.count);
LABEL_7:
  if ([objc_alloc_init(MEMORY[0x1E4F28CB8]) fileExistsAtPath:a3])
  {
    size_t v12 = [a3 lengthOfBytesUsingEncoding:4] + 1;
    uint64_t v13 = (char *)malloc_type_malloc(v12, 0x1D079C43uLL);
    if ([a3 getCString:v13 maxLength:v12 encoding:4])
    {
      uint64_t v14 = _MTLGetLibrariesCache(a2);
      CC_LONG v15 = strlen(v13);
      *(_OWORD *)md = 0u;
      long long v32 = 0u;
      CC_SHA256_Init(&v27);
      CC_SHA256_Update(&v27, v13, v15);
      CC_SHA256_Final(md, &v27);
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      long long v29 = *(_OWORD *)md;
      _OWORD v28[2] = ___ZN17MTLLibraryBuilder18newLibraryWithFileEPU19objcproto9MTLDevice11objc_objectP8NSStringPP7NSError_block_invoke;
      v28[3] = &unk_1E5221088;
      v28[6] = a1;
      v28[7] = v13;
      v28[8] = v14;
      long long v30 = v32;
      v28[4] = a3;
      v28[5] = a2;
      id v16 = MTLLibraryBuilder::newLibraryWithArchive(a1, (long long *)md, a4, (uint64_t)v28);
      if (!v13) {
        return v16;
      }
      goto LABEL_18;
    }
    if (a4)
    {
      uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"error while opening the library" forKey:*MEMORY[0x1E4F28568]];
      id v19 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v18];
      id v16 = 0;
      *a4 = v19;
      if (!v13) {
        return v16;
      }
      goto LABEL_18;
    }
    id v16 = 0;
    if (v13) {
LABEL_18:
    }
      free(v13);
  }
  else if (a4)
  {
    uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"library not found" forKey:*MEMORY[0x1E4F28568]];
    id v16 = 0;
    *a4 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:6 userInfo:v17];
  }
  else
  {
    return 0;
  }
  return v16;
}

void sub_18274CC7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineDataCache::open(MTLPipelineDataCache *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (os_unfair_lock_s *)((char *)this + 8);
  os_unfair_lock_lock((os_unfair_lock_t)this + 2);
  if (*((unsigned char *)this + 48))
  {
    BOOL v3 = (char *)this + 24;
    if (*((char *)this + 47) < 0) {
      BOOL v3 = *(const char **)v3;
    }
    asprintf((char **)this + 7, "%s", v3);
    uint64_t v4 = fopen(*((const char **)this + 7), "wb");
    if (!v4)
    {
      int v5 = 0;
      goto LABEL_16;
    }
    fclose(v4);
LABEL_6:
    int v5 = 1;
LABEL_16:
    *((unsigned char *)this + 49) = v5;
    int v11 = 1;
    goto LABEL_17;
  }
  uint64_t v6 = (char *)this + 24;
  if (*((char *)this + 47) < 0) {
    uint64_t v6 = *(const char **)v6;
  }
  int v7 = open(v6, 0);
  int v8 = v7;
  if ((v7 & 0x80000000) == 0)
  {
    if (fstat(v7, &v16))
    {
      size_t v9 = MTLPipelineLibraryDebugLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        size_t v10 = __error();
        MTLPipelineDataCache::open(v10, buf, v9);
      }
      close(v8);
    }
    else
    {
      st_size_t size = v16.st_size;
      *((void *)this + 18) = v16.st_size;
      *((void *)this + 17) = mmap(0, st_size, 1, 1, v8, 0);
      close(v8);
      if (*((void *)this + 17) == -1)
      {
        uint64_t v14 = MTLPipelineLibraryDebugLog();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          CC_LONG v15 = __error();
          MTLPipelineDataCache::open(v15, buf, v14);
        }
      }
      else if (MTLPipelineDataCache::parseDataFileHeader(this))
      {
        goto LABEL_6;
      }
    }
  }
  int v5 = 0;
  int v11 = 0;
LABEL_17:
  os_unfair_lock_unlock(v2);
  return v5 & v11;
}

void sub_18274CE44(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerCache::createPipelineDataCache()
{
}

void sub_18274CF20(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10B3C40AB0C916ALL);
  _Unwind_Resume(a1);
}

void *PipelineLibraryData::PipelineLibraryData(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[2] = a3;
  a1[3] = a4;
  return a1;
}

void sub_18274CFA4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<MTLPipelineDescriptions,std::allocator<MTLPipelineDescriptions>,objc_object  {objcproto9MTLDevice}*&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x100uLL);
  uint64_t result = std::__shared_ptr_emplace<MTLPipelineDescriptions>::__shared_ptr_emplace[abi:ne180100]<objc_object  {objcproto9MTLDevice}*&,std::allocator<MTLPipelineDescriptions>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_18274D088(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MTLPipelineDescriptions>::__shared_ptr_emplace[abi:ne180100]<objc_object  {objcproto9MTLDevice}*&,std::allocator<MTLPipelineDescriptions>,0>(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1ECAC7508;
  uint64_t v3 = *a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 47) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = v3;
  *(void *)(a1 + 40) = dispatch_queue_create("pipelineDescriptions queue", 0);
  return a1;
}

BOOL MTLPipelineDescriptions::initWithFileDescriptor(MTLPipelineDescriptions *this, int a2, const char *a3)
{
  int v6 = fstat(a2, &v58);
  if (!v6)
  {
    st_size_t size = v58.st_size;
    int v8 = mmap(0, v58.st_size, 1, 1, a2, 0);
    *(void *)this = v8;
    *((void *)this + 1) = st_size;
    v57[0] = v8;
    v57[1] = st_size;
    v56[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v57, 0);
    v56[1] = v9;
    size_t v10 = (void *)MEMORY[0x18530C9F0]();
    CC_LONG v15 = (void *)[NSString stringWithUTF8String:a3];
    if (!v15) {
      MTLReportFailure(0, "initWithFileDescriptor", 228, @"stringWithUTF8String returned nil!", v11, v12, v13, v14, (uint64_t)__p[0]);
    }
    uint64_t v20 = (void *)[v15 stringByStandardizingPath];
    if (!v20) {
      MTLReportFailure(0, "initWithFileDescriptor", 231, @"stringByStandardizingPath returned nil!", v16, v17, v18, v19, (uint64_t)__p[0]);
    }
    unint64_t v25 = (void *)[v20 stringByDeletingLastPathComponent];
    if (!v25) {
      MTLReportFailure(0, "initWithFileDescriptor", 234, @"stringByDeletingLastPathComponent returned nil!", v21, v22, v23, v24, (uint64_t)__p[0]);
    }
    uint64_t ElementCount = MTLSerializer::SerializedObjectList::getElementCount((MTLSerializer::SerializedObjectList *)v56);
    if (ElementCount)
    {
      uint64_t v27 = ElementCount;
      for (uint64_t i = 0; i != v27; ++i)
      {
        v55[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v56, i);
        v55[1] = v29;
        uint64_t Object = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v55, 0);
        if (Object)
        {
          if (!v30) {
LABEL_29:
          }
            abort();
          uint64_t v36 = NSString;
          uint64_t v37 = (unsigned __int8 *)Object;
          while (*v37++)
          {
            if (!--v30) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          MTLReportFailure(0, "initWithFileDescriptor", 251, @"Library has no fileName property !", v31, v32, v33, v34, (uint64_t)__p[0]);
          uint64_t v36 = NSString;
        }
        uint64_t v43 = [v36 stringWithUTF8String:Object];
        if (!v43) {
          MTLReportFailure(0, "initWithFileDescriptor", 255, @"stringWithUTF8String return nil !", v39, v40, v41, v42, (uint64_t)__p[0]);
        }
        uint64_t v48 = (void *)[v25 stringByAppendingPathComponent:v43];
        if (!v48) {
          MTLReportFailure(0, "initWithFileDescriptor", 258, @"stringByAppendingPathComponent returned nil !", v44, v45, v46, v47, (uint64_t)__p[0]);
        }
        MEMORY[0x18530BF30](__p, objc_msgSend(v48, "UTF8String", 0, 0, 0, 0));
        uint64_t v54 = 0;
        unint64_t v49 = *((void *)this + 26);
        if (v49 >= *((void *)this + 27))
        {
          uint64_t v50 = std::vector<MTLPipelineDescriptions::LibraryReference>::__push_back_slow_path<MTLPipelineDescriptions::LibraryReference const&>((uint64_t *)this + 25, (long long *)__p);
        }
        else
        {
          std::vector<MTLPipelineDescriptions::LibraryReference>::__construct_one_at_end[abi:ne180100]<MTLPipelineDescriptions::LibraryReference const&>((uint64_t)this + 200, (long long *)__p);
          uint64_t v50 = v49 + 32;
        }
        *((void *)this + 26) = v50;
        if (v53 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v6 == 0;
}

void sub_18274D3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<MTLPipelineDescriptions::LibraryReference>::__push_back_slow_path<MTLPipelineDescriptions::LibraryReference const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    size_t v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(v7, v9);
  }
  else {
    size_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((void *)a2 + 3);
  uint64_t v16 = (std::string *)((char *)v11 + 32);
  std::vector<MTLPipelineDescriptions::LibraryReference>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_18274D4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLPipelineDescriptions::LibraryReference>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLPipelineDescriptions::LibraryReference>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLPipelineDescriptions::LibraryReference>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLPipelineDescriptions::LibraryReference>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLPipelineDescriptions::LibraryReference>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  unsigned int v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      unsigned int v2 = v5;
    }
    while (v5 != a2);
  }
}

void MTLLibraryBuilder::newLibraryWithSource(uint64_t a1, void *a2, void *a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = a5;
  uint64_t v242 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    unint64_t v163 = @"source must not be nil.";
    unint64_t v164 = 0;
    uint64_t v165 = 8657;
LABEL_307:
    MTLReportFailure(v164, "newLibraryWithSource", v165, (uint64_t)v163, a5, a6, a7, a8, v166);
    goto LABEL_3;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v163 = @"source is not a NSString.";
    unint64_t v164 = 1;
    uint64_t v165 = 8660;
    goto LABEL_307;
  }
LABEL_3:
  if (a4)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      MTLReportFailure(1uLL, "newLibraryWithSource", 8665, @"options is not a MTLCompileOptions.", v12, v13, v14, v15, v166);
    }
    if ([a4 libraryType] == 1 && !objc_msgSend((id)objc_msgSend(a4, "installName"), "length"))
    {
      uint64_t v94 = [NSString stringWithUTF8String:"options.installName cannot be nil or empty when options.libraryType is MTLLibraryTypeDynamic."];
      if (!v94) {
        uint64_t v94 = [NSString stringWithCString:"options.installName cannot be nil or empty when options.libraryType is MTLLibraryTypeDynamic." encoding:1];
      }
      uint64_t v95 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v94 forKey:*MEMORY[0x1E4F28568]];
      id v199 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v95];
      (*(void (**)(uint64_t, void))(a6 + 16))(a6, 0);

      return;
    }
    if ([a4 optimizationLevel] < 0 || objc_msgSend(a4, "optimizationLevel") >= 2)
    {
      uint64_t v155 = [a4 optimizationLevel];
      MTLReportFailure(1uLL, "newLibraryWithSource", 8678, @"options.optimizationLevel has unsupported value %u", v156, v157, v158, v159, v155);
      if (a2) {
        goto LABEL_11;
      }
LABEL_304:
      uint64_t v160 = @"device must not be nil.";
      unint64_t v161 = 0;
      uint64_t v162 = 8682;
      goto LABEL_309;
    }
  }
  if (!a2) {
    goto LABEL_304;
  }
LABEL_11:
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    goto LABEL_12;
  }
  uint64_t v160 = @"device is not a MTLDevice.";
  unint64_t v161 = 1;
  uint64_t v162 = 8685;
LABEL_309:
  MTLReportFailure(v161, "newLibraryWithSource", v162, (uint64_t)v160, a5, a6, a7, a8, v166);
LABEL_12:
  int v233 = 0;
  unsigned int v232 = 0;
  unint64_t v234 = 0;
  uint64_t v185 = a6;
  if (a4) {
    uint64_t v16 = (void *)[a4 preprocessorMacros];
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = getenv("MTL_DISABLE_FASTMATH");
  if (!v17) {
    uint64_t v17 = "0";
  }
  MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled = strtoul(v17, 0, 0) != 0;
  uint64_t v18 = getenv("MTL_REPLACE_FAST_MATH_WITH_RELAXED_MATH");
  if (!v18) {
    uint64_t v18 = "0";
  }
  MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envReplaceFastMathWithRelaxedMath = strtoul(v18, 0, 0) != 0;
  uint64_t v193 = a1;
  char v186 = v9;
  if (a4)
  {
    int v184 = [a4 glBufferBindPoints];
    int v19 = MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled;
    if (!MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled) {
      int v19 = [a4 fastMathEnabled];
    }
  }
  else
  {
    int v184 = 0;
    int v19 = MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled;
    if (!MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled) {
      int v19 = 1;
    }
  }
  BOOL v20 = v19 != 0;
  int v21 = [a2 workaroundNewLibraryWithSourceReplaceFastMathWithRelaxedMath];
  BOOL v22 = MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled == 0;
  BOOL v89 = v19 == 0;
  uint64_t v23 = 2
      * (MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled == 0);
  if (v89) {
    BOOL v22 = 0;
  }
  uint64_t v187 = MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled;
  if (a4
    && !MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envFastMathDisabled)
  {
    uint64_t v23 = [a4 mathMode];
    uint64_t v187 = [a4 mathFloatingPointFunctions];
    BOOL v22 = v20;
  }
  if (MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::envReplaceFastMathWithRelaxedMath) {
    int v24 = 1;
  }
  else {
    int v24 = v21;
  }
  if (v23 == 2) {
    BOOL v22 = 1;
  }
  char v173 = v24 & v22;
  if ((v24 & v22) != 0) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = v23;
  }
  uint64_t v175 = v25;
  if (a4)
  {
    char v171 = [a4 debuggingEnabled];
    uint64_t v168 = [a4 compileSymbolVisibility];
    int v183 = [a4 allowReferencingUndefinedSymbols];
    uint64_t v182 = [a4 maxTotalThreadsPerThreadgroup];
  }
  else
  {
    int v183 = 0;
    char v171 = 0;
    uint64_t v168 = 0;
    uint64_t v182 = 0;
  }
  int v26 = _MTLCompilePerformanceStatisticsEnabled();
  int v191 = v26;
  if (a4) {
    char v27 = v26;
  }
  else {
    char v27 = 1;
  }
  if ((v27 & 1) == 0)
  {
    int v191 = [a4 compileTimeStatisticsEnabled];
    goto LABEL_47;
  }
  if (a4)
  {
LABEL_47:
    int v181 = [a4 tracingEnabled];
    goto LABEL_48;
  }
  int v181 = 0;
LABEL_48:
  std::string::basic_string[abi:ne180100]<0>(&v231, "");
  long long v196 = a2;
  if ([a4 libraries]
    && (long long v229 = 0u,
        long long v230 = 0u,
        long long v227 = 0u,
        long long v228 = 0u,
        uint64_t v28 = (void *)[a4 libraries],
        (uint64_t v29 = [v28 countByEnumeratingWithState:&v227 objects:v240 count:16]) != 0))
  {
    unsigned int v30 = 0;
    uint64_t v31 = *(void *)v228;
    do
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        if (*(void *)v228 != v31) {
          objc_enumerationMutation(v28);
        }
        uint64_t v33 = *(void **)(*((void *)&v227 + 1) + 8 * i);
        uint64_t v34 = [v33 airData];
        uint64_t v35 = v34;
        if (v34)
        {
          unsigned int v36 = v30;
          int size = dispatch_data_get_size(v34);
          uint64_t v38 = (char *)v233;
          if ((unint64_t)v233 >= v234)
          {
            int64_t v47 = ((unsigned char *)v233 - (unsigned char *)v232) >> 3;
            if ((unint64_t)(v47 + 1) >> 61) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v48 = (uint64_t)(v234 - (void)v232) >> 2;
            if (v48 <= v47 + 1) {
              unint64_t v48 = v47 + 1;
            }
            if (v234 - (unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v48;
            }
            if (v49) {
              uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v234, v49);
            }
            else {
              uint64_t v50 = 0;
            }
            unint64_t v51 = (NSObject **)&v50[8 * v47];
            *unint64_t v51 = v35;
            uint64_t v39 = v51 + 1;
            uint64_t v52 = (char *)v233;
            char v53 = (char *)v232;
            if (v233 != v232)
            {
              do
              {
                uint64_t v54 = *((void *)v52 - 1);
                v52 -= 8;
                *--unint64_t v51 = v54;
              }
              while (v52 != v53);
              uint64_t v52 = (char *)v232;
            }
            unsigned int v232 = v51;
            int v233 = v39;
            unint64_t v234 = (unint64_t)&v50[8 * v49];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *(void *)int v233 = v35;
            uint64_t v39 = v38 + 8;
          }
          int v233 = v39;
          unsigned int v30 = ((size + 7) & 0xFFFFFFFC) + v36;
        }
        else
        {
          uint64_t v40 = (void *)[v33 libraryPath];
          if ([v40 length])
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v40 UTF8String]);
            escapeString((char *)&__p, (std::string *)__src);
            uint64_t v41 = std::string::insert((std::string *)__src, 0, "-Wl,");
            long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            *(void *)&v200[16] = *((void *)&v41->__r_.__value_.__l + 2);
            *(_OWORD *)long long v200 = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            uint64_t v43 = std::string::append((std::string *)v200, " ");
            long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
            *(void *)&__str.hash[2] = *((void *)&v43->__r_.__value_.__l + 2);
            *(_OWORD *)__str.size_t count = v44;
            v43->__r_.__value_.__l.__size_ = 0;
            v43->__r_.__value_.__r.__words[2] = 0;
            v43->__r_.__value_.__r.__words[0] = 0;
            if ((__str.hash[3] & 0x80000000) == 0) {
              p_str = (const std::string::value_type *)&__str;
            }
            else {
              p_str = *(const std::string::value_type **)__str.count;
            }
            if ((__str.hash[3] & 0x80000000) == 0) {
              std::string::size_type v46 = HIBYTE(__str.hash[3]);
            }
            else {
              std::string::size_type v46 = *(void *)__str.hash;
            }
            std::string::append(&v231, p_str, v46);
            if (SHIBYTE(__str.hash[3]) < 0) {
              operator delete(*(void **)__str.count);
            }
            if ((v200[23] & 0x80000000) != 0) {
              operator delete(*(void **)v200);
            }
            if ((__src[23] & 0x80000000) != 0) {
              operator delete(*(void **)__src);
            }
            if (SHIBYTE(v215) < 0) {
              operator delete(__p);
            }
          }
        }
      }
      uint64_t v29 = [v28 countByEnumeratingWithState:&v227 objects:v240 count:16];
    }
    while (v29);
  }
  else
  {
    unsigned int v30 = 0;
  }
  if (![a4 installName]) {
    goto LABEL_105;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend((id)objc_msgSend(a4, "installName"), "UTF8String"));
  escapeString((char *)&__p, (std::string *)__src);
  uint64_t v55 = std::string::insert((std::string *)__src, 0, "-Wl,-install_name -Wl,");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  *(void *)&v200[16] = *((void *)&v55->__r_.__value_.__l + 2);
  *(_OWORD *)long long v200 = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  int v57 = std::string::append((std::string *)v200, " ");
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  *(void *)&__str.hash[2] = *((void *)&v57->__r_.__value_.__l + 2);
  *(_OWORD *)__str.size_t count = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if ((__str.hash[3] & 0x80000000) == 0) {
    uint64_t v59 = (const std::string::value_type *)&__str;
  }
  else {
    uint64_t v59 = *(const std::string::value_type **)__str.count;
  }
  if ((__str.hash[3] & 0x80000000) == 0) {
    std::string::size_type v60 = HIBYTE(__str.hash[3]);
  }
  else {
    std::string::size_type v60 = *(void *)__str.hash;
  }
  std::string::append(&v231, v59, v60);
  if (SHIBYTE(__str.hash[3]) < 0) {
    operator delete(*(void **)__str.count);
  }
  if ((v200[23] & 0x80000000) != 0) {
    operator delete(*(void **)v200);
  }
  if ((__src[23] & 0x80000000) != 0) {
    operator delete(*(void **)__src);
  }
  if (SHIBYTE(v215) < 0)
  {
    operator delete(__p);
    if (a4) {
      goto LABEL_106;
    }
  }
  else
  {
LABEL_105:
    if (a4)
    {
LABEL_106:
      int v61 = [a4 preserveInvariance];
      goto LABEL_109;
    }
  }
  int v61 = 0;
LABEL_109:
  int v62 = [v196 workaroundNewLibraryWithSourceImplicitInvariantPosition];
  int v180 = [v196 workaroundNewLibraryWithSourceImplicitInvariantPosition];
  if (a4)
  {
    uint64_t v63 = [a4 optimizationLevel];
    uint64_t v64 = "-Os ";
    if (v63 != 1) {
      uint64_t v64 = 0;
    }
    __s = (char *)v64;
  }
  else
  {
    __s = 0;
  }
  int v179 = [a4 enableLogging];
  memset(__src, 0, sizeof(__src));
  unint64_t v65 = "--driver-mode=metal -x metal ";
  if (!a4)
  {
    BOOL v194 = 1;
LABEL_122:
    int v69 = _MTLGetMTLCompilerLLVMVersionForDevice(v196);
    if (getDefaultLanguageVersion(int)::pred != -1) {
      dispatch_once(&getDefaultLanguageVersion(int)::pred, &__block_literal_global_1678);
    }
    int v70 = getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion;
    if ((unint64_t)getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion >= 0x30002) {
      int v70 = 196610;
    }
    if ((v69 - 32023) >= 2) {
      unsigned int v68 = 0;
    }
    else {
      unsigned int v68 = v70;
    }
    goto LABEL_129;
  }
  int v66 = [a4 sourceLanguage];
  unint64_t v67 = "--driver-mode=openclc -x cl ";
  if (v66 != 1) {
    unint64_t v67 = 0;
  }
  BOOL v194 = v66 == 0;
  if (v66) {
    unint64_t v65 = v67;
  }
  if (!a4[8]) {
    goto LABEL_122;
  }
  unsigned int v68 = [a4 languageVersion];
LABEL_129:
  std::string::basic_string[abi:ne180100]<0>(v225, "");
  std::string::basic_string[abi:ne180100]<0>(v223, "");
  int v177 = v61 | v62;
  uint64_t v189 = (char *)v65;
  int v190 = v30;
  if (!v194)
  {
    uint64_t v79 = 0;
    uint64_t v167 = 0;
    goto LABEL_203;
  }
  if (!v16
    || (long long v221 = 0u,
        long long v222 = 0u,
        long long v219 = 0u,
        long long v220 = 0u,
        (uint64_t v71 = [v16 countByEnumeratingWithState:&v219 objects:v238 count:16]) == 0))
  {
    uint64_t v72 = 0;
    goto LABEL_148;
  }
  uint64_t v72 = 0;
  uint64_t v73 = *(void *)v220;
  do
  {
    for (uint64_t j = 0; j != v71; ++j)
    {
      if (*(void *)v220 != v73) {
        objc_enumerationMutation(v16);
      }
      int v75 = *(void **)(*((void *)&v219 + 1) + 8 * j);
      uint64_t v76 = (void *)[v16 objectForKey:v75];
      v72 += [v75 lengthOfBytesUsingEncoding:4] + 2;
      if (v76)
      {
        objc_opt_class();
        uint64_t v77 = v72 + 1;
        if (objc_opt_isKindOfClass())
        {
          uint64_t v78 = objc_msgSend((id)objc_msgSend(v76, "stringValue"), "lengthOfBytesUsingEncoding:", 4);
          goto LABEL_141;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v78 = [v76 lengthOfBytesUsingEncoding:4];
LABEL_141:
          v77 += v78;
        }
        uint64_t v72 = v77 + 1;
        continue;
      }
    }
    uint64_t v71 = [v16 countByEnumeratingWithState:&v219 objects:v238 count:16];
  }
  while (v71);
LABEL_148:
  long long v80 = "-fmetal-math-mode=relaxed ";
  if (!v175) {
    long long v80 = "-fmetal-math-mode=safe ";
  }
  if (v175 == 2) {
    uint64_t v81 = "-fmetal-math-mode=fast ";
  }
  else {
    uint64_t v81 = v80;
  }
  MEMORY[0x18530BF30](v225, v81);
  if ((v226 & 0x80u) == 0) {
    unint64_t v82 = v226;
  }
  else {
    unint64_t v82 = (unint64_t)v225[1];
  }
  if (v173 & 1 | (v187 == 1)) {
    uint64_t v83 = "-fmetal-math-fp32-functions=precise ";
  }
  else {
    uint64_t v83 = "-fmetal-math-fp32-functions=fast ";
  }
  MEMORY[0x18530BF30](v223, v83);
  unint64_t v84 = v224;
  unint64_t v85 = (char *)v223[1];
  uint64_t v86 = [a4 libraryType];
  if ((v84 & 0x80u) == 0) {
    int v87 = (char *)v84;
  }
  else {
    int v87 = v85;
  }
  uint64_t v88 = &v87[v82 + v72];
  BOOL v89 = v168 == 1 && v86 == 1;
  if (v89) {
    v88 += 20;
  }
  if (v183) {
    unint64_t v90 = v88 + 24;
  }
  else {
    unint64_t v90 = v88;
  }
  if (v182)
  {
    memset(&__str, 0, 64);
    snprintf((char *)&__str, 0x3FuLL, "-fmax-total-threads-per-threadgroup=%lu ", v182);
    v90 += strlen((const char *)&__str);
  }
  unint64_t v65 = v189;
  uint64_t v91 = v90 + 22;
  if (!v177) {
    uint64_t v91 = v90;
  }
  if (v180) {
    unint64_t v92 = v91 + 30;
  }
  else {
    unint64_t v92 = v91;
  }
  unsigned int v30 = v190;
  if (__s) {
    v92 += strlen(__s);
  }
  if (v179) {
    v92 += 23;
  }
  if (HIWORD(v68) <= 2u) {
    snprintf(__src, 0x1FuLL, "-std=ios-metal%u.%u ");
  }
  else {
    snprintf(__src, 0x1FuLL, "-std=metal%u.%u ");
  }
  uint64_t v93 = &v92[strlen(__src)];
  if (v181)
  {
    uint64_t v167 = 0;
    v93 += 24;
  }
  else if ((v171 & 1) != 0 {
         || (objc_opt_respondsToSelector() & 1) != 0 && [v196 shaderDebugInfoCaching])
  }
  {
    v93 += 34;
    uint64_t v167 = "-debug-info-kind=line-tables-only ";
  }
  else
  {
    uint64_t v167 = 0;
  }
  uint64_t v96 = [a4 libraryType];
  BOOL v97 = v93 + 16;
  if (!v184) {
    BOOL v97 = v93;
  }
  if (v96 == 1) {
    v97 += 27;
  }
  std::string::size_type v98 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
  if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v98 = v231.__r_.__value_.__l.__size_;
  }
  uint64_t v79 = &v97[v98];
LABEL_203:
  if (a4 && (uint64_t v99 = (void *)[a4 additionalCompilerArguments]) != 0)
  {
    long long v188 = v99;
    char v100 = 0;
    v79 += [v99 lengthOfBytesUsingEncoding:4] + 1;
  }
  else
  {
    long long v188 = 0;
    char v100 = 1;
  }
  int v101 = strlen(v65);
  MTLGetCompilerWorkingDir(v217);
  char v176 = v100;
  if (v218 < 0)
  {
    if (!v217[1]) {
      goto LABEL_213;
    }
    unint64_t v102 = (void **)v217[0];
LABEL_212:
    uint64_t v197 = (void *)[NSString stringWithFormat:@"-working-directory \"%@\" ", objc_msgSend(NSString, "stringWithCString:encoding:", v102, 4)];
    int v103 = [v197 lengthOfBytesUsingEncoding:4];
  }
  else
  {
    if (v218)
    {
      unint64_t v102 = v217;
      goto LABEL_212;
    }
LABEL_213:
    int v103 = 0;
    uint64_t v197 = 0;
  }
  uint64_t v104 = *(void **)(v193 + 48);
  if (v104) {
    v103 += [v104 length] + 24;
  }
  int v170 = v101 + v79;
  unsigned int v105 = v101 + v79 + v103 + 1;
  uint64_t v106 = [a3 lengthOfBytesUsingEncoding:4] + 1;
  uint64_t v169 = ((v106 + 19) & 0x1FFFFFFFCLL) + v30;
  unint64_t v107 = malloc_type_calloc(v169 + v105, 1uLL, 0x26A11CD5uLL);
  uint64_t v108 = v107;
  int v109 = v107[3];
  if (v191) {
    int v110 = 2;
  }
  else {
    int v110 = 0;
  }
  v107[2] = v105;
  v107[3] = v109 & 0xFFFFFFFD | v110;
  *unint64_t v107 = v106;
  v107[1] = v30;
  v107[3] = v107[3] & 0xFFFFFFFB | (4 * ([a4 libraryType] == 1));
  {
    MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::env = (uint64_t)getenv("METAL_FORCE_OPT_SIZE");
  }
  if (MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::env
    && *(unsigned char *)MTLLibraryBuilder::newLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,MTLCompileOptions *,BOOL,void({block_pointer})(objc_object  {objcproto10MTLLibrary}*,NSError *))::env == 49)
  {
    v108[3] |= 1u;
  }
  uint64_t v172 = v169 + v105;
  int v174 = v108;
  [a3 getCString:v108 + 4 maxLength:v106 encoding:4];
  __p = 0;
  p_p = &__p;
  uint64_t v215 = 0x2020000000;
  unint64_t v192 = ((unint64_t)v108 + v106 + 19) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v216 = v192;
  uint64_t v209 = 0;
  uint64_t v210 = &v209;
  uint64_t v211 = 0x2020000000;
  uint64_t v212 = v30;
  uint64_t v111 = (NSObject **)v232;
  int64_t v112 = (NSObject **)v233;
  if (v232 != v233)
  {
    uint64_t v113 = MEMORY[0x1E4F143A8];
    char v114 = 1;
    do
    {
      int v115 = *v111;
      uint64_t v116 = p_p;
      unint64_t v117 = p_p[3];
      uint64_t v118 = (_DWORD *)((unint64_t)(v117 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((v114 & 1) == 0) {
        v210[3] += v117 - (unsigned char *)v118;
      }
      v116[3] = v118;
      _DWORD *v118 = dispatch_data_get_size(v115);
      p_p[3] = (char *)p_p[3] + 4;
      v210[3] -= 4;
      applier[0] = v113;
      applier[1] = 3221225472;
      applier[2] = ___ZN17MTLLibraryBuilder20newLibraryWithSourceEPU19objcproto9MTLDevice11objc_objectP8NSStringP17MTLCompileOptionsbU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke;
      applier[3] = &unk_1E5221150;
      applier[4] = &__p;
      applier[5] = &v209;
      dispatch_data_apply(v115, applier);
      dispatch_release(v115);
      char v114 = 0;
      ++v111;
    }
    while (v111 != v112);
  }
  unint64_t v119 = v192 + v30;
  if (v194)
  {
    if (v16
      && (long long v206 = 0u,
          long long v207 = 0u,
          long long v204 = 0u,
          long long v205 = 0u,
          (uint64_t v120 = [v16 countByEnumeratingWithState:&v204 objects:v237 count:16]) != 0))
    {
      uint64_t v121 = 0;
      uint64_t v122 = *(void *)v205;
      do
      {
        for (uint64_t k = 0; k != v120; ++k)
        {
          if (*(void *)v205 != v122) {
            objc_enumerationMutation(v16);
          }
          uint64_t v124 = *(void **)(*((void *)&v204 + 1) + 8 * k);
          uint64_t v125 = (void *)[v16 objectForKey:v124];
          *(_WORD *)(v119 + v121) = 17453;
          size_t v126 = [v124 lengthOfBytesUsingEncoding:4];
          uint64_t v127 = v121 + 2;
          memcpy((void *)(v119 + v127), (const void *)[v124 cStringUsingEncoding:4], v126);
          uint64_t v121 = v126 + v127;
          if (v125)
          {
            *(unsigned char *)(v119 + v121) = 61;
            objc_opt_class();
            uint64_t v128 = v121 + 1;
            if (objc_opt_isKindOfClass())
            {
              size_t v129 = objc_msgSend((id)objc_msgSend(v125, "stringValue"), "lengthOfBytesUsingEncoding:", 4);
              memcpy((void *)(v119 + v128), (const void *)objc_msgSend((id)objc_msgSend(v125, "stringValue"), "cStringUsingEncoding:", 4), v129);
              v128 += v129;
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                size_t v130 = [v125 lengthOfBytesUsingEncoding:4];
                memcpy((void *)(v119 + v128), (const void *)[v125 cStringUsingEncoding:4], v130);
                v128 += v130;
              }
            }
            *(unsigned char *)(v119 + v128) = 32;
            uint64_t v121 = v128 + 1;
          }
        }
        uint64_t v120 = [v16 countByEnumeratingWithState:&v204 objects:v237 count:16];
      }
      while (v120);
    }
    else
    {
      uint64_t v121 = 0;
    }
    if ((v226 & 0x80u) == 0) {
      uint64_t v134 = v225;
    }
    else {
      uint64_t v134 = (void **)v225[0];
    }
    size_t v135 = strlen((const char *)v134);
    memcpy((void *)(v119 + v121), v134, v135);
    size_t v136 = v135 + v121;
    if ((v224 & 0x80u) == 0) {
      uint64_t v137 = v223;
    }
    else {
      uint64_t v137 = (void **)v223[0];
    }
    size_t v138 = strlen((const char *)v137);
    memcpy((void *)(v119 + v136), v137, v138);
    int v132 = v190;
    uint64_t v133 = v188;
    size_t v139 = v138 + v136;
    if ([a4 libraryType] == 1 && v168 == 1)
    {
      uint64_t v140 = v119 + v139;
      *(_OWORD *)uint64_t v140 = *(_OWORD *)"-fvisibility hidden ";
      *(_DWORD *)(v140 + 16) = 544105828;
      v139 += 20;
    }
    if (v183)
    {
      qmemcpy((void *)(v119 + v139), "-Wl,-undefined,suppress ", 24);
      v139 += 24;
    }
    if (v182)
    {
      memset(&__str, 0, 64);
      snprintf((char *)&__str, 0x3FuLL, "-fmax-total-threads-per-threadgroup=%lu ", v182);
      size_t v141 = strlen((const char *)&__str);
      memcpy((void *)(v119 + v139), &__str, v141);
      v139 += v141;
    }
    if (v177)
    {
      qmemcpy((void *)(v119 + v139), "-fpreserve-invariance ", 22);
      v139 += 22;
    }
    if (v180)
    {
      qmemcpy((void *)(v119 + v139), "-fimplicit-invariant-position ", 30);
      v139 += 30;
    }
    if (__s)
    {
      size_t v142 = strlen(__s);
      memcpy((void *)(v119 + v139), __s, v142);
      v139 += v142;
    }
    if (v179)
    {
      qmemcpy((void *)(v119 + v139), "-fmetal-enable-logging ", 23);
      v139 += 23;
    }
    size_t v143 = strlen(__src);
    memcpy((void *)(v119 + v139), __src, v143);
    size_t v131 = v143 + v139;
    if (v167)
    {
      size_t v144 = strlen(v167);
      memcpy((void *)(v119 + v131), v167, v144);
      v131 += v144;
    }
    if (v184)
    {
      *(_OWORD *)(v119 + v131) = *(_OWORD *)"-fgl_max_buffer ";
      v131 += 16;
    }
    if (v181)
    {
      qmemcpy((void *)(v119 + v131), "-ftracepoint-instrument ", 24);
      v131 += 24;
    }
    if ([a4 libraryType] == 1)
    {
      qmemcpy((void *)(v119 + v131), "-Wl,-create-shared-library ", 27);
      v131 += 27;
    }
    if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v231.__r_.__value_.__l.__size_)
      {
        long long v145 = (std::string *)v231.__r_.__value_.__r.__words[0];
LABEL_280:
        size_t v146 = strlen((const char *)v145);
        memcpy((void *)(v119 + v131), v145, v146);
        v131 += v146;
      }
    }
    else if (*((unsigned char *)&v231.__r_.__value_.__s + 23))
    {
      long long v145 = &v231;
      goto LABEL_280;
    }
  }
  else
  {
    size_t v131 = 0;
    int v132 = v190;
    uint64_t v133 = v188;
  }
  size_t v147 = strlen(v189);
  memcpy((void *)(v119 + v131), v189, v147);
  size_t v148 = v147 + v131;
  if ((v176 & 1) == 0)
  {
    size_t v149 = strlen((const char *)[v133 UTF8String]);
    memcpy((void *)(v119 + v148), (const void *)[v133 UTF8String], v149);
    *(unsigned char *)(v119 + v149 + v148) = 32;
    v148 += v149 + 1;
  }
  if (v197)
  {
    size_t v150 = strlen((const char *)[v197 UTF8String]);
    memcpy((void *)(v119 + v148), (const void *)[v197 UTF8String], v150);
    v148 += v150;
  }
  if (*(void *)(v193 + 48))
  {
    qmemcpy((void *)(v119 + v148), "-fmodules-cache-path=\"", 22);
    size_t v151 = strlen((const char *)[*(id *)(v193 + 48) UTF8String]);
    size_t v152 = v148 + 22;
    memcpy((void *)(v119 + v152), (const void *)[*(id *)(v193 + 48) UTF8String], v151);
    *(_WORD *)(v119 + v151 + v152) = 8226;
  }
  BOOL v153 = (v174[3] & 4 | v132) != 0;
  if (dyld_program_sdk_at_least()) {
    BOOL v153 = [a4 sourceLanguage] == 0;
  }
  *(_OWORD *)&v200[16] = 0u;
  long long v201 = 0u;
  long long v202 = 0uLL;
  uint64_t v203 = 0;
  *(void *)long long v200 = v174;
  *(void *)&v200[8] = v172;
  if (v153) {
    int v154 = 13;
  }
  else {
    int v154 = 3;
  }
  *(_DWORD *)&v200[16] = v154;
  *(void *)&v200[24] = a4;
  DWORD2(v201) = 0;
  BYTE12(v201) = v186;
  *(void *)&long long v202 = 0;
  LOBYTE(v203) = 0;
  *(_OWORD *)md = 0uLL;
  long long v236 = 0uLL;
  CC_SHA256_Init(&__str);
  CC_SHA256_Update(&__str, v174, v169 + v170);
  CC_SHA256_Final(md, &__str);
  md[0] ^= v153;
  MTLLibraryBuilder::newLibraryWithRequestDataAndHash((os_unfair_lock_s *)v193, (uint64_t)v200, md, v185);
  _Block_object_dispose(&v209, 8);
  _Block_object_dispose(&__p, 8);
  if (v218 < 0) {
    operator delete(v217[0]);
  }
  if ((char)v224 < 0) {
    operator delete(v223[0]);
  }
  if ((char)v226 < 0) {
    operator delete(v225[0]);
  }
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v231.__r_.__value_.__l.__data_);
  }
  if (v232)
  {
    int v233 = v232;
    operator delete(v232);
  }
}

void sub_18274ED64(_Unwind_Exception *a1)
{
  unsigned int v2 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void MTLLibraryBuilder::newLibraryWithRequestDataAndHash(os_unfair_lock_s *a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  char v19 = 0;
  uint64_t v11 = MTLLibraryBuilder::findOrCreateLibraryContainer(a1, a3, &v19);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  uint64_t v14 = ___ZN17MTLLibraryBuilder32newLibraryWithRequestDataAndHashER21MTLLibraryRequestDataRK12MTLUINT256_tU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke;
  uint64_t v15 = &unk_1E5221128;
  uint64_t v17 = a1;
  uint64_t v18 = v11;
  uint64_t v16 = a4;
  if (v19)
  {
    MTLLibraryBuilder::initLibraryContainerWithRequestData((uint64_t)a1, (MTLLibraryContainer *)v11, a2, (uint64_t)v13, v7, v8, v9, v10);
  }
  else
  {
    free(*(void **)a2);
    *(void *)a2 = 0;
    if (*(unsigned char *)(a2 + 44))
    {
      dispatch_group_wait(*(dispatch_group_t *)(v11 + 80), 0xFFFFFFFFFFFFFFFFLL);
      v14((uint64_t)v13);
    }
    else
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_group_notify(*(dispatch_group_t *)(v11 + 80), global_queue, v13);
    }
  }
}

void MTLLibraryBuilder::initLibraryContainerWithRequestData(uint64_t a1, MTLLibraryContainer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a3) {
    MTLReportFailure(0, "initLibraryContainerWithRequestData", 8293, @"requestData must not be nil.", a5, a6, a7, a8, v47);
  }
  if (!*(void *)(a3 + 8)) {
    MTLReportFailure(0, "initLibraryContainerWithRequestData", 8294, @"requestSize must not be 0.", a5, a6, a7, a8, v47);
  }
  uint64_t v12 = _MTLGetLibrariesCache(*(_MTLDevice **)(a1 + 32));
  uint64_t v13 = *(void *)(a3 + 32);
  if (!v13)
  {
    uint64_t v14 = *(void **)(a3 + 24);
    if (!v14) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v16 = [v14 libraryType];
    goto LABEL_11;
  }
  uint64_t v14 = *(void **)(a3 + 24);
  if (v14) {
    goto LABEL_10;
  }
  uint64_t v15 = *(void **)(v13 + 40);
  if (!v15)
  {
LABEL_12:
    uint64_t v17 = 0;
    goto LABEL_13;
  }
  uint64_t v16 = [v15 type];
LABEL_11:
  uint64_t v17 = v16;
LABEL_13:
  MTLHashKey::MTLHashKey((uint64_t)&v60, (uint64_t)&a2->var2);
  unsigned int v18 = *(_DWORD *)(a3 + 16);
  if (v18 <= 0xF && ((1 << v18) & 0xE020) != 0)
  {
    char v19 = *(void **)(a1 + 32);
    MTLHashKey::MTLHashKey(&v59, &v60);
    char v20 = *(unsigned char *)(a1 + 40);
    int v21 = *(_DWORD *)(a3 + 16);
    *(void *)&long long v63 = MEMORY[0x1E4F143A8];
    *((void *)&v63 + 1) = 3321888768;
    uint64_t v64 = ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke;
    unint64_t v65 = &unk_1ECAC3BB0;
    uint64_t v68 = v12;
    MTLHashKey::MTLHashKey(&v69, &v59);
    int v71 = v21;
    char v72 = v20;
    int v70 = a2;
    int v66 = v19;
    uint64_t v67 = a4;
    MultiLevelCacheFactory::createAirCache(*(void *)(a3 + 48), *(std::__shared_weak_count_vtbl **)(a3 + 56), 0, *(void *)(v12 + 32), 2 * *(unsigned __int8 *)(a3 + 64), &object);
    dispatch_data_t data = 0;
    (*((void (**)(dispatch_object_t, MTLHashKey *, dispatch_data_t *))object->isa + 12))(object, &v59, &data);
    if (data)
    {
      buffer_ptr = 0;
      size_t size_ptr = 0;
      BOOL v22 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
      if (*(_DWORD *)buffer_ptr == 1112298573)
      {
        dispatch_data_t subrange = data;
        dispatch_retain(data);
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v24 = newErrorFromCompilerLog((uint64_t)buffer_ptr);
        if ((*(unsigned char *)buffer_ptr & 1) != 0 && (size_t v28 = *((unsigned int *)buffer_ptr + 11), v28)) {
          dispatch_data_t subrange = dispatch_data_create_subrange(data, *((unsigned int *)buffer_ptr + 10), v28);
        }
        else {
          dispatch_data_t subrange = 0;
        }
      }
      dispatch_release(v22);
      v64((uint64_t)&v63, subrange, (NSError *)v24);
      dispatch_release(data);
      free(*(void **)a3);
    }
    else
    {
      if (!(*((unsigned int (**)(dispatch_object_t))object->isa + 15))(object))
      {
        uint64_t v38 = _MTLGetMTLCompilerLLVMVersionForDevice(v19);
        getCompilerConnectionManager(v19, v38);
        operator new();
      }
      uint64_t v25 = [NSString stringWithUTF8String:"Failed to find library in binary archive."];
      if (!v25) {
        uint64_t v25 = [NSString stringWithCString:"Failed to find library in binary archive." encoding:1];
      }
      uint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v25 forKey:*MEMORY[0x1E4F28568]];
      uint64_t v27 = [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v26];
      v64((uint64_t)&v63, 0, (NSError *)v27);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    MTLHashKey::~MTLHashKey(&v69);
    MTLHashKey::~MTLHashKey(&v59);
  }
  else
  {
    uint64_t v29 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    unsigned int v30 = (NSArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    LibraryData = (MTLLibraryData *)MTLLibraryCache::findLibraryData((os_unfair_lock_s *)v12, v60.var1.var0);
    uint64_t v32 = LibraryData;
    if (LibraryData)
    {
      uint64_t v33 = (unsigned int *)*((void *)LibraryData + 19);
      processFunctions(v29, v30, v33, LibraryData, *(void *)(a1 + 32), 1u);
      if (v33[3])
      {
        uint64_t v34 = (char *)v33 + v33[2];
        uint64_t v35 = [NSString stringWithUTF8String:v34];
        if (!v35) {
          uint64_t v35 = [NSString stringWithCString:v34 encoding:1];
        }
        uint64_t v36 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v35 forKey:*MEMORY[0x1E4F28568]];
        uint64_t v37 = (NSError *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v36];
      }
      else
      {
        uint64_t v37 = 0;
      }
      MTLLibraryContainer::init(a2, v32, v29, v30, v37);
      (*(void (**)(uint64_t))(a4 + 16))(a4);

      (*(void (**)(MTLLibraryData *))(*(void *)v32 + 24))(v32);
      free(*(void **)a3);
      *(void *)a3 = 0;
    }
    else
    {
      MultiLevelCacheFactory::createAirCache(*(void *)(a3 + 48), *(std::__shared_weak_count_vtbl **)(a3 + 56), 0, *(void *)(v12 + 32), 0, &buffer_ptr);
      dispatch_object_t object = 0;
      (*(void (**)(void *, MTLHashKey *, dispatch_object_t *))(*(void *)buffer_ptr + 96))(buffer_ptr, &v60, &object);
      int v39 = *(_DWORD *)(a3 + 16);
      uint64_t v40 = object;
      if (object)
      {
        *(void *)&long long v63 = 0;
        dispatch_data_t data = 0;
        uint64_t v41 = *(_MTLDevice **)(a1 + 32);
        long long v42 = v62;
        v48[0] = buffer_ptr;
        v48[1] = v62;
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        processCompiledLibrary(v40, v41, v39, v48, (uint64_t)&v60, 0, v17, v29, v30, (uint64_t *)&data, (uint64_t *)&v63, 0, 0);
        if (v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        dispatch_release(object);
        MTLLibraryContainer::init(a2, (MTLLibraryData *)data, v29, v30, (NSError *)v63);
        (*(void (**)(uint64_t))(a4 + 16))(a4);

        (*((void (**)(dispatch_data_t))data->isa + 3))(data);
        free(*(void **)a3);
        *(void *)a3 = 0;
      }
      else
      {
        uint64_t v43 = *(void **)(a1 + 32);
        uint64_t v44 = _MTLGetMTLCompilerLLVMVersionForDevice(v43);
        getCompilerConnectionManager(v43, v44);
        uint64_t v45 = *(void **)(a3 + 56);
        id v46 = v45;
        v53[0] = MEMORY[0x1E4F143A8];
        v53[1] = 3321888768;
        v53[2] = ___ZN17MTLLibraryBuilder35initLibraryContainerWithRequestDataEP19MTLLibraryContainerR21MTLLibraryRequestDataU13block_pointerFvvE_block_invoke;
        v53[3] = &unk_1ECAC77A0;
        int v58 = v39;
        v53[6] = a1;
        v53[7] = buffer_ptr;
        uint64_t v54 = v62;
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MTLHashKey::MTLHashKey(&v55, &v60);
        uint64_t v56 = v17;
        int v57 = a2;
        v53[4] = v45;
        v53[5] = a4;
        if (*(_DWORD *)(a3 + 16) != 7) {
          operator new();
        }
        dispatch_data_t data = 0;
        downgradeRequestHashAndData(&v63, &data, *(MTLCompilerFunctionRequest **)(a3 + 32), *(_DWORD *)(a3 + 40));
        downgradeRequest(*(void *)(a3 + 32), *(unsigned int *)(a3 + 40), (uint64_t)data, (uint64_t)v53);

        MTLHashKey::~MTLHashKey(&v55);
        if (v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v54);
        }
      }
      if (v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      }
    }
  }
  MTLHashKey::~MTLHashKey(&v60);
}

void sub_18274F9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,MTLHashKey *a43,MTLHashKey *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MTLHashKey::~MTLHashKey(v64);
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a64);
  }
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a53);
  _Unwind_Resume(a1);
}

void ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke(uint64_t a1, NSObject *a2, NSError *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a3;
  if (a2)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    _OWORD v10[2] = ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke_2;
    uint64_t v10[3] = &unk_1ECAC3B78;
    v10[6] = v5;
    MTLHashKey::MTLHashKey(&v11, (const MTLHashKey *)(a1 + 56));
    int v12 = *(_DWORD *)(a1 + 144);
    char v13 = *(unsigned char *)(a1 + 148);
    uint64_t v6 = *(void *)(a1 + 32);
    v10[4] = a2;
    v10[5] = v6;
    uint64_t v7 = (MTLLibraryData *)MTLLibraryCache::newLibraryData(v5, (long long *)(a1 + 80), (uint64_t)&v9, (uint64_t)v10);
    MTLHashKey::~MTLHashKey(&v11);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (NSMutableDictionary *)objc_opt_new();
  MTLLibraryContainer::init(*(MTLLibraryContainer **)(a1 + 136), v7, v8, 0, v9);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (a2) {
    dispatch_release(a2);
  }
  if (v7) {
    (*(void (**)(MTLLibraryData *))(*(void *)v7 + 24))(v7);
  }
}

void sub_18274FC4C(_Unwind_Exception *a1)
{
  MTLHashKey::~MTLHashKey(v1);
  _Unwind_Resume(a1);
}

void ___ZN17MTLLibraryBuilder32newLibraryWithRequestDataAndHashER21MTLLibraryRequestDataRK12MTLUINT256_tU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke(uint64_t a1)
{
  unsigned int v2 = *(MTLLibraryBuilder **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (*(void *)(v3 + 48)) {
    uint64_t v4 = [[_MTLLibrary alloc] initWithLibraryContainer:v3 device:*((void *)v2 + 4)];
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  MTLLibraryBuilder::releaseCacheEntry(v2, *(MTLLibraryContainer **)(a1 + 48));
}

void MultiLevelCacheFactory::createAirCache(uint64_t a1@<X0>, std::__shared_weak_count_vtbl *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v12 = (std::__shared_weak_count *)operator new(0x50uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7498;
  v12[1].__shared_weak_owners_ = 0;
  v12[2].__vftable = 0;
  LODWORD(v12[2].__shared_owners_) = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC5AA0;
  v12[1].__shared_owners_ = 0;
  v12[2].__shared_weak_owners_ = a1;
  v12[3].__vftable = a2;
  if (MultiLevelCacheBase::initialize((uint64_t)&v12[1], a3, a4, a5))
  {
    *a6 = v12 + 1;
    a6[1] = v12;
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_18274FE54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t MultiLevelAirCache::getElement(id *a1, uint64_t a2, dispatch_data_t *a3)
{
  unint64_t v5 = 0;
  uint64_t v6 = (_OWORD *)(a2 + 24);
  while (v5 < [a1[5] count])
  {
    if (objc_msgSend((id)objc_msgSend(a1[5], "objectAtIndexedSubscript:", v5), "supportsAIRNT")) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = objc_msgSend((id)objc_msgSend(a1[5], "objectAtIndexedSubscript:", v5), "newArchiveDataForKeyInternal:", v6);
    }
    ++v5;
    if (v7)
    {
      *a3 = (dispatch_data_t)v7;
      return 1;
    }
  }
  if ((*((uint64_t (**)(id *))*a1 + 15))(a1)) {
    return 0;
  }

  return MultiLevelCacheBase::getElement(a1, v6, a3);
}

void MTLGetCompilerWorkingDir(void *a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (void *)MEMORY[0x18530C9F0]();
  uint64_t v3 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B50], "mainBundle"), "resourcePath");
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v3 UTF8String]);
  }
  else
  {
    uint64_t v4 = getcwd(v5, 0x400uLL);
    if (v4)
    {
      std::string::basic_string[abi:ne180100]<0>(a1, v4);
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
  }
}

MTLResourceList *MTLResourceListPoolCreateResourceList(MTLResourceListPool *a1)
{
  p_locuint64_t k = &a1->_priv.lock;
  os_unfair_lock_lock(&a1->_priv.lock);
  tqh_first = a1->_priv.queue.tqh_first;
  if (tqh_first)
  {
    p_listPriv = &tqh_first->_listPriv;
    tqe_next = tqh_first->_listPriv.entry.tqe_next;
    tqe_prev = tqh_first->_listPriv.entry.tqe_prev;
    if (tqe_next)
    {
      tqe_next->_listPriv.entry.tqe_prev = tqe_prev;
      uint64_t v7 = tqh_first->_listPriv.entry.tqe_next;
      tqe_prev = tqh_first->_listPriv.entry.tqe_prev;
    }
    else
    {
      uint64_t v7 = 0;
      a1->_priv.queue.tqh_last = tqe_prev;
    }
    id *tqe_prev = v7;
    --a1->_priv.count;
    tqh_first->_listPriv.entry.tqe_next = 0;
    tqh_first->_listPriv.entry.tqe_prev = 0;
    os_unfair_lock_unlock(p_lock);
    goto LABEL_8;
  }
  os_unfair_lock_unlock(p_lock);
  uint64_t v8 = [[MTLResourceList alloc] initWithCapacity:a1->_resourceListCapacity];
  tqh_first = v8;
  if (v8)
  {
    p_listPriv = &v8->_listPriv;
LABEL_8:
    p_listPriv->pool = a1;
    uint64_t v9 = a1;
  }
  return tqh_first;
}

void MultiLevelAirCache::addElement(MultiLevelAirCache *this, MTLBinaryKey *a2, MTLAirEntry *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    uint64_t v6 = [(MTLBinaryKey *)a2 value];
    [v5 addArchiveEntryInternal:a3 forKey:v6];
  }
  else
  {
    size_t v12 = 0;
    buffer_ptr = 0;
    uint64_t v8 = dispatch_data_create_map((dispatch_data_t)[(MTLAirEntry *)a3 data], (const void **)&buffer_ptr, &v12);
    uint64_t v9 = [(MTLBinaryKey *)a2 value];
    uint64_t v10 = *((void *)this + 3);
    long long v11 = *(_OWORD *)&v9->var0[16];
    v14[0] = *(_OWORD *)v9->var0;
    v14[1] = v11;
    (*(void (**)(uint64_t, _OWORD *, void *, size_t))(*(void *)v10 + 40))(v10, v14, buffer_ptr, v12);
    dispatch_release(v8);
  }
}

void __MTLGetShaderCachePath_block_invoke()
{
  unint64_t v3 = 0;
  ShaderCacheMainFolder = getShaderCacheMainFolder(&v3);
  if (ShaderCacheMainFolder)
  {
    uint64_t v1 = ShaderCacheMainFolder;
    id v2 = [NSString alloc];
    MTLGetShaderCachePath::uint64_t result = [v2 initWithBytesNoCopy:v1 length:v3 encoding:4 freeWhenDone:1];
    if (!MTLGetShaderCachePath::result) {
      free(v1);
    }
  }
}

void sub_182750B1C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 - 88);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_182750CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType const&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = operator new(0x20uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  char v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v11 = *v20;
LABEL_38:
    *char v20 = v11;
    goto LABEL_39;
  }
  *long long v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    char v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_182750F0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,MTLBinaryKey *>>>::__emplace_unique_key_args<CompilerOutputType,std::piecewise_construct_t const&,std::tuple<CompilerOutputType const&>,std::tuple<>>(uint64_t a1, char *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = operator new(0x20uLL);
  *long long v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  char v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *long long v11 = *v20;
LABEL_38:
    *char v20 = v11;
    goto LABEL_39;
  }
  *long long v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    char v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_182751130(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void MultiLevelBinaryFSCache::addElement(MultiLevelBinaryFSCache *this, MTLBinaryKey *a2, MTLBinaryEntry *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  size_t v9 = 0;
  buffer_ptr = 0;
  unint64_t v5 = dispatch_data_create_map((dispatch_data_t)[(MTLBinaryEntry *)a3 data], (const void **)&buffer_ptr, &v9);
  uint64_t v6 = [(MTLBinaryKey *)a2 value];
  uint64_t v7 = *((void *)this + 3);
  long long v8 = *(_OWORD *)&v6->var0[16];
  v11[0] = *(_OWORD *)v6->var0;
  v11[1] = v8;
  (*(void (**)(uint64_t, _OWORD *, void *, size_t))(*(void *)v7 + 40))(v7, v11, buffer_ptr, v9);
  dispatch_release(v5);
}

void MTLCompilerFSCache::addElement(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v8 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  uint64_t v9 = *(void *)(a1 + 144);
  if (v9) {
    std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::__emplace_unique_key_args<HashKey,HashKey const&>(v9, (unint64_t *)a2, (_OWORD *)a2);
  }
  os_unfair_lock_unlock(v8);
  uint64_t v10 = malloc_type_malloc(a4 + 64, 0x583AF936uLL);
  if (v10)
  {
    long long v11 = v10;
    *(_OWORD *)md = 0u;
    long long v16 = 0u;
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, a3, a4);
    CC_SHA256_Final(md, &c);
    long long v12 = v16;
    *long long v11 = *(_OWORD *)md;
    v11[1] = v12;
    long long v13 = *(_OWORD *)(a2 + 16);
    _OWORD v11[2] = *(_OWORD *)a2;
    v11[3] = v13;
    memcpy(v11 + 4, a3, a4);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (*(void *)(a1 + 48))
    {
      *(void *)c.size_t count = 0;
      fscache_insert_and_retain();
      if (*(void *)c.count)
      {
        MTLCompilerFSCache::flushElement();
        fscache_release();
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    free(v11);
  }
}

void sub_1827514C8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void __MTLGetModulesCachePath_block_invoke()
{
  unint64_t v3 = 0;
  ModuleCacheMainFolder = getModuleCacheMainFolder(&v3);
  if (ModuleCacheMainFolder)
  {
    uint64_t v1 = ModuleCacheMainFolder;
    id v2 = [NSString alloc];
    MTLGetModulesCachePath::uint64_t result = [v2 initWithBytesNoCopy:v1 length:v3 encoding:4 freeWhenDone:1];
    if (!MTLGetModulesCachePath::result) {
      free(v1);
    }
  }
}

void *copyCacheMainFolder(const char *a1, unint64_t *a2, const char *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (getCacheMainFolder(__s, a1, a3))
  {
    size_t v4 = strlen(__s);
    *a2 = v4;
    unint64_t v5 = malloc_type_malloc(v4 + 1, 0xBBA082FFuLL);
    memcpy(v5, __s, *a2 + 1);
  }
  else
  {
    unint64_t v5 = 0;
    *a2 = 0;
  }
  return v5;
}

uint64_t MTLCompilerFSCache::getElement(uint64_t a1, unint64_t *a2)
{
  size_t v4 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  unint64_t v5 = *(void **)(a1 + 144);
  if (v5)
  {
    uint64_t v6 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>(v5, a2);
    os_unfair_lock_unlock(v4);
    if (!v6) {
      return 0;
    }
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (MTLCompilerFSCache::openSync((MTLCompilerFSCache *)a1))
  {
    if (fscache_find_and_retain() == 203)
    {
      ++*(_DWORD *)(a1 + 16);
    }
    else if (!fscache_element_get_data())
    {
      fscache_remove_and_release();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  return 0;
}

void sub_182751940(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2] && result[5] == a2[3]) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t getHash(const void *a1, CC_LONG a2, unsigned __int8 *a3)
{
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, a1, a2);
  return CC_SHA256_Final(a3, &c);
}

uint64_t MTLCompilerFSCache::openSync(MTLCompilerFSCache *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)((char *)this + 48);
  if (*((void *)this + 6)) {
    return 1;
  }
  if (*((unsigned char *)this + 24)) {
    return 0;
  }
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  if (!*((_DWORD *)this + 5)) {
    goto LABEL_12;
  }
  uint8x8_t v4 = (char *)this + 56;
  if (*((char *)this + 79) < 0) {
    uint8x8_t v4 = *(const char **)v4;
  }
  if (!getCacheMainFolder(__s, "com.apple.metal", (const char *)1)
    || v4
    && (size_t v5 = strlen(__s), strncat(__s, "/", 1024 - v5), v6 = strlen(__s), strncat(__s, v4, 1024 - v6), stat(__s, &v22))
    && mkdir(__s, 0x1FFu))
  {
LABEL_12:
    uint64_t v2 = 0;
    goto LABEL_30;
  }
  unsigned int v7 = 0;
  *(void *)&v22.st_dev = 0;
  unint64_t v8 = (const char **)((char *)this + 80);
  do
  {
    *((void *)this + 4) = *((unsigned int *)this + 5);
    *((_DWORD *)this + 10) = 2097153;
    __int16 v9 = gShaderCachePermissions;
    if (gShaderCachePermissions)
    {
      *((_WORD *)this + 20) = 2;
      *((_WORD *)this + 22) |= 1u;
      *((_WORD *)this + 23) = v9;
    }
    if (v7)
    {
      free(*(void **)&v22.st_dev);
      uint64_t v10 = (char *)this + 80;
      if (*((char *)this + 103) < 0) {
        uint64_t v10 = *v8;
      }
      asprintf((char **)&v22, "%s/%s%u", __s, v10, v7);
    }
    else
    {
      long long v11 = (char *)this + 80;
      if (*((char *)this + 103) < 0) {
        long long v11 = *v8;
      }
      asprintf((char **)&v22, "%s/%s", __s, v11);
    }
    int v12 = fscache_open_with_key();
    if (v7 > 0xFE) {
      break;
    }
    ++v7;
  }
  while (v12 == 206);
  if (!v12)
  {
    if (*v1)
    {
      uint64_t v2 = 1;
      goto LABEL_29;
    }
    BOOL v14 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v14) {
      MTLCompilerFSCache::openSync(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  uint64_t v2 = 0;
LABEL_29:
  free(*(void **)&v22.st_dev);
LABEL_30:
  if (*v1)
  {
    {
      deleteFSCache(void)::resetFSCache = MTLGetEnvDefault("FS_CACHE_RESET", 0) != 0;
    }
    if (deleteFSCache(void)::resetFSCache) {
      fscache_remove_all();
    }
    os_unfair_lock_lock((os_unfair_lock_t)this + 34);
    if (!*((void *)this + 18)) {
      operator new();
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 34);
  }
  return v2;
}

void sub_182751DD8(_Unwind_Exception *a1)
{
}

void *std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::__emplace_unique_key_args<HashKey,HashKey const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    __int16 v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3]) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v6;
  long long v15 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_48:
    *uint64_t v23 = i;
    goto LABEL_49;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182752030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL getCacheMainFolder(char *a1, const char *a2, const char *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  didPreviouslyGetCacheMainFolder = 1;
  if (gOverridePath)
  {
    size_t v4 = strlen((const char *)gOverridePath) + 1;
    if (v4 <= 0x400)
    {
      memcpy(a1, (const void *)gOverridePath, v4);
      return 1;
    }
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
    if (result)
    {
      getCacheMainFolder();
      return 0;
    }
  }
  else
  {
    int v6 = (int)a3;
    *a1 = 0;
    CFArrayRef v8 = (const __CFArray *)CFCopySearchPathForDirectoriesInDomains();
    CFIndex Count = CFArrayGetCount(v8);
    if (!Count)
    {
      CFRelease(v8);
      BOOL v14 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
      if (v14) {
        getCacheMainFolder(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      return 0;
    }
    uint64_t v10 = Count;
    CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v8, Count - 1);
    if (!ValueAtIndex)
    {
      BOOL v22 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
      if (v22) {
        getCacheMainFolder(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      CFRelease(v8);
      return 0;
    }
    CFStringRef v12 = CFURLCopyFileSystemPath(ValueAtIndex, kCFURLPOSIXPathStyle);
    int v13 = strlen(a1);
    CFStringGetCString(v12, &a1[v13], 1024 - v13, 0x8000100u);
    CFRelease(v12);
    CFRelease(v8);
    if (stat(a1, &v43))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
        getCacheMainFolder(v10, a1);
      }
      return 0;
    }
    size_t v30 = strlen(a1);
    MainBundle = CFBundleGetMainBundle();
    if (v6)
    {
      if (MainBundle)
      {
        CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
        if (Identifier)
        {
          CFStringRef v33 = Identifier;
          size_t v34 = strlen(a1);
          if (v34 && a1[v34] != 47) {
            *(_WORD *)&a1[v34] = 47;
          }
          int v35 = strlen(a1);
          CFStringGetCString(v33, &a1[v35], 1024 - v35, 0x8000100u);
        }
      }
    }
    if (a2)
    {
      size_t v36 = strlen(a1);
      if (v36 && a1[v36] != 47) {
        *(_WORD *)&a1[v36++] = 47;
      }
      strncat(a1, a2, 1024 - v36);
    }
    if (stat(a1, &v43))
    {
      uint64_t v37 = &a1[v30];
      uint64_t v38 = strchr(v37, 47);
      if (v38)
      {
        while (1)
        {
          int v39 = v38;
          *uint64_t v38 = 0;
          if (mkdir(a1, 0x1FFu))
          {
            if (*__error() != 17) {
              break;
            }
          }
          *int v39 = 47;
          uint64_t v38 = strchr(v39 + 1, 47);
          uint64_t v37 = v39;
          if (!v38) {
            goto LABEL_36;
          }
        }
        int v41 = *v37;
        *int v39 = 47;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          if (v41 == 47) {
            ++v37;
          }
          int v42 = *__error();
          *(_DWORD *)buf = 67109890;
          int v45 = v42;
          __int16 v46 = 2080;
          uint64_t v47 = a1;
          __int16 v48 = 1040;
          int v49 = v39 - v37;
          __int16 v50 = 2080;
          unint64_t v51 = v37;
          _os_log_fault_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Failed to get cache main folder: mkdir failed to create cache path (errno = %u, path = %s, attempting to create intermediate subdir '%.*s', possible sandbox issue?)", buf, 0x22u);
        }
        return 0;
      }
LABEL_36:
      if (mkdir(a1, 0x1FFu) && *__error() != 17)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
          getCacheMainFolder();
        }
        return 0;
      }
    }
    int v40 = stat(a1, &v43);
    BOOL result = 1;
    if (!v40 && gShaderCachePermissions)
    {
      chmod(a1, 0x1FFu);
      return 1;
    }
  }
  return result;
}

void *getModuleCacheMainFolder(unint64_t *a1)
{
  return copyCacheMainFolder("com.apple.metalfe", a1, (const char *)1);
}

void MTLCompilerFSCache::flushElement()
{
  int v0 = fscache_sync_element();
  if (v0)
  {
    int v1 = v0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      MTLCompilerFSCache::flushElement(v1);
    }
  }
}

void *deserializeCompilerOutputData(void *result, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = *a3 + 8;
  uint64_t v6 = *(void *)((char *)result + *a3);
  *a3 = v5;
  if (v6)
  {
    uint64_t v10 = result;
    do
    {
      uint64_t v11 = *(void *)((char *)v10 + v5);
      *a3 = v5 + 8;
      char v14 = v11;
      size_t v12 = *(void *)((char *)v10 + v5 + 8);
      *a3 = v5 + 16;
      BOOL result = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::find<CompilerOutputType>(a4, &v14);
      if (!result || !result[3])
      {
        if (v12)
        {
          dispatch_data_t v13 = dispatch_data_create((char *)v10 + *a3, v12, 0, 0);
          BOOL result = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,NSObject  {objcproto16OS_dispatch_data}*>(a5, &v14, &v14, &v13);
        }
      }
      uint64_t v5 = *a3 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      *a3 = v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::find<CompilerOutputType>(void *a1, char *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (BOOL result = *v6; result; BOOL result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,NSObject  {objcproto16OS_dispatch_data}*>(uint64_t a1, char *a2, unsigned char *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      size_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          size_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  size_t v12 = operator new(0x20uLL);
  *size_t v12 = 0;
  v12[1] = v8;
  *((unsigned char *)v12 + 16) = *a3;
  void v12[3] = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *size_t v12 = *v21;
LABEL_38:
    *uint64_t v21 = v12;
    goto LABEL_39;
  }
  *size_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1827528F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *getShaderCacheMainFolder(unint64_t *a1)
{
  return copyCacheMainFolder("com.apple.metal", a1, (const char *)1);
}

uint64_t (*MTLPackColor(uint64_t a1, float64x2_t *a2, uint64_t a3))(int32x4_t *this, int *a2, void *a3)
{
  float64x2_t v20 = *a2;
  float64x2_t v21 = a2[1];
  unint64_t v5 = MTLGetPackFloatFunction(a1);
  if (v5)
  {
    uint64_t v6 = (uint64_t (*)(float32x4_t *, uint64_t))v5;
    float32x4_t v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v20), v21);
  }
  else
  {
    unint64_t v8 = MTLGetPackUintFunction(a1);
    if (v8)
    {
      uint64_t v6 = (uint64_t (*)(float32x4_t *, uint64_t))v8;
      float64x2_t v9 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v10 = vminnmq_f64(vmaxnmq_f64(v20, (float64x2_t)0), v9);
      float64x2_t v11 = (float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL);
      float64x2_t v12 = vminnmq_f64(vmaxnmq_f64(v21, (float64x2_t)0), v9);
      int32x4_t v13 = (int32x4_t)vcgtq_f64(v10, v11);
      int32x4_t v14 = (int32x4_t)vcgtq_f64(v12, v11);
      int8x16_t v15 = (int8x16_t)vdupq_n_s64(0x41E0000000000000uLL);
      int32x4_t v16 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(v10, (float64x2_t)vandq_s8(v15, (int8x16_t)v13))), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v12, (float64x2_t)vandq_s8(v15, (int8x16_t)v14))));
      *(void *)&v10.f64[0] = 0x8000000080000000;
      *(void *)&v10.f64[1] = 0x8000000080000000;
      float32x4_t v7 = (float32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32(v13, v14), (int8x16_t)v10), v16);
    }
    else
    {
      BOOL result = MTLGetPackSintFunction(a1);
      if (!result) {
        return result;
      }
      uint64_t v6 = (uint64_t (*)(float32x4_t *, uint64_t))result;
      float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xC1E0000000000000);
      float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x41DFFFFFFFC00000uLL);
      float32x4_t v7 = (float32x4_t)vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vminnmq_f64(vmaxnmq_f64(v20, v18), v19)), (int32x4_t)vcvtq_s64_f64(vminnmq_f64(vmaxnmq_f64(v21, v18), v19)));
    }
  }
  float32x4_t v22 = v7;
  return (uint64_t (*)(int32x4_t *, int *, void *))v6(&v22, a3);
}

uint64_t (*MTLGetPackFloatFunction(uint64_t a1))(int32x4_t *this, float *a2, void *a3)
{
  BOOL result = 0;
  if (a1 <= 104)
  {
    if ((unint64_t)a1 <= 0x68)
    {
      switch(a1)
      {
        case '7':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_9::__invoke;
        case '8':
        case '9':
        case ':':
        case ';':
        case '=':
        case '?':
        case '@':
        case 'C':
        case 'D':
        case 'E':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'R':
        case 'S':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case '[':
          return result;
        case '<':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_10::__invoke;
        case '>':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_11::__invoke;
        case 'A':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_12::__invoke;
        case 'B':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_46::__invoke;
        case 'F':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_13::__invoke;
        case 'G':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_14::__invoke;
        case 'H':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_15::__invoke;
        case 'P':
          return MTLGetPackFloatFunction::$_16::__invoke;
        case 'Q':
          return MTLGetPackFloatFunction::$_17::__invoke;
        case 'T':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_43::__invoke;
        case 'U':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_44::__invoke;
        case 'Z':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_18::__invoke;
        case '\\':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_19::__invoke;
        case ']':
          return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_20::__invoke;
        case '^':
          return MTLGetPackFloatFunction::$_21::__invoke;
        default:
          JUMPOUT(0);
      }
    }
    switch(a1)
    {
      case 10:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_1::__invoke;
      case 11:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_33::__invoke;
      case 12:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_2::__invoke;
      case 20:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_3::__invoke;
      case 22:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_4::__invoke;
      case 25:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_5::__invoke;
      case 26:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_45::__invoke;
      case 30:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_6::__invoke;
      case 31:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_34::__invoke;
      case 32:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_7::__invoke;
      case 40:
        return MTLGetPackFloatFunction::$_35::__invoke;
      case 41:
        return MTLGetPackFloatFunction::$_36::__invoke;
      case 42:
        return MTLGetPackFloatFunction::$_37::__invoke;
      case 43:
        return MTLGetPackFloatFunction::$_8::__invoke;
      case 44:
        return MTLGetPackFloatFunction::$_42::__invoke;
      default:
        return result;
    }
  }
  else
  {
    if (a1 <= 301)
    {
      if (a1 <= 124)
      {
        switch(a1)
        {
          case 'i':
            return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_22::__invoke;
          case 'n':
            return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_23::__invoke;
          case 'p':
            return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_24::__invoke;
          case 's':
            return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_25::__invoke;
          case 't':
            return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_47::__invoke;
          default:
            return result;
        }
        return result;
      }
      if (a1 == 125) {
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_26::__invoke;
      }
      if (a1 == 300) {
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_27::__invoke;
      }
      if (a1 != 301) {
        return result;
      }
      return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_28::__invoke;
    }
    if (a1 <= 551)
    {
      if (a1 == 302) {
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_29::__invoke;
      }
      if (a1 == 315) {
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_30::__invoke;
      }
      if (a1 != 325) {
        return result;
      }
      return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_31::__invoke;
    }
    switch(a1)
    {
      case 552:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_40::__invoke;
      case 553:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_41::__invoke;
      case 554:
        return MTLGetPackFloatFunction::$_38::__invoke;
      case 555:
        return MTLGetPackFloatFunction::$_39::__invoke;
      case 556:
        return (uint64_t (*)(int32x4_t *, float *, void *))MTLGetPackFloatFunction::$_32::__invoke;
      default:
        return result;
    }
  }
  return result;
}

uint64_t MTLGetPackFloatFunction::$_40::__invoke(float32x4_t *this, int16x4_t *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32((int32x4_t)vaddq_f32(*this, (float32x4_t)xmmword_1828D5170));
  uint32x4_t v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  *a2 = vshl_n_s16(vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)xmmword_1828D5180), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4)), (float32x4_t)xmmword_1828D5120), (float32x4_t)vdupq_n_s32(0x43FF0000u))))), 6uLL);
  return 8;
}

uint64_t MTLGetPackFloatFunction::$_16::__invoke(int32x4_t *this, float *a2, void *a3)
{
  int8x16_t v3 = (int8x16_t)vrev64q_s32(*this);
  uint32x4_t v4 = (uint32x4_t)vextq_s8(v3, v3, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v10 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(v4, (uint32x4_t)_Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), v4));
  _Q1.i64[0] = 0x3F0000003F000000;
  _Q1.i64[1] = 0x3F0000003F000000;
  int16x8_t v11 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v10, _Q1), (int8x16_t)vdupq_n_s32(0x437EFFFFu), (int8x16_t)vdupq_n_s32(0x437F0000u)), v10)));
  *(int16x4_t *)v11.i8 = vmovn_s32((int32x4_t)v11);
  *(_DWORD *)a2 = vmovn_s16(v11).u32[0];
  return 4;
}

uint64_t MTLGetPackFloatFunction::$_14::__invoke(uint32x4_t *this, float *a2, void *a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v9 = (float32x4_t)vandq_s8((int8x16_t)vminq_u32(*this, _Q1), (int8x16_t)vcgtq_u32((uint32x4_t)vdupq_n_s32(0x7F800001u), *this));
  int8x16_t v10 = (int8x16_t)vcgeq_f32((float32x4_t)xmmword_1828D4F90, v9);
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  int32x4_t v12 = vcvtq_s32_f32(vrndaq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v9, v11), (int8x16_t)xmmword_1828D4FB0, (int8x16_t)xmmword_1828D4FA0), v9)));
  if ((vminvq_u32((uint32x4_t)v10) & 0x80000000) == 0)
  {
    int8x16_t v15 = v10;
    int8x16_t v16 = (int8x16_t)v12;
    *(double *)v13.i64 = GammaConstants<8u,false>::Pack(v9, v10);
    float32x4_t v9 = (float32x4_t)vbicq_s8(v13, v15);
    int32x4_t v12 = (int32x4_t)vorrq_s8((int8x16_t)v9, vandq_s8(v16, v15));
  }
  *(int16x4_t *)v9.f32 = vmovn_s32(v12);
  *(_DWORD *)a2 = vmovn_s16((int16x8_t)v9).u32[0];
  return 4;
}

void *MTLPipelineDescriptions::newRenderPipelineDescriptor(MTLPipelineDescriptions *this, char *a2, _MTLPipelineCache *a3, NSError **a4)
{
  unint64_t v8 = (char *)this + 26;
  float32x4_t v9 = (void *)((char *)this + 112);
  int8x16_t v10 = *((void *)this + 2);
  blocuint64_t k = (void *)MEMORY[0x1E4F143A8];
  uint64_t v24 = 3221225472;
  uint64_t v25 = ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke;
  uint64_t v26 = &__block_descriptor_64_e5_v8__0l;
  uint64_t v27 = this;
  uint64_t v28 = v8;
  uint64_t v30 = 0x700000003;
  uint64_t v29 = v9;
  dispatch_sync(v10, &block);
  std::string::basic_string[abi:ne180100]<0>(&block, a2);
  float32x4_t v11 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v9, (unsigned __int8 *)&block);
  int32x4_t v12 = v11;
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v18 = objc_msgSend(NSString, "stringWithFormat:", @"render pipeline %s not found in pipelineLibrary.", a2);
    if (!a4) {
      return 0;
    }
    uint64_t v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v18 forKey:*MEMORY[0x1E4F28568]];
    float64x2_t v20 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v19];
    unint64_t v17 = 0;
    *a4 = v20;
    return v17;
  }
  operator delete(block);
  if (!v12) {
    goto LABEL_6;
  }
LABEL_3:
  long long v22 = *(_OWORD *)(v12 + 40);
  blocuint64_t k = &unk_1ECAC6A10;
  uint64_t v24 = (uint64_t)this;
  uint64_t v25 = (void (*)(uint64_t))a3;
  unint64_t v17 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newRenderPipelineDescriptor((uint64_t)&block, (unsigned __int8 **)&v22);
  if (!v17) {
    MTLReportFailure(0, "newRenderPipelineDescriptor", 568, @"invalid render pipeline descriptor %s in pipeline library", v13, v14, v15, v16, (uint64_t)a2);
  }
  return v17;
}

void sub_18275388C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newRenderPipelineDescriptor(uint64_t a1, unsigned __int8 **a2)
{
  if (!*a2) {
    return 0;
  }
  uint32x4_t v4 = objc_opt_new();
  MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v40, a2);
  if (v43 < v42)
  {
    while (1)
    {
      switch(v45)
      {
        case 0:
          PropertyAsuint64_t Object = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          uint64_t v7 = v6;
          id v8 = [NSString alloc];
          if (!PropertyAsObject) {
            goto LABEL_106;
          }
          if (!v7) {
            goto LABEL_114;
          }
          float32x4_t v9 = (unsigned __int8 *)PropertyAsObject;
          break;
        case 1:
          float32x4_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v40);
          [v4 setVertexFunction:v11];
          goto LABEL_107;
        case 2:
          float32x4_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v40);
          [v4 setFragmentFunction:v11];
          goto LABEL_107;
        case 3:
          uint64_t v12 = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          if (v12)
          {
            uint64_t v14 = (unsigned __int8 *)v12;
            uint64_t v15 = v13;
            uint64_t v16 = (void *)[v4 vertexDescriptor];
            MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::deserializeVertexDescriptor((uint64_t)v16, v16, v14, v15);
          }
          else
          {
            [v4 setVertexDescriptor:0];
          }
          goto LABEL_108;
        case 4:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setRasterSampleCount:v38];
          goto LABEL_108;
        case 5:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setAlphaToCoverageEnabled:v38 != 0];
          goto LABEL_108;
        case 6:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setAlphaToOneEnabled:v38 != 0];
          goto LABEL_108;
        case 7:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setRasterizationEnabled:v38 != 0];
          goto LABEL_108;
        case 8:
          unint64_t v17 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          uint64_t v38 = v17;
          unint64_t v39 = v18;
          if (!v17) {
            goto LABEL_108;
          }
          if (v18 <= 3) {
            goto LABEL_114;
          }
          int v19 = *v17;
          if (*v17)
          {
            unsigned int v20 = 0;
            do
            {
              uint64_t Object = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v38, v20);
              if (Object) {
                MTLPipelineLibrarySerializer::deserializeColorAttachments(objc_msgSend(v4, "colorAttachments", v38, v39), Object, v22);
              }
              ++v20;
            }
            while (v19 != v20);
          }
          goto LABEL_108;
        case 9:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setDepthAttachmentPixelFormat:v38];
          goto LABEL_108;
        case 10:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setStencilAttachmentPixelFormat:v38];
          goto LABEL_108;
        case 11:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setInputPrimitiveTopology:v38];
          goto LABEL_108;
        case 12:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setTessellationPartitionMode:v38];
          goto LABEL_108;
        case 13:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setMaxTessellationFactor:v38];
          goto LABEL_108;
        case 14:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setTessellationFactorScaleEnabled:v38 != 0];
          goto LABEL_108;
        case 15:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setTessellationFactorFormat:v38];
          goto LABEL_108;
        case 16:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setTessellationControlPointIndexType:v38];
          goto LABEL_108;
        case 17:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setTessellationFactorStepFunction:v38];
          goto LABEL_108;
        case 18:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setTessellationOutputWindingOrder:v38];
          goto LABEL_108;
        case 21:
          uint64_t v23 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          uint64_t v38 = v23;
          unint64_t v39 = v24;
          if (!v23) {
            goto LABEL_108;
          }
          if (v24 <= 3) {
            goto LABEL_114;
          }
          int v25 = *v23;
          if (*v23)
          {
            unsigned int v26 = 0;
            do
            {
              uint64_t v27 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v38, v26);
              if (v27) {
                MTLPipelineLibrarySerializer::deserializeBuffers(objc_msgSend(v4, "vertexBuffers", v38, v39), v27, v28);
              }
              ++v26;
            }
            while (v25 != v26);
          }
          goto LABEL_108;
        case 22:
          uint64_t v29 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v40);
          uint64_t v38 = v29;
          unint64_t v39 = v30;
          if (!v29) {
            goto LABEL_108;
          }
          if (v30 <= 3) {
            goto LABEL_114;
          }
          int v31 = *v29;
          if (*v29)
          {
            unsigned int v32 = 0;
            do
            {
              CFStringRef v33 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v38, v32);
              if (v33) {
                MTLPipelineLibrarySerializer::deserializeBuffers(objc_msgSend(v4, "fragmentBuffers", v38, v39), v33, v34);
              }
              ++v32;
            }
            while (v31 != v32);
          }
          goto LABEL_108;
        case 24:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setVertexAmplificationMode:v38];
          goto LABEL_108;
        case 25:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setSupportIndirectCommandBuffers:v38 != 0];
          goto LABEL_108;
        case 26:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setMaxVertexAmplificationCount:v38];
          goto LABEL_108;
        case 27:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          LODWORD(v35) = v38;
          [v4 setSampleCoverage:v35];
          goto LABEL_108;
        case 28:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setSampleMask:v38];
          goto LABEL_108;
        case 30:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setTextureWriteRoundingMode:v38];
          goto LABEL_108;
        case 45:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setAlphaTestEnabled:v38 != 0];
          goto LABEL_108;
        case 46:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setAlphaTestFunction:v38];
          goto LABEL_108;
        case 47:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setLogicOperationEnabled:v38 != 0];
          goto LABEL_108;
        case 48:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setClipDistanceEnableMask:v38];
          goto LABEL_108;
        case 49:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setPointSmoothEnabled:v38 != 0];
          goto LABEL_108;
        case 50:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setPointCoordLowerLeft:v38 != 0];
          goto LABEL_108;
        case 51:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setPointSizeOutputVS:v38 != 0];
          goto LABEL_108;
        case 52:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setTwoSideEnabled:v38 != 0];
          goto LABEL_108;
        case 53:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setVertexDepthCompareClampMask:v38];
          goto LABEL_108;
        case 54:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setFragmentDepthCompareClampMask:v38];
          goto LABEL_108;
        case 55:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setLogicOperation:v38];
          goto LABEL_108;
        case 56:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setDepthStencilWriteDisabled:v38 != 0];
          goto LABEL_108;
        case 57:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setNeedsCustomBorderColorSamplers:v38 != 0];
          goto LABEL_108;
        case 58:
          LODWORD(v38) = 0;
          if (v46 + v47 > v41) {
            goto LABEL_114;
          }
          memcpy(&v38, (const void *)(v40 + v47), v46);
          [v4 setExplicitVisibilityGroupID:v38];
          goto LABEL_108;
        default:
          goto LABEL_108;
      }
      while (*v9++)
      {
        if (!--v7) {
          goto LABEL_114;
        }
      }
LABEL_106:
      float32x4_t v11 = objc_msgSend(v8, "initWithUTF8String:", PropertyAsObject, v38);
      [v4 setLabel:v11];
LABEL_107:

LABEL_108:
      if (++v43 >= v42) {
        break;
      }
      if (v44 + 2 > v41) {
LABEL_114:
      }
        abort();
      size_t v36 = *(unsigned __int8 *)(v40 + v44 + 1);
      int v45 = *(unsigned __int8 *)(v40 + v44);
      size_t v46 = v36;
      uint64_t v47 = v44 + 2;
      v44 += 2 + v36;
    }
  }
  return v4;
}

uint64_t MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject(MTLSerializer::SerializedCompactPropertyList::Iterator *this)
{
  unsigned int __dst = 0;
  size_t v1 = *((void *)this + 6);
  uint64_t v2 = *((void *)this + 7);
  unint64_t v3 = *((void *)this + 1);
  if (v1 + v2 > v3) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)this;
  memcpy(&__dst, (const void *)(*(void *)this + v2), v1);
  if (__dst)
  {
    if (v3 >= __dst) {
      return v4 + __dst;
    }
LABEL_7:
    abort();
  }
  return 0;
}

uint64_t MTLPipelineDescriptions::deserializeFunction(MTLPipelineDescriptions *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  v113[0] = a2;
  v113[1] = a3;
  if (!a2) {
    return 0;
  }
  int Small = MTLSerializer::PropertyList::getSmallValue<unsigned int>((MTLSerializer::SerializedObjectList *)v113, 1u, 0);
  uint64_t Object = (char *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v113, 0);
  uint64_t v13 = v12;
  v112[0] = Object;
  v112[1] = v12;
  if (!Object) {
    MTLReportFailure(0, "deserializeFunction", 443, @"Function with no name in pipeline library", v7, v8, v9, v10, v100);
  }
  if (!Small)
  {
    unint64_t v24 = *((void *)a1 + 2);
    blocuint64_t k = (char *)MEMORY[0x1E4F143A8];
    unint64_t v115 = 3221225472;
    uint64_t v116 = ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke;
    unint64_t v117 = (void (*)(uint64_t))&__block_descriptor_64_e5_v8__0l;
    uint64_t v118 = a1;
    unint64_t v119 = (void *)((char *)a1 + 24);
    uint64_t v121 = 0x500000001;
    uint64_t v120 = (void *)((char *)a1 + 32);
    dispatch_sync(v24, &block);
    if (Object)
    {
      if (!v13) {
LABEL_19:
      }
        abort();
      int v25 = Object;
      uint64_t v26 = v13;
      while (*v25++)
      {
        if (!--v26) {
          goto LABEL_19;
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&block, Object);
    unint64_t v102 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((void *)a1 + 4, (unsigned __int8 *)&block);
    if (SHIBYTE(v116) < 0) {
      operator delete(block);
    }
    if (!v102)
    {
      if (Object)
      {
        if (!v13) {
LABEL_72:
        }
          abort();
        char v72 = Object;
        while (*v72++)
        {
          if (!--v13) {
            goto LABEL_72;
          }
        }
      }
      MTLReportFailure(0, "deserializeFunction", 457, @"Specialized function %s not found in pipelineLibrary.", v28, v29, v30, v31, (uint64_t)Object);
      uint64_t v23 = 0;
LABEL_82:
      if (v102) {
        return v23;
      }
      return 0;
    }
    long long v111 = *(_OWORD *)(v102 + 40);
    MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)v104, (unsigned __int8 **)&v111);
    if (v106 >= v105)
    {
      unsigned int v32 = 0;
      uint64_t LibraryByIndex = 0;
      goto LABEL_75;
    }
    unsigned int v32 = 0;
    uint64_t LibraryByIndex = 0;
    uint64_t v101 = 0;
    while (v108 != 1)
    {
      if (!v108)
      {
        blocuint64_t k = (char *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)v104);
        unint64_t v115 = v33;
        if (block)
        {
          uint64_t v39 = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&block, 0);
          if (v39)
          {
            uint64_t v40 = v34;
            id v41 = [NSString alloc];
            if (!v40) {
LABEL_92:
            }
              abort();
            unint64_t v42 = (unsigned __int8 *)v39;
            while (*v42++)
            {
              if (!--v40) {
                goto LABEL_92;
              }
            }
          }
          else
          {
            MTLReportFailure(0, "deserializeFunction", 479, @"Base function with no name in pipeline library", v35, v36, v37, v38, v100);
            id v41 = [NSString alloc];
          }
          uint64_t v101 = [v41 initWithUTF8String:v39];
          int v64 = MTLSerializer::PropertyList::getSmallValue<unsigned int>((MTLSerializer::SerializedObjectList *)&block, 1u, 0);
          uint64_t LibraryByIndex = MTLPipelineDescriptions::getLibraryByIndex(a1, v64 - 1, v65, v66, v67, v68, v69, v70);
        }
      }
LABEL_64:
      if (++v106 >= v105)
      {
        uint64_t v79 = (void *)v101;
        if (v101)
        {
LABEL_77:
          long long v80 = (void *)LibraryByIndex;
          if (LibraryByIndex)
          {
            if (v32)
            {
LABEL_79:
              blocuint64_t k = 0;
              uint64_t v81 = v79;
              uint64_t v23 = objc_msgSend(v80, "newFunctionWithName:constantValues:functionCache:error:");
              if (!v23)
              {
                uint64_t v95 = [block description];
                MTLReportFailure(0, "deserializeFunction", 519, @"%@", v96, v97, v98, v99, v95);
              }

              goto LABEL_82;
            }
          }
          else
          {
            uint64_t v83 = v79;
            int Value = MTLSerializer::SerializedString::getValue((MTLSerializer::SerializedString *)v112);
            MTLReportFailure(0, "deserializeFunction", 511, @"Invalid library index in pipeline library for function %s", v85, v86, v87, v88, (uint64_t)Value);
            uint64_t v79 = v83;
            long long v80 = 0;
            if (v32) {
              goto LABEL_79;
            }
          }
          BOOL v89 = v79;
          unint64_t v90 = MTLSerializer::SerializedString::getValue((MTLSerializer::SerializedString *)v112);
          MTLReportFailure(0, "deserializeFunction", 513, @"No constant values specified for specialized function %s", v91, v92, v93, v94, (uint64_t)v90);
          uint64_t v79 = v89;
          long long v80 = (void *)LibraryByIndex;
          goto LABEL_79;
        }
LABEL_75:
        uint64_t v74 = MTLSerializer::SerializedString::getValue((MTLSerializer::SerializedString *)v112);
        MTLReportFailure(0, "deserializeFunction", 509, @"Specialized Function %s has no 'base function' in pipeline library", v75, v76, v77, v78, (uint64_t)v74);
        uint64_t v79 = 0;
        goto LABEL_77;
      }
      if ((unint64_t)(v107 + 2) > v104[1]) {
        abort();
      }
      uint64_t v71 = *(unsigned __int8 *)(v104[0] + v107 + 1);
      int v108 = *(unsigned __int8 *)(v104[0] + v107);
      uint64_t v109 = v71;
      uint64_t v110 = v107 + 2;
      v107 += 2 + v71;
    }
    PropertyAsuint64_t Object = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)v104);
    if (!PropertyAsObject) {
      goto LABEL_64;
    }
    uint64_t v46 = v44;
    unsigned int v32 = objc_opt_new();
    v123[0] = PropertyAsObject;
    v123[1] = v46;
    uint64_t ElementCount = MTLSerializer::SerializedObjectList::getElementCount((MTLSerializer::SerializedObjectList *)v123);
    if (!ElementCount) {
      goto LABEL_64;
    }
    uint64_t v48 = 0;
    while (1)
    {
      v122[0] = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v123, v48);
      v122[1] = v49;
      MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&block, v122);
      if ((unint64_t)v117 >= (unint64_t)v116)
      {
        uint64_t v54 = 0;
        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        int v58 = (int)v119;
        while (1)
        {
          switch(v58)
          {
            case 0:
              unsigned int __dst = 0;
              if ((unint64_t)v120 + v121 > v115) {
                abort();
              }
              memcpy(&__dst, &block[v121], (size_t)v120);
              uint64_t v54 = __dst;
              break;
            case 1:
              uint64_t v57 = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&block);
              uint64_t v56 = v59;
              break;
            case 2:
              unsigned int __dst = 0;
              if ((unint64_t)v120 + v121 > v115) {
                abort();
              }
              memcpy(&__dst, &block[v121], (size_t)v120);
              uint64_t v55 = __dst;
              break;
            case 3:
              _MTLConstantDataSize(v55);
              if ((unint64_t)v120 + v121 > v115) {
                abort();
              }
              memcpy(v125, &block[v121], (size_t)v120);
              break;
            default:
              MTLReportFailure(0, "deserializeFunctionConstants", 414, @"Unknown property in descriptor", v50, v51, v52, v53, v100);
              break;
          }
          unint64_t v117 = (void (*)(uint64_t))((char *)v117 + 1);
          if ((unint64_t)v117 >= (unint64_t)v116) {
            break;
          }
          if ((unint64_t)v118 + 2 > v115) {
            abort();
          }
          int v58 = *((unsigned __int8 *)v118 + (void)block);
          size_t v60 = *((unsigned __int8 *)v118 + (void)block + 1);
          LODWORD(v119) = v58;
          uint64_t v120 = (void *)v60;
          uint64_t v121 = (uint64_t)v118 + 2;
          uint64_t v118 = (MTLPipelineDescriptions *)((char *)v118 + v60 + 2);
        }
        if (v57)
        {
          id v61 = [NSString alloc];
          if (!v56) {
LABEL_86:
          }
            abort();
          uint64_t v62 = 0;
          while (*(unsigned char *)(v57 + v62))
          {
            if (v56 == ++v62) {
              goto LABEL_86;
            }
          }
          long long v63 = (void *)[v61 initWithUTF8String:v57];
          [v32 setConstantValue:v125 type:v55 withName:v63];

          goto LABEL_60;
        }
      }
      [v32 setConstantValue:v125 type:v55 atIndex:v54];
LABEL_60:
      if (++v48 == ElementCount) {
        goto LABEL_64;
      }
    }
  }
  uint64_t v14 = (void *)MTLPipelineDescriptions::getLibraryByIndex(a1, Small - 1, v5, v6, v7, v8, v9, v10);
  id v15 = [NSString alloc];
  if (Object)
  {
    if (!v13) {
LABEL_10:
    }
      abort();
    uint64_t v16 = Object;
    while (*v16++)
    {
      if (!--v13) {
        goto LABEL_10;
      }
    }
  }
  unint64_t v18 = (void *)[v15 initWithUTF8String:Object];
  uint64_t v23 = [v14 newFunctionWithName:v18];
  if (!v23) {
    MTLReportFailure(0, "deserializeFunction", 531, @"Function %@ could not be found in library", v19, v20, v21, v22, (uint64_t)v18);
  }

  return v23;
}

void sub_182754D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLSerializer::PropertyList::getSmallValue<unsigned int>(MTLSerializer::SerializedObjectList *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)a1 && MTLSerializer::SerializedObjectList::getElementCount(a1) > (unint64_t)a2)
  {
    unint64_t v6 = *((void *)a1 + 1);
    if (v6 < 4 * (unint64_t)(a2 + 2)) {
      goto LABEL_8;
    }
    uint64_t v7 = *(unsigned int *)(*(void *)a1 + 4 * (a2 + 1));
    if (v7)
    {
      if (v7 + 4 <= v6) {
        return *(unsigned int *)(*(void *)a1 + v7);
      }
LABEL_8:
      abort();
    }
  }
  return a3;
}

uint64_t MTLSerializer::SerializedObjectList::getElementCount(MTLSerializer::SerializedObjectList *this)
{
  if (!*(void *)this) {
    return 0;
  }
  if (*((void *)this + 1) <= 3uLL) {
    abort();
  }
  return **(unsigned int **)this;
}

uint64_t MTLPipelineDescriptions::getLibraryByIndex(MTLPipelineDescriptions *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t v10 = *((void *)this + 25);
  if (a2 >= (unint64_t)((*((void *)this + 26) - v10) >> 5))
  {
    MTLReportFailure(0, "getLibraryByIndex", 273, @"Invalid library index in pipeline library file", a5, a6, a7, a8, v15[0]);
    uint64_t v10 = *((void *)this + 25);
  }
  uint64_t v11 = v10 + 32 * v9;
  uint64_t v13 = v11 + 24;
  uint64_t result = *(void *)(v11 + 24);
  if (!result)
  {
    uint64_t v14 = *((void *)this + 2);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    void v15[2] = (uint64_t)___ZNK23MTLPipelineDescriptions17getLibraryByIndexEj_block_invoke;
    v15[3] = (uint64_t)&__block_descriptor_48_e5_v8__0l;
    v15[4] = (uint64_t)this;
    v15[5] = v11;
    dispatch_sync(v14, v15);
    return *(void *)v13;
  }
  return result;
}

uint64_t SpecialPipelineDescriptorDeserializer::newFunctionWithFunctionProperty(SpecialPipelineDescriptorDeserializer *this, MTLSerializer::SerializedCompactPropertyList::Iterator *a2)
{
  uint64_t v2 = (MTLPipelineDescriptions *)*((void *)this + 1);
  PropertyAsuint64_t Object = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject(a2);

  return MTLPipelineDescriptions::deserializeFunction(v2, PropertyAsObject, v3);
}

void ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 40))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = *v2;
    uint64_t v3 = v2[1];
    v36[0] = v4;
    v36[1] = v3;
    v35[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v36, *(_DWORD *)(a1 + 56));
    v35[1] = v5;
    v34[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v36, *(_DWORD *)(a1 + 60));
    v34[1] = v6;
    int ElementCount = MTLSerializer::SerializedObjectList::getElementCount((MTLSerializer::SerializedObjectList *)v35);
    if (ElementCount)
    {
      for (unsigned int i = 0; i != ElementCount; ++i)
      {
        v33[0] = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v35, i);
        v33[1] = v9;
        uint64_t Object = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v33, 1u);
        uint64_t v16 = (char *)Object;
        if (Object)
        {
          if (!v11) {
LABEL_22:
          }
            abort();
          unint64_t v17 = (unsigned __int8 *)Object;
          while (*v17++)
          {
            if (!--v11) {
              goto LABEL_22;
            }
          }
        }
        else
        {
          MTLReportFailure(0, "initializeDescriptorHash_block_invoke", 320, @"pipeline descriptor has no name in file", v12, v13, v14, v15, v30);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v16);
        if (std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(*(void **)(a1 + 48), (unsigned __int8 *)__p))
        {
          if (v32 >= 0) {
            uint64_t v29 = __p;
          }
          else {
            uint64_t v29 = (void **)__p[0];
          }
          MTLReportFailure(0, "initializeDescriptorHash_block_invoke", 323, @"pipeline descriptor %s duplicated", v19, v20, v21, v22, (uint64_t)v29);
        }
        unsigned int Small = MTLSerializer::PropertyList::getSmallValue<unsigned int>((MTLSerializer::SerializedObjectList *)v33, 0, 0);
        uint64_t v24 = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v34, Small);
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)(a1 + 48);
        uint64_t v37 = __p;
        uint64_t v28 = std::__hash_table<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v37);
        *((void *)v28 + 5) = v24;
        *((void *)v28 + 6) = v26;
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    **(unsigned char **)(a1 + 40) = 1;
  }
}

void sub_182755130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLSerializer::SerializedObjectList::getObject(MTLSerializer::SerializedObjectList *this, unsigned int a2)
{
  uint64_t v2 = *(unsigned int **)this;
  if (*(void *)this)
  {
    unint64_t v3 = *((void *)this + 1);
    if (v3 <= 3) {
      goto LABEL_10;
    }
    if (*v2 > a2)
    {
      if (v3 < 4 * (unint64_t)(a2 + 2)) {
        goto LABEL_10;
      }
      unint64_t v4 = v2[a2 + 1];
      if (v4)
      {
        if (v3 >= v4) {
          return (uint64_t)v2 + v4;
        }
LABEL_10:
        abort();
      }
    }
  }
  return 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unsigned int i = *v14; i; unsigned int i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unsigned int i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_182755430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLSerializer::SerializedCompactPropertyList>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  void v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1827554E4(_Unwind_Exception *a1)
{
  *size_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void reorderStitchingGraphNodes(MTLFunctionStitchingGraph *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  v121[0] = 0;
  v121[1] = 0;
  uint64_t v120 = (uint64_t *)v121;
  memset(v118, 0, sizeof(v118));
  int v119 = 1065353216;
  unint64_t v4 = [(MTLFunctionStitchingGraph *)a1 outputNode];
  uint64_t v5 = (char *)operator new(0x10uLL);
  *(void *)uint64_t v5 = 0xFFFFFFFFLL;
  *((void *)v5 + 1) = v4;
  NSUInteger v6 = [(NSArray *)[(MTLFunctionStitchingGraph *)a1 nodes] count];
  uint64_t v112 = a2;
  uint64_t v7 = v5 + 16;
  if (!v6)
  {
    uint64_t v8 = v5 + 16;
    while (1)
    {
LABEL_30:
      unint64_t v115 = v8 - 16;
      long long v117 = *((_OWORD *)v8 - 1);
      int v20 = v117;
      if ((int)v117 > 0) {
        goto LABEL_31;
      }
      std::__tree<objc_object  {objcproto24MTLFunctionStitchingNode}*>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode} const&>(&v120, (unint64_t *)&v117 + 1, (uint64_t *)&v117 + 1);
      if ((v21 & 1) == 0) {
        goto LABEL_84;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (([*((id *)&v117 + 1) isMemberOfClass:objc_opt_class()] & 1) != 0
          || ([*((id *)&v117 + 1) conformsToProtocol:&unk_1ECB3BF00] & 1) != 0
          || [*((id *)&v117 + 1) conformsToProtocol:&unk_1ECB3C010])
        {
LABEL_42:
          LODWORD(v117) = 1;
LABEL_43:
          uint64_t v23 = (void *)*((void *)&v117 + 1);
          objc_opt_class();
          char v114 = v7;
          if (objc_opt_isKindOfClass())
          {
            long long v130 = 0u;
            long long v131 = 0u;
            long long v128 = 0u;
            long long v129 = 0u;
            unint64_t v24 = (void *)[v23 controlDependencies];
            uint64_t v25 = [v24 countByEnumeratingWithState:&v128 objects:v134 count:16];
            uint64_t v113 = v23;
            unsigned int v26 = 0;
            if (v25)
            {
              uint64_t v27 = *(void *)v129;
              do
              {
                for (uint64_t i = 0; i != v25; ++i)
                {
                  if (*(void *)v129 != v27) {
                    objc_enumerationMutation(v24);
                  }
                  uint64_t v29 = *(void **)(*((void *)&v128 + 1) + 8 * i);
                  *(void *)uint64_t v133 = v29;
                  if (std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(v118, v133))
                  {
                    __p[0] = v29;
                    *(void *)uint64_t v133 = __p;
                    unsigned int v30 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v118, __p, (uint64_t)&std::piecewise_construct, (void **)v133)+ 6);
                    if (v26 <= v30) {
                      unsigned int v26 = v30;
                    }
                  }
                }
                uint64_t v25 = [v24 countByEnumeratingWithState:&v128 objects:v134 count:16];
              }
              while (v25);
            }
            *(_OWORD *)__p = 0u;
            memset(v127, 0, sizeof(v127));
            uint64_t v31 = objc_msgSend(v113, "arguments", v112);
            uint64_t v32 = [v31 countByEnumeratingWithState:__p objects:v133 count:16];
            if (v32)
            {
              uint64_t v33 = **(void **)&v127[0];
              do
              {
                for (uint64_t j = 0; j != v32; ++j)
                {
                  if (**(void **)&v127[0] != v33) {
                    objc_enumerationMutation(v31);
                  }
                  uint64_t v35 = (void *)*((void *)__p[1] + j);
                  int v132 = v35;
                  if (std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(v118, &v132))
                  {
                    uint64_t v125 = v35;
                    int v132 = &v125;
                    unsigned int v36 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v118, &v125, (uint64_t)&std::piecewise_construct, &v132)+ 6);
                    if (v26 <= v36) {
                      unsigned int v26 = v36;
                    }
                  }
                }
                uint64_t v32 = [v31 countByEnumeratingWithState:__p objects:v133 count:16];
              }
              while (v32);
            }
          }
          else
          {
            unsigned int v26 = 0;
          }
          *(void *)&long long v116 = *((void *)&v117 + 1);
          DWORD2(v116) = v26 + 1;
          std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>((uint64_t)v118, &v116, &v116);
          uint64_t v7 = v114;
          if (v37)
          {
            uint64_t v38 = v123;
            if (v123 >= v124)
            {
              uint64_t v40 = (v123 - (unsigned char *)v122) >> 3;
              if ((unint64_t)(v40 + 1) >> 61) {
                std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v41 = (v124 - (unsigned char *)v122) >> 2;
              if (v41 <= v40 + 1) {
                unint64_t v41 = v40 + 1;
              }
              if ((unint64_t)(v124 - (unsigned char *)v122) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v41;
              }
              if (v42) {
                unint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v124, v42);
              }
              else {
                unint64_t v43 = 0;
              }
              uint64_t v44 = &v43[8 * v40];
              *(void *)uint64_t v44 = *((void *)&v117 + 1);
              uint64_t v39 = v44 + 8;
              uint64_t v46 = (char *)v122;
              int v45 = v123;
              if (v123 != v122)
              {
                do
                {
                  uint64_t v47 = *((void *)v45 - 1);
                  v45 -= 8;
                  *((void *)v44 - 1) = v47;
                  v44 -= 8;
                }
                while (v45 != v46);
                int v45 = (char *)v122;
              }
              uint64_t v122 = v44;
              uint64_t v123 = v39;
              uint64_t v124 = &v43[8 * v42];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)uint64_t v123 = *((void *)&v117 + 1);
              uint64_t v39 = v38 + 8;
            }
            uint64_t v123 = v39;
          }
          goto LABEL_84;
        }
        uint64_t m = v8 - 16;
        goto LABEL_169;
      }
      if (!objc_msgSend((id)objc_msgSend(*((id *)&v117 + 1), "arguments"), "count")
        && !objc_msgSend((id)objc_msgSend(*((id *)&v117 + 1), "controlDependencies"), "count"))
      {
        goto LABEL_42;
      }
      uint64_t v22 = *((void *)&v117 + 1);
      if (v115 >= v7)
      {
        uint64_t v48 = (v115 - v5) >> 4;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60) {
          goto LABEL_215;
        }
        if ((v7 - v5) >> 3 > v49) {
          unint64_t v49 = (v7 - v5) >> 3;
        }
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50)
        {
          if (v50 >> 60) {
            goto LABEL_216;
          }
          uint64_t v51 = (char *)operator new(16 * v50);
        }
        else
        {
          uint64_t v51 = 0;
        }
        uint64_t v52 = &v51[16 * v48];
        uint64_t v7 = &v51[16 * v50];
        *(void *)uint64_t v52 = 1;
        *((void *)v52 + 1) = v22;
        uint64_t v8 = v52 + 16;
        if (v115 == v5) {
          goto LABEL_100;
        }
        uint64_t v53 = v115;
        do
        {
          *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
          v52 -= 16;
          v53 -= 16;
        }
        while (v53 != v5);
        if (v5) {
LABEL_100:
        }
          operator delete(v5);
        uint64_t v5 = v52;
      }
      else
      {
        *((void *)v8 - 2) = 1;
        *((void *)v8 - 1) = v22;
      }
      uint64_t v54 = (void *)*((void *)&v117 + 1);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        for (k = objc_msgSend((id)objc_msgSend(v54, "arguments"), "count"); k; uint64_t v8 = v58)
        {
          uint64_t v56 = objc_msgSend((id)objc_msgSend(v54, "arguments", v112), "objectAtIndexedSubscript:", --k);
          uint64_t v57 = v56;
          if (v8 >= v7)
          {
            uint64_t v59 = v7;
            uint64_t v60 = (v8 - v5) >> 4;
            unint64_t v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 60) {
              goto LABEL_215;
            }
            unint64_t v62 = v59 - v5;
            unint64_t v63 = (v59 - v5) >> 3;
            if (v63 > v61) {
              unint64_t v61 = v63;
            }
            if (v62 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v64 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v64 = v61;
            }
            if (v64)
            {
              if (v64 >> 60) {
                goto LABEL_216;
              }
              uint64_t v65 = (char *)operator new(16 * v64);
            }
            else
            {
              uint64_t v65 = 0;
            }
            uint64_t v66 = &v65[16 * v60];
            *(void *)uint64_t v66 = 0;
            *((void *)v66 + 1) = v57;
            if (v8 == v5)
            {
              uint64_t v5 = &v65[16 * v60];
            }
            else
            {
              uint64_t v67 = &v65[16 * v60];
              do
              {
                *((_OWORD *)v67 - 1) = *((_OWORD *)v8 - 1);
                v67 -= 16;
                v8 -= 16;
              }
              while (v8 != v5);
              uint64_t v8 = v5;
              uint64_t v5 = v67;
            }
            uint64_t v7 = &v65[16 * v64];
            int v58 = v66 + 16;
            if (v8) {
              operator delete(v8);
            }
          }
          else
          {
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = v56;
            int v58 = v8 + 16;
          }
        }
        uint64_t v68 = objc_msgSend((id)objc_msgSend(v54, "controlDependencies", v112), "count");
        for (m = v8; v68; uint64_t v8 = m)
        {
          uint64_t v70 = objc_msgSend((id)objc_msgSend(v54, "controlDependencies"), "objectAtIndexedSubscript:", --v68);
          uint64_t v71 = v70;
          if (v8 >= v7)
          {
            char v72 = v7;
            uint64_t v73 = (v8 - v5) >> 4;
            unint64_t v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 60) {
              goto LABEL_215;
            }
            unint64_t v75 = v72 - v5;
            unint64_t v76 = (v72 - v5) >> 3;
            if (v76 > v74) {
              unint64_t v74 = v76;
            }
            if (v75 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v77 = v74;
            }
            if (v77)
            {
              if (v77 >> 60) {
                goto LABEL_216;
              }
              uint64_t v78 = (char *)operator new(16 * v77);
            }
            else
            {
              uint64_t v78 = 0;
            }
            uint64_t v79 = &v78[16 * v73];
            *(void *)uint64_t v79 = 0;
            *((void *)v79 + 1) = v71;
            if (v8 == v5)
            {
              uint64_t v5 = &v78[16 * v73];
            }
            else
            {
              long long v80 = &v78[16 * v73];
              do
              {
                *((_OWORD *)v80 - 1) = *((_OWORD *)v8 - 1);
                v80 -= 16;
                v8 -= 16;
              }
              while (v8 != v5);
              uint64_t v8 = v5;
              uint64_t v5 = v80;
            }
            uint64_t v7 = &v78[16 * v77];
            uint64_t v81 = v79 + 16;
            if (v8) {
              operator delete(v8);
            }
            uint64_t m = v81;
          }
          else
          {
            *(void *)uint64_t v8 = 0;
            *((void *)v8 + 1) = v70;
            uint64_t m = v8 + 16;
          }
        }
        goto LABEL_169;
      }
      if ([v54 isMemberOfClass:objc_opt_class()])
      {
        if (v8 >= v7)
        {
          uint64_t v82 = (v8 - v5) >> 4;
          unint64_t v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 60) {
LABEL_215:
          }
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          if ((v7 - v5) >> 3 > v83) {
            unint64_t v83 = (v7 - v5) >> 3;
          }
          if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v84 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v84 = v83;
          }
          if (v84)
          {
            if (v84 >> 60) {
LABEL_216:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v85 = (char *)operator new(16 * v84);
          }
          else
          {
            uint64_t v85 = 0;
          }
          uint64_t v86 = &v85[16 * v82];
          uint64_t v7 = &v85[16 * v84];
          *(_DWORD *)uint64_t v86 = 0;
          *((void *)v86 + 1) = v54;
          uint64_t v87 = v86 + 16;
          if (v8 == v5)
          {
            uint64_t v5 = v8;
          }
          else
          {
            do
            {
              *((_OWORD *)v86 - 1) = *((_OWORD *)v8 - 1);
              v86 -= 16;
              v8 -= 16;
            }
            while (v8 != v5);
            if (!v5) {
              goto LABEL_168;
            }
          }
          operator delete(v5);
LABEL_168:
          uint64_t v5 = v86;
          uint64_t m = v87;
          goto LABEL_169;
        }
        *(_DWORD *)uint64_t v8 = 0;
        *((void *)v8 + 1) = v54;
        uint64_t m = v8 + 16;
      }
      else
      {
        uint64_t m = v8;
      }
LABEL_169:
      unint64_t v115 = m;
      int v20 = v117;
LABEL_31:
      if (v20 == 1) {
        goto LABEL_43;
      }
LABEL_84:
      uint64_t v8 = v115;
      if (v115 == v5) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v8 = v5 + 16;
  do
  {
    while (1)
    {
      id v9 = [(NSArray *)[(MTLFunctionStitchingGraph *)a1 nodes] objectAtIndexedSubscript:--v6];
      id v10 = v9;
      if (v8 >= v7) {
        break;
      }
      *(void *)uint64_t v8 = 0xFFFFFFFFLL;
      *((void *)v8 + 1) = v9;
      v8 += 16;
      if (!v6) {
        goto LABEL_23;
      }
    }
    uint64_t v11 = (v8 - v5) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    if ((v7 - v5) >> 3 > v12) {
      unint64_t v12 = (v7 - v5) >> 3;
    }
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = (char *)operator new(16 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[16 * v11];
    uint64_t v7 = &v14[16 * v13];
    *(void *)uint64_t v15 = 0xFFFFFFFFLL;
    *((void *)v15 + 1) = v10;
    unint64_t v16 = v15 + 16;
    if (v8 == v5)
    {
      uint64_t v5 = v8;
LABEL_21:
      operator delete(v5);
      goto LABEL_22;
    }
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v8 - 1);
      v15 -= 16;
      v8 -= 16;
    }
    while (v8 != v5);
    if (v5) {
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v5 = v15;
    uint64_t v8 = v16;
  }
  while (v6);
LABEL_23:
  if (v8 != v5) {
    goto LABEL_30;
  }
LABEL_24:
  memset(v134, 0, sizeof(v134));
  int v135 = 1065353216;
  float v17 = (uint64_t *)v122;
  float v18 = (uint64_t *)v123;
  if (v122 != v123)
  {
    BOOL v19 = (int8x16_t *)v122;
    while (1)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        break;
      }
      ++v17;
      BOOL v19 = (int8x16_t *)((char *)v19 + 8);
      if (v17 == v18)
      {
        float v17 = v18;
        goto LABEL_178;
      }
    }
    uint64_t v88 = v18 - 1;
    uint64_t v89 = (char *)v18 - (char *)v19;
    while (v17 != v88)
    {
      objc_opt_class();
      --v18;
      v89 -= 8;
      --v88;
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (v89 < 17)
        {
          unint64_t v90 = 0;
          uint64_t v92 = 0;
        }
        else
        {
          unint64_t v90 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<objc_object  {objcproto24MTLFunctionStitchingNode}*>((v89 >> 3) + 1);
          uint64_t v92 = v91;
        }
        float v17 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_2 &,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,long,std::pair<objc_object  {objcproto24MTLFunctionStitchingNode}*,long>>(v19, v18, (v89 >> 3) + 1, v90, v92);
        if (v90) {
          operator delete(v90);
        }
        break;
      }
    }
  }
LABEL_178:
  int64_t v93 = ((char *)v17 - (unsigned char *)v122) >> 3;
  unint64_t v94 = 126 - 2 * __clz(v93);
  if (v17 == v122) {
    uint64_t v95 = 0;
  }
  else {
    uint64_t v95 = v94;
  }
  std::__introsort<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,false>((uint64_t)v122, (void **)v17, v95, 1);
  *(void *)&v127[0] = 0;
  long long v96 = 0uLL;
  *(_OWORD *)__p = 0u;
  uint64_t v97 = (void **)v122;
  if (v123 != v122)
  {
    int64_t v98 = 0;
    unsigned int v99 = 0;
    while (1)
    {
      if (!v99 || v93 <= v98) {
        goto LABEL_188;
      }
      NodeKey::NodeKey((uint64_t)v133, v97[v98]);
      NodeKey::NodeKey((uint64_t)&v128, *((void **)v122 + v99 - 1));
      if (!NodeKey::operator==(v133, (uint64_t)&v128)) {
        break;
      }
      uint64_t v100 = __p[1];
LABEL_205:
      uint64_t v110 = __p[0];
      *(void *)uint64_t v133 = (char *)v122 + 8 * v98;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode} const&>,std::piecewise_construct_t const&<>>((uint64_t)v134, *(void **)v133, (uint64_t)&std::piecewise_construct, (void **)v133)+ 6) = ((unint64_t)(v100 - v110) >> 3) - 1;
      uint64_t v97 = (void **)v122;
      int64_t v98 = ++v99;
      if (v99 >= (unint64_t)((v123 - (unsigned char *)v122) >> 3))
      {
        long long v96 = *(_OWORD *)__p;
        uint64_t v111 = *(void *)&v127[0];
        goto LABEL_208;
      }
    }
    uint64_t v97 = (void **)v122;
LABEL_188:
    uint64_t v101 = (char *)__p[1];
    if (__p[1] >= (void *)*(void *)&v127[0])
    {
      int64_t v102 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v102 + 1) >> 61) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v103 = (uint64_t)(*(void *)&v127[0] - (unint64_t)__p[0]) >> 2;
      if (v103 <= v102 + 1) {
        unint64_t v103 = v102 + 1;
      }
      if (*(void *)&v127[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v104 = v103;
      }
      if (v104) {
        unint64_t v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v127, v104);
      }
      else {
        unint64_t v105 = 0;
      }
      unint64_t v106 = &v105[8 * v102];
      *(void *)unint64_t v106 = v97[v98];
      uint64_t v100 = v106 + 8;
      int v108 = (char *)__p[0];
      uint64_t v107 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          uint64_t v109 = *((void *)v107 - 1);
          v107 -= 8;
          *((void *)v106 - 1) = v109;
          v106 -= 8;
        }
        while (v107 != v108);
        uint64_t v107 = (char *)__p[0];
      }
      __p[0] = v106;
      __p[1] = v100;
      *(void *)&v127[0] = &v105[8 * v104];
      if (v107) {
        operator delete(v107);
      }
    }
    else
    {
      *(void *)__p[1] = v97[v98];
      uint64_t v100 = v101 + 8;
    }
    __p[1] = v100;
    goto LABEL_205;
  }
  uint64_t v111 = 0;
LABEL_208:
  *(_OWORD *)uint64_t v112 = v96;
  *(void *)(v112 + 16) = v111;
  __p[1] = 0;
  *(void *)&v127[0] = 0;
  __p[0] = 0;
  std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__hash_table(v112 + 24, (uint64_t *)v134);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v134);
  if (v5) {
    operator delete(v5);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v118);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)&v120, v121[0]);
  if (v122)
  {
    uint64_t v123 = (char *)v122;
    operator delete(v122);
  }
}

void sub_1827561E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (v33) {
    operator delete(v33);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v34 - 240);
  if (v32) {
    operator delete(v32);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a19);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)&a24, a25);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = operator new(0x20uLL);
  *unint64_t v13 = 0;
  v13[1] = v9;
  void v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *unint64_t v13 = *v22;
LABEL_38:
    *uint64_t v22 = v13;
    goto LABEL_39;
  }
  *unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1827564F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__tree<objc_object  {objcproto24MTLFunctionStitchingNode}*>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode} const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint8x8_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        uint8x8_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        uint8x8_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode} const&>,std::piecewise_construct_t const&<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = operator new(0x20uLL);
  *unint64_t v13 = 0;
  v13[1] = v9;
  void v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *unint64_t v13 = *v22;
LABEL_38:
    *uint64_t v22 = v13;
    goto LABEL_39;
  }
  *unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1827568F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182756B4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t NodeKey::operator==(int *a1, uint64_t a2)
{
  int v2 = *a1;
  if (*a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t result = 1;
  switch(v2)
  {
    case 1:
      uint64_t v5 = *((void *)a1 + 1);
      uint64_t v6 = *(void *)(a2 + 8);
      goto LABEL_8;
    case 3:
    case 6:
    case 7:
    case 8:
      uint64_t v5 = *((void *)a1 + 2);
      uint64_t v6 = *(void *)(a2 + 16);
      goto LABEL_8;
    case 4:
    case 5:
      if (*((void *)a1 + 2) != *(void *)(a2 + 16)) {
        return 0;
      }
      uint64_t v5 = *((void *)a1 + 3);
      uint64_t v6 = *(void *)(a2 + 24);
LABEL_8:
      BOOL v7 = v5 == v6;
      goto LABEL_9;
    case 9:
      return result;
    case 10:
      BOOL v7 = a1[8] == *(_DWORD *)(a2 + 32);
LABEL_9:
      uint64_t result = v7;
      break;
    default:
      return 0;
  }
  return result;
}

void newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator()(uint64_t a1, void *a2, NSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  uint64_t v203 = a3;
  if (!a2 && !**(unsigned char **)a1)
  {
    **(unsigned char **)a1 = 1;
    int v190 = a3;
    _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"Non-output node functionGraphs[%lu].nodes[%lu] cannot be nil.", a4, a5, a6, a7, a8, **(void **)(a1 + 16));
  }
  if (v8)
  {
    if (!**(unsigned char **)a1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        **(unsigned char **)a1 = 1;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode is not a MTLFunctionStitchingFunctionNode.", v12, v13, v14, v15, v16, **(void **)(a1 + 16));
      }
    }
  }
  else if (!**(unsigned char **)a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      **(unsigned char **)a1 = 1;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      int v190 = a3;
      _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu] is not a MTLFunctionStitchingFunctionNode.", v17, v18, v19, v20, v21, **(void **)(a1 + 16));
    }
  }
  if (**(unsigned char **)a1) {
    return;
  }
  unint64_t v22 = 0x1E4F29000uLL;
  if (v8)
  {
    unint64_t v23 = @"OUTPUT(node_output) : ";
  }
  else
  {
    uint64_t v185 = a3;
    unint64_t v23 = @"NODE(node_%lu) : ";
  }
  [**(id **)(a1 + 24) appendString:objc_msgSend(NSString, "stringWithFormat:", v23, v185, v190)];
  long long v197 = *(_OWORD *)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 48);
  uint64_t v25 = *(void *)(a1 + 56);
  long long v198 = *(unsigned char **)a1;
  uint64_t v199 = v24;
  long long v200 = &v203;
  long long v201 = *(_OWORD *)(a1 + 8);
  uint64_t v202 = v25;
  unint64_t v26 = 0x1E4F1C000uLL;
  if (v8)
  {
    if (!*v198)
    {
      if (![a2 arguments]) {
        **(unsigned char **)a1 = 1;
      }
      if (![a2 arguments]) {
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode.arguments cannot be nil.", v27, v28, v29, v30, v31, **(void **)(a1 + 16));
      }
    }
    if (!**(unsigned char **)a1)
    {
      [a2 arguments];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        **(unsigned char **)a1 = 1;
      }
      [a2 arguments];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode.arguments is not an NSArray.", v32, v33, v34, v35, v36, **(void **)(a1 + 16));
      }
    }
    if (!**(unsigned char **)a1)
    {
      if (![a2 controlDependencies]) {
        **(unsigned char **)a1 = 1;
      }
      if (![a2 controlDependencies]) {
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode.controlDependencies cannot be nil.", v37, v38, v39, v40, v41, **(void **)(a1 + 16));
      }
    }
    if (!**(unsigned char **)a1)
    {
      [a2 controlDependencies];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        **(unsigned char **)a1 = 1;
      }
      [a2 controlDependencies];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode.controlDependencies is not an NSArray.", v42, v43, v44, v45, v46, **(void **)(a1 + 16));
      }
    }
  }
  else
  {
    if (!*v198)
    {
      if (![a2 arguments]) {
        **(unsigned char **)a1 = 1;
      }
      if (![a2 arguments])
      {
        uint64_t v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].arguments cannot be nil.", v47, v48, v49, v50, v51, **(void **)(a1 + 16));
      }
    }
    if (!**(unsigned char **)a1)
    {
      [a2 arguments];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        **(unsigned char **)a1 = 1;
      }
      [a2 arguments];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].arguments is not an NSArray.", v52, v53, v54, v55, v56, **(void **)(a1 + 16));
      }
    }
    if (!**(unsigned char **)a1)
    {
      if (![a2 controlDependencies]) {
        **(unsigned char **)a1 = 1;
      }
      if (![a2 controlDependencies])
      {
        uint64_t v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].controlDependencies cannot be nil.", v57, v58, v59, v60, v61, **(void **)(a1 + 16));
      }
    }
    if (!**(unsigned char **)a1)
    {
      [a2 controlDependencies];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        **(unsigned char **)a1 = 1;
      }
      [a2 controlDependencies];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].controlDependencies is not an NSArray.", v62, v63, v64, v65, v66, **(void **)(a1 + 16));
      }
    }
  }
  if ([a2 arguments]
    && ([a2 arguments], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && [a2 controlDependencies]
    && ([a2 controlDependencies], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v67 = objc_msgSend((id)objc_msgSend(a2, "arguments"), "count");
    uint64_t v68 = v67 + objc_msgSend((id)objc_msgSend(a2, "controlDependencies"), "count") + 1;
  }
  else
  {
    uint64_t v68 = 1;
  }
  uint64_t v69 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:v68];
  if ([a2 isMemberOfClass:objc_opt_class()])
  {
    if (!**(unsigned char **)a1)
    {
      if (objc_msgSend((id)objc_msgSend(a2, "arguments"), "count") != 1) {
        **(unsigned char **)a1 = 1;
      }
      if (objc_msgSend((id)objc_msgSend(a2, "arguments"), "count") != 1)
      {
        uint64_t v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].arguments must have one element.", v70, v71, v72, v73, v74, **(void **)(a1 + 16));
      }
    }
    if (**(unsigned char **)a1) {
      goto LABEL_98;
    }
    unint64_t v75 = NSString;
    unint64_t v76 = @"EARLY_RETURN";
  }
  else
  {
    if (v8)
    {
      if (!**(unsigned char **)a1)
      {
        if (![a2 name]) {
          **(unsigned char **)a1 = 1;
        }
        if (![a2 name]) {
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode.name cannot be nil.", v77, v78, v79, v80, v81, **(void **)(a1 + 16));
        }
      }
      if (!**(unsigned char **)a1)
      {
        if (objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", &stru_1ECAC84A8)) {
          **(unsigned char **)a1 = 1;
        }
        if (objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", &stru_1ECAC84A8)) {
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode.name cannot be empty.", v82, v83, v84, v85, v86, **(void **)(a1 + 16));
        }
      }
    }
    else
    {
      if (!**(unsigned char **)a1)
      {
        if (![a2 name]) {
          **(unsigned char **)a1 = 1;
        }
        if (![a2 name])
        {
          uint64_t v191 = (uint64_t)v203;
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].name cannot be nil.", v87, v88, v89, v90, v91, **(void **)(a1 + 16));
        }
      }
      if (!**(unsigned char **)a1)
      {
        if (objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", &stru_1ECAC84A8)) {
          **(unsigned char **)a1 = 1;
        }
        if (objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", &stru_1ECAC84A8))
        {
          uint64_t v191 = (uint64_t)v203;
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].name cannot be empty.", v92, v93, v94, v95, v96, **(void **)(a1 + 16));
        }
      }
    }
    if (**(unsigned char **)a1) {
      goto LABEL_98;
    }
    uint64_t v97 = NSString;
    uint64_t v186 = [a2 name];
    unint64_t v76 = @"FUNCTION(%@)";
    unint64_t v75 = v97;
  }
  [v69 addObject:objc_msgSend(v75, "stringWithFormat:", v76, v186, v191)];
LABEL_98:
  if (!**(unsigned char **)a1 && objc_msgSend((id)objc_msgSend(a2, "arguments"), "count"))
  {
    unint64_t v103 = 0;
    while (1)
    {
      unint64_t v104 = objc_msgSend((id)objc_msgSend(a2, "arguments"), "objectAtIndexedSubscript:", v103);
      unint64_t v105 = v104;
      if (v8)
      {
        if (!**(unsigned char **)a1)
        {
          if (([v104 conformsToProtocol:&unk_1ECB3BCA8] & 1) == 0) {
            **(unsigned char **)a1 = 1;
          }
          if (([v105 conformsToProtocol:&unk_1ECB3BCA8] & 1) == 0)
          {
            uint64_t v191 = (uint64_t)v103;
            _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode.arguments[%lu] does not conform to MTLFunctionStitchingNode.", v106, v107, v108, v109, v110, **(void **)(a1 + 16));
          }
        }
      }
      else if (!**(unsigned char **)a1)
      {
        if (([v104 conformsToProtocol:&unk_1ECB3BCA8] & 1) == 0) {
          **(unsigned char **)a1 = 1;
        }
        if (([v105 conformsToProtocol:&unk_1ECB3BCA8] & 1) == 0)
        {
          uint64_t v191 = (uint64_t)v203;
          uint64_t v193 = v103;
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].arguments[%lu] does not conform to MTLFunctionStitchingNode.", v111, v112, v113, v114, v115, **(void **)(a1 + 16));
        }
      }
      if (([v105 isMemberOfClass:objc_opt_class()] & 1) != 0
        || [v105 isMemberOfClass:objc_opt_class()])
      {
        break;
      }
      if ([v105 isMemberOfClass:objc_opt_class()])
      {
        if (!**(unsigned char **)a1)
        {
          uint64_t v124 = objc_msgSend(*(id *)(v22 + 24), "stringWithFormat:", @"INPUT(%lu)", objc_msgSend(v105, "argumentIndex"), v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if ([v105 isMemberOfClass:objc_opt_class()])
      {
        if (!**(unsigned char **)a1)
        {
          uint64_t v124 = [*(id *)(v22 + 24) stringWithFormat:@"BUFFER(CONSTANT, %lu)", objc_msgSend(v105, "bindIndex"), v191, v193, v195];
          goto LABEL_167;
        }
      }
      else if ([v105 isMemberOfClass:objc_opt_class()])
      {
        if (!**(unsigned char **)a1)
        {
          long long v196 = *(void **)(v22 + 24);
          unint64_t v127 = v26;
          int v128 = [v105 dereference];
          uint64_t v192 = [v105 bindIndex];
          uint64_t v194 = [v105 byteOffset];
          BOOL v129 = v128 == 0;
          unint64_t v26 = v127;
          uint64_t v130 = 42;
          if (v129) {
            uint64_t v130 = 0;
          }
          unint64_t v22 = 0x1E4F29000;
          uint64_t v124 = [v196 stringWithFormat:@"%cBUFFER_ADDR(BUFFER(CONSTANT, %lu), %lu)", v130, v192, v194, v195];
          goto LABEL_167;
        }
      }
      else if ([v105 isMemberOfClass:objc_opt_class()])
      {
        if (!**(unsigned char **)a1)
        {
          unint64_t v131 = v26;
          int v132 = *(void **)(v22 + 24);
          uint64_t v187 = [v105 bindIndex];
          uint64_t v133 = v132;
          unint64_t v26 = v131;
          uint64_t v124 = objc_msgSend(v133, "stringWithFormat:", @"TEXTURE(%lu)", v187, v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if ([v105 isMemberOfClass:objc_opt_class()])
      {
        if (!**(unsigned char **)a1)
        {
          unint64_t v134 = v26;
          int v135 = *(void **)(v22 + 24);
          uint64_t v188 = [v105 bindIndex];
          uint64_t v136 = v135;
          unint64_t v26 = v134;
          uint64_t v124 = objc_msgSend(v136, "stringWithFormat:", @"SAMPLER(%lu)", v188, v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if ([v105 isMemberOfClass:objc_opt_class()])
      {
        if (!**(unsigned char **)a1)
        {
          unint64_t v137 = v26;
          size_t v138 = *(void **)(v22 + 24);
          uint64_t v189 = [v105 bindIndex];
          size_t v139 = v138;
          unint64_t v26 = v137;
          uint64_t v124 = objc_msgSend(v139, "stringWithFormat:", @"THREADGROUP(%lu)", v189, v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if ([v105 isMemberOfClass:objc_opt_class()])
      {
        if (!**(unsigned char **)a1)
        {
          uint64_t v140 = *(void **)(v22 + 24);
          size_t v141 = @"IMAGEBLOCK";
          goto LABEL_166;
        }
      }
      else if ([v105 isMemberOfClass:objc_opt_class()])
      {
        if (!**(unsigned char **)a1)
        {
          uint64_t v140 = *(void **)(v22 + 24);
          size_t v141 = @"BUILTIN(THREAD_POSITION_IN_GRID)";
          goto LABEL_166;
        }
      }
      else
      {
        int v142 = [v105 isMemberOfClass:objc_opt_class()];
        size_t v143 = *(unsigned char **)a1;
        if (!v142)
        {
          if (v8)
          {
            if (!**(unsigned char **)a1)
            {
              *size_t v143 = 1;
              uint64_t v144 = **(void **)(a1 + 8);
              uint64_t v145 = **(void **)(a1 + 16);
              size_t v146 = (objc_class *)objc_opt_class();
              uint64_t v191 = (uint64_t)v103;
              uint64_t v193 = NSStringFromClass(v146);
              uint64_t v147 = v144;
              unint64_t v26 = 0x1E4F1C000;
              _MTLMessageContextPush_(v147, 8, @"functionGraphs[%lu].outputNode.arguments[%lu] is of incorrect type: %@.", v148, v149, v150, v151, v152, v145);
            }
          }
          else if (!**(unsigned char **)a1)
          {
            *size_t v143 = 1;
            uint64_t v153 = **(void **)(a1 + 8);
            uint64_t v154 = **(void **)(a1 + 16);
            uint64_t v155 = (uint64_t)v203;
            uint64_t v156 = (objc_class *)objc_opt_class();
            uint64_t v193 = v103;
            __n128 v195 = NSStringFromClass(v156);
            uint64_t v191 = v155;
            unint64_t v22 = 0x1E4F29000;
            uint64_t v157 = v153;
            unint64_t v26 = 0x1E4F1C000;
            _MTLMessageContextPush_(v157, 8, @"functionGraphs[%lu].nodes[%lu].arguments[%lu] is of incorrect type: %@.", v158, v159, v160, v161, v162, v154);
          }
          goto LABEL_169;
        }
        if (!**(unsigned char **)a1)
        {
          uint64_t v140 = *(void **)(v22 + 24);
          size_t v141 = @"BUILTIN(THREAD_POSITION_IN_THREADGROUP)";
LABEL_166:
          uint64_t v124 = objc_msgSend(v140, "stringWithFormat:", v141, v186, v191, v193, v195);
LABEL_167:
          uint64_t v126 = (__CFString *)v124;
          uint64_t v125 = v69;
LABEL_168:
          [v125 addObject:v126];
        }
      }
LABEL_169:
      unint64_t v103 = (NSString *)((char *)v103 + 1);
      if ((unint64_t)v103 >= objc_msgSend((id)objc_msgSend(a2, "arguments"), "count")) {
        goto LABEL_99;
      }
    }
    unint64_t v116 = newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator() const(MTLFunctionStitchingFunctionNode const*,unsigned long,BOOL)::{lambda(NSArray*<MTLFunctionStitchingFunctionNode*>,NSArray*)#1}::operator()((uint64_t)&v197, (void *)[**(id **)(a1 + 32) nodes], (uint64_t)v105);
    unint64_t v122 = v116;
    uint64_t v123 = *(unsigned char **)a1;
    if (v8)
    {
      if (!**(unsigned char **)a1)
      {
        if (v116 == -1) {
          goto LABEL_135;
        }
        if (v116 == 0x7FFFFFFFFFFFFFFFLL)
        {
          unsigned char *v123 = 1;
          uint64_t v191 = **(void **)(a1 + 16);
          uint64_t v193 = v103;
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes does not contain functionGraphs[%lu].outputNode.arguments[%lu].", v117, v118, v119, v120, v121, v191);
        }
LABEL_133:
        if (!**(unsigned char **)a1)
        {
          uint64_t v124 = objc_msgSend(*(id *)(v22 + 24), "stringWithFormat:", @"NODE(node_%lu)", v122, v191, v193, v195);
          goto LABEL_167;
        }
        goto LABEL_169;
      }
    }
    else if (!**(unsigned char **)a1)
    {
      if (v116 == -1)
      {
LABEL_135:
        uint64_t v125 = v69;
        uint64_t v126 = @"NODE(node_output)";
        goto LABEL_168;
      }
      if (v116 == 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned char *v123 = 1;
        uint64_t v193 = v203;
        __n128 v195 = v103;
        uint64_t v191 = **(void **)(a1 + 16);
        _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes does not contain functionGraphs[%lu].nodes[%lu].arguments[%lu].", v117, v118, v119, v120, v121, v191);
      }
      goto LABEL_133;
    }
    if (v116 == -1) {
      goto LABEL_169;
    }
    goto LABEL_133;
  }
LABEL_99:
  if (!**(unsigned char **)a1)
  {
    [a2 controlDependencies];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      **(unsigned char **)a1 = 1;
    }
    [a2 controlDependencies];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].controlDependencies is not a NSArray.", v98, v99, v100, v101, v102, **(void **)(a1 + 16));
    }
  }
  if (!**(unsigned char **)a1 && objc_msgSend((id)objc_msgSend(a2, "controlDependencies"), "count"))
  {
    for (unint64_t i = 0; i < objc_msgSend((id)objc_msgSend(a2, "controlDependencies"), "count"); ++i)
    {
      uint64_t v164 = objc_msgSend((id)objc_msgSend(a2, "controlDependencies"), "objectAtIndexedSubscript:", i);
      if (v8)
      {
        if (!**(unsigned char **)a1)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            **(unsigned char **)a1 = 1;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].outputNode.controlDependencies[%lu] is not of type MTLFunctionStitchingFunctionNode.", v165, v166, v167, v168, v169, **(void **)(a1 + 16));
          }
        }
      }
      else if (!**(unsigned char **)a1)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          **(unsigned char **)a1 = 1;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes[%lu].controlDependencies[%lu] is not of type MTLFunctionStitchingFunctionNode.", v170, v171, v172, v173, v174, **(void **)(a1 + 16));
        }
      }
      unint64_t v175 = newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator() const(MTLFunctionStitchingFunctionNode const*,unsigned long,BOOL)::{lambda(NSArray*<MTLFunctionStitchingFunctionNode*>,NSArray*)#1}::operator()((uint64_t)&v197, (void *)[**(id **)(a1 + 32) nodes], v164);
      unint64_t v181 = v175;
      uint64_t v182 = *(unsigned char **)a1;
      if (v8)
      {
        if (**(unsigned char **)a1) {
          goto LABEL_206;
        }
        if (v175 == -1) {
          goto LABEL_202;
        }
        if (v175 == 0x7FFFFFFFFFFFFFFFLL)
        {
          *uint64_t v182 = 1;
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes does not contain functionGraphs[%lu].outputNode.controlDependencies[%lu].", v176, v177, v178, v179, v180, **(void **)(a1 + 16));
        }
      }
      else
      {
        if (**(unsigned char **)a1)
        {
LABEL_206:
          if (v175 == -1) {
            continue;
          }
          goto LABEL_200;
        }
        if (v175 == -1)
        {
LABEL_202:
          int v184 = v69;
          int v183 = @"*NODE(node_output)";
          goto LABEL_203;
        }
        if (v175 == 0x7FFFFFFFFFFFFFFFLL)
        {
          *uint64_t v182 = 1;
          _MTLMessageContextPush_(**(void **)(a1 + 8), 8, @"functionGraphs[%lu].nodes does not contain functionGraphs[%lu].nodes[%lu].controlDependencies[%lu].", v176, v177, v178, v179, v180, **(void **)(a1 + 16));
        }
      }
LABEL_200:
      if (!**(unsigned char **)a1)
      {
        int v183 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"*NODE(node_%lu)", v181);
        int v184 = v69;
LABEL_203:
        [v184 addObject:v183];
      }
    }
  }
  if (!**(unsigned char **)a1)
  {
    [**(id **)(a1 + 24) appendString:objc_msgSend(v69, "componentsJoinedByString:", @", ")];
    if (!**(unsigned char **)a1) {
      [**(id **)(a1 + 24) appendString:@";\n"];
    }
  }
}

uint64_t NodeKey::NodeKey(uint64_t a1, void *a2)
{
  if ([a2 isMemberOfClass:objc_opt_class()])
  {
    *(_DWORD *)a1 = 1;
    *(void *)(a1 + 8) = [a2 argumentIndex];
    return a1;
  }
  if ([a2 isMemberOfClass:objc_opt_class()])
  {
    if ([a2 dereference]) {
      int v4 = 5;
    }
    else {
      int v4 = 4;
    }
    *(_DWORD *)a1 = v4;
    *(void *)(a1 + 16) = [a2 bindIndex];
    *(void *)(a1 + 24) = [a2 byteOffset];
    return a1;
  }
  if ([a2 isMemberOfClass:objc_opt_class()])
  {
    int v5 = 3;
LABEL_16:
    *(_DWORD *)a1 = v5;
    *(void *)(a1 + 16) = [a2 bindIndex];
    return a1;
  }
  if ([a2 isMemberOfClass:objc_opt_class()])
  {
    int v5 = 6;
    goto LABEL_16;
  }
  if ([a2 isMemberOfClass:objc_opt_class()])
  {
    int v5 = 7;
    goto LABEL_16;
  }
  if ([a2 isMemberOfClass:objc_opt_class()])
  {
    int v5 = 8;
    goto LABEL_16;
  }
  if ([a2 isMemberOfClass:objc_opt_class()])
  {
    *(_DWORD *)a1 = 9;
  }
  else if ([a2 isMemberOfClass:objc_opt_class()])
  {
    *(_DWORD *)a1 = 10;
    *(_DWORD *)(a1 + 32) = 1;
  }
  else if ([a2 isMemberOfClass:objc_opt_class()])
  {
    *(_DWORD *)a1 = 10;
    *(_DWORD *)(a1 + 32) = 0;
  }
  return a1;
}

unint64_t newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator() const(MTLFunctionStitchingFunctionNode const*,unsigned long,BOOL)::{lambda(NSArray*<MTLFunctionStitchingFunctionNode*>,NSArray*)#1}::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v20 = a3;
  if ([**(id **)a1 outputNode] == a3 && !**(unsigned char **)(a1 + 8))
  {
    uint64_t v19 = *(unsigned char **)(a1 + 16);
    if (!*v19 && **(void **)(a1 + 24) >= **(void **)(a1 + 32))
    {
      *uint64_t v19 = 1;
      _MTLMessageContextPush_(**(void **)(a1 + 40), 8, @"functionGraphs[%lu].nodes[%lu] contains a reference to .output_node, which must be listed in .nodes before its use.", v5, v6, v7, v8, v9, **(void **)(a1 + 48));
    }
    return -1;
  }
  else
  {
    uint8x8_t v10 = std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(*(void **)(a1 + 56), &v20);
    if (v10)
    {
      unint64_t result = v10[3];
      if (result < **(void **)(a1 + 32)) {
        return result;
      }
      uint64_t v17 = *(unsigned char **)(a1 + 16);
      if (!*v17)
      {
        uint64_t v18 = *(unsigned char **)(a1 + 8);
        if (!*v18)
        {
          *uint64_t v17 = 1;
          if (!*v18) {
            _MTLMessageContextPush_(**(void **)(a1 + 40), 8, @"functionGraphs[%lu].nodes[%lu] contains a reference to .nodes[%lu], which must be listed before its use.", v11, v12, v13, v14, v15, **(void **)(a1 + 48));
          }
        }
      }
    }
    else if (a2 && **(unsigned char **)(a1 + 8))
    {
      return [a2 indexOfObject:v20];
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

void MTLInputStageReflectionDeserializer::deserializeStageInputDescriptor(MTLInputStageReflectionDeserializer *this, _WORD *a2, unint64_t a3, const BOOL *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v36 = 0;
  memset(v35, 0, sizeof(v35));
  unint64_t v5 = (unsigned __int16)a2[1];
  if (v5 >= 0x800)
  {
    uint64_t v6 = (unsigned int *)((char *)a2 + (unsigned __int16)a2[3]);
    unint64_t v7 = v5 >> 11;
    do
    {
      unsigned int v9 = *v6;
      v6 += 2;
      unint64_t v8 = v9;
      if (a4[v9 & 0x1F]) {
        *((unsigned char *)v35 + ((v8 >> 5) & 0x1F)) = 1;
      }
      --v7;
    }
    while (v7);
  }
  uint8x8_t v10 = (char *)a2 + (unsigned __int16)a2[2];
  uint64_t v11 = (v5 >> 6) & 0x1F;
  if (v11)
  {
    char v12 = 0;
    BOOL v13 = 0;
    uint64_t v14 = (v5 >> 6) & 0x1F;
    uint64_t v15 = (unsigned int *)((char *)a2 + (unsigned __int16)a2[2]);
    do
    {
      unsigned int v17 = *v15;
      v15 += 4;
      char v16 = v17;
      if ((v17 >> 5) - 7 <= 1)
      {
        BOOL v13 = (*((unsigned __int8 *)v35 + (v16 & 0x1F)) | v13) != 0;
        char v12 = 1;
      }
      --v14;
    }
    while (v14);
  }
  else
  {
    BOOL v13 = 0;
    char v12 = 0;
  }
  BOOL v31 = v13;
  unsigned int v33 = (v12 & 1) + v11 + *((_DWORD *)this + 4);
  uint64_t v18 = malloc_type_malloc(8 * v33, 0x80040B8603338uLL);
  uint64_t v30 = (MTLBufferBindingInternal **)&v18[v11];
  memcpy(&v30[v12 & 1], *((const void **)this + 1), 8 * *((unsigned int *)this + 4));
  free(*((void **)this + 1));
  *((void *)this + 1) = 0;
  unint64_t v19 = 0x1E4F29000uLL;
  uint64_t v34 = v11;
  if (v11)
  {
    uint64_t v20 = 0;
    do
    {
      unint64_t v21 = v19;
      LOBYTE(v29) = 0;
      unint64_t v22 = -[MTLBufferBindingInternal initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:]([MTLBufferBindingInternal alloc], "initWithName:type:access:isActive:locationIndex:arraySize:dataType:pixelFormat:aluType:isConstantBuffer:dataSize:alignment:", objc_msgSend(*(id *)(v19 + 24), "stringWithFormat:", @"%s.%u", *((void *)this + 21), v20), 0, 0, *((unsigned __int8 *)v35 + (*(_DWORD *)v10 & 0x1F)), *(_DWORD *)v10 & 0x1F, 1, 1, 0, 0, v29, *((void *)v10 + 1), 4);
      [(MTLBufferBindingInternal *)v22 setVertexDescriptorBuffer:1];
      unint64_t v19 = v21;
      v18[v20++] = v22;
      v10 += 16;
    }
    while (v34 != v20);
  }
  if (v12)
  {
    __int16 v23 = a2[1];
    uint64_t v24 = objc_msgSend(*(id *)(v19 + 24), "stringWithFormat:", @"%s.%u", *((void *)this + 21), v34);
    uint64_t v25 = [MTLBufferBindingInternal alloc];
    uint64_t v26 = 33;
    if ((v23 & 1) == 0) {
      uint64_t v26 = 41;
    }
    uint64_t v27 = 4;
    if ((v23 & 1) == 0) {
      uint64_t v27 = 2;
    }
    LOBYTE(v29) = 0;
    uint64_t v28 = [(MTLBufferBindingInternal *)v25 initWithName:v24 type:0 access:0 isActive:v31 locationIndex:((unint64_t)(unsigned __int16)a2[1] >> 1) & 0x1F arraySize:1 dataType:v26 pixelFormat:0 aluType:0 isConstantBuffer:v29 dataSize:v27 alignment:v27];
    [(MTLBufferBindingInternal *)v28 setVertexDescriptorBuffer:1];
    *uint64_t v30 = v28;
  }
  *((void *)this + 1) = v18;
  *((_DWORD *)this + 4) = v33;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(void **a1, void **a2, void **a3)
{
  uint64_t v6 = *a1;
  NodeKey::NodeKey((uint64_t)v17, *a2);
  NodeKey::NodeKey((uint64_t)v16, v6);
  BOOL v7 = NodeKey::operator<(v17, (uint64_t)v16);
  unint64_t v8 = *a3;
  unsigned int v9 = *a2;
  if (v7)
  {
    NodeKey::NodeKey((uint64_t)v17, v8);
    NodeKey::NodeKey((uint64_t)v16, v9);
    BOOL result = NodeKey::operator<(v17, (uint64_t)v16);
    uint64_t v11 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      NodeKey::NodeKey((uint64_t)v17, *a3);
      NodeKey::NodeKey((uint64_t)v16, v11);
      BOOL result = NodeKey::operator<(v17, (uint64_t)v16);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else
  {
    NodeKey::NodeKey((uint64_t)v17, v8);
    NodeKey::NodeKey((uint64_t)v16, v9);
    BOOL result = NodeKey::operator<(v17, (uint64_t)v16);
    if (result)
    {
      char v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL v13 = *a1;
      NodeKey::NodeKey((uint64_t)v17, *a2);
      NodeKey::NodeKey((uint64_t)v16, v13);
      BOOL result = NodeKey::operator<(v17, (uint64_t)v16);
      if (result)
      {
        uint64_t v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,false>(uint64_t result, void **a2, uint64_t a3, char a4)
{
  unint64_t v8 = (void **)result;
  while (2)
  {
    unsigned int v9 = a2;
    uint8x8_t v10 = a2 - 1;
    uint64_t v11 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v8 = v11;
          uint64_t v12 = (char *)v9 - (char *)v11;
          uint64_t v13 = v9 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v41 = *v8;
                NodeKey::NodeKey((uint64_t)v94, *(a2 - 1));
                NodeKey::NodeKey((uint64_t)v93, v41);
                BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                if (result)
                {
                  uint64_t v42 = *v8;
                  *unint64_t v8 = *(a2 - 1);
                  *(a2 - 1) = v42;
                }
                break;
              case 3:
                BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v8, v8 + 1, v10);
                break;
              case 4:
                BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v8, v8 + 1, v8 + 2, v10);
                break;
              case 5:
                BOOL result = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,0>(v8, v8 + 1, v8 + 2, v8 + 3, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 191)
          {
            uint64_t v43 = v8 + 1;
            BOOL v45 = v8 == v9 || v43 == v9;
            if (a4)
            {
              if (!v45)
              {
                uint64_t v46 = 0;
                uint64_t v47 = v8;
                do
                {
                  uint64_t v49 = *v47;
                  uint64_t v48 = v47[1];
                  uint64_t v47 = v43;
                  NodeKey::NodeKey((uint64_t)v94, v48);
                  NodeKey::NodeKey((uint64_t)v93, v49);
                  BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                  if (result)
                  {
                    uint64_t v50 = *v47;
                    uint64_t v51 = v46;
                    while (1)
                    {
                      *(void **)((char *)v8 + v51 + 8) = *(void **)((char *)v8 + v51);
                      if (!v51) {
                        break;
                      }
                      uint64_t v52 = *(void **)((char *)v8 + v51 - 8);
                      NodeKey::NodeKey((uint64_t)v94, v50);
                      NodeKey::NodeKey((uint64_t)v93, v52);
                      BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                      v51 -= 8;
                      if ((result & 1) == 0)
                      {
                        uint64_t v53 = (void **)((char *)v8 + v51 + 8);
                        goto LABEL_76;
                      }
                    }
                    uint64_t v53 = v8;
LABEL_76:
                    *uint64_t v53 = v50;
                  }
                  uint64_t v43 = v47 + 1;
                  v46 += 8;
                }
                while (v47 + 1 != a2);
              }
            }
            else if (!v45)
            {
              do
              {
                uint64_t v84 = *v8;
                uint64_t v83 = v8[1];
                unint64_t v8 = v43;
                NodeKey::NodeKey((uint64_t)v94, v83);
                NodeKey::NodeKey((uint64_t)v93, v84);
                BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                if (result)
                {
                  uint64_t v85 = *v8;
                  uint64_t v86 = v8;
                  do
                  {
                    uint64_t v87 = v86;
                    uint64_t v88 = *--v86;
                    *uint64_t v87 = v88;
                    uint64_t v89 = *(v87 - 2);
                    NodeKey::NodeKey((uint64_t)v94, v85);
                    NodeKey::NodeKey((uint64_t)v93, v89);
                    BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                  }
                  while ((result & 1) != 0);
                  *uint64_t v86 = v85;
                }
                uint64_t v43 = v8 + 1;
              }
              while (v8 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v8 != v9)
            {
              unint64_t v90 = v12;
              int64_t v54 = (unint64_t)(v13 - 2) >> 1;
              int64_t v55 = v54;
              do
              {
                int64_t v56 = v55;
                if (v54 >= v55)
                {
                  uint64_t v57 = (2 * v55) | 1;
                  uint64_t v58 = &v8[v57];
                  if (2 * v55 + 2 < v13)
                  {
                    uint64_t v59 = v58[1];
                    NodeKey::NodeKey((uint64_t)v94, *v58);
                    NodeKey::NodeKey((uint64_t)v93, v59);
                    if (NodeKey::operator<(v94, (uint64_t)v93))
                    {
                      ++v58;
                      uint64_t v57 = 2 * v56 + 2;
                    }
                  }
                  uint64_t v60 = &v8[v56];
                  uint64_t v61 = *v60;
                  NodeKey::NodeKey((uint64_t)v94, *v58);
                  NodeKey::NodeKey((uint64_t)v93, v61);
                  BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                  if ((result & 1) == 0)
                  {
                    int64_t v91 = v56;
                    uint64_t v62 = *v60;
                    do
                    {
                      uint64_t v63 = v58;
                      *uint64_t v60 = *v58;
                      if (v54 < v57) {
                        break;
                      }
                      uint64_t v64 = (2 * v57) | 1;
                      uint64_t v58 = &v8[v64];
                      uint64_t v65 = 2 * v57 + 2;
                      if (v65 < v13)
                      {
                        uint64_t v66 = v58[1];
                        NodeKey::NodeKey((uint64_t)v94, *v58);
                        NodeKey::NodeKey((uint64_t)v93, v66);
                        if (NodeKey::operator<(v94, (uint64_t)v93))
                        {
                          ++v58;
                          uint64_t v64 = v65;
                        }
                      }
                      NodeKey::NodeKey((uint64_t)v94, *v58);
                      NodeKey::NodeKey((uint64_t)v93, v62);
                      BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                      uint64_t v60 = v63;
                      uint64_t v57 = v64;
                    }
                    while (!result);
                    void *v63 = v62;
                    int64_t v56 = v91;
                  }
                }
                int64_t v55 = v56 - 1;
              }
              while (v56);
              uint64_t v67 = v90 >> 3;
              do
              {
                uint64_t v68 = 0;
                uint64_t v69 = *v8;
                uint64_t v70 = v8;
                do
                {
                  uint64_t v71 = &v70[v68 + 1];
                  uint64_t v72 = (2 * v68) | 1;
                  uint64_t v73 = 2 * v68 + 2;
                  if (v73 < v67)
                  {
                    uint64_t v74 = v70[v68 + 2];
                    NodeKey::NodeKey((uint64_t)v94, *v71);
                    NodeKey::NodeKey((uint64_t)v93, v74);
                    BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                    if (result)
                    {
                      ++v71;
                      uint64_t v72 = v73;
                    }
                  }
                  *uint64_t v70 = *v71;
                  uint64_t v70 = v71;
                  uint64_t v68 = v72;
                }
                while (v72 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                unint64_t v75 = a2 - 1;
                BOOL v5 = v71 == --a2;
                if (v5)
                {
                  *uint64_t v71 = v69;
                }
                else
                {
                  *uint64_t v71 = *v75;
                  *unint64_t v75 = v69;
                  uint64_t v76 = (char *)v71 - (char *)v8 + 8;
                  if (v76 >= 9)
                  {
                    unint64_t v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
                    uint64_t v78 = &v8[v77];
                    uint64_t v79 = *v71;
                    NodeKey::NodeKey((uint64_t)v94, *v78);
                    NodeKey::NodeKey((uint64_t)v93, v79);
                    BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                    if (result)
                    {
                      uint64_t v80 = *v71;
                      do
                      {
                        uint64_t v81 = v78;
                        *uint64_t v71 = *v78;
                        if (!v77) {
                          break;
                        }
                        unint64_t v77 = (v77 - 1) >> 1;
                        uint64_t v78 = &v8[v77];
                        NodeKey::NodeKey((uint64_t)v94, *v78);
                        NodeKey::NodeKey((uint64_t)v93, v80);
                        BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
                        uint64_t v71 = v81;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v81 = v80;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = &v8[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v15, v8, v10);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v8, v15, v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v8 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v8 + 2, &v8[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v15 - 1, v15, &v8[v14 + 1]);
            char v16 = *v8;
            *unint64_t v8 = *v15;
            *uint64_t v15 = v16;
          }
          --a3;
          if (a4) {
            break;
          }
          unsigned int v17 = *v8;
          NodeKey::NodeKey((uint64_t)v94, *(v8 - 1));
          NodeKey::NodeKey((uint64_t)v93, v17);
          if (NodeKey::operator<(v94, (uint64_t)v93)) {
            break;
          }
          uint64_t v30 = *v8;
          BOOL v31 = *v10;
          NodeKey::NodeKey((uint64_t)v94, *v8);
          NodeKey::NodeKey((uint64_t)v93, v31);
          BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
          if (result)
          {
            uint64_t v11 = v8;
            do
            {
              uint64_t v32 = v11[1];
              ++v11;
              NodeKey::NodeKey((uint64_t)v94, v30);
              NodeKey::NodeKey((uint64_t)v93, v32);
              BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
            }
            while ((result & 1) == 0);
          }
          else
          {
            unsigned int v33 = v8 + 1;
            do
            {
              uint64_t v11 = v33;
              if (v33 >= v9) {
                break;
              }
              ++v33;
              uint64_t v34 = *v11;
              NodeKey::NodeKey((uint64_t)v94, v30);
              NodeKey::NodeKey((uint64_t)v93, v34);
              BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
            }
            while (!result);
          }
          uint64_t v35 = v9;
          if (v11 < v9)
          {
            uint64_t v35 = v9;
            do
            {
              int v36 = *--v35;
              NodeKey::NodeKey((uint64_t)v94, v30);
              NodeKey::NodeKey((uint64_t)v93, v36);
              BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v35)
          {
            uint64_t v37 = *v11;
            *uint64_t v11 = *v35;
            *uint64_t v35 = v37;
            do
            {
              uint64_t v38 = v11[1];
              ++v11;
              NodeKey::NodeKey((uint64_t)v94, v30);
              NodeKey::NodeKey((uint64_t)v93, v38);
            }
            while (!NodeKey::operator<(v94, (uint64_t)v93));
            do
            {
              uint64_t v39 = *--v35;
              NodeKey::NodeKey((uint64_t)v94, v30);
              NodeKey::NodeKey((uint64_t)v93, v39);
              BOOL result = NodeKey::operator<(v94, (uint64_t)v93);
            }
            while ((result & 1) != 0);
          }
          uint64_t v40 = v11 - 1;
          BOOL v4 = v11 - 1 >= v8;
          BOOL v5 = v11 - 1 == v8;
          if (v11 - 1 != v8) {
            *unint64_t v8 = *v40;
          }
          a4 = 0;
          *uint64_t v40 = v30;
        }
        uint64_t v18 = 0;
        unint64_t v19 = *v8;
        do
        {
          NodeKey::NodeKey((uint64_t)v94, v8[v18 + 1]);
          NodeKey::NodeKey((uint64_t)v93, v19);
          ++v18;
        }
        while (NodeKey::operator<(v94, (uint64_t)v93));
        uint64_t v20 = &v8[v18];
        if (v18 == 1)
        {
          unsigned int v9 = a2;
          do
          {
            if (v20 >= v9) {
              break;
            }
            unint64_t v22 = *--v9;
            NodeKey::NodeKey((uint64_t)v94, v22);
            NodeKey::NodeKey((uint64_t)v93, v19);
          }
          while (!NodeKey::operator<(v94, (uint64_t)v93));
        }
        else
        {
          do
          {
            unint64_t v21 = *--v9;
            NodeKey::NodeKey((uint64_t)v94, v21);
            NodeKey::NodeKey((uint64_t)v93, v19);
          }
          while (!NodeKey::operator<(v94, (uint64_t)v93));
        }
        if (v20 >= v9)
        {
          uint64_t v28 = v20 - 1;
        }
        else
        {
          __int16 v23 = &v8[v18];
          uint64_t v24 = v9;
          do
          {
            uint64_t v25 = *v23;
            *__int16 v23 = *v24;
            *uint64_t v24 = v25;
            do
            {
              uint64_t v26 = v23[1];
              ++v23;
              NodeKey::NodeKey((uint64_t)v94, v26);
              NodeKey::NodeKey((uint64_t)v93, v19);
            }
            while (NodeKey::operator<(v94, (uint64_t)v93));
            do
            {
              uint64_t v27 = *--v24;
              NodeKey::NodeKey((uint64_t)v94, v27);
              NodeKey::NodeKey((uint64_t)v93, v19);
            }
            while (!NodeKey::operator<(v94, (uint64_t)v93));
          }
          while (v23 < v24);
          uint64_t v28 = v23 - 1;
        }
        if (v28 != v8) {
          *unint64_t v8 = *v28;
        }
        *uint64_t v28 = v19;
        BOOL v4 = v20 >= v9;
        unsigned int v9 = a2;
        if (v4) {
          break;
        }
LABEL_34:
        BOOL result = std::__introsort<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,false>(v8, v28, a3, a4 & 1);
        a4 = 0;
        uint64_t v11 = v28 + 1;
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v8, v28);
      uint64_t v11 = v28 + 1;
      BOOL result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v28 + 1, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v28;
    if (!v29) {
      continue;
    }
    return result;
  }
}

BOOL NodeKey::operator<(int *a1, uint64_t a2)
{
  int v2 = *a1;
  if (*a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (v2 > *(_DWORD *)a2) {
    return 0;
  }
  BOOL result = 0;
  switch(v2)
  {
    case 1:
      unint64_t v5 = *((void *)a1 + 1);
      unint64_t v6 = *(void *)(a2 + 8);
      goto LABEL_11;
    case 3:
    case 6:
    case 7:
    case 8:
      unint64_t v5 = *((void *)a1 + 2);
      unint64_t v6 = *(void *)(a2 + 16);
      goto LABEL_11;
    case 4:
    case 5:
      unint64_t v7 = *((void *)a1 + 2);
      unint64_t v8 = *(void *)(a2 + 16);
      if (v7 < v8) {
        return 1;
      }
      if (v8 < v7) {
        return 0;
      }
      unint64_t v5 = *((void *)a1 + 3);
      unint64_t v6 = *(void *)(a2 + 24);
LABEL_11:
      BOOL result = v5 < v6;
      break;
    case 10:
      BOOL result = a1[8] < *(_DWORD *)(a2 + 32);
      break;
    default:
      return result;
  }
  return result;
}

char *std::__stable_partition_impl<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_2 &,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,long,std::pair<objc_object  {objcproto24MTLFunctionStitchingNode}*,long>>(int8x16_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v6 = a1;
  if (a3 == 3)
  {
    unsigned int v9 = &a1->i64[1];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v8 = v6->i64[0];
      v6->i64[0] = v6->i64[1];
      v6->i64[1] = v8;
      v6->i64[1] = *a2;
      goto LABEL_16;
    }
    uint64_t v10 = v6->i64[1];
    v6->i64[1] = *a2;
    *a2 = v10;
    *unint64_t v6 = vextq_s8(*v6, *v6, 8uLL);
  }
  else
  {
    if (a3 == 2)
    {
      uint64_t v8 = a1->i64[0];
      a1->i64[0] = *a2;
LABEL_16:
      *a2 = v8;
      return (char *)a2;
    }
    if (a5 >= a3)
    {
      unsigned int v9 = &a1->i64[1];
      *a4 = a1->i64[0];
      unint64_t v21 = a4 + 1;
      if (&a1->u64[1] == (unint64_t *)a2)
      {
        a1->i64[0] = *a2;
      }
      else
      {
        do
        {
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          uint64_t v23 = *v9;
          if (isKindOfClass)
          {
            *v21++ = v23;
          }
          else
          {
            v6->i64[0] = v23;
            unint64_t v6 = (int8x16_t *)((char *)v6 + 8);
          }
          ++v9;
        }
        while (v9 != a2);
        v6->i64[0] = *a2;
        unsigned int v9 = &v6->i64[1];
        if (v21 <= a4) {
          return (char *)v9;
        }
      }
      uint64_t v24 = 0;
      do
      {
        v9[v24] = a4[v24];
        ++v24;
      }
      while (&a4[v24] < v21);
      return (char *)v9;
    }
    if (a3 >= 0) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = a3 + 1;
    }
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = &a1->i8[8 * (v13 >> 1)];
    char v16 = v15 - 8;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v30 = v15;
      uint64_t v17 = 8 - 8 * v14;
      uint64_t v18 = v14;
      while (v17)
      {
        uint64_t v19 = v18 - 1;
        objc_opt_class();
        char v20 = objc_opt_isKindOfClass();
        v17 += 8;
        uint64_t v18 = v19;
        if ((v20 & 1) == 0)
        {
          char v16 = &v6->i8[-v17];
          uint64_t v15 = v30;
          goto LABEL_25;
        }
      }
      __srCC_SHA256_CTX c = (char *)v6;
      uint64_t v15 = v30;
    }
    else
    {
      uint64_t v19 = v14;
LABEL_25:
      __srCC_SHA256_CTX c = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_2 &,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,long,std::pair<objc_object  {objcproto24MTLFunctionStitchingNode}*,long>>(v6, v16, v19, a4, a5);
    }
    uint64_t v25 = a3 - v14;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v26 = v15;
LABEL_36:
      uint64_t v27 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_2 &,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,long,std::pair<objc_object  {objcproto24MTLFunctionStitchingNode}*,long>>(v26, a2, v25, a4, a5);
    }
    else
    {
      uint64_t v27 = (char *)(a2 + 1);
      uint64_t v26 = &v6->i8[8 * v14];
      uint64_t v28 = (uint64_t *)(v26 + 8);
      while (v28 != a2)
      {
        --v25;
        ++v28;
        objc_opt_class();
        v26 += 8;
        if (objc_opt_isKindOfClass()) {
          goto LABEL_36;
        }
      }
    }
    return std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,objc_object  {objcproto24MTLFunctionStitchingNode}**>(__src, v15, v27);
  }
  return (char *)v9;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)BOOL result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  unint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<objc_object  {objcproto24MTLFunctionStitchingNode}*>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    BOOL result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1827599C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>(v80 + 1024, (uint64_t)&STACK[0x408]);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a44 < 0) {
    operator delete(v79[1]);
  }
  if (a51 < 0) {
    operator delete(v79[5]);
  }
  if (a58 < 0) {
    operator delete(v79[9]);
  }
  if (a65 < 0) {
    operator delete(v79[13]);
  }
  if (a72 < 0) {
    operator delete(v79[17]);
  }
  if (a73 < 0) {
    operator delete(v79[21]);
  }
  if (a74 < 0) {
    operator delete(v79[25]);
  }
  if (a75 < 0) {
    operator delete(v79[29]);
  }
  if (a76 < 0) {
    operator delete(v79[33]);
  }
  if (a77 < 0) {
    operator delete(v79[37]);
  }
  if (a78 < 0) {
    operator delete(v79[41]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(v79[45]);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete(v79[49]);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete(v79[53]);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete(v79[57]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete(v79[61]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete(v79[65]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete(v79[69]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete(v79[73]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete(v79[77]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete(v79[81]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete(v79[85]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete(v79[89]);
  }
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete(v79[93]);
  }
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete(v79[97]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete(v79[101]);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete(v79[105]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete(v79[109]);
  }
  MEMORY[0x18530C140](v78, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_182759CD4()
{
}

void sub_182759CE0()
{
}

void sub_182759CF0()
{
}

void sub_182759CFC()
{
}

void sub_182759D0C()
{
}

void sub_182759D18()
{
}

void sub_182759D28()
{
}

void sub_182759D34()
{
}

void sub_182759D44()
{
}

void sub_182759D50()
{
}

void sub_182759D60()
{
}

void sub_182759D6C()
{
}

void sub_182759D7C()
{
}

void sub_182759D88()
{
}

void sub_182759D98()
{
}

void sub_182759DA4()
{
}

void sub_182759DB4()
{
}

void sub_182759DC0()
{
}

void sub_182759DD0()
{
}

void sub_182759DDC()
{
}

void sub_182759DE8()
{
}

void sub_182759DF8()
{
}

void sub_182759E08()
{
}

std::string *std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&this[1], a3);
  return this;
}

void sub_182759E70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  BOOL v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = a3 << 6;
    do
    {
      std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 8;
      v6 -= 64;
    }
    while (v6);
  }
  return a1;
}

void sub_182759EF4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__construct_node<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__construct_node<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL result = std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_182759FF8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_18275A06C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  long long v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t _MTLHashState(int *a1, unint64_t a2)
{
  unsigned int v2 = a2 ^ 0x123456;
  if (a2 >= 4)
  {
    do
    {
      int v3 = *a1++;
      unsigned int v2 = (1540483477 * ((1540483477 * v3) ^ ((1540483477 * v3) >> 24))) ^ (1540483477 * v2);
      a2 -= 4;
    }
    while (a2 > 3);
  }
  return (1540483477 * (v2 ^ (v2 >> 13))) ^ ((1540483477 * (v2 ^ (v2 >> 13))) >> 15);
}

uint64_t MTLGetOverridenDeviceCreationFlags(void *a1)
{
  uint64_t v1 = _are_device_creation_flags_overriden;
  if (a1 && _are_device_creation_flags_overriden) {
    *a1 = _overriden_device_creation_flags;
  }
  return v1;
}

void MTLRangeAllocatorDestroy(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    free(v1);
  }
}

void sub_18275AF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t MTLRangeAllocatorAllocateRange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = ((*(void *)(a1 + 32) + a3) & ~*(void *)(a1 + 32)) + a2;
    unint64_t v8 = v7 - 1;
    unint64_t v9 = a2 - 1;
    unsigned int v10 = 1;
    do
    {
      uint64_t v11 = *(void *)a1;
      uint64_t v12 = (unint64_t *)(*(void *)a1 + v6);
      if (*v12 > a2) {
        return 0;
      }
      unint64_t v13 = v12[1];
      if (v8 <= v13)
      {
        if (*v12 == a2)
        {
          char v16 = (unint64_t *)(v11 + v6);
          if (v8 == v13)
          {
            *(_DWORD *)(a1 + 8) = v4 - 1;
            memmove(v16, v16 + 2, 16 * (v4 - v10));
          }
          else
          {
            *char v16 = v7;
          }
          return 1;
        }
        if (v8 == v13)
        {
          *(void *)(v11 + v6 + 8) = v9;
          return 1;
        }
        if (allocElement(a1, v10))
        {
          uint64_t v17 = (void *)(*(void *)a1 + v6);
          v17[1] = v9;
          v17[2] = v7;
          v17[3] = v13;
          return 1;
        }
      }
      unsigned int v4 = *(_DWORD *)(a1 + 8);
      v6 += 16;
    }
    while (v10++ < v4);
  }
  return 0;
}

dispatch_data_t _MTLCreateTileRenderPipelineScriptFromDescriptor(MTLTileRenderPipelineDescriptor *a1)
{
  uint64_t v11 = 0;
  char v12 = 0;
  long long v13 = xmmword_1828D6640;
  long long v14 = 0u;
  *(_OWORD *)long long buffer = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 1;
  __int16 v18 = 256;
  uint64_t v19 = 0;
  _MTLCreateTileRenderPipelineScriptFromDescriptor((flatbuffers::FlatBufferBuilder *)&v11, a1);
  uint64_t v1 = buffer[0];
  size_t v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
  uint64_t v5 = v11;
  char v6 = v12;
  uint64_t v7 = *((void *)&v14 + 1);
  uint64_t v8 = v14;
  unint64_t v9 = buffer[0];
  size_t v10 = v2;
  if (v12)
  {
    uint64_t v11 = 0;
    char v12 = 0;
  }
  long long v14 = 0u;
  *(_OWORD *)long long buffer = 0u;
  dispatch_data_t v3 = dispatch_data_create(v1, v2, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_18275B514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t _MTLCreateTileRenderPipelineScriptFromDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLTileRenderPipelineDescriptor *a2)
{
  unsigned int v4 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLTileRenderPipelineDescriptor tileFunction](a2, "tileFunction"), "name"), "UTF8String");
  size_t v5 = strlen(v4);
  int String = flatbuffers::FlatBufferBuilder::CreateString(a1, v4, v5);
  int v7 = String;
  uint64_t v8 = a2 + 1;
  Class isa = a2[1].super.isa;
  if (!isa)
  {
    int v34 = 0;
    goto LABEL_44;
  }
  int v47 = String;
  uint64_t v10 = 0;
  __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  do
  {
    uint64_t v11 = (void *)*((void *)isa + v10 + 1);
    *((unsigned char *)a1 + 70) = 1;
    uint64_t v12 = *((void *)a1 + 5);
    uint64_t v13 = *((void *)a1 + 6);
    uint64_t v14 = *((void *)a1 + 4);
    if (v11)
    {
      int v15 = [v11 pixelFormat];
      if ((v15 - 1) >= 0x285) {
        unsigned __int16 v16 = 0;
      }
      else {
        unsigned __int16 v16 = v15;
      }
      flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 4, v16, 0);
      int v17 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
      __int16 v18 = v49;
      if (v49 < v50)
      {
LABEL_17:
        *(_DWORD *)__int16 v18 = v17;
        uint64_t v25 = v18 + 4;
        goto LABEL_36;
      }
      uint64_t v19 = (char *)__p;
      uint64_t v20 = (v49 - (unsigned char *)__p) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v50 - (unsigned char *)__p;
      if ((v50 - (unsigned char *)__p) >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v50, v23);
        uint64_t v19 = (char *)__p;
        __int16 v18 = v49;
      }
      else
      {
        uint64_t v24 = 0;
      }
      BOOL v29 = &v24[4 * v20];
      *(_DWORD *)BOOL v29 = v17;
      uint64_t v25 = v29 + 4;
      while (v18 != v19)
      {
        int v30 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v29 - 1) = v30;
        v29 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(a1, 4, 0, 0);
      int v17 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
      __int16 v18 = v49;
      if (v49 < v50) {
        goto LABEL_17;
      }
      uint64_t v19 = (char *)__p;
      uint64_t v26 = (v49 - (unsigned char *)__p) >> 2;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v50 - (unsigned char *)__p;
      if ((v50 - (unsigned char *)__p) >> 1 > v27) {
        unint64_t v27 = v28 >> 1;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v27;
      }
      if (v23)
      {
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v50, v23);
        uint64_t v19 = (char *)__p;
        __int16 v18 = v49;
      }
      else
      {
        uint64_t v24 = 0;
      }
      BOOL v29 = &v24[4 * v26];
      *(_DWORD *)BOOL v29 = v17;
      uint64_t v25 = v29 + 4;
      while (v18 != v19)
      {
        int v31 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v29 - 1) = v31;
        v29 -= 4;
      }
    }
    __p = v29;
    uint64_t v49 = v25;
    uint64_t v50 = &v24[4 * v23];
    if (v19) {
      operator delete(v19);
    }
LABEL_36:
    uint64_t v49 = v25;
    ++v10;
  }
  while (v10 != 8);
  if (v25 == __p) {
    uint64_t v32 = &flatbuffers::data<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>> const&)::t;
  }
  else {
    uint64_t v32 = __p;
  }
  int v33 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v32, (v25 - (unsigned char *)__p) >> 2);
  int v7 = v47;
  if (__p)
  {
    uint64_t v49 = (char *)__p;
    operator delete(__p);
  }
  int v34 = v33;
  uint64_t v8 = a2 + 1;
LABEL_44:
  int PipelineBufferDescriptorVector = createPipelineBufferDescriptorVector(a1, (const MTLPipelineBufferDescriptorArrayInternal *)v8[1]._maxCallStackDepth);
  BOOL v36 = 1;
  if (![(MTLTileRenderPipelineDescriptor *)a2 supportAddingBinaryFunctions]) {
    BOOL v36 = [(NSArray *)[(MTLLinkedFunctions *)[(MTLTileRenderPipelineDescriptor *)a2 linkedFunctions] binaryFunctions] count] != 0;
  }
  int LinkedFunctions = createLinkedFunctions(a1, [(MTLTileRenderPipelineDescriptor *)a2 linkedFunctions]);
  *((unsigned char *)a1 + 70) = 1;
  int v38 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 14, v34);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 10, [(MTLTileRenderPipelineDescriptor *)a2 rasterSampleCount], 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, [(MTLTileRenderPipelineDescriptor *)a2 threadgroupSizeMatchesTileSize], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, [(MTLTileRenderPipelineDescriptor *)a2 maxTotalThreadsPerThreadgroup], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 12, [(MTLTileRenderPipelineDescriptor *)a2 colorSampleCount], 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 20, [(MTLTileRenderPipelineDescriptor *)a2 textureWriteRoundingMode], 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 16, PipelineBufferDescriptorVector);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 22, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 18, v36, 0);
  int v39 = flatbuffers::FlatBufferBuilder::EndTable(a1, v38);
  *((unsigned char *)a1 + 70) = 1;
  int v40 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v7);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v39);
  int v41 = flatbuffers::FlatBufferBuilder::EndTable(a1, v40);
  __p = (void *)0x300000000;
  LODWORD(v49) = 0;
  *((unsigned char *)a1 + 70) = 1;
  int v42 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v41);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(a1, 4, (uint64_t *)&__p);
  unsigned int v43 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 3);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 8, v43);
  unsigned int v44 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 6, v44);
  int v45 = flatbuffers::FlatBufferBuilder::EndTable(a1, v42);
  flatbuffers::FlatBufferBuilder::Finish(a1, v45, "AIRP", 0);
  return *((void *)a1 + 6) + **((unsigned int **)a1 + 6);
}

void sub_18275BA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18275C368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a10);
  _Block_object_dispose((const void *)(v36 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t _MTLGetMaxAIRAndLanguageVersions(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  *a2 = 0;
  *a3 = 0;
  if ((result - 32023) <= 1)
  {
    *a2 = 131079;
    *a3 = 196610;
  }
  return result;
}

void sub_18275CCD0(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

MTLMetalScriptBuilder *std::unique_ptr<MTLMetalScriptBuilder>::reset[abi:ne180100](MTLMetalScriptBuilder **a1, MTLMetalScriptBuilder *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    MTLMetalScriptBuilder::~MTLMetalScriptBuilder(result);
    JUMPOUT(0x18530C140);
  }
  return result;
}

void MTLMetalScriptBuilder::MTLMetalScriptBuilder(MTLMetalScriptBuilder *this)
{
}

void MTLMetalScriptBuilderImpl::MTLMetalScriptBuilderImpl(MTLMetalScriptBuilderImpl *this)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((void *)this + 31) = 0;
  *((unsigned char *)this + 256) = 0;
  *((void *)this + 33) = 1024;
  *((void *)this + 34) = 8;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 1;
  *((_WORD *)this + 164) = 256;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 72) = 0;
  *(void *)this = dispatch_queue_create("mtlScriptSerializerQueue", 0);
}

BOOL _MTLUseAIRNTBinaryArchive(void *a1)
{
  if (_MTLUseAIRNTBinaryArchive::onceToken != -1) {
    dispatch_once(&_MTLUseAIRNTBinaryArchive::onceToken, &__block_literal_global_629);
  }
  if (_MTLUseAIRNTBinaryArchive::envVarSet == 1) {
    return _MTLUseAIRNTBinaryArchive::useAIRNTArchive != 0;
  }
  if (MTLGPUDebugEnabled()) {
    return 0;
  }
  return objc_msgSend((id)objc_msgSend(a1, "targetDeviceArchitecture"), "cpuType") - 16777235 < 3;
}

uint64_t MTLGPUDebugEnabled()
{
  return _gpuDebugEnabled;
}

uint64_t LoaderGlobalState::loadFile(LoaderGlobalState *this, NSURL *a2, NSError **a3, NSString *a4, uint64_t a5)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x3052000000;
  int v39 = __Block_byref_object_copy__8;
  int v40 = __Block_byref_object_dispose__8;
  uint64_t v41 = 0;
  uint64_t v32 = 0;
  int v33 = &v32;
  uint64_t v34 = 0x2020000000;
  char v35 = 0;
  if ([(NSURL *)a2 getFileSystemRepresentation:v42 maxLength:1024]
    && *((void *)this + 1)
    && !stat(v42, &v31))
  {
    if ((v31.st_mode & 0xF000) == 0x8000) {
      uint64_t v10 = &v31;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  blocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v24 = 3221225472;
  uint64_t v25 = ___ZN17LoaderGlobalState8loadFileEP5NSURLPP7NSErrorP8NSStringl_block_invoke;
  uint64_t v26 = &unk_1E5220FC0;
  BOOL v29 = this;
  int v30 = v10;
  unint64_t v27 = &v36;
  uint64_t v28 = &v32;
  if (v10) {
    dispatch_sync(*((dispatch_queue_t *)this + 1), &block);
  }
  uint64_t v11 = v37[5];
  if (!v11)
  {
    uint64_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithContentsOfURL:a2 options:1 error:a3];
    uint64_t v13 = v12;
    if (v12)
    {
      if ([v12 length])
      {
        uint64_t v14 = [[MTLLoadedFile alloc] initWithData:v13 parent:this];
        v37[5] = (uint64_t)v14;
      }
      else
      {
        if (a3)
        {
          int v15 = NSString;
          unsigned __int16 v16 = [(NSURL *)a2 path];
          uint64_t v17 = [v15 stringWithFormat:@"File at url %@ is empty.", v16, block, v24, v25, v26, v27, v28, v29, v30];
          uint64_t v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v17 forKey:*MEMORY[0x1E4F28568]];
          *a3 = (NSError *)(id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:a4 code:a5 userInfo:v18];
        }
      }
    }
    uint64_t v19 = v37;
    uint64_t v11 = v37[5];
    if (v10 && v11)
    {
      *((unsigned char *)v33 + 24) = 1;
      __darwin_ino64_t st_ino = v10->st_ino;
      uint64_t v21 = v19[5];
      *(_DWORD *)(v21 + 32) = v10->st_dev;
      *(void *)(v21 + 40) = st_ino;
      *(void *)(v19[5] + 24) = v10->st_mtimespec.tv_sec;
      *(unsigned char *)(v19[5] + 48) = 1;
      dispatch_sync(*((dispatch_queue_t *)this + 1), &block);
      uint64_t v11 = v37[5];
    }
  }
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  return v11;
}

void sub_18275D2A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

dispatch_data_t _MTLNSDataToDispatchData(void *a1, void *a2)
{
  uint64_t v4 = [a1 bytes];
  size_t v5 = (const void *)v4;
  if (a2)
  {
    size_t v6 = a2[1];
    size_t v5 = (const void *)(v4 + *a2);
  }
  else
  {
    size_t v6 = [a1 length];
  }
  destructor[0] = MEMORY[0x1E4F143A8];
  destructor[1] = 3221225472;
  destructor[2] = ___MTLNSDataToDispatchData_block_invoke;
  destructor[3] = &unk_1E521F9E8;
  destructor[4] = a1;
  dispatch_data_t v7 = dispatch_data_create(v5, v6, 0, destructor);
  if (v7) {
    id v8 = a1;
  }
  return v7;
}

uint64_t mapAirVersionToMachOSubType(int a1)
{
  if (a1 < 0x20000)
  {
    switch(a1)
    {
      case 65542:
        return 1;
      case 65544:
        return 2;
      case 65547:
        return 3;
      default:
        return 0;
    }
  }
  else
  {
    switch(a1)
    {
      case 131072:
        uint64_t result = 4;
        break;
      case 131073:
        uint64_t result = 5;
        break;
      case 131074:
        uint64_t result = 6;
        break;
      case 131075:
        uint64_t result = 7;
        break;
      case 131076:
        uint64_t result = 8;
        break;
      case 131077:
        uint64_t result = 9;
        break;
      case 131078:
        uint64_t result = 10;
        break;
      case 131079:
        uint64_t result = 11;
        break;
      default:
        return 0;
    }
  }
  return result;
}

void sub_18275DA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18275E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a66, 8);
  _Block_object_dispose(&a70, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a13);
  _Block_object_dispose(&STACK[0x240], 8);
  unint64_t v72 = STACK[0x270];
  STACK[0x270] = 0;
  if (v72) {
    MEMORY[0x18530C120](v72, 0x1000C800CE834B2);
  }
  _Block_object_dispose(&STACK[0x278], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose(&STACK[0x2B8], 8);
  _Block_object_dispose(&STACK[0x300], 8);
  _Block_object_dispose((const void *)(v70 - 248), 8);
  _Block_object_dispose((const void *)(v70 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_18275EB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  size_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    size_t v2 = a2;
    do
    {
      dispatch_data_t v3 = *(char **)v2;
      MTLHashKey::~MTLHashKey((MTLHashKey *)(v2 + 16));
      operator delete(v2);
      size_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  size_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    size_t v2 = a2;
    do
    {
      dispatch_data_t v3 = *(char **)v2;
      uint64_t v4 = (void **)(v2 + 24);
      std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      size_t v2 = v3;
    }
    while (v3);
  }
}

MTLPipelineCollection *std::unique_ptr<MTLPipelineCollection>::reset[abi:ne180100](MTLPipelineCollection **a1, MTLPipelineCollection *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MTLPipelineCollection::~MTLPipelineCollection(result);
    JUMPOUT(0x18530C140);
  }
  return result;
}

void MTLAirNTObject::~MTLAirNTObject(MTLAirNTObject *this)
{
  size_t v2 = *(void **)this;
  dispatch_data_t v3 = (void *)*((void *)this + 1);
  if (*(void **)this != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x18530C140](*v2, 0x1070C40E40EFFFALL);
      }
      ++v2;
    }
    while (v2 != v3);
    size_t v2 = *(void **)this;
  }
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void LoaderGlobalState::releaseFile(LoaderGlobalState *this, MTLLoadedFile *a2)
{
  if (a2->_isCached)
  {
    uint64_t v2 = *((void *)this + 1);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN17LoaderGlobalState11releaseFileEP13MTLLoadedFile_block_invoke;
    block[3] = &unk_1E521F9E8;
    void block[4] = a2;
    dispatch_sync(v2, block);
  }
  else
  {
  }
}

void sub_18275F524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilder::~MTLMetalScriptBuilder(MTLMetalScriptBuilder *this)
{
  uint64_t v1 = *(MTLMetalScriptBuilderImpl **)this;
  if (v1)
  {
    MTLMetalScriptBuilderImpl::~MTLMetalScriptBuilderImpl(v1);
    MEMORY[0x18530C140]();
  }
}

void MTLMetalScriptBuilderImpl::~MTLMetalScriptBuilderImpl(MTLMetalScriptBuilderImpl *this)
{
  MTLMetalScriptBuilderImpl::resetInternal(this, 1);
  if (*(void *)this) {
    dispatch_release(*(dispatch_object_t *)this);
  }
  uint64_t v2 = (void *)*((void *)this + 70);
  if (v2)
  {
    *((void *)this + 71) = v2;
    operator delete(v2);
  }
  dispatch_data_t v3 = (void *)*((void *)this + 67);
  if (v3)
  {
    *((void *)this + 68) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 64);
  if (v4)
  {
    *((void *)this + 65) = v4;
    operator delete(v4);
  }
  size_t v5 = (void *)*((void *)this + 61);
  if (v5)
  {
    *((void *)this + 62) = v5;
    operator delete(v5);
  }
  size_t v6 = (void *)*((void *)this + 58);
  if (v6)
  {
    *((void *)this + 59) = v6;
    operator delete(v6);
  }
  dispatch_data_t v7 = (void *)*((void *)this + 55);
  if (v7)
  {
    *((void *)this + 56) = v7;
    operator delete(v7);
  }
  id v8 = (void *)*((void *)this + 52);
  if (v8)
  {
    *((void *)this + 53) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 49);
  if (v9)
  {
    *((void *)this + 50) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 46);
  if (v10)
  {
    *((void *)this + 47) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 43);
  if (v11)
  {
    *((void *)this + 44) = v11;
    operator delete(v11);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((MTLMetalScriptBuilderImpl *)((char *)this + 248));
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      dispatch_data_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      dispatch_data_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<MTLUINT256_t const,std::pair<std::string,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void MTLMetalScriptBuilderImpl::resetInternal(MTLMetalScriptBuilderImpl *this, int a2)
{
  *((void *)this + 53) = *((void *)this + 52);
  *((void *)this + 56) = *((void *)this + 55);
  *((void *)this + 71) = *((void *)this + 70);
  *((void *)this + 59) = *((void *)this + 58);
  *((void *)this + 50) = *((void *)this + 49);
  *((void *)this + 47) = *((void *)this + 46);
  *((void *)this + 44) = *((void *)this + 43);
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear((uint64_t)this + 48);
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::clear((uint64_t)this + 88);
  }
  std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::clear((uint64_t)this + 128);
  for (uint64_t i = (uint64_t **)*((void *)this + 3); i; uint64_t i = (uint64_t **)*i)
  {
    dispatch_release((dispatch_object_t)*i[2]);
    free(i[2]);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear((void *)this + 1);
  std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::clear((uint64_t)this + 168);

  std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::clear((uint64_t)this + 208);
}

void std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<textureTypeMap(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1827602DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a52 < 0) {
    operator delete(v80[3]);
  }
  if (a58 < 0) {
    operator delete(v80[6]);
  }
  if (a64 < 0) {
    operator delete(v80[9]);
  }
  if (a70 < 0) {
    operator delete(v80[12]);
  }
  if (a72 < 0) {
    operator delete(v80[15]);
  }
  if (a73 < 0) {
    operator delete(v80[18]);
  }
  if (a74 < 0) {
    operator delete(v80[21]);
  }
  if (a75 < 0) {
    operator delete(v80[24]);
  }
  if (a76 < 0) {
    operator delete(v80[27]);
  }
  if (a77 < 0) {
    operator delete(v80[30]);
  }
  for (; v79 != &a78; v79 -= 32)
  {
    if (*(v79 - 9) < 0) {
      operator delete(*((void **)v79 - 4));
    }
  }
  MEMORY[0x18530C140](v78, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_182760550()
{
}

void sub_18276055C()
{
}

uint64_t std::map<std::string,TextureTokenData>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TextureTokenData> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1827605CC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TextureTokenData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__construct_node<std::pair<std::string const,TextureTokenData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__construct_node<std::pair<std::string const,TextureTokenData> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1827606F4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void ___ZN23MTLPipelineDescriptionsD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 200);
  uint64_t v3 = *(void *)(v1 + 208);
  while (v2 != v3)
  {

    v2 += 32;
  }
}

uint64_t getCompileStatsJSONPath(void)
{
  if (os_variant_has_internal_diagnostics() && getCompileStatsJSONPath(void)::onceToken != -1) {
    dispatch_once(&getCompileStatsJSONPath(void)::onceToken, &__block_literal_global_2148);
  }
  return getCompileStatsJSONPath(void)::compileStatsPath;
}

void ___ZL24MTLDeviceArrayInitializev_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x18530C9F0]();
  _deviceArrayQueue = (uint64_t)dispatch_queue_create("com.Metal.DeviceArray", 0);
  _deviceArray = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
}

uint64_t ___Z23logCompileTimeStatsModev_block_invoke()
{
  uint64_t v0 = getenv("MTL_LOG_COMPILE_STATS");
  if (!v0) {
    uint64_t v0 = "0";
  }
  uint64_t result = strtol(v0, 0, 0);
  logCompileTimeStatsMode(void)::shouldLogStats = result;
  if ((int)result >= 1) {
    _collectCompilePerformanceStats = 1;
  }
  return result;
}

uint64_t ___Z22_MTLDebugShouldLogKeysv_block_invoke()
{
  uint64_t result = _MTLIsInternalBuild();
  if (result)
  {
    uint64_t v1 = getenv("MTL_DEBUG_LOG_FUNCTIONID_KEYS");
    if (!v1) {
      uint64_t v1 = "0";
    }
    uint64_t result = strtol(v1, 0, 0);
    BOOL v2 = result != 0;
  }
  else
  {
    BOOL v2 = 0;
  }
  _MTLDebugShouldLogKeys(void)::shouldLogHashKeys = v2;
  return result;
}

uint64_t ___ZN19FunctionHashFactory17shouldLogHashKeysEv_block_invoke()
{
  uint64_t result = _MTLIsInternalBuild();
  if (result)
  {
    uint64_t v1 = getenv("MTL_DEBUG_LOG_CACHE_KEYS");
    if (!v1) {
      uint64_t v1 = "0";
    }
    uint64_t result = strtol(v1, 0, 0);
    BOOL v2 = result != 0;
  }
  else
  {
    BOOL v2 = 0;
  }
  FunctionHashFactory::shouldLogHashKeys(void)::shouldLogHashKeys = v2;
  return result;
}

void ___ZN17LoaderGlobalState11releaseFileEP13MTLLoadedFile_block_invoke(uint64_t a1)
{
}

void ___ZL21_MTLGetLibrariesCacheP10_MTLDevice_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  _MTLGetMTLCompilerLLVMVersionForDevice(*(void **)(a1 + 32));
  if (MEMORY[0x1E4F62BE8])
  {
    uint64_t v1 = (const char *)MTLGPUCompilerTimeStamp();
    if (!v1)
    {
      *(_OWORD *)md = 0u;
      long long v7 = 0u;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v1 = " ";
  }
  __s = 0;
  asprintf(&__s, "%s, %s", v1, "Nov 10 2024 03:43:09");
  BOOL v2 = __s;
  CC_LONG v3 = strlen(__s);
  *(_OWORD *)md = 0u;
  long long v7 = 0u;
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, v2, v3);
  CC_SHA256_Final(md, &c);
  free(__s);
LABEL_6:
  operator new();
}

void sub_182761694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  MEMORY[0x18530C140](v17, 0x1020C40EED5FAE2);
  _Unwind_Resume(a1);
}

void MTLLibraryCache::MTLLibraryCache(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  MTLCompilerCache::createFSCache();
}

void sub_182761738(_Unwind_Exception *a1)
{
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t getCompilerConnectionManager(void *a1, uint64_t a2)
{
  if (a1)
  {
    return [a1 getCompilerConnectionManager:a2];
  }
  else
  {
    if (a2 == 32024)
    {
      if (getCompilerConnectionHost(int)::onceToken != -1) {
        dispatch_once(&getCompilerConnectionHost(int)::onceToken, &__block_literal_global_1838);
      }
      CC_LONG v3 = &getCompilerConnectionHost(int)::gCompilerConnection;
    }
    else
    {
      if (a2 != 32023) {
        abort();
      }
      if (getCompilerConnectionHost(int)::onceToken != -1) {
        dispatch_once(&getCompilerConnectionHost(int)::onceToken, &__block_literal_global_1836);
      }
      CC_LONG v3 = &getCompilerConnectionHost(int)::gCompilerConnection;
    }
    return *v3;
  }
}

uint64_t MTLCompilerConnectionManagerPrivate::registerCompilerPlugin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = -1;
  CC_LONG v3 = *(NSObject **)(a1 + 24);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  _OWORD v6[2] = ___ZN35MTLCompilerConnectionManagerPrivate22registerCompilerPluginEPKcPU27objcproto16OS_dispatch_data8NSObject_block_invoke;
  _OWORD v6[3] = &unk_1E5220720;
  v6[6] = a1;
  v6[7] = a2;
  _OWORD v6[4] = a3;
  v6[5] = &v7;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void addOrRemoveShaderFunctionCache(int a1@<W1>, void *a2@<X8>)
{
  uint64_t v3 = addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache;
  if (!a1)
  {
    if (addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache)
    {
      uint64_t v6 = *(std::__shared_weak_count **)(addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache
                                        + 8);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      MEMORY[0x18530C140](v3, 0x20C40A4A59CD2);
    }
    operator new();
  }
  if (addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache)
  {
    (*(void (**)(void))(**(void **)addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache
                      + 24))();
    uint64_t v4 = addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache;
    if (addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache
                                        + 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      MEMORY[0x18530C140](v4, 0x20C40A4A59CD2);
    }
    addOrRemoveShaderFunctionCache(objc_object  {objcproto12MTLDeviceSPI}*,MTLUINT256_t,BOOL)::cache = 0;
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_182761C7C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void MTLCompilerCache::createFSCache()
{
}

void sub_182761D00(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10B3C403FEBB32CLL);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerFSCache::MTLCompilerFSCache(uint64_t a1, uint64_t a2, char *__s, long long *a4)
{
  *(void *)a1 = &unk_1ECAC5A10;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v7 = a1 + 56;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 80), __s);
  long long v8 = *a4;
  *(_OWORD *)(a1 + 120) = a4[1];
  *(_OWORD *)(a1 + 104) = v8;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (a2) {
    MEMORY[0x18530BF30](v7, a2);
  }
  *(_DWORD *)(a1 + 20) = 0x40000000;
  unsigned int v9 = MTLGetEnvDefault("MTL_SHADER_CACHE_SIZE", 0x40000000);
  *(_DWORD *)(a1 + 20) = v9;
  unsigned int v10 = MTLGetEnvDefault("FS_CACHE_SIZE", v9);
  *(_DWORD *)(a1 + 20) = v10;
  if (v10 < 0x40000001)
  {
    if (v10) {
      *(unsigned char *)(a1 + 24) = 0;
    }
    else {
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 20) = 0x40000000;
  }
  return a1;
}

void sub_182761E24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<MTLCompilerCache>::shared_ptr[abi:ne180100]<MTLCompilerCache,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_182761EC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<MTLCompilerCache>::shared_ptr[abi:ne180100]<MTLCompilerCache,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL reuseCacheOnReboot(void)
{
  int v0 = gReuseCacheOnReboot;
  if (!reuseCacheOnRebootInitialised)
  {
    int v0 = MTLGetEnvDefault("FS_CACHE_REUSE_ON_REBOOT", gReuseCacheOnReboot) != 0;
    gReuseCacheOnReboot = v0;
    reuseCacheOnRebootInitialised = 1;
  }
  return v0 != 0;
}

void MTLPipelineDescriptions::~MTLPipelineDescriptions(MTLPipelineDescriptions *this)
{
  BOOL v2 = *(void **)this;
  if (v2) {
    munmap(v2, *((void *)this + 1));
  }
  uint64_t v3 = *((void *)this + 2);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZN23MTLPipelineDescriptionsD2Ev_block_invoke;
  v5[3] = &__block_descriptor_40_e5_v8__0l;
  v5[4] = this;
  dispatch_sync(v3, v5);
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v6 = (void **)((char *)this + 200);
  std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 160);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 72);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 32);
}

void std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t ___ZL26getMaxSupportedLLVMVersionb_block_invoke(uint64_t a1)
{
  uint64_t result = dlopen_preflight("/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32023/MTLCompiler");
  if ((result & 1) != 0
    || (uint64_t result = stat("/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32023/MTLCompiler", &v5),
        !result))
  {
    int v3 = getMaxSupportedLLVMVersion(BOOL)::llvmVersion;
    if (getMaxSupportedLLVMVersion(BOOL)::llvmVersion <= 32023) {
      int v3 = 32023;
    }
    getMaxSupportedLLVMVersion(BOOL)::llvmVersion = v3;
  }
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t result = dlopen_preflight("/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32024/MTLCompiler");
    if ((result & 1) != 0
      || (uint64_t result = stat("/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32024/MTLCompiler", &v5),
          !result))
    {
      int v4 = getMaxSupportedLLVMVersion(BOOL)::llvmVersion;
      if (getMaxSupportedLLVMVersion(BOOL)::llvmVersion <= 32024) {
        int v4 = 32024;
      }
      getMaxSupportedLLVMVersion(BOOL)::llvmVersion = v4;
    }
  }
  return result;
}

uint64_t MTLLibraryDataWithArchive::externFunctionNames(os_unfair_lock_s *this)
{
  return *(void *)&this[62]._os_unfair_lock_opaque;
}

void sub_182762568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZNK23MTLPipelineDescriptions17getLibraryByIndexEj_block_invoke(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 40) + 24))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = [NSString alloc];
    int v4 = *(uint64_t **)(a1 + 40);
    if (*((char *)v4 + 23) < 0) {
      int v4 = (uint64_t *)*v4;
    }
    stat v5 = (void *)[v3 initWithUTF8String:v4];
    id v12 = 0;
    uint64_t v6 = [*(id *)(v2 + 224) newLibraryWithFile:v5 error:&v12];
    *(void *)(*(void *)(a1 + 40) + 24) = v6;

    if (!v6)
    {
      uint64_t v7 = [v12 description];
      MTLReportFailure(0, "getLibraryByIndex_block_invoke", 291, @"Error: %@", v8, v9, v10, v11, v7);
    }
  }
}

uint64_t MTLProgressBinsSelectSubstreamWithBufferWriteSize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 40);
  if (v2 < 2)
  {
    unsigned __int16 v4 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    unsigned __int16 v4 = 0;
    float v5 = *(float *)(a1 + 24);
    unint64_t v6 = v2 - 1;
    do
    {
      float v7 = *(float *)(a1 + 28 + 4 * v3++);
      if (v7 < v5)
      {
        unsigned __int16 v4 = v3;
        float v5 = v7;
      }
    }
    while (v6 != v3);
  }
  float v8 = *(float *)a1 + (float)(*(float *)(a1 + 4) * (float)a2);
  *(_WORD *)(a1 + 42) = v4;
  *(float *)(a1 + 44) = v8;
  return v4;
}

unsigned char *__isMemoryLessStorageDisabled_block_invoke()
{
  uint64_t result = (unsigned char *)_MTLIsInternalBuild();
  if (result)
  {
    uint64_t result = getenv("MTL_DISABLE_MEMORYLESS_STORAGE_MODE");
    if (result)
    {
      if (*result == 49) {
        isMemoryLessStorageDisabled_uint64_t result = 1;
      }
    }
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice getCompilerConnectionManager:]::$_3 &&>>()
{
}

void MTLCreateCompilerConnectionManager()
{
}

void sub_1827629B4(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A1C403E9A69ECLL);
  _Unwind_Resume(a1);
}

void MTLCompilerConnectionManagerPrivate::MTLCompilerConnectionManagerPrivate(MTLCompilerConnectionManagerPrivate *this, int a2)
{
  int v17 = a2;
  *((_DWORD *)this + 2) = a2;
  *(void *)this = &unk_1ECAC6900;
  bzero((char *)this + 32, 0x818uLL);
  *((_DWORD *)this + 4) = 2;
  *((unsigned char *)this + 12) = 0;
  if (_MTLIsInternalBuild())
  {
    unsigned __int16 v4 = getenv("MTL_MONOLITHIC_COMPILER");
    if (v4)
    {
      BOOL v5 = *v4 == 49;
      *((unsigned char *)this + 12) = v5;
      if (v5) {
        goto LABEL_11;
      }
    }
    else
    {
      *((unsigned char *)this + 12) = 0;
    }
    unint64_t v6 = getenv("USE_MONOLITHIC_COMPILER");
    if (v6) {
      BOOL v7 = *v6 == 49;
    }
    else {
      BOOL v7 = 0;
    }
    *((unsigned char *)this + 12) = v7;
  }
LABEL_11:
  float v8 = getenv("MTL_MONOLITHIC_COMPILER_LLVM_VERSION");
  if (v8 && atoi(v8) != a2)
  {
    *((unsigned char *)this + 12) = 0;
  }
  else if (*((unsigned char *)this + 12))
  {
    std::allocate_shared[abi:ne180100]<MonolithicCompilerConnection,std::allocator<MonolithicCompilerConnection>,int &,void>(&v17, (uint64_t *)&v16);
    long long v9 = v16;
    long long v16 = 0uLL;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 8);
    *(_OWORD *)((char *)this + 56) = v9;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      if (*((void *)&v16 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
      }
    }
    *((_DWORD *)this + 4) = 1;
    goto LABEL_29;
  }
  *((_DWORD *)this + 4) = 2;
  if (_MTLIsInternalBuild())
  {
    int v11 = (*(uint64_t (**)(MTLCompilerConnectionManagerPrivate *))(*(void *)this + 40))(this);
    *((_DWORD *)this + 4) = v11;
  }
  else
  {
    int v11 = *((_DWORD *)this + 4);
  }
  if (v11 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = this;
    do
    {
      int v14 = (std::__shared_weak_count *)*((void *)v13 + 8);
      *((void *)v13 + 7) = 0;
      *((void *)v13 + 8) = 0;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      int v15 = (std::__shared_weak_count *)*((void *)v13 + 136);
      *(_OWORD *)((char *)v13 + 1080) = 0u;
      if (v15) {
        std::__shared_weak_count::__release_weak(v15);
      }
      ++v12;
      uint64_t v13 = (MTLCompilerConnectionManagerPrivate *)((char *)v13 + 16);
    }
    while (v12 < *((int *)this + 4));
  }
LABEL_29:
  *((void *)this + 3) = dispatch_queue_create("CompilerConnectionSerialQueue", 0);
}

void sub_182762BB8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = 2096;
  while (1)
  {
    BOOL v5 = *(std::__shared_weak_count **)(v1 + v4);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 -= 16;
    if (v4 == 1072)
    {
      while (1)
      {
        unint64_t v6 = *(std::__shared_weak_count **)(v1 + v4);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
        if (v4 == 48)
        {
          BOOL v7 = *v2;
          if (*v2)
          {
            *(void *)(v1 + 40) = v7;
            operator delete(v7);
          }
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void ___Z29_MTLDebugIgnoreFailOnMissFlagv_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (_MTLIsInternalBuild())
  {
    uint64_t v0 = MTLGetEnvDefault("MTL_DEBUG_IGNORE_PSO_FAIL_ON_MISS", 0);
    _MTLDebugIgnoreFailOnMissFlag(void)::ignoreFailOnMiss = v0 != 0;
    if (v0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v1 = 136315138;
        unint64_t v2 = "MTL_DEBUG_IGNORE_PSO_FAIL_ON_MISS";
        _os_log_impl(&dword_1826F6000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s was set, ignoring MTLPipelineOptionFailOnBinaryArchiveMiss and MTLPipelineLibrary.disableRunTimeCompilation", (uint8_t *)&v1, 0xCu);
      }
    }
  }
  else
  {
    _MTLDebugIgnoreFailOnMissFlag(void)::ignoreFailOnMiss = 0;
  }
}

void *MTLTextureUsageString(uint64_t a1)
{
  unint64_t v2 = (void *)[MEMORY[0x1E4F28E78] string];
  uint64_t v3 = v2;
  if (!a1)
  {
    [v2 appendString:@"MTLTextureUsageUnknown"];
    return v3;
  }
  BOOL v4 = (a1 & 1) == 0;
  if (a1) {
    [v2 appendFormat:@"%s%@", "", @"MTLTextureUsageShaderRead"];
  }
  if ((a1 & 2) != 0)
  {
    if (a1) {
      BOOL v5 = " ";
    }
    else {
      BOOL v5 = "";
    }
    [v3 appendFormat:@"%s%@", v5, @"MTLTextureUsageShaderWrite"];
    BOOL v4 = 0;
    if ((a1 & 4) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0) {
        goto LABEL_7;
      }
      goto LABEL_19;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_6;
  }
  if (v4) {
    unint64_t v6 = "";
  }
  else {
    unint64_t v6 = " ";
  }
  [v3 appendFormat:@"%s%@", v6, @"MTLTextureUsageRenderTarget"];
  BOOL v4 = 0;
  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_19:
  if (v4) {
    BOOL v7 = "";
  }
  else {
    BOOL v7 = " ";
  }
  [v3 appendFormat:@"%s%@", v7, @"MTLTextureUsagePixelFormatView"];
  BOOL v4 = 0;
  if ((a1 & 0x4000) == 0)
  {
LABEL_8:
    if ((a1 & 0x10000) == 0) {
      return v3;
    }
    goto LABEL_27;
  }
LABEL_23:
  if (v4) {
    float v8 = "";
  }
  else {
    float v8 = " ";
  }
  [v3 appendFormat:@"%s%@", v8, @"MTLTextureUsageNoConcurrentAccess"];
  BOOL v4 = 0;
  if ((a1 & 0x10000) != 0)
  {
LABEL_27:
    if (v4) {
      long long v9 = "";
    }
    else {
      long long v9 = " ";
    }
    [v3 appendFormat:@"%s%@", v9, @"MTLTextureUsageBlockWritesOnly"];
  }
  return v3;
}

__CFString *_MTLLibraryTypeString(uint64_t a1)
{
  int v1 = @"MTLLibraryTypeDynamic";
  if (a1 != 1) {
    int v1 = 0;
  }
  if (a1) {
    return v1;
  }
  else {
    return @"MTLLibraryTypeExecutable";
  }
}

uint64_t MTLGetShaderCachePath()
{
  if (MTLGetShaderCachePath::onceToken != -1) {
    dispatch_once(&MTLGetShaderCachePath::onceToken, &__block_literal_global_4);
  }
  return MTLGetShaderCachePath::result;
}

void createStitchingScriptHash(MTLStitchedLibraryDescriptor *a1@<X0>, StitchingScript *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  __p[0] = 0;
  __p[1] = 0;
  int v33 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  BOOL v4 = [(MTLStitchedLibraryDescriptor *)a1 functions];
  uint64_t v5 = [(NSArray *)v4 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v29 != v6) {
          objc_enumerationMutation(v4);
        }
        float v8 = (_OWORD *)[*(id *)(*((void *)&v28 + 1) + 8 * i) bitCodeHash];
        long long v9 = v8;
        uint64_t v10 = (char *)__p[1];
        if (__p[1] >= v33)
        {
          uint64_t v13 = (char *)__p[0];
          int64_t v14 = ((char *)__p[1] - (char *)__p[0]) >> 5;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 59) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v33 - (char *)__p[0];
          if ((v33 - (char *)__p[0]) >> 4 > v15) {
            unint64_t v15 = v16 >> 4;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v33, v17);
            uint64_t v13 = (char *)__p[0];
            uint64_t v10 = (char *)__p[1];
          }
          else
          {
            uint64_t v18 = 0;
          }
          long long v19 = v9[1];
          uint64_t v20 = &v18[32 * v14];
          *(_OWORD *)uint64_t v20 = *v9;
          *((_OWORD *)v20 + 1) = v19;
          if (v10 == v13)
          {
            unint64_t v23 = &v18[32 * v14];
          }
          else
          {
            uint64_t v21 = &v18[32 * v14];
            do
            {
              long long v22 = *((_OWORD *)v10 - 1);
              unint64_t v23 = v21 - 32;
              *((_OWORD *)v21 - 2) = *((_OWORD *)v10 - 2);
              *((_OWORD *)v21 - 1) = v22;
              v10 -= 32;
              v21 -= 32;
            }
            while (v10 != v13);
          }
          uint64_t v12 = v20 + 32;
          __p[0] = v23;
          __p[1] = v20 + 32;
          int v33 = &v18[32 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          long long v11 = v8[1];
          *(_OWORD *)__p[1] = *v8;
          *((_OWORD *)v10 + 1) = v11;
          uint64_t v12 = v10 + 32;
        }
        __p[1] = v12;
      }
      uint64_t v5 = [(NSArray *)v4 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }
    while (v5);
  }
  uint64_t v24 = __p[0];
  long long v26 = *(_OWORD *)__p;
  unint64_t v27 = v33;
  __p[1] = 0;
  int v33 = 0;
  __p[0] = 0;
  createStitchingScriptHashImpl((uint64_t)&v26, (int *)a2, a3);
  if (v24) {
    operator delete(v24);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_182763888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSUInteger _MTLCreateStitchingScriptFromStichedLibraryDescriptor@<X0>(MTLStitchedLibraryDescriptor *a1@<X0>, void *a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  NSUInteger v12 = [(NSArray *)[(MTLStitchedLibraryDescriptor *)a1 functionGraphs] count];
  std::allocate_shared[abi:ne180100]<std::vector<stitchedAirDescriptor>,std::allocator<std::vector<stitchedAirDescriptor>>,unsigned long,void>(&v12, a2);
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  long long v11 = xmmword_1828D6640;
  while (1)
  {
    NSUInteger result = [(NSArray *)[(MTLStitchedLibraryDescriptor *)a1 functionGraphs] count];
    if (v5 >= result) {
      break;
    }
    NSUInteger v12 = 0;
    char v13 = 0;
    long long v14 = v11;
    long long v15 = 0u;
    long long buffer = 0u;
    uint64_t v17 = 0;
    uint64_t v18 = 1;
    __int16 v19 = 256;
    uint64_t v20 = 0;
    BOOL v7 = (StitchingScript *)_MTLCreateStitchingScriptFromStichedLibraryDescriptor((flatbuffers::FlatBufferBuilder *)&v12, a1, v5);
    createStitchingScriptHash(a1, v7, &v21);
    uint64_t v8 = *(void *)*a2 + v4;
    *(_OWORD *)(v8 + 8) = v21;
    *(_OWORD *)(v8 + 24) = v22;
    long long v9 = (const void *)buffer;
    size_t v10 = (v15 + DWORD2(v15) - buffer);
    *(void *)&long long v21 = v12;
    BYTE8(v21) = v13;
    *(void *)&long long v22 = *((void *)&v15 + 1);
    *((void *)&v22 + 1) = v15;
    uint64_t v23 = buffer;
    size_t v24 = v10;
    if (v13)
    {
      NSUInteger v12 = 0;
      char v13 = 0;
    }
    long long v15 = 0u;
    long long buffer = 0u;
    *(void *)(*(void *)*a2 + v4) = dispatch_data_create(v9, v10, 0, 0);
    flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v21);
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v12);
    ++v5;
    v4 += 40;
  }
  return result;
}

void sub_182763A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void *std::allocate_shared[abi:ne180100]<std::vector<stitchedAirDescriptor>,std::allocator<std::vector<stitchedAirDescriptor>>,unsigned long,void>@<X0>(unint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  NSUInteger result = std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::__shared_ptr_emplace[abi:ne180100]<unsigned long,std::allocator<std::vector<stitchedAirDescriptor>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_182763AD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::__shared_ptr_emplace[abi:ne180100]<unsigned long,std::allocator<std::vector<stitchedAirDescriptor>>,0>(void *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1ECAC48B8;
  std::vector<stitchedAirDescriptor>::vector(a1 + 3, *a2);
  return a1;
}

void sub_182763B38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<stitchedAirDescriptor>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_182763BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  NSUInteger result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t validateMTLStitchedLibraryDescriptor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ([a1 functionGraphs])
      {
        [a1 functionGraphs];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if (objc_msgSend((id)objc_msgSend(a1, "functionGraphs"), "count"))
          {
            if ([a1 functions])
            {
              [a1 functions];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                if (objc_msgSend((id)objc_msgSend(a1, "functions"), "count"))
                {
                  if (objc_msgSend((id)objc_msgSend(a1, "functions"), "count"))
                  {
                    uint64_t v10 = 0;
                    while (1)
                    {
                      objc_msgSend((id)objc_msgSend(a1, "functions"), "objectAtIndexedSubscript:", v10);
                      if (![(id)objc_opt_class() conformsToProtocol:&unk_1ECB34AB8]) {
                        break;
                      }
                      if (++v10 >= (unint64_t)objc_msgSend((id)objc_msgSend(a1, "functions"), "count")) {
                        goto LABEL_13;
                      }
                    }
                    _MTLMessageContextPush_(a2, 8, @"descriptor.functions[%lu] does not conform to MTLFunction.", v11, v12, v13, v14, v15, v10);
                    return 0;
                  }
LABEL_13:
                  if (![a1 isMemberOfClass:objc_opt_class()]) {
                    return 1;
                  }
                  if ([a1 binaryArchives])
                  {
                    [a1 binaryArchives];
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      if (objc_msgSend((id)objc_msgSend(a1, "binaryArchives"), "count"))
                      {
                        unint64_t v16 = 0;
                        while (1)
                        {
                          objc_msgSend((id)objc_msgSend(a1, "binaryArchives"), "objectAtIndexedSubscript:", v16);
                          if (![(id)objc_opt_class() conformsToProtocol:&unk_1ECB21D40]) {
                            break;
                          }
                          ++v16;
                          unint64_t v17 = objc_msgSend((id)objc_msgSend(a1, "binaryArchives"), "count");
                          uint64_t result = 1;
                          if (v16 >= v17) {
                            return result;
                          }
                        }
                        uint64_t v20 = v16;
                        __int16 v19 = @"descriptor.binaryArchives[%lu] does not conform to MTLBinaryArchive.";
                        goto LABEL_34;
                      }
                      return 1;
                    }
                    __int16 v19 = @"descriptor.binaryArchives is not an NSArray.";
                  }
                  else
                  {
                    __int16 v19 = @"descriptor.binaryArchives cannot be nil.";
                  }
                }
                else
                {
                  __int16 v19 = @"descriptor.functions cannot be empty.";
                }
              }
              else
              {
                __int16 v19 = @"descriptor.functions is not an NSArray.";
              }
            }
            else
            {
              __int16 v19 = @"descriptor.functions cannot be nil.";
            }
          }
          else
          {
            __int16 v19 = @"descriptor.functionGraphs cannot be empty.";
          }
        }
        else
        {
          __int16 v19 = @"descriptor.functionGraphs is not an NSArray.";
        }
      }
      else
      {
        __int16 v19 = @"descriptor.functionGraphs cannot be nil.";
      }
    }
    else
    {
      __int16 v19 = @"descriptor is not a MTLStitchedLibraryDescriptor.";
    }
  }
  else
  {
    __int16 v19 = @"descriptor cannot be nil.";
  }
LABEL_34:
  _MTLMessageContextPush_(a2, 8, (uint64_t)v19, a4, a5, a6, a7, a8, v20);
  return 0;
}

uint64_t _MTLCreateStitchingScriptFromStichedLibraryDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLStitchedLibraryDescriptor *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  LODWORD(v13) = 0;
  int FunctionArray = createFunctionArray(a1, [(MTLStitchedLibraryDescriptor *)a2 functions]);
  int Graph = createGraph(a1, (MTLFunctionStitchingGraph *)[(NSArray *)[(MTLStitchedLibraryDescriptor *)v4 functionGraphs] objectAtIndexedSubscript:a3]);
  *((unsigned char *)a1 + 70) = 1;
  LODWORD(v4) = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, Graph);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, FunctionArray);
  int v8 = flatbuffers::FlatBufferBuilder::EndTable(a1, (__int16)v4);
  *((unsigned char *)a1 + 70) = 1;
  LODWORD(a3) = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 8, v8);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>(a1, 4, &v12);
  unsigned int v9 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField(a1, 6, v9);
  int v10 = flatbuffers::FlatBufferBuilder::EndTable(a1, a3);
  flatbuffers::FlatBufferBuilder::Finish(a1, v10, "AIRS", 0);
  return *((void *)a1 + 6) + **((unsigned int **)a1 + 6);
}

void createStitchingScriptHashImpl(uint64_t a1@<X0>, int *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *(unint64_t **)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = 126 - 2 * __clz((uint64_t)(v7 - (void)v6) >> 5);
  if ((unint64_t *)v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*,false>(v6, v7, v9, 1);
  int v10 = 0;
  uint64_t v11 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v11 >= 9u)
  {
    int v10 = (int *)v11[4];
    if (v11[4]) {
      int v10 = (int *)((char *)v10 + (void)a2 + *(unsigned int *)((char *)v10 + (void)a2));
    }
  }
  uint64_t v12 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
    uint64_t v14 = (int *)((char *)v10 + v13 + *(unsigned int *)((char *)v10 + v13));
  }
  else {
    uint64_t v14 = 0;
  }
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, *(const void **)a1, (*(_DWORD *)(a1 + 8) - *(void *)a1) & 0xFFFFFFE0);
  Air::FunctionStitching::Graph::HashImpl(v14, &c);
  flatbuffers::SignatureBuilder::Create(&c, (unsigned __int8 **)__p);
  uint64_t v15 = __p[0];
  long long v16 = *((_OWORD *)__p[0] + 1);
  *a3 = *(_OWORD *)__p[0];
  a3[1] = v16;
  __p[1] = v15;
  operator delete(v15);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    int v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - (void)v10;
          unint64_t v12 = (uint64_t)(a2 - (void)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v83 = *(void *)(a2 - 32);
                unint64_t v82 = a2 - 32;
                unint64_t v84 = bswap64(v83);
                unint64_t v85 = bswap64(*v10);
                if (v84 == v85
                  && (v84 = bswap64(*(void *)(v82 + 8)), unint64_t v85 = bswap64(v10[1]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 16)), unint64_t v85 = bswap64(v10[2]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 24)), unint64_t v85 = bswap64(v10[3]), v84 == v85))
                {
                  int v86 = 0;
                }
                else if (v84 < v85)
                {
                  int v86 = -1;
                }
                else
                {
                  int v86 = 1;
                }
                if (v86 < 0)
                {
                  __n128 v193 = *(__n128 *)v10;
                  long long v202 = *((_OWORD *)v10 + 1);
                  long long v155 = *(_OWORD *)(v82 + 16);
                  *(_OWORD *)int v10 = *(_OWORD *)v82;
                  *((_OWORD *)v10 + 1) = v155;
                  __n128 result = v193;
                  *(__n128 *)unint64_t v82 = v193;
                  *(_OWORD *)(v82 + 16) = v202;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, (unint64_t *)(a2 - 32));
                break;
              case 4uLL:
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
                break;
              case 5uLL:
                uint64_t v87 = v10 + 4;
                uint64_t v88 = v10 + 8;
                uint64_t v89 = v10 + 12;
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, v10 + 12).n128_u64[0];
                unint64_t v91 = *(void *)(a2 - 32);
                unint64_t v90 = a2 - 32;
                unint64_t v92 = bswap64(v91);
                unint64_t v93 = bswap64(v10[12]);
                if (v92 == v93
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 8)), v93 = bswap64(v10[13]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 16)), v93 = bswap64(v10[14]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 24)), v93 = bswap64(v10[15]), v92 == v93))
                {
                  int v94 = 0;
                }
                else if (v92 < v93)
                {
                  int v94 = -1;
                }
                else
                {
                  int v94 = 1;
                }
                if (v94 < 0)
                {
                  __n128 result = *(__n128 *)v89;
                  long long v203 = *((_OWORD *)v10 + 7);
                  long long v156 = *(_OWORD *)(v90 + 16);
                  *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
                  *((_OWORD *)v10 + 7) = v156;
                  *(__n128 *)unint64_t v90 = result;
                  *(_OWORD *)(v90 + 16) = v203;
                  unint64_t v157 = bswap64(*v89);
                  unint64_t v158 = bswap64(*v88);
                  if (v157 != v158) {
                    goto LABEL_328;
                  }
                  unint64_t v157 = bswap64(v10[13]);
                  unint64_t v158 = bswap64(v10[9]);
                  if (v157 == v158
                    && (unint64_t v157 = bswap64(v10[14]), v158 = bswap64(v10[10]), v157 == v158)
                    && (unint64_t v157 = bswap64(v10[15]), v158 = bswap64(v10[11]), v157 == v158))
                  {
                    int v159 = 0;
                  }
                  else
                  {
LABEL_328:
                    int v159 = v157 < v158 ? -1 : 1;
                  }
                  if (v159 < 0)
                  {
                    long long v170 = *(_OWORD *)v88;
                    __n128 result = *((__n128 *)v10 + 5);
                    long long v171 = *((_OWORD *)v10 + 7);
                    *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
                    *((_OWORD *)v10 + 5) = v171;
                    *(_OWORD *)uint64_t v89 = v170;
                    *((__n128 *)v10 + 7) = result;
                    unint64_t v172 = bswap64(*v88);
                    unint64_t v173 = bswap64(*v87);
                    if (v172 != v173) {
                      goto LABEL_337;
                    }
                    unint64_t v172 = bswap64(v10[9]);
                    unint64_t v173 = bswap64(v10[5]);
                    if (v172 == v173
                      && (unint64_t v172 = bswap64(v10[10]), v173 = bswap64(v10[6]), v172 == v173)
                      && (unint64_t v172 = bswap64(v10[11]), v173 = bswap64(v10[7]), v172 == v173))
                    {
                      int v174 = 0;
                    }
                    else
                    {
LABEL_337:
                      int v174 = v172 < v173 ? -1 : 1;
                    }
                    if (v174 < 0)
                    {
                      long long v175 = *(_OWORD *)v87;
                      __n128 result = *((__n128 *)v10 + 3);
                      long long v176 = *((_OWORD *)v10 + 5);
                      *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
                      *((_OWORD *)v10 + 3) = v176;
                      *(_OWORD *)uint64_t v88 = v175;
                      *((__n128 *)v10 + 5) = result;
                      unint64_t v177 = bswap64(v10[4]);
                      unint64_t v178 = bswap64(*v10);
                      if (v177 != v178) {
                        goto LABEL_346;
                      }
                      unint64_t v177 = bswap64(v10[5]);
                      unint64_t v178 = bswap64(v10[1]);
                      if (v177 == v178
                        && (unint64_t v177 = bswap64(v10[6]), v178 = bswap64(v10[2]), v177 == v178)
                        && (unint64_t v177 = bswap64(v10[7]), v178 = bswap64(v10[3]), v177 == v178))
                      {
                        int v179 = 0;
                      }
                      else
                      {
LABEL_346:
                        int v179 = v177 < v178 ? -1 : 1;
                      }
                      if (v179 < 0)
                      {
                        __n128 v195 = *(__n128 *)v10;
                        long long v205 = *((_OWORD *)v10 + 1);
                        long long v180 = *((_OWORD *)v10 + 3);
                        *(_OWORD *)int v10 = *(_OWORD *)v87;
                        *((_OWORD *)v10 + 1) = v180;
                        __n128 result = v195;
                        *(__n128 *)uint64_t v87 = v195;
                        *((_OWORD *)v10 + 3) = v205;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 767)
          {
            n128_u64 = v10 + 4;
            BOOL v97 = v10 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
            if (a4)
            {
              if (!v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = v10;
                do
                {
                  uint64_t v100 = (__n128 *)n128_u64;
                  unint64_t v101 = bswap64(v99[4]);
                  unint64_t v102 = bswap64(*v99);
                  if (v101 != v102
                    || (unint64_t v101 = bswap64(v100->n128_u64[1]), v102 = bswap64(v99[1]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[0]), v102 = bswap64(v99[2]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[1]), v102 = bswap64(v99[3]), v101 != v102))
                  {
                    int v103 = v101 < v102 ? -1 : 1;
                    if (v103 < 0)
                    {
                      __n128 v190 = *v100;
                      __n128 v199 = v100[1];
                      uint64_t v104 = v98;
                      while (1)
                      {
                        unint64_t v105 = (char *)v10 + v104;
                        long long v106 = *(_OWORD *)((char *)v10 + v104 + 16);
                        *((_OWORD *)v105 + 2) = *(_OWORD *)((char *)v10 + v104);
                        *((_OWORD *)v105 + 3) = v106;
                        if (!v104) {
                          break;
                        }
                        unint64_t v107 = bswap64(v190.n128_u64[0]);
                        unint64_t v108 = bswap64(*((void *)v105 - 4));
                        if (v107 == v108
                          && (unint64_t v107 = bswap64(v190.n128_u64[1]), v108 = bswap64(*((void *)v105 - 3)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[0]), v108 = bswap64(*((void *)v105 - 2)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[1]), v108 = bswap64(*((void *)v105 - 1)), v107 == v108))
                        {
                          int v109 = 0;
                        }
                        else if (v107 < v108)
                        {
                          int v109 = -1;
                        }
                        else
                        {
                          int v109 = 1;
                        }
                        v104 -= 32;
                        if ((v109 & 0x80000000) == 0)
                        {
                          uint64_t v110 = (__n128 *)((char *)v10 + v104 + 32);
                          goto LABEL_200;
                        }
                      }
                      uint64_t v110 = (__n128 *)v10;
LABEL_200:
                      __n128 result = v190;
                      __n128 *v110 = v190;
                      v110[1] = v199;
                    }
                  }
                  n128_u64 = v100[2].n128_u64;
                  v98 += 32;
                  uint64_t v99 = (unint64_t *)v100;
                }
                while (&v100[2] != (__n128 *)a2);
              }
            }
            else if (!v97)
            {
              uint64_t v160 = v10 - 4;
              do
              {
                uint64_t v161 = (__n128 *)n128_u64;
                unint64_t v162 = bswap64(a1[4]);
                unint64_t v163 = bswap64(*a1);
                if (v162 != v163
                  || (unint64_t v162 = bswap64(v161->n128_u64[1]), v163 = bswap64(a1[1]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[0]), v163 = bswap64(a1[2]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[1]), v163 = bswap64(a1[3]), v162 != v163))
                {
                  int v164 = v162 < v163 ? -1 : 1;
                  if (v164 < 0)
                  {
                    __n128 v194 = *v161;
                    __n128 v204 = v161[1];
                    uint64_t v165 = v160;
                    do
                    {
                      long long v166 = *((_OWORD *)v165 + 3);
                      *((_OWORD *)v165 + 4) = *((_OWORD *)v165 + 2);
                      *((_OWORD *)v165 + 5) = v166;
                      unint64_t v167 = bswap64(v194.n128_u64[0]);
                      unint64_t v168 = bswap64(*v165);
                      if (v167 == v168
                        && (unint64_t v167 = bswap64(v194.n128_u64[1]), v168 = bswap64(v165[1]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[0]), v168 = bswap64(v165[2]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[1]), v168 = bswap64(v165[3]), v167 == v168))
                      {
                        int v169 = 0;
                      }
                      else if (v167 < v168)
                      {
                        int v169 = -1;
                      }
                      else
                      {
                        int v169 = 1;
                      }
                      v165 -= 4;
                    }
                    while (v169 < 0);
                    __n128 result = v194;
                    *((__n128 *)v165 + 4) = v194;
                    *((__n128 *)v165 + 5) = v204;
                  }
                }
                n128_u64 = v161[2].n128_u64;
                v160 += 4;
                a1 = (unint64_t *)v161;
              }
              while (&v161[2] != (__n128 *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (unint64_t *)a2)
            {
              int64_t v111 = (v12 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                int64_t v113 = v112;
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  uint64_t v115 = &v10[4 * v114];
                  if (2 * v113 + 2 < (uint64_t)v12)
                  {
                    unint64_t v116 = bswap64(*v115);
                    unint64_t v117 = bswap64(v115[4]);
                    if (v116 != v117) {
                      goto LABEL_212;
                    }
                    unint64_t v116 = bswap64(v115[1]);
                    unint64_t v117 = bswap64(v115[5]);
                    if (v116 == v117
                      && (unint64_t v116 = bswap64(v115[2]), v117 = bswap64(v115[6]), v116 == v117)
                      && (unint64_t v116 = bswap64(v115[3]), v117 = bswap64(v115[7]), v116 == v117))
                    {
                      int v118 = 0;
                    }
                    else
                    {
LABEL_212:
                      int v118 = v116 < v117 ? -1 : 1;
                    }
                    if (v118 < 0)
                    {
                      v115 += 4;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  uint64_t v119 = &v10[4 * v113];
                  unint64_t v120 = bswap64(*v115);
                  unint64_t v121 = bswap64(*v119);
                  if (v120 == v121
                    && (unint64_t v120 = bswap64(v115[1]), v121 = bswap64(v119[1]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[2]), v121 = bswap64(v119[2]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[3]), v121 = bswap64(v119[3]), v120 == v121)
                    || (v120 < v121 ? (int v122 = -1) : (int v122 = 1), (v122 & 0x80000000) == 0))
                  {
                    long long v191 = *(_OWORD *)v119;
                    long long v200 = *((_OWORD *)v119 + 1);
                    do
                    {
                      uint64_t v123 = v115;
                      long long v124 = *((_OWORD *)v115 + 1);
                      *(_OWORD *)uint64_t v119 = *(_OWORD *)v115;
                      *((_OWORD *)v119 + 1) = v124;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v125 = (2 * v114) | 1;
                      uint64_t v115 = &v10[4 * v125];
                      uint64_t v114 = 2 * v114 + 2;
                      if (v114 < (uint64_t)v12)
                      {
                        unint64_t v126 = bswap64(*v115);
                        unint64_t v127 = bswap64(v115[4]);
                        if (v126 != v127) {
                          goto LABEL_234;
                        }
                        unint64_t v126 = bswap64(v115[1]);
                        unint64_t v127 = bswap64(v115[5]);
                        if (v126 == v127
                          && (v126 = bswap64(v115[2]), unint64_t v127 = bswap64(v115[6]), v126 == v127)
                          && (v126 = bswap64(v115[3]), unint64_t v127 = bswap64(v115[7]), v126 == v127))
                        {
                          int v128 = 0;
                        }
                        else
                        {
LABEL_234:
                          int v128 = v126 < v127 ? -1 : 1;
                        }
                        if (v128 >= 0) {
                          uint64_t v114 = v125;
                        }
                        else {
                          v115 += 4;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v125;
                      }
                      unint64_t v129 = bswap64(*v115);
                      unint64_t v130 = bswap64(v191);
                      if (v129 != v130) {
                        goto LABEL_245;
                      }
                      unint64_t v129 = bswap64(v115[1]);
                      unint64_t v130 = bswap64(*((unint64_t *)&v191 + 1));
                      if (v129 == v130
                        && (v129 = bswap64(v115[2]), unint64_t v130 = bswap64(v200), v129 == v130)
                        && (v129 = bswap64(v115[3]), unint64_t v130 = bswap64(*((unint64_t *)&v200 + 1)), v129 == v130))
                      {
                        int v131 = 0;
                      }
                      else
                      {
LABEL_245:
                        int v131 = v129 < v130 ? -1 : 1;
                      }
                      uint64_t v119 = v123;
                    }
                    while ((v131 & 0x80000000) == 0);
                    *(_OWORD *)uint64_t v123 = v191;
                    *((_OWORD *)v123 + 1) = v200;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              uint64_t v132 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v133 = 0;
                __n128 v183 = *(__n128 *)v10;
                long long v186 = *((_OWORD *)v10 + 1);
                unint64_t v134 = v10;
                do
                {
                  int v135 = &v134[4 * v133 + 4];
                  uint64_t v136 = (2 * v133) | 1;
                  uint64_t v137 = 2 * v133 + 2;
                  if (v137 < v132)
                  {
                    unint64_t v138 = bswap64(*v135);
                    unint64_t v139 = bswap64(v135[4]);
                    if (v138 != v139) {
                      goto LABEL_259;
                    }
                    unint64_t v138 = bswap64(v135[1]);
                    unint64_t v139 = bswap64(v135[5]);
                    if (v138 == v139
                      && (unint64_t v138 = bswap64(v135[2]), v139 = bswap64(v135[6]), v138 == v139)
                      && (unint64_t v138 = bswap64(v135[3]), v139 = bswap64(v135[7]), v138 == v139))
                    {
                      int v140 = 0;
                    }
                    else
                    {
LABEL_259:
                      int v140 = v138 < v139 ? -1 : 1;
                    }
                    if (v140 < 0)
                    {
                      v135 += 4;
                      uint64_t v136 = v137;
                    }
                  }
                  long long v141 = *((_OWORD *)v135 + 1);
                  *(_OWORD *)unint64_t v134 = *(_OWORD *)v135;
                  *((_OWORD *)v134 + 1) = v141;
                  unint64_t v134 = v135;
                  uint64_t v133 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                a2 -= 32;
                if (v135 == (unint64_t *)a2)
                {
                  __n128 result = v183;
                  *(__n128 *)int v135 = v183;
                  *((_OWORD *)v135 + 1) = v186;
                }
                else
                {
                  long long v142 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)int v135 = *(_OWORD *)a2;
                  *((_OWORD *)v135 + 1) = v142;
                  __n128 result = v183;
                  *(__n128 *)a2 = v183;
                  *(_OWORD *)(a2 + 16) = v186;
                  uint64_t v143 = (char *)v135 - (char *)v10 + 32;
                  if (v143 >= 33)
                  {
                    unint64_t v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                    uint64_t v145 = &v10[4 * v144];
                    unint64_t v146 = bswap64(*v145);
                    unint64_t v147 = bswap64(*v135);
                    if (v146 != v147
                      || (unint64_t v146 = bswap64(v145[1]), v147 = bswap64(v135[1]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[2]), v147 = bswap64(v135[2]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[3]), v147 = bswap64(v135[3]), v146 != v147))
                    {
                      int v148 = v146 < v147 ? -1 : 1;
                      if (v148 < 0)
                      {
                        __n128 v192 = *(__n128 *)v135;
                        __n128 v201 = *((__n128 *)v135 + 1);
                        do
                        {
                          uint64_t v149 = (__n128 *)v145;
                          long long v150 = *((_OWORD *)v145 + 1);
                          *(_OWORD *)int v135 = *(_OWORD *)v145;
                          *((_OWORD *)v135 + 1) = v150;
                          if (!v144) {
                            break;
                          }
                          unint64_t v144 = (v144 - 1) >> 1;
                          uint64_t v145 = &v10[4 * v144];
                          unint64_t v151 = bswap64(*v145);
                          unint64_t v152 = bswap64(v192.n128_u64[0]);
                          if (v151 != v152) {
                            goto LABEL_283;
                          }
                          unint64_t v151 = bswap64(v145[1]);
                          unint64_t v152 = bswap64(v192.n128_u64[1]);
                          if (v151 == v152
                            && (unint64_t v151 = bswap64(v145[2]), v152 = bswap64(v201.n128_u64[0]), v151 == v152)
                            && (unint64_t v151 = bswap64(v145[3]), v152 = bswap64(v201.n128_u64[1]), v151 == v152))
                          {
                            int v153 = 0;
                          }
                          else
                          {
LABEL_283:
                            int v153 = v151 < v152 ? -1 : 1;
                          }
                          int v135 = (unint64_t *)v149;
                        }
                        while (v153 < 0);
                        __n128 result = v192;
                        *uint64_t v149 = v192;
                        v149[1] = v201;
                      }
                    }
                  }
                }
              }
              while (v132-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v12 >> 1)], (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v14 - 4, (unint64_t *)(a2 - 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v13 + 4], (unint64_t *)(a2 - 96));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v14 - 4, v14, &a1[4 * v13 + 4]);
            __n128 v187 = *(__n128 *)a1;
            long long v196 = *((_OWORD *)a1 + 1);
            long long v15 = *((_OWORD *)v14 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *((_OWORD *)a1 + 1) = v15;
            *(__n128 *)uint64_t v14 = v187;
            *((_OWORD *)v14 + 1) = v196;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v12 >> 1)], a1, (unint64_t *)(a2 - 32));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v16 = bswap64(*(a1 - 4));
          unint64_t v17 = bswap64(*a1);
          if (v16 != v17) {
            goto LABEL_15;
          }
          unint64_t v16 = bswap64(*(a1 - 3));
          unint64_t v17 = bswap64(a1[1]);
          if (v16 == v17
            && (unint64_t v16 = bswap64(*(a1 - 2)), v17 = bswap64(a1[2]), v16 == v17)
            && (unint64_t v16 = bswap64(*(a1 - 1)), v17 = bswap64(a1[3]), v16 == v17))
          {
            int v18 = 0;
          }
          else
          {
LABEL_15:
            int v18 = v16 < v17 ? -1 : 1;
          }
          if (v18 < 0) {
            break;
          }
          __n128 v182 = *(__n128 *)a1;
          long long v185 = *((_OWORD *)a1 + 1);
          unint64_t v51 = bswap64(*a1);
          unint64_t v52 = bswap64(*(void *)(a2 - 32));
          if (v51 == v52
            && (unint64_t v51 = bswap64(v182.n128_u64[1]), v52 = bswap64(*(void *)(a2 - 24)), v51 == v52)
            && (unint64_t v51 = bswap64(v185), v52 = bswap64(*(void *)(a2 - 16)), v51 == v52)
            && (unint64_t v51 = bswap64(*((unint64_t *)&v185 + 1)), v52 = bswap64(*(void *)(a2 - 8)), v51 == v52))
          {
            int v53 = 0;
          }
          else if (v51 < v52)
          {
            int v53 = -1;
          }
          else
          {
            int v53 = 1;
          }
          if (v53 < 0)
          {
            uint64_t v58 = a1;
            int v10 = a1;
            do
            {
              unint64_t v59 = v10[4];
              v10 += 4;
              unint64_t v60 = bswap64(v182.n128_u64[0]);
              unint64_t v61 = bswap64(v59);
              if (v60 == v61
                && (unint64_t v60 = bswap64(v182.n128_u64[1]), v61 = bswap64(v58[5]), v60 == v61)
                && (unint64_t v60 = bswap64(v185), v61 = bswap64(v58[6]), v60 == v61)
                && (unint64_t v60 = bswap64(*((unint64_t *)&v185 + 1)), v61 = bswap64(v58[7]), v60 == v61))
              {
                int v62 = 0;
              }
              else if (v60 < v61)
              {
                int v62 = -1;
              }
              else
              {
                int v62 = 1;
              }
              uint64_t v58 = v10;
            }
            while ((v62 & 0x80000000) == 0);
          }
          else
          {
            int64_t v54 = a1 + 4;
            do
            {
              int v10 = v54;
              if ((unint64_t)v54 >= a2) {
                break;
              }
              unint64_t v55 = bswap64(v182.n128_u64[0]);
              unint64_t v56 = bswap64(*v10);
              if (v55 != v56) {
                goto LABEL_100;
              }
              unint64_t v55 = bswap64(v182.n128_u64[1]);
              unint64_t v56 = bswap64(v10[1]);
              if (v55 == v56
                && (unint64_t v55 = bswap64(v185), v56 = bswap64(v10[2]), v55 == v56)
                && (unint64_t v55 = bswap64(*((unint64_t *)&v185 + 1)), v56 = bswap64(v10[3]), v55 == v56))
              {
                int v57 = 0;
              }
              else
              {
LABEL_100:
                int v57 = v55 < v56 ? -1 : 1;
              }
              int64_t v54 = v10 + 4;
            }
            while ((v57 & 0x80000000) == 0);
          }
          uint64_t v63 = (_OWORD *)a2;
          if ((unint64_t)v10 < a2)
          {
            uint64_t v64 = (_OWORD *)a2;
            uint64_t v63 = (_OWORD *)a2;
            do
            {
              unint64_t v65 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v66 = bswap64(v182.n128_u64[0]);
              unint64_t v67 = bswap64(v65);
              if (v66 == v67
                && (unint64_t v66 = bswap64(v182.n128_u64[1]), v67 = bswap64(*((void *)v64 - 3)), v66 == v67)
                && (unint64_t v66 = bswap64(v185), v67 = bswap64(*((void *)v64 - 2)), v66 == v67)
                && (unint64_t v66 = bswap64(*((unint64_t *)&v185 + 1)), v67 = bswap64(*((void *)v64 - 1)), v66 == v67))
              {
                int v68 = 0;
              }
              else if (v66 < v67)
              {
                int v68 = -1;
              }
              else
              {
                int v68 = 1;
              }
              uint64_t v64 = v63;
            }
            while (v68 < 0);
          }
          while (v10 < (unint64_t *)v63)
          {
            __n128 v189 = *(__n128 *)v10;
            long long v198 = *((_OWORD *)v10 + 1);
            long long v69 = v63[1];
            *(_OWORD *)int v10 = *v63;
            *((_OWORD *)v10 + 1) = v69;
            _OWORD *v63 = v189;
            v63[1] = v198;
            uint64_t v70 = v10;
            do
            {
              unint64_t v71 = v10[4];
              v10 += 4;
              unint64_t v72 = bswap64(v182.n128_u64[0]);
              unint64_t v73 = bswap64(v71);
              if (v72 == v73
                && (unint64_t v72 = bswap64(v182.n128_u64[1]), v73 = bswap64(v70[5]), v72 == v73)
                && (unint64_t v72 = bswap64(v185), v73 = bswap64(v70[6]), v72 == v73)
                && (unint64_t v72 = bswap64(*((unint64_t *)&v185 + 1)), v73 = bswap64(v70[7]), v72 == v73))
              {
                int v74 = 0;
              }
              else if (v72 < v73)
              {
                int v74 = -1;
              }
              else
              {
                int v74 = 1;
              }
              uint64_t v70 = v10;
            }
            while ((v74 & 0x80000000) == 0);
            unint64_t v75 = v63;
            do
            {
              unint64_t v76 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v77 = bswap64(v182.n128_u64[0]);
              unint64_t v78 = bswap64(v76);
              if (v77 == v78
                && (unint64_t v77 = bswap64(v182.n128_u64[1]), v78 = bswap64(*((void *)v75 - 3)), v77 == v78)
                && (unint64_t v77 = bswap64(v185), v78 = bswap64(*((void *)v75 - 2)), v77 == v78)
                && (unint64_t v77 = bswap64(*((unint64_t *)&v185 + 1)), v78 = bswap64(*((void *)v75 - 1)), v77 == v78))
              {
                int v79 = 0;
              }
              else if (v77 < v78)
              {
                int v79 = -1;
              }
              else
              {
                int v79 = 1;
              }
              unint64_t v75 = v63;
            }
            while (v79 < 0);
          }
          uint64_t v80 = (__n128 *)(v10 - 4);
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 != a1)
          {
            long long v81 = *((_OWORD *)v10 - 1);
            *(__n128 *)a1 = *v80;
            *((_OWORD *)a1 + 1) = v81;
          }
          a4 = 0;
          __n128 result = v182;
          *uint64_t v80 = v182;
          *((_OWORD *)v10 - 1) = v185;
        }
        uint64_t v19 = 0;
        __n128 v181 = *(__n128 *)a1;
        long long v184 = *((_OWORD *)a1 + 1);
        do
        {
          uint64_t v20 = &a1[v19];
          unint64_t v21 = bswap64(a1[v19 + 4]);
          unint64_t v22 = bswap64(v181.n128_u64[0]);
          if (v21 == v22
            && (v21 = bswap64(v20[5]), unint64_t v22 = bswap64(v181.n128_u64[1]), v21 == v22)
            && (v21 = bswap64(v20[6]), unint64_t v22 = bswap64(v184), v21 == v22)
            && (v21 = bswap64(v20[7]), unint64_t v22 = bswap64(*((unint64_t *)&v184 + 1)), v21 == v22))
          {
            int v23 = 0;
          }
          else if (v21 < v22)
          {
            int v23 = -1;
          }
          else
          {
            int v23 = 1;
          }
          v19 += 4;
        }
        while (v23 < 0);
        size_t v24 = &a1[v19];
        unint64_t v25 = a2;
        if (v19 == 4)
        {
          long long v30 = (_OWORD *)a2;
          while (v24 < (unint64_t *)v30)
          {
            long long v26 = v30 - 2;
            unint64_t v31 = bswap64(*((void *)v30 - 4));
            unint64_t v32 = bswap64(v181.n128_u64[0]);
            if (v31 == v32
              && (unint64_t v31 = bswap64(*((void *)v30 - 3)), v32 = bswap64(v181.n128_u64[1]), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 2)), v32 = bswap64(v184), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 1)), v32 = bswap64(*((unint64_t *)&v184 + 1)), v31 == v32))
            {
              int v33 = 0;
            }
            else if (v31 < v32)
            {
              int v33 = -1;
            }
            else
            {
              int v33 = 1;
            }
            v30 -= 2;
            if (v33 < 0) {
              goto LABEL_53;
            }
          }
          long long v26 = v30;
        }
        else
        {
          do
          {
            long long v26 = (_OWORD *)(v25 - 32);
            unint64_t v27 = bswap64(*(void *)(v25 - 32));
            unint64_t v28 = bswap64(v181.n128_u64[0]);
            if (v27 == v28
              && (unint64_t v27 = bswap64(*(void *)(v25 - 24)), v28 = bswap64(v181.n128_u64[1]), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 16)), v28 = bswap64(v184), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 8)), v28 = bswap64(*((unint64_t *)&v184 + 1)), v27 == v28))
            {
              int v29 = 0;
            }
            else if (v27 < v28)
            {
              int v29 = -1;
            }
            else
            {
              int v29 = 1;
            }
            v25 -= 32;
          }
          while ((v29 & 0x80000000) == 0);
        }
LABEL_53:
        if (v24 >= (unint64_t *)v26)
        {
          int v47 = v24 - 4;
        }
        else
        {
          unint64_t v34 = (unint64_t)v24;
          uint64_t v35 = v26;
          do
          {
            long long v188 = *(_OWORD *)v34;
            long long v197 = *(_OWORD *)(v34 + 16);
            long long v36 = v35[1];
            *(_OWORD *)unint64_t v34 = *v35;
            *(_OWORD *)(v34 + 16) = v36;
            *uint64_t v35 = v188;
            v35[1] = v197;
            uint64_t v37 = (unint64_t *)v34;
            do
            {
              unint64_t v38 = *(void *)(v34 + 32);
              v34 += 32;
              unint64_t v39 = bswap64(v38);
              unint64_t v40 = bswap64(v181.n128_u64[0]);
              if (v39 == v40
                && (unint64_t v39 = bswap64(v37[5]), v40 = bswap64(v181.n128_u64[1]), v39 == v40)
                && (unint64_t v39 = bswap64(v37[6]), v40 = bswap64(v184), v39 == v40)
                && (unint64_t v39 = bswap64(v37[7]), v40 = bswap64(*((unint64_t *)&v184 + 1)), v39 == v40))
              {
                int v41 = 0;
              }
              else if (v39 < v40)
              {
                int v41 = -1;
              }
              else
              {
                int v41 = 1;
              }
              uint64_t v37 = (unint64_t *)v34;
            }
            while (v41 < 0);
            int v42 = v35;
            do
            {
              unint64_t v43 = *((void *)v35 - 4);
              v35 -= 2;
              unint64_t v44 = bswap64(v43);
              unint64_t v45 = bswap64(v181.n128_u64[0]);
              if (v44 == v45
                && (unint64_t v44 = bswap64(*((void *)v42 - 3)), v45 = bswap64(v181.n128_u64[1]), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 2)), v45 = bswap64(v184), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 1)), v45 = bswap64(*((unint64_t *)&v184 + 1)), v44 == v45))
              {
                int v46 = 0;
              }
              else if (v44 < v45)
              {
                int v46 = -1;
              }
              else
              {
                int v46 = 1;
              }
              int v42 = v35;
            }
            while ((v46 & 0x80000000) == 0);
          }
          while (v34 < (unint64_t)v35);
          int v47 = (unint64_t *)(v34 - 32);
        }
        if (v47 != a1)
        {
          long long v48 = *((_OWORD *)v47 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v47;
          *((_OWORD *)a1 + 1) = v48;
        }
        *(__n128 *)int v47 = v181;
        *((_OWORD *)v47 + 1) = v184;
        if (v24 >= (unint64_t *)v26) {
          break;
        }
LABEL_83:
        std::__introsort<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*,false>(a1, v47, a3, a4 & 1);
        a4 = 0;
        int v10 = v47 + 4;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*>(a1, v47);
      int v10 = v47 + 4;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*>(v47 + 4, (unint64_t *)a2))
      {
        break;
      }
      if (!v49) {
        goto LABEL_83;
      }
    }
    a2 = (unint64_t)v47;
    if (!v49) {
      continue;
    }
    return result;
  }
}

uint64_t Air::FunctionStitching::Graph::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.Graph", 0x1Bu);
  BOOL v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    unint64_t v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      long long v15 = v13 + 1;
      unint64_t v16 = v13 + 1;
      do
      {
        unsigned int v17 = *v16++;
        Air::FunctionStitching::Node::HashImpl((AirReflection::Node *)((char *)v15 + v17), c);
        long long v15 = v16;
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 9u && (unsigned __int16 v19 = v18[4]) != 0)
  {
    uint64_t v20 = v19;
    CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
    int data = *(int *)((char *)a1 + v20);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  unint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0)
  {
    int v23 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    int data = *v23;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v25 = *v23;
    if (v25)
    {
      long long v26 = v23 + 1;
      unint64_t v27 = v23 + 1;
      do
      {
        unsigned int v28 = *v27++;
        uint64_t result = Air::FunctionStitching::Attribute::HashImpl((Mtl::FunctionStitching::Attribute *)((char *)v26 + v28), c);
        long long v26 = v27;
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Air::FunctionStitching::Node::HashImpl(AirReflection::Node *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.Node", 0x1Au);
  BOOL v4 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(_DWORD *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v6 >= 5u && (uint64_t v7 = v6[2]) != 0)
  {
    switch(*(_DWORD *)((char *)a1 + v7))
    {
      case 1:
        unint64_t v8 = (int *)AirReflection::Node::node_as_FragmentFunction(a1);
        uint64_t result = Air::FunctionStitching::InputNode::HashImpl(v8, c);
        break;
      case 2:
        unint64_t v13 = (int *)AirReflection::Node::node_as_KernelFunction(a1);
        uint64_t result = Air::FunctionStitching::FunctionNode::HashImpl(v13, c);
        break;
      case 3:
        uint64_t v14 = (int *)AirReflection::Node::node_as_VertexFunction(a1);
        uint64_t result = Air::FunctionStitching::BufferNode::HashImpl(v14, c);
        break;
      case 4:
        long long v15 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(a1);
        uint64_t result = Air::FunctionStitching::BufferAddressNode::HashImpl(v15, c);
        break;
      case 5:
        unint64_t v16 = (int *)AirReflection::Node::node_as_IntersectionFunction(a1);
        uint64_t result = Air::FunctionStitching::BufferDataNode::HashImpl(v16, c);
        break;
      case 6:
        unsigned int v17 = (int *)AirReflection::Node::node_as_MeshFunction(a1);
        uint64_t result = Air::FunctionStitching::TextureNode::HashImpl(v17, c);
        break;
      case 7:
        int v18 = (int *)AirReflection::Node::node_as_ObjectFunction(a1);
        uint64_t result = Air::FunctionStitching::SamplerNode::HashImpl(v18, c);
        break;
      case 8:
        unsigned __int16 v19 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(a1);
        uint64_t result = Air::FunctionStitching::ThreadgroupNode::HashImpl(v19, c);
        break;
      case 9:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(a1);
        int v10 = "Air.FunctionStitching.ImageblockNode";
        uint64_t v11 = c;
        CC_LONG v12 = 36;
        return CC_SHA256_Update(v11, v10, v12);
      case 0xA:
        uint64_t v20 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(a1);
        uint64_t result = Air::FunctionStitching::BuiltinNode::HashImpl(v20, c);
        break;
      case 0xB:
        unint64_t v21 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(a1);
        uint64_t result = Air::FunctionStitching::EarlyReturnNode::HashImpl(v21, c);
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    int v23 = 0;
    int v10 = (const char *)&v23;
    uint64_t v11 = c;
    CC_LONG v12 = 4;
    return CC_SHA256_Update(v11, v10, v12);
  }
  return result;
}

uint64_t Air::FunctionStitching::BufferAddressNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.BufferAddressNode", 0x27u);
  BOOL v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    Air::FunctionStitching::BufferNode::HashImpl((int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5)), c);
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      uint64_t v7 = *(void *)((char *)a1 + v7);
    }
  }
  uint64_t v10 = v7;
  return CC_SHA256_Update(c, &v10, 8u);
}

uint64_t Air::FunctionStitching::BufferDataNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.BufferDataNode", 0x24u);
  BOOL v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    return Air::FunctionStitching::BufferAddressNode::HashImpl(v6, c);
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
}

uint64_t Air::FunctionStitching::BufferNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.BufferNode", 0x20u);
  BOOL v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int v10 = v7;
  return CC_SHA256_Update(c, &v10, 4u);
}

uint64_t AirReflection::Node::node_as_IntersectionFunction(AirReflection::Node *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 5) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::FunctionStitching::FunctionNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.FunctionNode", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    unint64_t v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      long long v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
        int v16 = *v15++;
        int data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  unsigned int v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
  {
    unsigned __int16 v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v21 = *v19;
    if (v21)
    {
      uint64_t v22 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
        int v23 = *v22++;
        int data = v23;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Air::FunctionStitching::TextureNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.TextureNode", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshFunction(AirReflection::Node *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 6) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::FunctionStitching::SamplerNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.SamplerNode", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ObjectFunction(AirReflection::Node *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 7) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::FunctionStitching::Attribute::HashImpl(Mtl::FunctionStitching::Attribute *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.Attribute", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *((unsigned __int8 *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v6 < 5u) {
    goto LABEL_10;
  }
  uint64_t v7 = v6[2];
  if (!v7) {
    goto LABEL_10;
  }
  int v8 = *((unsigned __int8 *)a1 + v7);
  if (v8 == 2)
  {
    Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(a1);
    CC_LONG v9 = "Air.FunctionStitching.KernelAttribute";
    int v10 = c;
    CC_LONG v11 = 37;
    return CC_SHA256_Update(v10, v9, v11);
  }
  if (v8 == 1)
  {
    Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(a1);
    CC_LONG v9 = "Air.FunctionStitching.AlwaysInlineAttribute";
    int v10 = c;
    CC_LONG v11 = 43;
  }
  else
  {
LABEL_10:
    int v14 = 0;
    CC_LONG v9 = (const char *)&v14;
    int v10 = c;
    CC_LONG v11 = 4;
  }
  return CC_SHA256_Update(v10, v9, v11);
}

uint64_t Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(Mtl::FunctionStitching::Attribute *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *((unsigned char *)this + v1[2]) == 2) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t Air::FunctionStitching::Node::node_as_EarlyReturnNode(Air::FunctionStitching::Node *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 11) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t Air::FunctionStitching::Node::node_as_BuiltinNode(Air::FunctionStitching::Node *this)
{
  int v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 10) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t Air::FunctionStitching::EarlyReturnNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.EarlyReturnNode", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
    int data = *(int *)((char *)a1 + v6);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0)
  {
    CC_LONG v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
    int data = *v9;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v9;
    if (v11)
    {
      uint64_t v12 = (int *)(v9 + 1);
      do
      {
        CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
        int v13 = *v12++;
        int data = v13;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Air::FunctionStitching::BuiltinNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.FunctionStitching.BuiltinNode", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t flatbuffers::SignatureBuilder::Create@<X0>(CC_SHA256_CTX *this@<X0>, unsigned __int8 **a2@<X8>)
{
  return CC_SHA256_Final(*a2, this);
}

void sub_182766234(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1827662A8(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void ___ZL12createGroupsRN11flatbuffers17FlatBufferBuilderEP12NSDictionaryIP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(flatbuffers::FlatBufferBuilder **)(a1 + 40);
  uint64_t v6 = (const char *)[a2 UTF8String];
  size_t v7 = strlen(v6);
  LODWORD(v5) = flatbuffers::FlatBufferBuilder::CreateString(v5, v6, v7);
  LODWORD(a3) = createFunctionArray(*(flatbuffers::FlatBufferBuilder **)(a1 + 40), a3);
  uint64_t v8 = *(void *)(a1 + 40);
  *(unsigned char *)(v8 + 70) = 1;
  int v9 = *(_DWORD *)(v8 + 32) - *(_DWORD *)(v8 + 48) + *(_DWORD *)(v8 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)v8, 4, (int)v5);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)v8, 6, (int)a3);
  int v10 = *(void **)(*(void *)(a1 + 32) + 8);
  int v11 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v8, v9);
  int v12 = v11;
  int v13 = (char *)v10[7];
  unint64_t v14 = v10[8];
  if ((unint64_t)v13 >= v14)
  {
    int v16 = (char *)v10[6];
    uint64_t v17 = (v13 - v16) >> 2;
    if ((unint64_t)(v17 + 1) >> 62) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = v14 - (void)v16;
    unint64_t v19 = (uint64_t)(v14 - (void)v16) >> 1;
    if (v19 <= v17 + 1) {
      unint64_t v19 = v17 + 1;
    }
    if (v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20)
    {
      uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v10 + 8), v20);
      int v16 = (char *)v10[6];
      int v13 = (char *)v10[7];
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = &v21[4 * v17];
    int v23 = &v21[4 * v20];
    *(_DWORD *)uint64_t v22 = v12;
    long long v15 = v22 + 4;
    while (v13 != v16)
    {
      int v24 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v22 - 1) = v24;
      v22 -= 4;
    }
    v10[6] = v22;
    void v10[7] = v15;
    v10[8] = v23;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(_DWORD *)int v13 = v11;
    long long v15 = v13 + 4;
  }
  void v10[7] = v15;
}

void ___Z34_MTLDebugIgnorePrecompiledBinariesv_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (_MTLIsInternalBuild())
  {
    if (getenv("MTL_DEBUG_IGNORE_PRECOMPILED_BINARIES"))
    {
      uint64_t v0 = MTLGetEnvDefault("MTL_DEBUG_IGNORE_PRECOMPILED_BINARIES", 0);
      _MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries = v0 != 0;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      uint64_t v1 = "used if set";
      int v5 = 136315650;
      uint64_t v6 = "MTL_DEBUG_IGNORE_PRECOMPILED_BINARIES";
      if (v0) {
        uint64_t v1 = "ignored";
      }
      __int16 v7 = 1024;
      BOOL v8 = v0 != 0;
      __int16 v9 = 2080;
      int v10 = v1;
      unsigned int v2 = MEMORY[0x1E4F14500];
      BOOL v3 = "'%s' was set to '%d', binary archives and pipeline libraries will be %s.";
      uint32_t v4 = 28;
      goto LABEL_10;
    }
    if (_os_feature_enabled_impl())
    {
      _MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries = 1;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v5) = 0;
        unsigned int v2 = MEMORY[0x1E4F14500];
        BOOL v3 = "ignore_precompiled_binaries feature flag enabled, binary archives and pipeline libraries will be ignored.";
        uint32_t v4 = 2;
LABEL_10:
        _os_log_impl(&dword_1826F6000, v2, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)&v5, v4);
      }
    }
  }
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

unsigned char *OUTLINED_FUNCTION_1_0(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = 0;
  *a2 = 0;
  return result;
}

uint64_t createGraph(flatbuffers::FlatBufferBuilder *a1, MTLFunctionStitchingGraph *a2)
{
  uint64_t v325 = *MEMORY[0x1E4F143B8];
  reorderStitchingGraphNodes(a2, (uint64_t)&v318);
  v315 = 0;
  size_t v316 = 0;
  v317 = 0;
  BOOL v3 = (id *)v318;
  int v285 = v319;
  if (v318 != v319)
  {
    do
    {
      MTLGPUFamily v287 = v3;
      id v4 = *v3;
      if ([*v3 isMemberOfClass:objc_opt_class()])
      {
        uint64_t v312 = 0;
        BOOL v313 = 0;
        uint64_t v314 = 0;
        uint64_t v309 = 0;
        int v310 = 0;
        int v311 = 0;
        long long v305 = 0u;
        long long v306 = 0u;
        long long v307 = 0u;
        long long v308 = 0u;
        uint64_t v286 = v4;
        int v5 = (void *)[v4 arguments];
        uint64_t v6 = [v5 countByEnumeratingWithState:&v305 objects:v324 count:16];
        if (v6)
        {
          uint64_t v7 = *(void *)v306;
          do
          {
            for (uint64_t i = 0; i != v6; ++i)
            {
              if (*(void *)v306 != v7) {
                objc_enumerationMutation(v5);
              }
              uint64_t v304 = *(void *)(*((void *)&v305 + 1) + 8 * i);
              __p[0] = &v304;
              int v9 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, &v304, (uint64_t)&std::piecewise_construct, (void **)__p)+ 6);
              int v10 = v313;
              if (v313 >= v314)
              {
                int v12 = (char *)v312;
                uint64_t v13 = (v313 - (unsigned char *)v312) >> 2;
                unint64_t v14 = v13 + 1;
                if ((unint64_t)(v13 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v15 = v314 - (unsigned char *)v312;
                if ((v314 - (unsigned char *)v312) >> 1 > v14) {
                  unint64_t v14 = v15 >> 1;
                }
                if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v16 = v14;
                }
                if (v16)
                {
                  uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v16);
                  int v12 = (char *)v312;
                  int v10 = v313;
                }
                else
                {
                  uint64_t v17 = 0;
                }
                unint64_t v18 = &v17[4 * v13];
                *(_DWORD *)unint64_t v18 = v9;
                uint64_t v11 = v18 + 4;
                while (v10 != v12)
                {
                  int v19 = *((_DWORD *)v10 - 1);
                  v10 -= 4;
                  *((_DWORD *)v18 - 1) = v19;
                  v18 -= 4;
                }
                uint64_t v312 = v18;
                BOOL v313 = v11;
                uint64_t v314 = &v17[4 * v16];
                if (v12) {
                  operator delete(v12);
                }
              }
              else
              {
                *(_DWORD *)BOOL v313 = v9;
                uint64_t v11 = v10 + 4;
              }
              BOOL v313 = v11;
            }
            uint64_t v6 = [v5 countByEnumeratingWithState:&v305 objects:v324 count:16];
          }
          while (v6);
        }
        long long v302 = 0u;
        long long v303 = 0u;
        long long v300 = 0u;
        long long v301 = 0u;
        unint64_t v20 = (void *)[v286 controlDependencies];
        uint64_t v21 = [v20 countByEnumeratingWithState:&v300 objects:v323 count:16];
        if (v21)
        {
          uint64_t v22 = *(void *)v301;
          do
          {
            for (uint64_t j = 0; j != v21; ++j)
            {
              if (*(void *)v301 != v22) {
                objc_enumerationMutation(v20);
              }
              uint64_t v304 = *(void *)(*((void *)&v300 + 1) + 8 * j);
              __p[0] = &v304;
              int v24 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, &v304, (uint64_t)&std::piecewise_construct, (void **)__p)+ 6);
              uint64_t v25 = v310;
              if (v310 >= v311)
              {
                unint64_t v27 = (char *)v309;
                uint64_t v28 = (v310 - (unsigned char *)v309) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v30 = v311 - (unsigned char *)v309;
                if ((v311 - (unsigned char *)v309) >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v311, v31);
                  unint64_t v27 = (char *)v309;
                  uint64_t v25 = v310;
                }
                else
                {
                  unint64_t v32 = 0;
                }
                int v33 = &v32[4 * v28];
                *(_DWORD *)int v33 = v24;
                long long v26 = v33 + 4;
                while (v25 != v27)
                {
                  int v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *((_DWORD *)v33 - 1) = v34;
                  v33 -= 4;
                }
                uint64_t v309 = v33;
                int v310 = v26;
                int v311 = &v32[4 * v31];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)int v310 = v24;
                long long v26 = v25 + 4;
              }
              int v310 = v26;
            }
            uint64_t v21 = [v20 countByEnumeratingWithState:&v300 objects:v323 count:16];
          }
          while (v21);
        }
        if (v313 == v312) {
          uint64_t v35 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        }
        else {
          uint64_t v35 = (const unsigned __int8 *)v312;
        }
        int v36 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(a1, v35, (v313 - (unsigned char *)v312) >> 2);
        if (v310 == v309) {
          uint64_t v37 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        }
        else {
          uint64_t v37 = (const unsigned __int8 *)v309;
        }
        int v38 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(a1, v37, (v310 - (unsigned char *)v309) >> 2);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v286, "name"), "UTF8String"));
        if ((v299 & 0x80u) == 0) {
          unint64_t v39 = __p;
        }
        else {
          unint64_t v39 = (void **)__p[0];
        }
        if ((v299 & 0x80u) == 0) {
          unint64_t v40 = v299;
        }
        else {
          unint64_t v40 = (unint64_t)__p[1];
        }
        int String = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v39, v40);
        if ((char)v299 < 0) {
          operator delete(__p[0]);
        }
        *((unsigned char *)a1 + 70) = 1;
        int v42 = *((_DWORD *)a1 + 8);
        int v43 = *((_DWORD *)a1 + 12);
        int v44 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 8, v38);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v36);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, String);
        int v45 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v42 - (unsigned __int16)v43 + v44);
        *((unsigned char *)a1 + 70) = 1;
        int v46 = *((_DWORD *)a1 + 8);
        int v47 = *((_DWORD *)a1 + 12);
        int v48 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v45);
        unsigned int v49 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 2);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v49);
        int v50 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v46 - (unsigned __int16)v47 + v48);
        int v51 = v50;
        unint64_t v52 = v316;
        if (v316 >= v317)
        {
          unint64_t v92 = (char *)v315;
          uint64_t v93 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v95 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v94) {
            unint64_t v94 = v95 >> 1;
          }
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v96 = v94;
          }
          if (v96)
          {
            BOOL v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v96);
            unint64_t v92 = (char *)v315;
            unint64_t v52 = v316;
          }
          else
          {
            BOOL v97 = 0;
          }
          unint64_t v129 = &v97[4 * v93];
          *(_DWORD *)unint64_t v129 = v51;
          int v53 = v129 + 4;
          while (v52 != v92)
          {
            int v130 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *((_DWORD *)v129 - 1) = v130;
            v129 -= 4;
          }
          v315 = v129;
          size_t v316 = v53;
          v317 = &v97[4 * v96];
          if (v92) {
            operator delete(v92);
          }
        }
        else
        {
          *(_DWORD *)size_t v316 = v50;
          int v53 = v52 + 4;
        }
        size_t v316 = v53;
        if (v309)
        {
          int v310 = (char *)v309;
          operator delete(v309);
        }
LABEL_157:
        if (v312)
        {
          BOOL v313 = (char *)v312;
          operator delete(v312);
        }
        goto LABEL_259;
      }
      if ([v4 isMemberOfClass:objc_opt_class()])
      {
        uint64_t v312 = 0;
        BOOL v313 = 0;
        uint64_t v314 = 0;
        __p[0] = (void *)[v4 condition];
        uint64_t v309 = __p;
        LODWORD(v304) = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, __p, (uint64_t)&std::piecewise_construct, (void **)&v309)+ 6);
        long long v294 = 0u;
        long long v295 = 0u;
        long long v296 = 0u;
        long long v297 = 0u;
        int64_t v54 = (void *)[v4 controlDependencies];
        uint64_t v55 = [v54 countByEnumeratingWithState:&v294 objects:v322 count:16];
        if (v55)
        {
          uint64_t v56 = *(void *)v295;
          do
          {
            for (uint64_t k = 0; k != v55; ++k)
            {
              if (*(void *)v295 != v56) {
                objc_enumerationMutation(v54);
              }
              __p[0] = *(void **)(*((void *)&v294 + 1) + 8 * k);
              uint64_t v309 = __p;
              int v58 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, __p, (uint64_t)&std::piecewise_construct, (void **)&v309)+ 6);
              unint64_t v59 = v313;
              if (v313 >= v314)
              {
                unint64_t v61 = (char *)v312;
                uint64_t v62 = (v313 - (unsigned char *)v312) >> 2;
                unint64_t v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 62) {
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v64 = v314 - (unsigned char *)v312;
                if ((v314 - (unsigned char *)v312) >> 1 > v63) {
                  unint64_t v63 = v64 >> 1;
                }
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v65 = v63;
                }
                if (v65)
                {
                  unint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v65);
                  unint64_t v61 = (char *)v312;
                  unint64_t v59 = v313;
                }
                else
                {
                  unint64_t v66 = 0;
                }
                unint64_t v67 = &v66[4 * v62];
                *(_DWORD *)unint64_t v67 = v58;
                unint64_t v60 = v67 + 4;
                while (v59 != v61)
                {
                  int v68 = *((_DWORD *)v59 - 1);
                  v59 -= 4;
                  *((_DWORD *)v67 - 1) = v68;
                  v67 -= 4;
                }
                uint64_t v312 = v67;
                BOOL v313 = v60;
                uint64_t v314 = &v66[4 * v65];
                if (v61) {
                  operator delete(v61);
                }
              }
              else
              {
                *(_DWORD *)BOOL v313 = v58;
                unint64_t v60 = v59 + 4;
              }
              BOOL v313 = v60;
            }
            uint64_t v55 = [v54 countByEnumeratingWithState:&v294 objects:v322 count:16];
          }
          while (v55);
        }
        if (v313 == v312) {
          long long v69 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        }
        else {
          long long v69 = (const unsigned __int8 *)v312;
        }
        int v70 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(a1, v69, (v313 - (unsigned char *)v312) >> 2);
        *((unsigned char *)a1 + 70) = 1;
        int v71 = *((_DWORD *)a1 + 8);
        int v72 = *((_DWORD *)a1 + 12);
        int v73 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v70);
        flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>(a1, 4, &v304);
        int v74 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v71 - (unsigned __int16)v72 + v73);
        *((unsigned char *)a1 + 70) = 1;
        int v75 = *((_DWORD *)a1 + 8);
        int v76 = *((_DWORD *)a1 + 12);
        int v77 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v74);
        unsigned int v78 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 11);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v78);
        int v79 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v75 - (unsigned __int16)v76 + v77);
        int v80 = v79;
        long long v81 = v316;
        if (v316 >= v317)
        {
          uint64_t v123 = (char *)v315;
          uint64_t v124 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v126 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v125) {
            unint64_t v125 = v126 >> 1;
          }
          if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v127 = v125;
          }
          if (v127)
          {
            int v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v127);
            uint64_t v123 = (char *)v315;
            long long v81 = v316;
          }
          else
          {
            int v128 = 0;
          }
          unint64_t v146 = &v128[4 * v124];
          *(_DWORD *)unint64_t v146 = v80;
          unint64_t v82 = v146 + 4;
          while (v81 != v123)
          {
            int v147 = *((_DWORD *)v81 - 1);
            v81 -= 4;
            *((_DWORD *)v146 - 1) = v147;
            v146 -= 4;
          }
          v315 = v146;
          size_t v316 = v82;
          v317 = &v128[4 * v127];
          if (v123) {
            operator delete(v123);
          }
        }
        else
        {
          *(_DWORD *)size_t v316 = v79;
          unint64_t v82 = v81 + 4;
        }
        size_t v316 = v82;
        goto LABEL_157;
      }
      if ([v4 isMemberOfClass:objc_opt_class()])
      {
        int v83 = [v4 argumentIndex];
        *((unsigned char *)a1 + 70) = 1;
        uint64_t v84 = *((void *)a1 + 5);
        uint64_t v85 = *((void *)a1 + 6);
        uint64_t v86 = *((void *)a1 + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 4, v83, 0);
        int v87 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v86 - (unsigned __int16)v85 + (unsigned __int16)v84);
        *((unsigned char *)a1 + 70) = 1;
        LODWORD(v84) = *((_DWORD *)a1 + 8);
        LODWORD(v85) = *((_DWORD *)a1 + 12);
        LODWORD(v86) = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v87);
        unsigned int v88 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 1);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v88);
        int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v84 - (unsigned __int16)v85 + (unsigned __int16)v86);
        unint64_t v90 = v316;
        if (v316 >= v317)
        {
          unint64_t v117 = (char *)v315;
          uint64_t v143 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v144 = v143 + 1;
          if ((unint64_t)(v143 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v145 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v144) {
            unint64_t v144 = v145 >> 1;
          }
          if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v144;
          }
          if (v121)
          {
            int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            unint64_t v117 = (char *)v315;
            unint64_t v90 = v316;
          }
          else
          {
            int v122 = 0;
          }
          uint64_t v161 = &v122[4 * v143];
          *(_DWORD *)uint64_t v161 = v89;
          unint64_t v91 = v161 + 4;
          while (v90 != v117)
          {
            int v162 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v162;
            v161 -= 4;
          }
LABEL_256:
          v315 = v161;
          size_t v316 = v91;
          v317 = &v122[4 * v121];
          if (v117) {
            operator delete(v117);
          }
          goto LABEL_258;
        }
      }
      else if ([v4 isMemberOfClass:objc_opt_class()])
      {
        int v98 = [v4 bindIndex];
        *((unsigned char *)a1 + 70) = 1;
        int v99 = *((_DWORD *)a1 + 8);
        int v100 = *((_DWORD *)a1 + 12);
        int v101 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 6, v98, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 4, 0, 0);
        int v102 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v99 - (unsigned __int16)v100 + v101);
        unsigned int v103 = [v4 byteOffset];
        *((unsigned char *)a1 + 70) = 1;
        int v104 = *((_DWORD *)a1 + 8);
        int v105 = *((_DWORD *)a1 + 12);
        int v106 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(a1, 6, v103, 0);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v102);
        int v107 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v104 - (unsigned __int16)v105 + v106);
        int v108 = [v4 dereference];
        *((unsigned char *)a1 + 70) = 1;
        uint64_t v109 = *((void *)a1 + 5);
        uint64_t v110 = *((void *)a1 + 6);
        uint64_t v111 = *((void *)a1 + 4);
        if (v108)
        {
          flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v107);
          int v112 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v111 - (unsigned __int16)v110 + (unsigned __int16)v109);
          *((unsigned char *)a1 + 70) = 1;
          int v113 = *((_DWORD *)a1 + 8);
          int v114 = *((_DWORD *)a1 + 12);
          int v115 = *((_DWORD *)a1 + 10);
          flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v112);
          unsigned int v116 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 5);
          flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v116);
          int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v113 - (unsigned __int16)v114 + v115);
          unint64_t v90 = v316;
          if (v316 >= v317)
          {
            unint64_t v117 = (char *)v315;
            uint64_t v118 = (v316 - (unsigned char *)v315) >> 2;
            unint64_t v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 62) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v120 = v317 - (unsigned char *)v315;
            if ((v317 - (unsigned char *)v315) >> 1 > v119) {
              unint64_t v119 = v120 >> 1;
            }
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v119;
            }
            if (v121)
            {
              int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
              unint64_t v117 = (char *)v315;
              unint64_t v90 = v316;
            }
            else
            {
              int v122 = 0;
            }
            uint64_t v161 = &v122[4 * v118];
            *(_DWORD *)uint64_t v161 = v89;
            unint64_t v91 = v161 + 4;
            while (v90 != v117)
            {
              int v183 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *((_DWORD *)v161 - 1) = v183;
              v161 -= 4;
            }
            goto LABEL_256;
          }
        }
        else
        {
          flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v107);
          unsigned int v157 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 4);
          flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v157);
          int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v111 - (unsigned __int16)v110 + (unsigned __int16)v109);
          unint64_t v90 = v316;
          if (v316 >= v317)
          {
            unint64_t v117 = (char *)v315;
            uint64_t v158 = (v316 - (unsigned char *)v315) >> 2;
            unint64_t v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 62) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v160 = v317 - (unsigned char *)v315;
            if ((v317 - (unsigned char *)v315) >> 1 > v159) {
              unint64_t v159 = v160 >> 1;
            }
            if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v159;
            }
            if (v121)
            {
              int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
              unint64_t v117 = (char *)v315;
              unint64_t v90 = v316;
            }
            else
            {
              int v122 = 0;
            }
            uint64_t v161 = &v122[4 * v158];
            *(_DWORD *)uint64_t v161 = v89;
            unint64_t v91 = v161 + 4;
            while (v90 != v117)
            {
              int v182 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *((_DWORD *)v161 - 1) = v182;
              v161 -= 4;
            }
            goto LABEL_256;
          }
        }
      }
      else if ([v4 isMemberOfClass:objc_opt_class()])
      {
        int v131 = [v4 bindIndex];
        *((unsigned char *)a1 + 70) = 1;
        int v132 = *((_DWORD *)a1 + 8);
        int v133 = *((_DWORD *)a1 + 12);
        int v134 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 6, v131, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 4, 0, 0);
        int v135 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v132 - (unsigned __int16)v133 + v134);
        *((unsigned char *)a1 + 70) = 1;
        int v136 = *((_DWORD *)a1 + 8);
        int v137 = *((_DWORD *)a1 + 12);
        int v138 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v135);
        unsigned int v139 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 3);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v139);
        int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v136 - (unsigned __int16)v137 + v138);
        unint64_t v90 = v316;
        if (v316 >= v317)
        {
          unint64_t v117 = (char *)v315;
          uint64_t v140 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v141 = v140 + 1;
          if ((unint64_t)(v140 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v142 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v141) {
            unint64_t v141 = v142 >> 1;
          }
          if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v141;
          }
          if (v121)
          {
            int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            unint64_t v117 = (char *)v315;
            unint64_t v90 = v316;
          }
          else
          {
            int v122 = 0;
          }
          uint64_t v161 = &v122[4 * v140];
          *(_DWORD *)uint64_t v161 = v89;
          unint64_t v91 = v161 + 4;
          while (v90 != v117)
          {
            int v181 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v181;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if ([v4 isMemberOfClass:objc_opt_class()])
      {
        int v148 = [v4 bindIndex];
        *((unsigned char *)a1 + 70) = 1;
        uint64_t v149 = *((void *)a1 + 5);
        uint64_t v150 = *((void *)a1 + 6);
        uint64_t v151 = *((void *)a1 + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 4, v148, 0);
        int v152 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v151 - (unsigned __int16)v150 + (unsigned __int16)v149);
        *((unsigned char *)a1 + 70) = 1;
        LODWORD(v149) = *((_DWORD *)a1 + 8);
        LODWORD(v150) = *((_DWORD *)a1 + 12);
        LODWORD(v151) = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v152);
        unsigned int v153 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 6);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v153);
        int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v149 - (unsigned __int16)v150 + (unsigned __int16)v151);
        unint64_t v90 = v316;
        if (v316 >= v317)
        {
          unint64_t v117 = (char *)v315;
          uint64_t v154 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v155 = v154 + 1;
          if ((unint64_t)(v154 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v156 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v155) {
            unint64_t v155 = v156 >> 1;
          }
          if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v155;
          }
          if (v121)
          {
            int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            unint64_t v117 = (char *)v315;
            unint64_t v90 = v316;
          }
          else
          {
            int v122 = 0;
          }
          uint64_t v161 = &v122[4 * v154];
          *(_DWORD *)uint64_t v161 = v89;
          unint64_t v91 = v161 + 4;
          while (v90 != v117)
          {
            int v192 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v192;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if ([v4 isMemberOfClass:objc_opt_class()])
      {
        int v163 = [v4 bindIndex];
        *((unsigned char *)a1 + 70) = 1;
        uint64_t v164 = *((void *)a1 + 5);
        uint64_t v165 = *((void *)a1 + 6);
        uint64_t v166 = *((void *)a1 + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 4, v163, 0);
        int v167 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v166 - (unsigned __int16)v165 + (unsigned __int16)v164);
        *((unsigned char *)a1 + 70) = 1;
        LODWORD(v164) = *((_DWORD *)a1 + 8);
        LODWORD(v165) = *((_DWORD *)a1 + 12);
        LODWORD(v166) = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v167);
        unsigned int v168 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 7);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v168);
        int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v164 - (unsigned __int16)v165 + (unsigned __int16)v166);
        unint64_t v90 = v316;
        if (v316 >= v317)
        {
          unint64_t v117 = (char *)v315;
          uint64_t v169 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v171 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v170) {
            unint64_t v170 = v171 >> 1;
          }
          if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v170;
          }
          if (v121)
          {
            int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            unint64_t v117 = (char *)v315;
            unint64_t v90 = v316;
          }
          else
          {
            int v122 = 0;
          }
          uint64_t v161 = &v122[4 * v169];
          *(_DWORD *)uint64_t v161 = v89;
          unint64_t v91 = v161 + 4;
          while (v90 != v117)
          {
            int v205 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v205;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if ([v4 isMemberOfClass:objc_opt_class()])
      {
        int v172 = [v4 bindIndex];
        *((unsigned char *)a1 + 70) = 1;
        uint64_t v173 = *((void *)a1 + 5);
        uint64_t v174 = *((void *)a1 + 6);
        uint64_t v175 = *((void *)a1 + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 4, v172, 0);
        int v176 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v175 - (unsigned __int16)v174 + (unsigned __int16)v173);
        *((unsigned char *)a1 + 70) = 1;
        LODWORD(v173) = *((_DWORD *)a1 + 8);
        LODWORD(v174) = *((_DWORD *)a1 + 12);
        LODWORD(v175) = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v176);
        unsigned int v177 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 8);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v177);
        int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v173 - (unsigned __int16)v174 + (unsigned __int16)v175);
        unint64_t v90 = v316;
        if (v316 >= v317)
        {
          unint64_t v117 = (char *)v315;
          uint64_t v178 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v180 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v179) {
            unint64_t v179 = v180 >> 1;
          }
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v179;
          }
          if (v121)
          {
            int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            unint64_t v117 = (char *)v315;
            unint64_t v90 = v316;
          }
          else
          {
            int v122 = 0;
          }
          uint64_t v161 = &v122[4 * v178];
          *(_DWORD *)uint64_t v161 = v89;
          unint64_t v91 = v161 + 4;
          while (v90 != v117)
          {
            int v207 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v207;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if ([v4 isMemberOfClass:objc_opt_class()])
      {
        *((unsigned char *)a1 + 70) = 1;
        int v184 = flatbuffers::FlatBufferBuilder::EndTable(a1, *((_WORD *)a1 + 16) - *((_WORD *)a1 + 24) + *((_DWORD *)a1 + 10));
        *((unsigned char *)a1 + 70) = 1;
        int v185 = *((_DWORD *)a1 + 8);
        int v186 = *((_DWORD *)a1 + 12);
        int v187 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v184);
        unsigned int v188 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 9);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v188);
        int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v185 - (unsigned __int16)v186 + v187);
        unint64_t v90 = v316;
        if (v316 >= v317)
        {
          unint64_t v117 = (char *)v315;
          uint64_t v189 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v190 = v189 + 1;
          if ((unint64_t)(v189 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v191 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v190) {
            unint64_t v190 = v191 >> 1;
          }
          if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v190;
          }
          if (v121)
          {
            int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            unint64_t v117 = (char *)v315;
            unint64_t v90 = v316;
          }
          else
          {
            int v122 = 0;
          }
          uint64_t v161 = &v122[4 * v189];
          *(_DWORD *)uint64_t v161 = v89;
          unint64_t v91 = v161 + 4;
          while (v90 != v117)
          {
            int v208 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v208;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else
      {
        if (![v4 isMemberOfClass:objc_opt_class()])
        {
          if ([v4 isMemberOfClass:objc_opt_class()])
          {
            int BuiltinNode = Mtl::FunctionStitching::CreateBuiltinNode((uint64_t)a1, 0);
            LODWORD(v312) = Mtl::FunctionStitching::CreateNode((uint64_t)a1, 10, BuiltinNode);
            std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>::push_back[abi:ne180100]((uint64_t)&v315, &v312);
          }
          goto LABEL_259;
        }
        *((unsigned char *)a1 + 70) = 1;
        int v193 = *((_DWORD *)a1 + 8);
        int v194 = *((_DWORD *)a1 + 12);
        int v195 = *((_DWORD *)a1 + 10);
        unsigned int v196 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 1);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v196);
        int v197 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v193 - (unsigned __int16)v194 + v195);
        *((unsigned char *)a1 + 70) = 1;
        int v198 = *((_DWORD *)a1 + 8);
        int v199 = *((_DWORD *)a1 + 12);
        int v200 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v197);
        unsigned int v201 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 10);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v201);
        int v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v198 - (unsigned __int16)v199 + v200);
        unint64_t v90 = v316;
        if (v316 >= v317)
        {
          unint64_t v117 = (char *)v315;
          uint64_t v202 = (v316 - (unsigned char *)v315) >> 2;
          unint64_t v203 = v202 + 1;
          if ((unint64_t)(v202 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v204 = v317 - (unsigned char *)v315;
          if ((v317 - (unsigned char *)v315) >> 1 > v203) {
            unint64_t v203 = v204 >> 1;
          }
          if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v203;
          }
          if (v121)
          {
            int v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            unint64_t v117 = (char *)v315;
            unint64_t v90 = v316;
          }
          else
          {
            int v122 = 0;
          }
          uint64_t v161 = &v122[4 * v202];
          *(_DWORD *)uint64_t v161 = v89;
          unint64_t v91 = v161 + 4;
          while (v90 != v117)
          {
            int v209 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v209;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      *(_DWORD *)unint64_t v90 = v89;
      unint64_t v91 = v90 + 4;
LABEL_258:
      size_t v316 = v91;
LABEL_259:
      BOOL v3 = v287 + 1;
    }
    while (v287 + 1 != v285);
  }
  uint64_t v210 = a2;
  uint64_t v211 = [(NSString *)[(MTLFunctionStitchingGraph *)a2 functionName] UTF8String];
  size_t v212 = strlen(v211);
  int v213 = flatbuffers::FlatBufferBuilder::CreateString(a1, v211, v212);
  uint64_t v312 = 0;
  BOOL v313 = 0;
  uint64_t v314 = 0;
  long long v290 = 0u;
  long long v291 = 0u;
  long long v292 = 0u;
  long long v293 = 0u;
  v214 = [(MTLFunctionStitchingGraph *)a2 attributes];
  uint64_t v215 = [(NSArray *)v214 countByEnumeratingWithState:&v290 objects:v321 count:16];
  if (!v215)
  {
LABEL_305:
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      *((unsigned char *)a1 + 70) = 1;
      int v253 = flatbuffers::FlatBufferBuilder::EndTable(a1, *((_WORD *)a1 + 16) - *((_WORD *)a1 + 24) + *((_DWORD *)a1 + 10));
      *((unsigned char *)a1 + 70) = 1;
      int v254 = *((_DWORD *)a1 + 8);
      int v255 = *((_DWORD *)a1 + 12);
      int v256 = *((_DWORD *)a1 + 10);
      flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v253);
      unsigned int v257 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
      flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v257);
      int v258 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v254 - (unsigned __int16)v255 + v256);
      int v259 = v258;
      uint64_t v260 = v313;
      if (v313 >= v314)
      {
        uint64_t v262 = (char *)v312;
        uint64_t v263 = (v313 - (unsigned char *)v312) >> 2;
        unint64_t v264 = v263 + 1;
        if ((unint64_t)(v263 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v265 = v314 - (unsigned char *)v312;
        if ((v314 - (unsigned char *)v312) >> 1 > v264) {
          unint64_t v264 = v265 >> 1;
        }
        if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v266 = v264;
        }
        if (v266)
        {
          int v267 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v266);
          uint64_t v262 = (char *)v312;
          uint64_t v260 = v313;
        }
        else
        {
          int v267 = 0;
        }
        uint64_t v268 = &v267[4 * v263];
        int v269 = &v267[4 * v266];
        *(_DWORD *)uint64_t v268 = v259;
        int v261 = v268 + 4;
        while (v260 != v262)
        {
          int v270 = *((_DWORD *)v260 - 1);
          v260 -= 4;
          *((_DWORD *)v268 - 1) = v270;
          v268 -= 4;
        }
        uint64_t v312 = v268;
        BOOL v313 = v261;
        uint64_t v314 = v269;
        if (v262) {
          operator delete(v262);
        }
      }
      else
      {
        *(_DWORD *)BOOL v313 = v258;
        int v261 = v260 + 4;
      }
      BOOL v313 = v261;
    }
    goto LABEL_323;
  }
  int v288 = v213;
  char v289 = 0;
  uint64_t v216 = *(void *)v291;
  do
  {
    for (uint64_t m = 0; m != v215; ++m)
    {
      if (*(void *)v291 != v216) {
        objc_enumerationMutation(v214);
      }
      char v218 = *(void **)(*((void *)&v290 + 1) + 8 * m);
      if ([v218 isMemberOfClass:objc_opt_class()])
      {
        *((unsigned char *)a1 + 70) = 1;
        int v219 = flatbuffers::FlatBufferBuilder::EndTable(a1, *((_WORD *)a1 + 16) - *((_WORD *)a1 + 24) + *((_WORD *)a1 + 20));
        *((unsigned char *)a1 + 70) = 1;
        int v220 = *((_DWORD *)a1 + 8);
        int v221 = *((_DWORD *)a1 + 12);
        int v222 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v219);
        unsigned int v223 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 1);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v223);
        int v224 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v220 - (unsigned __int16)v221 + v222);
        int v225 = v224;
        unsigned __int8 v226 = v313;
        if (v313 >= v314)
        {
          unsigned int v237 = (char *)v312;
          uint64_t v238 = (v313 - (unsigned char *)v312) >> 2;
          unint64_t v239 = v238 + 1;
          if ((unint64_t)(v238 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v240 = v314 - (unsigned char *)v312;
          if ((v314 - (unsigned char *)v312) >> 1 > v239) {
            unint64_t v239 = v240 >> 1;
          }
          if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v241 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v241 = v239;
          }
          if (v241)
          {
            uint64_t v242 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v241);
            unsigned int v237 = (char *)v312;
            unsigned __int8 v226 = v313;
          }
          else
          {
            uint64_t v242 = 0;
          }
          BOOL v249 = &v242[4 * v238];
          *(_DWORD *)BOOL v249 = v225;
          long long v236 = v249 + 4;
          while (v226 != v237)
          {
            int v250 = *((_DWORD *)v226 - 1);
            v226 -= 4;
            *((_DWORD *)v249 - 1) = v250;
            v249 -= 4;
          }
          uint64_t v312 = v249;
          BOOL v313 = v236;
          uint64_t v314 = &v242[4 * v241];
          if (v237) {
            operator delete(v237);
          }
          goto LABEL_301;
        }
        *(_DWORD *)BOOL v313 = v224;
        long long v227 = v226 + 4;
      }
      else
      {
        if (![v218 isMemberOfClass:objc_opt_class()]) {
          continue;
        }
        *((unsigned char *)a1 + 70) = 1;
        int v228 = flatbuffers::FlatBufferBuilder::EndTable(a1, *((_WORD *)a1 + 16) - *((_WORD *)a1 + 24) + *((_WORD *)a1 + 20));
        *((unsigned char *)a1 + 70) = 1;
        int v229 = *((_DWORD *)a1 + 8);
        int v230 = *((_DWORD *)a1 + 12);
        int v231 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v228);
        unsigned int v232 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
        flatbuffers::FlatBufferBuilder::TrackField(a1, 4, v232);
        int v233 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v229 - (unsigned __int16)v230 + v231);
        int v234 = v233;
        uint64_t v235 = v313;
        if (v313 >= v314)
        {
          int v243 = (char *)v312;
          uint64_t v244 = (v313 - (unsigned char *)v312) >> 2;
          unint64_t v245 = v244 + 1;
          if ((unint64_t)(v244 + 1) >> 62) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v246 = v314 - (unsigned char *)v312;
          if ((v314 - (unsigned char *)v312) >> 1 > v245) {
            unint64_t v245 = v246 >> 1;
          }
          if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v247 = v245;
          }
          if (v247)
          {
            unsigned __int16 v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v247);
            int v243 = (char *)v312;
            uint64_t v235 = v313;
          }
          else
          {
            unsigned __int16 v248 = 0;
          }
          int v251 = &v248[4 * v244];
          *(_DWORD *)int v251 = v234;
          long long v236 = v251 + 4;
          while (v235 != v243)
          {
            int v252 = *((_DWORD *)v235 - 1);
            v235 -= 4;
            *((_DWORD *)v251 - 1) = v252;
            v251 -= 4;
          }
          uint64_t v312 = v251;
          BOOL v313 = v236;
          uint64_t v314 = &v248[4 * v247];
          if (v243) {
            operator delete(v243);
          }
          char v289 = 1;
          goto LABEL_301;
        }
        *(_DWORD *)BOOL v313 = v233;
        long long v227 = v235 + 4;
        char v289 = 1;
      }
      long long v236 = v227;
LABEL_301:
      BOOL v313 = v236;
    }
    uint64_t v215 = [(NSArray *)v214 countByEnumeratingWithState:&v290 objects:v321 count:16];
  }
  while (v215);
  uint64_t v210 = a2;
  int v213 = v288;
  if ((v289 & 1) == 0) {
    goto LABEL_305;
  }
LABEL_323:
  if (v313 == v312) {
    int v271 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Air::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Air::FunctionStitching::Attribute>> const&)::t;
  }
  else {
    int v271 = v312;
  }
  int v272 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v271, (v313 - (unsigned char *)v312) >> 2);
  if (v316 == v315) {
    int v273 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Air::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Air::FunctionStitching::Node>> const&)::t;
  }
  else {
    int v273 = v315;
  }
  int v274 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v273, (v316 - (unsigned char *)v315) >> 2);
  if ([(MTLFunctionStitchingGraph *)v210 outputNode])
  {
    __p[0] = [(MTLFunctionStitchingGraph *)v210 outputNode];
    uint64_t v309 = __p;
    int v275 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, __p, (uint64_t)&std::piecewise_construct, (void **)&v309)+ 6);
  }
  else
  {
    int v275 = 0;
  }
  LODWORD(v304) = v275;
  uint64_t v276 = [(MTLFunctionStitchingGraph *)v210 outputNode];
  int v277 = v272;
  *((unsigned char *)a1 + 70) = 1;
  int v278 = *((_DWORD *)a1 + 8);
  int v279 = *((_DWORD *)a1 + 12);
  int v280 = *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 10, v277);
  if (v276) {
    int v281 = &v304;
  }
  else {
    int v281 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>(a1, 8, v281);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 6, v274);
  flatbuffers::FlatBufferBuilder::AddOffset<void>(a1, 4, v213);
  uint64_t v282 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v278 - (unsigned __int16)v279 + v280);
  if (v312)
  {
    BOOL v313 = (char *)v312;
    operator delete(v312);
  }
  if (v315)
  {
    size_t v316 = (char *)v315;
    operator delete(v315);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v320);
  if (v318)
  {
    v319 = (id *)v318;
    operator delete(v318);
  }
  return v282;
}

void sub_1827685F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  std::pair<std::vector<objc_object  {objcproto24MTLFunctionStitchingNode}*>,std::unordered_map<objc_object  {objcproto24MTLFunctionStitchingNode},unsigned int,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,objc_object  {objcproto24MTLFunctionStitchingNode}*<std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>>>::~pair((uint64_t)&a64);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(flatbuffers::FlatBufferBuilder *a1, const unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v6 = 4 * a3;
  *((unsigned char *)a1 + 70) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 4uLL);
  flatbuffers::vector_downward::push(a1, a2, v6);
  *((unsigned char *)a1 + 70) = 0;

  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v3);
}

flatbuffers::FlatBufferBuilder *flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>(flatbuffers::FlatBufferBuilder *result, uint64_t a2, _DWORD *a3)
{
  if (a3)
  {
    int v5 = result;
    flatbuffers::FlatBufferBuilder::Align(result, 4uLL);
    uint64_t v6 = *((void *)v5 + 6);
    if ((unint64_t)(v6 - *((void *)v5 + 7)) <= 3)
    {
      flatbuffers::vector_downward::reallocate(v5, 4uLL);
      uint64_t v6 = *((void *)v5 + 6);
    }
    *(_DWORD *)(v6 - 4) = *a3;
    uint64_t v7 = v6 - 4;
    *((void *)v5 + 6) = v7;
    unsigned int v8 = *((_DWORD *)v5 + 8) - v7 + *((_DWORD *)v5 + 10);
    return (flatbuffers::FlatBufferBuilder *)flatbuffers::FlatBufferBuilder::TrackField(v5, a2, v8);
  }
  return result;
}

void std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unsigned int v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v12);
      unsigned int v8 = *(_DWORD **)a1;
      uint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)unint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t Mtl::FunctionStitching::CreateBuiltinNode(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 70) = 1;
  int v3 = *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 4, a2, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v3);
}

uint64_t Mtl::FunctionStitching::CreateNode(uint64_t a1, int a2, int a3)
{
  *(unsigned char *)(a1 + 70) = 1;
  int v5 = *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((flatbuffers::FlatBufferBuilder *)a1, 6, a3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((void *)a1, 4, a2, 0);

  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v5);
}

id newDAGStringFromFunctionGraphs(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  uint64_t v112 = a3;
  if (newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::onceToken != -1) {
    dispatch_once(&newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::onceToken, &__block_literal_global_1930);
  }
  int v4 = (a2 >> 2) & 1;
  if (newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::staticAllowBadLegacyDAGs) {
    LOBYTE(v4) = 1;
  }
  unsigned __int8 v111 = v4;
  BOOL v110 = 0;
  uint64_t v108 = 0;
  id v109 = (id)[objc_alloc(MEMORY[0x1E4F28E78]) initWithString:@"DAGS {\n"];
  if ([a1 count])
  {
    while (1)
    {
      id v107 = 0;
      int v5 = (void *)[a1 objectAtIndexedSubscript:v108];
      id v107 = v5;
      if (v110) {
        goto LABEL_34;
      }
      if (!v5)
      {
        BOOL v110 = 1;
        _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu] cannot be nil.", v6, v7, v8, v9, v10, v108);
        if (v110) {
          goto LABEL_34;
        }
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        BOOL v110 = 1;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu] is not a MTLFunctionStitchingGraph.", v11, v12, v13, v14, v15, v95);
      }
      if (v110) {
        goto LABEL_34;
      }
      BOOL v110 = [v107 functionName] == 0;
      if (![v107 functionName]) {
        _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].functionName cannot be nil", v16, v17, v18, v19, v20, v108);
      }
      if (v110) {
        goto LABEL_34;
      }
      [v107 functionName];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        BOOL v110 = 1;
      }
      [v107 functionName];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].functionName is not an NSString.", v21, v22, v23, v24, v25, v108);
      }
      if (v110) {
        goto LABEL_34;
      }
      BOOL v110 = objc_msgSend((id)objc_msgSend(v107, "functionName"), "isEqualToString:", &stru_1ECAC84A8) != 0;
      if (objc_msgSend((id)objc_msgSend(v107, "functionName"), "isEqualToString:", &stru_1ECAC84A8)) {
        _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].functionName cannot be empty.", v26, v27, v28, v29, v30, v108);
      }
      if (v110) {
        goto LABEL_34;
      }
      objc_msgSend(v109, "appendString:", objc_msgSend(v107, "functionName"));
      if (v110) {
        goto LABEL_34;
      }
      [v109 appendString:@" {\n"];
      if (v110) {
        goto LABEL_34;
      }
      BOOL v110 = [v107 attributes] == 0;
      if (![v107 attributes]) {
        _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].attributes cannot be nil.", v31, v32, v33, v34, v35, v108);
      }
      if (v110) {
        goto LABEL_34;
      }
      [v107 attributes];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        BOOL v110 = 1;
      }
      [v107 attributes];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].attributes is not an NSArray.", v36, v37, v38, v39, v40, v108);
      }
      if (v110 || !objc_msgSend((id)objc_msgSend(v107, "attributes"), "count")) {
        goto LABEL_34;
      }
      unint64_t v41 = 0;
      char v42 = 0;
      do
      {
        objc_msgSend((id)objc_msgSend(v107, "attributes"), "objectAtIndexedSubscript:", v41);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if (!v110) {
            [v109 appendString:@"ALWAYS_INLINE;\n"];
          }
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if (!v110) {
              [v109 appendString:@"KERNEL;\n"];
            }
            char v42 = 1;
          }
          else if (!v110)
          {
            BOOL v110 = 1;
            uint64_t v43 = v112;
            uint64_t v44 = v108;
            int v45 = (objc_class *)objc_opt_class();
            NSStringFromClass(v45);
            _MTLMessageContextPush_(v43, 8, @"functionGraphs[%lu].attributes[%lu] is of incorrect type: %@.", v46, v47, v48, v49, v50, v44);
          }
        }
        ++v41;
      }
      while (v41 < objc_msgSend((id)objc_msgSend(v107, "attributes"), "count"));
      if ((v42 & 1) == 0)
      {
LABEL_34:
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & !v110) == 1) {
          [v109 appendString:@"KERNEL;\n"];
        }
      }
      if ([v107 outputNode]) {
        goto LABEL_56;
      }
      if (!v110)
      {
        BOOL v110 = [v107 nodes] == 0;
        if (![v107 nodes]) {
          _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].nodes cannot be nil if functionGraphs[%lu].outputNode is nil.", v51, v52, v53, v54, v55, v108);
        }
        if (!v110) {
          break;
        }
      }
      long long v104 = 0u;
      long long v105 = 0u;
      float v106 = 1.0;
      uint64_t v103 = -1;
LABEL_75:
      v97[0] = &v110;
      v97[1] = &v112;
      v97[2] = &v108;
      v97[3] = &v109;
      v97[4] = &v107;
      v97[5] = &v111;
      v97[6] = &v103;
      v97[7] = &v104;
      if (!v110)
      {
        [v107 nodes];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          BOOL v110 = 1;
        }
        [v107 nodes];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].nodes is not an NSArray.", v74, v75, v76, v77, v78, v108);
        }
        if (!v110)
        {
          for (uint64_t i = 0;
                (unint64_t)i < objc_msgSend((id)objc_msgSend(v107, "nodes"), "count");
                uint64_t i = (NSString *)((char *)i + 1))
          {
            int v80 = objc_msgSend((id)objc_msgSend(v107, "nodes"), "objectAtIndexedSubscript:", i);
            newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator()((uint64_t)v97, v80, i, i == (NSString *)v103, v81, v82, v83, v84);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              int v85 = [v80 isEarlyReturn];
              if (v110) {
                int v86 = 0;
              }
              else {
                int v86 = v85;
              }
              if (v86 == 1)
              {
                uint64_t v95 = (uint64_t)i;
                [v109 appendString:objc_msgSend(NSString, "stringWithFormat:", @"NODE(node_early_return) : EARLY_RETURN, NODE(node_%lu);\n")];
              }
            }
          }
          BOOL v87 = v110;
          if (!v110 && v103 == -1)
          {
            if ([v107 outputNode])
            {
              unsigned int v88 = (void *)[v107 outputNode];
              newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator()((uint64_t)v97, v88, (NSString *)0xFFFFFFFFFFFFFFFFLL, 1, v89, v90, v91, v92);
            }
            BOOL v87 = v110;
          }
          if (!v87) {
            [v109 appendString:@"}\n"];
          }
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&v104);
      unint64_t v93 = ++v108;
      if (v93 >= [a1 count]) {
        goto LABEL_102;
      }
    }
    BOOL v110 = objc_msgSend((id)objc_msgSend(v107, "nodes"), "count") == 0;
    if (!objc_msgSend((id)objc_msgSend(v107, "nodes"), "count")) {
      _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].nodes cannot be empty if functionGraphs[%lu].outputNode is nil.", v56, v57, v58, v59, v60, v108);
    }
LABEL_56:
    long long v104 = 0u;
    long long v105 = 0u;
    float v106 = 1.0;
    uint64_t v103 = -1;
    if (!v110)
    {
      if ([v107 nodes])
      {
        unint64_t v61 = objc_msgSend((id)objc_msgSend(v107, "nodes"), "count");
        std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>((uint64_t)&v104, vcvtps_u32_f32((float)v61 / v106));
        long long v98 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v101 = 0u;
        uint64_t v62 = (void *)[v107 nodes];
        uint64_t v63 = [v62 countByEnumeratingWithState:&v98 objects:v113 count:16];
        if (v63)
        {
          uint64_t v64 = 0;
          uint64_t v65 = *(void *)v99;
          do
          {
            for (uint64_t j = 0; j != v63; ++j)
            {
              if (*(void *)v99 != v65) {
                objc_enumerationMutation(v62);
              }
              uint64_t v102 = 0;
              uint64_t v102 = *(void *)(*((void *)&v98 + 1) + 8 * j);
              uint64_t v67 = v102;
              if (v67 == [v107 outputNode] && v111 == 0) {
                uint64_t v103 = v64 + j;
              }
              if (std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(&v104, &v102))
              {
                if (!(v110 | v111))
                {
                  BOOL v110 = 1;
                  _MTLMessageContextPush_(v112, 8, @"functionGraphs[%lu].nodes[%lu] was listed again in the same graph at .nodes[%lu].", v69, v70, v71, v72, v73, v108);
                }
              }
              else
              {
                v97[0] = &v102;
                std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::__emplace_unique_key_args<MTLFunctionStitchingFunctionNode *,std::piecewise_construct_t const&,std::tuple<MTLFunctionStitchingFunctionNode * const&>,std::tuple<>>((uint64_t)&v104, &v102, (uint64_t)&std::piecewise_construct, v97)[3] = v64 + j;
              }
            }
            uint64_t v63 = [v62 countByEnumeratingWithState:&v98 objects:v113 count:16];
            v64 += j;
          }
          while (v63);
        }
      }
    }
    goto LABEL_75;
  }
LABEL_102:
  if (v110 || ([v109 appendString:@"}\n"], v110)) {
    [v109 setString:&stru_1ECAC84A8];
  }
  return v109;
}

void sub_182769400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void *std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::__emplace_unique_key_args<MTLFunctionStitchingFunctionNode *,std::piecewise_construct_t const&,std::tuple<MTLFunctionStitchingFunctionNode * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182769688(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL30shouldOutputNodePropertyRetainv_block_invoke()
{
  uint64_t result = dyld_program_sdk_at_least();
  shouldOutputNodePropertyRetain(void)::uint64_t result = result;
  return result;
}

void MTLSetShaderCachePath(void *a1)
{
  uint64_t v1 = (const char *)[a1 UTF8String];

  setShaderCacheMainFolder(v1);
}

uint64_t ___ZL30newDAGStringFromFunctionGraphsP7NSArrayIP25MTLFunctionStitchingGraphEmP18_MTLMessageContext_block_invoke()
{
  uint64_t result = dyld_program_sdk_at_least();
  newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::staticAllowBadLegacyDAGs = result ^ 1;
  return result;
}

void MTLCompilerConnectionManagerPrivate::buildRequest(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v35[0] = 0;
  v35[1] = v35;
  _OWORD v35[2] = 0x2020000000;
  _OWORD v35[3] = -1;
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000;
  uint64_t v34 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x3052000000;
  uint64_t v28 = __Block_byref_object_copy__4;
  uint64_t v29 = __Block_byref_object_dispose__4;
  uint64_t v30 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = &v17;
  uint64_t v19 = 0x4012000000;
  size_t v20 = __Block_byref_object_copy__61;
  uint64_t v21 = __Block_byref_object_dispose__62;
  uint64_t v22 = &unk_1828FE28A;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  v15[0] = 0;
  v15[1] = v15;
  void v15[2] = 0x4012000000;
  v15[3] = __Block_byref_object_copy__61;
  v15[4] = __Block_byref_object_dispose__62;
  v15[5] = &unk_1828FE28A;
  uint64_t v15[6] = 0;
  float v16 = 0;
  unint64_t v8 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN35MTLCompilerConnectionManagerPrivate12buildRequestEjP18MTLCompilerRequestbU13block_pointerFv16MTLCompilerErrorPU27objcproto16OS_dispatch_data8NSObjectPKcE_block_invoke;
  block[3] = &unk_1E5220748;
  void block[4] = v35;
  void block[5] = v15;
  int v14 = a2;
  block[6] = &v31;
  block[7] = &v25;
  block[8] = &v17;
  block[9] = a1;
  dispatch_sync(v8, block);
  uint64_t v9 = v18[6];
  uint64_t v10 = v32[3];
  uint64_t v11 = v26[5];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = ___ZN35MTLCompilerConnectionManagerPrivate12buildRequestEjP18MTLCompilerRequestbU13block_pointerFv16MTLCompilerErrorPU27objcproto16OS_dispatch_data8NSObjectPKcE_block_invoke_2;
  void v12[3] = &unk_1E5220770;
  v12[4] = a5;
  v12[5] = &v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void *))(*(void *)v9 + 16))(v9, a3, v10, v11, 0, a4, v12);
  _Block_object_dispose(v15, 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Block_object_dispose(&v17, 8);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(v35, 8);
}

void sub_182769D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,std::__shared_weak_count *a35)
{
  _Block_object_dispose(&a27, 8);
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  MTLCompilerConnectionManagerPrivate::buildRequest((int)&a27, &a35);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Block_object_dispose((const void *)(v35 - 128), 8);
  _Block_object_dispose((const void *)(v35 - 96), 8);
  _Unwind_Resume(a1);
}

void XPCCompilerConnection::BuildRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 28), 1u);
  unint64_t v8 = *(NSObject **)(a1 + 8);
  if (a6)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN21XPCCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke;
    block[3] = &unk_1E52206A8;
    int v13 = a5;
    block[6] = a1;
    block[7] = a2;
    block[8] = a3;
    char v14 = a6;
    void block[4] = a4;
    void block[5] = a7;
    dispatch_sync(v8, block);
  }
  else
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZN21XPCCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_2;
    _OWORD v9[3] = &unk_1E52206A8;
    v9[6] = a1;
    v9[7] = a2;
    v9[8] = a3;
    int v10 = a5;
    char v11 = 0;
    v9[4] = a4;
    v9[5] = a7;
    dispatch_async(v8, v9);
  }
}

void ___ZN35MTLCompilerConnectionManagerPrivate12buildRequestEjP18MTLCompilerRequestbU13block_pointerFv16MTLCompilerErrorPU27objcproto16OS_dispatch_data8NSObjectPKcE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  int v3 = (uint64_t *)(v2 + 56);
  uint64_t v4 = *(int *)(v2 + 16);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)(v2 + 56);
  unint64_t v7 = &v3[2 * v4];
  do
  {
    uint64_t v9 = *v6;
    unint64_t v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v9) {
      ++v5;
    }
    v6 += 2;
  }
  while (v6 != v7);
  if (!v5 || *(unsigned char *)(v2 + 12)) {
    goto LABEL_10;
  }
  LODWORD(v26) = *(_DWORD *)(v2 + 16);
  if (!v26)
  {
    int v30 = 0x7FFFFFFF;
LABEL_42:
    uint64_t v33 = v26;
    uint64_t v34 = (void *)(v2 + 16 * v26);
    do
    {
      if (!v34[7])
      {
        uint64_t v35 = (std::__shared_weak_count *)v34[136];
        if (v35)
        {
          uint64_t v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            uint64_t v37 = v36;
            uint64_t v38 = v34[135];
            if (v38)
            {
              signed int v39 = atomic_load((unsigned int *)(v38 + 28));
              if (v39 < v30)
              {
                *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v33;
                uint64_t v40 = *(void *)(*(void *)(a1 + 40) + 8);
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                unint64_t v41 = *(std::__shared_weak_count **)(v40 + 56);
                *(void *)(v40 + 48) = v38;
                *(void *)(v40 + 56) = v37;
                if (v41) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                }
                int v30 = v39;
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
        }
      }
      ++v33;
      v34 += 2;
    }
    while (v33 != 64);
    goto LABEL_10;
  }
  uint64_t v27 = *v3;
  if (*v3)
  {
    unint64_t v28 = 0;
    uint64_t v29 = (uint64_t *)(v2 + 72);
    int v30 = 0x7FFFFFFF;
    while (1)
    {
      signed int v31 = atomic_load((unsigned int *)(v27 + 28));
      if (!v31) {
        break;
      }
      if (v31 < v30)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v28;
        int v30 = v31;
      }
      ++v28;
      unint64_t v26 = *(int *)(v2 + 16);
      if (v28 >= v26) {
        goto LABEL_41;
      }
      uint64_t v32 = *v29;
      v29 += 2;
      uint64_t v27 = v32;
      if (!v32) {
        goto LABEL_39;
      }
    }
    int v30 = 0;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v28;
    LODWORD(v26) = *(_DWORD *)(v2 + 16);
  }
  else
  {
    unint64_t v28 = 0;
    int v30 = 0x7FFFFFFF;
LABEL_39:
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v28;
  }
LABEL_41:
  if (v26 <= 0x3F) {
    goto LABEL_42;
  }
LABEL_10:
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v11 = *(void *)(v10 + 24);
  if (v11 == -1)
  {
    *(void *)(v10 + 24) = 0;
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  if (!v3[2 * v11])
  {
    int v42 = *(_DWORD *)(v2 + 8);
    std::allocate_shared[abi:ne180100]<XPCCompilerConnection,std::allocator<XPCCompilerConnection>,int,void>(&v42, &v43);
    uint64_t v23 = &v3[2 * *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
    long long v24 = v43;
    long long v43 = 0uLL;
    uint64_t v25 = (std::__shared_weak_count *)v23[1];
    *(_OWORD *)uint64_t v23 = v24;
    if (v25)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      if (*((void *)&v43 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
      }
    }
  }
  int v12 = *(_DWORD *)(a1 + 80);
  if (v12)
  {
    int v13 = (void *)(*(void *)(v2 + 32) + 16 * (v12 - 1));
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *v13;
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = v13[1];
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v17 = *(void *)(v14 + 48);
  float v16 = (uint64_t *)(v14 + 48);
  uint64_t v15 = v17;
  if (!v17)
  {
    float v16 = &v3[2 * *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
    uint64_t v15 = *v16;
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v19 = v16[1];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v20 = *(std::__shared_weak_count **)(v18 + 56);
  *(void *)(v18 + 48) = v15;
  *(void *)(v18 + 56) = v19;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(void *)(v21 + 48))
  {
    uint64_t v22 = *(std::__shared_weak_count **)(v21 + 56);
    *(void *)(v21 + 48) = 0;
    *(void *)(v21 + 56) = 0;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
}

void std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<stitchedAirDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<stitchedAirDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<stitchedAirDescriptor>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<stitchedAirDescriptor>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v5 = *(NSObject **)(i - 40);
    uint64_t v4 = v5;
    if (v5) {
      dispatch_release(v4);
    }
  }
  a1[1] = v2;
}

void XPCCompilerConnection::XPCCompilerConnection(XPCCompilerConnection *this, int a2)
{
  uint64_t v3 = CompilerConnection::CompilerConnection((uint64_t)this, 2, a2);
  *(void *)uint64_t v3 = &unk_1ECAC5E98;
  *(_WORD *)(v3 + 72) = 256;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 40) = 0;
  *((void *)this + 8) = dispatch_semaphore_create(10);
  XPCCompilerConnection::setupConnection(this);
}

void sub_18276A49C(_Unwind_Exception *a1)
{
  CompilerConnection::~CompilerConnection(v1);
  _Unwind_Resume(a1);
}

void ___ZN21XPCCompilerConnection16cancelConnectionEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 56))
  {
    *(void *)(v1 + 48) = xpc_connection_copy_invalidation_reason();
    xpc_connection_cancel(*(xpc_connection_t *)(v1 + 56));
    xpc_release(*(xpc_object_t *)(v1 + 56));
    *(void *)(v1 + 56) = 0;
  }
}

uint64_t _MTLRequestHashToString(uint64_t a1)
{
  uint64_t v2 = 0;
  memset(&v7, 0, sizeof(v7));
  do
  {
    unint64_t v3 = *(unsigned __int8 *)(a1 + v2);
    std::string::push_back(&v7, _MTLRequestHashToString(MTLUINT256_t)::hexChars[v3 >> 4]);
    std::string::push_back(&v7, _MTLRequestHashToString(MTLUINT256_t)::hexChars[v3 & 0xF]);
    ++v2;
  }
  while (v2 != 32);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v7;
  }
  else {
    uint64_t v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
  }
  uint64_t v5 = [NSString stringWithUTF8String:v4];
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_18276A5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *___getForcedLanguageVersion_block_invoke()
{
  uint64_t result = getenv("MTL_FORCE_LANGUAGE_VERSION");
  if (result)
  {
    uint64_t v1 = result;
    sscanf(result, "%d_%d", &_getForcedLanguageVersion::major, &_getForcedLanguageVersion::minor);
    return (char *)fprintf((FILE *)*MEMORY[0x1E4F143C8], "Using MTLLanguageVersion%d_%d (set with MTL_FORCE_LANGUAGE_VERSION=%s)\n", _getForcedLanguageVersion::major, _getForcedLanguageVersion::minor, v1);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1] && v11[4] == a2[2] && v11[5] == a2[3]) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v16 = a1 + 16;
  uint64_t v17 = operator new(0x60uLL);
  v28[0] = v17;
  v28[1] = a1 + 16;
  *uint64_t v17 = 0;
  v17[1] = v7;
  long long v18 = (*a4)[1];
  *((_OWORD *)v17 + 1) = **a4;
  *((_OWORD *)v17 + 2) = v18;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v8 || (float)(v20 * (float)v8) < v19)
  {
    BOOL v21 = 1;
    if (v8 >= 3) {
      BOOL v21 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v8);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v24);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *uint64_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = v16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v26 >= v8) {
          v26 %= v8;
        }
      }
      else
      {
        v26 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t v11 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v11;
}

void sub_18276AED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<MTLUINT256_t const,std::pair<std::string,std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<MTLUINT256_t const,std::pair<std::string,std::string>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

uint64_t MTLProgressBinsSynchronizeBufferAccess(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = (uint64_t)a2;
  if (result)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 48))
    {
      unint64_t v7 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__equal_range_multi<objc_object  {objcproto9MTLBuffer}>((void *)(result + 96), &v16);
      if (v7 != v8)
      {
        uint8x8_t v9 = v7;
        uint64_t v10 = v8;
        do
        {
          if (a3 == 1 || v9[3] == 1)
          {
            uint64_t v11 = *((unsigned int *)v9 + 8);
            uint64_t v12 = (unsigned __int16)*((_DWORD *)v9 + 9);
            *(_WORD *)(v5 + 42) = *((_DWORD *)v9 + 9);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, v11, v12);
          }
          uint8x8_t v9 = (void *)*v9;
        }
        while (v9 != v10);
      }
      v15[0] = v16;
      v15[1] = a3;
      void v15[2] = -1;
      return (uint64_t)std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__emplace_multi<std::pair<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal>>((void *)(v5 + 56), v15);
    }
    else
    {
      uint64_t result = MTLProgressBinsSynchronizeBuffer(result, a2);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v13 = *(unsigned __int16 *)(v5 + 42);
        uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 16);
        return v14(a4, result, v13);
      }
    }
  }
  return result;
}

void std::vector<__CFString const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    long long v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void setShaderCacheMainFolder(const char *a1)
{
  os_unfair_lock_lock(&gCacheOverrideLock);
  uint64_t v2 = (void *)gOverridePath;
  if ((const char *)gOverridePath != a1 && (!a1 || !gOverridePath || strcmp((const char *)gOverridePath, a1)))
  {
    if ((didPreviouslyGetCacheMainFolder & 1) != 0 || didPreviouslySetCacheMainFolder == 1)
    {
      if (_MTLIsInternalBuild() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
        setShaderCacheMainFolder_cold_1();
      }
    }
    else
    {
      if (v2) {
        free(v2);
      }
      if (a1)
      {
        size_t v3 = strlen(a1) + 1;
        gOverridePath = (uint64_t)malloc_type_malloc(v3, 0x767BCCEEuLL);
        memcpy((void *)gOverridePath, a1, v3);
        didPreviouslySetCacheMainFolder = 1;
      }
      else
      {
        gOverridePath = 0;
      }
    }
  }
  os_unfair_lock_unlock(&gCacheOverrideLock);
}

void sub_18276B518(_Unwind_Exception *a1)
{
}

uint64_t ___ZL25getDefaultLanguageVersioni_block_invoke()
{
  if (_getForcedLanguageVersion::onceToken != -1) {
    dispatch_once(&_getForcedLanguageVersion::onceToken, &__block_literal_global_57);
  }
  int v0 = _getForcedLanguageVersion::major;
  int v1 = _getForcedLanguageVersion::minor;
  getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 65537;
  if (dyld_program_sdk_at_least()) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 65538;
  }
  if (dyld_program_sdk_at_least()) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 0x20000;
  }
  if (dyld_program_sdk_at_least()) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 131073;
  }
  if (dyld_program_sdk_at_least()) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 131074;
  }
  if (dyld_program_sdk_at_least()) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 131075;
  }
  if (dyld_program_sdk_at_least()) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 131076;
  }
  unint64_t v2 = v1 | (v0 << 16);
  if (dyld_program_sdk_at_least()) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 196608;
  }
  if (dyld_program_sdk_at_least()) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 196609;
  }
  uint64_t result = dyld_program_sdk_at_least();
  if (result) {
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = 196610;
  }
  if (v2)
  {
    uint64_t v4 = getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion;
    if (getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion >= v2) {
      uint64_t v4 = v2;
    }
    getDefaultLanguageVersion(int)::maxAllowedMTLLanguageVersion = v4;
  }
  return result;
}

uint64_t MTLLibraryBuilder::newLibraryWithDAG(_MTLDevice **a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, std::__shared_weak_count_vtbl *a8)
{
  uint64_t v21 = 0;
  unint64_t v22 = &v21;
  uint64_t v23 = 0x3052000000;
  size_t v24 = __Block_byref_object_copy__10;
  uint64_t v25 = __Block_byref_object_dispose__10;
  uint64_t v26 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x3052000000;
  long long v18 = __Block_byref_object_copy__10;
  uint64_t v19 = __Block_byref_object_dispose__10;
  uint64_t v20 = 0;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  _OWORD v14[2] = ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEPP7NSErrorNSt3__110shared_ptrINSA_6vectorI21stitchedAirDescriptorNSA_9allocatorISD_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESJ__block_invoke;
  v14[3] = &unk_1E5221178;
  v14[4] = &v21;
  v14[5] = &v15;
  unint64_t v9 = (std::__shared_weak_count *)a5[1];
  v13[0] = *a5;
  v13[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MTLLibraryBuilder::newLibraryWithDAG(a1, a2, a3, (uint64_t)v14, 1, v13, a6, a7, a8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (void *)v16[5];
  if (a4) {
    *a4 = v10;
  }
  else {

  }
  uint64_t v11 = v22[5];
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);
  return v11;
}

void sub_18276BF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void MTLLibraryBuilder::newLibraryWithDAG(_MTLDevice **a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, std::__shared_weak_count_vtbl *a9)
{
  uint64_t v9 = a8;
  char v10 = a7;
  HIDWORD(v55) = a5;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    MTLReportFailure(0, "newLibraryWithDAG", 9426, @"functionDag cannot be nil", a5, (uint64_t)a6, a7, a8, v55);
    if (a3) {
      goto LABEL_3;
    }
  }
  MTLReportFailure(0, "newLibraryWithDAG", 9427, @"functions cannot be nil", a5, (uint64_t)a6, a7, a8, v55);
LABEL_3:
  if (![a3 count]) {
    MTLReportFailure(0, "newLibraryWithDAG", 9428, @"functions cannot be empty", v15, v16, v17, v18, v55);
  }
  *(_OWORD *)md = 0u;
  long long v76 = 0u;
  CC_SHA256_Init(&c);
  int data = 14;
  CC_SHA256_Update(&c, &data, 4u);
  __p = 0;
  int v68 = 0;
  uint64_t v69 = 0;
  *(_OWORD *)uint64_t v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v19 = [a3 countByEnumeratingWithState:v63 objects:&v77 count:16];
  if (v19)
  {
    uint64_t v56 = v9;
    uint64_t v57 = a1;
    char v58 = v10;
    uint64_t v20 = *(void *)v64;
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v64 != v20) {
          objc_enumerationMutation(a3);
        }
        unint64_t v22 = (_OWORD *)[*((id *)&v63[1]->var0 + i) bitCodeHash];
        uint64_t v23 = v22;
        size_t v24 = v68;
        if (v68 >= v69)
        {
          uint64_t v27 = (char *)__p;
          uint64_t v28 = (v68 - (unsigned char *)__p) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v69 - (unsigned char *)__p;
          if ((v69 - (unsigned char *)__p) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v69, v31);
            uint64_t v27 = (char *)__p;
            size_t v24 = v68;
          }
          else
          {
            uint64_t v32 = 0;
          }
          long long v33 = v23[1];
          uint64_t v34 = &v32[32 * v28];
          *(_OWORD *)uint64_t v34 = *v23;
          *((_OWORD *)v34 + 1) = v33;
          if (v24 == v27)
          {
            uint64_t v37 = &v32[32 * v28];
          }
          else
          {
            uint64_t v35 = &v32[32 * v28];
            do
            {
              long long v36 = *((_OWORD *)v24 - 1);
              uint64_t v37 = v35 - 32;
              *((_OWORD *)v35 - 2) = *((_OWORD *)v24 - 2);
              *((_OWORD *)v35 - 1) = v36;
              v24 -= 32;
              v35 -= 32;
            }
            while (v24 != v27);
          }
          uint64_t v26 = v34 + 32;
          __p = v37;
          int v68 = v34 + 32;
          uint64_t v69 = &v32[32 * v31];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          long long v25 = v22[1];
          *(_OWORD *)int v68 = *v22;
          *((_OWORD *)v24 + 1) = v25;
          uint64_t v26 = v24 + 32;
        }
        int v68 = v26;
      }
      uint64_t v19 = [a3 countByEnumeratingWithState:v63 objects:&v77 count:16];
    }
    while (v19);
    uint64_t v38 = (unint64_t *)__p;
    unint64_t v39 = (unint64_t)v68;
    char v10 = v58;
    uint64_t v9 = v56;
    a1 = v57;
  }
  else
  {
    unint64_t v39 = 0;
    uint64_t v38 = 0;
  }
  unint64_t v40 = 126 - 2 * __clz((uint64_t)(v39 - (void)v38) >> 5);
  if ((unint64_t *)v39 == v38) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  std::__introsort<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *,false>(v38, v39, v41, 1);
  uint64_t v62 = (v68 - (unsigned char *)__p) >> 5;
  CC_SHA256_Update(&c, &v62, 8u);
  CC_SHA256_Update(&c, __p, 32 * v62);
  *(void *)len = [a2 length];
  CC_SHA256_Update(&c, len, 8u);
  int v42 = (const void *)[a2 UTF8String];
  CC_SHA256_Update(&c, v42, len[0]);
  CC_SHA256_Final(md, &c);
  if (__p)
  {
    int v68 = (char *)__p;
    operator delete(__p);
  }
  uint64_t v43 = _MTLGetLibrariesCache(a1[4]);
  MultiLevelCacheFactory::createLibraryCache((uint64_t)a1[4], v9, a9, *(void *)(v43 + 32), 2 * (v10 & 1), &c);
  LOBYTE(__p) = 0;
  v63[0] = 0;
  uint64_t v44 = *(void *)c.count;
  MTLHashKey::MTLHashKey((uint64_t)&v77, (uint64_t)md);
  uint64_t v45 = *a6;
  v72[0] = MEMORY[0x1E4F143A8];
  v72[1] = 3221225472;
  v72[2] = ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke;
  v72[3] = &__block_descriptor_80_e37__v16__0__NSObject_OS_dispatch_data__8l;
  v72[4] = a1;
  v72[5] = v43;
  long long v73 = *(_OWORD *)md;
  long long v74 = v76;
  uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t, MTLHashKey *, uint64_t, MTLLibraryContainer **, void **, void *))(*(void *)v44 + 136))(v44, &v77, v45, v63, &__p, v72);
  MTLHashKey::~MTLHashKey(&v77);
  if (v46)
  {
    if (a9)
    {
      uint64_t v48 = *(void *)c.count;
      __n128 v49 = MTLHashKey::MTLHashKey(v47, (uint64_t)md);
      (*(void (**)(uint64_t, MTLHashKey *, void, void *, void *, __n128))(*(void *)v48 + 144))(v48, &v77, *a6, a3, v46, v49);
      MTLHashKey::~MTLHashKey(&v77);
    }
    uint64_t v50 = (std::__shared_weak_count *)a6[1];
    v60[0] = *(void **)a6;
    v60[1] = &v50->__vftable;
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    storeStitchingTrackingData(v10, a3, v60, v46);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    (*(void (**)(uint64_t, void *, void))(a4 + 16))(a4, v46, 0);
  }
  else if ((*(unsigned int (**)(void))(**(void **)c.count + 120))(*(void *)c.count))
  {
    uint64_t v51 = [NSString stringWithUTF8String:"Failed to find library in binary archive."];
    if (!v51) {
      uint64_t v51 = [NSString stringWithCString:"Failed to find library in binary archive." encoding:1];
    }
    uint64_t v52 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v51 forKey:*MEMORY[0x1E4F28568]];
    (*(void (**)(uint64_t, void, uint64_t))(a4 + 16))(a4, 0, [objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:3 userInfo:v52]);
  }
  else
  {
    if ((_BYTE)__p)
    {
      uint64_t v53 = a1[4];
      uint64_t v54 = _MTLGetMTLCompilerLLVMVersionForDevice(v53);
      getCompilerConnectionManager(v53, v54);
      operator new();
    }
    (*(void (**)(uint64_t, void, id))(a4 + 16))(a4, 0, v63[0]->var8);
    MTLLibraryBuilder::releaseCacheEntry((MTLLibraryBuilder *)a1, v63[0]);
  }
  if (*(void *)c.hash) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)c.hash);
  }
}

void sub_18276C7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57)
{
  if (a57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a57);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(exception_object);
}

id ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEPP7NSErrorNSt3__110shared_ptrINSA_6vectorI21stitchedAirDescriptorNSA_9allocatorISD_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESJ__block_invoke(uint64_t a1, void *a2, void *a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = a2;
  id v5 = a2;
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    char v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - (void)v10;
          unint64_t v12 = (uint64_t)(a2 - (void)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v83 = *(void *)(a2 - 32);
                unint64_t v82 = a2 - 32;
                unint64_t v84 = bswap64(v83);
                unint64_t v85 = bswap64(*v10);
                if (v84 == v85
                  && (v84 = bswap64(*(void *)(v82 + 8)), unint64_t v85 = bswap64(v10[1]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 16)), unint64_t v85 = bswap64(v10[2]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 24)), unint64_t v85 = bswap64(v10[3]), v84 == v85))
                {
                  int v86 = 0;
                }
                else if (v84 < v85)
                {
                  int v86 = -1;
                }
                else
                {
                  int v86 = 1;
                }
                if (v86 < 0)
                {
                  __n128 v193 = *(__n128 *)v10;
                  long long v202 = *((_OWORD *)v10 + 1);
                  long long v155 = *(_OWORD *)(v82 + 16);
                  *(_OWORD *)char v10 = *(_OWORD *)v82;
                  *((_OWORD *)v10 + 1) = v155;
                  __n128 result = v193;
                  *(__n128 *)unint64_t v82 = v193;
                  *(_OWORD *)(v82 + 16) = v202;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, (unint64_t *)(a2 - 32));
                break;
              case 4uLL:
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
                break;
              case 5uLL:
                BOOL v87 = v10 + 4;
                unsigned int v88 = v10 + 8;
                uint64_t v89 = v10 + 12;
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, v10 + 12).n128_u64[0];
                unint64_t v91 = *(void *)(a2 - 32);
                unint64_t v90 = a2 - 32;
                unint64_t v92 = bswap64(v91);
                unint64_t v93 = bswap64(v10[12]);
                if (v92 == v93
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 8)), v93 = bswap64(v10[13]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 16)), v93 = bswap64(v10[14]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 24)), v93 = bswap64(v10[15]), v92 == v93))
                {
                  int v94 = 0;
                }
                else if (v92 < v93)
                {
                  int v94 = -1;
                }
                else
                {
                  int v94 = 1;
                }
                if (v94 < 0)
                {
                  __n128 result = *(__n128 *)v89;
                  long long v203 = *((_OWORD *)v10 + 7);
                  long long v156 = *(_OWORD *)(v90 + 16);
                  *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
                  *((_OWORD *)v10 + 7) = v156;
                  *(__n128 *)unint64_t v90 = result;
                  *(_OWORD *)(v90 + 16) = v203;
                  unint64_t v157 = bswap64(*v89);
                  unint64_t v158 = bswap64(*v88);
                  if (v157 != v158) {
                    goto LABEL_328;
                  }
                  unint64_t v157 = bswap64(v10[13]);
                  unint64_t v158 = bswap64(v10[9]);
                  if (v157 == v158
                    && (unint64_t v157 = bswap64(v10[14]), v158 = bswap64(v10[10]), v157 == v158)
                    && (unint64_t v157 = bswap64(v10[15]), v158 = bswap64(v10[11]), v157 == v158))
                  {
                    int v159 = 0;
                  }
                  else
                  {
LABEL_328:
                    int v159 = v157 < v158 ? -1 : 1;
                  }
                  if (v159 < 0)
                  {
                    long long v170 = *(_OWORD *)v88;
                    __n128 result = *((__n128 *)v10 + 5);
                    long long v171 = *((_OWORD *)v10 + 7);
                    *(_OWORD *)unsigned int v88 = *(_OWORD *)v89;
                    *((_OWORD *)v10 + 5) = v171;
                    *(_OWORD *)uint64_t v89 = v170;
                    *((__n128 *)v10 + 7) = result;
                    unint64_t v172 = bswap64(*v88);
                    unint64_t v173 = bswap64(*v87);
                    if (v172 != v173) {
                      goto LABEL_337;
                    }
                    unint64_t v172 = bswap64(v10[9]);
                    unint64_t v173 = bswap64(v10[5]);
                    if (v172 == v173
                      && (unint64_t v172 = bswap64(v10[10]), v173 = bswap64(v10[6]), v172 == v173)
                      && (unint64_t v172 = bswap64(v10[11]), v173 = bswap64(v10[7]), v172 == v173))
                    {
                      int v174 = 0;
                    }
                    else
                    {
LABEL_337:
                      int v174 = v172 < v173 ? -1 : 1;
                    }
                    if (v174 < 0)
                    {
                      long long v175 = *(_OWORD *)v87;
                      __n128 result = *((__n128 *)v10 + 3);
                      long long v176 = *((_OWORD *)v10 + 5);
                      *(_OWORD *)BOOL v87 = *(_OWORD *)v88;
                      *((_OWORD *)v10 + 3) = v176;
                      *(_OWORD *)unsigned int v88 = v175;
                      *((__n128 *)v10 + 5) = result;
                      unint64_t v177 = bswap64(v10[4]);
                      unint64_t v178 = bswap64(*v10);
                      if (v177 != v178) {
                        goto LABEL_346;
                      }
                      unint64_t v177 = bswap64(v10[5]);
                      unint64_t v178 = bswap64(v10[1]);
                      if (v177 == v178
                        && (unint64_t v177 = bswap64(v10[6]), v178 = bswap64(v10[2]), v177 == v178)
                        && (unint64_t v177 = bswap64(v10[7]), v178 = bswap64(v10[3]), v177 == v178))
                      {
                        int v179 = 0;
                      }
                      else
                      {
LABEL_346:
                        int v179 = v177 < v178 ? -1 : 1;
                      }
                      if (v179 < 0)
                      {
                        __n128 v195 = *(__n128 *)v10;
                        long long v205 = *((_OWORD *)v10 + 1);
                        long long v180 = *((_OWORD *)v10 + 3);
                        *(_OWORD *)char v10 = *(_OWORD *)v87;
                        *((_OWORD *)v10 + 1) = v180;
                        __n128 result = v195;
                        *(__n128 *)BOOL v87 = v195;
                        *((_OWORD *)v10 + 3) = v205;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 767)
          {
            n128_u64 = v10 + 4;
            BOOL v97 = v10 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
            if (a4)
            {
              if (!v97)
              {
                uint64_t v98 = 0;
                long long v99 = v10;
                do
                {
                  long long v100 = (__n128 *)n128_u64;
                  unint64_t v101 = bswap64(v99[4]);
                  unint64_t v102 = bswap64(*v99);
                  if (v101 != v102
                    || (unint64_t v101 = bswap64(v100->n128_u64[1]), v102 = bswap64(v99[1]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[0]), v102 = bswap64(v99[2]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[1]), v102 = bswap64(v99[3]), v101 != v102))
                  {
                    int v103 = v101 < v102 ? -1 : 1;
                    if (v103 < 0)
                    {
                      __n128 v190 = *v100;
                      __n128 v199 = v100[1];
                      uint64_t v104 = v98;
                      while (1)
                      {
                        long long v105 = (char *)v10 + v104;
                        long long v106 = *(_OWORD *)((char *)v10 + v104 + 16);
                        *((_OWORD *)v105 + 2) = *(_OWORD *)((char *)v10 + v104);
                        *((_OWORD *)v105 + 3) = v106;
                        if (!v104) {
                          break;
                        }
                        unint64_t v107 = bswap64(v190.n128_u64[0]);
                        unint64_t v108 = bswap64(*((void *)v105 - 4));
                        if (v107 == v108
                          && (unint64_t v107 = bswap64(v190.n128_u64[1]), v108 = bswap64(*((void *)v105 - 3)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[0]), v108 = bswap64(*((void *)v105 - 2)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[1]), v108 = bswap64(*((void *)v105 - 1)), v107 == v108))
                        {
                          int v109 = 0;
                        }
                        else if (v107 < v108)
                        {
                          int v109 = -1;
                        }
                        else
                        {
                          int v109 = 1;
                        }
                        v104 -= 32;
                        if ((v109 & 0x80000000) == 0)
                        {
                          BOOL v110 = (__n128 *)((char *)v10 + v104 + 32);
                          goto LABEL_200;
                        }
                      }
                      BOOL v110 = (__n128 *)v10;
LABEL_200:
                      __n128 result = v190;
                      __n128 *v110 = v190;
                      v110[1] = v199;
                    }
                  }
                  n128_u64 = v100[2].n128_u64;
                  v98 += 32;
                  long long v99 = (unint64_t *)v100;
                }
                while (&v100[2] != (__n128 *)a2);
              }
            }
            else if (!v97)
            {
              uint64_t v160 = v10 - 4;
              do
              {
                uint64_t v161 = (__n128 *)n128_u64;
                unint64_t v162 = bswap64(a1[4]);
                unint64_t v163 = bswap64(*a1);
                if (v162 != v163
                  || (unint64_t v162 = bswap64(v161->n128_u64[1]), v163 = bswap64(a1[1]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[0]), v163 = bswap64(a1[2]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[1]), v163 = bswap64(a1[3]), v162 != v163))
                {
                  int v164 = v162 < v163 ? -1 : 1;
                  if (v164 < 0)
                  {
                    __n128 v194 = *v161;
                    __n128 v204 = v161[1];
                    uint64_t v165 = v160;
                    do
                    {
                      long long v166 = *((_OWORD *)v165 + 3);
                      *((_OWORD *)v165 + 4) = *((_OWORD *)v165 + 2);
                      *((_OWORD *)v165 + 5) = v166;
                      unint64_t v167 = bswap64(v194.n128_u64[0]);
                      unint64_t v168 = bswap64(*v165);
                      if (v167 == v168
                        && (unint64_t v167 = bswap64(v194.n128_u64[1]), v168 = bswap64(v165[1]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[0]), v168 = bswap64(v165[2]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[1]), v168 = bswap64(v165[3]), v167 == v168))
                      {
                        int v169 = 0;
                      }
                      else if (v167 < v168)
                      {
                        int v169 = -1;
                      }
                      else
                      {
                        int v169 = 1;
                      }
                      v165 -= 4;
                    }
                    while (v169 < 0);
                    __n128 result = v194;
                    *((__n128 *)v165 + 4) = v194;
                    *((__n128 *)v165 + 5) = v204;
                  }
                }
                n128_u64 = v161[2].n128_u64;
                v160 += 4;
                a1 = (unint64_t *)v161;
              }
              while (&v161[2] != (__n128 *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (unint64_t *)a2)
            {
              int64_t v111 = (v12 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                int64_t v113 = v112;
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  int v115 = &v10[4 * v114];
                  if (2 * v113 + 2 < (uint64_t)v12)
                  {
                    unint64_t v116 = bswap64(*v115);
                    unint64_t v117 = bswap64(v115[4]);
                    if (v116 != v117) {
                      goto LABEL_212;
                    }
                    unint64_t v116 = bswap64(v115[1]);
                    unint64_t v117 = bswap64(v115[5]);
                    if (v116 == v117
                      && (unint64_t v116 = bswap64(v115[2]), v117 = bswap64(v115[6]), v116 == v117)
                      && (unint64_t v116 = bswap64(v115[3]), v117 = bswap64(v115[7]), v116 == v117))
                    {
                      int v118 = 0;
                    }
                    else
                    {
LABEL_212:
                      int v118 = v116 < v117 ? -1 : 1;
                    }
                    if (v118 < 0)
                    {
                      v115 += 4;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  unint64_t v119 = &v10[4 * v113];
                  unint64_t v120 = bswap64(*v115);
                  unint64_t v121 = bswap64(*v119);
                  if (v120 == v121
                    && (unint64_t v120 = bswap64(v115[1]), v121 = bswap64(v119[1]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[2]), v121 = bswap64(v119[2]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[3]), v121 = bswap64(v119[3]), v120 == v121)
                    || (v120 < v121 ? (int v122 = -1) : (int v122 = 1), (v122 & 0x80000000) == 0))
                  {
                    long long v191 = *(_OWORD *)v119;
                    long long v200 = *((_OWORD *)v119 + 1);
                    do
                    {
                      uint64_t v123 = v115;
                      long long v124 = *((_OWORD *)v115 + 1);
                      *(_OWORD *)unint64_t v119 = *(_OWORD *)v115;
                      *((_OWORD *)v119 + 1) = v124;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v125 = (2 * v114) | 1;
                      int v115 = &v10[4 * v125];
                      uint64_t v114 = 2 * v114 + 2;
                      if (v114 < (uint64_t)v12)
                      {
                        unint64_t v126 = bswap64(*v115);
                        unint64_t v127 = bswap64(v115[4]);
                        if (v126 != v127) {
                          goto LABEL_234;
                        }
                        unint64_t v126 = bswap64(v115[1]);
                        unint64_t v127 = bswap64(v115[5]);
                        if (v126 == v127
                          && (v126 = bswap64(v115[2]), unint64_t v127 = bswap64(v115[6]), v126 == v127)
                          && (v126 = bswap64(v115[3]), unint64_t v127 = bswap64(v115[7]), v126 == v127))
                        {
                          int v128 = 0;
                        }
                        else
                        {
LABEL_234:
                          int v128 = v126 < v127 ? -1 : 1;
                        }
                        if (v128 >= 0) {
                          uint64_t v114 = v125;
                        }
                        else {
                          v115 += 4;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v125;
                      }
                      unint64_t v129 = bswap64(*v115);
                      unint64_t v130 = bswap64(v191);
                      if (v129 != v130) {
                        goto LABEL_245;
                      }
                      unint64_t v129 = bswap64(v115[1]);
                      unint64_t v130 = bswap64(*((unint64_t *)&v191 + 1));
                      if (v129 == v130
                        && (v129 = bswap64(v115[2]), unint64_t v130 = bswap64(v200), v129 == v130)
                        && (v129 = bswap64(v115[3]), unint64_t v130 = bswap64(*((unint64_t *)&v200 + 1)), v129 == v130))
                      {
                        int v131 = 0;
                      }
                      else
                      {
LABEL_245:
                        int v131 = v129 < v130 ? -1 : 1;
                      }
                      unint64_t v119 = v123;
                    }
                    while ((v131 & 0x80000000) == 0);
                    *(_OWORD *)uint64_t v123 = v191;
                    *((_OWORD *)v123 + 1) = v200;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              uint64_t v132 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v133 = 0;
                __n128 v183 = *(__n128 *)v10;
                long long v186 = *((_OWORD *)v10 + 1);
                int v134 = v10;
                do
                {
                  int v135 = &v134[4 * v133 + 4];
                  uint64_t v136 = (2 * v133) | 1;
                  uint64_t v137 = 2 * v133 + 2;
                  if (v137 < v132)
                  {
                    unint64_t v138 = bswap64(*v135);
                    unint64_t v139 = bswap64(v135[4]);
                    if (v138 != v139) {
                      goto LABEL_259;
                    }
                    unint64_t v138 = bswap64(v135[1]);
                    unint64_t v139 = bswap64(v135[5]);
                    if (v138 == v139
                      && (unint64_t v138 = bswap64(v135[2]), v139 = bswap64(v135[6]), v138 == v139)
                      && (unint64_t v138 = bswap64(v135[3]), v139 = bswap64(v135[7]), v138 == v139))
                    {
                      int v140 = 0;
                    }
                    else
                    {
LABEL_259:
                      int v140 = v138 < v139 ? -1 : 1;
                    }
                    if (v140 < 0)
                    {
                      v135 += 4;
                      uint64_t v136 = v137;
                    }
                  }
                  long long v141 = *((_OWORD *)v135 + 1);
                  *(_OWORD *)int v134 = *(_OWORD *)v135;
                  *((_OWORD *)v134 + 1) = v141;
                  int v134 = v135;
                  uint64_t v133 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                a2 -= 32;
                if (v135 == (unint64_t *)a2)
                {
                  __n128 result = v183;
                  *(__n128 *)int v135 = v183;
                  *((_OWORD *)v135 + 1) = v186;
                }
                else
                {
                  long long v142 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)int v135 = *(_OWORD *)a2;
                  *((_OWORD *)v135 + 1) = v142;
                  __n128 result = v183;
                  *(__n128 *)a2 = v183;
                  *(_OWORD *)(a2 + 16) = v186;
                  uint64_t v143 = (char *)v135 - (char *)v10 + 32;
                  if (v143 >= 33)
                  {
                    unint64_t v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                    uint64_t v145 = &v10[4 * v144];
                    unint64_t v146 = bswap64(*v145);
                    unint64_t v147 = bswap64(*v135);
                    if (v146 != v147
                      || (unint64_t v146 = bswap64(v145[1]), v147 = bswap64(v135[1]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[2]), v147 = bswap64(v135[2]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[3]), v147 = bswap64(v135[3]), v146 != v147))
                    {
                      int v148 = v146 < v147 ? -1 : 1;
                      if (v148 < 0)
                      {
                        __n128 v192 = *(__n128 *)v135;
                        __n128 v201 = *((__n128 *)v135 + 1);
                        do
                        {
                          uint64_t v149 = (__n128 *)v145;
                          long long v150 = *((_OWORD *)v145 + 1);
                          *(_OWORD *)int v135 = *(_OWORD *)v145;
                          *((_OWORD *)v135 + 1) = v150;
                          if (!v144) {
                            break;
                          }
                          unint64_t v144 = (v144 - 1) >> 1;
                          uint64_t v145 = &v10[4 * v144];
                          unint64_t v151 = bswap64(*v145);
                          unint64_t v152 = bswap64(v192.n128_u64[0]);
                          if (v151 != v152) {
                            goto LABEL_283;
                          }
                          unint64_t v151 = bswap64(v145[1]);
                          unint64_t v152 = bswap64(v192.n128_u64[1]);
                          if (v151 == v152
                            && (unint64_t v151 = bswap64(v145[2]), v152 = bswap64(v201.n128_u64[0]), v151 == v152)
                            && (unint64_t v151 = bswap64(v145[3]), v152 = bswap64(v201.n128_u64[1]), v151 == v152))
                          {
                            int v153 = 0;
                          }
                          else
                          {
LABEL_283:
                            int v153 = v151 < v152 ? -1 : 1;
                          }
                          int v135 = (unint64_t *)v149;
                        }
                        while (v153 < 0);
                        __n128 result = v192;
                        *uint64_t v149 = v192;
                        v149[1] = v201;
                      }
                    }
                  }
                }
              }
              while (v132-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v12 >> 1)], (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v14 - 4, (unint64_t *)(a2 - 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v13 + 4], (unint64_t *)(a2 - 96));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v14 - 4, v14, &a1[4 * v13 + 4]);
            __n128 v187 = *(__n128 *)a1;
            long long v196 = *((_OWORD *)a1 + 1);
            long long v15 = *((_OWORD *)v14 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *((_OWORD *)a1 + 1) = v15;
            *(__n128 *)uint64_t v14 = v187;
            *((_OWORD *)v14 + 1) = v196;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v12 >> 1)], a1, (unint64_t *)(a2 - 32));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v16 = bswap64(*(a1 - 4));
          unint64_t v17 = bswap64(*a1);
          if (v16 != v17) {
            goto LABEL_15;
          }
          unint64_t v16 = bswap64(*(a1 - 3));
          unint64_t v17 = bswap64(a1[1]);
          if (v16 == v17
            && (unint64_t v16 = bswap64(*(a1 - 2)), v17 = bswap64(a1[2]), v16 == v17)
            && (unint64_t v16 = bswap64(*(a1 - 1)), v17 = bswap64(a1[3]), v16 == v17))
          {
            int v18 = 0;
          }
          else
          {
LABEL_15:
            int v18 = v16 < v17 ? -1 : 1;
          }
          if (v18 < 0) {
            break;
          }
          __n128 v182 = *(__n128 *)a1;
          long long v185 = *((_OWORD *)a1 + 1);
          unint64_t v51 = bswap64(*a1);
          unint64_t v52 = bswap64(*(void *)(a2 - 32));
          if (v51 == v52
            && (unint64_t v51 = bswap64(v182.n128_u64[1]), v52 = bswap64(*(void *)(a2 - 24)), v51 == v52)
            && (unint64_t v51 = bswap64(v185), v52 = bswap64(*(void *)(a2 - 16)), v51 == v52)
            && (unint64_t v51 = bswap64(*((unint64_t *)&v185 + 1)), v52 = bswap64(*(void *)(a2 - 8)), v51 == v52))
          {
            int v53 = 0;
          }
          else if (v51 < v52)
          {
            int v53 = -1;
          }
          else
          {
            int v53 = 1;
          }
          if (v53 < 0)
          {
            char v58 = a1;
            char v10 = a1;
            do
            {
              unint64_t v59 = v10[4];
              v10 += 4;
              unint64_t v60 = bswap64(v182.n128_u64[0]);
              unint64_t v61 = bswap64(v59);
              if (v60 == v61
                && (unint64_t v60 = bswap64(v182.n128_u64[1]), v61 = bswap64(v58[5]), v60 == v61)
                && (unint64_t v60 = bswap64(v185), v61 = bswap64(v58[6]), v60 == v61)
                && (unint64_t v60 = bswap64(*((unint64_t *)&v185 + 1)), v61 = bswap64(v58[7]), v60 == v61))
              {
                int v62 = 0;
              }
              else if (v60 < v61)
              {
                int v62 = -1;
              }
              else
              {
                int v62 = 1;
              }
              char v58 = v10;
            }
            while ((v62 & 0x80000000) == 0);
          }
          else
          {
            uint64_t v54 = a1 + 4;
            do
            {
              char v10 = v54;
              if ((unint64_t)v54 >= a2) {
                break;
              }
              unint64_t v55 = bswap64(v182.n128_u64[0]);
              unint64_t v56 = bswap64(*v10);
              if (v55 != v56) {
                goto LABEL_100;
              }
              unint64_t v55 = bswap64(v182.n128_u64[1]);
              unint64_t v56 = bswap64(v10[1]);
              if (v55 == v56
                && (unint64_t v55 = bswap64(v185), v56 = bswap64(v10[2]), v55 == v56)
                && (unint64_t v55 = bswap64(*((unint64_t *)&v185 + 1)), v56 = bswap64(v10[3]), v55 == v56))
              {
                int v57 = 0;
              }
              else
              {
LABEL_100:
                int v57 = v55 < v56 ? -1 : 1;
              }
              uint64_t v54 = v10 + 4;
            }
            while ((v57 & 0x80000000) == 0);
          }
          uint64_t v63 = (_OWORD *)a2;
          if ((unint64_t)v10 < a2)
          {
            long long v64 = (_OWORD *)a2;
            uint64_t v63 = (_OWORD *)a2;
            do
            {
              unint64_t v65 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v66 = bswap64(v182.n128_u64[0]);
              unint64_t v67 = bswap64(v65);
              if (v66 == v67
                && (unint64_t v66 = bswap64(v182.n128_u64[1]), v67 = bswap64(*((void *)v64 - 3)), v66 == v67)
                && (unint64_t v66 = bswap64(v185), v67 = bswap64(*((void *)v64 - 2)), v66 == v67)
                && (unint64_t v66 = bswap64(*((unint64_t *)&v185 + 1)), v67 = bswap64(*((void *)v64 - 1)), v66 == v67))
              {
                int v68 = 0;
              }
              else if (v66 < v67)
              {
                int v68 = -1;
              }
              else
              {
                int v68 = 1;
              }
              long long v64 = v63;
            }
            while (v68 < 0);
          }
          while (v10 < (unint64_t *)v63)
          {
            __n128 v189 = *(__n128 *)v10;
            long long v198 = *((_OWORD *)v10 + 1);
            long long v69 = v63[1];
            *(_OWORD *)char v10 = *v63;
            *((_OWORD *)v10 + 1) = v69;
            _OWORD *v63 = v189;
            v63[1] = v198;
            uint64_t v70 = v10;
            do
            {
              unint64_t v71 = v10[4];
              v10 += 4;
              unint64_t v72 = bswap64(v182.n128_u64[0]);
              unint64_t v73 = bswap64(v71);
              if (v72 == v73
                && (unint64_t v72 = bswap64(v182.n128_u64[1]), v73 = bswap64(v70[5]), v72 == v73)
                && (unint64_t v72 = bswap64(v185), v73 = bswap64(v70[6]), v72 == v73)
                && (unint64_t v72 = bswap64(*((unint64_t *)&v185 + 1)), v73 = bswap64(v70[7]), v72 == v73))
              {
                int v74 = 0;
              }
              else if (v72 < v73)
              {
                int v74 = -1;
              }
              else
              {
                int v74 = 1;
              }
              uint64_t v70 = v10;
            }
            while ((v74 & 0x80000000) == 0);
            uint64_t v75 = v63;
            do
            {
              unint64_t v76 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v77 = bswap64(v182.n128_u64[0]);
              unint64_t v78 = bswap64(v76);
              if (v77 == v78
                && (unint64_t v77 = bswap64(v182.n128_u64[1]), v78 = bswap64(*((void *)v75 - 3)), v77 == v78)
                && (unint64_t v77 = bswap64(v185), v78 = bswap64(*((void *)v75 - 2)), v77 == v78)
                && (unint64_t v77 = bswap64(*((unint64_t *)&v185 + 1)), v78 = bswap64(*((void *)v75 - 1)), v77 == v78))
              {
                int v79 = 0;
              }
              else if (v77 < v78)
              {
                int v79 = -1;
              }
              else
              {
                int v79 = 1;
              }
              uint64_t v75 = v63;
            }
            while (v79 < 0);
          }
          int v80 = (__n128 *)(v10 - 4);
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 != a1)
          {
            long long v81 = *((_OWORD *)v10 - 1);
            *(__n128 *)a1 = *v80;
            *((_OWORD *)a1 + 1) = v81;
          }
          a4 = 0;
          __n128 result = v182;
          *int v80 = v182;
          *((_OWORD *)v10 - 1) = v185;
        }
        uint64_t v19 = 0;
        __n128 v181 = *(__n128 *)a1;
        long long v184 = *((_OWORD *)a1 + 1);
        do
        {
          uint64_t v20 = &a1[v19];
          unint64_t v21 = bswap64(a1[v19 + 4]);
          unint64_t v22 = bswap64(v181.n128_u64[0]);
          if (v21 == v22
            && (v21 = bswap64(v20[5]), unint64_t v22 = bswap64(v181.n128_u64[1]), v21 == v22)
            && (v21 = bswap64(v20[6]), unint64_t v22 = bswap64(v184), v21 == v22)
            && (v21 = bswap64(v20[7]), unint64_t v22 = bswap64(*((unint64_t *)&v184 + 1)), v21 == v22))
          {
            int v23 = 0;
          }
          else if (v21 < v22)
          {
            int v23 = -1;
          }
          else
          {
            int v23 = 1;
          }
          v19 += 4;
        }
        while (v23 < 0);
        size_t v24 = &a1[v19];
        unint64_t v25 = a2;
        if (v19 == 4)
        {
          uint64_t v30 = (_OWORD *)a2;
          while (v24 < (unint64_t *)v30)
          {
            uint64_t v26 = v30 - 2;
            unint64_t v31 = bswap64(*((void *)v30 - 4));
            unint64_t v32 = bswap64(v181.n128_u64[0]);
            if (v31 == v32
              && (unint64_t v31 = bswap64(*((void *)v30 - 3)), v32 = bswap64(v181.n128_u64[1]), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 2)), v32 = bswap64(v184), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 1)), v32 = bswap64(*((unint64_t *)&v184 + 1)), v31 == v32))
            {
              int v33 = 0;
            }
            else if (v31 < v32)
            {
              int v33 = -1;
            }
            else
            {
              int v33 = 1;
            }
            v30 -= 2;
            if (v33 < 0) {
              goto LABEL_53;
            }
          }
          uint64_t v26 = v30;
        }
        else
        {
          do
          {
            uint64_t v26 = (_OWORD *)(v25 - 32);
            unint64_t v27 = bswap64(*(void *)(v25 - 32));
            unint64_t v28 = bswap64(v181.n128_u64[0]);
            if (v27 == v28
              && (unint64_t v27 = bswap64(*(void *)(v25 - 24)), v28 = bswap64(v181.n128_u64[1]), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 16)), v28 = bswap64(v184), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 8)), v28 = bswap64(*((unint64_t *)&v184 + 1)), v27 == v28))
            {
              int v29 = 0;
            }
            else if (v27 < v28)
            {
              int v29 = -1;
            }
            else
            {
              int v29 = 1;
            }
            v25 -= 32;
          }
          while ((v29 & 0x80000000) == 0);
        }
LABEL_53:
        if (v24 >= (unint64_t *)v26)
        {
          uint64_t v47 = v24 - 4;
        }
        else
        {
          unint64_t v34 = (unint64_t)v24;
          uint64_t v35 = v26;
          do
          {
            long long v188 = *(_OWORD *)v34;
            long long v197 = *(_OWORD *)(v34 + 16);
            long long v36 = v35[1];
            *(_OWORD *)unint64_t v34 = *v35;
            *(_OWORD *)(v34 + 16) = v36;
            *uint64_t v35 = v188;
            v35[1] = v197;
            uint64_t v37 = (unint64_t *)v34;
            do
            {
              unint64_t v38 = *(void *)(v34 + 32);
              v34 += 32;
              unint64_t v39 = bswap64(v38);
              unint64_t v40 = bswap64(v181.n128_u64[0]);
              if (v39 == v40
                && (unint64_t v39 = bswap64(v37[5]), v40 = bswap64(v181.n128_u64[1]), v39 == v40)
                && (unint64_t v39 = bswap64(v37[6]), v40 = bswap64(v184), v39 == v40)
                && (unint64_t v39 = bswap64(v37[7]), v40 = bswap64(*((unint64_t *)&v184 + 1)), v39 == v40))
              {
                int v41 = 0;
              }
              else if (v39 < v40)
              {
                int v41 = -1;
              }
              else
              {
                int v41 = 1;
              }
              uint64_t v37 = (unint64_t *)v34;
            }
            while (v41 < 0);
            int v42 = v35;
            do
            {
              unint64_t v43 = *((void *)v35 - 4);
              v35 -= 2;
              unint64_t v44 = bswap64(v43);
              unint64_t v45 = bswap64(v181.n128_u64[0]);
              if (v44 == v45
                && (unint64_t v44 = bswap64(*((void *)v42 - 3)), v45 = bswap64(v181.n128_u64[1]), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 2)), v45 = bswap64(v184), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 1)), v45 = bswap64(*((unint64_t *)&v184 + 1)), v44 == v45))
              {
                int v46 = 0;
              }
              else if (v44 < v45)
              {
                int v46 = -1;
              }
              else
              {
                int v46 = 1;
              }
              int v42 = v35;
            }
            while ((v46 & 0x80000000) == 0);
          }
          while (v34 < (unint64_t)v35);
          uint64_t v47 = (unint64_t *)(v34 - 32);
        }
        if (v47 != a1)
        {
          long long v48 = *((_OWORD *)v47 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v47;
          *((_OWORD *)a1 + 1) = v48;
        }
        *(__n128 *)uint64_t v47 = v181;
        *((_OWORD *)v47 + 1) = v184;
        if (v24 >= (unint64_t *)v26) {
          break;
        }
LABEL_83:
        std::__introsort<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *,false>(a1, v47, a3, a4 & 1);
        a4 = 0;
        char v10 = v47 + 4;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *>(a1, v47);
      char v10 = v47 + 4;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *>(v47 + 4, (unint64_t *)a2))
      {
        break;
      }
      if (!v49) {
        goto LABEL_83;
      }
    }
    a2 = (unint64_t)v47;
    if (!v49) {
      continue;
    }
    return result;
  }
}

uint64_t MultiLevelLibraryCache::newStitchedLibraryWithKey(void *a1, uint64_t a2, uint64_t a3, MTLLibraryContainer **a4, unsigned char *a5, uint64_t a6)
{
  if (![(id)a1[5] count])
  {
LABEL_5:
    if ((*(uint64_t (**)(void *))(*a1 + 120))(a1)) {
      return 0;
    }
    long long v15 = *(os_unfair_lock_s **)(a1[7] + 424);
    *a5 = 0;
    unint64_t v16 = (_OWORD *)(a2 + 24);
    uint64_t LibraryContainer = MTLLibraryBuilder::findOrCreateLibraryContainer(v15, v16, a5);
    *a4 = (MTLLibraryContainer *)LibraryContainer;
    if (*a5)
    {
      dispatch_data_t v23 = 0;
      MultiLevelCacheBase::getElement(a1, v16, &v23);
      int v18 = v23;
      if (!v23) {
        return 0;
      }
      uint64_t v19 = (*(uint64_t (**)(uint64_t, dispatch_data_t))(a6 + 16))(a6, v23);
      if (!v19) {
        return 0;
      }
      uint64_t v20 = (MTLLibraryData *)v19;
      if (a3) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 240))(v19, a3);
      }
      unint64_t v21 = (NSMutableDictionary *)objc_opt_new();
      MTLLibraryContainer::init(*a4, v20, v21, 0, 0);
      uint64_t v14 = MTLLibraryContainer::newLibrary((uint64_t)*a4, a1[7]);

      (*(void (**)(MTLLibraryData *))(*(void *)v20 + 24))(v20);
      dispatch_release(v18);
    }
    else
    {
      dispatch_group_wait(*(dispatch_group_t *)(LibraryContainer + 80), 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v14 = MTLLibraryContainer::newLibrary((uint64_t)*a4, a1[7]);
      if (!v14) {
        return v14;
      }
    }
    MTLLibraryBuilder::releaseCacheEntry((MTLLibraryBuilder *)v15, *a4);
    *a4 = 0;
    return v14;
  }
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = objc_msgSend((id)objc_msgSend((id)a1[5], "objectAtIndexedSubscript:", v12), "newStitchedLibraryWithKey:descriptors:", a2 + 24, a3);
    if (v13) {
      return v13;
    }
    if (++v12 >= (unint64_t)[(id)a1[5] count]) {
      goto LABEL_5;
    }
  }
}

void ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke()
{
}

void sub_18276DEF0(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10F1C4047F5CA44);
  _Unwind_Resume(a1);
}

void MTLLibraryDataWithArchive::setStitchingScripts(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 360;
    unsigned int v6 = 1;
    do
    {
      size_t size_ptr = 0;
      buffer_ptr = 0;
      unint64_t v7 = dispatch_data_create_map(*(dispatch_data_t *)(v2 + 40 * v4), (const void **)&buffer_ptr, &size_ptr);
      uint64_t v8 = 0;
      uint64_t v9 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
      char v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 9u)
      {
        uint64_t v8 = (int *)v10[4];
        if (v10[4]) {
          uint64_t v8 = (int *)((char *)v8 + (void)v9 + *(unsigned int *)((char *)v8 + (void)v9));
        }
      }
      uint64_t v11 = (unsigned __int16 *)((char *)v8 - *v8);
      if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0) {
        uint64_t v13 = (int *)((char *)v8 + v12 + *(unsigned int *)((char *)v8 + v12));
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void *)(*a2 + 40 * v4);
      long long v15 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 4));
      std::string::basic_string[abi:ne180100](__p, (char *)v15 + *v15 + 4, *(unsigned int *)((char *)v15 + *v15));
      unint64_t v21 = __p;
      *((void *)std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21)+ 5) = v14;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      dispatch_retain(*(dispatch_object_t *)(*a2 + 40 * v4));
      dispatch_release(v7);
      uint64_t v4 = v6;
      uint64_t v2 = *a2;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v6++);
  }
}

void sub_18276E0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, (unsigned __int8 *)i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  char v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)char v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *unint64_t v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *unint64_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_18276E334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void MultiLevelCacheFactory::createLibraryCache(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count_vtbl *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  uint8x8_t v12 = (std::__shared_weak_count *)operator new(0x58uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC47A0;
  v12[1].__shared_weak_owners_ = 0;
  v12[2].__vftable = 0;
  LODWORD(v12[2].__shared_owners_) = 0;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC42D8;
  v12[1].__shared_owners_ = 0;
  v12[3].__vftable = a3;
  v12[3].__shared_owners_ = a1;
  v12[2].__shared_weak_owners_ = a2;
  if (MultiLevelCacheBase::initialize((uint64_t)&v12[1], 0, a4, a5))
  {
    *a6 = v12 + 1;
    a6[1] = v12;
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_18276E444(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryContainer::newLibrary(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 48)) {
    return 0;
  }
  unint64_t v4 = [_MTLLibrary alloc];

  return (uint64_t)[(_MTLLibrary *)v4 initWithLibraryContainer:a1 device:a2];
}

void storeStitchingTrackingData(char a1, void *a2, void **a3, void *a4)
{
  if (storeStitchingTrackingData(unsigned long,NSArray<objc_object  {objcproto11MTLFunction}*> *,std::shared_ptr<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector<stitchedAirDescriptor,NSArray<objc_object  {objcproto11MTLFunction}*> *::allocator<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector>>>,objc_object  {objcproto10MTLLibrary}*)::onceToken == -1)
  {
    if ((a1 & 2) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    dispatch_once(&storeStitchingTrackingData(unsigned long,NSArray<objc_object  {objcproto11MTLFunction}*> *,std::shared_ptr<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector<stitchedAirDescriptor,NSArray<objc_object  {objcproto11MTLFunction}*> *::allocator<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector>>>,objc_object  {objcproto10MTLLibrary}*)::onceToken, &__block_literal_global_1842);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if (!storeStitchingTrackingData(unsigned long,NSArray<objc_object  {objcproto11MTLFunction}*> *,std::shared_ptr<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector<stitchedAirDescriptor,NSArray<objc_object  {objcproto11MTLFunction}*> *::allocator<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector>>>,objc_object  {objcproto10MTLLibrary}*)::enableMetalScriptCollection) {
        return;
      }
    }
  }
  uint64_t v8 = (char *)operator new(0x40uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1ECAC47D8;
  *((void *)v8 + 3) = &unk_1ECAC43A8;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((void *)v8 + 4) = a2;
  int v33 = 0;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t v9 = (void *)**a3;
  unint64_t v10 = (void *)(*a3)[1];
  if (v9 == v10)
  {
    uint64_t v11 = 0;
    float v20 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      if (v11 >= v35)
      {
        uint64_t v12 = (v11 - (unsigned char *)v33) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = (v35 - (unsigned char *)v33) >> 2;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)(v35 - (unsigned char *)v33) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v35, v14);
        }
        else {
          long long v15 = 0;
        }
        unint64_t v16 = &v15[8 * v12];
        *(void *)unint64_t v16 = *v9;
        uint64_t v11 = v16 + 8;
        char v18 = (char *)v33;
        unint64_t v17 = v34;
        if (v34 != v33)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          unint64_t v17 = (char *)v33;
        }
        int v33 = v16;
        unint64_t v34 = v11;
        uint64_t v35 = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(void *)uint64_t v11 = *v9;
        v11 += 8;
      }
      unint64_t v34 = v11;
      v9 += 5;
    }
    while (v9 != v10);
    float v20 = v33;
  }
  __p = 0;
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__init_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(&__p, v20, (uint64_t)v11, (v11 - (unsigned char *)v20) >> 3);
  float v21 = (NSObject **)*((void *)v8 + 5);
  BOOL v22 = (NSObject **)*((void *)v8 + 6);
  while (v21 != v22)
  {
    unint64_t v23 = *v21++;
    dispatch_release(v23);
  }
  std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__assign_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(v8 + 40, (char *)__p, (uint64_t)v31, (v31 - (unsigned char *)__p) >> 3);
  unint64_t v24 = (NSObject **)*((void *)v8 + 5);
  size_t v25 = (NSObject **)*((void *)v8 + 6);
  while (v24 != v25)
  {
    uint64_t v26 = *v24++;
    dispatch_retain(v26);
  }
  if (__p)
  {
    unint64_t v31 = __p;
    operator delete(__p);
  }
  uint64_t v27 = [a4 libraryData];
  unint64_t v28 = v8 + 24;
  int v29 = (std::__shared_weak_count *)v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, char **))(*(void *)v27 + 280))(v27, &v28);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v33)
  {
    unint64_t v34 = (char *)v33;
    operator delete(v33);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_18276E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,false>(uint64_t result, uint64_t *a2, void **a3, uint64_t a4, char a5)
{
  uint64_t v8 = a3;
  unint64_t v10 = (uint64_t *)result;
LABEL_2:
  unint64_t v493 = a2 - 1;
  uint64_t v495 = a2;
  uint64_t v481 = a2 - 3;
  int v482 = a2 - 2;
  uint64_t v11 = v10;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = a2 - v11;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v219 = *(a2 - 1);
          uint64_t v220 = *v10;
          uint64_t v221 = *v8[1];
          uint64_t v222 = (*v8)[37] + *((_DWORD *)*v8 + 70) - (*v8)[37] + *((_DWORD *)*v8 + 72);
          uint64_t v223 = *(unsigned int *)(v221 + 4 * *v10);
          int v224 = (int *)(v222 - *(unsigned int *)(v221 + 4 * v219));
          int v225 = (int *)(v222 - v223);
          unsigned __int8 v226 = (unsigned __int16 *)((char *)v224 - *v224);
          if (*v226 >= 5u && (uint64_t v227 = v226[2]) != 0)
          {
            int v228 = (unsigned int *)((char *)v224 + v227);
            uint64_t v229 = *v228;
            int v230 = (char *)v228 + v229 + 4;
            size_t v231 = *(unsigned int *)((char *)v228 + v229);
          }
          else
          {
            int v230 = 0;
            size_t v231 = 0;
          }
          int v360 = (unsigned __int16 *)((char *)v225 - *v225);
          if (*v360 >= 5u && (uint64_t v361 = v360[2]) != 0)
          {
            MTLGPUFamily v362 = (unsigned int *)((char *)v225 + v361);
            uint64_t v363 = *v362;
            int v364 = (char *)v362 + v363 + 4;
            size_t v365 = *(unsigned int *)((char *)v362 + v363);
          }
          else
          {
            int v364 = 0;
            size_t v365 = 0;
          }
          if (v365 >= v231) {
            size_t v366 = v231;
          }
          else {
            size_t v366 = v365;
          }
          __n128 result = memcmp(v230, v364, v366);
          if (result)
          {
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (v231 >= v365)
          {
            return result;
          }
          *unint64_t v10 = v219;
          *(a2 - 1) = v220;
          break;
        case 3:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v10, v10 + 1, v493, v8);
        case 4:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v10, v10 + 1, v10 + 2, v493, v8);
        case 5:
          return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,0>(v10, v10 + 1, v10 + 2, v10 + 3, v493, v8);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    BOOL v515 = v10;
    if (v12 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v10 == a2) {
        return result;
      }
      unint64_t v487 = v12;
      int64_t v275 = (unint64_t)(v13 - 2) >> 1;
      size_t v512 = *v8;
      BOOL v489 = v8[1];
      int64_t v276 = v275;
      while (1)
      {
        int64_t v277 = v276;
        if (v275 < v276) {
          goto LABEL_371;
        }
        uint64_t v278 = (2 * v276) | 1;
        int v279 = &v10[v278];
        uint64_t v280 = 2 * v276 + 2;
        int64_t v494 = v276;
        if (v280 < v13) {
          break;
        }
        int64_t v289 = v276;
        uint64_t v290 = *v489;
        uint64_t v291 = v512[37];
        uint64_t v501 = v512[36];
        uint64_t v292 = (*((_DWORD *)v512 + 70) - v291 + v501);
LABEL_315:
        uint64_t v521 = v290;
        long long v302 = &v10[v289];
        uint64_t v303 = *v279;
        uint64_t v304 = v291 + v292;
        long long v305 = (int *)(v304 - *(unsigned int *)(v290 + 4 * *v279));
        uint64_t v306 = *(unsigned int *)(v290 + 4 * *v302);
        long long v307 = (unsigned __int16 *)((char *)v305 - *v305);
        uint64_t v492 = *v302;
        if (*v307 >= 5u && (uint64_t v308 = v307[2]) != 0)
        {
          uint64_t v309 = (unsigned int *)((char *)v305 + v308);
          uint64_t v310 = *v309;
          int v311 = (char *)v309 + v310 + 4;
          size_t v312 = *(unsigned int *)((char *)v309 + v310);
        }
        else
        {
          int v311 = 0;
          size_t v312 = 0;
        }
        BOOL v313 = (int *)(v304 - v306);
        uint64_t v314 = (unsigned __int16 *)((char *)v313 - *v313);
        if (*v314 >= 5u && (uint64_t v315 = v314[2]) != 0)
        {
          size_t v316 = (unsigned int *)((char *)v313 + v315);
          uint64_t v317 = *v316;
          uint64_t v318 = (char *)v316 + v317 + 4;
          size_t v319 = *(unsigned int *)((char *)v316 + v317);
        }
        else
        {
          uint64_t v318 = 0;
          size_t v319 = 0;
        }
        if (v319 >= v312) {
          size_t v320 = v312;
        }
        else {
          size_t v320 = v319;
        }
        __n128 result = memcmp(v311, v318, v320);
        if (result)
        {
          unint64_t v10 = v515;
          uint64_t v321 = v521;
          int64_t v277 = v494;
          if ((result & 0x80000000) == 0) {
            goto LABEL_331;
          }
          goto LABEL_371;
        }
        BOOL v5 = v312 >= v319;
        unint64_t v10 = v515;
        uint64_t v321 = v521;
        int64_t v277 = v494;
        if (v5)
        {
LABEL_331:
          uint64_t v507 = -v306;
          uint64_t v322 = v291;
          int v502 = v501 - v291;
          while (1)
          {
            v323 = v279;
            uint64_t *v302 = v303;
            if (v275 < v278)
            {
LABEL_370:
              int64_t v277 = v494;
              uint64_t *v323 = v492;
              unint64_t v10 = v515;
              goto LABEL_371;
            }
            uint64_t v324 = 2 * v278;
            uint64_t v278 = (2 * v278) | 1;
            int v279 = &v515[v278];
            uint64_t v325 = v324 + 2;
            uint64_t v326 = v512[35];
            if (v325 >= v13)
            {
              uint64_t v334 = (v326 + v502);
              goto LABEL_350;
            }
            uint64_t v334 = (v326 + v502);
            v327 = (int *)(v322 + v334 - *(unsigned int *)(v321 + 4 * *(unsigned int *)v279));
            size_t v328 = (unsigned __int16 *)((char *)v327 - *v327);
            if (*v328 >= 5u && (uint64_t v329 = v328[2]) != 0)
            {
              uint64_t v330 = (unsigned int *)((char *)v327 + v329);
              uint64_t v331 = *v330;
              size_t v332 = (char *)v330 + v331 + 4;
              unint64_t v333 = *(unsigned int *)((char *)v330 + v331);
            }
            else
            {
              size_t v332 = 0;
              unint64_t v333 = 0;
            }
            MTLGPUFamily v335 = (int *)(v322 + v334 - *(unsigned int *)(v521 + 4 * *((unsigned int *)v279 + 2)));
            size_t v336 = (unsigned __int16 *)((char *)v335 - *v335);
            if (*v336 >= 5u && (uint64_t v337 = v336[2]) != 0)
            {
              uint64_t v338 = (unsigned int *)((char *)v335 + v337);
              uint64_t v339 = *v338;
              size_t v340 = (char *)v338 + v339 + 4;
              unint64_t v341 = *(unsigned int *)((char *)v338 + v339);
            }
            else
            {
              size_t v340 = 0;
              unint64_t v341 = 0;
            }
            size_t v342 = v341 >= v333 ? v333 : v341;
            int v343 = memcmp(v332, v340, v342);
            if (!v343) {
              break;
            }
            int64_t v275 = (unint64_t)(v13 - 2) >> 1;
            uint64_t v322 = v291;
            if (v343 < 0) {
              goto LABEL_348;
            }
LABEL_349:
            uint64_t v321 = v521;
LABEL_350:
            uint64_t v303 = *v279;
            uint64_t v344 = v322 + v334;
            int v345 = (int *)(v322 + v334 - *(unsigned int *)(v321 + 4 * *v279));
            size_t v346 = (unsigned __int16 *)((char *)v345 - *v345);
            if (*v346 >= 5u && (uint64_t v347 = v346[2]) != 0)
            {
              uint64_t v348 = (unsigned int *)((char *)v345 + v347);
              uint64_t v349 = *v348;
              size_t v350 = (char *)v348 + v349 + 4;
              size_t v351 = *(unsigned int *)((char *)v348 + v349);
            }
            else
            {
              size_t v350 = 0;
              size_t v351 = 0;
            }
            int v352 = (int *)(v344 + v507);
            unsigned int v353 = (unsigned __int16 *)((char *)v352 - *v352);
            if (*v353 >= 5u && (uint64_t v354 = v353[2]) != 0)
            {
              unint64_t v355 = (unsigned int *)((char *)v352 + v354);
              uint64_t v356 = *v355;
              unint64_t v357 = (char *)v355 + v356 + 4;
              size_t v358 = *(unsigned int *)((char *)v355 + v356);
            }
            else
            {
              unint64_t v357 = 0;
              size_t v358 = 0;
            }
            if (v358 >= v351) {
              size_t v359 = v351;
            }
            else {
              size_t v359 = v358;
            }
            __n128 result = memcmp(v350, v357, v359);
            uint64_t v322 = v291;
            if (!result)
            {
              if (v351 == v358)
              {
                __n128 result = 0;
              }
              else
              {
                if (v351 < v358) {
                  goto LABEL_370;
                }
                __n128 result = 1;
              }
            }
            long long v302 = v323;
            if ((result & 0x80000000) != 0) {
              goto LABEL_370;
            }
          }
          BOOL v5 = v333 >= v341;
          int64_t v275 = (unint64_t)(v13 - 2) >> 1;
          uint64_t v322 = v291;
          if (v5) {
            goto LABEL_349;
          }
LABEL_348:
          ++v279;
          uint64_t v278 = v325;
          goto LABEL_349;
        }
LABEL_371:
        int64_t v276 = v277 - 1;
        if (!v277)
        {
          uint64_t v367 = v487 >> 3;
          size_t v368 = v495;
          int v369 = (uint64_t *)a3;
          while (1)
          {
            BOOL v496 = v368;
            uint64_t v370 = 0;
            uint64_t v513 = *v10;
            int64_t v371 = (unint64_t)(v367 - 2) >> 1;
            uint64_t v373 = *v369;
            size_t v372 = (uint64_t *)v369[1];
            uint64_t v374 = v10;
            uint64_t v522 = v367;
            do
            {
              int v375 = v374;
              v374 += v370 + 1;
              uint64_t v376 = 2 * v370;
              uint64_t v370 = (2 * v370) | 1;
              uint64_t v377 = v376 + 2;
              if (v376 + 2 >= v367) {
                goto LABEL_403;
              }
              uint64_t v378 = *(void *)(v373 + 296)
                   + *(_DWORD *)(v373 + 280)
                   - *(void *)(v373 + 296)
                   + *(_DWORD *)(v373 + 288);
              v379 = (int *)(v378 - *(unsigned int *)(*v372 + 4 * *(unsigned int *)v374));
              size_t v380 = (unsigned __int16 *)((char *)v379 - *v379);
              if (*v380 >= 5u && (uint64_t v381 = v380[2]) != 0)
              {
                uint64_t v382 = (unsigned int *)((char *)v379 + v381);
                uint64_t v383 = *v382;
                size_t v384 = (char *)v382 + v383 + 4;
                size_t v385 = *(unsigned int *)((char *)v382 + v383);
              }
              else
              {
                size_t v384 = 0;
                size_t v385 = 0;
              }
              uint64_t v386 = (int *)(v378 - *(unsigned int *)(*v372 + 4 * *((unsigned int *)v374 + 2)));
              int v387 = (unsigned __int16 *)((char *)v386 - *v386);
              if (*v387 >= 5u && (uint64_t v388 = v387[2]) != 0)
              {
                int v389 = (unsigned int *)((char *)v386 + v388);
                uint64_t v390 = *v389;
                int v391 = (char *)v389 + v390 + 4;
                size_t v392 = *(unsigned int *)((char *)v389 + v390);
              }
              else
              {
                int v391 = 0;
                size_t v392 = 0;
              }
              if (v392 >= v385) {
                size_t v393 = v385;
              }
              else {
                size_t v393 = v392;
              }
              __n128 result = memcmp(v384, v391, v393);
              if (result)
              {
                uint64_t v367 = v522;
                if ((result & 0x80000000) == 0) {
                  goto LABEL_403;
                }
LABEL_402:
                ++v374;
                uint64_t v370 = v377;
                goto LABEL_403;
              }
              uint64_t v367 = v522;
              if (v385 < v392) {
                goto LABEL_402;
              }
LABEL_403:
              *int v375 = *v374;
            }
            while (v370 <= v371);
            size_t v368 = v496 - 1;
            if (v374 == v496 - 1)
            {
              *uint64_t v374 = v513;
              goto LABEL_443;
            }
            *uint64_t v374 = *v368;
            *size_t v368 = v513;
            uint64_t v394 = (char *)v374 - (char *)v515 + 8;
            if (v394 < 9) {
              goto LABEL_443;
            }
            unint64_t v395 = (((unint64_t)v394 >> 3) - 2) >> 1;
            size_t v396 = &v515[v395];
            uint64_t v397 = *v396;
            uint64_t v514 = *v372;
            uint64_t v398 = *(unsigned int *)(*v372 + 4 * *v396);
            uint64_t v399 = *(void *)(v373 + 288);
            uint64_t v508 = *(void *)(v373 + 296);
            uint64_t v400 = v508 + (*(_DWORD *)(v373 + 280) - v508 + v399);
            int v401 = (int *)(v400 - v398);
            uint64_t v402 = (unsigned __int16 *)((char *)v401 - *v401);
            if (*v402 >= 5u && (uint64_t v403 = v402[2]) != 0)
            {
              size_t v404 = (unsigned int *)((char *)v401 + v403);
              uint64_t v405 = *v404;
              uint64_t v406 = (char *)v404 + v405 + 4;
              size_t v407 = *(unsigned int *)((char *)v404 + v405);
            }
            else
            {
              uint64_t v406 = 0;
              size_t v407 = 0;
            }
            uint64_t v408 = *(unsigned int *)(v514 + 4 * *v374);
            int v409 = (int *)(v400 - v408);
            uint64_t v410 = (unsigned __int16 *)((char *)v409 - *v409);
            uint64_t v503 = *v374;
            if (*v410 >= 5u && (uint64_t v411 = v410[2]) != 0)
            {
              size_t v412 = (unsigned int *)((char *)v409 + v411);
              uint64_t v413 = *v412;
              uint64_t v414 = (char *)v412 + v413 + 4;
              size_t v415 = *(unsigned int *)((char *)v412 + v413);
            }
            else
            {
              uint64_t v414 = 0;
              size_t v415 = 0;
            }
            if (v415 >= v407) {
              size_t v416 = v407;
            }
            else {
              size_t v416 = v415;
            }
            __n128 result = memcmp(v406, v414, v416);
            if (result)
            {
              uint64_t v367 = v522;
              if ((result & 0x80000000) == 0) {
                goto LABEL_443;
              }
            }
            else
            {
              uint64_t v367 = v522;
              if (v407 >= v415) {
                goto LABEL_443;
              }
            }
            uint64_t v417 = -v408;
            int v418 = v399 - v508;
            do
            {
              int v419 = v396;
              *uint64_t v374 = v397;
              if (!v395) {
                break;
              }
              unint64_t v395 = (v395 - 1) >> 1;
              size_t v396 = &v515[v395];
              uint64_t v397 = *v396;
              uint64_t v420 = v508 + (v418 + *(_DWORD *)(v373 + 280));
              int v421 = (int *)(v420 - *(unsigned int *)(v514 + 4 * *v396));
              uint64_t v422 = (unsigned __int16 *)((char *)v421 - *v421);
              if (*v422 >= 5u && (uint64_t v423 = v422[2]) != 0)
              {
                size_t v424 = (unsigned int *)((char *)v421 + v423);
                uint64_t v425 = *v424;
                uint64_t v426 = (char *)v424 + v425 + 4;
                size_t v427 = *(unsigned int *)((char *)v424 + v425);
              }
              else
              {
                uint64_t v426 = 0;
                size_t v427 = 0;
              }
              uint64_t v428 = (int *)(v420 + v417);
              uint64_t v429 = (unsigned __int16 *)((char *)v428 - *v428);
              if (*v429 >= 5u && (uint64_t v430 = v429[2]) != 0)
              {
                size_t v431 = (unsigned int *)((char *)v428 + v430);
                uint64_t v432 = *v431;
                int v433 = (char *)v431 + v432 + 4;
                size_t v434 = *(unsigned int *)((char *)v431 + v432);
              }
              else
              {
                int v433 = 0;
                size_t v434 = 0;
              }
              if (v434 >= v427) {
                size_t v435 = v427;
              }
              else {
                size_t v435 = v434;
              }
              __n128 result = memcmp(v426, v433, v435);
              if (!result)
              {
                if (v427 >= v434) {
                  break;
                }
                __n128 result = 0xFFFFFFFFLL;
              }
              uint64_t v374 = v419;
            }
            while ((result & 0x80000000) != 0);
            *int v419 = v503;
            size_t v368 = v496 - 1;
            uint64_t v367 = v522;
LABEL_443:
            BOOL v436 = v367-- <= 2;
            unint64_t v10 = v515;
            int v369 = (uint64_t *)a3;
            if (v436) {
              return result;
            }
          }
        }
      }
      uint64_t v290 = *v489;
      uint64_t v291 = v512[37];
      uint64_t v281 = *((_DWORD *)v512 + 70) - v291 + v512[36];
      uint64_t v282 = (int *)(v291 + v281 - *(unsigned int *)(*v489 + 4 * *(unsigned int *)v279));
      int v283 = (unsigned __int16 *)((char *)v282 - *v282);
      if (*v283 >= 5u && (uint64_t v284 = v283[2]) != 0)
      {
        int v285 = (unsigned int *)((char *)v282 + v284);
        uint64_t v286 = *v285;
        MTLGPUFamily v287 = (char *)v285 + v286 + 4;
        size_t v288 = *(unsigned int *)((char *)v285 + v286);
      }
      else
      {
        MTLGPUFamily v287 = 0;
        size_t v288 = 0;
      }
      long long v293 = (int *)(v291 + v281 - *(unsigned int *)(v290 + 4 * *((unsigned int *)v279 + 2)));
      long long v294 = (unsigned __int16 *)((char *)v293 - *v293);
      uint64_t v501 = v512[36];
      uint64_t v520 = (*((_DWORD *)v512 + 70) - v291 + v501);
      if (*v294 >= 5u && (uint64_t v295 = v294[2]) != 0)
      {
        long long v296 = (unsigned int *)((char *)v293 + v295);
        uint64_t v297 = *v296;
        int v298 = (char *)v296 + v297 + 4;
        size_t v299 = *(unsigned int *)((char *)v296 + v297);
      }
      else
      {
        int v298 = 0;
        size_t v299 = 0;
      }
      if (v299 >= v288) {
        size_t v300 = v288;
      }
      else {
        size_t v300 = v299;
      }
      int v301 = memcmp(v287, v298, v300);
      if (v301)
      {
        unint64_t v10 = v515;
        if ((v301 & 0x80000000) == 0)
        {
LABEL_314:
          int64_t v289 = v494;
          uint64_t v292 = v520;
          goto LABEL_315;
        }
      }
      else
      {
        BOOL v5 = v288 >= v299;
        unint64_t v10 = v515;
        if (v5) {
          goto LABEL_314;
        }
      }
      ++v279;
      uint64_t v278 = v280;
      goto LABEL_314;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    long long v15 = &v10[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 < 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v15, v10, v493, v8);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v10, v15, v493, v8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v10 + 1, v15 - 1, v482, v8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v10 + 2, &v10[v14 + 1], v481, v8);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v15 - 1, v15, &v10[v14 + 1], v8);
      uint64_t v16 = *v10;
      *unint64_t v10 = *v15;
      *long long v15 = v16;
    }
    uint64_t v17 = *v10;
    char v18 = *v8;
    uint64_t v19 = *v8[1];
    uint64_t v518 = v19;
    uint64_t v486 = *v10;
    uint64_t v488 = a4 - 1;
    uint64_t v500 = *v8;
    if (a5)
    {
      uint64_t v20 = v18[37];
      uint64_t v484 = v18[36];
      uint64_t v21 = (*((_DWORD *)v18 + 70) - v20 + v484);
      uint64_t v22 = -(uint64_t)*(unsigned int *)(v19 + 4 * v17);
LABEL_27:
      uint64_t v42 = 0;
      uint64_t v43 = v20 + v21;
      uint64_t v510 = v22;
      unint64_t v44 = (int *)(v20 + v21 + v22);
      unint64_t v45 = (unsigned __int16 *)((char *)v44 - *v44);
      unsigned int v46 = *v45;
      do
      {
        uint64_t v47 = v42;
        uint64_t v48 = *(uint64_t *)((char *)v10 + v42 + 8);
        BOOL v49 = (int *)(v43 - *(unsigned int *)(v518 + 4 * v48));
        uint64_t v50 = (unsigned __int16 *)((char *)v49 - *v49);
        if (*v50 >= 5u && (uint64_t v51 = v50[2]) != 0)
        {
          unint64_t v52 = (unsigned int *)((char *)v49 + v51);
          uint64_t v53 = *v52;
          uint64_t v54 = (char *)v52 + v53 + 4;
          size_t v55 = *(unsigned int *)((char *)v52 + v53);
        }
        else
        {
          uint64_t v54 = 0;
          size_t v55 = 0;
        }
        if (v46 >= 5 && v45[2])
        {
          unint64_t v56 = (unsigned int *)((char *)v44 + v45[2]);
          uint64_t v57 = *v56;
          char v58 = (char *)v56 + v57 + 4;
          size_t v59 = *(unsigned int *)((char *)v56 + v57);
        }
        else
        {
          char v58 = 0;
          size_t v59 = 0;
        }
        if (v59 >= v55) {
          size_t v60 = v55;
        }
        else {
          size_t v60 = v59;
        }
        int v61 = memcmp(v54, v58, v60);
        if (!v61)
        {
          if (v55 >= v59) {
            break;
          }
          int v61 = -1;
        }
        uint64_t v42 = v47 + 8;
      }
      while (v61 < 0);
      uint64_t v504 = v20;
      unsigned __int16 v498 = (uint64_t *)((char *)v10 + v47);
      unint64_t v62 = (unint64_t)v10 + v47 + 8;
      uint64_t v63 = v493;
      if (v47)
      {
        do
        {
          long long v64 = v63;
          unint64_t v65 = (int *)(v43 - *(unsigned int *)(v518 + 4 * *(unsigned int *)v63));
          unint64_t v66 = (unsigned __int16 *)((char *)v65 - *v65);
          if (*v66 >= 5u && (uint64_t v67 = v66[2]) != 0)
          {
            int v68 = (unsigned int *)((char *)v65 + v67);
            uint64_t v69 = *v68;
            uint64_t v70 = (char *)v68 + v69 + 4;
            size_t v71 = *(unsigned int *)((char *)v68 + v69);
          }
          else
          {
            uint64_t v70 = 0;
            size_t v71 = 0;
          }
          if (v46 >= 5 && v45[2])
          {
            unint64_t v72 = (unsigned int *)((char *)v44 + v45[2]);
            uint64_t v73 = *v72;
            int v74 = (char *)v72 + v73 + 4;
            size_t v75 = *(unsigned int *)((char *)v72 + v73);
          }
          else
          {
            int v74 = 0;
            size_t v75 = 0;
          }
          if (v75 >= v71) {
            size_t v76 = v71;
          }
          else {
            size_t v76 = v75;
          }
          int v77 = memcmp(v70, v74, v76);
          if (!v77)
          {
            if (v71 == v75)
            {
              int v77 = 0;
            }
            else
            {
              if (v71 < v75) {
                break;
              }
              int v77 = 1;
            }
          }
          uint64_t v63 = v64 - 1;
        }
        while ((v77 & 0x80000000) == 0);
      }
      else
      {
        unint64_t v78 = v493;
        do
        {
          long long v64 = v78 + 1;
          if (v62 >= (unint64_t)(v78 + 1)) {
            break;
          }
          int v79 = v78;
          int v80 = (int *)(v43 - *(unsigned int *)(v518 + 4 * *(unsigned int *)v78));
          long long v81 = (unsigned __int16 *)((char *)v80 - *v80);
          long long v64 = v79;
          if (*v81 >= 5u && (uint64_t v82 = v81[2]) != 0)
          {
            unint64_t v83 = (unsigned int *)((char *)v80 + v82);
            uint64_t v84 = *v83;
            unint64_t v85 = (char *)v83 + v84 + 4;
            size_t v86 = *(unsigned int *)((char *)v83 + v84);
          }
          else
          {
            unint64_t v85 = 0;
            size_t v86 = 0;
          }
          if (v46 >= 5 && v45[2])
          {
            BOOL v87 = (unsigned int *)((char *)v44 + v45[2]);
            uint64_t v88 = *v87;
            uint64_t v89 = (char *)v87 + v88 + 4;
            size_t v90 = *(unsigned int *)((char *)v87 + v88);
          }
          else
          {
            uint64_t v89 = 0;
            size_t v90 = 0;
          }
          if (v90 >= v86) {
            size_t v91 = v86;
          }
          else {
            size_t v91 = v90;
          }
          int v92 = memcmp(v85, v89, v91);
          if (!v92)
          {
            if (v86 == v90)
            {
              int v92 = 0;
            }
            else
            {
              if (v86 < v90) {
                break;
              }
              int v92 = 1;
            }
          }
          unint64_t v78 = v64 - 1;
        }
        while ((v92 & 0x80000000) == 0);
      }
      int v491 = (uint64_t *)v62;
      BOOL v5 = v62 >= (unint64_t)v64;
      uint64_t v8 = a3;
      unint64_t v93 = v498;
      if (!v5)
      {
        uint64_t v94 = v504;
        int v499 = v484 - v504;
        uint64_t v95 = *v64;
        unint64_t v96 = v491;
        int v485 = v64;
        BOOL v97 = v64;
        do
        {
          *unint64_t v96 = v95;
          *BOOL v97 = v48;
          uint64_t v98 = v94 + (v499 + *((_DWORD *)v500 + 70));
          uint64_t v99 = v98 + v510;
          long long v100 = (unsigned __int16 *)(v98 + v510 - *(int *)(v98 + v510));
          unsigned int v101 = *v100;
          unint64_t v102 = v96 + 1;
          do
          {
            unint64_t v96 = v102;
            uint64_t v48 = *v102;
            int v103 = (int *)(v98 - *(unsigned int *)(v518 + 4 * *v102));
            uint64_t v104 = (unsigned __int16 *)((char *)v103 - *v103);
            if (*v104 >= 5u && (uint64_t v105 = v104[2]) != 0)
            {
              long long v106 = (unsigned int *)((char *)v103 + v105);
              uint64_t v107 = *v106;
              unint64_t v108 = (char *)v106 + v107 + 4;
              size_t v109 = *(unsigned int *)((char *)v106 + v107);
            }
            else
            {
              unint64_t v108 = 0;
              size_t v109 = 0;
            }
            if (v101 >= 5 && v100[2])
            {
              BOOL v110 = (unsigned int *)(v99 + v100[2]);
              uint64_t v111 = *v110;
              int64_t v112 = (char *)v110 + v111 + 4;
              size_t v113 = *(unsigned int *)((char *)v110 + v111);
            }
            else
            {
              int64_t v112 = 0;
              size_t v113 = 0;
            }
            if (v113 >= v109) {
              size_t v114 = v109;
            }
            else {
              size_t v114 = v113;
            }
            int v115 = memcmp(v108, v112, v114);
            if (!v115)
            {
              if (v109 >= v113) {
                break;
              }
              int v115 = -1;
            }
            unint64_t v102 = v96 + 1;
          }
          while (v115 < 0);
          unint64_t v116 = v97 - 1;
          do
          {
            BOOL v97 = v116;
            uint64_t v95 = *v116;
            unint64_t v117 = (int *)(v98 - *(unsigned int *)(v518 + 4 * *v116));
            int v118 = (unsigned __int16 *)((char *)v117 - *v117);
            if (*v118 >= 5u && (uint64_t v119 = v118[2]) != 0)
            {
              unint64_t v120 = (unsigned int *)((char *)v117 + v119);
              uint64_t v121 = *v120;
              int v122 = (char *)v120 + v121 + 4;
              size_t v123 = *(unsigned int *)((char *)v120 + v121);
            }
            else
            {
              int v122 = 0;
              size_t v123 = 0;
            }
            if (v101 >= 5 && v100[2])
            {
              long long v124 = (unsigned int *)(v99 + v100[2]);
              uint64_t v125 = *v124;
              unint64_t v126 = (char *)v124 + v125 + 4;
              size_t v127 = *(unsigned int *)((char *)v124 + v125);
            }
            else
            {
              unint64_t v126 = 0;
              size_t v127 = 0;
            }
            if (v127 >= v123) {
              size_t v128 = v123;
            }
            else {
              size_t v128 = v127;
            }
            int v129 = memcmp(v122, v126, v128);
            if (!v129)
            {
              if (v123 == v127)
              {
                int v129 = 0;
              }
              else
              {
                if (v123 < v127) {
                  break;
                }
                int v129 = 1;
              }
            }
            unint64_t v116 = v97 - 1;
          }
          while ((v129 & 0x80000000) == 0);
          unint64_t v10 = v515;
          uint64_t v94 = v504;
        }
        while (v96 < v97);
        unint64_t v93 = v96 - 1;
        uint64_t v8 = a3;
        long long v64 = v485;
      }
      if (v93 != v10) {
        *unint64_t v10 = *v93;
      }
      a4 = v488;
      *unint64_t v93 = v486;
      a2 = v495;
      if (v491 < v64)
      {
LABEL_124:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,false>(v10, v93, v8, v488, a5 & 1);
        a5 = 0;
        uint64_t v11 = v93 + 1;
      }
      else
      {
        BOOL v130 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v10, v93, v8);
        uint64_t v11 = v93 + 1;
        __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v93 + 1, v495, v8);
        if (result)
        {
          a2 = v93;
          if (v130) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v130) {
          goto LABEL_124;
        }
      }
    }
    else
    {
      uint64_t v20 = v18[37];
      uint64_t v21 = *((_DWORD *)v18 + 70) - v20 + v18[36];
      uint64_t v23 = v20 + v21;
      unint64_t v24 = (int *)(v20 + v21 - *(unsigned int *)(v19 + 4 * *((unsigned int *)v10 - 2)));
      size_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
      uint64_t v484 = v18[36];
      if (*v25 >= 5u && (uint64_t v26 = v25[2]) != 0)
      {
        uint64_t v27 = (unsigned int *)((char *)v24 + v26);
        uint64_t v28 = *v27;
        int v29 = (char *)v27 + v28 + 4;
        size_t v30 = *(unsigned int *)((char *)v27 + v28);
      }
      else
      {
        int v29 = 0;
        size_t v30 = 0;
      }
      uint64_t v31 = *(unsigned int *)(v518 + 4 * v17);
      uint64_t v497 = v23 - v31;
      uint64_t v32 = (unsigned __int16 *)(v23 - v31 - *(int *)(v23 - v31));
      unsigned int v33 = *v32;
      if (v33 < 5)
      {
        uint64_t v34 = v23 - v31 - *(int *)(v23 - v31);
      }
      else
      {
        uint64_t v34 = v23 - v31 - *(int *)(v23 - v31);
        uint64_t v35 = v32[2];
        if (v35)
        {
          long long v36 = (unsigned int *)(v497 + v35);
          uint64_t v37 = *v36;
          unint64_t v38 = (char *)v36 + v37 + 4;
          size_t v39 = *(unsigned int *)((char *)v36 + v37);
          goto LABEL_21;
        }
      }
      unint64_t v38 = 0;
      size_t v39 = 0;
LABEL_21:
      uint64_t v509 = -v31;
      if (v39 >= v30) {
        size_t v40 = v30;
      }
      else {
        size_t v40 = v39;
      }
      int v41 = memcmp(v29, v38, v40);
      if (v41)
      {
        if (v41 < 0) {
          goto LABEL_26;
        }
      }
      else if (v30 < v39)
      {
LABEL_26:
        uint64_t v22 = v509;
        goto LABEL_27;
      }
      if (v33 < 5)
      {
        int v134 = 0;
        size_t v135 = 0;
        uint64_t v131 = v34;
      }
      else
      {
        uint64_t v131 = v34;
        if (*(_WORD *)(v34 + 4))
        {
          uint64_t v132 = (unsigned int *)(v497 + *(unsigned __int16 *)(v34 + 4));
          uint64_t v133 = *v132;
          int v134 = (char *)v132 + v133 + 4;
          size_t v135 = *(unsigned int *)((char *)v132 + v133);
        }
        else
        {
          int v134 = 0;
          size_t v135 = 0;
        }
      }
      uint64_t v136 = (int *)(v23 - *(unsigned int *)(v518 + 4 * *(unsigned int *)v493));
      uint64_t v137 = (unsigned __int16 *)((char *)v136 - *v136);
      if (*v137 >= 5u && (uint64_t v138 = v137[2]) != 0)
      {
        unint64_t v139 = (unsigned int *)((char *)v136 + v138);
        uint64_t v140 = *v139;
        long long v141 = (char *)v139 + v140 + 4;
        size_t v142 = *(unsigned int *)((char *)v139 + v140);
      }
      else
      {
        long long v141 = 0;
        size_t v142 = 0;
      }
      if (v142 >= v135) {
        size_t v143 = v135;
      }
      else {
        size_t v143 = v142;
      }
      __n128 result = memcmp(v134, v141, v143);
      if (result)
      {
        if ((result & 0x80000000) != 0) {
          goto LABEL_140;
        }
      }
      else if (v135 < v142)
      {
LABEL_140:
        unint64_t v144 = v10 + 1;
        do
        {
          uint64_t v11 = v144;
          if (v33 >= 5 && *(_WORD *)(v131 + 4))
          {
            uint64_t v145 = (unsigned int *)(v497 + *(unsigned __int16 *)(v131 + 4));
            uint64_t v146 = *v145;
            unint64_t v147 = (char *)v145 + v146 + 4;
            size_t v148 = *(unsigned int *)((char *)v145 + v146);
          }
          else
          {
            unint64_t v147 = 0;
            size_t v148 = 0;
          }
          uint64_t v149 = (int *)(v23 - *(unsigned int *)(v518 + 4 * *(unsigned int *)v11));
          long long v150 = (unsigned __int16 *)((char *)v149 - *v149);
          if (*v150 >= 5u && (uint64_t v151 = v150[2]) != 0)
          {
            unint64_t v152 = (unsigned int *)((char *)v149 + v151);
            uint64_t v153 = *v152;
            uint64_t v154 = (char *)v152 + v153 + 4;
            size_t v155 = *(unsigned int *)((char *)v152 + v153);
          }
          else
          {
            uint64_t v154 = 0;
            size_t v155 = 0;
          }
          if (v155 >= v148) {
            size_t v156 = v148;
          }
          else {
            size_t v156 = v155;
          }
          __n128 result = memcmp(v147, v154, v156);
          if (!result)
          {
            if (v148 == v155)
            {
              __n128 result = 0;
            }
            else
            {
              if (v148 < v155) {
                goto LABEL_179;
              }
              __n128 result = 1;
            }
          }
          unint64_t v144 = v11 + 1;
        }
        while ((result & 0x80000000) == 0);
        goto LABEL_179;
      }
      unint64_t v157 = v10 + 1;
      do
      {
        uint64_t v11 = v157;
        if (v157 >= a2) {
          break;
        }
        if (v33 >= 5 && *(_WORD *)(v131 + 4))
        {
          unint64_t v158 = (unsigned int *)(v497 + *(unsigned __int16 *)(v131 + 4));
          uint64_t v159 = *v158;
          uint64_t v160 = (char *)v158 + v159 + 4;
          size_t v161 = *(unsigned int *)((char *)v158 + v159);
        }
        else
        {
          uint64_t v160 = 0;
          size_t v161 = 0;
        }
        unint64_t v162 = (int *)(v23 - *(unsigned int *)(v518 + 4 * *(unsigned int *)v11));
        unint64_t v163 = (unsigned __int16 *)((char *)v162 - *v162);
        if (*v163 >= 5u && (uint64_t v164 = v163[2]) != 0)
        {
          uint64_t v165 = (unsigned int *)((char *)v162 + v164);
          uint64_t v166 = *v165;
          unint64_t v167 = (char *)v165 + v166 + 4;
          size_t v168 = *(unsigned int *)((char *)v165 + v166);
        }
        else
        {
          unint64_t v167 = 0;
          size_t v168 = 0;
        }
        if (v168 >= v161) {
          size_t v169 = v161;
        }
        else {
          size_t v169 = v168;
        }
        __n128 result = memcmp(v160, v167, v169);
        if (!result)
        {
          if (v161 == v168)
          {
            __n128 result = 0;
          }
          else
          {
            if (v161 < v168) {
              break;
            }
            __n128 result = 1;
          }
        }
        unint64_t v157 = v11 + 1;
      }
      while ((result & 0x80000000) == 0);
LABEL_179:
      uint64_t v505 = v20;
      long long v170 = a2;
      if (v11 < a2)
      {
        long long v171 = v493;
        do
        {
          long long v170 = v171;
          if (v33 >= 5 && *(_WORD *)(v131 + 4))
          {
            unint64_t v172 = (unsigned int *)(v497 + *(unsigned __int16 *)(v131 + 4));
            uint64_t v173 = *v172;
            int v174 = (char *)v172 + v173 + 4;
            size_t v175 = *(unsigned int *)((char *)v172 + v173);
          }
          else
          {
            int v174 = 0;
            size_t v175 = 0;
          }
          long long v176 = (int *)(v23 - *(unsigned int *)(v518 + 4 * *(unsigned int *)v170));
          unint64_t v177 = (unsigned __int16 *)((char *)v176 - *v176);
          if (*v177 >= 5u && (uint64_t v178 = v177[2]) != 0)
          {
            int v179 = (unsigned int *)((char *)v176 + v178);
            uint64_t v180 = *v179;
            __n128 v181 = (char *)v179 + v180 + 4;
            size_t v182 = *(unsigned int *)((char *)v179 + v180);
          }
          else
          {
            __n128 v181 = 0;
            size_t v182 = 0;
          }
          if (v182 >= v175) {
            size_t v183 = v175;
          }
          else {
            size_t v183 = v182;
          }
          __n128 result = memcmp(v174, v181, v183);
          if (!result)
          {
            if (v175 >= v182) {
              break;
            }
            __n128 result = 0xFFFFFFFFLL;
          }
          long long v171 = v170 - 1;
        }
        while ((result & 0x80000000) != 0);
      }
      if (v11 >= v170)
      {
        a4 = v488;
      }
      else
      {
        uint64_t v184 = *v11;
        uint64_t v185 = *v170;
        do
        {
          *uint64_t v11 = v185;
          *long long v170 = v184;
          uint64_t v186 = v505 + (v484 - v505 + *((_DWORD *)v500 + 70));
          uint64_t v516 = v186 + v509;
          __n128 v187 = (unsigned __int16 *)(v186 + v509 - *(int *)(v186 + v509));
          unsigned int v188 = *v187;
          __n128 v189 = v11 + 1;
          do
          {
            uint64_t v11 = v189;
            uint64_t v184 = *v189;
            uint64_t v190 = *(unsigned int *)(v518 + 4 * *v189);
            if (v188 >= 5 && v187[2])
            {
              long long v191 = (unsigned int *)(v516 + v187[2]);
              uint64_t v192 = *v191;
              __n128 v193 = (char *)v191 + v192 + 4;
              size_t v194 = *(unsigned int *)((char *)v191 + v192);
            }
            else
            {
              __n128 v193 = 0;
              size_t v194 = 0;
            }
            __n128 v195 = (int *)(v186 - v190);
            long long v196 = (unsigned __int16 *)((char *)v195 - *v195);
            if (*v196 >= 5u && (uint64_t v197 = v196[2]) != 0)
            {
              long long v198 = (unsigned int *)((char *)v195 + v197);
              uint64_t v199 = *v198;
              long long v200 = (char *)v198 + v199 + 4;
              size_t v201 = *(unsigned int *)((char *)v198 + v199);
            }
            else
            {
              long long v200 = 0;
              size_t v201 = 0;
            }
            if (v201 >= v194) {
              size_t v202 = v194;
            }
            else {
              size_t v202 = v201;
            }
            int v203 = memcmp(v193, v200, v202);
            if (!v203)
            {
              if (v194 == v201)
              {
                int v203 = 0;
              }
              else
              {
                if (v194 < v201) {
                  break;
                }
                int v203 = 1;
              }
            }
            __n128 v189 = v11 + 1;
          }
          while ((v203 & 0x80000000) == 0);
          __n128 v204 = (unsigned int *)(v170 - 1);
          do
          {
            long long v170 = (uint64_t *)v204;
            uint64_t v185 = *(void *)v204;
            uint64_t v205 = *(unsigned int *)(v518 + 4 * *(void *)v204);
            if (v188 >= 5 && v187[2])
            {
              long long v206 = (unsigned int *)(v516 + v187[2]);
              uint64_t v207 = *v206;
              int v208 = (char *)v206 + v207 + 4;
              size_t v209 = *(unsigned int *)((char *)v206 + v207);
            }
            else
            {
              int v208 = 0;
              size_t v209 = 0;
            }
            uint64_t v210 = (int *)(v186 - v205);
            uint64_t v211 = (unsigned __int16 *)((char *)v210 - *v210);
            if (*v211 >= 5u && (uint64_t v212 = v211[2]) != 0)
            {
              int v213 = (unsigned int *)((char *)v210 + v212);
              uint64_t v214 = *v213;
              uint64_t v215 = (char *)v213 + v214 + 4;
              size_t v216 = *(unsigned int *)((char *)v213 + v214);
            }
            else
            {
              uint64_t v215 = 0;
              size_t v216 = 0;
            }
            if (v216 >= v209) {
              size_t v217 = v209;
            }
            else {
              size_t v217 = v216;
            }
            __n128 result = memcmp(v208, v215, v217);
            if (!result)
            {
              if (v209 >= v216) {
                break;
              }
              __n128 result = 0xFFFFFFFFLL;
            }
            __n128 v204 = (unsigned int *)(v170 - 1);
          }
          while ((result & 0x80000000) != 0);
          a4 = v488;
        }
        while (v11 < v170);
      }
      char v218 = v11 - 1;
      BOOL v5 = v11 - 1 >= v10;
      BOOL v6 = v11 - 1 == v10;
      a2 = v495;
      if (v11 - 1 != v10) {
        *unint64_t v10 = *v218;
      }
      a5 = 0;
      uint64_t *v218 = v486;
      uint64_t v8 = a3;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (v10 == a2) {
      return result;
    }
    size_t v437 = v10 + 1;
    if (v10 + 1 == a2) {
      return result;
    }
    unint64_t v438 = *v8;
    uint64_t v439 = *v8[1];
    uint64_t v440 = v438[37];
    uint64_t v441 = v438[36] - v440;
    while (1)
    {
      unint64_t v442 = v10;
      int v443 = v437;
      uint64_t v444 = v10[1];
      uint64_t v445 = *(unsigned int *)(v439 + 4 * v444);
      uint64_t v446 = v440 + (v441 + *((_DWORD *)v438 + 70));
      int v447 = (unsigned __int16 *)(v446 - v445 - *(int *)(v446 - v445));
      int v517 = v443;
      if (*v447 >= 5u && (uint64_t v448 = v447[2]) != 0)
      {
        BOOL v449 = (unsigned int *)(v446 - v445 + v448);
        uint64_t v450 = *v449;
        int v451 = (char *)v449 + v450 + 4;
        size_t v452 = *(unsigned int *)((char *)v449 + v450);
      }
      else
      {
        int v451 = 0;
        size_t v452 = 0;
      }
      uint64_t v453 = *v442;
      int v454 = (int *)(v446 - *(unsigned int *)(v439 + 4 * *v442));
      int v455 = (unsigned __int16 *)((char *)v454 - *v454);
      if (*v455 >= 5u && (uint64_t v456 = v455[2]) != 0)
      {
        uint64_t v457 = (unsigned int *)((char *)v454 + v456);
        uint64_t v458 = *v457;
        unsigned __int16 v459 = (char *)v457 + v458 + 4;
        size_t v460 = *(unsigned int *)((char *)v457 + v458);
      }
      else
      {
        unsigned __int16 v459 = 0;
        size_t v460 = 0;
      }
      if (v460 >= v452) {
        size_t v461 = v452;
      }
      else {
        size_t v461 = v460;
      }
      __n128 result = memcmp(v451, v459, v461);
      if (result)
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_481;
        }
      }
      else if (v452 >= v460)
      {
        goto LABEL_481;
      }
      uint64_t v523 = v444;
      uint64_t v462 = -v445;
      do
      {
        unsigned __int16 v463 = v442;
        uint64_t v465 = *--v442;
        uint64_t v464 = v465;
        v442[2] = v453;
        uint64_t v466 = v440 + (v441 + *((_DWORD *)v438 + 70));
        int v467 = (unsigned __int16 *)(v466 + v462 - *(int *)(v466 + v462));
        if (*v467 >= 5u && (uint64_t v468 = v467[2]) != 0)
        {
          int v469 = (unsigned int *)(v466 + v462 + v468);
          uint64_t v470 = *v469;
          int v471 = (char *)v469 + v470 + 4;
          size_t v472 = *(unsigned int *)((char *)v469 + v470);
        }
        else
        {
          int v471 = 0;
          size_t v472 = 0;
        }
        BOOL v473 = (int *)(v466 - *(unsigned int *)(v439 + 4 * v464));
        int v474 = (unsigned __int16 *)((char *)v473 - *v473);
        if (*v474 >= 5u && (uint64_t v475 = v474[2]) != 0)
        {
          unsigned int v476 = (unsigned int *)((char *)v473 + v475);
          uint64_t v477 = *v476;
          int v478 = (char *)v476 + v477 + 4;
          size_t v479 = *(unsigned int *)((char *)v476 + v477);
        }
        else
        {
          int v478 = 0;
          size_t v479 = 0;
        }
        if (v479 >= v472) {
          size_t v480 = v472;
        }
        else {
          size_t v480 = v479;
        }
        __n128 result = memcmp(v471, v478, v480);
        if (!result)
        {
          if (v472 >= v479) {
            break;
          }
          __n128 result = 0xFFFFFFFFLL;
        }
        uint64_t v453 = v464;
      }
      while ((result & 0x80000000) != 0);
      *unsigned __int16 v463 = v523;
LABEL_481:
      unint64_t v10 = v517;
      size_t v437 = v517 + 1;
      if (v517 + 1 == v495) {
        return result;
      }
    }
  }
  if (v10 == a2) {
    return result;
  }
  unsigned int v232 = v10 + 1;
  if (v10 + 1 == a2) {
    return result;
  }
  uint64_t v233 = 0;
  int v234 = v8;
  uint64_t v235 = *v8;
  uint64_t v236 = *v234[1];
  uint64_t v237 = v235[37];
  uint64_t v238 = v235[36] - v237;
  unint64_t v239 = v10;
  while (2)
  {
    uint64_t v240 = v232;
    uint64_t v241 = *(unsigned int *)(v236 + 4 * v239[1]);
    uint64_t v242 = v237 + (v238 + *((_DWORD *)v235 + 70));
    int v243 = (unsigned __int16 *)(v242 - v241 - *(int *)(v242 - v241));
    BOOL v519 = v240;
    uint64_t v511 = v239[1];
    if (*v243 >= 5u && (uint64_t v244 = v243[2]) != 0)
    {
      unint64_t v245 = (unsigned int *)(v242 - v241 + v244);
      uint64_t v246 = *v245;
      unint64_t v247 = (char *)v245 + v246 + 4;
      size_t v248 = *(unsigned int *)((char *)v245 + v246);
    }
    else
    {
      unint64_t v247 = 0;
      size_t v248 = 0;
    }
    uint64_t v249 = *v239;
    int v250 = (int *)(v242 - *(unsigned int *)(v236 + 4 * *v239));
    int v251 = (unsigned __int16 *)((char *)v250 - *v250);
    if (*v251 >= 5u && (uint64_t v252 = v251[2]) != 0)
    {
      int v253 = (unsigned int *)((char *)v250 + v252);
      uint64_t v254 = *v253;
      int v255 = (char *)v253 + v254 + 4;
      size_t v256 = *(unsigned int *)((char *)v253 + v254);
    }
    else
    {
      int v255 = 0;
      size_t v256 = 0;
    }
    if (v256 >= v248) {
      size_t v257 = v248;
    }
    else {
      size_t v257 = v256;
    }
    __n128 result = memcmp(v247, v255, v257);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_293;
      }
    }
    else if (v248 >= v256)
    {
      goto LABEL_293;
    }
    uint64_t v258 = -v241;
    uint64_t v506 = v233;
    while (2)
    {
      *(uint64_t *)((char *)v515 + v233 + 8) = v249;
      if (!v233)
      {
        int v259 = v515;
        goto LABEL_292;
      }
      int v259 = v239;
      uint64_t v260 = v237 + (v238 + *((_DWORD *)v235 + 70));
      int v261 = (unsigned __int16 *)(v260 + v258 - *(int *)(v260 + v258));
      if (*v261 >= 5u && (uint64_t v262 = v261[2]) != 0)
      {
        uint64_t v263 = (unsigned int *)(v260 + v258 + v262);
        uint64_t v264 = *v263;
        uint64_t v265 = (char *)v263 + v264 + 4;
        size_t v266 = *(unsigned int *)((char *)v263 + v264);
      }
      else
      {
        uint64_t v265 = 0;
        size_t v266 = 0;
      }
      uint64_t v249 = *(uint64_t *)((char *)v515 + v233 - 8);
      int v267 = (int *)(v260 - *(unsigned int *)(v236 + 4 * v249));
      uint64_t v268 = (unsigned __int16 *)((char *)v267 - *v267);
      if (*v268 >= 5u && (uint64_t v269 = v268[2]) != 0)
      {
        int v270 = (unsigned int *)((char *)v267 + v269);
        uint64_t v271 = *v270;
        int v272 = (char *)v270 + v271 + 4;
        size_t v273 = *(unsigned int *)((char *)v270 + v271);
      }
      else
      {
        int v272 = 0;
        size_t v273 = 0;
      }
      if (v273 >= v266) {
        size_t v274 = v266;
      }
      else {
        size_t v274 = v273;
      }
      __n128 result = memcmp(v265, v272, v274);
      if (result)
      {
LABEL_288:
        unint64_t v239 = v259 - 1;
        v233 -= 8;
        if ((result & 0x80000000) == 0) {
          goto LABEL_292;
        }
        continue;
      }
      break;
    }
    if (v266 < v273)
    {
      __n128 result = 0xFFFFFFFFLL;
      goto LABEL_288;
    }
    int v259 = (uint64_t *)((char *)v515 + v233);
LABEL_292:
    uint64_t v233 = v506;
    *int v259 = v511;
LABEL_293:
    unint64_t v239 = v519;
    unsigned int v232 = v519 + 1;
    v233 += 8;
    if (v519 + 1 != v495) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, void **a4)
{
  unint64_t v4 = *a4;
  uint64_t v5 = *a4[1];
  uint64_t v6 = (*a4)[37];
  uint64_t v7 = v6 + *((_DWORD *)*a4 + 70) - v6 + (*a4)[36];
  uint64_t v8 = *(unsigned int *)(v5 + 4 * *a1);
  unint64_t v9 = (int *)(v7 - *(unsigned int *)(v5 + 4 * *a2));
  unint64_t v10 = (int *)(v7 - v8);
  uint64_t v11 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v12 = *v11;
  uint64_t v90 = *a1;
  if (v12 >= 5 && v11[2])
  {
    uint64_t v13 = (unsigned int *)((char *)v9 + v11[2]);
    uint64_t v14 = *v13;
    long long v15 = (char *)v13 + v14 + 4;
    size_t v16 = *(unsigned int *)((char *)v13 + v14);
  }
  else
  {
    long long v15 = 0;
    size_t v16 = 0;
  }
  uint64_t v17 = (unsigned __int16 *)((char *)v10 - *v10);
  uint64_t v88 = *a2;
  int v89 = (*a4)[36];
  if (*v17 >= 5u && (uint64_t v18 = v17[2]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)v10 + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = (char *)v19 + v20 + 4;
    size_t v22 = *(unsigned int *)((char *)v19 + v20);
  }
  else
  {
    uint64_t v21 = 0;
    size_t v22 = 0;
  }
  if (v22 >= v16) {
    size_t v23 = v16;
  }
  else {
    size_t v23 = v22;
  }
  int v24 = memcmp(v15, v21, v23);
  if (v24)
  {
    if (v24 < 0)
    {
LABEL_14:
      uint64_t v25 = *a3;
      uint64_t v26 = (int *)(v7 - *(unsigned int *)(v5 + 4 * *a3));
      uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
      if (*v27 >= 5u && (uint64_t v28 = v27[2]) != 0)
      {
        int v29 = (unsigned int *)((char *)v26 + v28);
        uint64_t v30 = *v29;
        uint64_t v31 = (char *)v29 + v30 + 4;
        size_t v32 = *(unsigned int *)((char *)v29 + v30);
      }
      else
      {
        uint64_t v31 = 0;
        size_t v32 = 0;
      }
      if (v12 >= 5 && v11[2])
      {
        int v41 = (unsigned int *)((char *)v9 + v11[2]);
        uint64_t v42 = *v41;
        uint64_t v43 = (char *)v41 + v42 + 4;
        size_t v44 = *(unsigned int *)((char *)v41 + v42);
      }
      else
      {
        uint64_t v43 = 0;
        size_t v44 = 0;
      }
      if (v44 >= v32) {
        size_t v49 = v32;
      }
      else {
        size_t v49 = v44;
      }
      uint64_t result = memcmp(v31, v43, v49);
      if (result)
      {
        if ((result & 0x80000000) != 0)
        {
LABEL_35:
          *a1 = v25;
          *a3 = v90;
          return result;
        }
      }
      else if (v32 < v44)
      {
        goto LABEL_35;
      }
      uint64_t v52 = -v8;
      *a1 = v88;
      *a2 = v90;
      uint64_t v53 = *a3;
      uint64_t v54 = v6 + (v89 - v6 + v4[70]);
      size_t v55 = (int *)(v54 - *(unsigned int *)(v5 + 4 * *a3));
      unint64_t v56 = (int *)(v54 + v52);
      uint64_t v57 = (unsigned __int16 *)((char *)v55 - *v55);
      if (*v57 >= 5u && (uint64_t v58 = v57[2]) != 0)
      {
        size_t v59 = (unsigned int *)((char *)v55 + v58);
        uint64_t v60 = *v59;
        int v61 = (char *)v59 + v60 + 4;
        size_t v62 = *(unsigned int *)((char *)v59 + v60);
      }
      else
      {
        int v61 = 0;
        size_t v62 = 0;
      }
      int v74 = (unsigned __int16 *)((char *)v56 - *v56);
      if (*v74 >= 5u && (uint64_t v75 = v74[2]) != 0)
      {
        size_t v76 = (unsigned int *)((char *)v56 + v75);
        uint64_t v77 = *v76;
        unint64_t v78 = (char *)v76 + v77 + 4;
        size_t v79 = *(unsigned int *)((char *)v76 + v77);
      }
      else
      {
        unint64_t v78 = 0;
        size_t v79 = 0;
      }
      if (v79 >= v62) {
        size_t v86 = v62;
      }
      else {
        size_t v86 = v79;
      }
      uint64_t result = memcmp(v61, v78, v86);
      if (result)
      {
        if ((result & 0x80000000) == 0) {
          return result;
        }
      }
      else if (v62 >= v79)
      {
        return result;
      }
      *a2 = v53;
      *a3 = v90;
      return result;
    }
  }
  else if (v16 < v22)
  {
    goto LABEL_14;
  }
  uint64_t v33 = *a3;
  uint64_t v34 = (int *)(v7 - *(unsigned int *)(v5 + 4 * *a3));
  uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
  if (*v35 >= 5u && (uint64_t v36 = v35[2]) != 0)
  {
    uint64_t v37 = (unsigned int *)((char *)v34 + v36);
    uint64_t v38 = *v37;
    size_t v39 = (char *)v37 + v38 + 4;
    size_t v40 = *(unsigned int *)((char *)v37 + v38);
  }
  else
  {
    size_t v39 = 0;
    size_t v40 = 0;
  }
  if (v12 >= 5 && v11[2])
  {
    unint64_t v45 = (unsigned int *)((char *)v9 + v11[2]);
    uint64_t v46 = *v45;
    uint64_t v47 = (char *)v45 + v46 + 4;
    size_t v48 = *(unsigned int *)((char *)v45 + v46);
  }
  else
  {
    uint64_t v47 = 0;
    size_t v48 = 0;
  }
  if (v48 >= v40) {
    size_t v51 = v40;
  }
  else {
    size_t v51 = v48;
  }
  uint64_t result = memcmp(v39, v47, v51);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v40 >= v48)
  {
    return result;
  }
  *a2 = v33;
  *a3 = v88;
  uint64_t v63 = *a2;
  uint64_t v64 = *a1;
  uint64_t v65 = v6 + (v89 - v6 + v4[70]);
  unint64_t v66 = (int *)(v65 - *(unsigned int *)(v5 + 4 * *a2));
  uint64_t v67 = (int *)(v65 - *(unsigned int *)(v5 + 4 * *a1));
  int v68 = (unsigned __int16 *)((char *)v66 - *v66);
  if (*v68 >= 5u && (uint64_t v69 = v68[2]) != 0)
  {
    uint64_t v70 = (unsigned int *)((char *)v66 + v69);
    uint64_t v71 = *v70;
    unint64_t v72 = (char *)v70 + v71 + 4;
    size_t v73 = *(unsigned int *)((char *)v70 + v71);
  }
  else
  {
    unint64_t v72 = 0;
    size_t v73 = 0;
  }
  int v80 = (unsigned __int16 *)((char *)v67 - *v67);
  if (*v80 >= 5u && (uint64_t v81 = v80[2]) != 0)
  {
    uint64_t v82 = (unsigned int *)((char *)v67 + v81);
    uint64_t v83 = *v82;
    uint64_t v84 = (char *)v82 + v83 + 4;
    size_t v85 = *(unsigned int *)((char *)v82 + v83);
  }
  else
  {
    uint64_t v84 = 0;
    size_t v85 = 0;
  }
  if (v85 >= v73) {
    size_t v87 = v73;
  }
  else {
    size_t v87 = v85;
  }
  uint64_t result = memcmp(v72, v84, v87);
  if (!result)
  {
    if (v73 >= v85) {
      return result;
    }
    goto LABEL_76;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_76:
    *a1 = v63;
    *a2 = v64;
  }
  return result;
}

void bufferTypeMap(void)::$_0::operator()(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1827747FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(v81[3]);
  }
  if (a62 < 0) {
    operator delete(v81[6]);
  }
  if (a68 < 0) {
    operator delete(v81[9]);
  }
  if (a72 < 0) {
    operator delete(v81[12]);
  }
  if (a73 < 0) {
    operator delete(v81[15]);
  }
  if (a74 < 0) {
    operator delete(v81[18]);
  }
  if (a75 < 0) {
    operator delete(v81[21]);
  }
  if (a76 < 0) {
    operator delete(v81[24]);
  }
  if (a77 < 0) {
    operator delete(v81[27]);
  }
  if (a78 < 0) {
    operator delete(v81[30]);
  }
  if (a79 < 0) {
    operator delete(*v87);
  }
  if (a80 < 0) {
    operator delete(v87[3]);
  }
  if (a81 < 0) {
    operator delete(v87[6]);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(v87[9]);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete(v87[12]);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete(v87[15]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete(v87[18]);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete(v87[21]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete(v87[24]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete(v87[27]);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete(v87[30]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete(*v86);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete(v86[3]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete(v86[6]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete(v86[9]);
  }
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete(v86[12]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete(v86[15]);
  }
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete(v86[18]);
  }
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete(v86[21]);
  }
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete(v86[24]);
  }
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete(v86[27]);
  }
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete(v86[30]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete(*v84);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete(v84[3]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete(v84[6]);
  }
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete(v84[9]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete(v84[12]);
  }
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete(v84[15]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete(v84[18]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete(v84[21]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete(v84[24]);
  }
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete(v84[27]);
  }
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete(v84[30]);
  }
  if (SLOBYTE(STACK[0x4DF]) < 0) {
    operator delete(*v85);
  }
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete(v85[3]);
  }
  if (SLOBYTE(STACK[0x50F]) < 0) {
    operator delete(v85[6]);
  }
  if (SLOBYTE(STACK[0x527]) < 0) {
    operator delete(v85[9]);
  }
  if (SLOBYTE(STACK[0x53F]) < 0) {
    operator delete(v85[12]);
  }
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete(v85[15]);
  }
  if (SLOBYTE(STACK[0x56F]) < 0) {
    operator delete(v85[18]);
  }
  if (SLOBYTE(STACK[0x587]) < 0) {
    operator delete(v85[21]);
  }
  if (SLOBYTE(STACK[0x59F]) < 0) {
    operator delete(v85[24]);
  }
  if (SLOBYTE(STACK[0x5B7]) < 0) {
    operator delete(v85[27]);
  }
  if (SLOBYTE(STACK[0x5CF]) < 0) {
    operator delete(v85[30]);
  }
  if (SLOBYTE(STACK[0x5E7]) < 0) {
    operator delete((void *)STACK[0x5D0]);
  }
  if (SLOBYTE(STACK[0x5FF]) < 0) {
    operator delete((void *)STACK[0x5E8]);
  }
  if (SLOBYTE(STACK[0x617]) < 0) {
    operator delete((void *)STACK[0x600]);
  }
  if (SLOBYTE(STACK[0x62F]) < 0) {
    operator delete((void *)STACK[0x618]);
  }
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  if (SLOBYTE(STACK[0x65F]) < 0) {
    operator delete((void *)STACK[0x648]);
  }
  if (SLOBYTE(STACK[0x677]) < 0) {
    operator delete((void *)STACK[0x660]);
  }
  if (SLOBYTE(STACK[0x68F]) < 0) {
    operator delete((void *)STACK[0x678]);
  }
  if (SLOBYTE(STACK[0x6A7]) < 0) {
    operator delete((void *)STACK[0x690]);
  }
  if (SLOBYTE(STACK[0x6BF]) < 0) {
    operator delete((void *)STACK[0x6A8]);
  }
  if (SLOBYTE(STACK[0x6D7]) < 0) {
    operator delete((void *)STACK[0x6C0]);
  }
  if (SLOBYTE(STACK[0x6EF]) < 0) {
    operator delete((void *)STACK[0x6D8]);
  }
  if (SLOBYTE(STACK[0x707]) < 0) {
    operator delete((void *)STACK[0x6F0]);
  }
  if (SLOBYTE(STACK[0x71F]) < 0) {
    operator delete((void *)STACK[0x708]);
  }
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  if (SLOBYTE(STACK[0x74F]) < 0) {
    operator delete((void *)STACK[0x738]);
  }
  if (SLOBYTE(STACK[0x767]) < 0) {
    operator delete((void *)STACK[0x750]);
  }
  if (SLOBYTE(STACK[0x77F]) < 0) {
    operator delete((void *)STACK[0x768]);
  }
  if (SLOBYTE(STACK[0x797]) < 0) {
    operator delete((void *)STACK[0x780]);
  }
  if (SLOBYTE(STACK[0x7AF]) < 0) {
    operator delete((void *)STACK[0x798]);
  }
  if (SLOBYTE(STACK[0x7C7]) < 0) {
    operator delete((void *)STACK[0x7B0]);
  }
  if (SLOBYTE(STACK[0x7DF]) < 0) {
    operator delete((void *)STACK[0x7C8]);
  }
  if (SLOBYTE(STACK[0x7F7]) < 0) {
    operator delete((void *)STACK[0x7E0]);
  }
  if (SLOBYTE(STACK[0x80F]) < 0) {
    operator delete((void *)STACK[0x7F8]);
  }
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  if (SLOBYTE(STACK[0x83F]) < 0) {
    operator delete((void *)STACK[0x828]);
  }
  if (SLOBYTE(STACK[0x857]) < 0) {
    operator delete((void *)STACK[0x840]);
  }
  if (SLOBYTE(STACK[0x86F]) < 0) {
    operator delete((void *)STACK[0x858]);
  }
  if (SLOBYTE(STACK[0x887]) < 0) {
    operator delete((void *)STACK[0x870]);
  }
  if (SLOBYTE(STACK[0x89F]) < 0) {
    operator delete((void *)STACK[0x888]);
  }
  if (SLOBYTE(STACK[0x8B7]) < 0) {
    operator delete((void *)STACK[0x8A0]);
  }
  if (SLOBYTE(STACK[0x8CF]) < 0) {
    operator delete((void *)STACK[0x8B8]);
  }
  if (SLOBYTE(STACK[0x8E7]) < 0) {
    operator delete((void *)STACK[0x8D0]);
  }
  if (SLOBYTE(STACK[0x8FF]) < 0) {
    operator delete((void *)STACK[0x8E8]);
  }
  if (SLOBYTE(STACK[0x917]) < 0) {
    operator delete((void *)STACK[0x900]);
  }
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  if (SLOBYTE(STACK[0x947]) < 0) {
    operator delete((void *)STACK[0x930]);
  }
  if (SLOBYTE(STACK[0x95F]) < 0) {
    operator delete((void *)STACK[0x948]);
  }
  if (SLOBYTE(STACK[0x977]) < 0) {
    operator delete((void *)STACK[0x960]);
  }
  if (SLOBYTE(STACK[0x98F]) < 0) {
    operator delete((void *)STACK[0x978]);
  }
  if (SLOBYTE(STACK[0x9A7]) < 0) {
    operator delete((void *)STACK[0x990]);
  }
  if (SLOBYTE(STACK[0x9BF]) < 0) {
    operator delete((void *)STACK[0x9A8]);
  }
  if (SLOBYTE(STACK[0x9D7]) < 0) {
    operator delete((void *)STACK[0x9C0]);
  }
  if (SLOBYTE(STACK[0x9EF]) < 0) {
    operator delete((void *)STACK[0x9D8]);
  }
  if (SLOBYTE(STACK[0xA07]) < 0) {
    operator delete((void *)STACK[0x9F0]);
  }
  if (SLOBYTE(STACK[0xA1F]) < 0) {
    operator delete((void *)STACK[0xA08]);
  }
  if (SLOBYTE(STACK[0xA37]) < 0) {
    operator delete((void *)STACK[0xA20]);
  }
  if (SLOBYTE(STACK[0xA4F]) < 0) {
    operator delete((void *)STACK[0xA38]);
  }
  if (SLOBYTE(STACK[0xA67]) < 0) {
    operator delete((void *)STACK[0xA50]);
  }
  if (SLOBYTE(STACK[0xA7F]) < 0) {
    operator delete((void *)STACK[0xA68]);
  }
  if (SLOBYTE(STACK[0xA97]) < 0) {
    operator delete((void *)STACK[0xA80]);
  }
  if (SLOBYTE(STACK[0xAAF]) < 0) {
    operator delete((void *)STACK[0xA98]);
  }
  if (SLOBYTE(STACK[0xAC7]) < 0) {
    operator delete((void *)STACK[0xAB0]);
  }
  if (SLOBYTE(STACK[0xADF]) < 0) {
    operator delete((void *)STACK[0xAC8]);
  }
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  if (SLOBYTE(STACK[0xB27]) < 0) {
    operator delete((void *)STACK[0xB10]);
  }
  if (SLOBYTE(STACK[0xB3F]) < 0) {
    operator delete((void *)STACK[0xB28]);
  }
  if (SLOBYTE(STACK[0xB57]) < 0) {
    operator delete((void *)STACK[0xB40]);
  }
  if (SLOBYTE(STACK[0xB6F]) < 0) {
    operator delete((void *)STACK[0xB58]);
  }
  if (SLOBYTE(STACK[0xB87]) < 0) {
    operator delete((void *)STACK[0xB70]);
  }
  if (SLOBYTE(STACK[0xB9F]) < 0) {
    operator delete((void *)STACK[0xB88]);
  }
  if (SLOBYTE(STACK[0xBB7]) < 0) {
    operator delete((void *)STACK[0xBA0]);
  }
  if (SLOBYTE(STACK[0xBCF]) < 0) {
    operator delete((void *)STACK[0xBB8]);
  }
  if (SLOBYTE(STACK[0xBE7]) < 0) {
    operator delete((void *)STACK[0xBD0]);
  }
  if (SLOBYTE(STACK[0xBFF]) < 0) {
    operator delete((void *)STACK[0xBE8]);
  }
  if (SLOBYTE(STACK[0xC17]) < 0) {
    operator delete((void *)STACK[0xC00]);
  }
  if (SLOBYTE(STACK[0xC2F]) < 0) {
    operator delete((void *)STACK[0xC18]);
  }
  if (SLOBYTE(STACK[0xC47]) < 0) {
    operator delete((void *)STACK[0xC30]);
  }
  if (SLOBYTE(STACK[0xC5F]) < 0) {
    operator delete((void *)STACK[0xC48]);
  }
  if (SLOBYTE(STACK[0xC77]) < 0) {
    operator delete((void *)STACK[0xC60]);
  }
  if (SLOBYTE(STACK[0xC8F]) < 0) {
    operator delete((void *)STACK[0xC78]);
  }
  if (SLOBYTE(STACK[0xCA7]) < 0) {
    operator delete((void *)STACK[0xC90]);
  }
  if (SLOBYTE(STACK[0xCBF]) < 0) {
    operator delete((void *)STACK[0xCA8]);
  }
  if (SLOBYTE(STACK[0xCD7]) < 0) {
    operator delete((void *)STACK[0xCC0]);
  }
  if (SLOBYTE(STACK[0xCEF]) < 0) {
    operator delete((void *)STACK[0xCD8]);
  }
  if (SLOBYTE(STACK[0xD07]) < 0) {
    operator delete((void *)STACK[0xCF0]);
  }
  if (SLOBYTE(STACK[0xD1F]) < 0) {
    operator delete((void *)STACK[0xD08]);
  }
  if (SLOBYTE(STACK[0xD37]) < 0) {
    operator delete((void *)STACK[0xD20]);
  }
  if (SLOBYTE(STACK[0xD4F]) < 0) {
    operator delete((void *)STACK[0xD38]);
  }
  if (SLOBYTE(STACK[0xD67]) < 0) {
    operator delete((void *)STACK[0xD50]);
  }
  if (SLOBYTE(STACK[0xD7F]) < 0) {
    operator delete((void *)STACK[0xD68]);
  }
  if (SLOBYTE(STACK[0xD97]) < 0) {
    operator delete((void *)STACK[0xD80]);
  }
  if (SLOBYTE(STACK[0xDAF]) < 0) {
    operator delete((void *)STACK[0xD98]);
  }
  if (SLOBYTE(STACK[0xDC7]) < 0) {
    operator delete((void *)STACK[0xDB0]);
  }
  if (SLOBYTE(STACK[0xDDF]) < 0) {
    operator delete((void *)STACK[0xDC8]);
  }
  if (SLOBYTE(STACK[0xDF7]) < 0) {
    operator delete((void *)STACK[0xDE0]);
  }
  if (SLOBYTE(STACK[0xE0F]) < 0) {
    operator delete((void *)STACK[0xDF8]);
  }
  if (SLOBYTE(STACK[0xE27]) < 0) {
    operator delete((void *)STACK[0xE10]);
  }
  if (SLOBYTE(STACK[0xE3F]) < 0) {
    operator delete((void *)STACK[0xE28]);
  }
  if (SLOBYTE(STACK[0xE57]) < 0) {
    operator delete((void *)STACK[0xE40]);
  }
  if (SLOBYTE(STACK[0xE6F]) < 0) {
    operator delete((void *)STACK[0xE58]);
  }
  if (SLOBYTE(STACK[0xE87]) < 0) {
    operator delete((void *)STACK[0xE70]);
  }
  if (SLOBYTE(STACK[0xE9F]) < 0) {
    operator delete((void *)STACK[0xE88]);
  }
  if (SLOBYTE(STACK[0xEB7]) < 0) {
    operator delete((void *)STACK[0xEA0]);
  }
  if (SLOBYTE(STACK[0xECF]) < 0) {
    operator delete((void *)STACK[0xEB8]);
  }
  if (SLOBYTE(STACK[0xEE7]) < 0) {
    operator delete((void *)STACK[0xED0]);
  }
  if (SLOBYTE(STACK[0xEFF]) < 0) {
    operator delete((void *)STACK[0xEE8]);
  }
  if (SLOBYTE(STACK[0xF17]) < 0) {
    operator delete((void *)STACK[0xF00]);
  }
  if (SLOBYTE(STACK[0xF2F]) < 0) {
    operator delete((void *)STACK[0xF18]);
  }
  if (SLOBYTE(STACK[0xF47]) < 0) {
    operator delete((void *)STACK[0xF30]);
  }
  if (SLOBYTE(STACK[0xF5F]) < 0) {
    operator delete((void *)STACK[0xF48]);
  }
  if (SLOBYTE(STACK[0xF77]) < 0) {
    operator delete((void *)STACK[0xF60]);
  }
  if (SLOBYTE(STACK[0xF8F]) < 0) {
    operator delete((void *)STACK[0xF78]);
  }
  if (SLOBYTE(STACK[0xFA7]) < 0) {
    operator delete((void *)STACK[0xF90]);
  }
  if (SLOBYTE(STACK[0xFBF]) < 0) {
    operator delete((void *)STACK[0xFA8]);
  }
  if (SLOBYTE(STACK[0xFD7]) < 0) {
    operator delete((void *)STACK[0xFC0]);
  }
  if (SLOBYTE(STACK[0xFEF]) < 0) {
    operator delete((void *)STACK[0xFD8]);
  }
  if (SLOBYTE(STACK[0x1007]) < 0) {
    operator delete((void *)STACK[0xFF0]);
  }
  if (SLOBYTE(STACK[0x101F]) < 0) {
    operator delete((void *)STACK[0x1008]);
  }
  if (*(char *)(v83 + 23) < 0) {
    operator delete(*(void **)v83);
  }
  if (*(char *)(v83 + 47) < 0) {
    operator delete(*(void **)(v83 + 24));
  }
  for (; v82 != &STACK[0x1050]; v82 -= 5)
  {
    if (*((char *)v82 - 17) < 0) {
      operator delete((void *)*(v82 - 5));
    }
  }
  MEMORY[0x18530C140](a10, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_182775F90()
{
}

void sub_182775F9C()
{
}

void validateMTLBindingAccess(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 3) {
    MTLReportFailure(0, "validateMTLBindingAccess", 42, @"access (%lu) is not a valid MTLBindingAccess.", a5, a6, a7, a8, a1);
  }
}

uint64_t getShaderCachePath()
{
  if (MTLGetShaderCachePath::onceToken != -1) {
    dispatch_once(&MTLGetShaderCachePath::onceToken, &__block_literal_global_4);
  }
  return MTLGetShaderCachePath::result;
}

double deltaInMilliseconds(uint64_t a1)
{
  if (initTimebaseInfo(void)::onceToken != -1) {
    dispatch_once(&initTimebaseInfo(void)::onceToken, &__block_literal_global_18);
  }
  return *(double *)&gMachTimeToNS * (double)(mach_absolute_time() - a1) * 0.000001;
}

void __MTLGetProcessName_block_invoke()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  pid_t v0 = getpid();
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  memset(buffer, 0, sizeof(buffer));
  int v1 = proc_name(v0, buffer, 0x80u);
  if (v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = MEMORY[0x1E4F14390];
    uint64_t v4 = v1;
    do
    {
      unsigned int v5 = *((char *)buffer + v2);
      if ((v5 & 0x80000000) != 0) {
        int v6 = __maskrune(v5, 0x500uLL);
      }
      else {
        int v6 = *(_DWORD *)(v3 + 4 * v5 + 60) & 0x500;
      }
      if (!v6) {
        *((unsigned char *)buffer + v2) = 95;
      }
      ++v2;
    }
    while (v4 != v2);
    std::string::append(&v7, (const std::string::value_type *)buffer);
  }
  *(void *)CC_SHA256_CTX __str = 0;
  uint64_t v9 = 0;
  snprintf(__str, 0x10uLL, "_%d", v0);
  std::string::append(&v7, __str);
  operator new[]();
}

void sub_18277622C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_182776448(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void *std::vector<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1827764B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MTLUINT256_t>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLUINT256_t>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_182776530(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  unsigned int v5 = (void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  int v6 = *v5;
  if (!*v5)
  {
    std::string v7 = (uint64_t **)v5;
    int v6 = operator new(0x38uLL);
    _OWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto11MTLFunction}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto11MTLFunction}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto11MTLFunction}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}*>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::piecewise_construct_t const&<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, (unsigned __int8 *)i + 16, a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((void *)i + 5) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t i = *v27;
LABEL_38:
    *uint64_t v27 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  *uint64_t v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_182776850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - (void)v10;
          unint64_t v12 = (uint64_t)(a2 - (void)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v83 = *(void *)(a2 - 32);
                unint64_t v82 = a2 - 32;
                unint64_t v84 = bswap64(v83);
                unint64_t v85 = bswap64(*v10);
                if (v84 == v85
                  && (v84 = bswap64(*(void *)(v82 + 8)), unint64_t v85 = bswap64(v10[1]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 16)), unint64_t v85 = bswap64(v10[2]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 24)), unint64_t v85 = bswap64(v10[3]), v84 == v85))
                {
                  int v86 = 0;
                }
                else if (v84 < v85)
                {
                  int v86 = -1;
                }
                else
                {
                  int v86 = 1;
                }
                if (v86 < 0)
                {
                  __n128 v193 = *(__n128 *)v10;
                  long long v202 = *((_OWORD *)v10 + 1);
                  long long v155 = *(_OWORD *)(v82 + 16);
                  *(_OWORD *)unint64_t v10 = *(_OWORD *)v82;
                  *((_OWORD *)v10 + 1) = v155;
                  __n128 result = v193;
                  *(__n128 *)unint64_t v82 = v193;
                  *(_OWORD *)(v82 + 16) = v202;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, (unint64_t *)(a2 - 32));
                break;
              case 4uLL:
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
                break;
              case 5uLL:
                size_t v87 = v10 + 4;
                uint64_t v88 = v10 + 8;
                int v89 = v10 + 12;
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, v10 + 12).n128_u64[0];
                unint64_t v91 = *(void *)(a2 - 32);
                unint64_t v90 = a2 - 32;
                unint64_t v92 = bswap64(v91);
                unint64_t v93 = bswap64(v10[12]);
                if (v92 == v93
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 8)), v93 = bswap64(v10[13]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 16)), v93 = bswap64(v10[14]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 24)), v93 = bswap64(v10[15]), v92 == v93))
                {
                  int v94 = 0;
                }
                else if (v92 < v93)
                {
                  int v94 = -1;
                }
                else
                {
                  int v94 = 1;
                }
                if (v94 < 0)
                {
                  __n128 result = *(__n128 *)v89;
                  long long v203 = *((_OWORD *)v10 + 7);
                  long long v156 = *(_OWORD *)(v90 + 16);
                  *(_OWORD *)int v89 = *(_OWORD *)v90;
                  *((_OWORD *)v10 + 7) = v156;
                  *(__n128 *)unint64_t v90 = result;
                  *(_OWORD *)(v90 + 16) = v203;
                  unint64_t v157 = bswap64(*v89);
                  unint64_t v158 = bswap64(*v88);
                  if (v157 != v158) {
                    goto LABEL_328;
                  }
                  unint64_t v157 = bswap64(v10[13]);
                  unint64_t v158 = bswap64(v10[9]);
                  if (v157 == v158
                    && (unint64_t v157 = bswap64(v10[14]), v158 = bswap64(v10[10]), v157 == v158)
                    && (unint64_t v157 = bswap64(v10[15]), v158 = bswap64(v10[11]), v157 == v158))
                  {
                    int v159 = 0;
                  }
                  else
                  {
LABEL_328:
                    int v159 = v157 < v158 ? -1 : 1;
                  }
                  if (v159 < 0)
                  {
                    long long v170 = *(_OWORD *)v88;
                    __n128 result = *((__n128 *)v10 + 5);
                    long long v171 = *((_OWORD *)v10 + 7);
                    *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
                    *((_OWORD *)v10 + 5) = v171;
                    *(_OWORD *)int v89 = v170;
                    *((__n128 *)v10 + 7) = result;
                    unint64_t v172 = bswap64(*v88);
                    unint64_t v173 = bswap64(*v87);
                    if (v172 != v173) {
                      goto LABEL_337;
                    }
                    unint64_t v172 = bswap64(v10[9]);
                    unint64_t v173 = bswap64(v10[5]);
                    if (v172 == v173
                      && (unint64_t v172 = bswap64(v10[10]), v173 = bswap64(v10[6]), v172 == v173)
                      && (unint64_t v172 = bswap64(v10[11]), v173 = bswap64(v10[7]), v172 == v173))
                    {
                      int v174 = 0;
                    }
                    else
                    {
LABEL_337:
                      int v174 = v172 < v173 ? -1 : 1;
                    }
                    if (v174 < 0)
                    {
                      long long v175 = *(_OWORD *)v87;
                      __n128 result = *((__n128 *)v10 + 3);
                      long long v176 = *((_OWORD *)v10 + 5);
                      *(_OWORD *)size_t v87 = *(_OWORD *)v88;
                      *((_OWORD *)v10 + 3) = v176;
                      *(_OWORD *)uint64_t v88 = v175;
                      *((__n128 *)v10 + 5) = result;
                      unint64_t v177 = bswap64(v10[4]);
                      unint64_t v178 = bswap64(*v10);
                      if (v177 != v178) {
                        goto LABEL_346;
                      }
                      unint64_t v177 = bswap64(v10[5]);
                      unint64_t v178 = bswap64(v10[1]);
                      if (v177 == v178
                        && (unint64_t v177 = bswap64(v10[6]), v178 = bswap64(v10[2]), v177 == v178)
                        && (unint64_t v177 = bswap64(v10[7]), v178 = bswap64(v10[3]), v177 == v178))
                      {
                        int v179 = 0;
                      }
                      else
                      {
LABEL_346:
                        int v179 = v177 < v178 ? -1 : 1;
                      }
                      if (v179 < 0)
                      {
                        __n128 v195 = *(__n128 *)v10;
                        long long v205 = *((_OWORD *)v10 + 1);
                        long long v180 = *((_OWORD *)v10 + 3);
                        *(_OWORD *)unint64_t v10 = *(_OWORD *)v87;
                        *((_OWORD *)v10 + 1) = v180;
                        __n128 result = v195;
                        *(__n128 *)size_t v87 = v195;
                        *((_OWORD *)v10 + 3) = v205;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 767)
          {
            n128_u64 = v10 + 4;
            BOOL v97 = v10 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
            if (a4)
            {
              if (!v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = v10;
                do
                {
                  long long v100 = (__n128 *)n128_u64;
                  unint64_t v101 = bswap64(v99[4]);
                  unint64_t v102 = bswap64(*v99);
                  if (v101 != v102
                    || (unint64_t v101 = bswap64(v100->n128_u64[1]), v102 = bswap64(v99[1]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[0]), v102 = bswap64(v99[2]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[1]), v102 = bswap64(v99[3]), v101 != v102))
                  {
                    int v103 = v101 < v102 ? -1 : 1;
                    if (v103 < 0)
                    {
                      __n128 v190 = *v100;
                      __n128 v199 = v100[1];
                      uint64_t v104 = v98;
                      while (1)
                      {
                        uint64_t v105 = (char *)v10 + v104;
                        long long v106 = *(_OWORD *)((char *)v10 + v104 + 16);
                        *((_OWORD *)v105 + 2) = *(_OWORD *)((char *)v10 + v104);
                        *((_OWORD *)v105 + 3) = v106;
                        if (!v104) {
                          break;
                        }
                        unint64_t v107 = bswap64(v190.n128_u64[0]);
                        unint64_t v108 = bswap64(*((void *)v105 - 4));
                        if (v107 == v108
                          && (unint64_t v107 = bswap64(v190.n128_u64[1]), v108 = bswap64(*((void *)v105 - 3)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[0]), v108 = bswap64(*((void *)v105 - 2)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[1]), v108 = bswap64(*((void *)v105 - 1)), v107 == v108))
                        {
                          int v109 = 0;
                        }
                        else if (v107 < v108)
                        {
                          int v109 = -1;
                        }
                        else
                        {
                          int v109 = 1;
                        }
                        v104 -= 32;
                        if ((v109 & 0x80000000) == 0)
                        {
                          BOOL v110 = (__n128 *)((char *)v10 + v104 + 32);
                          goto LABEL_200;
                        }
                      }
                      BOOL v110 = (__n128 *)v10;
LABEL_200:
                      __n128 result = v190;
                      __n128 *v110 = v190;
                      v110[1] = v199;
                    }
                  }
                  n128_u64 = v100[2].n128_u64;
                  v98 += 32;
                  uint64_t v99 = (unint64_t *)v100;
                }
                while (&v100[2] != (__n128 *)a2);
              }
            }
            else if (!v97)
            {
              uint64_t v160 = v10 - 4;
              do
              {
                size_t v161 = (__n128 *)n128_u64;
                unint64_t v162 = bswap64(a1[4]);
                unint64_t v163 = bswap64(*a1);
                if (v162 != v163
                  || (unint64_t v162 = bswap64(v161->n128_u64[1]), v163 = bswap64(a1[1]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[0]), v163 = bswap64(a1[2]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[1]), v163 = bswap64(a1[3]), v162 != v163))
                {
                  int v164 = v162 < v163 ? -1 : 1;
                  if (v164 < 0)
                  {
                    __n128 v194 = *v161;
                    __n128 v204 = v161[1];
                    uint64_t v165 = v160;
                    do
                    {
                      long long v166 = *((_OWORD *)v165 + 3);
                      *((_OWORD *)v165 + 4) = *((_OWORD *)v165 + 2);
                      *((_OWORD *)v165 + 5) = v166;
                      unint64_t v167 = bswap64(v194.n128_u64[0]);
                      unint64_t v168 = bswap64(*v165);
                      if (v167 == v168
                        && (unint64_t v167 = bswap64(v194.n128_u64[1]), v168 = bswap64(v165[1]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[0]), v168 = bswap64(v165[2]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[1]), v168 = bswap64(v165[3]), v167 == v168))
                      {
                        int v169 = 0;
                      }
                      else if (v167 < v168)
                      {
                        int v169 = -1;
                      }
                      else
                      {
                        int v169 = 1;
                      }
                      v165 -= 4;
                    }
                    while (v169 < 0);
                    __n128 result = v194;
                    *((__n128 *)v165 + 4) = v194;
                    *((__n128 *)v165 + 5) = v204;
                  }
                }
                n128_u64 = v161[2].n128_u64;
                v160 += 4;
                a1 = (unint64_t *)v161;
              }
              while (&v161[2] != (__n128 *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (unint64_t *)a2)
            {
              int64_t v111 = (v12 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                int64_t v113 = v112;
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  int v115 = &v10[4 * v114];
                  if (2 * v113 + 2 < (uint64_t)v12)
                  {
                    unint64_t v116 = bswap64(*v115);
                    unint64_t v117 = bswap64(v115[4]);
                    if (v116 != v117) {
                      goto LABEL_212;
                    }
                    unint64_t v116 = bswap64(v115[1]);
                    unint64_t v117 = bswap64(v115[5]);
                    if (v116 == v117
                      && (unint64_t v116 = bswap64(v115[2]), v117 = bswap64(v115[6]), v116 == v117)
                      && (unint64_t v116 = bswap64(v115[3]), v117 = bswap64(v115[7]), v116 == v117))
                    {
                      int v118 = 0;
                    }
                    else
                    {
LABEL_212:
                      int v118 = v116 < v117 ? -1 : 1;
                    }
                    if (v118 < 0)
                    {
                      v115 += 4;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  uint64_t v119 = &v10[4 * v113];
                  unint64_t v120 = bswap64(*v115);
                  unint64_t v121 = bswap64(*v119);
                  if (v120 == v121
                    && (unint64_t v120 = bswap64(v115[1]), v121 = bswap64(v119[1]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[2]), v121 = bswap64(v119[2]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[3]), v121 = bswap64(v119[3]), v120 == v121)
                    || (v120 < v121 ? (int v122 = -1) : (int v122 = 1), (v122 & 0x80000000) == 0))
                  {
                    long long v191 = *(_OWORD *)v119;
                    long long v200 = *((_OWORD *)v119 + 1);
                    do
                    {
                      size_t v123 = v115;
                      long long v124 = *((_OWORD *)v115 + 1);
                      *(_OWORD *)uint64_t v119 = *(_OWORD *)v115;
                      *((_OWORD *)v119 + 1) = v124;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v125 = (2 * v114) | 1;
                      int v115 = &v10[4 * v125];
                      uint64_t v114 = 2 * v114 + 2;
                      if (v114 < (uint64_t)v12)
                      {
                        unint64_t v126 = bswap64(*v115);
                        unint64_t v127 = bswap64(v115[4]);
                        if (v126 != v127) {
                          goto LABEL_234;
                        }
                        unint64_t v126 = bswap64(v115[1]);
                        unint64_t v127 = bswap64(v115[5]);
                        if (v126 == v127
                          && (v126 = bswap64(v115[2]), unint64_t v127 = bswap64(v115[6]), v126 == v127)
                          && (v126 = bswap64(v115[3]), unint64_t v127 = bswap64(v115[7]), v126 == v127))
                        {
                          int v128 = 0;
                        }
                        else
                        {
LABEL_234:
                          int v128 = v126 < v127 ? -1 : 1;
                        }
                        if (v128 >= 0) {
                          uint64_t v114 = v125;
                        }
                        else {
                          v115 += 4;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v125;
                      }
                      unint64_t v129 = bswap64(*v115);
                      unint64_t v130 = bswap64(v191);
                      if (v129 != v130) {
                        goto LABEL_245;
                      }
                      unint64_t v129 = bswap64(v115[1]);
                      unint64_t v130 = bswap64(*((unint64_t *)&v191 + 1));
                      if (v129 == v130
                        && (v129 = bswap64(v115[2]), unint64_t v130 = bswap64(v200), v129 == v130)
                        && (v129 = bswap64(v115[3]), unint64_t v130 = bswap64(*((unint64_t *)&v200 + 1)), v129 == v130))
                      {
                        int v131 = 0;
                      }
                      else
                      {
LABEL_245:
                        int v131 = v129 < v130 ? -1 : 1;
                      }
                      uint64_t v119 = v123;
                    }
                    while ((v131 & 0x80000000) == 0);
                    *(_OWORD *)size_t v123 = v191;
                    *((_OWORD *)v123 + 1) = v200;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              uint64_t v132 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v133 = 0;
                __n128 v183 = *(__n128 *)v10;
                long long v186 = *((_OWORD *)v10 + 1);
                int v134 = v10;
                do
                {
                  size_t v135 = &v134[4 * v133 + 4];
                  uint64_t v136 = (2 * v133) | 1;
                  uint64_t v137 = 2 * v133 + 2;
                  if (v137 < v132)
                  {
                    unint64_t v138 = bswap64(*v135);
                    unint64_t v139 = bswap64(v135[4]);
                    if (v138 != v139) {
                      goto LABEL_259;
                    }
                    unint64_t v138 = bswap64(v135[1]);
                    unint64_t v139 = bswap64(v135[5]);
                    if (v138 == v139
                      && (unint64_t v138 = bswap64(v135[2]), v139 = bswap64(v135[6]), v138 == v139)
                      && (unint64_t v138 = bswap64(v135[3]), v139 = bswap64(v135[7]), v138 == v139))
                    {
                      int v140 = 0;
                    }
                    else
                    {
LABEL_259:
                      int v140 = v138 < v139 ? -1 : 1;
                    }
                    if (v140 < 0)
                    {
                      v135 += 4;
                      uint64_t v136 = v137;
                    }
                  }
                  long long v141 = *((_OWORD *)v135 + 1);
                  *(_OWORD *)int v134 = *(_OWORD *)v135;
                  *((_OWORD *)v134 + 1) = v141;
                  int v134 = v135;
                  uint64_t v133 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                a2 -= 32;
                if (v135 == (unint64_t *)a2)
                {
                  __n128 result = v183;
                  *(__n128 *)size_t v135 = v183;
                  *((_OWORD *)v135 + 1) = v186;
                }
                else
                {
                  long long v142 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)size_t v135 = *(_OWORD *)a2;
                  *((_OWORD *)v135 + 1) = v142;
                  __n128 result = v183;
                  *(__n128 *)a2 = v183;
                  *(_OWORD *)(a2 + 16) = v186;
                  uint64_t v143 = (char *)v135 - (char *)v10 + 32;
                  if (v143 >= 33)
                  {
                    unint64_t v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                    uint64_t v145 = &v10[4 * v144];
                    unint64_t v146 = bswap64(*v145);
                    unint64_t v147 = bswap64(*v135);
                    if (v146 != v147
                      || (unint64_t v146 = bswap64(v145[1]), v147 = bswap64(v135[1]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[2]), v147 = bswap64(v135[2]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[3]), v147 = bswap64(v135[3]), v146 != v147))
                    {
                      int v148 = v146 < v147 ? -1 : 1;
                      if (v148 < 0)
                      {
                        __n128 v192 = *(__n128 *)v135;
                        __n128 v201 = *((__n128 *)v135 + 1);
                        do
                        {
                          uint64_t v149 = (__n128 *)v145;
                          long long v150 = *((_OWORD *)v145 + 1);
                          *(_OWORD *)size_t v135 = *(_OWORD *)v145;
                          *((_OWORD *)v135 + 1) = v150;
                          if (!v144) {
                            break;
                          }
                          unint64_t v144 = (v144 - 1) >> 1;
                          uint64_t v145 = &v10[4 * v144];
                          unint64_t v151 = bswap64(*v145);
                          unint64_t v152 = bswap64(v192.n128_u64[0]);
                          if (v151 != v152) {
                            goto LABEL_283;
                          }
                          unint64_t v151 = bswap64(v145[1]);
                          unint64_t v152 = bswap64(v192.n128_u64[1]);
                          if (v151 == v152
                            && (unint64_t v151 = bswap64(v145[2]), v152 = bswap64(v201.n128_u64[0]), v151 == v152)
                            && (unint64_t v151 = bswap64(v145[3]), v152 = bswap64(v201.n128_u64[1]), v151 == v152))
                          {
                            int v153 = 0;
                          }
                          else
                          {
LABEL_283:
                            int v153 = v151 < v152 ? -1 : 1;
                          }
                          size_t v135 = (unint64_t *)v149;
                        }
                        while (v153 < 0);
                        __n128 result = v192;
                        *uint64_t v149 = v192;
                        v149[1] = v201;
                      }
                    }
                  }
                }
              }
              while (v132-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v12 >> 1)], (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v14 - 4, (unint64_t *)(a2 - 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v13 + 4], (unint64_t *)(a2 - 96));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v14 - 4, v14, &a1[4 * v13 + 4]);
            __n128 v187 = *(__n128 *)a1;
            long long v196 = *((_OWORD *)a1 + 1);
            long long v15 = *((_OWORD *)v14 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *((_OWORD *)a1 + 1) = v15;
            *(__n128 *)uint64_t v14 = v187;
            *((_OWORD *)v14 + 1) = v196;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v12 >> 1)], a1, (unint64_t *)(a2 - 32));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v16 = bswap64(*(a1 - 4));
          unint64_t v17 = bswap64(*a1);
          if (v16 != v17) {
            goto LABEL_15;
          }
          unint64_t v16 = bswap64(*(a1 - 3));
          unint64_t v17 = bswap64(a1[1]);
          if (v16 == v17
            && (unint64_t v16 = bswap64(*(a1 - 2)), v17 = bswap64(a1[2]), v16 == v17)
            && (unint64_t v16 = bswap64(*(a1 - 1)), v17 = bswap64(a1[3]), v16 == v17))
          {
            int v18 = 0;
          }
          else
          {
LABEL_15:
            int v18 = v16 < v17 ? -1 : 1;
          }
          if (v18 < 0) {
            break;
          }
          __n128 v182 = *(__n128 *)a1;
          long long v185 = *((_OWORD *)a1 + 1);
          unint64_t v51 = bswap64(*a1);
          unint64_t v52 = bswap64(*(void *)(a2 - 32));
          if (v51 == v52
            && (unint64_t v51 = bswap64(v182.n128_u64[1]), v52 = bswap64(*(void *)(a2 - 24)), v51 == v52)
            && (unint64_t v51 = bswap64(v185), v52 = bswap64(*(void *)(a2 - 16)), v51 == v52)
            && (unint64_t v51 = bswap64(*((unint64_t *)&v185 + 1)), v52 = bswap64(*(void *)(a2 - 8)), v51 == v52))
          {
            int v53 = 0;
          }
          else if (v51 < v52)
          {
            int v53 = -1;
          }
          else
          {
            int v53 = 1;
          }
          if (v53 < 0)
          {
            uint64_t v58 = a1;
            unint64_t v10 = a1;
            do
            {
              unint64_t v59 = v10[4];
              v10 += 4;
              unint64_t v60 = bswap64(v182.n128_u64[0]);
              unint64_t v61 = bswap64(v59);
              if (v60 == v61
                && (unint64_t v60 = bswap64(v182.n128_u64[1]), v61 = bswap64(v58[5]), v60 == v61)
                && (unint64_t v60 = bswap64(v185), v61 = bswap64(v58[6]), v60 == v61)
                && (unint64_t v60 = bswap64(*((unint64_t *)&v185 + 1)), v61 = bswap64(v58[7]), v60 == v61))
              {
                int v62 = 0;
              }
              else if (v60 < v61)
              {
                int v62 = -1;
              }
              else
              {
                int v62 = 1;
              }
              uint64_t v58 = v10;
            }
            while ((v62 & 0x80000000) == 0);
          }
          else
          {
            uint64_t v54 = a1 + 4;
            do
            {
              unint64_t v10 = v54;
              if ((unint64_t)v54 >= a2) {
                break;
              }
              unint64_t v55 = bswap64(v182.n128_u64[0]);
              unint64_t v56 = bswap64(*v10);
              if (v55 != v56) {
                goto LABEL_100;
              }
              unint64_t v55 = bswap64(v182.n128_u64[1]);
              unint64_t v56 = bswap64(v10[1]);
              if (v55 == v56
                && (unint64_t v55 = bswap64(v185), v56 = bswap64(v10[2]), v55 == v56)
                && (unint64_t v55 = bswap64(*((unint64_t *)&v185 + 1)), v56 = bswap64(v10[3]), v55 == v56))
              {
                int v57 = 0;
              }
              else
              {
LABEL_100:
                int v57 = v55 < v56 ? -1 : 1;
              }
              uint64_t v54 = v10 + 4;
            }
            while ((v57 & 0x80000000) == 0);
          }
          uint64_t v63 = (_OWORD *)a2;
          if ((unint64_t)v10 < a2)
          {
            uint64_t v64 = (_OWORD *)a2;
            uint64_t v63 = (_OWORD *)a2;
            do
            {
              unint64_t v65 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v66 = bswap64(v182.n128_u64[0]);
              unint64_t v67 = bswap64(v65);
              if (v66 == v67
                && (unint64_t v66 = bswap64(v182.n128_u64[1]), v67 = bswap64(*((void *)v64 - 3)), v66 == v67)
                && (unint64_t v66 = bswap64(v185), v67 = bswap64(*((void *)v64 - 2)), v66 == v67)
                && (unint64_t v66 = bswap64(*((unint64_t *)&v185 + 1)), v67 = bswap64(*((void *)v64 - 1)), v66 == v67))
              {
                int v68 = 0;
              }
              else if (v66 < v67)
              {
                int v68 = -1;
              }
              else
              {
                int v68 = 1;
              }
              uint64_t v64 = v63;
            }
            while (v68 < 0);
          }
          while (v10 < (unint64_t *)v63)
          {
            __n128 v189 = *(__n128 *)v10;
            long long v198 = *((_OWORD *)v10 + 1);
            long long v69 = v63[1];
            *(_OWORD *)unint64_t v10 = *v63;
            *((_OWORD *)v10 + 1) = v69;
            _OWORD *v63 = v189;
            v63[1] = v198;
            uint64_t v70 = v10;
            do
            {
              unint64_t v71 = v10[4];
              v10 += 4;
              unint64_t v72 = bswap64(v182.n128_u64[0]);
              unint64_t v73 = bswap64(v71);
              if (v72 == v73
                && (unint64_t v72 = bswap64(v182.n128_u64[1]), v73 = bswap64(v70[5]), v72 == v73)
                && (unint64_t v72 = bswap64(v185), v73 = bswap64(v70[6]), v72 == v73)
                && (unint64_t v72 = bswap64(*((unint64_t *)&v185 + 1)), v73 = bswap64(v70[7]), v72 == v73))
              {
                int v74 = 0;
              }
              else if (v72 < v73)
              {
                int v74 = -1;
              }
              else
              {
                int v74 = 1;
              }
              uint64_t v70 = v10;
            }
            while ((v74 & 0x80000000) == 0);
            uint64_t v75 = v63;
            do
            {
              unint64_t v76 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v77 = bswap64(v182.n128_u64[0]);
              unint64_t v78 = bswap64(v76);
              if (v77 == v78
                && (unint64_t v77 = bswap64(v182.n128_u64[1]), v78 = bswap64(*((void *)v75 - 3)), v77 == v78)
                && (unint64_t v77 = bswap64(v185), v78 = bswap64(*((void *)v75 - 2)), v77 == v78)
                && (unint64_t v77 = bswap64(*((unint64_t *)&v185 + 1)), v78 = bswap64(*((void *)v75 - 1)), v77 == v78))
              {
                int v79 = 0;
              }
              else if (v77 < v78)
              {
                int v79 = -1;
              }
              else
              {
                int v79 = 1;
              }
              uint64_t v75 = v63;
            }
            while (v79 < 0);
          }
          int v80 = (__n128 *)(v10 - 4);
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 != a1)
          {
            long long v81 = *((_OWORD *)v10 - 1);
            *(__n128 *)a1 = *v80;
            *((_OWORD *)a1 + 1) = v81;
          }
          a4 = 0;
          __n128 result = v182;
          *int v80 = v182;
          *((_OWORD *)v10 - 1) = v185;
        }
        uint64_t v19 = 0;
        __n128 v181 = *(__n128 *)a1;
        long long v184 = *((_OWORD *)a1 + 1);
        do
        {
          float v20 = &a1[v19];
          unint64_t v21 = bswap64(a1[v19 + 4]);
          unint64_t v22 = bswap64(v181.n128_u64[0]);
          if (v21 == v22
            && (v21 = bswap64(v20[5]), unint64_t v22 = bswap64(v181.n128_u64[1]), v21 == v22)
            && (v21 = bswap64(v20[6]), unint64_t v22 = bswap64(v184), v21 == v22)
            && (v21 = bswap64(v20[7]), unint64_t v22 = bswap64(*((unint64_t *)&v184 + 1)), v21 == v22))
          {
            int v23 = 0;
          }
          else if (v21 < v22)
          {
            int v23 = -1;
          }
          else
          {
            int v23 = 1;
          }
          v19 += 4;
        }
        while (v23 < 0);
        unint64_t v24 = &a1[v19];
        unint64_t v25 = a2;
        if (v19 == 4)
        {
          uint64_t v30 = (_OWORD *)a2;
          while (v24 < (unint64_t *)v30)
          {
            uint64_t v26 = v30 - 2;
            unint64_t v31 = bswap64(*((void *)v30 - 4));
            unint64_t v32 = bswap64(v181.n128_u64[0]);
            if (v31 == v32
              && (unint64_t v31 = bswap64(*((void *)v30 - 3)), v32 = bswap64(v181.n128_u64[1]), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 2)), v32 = bswap64(v184), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 1)), v32 = bswap64(*((unint64_t *)&v184 + 1)), v31 == v32))
            {
              int v33 = 0;
            }
            else if (v31 < v32)
            {
              int v33 = -1;
            }
            else
            {
              int v33 = 1;
            }
            v30 -= 2;
            if (v33 < 0) {
              goto LABEL_53;
            }
          }
          uint64_t v26 = v30;
        }
        else
        {
          do
          {
            uint64_t v26 = (_OWORD *)(v25 - 32);
            unint64_t v27 = bswap64(*(void *)(v25 - 32));
            unint64_t v28 = bswap64(v181.n128_u64[0]);
            if (v27 == v28
              && (unint64_t v27 = bswap64(*(void *)(v25 - 24)), v28 = bswap64(v181.n128_u64[1]), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 16)), v28 = bswap64(v184), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 8)), v28 = bswap64(*((unint64_t *)&v184 + 1)), v27 == v28))
            {
              int v29 = 0;
            }
            else if (v27 < v28)
            {
              int v29 = -1;
            }
            else
            {
              int v29 = 1;
            }
            v25 -= 32;
          }
          while ((v29 & 0x80000000) == 0);
        }
LABEL_53:
        if (v24 >= (unint64_t *)v26)
        {
          uint64_t v47 = v24 - 4;
        }
        else
        {
          unint64_t v34 = (unint64_t)v24;
          uint64_t v35 = v26;
          do
          {
            long long v188 = *(_OWORD *)v34;
            long long v197 = *(_OWORD *)(v34 + 16);
            long long v36 = v35[1];
            *(_OWORD *)unint64_t v34 = *v35;
            *(_OWORD *)(v34 + 16) = v36;
            *uint64_t v35 = v188;
            v35[1] = v197;
            uint64_t v37 = (unint64_t *)v34;
            do
            {
              unint64_t v38 = *(void *)(v34 + 32);
              v34 += 32;
              unint64_t v39 = bswap64(v38);
              unint64_t v40 = bswap64(v181.n128_u64[0]);
              if (v39 == v40
                && (unint64_t v39 = bswap64(v37[5]), v40 = bswap64(v181.n128_u64[1]), v39 == v40)
                && (unint64_t v39 = bswap64(v37[6]), v40 = bswap64(v184), v39 == v40)
                && (unint64_t v39 = bswap64(v37[7]), v40 = bswap64(*((unint64_t *)&v184 + 1)), v39 == v40))
              {
                int v41 = 0;
              }
              else if (v39 < v40)
              {
                int v41 = -1;
              }
              else
              {
                int v41 = 1;
              }
              uint64_t v37 = (unint64_t *)v34;
            }
            while (v41 < 0);
            uint64_t v42 = v35;
            do
            {
              unint64_t v43 = *((void *)v35 - 4);
              v35 -= 2;
              unint64_t v44 = bswap64(v43);
              unint64_t v45 = bswap64(v181.n128_u64[0]);
              if (v44 == v45
                && (unint64_t v44 = bswap64(*((void *)v42 - 3)), v45 = bswap64(v181.n128_u64[1]), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 2)), v45 = bswap64(v184), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 1)), v45 = bswap64(*((unint64_t *)&v184 + 1)), v44 == v45))
              {
                int v46 = 0;
              }
              else if (v44 < v45)
              {
                int v46 = -1;
              }
              else
              {
                int v46 = 1;
              }
              uint64_t v42 = v35;
            }
            while ((v46 & 0x80000000) == 0);
          }
          while (v34 < (unint64_t)v35);
          uint64_t v47 = (unint64_t *)(v34 - 32);
        }
        if (v47 != a1)
        {
          long long v48 = *((_OWORD *)v47 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v47;
          *((_OWORD *)a1 + 1) = v48;
        }
        *(__n128 *)uint64_t v47 = v181;
        *((_OWORD *)v47 + 1) = v184;
        if (v24 >= (unint64_t *)v26) {
          break;
        }
LABEL_83:
        std::__introsort<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *,false>(a1, v47, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v47 + 4;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *>(a1, v47);
      unint64_t v10 = v47 + 4;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *>(v47 + 4, (unint64_t *)a2))
      {
        break;
      }
      if (!v49) {
        goto LABEL_83;
      }
    }
    a2 = (unint64_t)v47;
    if (!v49) {
      continue;
    }
    return result;
  }
}

uint64_t MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v66 = a3;
  uint64_t v67 = a2;
  uint64_t v64 = 0;
  buffer_ptr = 0;
  size_t v62 = 0;
  size_t size_ptr = 0;
  BOOL v5 = dispatch_data_create_map(*(dispatch_data_t *)a2, (const void **)&buffer_ptr, &size_ptr);
  int v6 = dispatch_data_create_map(*(dispatch_data_t *)a3, (const void **)&v64, &v62);
  std::string v7 = (Air::PipelineScript *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
  uint64_t v8 = (Air::PipelineScript *)((char *)v64 + *(unsigned int *)v64);
  unint64_t v9 = (unsigned __int16 *)((char *)v7 - *(int *)v7);
  unsigned int v10 = *v9;
  if (v10 < 9)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = v9[4];
    if (v9[4]) {
      LODWORD(v11) = *((unsigned __int8 *)v7 + v11);
    }
  }
  unint64_t v12 = (unsigned __int16 *)((char *)v8 - *(int *)v8);
  if (*v12 < 9u)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[4];
    if (v13) {
      LODWORD(v13) = *((unsigned __int8 *)v8 + v13);
    }
  }
  if (v11 == v13)
  {
    v61[0] = &v67;
    v61[1] = &v66;
    if (v10 >= 9 && (uint64_t v14 = v9[4]) != 0)
    {
      switch(*((unsigned char *)v7 + v14))
      {
        case 1:
          if (*(void *)(a2 + 32) != *(void *)(a3 + 32)
            || *(void *)(a2 + 40) != *(void *)(a3 + 40)
            || *(void *)(a2 + 48) != *(void *)(a3 + 48)
            || *(void *)(a2 + 56) != *(void *)(a3 + 56))
          {
            goto LABEL_128;
          }
          BOOL v18 = *(void *)(a2 + 64) == *(void *)(a3 + 64) && *(void *)(a2 + 72) == *(void *)(a3 + 72);
          BOOL v19 = v18 && *(void *)(a2 + 80) == *(void *)(a3 + 80);
          if (!v19 || *(void *)(a2 + 88) != *(void *)(a3 + 88)) {
            goto LABEL_128;
          }
          uint64_t v21 = 0;
          if (!MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 0))goto LABEL_129; {
          if (!MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 1u))goto LABEL_128;
          }
          unint64_t v22 = (int *)Air::PipelineScript::pipeline_as_render(v7);
          int v23 = (int *)Air::PipelineScript::pipeline_as_render(v8);
          uint64_t v24 = MTLMetalScriptSerializer::EqualRenderDescriptor(v22, v23);
          goto LABEL_137;
        case 2:
          if (*(void *)(a2 + 32) != *(void *)(a3 + 32)
            || *(void *)(a2 + 40) != *(void *)(a3 + 40)
            || *(void *)(a2 + 48) != *(void *)(a3 + 48)
            || *(void *)(a2 + 56) != *(void *)(a3 + 56))
          {
            goto LABEL_128;
          }
          unint64_t v28 = *(char **)(a2 + 128);
          int v29 = *(char **)(a2 + 136);
          uint64_t v30 = *(char **)(a3 + 128);
          unint64_t v31 = *(char **)(a3 + 136);
          if (v29 - v28 != v31 - v30) {
            goto LABEL_128;
          }
          while (2)
          {
            if (v28 != v29 && v30 != v31)
            {
              if (*(void *)v28 == *(void *)v30
                && *((void *)v28 + 1) == *((void *)v30 + 1)
                && *((void *)v28 + 2) == *((void *)v30 + 2)
                && *((void *)v28 + 3) == *((void *)v30 + 3))
              {
                v28 += 32;
                v30 += 32;
                continue;
              }
              goto LABEL_128;
            }
            break;
          }
          uint64_t v21 = 0;
          if (v28 == v29 && v30 == v31)
          {
            int v57 = (int *)Air::PipelineScript::pipeline_as_compute(v7);
            uint64_t v58 = (int *)Air::PipelineScript::pipeline_as_compute(v8);
            uint64_t v24 = MTLMetalScriptSerializer::EqualComputeDescriptor(v57, v58);
            goto LABEL_137;
          }
          goto LABEL_129;
        case 3:
          if (*(void *)(a2 + 32) != *(void *)(a3 + 32)
            || *(void *)(a2 + 40) != *(void *)(a3 + 40)
            || *(void *)(a2 + 48) != *(void *)(a3 + 48)
            || *(void *)(a2 + 56) != *(void *)(a3 + 56))
          {
            goto LABEL_128;
          }
          unint64_t v38 = *(char **)(a2 + 128);
          unint64_t v39 = *(char **)(a2 + 136);
          unint64_t v40 = *(char **)(a3 + 128);
          int v41 = *(char **)(a3 + 136);
          if (v39 - v38 != v41 - v40) {
            goto LABEL_128;
          }
          break;
        case 4:
          if (*(void *)(a2 + 64) != *(void *)(a3 + 64)
            || *(void *)(a2 + 72) != *(void *)(a3 + 72)
            || *(void *)(a2 + 80) != *(void *)(a3 + 80)
            || *(void *)(a2 + 88) != *(void *)(a3 + 88))
          {
            goto LABEL_128;
          }
          BOOL v48 = *(void *)(a2 + 32) == *(void *)(a3 + 32) && *(void *)(a2 + 40) == *(void *)(a3 + 40);
          BOOL v49 = v48 && *(void *)(a2 + 48) == *(void *)(a3 + 48);
          if (!v49 || *(void *)(a2 + 56) != *(void *)(a3 + 56)) {
            goto LABEL_128;
          }
          BOOL v51 = *(void *)(a2 + 96) == *(void *)(a3 + 96) && *(void *)(a2 + 104) == *(void *)(a3 + 104);
          BOOL v52 = v51 && *(void *)(a2 + 112) == *(void *)(a3 + 112);
          BOOL v53 = v52 && *(void *)(a2 + 120) == *(void *)(a3 + 120);
          if (!v53
            || !MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 1u))
          {
            goto LABEL_128;
          }
          uint64_t v21 = 0;
          if (!MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 0))goto LABEL_129; {
          if (!MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 2u))goto LABEL_128;
          }
          uint64_t v54 = (int *)Air::PipelineScript::pipeline_as_mesh_render(v7);
          unint64_t v55 = (int *)Air::PipelineScript::pipeline_as_mesh_render(v8);
          uint64_t v24 = MTLMetalScriptSerializer::EqualMeshRenderDescriptor(v54, v55);
          goto LABEL_137;
        default:
          goto LABEL_128;
      }
      while (v38 != v39 && v40 != v41)
      {
        if (*(void *)v38 != *(void *)v40
          || *((void *)v38 + 1) != *((void *)v40 + 1)
          || *((void *)v38 + 2) != *((void *)v40 + 2)
          || *((void *)v38 + 3) != *((void *)v40 + 3))
        {
          goto LABEL_128;
        }
        v38 += 32;
        v40 += 32;
      }
      uint64_t v21 = 0;
      if (v38 == v39 && v40 == v41)
      {
        unint64_t v59 = (int *)Air::PipelineScript::pipeline_as_tile_render(v7);
        unint64_t v60 = (int *)Air::PipelineScript::pipeline_as_tile_render(v8);
        uint64_t v24 = MTLMetalScriptSerializer::EqualTileRenderDescriptor(v59, v60);
LABEL_137:
        uint64_t v21 = v24;
      }
    }
    else
    {
LABEL_128:
      uint64_t v21 = 0;
    }
LABEL_129:
    dispatch_release(v5);
    dispatch_release(v6);
  }
  else
  {
    dispatch_release(v5);
    dispatch_release(v6);
    return 0;
  }
  return v21;
}

uint64_t AirReflection::Node::node_as_ThreadPositionInThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266244) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadgroupPositionInGridArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266242) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadIndexInSimdgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266252) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ImageblockArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278531) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

dispatch_data_t MTLCompilerStitchingRequest::serializedRequest(MTLCompilerStitchingRequest *this, unsigned int a2, char **a3)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    dispatch_release(v4);
    *((void *)this + 4) = 0;
  }
  BOOL v5 = malloc_type_malloc(0x800uLL, 0xFA8FEB0CuLL);
  int v6 = this;
  std::string v7 = v5;
  unint64_t v73 = v6;
  uint64_t v8 = (const char *)[*((id *)v6 + 5) UTF8String];
  *std::string v7 = 1684104992;
  size_t v9 = strlen(v8);
  unint64_t v10 = v9 + 5;
  if (v9 + 5 <= 3) {
    abort();
  }
  size_t v11 = v9;
  size_t v12 = 2048;
  if (v10 >= 0x801)
  {
    do
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v9 + 5;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    while (v12 < v10);
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7) {
      abort();
    }
  }
  memcpy(v7 + 1, v8, v11);
  *((unsigned char *)v7 + v11 + 4) = 0;
  uint64_t v83 = 0;
  _getForcedAIRVersion((_DWORD *)&v83 + 1, &v83);
  if (v83)
  {
    if (v10 >= 0xFFFFFFFFFFFFFFFCLL) {
      abort();
    }
    unint64_t v13 = v11 + 9;
    if (v12 < v11 + 9)
    {
      if (!v12) {
        size_t v12 = 128;
      }
      while (v12 < v13)
      {
        if (v12 >> 1 >= ~v12) {
          size_t v12 = v11 + 9;
        }
        else {
          v12 += v12 >> 1;
        }
      }
      std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
      if (!v7) {
        goto LABEL_276;
      }
    }
    *(_DWORD *)((char *)v7 + v10) = 1634300534;
    if (v13 >= 0xFFFFFFFFFFFFFFFCLL) {
      abort();
    }
    int v14 = HIDWORD(v83);
    unint64_t v15 = v11 + 13;
    if (v12 < v11 + 13)
    {
      if (!v12) {
        size_t v12 = 128;
      }
      while (v12 < v15)
      {
        if (v12 >> 1 >= ~v12) {
          size_t v12 = v11 + 13;
        }
        else {
          v12 += v12 >> 1;
        }
      }
      std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
      if (!v7) {
        goto LABEL_276;
      }
    }
    *(_DWORD *)((char *)v7 + v13) = v14;
    if (v15 >= 0xFFFFFFFFFFFFFFFCLL) {
      abort();
    }
    int v16 = v83;
    unint64_t v10 = v11 + 17;
    if (v12 < v11 + 17)
    {
      if (!v12) {
        size_t v12 = 128;
      }
      while (v12 < v10)
      {
        if (v12 >> 1 >= ~v12) {
          size_t v12 = v11 + 17;
        }
        else {
          v12 += v12 >> 1;
        }
      }
      std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
      if (!v7) {
LABEL_276:
      }
        abort();
    }
    *(_DWORD *)((char *)v7 + v15) = v16;
  }
  if (v10 >= 0xFFFFFFFFFFFFFFFCLL) {
    abort();
  }
  size_t v17 = v10 + 4;
  if (v12 < v10 + 4)
  {
    if (!v12) {
      size_t v12 = 128;
    }
    while (v12 < v17)
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v10 + 4;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7) {
      goto LABEL_276;
    }
  }
  *(_DWORD *)((char *)v7 + v10) = 1853189478;
  int v18 = [*((id *)v73 + 6) count];
  if (v10 >= 0xFFFFFFFFFFFFFFF8) {
    abort();
  }
  int v19 = v18;
  unint64_t v20 = v10 + 8;
  if (v12 < v10 + 8)
  {
    if (!v12) {
      size_t v12 = 128;
    }
    while (v12 < v20)
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v10 + 8;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7) {
      goto LABEL_276;
    }
  }
  *(_DWORD *)((char *)v7 + v17) = v19;
  memset(&v82, 0, sizeof(v82));
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  id obj = (id)*((void *)v73 + 6);
  uint64_t v21 = [obj countByEnumeratingWithState:&v78 objects:v84 count:16];
  if (v21)
  {
    uint64_t v75 = *(void *)v79;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v79 != v75) {
          objc_enumerationMutation(obj);
        }
        int v23 = *(void **)(*((void *)&v78 + 1) + 8 * i);
        uint64_t v24 = (void *)[v23 libraryData];
        size_t size_ptr = 0;
        size_t __n = 0;
        (*(void (**)(void *, uint64_t, uint64_t, size_t *, size_t *))(*v24 + 200))(v24, [v23 bitCodeOffset], objc_msgSend(v23, "bitCodeFileSize"), &size_ptr, &__n);
        size_t v25 = __n;
        std::vector<char>::pointer begin = v82.__begin_;
        if (__n <= v82.__end_ - v82.__begin_)
        {
          if (__n < v82.__end_ - v82.__begin_) {
            v82.__end_ = &v82.__begin_[__n];
          }
        }
        else
        {
          std::vector<unsigned char>::__append(&v82, __n - (v82.__end_ - v82.__begin_));
          std::vector<char>::pointer begin = v82.__begin_;
          size_t v25 = __n;
        }
        (*(void (**)(void *, std::vector<char>::pointer, size_t, size_t))(*v24 + 208))(v24, begin, size_ptr, v25);
        unint64_t v27 = (void *)v24[11];
        if (v27)
        {
          uint64_t v28 = [v27 UTF8String];
          if (v20 >= 0xFFFFFFFFFFFFFFFCLL) {
            abort();
          }
          int v29 = (const char *)v28;
          size_t v30 = v20 + 4;
          if (v12 < v20 + 4)
          {
            if (!v12) {
              size_t v12 = 128;
            }
            while (v12 < v30)
            {
              if (v12 >> 1 >= ~v12) {
                size_t v12 = v20 + 4;
              }
              else {
                v12 += v12 >> 1;
              }
            }
            std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
            if (!v7) {
              goto LABEL_267;
            }
          }
          *(_DWORD *)((char *)v7 + v20) = 1953656940;
          size_t v31 = strlen(v29);
          size_t v32 = v31 + 1;
          if (v31 + 1 > -5 - v20) {
            abort();
          }
          size_t v33 = v31;
          unint64_t v20 = v32 + v30;
          if (v12 < v32 + v30)
          {
            if (!v12) {
              size_t v12 = 128;
            }
            while (v12 < v20)
            {
              if (v12 >> 1 >= ~v12) {
                size_t v12 = v32 + v30;
              }
              else {
                v12 += v12 >> 1;
              }
            }
            std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
            if (!v7) {
LABEL_267:
            }
              abort();
          }
          memcpy((char *)v7 + v30, v29, v33);
          *((unsigned char *)v7 + v33 + v30) = 0;
        }
        if (v20 >= 0xFFFFFFFFFFFFFFFCLL) {
          abort();
        }
        size_t v34 = v20 + 4;
        if (v12 < v20 + 4)
        {
          if (!v12) {
            size_t v12 = 128;
          }
          while (v12 < v34)
          {
            if (v12 >> 1 >= ~v12) {
              size_t v12 = v20 + 4;
            }
            else {
              v12 += v12 >> 1;
            }
          }
          std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7) {
            abort();
          }
        }
        *(_DWORD *)((char *)v7 + v20) = 1651007859;
        uint64_t v35 = [v23 bitCodeHash];
        unint64_t v36 = v20 + 36;
        if (v20 + 36 <= 0x1F) {
          abort();
        }
        uint64_t v37 = (_OWORD *)v35;
        if (v12 < v36)
        {
          if (!v12) {
            size_t v12 = 128;
          }
          while (v12 < v36)
          {
            if (v12 >> 1 >= ~v12) {
              size_t v12 = v20 + 36;
            }
            else {
              v12 += v12 >> 1;
            }
          }
          std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7) {
            goto LABEL_260;
          }
        }
        unint64_t v38 = (_OWORD *)((char *)v7 + v34);
        long long v39 = v37[1];
        *unint64_t v38 = *v37;
        v38[1] = v39;
        if (v36 >= 0xFFFFFFFFFFFFFFFCLL) {
          abort();
        }
        unint64_t v40 = v20 + 40;
        if (v12 < v20 + 40)
        {
          if (!v12) {
            size_t v12 = 128;
          }
          while (v12 < v40)
          {
            if (v12 >> 1 >= ~v12) {
              size_t v12 = v20 + 40;
            }
            else {
              v12 += v12 >> 1;
            }
          }
          std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7) {
            goto LABEL_260;
          }
        }
        *(_DWORD *)((char *)v7 + v36) = 1651078243;
        if (v40 >= 0xFFFFFFFFFFFFFFFCLL) {
          abort();
        }
        int v41 = __n;
        size_t v42 = v20 + 44;
        if (v12 < v20 + 44)
        {
          if (!v12) {
            size_t v12 = 128;
          }
          while (v12 < v42)
          {
            if (v12 >> 1 >= ~v12) {
              size_t v12 = v20 + 44;
            }
            else {
              v12 += v12 >> 1;
            }
          }
          std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7) {
            goto LABEL_260;
          }
        }
        *(_DWORD *)((char *)v7 + v40) = v41;
        size_t v43 = __n;
        if (-45 - v20 < __n) {
          abort();
        }
        std::vector<char>::pointer v44 = v82.__begin_;
        unint64_t v20 = __n + v42;
        if (v12 < __n + v42)
        {
          if (!v12) {
            size_t v12 = 128;
          }
          while (v12 < v20)
          {
            if (v12 >> 1 >= ~v12) {
              size_t v12 = __n + v42;
            }
            else {
              v12 += v12 >> 1;
            }
          }
          std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7) {
LABEL_260:
          }
            abort();
        }
        memcpy((char *)v7 + v42, v44, v43);
      }
      uint64_t v21 = [obj countByEnumeratingWithState:&v78 objects:v84 count:16];
    }
    while (v21);
  }
  if (v20 >= 0xFFFFFFFFFFFFFFFCLL) {
    abort();
  }
  size_t v45 = v20 + 4;
  if (v12 < v20 + 4)
  {
    if (!v12) {
      size_t v12 = 128;
    }
    while (v12 < v45)
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v20 + 4;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7) {
      goto LABEL_277;
    }
  }
  *(_DWORD *)((char *)v7 + v20) = 1853189491;
  int v46 = (uint64_t *)*((void *)v73 + 7);
  if (!v46)
  {
    if (v20 >= 0xFFFFFFFFFFFFFFF8) {
LABEL_282:
    }
      abort();
    unint64_t v49 = v20 + 8;
    if (v12 >= v20 + 8) {
      goto LABEL_197;
    }
    if (!v12) {
      size_t v12 = 128;
    }
    while (v12 < v49)
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v20 + 8;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (v7)
    {
LABEL_197:
      *(_DWORD *)((char *)v7 + v45) = 0;
      goto LABEL_198;
    }
LABEL_277:
    abort();
  }
  if (v20 > 0xFFFFFFFFFFFFFFF7) {
    goto LABEL_282;
  }
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  unint64_t v49 = v20 + 8;
  if (v12 < v20 + 8)
  {
    if (!v12) {
      size_t v12 = 128;
    }
    while (v12 < v49)
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v20 + 8;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7) {
      goto LABEL_277;
    }
  }
  *(_DWORD *)((char *)v7 + v45) = -858993459 * ((v47 - v48) >> 3);
  if (*(void *)(*((void *)v73 + 7) + 8) != **((void **)v73 + 7))
  {
    uint64_t v50 = 0;
    unsigned int v51 = 0;
    do
    {
      if (v49 >= 0xFFFFFFFFFFFFFFFCLL) {
        abort();
      }
      size_t v52 = v49 + 4;
      if (v12 < v49 + 4)
      {
        if (!v12) {
          size_t v12 = 128;
        }
        while (v12 < v52)
        {
          if (v12 >> 1 >= ~v12) {
            size_t v12 = v49 + 4;
          }
          else {
            v12 += v12 >> 1;
          }
        }
        std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
        if (!v7) {
          abort();
        }
      }
      *(_DWORD *)((char *)v7 + v49) = 1634952050;
      size_t size_ptr = 0;
      size_t __n = 0;
      dispatch_data_t v53 = dispatch_data_create_map(*(dispatch_data_t *)(**((void **)v73 + 7) + 40 * v50), (const void **)&__n, &size_ptr);
      if (v49 >= 0xFFFFFFFFFFFFFFF8) {
        abort();
      }
      uint64_t v54 = v53;
      int v55 = size_ptr;
      size_t v56 = v49 + 8;
      if (v12 < v49 + 8)
      {
        if (!v12) {
          size_t v12 = 128;
        }
        while (v12 < v56)
        {
          if (v12 >> 1 >= ~v12) {
            size_t v12 = v49 + 8;
          }
          else {
            v12 += v12 >> 1;
          }
        }
        std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
        if (!v7) {
          goto LABEL_272;
        }
      }
      *(_DWORD *)((char *)v7 + v52) = v55;
      size_t v57 = size_ptr;
      if (-9 - v49 < size_ptr) {
        abort();
      }
      uint64_t v58 = (const void *)__n;
      unint64_t v49 = size_ptr + v56;
      if (v12 < size_ptr + v56)
      {
        if (!v12) {
          size_t v12 = 128;
        }
        while (v12 < v49)
        {
          if (v12 >> 1 >= ~v12) {
            size_t v12 = size_ptr + v56;
          }
          else {
            v12 += v12 >> 1;
          }
        }
        std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
        if (!v7) {
LABEL_272:
        }
          abort();
      }
      memcpy((char *)v7 + v56, v58, v57);
      dispatch_release(v54);
      uint64_t v50 = ++v51;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*((void *)v73 + 7) + 8) - **((void **)v73 + 7)) >> 3) > v51);
  }
LABEL_198:
  if (v49 >= 0xFFFFFFFFFFFFFFFCLL) {
    abort();
  }
  size_t v59 = v49 + 4;
  if (v12 < v49 + 4)
  {
    if (!v12) {
      size_t v12 = 128;
    }
    while (v12 < v59)
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v49 + 4;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7) {
      goto LABEL_277;
    }
  }
  *(_DWORD *)((char *)v7 + v49) = 1886676589;
  active_platforuint64_t m = dyld_get_active_platform();
  if (v49 >= 0xFFFFFFFFFFFFFFF8) {
    abort();
  }
  int v61 = active_platform;
  size_t v62 = v49 + 8;
  if (v12 < v49 + 8)
  {
    if (!v12) {
      size_t v12 = 128;
    }
    while (v12 < v62)
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v49 + 8;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7) {
      goto LABEL_275;
    }
  }
  *(_DWORD *)((char *)v7 + v59) = v61;
  if (v49 >= 0xFFFFFFFFFFFFFFF4) {
    abort();
  }
  size_t v63 = v49 + 12;
  if (v12 < v49 + 12)
  {
    if (!v12) {
      size_t v12 = 128;
    }
    while (v12 < v63)
    {
      if (v12 >> 1 >= ~v12) {
        size_t v12 = v49 + 12;
      }
      else {
        v12 += v12 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7) {
      goto LABEL_275;
    }
  }
  *(_DWORD *)((char *)v7 + v62) = 1634888036;
  if (*((unsigned char *)v73 + 88))
  {
    if (v49 <= 0xFFFFFFFFFFFFFFEFLL)
    {
      uint64_t v64 = *((void *)v73 + 10);
      size_t v65 = v49 + 16;
      if (v12 >= v49 + 16) {
        goto LABEL_294;
      }
      if (!v12) {
        size_t v12 = 128;
      }
      while (v12 < v65)
      {
        if (v12 >> 1 >= ~v12) {
          size_t v12 = v49 + 16;
        }
        else {
          v12 += v12 >> 1;
        }
      }
      std::string v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
      if (v7)
      {
LABEL_294:
        *(_DWORD *)((char *)v7 + v63) = v64;
        size_t v68 = *((void *)v73 + 10);
        if (-17 - v49 < v68) {
          abort();
        }
        long long v69 = (const void *)*((void *)v73 + 9);
        size_t v66 = v68 + v65;
        if (v12 >= v68 + v65) {
          goto LABEL_254;
        }
        size_t v70 = v12 ? v12 : 128;
        while (v70 < v66)
        {
          if (v70 >> 1 >= ~v70) {
            size_t v70 = v68 + v65;
          }
          else {
            v70 += v70 >> 1;
          }
        }
        std::string v7 = malloc_type_realloc(v7, v70, 0x227314A4uLL);
        if (v7)
        {
LABEL_254:
          memcpy((char *)v7 + v65, v69, v68);
          goto LABEL_257;
        }
      }
LABEL_275:
      abort();
    }
LABEL_286:
    abort();
  }
  if (v49 >= 0xFFFFFFFFFFFFFFF0) {
    goto LABEL_286;
  }
  size_t v66 = v49 + 16;
  if (v12 < v49 + 16)
  {
    size_t v67 = v12 ? v12 : 128;
    while (v67 < v66)
    {
      if (v67 >> 1 >= ~v67) {
        size_t v67 = v49 + 16;
      }
      else {
        v67 += v67 >> 1;
      }
    }
    std::string v7 = malloc_type_realloc(v7, v67, 0x227314A4uLL);
    if (!v7) {
      goto LABEL_275;
    }
  }
  *(_DWORD *)((char *)v7 + v63) = 0;
LABEL_257:
  dispatch_data_t v71 = dispatch_data_create(v7, v66, 0, (dispatch_block_t)*MEMORY[0x1E4F143F0]);
  *((void *)v73 + 4) = v71;
  if (v82.__begin_)
  {
    v82.__end_ = v82.__begin_;
    operator delete(v82.__begin_);
  }
  return v71;
}

void sub_18277900C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  free(v30);
  _Unwind_Resume(a1);
}

dispatch_data_t MTLLibraryDataWithArchive::newBitCodeWithHash(MTLLibraryDataWithArchive *a1, unint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  BOOL v3 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((void *)a1 + 40, a2);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3[6];
  uint64_t v13 = 0;
  long long v11 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)size_t v9 = 0u;
  *(_OWORD *)unint64_t v10 = 0u;
  v14.functionInputs = 0;
  v14.airScript = 0;
  if (MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v4, &v14, (MTLLibraryDataWithArchive::AdditionalFunctionData *)v8))
  {
    BOOL v5 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(void *)a1 + 128))(a1);
    dispatch_data_t subrange = dispatch_data_create_subrange(v5, v14.bitCodeOffset, v14.bitCodeFileSize);
    if (v14.airScript) {
      dispatch_release((dispatch_object_t)v14.airScript);
    }
    if (v14.functionInputs) {
      dispatch_release((dispatch_object_t)v14.functionInputs);
    }
  }
  else
  {
    dispatch_data_t subrange = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[1]);
  }
  if (SHIBYTE(v10[0]) < 0) {
    operator delete(v9[0]);
  }
  return subrange;
}

void sub_182779198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

double MTLLibraryDataWithArchive::decodeSTCIToken@<D0>(char *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  int v6 = a1 + 4;
  unint64_t v7 = *(unsigned int *)a1;
  std::vector<MTLUINT256_t>::vector(&v13, v7);
  uint64_t v8 = v13;
  if (v7)
  {
    size_t v9 = v13;
    do
    {
      size_t v10 = strnlen(v6, a2);
      long long v11 = *(_OWORD *)&v6[v10 + 17];
      *size_t v9 = *(_OWORD *)&v6[v10 + 1];
      v9[1] = v11;
      v9 += 2;
      v6 += v10 + 33;
      --v7;
    }
    while (v7);
  }
  *(void *)a3 = *(void *)v6;
  *(void *)(a3 + 8) = v8;
  double result = *(double *)&v14;
  *(_OWORD *)(a3 + 16) = v14;
  return result;
}

void RequiredFunctionKeys::~RequiredFunctionKeys(RequiredFunctionKeys *this)
{
  for (uint64_t i = 0; i != 8; ++i)
  {
  }
}

void MTLProxyLibraryData::~MTLProxyLibraryData(id *this)
{
  *this = &unk_1ECAC4178;
  for (uint64_t i = this + 14; ; i[5])
  {
    uint64_t i = (id *)*i;
    if (!i) {
      break;
    }
  }

  this[17] = 0;
  this[18] = 0;
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)(this + 12));

  MTLLibraryData::~MTLLibraryData((MTLLibraryData *)this);
}

{
  uint64_t vars8;

  MTLProxyLibraryData::~MTLProxyLibraryData(this);

  JUMPOUT(0x18530C140);
}

uint64_t MTLProxyLibraryData::MTLProxyLibraryData(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1ECAC5530;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  long long v5 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v5;
  *(void *)a1 = &unk_1ECAC4178;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v6 = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v7 = [a2 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v16;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(a2);
        }
        size_t v10 = *(void **)(*((void *)&v15 + 1) + 8 * v9);
        id v11 = v10;
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v10, "name"), "UTF8String"));
        int v19 = __p;
        *((void *)std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto11MTLFunction}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto11MTLFunction}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto11MTLFunction}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}*>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::piecewise_construct_t const&<>>(v6, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v19)+ 5) = v10;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [a2 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v7);
  }
  return a1;
}

void sub_182779528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v16);
  MTLLibraryData::~MTLLibraryData(v15);
  _Unwind_Resume(a1);
}

uint64_t CompilerConnection::CompilerConnection(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = &unk_1ECAC59E8;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 32) = a3;
  atomic_store(0, (unsigned int *)(a1 + 28));
  unint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  *(void *)(a1 + 8) = dispatch_queue_create("compiler request queue", v4);
  long long v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  *(void *)(a1 + 16) = dispatch_queue_create("compiler reply queue", v5);
  return a1;
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithFunctionArray(uint64_t a1, _MTLDevice *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (a4) {
    *a4 = 0;
  }
  if (a2)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      goto LABEL_5;
    }
    unint64_t v38 = @"device is not a MTLDevice.";
    unint64_t v39 = 1;
    uint64_t v40 = 6317;
  }
  else
  {
    unint64_t v38 = @"device must not be nil.";
    unint64_t v39 = 0;
    uint64_t v40 = 6314;
  }
  MTLReportFailure(v39, "newLibraryWithFunctionArray", v40, (uint64_t)v38, a5, a6, a7, a8, v41);
LABEL_5:
  int data = 0;
  size_t v52 = 0;
  dispatch_data_t v53 = 0;
  v50[0] = 0;
  v50[1] = 0;
  unint64_t v49 = v50;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v10 = [a3 countByEnumeratingWithState:&v45 objects:v54 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v46;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v46 != v11) {
          objc_enumerationMutation(a3);
        }
        uint64_t v13 = *(void **)(*((void *)&v45 + 1) + 8 * i);
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend((id)objc_msgSend(v13, "name"), "UTF8String"));
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v49, (const void **)&__p, (uint64_t)&__p);
        char v15 = v14;
        if (SHIBYTE(__p.hash[3]) < 0) {
          operator delete(*(void **)__p.count);
        }
        if ((v15 & 1) == 0)
        {
          if (a4)
          {
            uint64_t v35 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:@"function names must be unique" forKey:*MEMORY[0x1E4F28568]];
            id v36 = (id)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"MTLLibraryErrorDomain" code:1 userInfo:v35];
            size_t v34 = 0;
            *a4 = v36;
          }
          else
          {
            size_t v34 = 0;
          }
          goto LABEL_40;
        }
        uint64_t v16 = (_OWORD *)[v13 bitCodeHash];
        long long v17 = v16;
        long long v18 = v52;
        if (v52 >= v53)
        {
          uint64_t v21 = (char *)data;
          uint64_t v22 = (v52 - (unsigned char *)data) >> 5;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 59) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v53 - (unsigned char *)data;
          if ((v53 - (unsigned char *)data) >> 4 > v23) {
            unint64_t v23 = v24 >> 4;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v53, v25);
            uint64_t v21 = (char *)data;
            long long v18 = v52;
          }
          else
          {
            uint64_t v26 = 0;
          }
          long long v27 = v17[1];
          uint64_t v28 = &v26[32 * v22];
          *(_OWORD *)uint64_t v28 = *v17;
          *((_OWORD *)v28 + 1) = v27;
          if (v18 == v21)
          {
            size_t v31 = &v26[32 * v22];
          }
          else
          {
            int v29 = &v26[32 * v22];
            do
            {
              long long v30 = *((_OWORD *)v18 - 1);
              size_t v31 = v29 - 32;
              *((_OWORD *)v29 - 2) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v29 - 1) = v30;
              v18 -= 32;
              v29 -= 32;
            }
            while (v18 != v21);
          }
          unint64_t v20 = v28 + 32;
          int data = v31;
          size_t v52 = v28 + 32;
          dispatch_data_t v53 = &v26[32 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          long long v19 = v16[1];
          *(_OWORD *)size_t v52 = *v16;
          *((_OWORD *)v18 + 1) = v19;
          unint64_t v20 = v18 + 32;
        }
        size_t v52 = v20;
      }
      uint64_t v10 = [a3 countByEnumeratingWithState:&v45 objects:v54 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
  unint64_t v32 = 126 - 2 * __clz((v52 - ((unsigned char *)data + 32)) >> 5);
  if (v52 == (char *)data + 32) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  std::__introsort<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *,false>((unint64_t *)data + 4, (unint64_t)v52, v33, 1);
  CC_SHA256_Init(&__p);
  CC_SHA256_Update(&__p, data, (v52 - data) & 0xFFFFFFE0);
  CC_SHA256_Final(md, &__p);
  _MTLGetLibrariesCache(a2);
  size_t v34 = MTLLibraryBuilder::newLibraryWithProxyData(a1, md, a4);
LABEL_40:
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)&v49, v50[0]);
  if (data)
  {
    size_t v52 = (char *)data;
    operator delete(data);
  }
  return v34;
}

void sub_18277999C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,char *a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithProxyData(uint64_t a1, _OWORD *a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  char v9 = 0;
  uint64_t v5 = MTLLibraryBuilder::findOrCreateLibraryContainer((os_unfair_lock_s *)a1, a2, &v9);
  uint64_t v6 = (MTLLibraryContainer *)v5;
  if (v9) {
    operator new();
  }
  dispatch_group_wait(*(dispatch_group_t *)(v5 + 80), 0xFFFFFFFFFFFFFFFFLL);
  if (!v6->var3)
  {
    uint64_t v7 = 0;
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v7 = [[_MTLLibrary alloc] initWithLibraryContainer:v6 device:*(void *)(a1 + 32)];
  if (a3) {
LABEL_5:
  }
    *a3 = (id)[v6->var8 copy];
LABEL_6:
  MTLLibraryBuilder::releaseCacheEntry((MTLLibraryBuilder *)a1, v6);
  return v7;
}

void sub_182779C68(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A1C40B3CF1B9ELL);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryData::release(MTLLibraryData *this)
{
  uint64_t result = MTLAtomicDecrement((atomic_uint *)this + 20);
  if (this && !result)
  {
    BOOL v3 = *(uint64_t (**)(MTLLibraryData *))(*(void *)this + 8);
    return v3(this);
  }
  return result;
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl39RenderPipelineColorAttachmentDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE2_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = Mtl::CloneRenderPipelineColorAttachmentDescriptor<Mtl::RenderPipelineColorAttachmentDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      uint64_t v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v10 = __p;
  }
  if (v15 == v10) {
    uint64_t v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>> const&)::t;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    char v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182779DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

MTLStructType *typeFromBuffer(MTLDataType a1, const char *a2, unsigned int *a3, unsigned int a4)
{
  if ((uint64_t)a1 > (uint64_t)(MTLDataTypeBool4|MTLDataTypeStruct))
  {
    if (a1 == MTLDataTypePointer)
    {
      uint64_t v13 = *a3;
      if (v13 >= a4)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = a2[v13];
        LODWORD(v13) = v13 + 1;
        *a3 = v13;
      }
      if (v13 >= a4)
      {
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = a2[v13];
        LODWORD(v13) = v13 + 1;
        *a3 = v13;
      }
      unint64_t v24 = v13 + 8;
      if (v24 <= a4)
      {
        uint64_t v25 = *(unsigned __int16 *)&a2[v13];
        *a3 = v24;
        LODWORD(v13) = v13 + 8;
      }
      else
      {
        uint64_t v25 = 0;
      }
      if (v13 >= a4)
      {
        MTLDataType v26 = MTLDataTypeNone;
      }
      else
      {
        MTLDataType v26 = (unint64_t)a2[v13];
        *a3 = v13 + 1;
      }
      long long v27 = (void *)typeFromBuffer(v26, a2, a3, a4);
      if ([v27 dataType] == 1) {
        uint64_t IsIndirectArgumentBuffer = structIsIndirectArgumentBuffer((uint64_t)v27);
      }
      else {
        uint64_t IsIndirectArgumentBuffer = 0;
      }
      LOBYTE(v29) = 0;
      uint64_t v21 = [[MTLPointerType alloc] initWithElementType:v26 elementTypeDescription:v27 access:v14 alignment:v23 dataSize:v25 elementIsIndirectArgumentBuffer:IsIndirectArgumentBuffer isConstantBuffer:v29];

      return (MTLStructType *)v21;
    }
    if (a1 == MTLDataTypeTexture)
    {
      uint64_t v9 = *a3;
      if (v9 >= a4)
      {
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v10 = a2[v9];
        LODWORD(v9) = v9 + 1;
        *a3 = v9;
      }
      unint64_t v16 = v9 + 4;
      if (v16 <= a4)
      {
        unsigned int v17 = *(_DWORD *)&a2[v9];
        *a3 = v16;
        LODWORD(v9) = v9 + 4;
      }
      else
      {
        unsigned int v17 = 0;
      }
      if (v9 >= a4)
      {
        unsigned int v19 = 0;
      }
      else
      {
        unsigned int v19 = a2[v9];
        *a3 = v9 + 1;
      }
      uint64_t v21 = [[MTLTextureReferenceType alloc] initWithDataType:v10 textureType:v19 & 0x1F access:(v19 >> 5) & 3 isDepthTexture:v19 >> 7];
      if (v17 >= 2)
      {
        uint64_t v22 = [[MTLArrayType alloc] initWithArrayLength:v17 elementType:58 stride:0 pixelFormat:0 aluType:0 details:v21];

        return (MTLStructType *)v22;
      }
      return (MTLStructType *)v21;
    }
    goto LABEL_10;
  }
  if (a1 != MTLDataTypeStruct)
  {
    if (a1 == MTLDataTypeArray)
    {
      uint64_t v5 = *a3;
      unint64_t v6 = v5 + 4;
      if (v5 + 4 <= (unint64_t)a4)
      {
        uint64_t v7 = *(unsigned int *)&a2[v5];
        unsigned int v8 = v5 + 4;
        *a3 = v6;
        uint64_t v5 = (v5 + 4);
        unint64_t v6 = v6 + 4;
      }
      else
      {
        uint64_t v7 = 0;
        unsigned int v8 = *a3;
      }
      if (v6 <= a4)
      {
        uint64_t v15 = *(unsigned int *)&a2[v5];
        *a3 = v6;
        unsigned int v8 = v6;
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (v8 >= a4)
      {
        MTLDataType v18 = MTLDataTypeNone;
      }
      else
      {
        MTLDataType v18 = (unint64_t)a2[v8];
        *a3 = v8 + 1;
      }
      unint64_t v20 = (void *)typeFromBuffer(v18, a2, a3, a4);
      uint64_t v21 = [[MTLArrayType alloc] initWithArrayLength:v7 elementType:v18 stride:v15 pixelFormat:0 aluType:0 details:v20];

      return (MTLStructType *)v21;
    }
LABEL_10:
    uint64_t v11 = [MTLType alloc];
    return (MTLStructType *)[(MTLType *)v11 initWithDataType:a1];
  }

  return initStructType(a2, a3, a4);
}

uint64_t MTLVertexDescriptorDescription(uint64_t result, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v24 = [@"\n" stringByPaddingToLength:a2 + 4 withString:@" " startingAtIndex:0];
    uint64_t v4 = [@"\n" stringByPaddingToLength:a2 + 8 withString:@" " startingAtIndex:0];
    uint64_t v5 = [@"\n" stringByPaddingToLength:a2 + 12 withString:@" " startingAtIndex:0];
    uint64_t v33 = 0;
    memset(v32, 0, sizeof(v32));
    uint64_t v10 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:31];
    for (uint64_t i = 0; i != 31; ++i)
    {
      uint64_t v12 = *(void *)(*(void *)(v3 + 16) + 8 + 8 * i);
      if (v12 && *(void *)(v12 + 8))
      {
        unint64_t v13 = *(void *)(v12 + 24);
        if (v13 >= 0x1F) {
          MTLReleaseAssertionFailure((uint64_t)"MTLVertexDescriptorDescription", 1085, (uint64_t)"bufferIndex < MTL_MAX_VERTEX_BUFFERS", 0, v6, v7, v8, v9, v23);
        }
        uint64_t v14 = (void *)v32[v13];
        if (!v14)
        {
          uint64_t v14 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:128];
          v32[v13] = v14;
          v31[0] = v24;
          v31[1] = objc_msgSend(NSString, "stringWithFormat:", @"Buffer %lu:", v13);
          objc_msgSend(v14, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v31, 2));
          uint64_t v15 = *(void **)(*(void *)(v3 + 8) + 8 + 8 * v13);
          if (v15)
          {
            v30[0] = v4;
            v30[1] = @"stepFunction =";
            unint64_t v16 = v15[2];
            unsigned int v17 = @"Unknown";
            if (v16 <= 4) {
              unsigned int v17 = (__CFString *)*((void *)&off_1E5222378 + v16);
            }
            v30[2] = v17;
            objc_msgSend(v14, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v30, 3));
            if (v15[2] == 2)
            {
              v29[0] = v4;
              v29[1] = @"stepRate =";
              v29[2] = [NSNumber numberWithUnsignedInteger:v15[3]];
              objc_msgSend(v14, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v29, 3));
            }
            if ([v15 isStrideDynamic])
            {
              v28[0] = v4;
              v28[1] = @"stride = dynamic";
              MTLDataType v18 = (void *)MEMORY[0x1E4F1C978];
              unsigned int v19 = v28;
              uint64_t v20 = 2;
            }
            else
            {
              v27[0] = v4;
              v27[1] = @"stride =";
              _OWORD v27[2] = [NSNumber numberWithUnsignedInteger:v15[1]];
              MTLDataType v18 = (void *)MEMORY[0x1E4F1C978];
              unsigned int v19 = v27;
              uint64_t v20 = 3;
            }
          }
          else
          {
            v26[0] = v4;
            v26[1] = @"stepFunction =";
            _DWORD v26[2] = @"MTLVertexStepFunctionPerVertex";
            void v26[3] = v4;
            v26[4] = @"stride =";
            v26[5] = &unk_1ECB15180;
            MTLDataType v18 = (void *)MEMORY[0x1E4F1C978];
            unsigned int v19 = v26;
            uint64_t v20 = 6;
          }
          objc_msgSend(v14, "addObjectsFromArray:", objc_msgSend(v18, "arrayWithObjects:count:", v19, v20));
        }
        v25[0] = v4;
        v25[1] = objc_msgSend(NSString, "stringWithFormat:", @"Attribute %u:", i);
        v25[2] = v5;
        void v25[3] = @"offset =";
        v25[4] = [NSNumber numberWithUnsignedInteger:*(void *)(v12 + 16)];
        v25[5] = v5;
        v25[6] = @"format =";
        v25[7] = MTLAttributeFormatString(*(MTLAttributeFormat *)(v12 + 8));
        objc_msgSend(v14, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v25, 8));
      }
    }
    for (uint64_t j = 0; j != 31; ++j)
    {
      uint64_t v22 = (void *)v32[j];
      if (v22) {
        objc_msgSend(v10, "addObject:", objc_msgSend(v22, "componentsJoinedByString:", @" "));
      }
    }
    return [v10 componentsJoinedByString:@" "];
  }
  return result;
}

uint64_t (*MTLGetPackUintFunction(uint64_t a1))(uint32x4_t *this, unsigned int *a2, void *a3)
{
  uint64_t result = 0;
  if (a1 <= 90)
  {
    if (a1 > 52)
    {
      switch(a1)
      {
        case '5':
          return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_8::__invoke;
        case '?':
          return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_5::__invoke;
        case 'I':
          return MTLGetPackUintFunction::$_3::__invoke;
        default:
          return result;
      }
    }
    else
    {
      switch(a1)
      {
        case 13:
          return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_0::__invoke;
        case 23:
          return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_4::__invoke;
        case 33:
          return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_1::__invoke;
        default:
          return result;
      }
    }
  }
  else if (a1 <= 122)
  {
    switch(a1)
    {
      case '[':
        return MTLGetPackUintFunction::$_12::__invoke;
      case 'g':
        return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_9::__invoke;
      case 'q':
        return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_7::__invoke;
      default:
        return result;
    }
  }
  else if (a1 > 312)
  {
    if (a1 == 313)
    {
      return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_6::__invoke;
    }
    else
    {
      if (a1 != 323) {
        return result;
      }
      return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_10::__invoke;
    }
  }
  else if (a1 == 123)
  {
    return (uint64_t (*)(uint32x4_t *, unsigned int *, void *))MTLGetPackUintFunction::$_11::__invoke;
  }
  else
  {
    if (a1 != 303) {
      return result;
    }
    return MTLGetPackUintFunction::$_2::__invoke;
  }
}

uint64_t (*MTLGetPackSintFunction(uint64_t a1))(int32x4_t *this, int *a2, void *a3)
{
  uint64_t result = 0;
  if (a1 > 103)
  {
    if (a1 > 303)
    {
      switch(a1)
      {
        case 304:
          return MTLGetPackSintFunction::$_2::__invoke;
        case 314:
          return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_6::__invoke;
        case 324:
          return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_10::__invoke;
        default:
          return result;
      }
    }
    else
    {
      switch(a1)
      {
        case 'h':
          return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_9::__invoke;
        case 'r':
          return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_7::__invoke;
        case '|':
          return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_11::__invoke;
        default:
          return result;
      }
    }
  }
  else if (a1 > 53)
  {
    switch(a1)
    {
      case '6':
        return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_8::__invoke;
      case '@':
        return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_5::__invoke;
      case 'J':
        return MTLGetPackSintFunction::$_3::__invoke;
      default:
        return result;
    }
  }
  else
  {
    switch(a1)
    {
      case 14:
        return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_0::__invoke;
      case 24:
        return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_4::__invoke;
      case 34:
        return (uint64_t (*)(int32x4_t *, int *, void *))MTLGetPackSintFunction::$_1::__invoke;
      default:
        return result;
    }
  }
}

void sub_18277ABA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18277AEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Block_object_dispose((const void *)(v25 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18277BF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a66, 8);
  if (STACK[0x218]) {
    dispatch_release((dispatch_object_t)STACK[0x218]);
  }
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose((const void *)(v66 - 232), 8);
  _Block_object_dispose((const void *)(v66 - 200), 8);
  _Block_object_dispose((const void *)(v66 - 168), 8);
  _Block_object_dispose((const void *)(v66 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18277C588(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C408329ED7BLL);
  _Unwind_Resume(a1);
}

dispatch_data_t newMeshSerializedObjectOrMeshData<MTLRenderPipelineDescriptorPrivate>(int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v25 = 0;
  uint64_t v24 = 0;
  __srCC_SHA256_CTX c = 0uLL;
  if (a1) {
    int v5 = 0;
  }
  else {
    int v5 = 4;
  }
  int v6 = (a3 >> 23) & 2 | v5 | (*(_DWORD *)(a4 + 224) >> 4) & 8;
  DWORD2(__src) = v6;
  uint64_t v7 = (id *)(a4 + 512);
  if (!a1) {
    uint64_t v7 = (id *)(a4 + 504);
  }
  uint64_t v8 = (MTLLinkedFunctions *)*v7;
  if (*v7)
  {
    BOOL v9 = [*v7 functions]
      && [(NSArray *)[(MTLLinkedFunctions *)v8 functions] count] != 0;
    BOOL v10 = [(MTLLinkedFunctions *)v8 privateFunctions]
       && [(NSArray *)[(MTLLinkedFunctions *)v8 privateFunctions] count] != 0;
    if (v10 || v9)
    {
      v6 |= 0x10u;
      DWORD2(__src) = v6;
    }
  }
  if ([*(id *)(a4 + 432) count])
  {
    v6 |= 0x10u;
    DWORD2(__src) = v6;
  }
  uint64_t v11 = (void *)[*(id *)(a4 + 288) device];
  uint64_t v12 = MTLSerializePluginDataDictionary((void *)[v11 pluginData], 0);
  uint64_t v13 = v12;
  size_t v14 = 12;
  uint64_t v22 = v11;
  if (v12)
  {
    LODWORD(__src) = 12;
    size_t v14 = v12 + 12;
    uint64_t v21 = 12;
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v15 = MTLSerializePluginDataDictionary(*(void **)(a4 + 464), 0);
  uint64_t v16 = v15;
  if (!v15)
  {
    uint64_t v20 = 0;
    if ((v6 & 0x10) == 0) {
      goto LABEL_22;
    }
LABEL_24:
    _MTLPopulateLinkedFunctionExtraData(v8);
  }
  DWORD1(__src) = v14;
  uint64_t v20 = v14;
  v14 += v15;
  if ((v6 & 0x10) != 0) {
    goto LABEL_24;
  }
LABEL_22:
  unsigned int v17 = malloc_type_malloc(v14, 0x5538FFA8uLL);
  memcpy(v17, &__src, 0xCuLL);
  if (v13) {
    MTLSerializePluginDataDictionary((void *)[v22 pluginData], (unsigned char *)v17 + v21);
  }
  if (v16) {
    MTLSerializePluginDataDictionary(*(void **)(a4 + 464), (unsigned char *)v17 + v20);
  }
  MTLDataType v18 = (void *)*MEMORY[0x1E4F143F0];

  return dispatch_data_create(v17, v14, 0, v18);
}

dispatch_data_t newMeshSerializedObjectOrMeshData<MTLMeshRenderPipelineDescriptorPrivate>(int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v25 = 0;
  uint64_t v24 = 0;
  __srCC_SHA256_CTX c = 0uLL;
  if (a1) {
    int v5 = 0;
  }
  else {
    int v5 = 4;
  }
  int v6 = (a3 >> 23) & 2 | v5 | (*(_DWORD *)(a4 + 60) >> 1) & 8;
  DWORD2(__src) = v6;
  uint64_t v7 = (id *)(a4 + 216);
  if (!a1) {
    uint64_t v7 = (id *)(a4 + 208);
  }
  uint64_t v8 = (MTLLinkedFunctions *)*v7;
  if (*v7)
  {
    BOOL v9 = [*v7 functions]
      && [(NSArray *)[(MTLLinkedFunctions *)v8 functions] count] != 0;
    BOOL v10 = [(MTLLinkedFunctions *)v8 privateFunctions]
       && [(NSArray *)[(MTLLinkedFunctions *)v8 privateFunctions] count] != 0;
    if (v10 || v9)
    {
      v6 |= 0x10u;
      DWORD2(__src) = v6;
    }
  }
  if ([*(id *)(a4 + 176) count])
  {
    v6 |= 0x10u;
    DWORD2(__src) = v6;
  }
  uint64_t v11 = (void *)[*(id *)(a4 + 96) device];
  uint64_t v12 = MTLSerializePluginDataDictionary((void *)[v11 pluginData], 0);
  uint64_t v13 = v12;
  size_t v14 = 12;
  uint64_t v22 = v11;
  if (v12)
  {
    LODWORD(__src) = 12;
    size_t v14 = v12 + 12;
    uint64_t v21 = 12;
  }
  else
  {
    uint64_t v21 = 0;
  }
  uint64_t v15 = MTLSerializePluginDataDictionary(*(void **)(a4 + 184), 0);
  uint64_t v16 = v15;
  if (!v15)
  {
    uint64_t v20 = 0;
    if ((v6 & 0x10) == 0) {
      goto LABEL_22;
    }
LABEL_24:
    _MTLPopulateLinkedFunctionExtraData(v8);
  }
  DWORD1(__src) = v14;
  uint64_t v20 = v14;
  v14 += v15;
  if ((v6 & 0x10) != 0) {
    goto LABEL_24;
  }
LABEL_22:
  unsigned int v17 = malloc_type_malloc(v14, 0x5538FFA8uLL);
  memcpy(v17, &__src, 0xCuLL);
  if (v13) {
    MTLSerializePluginDataDictionary((void *)[v22 pluginData], (unsigned char *)v17 + v21);
  }
  if (v16) {
    MTLSerializePluginDataDictionary(*(void **)(a4 + 184), (unsigned char *)v17 + v20);
  }
  MTLDataType v18 = (void *)*MEMORY[0x1E4F143F0];

  return dispatch_data_create(v17, v14, 0, v18);
}

void _MTLPopulateGPUCompilerSPIOptionsExtraData()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18277FB60(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1010C40113C0ABBLL);
  _Unwind_Resume(a1);
}

void UsagePayload::UsagePayload(uint64_t a1, UsagePayload *this, int a3, int a4)
{
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = a4;
  *(void *)(a1 + 1032) = 0;
  if (*((char *)this + 23) < 0)
  {
    std::string::size_type v6 = *((void *)this + 1);
    if (v6 >= 0x401)
    {
      char v8 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type v6 = *((unsigned __int8 *)this + 23);
  }
  std::string::copy((const std::string *)this, (std::string::value_type *)(a1 + 8), v6, 0);
  uint64_t v7 = *((unsigned __int8 *)this + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)this + 1);
  }
  *(void *)(a1 + 1032) = v7;
  char v8 = 1;
LABEL_8:
  *(unsigned char *)(a1 + 1040) = v8;
}

void *UsagePayload::UsagePayload(void *__dst, size_t __n, void *__src)
{
  __dst[129] = 0;
  *((unsigned char *)__dst + 1040) = 0;
  if (__n - 1033 >= 0xFFFFFFFFFFFFFBFFLL)
  {
    memcpy(__dst, __src, __n);
    __dst[129] = __n - 8;
    *((unsigned char *)__dst + 1040) = 1;
  }
  return __dst;
}

void UsagePayload::serialization(UsagePayload *this)
{
}

double UsagePayload::getArchiveArch@<D0>(UsagePayload *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100](&__dst, (char *)this + 8, *((void *)this + 129));
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v6;
  double result = *(double *)this;
  *(void *)(a2 + 24) = *(void *)this;
  return result;
}

void **MTLArchiveUsageDB::MTLArchiveUsageDB(void **a1, uint64_t a2)
{
  return MTLVersionedDB::MTLVersionedDB(a1, a2, 4, 1, 1);
}

void MTLArchiveUsageDB::store(MTLVersionedDB *a1, UsagePayload *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  gettimeofday(&v11, 0);
  v10[1] = v11.tv_sec - a5;
  UsagePayload::UsagePayload((uint64_t)v12, a2, a3, a4);
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)v10, a1);
  if (v10[0]) {
    operator new();
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)v10);
}

void sub_18277FF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MTLArchiveUsageDB::prune(MTLArchiveUsageDB *this, uint64_t a2)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  gettimeofday(&v12, 0);
  tv_seCC_SHA256_CTX c = v12.tv_sec;
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v11, (MTLVersionedDB *)this);
  if (v11)
  {
    uint64_t v10 = 0;
    int v5 = mdb_cursor_open(v11, this->var1, &v10);
    if (v5)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = mdb_strerror(v5);
        MTLArchiveUsageDB::prune((uint64_t)v6, (uint8_t *)buf);
      }
    }
    else
    {
      int v7 = mdb_cursor_get(v10, buf, v9, 0);
      unint64_t v8 = tv_sec - a2;
      while (v7 != -30798)
      {
        if (*(void *)buf[1] < v8) {
          mdb_cursor_del(v10, 32);
        }
        int v7 = mdb_cursor_get(v10, buf, v9, 11);
      }
    }
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v11);
}

void sub_1827800AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)va);
  _Unwind_Resume(a1);
}

uint64_t MTLArchiveUsageDB::getPrioritizedList@<X0>(MTLArchiveUsageDB *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  int v25 = 1065353216;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v22, (MTLVersionedDB *)this);
  if (v22)
  {
    uint64_t v21 = 0;
    int v4 = mdb_cursor_open(v22, this->var1, &v21);
    if (v4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v5 = mdb_strerror(v4);
        MTLArchiveUsageDB::prune((uint64_t)v5, (uint8_t *)__dst);
      }
    }
    else
    {
      for (int i = mdb_cursor_get(v21, v20, v19, 0); i != -30798; int i = mdb_cursor_get(v21, v20, v19, 8))
      {
        if (!MTLVersionedDB::isVersionEntry((uint64_t)this, v20[0], (char *)v20[1]))
        {
          size_t v7 = 0;
          size_t v8 = v19[0];
          size_t v28 = 0;
          char v29 = 0;
          if (v19[0] - 1033 >= 0xFFFFFFFFFFFFFBFFLL)
          {
            memcpy(__dst, (const void *)v19[1], v19[0]);
            size_t v7 = v8 - 8;
            size_t v28 = v8 - 8;
            char v29 = 1;
          }
          std::string::basic_string[abi:ne180100](&v26, &__dst[0].__r_.__value_.__r.__words[1], v7);
          std::string __p = v26;
          std::string::size_type v18 = __dst[0].__r_.__value_.__r.__words[0];
          v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          BOOL v9 = std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<std::string,unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,unsigned int,unsigned int>&&>,std::tuple<>>((uint64_t)&v23, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v26);
          ++v9[12];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      memset(&__p, 0, sizeof(__p));
      unint64_t v10 = 0;
      if ((void)v24)
      {
        uint64_t v11 = (void *)v24;
        do
        {
          ++v10;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__init_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>>(&__p, (uint64_t *)v24, 0, v10);
      unint64_t v12 = 126
          - 2
          * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0]) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      std::__introsort<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,false>(__p.__r_.__value_.__r.__words[0], (void *)__p.__r_.__value_.__l.__size_, v13, 1);
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      for (uint64_t j = (long long *)__p.__r_.__value_.__r.__words[0]; j != (long long *)size; uint64_t j = (long long *)((char *)j + 40))
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,unsigned int,unsigned int>::__tuple_impl(__dst, j);
        std::vector<std::tuple<std::string,unsigned int,unsigned int>>::push_back[abi:ne180100](a2, (long long *)__dst);
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst[0].__r_.__value_.__l.__data_);
        }
      }
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
    }
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v22);
  return std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)&v23);
}

void sub_182780368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
}

void __clang_call_terminate(void *a1)
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E521F728, MEMORY[0x1E4FBA1C8]);
}

void sub_182780458(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void *std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::tuple<std::string,unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,unsigned int,unsigned int>&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v31, a2);
  uint64_t v9 = *(unsigned int *)(a2 + 28);
  uint64_t v10 = v8 ^ (2 * *(unsigned int *)(a2 + 24));
  unint64_t v11 = v10 ^ (4 * v9);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = v10 ^ (4 * v9);
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (int i = *v15; i; int i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>((uint64_t)v31, (unsigned __int8 *)i + 16, (unsigned __int8 *)a2)&& *((_DWORD *)i + 10) == *(_DWORD *)(a2 + 24)&& *((_DWORD *)i + 11) == *(_DWORD *)(a2 + 28))
          {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::string::size_type v18 = (void *)(a1 + 16);
  int i = operator new(0x38uLL);
  uint64_t v32 = a1 + 16;
  *(void *)int i = 0;
  *((void *)i + 1) = v11;
  unsigned int v19 = *a4;
  long long v20 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v20;
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *(void *)unsigned int v19 = 0;
  *((_DWORD *)i + 10) = *((_DWORD *)v19 + 6);
  *((_DWORD *)i + 11) = *((_DWORD *)v19 + 7);
  *((_DWORD *)i + 12) = 0;
  char v33 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    BOOL v23 = 1;
    if (v12 >= 3) {
      BOOL v23 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v12);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v26);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
      else {
        uint64_t v4 = v11;
      }
    }
    else
    {
      uint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v27 = *(void *)a1;
  size_t v28 = *(void **)(*(void *)a1 + 8 * v4);
  if (v28)
  {
    *(void *)int i = *v28;
LABEL_40:
    *size_t v28 = i;
    goto LABEL_41;
  }
  *(void *)int i = *v18;
  *std::string::size_type v18 = i;
  *(void *)(v27 + 8 * v4) = v18;
  if (*(void *)i)
  {
    unint64_t v29 = *(void *)(*(void *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v29 >= v12) {
        v29 %= v12;
      }
    }
    else
    {
      v29 &= v12 - 1;
    }
    size_t v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_182780768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__init_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>>(std::string *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1827807EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *> *>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,unsigned int,unsigned int>::__tuple_impl(v4, v6 + 1);
      LODWORD(v4[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)v6 + 12);
      uint64_t v6 = *(long long **)v6;
      uint64_t v4 = (std::string *)((char *)v11 + 40);
      uint64_t v11 = (std::string *)((char *)v11 + 40);
    }
    while (v6 != (long long *)a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1827808A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,unsigned int,unsigned int>::__tuple_impl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = *((_DWORD *)a2 + 7);
  return this;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 17) < 0) {
      operator delete(*(void **)(v1 - 40));
    }
    v1 -= 40;
  }
}

void std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

void std::__introsort<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,false>(unint64_t a1, void *a2, uint64_t a3, char a4)
{
  while (2)
  {
    int64_t v111 = (long long *)(a2 - 10);
    int64_t v112 = (long long *)(a2 - 5);
    BOOL v110 = (long long *)(a2 - 15);
    unint64_t v9 = a1;
    unint64_t v118 = (unint64_t)a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v9;
          uint64_t v10 = (uint64_t)a2 - v9;
          uint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((_DWORD *)a2 - 2) > *(_DWORD *)(a1 + 32))
                {
                  uint64_t v135 = *(void *)(a1 + 16);
                  long long v127 = *(_OWORD *)a1;
                  long long v54 = *(_OWORD *)(a2 - 5);
                  *(void *)(a1 + 16) = *(a2 - 3);
                  *(_OWORD *)a1 = v54;
                  *(a2 - 3) = v135;
                  *(_OWORD *)(a2 - 5) = v127;
                  int v55 = *(_DWORD *)(a1 + 24);
                  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 4);
                  *((_DWORD *)a2 - 4) = v55;
                  int v56 = *(_DWORD *)(a1 + 28);
                  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 - 3);
                  *((_DWORD *)a2 - 3) = v56;
                  int v57 = *(_DWORD *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v57;
                }
                break;
              case 3:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)a1, (long long *)(a1 + 40), v112);
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(a1, a1 + 40, a1 + 80, (uint64_t)v112);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,0>((__n128 *)a1, (__n128 *)(a1 + 40), (__n128 *)(a1 + 80), (__n128 *)(a1 + 120), (__n128 *)v112);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 959)
          {
            uint64_t v58 = (void *)(a1 + 40);
            BOOL v60 = (void *)a1 == a2 || v58 == a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                unint64_t v62 = a1;
                do
                {
                  size_t v63 = v58;
                  unsigned int v64 = *(_DWORD *)(v62 + 72);
                  if (v64 > *(_DWORD *)(v62 + 32))
                  {
                    uint64_t v65 = *v58;
                    *(void *)int v128 = *(void *)(v62 + 48);
                    *(void *)&v128[7] = *(void *)(v62 + 55);
                    char v66 = *(unsigned char *)(v62 + 63);
                    v58[1] = 0;
                    v58[2] = 0;
                    *uint64_t v58 = 0;
                    uint64_t v67 = *(void *)(v62 + 64);
                    uint64_t v68 = v61;
                    while (1)
                    {
                      uint64_t v69 = a1 + v68;
                      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + v68 + 40, (__n128 *)(a1 + v68));
                      *(_DWORD *)(a1 + v68 + 72) = *(_DWORD *)(a1 + v68 + 32);
                      if (!v68) {
                        break;
                      }
                      v68 -= 40;
                      if (v64 <= *(_DWORD *)(v69 - 8))
                      {
                        uint64_t v70 = a1 + v68 + 40;
                        goto LABEL_86;
                      }
                    }
                    uint64_t v70 = a1;
LABEL_86:
                    if (*(char *)(v70 + 23) < 0) {
                      operator delete(*(void **)v70);
                    }
                    *(void *)uint64_t v70 = v65;
                    *(void *)(v70 + 8) = *(void *)v128;
                    *(void *)(v70 + 15) = *(void *)&v128[7];
                    *(unsigned char *)(v70 + 23) = v66;
                    *(void *)(v70 + 24) = v67;
                    *(_DWORD *)(v70 + 32) = v64;
                  }
                  uint64_t v58 = v63 + 5;
                  v61 += 40;
                  unint64_t v62 = (unint64_t)v63;
                }
                while (v63 + 5 != (void *)v118);
              }
            }
            else if (!v60)
            {
              unint64_t v101 = (unsigned int *)(a1 + 72);
              do
              {
                unint64_t v102 = v58;
                unsigned int v103 = *(_DWORD *)(a1 + 72);
                if (v103 > *(_DWORD *)(a1 + 32))
                {
                  uint64_t v104 = *v58;
                  *(void *)int v131 = *(void *)(a1 + 48);
                  *(void *)&v131[7] = *(void *)(a1 + 55);
                  char v105 = *(unsigned char *)(a1 + 63);
                  v58[1] = 0;
                  v58[2] = 0;
                  *uint64_t v58 = 0;
                  uint64_t v106 = *(void *)(a1 + 64);
                  unint64_t v107 = v101;
                  do
                  {
                    unint64_t v108 = v107;
                    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>((uint64_t)(v107 - 8), (__n128 *)(v107 - 18));
                    unsigned int v109 = *(v107 - 10);
                    v107 -= 10;
                    *unint64_t v108 = v109;
                  }
                  while (v103 > *(v108 - 20));
                  if (*((char *)v107 - 9) < 0) {
                    operator delete(*((void **)v107 - 4));
                  }
                  *((void *)v107 - 4) = v104;
                  *(void *)((char *)v107 - 17) = *(void *)&v131[7];
                  *((void *)v107 - 3) = *(void *)v131;
                  *((unsigned char *)v107 - 9) = v105;
                  *((void *)v107 - 1) = v106;
                  *unint64_t v107 = v103;
                }
                uint64_t v58 = v102 + 5;
                v101 += 10;
                a1 = (unint64_t)v102;
              }
              while (v102 + 5 != (void *)v118);
            }
            return;
          }
          if (!a3)
          {
            if ((void *)a1 != a2)
            {
              int64_t v71 = (unint64_t)(v11 - 2) >> 1;
              int64_t v72 = v71;
              do
              {
                int64_t v73 = v72;
                if (v71 >= v72)
                {
                  uint64_t v74 = (2 * v72) | 1;
                  uint64_t v75 = (__n128 *)(a1 + 40 * v74);
                  if (2 * v73 + 2 < v11)
                  {
                    BOOL v76 = *(_DWORD *)(a1 + 40 * v74 + 32) > v75[4].n128_u32[2];
                    uint64_t v75 = (__n128 *)((char *)v75 + 40 * v76);
                    if (v76) {
                      uint64_t v74 = 2 * v73 + 2;
                    }
                  }
                  unsigned __int32 v77 = *(_DWORD *)(a1 + 40 * v73 + 32);
                  if (v75[2].n128_u32[0] <= v77)
                  {
                    long long v78 = (__n128 *)(a1 + 40 * v73);
                    unint64_t v116 = v78->n128_u64[0];
                    *(void *)&v129[7] = *(unint64_t *)((char *)&v78->n128_u64[1] + 7);
                    *(void *)unint64_t v129 = v78->n128_u64[1];
                    unsigned __int8 v113 = v78[1].n128_u8[7];
                    v78->n128_u64[0] = 0;
                    v78->n128_u64[1] = 0;
                    v78[1].n128_u64[0] = 0;
                    unint64_t v79 = v78[1].n128_u64[1];
                    do
                    {
                      uint64_t v80 = (uint64_t)v78;
                      long long v78 = v75;
                      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v80, v75);
                      *(_DWORD *)(v80 + 32) = v78[2].n128_u32[0];
                      if (v71 < v74) {
                        break;
                      }
                      uint64_t v81 = (2 * v74) | 1;
                      uint64_t v75 = (__n128 *)(a1 + 40 * v81);
                      if (2 * v74 + 2 < v11)
                      {
                        BOOL v76 = *(_DWORD *)(a1 + 40 * v81 + 32) > v75[4].n128_u32[2];
                        uint64_t v75 = (__n128 *)((char *)v75 + 40 * v76);
                        if (v76) {
                          uint64_t v81 = 2 * v74 + 2;
                        }
                      }
                      uint64_t v74 = v81;
                    }
                    while (v75[2].n128_u32[0] <= v77);
                    if (v78[1].n128_i8[7] < 0) {
                      operator delete((void *)v78->n128_u64[0]);
                    }
                    v78->n128_u64[0] = v116;
                    v78->n128_u64[1] = *(void *)v129;
                    *(unint64_t *)((char *)&v78->n128_u64[1] + 7) = *(void *)&v129[7];
                    v78[1].n128_u8[7] = v113;
                    v78[1].n128_u64[1] = v79;
                    v78[2].n128_u32[0] = v77;
                  }
                }
                int64_t v72 = v73 - 1;
              }
              while (v73);
              int64_t v82 = v10 / 0x28uLL;
              uint64_t v83 = (void **)v118;
              do
              {
                uint64_t v84 = 0;
                unint64_t v117 = *(void **)a1;
                uint64_t v85 = v83;
                *(void *)size_t v123 = *(void *)(a1 + 8);
                *(void *)&v123[7] = *(void *)(a1 + 15);
                char v119 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                int v86 = *(_DWORD *)(a1 + 24);
                int v114 = *(_DWORD *)(a1 + 28);
                uint64_t v87 = a1;
                int v88 = *(_DWORD *)(a1 + 32);
                do
                {
                  uint64_t v89 = v84 + 1;
                  uint64_t v90 = v87 + 40 * (v84 + 1);
                  uint64_t v91 = (2 * v84) | 1;
                  uint64_t v92 = 2 * v84 + 2;
                  if (v92 < v82)
                  {
                    unsigned int v93 = *(_DWORD *)(v87 + 40 * v89 + 32);
                    unsigned int v94 = *(_DWORD *)(v90 + 72);
                    v90 += 40 * (v93 > v94);
                    if (v93 > v94) {
                      uint64_t v91 = v92;
                    }
                  }
                  std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v87, (__n128 *)v90);
                  *(_DWORD *)(v87 + 32) = *(_DWORD *)(v90 + 32);
                  uint64_t v87 = v90;
                  uint64_t v84 = v91;
                }
                while (v91 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
                v83 -= 5;
                if ((void **)v90 == v85 - 5)
                {
                  if (*(char *)(v90 + 23) < 0) {
                    operator delete(*(void **)v90);
                  }
                  *(void *)uint64_t v90 = v117;
                  *(void *)(v90 + 8) = *(void *)v123;
                  *(void *)(v90 + 15) = *(void *)&v123[7];
                  *(unsigned char *)(v90 + 23) = v119;
                  *(_DWORD *)(v90 + 24) = v86;
                  *(_DWORD *)(v90 + 28) = v114;
                  *(_DWORD *)(v90 + 32) = v88;
                }
                else
                {
                  std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v90, (__n128 *)(v85 - 5));
                  *(_DWORD *)(v90 + 32) = *((_DWORD *)v85 - 2);
                  if (*((char *)v85 - 17) < 0) {
                    operator delete(*v83);
                  }
                  *(v85 - 5) = v117;
                  *(void **)((char *)v85 - 25) = *(void **)&v123[7];
                  *(v85 - 4) = *(void **)v123;
                  *((unsigned char *)v85 - 17) = v119;
                  *((_DWORD *)v85 - 4) = v86;
                  *((_DWORD *)v85 - 3) = v114;
                  *((_DWORD *)v85 - 2) = v88;
                  uint64_t v95 = v90 + 40 - a1;
                  if (v95 >= 41)
                  {
                    unint64_t v96 = (v95 / 0x28uLL - 2) >> 1;
                    unsigned int v97 = *(_DWORD *)(v90 + 32);
                    if (*(_DWORD *)(a1 + 40 * v96 + 32) > v97)
                    {
                      uint64_t v98 = *(void **)v90;
                      *(void *)unint64_t v130 = *(void *)(v90 + 8);
                      *(void *)&v130[7] = *(void *)(v90 + 15);
                      char v120 = *(unsigned char *)(v90 + 23);
                      *(void *)(v90 + 8) = 0;
                      *(void *)(v90 + 16) = 0;
                      *(void *)uint64_t v90 = 0;
                      uint64_t v99 = *(void *)(v90 + 24);
                      do
                      {
                        uint64_t v100 = v90;
                        uint64_t v90 = a1 + 40 * v96;
                        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v100, (__n128 *)v90);
                        *(_DWORD *)(v100 + 32) = *(_DWORD *)(v90 + 32);
                        if (!v96) {
                          break;
                        }
                        unint64_t v96 = (v96 - 1) >> 1;
                      }
                      while (*(_DWORD *)(a1 + 40 * v96 + 32) > v97);
                      if (*(char *)(v90 + 23) < 0) {
                        operator delete(*(void **)v90);
                      }
                      *(void *)uint64_t v90 = v98;
                      *(void *)(v90 + 15) = *(void *)&v130[7];
                      *(void *)(v90 + 8) = *(void *)v130;
                      *(unsigned char *)(v90 + 23) = v120;
                      *(void *)(v90 + 24) = v99;
                      *(_DWORD *)(v90 + 32) = v97;
                    }
                  }
                }
                BOOL v76 = v82-- <= 2;
              }
              while (!v76);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          unint64_t v13 = a1 + 40 * ((unint64_t)v11 >> 1);
          if ((unint64_t)v10 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)v13, (long long *)a1, v112);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)a1, (long long *)v13, v112);
            uint64_t v14 = 5 * v12;
            unint64_t v15 = a1 + 8 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)(a1 + 40), (long long *)(v15 - 40), v111);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)(a1 + 80), (long long *)(a1 + 40 + 8 * v14), v110);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)(v15 - 40), (long long *)v13, (long long *)(a1 + 40 + 8 * v14));
            uint64_t v132 = *(void *)(a1 + 16);
            long long v124 = *(_OWORD *)a1;
            uint64_t v16 = *(void *)(v13 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(void *)(a1 + 16) = v16;
            *(void *)(v13 + 16) = v132;
            *(_OWORD *)unint64_t v13 = v124;
            uint64_t v17 = *(void *)(a1 + 24);
            *(void *)(a1 + 24) = *(void *)(v13 + 24);
            *(void *)(v13 + 24) = v17;
            LODWORD(v16) = *(_DWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v15 + 32);
            *(_DWORD *)(v15 + 32) = v16;
          }
          --a3;
          a2 = (void *)v118;
          if (a4) {
            break;
          }
          unsigned int v18 = *(_DWORD *)(a1 + 32);
          if (*(_DWORD *)(a1 - 8) > v18) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          *(void *)int v122 = *(void *)(a1 + 8);
          *(void *)&v122[7] = *(void *)(a1 + 15);
          char v39 = *(unsigned char *)(a1 + 23);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (v18 <= *(_DWORD *)(v118 - 8))
          {
            unint64_t v42 = a1 + 40;
            do
            {
              unint64_t v9 = v42;
              if (v42 >= v118) {
                break;
              }
              unsigned int v43 = *(_DWORD *)(v42 + 32);
              v42 += 40;
            }
            while (v18 <= v43);
          }
          else
          {
            unint64_t v40 = a1;
            do
            {
              unint64_t v9 = v40 + 40;
              unsigned int v41 = *(_DWORD *)(v40 + 72);
              v40 += 40;
            }
            while (v18 <= v41);
          }
          unint64_t v44 = v118;
          if (v9 < v118)
          {
            unint64_t v45 = v118;
            do
            {
              unint64_t v44 = v45 - 40;
              unsigned int v46 = *(_DWORD *)(v45 - 8);
              v45 -= 40;
            }
            while (v18 > v46);
          }
          uint64_t v47 = *(void *)(a1 + 24);
          while (v9 < v44)
          {
            uint64_t v134 = *(void *)(v9 + 16);
            long long v126 = *(_OWORD *)v9;
            long long v48 = *(_OWORD *)v44;
            *(void *)(v9 + 16) = *(void *)(v44 + 16);
            *(_OWORD *)unint64_t v9 = v48;
            *(void *)(v44 + 16) = v134;
            *(_OWORD *)unint64_t v44 = v126;
            int v49 = *(_DWORD *)(v9 + 24);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v44 + 24);
            *(_DWORD *)(v44 + 24) = v49;
            int v50 = *(_DWORD *)(v9 + 28);
            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v44 + 28);
            *(_DWORD *)(v44 + 28) = v50;
            int v51 = *(_DWORD *)(v9 + 32);
            *(_DWORD *)(v9 + 32) = *(_DWORD *)(v44 + 32);
            *(_DWORD *)(v44 + 32) = v51;
            do
            {
              unsigned int v52 = *(_DWORD *)(v9 + 72);
              v9 += 40;
            }
            while (v18 <= v52);
            do
            {
              unsigned int v53 = *(_DWORD *)(v44 - 8);
              v44 -= 40;
            }
            while (v18 > v53);
          }
          BOOL v4 = v9 - 40 >= a1;
          BOOL v5 = v9 - 40 == a1;
          if (v9 - 40 != a1)
          {
            std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1, (__n128 *)(v9 - 40));
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v9 - 8);
          }
          if (*(char *)(v9 - 17) < 0) {
            operator delete(*(void **)(v9 - 40));
          }
          a4 = 0;
          *(void *)(v9 - 40) = v38;
          *(void *)(v9 - 25) = *(void *)&v122[7];
          *(void *)(v9 - 32) = *(void *)v122;
          *(unsigned char *)(v9 - 17) = v39;
          *(void *)(v9 - 16) = v47;
          *(_DWORD *)(v9 - 8) = v18;
        }
        unsigned int v18 = *(_DWORD *)(a1 + 32);
LABEL_12:
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)a1;
        *(void *)unint64_t v121 = *(void *)(a1 + 8);
        *(void *)&v121[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = *(void *)(a1 + 24);
        do
        {
          unsigned int v23 = *(_DWORD *)(a1 + v19 + 72);
          v19 += 40;
        }
        while (v23 > v18);
        unint64_t v24 = a1 + v19;
        unint64_t v25 = v118;
        if (v19 == 40)
        {
          unint64_t v28 = v118;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            unsigned int v29 = *(_DWORD *)(v28 - 8);
            v28 -= 40;
            if (v29 > v18) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            unsigned int v27 = *(_DWORD *)(v25 - 8);
            v25 -= 40;
          }
          while (v27 <= v18);
        }
LABEL_22:
        unint64_t v9 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v133 = *(void *)(v9 + 16);
            long long v125 = *(_OWORD *)v9;
            long long v31 = *(_OWORD *)v30;
            *(void *)(v9 + 16) = *(void *)(v30 + 16);
            *(_OWORD *)unint64_t v9 = v31;
            *(void *)(v30 + 16) = v133;
            *(_OWORD *)unint64_t v30 = v125;
            int v32 = *(_DWORD *)(v9 + 24);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v30 + 24);
            *(_DWORD *)(v30 + 24) = v32;
            int v33 = *(_DWORD *)(v9 + 28);
            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v30 + 28);
            *(_DWORD *)(v30 + 28) = v33;
            int v34 = *(_DWORD *)(v9 + 32);
            *(_DWORD *)(v9 + 32) = *(_DWORD *)(v30 + 32);
            *(_DWORD *)(v30 + 32) = v34;
            do
            {
              unsigned int v35 = *(_DWORD *)(v9 + 72);
              v9 += 40;
            }
            while (v35 > v18);
            do
            {
              unsigned int v36 = *(_DWORD *)(v30 - 8);
              v30 -= 40;
            }
            while (v36 <= v18);
          }
          while (v9 < v30);
        }
        if (v9 - 40 != a1)
        {
          std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1, (__n128 *)(v9 - 40));
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v9 - 8);
        }
        if (*(char *)(v9 - 17) < 0) {
          operator delete(*(void **)(v9 - 40));
        }
        *(void *)(v9 - 40) = v20;
        *(void *)(v9 - 25) = *(void *)&v121[7];
        *(void *)(v9 - 32) = *(void *)v121;
        *(unsigned char *)(v9 - 17) = v21;
        *(void *)(v9 - 16) = v22;
        *(_DWORD *)(v9 - 8) = v18;
        if (v24 >= v26) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,false>(a1, v9 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(a1, v9 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(v9, v118))
      {
        break;
      }
      if (!v37) {
        goto LABEL_35;
      }
    }
    a2 = (void *)(v9 - 40);
    if (!v37) {
      continue;
    }
    break;
  }
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,0>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5[2].n128_u32[0] > a4[2].n128_u32[0])
  {
    unint64_t v11 = a4[1].n128_u64[0];
    __n128 result = *a4;
    unint64_t v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    LODWORD(v11) = a4[1].n128_u32[2];
    a4[1].n128_u32[2] = a5[1].n128_u32[2];
    a5[1].n128_u32[2] = v11;
    LODWORD(v11) = a4[1].n128_u32[3];
    a4[1].n128_u32[3] = a5[1].n128_u32[3];
    a5[1].n128_u32[3] = v11;
    LODWORD(v11) = a4[2].n128_u32[0];
    a4[2].n128_u32[0] = a5[2].n128_u32[0];
    a5[2].n128_u32[0] = v11;
    if (a4[2].n128_u32[0] > a3[2].n128_u32[0])
    {
      unint64_t v13 = a3[1].n128_u64[0];
      __n128 result = *a3;
      unint64_t v14 = a4[1].n128_u64[0];
      *a3 = *a4;
      a3[1].n128_u64[0] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      LODWORD(v13) = a3[1].n128_u32[2];
      a3[1].n128_u32[2] = a4[1].n128_u32[2];
      a4[1].n128_u32[2] = v13;
      LODWORD(v13) = a3[1].n128_u32[3];
      a3[1].n128_u32[3] = a4[1].n128_u32[3];
      a4[1].n128_u32[3] = v13;
      LODWORD(v13) = a3[2].n128_u32[0];
      a3[2].n128_u32[0] = a4[2].n128_u32[0];
      a4[2].n128_u32[0] = v13;
      if (a3[2].n128_u32[0] > a2[2].n128_u32[0])
      {
        unint64_t v15 = a2[1].n128_u64[0];
        __n128 result = *a2;
        unint64_t v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        LODWORD(v15) = a2[1].n128_u32[2];
        a2[1].n128_u32[2] = a3[1].n128_u32[2];
        a3[1].n128_u32[2] = v15;
        LODWORD(v15) = a2[1].n128_u32[3];
        a2[1].n128_u32[3] = a3[1].n128_u32[3];
        a3[1].n128_u32[3] = v15;
        LODWORD(v15) = a2[2].n128_u32[0];
        a2[2].n128_u32[0] = a3[2].n128_u32[0];
        a3[2].n128_u32[0] = v15;
        if (a2[2].n128_u32[0] > a1[2].n128_u32[0])
        {
          unint64_t v17 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
          LODWORD(v17) = a1[1].n128_u32[2];
          a1[1].n128_u32[2] = a2[1].n128_u32[2];
          a2[1].n128_u32[2] = v17;
          LODWORD(v17) = a1[1].n128_u32[3];
          a1[1].n128_u32[3] = a2[1].n128_u32[3];
          a2[1].n128_u32[3] = v17;
          LODWORD(v17) = a1[2].n128_u32[0];
          a1[2].n128_u32[0] = a2[2].n128_u32[0];
          a2[2].n128_u32[0] = v17;
        }
      }
    }
  }
  return result;
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(long long *result, long long *a2, long long *a3)
{
  uint64_t v3 = (int *)(a2 + 2);
  unsigned int v4 = *((_DWORD *)a2 + 8);
  BOOL v5 = (int *)(result + 2);
  unsigned int v6 = *((_DWORD *)a3 + 8);
  if (v4 > *((_DWORD *)result + 8))
  {
    if (v6 <= v4)
    {
      uint64_t v18 = *((void *)result + 2);
      long long v19 = *result;
      uint64_t v20 = *((void *)a2 + 2);
      *__n128 result = *a2;
      *((void *)result + 2) = v20;
      *a2 = v19;
      *((void *)a2 + 2) = v18;
      LODWORD(v18) = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v18;
      size_t v7 = (int *)a2 + 7;
      int v21 = *((_DWORD *)result + 7);
      *((_DWORD *)result + 7) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = v21;
      LODWORD(v18) = *((_DWORD *)result + 8);
      *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = v18;
      if (*((_DWORD *)a3 + 8) <= v18) {
        return result;
      }
      uint64_t v22 = *((void *)a2 + 2);
      long long v23 = *a2;
      uint64_t v24 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v24;
      *a3 = v23;
      *((void *)a3 + 2) = v22;
      LODWORD(v22) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v22;
      unint64_t v11 = (int *)a3 + 7;
      BOOL v5 = (int *)(a2 + 2);
    }
    else
    {
      size_t v7 = (int *)result + 7;
      uint64_t v8 = *((void *)result + 2);
      long long v9 = *result;
      uint64_t v10 = *((void *)a3 + 2);
      *__n128 result = *a3;
      *((void *)result + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      LODWORD(v8) = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v8;
      unint64_t v11 = (int *)a3 + 7;
    }
    uint64_t v3 = (int *)(a3 + 2);
    goto LABEL_10;
  }
  if (v6 > v4)
  {
    uint64_t v12 = *((void *)a2 + 2);
    long long v13 = *a2;
    uint64_t v14 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v14;
    *a3 = v13;
    *((void *)a3 + 2) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v12;
    unint64_t v11 = (int *)a2 + 7;
    LODWORD(v12) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
    *((_DWORD *)a3 + 8) = v12;
    if (*((_DWORD *)a2 + 8) > *v5)
    {
      uint64_t v15 = *((void *)result + 2);
      long long v16 = *result;
      uint64_t v17 = *((void *)a2 + 2);
      *__n128 result = *a2;
      *((void *)result + 2) = v17;
      *a2 = v16;
      *((void *)a2 + 2) = v15;
      LODWORD(v15) = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v15;
      size_t v7 = (int *)result + 7;
LABEL_10:
      int v25 = *v7;
      *size_t v7 = *v11;
      *unint64_t v11 = v25;
      int v26 = *v5;
      *BOOL v5 = *v3;
      int *v3 = v26;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 32))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(void *)(a2 - 24) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *,0>((__n128 *)a1, (__n128 *)(a1 + 40), (__n128 *)(a1 + 80), (__n128 *)(a1 + 120), (__n128 *)(a2 - 40));
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v10 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unsigned int v13 = *(_DWORD *)(v10 + 32);
    if (v13 > *(_DWORD *)(v9 + 32))
    {
      uint64_t v14 = *(void *)v10;
      *(void *)uint64_t v20 = *(void *)(v10 + 8);
      *(void *)&v20[7] = *(void *)(v10 + 15);
      char v15 = *(unsigned char *)(v10 + 23);
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      uint64_t v16 = *(void *)(v10 + 24);
      uint64_t v17 = v11;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + v17 + 120, (__n128 *)(a1 + v17 + 80));
        *(_DWORD *)(a1 + v17 + 152) = *(_DWORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v13 <= *(_DWORD *)(v18 + 72))
        {
          uint64_t v19 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      if (*(char *)(v19 + 23) < 0) {
        operator delete(*(void **)v19);
      }
      *(void *)uint64_t v19 = v14;
      *(void *)(v19 + 8) = *(void *)v20;
      *(void *)(v19 + 15) = *(void *)&v20[7];
      *(unsigned char *)(v19 + 23) = v15;
      *(void *)(v19 + 24) = v16;
      *(_DWORD *)(v19 + 32) = v13;
      if (++v12 == 8) {
        return v10 + 40 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 40;
    v10 += 40;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLArchiveUsageDB::getPrioritizedList(void)::$_0 &,std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int> *>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)(a4 + 32) > *(_DWORD *)(a3 + 32))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
    *(_DWORD *)(a4 + 28) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
    *(_DWORD *)(a4 + 32) = v9;
    if (*(_DWORD *)(a3 + 32) > *(_DWORD *)(a2 + 32))
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(a3 + 28) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      *(_DWORD *)(a3 + 32) = v11;
      if (*(_DWORD *)(a2 + 32) > *(_DWORD *)(a1 + 32))
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(_DWORD *)(a2 + 28) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a2 + 32) = v13;
      }
    }
  }
  return result;
}

__n128 std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(uint64_t a1, __n128 *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  __n128 result = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  *(_DWORD *)(a1 + 24) = a2[1].n128_u32[2];
  *(_DWORD *)(a1 + 28) = a2[1].n128_u32[3];
  return result;
}

uint64_t std::vector<std::tuple<std::string,unsigned int,unsigned int>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    char v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    long long v16 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v15 = v16;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *((_DWORD *)v15 + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)v15 + 7) = *((_DWORD *)a2 + 7);
    v17[2] = v15 + 32;
    std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a2 + 6);
    *(_DWORD *)(v7 + 28) = *((_DWORD *)a2 + 7);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_182781F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,unsigned int,unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      *(_DWORD *)(v8 - 4) = *(_DWORD *)(a3 - 4);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

void *_MTLEncodeLinkingInfo(const void *a1, size_t a2, const void *a3, size_t a4, uint64_t a5, size_t *a6)
{
  uint64_t v12 = a2 + (((_BYTE)a2 - 1) & 7) + 40;
  size_t v13 = v12 + a4;
  long long v14 = malloc_type_malloc(v12 + a4, 0xD0CBB0BAuLL);
  *(void *)a5 = v14;
  *long long v14 = 0x1464E4958;
  v14[1] = 40;
  _OWORD v14[2] = a2;
  v14[3] = v12;
  v14[4] = a4;
  memcpy((void *)(*(void *)a5 + 40), a1, a2);
  uint64_t result = memcpy((void *)(*(void *)a5 + v12), a3, a4);
  *a6 = v13;
  return result;
}

BOOL _MTLDecodeLinkingInfo(int *a1, void *a2, void *a3, void *a4, void *a5)
{
  int v5 = *a1;
  if (*a1 == 1179535704)
  {
    uint64_t v6 = *((void *)a1 + 2);
    *a2 = *((void *)a1 + 1);
    *a3 = v6;
    uint64_t v7 = *((void *)a1 + 4);
    *a4 = *((void *)a1 + 3);
    *a5 = v7;
  }
  return v5 == 1179535704;
}

BOOL MTLIOCommandList::isEmpty(MTLIOCommandList *this)
{
  return this->var3 == this->var2;
}

BOOL MTLIOCommandList::isComplete(MTLIOCommandList *this)
{
  BOOL v1 = this->var3 == this->var2 && this->var4 == 0;
  return this->var7 && v1;
}

BOOL MTLIOCommandList::isCommitted(MTLIOCommandList *this)
{
  return this->var7;
}

BOOL MTLIOCommandList::isBlocked(MTLIOCommandList *this)
{
  if (!this->var7) {
    return 1;
  }
  unint64_t var3 = this->var3;
  int v2 = *((_DWORD *)this->var0 + 38 * var3);
  if (v2 == 2) {
    return !*((unsigned char *)this->var0 + 152 * var3 + 8);
  }
  return (v2 == 3 || v2 == 4) && this->var4;
}

BOOL MTLIOCommandList::isCancelled(MTLIOCommandList *this)
{
  return this->var6 && this->var4 == 0;
}

BOOL MTLIOCommandList::isFailed(MTLIOCommandList *this)
{
  return this->var8 && this->var4 == 0;
}

void MTLIOCommandList::~MTLIOCommandList(MTLIOCommandList *this)
{
  id var12 = this->var12;
  if (var12)
  {
    [var12 releaseAllObjectsAndReset];
    MTLResourceListRelease((void *)this->var12);
    this->id var12 = 0;
  }
  free(this->var0);
}

__n128 MTLIOCommandList::addCommand(MTLIOCommandList *this, MTLIOCommand *a2)
{
  unint64_t var1 = this->var1;
  unint64_t var2 = this->var2;
  var0 = this->var0;
  if (var2 >= var1)
  {
    var0 = (MTLIOCommand *)malloc_type_realloc(var0, 2 * var1, 0xCD678FBCuLL);
    unint64_t var2 = this->var2;
    unint64_t v7 = 2 * this->var1;
    this->var0 = var0;
    this->unint64_t var1 = v7;
  }
  this->unint64_t var2 = var2 + 1;
  uint64_t v8 = (char *)var0 + 152 * var2;
  long long v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  long long v10 = *((_OWORD *)a2 + 2);
  long long v11 = *((_OWORD *)a2 + 3);
  long long v12 = *((_OWORD *)a2 + 5);
  *((_OWORD *)v8 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)v8 + 5) = v12;
  *((_OWORD *)v8 + 2) = v10;
  *((_OWORD *)v8 + 3) = v11;
  __n128 result = *((__n128 *)a2 + 6);
  long long v14 = *((_OWORD *)a2 + 7);
  long long v15 = *((_OWORD *)a2 + 8);
  *((void *)v8 + 18) = *((void *)a2 + 18);
  *((_OWORD *)v8 + 7) = v14;
  *((_OWORD *)v8 + 8) = v15;
  *((__n128 *)v8 + 6) = result;
  return result;
}

void MTLIOCommandList::cancel(MTLIOCommandList *this)
{
  p_id var5 = &this->var5;
  os_unfair_lock_lock(&this->var5);
  this->unsigned int var6 = 1;

  os_unfair_lock_unlock(p_var5);
}

void MTLIOCommandList::commit(MTLIOCommandList *this, _opaque_pthread_cond_t *a2)
{
  p_id var5 = &this->var5;
  os_unfair_lock_lock(&this->var5);
  this->var7 = 1;
  os_unfair_lock_unlock(p_var5);
  if (a2)
  {
    pthread_cond_broadcast(a2);
  }
}

_DWORD *MTLIOCommandList::popCommand(MTLIOCommandList *a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, void *a7)
{
  *a4 = 0;
  *a3 = 0;
  *a2 = 0;
  *a5 = 0;
  p_id var5 = &a1->var5;
  *a6 = 0;
  os_unfair_lock_lock(&a1->var5);
  while (2)
  {
    if (a1->var6 && !a1->var4)
    {
      long long v16 = 0;
      *a6 = 1;
    }
    else
    {
      unint64_t var3 = a1->var3;
      if (var3 == a1->var2)
      {
        long long v16 = 0;
        if (a1->var4) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = !a1->var7;
        }
        if (!v17) {
          *a3 = 1;
        }
        *a4 = 1;
      }
      else if (MTLIOCommandList::isBlocked(a1))
      {
        long long v16 = 0;
        *a2 = 1;
      }
      else
      {
        if (!a1->var8 || a1->var4)
        {
          var0 = a1->var0;
          long long v16 = (_DWORD *)((char *)a1->var0 + 152 * var3);
          switch(*v16)
          {
            case 0:
              if (!*((unsigned char *)var0 + 152 * var3 + 89)) {
                goto LABEL_23;
              }
              goto LABEL_21;
            case 1:
LABEL_21:
              if (!a1->var9)
              {
                uint64_t v18 = (void *)[a7 commandBuffer];
                a1->var9 = v18;
                a1->id var10 = (id)[v18 blitCommandEncoder];
                unint64_t var3 = a1->var3;
              }
              goto LABEL_23;
            case 2:
            case 4:
              goto LABEL_10;
            case 3:
              [*((id *)var0 + 19 * var3 + 1) setSignaledValue:*((void *)var0 + 19 * var3 + 2)];
              unint64_t var3 = a1->var3;
LABEL_10:
              a1->unint64_t var3 = var3 + 1;
              continue;
            default:
LABEL_23:
              ++a1->var4;
              a1->unint64_t var3 = var3 + 1;
              goto LABEL_24;
          }
        }
        long long v16 = 0;
        *a5 = 1;
      }
    }
    break;
  }
LABEL_24:
  os_unfair_lock_unlock(p_var5);
  return v16;
}

void MTLIOCommandList::completeIOCommand(MTLIOCommandList *this, MTLIOCommand *a2, _opaque_pthread_cond_t *a3, _opaque_pthread_mutex_t *a4, char a5)
{
  p_id var5 = &this->var5;
  os_unfair_lock_lock(&this->var5);
  if ((a5 & 1) == 0) {
    this->var8 = 1;
  }
  BOOL isBlocked = MTLIOCommandList::isBlocked(this);
  unsigned int v11 = this->var4 - 1;
  this->id var4 = v11;
  int v14 = this->var3 == this->var2 && this->var7 && v11 == 0 || isBlocked;
  if (v11) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v14 == 0;
  }
  if (v15) {
    goto LABEL_27;
  }
  id var9 = this->var9;
  if (!var9) {
    goto LABEL_27;
  }
  [var9 globalTraceObjectID];
  id var12 = this->var12;
  if (var12)
  {
    [var12 releaseAllObjectsAndReset];
    MTLResourceListRelease((void *)this->var12);
    this->id var12 = 0;
  }
  [this->var10 endEncoding];
  if (MTLTraceEnabled()) {
    kdebug_trace();
  }
  [this->var9 commit];
  this->id var4 = 1;
  id v18 = this->var9;
  this->id var9 = 0;
  this->id var10 = 0;
  os_unfair_lock_unlock(p_var5);
  if (v18)
  {
    [v18 waitUntilCompleted];
    os_unfair_lock_lock(p_var5);
    if ([v18 status] != 4) {
      this->var8 = 1;
    }
    if (MTLTraceEnabled()) {
      kdebug_trace();
    }
    this->id var4 = 0;
LABEL_27:
    os_unfair_lock_unlock(p_var5);
  }
  if (!v11)
  {
    pthread_mutex_lock(a4);
    pthread_cond_broadcast(a3);
    pthread_mutex_unlock(a4);
  }
}

uint64_t MTLIOCommandList::completeEventWait(MTLIOCommandList *this, MTLIOCommand *a2, _opaque_pthread_cond_t *a3, _opaque_pthread_mutex_t *a4)
{
  *((unsigned char *)a2 + 8) = 1;
  pthread_mutex_lock(a4);
  pthread_cond_broadcast(a3);

  return pthread_mutex_unlock(a4);
}

id MTLIOCommandList::getBlitCommandEncoder(MTLIOCommandList *this)
{
  return this->var10;
}

void MTLIOCommandList::MTLIOCommandList(MTLIOCommandList *this, MTLResourceListPool *a2)
{
  this->var0 = (MTLIOCommand *)malloc_type_malloc(0x980000uLL, 0x1082040126CB6D8uLL);
  this->unint64_t var1 = 0x10000;
  this->unint64_t var3 = 0;
  *(void *)&this->id var4 = 0;
  this->unint64_t var2 = 0;
  *(uint32_t *)((char *)&this->var5._os_unfair_lock_opaque + 3) = 0;
  this->id var9 = 0;
  this->id var10 = 0;
  this->unint64_t var11 = a2;
  this->id var12 = 0;
}

void sub_182782ED8(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A0C402173A0FFLL);
  _Unwind_Resume(a1);
}

char *std::vector<objc_object  {objcproto18MTLIOScratchBuffer}*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<objc_object  {objcproto18MTLIOScratchBuffer}*>,objc_object  {objcproto18MTLIOScratchBuffer}*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    size_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      id v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v9, v17);
    }
    else {
      id v18 = 0;
    }
    unint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    int v34 = v28;
    unsigned int v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    unint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)unint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    unsigned int v35 = v30;
    int v5 = std::vector<objc_object  {objcproto18MTLIOScratchBuffer}*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    int v21 = &__src[8 * a5];
    long long v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    int v25 = &v23[-8 * a5];
    int v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      int v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)int v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  int v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  long long v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_18278467C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<objc_object  {objcproto18MTLIOScratchBuffer}*>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  int v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  size_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t tileColorAttachmentFormattedDescription(uint64_t a1, MTLTileRenderPipelineColorAttachmentDescriptor *a2)
{
  v4[3] = *MEMORY[0x1E4F143B8];
  if (a2) {
    int v2 = a2 + 1;
  }
  else {
    int v2 = 0;
  }
  v4[0] = [@"\n" stringByPaddingToLength:a1 + 4 withString:@" " startingAtIndex:0];
  v4[1] = @"pixelFormat =";
  _OWORD v4[2] = objc_msgSend(NSString, "stringWithUTF8String:", MTLPixelFormatGetName(LODWORD(v2->super.isa)), v4[0], @"pixelFormat =");
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v4, 3), "componentsJoinedByString:", @" ");
}

uint64_t _MTLDebugIgnorePrecompiledBinaries(void)
{
  if (_MTLDebugIgnorePrecompiledBinaries(void)::onceToken != -1) {
    dispatch_once(&_MTLDebugIgnorePrecompiledBinaries(void)::onceToken, &__block_literal_global);
  }
  return _MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries;
}

uint64_t _MTLDebugShouldLogKeys(void)
{
  if (_MTLDebugShouldLogKeys(void)::onceToken != -1) {
    dispatch_once(&_MTLDebugShouldLogKeys(void)::onceToken, &__block_literal_global_11);
  }
  return _MTLDebugShouldLogKeys(void)::shouldLogHashKeys;
}

BOOL MultiLevelCacheBase::failOnCacheMiss(MultiLevelCacheBase *this)
{
  return (*((unsigned char *)this + 32) & 5) != 0;
}

uint64_t MultiLevelCacheBase::addElement(MultiLevelCacheBase *this, const MTLHashKey *a2, const void *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 3);
  long long v4 = *(_OWORD *)&a2->var1.var0[16];
  v6[0] = *(_OWORD *)a2->var1.var0;
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *, const void *))(*(void *)v3 + 40))(v3, v6, a3);
}

uint64_t MultiLevelCacheBase::addElement(MultiLevelCacheBase *this, MTLBinaryKey *a2, const void *a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = [(MTLBinaryKey *)a2 value];
  long long v8 = *(_OWORD *)&v7->var0[16];
  v10[0] = *(_OWORD *)v7->var0;
  v10[1] = v8;
  return (*(uint64_t (**)(uint64_t, _OWORD *, const void *, uint64_t))(*(void *)v6 + 40))(v6, v10, a3, a4);
}

uint64_t MultiLevelCacheBase::addElement(uint64_t a1, _OWORD *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 24);
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 40))(v2, v5);
}

BOOL MultiLevelBinaryCache::initialize(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  if (_MTLDebugIgnorePrecompiledBinaries(void)::onceToken != -1) {
    dispatch_once(&_MTLDebugIgnorePrecompiledBinaries(void)::onceToken, &__block_literal_global);
  }
  if (_MTLDebugIgnorePrecompiledBinaries(void)::ignorePrecompiledBinaries) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  *(void *)(a1 + 40) = v10;
  if (_MTLDebugShouldLogKeys(void)::onceToken != -1) {
    dispatch_once(&_MTLDebugShouldLogKeys(void)::onceToken, &__block_literal_global_11);
  }
  *(unsigned char *)(a1 + 48) = _MTLDebugShouldLogKeys(void)::shouldLogHashKeys;

  return MultiLevelCacheBase::initialize(a1, a3, a4, a5);
}

uint64_t MultiLevelBinaryCache::getElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = [[MTLBinaryKey alloc] initWithHash:a2];
  uint64_t v10 = (*(uint64_t (**)(uint64_t, MTLBinaryKey *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, v9, a3, a4, a5);

  return v10;
}

BOOL MultiLevelAirntBinaryCache::initialize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  *(void *)(a1 + 56) = a3;
  return MultiLevelBinaryCache::initialize(a1, a2, a4, a5, a6);
}

BOOL MultiLevelAirntBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, dispatch_object_t *a3, dispatch_object_t *a4, uint64_t a5)
{
  uint64_t v7 = (void *)[*(id *)(a1 + 56) getBinaryDataForKey:a2 reflectionType:a5];
  long long v8 = v7;
  if (v7)
  {
    *a3 = (dispatch_object_t)[v7 data];
    *a4 = (dispatch_object_t)[v8 reflectionBlock];
    dispatch_retain(*a3);
    dispatch_retain(*a4);
  }
  return v8 != 0;
}

uint64_t MultiLevelAirntBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = [[MTLBinaryKey alloc] initWithHash:a2];
  uint64_t v10 = (*(uint64_t (**)(uint64_t, MTLBinaryKey *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 160))(a1, v9, a3, a4, a5);

  return v10;
}

uint64_t MultiLevelAirntBinaryCache::addElement(id *this, MTLBinaryKey *a2, MTLBinaryEntry *a3)
{
  return [this[7] addBinaryEntryInternal:a3 forKey:a2];
}

void MultiLevelAirntBinaryCache::addElement(MultiLevelAirntBinaryCache *this, const MTLHashKey *a2, MTLBinaryEntry *a3)
{
  int v5 = [[MTLBinaryKey alloc] initWithHash:a2];
  (*(void (**)(MultiLevelAirntBinaryCache *, MTLBinaryKey *, MTLBinaryEntry *))(*(void *)this + 144))(this, v5, a3);
}

uint64_t MultiLevelAirntBinaryCache::newArchiverIdWithInsertion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 56) newArchiverIdWithBinaryKey:a2 entry:a3 srcArchiverId:a4 functionType:a5];
}

uint64_t MultiLevelAirntBinaryCache::updateArchiverId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 56) updatePipelineWithPipelineArchiverId:a2 key:a3 functionType:a4];
}

void MultiLevelBinaryFSCache::addElement(MultiLevelBinaryFSCache *this, const MTLHashKey *a2, MTLBinaryEntry *a3)
{
  int v5 = [[MTLBinaryKey alloc] initWithHash:a2];
  (*(void (**)(MultiLevelBinaryFSCache *, MTLBinaryKey *, MTLBinaryEntry *))(*(void *)this + 144))(this, v5, a3);
}

BOOL MultiLevelLegacyBinaryCache::initialize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  *(void *)(a1 + 56) = a3;
  return MultiLevelBinaryCache::initialize(a1, a2, a4, a5, a6);
}

BOOL MultiLevelLegacyBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, NSObject **a3)
{
  long long v4 = (void *)[*(id *)(a1 + 56) getBinaryDataForKey:a2 reflectionType:0];
  int v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 data];
    *a3 = v6;
    dispatch_retain(v6);
  }
  return v5 != 0;
}

uint64_t MultiLevelLegacyBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = [[MTLBinaryKey alloc] initWithHash:a2];
  uint64_t v6 = (*(uint64_t (**)(uint64_t, MTLBinaryKey *, uint64_t))(*(void *)a1 + 176))(a1, v5, a3);

  return v6;
}

void *MultiLevelLegacyBinaryCache::addElement(MultiLevelLegacyBinaryCache *this, MTLBinaryKey *a2, MTLBinaryEntry *a3)
{
  __n128 result = (void *)*((void *)this + 7);
  if (result) {
    return (void *)[result addBinaryEntryInternal:a3 forKey:a2];
  }
  return result;
}

void MultiLevelLegacyBinaryCache::addElement(MultiLevelLegacyBinaryCache *this, const MTLHashKey *a2, MTLBinaryEntry *a3)
{
  int v5 = [[MTLBinaryKey alloc] initWithHash:a2];
  (*(void (**)(MultiLevelLegacyBinaryCache *, MTLBinaryKey *, MTLBinaryEntry *))(*(void *)this + 144))(this, v5, a3);
}

void MultiLevelLegacyBinaryCache::addElement(uint64_t a1, uint64_t a2, void *buffer, size_t size)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = dispatch_data_create(buffer, size, 0, 0);
  uint64_t v7 = [[MTLBinaryEntry alloc] initWithData:v6];
  __n128 v8 = MTLHashKey::MTLHashKey((uint64_t)&v9, a2);
  (*(void (**)(uint64_t, MTLHashKey *, MTLBinaryEntry *, __n128))(*(void *)a1 + 152))(a1, &v9, v7, v8);
  MTLHashKey::~MTLHashKey(&v9);
  dispatch_release(v6);
}

void sub_182786E4C(_Unwind_Exception *a1, MTLHashKey *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t MultiLevelLegacyBinaryCache::addElement(MultiLevelLegacyBinaryCache *this, const MTLHashKey *a2, const void *a3)
{
  return (*(uint64_t (**)(MultiLevelLegacyBinaryCache *, $2772B1D07D29A72E8557B2574C0AE5C1 *, const void *))(*(void *)this + 72))(this, &a2->var1, a3);
}

BOOL MultiLevelAirCache::initialize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  return MultiLevelCacheBase::initialize(a1, a4, a5, a6);
}

uint64_t MultiLevelAirCache::getElement(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  __n128 v5 = MTLHashKey::MTLHashKey((uint64_t)&v8, [a2 value]);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, MTLHashKey *, uint64_t, __n128))(*(void *)a1 + 96))(a1, &v8, a3, v5);
  MTLHashKey::~MTLHashKey(&v8);
  return v6;
}

void sub_182786F50(_Unwind_Exception *a1, MTLHashKey *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

BOOL MultiLevelAirCache::failOnCacheMiss(MultiLevelAirCache *this)
{
  return (*((unsigned char *)this + 32) & 7) != 0;
}

BOOL MultiLevelFunctionCache::initialize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  a1[6] = a4;
  a1[7] = a2;
  a1[5] = a3;
  return MultiLevelCacheBase::initialize((uint64_t)a1, a5, a6, a7);
}

uint64_t MultiLevelFunctionCache::newFunctionWithKey(MultiLevelFunctionCache *this, MTLBinaryKey *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  __n128 v3 = MTLHashKey::MTLHashKey((uint64_t)&v6, (uint64_t)[(MTLBinaryKey *)a2 value]);
  uint64_t v4 = (*(uint64_t (**)(MultiLevelFunctionCache *, MTLHashKey *, void, __n128))(*(void *)this + 144))(this, &v6, 0, v3);
  MTLHashKey::~MTLHashKey(&v6);
  return v4;
}

void sub_18278703C(_Unwind_Exception *a1, MTLHashKey *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

BOOL MultiLevelLibraryCache::initialize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  a1[6] = a4;
  a1[7] = a2;
  a1[5] = a3;
  return MultiLevelCacheBase::initialize((uint64_t)a1, 0, a5, a6);
}

void MultiLevelLibraryCache::addStitchedLibraryWithKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void **)(a1 + 48);
  if (v7)
  {
    [v7 addStitchedLibraryWithKey:a2 + 24 descriptors:a3 inputFunctions:a4 library:a5];
  }
  else
  {
    uint64_t v8 = [a5 libraryData];
    size_t v12 = 0;
    buffer_ptr = 0;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 128))(v8);
    uint64_t v10 = dispatch_data_create_map(v9, (const void **)&buffer_ptr, &v12);
    MTLHashKey::MTLHashKey((uint64_t)&v14, a2 + 24);
    uint64_t v11 = *(void *)(a1 + 24);
    $2772B1D07D29A72E8557B2574C0AE5C1 var1 = v14.var1;
    (*(void (**)(uint64_t, $2772B1D07D29A72E8557B2574C0AE5C1 *, void *, size_t))(*(void *)v11 + 40))(v11, &var1, buffer_ptr, v12);
    MTLHashKey::~MTLHashKey(&v14);
    dispatch_release(v10);
  }
}

void sub_1827871BC(_Unwind_Exception *a1, uint64_t a2, MTLHashKey *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void MultiLevelCacheBase::~MultiLevelCacheBase(MultiLevelCacheBase *this)
{
}

uint64_t MultiLevelBinaryCache::newArchiverIdWithInsertion()
{
  return 0;
}

void MultiLevelBinaryFSCache::~MultiLevelBinaryFSCache(MultiLevelBinaryFSCache *this)
{
}

uint64_t MultiLevelBinaryFSCache::getElementAtDestination(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t MultiLevelBinaryFSCache::getElementAtDestination(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  return 0;
}

{
  *a3 = 0;
  return 0;
}

void MultiLevelAirntBinaryCache::~MultiLevelAirntBinaryCache(MultiLevelAirntBinaryCache *this)
{
}

uint64_t MultiLevelAirntBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  return 0;
}

{
  *a3 = 0;
  return 0;
}

void MultiLevelLegacyBinaryCache::~MultiLevelLegacyBinaryCache(MultiLevelLegacyBinaryCache *this)
{
}

uint64_t MultiLevelLegacyBinaryCache::getElementAtDestination(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

void MultiLevelAirCache::~MultiLevelAirCache(MultiLevelAirCache *this)
{
}

void MultiLevelFunctionCache::~MultiLevelFunctionCache(MultiLevelFunctionCache *this)
{
}

void MultiLevelLibraryCache::~MultiLevelLibraryCache(MultiLevelLibraryCache *this)
{
}

void std::__shared_ptr_emplace<MultiLevelAirntBinaryCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC75B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelAirntBinaryCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC75B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

uint64_t std::__shared_ptr_emplace<MultiLevelAirntBinaryCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MultiLevelLegacyBinaryCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC75E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelLegacyBinaryCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC75E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

uint64_t std::__shared_ptr_emplace<MultiLevelLegacyBinaryCache>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MultiLevelBinaryFSCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelBinaryFSCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7540;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

void std::__shared_ptr_emplace<MultiLevelAirCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelAirCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7498;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

void std::__shared_ptr_emplace<MultiLevelFunctionCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelFunctionCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC7578;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

void std::__shared_ptr_emplace<MultiLevelLibraryCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC47A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MultiLevelLibraryCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ECAC47A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18530C140);
}

BOOL MTLTraceEnabledSPI()
{
  return *(_DWORD *)*MEMORY[0x1E4F6EC08] != 0;
}

uint64_t MTLTraceEventSPI()
{
  uint64_t result = IOAccelInitCommPage();
  if (*(_DWORD *)*MEMORY[0x1E4F6EC08])
  {
    return kdebug_trace();
  }
  return result;
}

__CFString *MTLGPUOperationString(unsigned int a1)
{
  if (a1 > 0xD) {
    return @"<unknown>";
  }
  else {
    return off_1E521F8E0[a1];
  }
}

uint64_t MTLStageInputOutputDescriptorDescription(uint64_t result, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    __n128 v3 = (void *)result;
    uint64_t v27 = [@"\n" stringByPaddingToLength:a2 + 4 withString:@" " startingAtIndex:0];
    uint64_t v4 = [@"\n" stringByPaddingToLength:a2 + 8 withString:@" " startingAtIndex:0];
    uint64_t v5 = [@"\n" stringByPaddingToLength:a2 + 12 withString:@" " startingAtIndex:0];
    uint64_t v37 = 0;
    memset(v36, 0, sizeof(v36));
    int v26 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:31];
    for (uint64_t i = 0; i != 31; ++i)
    {
      uint64_t v11 = *(void *)(v3[2] + 8 + 8 * i);
      if (v11 && *(void *)(v11 + 8))
      {
        unint64_t v12 = *(void *)(v11 + 24);
        if (v12 >= 0x1F) {
          MTLReleaseAssertionFailure((uint64_t)"MTLStageInputOutputDescriptorDescription", 1085, (uint64_t)"bufferIndex < MTL_MAX_VERTEX_BUFFERS", 0, v6, v7, v8, v9, v25);
        }
        size_t v13 = (void *)v36[v12];
        if (!v13)
        {
          size_t v13 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:128];
          v36[v12] = v13;
          v35[0] = v27;
          v35[1] = objc_msgSend(NSString, "stringWithFormat:", @"Buffer %lu:", v12);
          objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v35, 2));
          MTLHashKey v14 = *(void **)(v3[1] + 8 + 8 * v12);
          if (v14)
          {
            v34[0] = v4;
            v34[1] = @"stepFunction =";
            unint64_t v15 = v14[2];
            uint64_t v16 = @"Unknown";
            if (v15 <= 8) {
              uint64_t v16 = off_1E521F950[v15];
            }
            void v34[2] = v16;
            objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v34, 3));
            if (v14[2])
            {
              v33[0] = v4;
              v33[1] = @"stepRate =";
              void v33[2] = [NSNumber numberWithUnsignedInteger:v14[3]];
              objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v33, 3));
            }
            if ([v14 isStrideDynamic])
            {
              v32[0] = v4;
              v32[1] = @"stride = dynamic";
              unint64_t v17 = (void *)MEMORY[0x1E4F1C978];
              id v18 = v32;
              uint64_t v19 = 2;
            }
            else
            {
              v31[0] = v4;
              v31[1] = @"stride =";
              void v31[2] = [NSNumber numberWithUnsignedInteger:v14[1]];
              unint64_t v17 = (void *)MEMORY[0x1E4F1C978];
              id v18 = v31;
              uint64_t v19 = 3;
            }
          }
          else
          {
            v30[0] = v4;
            v30[1] = @"stepFunction =";
            v30[2] = @"MTLStepFunctionPerVertex";
            void v30[3] = v4;
            v30[4] = @"stride =";
            v30[5] = &unk_1ECB14EF8;
            unint64_t v17 = (void *)MEMORY[0x1E4F1C978];
            id v18 = v30;
            uint64_t v19 = 6;
          }
          objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(v17, "arrayWithObjects:count:", v18, v19));
        }
        v29[0] = v4;
        v29[1] = objc_msgSend(NSString, "stringWithFormat:", @"Attribute %u:", i);
        v29[2] = v5;
        void v29[3] = @"offset =";
        v29[4] = [NSNumber numberWithUnsignedInteger:*(void *)(v11 + 16)];
        v29[5] = v5;
        v29[6] = @"format =";
        v29[7] = MTLAttributeFormatString(*(MTLAttributeFormat *)(v11 + 8));
        objc_msgSend(v13, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v29, 8));
      }
    }
    for (uint64_t j = 0; j != 31; ++j)
    {
      int v21 = (void *)v36[j];
      if (v21) {
        objc_msgSend(v26, "addObject:", objc_msgSend(v21, "componentsJoinedByString:", @" "));
      }
    }
    v28[0] = v27;
    uint64_t v22 = v3[4];
    long long v23 = @"MTLIndexTypeUInt32";
    if (v22 != 1) {
      long long v23 = @"Unknown";
    }
    if (v22) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = @"MTLIndexTypeUInt16";
    }
    v28[1] = [NSString stringWithFormat:@"IndexType: %@", v24];
    void v28[2] = v27;
    v28[3] = objc_msgSend(NSString, "stringWithFormat:", @"IndexBufferIndex: %lu", v3[3]);
    objc_msgSend(v26, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v28, 4));
    return [v26 componentsJoinedByString:@" "];
  }
  return result;
}

void validateFunctionStepRate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((unint64_t)(a1 - 5) >= 4)
  {
    if (a1)
    {
      _MTLMessageContextPush_(a3, 4, @"invalid stepFunction value", a4, a5, a6, a7, a8, a9);
    }
    else if (a2)
    {
      _MTLMessageContextPush_(a3, 4, @"stepRate(%lu) must be zero if stepFunction is MTLStepFunctionConstant.", a4, a5, a6, a7, a8, a2);
    }
  }
  else if (!a2)
  {
    _MTLMessageContextPush_(a3, 4, @"stepRate(%lu) cannot be zero if stepFunction is %@.", a4, a5, a6, a7, a8, 0);
  }
}

uint64_t compilerErrorWithMessage(NSString *a1, ...)
{
  va_start(va, a1);
  id v1 = (id)[[NSString alloc] initWithFormat:a1 arguments:va];
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v1 forKey:*MEMORY[0x1E4F28568]];
  return [MEMORY[0x1E4F28C58] errorWithDomain:@"CompilerError" code:2 userInfo:v2];
}

__CFString *MTLIndexTypeString(MTLIndexType a1)
{
  id v1 = @"Unknown";
  if (a1 == MTLIndexTypeUInt32) {
    id v1 = @"MTLIndexTypeUInt32";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"MTLIndexTypeUInt16";
  }
}

MTLSerializer::ObjectListSerializer *MTLSerializer::ObjectListSerializer::ObjectListSerializer(MTLSerializer::ObjectListSerializer *this, unsigned int a2)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 5) = 8;
  *(void *)this = &unk_1ECAC6BD8;
  std::vector<MTLSerializer::ObjectSerializer *>::vector((void *)this + 6, a2);
  *((void *)this + 5) = 4;
  return this;
}

void sub_182789EF8(_Unwind_Exception *exception_object)
{
  *id v1 = &unk_1ECAC6B88;
  __n128 v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLSerializer::ObjectListSerializer::writeToMemory(const void **this, char *__dst, uint64_t a3)
{
  memcpy(__dst, this[1], (unsigned char *)this[2] - (unsigned char *)this[1]);
  uint64_t result = (unsigned char *)this[2] - (unsigned char *)this[1];
  uint64_t v8 = this[6];
  uint64_t v7 = this[7];
  if (v7 != (unsigned char *)v8)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (void *)v8[v9];
      if (v10)
      {
        uint64_t v11 = v10[5];
        uint64_t v12 = (v11 - 1) & result;
        uint64_t v13 = v11 + result - v12;
        if (v12) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = result;
        }
        bzero(&__dst[result], v14 - result);
        uint64_t result = (*(uint64_t (**)(void *, char *, uint64_t))(*v10 + 16))(v10, &__dst[v14], a3 - v14) + v14;
        uint64_t v8 = this[6];
        uint64_t v7 = this[7];
      }
      ++v9;
    }
    while (v9 < (v7 - (unsigned char *)v8) >> 3);
  }
  return result;
}

uint64_t MTLSerializer::ObjectSerializer::writeToMemory(const void **this, char *__dst)
{
  return (unsigned char *)this[2] - (unsigned char *)this[1];
}

MTLSerializer::ObjectListSerializer *MTLSerializer::ObjectListSerializer::FinalizeInternal(MTLSerializer::ObjectListSerializer *this)
{
  uint64_t v2 = *((void *)this + 2) - *((void *)this + 1);
  uint64_t v4 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 7);
  if (v3 != v4)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v4 + 8 * v5);
      if (v6)
      {
        unint64_t v7 = *(void *)(v6 + 40);
        if (((v7 - 1) & v2) != 0) {
          uint64_t v8 = v7 + v2 - ((v7 - 1) & v2);
        }
        else {
          uint64_t v8 = v2;
        }
        (*(void (**)(MTLSerializer::ObjectListSerializer *, unint64_t, uint64_t))(*(void *)this + 24))(this, v5, v8);
        uint64_t v9 = *(void *)(v6 + 32);
        if (v7 > *((void *)this + 5)) {
          *((void *)this + 5) = v7;
        }
        uint64_t v2 = v9 + v8;
        uint64_t v4 = *((void *)this + 6);
        uint64_t v3 = *((void *)this + 7);
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  *((void *)this + 4) = v2;
  return this;
}

MTLSerializer::DirectObjectListSerializer *MTLSerializer::DirectObjectListSerializer::DirectObjectListSerializer(MTLSerializer::DirectObjectListSerializer *this, unsigned int a2)
{
  uint64_t v4 = MTLSerializer::ObjectListSerializer::ObjectListSerializer(this, a2);
  *(void *)uint64_t v4 = &unk_1ECAC6C68;
  unint64_t v5 = (std::vector<char> *)((char *)v4 + 8);
  std::vector<unsigned char>::reserve((std::vector<char> *)((char *)v4 + 8), 8 * a2 + 4 * (a2 + 1));
  unint64_t v6 = 4 * (a2 + 1);
  std::vector<char>::pointer begin = (_DWORD *)*((void *)this + 1);
  unint64_t v8 = *((void *)this + 2) - (void)begin;
  if (v6 <= v8)
  {
    if (v6 < v8) {
      *((void *)this + 2) = &begin[v6 / 4];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v5, v6 - v8);
    std::vector<char>::pointer begin = v5->__begin_;
  }
  *std::vector<char>::pointer begin = a2;
  bzero(begin + 1, 4 * a2);
  return this;
}

void sub_18278A1BC(_Unwind_Exception *a1)
{
  MTLSerializer::ObjectListSerializer::~ObjectListSerializer(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::reserve(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer begin = this->__begin_;
  if (this->__end_cap_.__value_ - this->__begin_ < __n)
  {
    if ((__n & 0x8000000000000000) != 0) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    std::vector<char>::pointer end = this->__end_;
    unint64_t v6 = (char *)operator new(__n);
    unint64_t v7 = &v6[end - begin];
    unint64_t v8 = v7;
    if (end != begin)
    {
      uint64_t v9 = &end[~(unint64_t)begin];
      do
      {
        char v10 = *--end;
        (v9--)[(void)v6] = v10;
      }
      while (end != begin);
      unint64_t v8 = v6;
    }
    this->__begin_ = v8;
    this->__end_ = v7;
    this->__end_cap_.__value_ = &v6[__n];
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void MTLSerializer::ObjectListSerializer::~ObjectListSerializer(MTLSerializer::ObjectListSerializer *this)
{
  *(void *)this = &unk_1ECAC6BD8;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1ECAC6B88;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

MTLPipelineLibrarySerializer::FunctionDescriptor *MTLPipelineLibrarySerializer::FunctionDescriptor::FunctionDescriptor(MTLPipelineLibrarySerializer::FunctionDescriptor *this, MTLLibraryData *a2, NSString *a3, MTLFunctionType a4, uint64_t a5)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = a2;
  if (a2) {
    (*(void (**)(MTLLibraryData *))(*(void *)a2 + 16))(a2);
  }
  uint64_t v9 = [(NSString *)a3 copy];
  *((void *)this + 2) = a5;
  *((void *)this + 3) = a4;
  *((void *)this + 1) = v9;
  return this;
}

void MTLPipelineLibrarySerializer::FunctionDescriptor::~FunctionDescriptor(id *this)
{
  if (*this) {
    (*(void (**)(id))(*(void *)*this + 24))(*this);
  }
}

MTLPipelineLibrarySerializer::PipelineLibrarySerializer *MTLPipelineLibrarySerializer::PipelineLibrarySerializer::PipelineLibrarySerializer(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this)
{
  *(void *)this = &unk_1ECAC6E08;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 2) = 0;

  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;

  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;

  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;

  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;

  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;

  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  return this;
}

void MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer(id *this)
{
  *this = &unk_1ECAC6E08;
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addLibrary(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addSpecializedFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v49 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  (*(void (**)(uint64_t, const char *))(*(void *)v49 + 64))(v49, "MTLFunction");
  (*(void (**)(uint64_t, void))(*(void *)v49 + 72))(v49, *(void *)(a2 + 48));
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v49 + 24))(v49, 0, v4);
  uint64_t v48 = a2;
  unint64_t v5 = *(void **)(a2 + 32);
  if (v5)
  {
    std::string __p = 0;
    BOOL v60 = 0;
    uint64_t v61 = 0;
    unint64_t v6 = (void *)[v5 newNamedConstantArray];
    id obj = (id)[v5 newIndexedConstantArray];
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v55 objects:v63 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v56;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v56 != v8) {
            objc_enumerationMutation(v6);
          }
          char v10 = *(void **)(*((void *)&v55 + 1) + 8 * i);
          uint64_t v11 = *(void **)(a1 + 80);
          if (!v11)
          {
            uint64_t v11 = objc_opt_new();
            *(void *)(a1 + 80) = v11;
          }
          uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8));
          if ([v10 name]) {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, 1, [v10 name]);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 2, objc_msgSend(v10, "dataType", v48), objc_msgSend(v11, "dataType"));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, 3, [v10 dataType], objc_msgSend(v10, "data"));
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 56))(v12);
          uint64_t v14 = v13;
          unint64_t v15 = v60;
          if (v60 >= (uint64_t *)v61)
          {
            uint64_t v17 = ((char *)v60 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v17 + 1) >> 61) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v18 = (v61 - (unsigned char *)__p) >> 2;
            if (v18 <= v17 + 1) {
              unint64_t v18 = v17 + 1;
            }
            if ((unint64_t)(v61 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v61, v19);
            }
            else {
              uint64_t v20 = 0;
            }
            int v21 = (uint64_t *)&v20[8 * v17];
            *int v21 = v14;
            uint64_t v16 = v21 + 1;
            long long v23 = (char *)__p;
            uint64_t v22 = (char *)v60;
            if (v60 != __p)
            {
              do
              {
                uint64_t v24 = *((void *)v22 - 1);
                v22 -= 8;
                *--int v21 = v24;
              }
              while (v22 != v23);
              uint64_t v22 = (char *)__p;
            }
            std::string __p = v21;
            BOOL v60 = v16;
            uint64_t v61 = &v20[8 * v19];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *BOOL v60 = v13;
            uint64_t v16 = v15 + 1;
          }
          BOOL v60 = v16;
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        uint64_t v7 = [v6 countByEnumeratingWithState:&v55 objects:v63 count:16];
      }
      while (v7);
    }

    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    uint64_t v25 = [obj countByEnumeratingWithState:&v51 objects:v62 count:16];
    if (v25)
    {
      uint64_t v26 = *(void *)v52;
      do
      {
        for (uint64_t j = 0; j != v25; ++j)
        {
          if (*(void *)v52 != v26) {
            objc_enumerationMutation(obj);
          }
          unint64_t v28 = *(void **)(*((void *)&v51 + 1) + 8 * j);
          uint64_t v29 = *(void **)(a1 + 88);
          if (!v29)
          {
            uint64_t v29 = objc_opt_new();
            *(void *)(a1 + 88) = v29;
          }
          uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8));
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 0, [v28 index], objc_msgSend(v29, "index"));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 2, [v28 dataType], objc_msgSend(v29, "dataType"));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v30 + 48))(v30, 3, [v28 dataType], objc_msgSend(v28, "data"));
          uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 56))(v30);
          uint64_t v32 = v31;
          int v33 = v60;
          if (v60 >= (uint64_t *)v61)
          {
            uint64_t v35 = ((char *)v60 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v35 + 1) >> 61) {
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v36 = (v61 - (unsigned char *)__p) >> 2;
            if (v36 <= v35 + 1) {
              unint64_t v36 = v35 + 1;
            }
            if ((unint64_t)(v61 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v36;
            }
            if (v37) {
              uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v61, v37);
            }
            else {
              uint64_t v38 = 0;
            }
            char v39 = (uint64_t *)&v38[8 * v35];
            *char v39 = v32;
            int v34 = v39 + 1;
            unsigned int v41 = (char *)__p;
            unint64_t v40 = (char *)v60;
            if (v60 != __p)
            {
              do
              {
                uint64_t v42 = *((void *)v40 - 1);
                v40 -= 8;
                *--char v39 = v42;
              }
              while (v40 != v41);
              unint64_t v40 = (char *)__p;
            }
            std::string __p = v39;
            BOOL v60 = v34;
            uint64_t v61 = &v38[8 * v37];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            *BOOL v60 = v31;
            int v34 = v33 + 1;
          }
          BOOL v60 = v34;
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        uint64_t v25 = [obj countByEnumeratingWithState:&v51 objects:v62 count:16];
      }
      while (v25);
    }

    uint64_t v43 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), &__p);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v49 + 24))(v49, 1, v43);
    if (__p)
    {
      BOOL v60 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
  uint64_t v44 = *(void *)(a1 + 8);
  uint64_t v45 = objc_msgSend(*(id *)(v48 + 48), "UTF8String", v48);
  uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 56))(v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v44 + 168))(v44, v45, v46);
  return (*(uint64_t (**)(uint64_t))(*(void *)v49 + 8))(v49);
}

void sub_18278ADA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeStageInputOuputDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLStageInputOutputDescriptor *a2)
{
  uint64_t v4 = *((void *)this + 4);
  if (!v4)
  {
    uint64_t v4 = objc_opt_new();
    *((void *)this + 4) = v4;
  }
  long long v56 = (void *)v4;
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
  uint64_t v6 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  char v66 = 0;
  uint64_t v57 = v5;
  std::string __p = 0;
  unint64_t v62 = 0;
  size_t v63 = 0;
  do
  {
    uint64_t v7 = (void *)*((void *)this + 5);
    if (!v7)
    {
      uint64_t v7 = objc_opt_new();
      *((void *)this + 5) = v7;
    }
    uint64_t v8 = (void *)*((void *)a2[2].super.isa + v6 + 1);
    if ([v8 format])
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 0, v6, 31);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 1, [v8 format], objc_msgSend(v7, "format"));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 2, [v8 offset], objc_msgSend(v7, "offset"));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 3, [v8 bufferIndex], objc_msgSend(v7, "bufferIndex"));
      int v10 = [v8 bufferIndex];
      int v11 = v10;
      uint64_t v12 = v62;
      if (v62 >= v63)
      {
        uint64_t v14 = (char *)__p;
        uint64_t v15 = (v62 - (unsigned char *)__p) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v63 - (unsigned char *)__p;
        if ((v63 - (unsigned char *)__p) >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v63, v18);
          uint64_t v14 = (char *)__p;
          uint64_t v12 = v62;
        }
        else
        {
          unint64_t v19 = 0;
        }
        uint64_t v20 = &v19[4 * v15];
        *(_DWORD *)uint64_t v20 = v11;
        uint64_t v13 = v20 + 4;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        std::string __p = v20;
        unint64_t v62 = v13;
        size_t v63 = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v62 = v10;
        uint64_t v13 = v12 + 4;
      }
      unint64_t v62 = v13;
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
      uint64_t v23 = v22;
      uint64_t v24 = v65;
      if (v65 >= v66)
      {
        uint64_t v26 = ((char *)v65 - (unsigned char *)v64) >> 3;
        if ((unint64_t)(v26 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = ((char *)v66 - (unsigned char *)v64) >> 2;
        if (v27 <= v26 + 1) {
          unint64_t v27 = v26 + 1;
        }
        if ((unint64_t)((char *)v66 - (unsigned char *)v64) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28) {
          uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v66, v28);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = (uint64_t *)&v29[8 * v26];
        *uint64_t v30 = v23;
        uint64_t v25 = v30 + 1;
        uint64_t v32 = (char *)v64;
        uint64_t v31 = (char *)v65;
        if (v65 != v64)
        {
          do
          {
            uint64_t v33 = *((void *)v31 - 1);
            v31 -= 8;
            *--uint64_t v30 = v33;
          }
          while (v31 != v32);
          uint64_t v31 = (char *)v64;
        }
        uint64_t v64 = v30;
        uint64_t v65 = v25;
        char v66 = (uint64_t *)&v29[8 * v28];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        uint64_t *v65 = v22;
        uint64_t v25 = v24 + 1;
      }
      uint64_t v65 = v25;
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    ++v6;
  }
  while (v6 != 31);
  long long v58 = 0;
  size_t v59 = 0;
  BOOL v60 = 0;
  int v34 = (unsigned int *)__p;
  uint64_t v35 = (unsigned int *)v62;
  if (__p != v62)
  {
    do
    {
      uint64_t v36 = *v34;
      unint64_t v37 = [(MTLBufferLayoutDescriptorArray *)[(MTLStageInputOutputDescriptor *)a2 layouts] objectAtIndexedSubscript:v36];
      uint64_t v38 = (void *)*((void *)this + 6);
      if (!v38)
      {
        uint64_t v38 = objc_opt_new();
        *((void *)this + 6) = v38;
      }
      uint64_t v39 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 0, v36, 31);
      (*(void (**)(uint64_t, uint64_t, MTLStepFunction, uint64_t))(*(void *)v39 + 32))(v39, 1, -[MTLBufferLayoutDescriptor stepFunction](v37, "stepFunction"), [v38 stepFunction]);
      (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(void *)v39 + 32))(v39, 2, -[MTLBufferLayoutDescriptor stepRate](v37, "stepRate"), [v38 stepRate]);
      (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(void *)v39 + 32))(v39, 3, -[MTLBufferLayoutDescriptor stride](v37, "stride"), [v38 stride]);
      uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 56))(v39);
      uint64_t v41 = v40;
      uint64_t v42 = v59;
      if (v59 >= v60)
      {
        uint64_t v44 = ((char *)v59 - (unsigned char *)v58) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v45 = ((char *)v60 - (unsigned char *)v58) >> 2;
        if (v45 <= v44 + 1) {
          unint64_t v45 = v44 + 1;
        }
        if ((unint64_t)((char *)v60 - (unsigned char *)v58) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v45;
        }
        if (v46) {
          uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v60, v46);
        }
        else {
          uint64_t v47 = 0;
        }
        uint64_t v48 = (uint64_t *)&v47[8 * v44];
        *uint64_t v48 = v41;
        uint64_t v43 = v48 + 1;
        int v50 = (char *)v58;
        uint64_t v49 = (char *)v59;
        if (v59 != v58)
        {
          do
          {
            uint64_t v51 = *((void *)v49 - 1);
            v49 -= 8;
            *--uint64_t v48 = v51;
          }
          while (v49 != v50);
          uint64_t v49 = (char *)v58;
        }
        long long v58 = v48;
        size_t v59 = v43;
        BOOL v60 = (uint64_t *)&v47[8 * v46];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *size_t v59 = v40;
        uint64_t v43 = v42 + 1;
      }
      size_t v59 = v43;
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
      ++v34;
    }
    while (v34 != v35);
  }
  uint64_t v52 = (*(uint64_t (**)(void, void **))(**((void **)this + 1) + 152))(*((void *)this + 1), &v64);
  uint64_t v53 = (*(uint64_t (**)(void, void **))(**((void **)this + 1) + 152))(*((void *)this + 1), &v58);
  (*(void (**)(uint64_t, uint64_t, MTLIndexType, uint64_t))(*(void *)v57 + 32))(v57, 2, -[MTLStageInputOutputDescriptor indexType](a2, "indexType"), [v56 indexType]);
  (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(void *)v57 + 32))(v57, 3, -[MTLStageInputOutputDescriptor indexBufferIndex](a2, "indexBufferIndex"), [v56 indexBufferIndex]);
  if ([(MTLStageInputOutputDescriptor *)a2 attributes]) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v57 + 24))(v57, 0, v52);
  }
  if ([(MTLStageInputOutputDescriptor *)a2 layouts]) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57 + 24))(v57, 1, v53);
  }
  uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 56))(v57);
  if (v58)
  {
    size_t v59 = (uint64_t *)v58;
    operator delete(v58);
  }
  if (__p)
  {
    unint64_t v62 = (char *)__p;
    operator delete(__p);
  }
  if (v64)
  {
    uint64_t v65 = (uint64_t *)v64;
    operator delete(v64);
  }
  (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  return v54;
}

void sub_18278B734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeVertexDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLVertexDescriptor *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
  uint64_t v5 = 0;
  unint64_t v62 = 0;
  size_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v55 = v4;
  std::string __p = 0;
  BOOL v60 = 0;
  uint64_t v61 = 0;
  do
  {
    uint64_t v6 = (void *)*((void *)this + 7);
    if (!v6)
    {
      uint64_t v6 = objc_opt_new();
      *((void *)this + 7) = v6;
    }
    uint64_t v7 = (void *)*((void *)a2[2].super.isa + v5 + 1);
    if ([v7 format])
    {
      uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 0, v5, 31);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 1, [v7 format], objc_msgSend(v6, "format"));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 2, [v7 offset], objc_msgSend(v6, "offset"));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 3, [v7 bufferIndex], objc_msgSend(v6, "bufferIndex"));
      int v9 = [v7 bufferIndex];
      int v10 = v9;
      int v11 = v60;
      if (v60 >= v61)
      {
        uint64_t v13 = (char *)__p;
        uint64_t v14 = (v60 - (unsigned char *)__p) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v61 - (unsigned char *)__p;
        if ((v61 - (unsigned char *)__p) >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v61, v17);
          uint64_t v13 = (char *)__p;
          int v11 = v60;
        }
        else
        {
          unint64_t v18 = 0;
        }
        unint64_t v19 = &v18[4 * v14];
        *(_DWORD *)unint64_t v19 = v10;
        uint64_t v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        std::string __p = v19;
        BOOL v60 = v12;
        uint64_t v61 = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)BOOL v60 = v9;
        uint64_t v12 = v11 + 4;
      }
      BOOL v60 = v12;
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
      uint64_t v22 = v21;
      uint64_t v23 = v63;
      if (v63 >= v64)
      {
        uint64_t v25 = ((char *)v63 - (unsigned char *)v62) >> 3;
        if ((unint64_t)(v25 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = ((char *)v64 - (unsigned char *)v62) >> 2;
        if (v26 <= v25 + 1) {
          unint64_t v26 = v25 + 1;
        }
        if ((unint64_t)((char *)v64 - (unsigned char *)v62) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v64, v27);
        }
        else {
          unint64_t v28 = 0;
        }
        uint64_t v29 = (uint64_t *)&v28[8 * v25];
        *uint64_t v29 = v22;
        uint64_t v24 = v29 + 1;
        uint64_t v31 = (char *)v62;
        uint64_t v30 = (char *)v63;
        if (v63 != v62)
        {
          do
          {
            uint64_t v32 = *((void *)v30 - 1);
            v30 -= 8;
            *--uint64_t v29 = v32;
          }
          while (v30 != v31);
          uint64_t v30 = (char *)v62;
        }
        unint64_t v62 = v29;
        size_t v63 = v24;
        uint64_t v64 = (uint64_t *)&v28[8 * v27];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        uint64_t *v63 = v21;
        uint64_t v24 = v23 + 1;
      }
      size_t v63 = v24;
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    ++v5;
  }
  while (v5 != 31);
  long long v56 = 0;
  uint64_t v57 = 0;
  long long v58 = 0;
  uint64_t v33 = (unsigned int *)__p;
  int v34 = (unsigned int *)v60;
  if (__p != v60)
  {
    do
    {
      uint64_t v35 = *v33;
      uint64_t v36 = [(MTLVertexBufferLayoutDescriptorArray *)[(MTLVertexDescriptor *)a2 layouts] objectAtIndexedSubscript:v35];
      unint64_t v37 = (void *)*((void *)this + 8);
      if (!v37)
      {
        unint64_t v37 = objc_opt_new();
        *((void *)this + 8) = v37;
      }
      uint64_t v38 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 0, v35, 31);
      (*(void (**)(uint64_t, uint64_t, MTLVertexStepFunction, uint64_t))(*(void *)v38 + 32))(v38, 1, -[MTLVertexBufferLayoutDescriptor stepFunction](v36, "stepFunction"), [v37 stepFunction]);
      (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(void *)v38 + 32))(v38, 2, -[MTLVertexBufferLayoutDescriptor stepRate](v36, "stepRate"), [v37 stepRate]);
      (*(void (**)(uint64_t, uint64_t, NSUInteger, uint64_t))(*(void *)v38 + 32))(v38, 3, -[MTLVertexBufferLayoutDescriptor stride](v36, "stride"), [v37 stride]);
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 56))(v38);
      uint64_t v40 = v39;
      uint64_t v41 = v57;
      if (v57 >= v58)
      {
        uint64_t v43 = ((char *)v57 - (unsigned char *)v56) >> 3;
        if ((unint64_t)(v43 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v44 = ((char *)v58 - (unsigned char *)v56) >> 2;
        if (v44 <= v43 + 1) {
          unint64_t v44 = v43 + 1;
        }
        if ((unint64_t)((char *)v58 - (unsigned char *)v56) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45) {
          unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v58, v45);
        }
        else {
          unint64_t v46 = 0;
        }
        uint64_t v47 = (uint64_t *)&v46[8 * v43];
        *uint64_t v47 = v40;
        uint64_t v42 = v47 + 1;
        uint64_t v49 = (char *)v56;
        uint64_t v48 = (char *)v57;
        if (v57 != v56)
        {
          do
          {
            uint64_t v50 = *((void *)v48 - 1);
            v48 -= 8;
            *--uint64_t v47 = v50;
          }
          while (v48 != v49);
          uint64_t v48 = (char *)v56;
        }
        long long v56 = v47;
        uint64_t v57 = v42;
        long long v58 = (uint64_t *)&v46[8 * v45];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *uint64_t v57 = v39;
        uint64_t v42 = v41 + 1;
      }
      uint64_t v57 = v42;
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      ++v33;
    }
    while (v33 != v34);
  }
  uint64_t v51 = (*(uint64_t (**)(void, void **))(**((void **)this + 1) + 152))(*((void *)this + 1), &v62);
  uint64_t v52 = (*(uint64_t (**)(void, void **))(**((void **)this + 1) + 152))(*((void *)this + 1), &v56);
  if ([(MTLVertexDescriptor *)a2 attributes]) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v55 + 24))(v55, 0, v51);
  }
  if ([(MTLVertexDescriptor *)a2 layouts]) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v55 + 24))(v55, 1, v52);
  }
  uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 56))(v55);
  if (v56)
  {
    uint64_t v57 = (uint64_t *)v56;
    operator delete(v56);
  }
  if (__p)
  {
    BOOL v60 = (char *)__p;
    operator delete(__p);
  }
  if (v62)
  {
    size_t v63 = (uint64_t *)v62;
    operator delete(v62);
  }
  (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  return v53;
}

void sub_18278C014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedAttachments(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLRenderPipelineColorAttachmentDescriptorArrayInternal *a2)
{
  uint64_t v4 = 0;
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  do
  {
    uint64_t v5 = a2->_descriptors[v4];
    if (v5)
    {
      uint64_t v6 = (void *)*((void *)this + 9);
      if (!v6)
      {
        uint64_t v6 = objc_opt_new();
        *((void *)this + 9) = v6;
      }
      uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 96))(*((void *)this + 1));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 0, v4, 8);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 1, -[MTLRenderPipelineColorAttachmentDescriptorInternal pixelFormat](v5, "pixelFormat"), [v6 pixelFormat]);
      (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v7 + 32))(v7, 2, -[MTLRenderPipelineColorAttachmentDescriptorInternal isBlendingEnabled](v5, "isBlendingEnabled"), [v6 isBlendingEnabled]);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 3, -[MTLRenderPipelineColorAttachmentDescriptorInternal sourceRGBBlendFactor](v5, "sourceRGBBlendFactor"), [v6 sourceRGBBlendFactor]);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 4, -[MTLRenderPipelineColorAttachmentDescriptorInternal destinationRGBBlendFactor](v5, "destinationRGBBlendFactor"), [v6 destinationRGBBlendFactor]);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 5, -[MTLRenderPipelineColorAttachmentDescriptorInternal rgbBlendOperation](v5, "rgbBlendOperation"), [v6 rgbBlendOperation]);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 6, -[MTLRenderPipelineColorAttachmentDescriptorInternal sourceAlphaBlendFactor](v5, "sourceAlphaBlendFactor"), [v6 sourceAlphaBlendFactor]);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 7, -[MTLRenderPipelineColorAttachmentDescriptorInternal destinationAlphaBlendFactor](v5, "destinationAlphaBlendFactor"), [v6 destinationAlphaBlendFactor]);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 8, -[MTLRenderPipelineColorAttachmentDescriptorInternal alphaBlendOperation](v5, "alphaBlendOperation"), [v6 alphaBlendOperation]);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 9, -[MTLRenderPipelineColorAttachmentDescriptorInternal writeMask](v5, "writeMask"), [v6 writeMask]);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
      uint64_t v9 = v8;
      int v10 = v24;
      if (v24 >= v25)
      {
        uint64_t v12 = ((char *)v24 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = ((char *)v25 - (unsigned char *)__p) >> 2;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)((char *)v25 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v25, v14);
        }
        else {
          unint64_t v15 = 0;
        }
        uint64_t v16 = (uint64_t *)&v15[8 * v12];
        *uint64_t v16 = v9;
        int v11 = v16 + 1;
        unint64_t v18 = (char *)__p;
        unint64_t v17 = (char *)v24;
        if (v24 != __p)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *--uint64_t v16 = v19;
          }
          while (v17 != v18);
          unint64_t v17 = (char *)__p;
        }
        std::string __p = v16;
        uint64_t v24 = v11;
        uint64_t v25 = (uint64_t *)&v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *uint64_t v24 = v8;
        int v11 = v10 + 1;
      }
      uint64_t v24 = v11;
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    ++v4;
  }
  while (v4 != 8);
  int v20 = v24;
  if (v24 == __p)
  {
    uint64_t v21 = 0;
    if (!v24) {
      return v21;
    }
    goto LABEL_25;
  }
  uint64_t v21 = (*(uint64_t (**)(void, void **))(**((void **)this + 1) + 152))(*((void *)this + 1), &__p);
  int v20 = (uint64_t *)__p;
  if (__p)
  {
LABEL_25:
    uint64_t v24 = v20;
    operator delete(v20);
  }
  return v21;
}

void sub_18278C600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLPipelineBufferDescriptorArrayInternal *a2)
{
  uint64_t v4 = 0;
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  do
  {
    uint64_t v5 = a2->_descriptors[v4];
    if (v5)
    {
      id v6 = (id)*((void *)this + 15);
      if (!v6)
      {
        id v6 = (id)objc_opt_new();
        *((void *)this + 15) = v6;
      }
      if (![(MTLPipelineBufferDescriptorInternal *)v5 isEqual:v6])
      {
        uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 144))(*((void *)this + 1));
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 0, v4, 31);
        (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 1, -[MTLPipelineBufferDescriptorInternal mutability](v5, "mutability"), [v6 mutability]);
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
        uint64_t v9 = v8;
        int v10 = v24;
        if (v24 >= v25)
        {
          uint64_t v12 = ((char *)v24 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v13 = ((char *)v25 - (unsigned char *)__p) >> 2;
          if (v13 <= v12 + 1) {
            unint64_t v13 = v12 + 1;
          }
          if ((unint64_t)((char *)v25 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v25, v14);
          }
          else {
            unint64_t v15 = 0;
          }
          uint64_t v16 = (uint64_t *)&v15[8 * v12];
          *uint64_t v16 = v9;
          int v11 = v16 + 1;
          unint64_t v18 = (char *)__p;
          unint64_t v17 = (char *)v24;
          if (v24 != __p)
          {
            do
            {
              uint64_t v19 = *((void *)v17 - 1);
              v17 -= 8;
              *--uint64_t v16 = v19;
            }
            while (v17 != v18);
            unint64_t v17 = (char *)__p;
          }
          std::string __p = v16;
          uint64_t v24 = v11;
          uint64_t v25 = (uint64_t *)&v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *uint64_t v24 = v8;
          int v11 = v10 + 1;
        }
        uint64_t v24 = v11;
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
    }
    ++v4;
  }
  while (v4 != 31);
  int v20 = v24;
  if (v24 == __p)
  {
    uint64_t v21 = 0;
    if (!v24) {
      return v21;
    }
    goto LABEL_26;
  }
  uint64_t v21 = (*(uint64_t (**)(void, void **))(**((void **)this + 1) + 152))(*((void *)this + 1), &__p);
  int v20 = (uint64_t *)__p;
  if (__p)
  {
LABEL_26:
    uint64_t v24 = v20;
    operator delete(v20);
  }
  return v21;
}

void sub_18278C918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeComputePipelineDescriptorInternal(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a1 + 2);
  if (!v6)
  {
    uint64_t v6 = objc_opt_new();
    *((void *)a1 + 2) = v6;
  }
  uint64_t v7 = v6 + 16;
  uint64_t v8 = a3 + 16;
  if (*(void *)v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 2);
  }
  uint64_t v9 = *(void **)(v8 + 24);
  if (v9 && ([v9 isEqual:*(void *)(v7 + 24)] & 1) == 0)
  {
    uint64_t v10 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeStageInputOuputDescriptor(a1, *(MTLStageInputOutputDescriptor **)(v8 + 24));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 3, v10);
  }
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 1, *(unsigned __int8 *)(v8 + 16), *(unsigned __int8 *)(v7 + 16));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 8, *(unsigned __int16 *)(v8 + 18), *(unsigned __int16 *)(v7 + 18));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 7, *(unsigned __int8 *)(v8 + 80), *(unsigned __int8 *)(v7 + 80));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 10, *(void *)(v8 + 104), *(void *)(v7 + 104));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 12, *(unsigned __int8 *)(v8 + 136), *(unsigned __int8 *)(v7 + 136));
  uint64_t result = *(void *)(v8 + 48);
  if (result)
  {
    uint64_t result = [(id)result isEqual:*(void *)(v7 + 48)];
    if ((result & 1) == 0)
    {
      uint64_t v12 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 48));
      unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24);
      return v13(a2, 6, v12);
    }
  }
  return result;
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, const MTLPipelineLibrarySerializer::ComputePipelineDescriptor *a2)
{
  void v22[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 9);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  (*(void (**)(uint64_t, const char *))(*(void *)v5 + 64))(v5, "MTLComputePipelineDescriptor");
  if (*((char *)a2 + 23) < 0)
  {
    if (!*((void *)a2 + 1)) {
      goto LABEL_7;
    }
    uint64_t v6 = *(const MTLPipelineLibrarySerializer::ComputePipelineDescriptor **)a2;
    goto LABEL_6;
  }
  uint64_t v6 = a2;
  if (*((unsigned char *)a2 + 23)) {
LABEL_6:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 72))(v5, [NSString stringWithUTF8String:v6]);
LABEL_7:
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeComputePipelineDescriptorInternal(this, v5, *((void *)a2 + 9));
  if (*(void *)(v4 + 24))
  {
    uint64_t v7 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 24))(*((void *)this + 1), (char *)a2 + 80);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v5 + 24))(v5, 0, v7);
  }
  if (*((void *)a2 + 15) != *((void *)a2 + 14))
  {
    uint64_t v8 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v9 = *((void *)a2 + 14);
    if (*((void *)a2 + 15) != v9)
    {
      unint64_t v10 = 0;
      do
      {
        int v11 = *(uint64_t **)(v9 + 8 * v10);
        v21[0] = @"library";
        uint64_t v12 = *v11;
        v21[1] = @"index";
        v22[0] = v12;
        v22[1] = [NSNumber numberWithInt:v10];
        objc_msgSend(v8, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v22, v21, 2));
        ++v10;
        uint64_t v9 = *((void *)a2 + 14);
      }
      while (v10 < (*((void *)a2 + 15) - v9) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 24))(v5, 11, v8);
  }
  uint64_t v13 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 160))(*((void *)this + 1), (char *)a2 + 24);
  uint64_t v14 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 160))(*((void *)this + 1), (char *)a2 + 48);
  if (v13) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 24))(v5, 4, v13);
  }
  if (v14) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 24))(v5, 5, v14);
  }
  uint64_t v15 = *((void *)this + 1);
  int v16 = *((char *)a2 + 23);
  unint64_t v17 = *(const MTLPipelineLibrarySerializer::ComputePipelineDescriptor **)a2;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  if (v16 >= 0) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = v17;
  }
  (*(void (**)(uint64_t, const MTLPipelineLibrarySerializer::ComputePipelineDescriptor *, uint64_t))(*(void *)v15 + 176))(v15, v19, v18);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

void sub_18278CF98(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeRenderPipelineDescriptorInternal(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a1 + 3);
  if (!v6)
  {
    uint64_t v6 = objc_opt_new();
    *((void *)a1 + 3) = v6;
  }
  uint64_t v7 = v6 + 48;
  uint64_t v8 = a3 + 48;
  if (*(void *)(v8 + 248)) {
    (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, 0);
  }
  uint64_t v9 = *(void **)(v8 + 272);
  if (v9 && ([v9 isEqual:*(void *)(v7 + 272)] & 1) == 0)
  {
    uint64_t v10 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeVertexDescriptor(a1, *(MTLVertexDescriptor **)(v8 + 272));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 3, v10);
  }
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 4, *(void *)(v8 + 184), *(void *)(v7 + 184));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 5, *(void *)(v8 + 224) & 1, *(void *)(v7 + 224) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 6, (*(void *)(v8 + 224) >> 1) & 1, (*(void *)(v7 + 224) >> 1) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 7, (*(void *)(v8 + 224) >> 2) & 1, (*(void *)(v7 + 224) >> 2) & 1);
  (*(void (**)(uint64_t, uint64_t, float, float))(*(void *)a2 + 40))(a2, 27, *(float *)(v8 + 200), *(float *)(v7 + 200));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 28, *(void *)(v8 + 192), *(void *)(v7 + 192));
  if (*(void *)v8)
  {
    if (([*(id *)v8 isEqual:*(void *)v7] & 1) == 0)
    {
      uint64_t v11 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedAttachments(a1, *(MTLRenderPipelineColorAttachmentDescriptorArrayInternal **)v8);
      if (v11) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 8, v11);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24, (*(void *)(v8 + 224) >> 10) & 1, (*(void *)(v7 + 224) >> 10) & 1);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 26, *(unsigned int *)(v8 + 476), *(unsigned int *)(v7 + 476));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 9, *(void *)(v8 + 72), *(void *)(v7 + 72));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 10, *(void *)(v8 + 80), *(void *)(v7 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 11, (*(void *)(v8 + 224) >> 3) & 3, (*(void *)(v7 + 224) >> 3) & 3);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 12, *(void *)(v8 + 88), *(void *)(v7 + 88));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 13, *(void *)(v8 + 96), *(void *)(v7 + 96));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 14, *(unsigned __int8 *)(v8 + 104), *(unsigned __int8 *)(v7 + 104));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 15, *(void *)(v8 + 112), *(void *)(v7 + 112));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 16, *(void *)(v8 + 120), *(void *)(v7 + 120));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 17, *(void *)(v8 + 128), *(void *)(v7 + 128));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 18, *(void *)(v8 + 136), *(void *)(v7 + 136));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 25, *(unsigned __int8 *)(v8 + 152), *(unsigned __int8 *)(v7 + 152));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 30, *(void *)(v8 + 176), *(void *)(v7 + 176));
  uint64_t v12 = *(void **)(v8 + 408);
  if (v12 && ([v12 isEqual:*(void *)(v7 + 408)] & 1) == 0)
  {
    uint64_t v13 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 408));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 21, v13);
  }
  uint64_t v14 = *(void **)(v8 + 416);
  if (v14 && ([v14 isEqual:*(void *)(v7 + 416)] & 1) == 0)
  {
    uint64_t v15 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 416));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 22, v15);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 45, (*(void *)(v8 + 224) >> 26) & 1, (*(void *)(v7 + 224) >> 26) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 46, (*(void *)(v8 + 224) >> 23) & 7, (*(void *)(v7 + 224) >> 23) & 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 47, (*(void *)(v8 + 224) >> 31) & 1, (*(void *)(v7 + 224) >> 31) & 1);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 48, (*(void *)(v8 + 224) >> 15), (*(void *)(v7 + 224) >> 15));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 49, (*(void *)(v8 + 224) >> 14) & 1, (*(void *)(v7 + 224) >> 14) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 50, (*(void *)(v8 + 224) >> 13) & 1, (*(void *)(v7 + 224) >> 13) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 51, (*(void *)(v8 + 224) >> 12) & 1, (*(void *)(v7 + 224) >> 12) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 52, (*(void *)(v8 + 224) >> 11) & 1, (*(void *)(v7 + 224) >> 11) & 1);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 53, *(unsigned int *)(v8 + 232), *(unsigned int *)(v7 + 232));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 54, *(unsigned int *)(v8 + 236), *(unsigned int *)(v7 + 236));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 55, (*(void *)(v8 + 224) >> 27) & 0xFLL, (*(void *)(v7 + 224) >> 27) & 0xFLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 56, (*(void *)(v8 + 224) >> 6) & 1, (*(void *)(v7 + 224) >> 6) & 1);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 57, *(unsigned __int8 *)(v8 + 472), *(unsigned __int8 *)(v7 + 472));
  uint64_t v16 = *(unsigned int *)(v8 + 608);
  uint64_t v17 = *(unsigned int *)(v7 + 608);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32);

  return v18(a2, 58, v16, v17);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, const MTLPipelineLibrarySerializer::RenderPipelineDescriptor *a2)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
  (*(void (**)(uint64_t, const char *))(*(void *)v4 + 64))(v4, "MTLRenderPipelineDescriptor");
  if (*((char *)a2 + 23) < 0)
  {
    if (!*((void *)a2 + 1)) {
      goto LABEL_7;
    }
    uint64_t v5 = *(const MTLPipelineLibrarySerializer::RenderPipelineDescriptor **)a2;
    goto LABEL_6;
  }
  uint64_t v5 = a2;
  if (*((unsigned char *)a2 + 23)) {
LABEL_6:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 72))(v4, [NSString stringWithUTF8String:v5]);
LABEL_7:
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeRenderPipelineDescriptorInternal(this, v4, *((void *)a2 + 9));
  uint64_t v6 = *((void *)a2 + 9) + 48;
  if (*(void *)(*((void *)a2 + 9) + 304))
  {
    uint64_t v7 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 24))(*((void *)this + 1), (char *)a2 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 1, v7);
  }
  if (*(void *)(v6 + 264))
  {
    uint64_t v8 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 24))(*((void *)this + 1), (char *)a2 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 2, v8);
  }
  if (*((void *)a2 + 19) != *((void *)a2 + 18))
  {
    uint64_t v9 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v10 = *((void *)a2 + 18);
    if (*((void *)a2 + 19) != v10)
    {
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = *(uint64_t **)(v10 + 8 * v11);
        v29[0] = @"library";
        uint64_t v13 = *v12;
        v29[1] = @"index";
        v30[0] = v13;
        v30[1] = [NSNumber numberWithInt:v11];
        objc_msgSend(v9, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v30, v29, 2));
        ++v11;
        uint64_t v10 = *((void *)a2 + 18);
      }
      while (v11 < (*((void *)a2 + 19) - v10) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 24))(v4, 31, v9);
  }
  if (*((void *)a2 + 22) != *((void *)a2 + 21))
  {
    uint64_t v14 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v15 = *((void *)a2 + 21);
    if (*((void *)a2 + 22) != v15)
    {
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(uint64_t **)(v15 + 8 * v16);
        v27[0] = @"library";
        uint64_t v18 = *v17;
        v27[1] = @"index";
        v28[0] = v18;
        v28[1] = [NSNumber numberWithInt:v16];
        objc_msgSend(v14, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v28, v27, 2));
        ++v16;
        uint64_t v15 = *((void *)a2 + 21);
      }
      while (v16 < (*((void *)a2 + 22) - v15) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 24))(v4, 32, v14);
  }
  uint64_t v19 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 160))(*((void *)this + 1), (char *)a2 + 24);
  uint64_t v20 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 160))(*((void *)this + 1), (char *)a2 + 48);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 19, v19);
  }
  if (v20) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 20, v20);
  }
  uint64_t v21 = *((void *)this + 1);
  int v22 = *((char *)a2 + 23);
  uint64_t v23 = *(const MTLPipelineLibrarySerializer::RenderPipelineDescriptor **)a2;
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  if (v22 >= 0) {
    uint64_t v25 = a2;
  }
  else {
    uint64_t v25 = v23;
  }
  (*(void (**)(uint64_t, const MTLPipelineLibrarySerializer::RenderPipelineDescriptor *, uint64_t))(*(void *)v21 + 184))(v21, v25, v24);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

void sub_18278DE18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedTileAttachments(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, MTLTileRenderPipelineColorAttachmentDescriptorArrayInternal *a2)
{
  uint64_t v4 = 0;
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  do
  {
    uint64_t v5 = a2->_descriptors[v4];
    if (v5)
    {
      uint64_t v6 = (void *)*((void *)this + 12);
      if (!v6)
      {
        uint64_t v6 = objc_opt_new();
        *((void *)this + 12) = v6;
      }
      uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 128))(*((void *)this + 1));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 0, v4, 8);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v7 + 32))(v7, 1, -[MTLTileRenderPipelineColorAttachmentDescriptorInternal pixelFormat](v5, "pixelFormat"), [v6 pixelFormat]);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
      uint64_t v9 = v8;
      uint64_t v10 = v24;
      if (v24 >= v25)
      {
        uint64_t v12 = ((char *)v24 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = ((char *)v25 - (unsigned char *)__p) >> 2;
        if (v13 <= v12 + 1) {
          unint64_t v13 = v12 + 1;
        }
        if ((unint64_t)((char *)v25 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v25, v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = (uint64_t *)&v15[8 * v12];
        *unint64_t v16 = v9;
        unint64_t v11 = v16 + 1;
        uint64_t v18 = (char *)__p;
        uint64_t v17 = (char *)v24;
        if (v24 != __p)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *--unint64_t v16 = v19;
          }
          while (v17 != v18);
          uint64_t v17 = (char *)__p;
        }
        std::string __p = v16;
        uint64_t v24 = v11;
        uint64_t v25 = (uint64_t *)&v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *uint64_t v24 = v8;
        unint64_t v11 = v10 + 1;
      }
      uint64_t v24 = v11;
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    ++v4;
  }
  while (v4 != 8);
  uint64_t v20 = v24;
  if (v24 == __p)
  {
    uint64_t v21 = 0;
    if (!v24) {
      return v21;
    }
    goto LABEL_25;
  }
  uint64_t v21 = (*(uint64_t (**)(void, void **))(**((void **)this + 1) + 152))(*((void *)this + 1), &__p);
  uint64_t v20 = (uint64_t *)__p;
  if (__p)
  {
LABEL_25:
    uint64_t v24 = v20;
    operator delete(v20);
  }
  return v21;
}

void sub_18278E120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeTileRenderPipelineDescriptorInternal(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a1 + 13);
  if (!v6)
  {
    uint64_t v6 = objc_opt_new();
    *((void *)a1 + 13) = v6;
  }
  uint64_t v7 = v6 + 32;
  uint64_t v8 = a3 + 32;
  if (*(void *)(v8 + 16)) {
    (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, 0);
  }
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 4, *(unsigned __int8 *)(v8 + 32), *(unsigned __int8 *)(v7 + 32));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 6, *(unsigned __int16 *)(v8 + 64), *(unsigned __int16 *)(v7 + 64));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 2, *(void *)(v8 + 8), *(void *)(v7 + 8));
  if (*(void *)v8)
  {
    if (([*(id *)v8 isEqual:*(void *)v7] & 1) == 0)
    {
      uint64_t v9 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedTileAttachments(a1, *(MTLTileRenderPipelineColorAttachmentDescriptorArrayInternal **)v8);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 3, v9);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 8, *(void *)(v8 + 72), *(void *)(v7 + 72));
  uint64_t result = *(void *)(v8 + 56);
  if (result)
  {
    uint64_t result = [(id)result isEqual:*(void *)(v7 + 56)];
    if ((result & 1) == 0)
    {
      uint64_t v11 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 56));
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24);
      return v12(a2, 5, v11);
    }
  }
  return result;
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t **a2)
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(void *))(**((void **)a1 + 1) + 120))(*((void **)a1 + 1));
  (*(void (**)(uint64_t, const char *))(*(void *)v4 + 64))(v4, "MTLTileRenderPipelineDescriptor");
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1]) {
      goto LABEL_7;
    }
    uint64_t v5 = *a2;
    goto LABEL_6;
  }
  uint64_t v5 = (uint64_t *)a2;
  if (*((unsigned char *)a2 + 23)) {
LABEL_6:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 72))(v4, [NSString stringWithUTF8String:v5]);
LABEL_7:
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeTileRenderPipelineDescriptorInternal(a1, v4, (uint64_t)a2[9]);
  if (a2[9][7])
  {
    uint64_t v6 = (*(uint64_t (**)(void *, uint64_t *))(**((void **)a1 + 1) + 24))(*((void **)a1 + 1), (uint64_t *)a2 + 10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 1, v6);
  }
  if (a2[15] != a2[14])
  {
    uint64_t v7 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v8 = a2[14];
    if (a2[15] != v8)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = (uint64_t *)v8[v9];
        v20[0] = @"library";
        uint64_t v11 = *v10;
        v20[1] = @"index";
        v21[0] = v11;
        v21[1] = [NSNumber numberWithInt:v9];
        objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v21, v20, 2));
        ++v9;
        uint64_t v8 = a2[14];
      }
      while (v9 < a2[15] - v8);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 24))(v4, 7, v7);
  }
  uint64_t v12 = (*(uint64_t (**)(void *, uint64_t *))(**((void **)a1 + 1) + 160))(*((void **)a1 + 1), (uint64_t *)a2 + 3);
  uint64_t v13 = (*(uint64_t (**)(void *, uint64_t *))(**((void **)a1 + 1) + 160))(*((void **)a1 + 1), (uint64_t *)a2 + 6);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 9, v12);
  }
  if (v13) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 10, v13);
  }
  unint64_t v14 = (void *)*((void *)a1 + 1);
  int v15 = *((char *)a2 + 23);
  unint64_t v16 = *a2;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  if (v15 >= 0) {
    uint64_t v18 = (uint64_t *)a2;
  }
  else {
    uint64_t v18 = v16;
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*v14 + 192))(v14, v18, v17);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

void sub_18278E75C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeMeshRenderPipelineDescriptorInternal(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)*((void *)a1 + 14);
  if (!v6)
  {
    uint64_t v6 = objc_opt_new();
    *((void *)a1 + 14) = v6;
  }
  uint64_t v7 = [v6 _descriptorPrivate];
  uint64_t v8 = [a3 _descriptorPrivate];
  if (*(void *)(v8 + 80)) {
    (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, 0);
  }
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 4, *(void *)(v8 + 112), *(void *)(v7 + 112));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 5, *(void *)(v8 + 120), *(void *)(v7 + 120));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 6, (*(void *)(v8 + 60) >> 39) & 1, (*(void *)(v7 + 60) >> 39) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 7, (*(void *)(v8 + 60) >> 40) & 1, (*(void *)(v7 + 60) >> 40) & 1);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 8, *(void *)(v8 + 136), *(void *)(v7 + 136));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 9, *(void *)(v8 + 128), *(void *)(v7 + 128));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 13, *(void *)(v8 + 32), *(void *)(v7 + 32));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 14, *(void *)(v8 + 60) & 1, *(void *)(v7 + 60) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 15, (*(void *)(v8 + 60) >> 1) & 1, (*(void *)(v7 + 60) >> 1) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, (*(void *)(v8 + 60) >> 2) & 1, (*(void *)(v7 + 60) >> 2) & 1);
  (*(void (**)(uint64_t, uint64_t, float, float))(*(void *)a2 + 40))(a2, 28, *(float *)(v8 + 56), *(float *)(v7 + 56));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 27, *(void *)(v8 + 48), *(void *)(v7 + 48));
  if (*(void *)v8)
  {
    if (([*(id *)v8 isEqual:*(void *)v7] & 1) == 0)
    {
      uint64_t v9 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedAttachments(a1, *(MTLRenderPipelineColorAttachmentDescriptorArrayInternal **)v8);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 20, v9);
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 19, (*(void *)(v8 + 60) >> 7) & 1, (*(void *)(v7 + 60) >> 7) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 18, (*(void *)(v8 + 60) >> 35) & 0xFLL, (*(void *)(v7 + 60) >> 35) & 0xFLL);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 21, *(void *)(v8 + 8), *(void *)(v7 + 8));
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 22, *(void *)(v8 + 16), *(void *)(v7 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 23, (*(void *)(v8 + 60) >> 31) & 1, (*(void *)(v7 + 60) >> 31) & 1);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 29, *(void *)(v8 + 24), *(void *)(v7 + 24));
  uint64_t v10 = *(void **)(v8 + 144);
  if (v10 && ([v10 isEqual:*(void *)(v7 + 144)] & 1) == 0)
  {
    uint64_t v11 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 144));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 10, v11);
  }
  uint64_t v12 = *(void **)(v8 + 152);
  if (v12 && ([v12 isEqual:*(void *)(v7 + 152)] & 1) == 0)
  {
    uint64_t v13 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 152));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 11, v13);
  }
  unint64_t v14 = *(void **)(v8 + 160);
  if (v14 && ([v14 isEqual:*(void *)(v7 + 160)] & 1) == 0)
  {
    uint64_t v15 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializedBuffers(a1, *(MTLPipelineBufferDescriptorArrayInternal **)(v8 + 160));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 12, v15);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 30, (*(void *)(v8 + 60) >> 23) & 1, (*(void *)(v7 + 60) >> 23) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 31, (*(void *)(v8 + 60) >> 20) & 7, (*(void *)(v7 + 60) >> 20) & 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32, (*(void *)(v8 + 60) >> 28) & 1, (*(void *)(v7 + 60) >> 28) & 1);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 33, (*(void *)(v8 + 60) >> 12), (*(void *)(v7 + 60) >> 12));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 34, (*(void *)(v8 + 60) >> 11) & 1, (*(void *)(v7 + 60) >> 11) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 35, (*(void *)(v8 + 60) >> 10) & 1, (*(void *)(v7 + 60) >> 10) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 36, (*(void *)(v8 + 60) >> 9) & 1, (*(void *)(v7 + 60) >> 9) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 37, (*(void *)(v8 + 60) >> 8) & 1, (*(void *)(v7 + 60) >> 8) & 1);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a2 + 32))(a2, 38, *(unsigned int *)(v8 + 68), *(unsigned int *)(v7 + 68));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 39, (*(void *)(v8 + 60) >> 24) & 0xFLL, (*(void *)(v7 + 60) >> 24) & 0xFLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, (*(void *)(v8 + 60) >> 3) & 1, (*(void *)(v7 + 60) >> 3) & 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 41, (*(void *)(v8 + 60) >> 30) & 1, (*(void *)(v7 + 60) >> 30) & 1);
  uint64_t v16 = *(unsigned int *)(v8 + 288);
  uint64_t v17 = *(unsigned int *)(v7 + 288);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32);

  return v18(a2, 44, v16, v17);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this, const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor *a2)
{
  _OWORD v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 136))(*((void *)this + 1));
  (*(void (**)(uint64_t, const char *))(*(void *)v4 + 64))(v4, "MTLMeshRenderPipelineDescriptor");
  if (*((char *)a2 + 23) < 0)
  {
    if (!*((void *)a2 + 1)) {
      goto LABEL_7;
    }
    uint64_t v5 = *(const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor **)a2;
    goto LABEL_6;
  }
  uint64_t v5 = a2;
  if (*((unsigned char *)a2 + 23)) {
LABEL_6:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 72))(v4, [NSString stringWithUTF8String:v5]);
LABEL_7:
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeMeshRenderPipelineDescriptorInternal(this, v4, *((void **)a2 + 9));
  uint64_t v6 = (void *)[*((id *)a2 + 9) _descriptorPrivate];
  if (v6[11])
  {
    uint64_t v7 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 24))(*((void *)this + 1), (char *)a2 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 1, v7);
  }
  if (v6[12])
  {
    uint64_t v8 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 24))(*((void *)this + 1), (char *)a2 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 2, v8);
  }
  if (v6[13])
  {
    uint64_t v9 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 24))(*((void *)this + 1), (char *)a2 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 3, v9);
  }
  if (*((void *)a2 + 23) != *((void *)a2 + 22))
  {
    uint64_t v10 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v11 = *((void *)a2 + 22);
    if (*((void *)a2 + 23) != v11)
    {
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(uint64_t **)(v11 + 8 * v12);
        v37[0] = @"library";
        uint64_t v14 = *v13;
        v37[1] = @"index";
        v38[0] = v14;
        v38[1] = [NSNumber numberWithInt:v12];
        objc_msgSend(v10, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v38, v37, 2));
        ++v12;
        uint64_t v11 = *((void *)a2 + 22);
      }
      while (v12 < (*((void *)a2 + 23) - v11) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 24))(v4, 24, v10);
  }
  if (*((void *)a2 + 26) != *((void *)a2 + 25))
  {
    uint64_t v15 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v16 = *((void *)a2 + 25);
    if (*((void *)a2 + 26) != v16)
    {
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = *(uint64_t **)(v16 + 8 * v17);
        v35[0] = @"library";
        uint64_t v19 = *v18;
        v35[1] = @"index";
        v36[0] = v19;
        v36[1] = [NSNumber numberWithInt:v17];
        objc_msgSend(v15, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v36, v35, 2));
        ++v17;
        uint64_t v16 = *((void *)a2 + 25);
      }
      while (v17 < (*((void *)a2 + 26) - v16) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 24))(v4, 25, v15);
  }
  if (*((void *)a2 + 29) != *((void *)a2 + 28))
  {
    uint64_t v20 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v21 = *((void *)a2 + 28);
    if (*((void *)a2 + 29) != v21)
    {
      unint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(uint64_t **)(v21 + 8 * v22);
        v33[0] = @"library";
        uint64_t v24 = *v23;
        v33[1] = @"index";
        v34[0] = v24;
        v34[1] = [NSNumber numberWithInt:v22];
        objc_msgSend(v20, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v34, v33, 2));
        ++v22;
        uint64_t v21 = *((void *)a2 + 28);
      }
      while (v22 < (*((void *)a2 + 29) - v21) >> 3);
    }
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 24))(v4, 26, v20);
  }
  uint64_t v25 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 160))(*((void *)this + 1), (char *)a2 + 24);
  uint64_t v26 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 160))(*((void *)this + 1), (char *)a2 + 48);
  if (v25) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 42, v25);
  }
  if (v26) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, 43, v26);
  }
  uint64_t v27 = *((void *)this + 1);
  int v28 = *((char *)a2 + 23);
  uint64_t v29 = *(const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor **)a2;
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  if (v28 >= 0) {
    uint64_t v31 = a2;
  }
  else {
    uint64_t v31 = v29;
  }
  (*(void (**)(uint64_t, const MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor *, uint64_t))(*(void *)v27 + 200))(v27, v31, v30);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

void sub_18278F584(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::valueFromConstantData(MTLPipelineLibrarySerializer *this, _DWORD *a2, const char *a3, double _D0)
{
  if ((int)this <= 36)
  {
    if ((int)this > 28)
    {
      if (this == 29)
      {
        uint64_t v21 = *a2;
        unint64_t v22 = NSNumber;
        return [v22 numberWithInt:v21];
      }
      else
      {
        if (this != 33) {
          goto LABEL_36;
        }
        uint64_t v15 = *a2;
        uint64_t v16 = NSNumber;
        return [v16 numberWithUnsignedInt:v15];
      }
    }
    else
    {
      if (this == 3)
      {
        LODWORD(_D0) = *a2;
        uint64_t v8 = NSNumber;
      }
      else
      {
        if (this != 16) {
          goto LABEL_36;
        }
        _H0 = *(_WORD *)a2;
        uint64_t v8 = NSNumber;
        __asm { FCVT            S0, H0 }
      }
      return objc_msgSend(v8, "numberWithFloat:", a3, _D0);
    }
  }
  else if ((int)this <= 44)
  {
    if (this == 37)
    {
      uint64_t v19 = *(__int16 *)a2;
      uint64_t v20 = NSNumber;
      return [v20 numberWithShort:v19];
    }
    else
    {
      if (this != 41) {
        goto LABEL_36;
      }
      uint64_t v13 = *(unsigned __int16 *)a2;
      uint64_t v14 = NSNumber;
      return [v14 numberWithUnsignedShort:v13];
    }
  }
  else
  {
    if (this != 45)
    {
      if (this == 49 || this == 53)
      {
        uint64_t v4 = *(unsigned __int8 *)a2;
        uint64_t v5 = NSNumber;
        return [v5 numberWithUnsignedChar:v4];
      }
LABEL_36:
      abort();
    }
    uint64_t v17 = *(char *)a2;
    uint64_t v18 = NSNumber;
    return [v18 numberWithChar:v17];
  }
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setVector(id *this, unsigned int a2, uint64_t a3, char *a4)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  LODWORD(v8) = MTLDataTypeGetComponentCount(a3);
  uint64_t ComponentType = (MTLPipelineLibrarySerializer *)MTLDataTypeGetComponentType(a3);
  unint64_t v12 = ComponentType;
  if (v8 == 1)
  {
    uint64_t v13 = MTLPipelineLibrarySerializer::valueFromConstantData(ComponentType, a4, v10, v11);
  }
  else
  {
    uint64_t v14 = v8;
    MEMORY[0x1F4188790](ComponentType);
    uint64_t v16 = (char *)v23 - v15;
    uint64_t v17 = _MTLConstantDataSize((uint64_t)v12);
    if (v8)
    {
      uint64_t v20 = v17;
      uint64_t v8 = v8;
      uint64_t v21 = (uint64_t *)v16;
      do
      {
        *v21++ = MTLPipelineLibrarySerializer::valueFromConstantData(v12, a4, v18, v19);
        a4 += v20;
        --v8;
      }
      while (v8);
    }
    uint64_t v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:v14];
  }
  return [this[1] setObject:v13 forKeyedSubscript:*((void *)this[2] + a2)];
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addLibrary(MTLPipelineLibrarySerializer::JSONSerializationContext *this, MTLPipelineLibrarySerializer::LibraryDescriptor *a2)
{
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = *((void *)this + 3);
  uint64_t v4 = (char *)this + 16;
  uint64_t v7 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionaryWithObjectsAndKeys:", @"MTLLibrary", @"type", *(void *)a2, @"name", *((void *)a2 + 1), @"fileName", 0);
  if (v4[24]) {
    objc_msgSend(v7, "setValue:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)a2 + 16)), @"isFromSource");
  }
  unint64_t v8 = *((void *)this + 4);
  uint64_t v9 = (void *)*((void *)this + 3);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = ((uint64_t)v9 - *(void *)v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - *(void *)v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = v7;
    uint64_t v10 = v16 + 8;
    double v19 = (char *)*((void *)this + 2);
    uint64_t v18 = (char *)*((void *)this + 3);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = *(char **)v4;
    }
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v10;
    *((void *)this + 4) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v9 = v7;
    uint64_t v10 = v9 + 1;
  }
  *((void *)this + 3) = v10;
  [*((id *)this + 1) addObject:v7];
  return (v6 - v5) >> 3;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::serializeFunctionRef(uint64_t a1, unsigned int *a2)
{
  void v12[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if ((v2 & 0x80000000) != 0)
  {
    uint64_t v7 = *((void *)a2 + 1);
    v9[0] = @"name";
    v9[1] = @"library";
    v10[0] = v7;
    v10[1] = @"specialized";
    uint64_t v4 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v5 = v10;
    uint64_t v6 = v9;
  }
  else
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 16) + 8 * v2);
    v12[0] = *((void *)a2 + 1);
    v11[0] = @"name";
    v11[1] = @"library";
    v12[1] = objc_msgSend(v3, "objectForKeyedSubscript:");
    uint64_t v4 = (void *)MEMORY[0x1E4F1C9E8];
    uint64_t v5 = v12;
    uint64_t v6 = v11;
  }
  return [v4 dictionaryWithObjects:v5 forKeys:v6 count:2];
}

void MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::PipelineLibraryJSONSerializer(MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *this, char a2)
{
  uint64_t v3 = MTLPipelineLibrarySerializer::PipelineLibrarySerializer::PipelineLibrarySerializer(this);
  *(void *)uint64_t v3 = &unk_1ECAC6FB8;
  *((unsigned char *)v3 + 128) = (a2 & 4) != 0;
  operator new();
}

void sub_18278FB74(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v2, 0x1081C40A1D151D1);
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer(v1);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::~PipelineLibraryJSONSerializer(MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *this)
{
  *(void *)this = &unk_1ECAC6FB8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer((id *)this);
}

{
  uint64_t vars8;

  MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::~PipelineLibraryJSONSerializer(this);

  JUMPOUT(0x18530C140);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::getSerializedArray(MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *this)
{
  return *(void *)(*((void *)this + 1) + 8);
}

id MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer::finalize(MTLPipelineLibrarySerializer::PipelineLibraryJSONSerializer *this)
{
  id v1 = *(id *)(*((void *)this + 1) + 8);
  if (v1)
  {
    if (!*((unsigned char *)this + 128))
    {
      uint64_t v2 = objc_msgSend(NSString, "stringWithFormat:", @"%u.%u", 1, 0);
      id v1 = (id)objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", @"Offline Compilation", @"type", v2, @"version", v1, @"contents", 0);
    }
    id v9 = 0;
    id v1 = (id)[MEMORY[0x1E4F28D90] dataWithJSONObject:v1 options:1 error:&v9];
    if (!v1)
    {
      uint64_t v4 = [v9 description];
      MTLReportFailure(0, "finalize", 1950, @"serialization failed with error: %@", v5, v6, v7, v8, v4);
    }
  }
  return v1;
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addLibrary(MTLPipelineLibrarySerializer::BinarySerializationContext *this, MTLPipelineLibrarySerializer::LibraryDescriptor *a2)
{
}

void MTLSerializer::Context::CreatePropertyListSerializer(MTLSerializer::Context *this)
{
}

void sub_18278FFA8(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1091C401AA4FD07);
  _Unwind_Resume(a1);
}

uint64_t MTLSerializer::Context::CreateString(MTLSerializer::Context *this, const char *a2)
{
  if (a2) {
    operator new();
  }
  return 0;
}

void sub_1827900E8(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1091C40510CC53ALL);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  uint64_t v1 = *((void *)this + 42);
  if (!v1) {
    MTLSerializer::Context::CreatePropertyListSerializer((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312));
  }
  return *(void *)(v1 + 32);
}

void MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>()
{
}

void sub_182790390(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1091C401AA4FD07);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::PipelineLibraryBinarySerializer(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this)
{
  *(void *)MTLPipelineLibrarySerializer::PipelineLibrarySerializer::PipelineLibrarySerializer(MTLLibraryCache::releaseLibraryData(*((os_unfair_lock_s **)this + 18), this) = &unk_1ECAC7050;
  operator new();
}

void sub_182790480(_Unwind_Exception *a1)
{
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer(v1);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::~PipelineLibraryBinarySerializer(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this)
{
  *(void *)this = &unk_1ECAC7050;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::~PipelineLibrarySerializer((id *)this);
}

{
  uint64_t vars8;

  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::~PipelineLibraryBinarySerializer(this);

  JUMPOUT(0x18530C140);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::getTotalSize(MTLPipelineLibrarySerializer::BinarySerializationContext **this)
{
  return MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(this[1]);
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::writeToMemory(MTLPipelineLibrarySerializer::BinarySerializationContext **this, char *a2, unint64_t a3)
{
  return MTLPipelineLibrarySerializer::BinarySerializationContext::writeToMemory(this[1], a2, a3);
}

uint64_t MTLPipelineLibrarySerializer::BinarySerializationContext::writeToMemory(MTLPipelineLibrarySerializer::BinarySerializationContext *this, char *a2, unint64_t a3)
{
  if (MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(this) > a3) {
    return 0;
  }
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 42) + 16);

  return v5();
}

void *MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::finalize(MTLPipelineLibrarySerializer::BinarySerializationContext **this)
{
  unint64_t v2 = MTLPipelineLibrarySerializer::BinarySerializationContext::serializePipelineLibrary(this[1]);
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F1CA58]) initWithLength:v2];
  if (MTLPipelineLibrarySerializer::BinarySerializationContext::writeToMemory(this[1], (char *)[v3 bytes], v2) != v2)
  {

    return 0;
  }
  return v3;
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *a1, void *a2)
{
  (*(void (**)(void *))(*a2 + 56))(a2);
  uint64_t v4 = (void *)a2[2];
  size_t v5 = v4[4];
  uint64_t v6 = malloc_type_malloc(v5, 0xEC489865uLL);
  (*(void (**)(void *, void *, size_t))(*v4 + 16))(v4, v6, v5);
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::resetContext(a1);
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::resetContext(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator new();
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, MTLRenderPipelineDescriptor *a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeRenderPipelineDescriptorInternal(this, (uint64_t)v4, (uint64_t)a2);
  size_t v5 = a2 + 1;
  vertexPreloadedLibraries = v5[5]._vertexPreloadedLibraries;
  if (vertexPreloadedLibraries) {
    (*(void (**)(void *, uint64_t, void, uint64_t))(*v4 + 32))(v4, 1, [(NSArray *)vertexPreloadedLibraries functionRef], -1);
  }
  fragmentPreloadedLibraries = v5[5]._fragmentPreloadedLibraries;
  if (fragmentPreloadedLibraries) {
    (*(void (**)(void *, uint64_t, void, uint64_t))(*v4 + 32))(v4, 2, [(NSArray *)fragmentPreloadedLibraries functionRef], -1);
  }
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(this, v4);
}

void sub_18279093C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeComputePipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, MTLComputePipelineDescriptor *a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeComputePipelineDescriptorInternal(this, (uint64_t)v4, (uint64_t)a2);
  insertLibraries = a2[1]._insertLibraries;
  if (insertLibraries) {
    (*(void (**)(void *, void, void, uint64_t))(*v4 + 32))(v4, 0, [(NSArray *)insertLibraries functionRef], -1);
  }
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(this, v4);
}

void sub_182790A78(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, MTLTileRenderPipelineDescriptor *a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(**((void **)this + 1) + 120))(*((void *)this + 1));
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeTileRenderPipelineDescriptorInternal(this, (uint64_t)v4, (uint64_t)a2);
  maxCallStackDepth = (void *)a2[1]._maxCallStackDepth;
  if (maxCallStackDepth) {
    (*(void (**)(void *, uint64_t, void, uint64_t))(*v4 + 32))(v4, 1, [maxCallStackDepth functionRef], -1);
  }
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(this, v4);
}

void sub_182790BB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer *this, MTLMeshRenderPipelineDescriptor *a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(**((void **)this + 1) + 136))(*((void *)this + 1));
  MTLPipelineLibrarySerializer::PipelineLibrarySerializer::serializeMeshRenderPipelineDescriptorInternal(this, (uint64_t)v4, a2);
  size_t v5 = [(MTLMeshRenderPipelineDescriptor *)a2 _descriptorPrivate];
  objectFunction = v5->objectFunction;
  if (objectFunction) {
    (*(void (**)(void *, uint64_t, void, uint64_t))(*v4 + 32))(v4, 1, [(MTLFunction *)objectFunction functionRef], -1);
  }
  meshFunction = v5->meshFunction;
  if (meshFunction) {
    (*(void (**)(void *, uint64_t, void, uint64_t))(*v4 + 32))(v4, 2, [(MTLFunction *)meshFunction functionRef], -1);
  }
  fragmentFunction = v5->fragmentFunction;
  if (fragmentFunction) {
    (*(void (**)(void *, uint64_t, void, uint64_t))(*v4 + 32))(v4, 3, [(MTLFunction *)fragmentFunction functionRef], -1);
  }
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::serializeWithNameObjectSerializer(this, v4);
}

void sub_182790D64(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::deserializeStageInputDescriptor(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  v37[0] = a3;
  v37[1] = a4;
  uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v29, v37);
  if (v32 < v31)
  {
    while (1)
    {
      switch(v34)
      {
        case 0:
          uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v29);
          uint64_t v27 = result;
          unint64_t v28 = v6;
          if (!result) {
            goto LABEL_49;
          }
          if (v6 <= 3) {
            goto LABEL_53;
          }
          int v7 = *(_DWORD *)result;
          if (!*(_DWORD *)result) {
            goto LABEL_49;
          }
          unsigned int v8 = 0;
          do
          {
            uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v27, v8);
            if (result)
            {
              uint64_t v10 = result;
              uint64_t v11 = v9;
              uint64_t v12 = (void *)[a2 attributes];
              unint64_t v46 = v10;
              uint64_t v47 = v11;
              uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v38, &v46);
              if (v41 < v40)
              {
                uint64_t v13 = 0;
                int v14 = v43;
                while (1)
                {
                  switch(v14)
                  {
                    case 0:
                      unsigned int __dst = 0;
                      if (v44 + v45 > v39) {
                        goto LABEL_53;
                      }
                      memcpy(&__dst, (const void *)(v38 + v45), v44);
                      uint64_t result = (unsigned __int8 *)[v12 objectAtIndexedSubscript:__dst];
                      uint64_t v13 = result;
                      break;
                    case 1:
                      unsigned int __dst = 0;
                      if (v44 + v45 > v39) {
                        goto LABEL_53;
                      }
                      memcpy(&__dst, (const void *)(v38 + v45), v44);
                      uint64_t result = (unsigned __int8 *)[v13 setFormat:__dst];
                      break;
                    case 2:
                      unsigned int __dst = 0;
                      if (v44 + v45 > v39) {
                        goto LABEL_53;
                      }
                      memcpy(&__dst, (const void *)(v38 + v45), v44);
                      uint64_t result = (unsigned __int8 *)[v13 setOffset:__dst];
                      break;
                    case 3:
                      unsigned int __dst = 0;
                      if (v44 + v45 > v39) {
                        goto LABEL_53;
                      }
                      memcpy(&__dst, (const void *)(v38 + v45), v44);
                      uint64_t result = (unsigned __int8 *)[v13 setBufferIndex:__dst];
                      break;
                    default:
                      break;
                  }
                  if (++v41 >= v40) {
                    break;
                  }
                  if (v42 + 2 > v39) {
                    goto LABEL_53;
                  }
                  int v14 = *(unsigned __int8 *)(v38 + v42);
                  size_t v15 = *(unsigned __int8 *)(v38 + v42 + 1);
                  int v43 = v14;
                  size_t v44 = v15;
                  uint64_t v45 = v42 + 2;
                  v42 += 2 + v15;
                }
              }
            }
            ++v8;
          }
          while (v8 != v7);
          goto LABEL_49;
        case 1:
          uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v29);
          uint64_t v27 = result;
          unint64_t v28 = v16;
          if (!result) {
            goto LABEL_49;
          }
          if (v16 <= 3) {
            goto LABEL_53;
          }
          int v17 = *(_DWORD *)result;
          if (!*(_DWORD *)result) {
            goto LABEL_49;
          }
          unsigned int v18 = 0;
          break;
        case 2:
          LODWORD(v38) = 0;
          if (v35 + v36 > v30) {
            goto LABEL_53;
          }
          memcpy(&v38, (const void *)(v29 + v36), v35);
          uint64_t result = (unsigned __int8 *)[a2 setIndexType:v38];
          goto LABEL_49;
        case 3:
          LODWORD(v38) = 0;
          if (v35 + v36 > v30) {
            goto LABEL_53;
          }
          memcpy(&v38, (const void *)(v29 + v36), v35);
          uint64_t result = (unsigned __int8 *)[a2 setIndexBufferIndex:v38];
          goto LABEL_49;
        default:
          goto LABEL_49;
      }
      do
      {
        uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v27, v18);
        if (result)
        {
          uint64_t v20 = result;
          uint64_t v21 = v19;
          unint64_t v22 = (void *)[a2 layouts];
          unint64_t v46 = v20;
          uint64_t v47 = v21;
          uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v38, &v46);
          if (v41 < v40)
          {
            uint64_t v23 = 0;
            int v24 = v43;
            while (1)
            {
              switch(v24)
              {
                case 0:
                  unsigned int __dst = 0;
                  if (v44 + v45 > v39) {
                    goto LABEL_53;
                  }
                  memcpy(&__dst, (const void *)(v38 + v45), v44);
                  uint64_t result = (unsigned __int8 *)[v22 objectAtIndexedSubscript:__dst];
                  uint64_t v23 = result;
                  break;
                case 1:
                  unsigned int __dst = 0;
                  if (v44 + v45 > v39) {
                    goto LABEL_53;
                  }
                  memcpy(&__dst, (const void *)(v38 + v45), v44);
                  uint64_t result = (unsigned __int8 *)[v23 setStepFunction:__dst];
                  break;
                case 2:
                  unsigned int __dst = 0;
                  if (v44 + v45 > v39) {
                    goto LABEL_53;
                  }
                  memcpy(&__dst, (const void *)(v38 + v45), v44);
                  uint64_t result = (unsigned __int8 *)[v23 setStepRate:__dst];
                  break;
                case 3:
                  unsigned int __dst = 0;
                  if (v44 + v45 > v39) {
                    goto LABEL_53;
                  }
                  memcpy(&__dst, (const void *)(v38 + v45), v44);
                  uint64_t result = (unsigned __int8 *)[v23 setStride:__dst];
                  break;
                default:
                  break;
              }
              if (++v41 >= v40) {
                break;
              }
              if (v42 + 2 > v39) {
                goto LABEL_53;
              }
              int v24 = *(unsigned __int8 *)(v38 + v42);
              size_t v25 = *(unsigned __int8 *)(v38 + v42 + 1);
              int v43 = v24;
              size_t v44 = v25;
              uint64_t v45 = v42 + 2;
              v42 += 2 + v25;
            }
          }
        }
        ++v18;
      }
      while (v18 != v17);
LABEL_49:
      if (++v32 >= v31) {
        break;
      }
      if (v33 + 2 > v30) {
LABEL_53:
      }
        abort();
      size_t v26 = *(unsigned __int8 *)(v29 + v33 + 1);
      int v34 = *(unsigned __int8 *)(v29 + v33);
      size_t v35 = v26;
      uint64_t v36 = v33 + 2;
      v33 += 2 + v26;
    }
  }
  return result;
}

unsigned __int8 *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::deserializeVertexDescriptor(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  v36[0] = a3;
  v36[1] = a4;
  uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)v29, v36);
  if (v31 < v30)
  {
    while (1)
    {
      if (v33 == 1)
      {
        uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)v29);
        uint64_t v27 = result;
        unint64_t v28 = v16;
        if (result)
        {
          if (v16 <= 3) {
            goto LABEL_49;
          }
          int v17 = *(_DWORD *)result;
          if (*(_DWORD *)result)
          {
            unsigned int v18 = 0;
            do
            {
              uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v27, v18);
              if (result)
              {
                uint64_t v20 = result;
                uint64_t v21 = v19;
                unint64_t v22 = (void *)[a2 layouts];
                uint64_t v45 = v20;
                uint64_t v46 = v21;
                uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v37, &v45);
                if (v40 < v39)
                {
                  uint64_t v23 = 0;
                  int v24 = v42;
                  while (1)
                  {
                    switch(v24)
                    {
                      case 0:
                        unsigned int __dst = 0;
                        if (v43 + v44 > v38) {
                          goto LABEL_49;
                        }
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        uint64_t result = (unsigned __int8 *)[v22 objectAtIndexedSubscript:__dst];
                        uint64_t v23 = result;
                        break;
                      case 1:
                        unsigned int __dst = 0;
                        if (v43 + v44 > v38) {
                          goto LABEL_49;
                        }
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        uint64_t result = (unsigned __int8 *)[v23 setStepFunction:__dst];
                        break;
                      case 2:
                        unsigned int __dst = 0;
                        if (v43 + v44 > v38) {
                          goto LABEL_49;
                        }
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        uint64_t result = (unsigned __int8 *)[v23 setStepRate:__dst];
                        break;
                      case 3:
                        unsigned int __dst = 0;
                        if (v43 + v44 > v38) {
                          goto LABEL_49;
                        }
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        uint64_t result = (unsigned __int8 *)[v23 setStride:__dst];
                        break;
                      default:
                        break;
                    }
                    if (++v40 >= v39) {
                      break;
                    }
                    if (v41 + 2 > v38) {
                      goto LABEL_49;
                    }
                    int v24 = *(unsigned __int8 *)(v37 + v41);
                    size_t v25 = *(unsigned __int8 *)(v37 + v41 + 1);
                    int v42 = v24;
                    size_t v43 = v25;
                    uint64_t v44 = v41 + 2;
                    v41 += 2 + v25;
                  }
                }
              }
              ++v18;
            }
            while (v18 != v17);
          }
        }
      }
      else if (!v33)
      {
        uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)v29);
        uint64_t v27 = result;
        unint64_t v28 = v6;
        if (result)
        {
          if (v6 <= 3) {
            goto LABEL_49;
          }
          int v7 = *(_DWORD *)result;
          if (*(_DWORD *)result)
          {
            unsigned int v8 = 0;
            do
            {
              uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v27, v8);
              if (result)
              {
                uint64_t v10 = result;
                uint64_t v11 = v9;
                uint64_t v12 = (void *)[a2 attributes];
                uint64_t v45 = v10;
                uint64_t v46 = v11;
                uint64_t result = (unsigned __int8 *)MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v37, &v45);
                if (v40 < v39)
                {
                  uint64_t v13 = 0;
                  int v14 = v42;
                  while (1)
                  {
                    switch(v14)
                    {
                      case 0:
                        unsigned int __dst = 0;
                        if (v43 + v44 > v38) {
                          goto LABEL_49;
                        }
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        uint64_t result = (unsigned __int8 *)[v12 objectAtIndexedSubscript:__dst];
                        uint64_t v13 = result;
                        break;
                      case 1:
                        unsigned int __dst = 0;
                        if (v43 + v44 > v38) {
                          goto LABEL_49;
                        }
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        uint64_t result = (unsigned __int8 *)[v13 setFormat:__dst];
                        break;
                      case 2:
                        unsigned int __dst = 0;
                        if (v43 + v44 > v38) {
                          goto LABEL_49;
                        }
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        uint64_t result = (unsigned __int8 *)[v13 setOffset:__dst];
                        break;
                      case 3:
                        unsigned int __dst = 0;
                        if (v43 + v44 > v38) {
                          goto LABEL_49;
                        }
                        memcpy(&__dst, (const void *)(v37 + v44), v43);
                        uint64_t result = (unsigned __int8 *)[v13 setBufferIndex:__dst];
                        break;
                      default:
                        break;
                    }
                    if (++v40 >= v39) {
                      break;
                    }
                    if (v41 + 2 > v38) {
                      goto LABEL_49;
                    }
                    int v14 = *(unsigned __int8 *)(v37 + v41);
                    size_t v15 = *(unsigned __int8 *)(v37 + v41 + 1);
                    int v42 = v14;
                    size_t v43 = v15;
                    uint64_t v44 = v41 + 2;
                    v41 += 2 + v15;
                  }
                }
              }
              ++v8;
            }
            while (v8 != v7);
          }
        }
      }
      if (++v31 >= v30) {
        break;
      }
      if ((unint64_t)(v32 + 2) > v29[1]) {
LABEL_49:
      }
        abort();
      uint64_t v26 = *(unsigned __int8 *)(v29[0] + v32 + 1);
      int v33 = *(unsigned __int8 *)(v29[0] + v32);
      uint64_t v34 = v26;
      uint64_t v35 = v32 + 2;
      v32 += 2 + v26;
    }
  }
  return result;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newComputePipelineDescriptor(uint64_t a1, unsigned __int8 **a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = objc_opt_new();
  MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v27, a2);
  if (v30 < v29)
  {
    while (1)
    {
      switch(v32)
      {
        case 0:
          size_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v27);
          [v4 setComputeFunction:v5];
          goto LABEL_32;
        case 1:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28) {
            goto LABEL_39;
          }
          memcpy(&v25, (const void *)(v27 + v34), v33);
          [v4 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:v25 != 0];
          goto LABEL_33;
        case 2:
          PropertyAsuint64_t Object = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v27);
          uint64_t v8 = v7;
          id v9 = [NSString alloc];
          if (!PropertyAsObject) {
            goto LABEL_31;
          }
          if (!v8) {
            goto LABEL_39;
          }
          uint64_t v10 = (unsigned __int8 *)PropertyAsObject;
          break;
        case 3:
          uint64_t v12 = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v27);
          if (v12)
          {
            int v14 = (unsigned __int8 *)v12;
            size_t v15 = v13;
            unint64_t v16 = (void *)[v4 stageInputDescriptor];
            MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::deserializeStageInputDescriptor((uint64_t)v16, v16, v14, v15);
          }
          else
          {
            [v4 setStageInputDescriptor:0];
          }
          goto LABEL_33;
        case 6:
          int v17 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v27);
          size_t v25 = v17;
          unint64_t v26 = v18;
          if (!v17) {
            goto LABEL_33;
          }
          if (v18 <= 3) {
            goto LABEL_39;
          }
          int v19 = *v17;
          if (*v17)
          {
            unsigned int v20 = 0;
            do
            {
              uint64_t Object = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v25, v20);
              if (Object) {
                MTLPipelineLibrarySerializer::deserializeBuffers(objc_msgSend(v4, "buffers", v25, v26), Object, v22);
              }
              ++v20;
            }
            while (v19 != v20);
          }
          goto LABEL_33;
        case 7:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28) {
            goto LABEL_39;
          }
          memcpy(&v25, (const void *)(v27 + v34), v33);
          [v4 setSupportIndirectCommandBuffers:v25 != 0];
          goto LABEL_33;
        case 8:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28) {
            goto LABEL_39;
          }
          memcpy(&v25, (const void *)(v27 + v34), v33);
          [v4 setMaxTotalThreadsPerThreadgroup:v25];
          goto LABEL_33;
        case 10:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28) {
            goto LABEL_39;
          }
          memcpy(&v25, (const void *)(v27 + v34), v33);
          [v4 setTextureWriteRoundingMode:v25];
          goto LABEL_33;
        case 12:
          LODWORD(v25) = 0;
          if (v33 + v34 > v28) {
            goto LABEL_39;
          }
          memcpy(&v25, (const void *)(v27 + v34), v33);
          [v4 setNeedsCustomBorderColorSamplers:v25 != 0];
          goto LABEL_33;
        default:
          goto LABEL_33;
      }
      while (*v10++)
      {
        if (!--v8) {
          goto LABEL_39;
        }
      }
LABEL_31:
      size_t v5 = objc_msgSend(v9, "initWithUTF8String:", PropertyAsObject, v25);
      [v4 setLabel:v5];
LABEL_32:

LABEL_33:
      if (++v30 >= v29) {
        break;
      }
      if (v31 + 2 > v28) {
LABEL_39:
      }
        abort();
      size_t v23 = *(unsigned __int8 *)(v27 + v31 + 1);
      int v32 = *(unsigned __int8 *)(v27 + v31);
      size_t v33 = v23;
      uint64_t v34 = v31 + 2;
      v31 += 2 + v23;
    }
  }
  return v4;
}

uint64_t MTLPipelineLibrarySerializer::deserializeBuffers(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  v15[0] = a2;
  v15[1] = a3;
  uint64_t result = MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v7, v15);
  if (v10 < v9)
  {
    size_t v5 = 0;
    while (1)
    {
      if (v12 == 1)
      {
        unsigned int __dst = 0;
        if (v13 + v14 > v8) {
          goto LABEL_13;
        }
        memcpy(&__dst, (const void *)(v7 + v14), v13);
        uint64_t result = [v5 setMutability:__dst];
      }
      else if (!v12)
      {
        unsigned int __dst = 0;
        if (v13 + v14 > v8) {
          goto LABEL_13;
        }
        memcpy(&__dst, (const void *)(v7 + v14), v13);
        uint64_t result = [a1 objectAtIndexedSubscript:__dst];
        size_t v5 = (void *)result;
      }
      if (++v10 >= v9) {
        break;
      }
      if (v11 + 2 > v8) {
LABEL_13:
      }
        abort();
      size_t v6 = *(unsigned __int8 *)(v7 + v11 + 1);
      int v12 = *(unsigned __int8 *)(v7 + v11);
      size_t v13 = v6;
      uint64_t v14 = v11 + 2;
      v11 += 2 + v6;
    }
  }
  return result;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newTileRenderPipelineDescriptor(uint64_t a1, unsigned __int8 **a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = objc_opt_new();
  MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v33, a2);
  if (v36 < v35)
  {
    while (1)
    {
      switch(v38)
      {
        case 0:
          PropertyAsuint64_t Object = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v33);
          uint64_t v7 = v6;
          id v8 = [NSString alloc];
          if (!PropertyAsObject) {
            goto LABEL_45;
          }
          if (!v7) {
            goto LABEL_52;
          }
          unint64_t v9 = (unsigned __int8 *)PropertyAsObject;
          while (*v9++)
          {
            if (!--v7) {
              goto LABEL_52;
            }
          }
LABEL_45:
          uint64_t v11 = (void *)[v8 initWithUTF8String:PropertyAsObject];
          [v4 setLabel:v11];
LABEL_46:

          goto LABEL_47;
        case 1:
          uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v33);
          [v4 setTileFunction:v11];
          goto LABEL_46;
        case 2:
          LODWORD(__dst) = 0;
          if (v39 + v40 > v34) {
            goto LABEL_52;
          }
          memcpy(&__dst, (const void *)(v33 + v40), v39);
          [v4 setRasterSampleCount:__dst];
          goto LABEL_47;
        case 3:
          int v12 = (int *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v33);
          v32[0] = v12;
          v32[1] = v13;
          if (!v12) {
            goto LABEL_47;
          }
          if (v13 <= 3) {
            goto LABEL_52;
          }
          int v14 = *v12;
          if (!*v12) {
            goto LABEL_47;
          }
          unsigned int v15 = 0;
          break;
        case 4:
          LODWORD(__dst) = 0;
          if (v39 + v40 > v34) {
            goto LABEL_52;
          }
          memcpy(&__dst, (const void *)(v33 + v40), v39);
          [v4 setThreadgroupSizeMatchesTileSize:__dst != 0];
          goto LABEL_47;
        case 5:
          int v24 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v33);
          unsigned int __dst = v24;
          unint64_t v42 = v25;
          if (!v24) {
            goto LABEL_47;
          }
          if (v25 <= 3) {
            goto LABEL_52;
          }
          int v26 = *v24;
          if (*v24)
          {
            unsigned int v27 = 0;
            do
            {
              uint64_t Object = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&__dst, v27);
              if (Object) {
                MTLPipelineLibrarySerializer::deserializeBuffers((void *)[v4 tileBuffers], Object, v29);
              }
              ++v27;
            }
            while (v26 != v27);
          }
          goto LABEL_47;
        case 6:
          LODWORD(__dst) = 0;
          if (v39 + v40 > v34) {
            goto LABEL_52;
          }
          memcpy(&__dst, (const void *)(v33 + v40), v39);
          [v4 setMaxTotalThreadsPerThreadgroup:__dst];
          goto LABEL_47;
        case 8:
          LODWORD(__dst) = 0;
          if (v39 + v40 > v34) {
            goto LABEL_52;
          }
          memcpy(&__dst, (const void *)(v33 + v40), v39);
          [v4 setTextureWriteRoundingMode:__dst];
          goto LABEL_47;
        default:
          goto LABEL_47;
      }
      do
      {
        uint64_t v16 = MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)v32, v15);
        if (v16)
        {
          unint64_t v18 = (unsigned __int8 *)v16;
          int v19 = v17;
          unsigned int v20 = (void *)[v4 colorAttachments];
          v49[0] = v18;
          v49[1] = v19;
          MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&__dst, v49);
          if (v44 < v43)
          {
            uint64_t v21 = 0;
            int v22 = v46;
            while (1)
            {
              if (v22 == 1)
              {
                unsigned int v50 = 0;
                if (v47 + v48 > v42) {
                  goto LABEL_52;
                }
                memcpy(&v50, (char *)__dst + v48, v47);
                [v21 setPixelFormat:v50];
              }
              else if (!v22)
              {
                unsigned int v50 = 0;
                if (v47 + v48 > v42) {
                  goto LABEL_52;
                }
                memcpy(&v50, (char *)__dst + v48, v47);
                uint64_t v21 = (void *)[v20 objectAtIndexedSubscript:v50];
              }
              if (++v44 >= v43) {
                break;
              }
              if (v45 + 2 > v42) {
                goto LABEL_52;
              }
              int v22 = *((unsigned __int8 *)__dst + v45);
              size_t v23 = *((unsigned __int8 *)__dst + v45 + 1);
              int v46 = v22;
              size_t v47 = v23;
              uint64_t v48 = v45 + 2;
              v45 += 2 + v23;
            }
          }
        }
        ++v15;
      }
      while (v15 != v14);
LABEL_47:
      if (++v36 >= v35) {
        break;
      }
      if (v37 + 2 > v34) {
LABEL_52:
      }
        abort();
      size_t v30 = *(unsigned __int8 *)(v33 + v37 + 1);
      int v38 = *(unsigned __int8 *)(v33 + v37);
      size_t v39 = v30;
      uint64_t v40 = v37 + 2;
      v37 += 2 + v30;
    }
  }
  return v4;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newMeshRenderPipelineDescriptor(uint64_t a1, unsigned __int8 **a2)
{
  if (!*a2) {
    return 0;
  }
  uint64_t v4 = objc_opt_new();
  MTLSerializer::SerializedCompactPropertyList::Iterator::Iterator((uint64_t)&v41, a2);
  if (v44 < v43)
  {
    while (1)
    {
      switch(v46)
      {
        case 0:
          PropertyAsuint64_t Object = MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          uint64_t v7 = v6;
          id v8 = [NSString alloc];
          if (!PropertyAsObject) {
            goto LABEL_107;
          }
          if (!v7) {
            goto LABEL_114;
          }
          unint64_t v9 = (unsigned __int8 *)PropertyAsObject;
          break;
        case 1:
          uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v41);
          [v4 setObjectFunction:v11];
          goto LABEL_108;
        case 2:
          uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v41);
          [v4 setMeshFunction:v11];
          goto LABEL_108;
        case 3:
          uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v41);
          [v4 setFragmentFunction:v11];
          goto LABEL_108;
        case 4:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setMaxTotalThreadsPerObjectThreadgroup:v39];
          goto LABEL_109;
        case 5:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setMaxTotalThreadsPerMeshThreadgroup:v39];
          goto LABEL_109;
        case 6:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:v39 != 0];
          goto LABEL_109;
        case 7:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:v39 != 0];
          goto LABEL_109;
        case 8:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setPayloadMemoryLength:v39];
          goto LABEL_109;
        case 9:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setMaxTotalThreadgroupsPerMeshGrid:v39];
          goto LABEL_109;
        case 10:
          int v12 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          size_t v39 = v12;
          unint64_t v40 = v13;
          if (!v12) {
            goto LABEL_109;
          }
          if (v13 <= 3) {
            goto LABEL_114;
          }
          int v14 = *v12;
          if (*v12)
          {
            unsigned int v15 = 0;
            do
            {
              uint64_t Object = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v39, v15);
              if (Object) {
                MTLPipelineLibrarySerializer::deserializeBuffers(objc_msgSend(v4, "objectBuffers", v39, v40), Object, v17);
              }
              ++v15;
            }
            while (v14 != v15);
          }
          goto LABEL_109;
        case 11:
          unint64_t v18 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          size_t v39 = v18;
          unint64_t v40 = v19;
          if (!v18) {
            goto LABEL_109;
          }
          if (v19 <= 3) {
            goto LABEL_114;
          }
          int v20 = *v18;
          if (*v18)
          {
            unsigned int v21 = 0;
            do
            {
              int v22 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v39, v21);
              if (v22) {
                MTLPipelineLibrarySerializer::deserializeBuffers(objc_msgSend(v4, "meshBuffers", v39, v40), v22, v23);
              }
              ++v21;
            }
            while (v20 != v21);
          }
          goto LABEL_109;
        case 12:
          int v24 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          size_t v39 = v24;
          unint64_t v40 = v25;
          if (!v24) {
            goto LABEL_109;
          }
          if (v25 <= 3) {
            goto LABEL_114;
          }
          int v26 = *v24;
          if (*v24)
          {
            unsigned int v27 = 0;
            do
            {
              unint64_t v28 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v39, v27);
              if (v28) {
                MTLPipelineLibrarySerializer::deserializeBuffers(objc_msgSend(v4, "fragmentBuffers", v39, v40), v28, v29);
              }
              ++v27;
            }
            while (v26 != v27);
          }
          goto LABEL_109;
        case 13:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setRasterSampleCount:v39];
          goto LABEL_109;
        case 14:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setAlphaToCoverageEnabled:v39 != 0];
          goto LABEL_109;
        case 15:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setAlphaToOneEnabled:v39 != 0];
          goto LABEL_109;
        case 16:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setRasterizationEnabled:v39 != 0];
          goto LABEL_109;
        case 18:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setMaxVertexAmplificationCount:v39];
          goto LABEL_109;
        case 19:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setVertexAmplificationMode:v39];
          goto LABEL_109;
        case 20:
          size_t v30 = (_DWORD *)MTLSerializer::SerializedCompactPropertyList::Iterator::getPropertyAsObject((MTLSerializer::SerializedCompactPropertyList::Iterator *)&v41);
          size_t v39 = v30;
          unint64_t v40 = v31;
          if (!v30) {
            goto LABEL_109;
          }
          if (v31 <= 3) {
            goto LABEL_114;
          }
          int v32 = *v30;
          if (*v30)
          {
            unsigned int v33 = 0;
            do
            {
              unint64_t v34 = (unsigned __int8 *)MTLSerializer::SerializedObjectList::getObject((MTLSerializer::SerializedObjectList *)&v39, v33);
              if (v34) {
                MTLPipelineLibrarySerializer::deserializeColorAttachments(objc_msgSend(v4, "colorAttachments", v39, v40), v34, v35);
              }
              ++v33;
            }
            while (v32 != v33);
          }
          goto LABEL_109;
        case 21:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setDepthAttachmentPixelFormat:v39];
          goto LABEL_109;
        case 22:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setStencilAttachmentPixelFormat:v39];
          goto LABEL_109;
        case 23:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setSupportIndirectCommandBuffers:v39 != 0];
          goto LABEL_109;
        case 27:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setSampleMask:v39];
          goto LABEL_109;
        case 28:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          LODWORD(v36) = v39;
          [v4 setSampleCoverage:v36];
          goto LABEL_109;
        case 29:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setTextureWriteRoundingMode:v39];
          goto LABEL_109;
        case 30:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setAlphaTestEnabled:v39 != 0];
          goto LABEL_109;
        case 31:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setAlphaTestFunction:v39];
          goto LABEL_109;
        case 32:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setLogicOperationEnabled:v39 != 0];
          goto LABEL_109;
        case 33:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setClipDistanceEnableMask:v39];
          goto LABEL_109;
        case 34:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setPointSmoothEnabled:v39 != 0];
          goto LABEL_109;
        case 35:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setPointCoordLowerLeft:v39 != 0];
          goto LABEL_109;
        case 36:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setPointSizeOutputVS:v39 != 0];
          goto LABEL_109;
        case 37:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setTwoSideEnabled:v39 != 0];
          goto LABEL_109;
        case 38:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setFragmentDepthCompareClampMask:v39];
          goto LABEL_109;
        case 39:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setLogicOperation:v39];
          goto LABEL_109;
        case 40:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setDepthStencilWriteDisabled:v39 != 0];
          goto LABEL_109;
        case 41:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setNeedsCustomBorderColorSamplers:v39 != 0];
          goto LABEL_109;
        case 58:
          LODWORD(v39) = 0;
          if (v47 + v48 > v42) {
            goto LABEL_114;
          }
          memcpy(&v39, (const void *)(v41 + v48), v47);
          [v4 setExplicitVisibilityGroupID:v39];
          goto LABEL_109;
        default:
          goto LABEL_109;
      }
      while (*v9++)
      {
        if (!--v7) {
          goto LABEL_114;
        }
      }
LABEL_107:
      uint64_t v11 = objc_msgSend(v8, "initWithUTF8String:", PropertyAsObject, v39);
      [v4 setLabel:v11];
LABEL_108:

LABEL_109:
      if (++v44 >= v43) {
        break;
      }
      if (v45 + 2 > v42) {
LABEL_114:
      }
        abort();
      size_t v37 = *(unsigned __int8 *)(v41 + v45 + 1);
      int v46 = *(unsigned __int8 *)(v41 + v45);
      size_t v47 = v37;
      uint64_t v48 = v45 + 2;
      v45 += 2 + v37;
    }
  }
  return v4;
}

void MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::serializeComputePipelineDescriptor(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this, MTLComputePipelineDescriptor *a2)
{
}

void MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::serializeRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this, MTLRenderPipelineDescriptor *a2)
{
}

void MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::serializeTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this, MTLTileRenderPipelineDescriptor *a2)
{
}

void MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::serializeMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this, MTLMeshRenderPipelineDescriptor *a2)
{
}

void MTLPipelineLibrarySerializer::PipelineDescriptorSerializer::create(MTLPipelineLibrarySerializer::PipelineDescriptorSerializer *this)
{
}

void sub_182792D78(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C402102F06BLL);
  _Unwind_Resume(a1);
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::PipelineDescriptorDeserializer(void *a1, void *a2)
{
  *a1 = &unk_1ECAC7028;
  a1[1] = a2;
  return a1;
}

void MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::~PipelineDescriptorDeserializer(id *this)
{
  *this = &unk_1ECAC7028;
}

{
  uint64_t vars8;

  MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::~PipelineDescriptorDeserializer(this);

  JUMPOUT(0x18530C140);
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newComputePipelineDescriptor(uint64_t a1, dispatch_data_t data)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6[0] = (unsigned __int8 *)buffer_ptr;
  v6[1] = (unsigned __int8 *)size_ptr;
  uint64_t v4 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newComputePipelineDescriptor(a1, v6);
  dispatch_release(v3);
  return v4;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newRenderPipelineDescriptor(uint64_t a1, dispatch_data_t data)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6[0] = (unsigned __int8 *)buffer_ptr;
  v6[1] = (unsigned __int8 *)size_ptr;
  uint64_t v4 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newRenderPipelineDescriptor(a1, v6);
  dispatch_release(v3);
  return v4;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newTileRenderPipelineDescriptor(uint64_t a1, dispatch_data_t data)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6[0] = (unsigned __int8 *)buffer_ptr;
  v6[1] = (unsigned __int8 *)size_ptr;
  uint64_t v4 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newTileRenderPipelineDescriptor(a1, v6);
  dispatch_release(v3);
  return v4;
}

void *MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newMeshRenderPipelineDescriptor(uint64_t a1, dispatch_data_t data)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v6[0] = (unsigned __int8 *)buffer_ptr;
  v6[1] = (unsigned __int8 *)size_ptr;
  uint64_t v4 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newMeshRenderPipelineDescriptor(a1, v6);
  dispatch_release(v3);
  return v4;
}

id MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::newFunctionWithFunctionProperty(id *this, MTLSerializer::SerializedCompactPropertyList::Iterator *a2)
{
  unsigned int __dst = 0;
  size_t v2 = *((void *)a2 + 6);
  uint64_t v3 = *((void *)a2 + 7);
  if (v2 + v3 > *((void *)a2 + 1)) {
    abort();
  }
  memcpy(&__dst, (const void *)(*(void *)a2 + v3), v2);
  size_t v5 = (void *)[this[1] functionWithFunctionRef:__dst];

  return v5;
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializer::nextStitchedLibraryIndex(MTLPipelineLibrarySerializer::PipelineLibrarySerializer *this)
{
  return 0;
}

void MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::~NamedObjectJSONSerializer(MTLPipelineLibrarySerializer::NamedObjectJSONSerializer *this)
{
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setString(id *this, unsigned int a2, NSString *a3)
{
  return [this[1] setObject:a3 forKeyedSubscript:*((void *)this[2] + a2)];
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setObject(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return [*(id *)(a1 + 8) setObject:a3 forKeyedSubscript:*(void *)(*(void *)(a1 + 16) + 8 * a2)];
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setUIntValue(uint64_t this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v6 = this;
    uint64_t v7 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:");
    id v8 = *(void **)(v6 + 8);
    uint64_t v9 = *(void *)(*(void *)(v6 + 16) + 8 * a2);
    return [v8 setObject:v7 forKeyedSubscript:v9];
  }
  return this;
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setFloatValue(uint64_t this, unsigned int a2, float a3, float a4)
{
  if (a3 != a4)
  {
    uint64_t v6 = this;
    uint64_t v7 = objc_msgSend(NSNumber, "numberWithFloat:");
    id v8 = *(void **)(v6 + 8);
    uint64_t v9 = *(void *)(*(void *)(v6 + 16) + 8 * a2);
    return [v8 setObject:v7 forKeyedSubscript:v9];
  }
  return this;
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::Finalize(MTLPipelineLibrarySerializer::NamedObjectJSONSerializer *this)
{
  uint64_t v1 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  return v1;
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setType(MTLPipelineLibrarySerializer::NamedObjectJSONSerializer *this, const char *a2)
{
  uint64_t v3 = [NSString stringWithUTF8String:a2];
  uint64_t v4 = (void *)*((void *)this + 1);

  return [v4 setObject:v3 forKeyedSubscript:@"type"];
}

uint64_t MTLPipelineLibrarySerializer::NamedObjectJSONSerializer::setName(id *this, NSString *a2)
{
  return [this[1] setObject:a2 forKeyedSubscript:@"name"];
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::~JSONSerializationContext(id *this)
{
  MTLPipelineLibrarySerializer::JSONSerializationContext::~JSONSerializationContext(this);

  JUMPOUT(0x18530C140);
}

{
  id v2;

  *this = &unk_1ECAC6CC8;

  size_t v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getSpecializedFunctionSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_18279329C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getComputePipelineSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_18279333C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getRenderPipelineSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_1827933DC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getStageInputOutputSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_18279347C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getVertexDescriptorSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_18279351C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getVertexAttributeSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_1827935BC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getVertexBufferLayoutSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_18279365C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getFunctionSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_1827936FC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getColorAttachmentSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_18279379C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getFunctionConstantSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_18279383C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getSizeSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_1827938DC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getTileRenderPipelineSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_18279397C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getTileColorAttachmentSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_182793A1C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getMeshRenderPipelineSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_182793ABC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::JSONSerializationContext::getBufferSerializer(MTLPipelineLibrarySerializer::JSONSerializationContext *this)
{
}

void sub_182793B5C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10C1C40568AFB2FLL);
  _Unwind_Resume(a1);
}

void *MTLPipelineLibrarySerializer::JSONSerializationContext::createObjectArray(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = (void *)[MEMORY[0x1E4F1CA48] array];
  size_t v5 = *a2;
  uint64_t v4 = a2[1];
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    [v3 addObject:v6];
  }
  return v3;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::createUint32Array()
{
  return 0;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedSpecializedFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(void **)(a1 + 8);
    return [v6 addObject:a3];
  }
  return result;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedComputePipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(void **)(a1 + 8);
    return [v6 addObject:a3];
  }
  return result;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(void **)(a1 + 8);
    return [v6 addObject:a3];
  }
  return result;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedTileRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(void **)(a1 + 8);
    return [v6 addObject:a3];
  }
  return result;
}

uint64_t MTLPipelineLibrarySerializer::JSONSerializationContext::addSerializedMeshRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = objc_msgSend(*(id *)(a1 + 8), "containsObject:");
  if ((result & 1) == 0)
  {
    uint64_t v6 = *(void **)(a1 + 8);
    return [v6 addObject:a3];
  }
  return result;
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::~BinarySerializationContext(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
  MTLPipelineLibrarySerializer::BinarySerializationContext::~BinarySerializationContext(this);

  JUMPOUT(0x18530C140);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  *(void *)this = &unk_1ECAC6E78;
  MTLSerializer::Context::~Context((MTLPipelineLibrarySerializer::BinarySerializationContext *)((char *)this + 312));
  size_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 33);
  if (v3)
  {
    *((void *)this + 34) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 30);
  if (v4)
  {
    *((void *)this + 31) = v4;
    operator delete(v4);
  }
  size_t v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 23);
  if (v6)
  {
    *((void *)this + 24) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 19);
  if (v7)
  {
    *((void *)this + 20) = v7;
    operator delete(v7);
  }
  id v8 = (void *)*((void *)this + 16);
  if (v8)
  {
    *((void *)this + 17) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 12);
  if (v9)
  {
    *((void *)this + 13) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 9);
  if (v10)
  {
    *((void *)this + 10) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 5);
  if (v11)
  {
    *((void *)this + 6) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 2);
  if (v12)
  {
    *((void *)this + 3) = v12;
    operator delete(v12);
  }
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::serializeFunctionRef(uint64_t a1)
{
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getSpecializedFunctionSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_182793EBC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getComputePipelineSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_182793F50(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getRenderPipelineSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_182793FE4(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getStageInputOutputSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_182794078(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getVertexDescriptorSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_18279410C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getVertexAttributeSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_1827941A0(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getVertexBufferLayoutSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_182794234(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getFunctionSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_1827942C8(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getColorAttachmentSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_18279435C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getFunctionConstantSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_1827943F0(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getSizeSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_182794484(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getTileRenderPipelineSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_182794518(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getTileColorAttachmentSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_1827945AC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getMeshRenderPipelineSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_182794640(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::getBufferSerializer(MTLPipelineLibrarySerializer::BinarySerializationContext *this)
{
}

void sub_1827946D4(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::createObjectArray(uint64_t a1, uint64_t **a2)
{
  std::string __p = 0;
  uint64_t v16 = 0;
  int v17 = 0;
  std::vector<MTLSerializer::ObjectRef>::reserve(&__p, a2[1] - *a2);
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    size_t v5 = v16;
    do
    {
      uint64_t v6 = *v3;
      if (v5 >= v17)
      {
        uint64_t v7 = (v5 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = (v17 - (unsigned char *)__p) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if ((unint64_t)(v17 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9) {
          unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v17, v9);
        }
        else {
          unint64_t v10 = 0;
        }
        uint64_t v11 = &v10[8 * v7];
        *(void *)uint64_t v11 = v6;
        size_t v5 = v11 + 8;
        unint64_t v13 = (char *)__p;
        int v12 = v16;
        if (v16 != __p)
        {
          do
          {
            uint64_t v14 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v11 - 1) = v14;
            v11 -= 8;
          }
          while (v12 != v13);
          int v12 = (char *)__p;
        }
        std::string __p = v11;
        uint64_t v16 = v5;
        int v17 = &v10[8 * v9];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(void *)size_t v5 = v6;
        v5 += 8;
      }
      uint64_t v16 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  MTLSerializer::Context::CreateObjectArray<MTLSerializer::ObjectRef>();
}

void sub_182794858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibrarySerializer::BinarySerializationContext::createUint32Array(uint64_t a1, void *a2)
{
  if (a2[1] == *a2) {
    return 0;
  }
  else {
    return MTLSerializer::Context::CreateArray<unsigned int>(a1 + 312, a2);
  }
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedSpecializedFunction(void *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  size_t v5 = (char **)(a1 + 5);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor((uint64_t)a1, (uint64_t)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = a1[7];
  uint64_t v7 = (void *)a1[6];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - *v5) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - (void)*v5;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 7), v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    unsigned int v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a3;
    unint64_t v8 = v14 + 8;
    int v17 = (char *)a1[5];
    uint64_t v16 = (char *)a1[6];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *v5;
    }
    a1[5] = v14;
    a1[6] = v8;
    a1[7] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = a3;
    unint64_t v8 = v7 + 1;
  }
  a1[6] = v8;
}

void sub_1827949BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedComputePipeline(void *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  size_t v5 = (char **)(a1 + 12);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor((uint64_t)a1, (uint64_t)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = a1[14];
  uint64_t v7 = (void *)a1[13];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - *v5) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - (void)*v5;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 14), v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    unsigned int v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a3;
    unint64_t v8 = v14 + 8;
    int v17 = (char *)a1[12];
    uint64_t v16 = (char *)a1[13];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *v5;
    }
    a1[12] = v14;
    a1[13] = v8;
    a1[14] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = a3;
    unint64_t v8 = v7 + 1;
  }
  a1[13] = v8;
}

void sub_182794AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedRenderPipeline(void *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  size_t v5 = (char **)(a1 + 19);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor((uint64_t)a1, (uint64_t)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = a1[21];
  uint64_t v7 = (void *)a1[20];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - *v5) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - (void)*v5;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 21), v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    unsigned int v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a3;
    unint64_t v8 = v14 + 8;
    int v17 = (char *)a1[19];
    uint64_t v16 = (char *)a1[20];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *v5;
    }
    a1[19] = v14;
    a1[20] = v8;
    a1[21] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = a3;
    unint64_t v8 = v7 + 1;
  }
  a1[20] = v8;
}

void sub_182794C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedTileRenderPipeline(void *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  size_t v5 = (char **)(a1 + 26);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor((uint64_t)a1, (uint64_t)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = a1[28];
  uint64_t v7 = (void *)a1[27];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - *v5) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - (void)*v5;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 28), v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    unsigned int v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a3;
    unint64_t v8 = v14 + 8;
    int v17 = (char *)a1[26];
    uint64_t v16 = (char *)a1[27];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = *v5;
    }
    a1[26] = v14;
    a1[27] = v8;
    a1[28] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = a3;
    unint64_t v8 = v7 + 1;
  }
  a1[27] = v8;
}

void sub_182794D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::BinarySerializationContext::addSerializedMeshRenderPipeline(void *a1, char *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor((uint64_t)a1, (uint64_t)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = (void *)a1[34];
  unint64_t v5 = a1[35];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[33];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 35), v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    unsigned int v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a3;
    uint64_t v7 = v14 + 8;
    int v17 = (char *)a1[33];
    uint64_t v16 = (char *)a1[34];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)a1[33];
    }
    a1[33] = v14;
    a1[34] = v7;
    a1[35] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v6 = a3;
    uint64_t v7 = v6 + 1;
  }
  a1[34] = v7;
}

void sub_182794EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate::~PipelineDescriptorSerializerPrivate(MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *this)
{
  *(void *)this = &unk_1ECAC70C0;
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::~PipelineLibraryBinarySerializer((MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1ECAC70C0;
  MTLPipelineLibrarySerializer::PipelineLibraryBinarySerializer::~PipelineLibraryBinarySerializer((MTLPipelineLibrarySerializer::PipelineDescriptorSerializerPrivate *)((char *)this + 8));

  JUMPOUT(0x18530C140);
}

void MTLSerializer::DirectObjectListSerializer::~DirectObjectListSerializer(MTLSerializer::DirectObjectListSerializer *this)
{
  *(void *)this = &unk_1ECAC6BD8;
  size_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1ECAC6B88;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1ECAC6BD8;
  size_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1ECAC6B88;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x18530C140);
}

uint64_t MTLSerializer::DirectObjectListSerializer::setOffset(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(*(void *)(this + 8) + 4 * (a2 + 1)) = a3;
  return this;
}

void MTLSerializer::ObjectSerializer::~ObjectSerializer(MTLSerializer::ObjectSerializer *this)
{
  *(void *)this = &unk_1ECAC6B88;
  size_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ECAC6B88;
  size_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x18530C140);
}

MTLPipelineLibrarySerializer::JSONSerializationContext *MTLPipelineLibrarySerializer::JSONSerializationContext::JSONSerializationContext(MTLPipelineLibrarySerializer::JSONSerializationContext *this, char a2)
{
  *(void *)this = &unk_1ECAC6CC8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 1) = objc_opt_new();
  *((unsigned char *)this + 40) = a2;
  return this;
}

void sub_1827951B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(void *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MTLSerializer::PropertyListSerializer::~PropertyListSerializer(MTLSerializer::PropertyListSerializer *this)
{
  *(void *)this = &unk_1ECAC6BD8;
  size_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1ECAC6B88;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1ECAC6BD8;
  size_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1ECAC6B88;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  JUMPOUT(0x18530C140);
}

MTLSerializer::StringSerializer *MTLSerializer::StringSerializer::StringSerializer(MTLSerializer::StringSerializer *this, const char *__s)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (std::vector<char> *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 8;
  *(void *)this = &unk_1ECAC6BB0;
  size_t v5 = strlen(__s);
  std::vector<char>::size_type v6 = v5 + 1;
  if (v5 == -1)
  {
    std::vector<char>::pointer begin = 0;
  }
  else
  {
    std::vector<unsigned char>::__append(v4, v6);
    std::vector<char>::pointer begin = v4->__begin_;
  }
  memcpy(begin, __s, v6);
  *((void *)this + 5) = 1;
  return this;
}

void sub_1827953AC(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void MTLSerializer::StringSerializer::~StringSerializer(MTLSerializer::StringSerializer *this)
{
  *(void *)this = &unk_1ECAC6B88;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1ECAC6B88;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x18530C140);
}

void MTLSerializer::Context::~Context(MTLSerializer::Context *this)
{
  uint64_t v2 = *(void **)this;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (*(void **)this != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = *(void **)this;
  }
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t MTLSerializer::PropertyListSerializer::setBigVector(MTLSerializer::PropertyListSerializer *this, uint64_t a2, const char *a3, std::vector<char>::size_type __n, uint64_t a5)
{
  std::vector<char>::pointer begin = (std::vector<char>::pointer)*((void *)this + 1);
  uint64_t v10 = (std::vector<char> *)((char *)this + 8);
  std::vector<char>::size_type v11 = *((void *)this + 2) - (void)begin;
  uint64_t v12 = v11 & (a5 - 1);
  if (v12)
  {
    std::vector<char>::size_type v13 = a5 - v12;
    std::vector<char>::size_type v14 = a5 - v12 + v11;
    if (v11 >= v14)
    {
      if (v11 > v14) {
        *((void *)this + 2) = &begin[v14];
      }
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 8), v13);
      std::vector<char>::pointer begin = v10->__begin_;
    }
    bzero(&begin[v11], v13);
    std::vector<char>::pointer begin = (std::vector<char>::pointer)*((void *)this + 1);
    std::vector<char>::size_type v11 = *((void *)this + 2) - (void)begin;
  }
  if (v11 >= v11 + __n)
  {
    if (v11 > v11 + __n) {
      *((void *)this + 2) = &begin[v11 + __n];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v10, __n);
    std::vector<char>::pointer begin = v10->__begin_;
  }
  memcpy(&begin[v11], a3, __n);
  unsigned int v15 = *(uint64_t (**)(MTLSerializer::PropertyListSerializer *, uint64_t, std::vector<char>::size_type))(*(void *)this + 24);

  return v15(this, a2, v11);
}

void MTLSerializer::Context::CreateCompactPropertyListSerializer(MTLSerializer::Context *this)
{
}

void sub_182795880(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1091C40658F5F37);
  _Unwind_Resume(a1);
}

void MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::~NamedObjectBinarySerializer(MTLPipelineLibrarySerializer::NamedObjectBinarySerializer *this)
{
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setString(MTLPipelineLibrarySerializer::NamedObjectBinarySerializer *this, unsigned int a2, NSString *a3)
{
  uint64_t v4 = *((void *)this + 2);
  *(void *)(*(void *)(v4 + 48) + 8 * a2) = MTLSerializer::Context::CreateString(*((MTLSerializer::Context **)this + 1), [(NSString *)a3 UTF8String]);
  *(_DWORD *)(*(void *)(v4 + 72) + 4 * a2) = *(_DWORD *)(v4 + 16) - *(_DWORD *)(v4 + 8) + 2;
  *(_DWORD *)std::vector<char>::size_type v6 = 0;
  return MTLSerializer::CompactPropertyListSerializer::setPropertyData((MTLSerializer::CompactPropertyListSerializer *)v4, a2, v6, 4uLL);
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setObject(void *result, unsigned int a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result[2];
    *(void *)(*(void *)(v3 + 48) + 8 * a2) = a3;
    *(_DWORD *)(*(void *)(v3 + 72) + 4 * a2) = *(_DWORD *)(v3 + 16) - *(_DWORD *)(v3 + 8) + 2;
    *(_DWORD *)uint64_t v4 = 0;
    return MTLSerializer::CompactPropertyListSerializer::setPropertyData((MTLSerializer::CompactPropertyListSerializer *)v3, a2, v4, 4uLL);
  }
  return result;
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setUIntValue(void *this, char a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    std::vector<char>::size_type v6 = (MTLSerializer::CompactPropertyListSerializer *)*((void *)this + 2);
    int v7 = a3;
    return MTLSerializer::CompactPropertyListSerializer::setPropertyData(v6, a2, (const char *)&v7, 4uLL);
  }
  return this;
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setFloatValue(void *this, char a2, float a3, float a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    std::vector<char>::size_type v6 = (MTLSerializer::CompactPropertyListSerializer *)*((void *)this + 2);
    float v7 = a3;
    return MTLSerializer::CompactPropertyListSerializer::setPropertyData(v6, a2, (const char *)&v7, 4uLL);
  }
  return this;
}

void *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::setVector(MTLPipelineLibrarySerializer::NamedObjectBinarySerializer *this, char a2, uint64_t a3, const char *a4)
{
  std::vector<char>::size_type v7 = _MTLConstantDataSize(a3);
  uint64_t v8 = (MTLSerializer::CompactPropertyListSerializer *)*((void *)this + 2);

  return MTLSerializer::CompactPropertyListSerializer::setPropertyData(v8, a2, a4, v7);
}

MTLSerializer::ObjectListSerializer *MTLPipelineLibrarySerializer::NamedObjectBinarySerializer::Finalize(MTLPipelineLibrarySerializer::NamedObjectBinarySerializer *this)
{
  uint64_t v1 = *((void *)this + 2);
  **(unsigned char **)(v1 + 8) = *(_DWORD *)(v1 + 96);
  return MTLSerializer::ObjectListSerializer::FinalizeInternal((MTLSerializer::ObjectListSerializer *)v1);
}

MTLSerializer::CompactPropertyListSerializer *MTLSerializer::CompactPropertyListSerializer::CompactPropertyListSerializer(MTLSerializer::CompactPropertyListSerializer *this, unsigned int a2)
{
  uint64_t v4 = (std::vector<unsigned int> *)MTLSerializer::ObjectListSerializer::ObjectListSerializer(this, a2);
  v4->__begin_ = (std::vector<unsigned int>::pointer)&unk_1ECAC6C98;
  std::vector<unsigned int>::vector(v4 + 3, a2);
  *((_DWORD *)this + 24) = 0;
  std::vector<unsigned char>::reserve((std::vector<char> *)((char *)this + 8), a2);
  uint64_t v5 = (void *)*((void *)this + 9);
  uint64_t v6 = *((void *)this + 10) - (void)v5;
  if (v6 >= 1) {
    bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
  }
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *((void *)this + 2) - v7;
  if (v8 == -1)
  {
    *((void *)this + 2) = v7;
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 8), 1uLL);
    uint64_t v7 = *((void *)this + 1);
  }
  *(unsigned char *)(v7 + v8) = 0;
  *((void *)this + 5) = 1;
  return this;
}

void sub_182795B58(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *((void *)v1 + 10) = v4;
    operator delete(v4);
  }
  MTLSerializer::ObjectListSerializer::~ObjectListSerializer(v1);
  _Unwind_Resume(a1);
}

void MTLSerializer::CompactPropertyListSerializer::~CompactPropertyListSerializer(MTLSerializer::CompactPropertyListSerializer *this)
{
  *(void *)this = &unk_1ECAC6C98;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1ECAC6BD8;
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  *(void *)this = &unk_1ECAC6B88;
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1ECAC6C98;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1ECAC6BD8;
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  *(void *)this = &unk_1ECAC6B88;
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  JUMPOUT(0x18530C140);
}

uint64_t MTLSerializer::CompactPropertyListSerializer::setOffset(uint64_t this, unsigned int a2, int a3)
{
  *(_DWORD *)(*(void *)(this + 8) + *(unsigned int *)(*(void *)(this + 72) + 4 * a2)) = a3;
  return this;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_182795D68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *MTLSerializer::CompactPropertyListSerializer::setPropertyData(MTLSerializer::CompactPropertyListSerializer *this, char a2, const char *a3, std::vector<char>::size_type a4)
{
  std::vector<char>::pointer begin = (std::vector<char>::pointer)*((void *)this + 1);
  uint64_t v9 = (std::vector<char> *)((char *)this + 8);
  uint64_t v10 = *((void *)this + 2) - (void)begin;
  if (v10 == -1)
  {
    *((void *)this + 2) = begin;
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 8), 1uLL);
    std::vector<char>::pointer begin = v9->__begin_;
  }
  begin[v10] = a2;
  std::vector<char>::pointer v11 = (std::vector<char>::pointer)*((void *)this + 1);
  uint64_t v12 = *((void *)this + 2) - (void)v11;
  if (v12 == -1)
  {
    *((void *)this + 2) = v11;
  }
  else
  {
    std::vector<unsigned char>::__append(v9, 1uLL);
    std::vector<char>::pointer v11 = v9->__begin_;
  }
  v11[v12] = a4;
  std::vector<char>::pointer v13 = (std::vector<char>::pointer)*((void *)this + 1);
  std::vector<char>::size_type v14 = *((void *)this + 2) - (void)v13;
  if (v14 >= v14 + a4)
  {
    if (v14 > v14 + a4) {
      *((void *)this + 2) += a4;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(v9, a4);
    std::vector<char>::pointer v13 = v9->__begin_;
  }
  uint64_t result = memcpy(&v13[v14], a3, a4);
  ++*((_DWORD *)this + 24);
  return result;
}

uint64_t MTLSerializer::Context::CreateArray<unsigned int>(uint64_t a1, void *a2)
{
  if (a2[1] != *a2) {
    operator new();
  }
  return 0;
}

void sub_182795FD8(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x1091C40510CC53ALL);
  _Unwind_Resume(a1);
}

uint64_t MTLSerializer::ArraySerializer<unsigned int>::ArraySerializer(uint64_t a1, int **a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (std::vector<char> *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_1ECAC6B60;
  *(void *)(a1 + 40) = 4;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  std::vector<unsigned char>::__append((std::vector<char> *)(a1 + 8), 4uLL);
  *(_DWORD *)v4->__begin_ = (unint64_t)((char *)v5 - (char *)v6) >> 2;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      int v9 = *v7;
      std::vector<char>::pointer begin = *(std::vector<char>::pointer *)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16) - (void)begin;
      unint64_t v12 = v11 & 3;
      if ((v11 & 3) != 0)
      {
        std::vector<char>::size_type v13 = 4 - v12;
        unint64_t v14 = 4 - v12 + v11;
        if (v11 >= v14)
        {
          if (v11 > v14) {
            *(void *)(a1 + 16) = &begin[v14];
          }
        }
        else
        {
          std::vector<unsigned char>::__append(v4, v13);
          std::vector<char>::pointer begin = v4->__begin_;
        }
        bzero(&begin[v11], v13);
        std::vector<char>::pointer begin = *(std::vector<char>::pointer *)(a1 + 8);
        unint64_t v11 = *(void *)(a1 + 16) - (void)begin;
      }
      if (v11 > 0xFFFFFFFFFFFFFFFBLL)
      {
        *(void *)(a1 + 16) = &begin[v11 + 4];
      }
      else
      {
        std::vector<unsigned char>::__append(v4, 4uLL);
        std::vector<char>::pointer begin = v4->__begin_;
      }
      *(_DWORD *)&begin[v11] = v9;
      ++v7;
    }
    while (v7 != v8);
  }
  return a1;
}

void sub_182796154(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *MTLSerializer::ArraySerializer<unsigned int>::~ArraySerializer(void *a1)
{
  *a1 = &unk_1ECAC6B88;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MTLSerializer::ArraySerializer<unsigned int>::~ArraySerializer(void *a1)
{
  *a1 = &unk_1ECAC6B88;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x18530C140);
}

uint64_t MTLPipelineLibrarySerializer::BinarySerializationContext::addNamedDescriptor(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2) {
    MTLSerializer::Context::CreatePropertyListSerializer((MTLSerializer::Context *)(result + 312));
  }
  return result;
}

void std::vector<unsigned char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  xpc_object_t value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (char *)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v11[v7];
    std::vector<char>::size_type v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      unint64_t v11 = v12;
    }
    else
    {
      unint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      std::vector<unsigned int>::pointer end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

void *std::vector<MTLSerializer::ObjectSerializer *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_182796534(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

MTLSerializer::DirectObjectListSerializer *MTLSerializer::ObjectArraySerializer<MTLSerializer::ObjectRef>::ObjectArraySerializer(MTLSerializer::DirectObjectListSerializer *a1, void *a2)
{
  uint64_t result = MTLSerializer::DirectObjectListSerializer::DirectObjectListSerializer(a1, (a2[1] - *a2) >> 3);
  *(void *)uint64_t result = &unk_1ECAC6C08;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      *(void *)(*((void *)result + 6) + 8 * v6) = *(void *)(*a2 + 8 * v6);
      ++v6;
    }
    while (v7 != v6);
  }
  return result;
}

void *MTLSerializer::ObjectArraySerializer<MTLSerializer::ObjectRef>::~ObjectArraySerializer(void *a1)
{
  *a1 = &unk_1ECAC6BD8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1ECAC6B88;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MTLSerializer::ObjectArraySerializer<MTLSerializer::ObjectRef>::~ObjectArraySerializer(void *a1)
{
  *a1 = &unk_1ECAC6BD8;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1ECAC6B88;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x18530C140);
}

uint64_t AirReflection::Node::node_as_PatchFnAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4100) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderTargetArrayIndexRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131075) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ViewportArrayIndexRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131077) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderTargetRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 135168)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_DepthRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135169) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_StencilRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135170) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_SampleMaskRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135171) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_AcceptIntersectionRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 139264)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_ContinueSearchRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 139265) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_DistanceRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 139266) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_MeshPrimitiveDataRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 143360)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_MeshVertexDataRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143361) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveCulledRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143362) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveIDRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143363) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

const char *AirReflection::EnumNameNodeType(int a1)
{
  if (a1 >= 286720)
  {
    if (a1 < 532480)
    {
      if (a1 < 528384)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "FunctionConstant";
            break;
          case 524289:
            uint64_t result = "StructTypeInfo";
            break;
          case 524290:
            uint64_t result = "StitchingArgument";
            break;
          case 524291:
            uint64_t result = "MeshTypeInfo";
            break;
          case 524292:
            uint64_t result = "GlobalBinding";
            break;
          case 524293:
            uint64_t result = "InlineTypeInfo";
            break;
          default:
            if (a1 == 286720)
            {
              uint64_t result = "MeshArg";
            }
            else
            {
              if (a1 != 290816) {
                return "";
              }
              uint64_t result = "MeshGridPropertiesArg";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 528384:
            uint64_t result = "OpaqueType";
            break;
          case 528385:
            uint64_t result = "VoidType";
            break;
          case 528386:
            uint64_t result = "BoolType";
            break;
          case 528387:
            uint64_t result = "CharType";
            break;
          case 528388:
            uint64_t result = "UCharType";
            break;
          case 528389:
            uint64_t result = "ShortType";
            break;
          case 528390:
            uint64_t result = "UShortType";
            break;
          case 528391:
            uint64_t result = "IntType";
            break;
          case 528392:
            uint64_t result = "UIntType";
            break;
          case 528393:
            uint64_t result = "LongType";
            break;
          case 528394:
            uint64_t result = "ULongType";
            break;
          case 528395:
            uint64_t result = "LLongType";
            break;
          case 528396:
            uint64_t result = "ULLongType";
            break;
          case 528397:
            uint64_t result = "HalfType";
            break;
          case 528398:
            uint64_t result = "FloatType";
            break;
          case 528399:
            uint64_t result = "DoubleType";
            break;
          case 528400:
            uint64_t result = "BFloatType";
            break;
          case 528401:
            uint64_t result = "VectorType";
            break;
          case 528402:
            uint64_t result = "PackedVectorType";
            break;
          case 528403:
            uint64_t result = "MatrixType";
            break;
          case 528404:
            uint64_t result = "FunctionType";
            break;
          case 528405:
            uint64_t result = "PointerType";
            break;
          case 528406:
            uint64_t result = "LValueReferenceType";
            break;
          case 528407:
            uint64_t result = "RValueReferenceType";
            break;
          case 528408:
            uint64_t result = "ArrayType";
            break;
          case 528409:
            uint64_t result = "EnumType";
            break;
          case 528410:
            uint64_t result = "RecordBase";
            break;
          case 528411:
            uint64_t result = "RecordField";
            break;
          case 528412:
            uint64_t result = "StructType";
            break;
          case 528413:
            uint64_t result = "UnionType";
            break;
          default:
            return "";
        }
      }
    }
    else if (a1 >= 536576)
    {
      switch(a1)
      {
        case 540672:
          uint64_t result = "ClipDistanceAttr";
          break;
        case 540673:
          uint64_t result = "FunctionConstantPredicateAttr";
          break;
        case 540674:
          uint64_t result = "LocationIndexAttr";
          break;
        case 540675:
          uint64_t result = "PointSizeAttr";
          break;
        case 540676:
          uint64_t result = "PositionAttr";
          break;
        case 540677:
          uint64_t result = "PrimitiveCulledAttr";
          break;
        case 540678:
          uint64_t result = "PrimitiveIDAttr";
          break;
        case 540679:
          uint64_t result = "RenderTargetAttr";
          break;
        case 540680:
          uint64_t result = "RenderTargetArrayIndexAttr";
          break;
        case 540681:
          uint64_t result = "ViewportArrayIndexAttr";
          break;
        case 540682:
          uint64_t result = "UserAttr";
          break;
        case 540683:
          uint64_t result = "InvariantAttr";
          break;
        case 540684:
          uint64_t result = "SharedAttr";
          break;
        default:
          switch(a1)
          {
            case 544768:
              uint64_t result = "MeshEmulationValueGroup";
              break;
            case 544769:
              uint64_t result = "MeshEmulationBlock";
              break;
            case 544770:
              uint64_t result = "MeshEmulationMeshLayout";
              break;
            case 544771:
              uint64_t result = "MeshEmulationMeshKernel";
              break;
            case 544772:
              uint64_t result = "MeshEmulationMeshVertex";
              break;
            case 544773:
              uint64_t result = "MeshEmulationObjectKernel";
              break;
            case 544774:
              uint64_t result = "MeshEmulationFragmentAnalysisResult";
              break;
            default:
              if (a1 != 536576) {
                return "";
              }
              uint64_t result = "AddressSpaceTypeQual";
              break;
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 532480:
          uint64_t result = "ArrayOfType";
          break;
        case 532481:
          uint64_t result = "ArrayRefOfType";
          break;
        case 532482:
          uint64_t result = "Texture1dType";
          break;
        case 532483:
          uint64_t result = "Texture1dArrayType";
          break;
        case 532484:
          uint64_t result = "Texture2dType";
          break;
        case 532485:
          uint64_t result = "Texture2dArrayType";
          break;
        case 532486:
          uint64_t result = "Texture3dType";
          break;
        case 532487:
          uint64_t result = "TextureCubeType";
          break;
        case 532488:
          uint64_t result = "TextureCubeArrayType";
          break;
        case 532489:
          uint64_t result = "Texture2dMsType";
          break;
        case 532490:
          uint64_t result = "Texture2dMsArrayType";
          break;
        case 532491:
          uint64_t result = "TextureBuffer1dType";
          break;
        case 532492:
          uint64_t result = "Depth2dType";
          break;
        case 532493:
          uint64_t result = "Depth2dArrayType";
          break;
        case 532494:
          uint64_t result = "DepthCubeType";
          break;
        case 532495:
          uint64_t result = "DepthCubeArrayType";
          break;
        case 532496:
          uint64_t result = "Depth2dMsType";
          break;
        case 532497:
          uint64_t result = "Depth2dMsArrayType";
          break;
        case 532498:
          uint64_t result = "SamplerType";
          break;
        case 532499:
          uint64_t result = "PatchControlPointType";
          break;
        case 532500:
          uint64_t result = "ImageblockType";
          break;
        case 532501:
          uint64_t result = "R8UNormType";
          break;
        case 532502:
          uint64_t result = "R8SNormType";
          break;
        case 532503:
          uint64_t result = "R16UNormType";
          break;
        case 532504:
          uint64_t result = "R16SNormType";
          break;
        case 532505:
          uint64_t result = "RG8UNormType";
          break;
        case 532506:
          uint64_t result = "RG8SNormType";
          break;
        case 532507:
          uint64_t result = "RG16UNormType";
          break;
        case 532508:
          uint64_t result = "RG16SNormType";
          break;
        case 532509:
          uint64_t result = "RGBA8UNormType";
          break;
        case 532510:
          uint64_t result = "RGBA8SNormType";
          break;
        case 532511:
          uint64_t result = "RGBA16UNormType";
          break;
        case 532512:
          uint64_t result = "RGBA16SNormType";
          break;
        case 532513:
          uint64_t result = "SRGBA8UNormType";
          break;
        case 532514:
          uint64_t result = "RGB10A2Type";
          break;
        case 532515:
          uint64_t result = "RG11B10FType";
          break;
        case 532516:
          uint64_t result = "RGB9E5Type";
          break;
        case 532517:
          uint64_t result = "CommandBufferType";
          break;
        case 532518:
          uint64_t result = "ComputePipelineStateType";
          break;
        case 532519:
          uint64_t result = "RenderPipelineStateType";
          break;
        case 532520:
          uint64_t result = "InterpolantType";
          break;
        case 532521:
          uint64_t result = "VisibleFunctionTableType";
          break;
        case 532522:
          uint64_t result = "IntersectionFunctionTableType";
          break;
        case 532523:
          uint64_t result = "AccelerationStructureType";
          break;
        case 532524:
          uint64_t result = "MeshType";
          break;
        case 532525:
          uint64_t result = "MeshGridPropertiesType";
          break;
        default:
          return "";
      }
    }
  }
  else if (a1 >= 270336)
  {
    if (a1 < 278528)
    {
      switch(a1)
      {
        case 270336:
          uint64_t result = "BaseInstanceArg";
          break;
        case 270337:
          uint64_t result = "BaseVertexArg";
          break;
        case 270338:
          uint64_t result = "InstanceIDArg";
          break;
        case 270339:
          uint64_t result = "VertexIDArg";
          break;
        case 270340:
          uint64_t result = "VertexInputArg";
          break;
        case 270341:
          uint64_t result = "ControlPointIndexBufferArg";
          break;
        case 270342:
          uint64_t result = "PatchIDArg";
          break;
        case 270343:
          uint64_t result = "PositionInPatchArg";
          break;
        case 270344:
          uint64_t result = "PatchInputArg";
          break;
        case 270345:
          uint64_t result = "ControlPointInputArg";
          break;
        case 270346:
          uint64_t result = "ControlPointField";
          break;
        case 270347:
        case 270348:
        case 270349:
          return "";
        case 270350:
          uint64_t result = "AmplificationCountArg";
          break;
        case 270351:
          uint64_t result = "AmplificationIDArg";
          break;
        default:
          switch(a1)
          {
            case 274432:
              uint64_t result = "FragmentInputArg";
              break;
            case 274433:
              uint64_t result = "FrontFacingArg";
              break;
            case 274434:
              uint64_t result = "PositionArg";
              break;
            case 274435:
              uint64_t result = "PointCoordArg";
              break;
            case 274436:
              uint64_t result = "RenderTargetArg";
              break;
            case 274437:
              uint64_t result = "RenderTargetArrayIndexArg";
              break;
            case 274438:
              uint64_t result = "SampleIDArg";
              break;
            case 274439:
              uint64_t result = "SampleMaskArg";
              break;
            case 274440:
              uint64_t result = "ViewportArrayIndexArg";
              break;
            case 274445:
              uint64_t result = "BarycentricCoordArg";
              break;
            case 274446:
              uint64_t result = "PrimitiveIDArg";
              break;
            default:
              return "";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 282624:
          uint64_t result = "PayloadArg";
          break;
        case 282625:
          uint64_t result = "OriginArg";
          break;
        case 282626:
          uint64_t result = "DirectionArg";
          break;
        case 282627:
          uint64_t result = "MinDistanceArg";
          break;
        case 282628:
          uint64_t result = "MaxDistanceArg";
          break;
        case 282629:
          uint64_t result = "DistanceArg";
          break;
        case 282630:
          uint64_t result = "WorldSpaceOriginArg";
          break;
        case 282631:
          uint64_t result = "WorldSpaceDirectionArg";
          break;
        case 282632:
          uint64_t result = "GeometryIDArg";
          break;
        case 282633:
          uint64_t result = "UserInstanceIDArg";
          break;
        case 282634:
          uint64_t result = "GeometryIntersectionFunctionTableOffsetArg";
          break;
        case 282635:
          uint64_t result = "InstanceIntersectionFunctionTableOffsetArg";
          break;
        case 282636:
          uint64_t result = "OpaquePrimitiveArg";
          break;
        case 282637:
          uint64_t result = "ObjectToWorldTransformArg";
          break;
        case 282638:
          uint64_t result = "WorldToObjectTransformArg";
          break;
        case 282639:
          uint64_t result = "TimeArg";
          break;
        case 282640:
          uint64_t result = "KeyFrameCountArg";
          break;
        case 282641:
          uint64_t result = "MotionStartTimeArg";
          break;
        case 282642:
          uint64_t result = "MotionEndTimeArg";
          break;
        case 282643:
          uint64_t result = "PrimitiveDataArg";
          break;
        case 282644:
          uint64_t result = "InstanceIDCountArg";
          break;
        case 282645:
          uint64_t result = "UserInstanceIDCountArg";
          break;
        case 282646:
          uint64_t result = "CurveParameterArg";
          break;
        default:
          switch(a1)
          {
            case 282624:
              uint64_t result = "PixelPositionInTileArg";
              break;
            case 282625:
              uint64_t result = "PixelsPerTileArg";
              break;
            case 282626:
              uint64_t result = "TileIndexArg";
              break;
            case 282627:
              uint64_t result = "ImageblockArg";
              break;
            case 282628:
              uint64_t result = "ImageblockDataArg";
              break;
            default:
              return "";
          }
          break;
      }
    }
  }
  else if (a1 < 143360)
  {
    if (a1 >= 0x20000)
    {
      if (a1 < 135168)
      {
        switch(a1)
        {
          case 131072:
            uint64_t result = "ClipDistanceRet";
            break;
          case 131073:
            uint64_t result = "PointSizeRet";
            break;
          case 131074:
            uint64_t result = "PositionRet";
            break;
          case 131075:
            uint64_t result = "RenderTargetArrayIndexRet";
            break;
          case 131076:
            uint64_t result = "VertexOutputRet";
            break;
          case 131077:
            uint64_t result = "ViewportArrayIndexRet";
            break;
          default:
            return "";
        }
      }
      else if (a1 >= 139264)
      {
        switch(a1)
        {
          case 139264:
            return "AcceptIntersectionRet";
          case 139265:
            return "ContinueSearchRet";
          case 139266:
            return "DistanceRet";
          default:
            return "";
        }
      }
      else
      {
        switch(a1)
        {
          case 135168:
            uint64_t result = "RenderTargetRet";
            break;
          case 135169:
            uint64_t result = "DepthRet";
            break;
          case 135170:
            uint64_t result = "StencilRet";
            break;
          case 135171:
            uint64_t result = "SampleMaskRet";
            break;
          case 135172:
            uint64_t result = "ImageblockDataRet";
            break;
          default:
            return "";
        }
      }
    }
    else
    {
      uint64_t result = "NONE";
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "FragmentFunction";
          break;
        case 2:
          uint64_t result = "KernelFunction";
          break;
        case 3:
          uint64_t result = "VertexFunction";
          break;
        case 4:
          uint64_t result = "VisibleFunction";
          break;
        case 5:
          uint64_t result = "IntersectionFunction";
          break;
        case 6:
          uint64_t result = "MeshFunction";
          break;
        case 7:
          uint64_t result = "ObjectFunction";
          break;
        default:
          switch(a1)
          {
            case 4096:
              uint64_t result = "VecTypeHintFnAttr";
              break;
            case 4097:
              uint64_t result = "WorkgroupSizeFnAttr";
              break;
            case 4098:
              uint64_t result = "WorkgroupSizeHintFnAttr";
              break;
            case 4099:
              uint64_t result = "WorkgroupMaxSizeFnAttr";
              break;
            case 4100:
              uint64_t result = "PatchFnAttr";
              break;
            case 4101:
              uint64_t result = "MaxMeshWorkgroupsFnAttr";
              break;
            default:
              return "";
          }
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 266240:
        uint64_t result = "ThreadPositionInGridArg";
        break;
      case 266241:
        uint64_t result = "ThreadsPerGridArg";
        break;
      case 266242:
        uint64_t result = "ThreadgroupPositionInGridArg";
        break;
      case 266243:
        uint64_t result = "ThreadgroupsPerGridArg";
        break;
      case 266244:
        uint64_t result = "ThreadPositionInThreadgroupArg";
        break;
      case 266245:
        uint64_t result = "ThreadsPerThreadgroupArg";
        break;
      case 266246:
        uint64_t result = "DispatchThreadsPerThreadgroupArg";
        break;
      case 266247:
        uint64_t result = "ThreadIndexInThreadgroupArg";
        break;
      case 266248:
        uint64_t result = "ThreadExecutionWidthArg";
        break;
      case 266249:
        uint64_t result = "StageInArg";
        break;
      case 266250:
        uint64_t result = "StageInGridOriginArg";
        break;
      case 266251:
        uint64_t result = "StageInGridSizeArg";
        break;
      case 266252:
        uint64_t result = "ThreadIndexInSimdgroupArg";
        break;
      case 266253:
        uint64_t result = "ThreadsPerSimdgroupArg";
        break;
      case 266254:
        uint64_t result = "SimdgroupIndexInThreadgroupArg";
        break;
      case 266255:
        uint64_t result = "SimdgroupsPerThreadgroupArg";
        break;
      case 266256:
        uint64_t result = "DispatchSimdgroupsPerThreadgroupArg";
        break;
      case 266257:
        uint64_t result = "ThreadIndexInQuadgroupArg";
        break;
      case 266258:
        uint64_t result = "QuadgroupIndexInThreadgroupArg";
        break;
      case 266259:
        uint64_t result = "QuadgroupsPerThreadgroupArg";
        break;
      case 266260:
        uint64_t result = "DispatchQuadgroupsPerThreadgroupArg";
        break;
      default:
        switch(a1)
        {
          case 262144:
            uint64_t result = "BufferArg";
            break;
          case 262145:
            uint64_t result = "SamplerArg";
            break;
          case 262146:
            uint64_t result = "TextureArg";
            break;
          case 262147:
            uint64_t result = "ConstantArg";
            break;
          case 262148:
            uint64_t result = "IndirectBufferArg";
            break;
          case 262149:
            uint64_t result = "IndirectConstantArg";
            break;
          case 262150:
            uint64_t result = "CommandBufferArg";
            break;
          case 262151:
            uint64_t result = "ComputePipelineStateArg";
            break;
          case 262152:
            uint64_t result = "RenderPipelineStateArg";
            break;
          case 262153:
            uint64_t result = "VisibleFunctionTableArg";
            break;
          case 262154:
            uint64_t result = "IntersectionFunctionTableArg";
            break;
          case 262155:
            uint64_t result = "InstanceAccelerationStructureArg";
            break;
          case 262156:
            uint64_t result = "PrimitiveAccelerationStructureArg";
            break;
          case 262157:
            uint64_t result = "BufferStrideArg";
            break;
          default:
            switch(a1)
            {
              case 262144:
                uint64_t result = "MeshPrimitiveDataRet";
                break;
              case 262145:
                uint64_t result = "MeshVertexDataRet";
                break;
              case 262146:
                uint64_t result = "PrimitiveCulledRet";
                break;
              case 262147:
                uint64_t result = "PrimitiveIDRet";
                break;
              default:
                return "";
            }
            break;
        }
        break;
    }
  }
  return result;
}

void MTLIntersectionReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (data)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    uint64_t v6 = v5;
    unint64_t v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    uint64_t v8 = *v7;
    uint64_t v9 = -v8;
    size_t v10 = (unsigned __int16 *)((char *)v7 - v8);
    if (*v10 >= 5u)
    {
      unsigned __int16 v11 = v10[2];
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
        uint64_t v9 = -(uint64_t)*v7;
      }
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v7 + v9);
    unsigned int v13 = *v12;
    if (v13 >= 7
      && (!v12[3] ? (unint64_t v14 = 0) : (unint64_t v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
          v13 >= 0xB && (uint64_t v15 = v12[5]) != 0 && v14 && *v14))
    {
      uint64_t v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
      int v17 = (int *)AirReflection::Node::node_as_IntersectionFunction((AirReflection::Node *)((char *)v16
                                                                                           + v16[1]
                                                                                           + 4));
      uint64_t v18 = v17;
      unint64_t v19 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
        unsigned int v21 = (unsigned int *)((char *)v17 + v20 + *(unsigned int *)((char *)v17 + v20));
      }
      else {
        unsigned int v21 = 0;
      }
      memset(v109, 0, sizeof(v109));
      memset(v107, 0, sizeof(v107));
      int v108 = 1065353216;
      std::string __p = (void *)6;
      LOBYTE(v106) = 0;
      memset(v112, 0, sizeof(v112));
      int v113 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v107, (uint64_t *)v112);
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v112);
      std::deque<ContextStack>::push_back(v109, (uint64_t *)&__p);
      ContextStack::~ContextStack((ContextStack *)&__p);
      unint64_t v22 = deserializeArguments(a2, v21, (uint64_t)v14, v109, (void **)(a1 + 8), (*(void *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
      size_t v23 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v23 >= 0x1Du && (uint64_t v24 = v23[14]) != 0) {
        unint64_t v25 = (unsigned int *)((char *)v7 + v24 + *(unsigned int *)((char *)v7 + v24));
      }
      else {
        unint64_t v25 = 0;
      }
      uint64_t v26 = deserializeGlobalBindings(a2, v25, v109, (uint64_t)v14, (void **)(a1 + 24));
      std::string __p = 0;
      uint64_t v106 = 0;
      *(void *)&v107[0] = 0;
      uint64_t v27 = *v18;
      uint64_t v28 = -v27;
      unint64_t v29 = (unsigned __int16 *)((char *)v18 - v27);
      if (*v29 >= 0xDu && (uint64_t v30 = v29[6]) != 0 && *((unsigned char *)v18 + v30))
      {
        unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, 1uLL);
        int v32 = (char *)__p;
        unsigned int v33 = v106;
        unint64_t v35 = &v31[8 * v34];
        *(void *)unint64_t v31 = 1;
        double v36 = v31 + 8;
        while (v33 != v32)
        {
          uint64_t v37 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v31 - 1) = v37;
          v31 -= 8;
        }
        std::string __p = v31;
        uint64_t v106 = v36;
        *(void *)&v107[0] = v35;
        if (v32) {
          operator delete(v32);
        }
        uint64_t v106 = v36;
        uint64_t v28 = -(uint64_t)*v18;
      }
      else
      {
        double v36 = 0;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0xFu
        && *(_WORD *)((char *)v18 + v28 + 14)
        && *((unsigned char *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 14)))
      {
        if ((unint64_t)v36 >= *(void *)&v107[0])
        {
          size_t v39 = (char *)__p;
          uint64_t v40 = (v36 - (unsigned char *)__p) >> 3;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = *(void *)&v107[0] - (void)__p;
          if ((uint64_t)(*(void *)&v107[0] - (void)__p) >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v43);
            size_t v39 = (char *)__p;
            double v36 = v106;
          }
          else
          {
            unint64_t v44 = 0;
          }
          uint64_t v45 = &v44[8 * v40];
          int v46 = &v44[8 * v43];
          *(void *)uint64_t v45 = 2;
          int v38 = v45 + 8;
          while (v36 != v39)
          {
            uint64_t v47 = *((void *)v36 - 1);
            v36 -= 8;
            *((void *)v45 - 1) = v47;
            v45 -= 8;
          }
          std::string __p = v45;
          uint64_t v106 = v38;
          *(void *)&v107[0] = v46;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)double v36 = 2;
          int v38 = v36 + 8;
        }
        uint64_t v106 = v38;
        uint64_t v28 = -(uint64_t)*v18;
        double v36 = v38;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0x11u
        && *(_WORD *)((char *)v18 + v28 + 16)
        && *((unsigned char *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 16)))
      {
        if ((unint64_t)v36 >= *(void *)&v107[0])
        {
          uint64_t v49 = (char *)__p;
          uint64_t v50 = (v36 - (unsigned char *)__p) >> 3;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = *(void *)&v107[0] - (void)__p;
          if ((uint64_t)(*(void *)&v107[0] - (void)__p) >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            uint64_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v53);
            uint64_t v49 = (char *)__p;
            double v36 = v106;
          }
          else
          {
            uint64_t v54 = 0;
          }
          uint64_t v55 = &v54[8 * v50];
          long long v56 = &v54[8 * v53];
          *(void *)uint64_t v55 = 3;
          uint64_t v48 = v55 + 8;
          while (v36 != v49)
          {
            uint64_t v57 = *((void *)v36 - 1);
            v36 -= 8;
            *((void *)v55 - 1) = v57;
            v55 -= 8;
          }
          std::string __p = v55;
          uint64_t v106 = v48;
          *(void *)&v107[0] = v56;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(void *)double v36 = 3;
          uint64_t v48 = v36 + 8;
        }
        uint64_t v106 = v48;
        uint64_t v28 = -(uint64_t)*v18;
        double v36 = v48;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0x13u
        && *(_WORD *)((char *)v18 + v28 + 18)
        && *((unsigned char *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 18)))
      {
        if ((unint64_t)v36 >= *(void *)&v107[0])
        {
          size_t v59 = (char *)__p;
          uint64_t v60 = (v36 - (unsigned char *)__p) >> 3;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v62 = *(void *)&v107[0] - (void)__p;
          if ((uint64_t)(*(void *)&v107[0] - (void)__p) >> 2 > v61) {
            unint64_t v61 = v62 >> 2;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v63)
          {
            uint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v63);
            size_t v59 = (char *)__p;
            double v36 = v106;
          }
          else
          {
            uint64_t v64 = 0;
          }
          uint64_t v65 = &v64[8 * v60];
          char v66 = &v64[8 * v63];
          *(void *)uint64_t v65 = 5;
          long long v58 = v65 + 8;
          while (v36 != v59)
          {
            uint64_t v67 = *((void *)v36 - 1);
            v36 -= 8;
            *((void *)v65 - 1) = v67;
            v65 -= 8;
          }
          std::string __p = v65;
          uint64_t v106 = v58;
          *(void *)&v107[0] = v66;
          if (v59) {
            operator delete(v59);
          }
        }
        else
        {
          *(void *)double v36 = 5;
          long long v58 = v36 + 8;
        }
        uint64_t v106 = v58;
        uint64_t v28 = -(uint64_t)*v18;
        double v36 = v58;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0x15u
        && *(_WORD *)((char *)v18 + v28 + 20)
        && *((unsigned char *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 20)))
      {
        if ((unint64_t)v36 >= *(void *)&v107[0])
        {
          uint64_t v69 = (char *)__p;
          uint64_t v70 = (v36 - (unsigned char *)__p) >> 3;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v72 = *(void *)&v107[0] - (void)__p;
          if ((uint64_t)(*(void *)&v107[0] - (void)__p) >> 2 > v71) {
            unint64_t v71 = v72 >> 2;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v73);
            uint64_t v69 = (char *)__p;
            double v36 = v106;
          }
          else
          {
            uint64_t v74 = 0;
          }
          uint64_t v75 = &v74[8 * v70];
          BOOL v76 = &v74[8 * v73];
          *(void *)uint64_t v75 = 4;
          uint64_t v68 = v75 + 8;
          while (v36 != v69)
          {
            uint64_t v77 = *((void *)v36 - 1);
            v36 -= 8;
            *((void *)v75 - 1) = v77;
            v75 -= 8;
          }
          std::string __p = v75;
          uint64_t v106 = v68;
          *(void *)&v107[0] = v76;
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *(void *)double v36 = 4;
          uint64_t v68 = v36 + 8;
        }
        uint64_t v106 = v68;
        uint64_t v28 = -(uint64_t)*v18;
        double v36 = v68;
      }
      if (*(unsigned __int16 *)((char *)v18 + v28) >= 0x17u
        && *(_WORD *)((char *)v18 + v28 + 22)
        && *((unsigned char *)v18 + *(unsigned __int16 *)((char *)v18 + v28 + 22)))
      {
        if ((unint64_t)v36 >= *(void *)&v107[0])
        {
          unint64_t v79 = (char *)__p;
          uint64_t v80 = (v36 - (unsigned char *)__p) >> 3;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 61) {
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v82 = *(void *)&v107[0] - (void)__p;
          if ((uint64_t)(*(void *)&v107[0] - (void)__p) >> 2 > v81) {
            unint64_t v81 = v82 >> 2;
          }
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v83 = v81;
          }
          if (v83)
          {
            uint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v83);
            unint64_t v79 = (char *)__p;
            double v36 = v106;
          }
          else
          {
            uint64_t v84 = 0;
          }
          uint64_t v85 = &v84[8 * v80];
          int v86 = &v84[8 * v83];
          *(void *)uint64_t v85 = 6;
          long long v78 = v85 + 8;
          while (v36 != v79)
          {
            uint64_t v87 = *((void *)v36 - 1);
            v36 -= 8;
            *((void *)v85 - 1) = v87;
            v85 -= 8;
          }
          std::string __p = v85;
          uint64_t v106 = v78;
          *(void *)&v107[0] = v86;
          if (v79) {
            operator delete(v79);
          }
        }
        else
        {
          *(void *)double v36 = 6;
          long long v78 = v36 + 8;
        }
        uint64_t v106 = v78;
        uint64_t v28 = -(uint64_t)*v18;
        double v36 = v78;
      }
      int v88 = (unsigned __int16 *)((char *)v18 + v28);
      if (*v88 >= 0x19u)
      {
        uint64_t v89 = v88[12];
        if (v89)
        {
          if (*((unsigned char *)v18 + v89))
          {
            if ((unint64_t)v36 >= *(void *)&v107[0])
            {
              uint64_t v91 = (char *)__p;
              uint64_t v92 = (v36 - (unsigned char *)__p) >> 3;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61) {
                std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v94 = *(void *)&v107[0] - (void)__p;
              if ((uint64_t)(*(void *)&v107[0] - (void)__p) >> 2 > v93) {
                unint64_t v93 = v94 >> 2;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v93;
              }
              if (v95)
              {
                unint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v107, v95);
                uint64_t v91 = (char *)__p;
                double v36 = v106;
              }
              else
              {
                unint64_t v96 = 0;
              }
              unsigned int v97 = &v96[8 * v92];
              uint64_t v98 = &v96[8 * v95];
              *(void *)unsigned int v97 = 7;
              uint64_t v90 = v97 + 8;
              while (v36 != v91)
              {
                uint64_t v99 = *((void *)v36 - 1);
                v36 -= 8;
                *((void *)v97 - 1) = v99;
                v97 -= 8;
              }
              std::string __p = v97;
              uint64_t v106 = v90;
              *(void *)&v107[0] = v98;
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(void *)double v36 = 7;
              uint64_t v90 = v36 + 8;
            }
            uint64_t v106 = v90;
            double v36 = v90;
          }
        }
      }
      uint64_t v100 = (v36 - (unsigned char *)__p) >> 3;
      *(_DWORD *)(a1 + 128) = v100;
      *(void *)(a1 + 120) = malloc_type_calloc(v100, 8uLL, 0x80040B8603338uLL);
      if (*(_DWORD *)(a1 + 128))
      {
        unint64_t v101 = 0;
        do
        {
          unint64_t v102 = [MTLTag alloc];
          *(void *)(*(void *)(a1 + 120) + 8 * v101) = [(MTLTag *)v102 initWithTagType:*((void *)__p + v101)];
          ++v101;
        }
        while (v101 < *(unsigned int *)(a1 + 128));
      }
      unsigned int v103 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v103 < 0xBu)
      {
        uint64_t v104 = 0;
      }
      else
      {
        uint64_t v104 = v103[5];
        if (v104) {
          uint64_t v104 = *((unsigned __int8 *)v18 + v104);
        }
      }
      *(void *)(a1 + 112) = v104;
      *(_DWORD *)(a1 + 16) = HIDWORD(v22);
      *(_DWORD *)(a1 + 32) = HIDWORD(v26);
      *(_DWORD *)(a1 + 36) = v22;
      dispatch_release(v6);
      if (__p)
      {
        uint64_t v106 = (char *)__p;
        operator delete(__p);
      }
      std::deque<ContextStack>::~deque[abi:ne180100](v109);
    }
    else
    {
      dispatch_release(v5);
    }
  }
}

void sub_1827985FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::deque<ContextStack>::~deque[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void MTLObjectDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (data)
  {
    buffer_ptr = 0;
    size_t size_ptr = 0;
    uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    uint64_t v6 = v5;
    unint64_t v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    uint64_t v8 = *v7;
    uint64_t v9 = -v8;
    size_t v10 = (unsigned __int16 *)((char *)v7 - v8);
    if (*v10 >= 5u)
    {
      unsigned __int16 v11 = v10[2];
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
        uint64_t v9 = -(uint64_t)*v7;
      }
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v7 + v9);
    unsigned int v13 = *v12;
    if (v13 >= 7
      && (!v12[3] ? (unint64_t v14 = 0) : (unint64_t v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
          v13 >= 0x15 && (uint64_t v15 = v12[10]) != 0 && v14 && *v14))
    {
      uint64_t v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
      int v17 = (int *)AirReflection::Node::node_as_ObjectFunction((AirReflection::Node *)((char *)v16
                                                                                     + v16[1]
                                                                                     + 4));
      uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
        uint64_t v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
      }
      else {
        uint64_t v20 = 0;
      }
      memset(v30, 0, sizeof(v30));
      memset(v28, 0, sizeof(v28));
      int v29 = 1065353216;
      uint64_t v26 = 8;
      char v27 = 0;
      memset(v33, 0, sizeof(v33));
      int v34 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v28, (uint64_t *)v33);
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v33);
      std::deque<ContextStack>::push_back(v30, &v26);
      ContextStack::~ContextStack((ContextStack *)&v26);
      unint64_t v21 = deserializeArguments(a2, v20, (uint64_t)v14, v30, (void **)(a1 + 8), (*(void *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
      unint64_t v22 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v22 >= 0x1Du && (uint64_t v23 = v22[14]) != 0) {
        uint64_t v24 = (unsigned int *)((char *)v7 + v23 + *(unsigned int *)((char *)v7 + v23));
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = deserializeGlobalBindings(a2, v24, v30, (uint64_t)v14, (void **)(a1 + 24));
      *(_DWORD *)(a1 + 16) = HIDWORD(v21);
      *(_DWORD *)(a1 + 32) = HIDWORD(v25);
      *(_DWORD *)(a1 + 36) = v21;
      dispatch_release(v6);
      std::deque<ContextStack>::~deque[abi:ne180100](v30);
    }
    else
    {
      dispatch_release(v5);
    }
  }
}

void sub_182798894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::deque<ContextStack>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MTLMeshDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (data)
  {
    buffer_ptr = 0;
    size_t size_ptr = 0;
    uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    uint64_t v6 = v5;
    unint64_t v7 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    uint64_t v8 = *v7;
    uint64_t v9 = -v8;
    size_t v10 = (unsigned __int16 *)((char *)v7 - v8);
    if (*v10 >= 5u)
    {
      unsigned __int16 v11 = v10[2];
      if (v11)
      {
        *(_DWORD *)(a1 + 104) = *(int *)((char *)v7 + v11 + 4) | (*(int *)((char *)v7 + v11) << 16);
        uint64_t v9 = -(uint64_t)*v7;
      }
    }
    unint64_t v12 = (unsigned __int16 *)((char *)v7 + v9);
    unsigned int v13 = *v12;
    if (v13 >= 7
      && (!v12[3] ? (unint64_t v14 = 0) : (unint64_t v14 = (int *)((char *)v7 + v12[3] + *(unsigned int *)((char *)v7 + v12[3]))),
          v13 >= 0x13 && (uint64_t v15 = v12[9]) != 0 && v14 && *v14))
    {
      uint64_t v16 = &v14[*(int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15) + 4)];
      int v17 = (int *)AirReflection::Node::node_as_MeshFunction((AirReflection::Node *)((char *)v16
                                                                                   + v16[1]
                                                                                   + 4));
      uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
        uint64_t v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
      }
      else {
        uint64_t v20 = 0;
      }
      memset(v30, 0, sizeof(v30));
      memset(v28, 0, sizeof(v28));
      int v29 = 1065353216;
      uint64_t v26 = 7;
      char v27 = 0;
      memset(v33, 0, sizeof(v33));
      int v34 = 1065353216;
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v28, (uint64_t *)v33);
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v33);
      std::deque<ContextStack>::push_back(v30, &v26);
      ContextStack::~ContextStack((ContextStack *)&v26);
      unint64_t v21 = deserializeArguments(a2, v20, (uint64_t)v14, v30, (void **)(a1 + 8), (*(void *)(a1 + 96) & 0x200000) == 0, (_DWORD *)(a1 + 40));
      unint64_t v22 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v22 >= 0x1Du && (uint64_t v23 = v22[14]) != 0) {
        uint64_t v24 = (unsigned int *)((char *)v7 + v23 + *(unsigned int *)((char *)v7 + v23));
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = deserializeGlobalBindings(a2, v24, v30, (uint64_t)v14, (void **)(a1 + 24));
      *(_DWORD *)(a1 + 16) = HIDWORD(v21);
      *(_DWORD *)(a1 + 32) = HIDWORD(v25);
      *(_DWORD *)(a1 + 36) = v21;
      dispatch_release(v6);
      std::deque<ContextStack>::~deque[abi:ne180100](v30);
    }
    else
    {
      dispatch_release(v5);
    }
  }
}

void sub_182798AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::deque<ContextStack>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MTLDynamicLibraryReflectionDeserializerAIR::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  if (data)
  {
    buffer_ptr = 0;
    size_t size_ptr = 0;
    uint64_t v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    uint64_t v6 = (unsigned int *)buffer_ptr;
    if (!strncmp((const char *)buffer_ptr + 4, "AIRR", 4uLL))
    {
      unint64_t v7 = (int *)((char *)v6 + *v6);
      uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
      if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0)
      {
        size_t v10 = (char *)v7 + v9;
        uint64_t v11 = *(unsigned int *)((char *)v7 + v9);
        memset(v20, 0, sizeof(v20));
        memset(v18, 0, sizeof(v18));
        int v19 = 1065353216;
        uint64_t v16 = 0xFFFFLL;
        char v17 = 0;
        memset(v23, 0, sizeof(v23));
        int v24 = 1065353216;
        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__move_assign((uint64_t)v18, (uint64_t *)v23);
        std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v23);
        std::deque<ContextStack>::push_back(v20, &v16);
        uint64_t v12 = (uint64_t)&v10[v11];
        ContextStack::~ContextStack((ContextStack *)&v16);
        unsigned int v13 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v13 >= 0x1Du && (uint64_t v14 = v13[14]) != 0) {
          uint64_t v15 = (unsigned int *)((char *)v7 + v14 + *(unsigned int *)((char *)v7 + v14));
        }
        else {
          uint64_t v15 = 0;
        }
        *(_DWORD *)(a1 + 32) = (unint64_t)deserializeGlobalBindings(a2, v15, v20, v12, (void **)(a1 + 24)) >> 32;
        std::deque<ContextStack>::~deque[abi:ne180100](v20);
      }
      else
      {
        *(_DWORD *)(a1 + 32) = 0;
      }
    }
    dispatch_release(v5);
  }
}

void sub_182798C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::deque<ContextStack>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ReflectionReaderFactory<MTLIntersectionReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
}

void sub_182798DAC(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A1C4051C9475BLL);
  _Unwind_Resume(a1);
}

void ReflectionReaderFactory<MTLStitchingReflectionReader>::Create()
{
}

void sub_182798EA8(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void ReflectionReaderFactory<MTLObjectReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
}

void sub_182798FD4(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A1C4012993A1CLL);
  _Unwind_Resume(a1);
}

void ReflectionReaderFactory<MTLMeshReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
}

void sub_182799108(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A1C4012993A1CLL);
  _Unwind_Resume(a1);
}

void ReflectionReaderFactory<MTLDynamicLibraryReflectionReader>::Create(uint64_t a1, NSObject *a2)
{
}

void sub_18279923C(_Unwind_Exception *a1)
{
  MEMORY[0x18530C140](v1, 0x10A1C4012993A1CLL);
  _Unwind_Resume(a1);
}

uint64_t MTLVertexReflectionDeserializerAIR::deserialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 24))(a1, a2, a3, 0);
}

void MTLIntersectionReflectionDeserializerAIR::~MTLIntersectionReflectionDeserializerAIR(MTLIntersectionReflectionDeserializerAIR *this)
{
  MTLIntersectionReflectionDeserializer::~MTLIntersectionReflectionDeserializer(this);

  JUMPOUT(0x18530C140);
}

void MTLObjectDeserializerAIR::~MTLObjectDeserializerAIR(MTLObjectDeserializerAIR *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);

  JUMPOUT(0x18530C140);
}

void MTLMeshDeserializerAIR::~MTLMeshDeserializerAIR(MTLMeshDeserializerAIR *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);

  JUMPOUT(0x18530C140);
}

void MTLDynamicLibraryReflectionDeserializerAIR::~MTLDynamicLibraryReflectionDeserializerAIR(MTLDynamicLibraryReflectionDeserializerAIR *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);

  JUMPOUT(0x18530C140);
}

uint64_t AirReflection::Node::node_as_ConstantArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262147) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_BaseVertexArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270337) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_BaseInstanceArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 270336)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_ThreadIndexInThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266247) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadgroupsPerGridArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266243) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadExecutionWidthArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266248) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PatchIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270342) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PositionInPatchArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270343) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_StageInGridOriginArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266250) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_StageInGridSizeArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266251) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadIndexInQuadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266257) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ThreadsPerSimdgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266253) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_AmplificationCountArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270350) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_MeshGridPropertiesArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 290816)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_MeshArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 286720)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_MeshTypeInfo(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524291) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

MTLStructTypeInternal *deserializeMeshStructArgument(unsigned int *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (v3)
    {
      uint64_t v5 = (void **)malloc_type_calloc(*a1, 8uLL, 0x80040B8603338uLL);
      uint64_t v6 = 0;
      unint64_t v7 = a1 + 1;
      uint64_t v8 = a2 + 4;
      while (1)
      {
        uint64_t v9 = (unsigned int *)(v8 + 4 * v7[v6]);
        size_t v10 = (AirReflection::Node *)((char *)v9 + *v9);
        uint64_t v11 = (unsigned __int16 *)((char *)v10 - *(int *)v10);
        if (*v11 < 5u)
        {
          LODWORD(v12) = 0;
        }
        else
        {
          uint64_t v12 = v11[2];
          if (v12)
          {
            LODWORD(v12) = *(_DWORD *)((char *)v10 + v12);
            if ((int)v12 < 139264)
            {
              switch((int)v12)
              {
                case 131072:
                  unsigned int v13 = (int *)AirReflection::Node::node_as_ClipDistanceRet(v10);
                  goto LABEL_24;
                case 131073:
                  uint64_t v23 = (int *)AirReflection::Node::node_as_PointSizeRet(v10);
                  goto LABEL_45;
                case 131074:
                  unsigned int v13 = (int *)AirReflection::Node::node_as_PositionRet(v10);
LABEL_24:
                  char v17 = v13;
                  uint64_t v24 = *v13;
                  uint64_t v25 = -v24;
                  uint64_t v26 = (unsigned __int16 *)((char *)v13 - v24);
                  if (*v26 >= 0xDu && (uint64_t v27 = v26[6]) != 0)
                  {
                    uint64_t v14 = (__CFString *)[NSString stringWithUTF8String:(char *)v13 + v27 + *(unsigned int *)((char *)v13 + v27) + 4];
                    uint64_t v25 = -(uint64_t)*v17;
                  }
                  else
                  {
                    uint64_t v14 = &stru_1ECAC84A8;
                  }
                  uint64_t v28 = (unsigned __int16 *)((char *)v17 + v25);
                  if (*v28 < 0xBu) {
                    goto LABEL_74;
                  }
                  uint64_t v29 = v28[5];
                  if (!v29) {
                    goto LABEL_75;
                  }
                  goto LABEL_65;
                case 131075:
                  uint64_t v23 = (int *)AirReflection::Node::node_as_RenderTargetArrayIndexRet(v10);
                  goto LABEL_45;
                case 131076:
                  uint64_t v16 = (int *)AirReflection::Node::node_as_VertexOutputRet(v10);
                  goto LABEL_35;
                case 131077:
                  uint64_t v23 = (int *)AirReflection::Node::node_as_ViewportArrayIndexRet(v10);
                  goto LABEL_45;
                default:
                  switch((int)v12)
                  {
                    case 135168:
                      char v17 = (int *)AirReflection::Node::node_as_RenderTargetRet(v10);
                      uint64_t v18 = *v17;
                      uint64_t v19 = -v18;
                      uint64_t v20 = (unsigned __int16 *)((char *)v17 - v18);
                      if (*v20 >= 0x11u && (uint64_t v21 = v20[8]) != 0)
                      {
                        uint64_t v14 = (__CFString *)[NSString stringWithUTF8String:(char *)v17 + v21 + *(unsigned int *)((char *)v17 + v21) + 4];
                        uint64_t v19 = -(uint64_t)*v17;
                      }
                      else
                      {
                        uint64_t v14 = &stru_1ECAC84A8;
                      }
                      uint64_t v49 = (unsigned __int16 *)((char *)v17 + v19);
                      if (*v49 < 0xFu) {
                        goto LABEL_74;
                      }
                      uint64_t v29 = v49[7];
                      if (!v29) {
                        goto LABEL_75;
                      }
                      goto LABEL_65;
                    case 135169:
                      uint64_t v23 = (int *)AirReflection::Node::node_as_DepthRet(v10);
                      goto LABEL_45;
                    case 135170:
                      unint64_t v22 = (int *)AirReflection::Node::node_as_StencilRet(v10);
                      goto LABEL_59;
                    case 135171:
                      unint64_t v22 = (int *)AirReflection::Node::node_as_SampleMaskRet(v10);
                      goto LABEL_59;
                    case 135172:
                      char v17 = (int *)AirReflection::Node::node_as_ImageblockDataRet(v10);
                      uint64_t v40 = *v17;
                      uint64_t v41 = -v40;
                      uint64_t v42 = (unsigned __int16 *)((char *)v17 - v40);
                      if (*v42 >= 0x15u && (uint64_t v43 = v42[10]) != 0)
                      {
                        uint64_t v14 = (__CFString *)[NSString stringWithUTF8String:(char *)v17 + v43 + *(unsigned int *)((char *)v17 + v43) + 4];
                        uint64_t v41 = -(uint64_t)*v17;
                      }
                      else
                      {
                        uint64_t v14 = &stru_1ECAC84A8;
                      }
                      uint64_t v50 = (unsigned __int16 *)((char *)v17 + v41);
                      if (*v50 < 0x13u) {
                        goto LABEL_74;
                      }
                      uint64_t v29 = v50[9];
                      if (!v29) {
                        goto LABEL_75;
                      }
                      goto LABEL_65;
                    default:
                      goto LABEL_10;
                  }
              }
            }
            if ((int)v12 >= 143360)
            {
              switch((int)v12)
              {
                case 143360:
                  uint64_t v16 = (int *)AirReflection::Node::node_as_MeshPrimitiveDataRet(v10);
                  goto LABEL_35;
                case 143361:
                  uint64_t v16 = (int *)AirReflection::Node::node_as_MeshVertexDataRet(v10);
LABEL_35:
                  char v17 = v16;
                  uint64_t v30 = *v16;
                  uint64_t v31 = -v30;
                  int v32 = (unsigned __int16 *)((char *)v16 - v30);
                  if (*v32 >= 0xFu && (uint64_t v33 = v32[7]) != 0)
                  {
                    uint64_t v14 = (__CFString *)[NSString stringWithUTF8String:(char *)v16 + v33 + *(unsigned int *)((char *)v16 + v33) + 4];
                    uint64_t v31 = -(uint64_t)*v17;
                  }
                  else
                  {
                    uint64_t v14 = &stru_1ECAC84A8;
                  }
                  int v34 = (unsigned __int16 *)((char *)v17 + v31);
                  if (*v34 < 0xDu) {
                    goto LABEL_74;
                  }
                  uint64_t v29 = v34[6];
                  if (!v29) {
                    goto LABEL_75;
                  }
                  goto LABEL_65;
                case 143362:
                  uint64_t v23 = (int *)AirReflection::Node::node_as_PrimitiveCulledRet(v10);
                  goto LABEL_45;
                case 143363:
                  uint64_t v23 = (int *)AirReflection::Node::node_as_PrimitiveIDRet(v10);
LABEL_45:
                  char v17 = v23;
                  uint64_t v35 = *v23;
                  uint64_t v36 = -v35;
                  uint64_t v37 = (unsigned __int16 *)((char *)v23 - v35);
                  if (*v37 >= 0xBu && (uint64_t v38 = v37[5]) != 0)
                  {
                    uint64_t v14 = (__CFString *)[NSString stringWithUTF8String:(char *)v23 + v38 + *(unsigned int *)((char *)v23 + v38) + 4];
                    uint64_t v36 = -(uint64_t)*v17;
                  }
                  else
                  {
                    uint64_t v14 = &stru_1ECAC84A8;
                  }
                  size_t v39 = (unsigned __int16 *)((char *)v17 + v36);
                  if (*v39 < 9u) {
                    goto LABEL_74;
                  }
                  uint64_t v29 = v39[4];
                  if (!v29) {
                    goto LABEL_75;
                  }
                  goto LABEL_65;
                default:
                  goto LABEL_10;
              }
            }
            switch(v12)
            {
              case 0x22000:
                unint64_t v22 = (int *)AirReflection::Node::node_as_AcceptIntersectionRet(v10);
                goto LABEL_59;
              case 0x22001:
                unint64_t v22 = (int *)AirReflection::Node::node_as_ContinueSearchRet(v10);
LABEL_59:
                char v17 = v22;
                uint64_t v44 = *v22;
                uint64_t v45 = -v44;
                int v46 = (unsigned __int16 *)((char *)v22 - v44);
                if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0)
                {
                  uint64_t v14 = (__CFString *)[NSString stringWithUTF8String:(char *)v22 + v47 + *(unsigned int *)((char *)v22 + v47) + 4];
                  uint64_t v45 = -(uint64_t)*v17;
                }
                else
                {
                  uint64_t v14 = &stru_1ECAC84A8;
                }
                uint64_t v48 = (unsigned __int16 *)((char *)v17 + v45);
                if (*v48 < 7u)
                {
LABEL_74:
                  uint64_t v29 = 0;
                }
                else
                {
                  uint64_t v29 = v48[3];
                  if (v29) {
LABEL_65:
                  }
                    v29 += (uint64_t)v17 + *(unsigned int *)((char *)v17 + v29);
                }
LABEL_75:
                unint64_t v51 = (const void *)(v29 + 4);
                size_t v52 = strlen((const char *)(v29 + 4));
                unsigned int v15 = dataTypeFromString(v51, v52);
                goto LABEL_76;
              case 0x22002:
                unint64_t v22 = (int *)AirReflection::Node::node_as_DistanceRet(v10);
                goto LABEL_59;
            }
          }
        }
LABEL_10:
        AirReflection::EnumNameNodeType(v12);
        uint64_t v14 = 0;
        unsigned int v15 = 0;
LABEL_76:
        v5[v6++] = [[MTLStructMemberInternal alloc] initWithName:v14 offset:0 dataType:v15 pixelFormat:0 aluType:0 indirectArgumentIndex:0 render_target:0xFFFFFFFFLL raster_order_group:0xFFFFFFFFLL details:0];
        if (v3 == v6)
        {
          char v53 = 0;
          goto LABEL_79;
        }
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  char v53 = 1;
LABEL_79:
  uint64_t v54 = [[MTLStructTypeInternal alloc] initWithMembers:v5 count:v3];
  if (v53)
  {
    if (!v5) {
      return v54;
    }
  }
  else
  {
    uint64_t v55 = v5;
    do
    {
      long long v56 = *v55++;

      --v3;
    }
    while (v3);
  }
  free(v5);
  return v54;
}

uint64_t AirReflection::Node::node_as_ImageblockDataArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278532) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ComputePipelineStateArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262151) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderPipelineStateArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262152) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_CommandBufferArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262150) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_IntersectionFunctionTableArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262154) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262156) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_InstanceAccelerationStructureArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262155) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PayloadArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 282624)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_BufferStrideArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262157) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ImageblockDataRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135172) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_GlobalBinding(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524292) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_StageInArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266249) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

void MTLIntersectionReflectionReader::~MTLIntersectionReflectionReader(MTLIntersectionReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);

  JUMPOUT(0x18530C140);
}

void MTLStitchingReflectionReader::~MTLStitchingReflectionReader(MTLStitchingReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);

  JUMPOUT(0x18530C140);
}

void MTLObjectReflectionReader::~MTLObjectReflectionReader(MTLObjectReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);

  JUMPOUT(0x18530C140);
}

void MTLMeshReflectionReader::~MTLMeshReflectionReader(MTLMeshReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);

  JUMPOUT(0x18530C140);
}

void MTLDynamicLibraryReflectionDeserializer::~MTLDynamicLibraryReflectionDeserializer(MTLDynamicLibraryReflectionDeserializer *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);

  JUMPOUT(0x18530C140);
}

void MTLDynamicLibraryReflectionReader::~MTLDynamicLibraryReflectionReader(MTLDynamicLibraryReflectionReader *this)
{
  MTLArgumentReader::~MTLArgumentReader(this);

  JUMPOUT(0x18530C140);
}

void std::__split_buffer<ContextStack *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v16 = *(uint64_t **)(a1 + 8);
      char v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        char v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v16 = v5;
      char v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        uint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,MTLStructTypeInternal *> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_18279AA70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerCache::MTLCompilerCache(MTLCompilerCache *this)
{
  this->var0 = (void **)&unk_1ECAC5960;
  *(void *)&this->var1._os_unfair_lock_opaque = 0;
  this->unint64_t var3 = 0;
}

void makeShaderCacheWritableByAllUsers()
{
  if (didPreviouslyGetCacheMainFolder == 1 && gShaderCachePermissions == 0)
  {
    if (_MTLIsInternalBuild())
    {
      BOOL v1 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
      if (v1) {
        makeShaderCacheWritableByAllUsers_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
      }
    }
  }
  else
  {
    gShaderCachePermissions = 438;
  }
}

void *getGPUArchiverCacheMainFolder(unint64_t *a1)
{
  return copyCacheMainFolder("com.apple.gpuarchiver", a1, (const char *)1);
}

void *getBaseCacheFolder(unint64_t *a1)
{
  return copyCacheMainFolder(0, a1, 0);
}

uint64_t MTLCompilerFSCache::open(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  uint64_t v3 = MTLCompilerFSCache::openSync((MTLCompilerFSCache *)this);
  os_unfair_lock_unlock(v2);
  return v3;
}

void sub_18279AB7C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerFSCache::close(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  if (*(void *)&this[12]._os_unfair_lock_opaque)
  {
    fscache_close();
    *(void *)&this[12]._os_unfair_lock_opaque = 0;
    os_unfair_lock_lock(this + 34);
    uint64_t v3 = *(void *)&this[36]._os_unfair_lock_opaque;
    if (v3)
    {
      uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v3);
      MEMORY[0x18530C140](v4, 0x10A0C408EF24B1CLL);
    }
    *(void *)&this[36]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(this + 34);
  }
  this[3]._os_unfair_lock_opaque = 0;
  this[4]._os_unfair_lock_opaque = 0;

  os_unfair_lock_unlock(v2);
}

void sub_18279AC24(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLCompilerFSCache::~MTLCompilerFSCache(MTLCompilerFSCache *this)
{
  *(void *)this = &unk_1ECAC5A10;
  MTLCompilerFSCache::close((os_unfair_lock_s *)this);
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
}

{
  uint64_t vars8;

  MTLCompilerFSCache::~MTLCompilerFSCache(this);

  JUMPOUT(0x18530C140);
}

uint64_t MTLCompilerFSCache::copyShaderCache(os_unfair_lock_s *this, NSString *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this + 2;
  os_unfair_lock_lock(this + 2);
  uint64_t v5 = (void *)MEMORY[0x18530C9F0]();
  if (*(void *)&this[12]._os_unfair_lock_opaque)
  {
    fscache_close();
    *(void *)&this[12]._int os_unfair_lock_opaque = 0;
  }
  uint64_t v6 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
  char v36 = 0;
  if (([v6 fileExistsAtPath:a2 isDirectory:&v36] & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      MTLCompilerFSCache::copyShaderCache((uint64_t)[(NSString *)a2 UTF8String], (uint8_t *)__s);
    }
    goto LABEL_12;
  }
  if (!v36)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      MTLCompilerFSCache::copyShaderCache((uint64_t)[(NSString *)a2 UTF8String], (uint8_t *)__s);
    }
LABEL_12:
    LODWORD(v9) = 0;
    int v10 = 1;
    goto LABEL_53;
  }
  uint64_t v29 = v5;
  uint64_t v30 = v4;
  uint64_t v35 = 0;
  uint64_t v7 = (const char *)&this[14];
  if (SHIBYTE(this[19]._os_unfair_lock_opaque) < 0)
  {
    if (!*(void *)&this[16]._os_unfair_lock_opaque)
    {
LABEL_18:
      float v12 = a2;
      goto LABEL_19;
    }
    uint64_t v8 = *(os_unfair_lock_s **)v7;
  }
  else
  {
    uint64_t v8 = this + 14;
    if (!HIBYTE(this[19]._os_unfair_lock_opaque)) {
      goto LABEL_18;
    }
  }
  unint64_t v11 = (void *)[NSString stringWithUTF8String:v8];
  float v12 = [(NSString *)a2 stringByAppendingString:v11];
  if ([v6 createDirectoryAtPath:v12 withIntermediateDirectories:0 attributes:0 error:&v35])
  {
LABEL_19:
    int os_unfair_lock_opaque = this[5]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque)
    {
      if (SHIBYTE(this[19]._os_unfair_lock_opaque) < 0) {
        uint64_t v7 = *(const char **)v7;
      }
      if (getCacheMainFolder(__s, "com.apple.metal", (const char *)1))
      {
        if (!v7
          || (size_t v14 = strlen(__s),
              strncat(__s, "/", 1024 - v14),
              size_t v15 = strlen(__s),
              strncat(__s, v7, 1024 - v15),
              !stat(__s, &v37))
          || !mkdir(__s, 0x1FFu))
        {
          unint64_t v16 = (void *)[NSString stringWithUTF8String:__s];
          size_t v17 = (void *)[v6 contentsOfDirectoryAtPath:v16 error:&v35];
          uint64_t v18 = this + 20;
          if (SHIBYTE(this[25]._os_unfair_lock_opaque) < 0) {
            uint64_t v18 = *(os_unfair_lock_s **)&v18->_os_unfair_lock_opaque;
          }
          uint64_t v19 = [NSString stringWithUTF8String:v18];
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          uint64_t v20 = [v17 countByEnumeratingWithState:&v31 objects:v38 count:16];
          if (v20)
          {
            uint64_t v21 = *(void *)v32;
            while (2)
            {
              for (uint64_t i = 0; i != v20; ++i)
              {
                if (*(void *)v32 != v21) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v23 = *(void **)(*((void *)&v31 + 1) + 8 * i);
                if ([v23 hasPrefix:v19])
                {
                  uint64_t v24 = [v16 stringByAppendingPathComponent:v23];
                  uint64_t v25 = [(NSString *)v12 stringByAppendingPathComponent:v23];
                  int v26 = [v6 fileExistsAtPath:v24 isDirectory:&v36];
                  int v27 = v36 ? 0 : v26;
                  if (v27 == 1)
                  {
                    if ([v6 fileExistsAtPath:v25 isDirectory:&v36]
                      && (v36 || ([v6 removeItemAtPath:v25 error:&v35] & 1) == 0))
                    {
                      NSLog(&cfstr_FailedToRemove.isa, v25);
                      goto LABEL_50;
                    }
                    if (([v6 copyItemAtPath:v24 toPath:v25 error:&v35] & 1) == 0)
                    {
                      NSLog(&cfstr_FailedToCopyTo.isa, v24, v25);
                      goto LABEL_50;
                    }
                  }
                }
              }
              uint64_t v20 = [v17 countByEnumeratingWithState:&v31 objects:v38 count:16];
              int v10 = 0;
              int os_unfair_lock_opaque = 1;
              if (v20) {
                continue;
              }
              break;
            }
          }
          else
          {
            int v10 = 0;
            int os_unfair_lock_opaque = 1;
          }
          goto LABEL_51;
        }
      }
      int os_unfair_lock_opaque = 0;
    }
    int v10 = 0;
LABEL_51:
    uint64_t v5 = v29;
    uint64_t v4 = v30;
    goto LABEL_52;
  }
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
LABEL_50:
    int os_unfair_lock_opaque = 0;
    int v10 = 1;
    goto LABEL_51;
  }
  uint64_t v4 = v30;
  uint64_t v5 = v29;
  MTLCompilerFSCache::copyShaderCache([v11 UTF8String], (uint64_t)-[NSString UTF8String](a2, "UTF8String"), (uint8_t *)__s);
  int os_unfair_lock_opaque = 0;
  int v10 = 1;
LABEL_52:
  LODWORD(v9) = os_unfair_lock_opaque != 0;
LABEL_53:
  if (v10) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v9;
  }
  os_unfair_lock_unlock(v4);
  return v9;
}

void sub_18279B110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock)
{
}

void MTLCompilerFSCache::getElementList(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t MTLCompilerFSCache::getShaderCacheKeys(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 2;
  os_unfair_lock_lock(this + 2);
  if (*(void *)&this[12]._os_unfair_lock_opaque) {
    uint64_t cache_keys = fscache_get_cache_keys();
  }
  else {
    uint64_t cache_keys = 0;
  }
  os_unfair_lock_unlock(v2);
  return cache_keys;
}

void sub_18279B1D4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineDataCache::MTLPipelineDataCache(uint64_t a1, char a2, char *__s, void *a4)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1ECAC5CF0;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 24), __s);
  *(_WORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = *a4;
  *(unsigned char *)(a1 + 48) = a2;
  return a1;
}

void MTLPipelineDataCache::writeToDisc(MTLPipelineDataCache *this)
{
  if (*((unsigned char *)this + 48))
  {
    uint64_t v2 = (os_unfair_lock_s *)((char *)this + 8);
    os_unfair_lock_lock((os_unfair_lock_t)this + 2);
    uint64_t v21 = 0;
    asprintf(&v21, "%s.tmp", *((const char **)this + 7));
    uint64_t v3 = fopen(v21, "wb");
    if (!v3)
    {
      printf("Failed to open: %s\n", v21);
      exit(1);
    }
    uint64_t v4 = *((void *)this + 11);
    __ptr[0] = 0x14D50504CLL;
    __ptr[1] = *((void *)this + 19);
    uint64_t v5 = 48 * v4 + 48;
    __ptr[3] = 40;
    __ptr[4] = v5;
    for (uint64_t i = (uint64_t *)*((void *)this + 14); i != *((uint64_t **)this + 15); i += 3)
    {
      uint64_t v7 = *i;
      v5 += v7;
    }
    __ptr[2] = v5;
    uint64_t v19 = v4;
    if (fwrite(__ptr, 1uLL, 0x28uLL, v3) != 40 || fwrite(&v19, 1uLL, 8uLL, v3) != 8)
    {
      printf("Failed to write to: %s\n", v21);
      exit(1);
    }
    for (uint64_t j = (uint64_t *)*((void *)this + 10); j; uint64_t j = (uint64_t *)*j)
    {
      if (*((char *)j + 39) < 0) {
        std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)j[2], j[3]);
      }
      else {
        std::string v16 = *(std::string *)(j + 2);
      }
      long long v9 = *(_OWORD *)(j + 5);
      uint64_t v18 = j[7];
      long long v17 = v9;
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &v16;
      }
      else {
        int v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      long long v15 = v17;
      if (fwrite(v10, 1uLL, 0x20uLL, v3) != 32
        || fwrite((char *)&v15 + 8, 1uLL, 8uLL, v3) != 8
        || fwrite(&v15, 1uLL, 8uLL, v3) != 8)
      {
        printf("Failed to write to: %s\n", v21);
        exit(1);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
    memset(&v16, 0, sizeof(v16));
    std::vector<unsigned long>::reserve((void **)&v16.__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 3));
    uint64_t v11 = *((void *)this + 14);
    uint64_t v12 = *((void *)this + 15);
    while (v11 != v12)
    {
      if (*(void *)v11 != (int)fwrite(*(const void **)(v11 + 16), 1uLL, *(void *)v11, v3))
      {
        printf("Failed to write to: %s\n", v21);
        exit(1);
      }
      v11 += 24;
    }
    if (fclose(v3))
    {
      printf("Failed to write to: %s\n", v21);
      exit(1);
    }
    rename((const std::__fs::filesystem::path *)v21, *((const std::__fs::filesystem::path **)this + 7), v13);
    if (v14) {
      printf("Failed to write to: %s\n", *((const char **)this + 7));
    }
    free(v21);
    if (v16.__r_.__value_.__r.__words[0])
    {
      v16.__r_.__value_.__l.__size_ = v16.__r_.__value_.__r.__words[0];
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    os_unfair_lock_unlock(v2);
  }
}

void sub_18279B59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  os_unfair_lock_unlock(v18);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void MTLPipelineDataCache::addElement(uint64_t a1, _OWORD *a2, const void *a3, size_t a4)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v8 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    long long v9 = operator new(0x28uLL);
    std::string __p = v9;
    long long v29 = xmmword_1828D4980;
    long long v10 = a2[1];
    *long long v9 = *a2;
    v9[1] = v10;
    *((unsigned char *)v9 + 32) = 0;
    uint64_t v11 = malloc_type_malloc(a4, 0x6D54883DuLL);
    size_t v12 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v12 + a4;
    memcpy(v11, a3, a4);
    unint64_t v13 = *(void *)(a1 + 128);
    int v14 = *(size_t **)(a1 + 120);
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v16 = *(void *)(a1 + 112);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v16) >> 3);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20) {
        uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>(a1 + 128, v20);
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v22 = (size_t *)&v21[24 * v17];
      uint64_t v23 = &v21[24 * v20];
      *unint64_t v22 = a4;
      v22[1] = v12;
      void v22[2] = (size_t)v11;
      long long v15 = v22 + 3;
      uint64_t v25 = *(char **)(a1 + 112);
      uint64_t v24 = *(char **)(a1 + 120);
      if (v24 != v25)
      {
        do
        {
          long long v26 = *(_OWORD *)(v24 - 24);
          *(v22 - 1) = *((void *)v24 - 1);
          *(_OWORD *)(v22 - 3) = v26;
          v22 -= 3;
          v24 -= 24;
        }
        while (v24 != v25);
        uint64_t v24 = *(char **)(a1 + 112);
      }
      *(void *)(a1 + 112) = v22;
      *(void *)(a1 + 120) = v15;
      *(void *)(a1 + 128) = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *int v14 = a4;
      v14[1] = v12;
      long long v15 = v14 + 3;
      _OWORD v14[2] = (size_t)v11;
    }
    *(void *)(a1 + 120) = v15;
    p_p = &__p;
    int v27 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    *((void *)v27 + 5) = a4;
    *((void *)v27 + 6) = v12;
    *((void *)v27 + 7) = v11;
    if (SHIBYTE(v29) < 0) {
      operator delete(__p);
    }
    os_unfair_lock_unlock(v8);
  }
}

void sub_18279B88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

void MTLPipelineDataCache::getElementList(os_unfair_lock_s *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = this + 2;
  os_unfair_lock_lock(this + 2);
  for (uint64_t i = *(uint64_t **)&this[20]._os_unfair_lock_opaque; i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string __p = *(std::string *)(i + 2);
    }
    long long v23 = *(_OWORD *)(i + 5);
    uint64_t v24 = i[7];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v8 = a2[1];
    unint64_t v7 = (unint64_t)a2[2];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v11 = *a2;
      uint64_t v12 = (v8 - *a2) >> 5;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 59) {
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v7 - (void)v11;
      if (v14 >> 4 > v13) {
        unint64_t v13 = v14 >> 4;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)(a2 + 2), v15);
        uint64_t v11 = *a2;
        uint64_t v8 = a2[1];
      }
      else
      {
        uint64_t v16 = 0;
      }
      long long v17 = *(_OWORD *)&p_p->__r_.__value_.__r.__words[2];
      unint64_t v18 = &v16[32 * v12];
      *(_OWORD *)unint64_t v18 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
      *((_OWORD *)v18 + 1) = v17;
      if (v8 == v11)
      {
        uint64_t v21 = &v16[32 * v12];
      }
      else
      {
        unint64_t v19 = &v16[32 * v12];
        do
        {
          long long v20 = *((_OWORD *)v8 - 1);
          uint64_t v21 = v19 - 32;
          *((_OWORD *)v19 - 2) = *((_OWORD *)v8 - 2);
          *((_OWORD *)v19 - 1) = v20;
          v8 -= 32;
          v19 -= 32;
        }
        while (v8 != v11);
      }
      long long v10 = v18 + 32;
      *a2 = v21;
      a2[1] = v18 + 32;
      a2[2] = &v16[32 * v15];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      long long v9 = *(_OWORD *)&p_p->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v8 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
      *((_OWORD *)v8 + 1) = v9;
      long long v10 = v8 + 32;
    }
    a2[1] = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  os_unfair_lock_unlock(v4);
}

void sub_18279BA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  os_unfair_lock_unlock(v15);
  long long v17 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t MTLPipelineDataCache::getShaderCacheKeys(MTLPipelineDataCache *this)
{
  return 0;
}

uint64_t MTLCompilerCache::copyShaderCache(MTLCompilerCache *this, NSString *a2)
{
  return 0;
}

uint64_t MTLCompilerFSCache::getVersion(MTLCompilerFSCache *this)
{
  return 0;
}

uint64_t MTLPipelineDataCache::getVersion(MTLPipelineDataCache *this)
{
  return (uint64_t)this + 152;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void initLogMode()
{
  if (initLogMode_pred != -1) {
    dispatch_once(&initLogMode_pred, &__block_literal_global_0);
  }
}

uint64_t __initLogMode_block_invoke()
{
  v4[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)[MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v3 = @"METAL_TELEMETRY_LOG_MODE";
  v4[0] = &unk_1ECB14F10;
  [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v4 forKeys:&v3 count:1];
  _CFXPreferencesRegisterDefaultValues();
  BOOL v1 = getenv((const char *)[@"METAL_TELEMETRY_LOG_MODE" UTF8String]);
  if (v1) {
    uint64_t result = strtol(v1, 0, 0);
  }
  else {
    uint64_t result = [v0 integerForKey:@"METAL_TELEMETRY_LOG_MODE"];
  }
  logMode = result;
  return result;
}

void MTLHashKey::getHashTools(unint64_t *a1, void *__dst, void *a3)
{
  memcpy(__dst, (const void *)a1[7], a1[8] - a1[7]);
  bzero(a3, (uint64_t)(a1[8] - a1[7]) >> 3);
  unint64_t v5 = *a1;
  if ((*a1 & 2) != 0)
  {
    *((_DWORD *)a3 + (v5 >> *((unsigned char *)a1 + 16)) + 1) = 1026;
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        return;
      }
      goto LABEL_4;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  *((_DWORD *)a3 + (v5 >> *((unsigned char *)a1 + 16)) + 2) = 1027;
  if ((v5 & 8) == 0) {
    return;
  }
LABEL_4:
  *((_DWORD *)a3 + (v5 >> *((unsigned char *)a1 + 16)) + 3) = 1032;
}

BOOL MTLHashKey::areBitcodesEqual(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = *(unint64_t **)a3;
  unint64_t v6 = *(void *)(a3 + 8);
  unint64_t v7 = (uint64_t)(v6 - *(void *)a3) >> 5;
  if (v7 != *(void *)a1 >> *(unsigned char *)(a1 + 16)) {
    return 0;
  }
  uint64_t v8 = *(uint64_t **)(a1 + 56);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v14 = v8[2];
  uint64_t v13 = v8[3];
  uint64_t v16 = a2[2];
  uint64_t v15 = a2[3];
  BOOL v17 = v9 == v11 && v10 == v12;
  BOOL v18 = v17 && v14 == v16;
  if (!v18 || v13 != v15) {
    return 0;
  }
  if ((unint64_t *)v6 == v5) {
    return 1;
  }
  std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*,false>(v5, v6, 126 - 2 * __clz(v7), 1);
  return memcmp((const void *)(*(void *)(a1 + 56) + 32), *(const void **)a3, *(void *)(a3 + 8) - *(void *)a3) == 0;
}

uint64_t MTLHashKey::getHash(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a2 || a3)
  {
    if (!(a3 | a2)) {
      return *(void *)(a1 + 56);
    }
    if (*(void *)a1 >> *(unsigned char *)(a1 + 16) >= (unint64_t)a3)
    {
      uint64_t v3 = a3;
      return *(void *)(a1 + 56) + 32 * v3;
    }
    return 0;
  }
  if ((*(void *)a1 & (1 << a2)) == 0) {
    return 0;
  }
  uint64_t v3 = (*(void *)a1 >> *(unsigned char *)(a1 + 16)) + a2;
  return *(void *)(a1 + 56) + 32 * v3;
}

uint64_t MTLHashKey::description(MTLHashKey *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (this->var0.var0) {
    uint64_t v2 = @"Key: \n";
  }
  else {
    uint64_t v2 = @"Legacy key:\n";
  }
  uint64_t v3 = (void *)[NSString stringWithFormat:v2];
  if (this->var0.var0)
  {
    unint64_t v4 = this->var0.var0 >> this->var0.var2;
    uint64_t v5 = (v4 + 1);
    var0 = this->var2.var0;
    long long v7 = *((_OWORD *)var0 + 1);
    v29[0] = *(_OWORD *)var0;
    v29[1] = v7;
    uint64_t v8 = (void *)[v3 stringByAppendingFormat:@" %@ Function hash\n ", _MTLRequestHashToString((uint64_t)v29)];
    if (v5 >= 2)
    {
      uint64_t v9 = 1;
      uint64_t v10 = 32;
      do
      {
        uint64_t v11 = (_OWORD *)((char *)this->var2.var0 + v10);
        long long v12 = v11[1];
        v28[0] = *v11;
        v28[1] = v12;
        uint64_t v8 = (void *)[v8 stringByAppendingFormat:@"%@ Linked bitcode(%i)\n ", _MTLRequestHashToString((uint64_t)v28), v9++];
        v10 += 32;
      }
      while (v5 != v9);
    }
    if ((this->var0.var0 & 2) != 0)
    {
      unsigned int v14 = v4 + 2;
      BOOL v17 = (_OWORD *)((char *)this->var2.var0 + 32 * v5);
      long long v18 = v17[1];
      v27[0] = *v17;
      v27[1] = v18;
      uint64_t v13 = (void *)[v8 stringByAppendingFormat:@"%@ air-nt \n ", _MTLRequestHashToString((uint64_t)v27)];
    }
    else
    {
      uint64_t v13 = (void *)[v8 stringByAppendingString:@"n/a \n"];
      unsigned int v14 = v4 + 1;
    }
    if ((this->var0.var0 & 4) != 0)
    {
      long long v20 = (_OWORD *)((char *)this->var2.var0 + 32 * v14);
      long long v21 = v20[1];
      ++v14;
      v26[0] = *v20;
      v26[1] = v21;
      unint64_t v19 = (void *)[v13 stringByAppendingFormat:@"%@ air-nt plugin\n ", _MTLRequestHashToString((uint64_t)v26)];
    }
    else
    {
      unint64_t v19 = (void *)[v13 stringByAppendingString:@"n/a \n"];
    }
    if ((this->var0.var0 & 8) != 0)
    {
      unint64_t v22 = (_OWORD *)((char *)this->var2.var0 + 32 * v14);
      long long v23 = v22[1];
      v25[0] = *v22;
      v25[1] = v23;
      return [v19 stringByAppendingFormat:@"%@ metal framework \n ", _MTLRequestHashToString((uint64_t)v25)];
    }
    else
    {
      return [v19 stringByAppendingString:@"n/a \n"];
    }
  }
  else
  {
    long long v15 = *(_OWORD *)&this->var1.var0[16];
    v24[0] = *(_OWORD *)this->var1.var0;
    v24[1] = v15;
    return [v3 stringByAppendingFormat:@"%@ Single SHA256 \n ", _MTLRequestHashToString((uint64_t)v24)];
  }
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = bswap64(*a2);
  unint64_t v4 = bswap64(*result);
  if (v3 == v4
    && (v3 = bswap64(a2[1]), unint64_t v4 = bswap64(result[1]), v3 == v4)
    && (v3 = bswap64(a2[2]), unint64_t v4 = bswap64(result[2]), v3 == v4)
    && (v3 = bswap64(a2[3]), unint64_t v4 = bswap64(result[3]), v3 == v4))
  {
    int v5 = 0;
  }
  else if (v3 < v4)
  {
    int v5 = -1;
  }
  else
  {
    int v5 = 1;
  }
  unint64_t v6 = bswap64(*a3);
  unint64_t v7 = bswap64(*a2);
  if (v6 != v7
    || (unint64_t v6 = bswap64(a3[1]), v7 = bswap64(a2[1]), v6 != v7)
    || (unint64_t v6 = bswap64(a3[2]), v7 = bswap64(a2[2]), v6 != v7)
    || (unint64_t v6 = bswap64(a3[3]), v7 = bswap64(a2[3]), v6 != v7))
  {
    if (v6 < v7) {
      int v8 = -1;
    }
    else {
      int v8 = 1;
    }
    if (v5 < 0) {
      goto LABEL_14;
    }
LABEL_24:
    if (v8 < 0)
    {
      long long v16 = *(_OWORD *)a2;
      long long v15 = *((_OWORD *)a2 + 1);
      long long v17 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v17;
      *(_OWORD *)a3 = v16;
      *((_OWORD *)a3 + 1) = v15;
      unint64_t v18 = bswap64(*a2);
      unint64_t v19 = bswap64(*result);
      if (v18 != v19) {
        goto LABEL_35;
      }
      unint64_t v18 = bswap64(a2[1]);
      unint64_t v19 = bswap64(result[1]);
      if (v18 == v19
        && (unint64_t v18 = bswap64(a2[2]), v19 = bswap64(result[2]), v18 == v19)
        && (unint64_t v18 = bswap64(a2[3]), v19 = bswap64(result[3]), v18 == v19))
      {
        int v20 = 0;
      }
      else
      {
LABEL_35:
        int v20 = v18 < v19 ? -1 : 1;
      }
      if (v20 < 0)
      {
        long long v25 = *(_OWORD *)result;
        long long v24 = *((_OWORD *)result + 1);
        long long v26 = *((_OWORD *)a2 + 1);
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v26;
        *(_OWORD *)a2 = v25;
        *((_OWORD *)a2 + 1) = v24;
      }
    }
    return result;
  }
  int v8 = 0;
  if ((v5 & 0x80000000) == 0) {
    goto LABEL_24;
  }
LABEL_14:
  if (v8 < 0)
  {
    long long v22 = *(_OWORD *)result;
    long long v21 = *((_OWORD *)result + 1);
    long long v27 = *((_OWORD *)a3 + 1);
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *((_OWORD *)result + 1) = v27;
    goto LABEL_41;
  }
  long long v10 = *(_OWORD *)result;
  long long v9 = *((_OWORD *)result + 1);
  long long v11 = *((_OWORD *)a2 + 1);
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *((_OWORD *)result + 1) = v11;
  *(_OWORD *)a2 = v10;
  *((_OWORD *)a2 + 1) = v9;
  unint64_t v12 = bswap64(*a3);
  unint64_t v13 = bswap64(*a2);
  if (v12 == v13
    && (unint64_t v12 = bswap64(a3[1]), v13 = bswap64(a2[1]), v12 == v13)
    && (unint64_t v12 = bswap64(a3[2]), v13 = bswap64(a2[2]), v12 == v13)
    && (unint64_t v12 = bswap64(a3[3]), v13 = bswap64(a2[3]), v12 == v13))
  {
    int v14 = 0;
  }
  else if (v12 < v13)
  {
    int v14 = -1;
  }
  else
  {
    int v14 = 1;
  }
  if (v14 < 0)
  {
    long long v22 = *(_OWORD *)a2;
    long long v21 = *((_OWORD *)a2 + 1);
    long long v23 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v23;
LABEL_41:
    *(_OWORD *)a3 = v22;
    *((_OWORD *)a3 + 1) = v21;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 4;
      unint64_t v7 = bswap64(*(a2 - 4));
      unint64_t v8 = bswap64(*a1);
      if (v7 == v8
        && (unint64_t v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      if (v9 < 0)
      {
        long long v33 = *(_OWORD *)a1;
        long long v32 = *((_OWORD *)a1 + 1);
        long long v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)unint64_t v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      long long v24 = a1 + 4;
      long long v25 = a1 + 8;
      long long v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      unint64_t v28 = *(a2 - 4);
      long long v27 = a2 - 4;
      unint64_t v29 = bswap64(v28);
      unint64_t v30 = bswap64(a1[12]);
      if (v29 == v30
        && (unint64_t v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        int v31 = 0;
      }
      else if (v29 < v30)
      {
        int v31 = -1;
      }
      else
      {
        int v31 = 1;
      }
      if (v31 < 0)
      {
        long long v36 = *(_OWORD *)v26;
        long long v35 = *((_OWORD *)a1 + 7);
        long long v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)long long v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)long long v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        unint64_t v38 = bswap64(*v26);
        unint64_t v39 = bswap64(*v25);
        if (v38 != v39) {
          goto LABEL_54;
        }
        unint64_t v38 = bswap64(a1[13]);
        unint64_t v39 = bswap64(a1[9]);
        if (v38 == v39
          && (unint64_t v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (unint64_t v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          int v40 = 0;
        }
        else
        {
LABEL_54:
          int v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          long long v42 = *(_OWORD *)v25;
          long long v41 = *((_OWORD *)a1 + 5);
          long long v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)long long v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)long long v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          unint64_t v44 = bswap64(*v25);
          unint64_t v45 = bswap64(*v24);
          if (v44 != v45) {
            goto LABEL_64;
          }
          unint64_t v44 = bswap64(a1[9]);
          unint64_t v45 = bswap64(a1[5]);
          if (v44 == v45
            && (unint64_t v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (unint64_t v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            int v46 = 0;
          }
          else
          {
LABEL_64:
            int v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            long long v48 = *(_OWORD *)v24;
            long long v47 = *((_OWORD *)a1 + 3);
            long long v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)long long v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)long long v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            unint64_t v50 = bswap64(a1[4]);
            unint64_t v51 = bswap64(*a1);
            if (v50 != v51) {
              goto LABEL_73;
            }
            unint64_t v50 = bswap64(a1[5]);
            unint64_t v51 = bswap64(a1[1]);
            if (v50 == v51
              && (unint64_t v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (unint64_t v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              int v52 = 0;
            }
            else
            {
LABEL_73:
              int v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              long long v54 = *(_OWORD *)a1;
              long long v53 = *((_OWORD *)a1 + 1);
              long long v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)long long v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      long long v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      long long v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    unint64_t v14 = bswap64(*v11);
    unint64_t v15 = bswap64(*v10);
    if (v14 != v15
      || (unint64_t v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (unint64_t v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (unint64_t v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      int v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        long long v56 = *(_OWORD *)v11;
        long long v57 = *((_OWORD *)v11 + 1);
        uint64_t v17 = v12;
        while (1)
        {
          unint64_t v18 = (char *)a1 + v17;
          long long v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64) {
            break;
          }
          unint64_t v20 = bswap64(v56);
          unint64_t v21 = bswap64(*((void *)v18 + 4));
          if (v20 == v21
            && (unint64_t v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((void *)v18 + 5)), v20 == v21)
            && (unint64_t v20 = bswap64(v57), v21 = bswap64(*((void *)v18 + 6)), v20 == v21)
            && (unint64_t v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((void *)v18 + 7)), v20 == v21))
          {
            int v22 = 0;
          }
          else if (v20 < v21)
          {
            int v22 = -1;
          }
          else
          {
            int v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            long long v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        long long v23 = a1;
LABEL_30:
        *(_OWORD *)long long v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8) {
          return v11 + 4 == a2;
        }
      }
    }
    long long v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a2, a3);
  unint64_t v9 = bswap64(*a4);
  unint64_t v10 = bswap64(*a3);
  if (v9 != v10
    || (unint64_t v9 = bswap64(a4[1]), v10 = bswap64(a3[1]), v9 != v10)
    || (unint64_t v9 = bswap64(a4[2]), v10 = bswap64(a3[2]), v9 != v10)
    || (unint64_t v9 = bswap64(a4[3]), v10 = bswap64(a3[3]), v9 != v10))
  {
    int v11 = v9 < v10 ? -1 : 1;
    if (v11 < 0)
    {
      long long v12 = *(_OWORD *)a3;
      __n128 result = *((__n128 *)a3 + 1);
      long long v13 = *((_OWORD *)a4 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_OWORD *)a3 + 1) = v13;
      *(_OWORD *)a4 = v12;
      *((__n128 *)a4 + 1) = result;
      unint64_t v14 = bswap64(*a3);
      unint64_t v15 = bswap64(*a2);
      if (v14 != v15) {
        goto LABEL_14;
      }
      unint64_t v14 = bswap64(a3[1]);
      unint64_t v15 = bswap64(a2[1]);
      if (v14 == v15
        && (unint64_t v14 = bswap64(a3[2]), v15 = bswap64(a2[2]), v14 == v15)
        && (unint64_t v14 = bswap64(a3[3]), v15 = bswap64(a2[3]), v14 == v15))
      {
        int v16 = 0;
      }
      else
      {
LABEL_14:
        int v16 = v14 < v15 ? -1 : 1;
      }
      if (v16 < 0)
      {
        long long v17 = *(_OWORD *)a2;
        __n128 result = *((__n128 *)a2 + 1);
        long long v18 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v18;
        *(_OWORD *)a3 = v17;
        *((__n128 *)a3 + 1) = result;
        unint64_t v19 = bswap64(*a2);
        unint64_t v20 = bswap64(*a1);
        if (v19 == v20
          && (unint64_t v19 = bswap64(a2[1]), v20 = bswap64(a1[1]), v19 == v20)
          && (unint64_t v19 = bswap64(a2[2]), v20 = bswap64(a1[2]), v19 == v20)
          && (unint64_t v19 = bswap64(a2[3]), v20 = bswap64(a1[3]), v19 == v20))
        {
          int v21 = 0;
        }
        else if (v19 < v20)
        {
          int v21 = -1;
        }
        else
        {
          int v21 = 1;
        }
        if (v21 < 0)
        {
          long long v22 = *(_OWORD *)a1;
          __n128 result = *((__n128 *)a1 + 1);
          long long v23 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v23;
          *(_OWORD *)a2 = v22;
          *((__n128 *)a2 + 1) = result;
        }
      }
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - (void)v10;
          unint64_t v12 = (uint64_t)(a2 - (void)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v83 = *(void *)(a2 - 32);
                unint64_t v82 = a2 - 32;
                unint64_t v84 = bswap64(v83);
                unint64_t v85 = bswap64(*v10);
                if (v84 == v85
                  && (v84 = bswap64(*(void *)(v82 + 8)), unint64_t v85 = bswap64(v10[1]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 16)), unint64_t v85 = bswap64(v10[2]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 24)), unint64_t v85 = bswap64(v10[3]), v84 == v85))
                {
                  int v86 = 0;
                }
                else if (v84 < v85)
                {
                  int v86 = -1;
                }
                else
                {
                  int v86 = 1;
                }
                if (v86 < 0)
                {
                  __n128 v193 = *(__n128 *)v10;
                  long long v202 = *((_OWORD *)v10 + 1);
                  long long v155 = *(_OWORD *)(v82 + 16);
                  *(_OWORD *)unint64_t v10 = *(_OWORD *)v82;
                  *((_OWORD *)v10 + 1) = v155;
                  __n128 result = v193;
                  *(__n128 *)unint64_t v82 = v193;
                  *(_OWORD *)(v82 + 16) = v202;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, (unint64_t *)(a2 - 32));
                break;
              case 4uLL:
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
                break;
              case 5uLL:
                uint64_t v87 = v10 + 4;
                int v88 = v10 + 8;
                uint64_t v89 = v10 + 12;
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, v10 + 12).n128_u64[0];
                unint64_t v91 = *(void *)(a2 - 32);
                unint64_t v90 = a2 - 32;
                unint64_t v92 = bswap64(v91);
                unint64_t v93 = bswap64(v10[12]);
                if (v92 == v93
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 8)), v93 = bswap64(v10[13]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 16)), v93 = bswap64(v10[14]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 24)), v93 = bswap64(v10[15]), v92 == v93))
                {
                  int v94 = 0;
                }
                else if (v92 < v93)
                {
                  int v94 = -1;
                }
                else
                {
                  int v94 = 1;
                }
                if (v94 < 0)
                {
                  __n128 result = *(__n128 *)v89;
                  long long v203 = *((_OWORD *)v10 + 7);
                  long long v156 = *(_OWORD *)(v90 + 16);
                  *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
                  *((_OWORD *)v10 + 7) = v156;
                  *(__n128 *)unint64_t v90 = result;
                  *(_OWORD *)(v90 + 16) = v203;
                  unint64_t v157 = bswap64(*v89);
                  unint64_t v158 = bswap64(*v88);
                  if (v157 != v158) {
                    goto LABEL_328;
                  }
                  unint64_t v157 = bswap64(v10[13]);
                  unint64_t v158 = bswap64(v10[9]);
                  if (v157 == v158
                    && (unint64_t v157 = bswap64(v10[14]), v158 = bswap64(v10[10]), v157 == v158)
                    && (unint64_t v157 = bswap64(v10[15]), v158 = bswap64(v10[11]), v157 == v158))
                  {
                    int v159 = 0;
                  }
                  else
                  {
LABEL_328:
                    int v159 = v157 < v158 ? -1 : 1;
                  }
                  if (v159 < 0)
                  {
                    long long v170 = *(_OWORD *)v88;
                    __n128 result = *((__n128 *)v10 + 5);
                    long long v171 = *((_OWORD *)v10 + 7);
                    *(_OWORD *)int v88 = *(_OWORD *)v89;
                    *((_OWORD *)v10 + 5) = v171;
                    *(_OWORD *)uint64_t v89 = v170;
                    *((__n128 *)v10 + 7) = result;
                    unint64_t v172 = bswap64(*v88);
                    unint64_t v173 = bswap64(*v87);
                    if (v172 != v173) {
                      goto LABEL_337;
                    }
                    unint64_t v172 = bswap64(v10[9]);
                    unint64_t v173 = bswap64(v10[5]);
                    if (v172 == v173
                      && (unint64_t v172 = bswap64(v10[10]), v173 = bswap64(v10[6]), v172 == v173)
                      && (unint64_t v172 = bswap64(v10[11]), v173 = bswap64(v10[7]), v172 == v173))
                    {
                      int v174 = 0;
                    }
                    else
                    {
LABEL_337:
                      int v174 = v172 < v173 ? -1 : 1;
                    }
                    if (v174 < 0)
                    {
                      long long v175 = *(_OWORD *)v87;
                      __n128 result = *((__n128 *)v10 + 3);
                      long long v176 = *((_OWORD *)v10 + 5);
                      *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
                      *((_OWORD *)v10 + 3) = v176;
                      *(_OWORD *)int v88 = v175;
                      *((__n128 *)v10 + 5) = result;
                      unint64_t v177 = bswap64(v10[4]);
                      unint64_t v178 = bswap64(*v10);
                      if (v177 != v178) {
                        goto LABEL_346;
                      }
                      unint64_t v177 = bswap64(v10[5]);
                      unint64_t v178 = bswap64(v10[1]);
                      if (v177 == v178
                        && (unint64_t v177 = bswap64(v10[6]), v178 = bswap64(v10[2]), v177 == v178)
                        && (unint64_t v177 = bswap64(v10[7]), v178 = bswap64(v10[3]), v177 == v178))
                      {
                        int v179 = 0;
                      }
                      else
                      {
LABEL_346:
                        int v179 = v177 < v178 ? -1 : 1;
                      }
                      if (v179 < 0)
                      {
                        __n128 v195 = *(__n128 *)v10;
                        long long v205 = *((_OWORD *)v10 + 1);
                        long long v180 = *((_OWORD *)v10 + 3);
                        *(_OWORD *)unint64_t v10 = *(_OWORD *)v87;
                        *((_OWORD *)v10 + 1) = v180;
                        __n128 result = v195;
                        *(__n128 *)uint64_t v87 = v195;
                        *((_OWORD *)v10 + 3) = v205;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 767)
          {
            n128_u64 = v10 + 4;
            BOOL v97 = v10 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
            if (a4)
            {
              if (!v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = v10;
                do
                {
                  uint64_t v100 = (__n128 *)n128_u64;
                  unint64_t v101 = bswap64(v99[4]);
                  unint64_t v102 = bswap64(*v99);
                  if (v101 != v102
                    || (unint64_t v101 = bswap64(v100->n128_u64[1]), v102 = bswap64(v99[1]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[0]), v102 = bswap64(v99[2]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[1]), v102 = bswap64(v99[3]), v101 != v102))
                  {
                    int v103 = v101 < v102 ? -1 : 1;
                    if (v103 < 0)
                    {
                      __n128 v190 = *v100;
                      __n128 v199 = v100[1];
                      uint64_t v104 = v98;
                      while (1)
                      {
                        char v105 = (char *)v10 + v104;
                        long long v106 = *(_OWORD *)((char *)v10 + v104 + 16);
                        *((_OWORD *)v105 + 2) = *(_OWORD *)((char *)v10 + v104);
                        *((_OWORD *)v105 + 3) = v106;
                        if (!v104) {
                          break;
                        }
                        unint64_t v107 = bswap64(v190.n128_u64[0]);
                        unint64_t v108 = bswap64(*((void *)v105 - 4));
                        if (v107 == v108
                          && (unint64_t v107 = bswap64(v190.n128_u64[1]), v108 = bswap64(*((void *)v105 - 3)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[0]), v108 = bswap64(*((void *)v105 - 2)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[1]), v108 = bswap64(*((void *)v105 - 1)), v107 == v108))
                        {
                          int v109 = 0;
                        }
                        else if (v107 < v108)
                        {
                          int v109 = -1;
                        }
                        else
                        {
                          int v109 = 1;
                        }
                        v104 -= 32;
                        if ((v109 & 0x80000000) == 0)
                        {
                          BOOL v110 = (__n128 *)((char *)v10 + v104 + 32);
                          goto LABEL_200;
                        }
                      }
                      BOOL v110 = (__n128 *)v10;
LABEL_200:
                      __n128 result = v190;
                      __n128 *v110 = v190;
                      v110[1] = v199;
                    }
                  }
                  n128_u64 = v100[2].n128_u64;
                  v98 += 32;
                  uint64_t v99 = (unint64_t *)v100;
                }
                while (&v100[2] != (__n128 *)a2);
              }
            }
            else if (!v97)
            {
              uint64_t v160 = v10 - 4;
              do
              {
                size_t v161 = (__n128 *)n128_u64;
                unint64_t v162 = bswap64(a1[4]);
                unint64_t v163 = bswap64(*a1);
                if (v162 != v163
                  || (unint64_t v162 = bswap64(v161->n128_u64[1]), v163 = bswap64(a1[1]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[0]), v163 = bswap64(a1[2]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[1]), v163 = bswap64(a1[3]), v162 != v163))
                {
                  int v164 = v162 < v163 ? -1 : 1;
                  if (v164 < 0)
                  {
                    __n128 v194 = *v161;
                    __n128 v204 = v161[1];
                    uint64_t v165 = v160;
                    do
                    {
                      long long v166 = *((_OWORD *)v165 + 3);
                      *((_OWORD *)v165 + 4) = *((_OWORD *)v165 + 2);
                      *((_OWORD *)v165 + 5) = v166;
                      unint64_t v167 = bswap64(v194.n128_u64[0]);
                      unint64_t v168 = bswap64(*v165);
                      if (v167 == v168
                        && (unint64_t v167 = bswap64(v194.n128_u64[1]), v168 = bswap64(v165[1]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[0]), v168 = bswap64(v165[2]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[1]), v168 = bswap64(v165[3]), v167 == v168))
                      {
                        int v169 = 0;
                      }
                      else if (v167 < v168)
                      {
                        int v169 = -1;
                      }
                      else
                      {
                        int v169 = 1;
                      }
                      v165 -= 4;
                    }
                    while (v169 < 0);
                    __n128 result = v194;
                    *((__n128 *)v165 + 4) = v194;
                    *((__n128 *)v165 + 5) = v204;
                  }
                }
                n128_u64 = v161[2].n128_u64;
                v160 += 4;
                a1 = (unint64_t *)v161;
              }
              while (&v161[2] != (__n128 *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (unint64_t *)a2)
            {
              int64_t v111 = (v12 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                int64_t v113 = v112;
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  int v115 = &v10[4 * v114];
                  if (2 * v113 + 2 < (uint64_t)v12)
                  {
                    unint64_t v116 = bswap64(*v115);
                    unint64_t v117 = bswap64(v115[4]);
                    if (v116 != v117) {
                      goto LABEL_212;
                    }
                    unint64_t v116 = bswap64(v115[1]);
                    unint64_t v117 = bswap64(v115[5]);
                    if (v116 == v117
                      && (unint64_t v116 = bswap64(v115[2]), v117 = bswap64(v115[6]), v116 == v117)
                      && (unint64_t v116 = bswap64(v115[3]), v117 = bswap64(v115[7]), v116 == v117))
                    {
                      int v118 = 0;
                    }
                    else
                    {
LABEL_212:
                      int v118 = v116 < v117 ? -1 : 1;
                    }
                    if (v118 < 0)
                    {
                      v115 += 4;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  char v119 = &v10[4 * v113];
                  unint64_t v120 = bswap64(*v115);
                  unint64_t v121 = bswap64(*v119);
                  if (v120 == v121
                    && (unint64_t v120 = bswap64(v115[1]), v121 = bswap64(v119[1]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[2]), v121 = bswap64(v119[2]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[3]), v121 = bswap64(v119[3]), v120 == v121)
                    || (v120 < v121 ? (int v122 = -1) : (int v122 = 1), (v122 & 0x80000000) == 0))
                  {
                    long long v191 = *(_OWORD *)v119;
                    long long v200 = *((_OWORD *)v119 + 1);
                    do
                    {
                      size_t v123 = v115;
                      long long v124 = *((_OWORD *)v115 + 1);
                      *(_OWORD *)char v119 = *(_OWORD *)v115;
                      *((_OWORD *)v119 + 1) = v124;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v125 = (2 * v114) | 1;
                      int v115 = &v10[4 * v125];
                      uint64_t v114 = 2 * v114 + 2;
                      if (v114 < (uint64_t)v12)
                      {
                        unint64_t v126 = bswap64(*v115);
                        unint64_t v127 = bswap64(v115[4]);
                        if (v126 != v127) {
                          goto LABEL_234;
                        }
                        unint64_t v126 = bswap64(v115[1]);
                        unint64_t v127 = bswap64(v115[5]);
                        if (v126 == v127
                          && (v126 = bswap64(v115[2]), unint64_t v127 = bswap64(v115[6]), v126 == v127)
                          && (v126 = bswap64(v115[3]), unint64_t v127 = bswap64(v115[7]), v126 == v127))
                        {
                          int v128 = 0;
                        }
                        else
                        {
LABEL_234:
                          int v128 = v126 < v127 ? -1 : 1;
                        }
                        if (v128 >= 0) {
                          uint64_t v114 = v125;
                        }
                        else {
                          v115 += 4;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v125;
                      }
                      unint64_t v129 = bswap64(*v115);
                      unint64_t v130 = bswap64(v191);
                      if (v129 != v130) {
                        goto LABEL_245;
                      }
                      unint64_t v129 = bswap64(v115[1]);
                      unint64_t v130 = bswap64(*((unint64_t *)&v191 + 1));
                      if (v129 == v130
                        && (v129 = bswap64(v115[2]), unint64_t v130 = bswap64(v200), v129 == v130)
                        && (v129 = bswap64(v115[3]), unint64_t v130 = bswap64(*((unint64_t *)&v200 + 1)), v129 == v130))
                      {
                        int v131 = 0;
                      }
                      else
                      {
LABEL_245:
                        int v131 = v129 < v130 ? -1 : 1;
                      }
                      char v119 = v123;
                    }
                    while ((v131 & 0x80000000) == 0);
                    *(_OWORD *)size_t v123 = v191;
                    *((_OWORD *)v123 + 1) = v200;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              uint64_t v132 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v133 = 0;
                __n128 v183 = *(__n128 *)v10;
                long long v186 = *((_OWORD *)v10 + 1);
                uint64_t v134 = v10;
                do
                {
                  uint64_t v135 = &v134[4 * v133 + 4];
                  uint64_t v136 = (2 * v133) | 1;
                  uint64_t v137 = 2 * v133 + 2;
                  if (v137 < v132)
                  {
                    unint64_t v138 = bswap64(*v135);
                    unint64_t v139 = bswap64(v135[4]);
                    if (v138 != v139) {
                      goto LABEL_259;
                    }
                    unint64_t v138 = bswap64(v135[1]);
                    unint64_t v139 = bswap64(v135[5]);
                    if (v138 == v139
                      && (unint64_t v138 = bswap64(v135[2]), v139 = bswap64(v135[6]), v138 == v139)
                      && (unint64_t v138 = bswap64(v135[3]), v139 = bswap64(v135[7]), v138 == v139))
                    {
                      int v140 = 0;
                    }
                    else
                    {
LABEL_259:
                      int v140 = v138 < v139 ? -1 : 1;
                    }
                    if (v140 < 0)
                    {
                      v135 += 4;
                      uint64_t v136 = v137;
                    }
                  }
                  long long v141 = *((_OWORD *)v135 + 1);
                  *(_OWORD *)uint64_t v134 = *(_OWORD *)v135;
                  *((_OWORD *)v134 + 1) = v141;
                  uint64_t v134 = v135;
                  uint64_t v133 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                a2 -= 32;
                if (v135 == (unint64_t *)a2)
                {
                  __n128 result = v183;
                  *(__n128 *)uint64_t v135 = v183;
                  *((_OWORD *)v135 + 1) = v186;
                }
                else
                {
                  long long v142 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)uint64_t v135 = *(_OWORD *)a2;
                  *((_OWORD *)v135 + 1) = v142;
                  __n128 result = v183;
                  *(__n128 *)a2 = v183;
                  *(_OWORD *)(a2 + 16) = v186;
                  uint64_t v143 = (char *)v135 - (char *)v10 + 32;
                  if (v143 >= 33)
                  {
                    unint64_t v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                    uint64_t v145 = &v10[4 * v144];
                    unint64_t v146 = bswap64(*v145);
                    unint64_t v147 = bswap64(*v135);
                    if (v146 != v147
                      || (unint64_t v146 = bswap64(v145[1]), v147 = bswap64(v135[1]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[2]), v147 = bswap64(v135[2]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[3]), v147 = bswap64(v135[3]), v146 != v147))
                    {
                      int v148 = v146 < v147 ? -1 : 1;
                      if (v148 < 0)
                      {
                        __n128 v192 = *(__n128 *)v135;
                        __n128 v201 = *((__n128 *)v135 + 1);
                        do
                        {
                          uint64_t v149 = (__n128 *)v145;
                          long long v150 = *((_OWORD *)v145 + 1);
                          *(_OWORD *)uint64_t v135 = *(_OWORD *)v145;
                          *((_OWORD *)v135 + 1) = v150;
                          if (!v144) {
                            break;
                          }
                          unint64_t v144 = (v144 - 1) >> 1;
                          uint64_t v145 = &v10[4 * v144];
                          unint64_t v151 = bswap64(*v145);
                          unint64_t v152 = bswap64(v192.n128_u64[0]);
                          if (v151 != v152) {
                            goto LABEL_283;
                          }
                          unint64_t v151 = bswap64(v145[1]);
                          unint64_t v152 = bswap64(v192.n128_u64[1]);
                          if (v151 == v152
                            && (unint64_t v151 = bswap64(v145[2]), v152 = bswap64(v201.n128_u64[0]), v151 == v152)
                            && (unint64_t v151 = bswap64(v145[3]), v152 = bswap64(v201.n128_u64[1]), v151 == v152))
                          {
                            int v153 = 0;
                          }
                          else
                          {
LABEL_283:
                            int v153 = v151 < v152 ? -1 : 1;
                          }
                          uint64_t v135 = (unint64_t *)v149;
                        }
                        while (v153 < 0);
                        __n128 result = v192;
                        *uint64_t v149 = v192;
                        v149[1] = v201;
                      }
                    }
                  }
                }
              }
              while (v132-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v12 >> 1)], (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v14 - 4, (unint64_t *)(a2 - 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v13 + 4], (unint64_t *)(a2 - 96));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v14 - 4, v14, &a1[4 * v13 + 4]);
            __n128 v187 = *(__n128 *)a1;
            long long v196 = *((_OWORD *)a1 + 1);
            long long v15 = *((_OWORD *)v14 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *((_OWORD *)a1 + 1) = v15;
            *(__n128 *)unint64_t v14 = v187;
            *((_OWORD *)v14 + 1) = v196;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v12 >> 1)], a1, (unint64_t *)(a2 - 32));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v16 = bswap64(*(a1 - 4));
          unint64_t v17 = bswap64(*a1);
          if (v16 != v17) {
            goto LABEL_15;
          }
          unint64_t v16 = bswap64(*(a1 - 3));
          unint64_t v17 = bswap64(a1[1]);
          if (v16 == v17
            && (unint64_t v16 = bswap64(*(a1 - 2)), v17 = bswap64(a1[2]), v16 == v17)
            && (unint64_t v16 = bswap64(*(a1 - 1)), v17 = bswap64(a1[3]), v16 == v17))
          {
            int v18 = 0;
          }
          else
          {
LABEL_15:
            int v18 = v16 < v17 ? -1 : 1;
          }
          if (v18 < 0) {
            break;
          }
          __n128 v182 = *(__n128 *)a1;
          long long v185 = *((_OWORD *)a1 + 1);
          unint64_t v51 = bswap64(*a1);
          unint64_t v52 = bswap64(*(void *)(a2 - 32));
          if (v51 == v52
            && (unint64_t v51 = bswap64(v182.n128_u64[1]), v52 = bswap64(*(void *)(a2 - 24)), v51 == v52)
            && (unint64_t v51 = bswap64(v185), v52 = bswap64(*(void *)(a2 - 16)), v51 == v52)
            && (unint64_t v51 = bswap64(*((unint64_t *)&v185 + 1)), v52 = bswap64(*(void *)(a2 - 8)), v51 == v52))
          {
            int v53 = 0;
          }
          else if (v51 < v52)
          {
            int v53 = -1;
          }
          else
          {
            int v53 = 1;
          }
          if (v53 < 0)
          {
            long long v58 = a1;
            unint64_t v10 = a1;
            do
            {
              unint64_t v59 = v10[4];
              v10 += 4;
              unint64_t v60 = bswap64(v182.n128_u64[0]);
              unint64_t v61 = bswap64(v59);
              if (v60 == v61
                && (unint64_t v60 = bswap64(v182.n128_u64[1]), v61 = bswap64(v58[5]), v60 == v61)
                && (unint64_t v60 = bswap64(v185), v61 = bswap64(v58[6]), v60 == v61)
                && (unint64_t v60 = bswap64(*((unint64_t *)&v185 + 1)), v61 = bswap64(v58[7]), v60 == v61))
              {
                int v62 = 0;
              }
              else if (v60 < v61)
              {
                int v62 = -1;
              }
              else
              {
                int v62 = 1;
              }
              long long v58 = v10;
            }
            while ((v62 & 0x80000000) == 0);
          }
          else
          {
            long long v54 = a1 + 4;
            do
            {
              unint64_t v10 = v54;
              if ((unint64_t)v54 >= a2) {
                break;
              }
              unint64_t v55 = bswap64(v182.n128_u64[0]);
              unint64_t v56 = bswap64(*v10);
              if (v55 != v56) {
                goto LABEL_100;
              }
              unint64_t v55 = bswap64(v182.n128_u64[1]);
              unint64_t v56 = bswap64(v10[1]);
              if (v55 == v56
                && (unint64_t v55 = bswap64(v185), v56 = bswap64(v10[2]), v55 == v56)
                && (unint64_t v55 = bswap64(*((unint64_t *)&v185 + 1)), v56 = bswap64(v10[3]), v55 == v56))
              {
                int v57 = 0;
              }
              else
              {
LABEL_100:
                int v57 = v55 < v56 ? -1 : 1;
              }
              long long v54 = v10 + 4;
            }
            while ((v57 & 0x80000000) == 0);
          }
          unint64_t v63 = (_OWORD *)a2;
          if ((unint64_t)v10 < a2)
          {
            uint64_t v64 = (_OWORD *)a2;
            unint64_t v63 = (_OWORD *)a2;
            do
            {
              unint64_t v65 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v66 = bswap64(v182.n128_u64[0]);
              unint64_t v67 = bswap64(v65);
              if (v66 == v67
                && (unint64_t v66 = bswap64(v182.n128_u64[1]), v67 = bswap64(*((void *)v64 - 3)), v66 == v67)
                && (unint64_t v66 = bswap64(v185), v67 = bswap64(*((void *)v64 - 2)), v66 == v67)
                && (unint64_t v66 = bswap64(*((unint64_t *)&v185 + 1)), v67 = bswap64(*((void *)v64 - 1)), v66 == v67))
              {
                int v68 = 0;
              }
              else if (v66 < v67)
              {
                int v68 = -1;
              }
              else
              {
                int v68 = 1;
              }
              uint64_t v64 = v63;
            }
            while (v68 < 0);
          }
          while (v10 < (unint64_t *)v63)
          {
            __n128 v189 = *(__n128 *)v10;
            long long v198 = *((_OWORD *)v10 + 1);
            long long v69 = v63[1];
            *(_OWORD *)unint64_t v10 = *v63;
            *((_OWORD *)v10 + 1) = v69;
            _OWORD *v63 = v189;
            v63[1] = v198;
            uint64_t v70 = v10;
            do
            {
              unint64_t v71 = v10[4];
              v10 += 4;
              unint64_t v72 = bswap64(v182.n128_u64[0]);
              unint64_t v73 = bswap64(v71);
              if (v72 == v73
                && (unint64_t v72 = bswap64(v182.n128_u64[1]), v73 = bswap64(v70[5]), v72 == v73)
                && (unint64_t v72 = bswap64(v185), v73 = bswap64(v70[6]), v72 == v73)
                && (unint64_t v72 = bswap64(*((unint64_t *)&v185 + 1)), v73 = bswap64(v70[7]), v72 == v73))
              {
                int v74 = 0;
              }
              else if (v72 < v73)
              {
                int v74 = -1;
              }
              else
              {
                int v74 = 1;
              }
              uint64_t v70 = v10;
            }
            while ((v74 & 0x80000000) == 0);
            uint64_t v75 = v63;
            do
            {
              unint64_t v76 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v77 = bswap64(v182.n128_u64[0]);
              unint64_t v78 = bswap64(v76);
              if (v77 == v78
                && (unint64_t v77 = bswap64(v182.n128_u64[1]), v78 = bswap64(*((void *)v75 - 3)), v77 == v78)
                && (unint64_t v77 = bswap64(v185), v78 = bswap64(*((void *)v75 - 2)), v77 == v78)
                && (unint64_t v77 = bswap64(*((unint64_t *)&v185 + 1)), v78 = bswap64(*((void *)v75 - 1)), v77 == v78))
              {
                int v79 = 0;
              }
              else if (v77 < v78)
              {
                int v79 = -1;
              }
              else
              {
                int v79 = 1;
              }
              uint64_t v75 = v63;
            }
            while (v79 < 0);
          }
          uint64_t v80 = (__n128 *)(v10 - 4);
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 != a1)
          {
            long long v81 = *((_OWORD *)v10 - 1);
            *(__n128 *)a1 = *v80;
            *((_OWORD *)a1 + 1) = v81;
          }
          a4 = 0;
          __n128 result = v182;
          *uint64_t v80 = v182;
          *((_OWORD *)v10 - 1) = v185;
        }
        uint64_t v19 = 0;
        __n128 v181 = *(__n128 *)a1;
        long long v184 = *((_OWORD *)a1 + 1);
        do
        {
          unint64_t v20 = &a1[v19];
          unint64_t v21 = bswap64(a1[v19 + 4]);
          unint64_t v22 = bswap64(v181.n128_u64[0]);
          if (v21 == v22
            && (v21 = bswap64(v20[5]), unint64_t v22 = bswap64(v181.n128_u64[1]), v21 == v22)
            && (v21 = bswap64(v20[6]), unint64_t v22 = bswap64(v184), v21 == v22)
            && (v21 = bswap64(v20[7]), unint64_t v22 = bswap64(*((unint64_t *)&v184 + 1)), v21 == v22))
          {
            int v23 = 0;
          }
          else if (v21 < v22)
          {
            int v23 = -1;
          }
          else
          {
            int v23 = 1;
          }
          v19 += 4;
        }
        while (v23 < 0);
        long long v24 = &a1[v19];
        unint64_t v25 = a2;
        if (v19 == 4)
        {
          unint64_t v30 = (_OWORD *)a2;
          while (v24 < (unint64_t *)v30)
          {
            long long v26 = v30 - 2;
            unint64_t v31 = bswap64(*((void *)v30 - 4));
            unint64_t v32 = bswap64(v181.n128_u64[0]);
            if (v31 == v32
              && (unint64_t v31 = bswap64(*((void *)v30 - 3)), v32 = bswap64(v181.n128_u64[1]), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 2)), v32 = bswap64(v184), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 1)), v32 = bswap64(*((unint64_t *)&v184 + 1)), v31 == v32))
            {
              int v33 = 0;
            }
            else if (v31 < v32)
            {
              int v33 = -1;
            }
            else
            {
              int v33 = 1;
            }
            v30 -= 2;
            if (v33 < 0) {
              goto LABEL_53;
            }
          }
          long long v26 = v30;
        }
        else
        {
          do
          {
            long long v26 = (_OWORD *)(v25 - 32);
            unint64_t v27 = bswap64(*(void *)(v25 - 32));
            unint64_t v28 = bswap64(v181.n128_u64[0]);
            if (v27 == v28
              && (unint64_t v27 = bswap64(*(void *)(v25 - 24)), v28 = bswap64(v181.n128_u64[1]), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 16)), v28 = bswap64(v184), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 8)), v28 = bswap64(*((unint64_t *)&v184 + 1)), v27 == v28))
            {
              int v29 = 0;
            }
            else if (v27 < v28)
            {
              int v29 = -1;
            }
            else
            {
              int v29 = 1;
            }
            v25 -= 32;
          }
          while ((v29 & 0x80000000) == 0);
        }
LABEL_53:
        if (v24 >= (unint64_t *)v26)
        {
          long long v47 = v24 - 4;
        }
        else
        {
          unint64_t v34 = (unint64_t)v24;
          long long v35 = v26;
          do
          {
            long long v188 = *(_OWORD *)v34;
            long long v197 = *(_OWORD *)(v34 + 16);
            long long v36 = v35[1];
            *(_OWORD *)unint64_t v34 = *v35;
            *(_OWORD *)(v34 + 16) = v36;
            *long long v35 = v188;
            v35[1] = v197;
            long long v37 = (unint64_t *)v34;
            do
            {
              unint64_t v38 = *(void *)(v34 + 32);
              v34 += 32;
              unint64_t v39 = bswap64(v38);
              unint64_t v40 = bswap64(v181.n128_u64[0]);
              if (v39 == v40
                && (unint64_t v39 = bswap64(v37[5]), v40 = bswap64(v181.n128_u64[1]), v39 == v40)
                && (unint64_t v39 = bswap64(v37[6]), v40 = bswap64(v184), v39 == v40)
                && (unint64_t v39 = bswap64(v37[7]), v40 = bswap64(*((unint64_t *)&v184 + 1)), v39 == v40))
              {
                int v41 = 0;
              }
              else if (v39 < v40)
              {
                int v41 = -1;
              }
              else
              {
                int v41 = 1;
              }
              long long v37 = (unint64_t *)v34;
            }
            while (v41 < 0);
            long long v42 = v35;
            do
            {
              unint64_t v43 = *((void *)v35 - 4);
              v35 -= 2;
              unint64_t v44 = bswap64(v43);
              unint64_t v45 = bswap64(v181.n128_u64[0]);
              if (v44 == v45
                && (unint64_t v44 = bswap64(*((void *)v42 - 3)), v45 = bswap64(v181.n128_u64[1]), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 2)), v45 = bswap64(v184), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 1)), v45 = bswap64(*((unint64_t *)&v184 + 1)), v44 == v45))
              {
                int v46 = 0;
              }
              else if (v44 < v45)
              {
                int v46 = -1;
              }
              else
              {
                int v46 = 1;
              }
              long long v42 = v35;
            }
            while ((v46 & 0x80000000) == 0);
          }
          while (v34 < (unint64_t)v35);
          long long v47 = (unint64_t *)(v34 - 32);
        }
        if (v47 != a1)
        {
          long long v48 = *((_OWORD *)v47 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v47;
          *((_OWORD *)a1 + 1) = v48;
        }
        *(__n128 *)long long v47 = v181;
        *((_OWORD *)v47 + 1) = v184;
        if (v24 >= (unint64_t *)v26) {
          break;
        }
LABEL_83:
        std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*,false>(a1, v47, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v47 + 4;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*>(a1, v47);
      unint64_t v10 = v47 + 4;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*>(v47 + 4, (unint64_t *)a2))
      {
        break;
      }
      if (!v49) {
        goto LABEL_83;
      }
    }
    a2 = (unint64_t)v47;
    if (!v49) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLUINT256_t const*,unsigned int const*,unsigned long)::$_0 &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 4;
      unint64_t v7 = bswap64(*(a2 - 4));
      unint64_t v8 = bswap64(*a1);
      if (v7 == v8
        && (unint64_t v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (unint64_t v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        int v9 = 0;
      }
      else if (v7 < v8)
      {
        int v9 = -1;
      }
      else
      {
        int v9 = 1;
      }
      if (v9 < 0)
      {
        long long v33 = *(_OWORD *)a1;
        long long v32 = *((_OWORD *)a1 + 1);
        long long v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)unint64_t v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      long long v24 = a1 + 4;
      unint64_t v25 = a1 + 8;
      long long v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      unint64_t v28 = *(a2 - 4);
      unint64_t v27 = a2 - 4;
      unint64_t v29 = bswap64(v28);
      unint64_t v30 = bswap64(a1[12]);
      if (v29 == v30
        && (unint64_t v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (unint64_t v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        int v31 = 0;
      }
      else if (v29 < v30)
      {
        int v31 = -1;
      }
      else
      {
        int v31 = 1;
      }
      if (v31 < 0)
      {
        long long v36 = *(_OWORD *)v26;
        long long v35 = *((_OWORD *)a1 + 7);
        long long v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)long long v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)unint64_t v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        unint64_t v38 = bswap64(*v26);
        unint64_t v39 = bswap64(*v25);
        if (v38 != v39) {
          goto LABEL_54;
        }
        unint64_t v38 = bswap64(a1[13]);
        unint64_t v39 = bswap64(a1[9]);
        if (v38 == v39
          && (unint64_t v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (unint64_t v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          int v40 = 0;
        }
        else
        {
LABEL_54:
          int v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          long long v42 = *(_OWORD *)v25;
          long long v41 = *((_OWORD *)a1 + 5);
          long long v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)long long v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          unint64_t v44 = bswap64(*v25);
          unint64_t v45 = bswap64(*v24);
          if (v44 != v45) {
            goto LABEL_64;
          }
          unint64_t v44 = bswap64(a1[9]);
          unint64_t v45 = bswap64(a1[5]);
          if (v44 == v45
            && (unint64_t v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (unint64_t v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            int v46 = 0;
          }
          else
          {
LABEL_64:
            int v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            long long v48 = *(_OWORD *)v24;
            long long v47 = *((_OWORD *)a1 + 3);
            long long v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)long long v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)unint64_t v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            unint64_t v50 = bswap64(a1[4]);
            unint64_t v51 = bswap64(*a1);
            if (v50 != v51) {
              goto LABEL_73;
            }
            unint64_t v50 = bswap64(a1[5]);
            unint64_t v51 = bswap64(a1[1]);
            if (v50 == v51
              && (unint64_t v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (unint64_t v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              int v52 = 0;
            }
            else
            {
LABEL_73:
              int v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              long long v54 = *(_OWORD *)a1;
              long long v53 = *((_OWORD *)a1 + 1);
              long long v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)long long v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      uint64_t v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  do
  {
    unint64_t v14 = bswap64(*v11);
    unint64_t v15 = bswap64(*v10);
    if (v14 != v15
      || (unint64_t v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (unint64_t v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (unint64_t v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      int v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        long long v56 = *(_OWORD *)v11;
        long long v57 = *((_OWORD *)v11 + 1);
        uint64_t v17 = v12;
        while (1)
        {
          int v18 = (char *)a1 + v17;
          long long v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64) {
            break;
          }
          unint64_t v20 = bswap64(v56);
          unint64_t v21 = bswap64(*((void *)v18 + 4));
          if (v20 == v21
            && (unint64_t v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((void *)v18 + 5)), v20 == v21)
            && (unint64_t v20 = bswap64(v57), v21 = bswap64(*((void *)v18 + 6)), v20 == v21)
            && (unint64_t v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((void *)v18 + 7)), v20 == v21))
          {
            int v22 = 0;
          }
          else if (v20 < v21)
          {
            int v22 = -1;
          }
          else
          {
            int v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            int v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        int v23 = a1;
LABEL_30:
        *(_OWORD *)int v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8) {
          return v11 + 4 == a2;
        }
      }
    }
    unint64_t v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - (void)v10;
          unint64_t v12 = (uint64_t)(a2 - (void)v10) >> 5;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v83 = *(void *)(a2 - 32);
                unint64_t v82 = a2 - 32;
                unint64_t v84 = bswap64(v83);
                unint64_t v85 = bswap64(*v10);
                if (v84 == v85
                  && (v84 = bswap64(*(void *)(v82 + 8)), unint64_t v85 = bswap64(v10[1]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 16)), unint64_t v85 = bswap64(v10[2]), v84 == v85)
                  && (v84 = bswap64(*(void *)(v82 + 24)), unint64_t v85 = bswap64(v10[3]), v84 == v85))
                {
                  int v86 = 0;
                }
                else if (v84 < v85)
                {
                  int v86 = -1;
                }
                else
                {
                  int v86 = 1;
                }
                if (v86 < 0)
                {
                  __n128 v193 = *(__n128 *)v10;
                  long long v202 = *((_OWORD *)v10 + 1);
                  long long v155 = *(_OWORD *)(v82 + 16);
                  *(_OWORD *)unint64_t v10 = *(_OWORD *)v82;
                  *((_OWORD *)v10 + 1) = v155;
                  __n128 result = v193;
                  *(__n128 *)unint64_t v82 = v193;
                  *(_OWORD *)(v82 + 16) = v202;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, (unint64_t *)(a2 - 32));
                break;
              case 4uLL:
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, (unint64_t *)(a2 - 32)).n128_u64[0];
                break;
              case 5uLL:
                uint64_t v87 = v10 + 4;
                int v88 = v10 + 8;
                uint64_t v89 = v10 + 12;
                result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v10, v10 + 4, v10 + 8, v10 + 12).n128_u64[0];
                unint64_t v91 = *(void *)(a2 - 32);
                unint64_t v90 = a2 - 32;
                unint64_t v92 = bswap64(v91);
                unint64_t v93 = bswap64(v10[12]);
                if (v92 == v93
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 8)), v93 = bswap64(v10[13]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 16)), v93 = bswap64(v10[14]), v92 == v93)
                  && (unint64_t v92 = bswap64(*(void *)(v90 + 24)), v93 = bswap64(v10[15]), v92 == v93))
                {
                  int v94 = 0;
                }
                else if (v92 < v93)
                {
                  int v94 = -1;
                }
                else
                {
                  int v94 = 1;
                }
                if (v94 < 0)
                {
                  __n128 result = *(__n128 *)v89;
                  long long v203 = *((_OWORD *)v10 + 7);
                  long long v156 = *(_OWORD *)(v90 + 16);
                  *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
                  *((_OWORD *)v10 + 7) = v156;
                  *(__n128 *)unint64_t v90 = result;
                  *(_OWORD *)(v90 + 16) = v203;
                  unint64_t v157 = bswap64(*v89);
                  unint64_t v158 = bswap64(*v88);
                  if (v157 != v158) {
                    goto LABEL_328;
                  }
                  unint64_t v157 = bswap64(v10[13]);
                  unint64_t v158 = bswap64(v10[9]);
                  if (v157 == v158
                    && (unint64_t v157 = bswap64(v10[14]), v158 = bswap64(v10[10]), v157 == v158)
                    && (unint64_t v157 = bswap64(v10[15]), v158 = bswap64(v10[11]), v157 == v158))
                  {
                    int v159 = 0;
                  }
                  else
                  {
LABEL_328:
                    int v159 = v157 < v158 ? -1 : 1;
                  }
                  if (v159 < 0)
                  {
                    long long v170 = *(_OWORD *)v88;
                    __n128 result = *((__n128 *)v10 + 5);
                    long long v171 = *((_OWORD *)v10 + 7);
                    *(_OWORD *)int v88 = *(_OWORD *)v89;
                    *((_OWORD *)v10 + 5) = v171;
                    *(_OWORD *)uint64_t v89 = v170;
                    *((__n128 *)v10 + 7) = result;
                    unint64_t v172 = bswap64(*v88);
                    unint64_t v173 = bswap64(*v87);
                    if (v172 != v173) {
                      goto LABEL_337;
                    }
                    unint64_t v172 = bswap64(v10[9]);
                    unint64_t v173 = bswap64(v10[5]);
                    if (v172 == v173
                      && (unint64_t v172 = bswap64(v10[10]), v173 = bswap64(v10[6]), v172 == v173)
                      && (unint64_t v172 = bswap64(v10[11]), v173 = bswap64(v10[7]), v172 == v173))
                    {
                      int v174 = 0;
                    }
                    else
                    {
LABEL_337:
                      int v174 = v172 < v173 ? -1 : 1;
                    }
                    if (v174 < 0)
                    {
                      long long v175 = *(_OWORD *)v87;
                      __n128 result = *((__n128 *)v10 + 3);
                      long long v176 = *((_OWORD *)v10 + 5);
                      *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
                      *((_OWORD *)v10 + 3) = v176;
                      *(_OWORD *)int v88 = v175;
                      *((__n128 *)v10 + 5) = result;
                      unint64_t v177 = bswap64(v10[4]);
                      unint64_t v178 = bswap64(*v10);
                      if (v177 != v178) {
                        goto LABEL_346;
                      }
                      unint64_t v177 = bswap64(v10[5]);
                      unint64_t v178 = bswap64(v10[1]);
                      if (v177 == v178
                        && (unint64_t v177 = bswap64(v10[6]), v178 = bswap64(v10[2]), v177 == v178)
                        && (unint64_t v177 = bswap64(v10[7]), v178 = bswap64(v10[3]), v177 == v178))
                      {
                        int v179 = 0;
                      }
                      else
                      {
LABEL_346:
                        int v179 = v177 < v178 ? -1 : 1;
                      }
                      if (v179 < 0)
                      {
                        __n128 v195 = *(__n128 *)v10;
                        long long v205 = *((_OWORD *)v10 + 1);
                        long long v180 = *((_OWORD *)v10 + 3);
                        *(_OWORD *)unint64_t v10 = *(_OWORD *)v87;
                        *((_OWORD *)v10 + 1) = v180;
                        __n128 result = v195;
                        *(__n128 *)uint64_t v87 = v195;
                        *((_OWORD *)v10 + 3) = v205;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 767)
          {
            n128_u64 = v10 + 4;
            BOOL v97 = v10 == (unint64_t *)a2 || n128_u64 == (unint64_t *)a2;
            if (a4)
            {
              if (!v97)
              {
                uint64_t v98 = 0;
                uint64_t v99 = v10;
                do
                {
                  uint64_t v100 = (__n128 *)n128_u64;
                  unint64_t v101 = bswap64(v99[4]);
                  unint64_t v102 = bswap64(*v99);
                  if (v101 != v102
                    || (unint64_t v101 = bswap64(v100->n128_u64[1]), v102 = bswap64(v99[1]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[0]), v102 = bswap64(v99[2]), v101 != v102)
                    || (unint64_t v101 = bswap64(v100[1].n128_u64[1]), v102 = bswap64(v99[3]), v101 != v102))
                  {
                    int v103 = v101 < v102 ? -1 : 1;
                    if (v103 < 0)
                    {
                      __n128 v190 = *v100;
                      __n128 v199 = v100[1];
                      uint64_t v104 = v98;
                      while (1)
                      {
                        char v105 = (char *)v10 + v104;
                        long long v106 = *(_OWORD *)((char *)v10 + v104 + 16);
                        *((_OWORD *)v105 + 2) = *(_OWORD *)((char *)v10 + v104);
                        *((_OWORD *)v105 + 3) = v106;
                        if (!v104) {
                          break;
                        }
                        unint64_t v107 = bswap64(v190.n128_u64[0]);
                        unint64_t v108 = bswap64(*((void *)v105 - 4));
                        if (v107 == v108
                          && (unint64_t v107 = bswap64(v190.n128_u64[1]), v108 = bswap64(*((void *)v105 - 3)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[0]), v108 = bswap64(*((void *)v105 - 2)), v107 == v108)
                          && (unint64_t v107 = bswap64(v199.n128_u64[1]), v108 = bswap64(*((void *)v105 - 1)), v107 == v108))
                        {
                          int v109 = 0;
                        }
                        else if (v107 < v108)
                        {
                          int v109 = -1;
                        }
                        else
                        {
                          int v109 = 1;
                        }
                        v104 -= 32;
                        if ((v109 & 0x80000000) == 0)
                        {
                          BOOL v110 = (__n128 *)((char *)v10 + v104 + 32);
                          goto LABEL_200;
                        }
                      }
                      BOOL v110 = (__n128 *)v10;
LABEL_200:
                      __n128 result = v190;
                      __n128 *v110 = v190;
                      v110[1] = v199;
                    }
                  }
                  n128_u64 = v100[2].n128_u64;
                  v98 += 32;
                  uint64_t v99 = (unint64_t *)v100;
                }
                while (&v100[2] != (__n128 *)a2);
              }
            }
            else if (!v97)
            {
              uint64_t v160 = v10 - 4;
              do
              {
                size_t v161 = (__n128 *)n128_u64;
                unint64_t v162 = bswap64(a1[4]);
                unint64_t v163 = bswap64(*a1);
                if (v162 != v163
                  || (unint64_t v162 = bswap64(v161->n128_u64[1]), v163 = bswap64(a1[1]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[0]), v163 = bswap64(a1[2]), v162 != v163)
                  || (unint64_t v162 = bswap64(v161[1].n128_u64[1]), v163 = bswap64(a1[3]), v162 != v163))
                {
                  int v164 = v162 < v163 ? -1 : 1;
                  if (v164 < 0)
                  {
                    __n128 v194 = *v161;
                    __n128 v204 = v161[1];
                    uint64_t v165 = v160;
                    do
                    {
                      long long v166 = *((_OWORD *)v165 + 3);
                      *((_OWORD *)v165 + 4) = *((_OWORD *)v165 + 2);
                      *((_OWORD *)v165 + 5) = v166;
                      unint64_t v167 = bswap64(v194.n128_u64[0]);
                      unint64_t v168 = bswap64(*v165);
                      if (v167 == v168
                        && (unint64_t v167 = bswap64(v194.n128_u64[1]), v168 = bswap64(v165[1]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[0]), v168 = bswap64(v165[2]), v167 == v168)
                        && (unint64_t v167 = bswap64(v204.n128_u64[1]), v168 = bswap64(v165[3]), v167 == v168))
                      {
                        int v169 = 0;
                      }
                      else if (v167 < v168)
                      {
                        int v169 = -1;
                      }
                      else
                      {
                        int v169 = 1;
                      }
                      v165 -= 4;
                    }
                    while (v169 < 0);
                    __n128 result = v194;
                    *((__n128 *)v165 + 4) = v194;
                    *((__n128 *)v165 + 5) = v204;
                  }
                }
                n128_u64 = v161[2].n128_u64;
                v160 += 4;
                a1 = (unint64_t *)v161;
              }
              while (&v161[2] != (__n128 *)a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != (unint64_t *)a2)
            {
              int64_t v111 = (v12 - 2) >> 1;
              int64_t v112 = v111;
              do
              {
                int64_t v113 = v112;
                if (v111 >= v112)
                {
                  uint64_t v114 = (2 * v112) | 1;
                  int v115 = &v10[4 * v114];
                  if (2 * v113 + 2 < (uint64_t)v12)
                  {
                    unint64_t v116 = bswap64(*v115);
                    unint64_t v117 = bswap64(v115[4]);
                    if (v116 != v117) {
                      goto LABEL_212;
                    }
                    unint64_t v116 = bswap64(v115[1]);
                    unint64_t v117 = bswap64(v115[5]);
                    if (v116 == v117
                      && (unint64_t v116 = bswap64(v115[2]), v117 = bswap64(v115[6]), v116 == v117)
                      && (unint64_t v116 = bswap64(v115[3]), v117 = bswap64(v115[7]), v116 == v117))
                    {
                      int v118 = 0;
                    }
                    else
                    {
LABEL_212:
                      int v118 = v116 < v117 ? -1 : 1;
                    }
                    if (v118 < 0)
                    {
                      v115 += 4;
                      uint64_t v114 = 2 * v113 + 2;
                    }
                  }
                  char v119 = &v10[4 * v113];
                  unint64_t v120 = bswap64(*v115);
                  unint64_t v121 = bswap64(*v119);
                  if (v120 == v121
                    && (unint64_t v120 = bswap64(v115[1]), v121 = bswap64(v119[1]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[2]), v121 = bswap64(v119[2]), v120 == v121)
                    && (unint64_t v120 = bswap64(v115[3]), v121 = bswap64(v119[3]), v120 == v121)
                    || (v120 < v121 ? (int v122 = -1) : (int v122 = 1), (v122 & 0x80000000) == 0))
                  {
                    long long v191 = *(_OWORD *)v119;
                    long long v200 = *((_OWORD *)v119 + 1);
                    do
                    {
                      size_t v123 = v115;
                      long long v124 = *((_OWORD *)v115 + 1);
                      *(_OWORD *)char v119 = *(_OWORD *)v115;
                      *((_OWORD *)v119 + 1) = v124;
                      if (v111 < v114) {
                        break;
                      }
                      uint64_t v125 = (2 * v114) | 1;
                      int v115 = &v10[4 * v125];
                      uint64_t v114 = 2 * v114 + 2;
                      if (v114 < (uint64_t)v12)
                      {
                        unint64_t v126 = bswap64(*v115);
                        unint64_t v127 = bswap64(v115[4]);
                        if (v126 != v127) {
                          goto LABEL_234;
                        }
                        unint64_t v126 = bswap64(v115[1]);
                        unint64_t v127 = bswap64(v115[5]);
                        if (v126 == v127
                          && (v126 = bswap64(v115[2]), unint64_t v127 = bswap64(v115[6]), v126 == v127)
                          && (v126 = bswap64(v115[3]), unint64_t v127 = bswap64(v115[7]), v126 == v127))
                        {
                          int v128 = 0;
                        }
                        else
                        {
LABEL_234:
                          int v128 = v126 < v127 ? -1 : 1;
                        }
                        if (v128 >= 0) {
                          uint64_t v114 = v125;
                        }
                        else {
                          v115 += 4;
                        }
                      }
                      else
                      {
                        uint64_t v114 = v125;
                      }
                      unint64_t v129 = bswap64(*v115);
                      unint64_t v130 = bswap64(v191);
                      if (v129 != v130) {
                        goto LABEL_245;
                      }
                      unint64_t v129 = bswap64(v115[1]);
                      unint64_t v130 = bswap64(*((unint64_t *)&v191 + 1));
                      if (v129 == v130
                        && (v129 = bswap64(v115[2]), unint64_t v130 = bswap64(v200), v129 == v130)
                        && (v129 = bswap64(v115[3]), unint64_t v130 = bswap64(*((unint64_t *)&v200 + 1)), v129 == v130))
                      {
                        int v131 = 0;
                      }
                      else
                      {
LABEL_245:
                        int v131 = v129 < v130 ? -1 : 1;
                      }
                      char v119 = v123;
                    }
                    while ((v131 & 0x80000000) == 0);
                    *(_OWORD *)size_t v123 = v191;
                    *((_OWORD *)v123 + 1) = v200;
                  }
                }
                int64_t v112 = v113 - 1;
              }
              while (v113);
              uint64_t v132 = (unint64_t)v11 >> 5;
              do
              {
                uint64_t v133 = 0;
                __n128 v183 = *(__n128 *)v10;
                long long v186 = *((_OWORD *)v10 + 1);
                uint64_t v134 = v10;
                do
                {
                  uint64_t v135 = &v134[4 * v133 + 4];
                  uint64_t v136 = (2 * v133) | 1;
                  uint64_t v137 = 2 * v133 + 2;
                  if (v137 < v132)
                  {
                    unint64_t v138 = bswap64(*v135);
                    unint64_t v139 = bswap64(v135[4]);
                    if (v138 != v139) {
                      goto LABEL_259;
                    }
                    unint64_t v138 = bswap64(v135[1]);
                    unint64_t v139 = bswap64(v135[5]);
                    if (v138 == v139
                      && (unint64_t v138 = bswap64(v135[2]), v139 = bswap64(v135[6]), v138 == v139)
                      && (unint64_t v138 = bswap64(v135[3]), v139 = bswap64(v135[7]), v138 == v139))
                    {
                      int v140 = 0;
                    }
                    else
                    {
LABEL_259:
                      int v140 = v138 < v139 ? -1 : 1;
                    }
                    if (v140 < 0)
                    {
                      v135 += 4;
                      uint64_t v136 = v137;
                    }
                  }
                  long long v141 = *((_OWORD *)v135 + 1);
                  *(_OWORD *)uint64_t v134 = *(_OWORD *)v135;
                  *((_OWORD *)v134 + 1) = v141;
                  uint64_t v134 = v135;
                  uint64_t v133 = v136;
                }
                while (v136 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
                a2 -= 32;
                if (v135 == (unint64_t *)a2)
                {
                  __n128 result = v183;
                  *(__n128 *)uint64_t v135 = v183;
                  *((_OWORD *)v135 + 1) = v186;
                }
                else
                {
                  long long v142 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)uint64_t v135 = *(_OWORD *)a2;
                  *((_OWORD *)v135 + 1) = v142;
                  __n128 result = v183;
                  *(__n128 *)a2 = v183;
                  *(_OWORD *)(a2 + 16) = v186;
                  uint64_t v143 = (char *)v135 - (char *)v10 + 32;
                  if (v143 >= 33)
                  {
                    unint64_t v144 = (((unint64_t)v143 >> 5) - 2) >> 1;
                    uint64_t v145 = &v10[4 * v144];
                    unint64_t v146 = bswap64(*v145);
                    unint64_t v147 = bswap64(*v135);
                    if (v146 != v147
                      || (unint64_t v146 = bswap64(v145[1]), v147 = bswap64(v135[1]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[2]), v147 = bswap64(v135[2]), v146 != v147)
                      || (unint64_t v146 = bswap64(v145[3]), v147 = bswap64(v135[3]), v146 != v147))
                    {
                      int v148 = v146 < v147 ? -1 : 1;
                      if (v148 < 0)
                      {
                        __n128 v192 = *(__n128 *)v135;
                        __n128 v201 = *((__n128 *)v135 + 1);
                        do
                        {
                          uint64_t v149 = (__n128 *)v145;
                          long long v150 = *((_OWORD *)v145 + 1);
                          *(_OWORD *)uint64_t v135 = *(_OWORD *)v145;
                          *((_OWORD *)v135 + 1) = v150;
                          if (!v144) {
                            break;
                          }
                          unint64_t v144 = (v144 - 1) >> 1;
                          uint64_t v145 = &v10[4 * v144];
                          unint64_t v151 = bswap64(*v145);
                          unint64_t v152 = bswap64(v192.n128_u64[0]);
                          if (v151 != v152) {
                            goto LABEL_283;
                          }
                          unint64_t v151 = bswap64(v145[1]);
                          unint64_t v152 = bswap64(v192.n128_u64[1]);
                          if (v151 == v152
                            && (unint64_t v151 = bswap64(v145[2]), v152 = bswap64(v201.n128_u64[0]), v151 == v152)
                            && (unint64_t v151 = bswap64(v145[3]), v152 = bswap64(v201.n128_u64[1]), v151 == v152))
                          {
                            int v153 = 0;
                          }
                          else
                          {
LABEL_283:
                            int v153 = v151 < v152 ? -1 : 1;
                          }
                          uint64_t v135 = (unint64_t *)v149;
                        }
                        while (v153 < 0);
                        __n128 result = v192;
                        *uint64_t v149 = v192;
                        v149[1] = v201;
                      }
                    }
                  }
                }
              }
              while (v132-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 > 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, &a1[4 * (v12 >> 1)], (unint64_t *)(a2 - 32));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 4, v14 - 4, (unint64_t *)(a2 - 64));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1 + 8, &a1[4 * v13 + 4], (unint64_t *)(a2 - 96));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(v14 - 4, v14, &a1[4 * v13 + 4]);
            __n128 v187 = *(__n128 *)a1;
            long long v196 = *((_OWORD *)a1 + 1);
            long long v15 = *((_OWORD *)v14 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *((_OWORD *)a1 + 1) = v15;
            *(__n128 *)unint64_t v14 = v187;
            *((_OWORD *)v14 + 1) = v196;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(&a1[4 * (v12 >> 1)], a1, (unint64_t *)(a2 - 32));
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v16 = bswap64(*(a1 - 4));
          unint64_t v17 = bswap64(*a1);
          if (v16 != v17) {
            goto LABEL_15;
          }
          unint64_t v16 = bswap64(*(a1 - 3));
          unint64_t v17 = bswap64(a1[1]);
          if (v16 == v17
            && (unint64_t v16 = bswap64(*(a1 - 2)), v17 = bswap64(a1[2]), v16 == v17)
            && (unint64_t v16 = bswap64(*(a1 - 1)), v17 = bswap64(a1[3]), v16 == v17))
          {
            int v18 = 0;
          }
          else
          {
LABEL_15:
            int v18 = v16 < v17 ? -1 : 1;
          }
          if (v18 < 0) {
            break;
          }
          __n128 v182 = *(__n128 *)a1;
          long long v185 = *((_OWORD *)a1 + 1);
          unint64_t v51 = bswap64(*a1);
          unint64_t v52 = bswap64(*(void *)(a2 - 32));
          if (v51 == v52
            && (unint64_t v51 = bswap64(v182.n128_u64[1]), v52 = bswap64(*(void *)(a2 - 24)), v51 == v52)
            && (unint64_t v51 = bswap64(v185), v52 = bswap64(*(void *)(a2 - 16)), v51 == v52)
            && (unint64_t v51 = bswap64(*((unint64_t *)&v185 + 1)), v52 = bswap64(*(void *)(a2 - 8)), v51 == v52))
          {
            int v53 = 0;
          }
          else if (v51 < v52)
          {
            int v53 = -1;
          }
          else
          {
            int v53 = 1;
          }
          if (v53 < 0)
          {
            long long v58 = a1;
            unint64_t v10 = a1;
            do
            {
              unint64_t v59 = v10[4];
              v10 += 4;
              unint64_t v60 = bswap64(v182.n128_u64[0]);
              unint64_t v61 = bswap64(v59);
              if (v60 == v61
                && (unint64_t v60 = bswap64(v182.n128_u64[1]), v61 = bswap64(v58[5]), v60 == v61)
                && (unint64_t v60 = bswap64(v185), v61 = bswap64(v58[6]), v60 == v61)
                && (unint64_t v60 = bswap64(*((unint64_t *)&v185 + 1)), v61 = bswap64(v58[7]), v60 == v61))
              {
                int v62 = 0;
              }
              else if (v60 < v61)
              {
                int v62 = -1;
              }
              else
              {
                int v62 = 1;
              }
              long long v58 = v10;
            }
            while ((v62 & 0x80000000) == 0);
          }
          else
          {
            long long v54 = a1 + 4;
            do
            {
              unint64_t v10 = v54;
              if ((unint64_t)v54 >= a2) {
                break;
              }
              unint64_t v55 = bswap64(v182.n128_u64[0]);
              unint64_t v56 = bswap64(*v10);
              if (v55 != v56) {
                goto LABEL_100;
              }
              unint64_t v55 = bswap64(v182.n128_u64[1]);
              unint64_t v56 = bswap64(v10[1]);
              if (v55 == v56
                && (unint64_t v55 = bswap64(v185), v56 = bswap64(v10[2]), v55 == v56)
                && (unint64_t v55 = bswap64(*((unint64_t *)&v185 + 1)), v56 = bswap64(v10[3]), v55 == v56))
              {
                int v57 = 0;
              }
              else
              {
LABEL_100:
                int v57 = v55 < v56 ? -1 : 1;
              }
              long long v54 = v10 + 4;
            }
            while ((v57 & 0x80000000) == 0);
          }
          unint64_t v63 = (_OWORD *)a2;
          if ((unint64_t)v10 < a2)
          {
            uint64_t v64 = (_OWORD *)a2;
            unint64_t v63 = (_OWORD *)a2;
            do
            {
              unint64_t v65 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v66 = bswap64(v182.n128_u64[0]);
              unint64_t v67 = bswap64(v65);
              if (v66 == v67
                && (unint64_t v66 = bswap64(v182.n128_u64[1]), v67 = bswap64(*((void *)v64 - 3)), v66 == v67)
                && (unint64_t v66 = bswap64(v185), v67 = bswap64(*((void *)v64 - 2)), v66 == v67)
                && (unint64_t v66 = bswap64(*((unint64_t *)&v185 + 1)), v67 = bswap64(*((void *)v64 - 1)), v66 == v67))
              {
                int v68 = 0;
              }
              else if (v66 < v67)
              {
                int v68 = -1;
              }
              else
              {
                int v68 = 1;
              }
              uint64_t v64 = v63;
            }
            while (v68 < 0);
          }
          while (v10 < (unint64_t *)v63)
          {
            __n128 v189 = *(__n128 *)v10;
            long long v198 = *((_OWORD *)v10 + 1);
            long long v69 = v63[1];
            *(_OWORD *)unint64_t v10 = *v63;
            *((_OWORD *)v10 + 1) = v69;
            _OWORD *v63 = v189;
            v63[1] = v198;
            uint64_t v70 = v10;
            do
            {
              unint64_t v71 = v10[4];
              v10 += 4;
              unint64_t v72 = bswap64(v182.n128_u64[0]);
              unint64_t v73 = bswap64(v71);
              if (v72 == v73
                && (unint64_t v72 = bswap64(v182.n128_u64[1]), v73 = bswap64(v70[5]), v72 == v73)
                && (unint64_t v72 = bswap64(v185), v73 = bswap64(v70[6]), v72 == v73)
                && (unint64_t v72 = bswap64(*((unint64_t *)&v185 + 1)), v73 = bswap64(v70[7]), v72 == v73))
              {
                int v74 = 0;
              }
              else if (v72 < v73)
              {
                int v74 = -1;
              }
              else
              {
                int v74 = 1;
              }
              uint64_t v70 = v10;
            }
            while ((v74 & 0x80000000) == 0);
            uint64_t v75 = v63;
            do
            {
              unint64_t v76 = *((void *)v63 - 4);
              v63 -= 2;
              unint64_t v77 = bswap64(v182.n128_u64[0]);
              unint64_t v78 = bswap64(v76);
              if (v77 == v78
                && (unint64_t v77 = bswap64(v182.n128_u64[1]), v78 = bswap64(*((void *)v75 - 3)), v77 == v78)
                && (unint64_t v77 = bswap64(v185), v78 = bswap64(*((void *)v75 - 2)), v77 == v78)
                && (unint64_t v77 = bswap64(*((unint64_t *)&v185 + 1)), v78 = bswap64(*((void *)v75 - 1)), v77 == v78))
              {
                int v79 = 0;
              }
              else if (v77 < v78)
              {
                int v79 = -1;
              }
              else
              {
                int v79 = 1;
              }
              uint64_t v75 = v63;
            }
            while (v79 < 0);
          }
          uint64_t v80 = (__n128 *)(v10 - 4);
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 != a1)
          {
            long long v81 = *((_OWORD *)v10 - 1);
            *(__n128 *)a1 = *v80;
            *((_OWORD *)a1 + 1) = v81;
          }
          a4 = 0;
          __n128 result = v182;
          *uint64_t v80 = v182;
          *((_OWORD *)v10 - 1) = v185;
        }
        uint64_t v19 = 0;
        __n128 v181 = *(__n128 *)a1;
        long long v184 = *((_OWORD *)a1 + 1);
        do
        {
          unint64_t v20 = &a1[v19];
          unint64_t v21 = bswap64(a1[v19 + 4]);
          unint64_t v22 = bswap64(v181.n128_u64[0]);
          if (v21 == v22
            && (v21 = bswap64(v20[5]), unint64_t v22 = bswap64(v181.n128_u64[1]), v21 == v22)
            && (v21 = bswap64(v20[6]), unint64_t v22 = bswap64(v184), v21 == v22)
            && (v21 = bswap64(v20[7]), unint64_t v22 = bswap64(*((unint64_t *)&v184 + 1)), v21 == v22))
          {
            int v23 = 0;
          }
          else if (v21 < v22)
          {
            int v23 = -1;
          }
          else
          {
            int v23 = 1;
          }
          v19 += 4;
        }
        while (v23 < 0);
        long long v24 = &a1[v19];
        unint64_t v25 = a2;
        if (v19 == 4)
        {
          unint64_t v30 = (_OWORD *)a2;
          while (v24 < (unint64_t *)v30)
          {
            long long v26 = v30 - 2;
            unint64_t v31 = bswap64(*((void *)v30 - 4));
            unint64_t v32 = bswap64(v181.n128_u64[0]);
            if (v31 == v32
              && (unint64_t v31 = bswap64(*((void *)v30 - 3)), v32 = bswap64(v181.n128_u64[1]), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 2)), v32 = bswap64(v184), v31 == v32)
              && (unint64_t v31 = bswap64(*((void *)v30 - 1)), v32 = bswap64(*((unint64_t *)&v184 + 1)), v31 == v32))
            {
              int v33 = 0;
            }
            else if (v31 < v32)
            {
              int v33 = -1;
            }
            else
            {
              int v33 = 1;
            }
            v30 -= 2;
            if (v33 < 0) {
              goto LABEL_53;
            }
          }
          long long v26 = v30;
        }
        else
        {
          do
          {
            long long v26 = (_OWORD *)(v25 - 32);
            unint64_t v27 = bswap64(*(void *)(v25 - 32));
            unint64_t v28 = bswap64(v181.n128_u64[0]);
            if (v27 == v28
              && (unint64_t v27 = bswap64(*(void *)(v25 - 24)), v28 = bswap64(v181.n128_u64[1]), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 16)), v28 = bswap64(v184), v27 == v28)
              && (unint64_t v27 = bswap64(*(void *)(v25 - 8)), v28 = bswap64(*((unint64_t *)&v184 + 1)), v27 == v28))
            {
              int v29 = 0;
            }
            else if (v27 < v28)
            {
              int v29 = -1;
            }
            else
            {
              int v29 = 1;
            }
            v25 -= 32;
          }
          while ((v29 & 0x80000000) == 0);
        }
LABEL_53:
        if (v24 >= (unint64_t *)v26)
        {
          long long v47 = v24 - 4;
        }
        else
        {
          unint64_t v34 = (unint64_t)v24;
          long long v35 = v26;
          do
          {
            long long v188 = *(_OWORD *)v34;
            long long v197 = *(_OWORD *)(v34 + 16);
            long long v36 = v35[1];
            *(_OWORD *)unint64_t v34 = *v35;
            *(_OWORD *)(v34 + 16) = v36;
            *long long v35 = v188;
            v35[1] = v197;
            long long v37 = (unint64_t *)v34;
            do
            {
              unint64_t v38 = *(void *)(v34 + 32);
              v34 += 32;
              unint64_t v39 = bswap64(v38);
              unint64_t v40 = bswap64(v181.n128_u64[0]);
              if (v39 == v40
                && (unint64_t v39 = bswap64(v37[5]), v40 = bswap64(v181.n128_u64[1]), v39 == v40)
                && (unint64_t v39 = bswap64(v37[6]), v40 = bswap64(v184), v39 == v40)
                && (unint64_t v39 = bswap64(v37[7]), v40 = bswap64(*((unint64_t *)&v184 + 1)), v39 == v40))
              {
                int v41 = 0;
              }
              else if (v39 < v40)
              {
                int v41 = -1;
              }
              else
              {
                int v41 = 1;
              }
              long long v37 = (unint64_t *)v34;
            }
            while (v41 < 0);
            long long v42 = v35;
            do
            {
              unint64_t v43 = *((void *)v35 - 4);
              v35 -= 2;
              unint64_t v44 = bswap64(v43);
              unint64_t v45 = bswap64(v181.n128_u64[0]);
              if (v44 == v45
                && (unint64_t v44 = bswap64(*((void *)v42 - 3)), v45 = bswap64(v181.n128_u64[1]), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 2)), v45 = bswap64(v184), v44 == v45)
                && (unint64_t v44 = bswap64(*((void *)v42 - 1)), v45 = bswap64(*((unint64_t *)&v184 + 1)), v44 == v45))
              {
                int v46 = 0;
              }
              else if (v44 < v45)
              {
                int v46 = -1;
              }
              else
              {
                int v46 = 1;
              }
              long long v42 = v35;
            }
            while ((v46 & 0x80000000) == 0);
          }
          while (v34 < (unint64_t)v35);
          long long v47 = (unint64_t *)(v34 - 32);
        }
        if (v47 != a1)
        {
          long long v48 = *((_OWORD *)v47 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v47;
          *((_OWORD *)a1 + 1) = v48;
        }
        *(__n128 *)long long v47 = v181;
        *((_OWORD *)v47 + 1) = v184;
        if (v24 >= (unint64_t *)v26) {
          break;
        }
LABEL_83:
        std::__introsort<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*,false>(a1, v47, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v47 + 4;
      }
      BOOL v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*>(a1, v47);
      unint64_t v10 = v47 + 4;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::areBitcodesEqual(MTLUINT256_t const*,std::vector<MTLUINT256_t>)::$_0 &,MTLUINT256_t*>(v47 + 4, (unint64_t *)a2))
      {
        break;
      }
      if (!v49) {
        goto LABEL_83;
      }
    }
    a2 = (unint64_t)v47;
    if (!v49) {
      continue;
    }
    return result;
  }
}