double WebCore::TransformationMatrix::scale(float64x2_t *this, double a2)
{
  double result;

  *(void *)&result = *(_OWORD *)&WebCore::TransformationMatrix::scaleNonUniform(this, a2, a2);
  return result;
}

float64x2_t WebCore::TransformationMatrix::scaleNonUniform(float64x2_t *this, double a2, double a3)
{
  float64x2_t v3 = vmulq_n_f64(*this, a2);
  float64x2_t v4 = vmulq_n_f64(this[1], a2);
  *this = v3;
  this[1] = v4;
  float64x2_t result = vmulq_n_f64(this[2], a3);
  float64x2_t v6 = vmulq_n_f64(this[3], a3);
  this[2] = result;
  this[3] = v6;
  return result;
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::rotateFromVector(float64x2_t *this, long double a2, long double a3)
{
  double v4 = atan2(a3, a2) / 6.28318531 * 360.0;

  return WebCore::TransformationMatrix::rotate3d(this, 0.0, 0.0, v4);
}

float64x2_t WebCore::TransformationMatrix::flipX(float64x2_t *this)
{
  float64x2_t result = vnegq_f64(*this);
  float64x2_t v2 = vnegq_f64(this[1]);
  *this = result;
  this[1] = v2;
  return result;
}

float64x2_t WebCore::TransformationMatrix::flipY(float64x2_t *this)
{
  float64x2_t result = vnegq_f64(this[2]);
  float64x2_t v2 = vnegq_f64(this[3]);
  this[2] = result;
  this[3] = v2;
  return result;
}

float32x2_t WebCore::TransformationMatrix::projectPoint(float64x2_t *a1, float *a2, unsigned char *a3)
{
  if (a3) {
    *a3 = 0;
  }
  double v3 = a1[5].f64[0];
  float32x2_t result = 0;
  if (v3 != 0.0)
  {
    double v5 = *a2;
    double v6 = a2[1];
    double v7 = -(a1[7].f64[0] + a1[3].f64[0] * v6 + a1[1].f64[0] * v5) / v3;
    float64x2_t v8 = vaddq_f64(a1[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a1[2], v6), *a1, v5), a1[4], v7));
    double v9 = a1[7].f64[1] + a1[3].f64[1] * v6 + v5 * a1[1].f64[1] + v7 * a1[5].f64[1];
    if (v9 <= 0.0)
    {
      v10.f64[0] = NAN;
      v10.f64[1] = NAN;
      float64x2_t v8 = (float64x2_t)vbslq_s8((int8x16_t)vnegq_f64(v10), (int8x16_t)vdupq_n_s64(0x4137D78400000000uLL), (int8x16_t)v8);
      if (a3) {
        *a3 = 1;
      }
    }
    else if (v9 != 1.0)
    {
      float64x2_t v8 = vdivq_f64(v8, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0));
    }
    return vcvt_f32_f64(v8);
  }
  return result;
}

void WebCore::TransformationMatrix::projectQuad(float64x2_t *a1@<X0>, float *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v24 = 0;
  __int16 v23 = 0;
  unsigned __int32 v8 = WebCore::TransformationMatrix::projectPoint(a1, a2, (unsigned char *)&v24 + 1).u32[0];
  int v10 = v9;
  unsigned __int32 v11 = WebCore::TransformationMatrix::projectPoint(a1, a2 + 2, &v24).u32[0];
  int v13 = v12;
  unsigned __int32 v14 = WebCore::TransformationMatrix::projectPoint(a1, a2 + 4, (unsigned char *)&v23 + 1).u32[0];
  int v16 = v15;
  unsigned __int32 v17 = WebCore::TransformationMatrix::projectPoint(a1, a2 + 6, &v23).u32[0];
  int v19 = HIBYTE(v24);
  int v20 = v24;
  int v21 = HIBYTE(v23);
  if (a3)
  {
    BOOL v22 = 1;
    if (!v24 && !HIBYTE(v23)) {
      BOOL v22 = (_BYTE)v23 != 0;
    }
    *a3 = v22;
  }
  if (v19 && v20 && v21 && (_BYTE)v23)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(_DWORD *)a4 = v8;
    *(_DWORD *)(a4 + 4) = v10;
    *(_DWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 12) = v13;
    *(_DWORD *)(a4 + 16) = v14;
    *(_DWORD *)(a4 + 20) = v16;
    *(_DWORD *)(a4 + 24) = v17;
    *(_DWORD *)(a4 + 28) = v18;
  }
}

float WebCore::TransformationMatrix::mapPoint(double *a1, float *a2)
{
  if (!WebCore::TransformationMatrix::isIdentityOrTranslation((WebCore::TransformationMatrix *)a1)) {
    return WebCore::TransformationMatrix::internalMapPoint((WebCore::TransformationMatrix *)a1, a2);
  }
  float v4 = a1[12];
  return *a2 + v4;
}

{
  float v4;

  if (!WebCore::TransformationMatrix::isIdentityOrTranslation((WebCore::TransformationMatrix *)a1)) {
    return WebCore::TransformationMatrix::internalMapPoint((WebCore::TransformationMatrix *)a1, a2);
  }
  float v4 = a1[12];
  return *a2 + v4;
}

BOOL WebCore::TransformationMatrix::isIdentityOrTranslation(WebCore::TransformationMatrix *this)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 15) == 1.0;
}

float WebCore::TransformationMatrix::internalMapPoint(WebCore::TransformationMatrix *a1, float *a2)
{
  uint64_t v3 = 0;
  double v4 = 0.0;
  WebCore::TransformationMatrix::multVecMatrix(a1, *a2, a2[1], &v4, (double *)&v3);
  return v4;
}

{
  double v3;
  double v4;
  double v5;

  double v5 = 0.0;
  uint64_t v3 = 0.0;
  double v4 = 0.0;
  WebCore::TransformationMatrix::multVecMatrix(a1, *a2, a2[1], a2[2], &v5, &v4, &v3);
  return v5;
}

void WebCore::TransformationMatrix::mapQuad(WebCore::TransformationMatrix *this@<X0>, const WebCore::FloatQuad *a2@<X1>, uint64_t a3@<X8>)
{
  if (WebCore::TransformationMatrix::isIdentityOrTranslation(this))
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v6;
    double v7 = *((double *)this + 12);
    *(float *)&double v7 = v7;
    float v8 = *((double *)this + 13);
    WebCore::FloatQuad::move((float32x4_t *)a3, v7, v8);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(float *)a3 = WebCore::TransformationMatrix::internalMapPoint(this, (float *)a2);
    *(_DWORD *)(a3 + 4) = v9;
    *(float *)(a3 + 8) = WebCore::TransformationMatrix::internalMapPoint(this, (float *)a2 + 2);
    *(_DWORD *)(a3 + 12) = v10;
    *(float *)(a3 + 16) = WebCore::TransformationMatrix::internalMapPoint(this, (float *)a2 + 4);
    *(_DWORD *)(a3 + 20) = v11;
    *(float *)(a3 + 24) = WebCore::TransformationMatrix::internalMapPoint(this, (float *)a2 + 6);
    *(_DWORD *)(a3 + 28) = v12;
  }
}

float32x4_t WebCore::FloatQuad::move(float32x4_t *this, double a2, float a3)
{
  *((float *)&a2 + 1) = a3;
  float32x4_t v3 = (float32x4_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
  float32x4_t v4 = vaddq_f32(*this, v3);
  float32x4_t result = vaddq_f32(this[1], v3);
  *this = v4;
  this[1] = result;
  return result;
}

float64x2_t WebCore::TransformationMatrix::scale3d(float64x2_t *this, double a2, double a3, double a4)
{
  WebCore::TransformationMatrix::scaleNonUniform(this, a2, a3);
  float64x2_t result = vmulq_n_f64(v4[4], a4);
  float64x2_t v6 = vmulq_n_f64(v4[5], a4);
  v4[4] = result;
  v4[5] = v6;
  return result;
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::rotate3d(float64x2_t *this, double a2, double a3, double a4, double a5)
{
  double v7 = sqrt(a3 * a3 + a2 * a2 + a4 * a4);
  if (v7 != 0.0)
  {
    double v8 = a4;
    double v9 = a3;
    if (v7 != 1.0)
    {
      a2 = a2 / v7;
      double v9 = a3 / v7;
      double v8 = a4 / v7;
    }
    __double2 v11 = __sincos_stret(a5 / 360.0 * 6.28318531);
    double cosval = v11.__cosval;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    if (a2 == 1.0 && v9 == 0.0 && v8 == 0.0)
    {
      double v22 = 1.0;
      long long v23 = 0uLL;
      double v25 = v11.__cosval;
      *(double *)&long long v26 = v11.__sinval;
      *((double *)&v27 + 1) = -v11.__sinval;
    }
    else if (a2 == 0.0 && v9 == 1.0 && v8 == 0.0)
    {
      double v22 = v11.__cosval;
      *((double *)&v23 + 1) = -v11.__sinval;
      double v25 = 1.0;
      *(double *)&long long v27 = v11.__sinval;
    }
    else if (a2 == 0.0 && v9 == 0.0 && v8 == 1.0)
    {
      double v22 = v11.__cosval;
      *(double *)&long long v23 = v11.__sinval;
      *((double *)&v24 + 1) = -v11.__sinval;
      double v25 = v11.__cosval;
      long long v27 = 0uLL;
      double cosval = 1.0;
    }
    else
    {
      double v22 = v11.__cosval + a2 * a2 * (1.0 - v11.__cosval);
      *(double *)&long long v23 = v11.__sinval * v8 + a2 * v9 * (1.0 - v11.__cosval);
      *((double *)&v23 + 1) = -(v11.__sinval * v9 - a2 * v8 * (1.0 - v11.__cosval));
      *((double *)&v24 + 1) = -(v11.__sinval * v8 - a2 * v9 * (1.0 - v11.__cosval));
      double v25 = v11.__cosval + v9 * v9 * (1.0 - v11.__cosval);
      *(double *)&long long v26 = v11.__sinval * a2 + v9 * v8 * (1.0 - v11.__cosval);
      *(double *)&long long v27 = v11.__sinval * v9 + a2 * v8 * (1.0 - v11.__cosval);
      *((double *)&v27 + 1) = -(v11.__sinval * a2 - v9 * v8 * (1.0 - v11.__cosval));
      double cosval = v11.__cosval + v8 * v8 * (1.0 - v11.__cosval);
    }
    double v28 = cosval;
    *(void *)&long long v24 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0x3FF0000000000000;
    int v12 = &v22;
    float64x2_t v13 = *this;
    float64x2_t v14 = this[1];
    float64x2_t v15 = this[2];
    float64x2_t v16 = this[3];
    float64x2_t v17 = this[4];
    float64x2_t v18 = this[5];
    float64x2_t v19 = this[6];
    float64x2_t v20 = this[7];
    float64x2x4_t v34 = vld4q_dup_f64(v12);
    v12 += 4;
    float64x2x4_t v32 = vld4q_dup_f64(v12);
    v12 += 4;
    *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34.val[0], *this), v34.val[1], v15), v34.val[2], v17), v34.val[3], v19);
    this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34.val[0], v14), v34.val[1], v16), v34.val[2], v18), v34.val[3], v20);
    float64x2x4_t v35 = vld4q_dup_f64(v12);
    v12 += 4;
    this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v32.val[0], v13), v32.val[1], v15), v32.val[2], v17), v32.val[3], v19);
    this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v32.val[0], v14), v32.val[1], v16), v32.val[2], v18), v32.val[3], v20);
    float64x2x4_t v33 = vld4q_dup_f64(v12);
    this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v35.val[0], v13), v35.val[1], v15), v35.val[2], v17), v35.val[3], v19);
    this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v35.val[0], v14), v35.val[1], v16), v35.val[2], v18), v35.val[3], v20);
    this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v33.val[0], v13), v33.val[1], v15), v33.val[2], v17), v33.val[3], v19);
    this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v33.val[0], v14), v33.val[1], v16), v33.val[2], v18), v33.val[3], v20);
  }
  return (WebCore::TransformationMatrix *)this;
}

__n128 WebCore::TransformationMatrix::multiply(float64x2_t *this, const WebCore::TransformationMatrix *a2)
{
  float64x2_t v2 = *this;
  float64x2_t v3 = this[1];
  float64x2_t v4 = this[2];
  float64x2_t v5 = this[3];
  float64x2_t v6 = this[4];
  float64x2_t v7 = this[5];
  float64x2_t v8 = this[6];
  float64x2_t v9 = this[7];
  float64x2x4_t v14 = vld4q_dup_f64((const double *)a2);
  int v10 = (const double *)((char *)a2 + 32);
  float64x2x4_t v12 = vld4q_dup_f64(v10);
  v10 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v14.val[0], *this), v14.val[1], v4), v14.val[2], v6), v14.val[3], v8);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v14.val[0], v3), v14.val[1], v5), v14.val[2], v7), v14.val[3], v9);
  float64x2x4_t v15 = vld4q_dup_f64(v10);
  v10 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v12.val[0], v2), v12.val[1], v4), v12.val[2], v6), v12.val[3], v8);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v12.val[0], v3), v12.val[1], v5), v12.val[2], v7), v12.val[3], v9);
  float64x2x4_t v13 = vld4q_dup_f64(v10);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15.val[0], v2), v15.val[1], v4), v15.val[2], v6), v15.val[3], v8);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v15.val[0], v3), v15.val[1], v5), v15.val[2], v7), v15.val[3], v9);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v13.val[0], v2), v13.val[1], v4), v13.val[2], v6), v13.val[3], v8);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v13.val[0], v3), v13.val[1], v5), v13.val[2], v7), v13.val[3], v9);
  return (__n128)v13.val[0];
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::rotate3d(float64x2_t *this, double a2, double a3, double a4)
{
  double v5 = a2 / 360.0 * 6.28318531;
  double v6 = a3 / 360.0 * 6.28318531;
  __double2 v7 = __sincos_stret(a4 / 360.0 * 6.28318531);
  v39.f64[0] = v7.__cosval;
  v39.f64[1] = v7.__sinval;
  *(double *)&v41[8] = -v7.__sinval;
  *(double *)&v41[16] = v7.__cosval;
  memset(&v43[8], 0, 32);
  *(void *)v43 = 0x3FF0000000000000;
  *(void *)&v43[40] = 0x3FF0000000000000;
  float64x2_t v36 = *(float64x2_t *)v43;
  float64x2_t v37 = *(float64x2_t *)&v43[16];
  float64x2_t v38 = *(float64x2_t *)&v43[32];
  float64x2_t v31 = v39;
  float64x2_t v33 = *(float64x2_t *)&v41[8];
  __double2 v8 = __sincos_stret(v6);
  float64x2_t v39 = (float64x2_t)*(unint64_t *)&v8.__cosval;
  double v40 = -v8.__sinval;
  *(_OWORD *)&v41[8] = xmmword_2347F0F10;
  *(_OWORD *)&v42[16] = *(unint64_t *)&v8.__sinval;
  *(double *)v43 = v8.__cosval;
  *(_OWORD *)v42 = 0uLL;
  *(void *)v41 = 0;
  memset(&v43[8], 0, 32);
  *(void *)&v43[40] = 0x3FF0000000000000;
  float64x2_t v9 = &v39;
  float64x2_t v10 = v31;
  float64x2_t v11 = v33;
  float64x2_t v12 = v36;
  float64x2x4_t v50 = vld4q_dup_f64(v9->f64);
  v9 += 2;
  float64x2x4_t v44 = vld4q_dup_f64(v9->f64);
  v9 += 2;
  float64x2_t v31 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v50.val[0], v31), v50.val[1], v33), v50.val[2], (float64x2_t)0), v50.val[3], v37);
  float64x2_t v32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v50.val[0], (float64x2_t)0), v50.val[1], (float64x2_t)0), v50.val[2], v36), v50.val[3], v38);
  float64x2x4_t v51 = vld4q_dup_f64(v9->f64);
  v9 += 2;
  float64x2_t v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44.val[0], v10), v44.val[1], v33), v44.val[2], (float64x2_t)0), v44.val[3], v37);
  float64x2_t v34 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v44.val[0], (float64x2_t)0), v44.val[1], (float64x2_t)0), v44.val[2], v36), v44.val[3], v38);
  float64x2x4_t v45 = vld4q_dup_f64(v9->f64);
  float64x2_t v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51.val[0], v10), v51.val[1], v11), v51.val[2], (float64x2_t)0), v51.val[3], v37);
  float64x2_t v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51.val[0], (float64x2_t)0), v51.val[1], (float64x2_t)0), v51.val[2], v36), v51.val[3], v38);
  float64x2_t v37 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v45.val[0], v10), v45.val[1], v11), v45.val[2], (float64x2_t)0), v45.val[3], v37);
  float64x2_t v38 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v45.val[0], (float64x2_t)0), v45.val[1], (float64x2_t)0), v45.val[2], v12), v45.val[3], v38);
  __double2 v13 = __sincos_stret(v5);
  double v40 = 0.0;
  float64x2_t v39 = (float64x2_t)0x3FF0000000000000uLL;
  *(double *)&v41[16] = v13.__cosval;
  *(double *)v42 = v13.__sinval;
  *(double *)&v42[24] = -v13.__sinval;
  *(double *)v43 = v13.__cosval;
  *(_OWORD *)&v42[8] = 0u;
  *(_OWORD *)v41 = 0u;
  memset(&v43[8], 0, 32);
  *(void *)&v43[40] = 0x3FF0000000000000;
  float64x2_t v14 = v31;
  float64x2_t v15 = v32;
  float64x2_t v16 = v33;
  float64x2_t v17 = v34;
  float64x2_t v18 = v35;
  float64x2_t v19 = v36;
  float64x2x4_t v52 = vld4q_dup_f64(v39.f64);
  float64x2_t v20 = (const double *)&v41[8];
  float64x2x4_t v46 = vld4q_dup_f64(v20);
  v20 += 4;
  float64x2_t v31 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v52.val[0], v31), v52.val[1], v33), v52.val[2], v35), v52.val[3], v37);
  float64x2_t v32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v52.val[0], v32), v52.val[1], v34), v52.val[2], v36), v52.val[3], v38);
  float64x2x4_t v53 = vld4q_dup_f64(v20);
  v20 += 4;
  float64x2_t v33 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v14), v46.val[1], v33), v46.val[2], v35), v46.val[3], v37);
  float64x2_t v34 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v46.val[0], v15), v46.val[1], v34), v46.val[2], v36), v46.val[3], v38);
  float64x2x4_t v47 = vld4q_dup_f64(v20);
  float64x2_t v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v53.val[0], v14), v53.val[1], v16), v53.val[2], v35), v53.val[3], v37);
  float64x2_t v36 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v53.val[0], v15), v53.val[1], v17), v53.val[2], v36), v53.val[3], v38);
  float64x2_t v37 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v14), v47.val[1], v16), v47.val[2], v18), v47.val[3], v37);
  float64x2_t v38 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v47.val[0], v15), v47.val[1], v17), v47.val[2], v19), v47.val[3], v38);
  float64x2_t v21 = *this;
  float64x2_t v22 = this[1];
  float64x2_t v23 = this[2];
  float64x2_t v24 = this[3];
  float64x2_t v25 = this[4];
  float64x2_t v26 = this[5];
  float64x2_t v27 = this[6];
  float64x2_t v28 = this[7];
  float64x2x4_t v54 = vld4q_dup_f64(v31.f64);
  long long v29 = &v33;
  float64x2x4_t v48 = vld4q_dup_f64(v29->f64);
  v29 += 2;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v54.val[0], *this), v54.val[1], v23), v54.val[2], v25), v54.val[3], v27);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v54.val[0], v22), v54.val[1], v24), v54.val[2], v26), v54.val[3], v28);
  float64x2x4_t v55 = vld4q_dup_f64(v29->f64);
  v29 += 2;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v21), v48.val[1], v23), v48.val[2], v25), v48.val[3], v27);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48.val[0], v22), v48.val[1], v24), v48.val[2], v26), v48.val[3], v28);
  float64x2x4_t v49 = vld4q_dup_f64(v29->f64);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v55.val[0], v21), v55.val[1], v23), v55.val[2], v25), v55.val[3], v27);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v55.val[0], v22), v55.val[1], v24), v55.val[2], v26), v55.val[3], v28);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v21), v49.val[1], v23), v49.val[2], v25), v49.val[3], v27);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49.val[0], v22), v49.val[1], v24), v49.val[2], v26), v49.val[3], v28);
  return (WebCore::TransformationMatrix *)this;
}

float64x2_t WebCore::TransformationMatrix::translate(float64x2_t *this, double a2, double a3)
{
  float64x2_t v3 = vmlaq_n_f64(vmulq_n_f64(this[2], a3), *this, a2);
  float64x2_t v4 = vmlaq_n_f64(vmulq_n_f64(this[3], a3), this[1], a2);
  float64x2_t result = vaddq_f64(this[6], v3);
  float64x2_t v6 = vaddq_f64(this[7], v4);
  this[6] = result;
  this[7] = v6;
  return result;
}

float64x2_t WebCore::TransformationMatrix::translate3d(float64x2_t *this, double a2, double a3, double a4)
{
  float64x2_t v4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[2], a3), *this, a2), this[4], a4);
  float64x2_t v5 = vmlaq_n_f64(vmulq_n_f64(this[3], a3), this[1], a2);
  float64x2_t result = vaddq_f64(this[6], v4);
  float64x2_t v7 = vaddq_f64(this[7], vmlaq_n_f64(v5, this[5], a4));
  this[6] = result;
  this[7] = v7;
  return result;
}

double WebCore::TransformationMatrix::translateRight(WebCore::TransformationMatrix *this, double result, double a3)
{
  if (result != 0.0)
  {
    double v3 = *((double *)this + 4);
    *(double *)this = *(double *)this + *((double *)this + 3) * result;
    double v4 = *((double *)this + 8);
    *((double *)this + 4) = v3 + *((double *)this + 7) * result;
    double v5 = *((double *)this + 12);
    *((double *)this + 8) = v4 + *((double *)this + 11) * result;
    float64x2_t result = v5 + *((double *)this + 15) * result;
    *((double *)this + 12) = result;
  }
  if (a3 != 0.0)
  {
    *((double *)this + 1) = *((double *)this + 1) + *((double *)this + 3) * a3;
    *((double *)this + 5) = *((double *)this + 5) + *((double *)this + 7) * a3;
    *((double *)this + 9) = *((double *)this + 9) + *((double *)this + 11) * a3;
    float64x2_t result = *((double *)this + 13) + *((double *)this + 15) * a3;
    *((double *)this + 13) = result;
  }
  return result;
}

void WebCore::TransformationMatrix::translateRight3d(WebCore::TransformationMatrix *this, double a2, double a3, double a4)
{
  WebCore::TransformationMatrix::translateRight(this, a2, a3);
  if (a4 != 0.0)
  {
    v5[2] = v5[2] + v5[3] * a4;
    v5[6] = v5[6] + v5[7] * a4;
    v5[10] = v5[10] + v5[11] * a4;
    v5[14] = v5[14] + v5[15] * a4;
  }
}

WebCore::TransformationMatrix *WebCore::TransformationMatrix::skew(float64x2_t *this, double a2, double a3)
{
  long double v4 = a2 / 360.0 * 6.28318531;
  v15[0] = 0x3FF0000000000000;
  v15[2] = 0;
  v15[3] = 0;
  v15[5] = 0x3FF0000000000000;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0x3FF0000000000000;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0x3FF0000000000000;
  v15[1] = tan(a3 / 360.0 * 6.28318531);
  v15[4] = tan(v4);
  double v5 = (const double *)v15;
  float64x2_t v6 = *this;
  float64x2_t v7 = this[1];
  float64x2_t v8 = this[2];
  float64x2_t v9 = this[3];
  float64x2_t v10 = this[4];
  float64x2_t v11 = this[5];
  float64x2_t v12 = this[6];
  float64x2_t v13 = this[7];
  float64x2x4_t v24 = vld4q_dup_f64(v5);
  v5 += 4;
  float64x2x4_t v22 = vld4q_dup_f64(v5);
  v5 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], *this), v24.val[1], v8), v24.val[2], v10), v24.val[3], v12);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v7), v24.val[1], v9), v24.val[2], v11), v24.val[3], v13);
  float64x2x4_t v25 = vld4q_dup_f64(v5);
  v5 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v6), v22.val[1], v8), v22.val[2], v10), v22.val[3], v12);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v7), v22.val[1], v9), v22.val[2], v11), v22.val[3], v13);
  float64x2x4_t v23 = vld4q_dup_f64(v5);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v6), v25.val[1], v8), v25.val[2], v10), v25.val[3], v12);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v7), v25.val[1], v9), v25.val[2], v11), v25.val[3], v13);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v6), v23.val[1], v8), v23.val[2], v10), v23.val[3], v12);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v7), v23.val[1], v9), v23.val[2], v11), v23.val[3], v13);
  return (WebCore::TransformationMatrix *)this;
}

__n128 WebCore::TransformationMatrix::applyPerspective(float64x2_t *this, double a2)
{
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0x3FF0000000000000;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0x3FF0000000000000;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0x3FF0000000000000;
  if (a2 != 0.0) {
    *(double *)&long long v19 = -1.0 / a2;
  }
  float64x2_t v2 = (const double *)&v12;
  float64x2_t v3 = *this;
  float64x2_t v4 = this[1];
  float64x2_t v5 = this[2];
  float64x2_t v6 = this[3];
  float64x2_t v7 = this[4];
  float64x2_t v8 = this[5];
  float64x2_t v9 = this[6];
  float64x2_t v10 = this[7];
  float64x2x4_t v24 = vld4q_dup_f64(v2);
  v2 += 4;
  float64x2x4_t v22 = vld4q_dup_f64(v2);
  v2 += 4;
  *this = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], *this), v24.val[1], v5), v24.val[2], v7), v24.val[3], v9);
  this[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v4), v24.val[1], v6), v24.val[2], v8), v24.val[3], v10);
  float64x2x4_t v25 = vld4q_dup_f64(v2);
  v2 += 4;
  this[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v3), v22.val[1], v5), v22.val[2], v7), v22.val[3], v9);
  this[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v4), v22.val[1], v6), v22.val[2], v8), v22.val[3], v10);
  float64x2x4_t v23 = vld4q_dup_f64(v2);
  this[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v3), v25.val[1], v5), v25.val[2], v7), v25.val[3], v9);
  this[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v4), v25.val[1], v6), v25.val[2], v8), v25.val[3], v10);
  this[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v3), v23.val[1], v5), v23.val[2], v7), v23.val[3], v9);
  this[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v4), v23.val[1], v6), v23.val[2], v8), v23.val[3], v10);
  return (__n128)v23.val[0];
}

double WebCore::TransformationMatrix::multVecMatrix(WebCore::TransformationMatrix *this, double a2, double a3, double *a4, double *a5)
{
  *a4 = *((double *)this + 12) + a2 * *(double *)this + a3 * *((double *)this + 4);
  *a5 = *((double *)this + 13) + a2 * *((double *)this + 1) + a3 * *((double *)this + 5);
  double result = *((double *)this + 15) + a2 * *((double *)this + 3) + a3 * *((double *)this + 7);
  if (result != 1.0 && result != 0.0)
  {
    *a4 = *a4 / result;
    double result = *a5 / result;
    *a5 = result;
  }
  return result;
}

double WebCore::TransformationMatrix::multVecMatrix(WebCore::TransformationMatrix *this, double a2, double a3, double a4, double *a5, double *a6, double *a7)
{
  *a5 = *((double *)this + 12) + a2 * *(double *)this + a3 * *((double *)this + 4) + a4 * *((double *)this + 8);
  *a6 = *((double *)this + 13) + a2 * *((double *)this + 1) + a3 * *((double *)this + 5) + a4 * *((double *)this + 9);
  *a7 = *((double *)this + 14) + a2 * *((double *)this + 2) + a3 * *((double *)this + 6) + a4 * *((double *)this + 10);
  double result = *((double *)this + 15)
         + a2 * *((double *)this + 3)
         + a3 * *((double *)this + 7)
         + a4 * *((double *)this + 11);
  if (result != 1.0 && result != 0.0)
  {
    *a5 = *a5 / result;
    *a6 = *a6 / result;
    double result = *a7 / result;
    *a7 = result;
  }
  return result;
}

BOOL WebCore::TransformationMatrix::isInvertible(WebCore::TransformationMatrix *this)
{
  return WebCore::TransformationMatrix::isIdentityOrTranslation(this)
      || fabs(WebCore::determinant4x4(this, v2)) >= 0.00000001;
}

double WebCore::determinant4x4(WebCore *this, const double (*a2)[4][4])
{
  double v2 = *((double *)this + 4);
  double v3 = *((double *)this + 5);
  double v4 = *((double *)this + 6);
  double v5 = *((double *)this + 7);
  double v6 = *((double *)this + 8);
  double v7 = *((double *)this + 9);
  double v8 = *((double *)this + 10);
  double v9 = *((double *)this + 11);
  double v10 = *((double *)this + 12);
  double v11 = *((double *)this + 13);
  double v12 = *((double *)this + 14);
  double v13 = *((double *)this + 15);
  double v14 = v8 * v13 - v12 * v9;
  return *(double *)this * (v3 * v14 - (v7 * v13 - v11 * v9) * v4 + v5 * (v7 * v12 - v11 * v8))
       - *((double *)this + 1) * (v2 * v14 - (v6 * v13 - v10 * v9) * v4 + v5 * (v6 * v12 - v10 * v8))
       + *((double *)this + 2) * (v2 * (v7 * v13 - v11 * v9) - (v6 * v13 - v10 * v9) * v3 + v5 * (v6 * v11 - v10 * v7))
       - *((double *)this + 3) * (v2 * (v7 * v12 - v11 * v8) - (v6 * v12 - v10 * v8) * v3 + v4 * (v6 * v11 - v10 * v7));
}

BOOL WebCore::TransformationMatrix::inverse(WebCore::TransformationMatrix *this, WebCore::TransformationMatrix *a2)
{
  if (WebCore::TransformationMatrix::isIdentityOrTranslation(this))
  {
    double v6 = *((double *)this + 12);
    double v5 = *((double *)this + 13);
    if (v6 == 0.0 && v5 == 0.0 && *((double *)this + 14) == 0.0)
    {
      *(void *)a2 = 0x3FF0000000000000;
      *(_OWORD *)((char *)a2 + 8) = 0u;
      *(_OWORD *)((char *)a2 + 24) = 0u;
      *((void *)a2 + 5) = 0x3FF0000000000000;
      *((_OWORD *)a2 + 3) = 0u;
      *((_OWORD *)a2 + 4) = 0u;
      *((void *)a2 + 10) = 0x3FF0000000000000;
      *(_OWORD *)((char *)a2 + 88) = 0u;
      *(_OWORD *)((char *)a2 + 104) = 0u;
      BOOL result = 1;
      *((void *)a2 + 15) = 0x3FF0000000000000;
    }
    else
    {
      double v12 = -*((double *)this + 14);
      *(void *)a2 = 0x3FF0000000000000;
      *(_OWORD *)((char *)a2 + 8) = 0u;
      *(_OWORD *)((char *)a2 + 24) = 0u;
      *((void *)a2 + 5) = 0x3FF0000000000000;
      *((_OWORD *)a2 + 3) = 0u;
      *((_OWORD *)a2 + 4) = 0u;
      *((_OWORD *)a2 + 5) = xmmword_2347F0F20;
      *((double *)a2 + 12) = -v6;
      *((double *)a2 + 13) = -v5;
      *((double *)a2 + 14) = v12;
      *((void *)a2 + 15) = 0x3FF0000000000000;
      return 1;
    }
  }
  else
  {
    v13[0][0] = 1.0;
    *(_OWORD *)&v13[0][1] = 0u;
    *(_OWORD *)&v13[0][3] = 0u;
    v13[1][1] = 1.0;
    *(_OWORD *)&v13[1][2] = 0u;
    *(_OWORD *)&v13[2][0] = 0u;
    v13[2][2] = 1.0;
    *(_OWORD *)&v13[2][3] = 0u;
    *(_OWORD *)&v13[3][1] = 0u;
    v13[3][3] = 1.0;
    BOOL result = WebCore::inverse(this, (const double (*)[4][4])v13, v4);
    if (result)
    {
      long long v8 = *(_OWORD *)&v13[2][2];
      *((_OWORD *)a2 + 4) = *(_OWORD *)&v13[2][0];
      *((_OWORD *)a2 + 5) = v8;
      long long v9 = *(_OWORD *)&v13[3][2];
      *((_OWORD *)a2 + 6) = *(_OWORD *)&v13[3][0];
      *((_OWORD *)a2 + 7) = v9;
      long long v10 = *(_OWORD *)&v13[0][2];
      *(_OWORD *)a2 = *(_OWORD *)&v13[0][0];
      *((_OWORD *)a2 + 1) = v10;
      long long v11 = *(_OWORD *)&v13[1][2];
      *((_OWORD *)a2 + 2) = *(_OWORD *)&v13[1][0];
      *((_OWORD *)a2 + 3) = v11;
    }
  }
  return result;
}

BOOL WebCore::inverse(WebCore *this, const double (*a2)[4][4], double (*a3)[4][4])
{
  double v3 = a2;
  double v4 = *(double *)this;
  double v5 = *((double *)this + 1);
  double v6 = *((double *)this + 2);
  double v7 = *((double *)this + 3);
  double v8 = *((double *)this + 4);
  double v9 = *((double *)this + 5);
  double v10 = *((double *)this + 6);
  double v11 = *((double *)this + 7);
  double v12 = *((double *)this + 8);
  double v13 = *((double *)this + 9);
  double v14 = *((double *)this + 10);
  double v15 = *((double *)this + 11);
  double v16 = *((double *)this + 14);
  double v17 = *((double *)this + 15);
  double v18 = v14 * v17 - v16 * v15;
  double v19 = *((double *)this + 12);
  double v20 = *((double *)this + 13);
  double v21 = v13 * v17 - v20 * v15;
  double v22 = v13 * v16 - v20 * v14;
  double v23 = v12 * v17 - v19 * v15;
  double v24 = v12 * v16 - v19 * v14;
  (*a2)[0][0] = v9 * v18 - v21 * v10 + v11 * v22;
  (*a2)[0][1] = -(v5 * v18 - v21 * v6 + v7 * v22);
  double v25 = v12 * v20 - v19 * v13;
  (*a2)[1][0] = -(v8 * v18 - v23 * v10 + v11 * v24);
  (*a2)[1][1] = v4 * v18 - v23 * v6 + v7 * v24;
  (*a2)[2][0] = v8 * v21 - v23 * v9 + v11 * v25;
  (*a2)[2][1] = -(v4 * v21 - v23 * v5 + v7 * v25);
  (*a2)[3][0] = -(v8 * v22 - v24 * v9 + v10 * v25);
  (*a2)[3][1] = v4 * v22 - v24 * v5 + v6 * v25;
  double v26 = v10 * v17 - v16 * v11;
  double v27 = v9 * v17 - v20 * v11;
  double v28 = v9 * v16 - v20 * v10;
  double v29 = v5 * v26 - v27 * v6 + v7 * v28;
  double v30 = v8 * v17 - v19 * v11;
  double v31 = v8 * v16 - v19 * v10;
  double v32 = -(v4 * v26 - v30 * v6 + v7 * v31);
  double v33 = v8 * v20 - v19 * v9;
  double v34 = v4 * v27 - v30 * v5 + v7 * v33;
  double v35 = -(v4 * v28 - v31 * v5 + v6 * v33);
  double v36 = v10 * v15 - v14 * v11;
  double v37 = v9 * v15 - v13 * v11;
  double v38 = v9 * v14 - v13 * v10;
  (*a2)[0][2] = v29;
  (*a2)[0][3] = -(v5 * v36 - v37 * v6 + v7 * v38);
  double v39 = v8 * v15 - v12 * v11;
  double v40 = v8 * v14 - v12 * v10;
  (*a2)[1][2] = v32;
  (*a2)[1][3] = v4 * v36 - v39 * v6 + v7 * v40;
  double v41 = v8 * v13 - v12 * v9;
  (*a2)[2][2] = v34;
  (*a2)[2][3] = -(v4 * v37 - v39 * v5 + v7 * v41);
  (*a2)[3][2] = v35;
  (*a2)[3][3] = v4 * v38 - v40 * v5 + v6 * v41;
  *(double *)&uint64_t v42 = WebCore::determinant4x4(this, a2);
  double v43 = fabs(*(double *)&v42);
  if (v43 >= 0.00000001)
  {
    uint64_t v44 = 0;
    float64x2_t v45 = (float64x2_t)vdupq_lane_s64(v42, 0);
    do
    {
      for (uint64_t i = 0; i != 4; i += 2)
        *(float64x2_t *)&(*v3)[0][i] = vdivq_f64(*(float64x2_t *)&(*v3)[0][i], v45);
      ++v44;
      double v3 = (const double (*)[4][4])((char *)v3 + 32);
    }
    while (v44 != 4);
  }
  return v43 >= 0.00000001;
}

double WebCore::TransformationMatrix::makeAffine(WebCore::TransformationMatrix *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = xmmword_2347F0F20;
  double result = 0.0;
  *((_OWORD *)this + 7) = xmmword_2347F0F10;
  return result;
}

void WebCore::TransformationMatrix::blend2(WebCore::TransformationMatrix *this, const WebCore::TransformationMatrix *a2, double a3)
{
  WebCore::TransformationMatrix::decompose2((uint64_t)a2, (uint64_t)&v18);
  WebCore::TransformationMatrix::decompose2((uint64_t)this, (uint64_t)&v9);
  double v6 = v18;
  double v5 = v19;
  if ((v18 >= 0.0 || v10 >= 0.0) && (v19 >= 0.0 || v9 >= 0.0))
  {
    double v7 = v22;
  }
  else
  {
    double v6 = -v18;
    double v5 = -v19;
    double v18 = -v18;
    double v19 = -v19;
    double v7 = v22 + dbl_2347F0F30[v22 < 0.0];
    double v22 = v7;
  }
  if (v7 == 0.0)
  {
    double v22 = 360.0;
    double v7 = 360.0;
  }
  double v8 = v13;
  if (v13 == 0.0) {
    double v8 = 360.0;
  }
  if (vabdd_f64(v7, v8) > 180.0)
  {
    if (v7 <= v8)
    {
      double v8 = v8 + -360.0;
    }
    else
    {
      double v7 = v7 + -360.0;
      double v22 = v7;
    }
  }
  if (v23 != v14) {
    double v23 = v23 + (v14 - v23) * a3;
  }
  if (v24 != v15) {
    double v24 = v24 + (v15 - v24) * a3;
  }
  if (v25 != v16) {
    double v25 = v25 + (v16 - v25) * a3;
  }
  if (v26 != v17) {
    double v26 = v26 + (v17 - v26) * a3;
  }
  if (v20 != v11) {
    double v20 = v20 + (v11 - v20) * a3;
  }
  if (v21 != v12) {
    double v21 = v21 + (v12 - v21) * a3;
  }
  if (v6 != v9) {
    double v18 = v6 + (v9 - v6) * a3;
  }
  if (v5 != v10) {
    double v19 = v5 + (v10 - v5) * a3;
  }
  if (v7 != v8) {
    double v22 = v7 + (v8 - v7) * a3;
  }
  WebCore::TransformationMatrix::recompose2((uint64_t)this, (uint64_t)&v18);
}

uint64_t WebCore::TransformationMatrix::decompose2(uint64_t a1, uint64_t a2)
{
  if (WebCore::TransformationMatrix::isIdentity((WebCore::TransformationMatrix *)a1))
  {
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)a2 = _Q1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 40) = 0x3FF0000000000000;
    *(void *)(a2 + 64) = 0x3FF0000000000000;
  }
  else
  {
    double v9 = *(double *)a1;
    double v10 = *(double *)(a1 + 8);
    double v11 = *(double *)(a1 + 32);
    double v12 = *(double *)(a1 + 40);
    *(void *)(a2 + 16) = *(void *)(a1 + 96);
    *(void *)(a2 + 24) = *(void *)(a1 + 104);
    double v13 = sqrt(v10 * v10 + v9 * v9);
    double v14 = sqrt(v12 * v12 + v11 * v11);
    *(double *)a2 = v13;
    *(double *)(a2 + 8) = v14;
    if (v9 * v12 - v10 * v11 < 0.0)
    {
      if (v9 >= v12)
      {
        double v14 = -v14;
        *(double *)(a2 + 8) = v14;
      }
      else
      {
        double v13 = -v13;
        *(double *)a2 = v13;
      }
    }
    if (v13 != 0.0)
    {
      double v15 = 1.0 / v13;
      double v9 = v9 * v15;
      double v10 = v10 * v15;
    }
    if (v14 != 0.0)
    {
      double v16 = 1.0 / v14;
      double v11 = v11 * v16;
      double v12 = v12 * v16;
    }
    double v17 = atan2(v10, v9);
    double v18 = v9 * v9 - v10 * v11;
    double v19 = v9 * v10 - v10 * v12;
    double v20 = v9 * v11 + v10 * v9;
    double v21 = v9 * v12 + v10 * v10;
    if (v17 == 0.0)
    {
      double v21 = v12;
      double v20 = v11;
      double v19 = v10;
      double v18 = v9;
    }
    *(double *)(a2 + 48) = v19;
    *(double *)(a2 + 56) = v20;
    *(double *)(a2 + 64) = v21;
    *(double *)(a2 + 32) = v17 / 6.28318531 * 360.0;
    *(double *)(a2 + 40) = v18;
  }
  return 1;
}

double WebCore::TransformationMatrix::recompose2(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  *(void *)a1 = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 64);
  WebCore::TransformationMatrix::translate3d((float64x2_t *)a1, *(double *)(a2 + 16), *(double *)(a2 + 24), 0.0);
  double v4 = WebCore::TransformationMatrix::rotate3d(v3, 0.0, 0.0, *(double *)(a2 + 32));
  double v5 = *(double *)a2;
  double v6 = *(double *)(a2 + 8);

  *(void *)&double result = *(_OWORD *)&WebCore::TransformationMatrix::scaleNonUniform((float64x2_t *)v4, v5, v6);
  return result;
}

void WebCore::TransformationMatrix::blend4(WebCore::TransformationMatrix *this, const WebCore::TransformationMatrix *a2, long double a3)
{
  if (WebCore::TransformationMatrix::decompose4(a2, (uint64_t)&v45)
    && WebCore::TransformationMatrix::decompose4(this, (uint64_t)&v28))
  {
    if (v45 != v28) {
      double v45 = v45 + (v28 - v45) * a3;
    }
    if (v46 != v29) {
      double v46 = v46 + (v29 - v46) * a3;
    }
    if (v47 != v30) {
      double v47 = v47 + (v30 - v47) * a3;
    }
    if (v48 != v31) {
      double v48 = v48 + (v31 - v48) * a3;
    }
    if (v49 != v32) {
      double v49 = v49 + (v32 - v49) * a3;
    }
    if (v50 != v33) {
      double v50 = v50 + (v33 - v50) * a3;
    }
    if (v55 != v38) {
      double v55 = v55 + (v38 - v55) * a3;
    }
    if (v56 != v39) {
      double v56 = v56 + (v39 - v56) * a3;
    }
    if (v57 != v40) {
      double v57 = v57 + (v40 - v57) * a3;
    }
    if (v58 != v41) {
      double v58 = v58 + (v41 - v58) * a3;
    }
    if (v59 != v42) {
      double v59 = v59 + (v42 - v59) * a3;
    }
    if (v60 != v43) {
      double v60 = v60 + (v43 - v60) * a3;
    }
    if (v61 != v44) {
      double v61 = v61 + (v44 - v61) * a3;
    }
    double v7 = v51;
    double v6 = v52;
    double v9 = v53;
    double v8 = v54;
    double v10 = v34;
    double v11 = v35;
    double v12 = v36;
    double v13 = v37;
    double v14 = v52 * v35 + v51 * v34 + v53 * v36 + v54 * v37;
    if (v14 < 0.0)
    {
      double v7 = -v51;
      double v6 = -v52;
      double v9 = -v53;
      double v8 = -v54;
      double v14 = -v14;
    }
    if (v14 + 1.0 <= 0.05)
    {
      double v15 = sin((0.5 - a3) * 3.14159265);
      long double v22 = sin(a3 * 3.14159265);
      double v10 = -v6;
      double v12 = -v8;
      a3 = v22;
      double v11 = v7;
      double v13 = v9;
    }
    else if (1.0 - v14 >= 0.05)
    {
      double v25 = v36;
      double v27 = v34;
      long double v24 = acos(v14);
      long double v26 = 1.0 / sin(v24);
      double v15 = sin((1.0 - a3) * v24) * v26;
      long double v23 = sin(v24 * a3);
      double v10 = v27;
      double v12 = v25;
      a3 = v23 * v26;
    }
    else
    {
      double v15 = 1.0 - a3;
    }
    double v51 = v10 * a3 + v7 * v15;
    double v52 = v11 * a3 + v6 * v15;
    double v53 = v12 * a3 + v9 * v15;
    double v54 = v13 * a3 + v8 * v15;
    WebCore::TransformationMatrix::recompose4((uint64_t)this, (uint64_t)&v45);
  }
  else if (a2 != this && a3 < 0.5)
  {
    long long v16 = *(_OWORD *)a2;
    long long v17 = *((_OWORD *)a2 + 1);
    long long v18 = *((_OWORD *)a2 + 3);
    *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)this + 3) = v18;
    *(_OWORD *)this = v16;
    *((_OWORD *)this + 1) = v17;
    long long v19 = *((_OWORD *)a2 + 4);
    long long v20 = *((_OWORD *)a2 + 5);
    long long v21 = *((_OWORD *)a2 + 7);
    *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)this + 7) = v21;
    *((_OWORD *)this + 4) = v19;
    *((_OWORD *)this + 5) = v20;
  }
}

BOOL WebCore::TransformationMatrix::decompose4(WebCore::TransformationMatrix *a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  if (WebCore::TransformationMatrix::isIdentity(a1))
  {
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0x3FF0000000000000;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)a2 = _Q0;
    BOOL v10 = 1;
    *(void *)(a2 + 16) = 0x3FF0000000000000;
    return v10;
  }
  long long v11 = *((_OWORD *)a1 + 5);
  long long v89 = *((_OWORD *)a1 + 4);
  long long v90 = v11;
  long long v12 = *((_OWORD *)a1 + 7);
  long long v91 = *((_OWORD *)a1 + 6);
  long long v92 = v12;
  long long v13 = *((_OWORD *)a1 + 1);
  long long v85 = *(_OWORD *)a1;
  long long v86 = v13;
  long long v14 = *((_OWORD *)a1 + 3);
  long long v87 = *((_OWORD *)a1 + 2);
  long long v88 = v14;
  if (*((double *)&v12 + 1) == 0.0) {
    return 0;
  }
  uint64_t v15 = 0;
  long long v16 = &v85;
  do
  {
    for (uint64_t i = 0; i != 32; i += 8)
      *(double *)((char *)v16 + i) = *(double *)((char *)v16 + i) / *((double *)&v92 + 1);
    ++v15;
    v16 += 2;
  }
  while (v15 != 4);
  v83[4] = v89;
  v83[5] = v90;
  v83[6] = v91;
  long long v84 = v92;
  v83[0] = v85;
  v83[1] = v86;
  uint64_t v18 = 24;
  v83[2] = v87;
  v83[3] = v88;
  do
  {
    *(void *)((char *)v83 + v18) = 0;
    v18 += 32;
  }
  while (v18 != 120);
  *((void *)&v84 + 1) = 0x3FF0000000000000;
  double v20 = WebCore::determinant4x4((WebCore *)v83, v4);
  BOOL v10 = v20 != 0.0;
  if (v20 != 0.0)
  {
    if (*((double *)&v86 + 1) == 0.0 && *((double *)&v88 + 1) == 0.0 && *((double *)&v90 + 1) == 0.0)
    {
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 120) = 0;
      *(void *)(a2 + 128) = 0x3FF0000000000000;
    }
    else
    {
      double v72 = *((double *)&v86 + 1);
      double v73 = *((double *)&v90 + 1);
      double v70 = *((double *)&v92 + 1);
      memset(v82, 0, sizeof(v82));
      long long v21 = v82[1];
      float64x2_t v80 = 0u;
      float64x2_t v81 = 0u;
      float64x2_t v78 = 0u;
      float64x2_t v79 = 0u;
      float64x2_t v76 = 0u;
      float64x2_t v77 = 0u;
      float64x2_t v74 = 0u;
      float64x2_t v75 = 0u;
      double v71 = *((double *)&v88 + 1);
      WebCore::inverse((WebCore *)v83, (const double (*)[4][4])v82, v19);
      uint64_t v22 = 0;
      long double v23 = &v74;
      do
      {
        uint64_t v24 = 0;
        double v25 = v21;
        do
        {
          v26.f64[0] = *(v25 - 4);
          v26.f64[1] = *v25;
          v23[v24] = v26;
          v25 += 8;
          ++v24;
        }
        while (v24 != 2);
        ++v22;
        ++v21;
        v23 += 2;
      }
      while (v22 != 4);
      float64x2_t v27 = v79;
      float64x2_t v28 = vmlaq_n_f64(vmulq_n_f64(v77, v71), v75, v72);
      float64x2_t v29 = v81;
      *(float64x2_t *)(a2 + 104) = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v76, v71), v74, v72), v78, v73), v80, v70);
      *(float64x2_t *)(a2 + 120) = vmlaq_n_f64(vmlaq_n_f64(v28, v27, v73), v29, v70);
    }
    uint64_t v30 = 0;
    *(_OWORD *)(a2 + 80) = v91;
    long long v91 = 0uLL;
    *(void *)(a2 + 96) = v92;
    *(void *)&long long v92 = 0;
    double v31 = &v86;
    do
    {
      double v32 = (char *)v82 + v30;
      *(_OWORD *)double v32 = *(v31 - 1);
      uint64_t v33 = *(void *)v31;
      v31 += 2;
      *((void *)v32 + 2) = v33;
      v30 += 24;
    }
    while (v30 != 72);
    double v35 = v82[0][1];
    double v34 = v82[0][0];
    double v36 = v82[0][2];
    double v37 = sqrt(v82[0][1] * v82[0][1] + v82[0][0] * v82[0][0] + v36 * v36);
    *(double *)a2 = v37;
    if (v37 != 0.0)
    {
      double v34 = v34 * (1.0 / v37);
      double v35 = v35 * (1.0 / v37);
      v82[0][0] = v34;
      v82[0][1] = v35;
      double v36 = v36 * (1.0 / v37);
      v82[0][2] = v36;
    }
    double v38 = v35 * v82[1][0] + v34 * v82[0][3] + v36 * v82[1][1];
    double v39 = v82[0][3] - v34 * v38;
    double v40 = v82[1][0] - v35 * v38;
    v82[0][3] = v39;
    v82[1][0] = v40;
    double v41 = v82[1][1] - v36 * v38;
    v82[1][1] = v41;
    double v42 = sqrt(v40 * v40 + v39 * v39 + v41 * v41);
    *(double *)(a2 + 8) = v42;
    if (v42 != 0.0)
    {
      double v39 = v39 * (1.0 / v42);
      double v40 = v40 * (1.0 / v42);
      v82[0][3] = v39;
      v82[1][0] = v40;
      double v41 = v41 * (1.0 / v42);
      v82[1][1] = v41;
    }
    double v43 = v38 / v42;
    double v44 = v35 * v82[1][3] + v34 * v82[1][2] + v36 * v82[2][0];
    double v45 = v82[1][2] - v34 * v44;
    double v46 = v82[1][3] - v35 * v44;
    double v47 = v82[2][0] - v36 * v44;
    double v48 = v40 * v46 + v39 * v45 + v41 * v47;
    double v49 = v45 - v39 * v48;
    double v50 = v46 - v40 * v48;
    v82[1][2] = v49;
    v82[1][3] = v50;
    double v51 = v47 - v41 * v48;
    v82[2][0] = v51;
    double v52 = sqrt(v50 * v50 + v49 * v49 + v51 * v51);
    *(double *)(a2 + 16) = v52;
    *(double *)(a2 + 24) = v43;
    if (v52 != 0.0)
    {
      double v49 = v49 * (1.0 / v52);
      double v50 = v50 * (1.0 / v52);
      v82[1][2] = v49;
      v82[1][3] = v50;
      double v51 = v51 * (1.0 / v52);
      v82[2][0] = v51;
    }
    *(double *)(a2 + 32) = v44 / v52;
    *(double *)(a2 + 40) = v48 / v52;
    if (v35 * (v41 * v49 - v39 * v51) + v34 * (v40 * v51 - v41 * v50) + v36 * (v39 * v50 - v40 * v49) < 0.0)
    {
      uint64_t v53 = 0;
      *(double *)a2 = -v37;
      *(double *)(a2 + 8) = -v42;
      *(double *)(a2 + 16) = -v52;
      do
      {
        double v54 = (float64x2_t *)((char *)v82 + v53 * 8);
        *double v54 = vnegq_f64(*(float64x2_t *)&v82[0][v53]);
        v54[1].f64[0] = -v82[0][v53 + 2];
        v53 += 3;
      }
      while (v53 != 9);
      double v34 = v82[0][0];
      double v40 = v82[1][0];
      double v51 = v82[2][0];
    }
    double v55 = v51 + v40 + v34 + 1.0;
    if (v55 > 0.0001)
    {
      double v56 = 0.5 / sqrt(v55);
      double v57 = 0.25 / v56;
      double v58 = v56 * (v82[1][3] - v82[1][1]);
      double v59 = v56 * (v82[0][2] - v82[1][2]);
      double v60 = v56 * (v82[0][3] - v82[0][1]);
LABEL_45:
      *(double *)(a2 + 48) = v58;
      *(double *)(a2 + 56) = v59;
      *(double *)(a2 + 64) = v60;
      *(double *)(a2 + 72) = v57;
      return v10;
    }
    if (v34 <= v40 || v34 <= v51)
    {
      if (v40 > v51)
      {
        double v62 = sqrt(v40 + 1.0 - v34 - v51);
        double v65 = v62 + v62;
        double v58 = (v82[0][1] + v82[0][3]) / (v62 + v62);
        double v59 = v65 * 0.25;
        double v60 = (v82[1][1] + v82[1][3]) / v65;
        double v63 = v82[0][2] - v82[1][2];
LABEL_44:
        double v57 = v63 / v65;
        goto LABEL_45;
      }
      double v68 = sqrt(v51 + 1.0 - v34 - v40);
      double v65 = v68 + v68;
      double v66 = v82[0][1];
      double v58 = (v82[0][2] + v82[1][2]) / (v68 + v68);
      double v67 = v82[0][3];
      double v59 = (v82[1][1] + v82[1][3]) / v65;
      double v60 = v65 * 0.25;
    }
    else
    {
      double v64 = sqrt(v34 + 1.0 - v40 - v51);
      double v65 = v64 + v64;
      double v66 = v82[1][1];
      double v67 = v82[1][3];
      double v58 = (v64 + v64) * 0.25;
      double v59 = (v82[0][1] + v82[0][3]) / v65;
      double v60 = (v82[0][2] + v82[1][2]) / v65;
    }
    double v63 = v67 - v66;
    goto LABEL_44;
  }
  return v10;
}

float64x2_t WebCore::TransformationMatrix::recompose4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  *(void *)(a1 + 24) = *(void *)(a2 + 104);
  *(void *)(a1 + 56) = *(void *)(a2 + 112);
  *(void *)(a1 + 88) = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 128);
  WebCore::TransformationMatrix::translate3d((float64x2_t *)a1, *(double *)(a2 + 80), *(double *)(a2 + 88), *(double *)(a2 + 96));
  double v4 = *(double *)(a2 + 48);
  double v5 = *(double *)(a2 + 56);
  double v6 = v4 * v4;
  double v7 = v4 * v5;
  double v8 = *(double *)(a2 + 64);
  double v9 = *(double *)(a2 + 72);
  double v10 = v4 * v8;
  double v11 = v4 * v9;
  double v12 = v5 * v5;
  double v13 = v5 * v8;
  double v14 = v5 * v9;
  double v15 = v8 * v8;
  double v16 = v8 * v9;
  v70[0] = (v12 + v15) * -2.0 + 1.0;
  v70[1] = v7 - v16 + v7 - v16;
  v70[2] = v10 + v14 + v10 + v14;
  v70[3] = 0.0;
  v70[4] = v7 + v16 + v7 + v16;
  v70[5] = (v6 + v15) * -2.0 + 1.0;
  v70[6] = v13 - v11 + v13 - v11;
  v70[7] = 0.0;
  v70[8] = v10 - v14 + v10 - v14;
  v70[9] = v13 + v11 + v13 + v11;
  v70[10] = (v6 + v12) * -2.0 + 1.0;
  long long v71 = 0u;
  long long v72 = 0u;
  uint64_t v73 = 0x3FF0000000000000;
  long long v17 = v70;
  float64x2_t v18 = *v3;
  float64x2_t v19 = v3[1];
  float64x2_t v20 = v3[2];
  float64x2_t v21 = v3[3];
  float64x2_t v22 = v3[4];
  float64x2_t v23 = v3[5];
  float64x2_t v24 = v3[6];
  float64x2_t v25 = v3[7];
  float64x2x4_t v82 = vld4q_dup_f64(v17);
  v17 += 4;
  float64x2x4_t v74 = vld4q_dup_f64(v17);
  v17 += 4;
  *double v3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v82.val[0], *v3), v82.val[1], v20), v82.val[2], v22), v82.val[3], v24);
  v3[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v82.val[0], v19), v82.val[1], v21), v82.val[2], v23), v82.val[3], v25);
  float64x2x4_t v83 = vld4q_dup_f64(v17);
  v17 += 4;
  v3[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[0], v18), v74.val[1], v20), v74.val[2], v22), v74.val[3], v24);
  v3[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v74.val[0], v19), v74.val[1], v21), v74.val[2], v23), v74.val[3], v25);
  float64x2x4_t v75 = vld4q_dup_f64(v17);
  v3[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v83.val[0], v18), v83.val[1], v20), v83.val[2], v22), v83.val[3], v24);
  v3[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v83.val[0], v19), v83.val[1], v21), v83.val[2], v23), v83.val[3], v25);
  v3[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v75.val[0], v18), v75.val[1], v20), v75.val[2], v22), v75.val[3], v24);
  v3[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v75.val[0], v19), v75.val[1], v21), v75.val[2], v23), v75.val[3], v25);
  double v26 = *(double *)(a2 + 40);
  if (v26 != 0.0)
  {
    uint64_t v60 = 0x3FF0000000000000;
    long long v61 = 0uLL;
    long long v62 = 0uLL;
    uint64_t v63 = 0x3FF0000000000000;
    long long v64 = 0uLL;
    *(void *)&long long v65 = 0;
    uint64_t v66 = 0x3FF0000000000000;
    long long v67 = 0uLL;
    long long v68 = 0uLL;
    uint64_t v69 = 0x3FF0000000000000;
    float64x2_t v27 = (const double *)&v60;
    *((double *)&v65 + 1) = v26;
    float64x2_t v28 = *v3;
    float64x2_t v29 = v3[1];
    float64x2_t v30 = v3[2];
    float64x2_t v31 = v3[3];
    float64x2_t v32 = v3[4];
    float64x2_t v33 = v3[5];
    float64x2_t v34 = v3[6];
    float64x2_t v35 = v3[7];
    float64x2x4_t v84 = vld4q_dup_f64(v27);
    v27 += 4;
    float64x2x4_t v76 = vld4q_dup_f64(v27);
    v27 += 4;
    *double v3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v84.val[0], *v3), v84.val[1], v30), v84.val[2], v32), v84.val[3], v34);
    v3[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v84.val[0], v29), v84.val[1], v31), v84.val[2], v33), v84.val[3], v35);
    float64x2x4_t v85 = vld4q_dup_f64(v27);
    v27 += 4;
    v3[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v76.val[0], v28), v76.val[1], v30), v76.val[2], v32), v76.val[3], v34);
    v3[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v76.val[0], v29), v76.val[1], v31), v76.val[2], v33), v76.val[3], v35);
    float64x2x4_t v77 = vld4q_dup_f64(v27);
    v3[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v85.val[0], v28), v85.val[1], v30), v85.val[2], v32), v85.val[3], v34);
    v3[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v85.val[0], v29), v85.val[1], v31), v85.val[2], v33), v85.val[3], v35);
    v3[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v77.val[0], v28), v77.val[1], v30), v77.val[2], v32), v77.val[3], v34);
    v3[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v77.val[0], v29), v77.val[1], v31), v77.val[2], v33), v77.val[3], v35);
  }
  double v36 = *(double *)(a2 + 32);
  if (v36 != 0.0)
  {
    uint64_t v60 = 0x3FF0000000000000;
    long long v61 = 0u;
    long long v62 = 0u;
    uint64_t v63 = 0x3FF0000000000000;
    long long v64 = 0u;
    uint64_t v66 = 0x3FF0000000000000;
    long long v67 = 0u;
    long long v68 = 0u;
    uint64_t v69 = 0x3FF0000000000000;
    double v37 = (const double *)&v60;
    long long v65 = *(unint64_t *)&v36;
    float64x2_t v38 = *v3;
    float64x2_t v39 = v3[1];
    float64x2_t v40 = v3[2];
    float64x2_t v41 = v3[3];
    float64x2_t v42 = v3[4];
    float64x2_t v43 = v3[5];
    float64x2_t v44 = v3[6];
    float64x2_t v45 = v3[7];
    float64x2x4_t v86 = vld4q_dup_f64(v37);
    v37 += 4;
    float64x2x4_t v78 = vld4q_dup_f64(v37);
    v37 += 4;
    *double v3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v86.val[0], *v3), v86.val[1], v40), v86.val[2], v42), v86.val[3], v44);
    v3[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v86.val[0], v39), v86.val[1], v41), v86.val[2], v43), v86.val[3], v45);
    float64x2x4_t v87 = vld4q_dup_f64(v37);
    v37 += 4;
    v3[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v78.val[0], v38), v78.val[1], v40), v78.val[2], v42), v78.val[3], v44);
    v3[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v78.val[0], v39), v78.val[1], v41), v78.val[2], v43), v78.val[3], v45);
    float64x2x4_t v79 = vld4q_dup_f64(v37);
    v3[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v87.val[0], v38), v87.val[1], v40), v87.val[2], v42), v87.val[3], v44);
    v3[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v87.val[0], v39), v87.val[1], v41), v87.val[2], v43), v87.val[3], v45);
    v3[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v79.val[0], v38), v79.val[1], v40), v79.val[2], v42), v79.val[3], v44);
    v3[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v79.val[0], v39), v79.val[1], v41), v79.val[2], v43), v79.val[3], v45);
  }
  double v46 = *(double *)(a2 + 24);
  if (v46 != 0.0)
  {
    uint64_t v60 = 0x3FF0000000000000;
    long long v61 = 0uLL;
    *(void *)&long long v62 = 0;
    uint64_t v63 = 0x3FF0000000000000;
    long long v64 = 0u;
    long long v65 = 0u;
    uint64_t v66 = 0x3FF0000000000000;
    long long v67 = 0u;
    long long v68 = 0u;
    uint64_t v69 = 0x3FF0000000000000;
    double v47 = (const double *)&v60;
    *((double *)&v62 + 1) = v46;
    float64x2_t v48 = *v3;
    float64x2_t v49 = v3[1];
    float64x2_t v50 = v3[2];
    float64x2_t v51 = v3[3];
    float64x2_t v52 = v3[4];
    float64x2_t v53 = v3[5];
    float64x2_t v54 = v3[6];
    float64x2_t v55 = v3[7];
    float64x2x4_t v88 = vld4q_dup_f64(v47);
    v47 += 4;
    float64x2x4_t v80 = vld4q_dup_f64(v47);
    v47 += 4;
    *double v3 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v88.val[0], *v3), v88.val[1], v50), v88.val[2], v52), v88.val[3], v54);
    v3[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v88.val[0], v49), v88.val[1], v51), v88.val[2], v53), v88.val[3], v55);
    float64x2x4_t v89 = vld4q_dup_f64(v47);
    v47 += 4;
    v3[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v80.val[0], v48), v80.val[1], v50), v80.val[2], v52), v80.val[3], v54);
    v3[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v80.val[0], v49), v80.val[1], v51), v80.val[2], v53), v80.val[3], v55);
    float64x2x4_t v81 = vld4q_dup_f64(v47);
    v3[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v89.val[0], v48), v89.val[1], v50), v89.val[2], v52), v89.val[3], v54);
    v3[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v89.val[0], v49), v89.val[1], v51), v89.val[2], v53), v89.val[3], v55);
    v3[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v81.val[0], v48), v81.val[1], v50), v81.val[2], v52), v81.val[3], v54);
    v3[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v81.val[0], v49), v81.val[1], v51), v81.val[2], v53), v81.val[3], v55);
  }
  long long v59 = *(_OWORD *)(a2 + 16);
  WebCore::TransformationMatrix::scaleNonUniform(v3, *(double *)a2, *(double *)(a2 + 8));
  float64x2_t result = vmulq_n_f64(v56[4], *(double *)&v59);
  float64x2_t v58 = vmulq_n_f64(v56[5], *(double *)&v59);
  v56[4] = result;
  v56[5] = v58;
  return result;
}

void WebCore::TransformationMatrix::blend(WebCore::TransformationMatrix *this, const WebCore::TransformationMatrix *a2, long double a3)
{
  if (!WebCore::TransformationMatrix::isIdentity(a2) || !WebCore::TransformationMatrix::isIdentity(this))
  {
    if (WebCore::TransformationMatrix::isAffine(a2) && WebCore::TransformationMatrix::isAffine(this))
    {
      WebCore::TransformationMatrix::blend2(this, a2, a3);
    }
    else
    {
      WebCore::TransformationMatrix::blend4(this, a2, a3);
    }
  }
}

BOOL WebCore::TransformationMatrix::isIdentity(WebCore::TransformationMatrix *this)
{
  return *(double *)this == 1.0
      && *((double *)this + 1) == 0.0
      && *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 4) == 0.0
      && *((double *)this + 5) == 1.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 12) == 0.0
      && *((double *)this + 13) == 0.0
      && *((double *)this + 14) == 0.0
      && *((double *)this + 15) == 1.0;
}

BOOL WebCore::TransformationMatrix::isAffine(WebCore::TransformationMatrix *this)
{
  return *((double *)this + 2) == 0.0
      && *((double *)this + 3) == 0.0
      && *((double *)this + 6) == 0.0
      && *((double *)this + 7) == 0.0
      && *((double *)this + 8) == 0.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 11) == 0.0
      && *((double *)this + 14) == 0.0
      && *((double *)this + 15) == 1.0;
}

BOOL WebCore::TransformationMatrix::isIntegerTranslation(WebCore::TransformationMatrix *this)
{
  BOOL result = WebCore::TransformationMatrix::isIdentityOrTranslation(this);
  if (result) {
    return *((double *)this + 14) == 0.0
  }
        && *((double *)this + 12) == (double)(int)*((double *)this + 12)
        && *((double *)this + 13) == (double)(int)*((double *)this + 13);
  return result;
}

double WebCore::TransformationMatrix::to2dTransform@<D0>(WebCore::TransformationMatrix *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = *((void *)this + 15);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(void *)(a2 + 40) = v2;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = v3;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  double result = 1.0;
  long long v6 = *((_OWORD *)this + 6);
  *(_OWORD *)(a2 + 80) = xmmword_2347F0F20;
  *(_OWORD *)(a2 + 96) = v6;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = v4;
  return result;
}

float64x2_t WebCore::TransformationMatrix::toColumnMajorFloatArray(float64x2_t *this, float (*a2)[16])
{
  float32x4_t v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[2]), this[3]);
  *(float32x4_t *)&(*a2)[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*this), this[1]);
  *(float32x4_t *)&(*a2)[4] = v2;
  float64x2_t result = this[7];
  float32x4_t v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[6]), result);
  *(float32x4_t *)&(*a2)[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(this[4]), this[5]);
  *(float32x4_t *)&(*a2)[12] = v4;
  return result;
}

BOOL WebCore::TransformationMatrix::isBackFaceVisible(WebCore::TransformationMatrix *this, const double (*a2)[4][4])
{
  double v3 = WebCore::determinant4x4(this, a2);
  return fabs(v3) >= 0.00000001
      && (*(double *)this
        * (*((double *)this + 5) * *((double *)this + 15) - *((double *)this + 7) * *((double *)this + 13))
        - (*((double *)this + 1) * *((double *)this + 15) - *((double *)this + 3) * *((double *)this + 13))
        * *((double *)this + 4)
        + *((double *)this + 12)
        * (*((double *)this + 1) * *((double *)this + 7) - *((double *)this + 3) * *((double *)this + 5)))
       / v3 < 0.0;
}

void sub_234691244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void boost::polygon::construct_voronoi<std::__wrap_iter<PointInt64 *>,boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t a1, uint64_t *a2, void **a3)
{
  __p = 0;
  double v9 = 0;
  __int16 v11 = 0;
  uint64_t v10 = 0;
  *(_OWORD *)double v5 = 0u;
  long long v6 = 0u;
  memset(v7, 0, 25);
  v12[0] = v12;
  v12[1] = v12;
  double v14 = 0;
  v15[0] = 0;
  *(_DWORD *)((char *)v15 + 7) = 0;
  v12[2] = 0;
  double v13 = &v14;
  v15[329] = 0;
  boost::polygon::insert<std::__wrap_iter<PointInt64 *>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>>(a1, a2, &v4);
  boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::construct<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(&v4, a3);
  std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy((uint64_t)&v13, v14);
  std::__list_imp<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>>::clear(v12);
  if (__p)
  {
    double v9 = __p;
    operator delete(__p);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_2346913A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::~voronoi_diagram(uint64_t a1)
{
  float32x4_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::vector<PointInt64>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264BF7FC0, MEMORY[0x263F8C060]);
}

void sub_234691468(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float64x2_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PointInt64>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t boost::polygon::insert<std::__wrap_iter<PointInt64 *>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>>(uint64_t result, uint64_t *a2, void *a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v12 = v3;
    uint64_t v13 = v4;
    double v7 = (uint64_t *)result;
    do
    {
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      v7 += 2;
      int v10 = v9;
      int v11 = v8;
      float64x2_t result = boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_point(a3, &v11, &v10);
    }
    while (v7 != a2);
  }
  return result;
}

void boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::construct<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t *a1, void **a2)
{
  boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_reserve(a2, 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - a1[1]) >> 3));
  boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_sites_queue((uint64_t)a1);
  boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_beach_line<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, a2);
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
LABEL_2:
  while (1)
  {
    long long v6 = (int *)a1[2];
    double v7 = (int *)a1[4];
    if (v4 == v5) {
      break;
    }
    if (v7 == v6) {
      goto LABEL_12;
    }
    int v8 = *v7;
    uint64_t v9 = *(void *)(*(void *)v4 + 32);
    if (*v7 >= 0) {
      *(void *)&double v10 = 0x8000000000000000 - COERCE__INT64((double)v8);
    }
    else {
      double v10 = (double)v8;
    }
    if (v9 >= 0) {
      uint64_t v9 = 0x8000000000000000 - v9;
    }
    BOOL v11 = *(void *)&v10 >= (unint64_t)v9;
    unint64_t v12 = *(void *)&v10 - v9;
    if (v12 == 0 || !v11 || v12 < 0x41)
    {
LABEL_12:
      boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::process_circle_event<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>((uint64_t)a1, a2);
      goto LABEL_15;
    }
LABEL_14:
    boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::process_site_event<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>((uint64_t)a1, (char **)a2);
LABEL_15:
    uint64_t v4 = a1[9];
    uint64_t v5 = v4;
    if (v4 != a1[10])
    {
      uint64_t v5 = a1[10];
      if (!*(unsigned char *)(*(void *)v4 + 40))
      {
        while (1)
        {
          boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::pop((uint64_t)(a1 + 9));
          uint64_t v4 = a1[9];
          uint64_t v5 = a1[10];
          if (v4 == v5) {
            break;
          }
          if (*(unsigned char *)(*(void *)v4 + 40)) {
            goto LABEL_2;
          }
        }
        uint64_t v5 = a1[9];
      }
    }
  }
  if (v7 != v6) {
    goto LABEL_14;
  }
  double v14 = (void *)a1[17];
  uint64_t v13 = a1 + 17;
  std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy((uint64_t)(v13 - 1), v14);
  *(v13 - 1) = v13;
  *uint64_t v13 = 0;
  v13[1] = 0;

  boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_build((uint64_t *)a2);
}

uint64_t boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::~voronoi_builder(uint64_t a1)
{
  std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy(a1 + 128, *(void **)(a1 + 136));
  std::__list_imp<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>>::clear((void *)(a1 + 104));
  float32x4_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(void *)(a1 + 48) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::__list_imp<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>>::clear(void *result)
{
  if (result[2])
  {
    v1 = result;
    float64x2_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        float64x2_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_point(void *a1, int *a2, int *a3)
{
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v5 = a1[3];
  int v6 = *a2;
  int v7 = *a3;
  int v8 = (char *)a1[2];
  if ((unint64_t)v8 >= v5)
  {
    double v10 = (void **)(a1 + 1);
    BOOL v11 = (char *)a1[1];
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x333333333333333) {
      unint64_t v15 = 0x666666666666666;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      double v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(v4, v15);
      BOOL v11 = (char *)a1[1];
      int v8 = (char *)a1[2];
    }
    else
    {
      double v16 = 0;
    }
    long long v17 = &v16[40 * v12];
    *(_DWORD *)long long v17 = v6;
    *((_DWORD *)v17 + 1) = v7;
    *((_DWORD *)v17 + 2) = v6;
    *((_DWORD *)v17 + 3) = v7;
    float64x2_t v18 = &v16[40 * v15];
    *((void *)v17 + 2) = 0;
    *((void *)v17 + 4) = 0;
    uint64_t v9 = v17 + 40;
    if (v8 != v11)
    {
      do
      {
        long long v19 = *(_OWORD *)(v8 - 40);
        long long v20 = *(_OWORD *)(v8 - 24);
        *((void *)v17 - 1) = *((void *)v8 - 1);
        *(_OWORD *)(v17 - 24) = v20;
        *(_OWORD *)(v17 - 40) = v19;
        v17 -= 40;
        v8 -= 40;
      }
      while (v8 != v11);
      BOOL v11 = (char *)*v10;
    }
    a1[1] = v17;
    a1[2] = v9;
    a1[3] = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(_DWORD *)int v8 = v6;
    *((_DWORD *)v8 + 1) = v7;
    *((_DWORD *)v8 + 2) = v6;
    *((_DWORD *)v8 + 3) = v7;
    *((void *)v8 + 2) = 0;
    uint64_t v9 = v8 + 40;
    *((void *)v8 + 4) = 0;
  }
  a1[2] = v9;
  uint64_t result = a1[347];
  *((void *)v9 - 2) = result;
  a1[347] = result + 1;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::detail::site_event<int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

void boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_reserve(void **a1, unint64_t a2)
{
  std::vector<boost::polygon::voronoi_cell<double>>::reserve(a1, a2);
  std::vector<boost::polygon::voronoi_vertex<double>>::reserve(a1 + 3, 2 * a2);

  std::vector<boost::polygon::voronoi_edge<double>>::reserve(a1 + 6, 6 * a2);
}

unsigned int *boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_sites_queue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(long long **)(a1 + 16);
  unint64_t v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - v2) >> 3));
  __int16 v11 = 0;
  if (v3 == (long long *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,false>(v2, v3, (uint64_t)&v11, v5, 1);
  uint64_t result = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__equal_to &>(*(unsigned int **)(a1 + 8), *(unsigned int **)(a1 + 16));
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(unsigned int **)(a1 + 16) != result) {
    *(void *)(a1 + 16) = result;
  }
  if (result != (unsigned int *)v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = ((uint64_t)result - v7) / 40;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    double v10 = (void *)(v7 + 16);
    do
    {
      *double v10 = v8;
      v10 += 5;
      ++v8;
    }
    while (v9 != v8);
  }
  *(void *)(a1 + 32) = v7;
  return result;
}

void boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_beach_line<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t *a1, void **a2)
{
  uint64_t v3 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v3 != v4)
  {
    if (v4 - v3 == 40)
    {
      boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_process_single_site<int>(a2, (uint64_t)v3);
LABEL_11:
      a1[4] += 40;
      return;
    }
    int v6 = (char *)a1[4];
    if (v6 != v4)
    {
      int v7 = 0;
      int v8 = *(_DWORD *)v3;
      do
      {
        if (*(_DWORD *)v6 != v8) {
          break;
        }
        if (v8 != *((_DWORD *)v6 + 2)) {
          break;
        }
        v6 += 40;
        a1[4] = (uint64_t)v6;
        ++v7;
      }
      while (v6 != v4);
      if (v7 == 1)
      {
        boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>((uint64_t)a1, (uint64_t)v3, (uint64_t)v3, (uint64_t)(v3 + 40), a1 + 17, (char **)a2);
        goto LABEL_11;
      }
    }
    boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_beach_line_collinear_sites<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, (char **)a2);
  }
}

void boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::process_site_event<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t a1, char **a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 32);
  long long v6 = *(_OWORD *)(v4 + 16);
  int8x16_t v47 = *(int8x16_t *)v4;
  long long v48 = v6;
  uint64_t v49 = v5;
  int v7 = (int *)(v4 + 40);
  __int32 v8 = v47.i32[0];
  if (v47.i32[0] == v47.i32[2] && (__int32 v9 = v47.i32[1], v47.i32[1] == v47.i32[3]))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    if (v10 != v11)
    {
      do
      {
        if (*(_DWORD *)v10 != v8 || *(_DWORD *)(v10 + 4) != v9) {
          break;
        }
        unint64_t v12 = *(uint64_t **)(v10 + 8);
        LOBYTE(v42[0]) = *(unsigned char *)(a1 + 64);
        if (v11 - v10 >= 17)
        {
          uint64_t v13 = *(void *)v10;
          unint64_t v14 = (void *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>((void *)v10, (uint64_t)v42, (unint64_t)(v11 - v10) >> 4);
          if ((void *)(v11 - 16) == v14)
          {
            *unint64_t v14 = v13;
            v14[1] = v12;
          }
          else
          {
            *unint64_t v14 = *(void *)(v11 - 16);
            v14[1] = *(void *)(v11 - 8);
            *(void *)(v11 - 16) = v13;
            *(void *)(v11 - 8) = v12;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>(v10, (uint64_t)(v14 + 2), (uint64_t)v42, ((uint64_t)v14 - v10 + 16) >> 4);
          }
        }
        *(void *)(a1 + 48) -= 16;
        std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__remove_node_pointer((uint64_t **)(a1 + 128), v12);
        operator delete(v12);
        uint64_t v10 = *(void *)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 48);
      }
      while (v10 != v11);
      uint64_t v4 = *(void *)(a1 + 32);
    }
  }
  else
  {
    unint64_t v15 = *(int **)(a1 + 16);
    if (v7 != v15)
    {
      do
      {
        int v16 = *v7;
        if (*v7 == v7[2])
        {
          int v17 = v7[1];
          BOOL v18 = v16 != v47.i32[0] || v17 == v7[3];
          if (v18) {
            goto LABEL_25;
          }
        }
        else
        {
          if (v16 != v47.i32[0]) {
            goto LABEL_25;
          }
          int v17 = v7[1];
        }
        if (v17 != v47.i32[1]) {
          goto LABEL_25;
        }
        v7 += 10;
      }
      while (v7 != v15);
      int v7 = *(int **)(a1 + 16);
    }
  }
LABEL_25:
  int8x16_t v19 = *(int8x16_t *)v4;
  long long v20 = *(_OWORD *)(v4 + 16);
  uint64_t v43 = *(void *)(v4 + 32);
  v42[0] = v19;
  v42[1] = v20;
  int8x16_t v21 = *(int8x16_t *)v4;
  long long v22 = *(_OWORD *)(v4 + 16);
  uint64_t v46 = *(void *)(v4 + 32);
  long long v45 = v22;
  int8x16_t v44 = v21;
  float64x2_t v24 = (uint64_t *)(a1 + 136);
  float64x2_t v23 = *(void **)(a1 + 136);
  float64x2_t v25 = (uint64_t *)(a1 + 136);
  if (v23)
  {
    float64x2_t v25 = (uint64_t *)(a1 + 136);
    do
    {
      int v26 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()(a1 + 152, (uint64_t)(v23 + 4), (uint64_t)v42);
      float64x2_t v27 = v23 + 1;
      if (!v26)
      {
        float64x2_t v27 = v23;
        float64x2_t v25 = v23;
      }
      float64x2_t v23 = (void *)*v27;
    }
    while (*v27);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  while ((int *)v4 != v7)
  {
    int8x16_t v28 = *(int8x16_t *)v4;
    long long v29 = *(_OWORD *)(v4 + 16);
    uint64_t v49 = *(void *)(v4 + 32);
    int8x16_t v47 = v28;
    long long v48 = v29;
    if (v25 == v24)
    {
      double v37 = (void *)*v24;
      float64x2_t v38 = (void *)(a1 + 136);
      if (*v24)
      {
        do
        {
          float64x2_t v39 = v37;
          double v37 = (void *)v37[1];
        }
        while (v37);
      }
      else
      {
        do
        {
          float64x2_t v39 = (void *)v38[2];
          BOOL v18 = *v39 == (void)v38;
          float64x2_t v38 = v39;
        }
        while (v18);
      }
      uint64_t v40 = (uint64_t)(v39 + 4);
      float64x2_t v41 = (int *)(v39 + 9);
      float64x2_t v25 = boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, (uint64_t)(v39 + 9), (uint64_t)(v39 + 9), (uint64_t)&v47, v25, a2);
      boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, v40, v41, (uint64_t)&v47, (uint64_t)v25);
    }
    else
    {
      if (v25 == *(uint64_t **)(a1 + 128))
      {
        double v36 = boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, (uint64_t)(v25 + 4), (uint64_t)(v25 + 4), (uint64_t)&v47, v25, a2);
      }
      else
      {
        uint64_t v30 = v25[14];
        if (v30)
        {
          *(unsigned char *)(v30 + 24) = 0;
          v25[14] = 0;
        }
        float64x2_t v31 = (uint64_t **)*v25;
        float64x2_t v32 = v25;
        if (*v25)
        {
          do
          {
            float64x2_t v33 = v31;
            float64x2_t v31 = (uint64_t **)v31[1];
          }
          while (v31);
        }
        else
        {
          do
          {
            float64x2_t v33 = (uint64_t **)v32[2];
            BOOL v18 = *v33 == v32;
            float64x2_t v32 = (uint64_t *)v33;
          }
          while (v18);
        }
        uint64_t v34 = (uint64_t)(v33 + 4);
        float64x2_t v35 = (int *)(v33 + 9);
        double v36 = boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(a1, (uint64_t)(v33 + 9), (uint64_t)(v25 + 4), (uint64_t)&v47, v25, a2);
        boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, v34, v35, (uint64_t)&v47, (uint64_t)v36);
      }
      if (v47.i64[0] != v47.i64[1])
      {
        int8x16_t v47 = vextq_s8(v47, v47, 8uLL);
        v49 ^= 0x20uLL;
      }
      boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, (uint64_t)&v47, (int *)v25 + 8, (uint64_t)(v25 + 9), (uint64_t)v25);
      float64x2_t v25 = v36;
    }
    uint64_t v4 = *(void *)(a1 + 32) + 40;
    *(void *)(a1 + 32) = v4;
  }
}

void boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::process_circle_event<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 72;
  uint64_t v4 = **(void **)(a1 + 72);
  uint64_t v5 = (uint64_t *)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 48);
  long long v7 = *(_OWORD *)(v6 + 88);
  int8x16_t v26 = *(int8x16_t *)(v6 + 72);
  long long v27 = v7;
  uint64_t v28 = *(void *)(v6 + 104);
  __int32 v8 = *(void **)(v6 + 120);
  uint64_t v9 = *(void *)v6;
  if (*(void *)v6)
  {
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    uint64_t v11 = v6;
    do
    {
      uint64_t v10 = *(void *)(v11 + 16);
      BOOL v12 = *(void *)v10 == v11;
      uint64_t v11 = v10;
    }
    while (v12);
  }
  uint64_t v13 = *(void **)(v10 + 120);
  long long v14 = *(_OWORD *)(v10 + 48);
  v24[0] = *(_OWORD *)(v10 + 32);
  v24[1] = v14;
  uint64_t v25 = *(void *)(v10 + 64);
  if (*(void *)&v24[0] == *((void *)&v24[0] + 1))
  {
    if (v26.i32[0] == v26.i32[2])
    {
      if (v26.i32[0] != LODWORD(v24[0])) {
        goto LABEL_15;
      }
      __int32 v15 = v26.i32[3];
      if (v26.i32[1] == v26.i32[3]) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v26.i32[2] != LODWORD(v24[0])) {
        goto LABEL_15;
      }
      __int32 v15 = v26.i32[3];
    }
    if (v15 == DWORD1(v24[0]))
    {
      int8x16_t v26 = vextq_s8(v26, v26, 8uLL);
      v28 ^= 0x20uLL;
    }
  }
LABEL_15:
  long long v16 = v27;
  *(int8x16_t *)(v10 + 72) = v26;
  *(_OWORD *)(v10 + 88) = v16;
  *(void *)(v10 + 104) = v28;
  *(void *)(v10 + 120) = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int,double>(a2, (uint64_t)v24, (uint64_t)&v26, v5, v13, v8);
  std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__remove_node_pointer((uint64_t **)(a1 + 128), (uint64_t *)v6);
  operator delete((void *)v6);
  boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::pop(v3);
  if (v10 != *(void *)(a1 + 128))
  {
    uint64_t v17 = *(void *)(v10 + 112);
    if (v17)
    {
      *(unsigned char *)(v17 + 24) = 0;
      *(void *)(v10 + 112) = 0;
    }
    BOOL v18 = *(void **)v10;
    if (*(void *)v10)
    {
      do
      {
        int8x16_t v19 = v18;
        BOOL v18 = (void *)v18[1];
      }
      while (v18);
    }
    else
    {
      long long v20 = (void *)v10;
      do
      {
        int8x16_t v19 = (void *)v20[2];
        BOOL v12 = *v19 == (void)v20;
        long long v20 = v19;
      }
      while (v12);
    }
    boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, (uint64_t)(v19 + 4), (int *)v24, (uint64_t)&v26, v10);
  }
  int8x16_t v21 = *(void **)(v10 + 8);
  if (v21)
  {
    do
    {
      long long v22 = v21;
      int8x16_t v21 = (void *)*v21;
    }
    while (v21);
  }
  else
  {
    do
    {
      long long v22 = *(void **)(v10 + 16);
      BOOL v12 = *v22 == v10;
      uint64_t v10 = (uint64_t)v22;
    }
    while (!v12);
  }
  if (v22 != (void *)(a1 + 136))
  {
    uint64_t v23 = v22[14];
    if (v23)
    {
      *(unsigned char *)(v23 + 24) = 0;
      v22[14] = 0;
    }
    boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(a1, (uint64_t)v24, v26.i32, (uint64_t)(v22 + 9), (uint64_t)v22);
  }
}

void boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::pop(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = **(uint64_t ***)a1;
  __int16 v8 = *(_WORD *)(a1 + 24);
  if (v3 - (uint64_t)v2 >= 9)
  {
    uint64_t v5 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>(v2, (uint64_t)&v8, (unint64_t)(v3 - (void)v2) >> 3);
    uint64_t v6 = (uint64_t **)(v3 - 8);
    if ((void *)(v3 - 8) == v5)
    {
      *uint64_t v5 = v4;
    }
    else
    {
      *uint64_t v5 = *v6;
      *uint64_t v6 = v4;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>((uint64_t)v2, (uint64_t)(v5 + 1), (uint64_t)&v8, (uint64_t **)(v5 + 1) - v2);
    }
  }
  *(void *)(a1 + 8) -= 8;
  uint64_t v7 = *v4;
  *(void *)(v7 + 8) = v4[1];
  *(void *)v4[1] = v7;
  --*(void *)(a1 + 48);
  operator delete(v4);
}

void boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_build(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  if (v2 != a1[7])
  {
    uint64_t v3 = -v2;
    uint64_t v4 = (char *)a1[6];
    do
    {
      uint64_t v5 = (unint64_t *)*((void *)v4 + 1);
      uint64_t v6 = *(uint64_t **)(*((void *)v4 + 2) + 8);
      if (v5) {
        BOOL v7 = v6 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7
        || !boost::polygon::voronoi_diagram_traits<double>::vertex_equality_predicate_type::operator()((uint64_t)(a1 + 9), v5, v6))
      {
        if (v4 != (char *)v2)
        {
          long long v8 = *(_OWORD *)v4;
          long long v9 = *((_OWORD *)v4 + 2);
          *(_OWORD *)(v2 + 16) = *((_OWORD *)v4 + 1);
          *(_OWORD *)(v2 + 32) = v9;
          *(_OWORD *)uint64_t v2 = v8;
          uint64_t v10 = v2 + 48;
          long long v11 = *((_OWORD *)v4 + 5);
          long long v12 = *((_OWORD *)v4 + 3);
          *(_OWORD *)(v2 + 64) = *((_OWORD *)v4 + 4);
          *(_OWORD *)(v2 + 80) = v11;
          *(_OWORD *)(v2 + 48) = v12;
          *(void *)(v2 + 16) = v2 + 48;
          *(void *)(v2 + 64) = v2;
          uint64_t v13 = *(void *)(v2 + 32);
          if (v13)
          {
            *(void *)(v13 + 24) = v2;
            *(void *)(*(void *)(v2 + 72) + 32) = v10;
          }
          if (*(void *)(v2 + 80))
          {
            *(void *)(*(void *)(v2 + 24) + 32) = v2;
            *(void *)(*(void *)(v2 + 80) + 24) = v10;
          }
        }
        v2 += 96;
      }
      else
      {
        boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::remove_edge((uint64_t)a1, v4);
      }
      v4 += 96;
      v3 -= 96;
    }
    while (v4 != (char *)a1[7]);
    long long v14 = (char *)a1[6];
    if (v4 != (char *)v2)
    {
      __int32 v15 = &v14[48 * ((v2 - (uint64_t)v14) / 48)];
      long long v16 = &v15[-v2 - v3];
      size_t v17 = -v3 - (void)v16;
      if (v4 != v16)
      {
        memmove(v15, v16, v17);
        long long v14 = (char *)a1[6];
      }
      uint64_t v4 = &v15[v17];
      a1[7] = (uint64_t)&v15[v17];
    }
    while (v14 != v4)
    {
      uint64_t v18 = *((void *)v14 + 1);
      *(void *)(*(void *)v14 + 8) = v14;
      if (v18) {
        *(void *)(v18 + 16) = v14;
      }
      v14 += 48;
    }
  }
  long long v20 = (_OWORD *)a1[3];
  int8x16_t v19 = (_OWORD *)a1[4];
  if (v20 == v19) {
    goto LABEL_46;
  }
  int8x16_t v21 = (_OWORD *)a1[3];
  do
  {
    if (*((void *)v21 + 2))
    {
      if (v21 != v20)
      {
        long long v22 = v21[1];
        *long long v20 = *v21;
        v20[1] = v22;
        uint64_t v23 = *((void *)v20 + 2);
        uint64_t v24 = v23;
        do
        {
          *(void *)(v24 + 8) = v20;
          uint64_t v24 = *(void *)(*(void *)(v24 + 32) + 16);
        }
        while (v24 != v23);
        int8x16_t v19 = (_OWORD *)a1[4];
      }
      v20 += 2;
    }
    v21 += 2;
  }
  while (v21 != v19);
  uint64_t v25 = (_OWORD *)a1[3];
  if (v20 != v19)
  {
    int8x16_t v19 = v20;
    a1[4] = (uint64_t)v20;
  }
  if (v25 == v19)
  {
LABEL_46:
    float64x2_t v32 = (void *)a1[6];
    float64x2_t v33 = (void *)a1[7];
    if (v32 != v33)
    {
      v32[3] = v32;
      v32[4] = v32;
      for (uint64_t i = v32 + 12; i != v33; uint64_t i = v35 + 24)
      {
        float64x2_t v35 = v32;
        double v36 = v32 + 6;
        v32 += 12;
        v35[9] = v32;
        v35[10] = v32;
        v35[15] = v36;
        v35[16] = v36;
      }
      v32[9] = v32 + 6;
      v32[10] = v32 + 6;
    }
  }
  else
  {
    uint64_t v26 = *a1;
    uint64_t v27 = a1[1];
    while (v26 != v27)
    {
      uint64_t v28 = *(void *)(v26 + 8);
      if (v28)
      {
        uint64_t v29 = *(void *)(v26 + 8);
        while (1)
        {
          uint64_t v30 = *(void *)(v29 + 32);
          if (!v30) {
            break;
          }
          uint64_t v29 = *(void *)(v29 + 32);
          if (v30 == v28)
          {
            uint64_t v29 = *(void *)(v26 + 8);
            if (*(void *)(v28 + 32)) {
              goto LABEL_45;
            }
            goto LABEL_43;
          }
        }
        do
        {
LABEL_43:
          uint64_t v31 = v28;
          uint64_t v28 = *(void *)(v28 + 24);
        }
        while (v28);
        *(void *)(v29 + 32) = v31;
        *(void *)(v31 + 24) = v29;
      }
LABEL_45:
      v26 += 24;
    }
  }
}

void std::vector<boost::polygon::voronoi_cell<double>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>(v3, a2);
    BOOL v7 = &v6[24 * v5];
    long long v9 = &v6[24 * v8];
    long long v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<boost::polygon::voronoi_vertex<double>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_vertex<double>>>(v3, a2);
    BOOL v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    long long v9 = &v6[32 * v8];
    long long v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<boost::polygon::voronoi_edge<double>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 48;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>(v3, a2);
    BOOL v7 = &v6[48 * v5];
    long long v9 = &v6[48 * v8];
    long long v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 3);
        long long v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_vertex<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  long long v11 = (long long *)((char *)a2 - 40);
  long long v12 = (int *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)a2 - 10, v12))
          {
            uint64_t v35 = *((void *)v12 + 4);
            long long v31 = *(_OWORD *)v12;
            long long v33 = *((_OWORD *)v12 + 1);
            long long v28 = *v11;
            long long v29 = *(long long *)((char *)a2 - 24);
            *((void *)v12 + 4) = *((void *)a2 - 1);
            *(_OWORD *)long long v12 = v28;
            *((_OWORD *)v12 + 1) = v29;
            *long long v11 = v31;
            *(long long *)((char *)a2 - 24) = v33;
            *((void *)a2 - 1) = v35;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v12, v12 + 10, (int *)a2 - 10, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v12, v12 + 10, v12 + 20, (long long *)((char *)a2 - 40), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v12, v12 + 10, v12 + 20, (long long *)(v12 + 30), (long long *)((char *)a2 - 40), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 959) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (int *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,boost::polygon::detail::site_event<int>*>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[10 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0x1401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v12, &v12[10 * (v16 >> 1)], (int *)a2 - 10, a3);
      uint64_t v19 = 5 * v17;
      long long v20 = &v12[10 * v17 - 10];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v12 + 10, v20, (int *)a2 - 20, a3);
      int8x16_t v21 = v12 + 20;
      long long v22 = &v12[2 * v19 + 10];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v21, v22, (int *)a2 - 30, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v20, v18, v22, a3);
      uint64_t v34 = *(void *)(a1 + 32);
      long long v30 = *(_OWORD *)a1;
      long long v32 = *(_OWORD *)(a1 + 16);
      long long v23 = *(_OWORD *)v18;
      long long v24 = *((_OWORD *)v18 + 1);
      *(void *)(a1 + 32) = *((void *)v18 + 4);
      *(_OWORD *)a1 = v23;
      *(_OWORD *)(a1 + 16) = v24;
      *((void *)v18 + 4) = v34;
      *(_OWORD *)uint64_t v18 = v30;
      *((_OWORD *)v18 + 1) = v32;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(&v12[10 * (v16 >> 1)], v12, (int *)a2 - 10, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)(a1 - 40), (int *)a1) & 1) == 0)
    {
      long long v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>((int *)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v25 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>((long long *)a1, (int *)a2, a3);
    if ((v26 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, v25, a3);
    long long v12 = (int *)(v25 + 40);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(v25 + 40, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v27)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,false>(a1, v25, a3, -v14, a5 & 1);
      long long v12 = (int *)(v25 + 40);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v12, (uint64_t)a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((uint64_t)v12, (uint64_t)a2, a3);
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(uint64_t a1, int *a2, int *a3)
{
  int v3 = *a2;
  BOOL v4 = *a2 < *a3;
  if (*a2 != *a3) {
    return v4;
  }
  if (v3 != a2[2])
  {
    if (v3 == a3[2]) {
      return 0;
    }
    int v11 = a2[1];
    int v12 = a3[1];
    BOOL v4 = v11 < v12;
    if (v11 == v12) {
      return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(a2 + 2, a2, a3 + 2) == 1;
    }
    return v4;
  }
  int v5 = a2[1];
  int v6 = a3[2];
  if (v5 != a2[3])
  {
    if (v3 != v6) {
      return 1;
    }
    return v5 < a3[1];
  }
  if (v3 != v6) {
    return 1;
  }
  int v7 = a3[1];
  BOOL v4 = v5 < v7;
  BOOL v8 = v5 <= v7;
  unsigned int v9 = v4;
  if (v7 == a3[3]) {
    return v9;
  }
  else {
    return v8;
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    uint64_t v6 = result;
    int v7 = (int *)(result + 40);
    if (result + 40 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        int v11 = (int *)v10;
        uint64_t v10 = (uint64_t)v7;
        uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, v7, v11);
        if (result)
        {
          long long v12 = *(_OWORD *)(v10 + 16);
          long long v18 = *(_OWORD *)v10;
          long long v19 = v12;
          uint64_t v20 = *(void *)(v10 + 32);
          uint64_t v13 = v9;
          while (1)
          {
            uint64_t v14 = v6 + v13;
            long long v15 = *(_OWORD *)(v6 + v13 + 16);
            *(_OWORD *)(v14 + 40) = *(_OWORD *)(v6 + v13);
            *(_OWORD *)(v14 + 56) = v15;
            *(void *)(v14 + 72) = *(void *)(v6 + v13 + 32);
            if (!v13) {
              break;
            }
            v13 -= 40;
            uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v18, (int *)(v13 + v6));
            if ((result & 1) == 0)
            {
              uint64_t v16 = v6 + v13 + 40;
              goto LABEL_10;
            }
          }
          uint64_t v16 = v6;
LABEL_10:
          long long v17 = v19;
          *(_OWORD *)uint64_t v16 = v18;
          *(_OWORD *)(v16 + 16) = v17;
          *(void *)(v16 + 32) = v20;
        }
        int v7 = (int *)(v10 + 40);
        v9 += 40;
      }
      while (v10 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    uint64_t v6 = result;
    int v7 = (int *)(result + 40);
    if (result + 40 != a2)
    {
      uint64_t v9 = result - 40;
      do
      {
        uint64_t v10 = (int *)v6;
        uint64_t v6 = (uint64_t)v7;
        uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, v7, v10);
        if (result)
        {
          long long v11 = *(_OWORD *)(v6 + 16);
          long long v15 = *(_OWORD *)v6;
          long long v16 = v11;
          uint64_t v17 = *(void *)(v6 + 32);
          uint64_t v12 = v9;
          do
          {
            long long v13 = *(_OWORD *)(v12 + 56);
            *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 40);
            *(_OWORD *)(v12 + 96) = v13;
            *(void *)(v12 + 112) = *(void *)(v12 + 72);
            uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v15, (int *)v12);
            v12 -= 40;
          }
          while ((result & 1) != 0);
          long long v14 = v16;
          *(_OWORD *)(v12 + 80) = v15;
          *(_OWORD *)(v12 + 96) = v14;
          *(void *)(v12 + 112) = v17;
        }
        int v7 = (int *)(v6 + 40);
        v9 += 40;
      }
      while (v6 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  char v8 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, a2, a1);
  uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v10 = *(_OWORD *)a1;
      long long v11 = *((_OWORD *)a1 + 1);
      uint64_t v12 = *((void *)a1 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      long long v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v14;
      *((void *)a1 + 4) = v13;
      *((void *)a3 + 4) = v12;
      uint64_t result = 1;
LABEL_9:
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      return result;
    }
    long long v25 = *(_OWORD *)a1;
    long long v26 = *((_OWORD *)a1 + 1);
    uint64_t v27 = *((void *)a1 + 4);
    uint64_t v28 = *((void *)a2 + 4);
    long long v29 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v29;
    *((void *)a1 + 4) = v28;
    *((void *)a2 + 4) = v27;
    *(_OWORD *)a2 = v25;
    *((_OWORD *)a2 + 1) = v26;
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, a3, a2))
    {
      long long v10 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 1);
      uint64_t v30 = *((void *)a2 + 4);
      uint64_t v31 = *((void *)a3 + 4);
      long long v32 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v32;
      *((void *)a2 + 4) = v31;
      *((void *)a3 + 4) = v30;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    long long v15 = *(_OWORD *)a2;
    long long v16 = *((_OWORD *)a2 + 1);
    uint64_t v17 = *((void *)a2 + 4);
    uint64_t v18 = *((void *)a3 + 4);
    long long v19 = *((_OWORD *)a3 + 1);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_OWORD *)a2 + 1) = v19;
    *((void *)a2 + 4) = v18;
    *((void *)a3 + 4) = v17;
    *(_OWORD *)a3 = v15;
    *((_OWORD *)a3 + 1) = v16;
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, a2, a1))
    {
      long long v20 = *(_OWORD *)a1;
      long long v21 = *((_OWORD *)a1 + 1);
      uint64_t v22 = *((void *)a1 + 4);
      uint64_t v23 = *((void *)a2 + 4);
      long long v24 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v24;
      *((void *)a1 + 4) = v23;
      *((void *)a2 + 4) = v22;
      uint64_t result = 2;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      return result;
    }
  }
  return 1;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>(int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v6 = *((_OWORD *)a1 + 1);
  long long v22 = *(_OWORD *)a1;
  long long v23 = v6;
  uint64_t v24 = *((void *)a1 + 4);
  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, (int *)(a2 - 40)))
  {
    int v7 = a1;
    do
      v7 += 10;
    while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, v7) & 1) == 0);
  }
  else
  {
    char v8 = a1 + 10;
    do
    {
      int v7 = v8;
      if ((unint64_t)v8 >= v4) {
        break;
      }
      int v9 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, v8);
      char v8 = v7 + 10;
    }
    while (!v9);
  }
  if ((unint64_t)v7 < v4)
  {
    do
      v4 -= 40;
    while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, (int *)v4) & 1) != 0);
  }
  while ((unint64_t)v7 < v4)
  {
    long long v10 = *(_OWORD *)v7;
    long long v11 = *((_OWORD *)v7 + 1);
    uint64_t v27 = *((void *)v7 + 4);
    long long v25 = v10;
    long long v26 = v11;
    long long v12 = *(_OWORD *)v4;
    long long v13 = *(_OWORD *)(v4 + 16);
    *((void *)v7 + 4) = *(void *)(v4 + 32);
    *(_OWORD *)int v7 = v12;
    *((_OWORD *)v7 + 1) = v13;
    long long v14 = v25;
    long long v15 = v26;
    *(void *)(v4 + 32) = v27;
    *(_OWORD *)unint64_t v4 = v14;
    *(_OWORD *)(v4 + 16) = v15;
    do
      v7 += 10;
    while (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, v7));
    do
      v4 -= 40;
    while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v22, (int *)v4) & 1) != 0);
  }
  long long v16 = v7 - 10;
  if (v7 - 10 != a1)
  {
    long long v17 = *(_OWORD *)v16;
    long long v18 = *(_OWORD *)(v7 - 6);
    *((void *)a1 + 4) = *((void *)v7 - 1);
    *(_OWORD *)a1 = v17;
    *((_OWORD *)a1 + 1) = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *((void *)v7 - 1) = v24;
  *(_OWORD *)long long v16 = v19;
  *(_OWORD *)(v7 - 6) = v20;
  return v7;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::site_event<int> *,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &>(long long *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v22 = *a1;
  long long v23 = v7;
  uint64_t v24 = *((void *)a1 + 4);
  do
    v6 += 40;
  while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)((char *)a1 + v6), (int *)&v22) & 1) != 0);
  unint64_t v8 = (unint64_t)a1 + v6;
  uint64_t v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      a2 -= 10;
    }
    while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, a2, (int *)&v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 10;
    while (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, a2, (int *)&v22));
  }
  if (v8 < (unint64_t)a2)
  {
    unint64_t v10 = (unint64_t)a1 + v6;
    long long v11 = a2;
    do
    {
      long long v13 = *(_OWORD *)(v10 + 16);
      long long v25 = *(_OWORD *)v10;
      long long v12 = v25;
      long long v26 = v13;
      uint64_t v27 = *(void *)(v10 + 32);
      uint64_t v14 = v27;
      long long v16 = *(_OWORD *)v11;
      long long v15 = *((_OWORD *)v11 + 1);
      *(void *)(v10 + 32) = *((void *)v11 + 4);
      *(_OWORD *)unint64_t v10 = v16;
      *(_OWORD *)(v10 + 16) = v15;
      *((void *)v11 + 4) = v14;
      *(_OWORD *)long long v11 = v12;
      *((_OWORD *)v11 + 1) = v13;
      do
        v10 += 40;
      while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)v10, (int *)&v22) & 1) != 0);
      do
        v11 -= 10;
      while (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, v11, (int *)&v22));
    }
    while (v10 < (unint64_t)v11);
    uint64_t v9 = v10 - 40;
  }
  if ((long long *)v9 != a1)
  {
    long long v17 = *(_OWORD *)v9;
    long long v18 = *(_OWORD *)(v9 + 16);
    *((void *)a1 + 4) = *(void *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *(void *)(v9 + 32) = v24;
  *(_OWORD *)uint64_t v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 40;
      if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)(a2 - 40), (int *)a1))return 1; {
      long long v9 = *(_OWORD *)a1;
      }
      long long v10 = *(_OWORD *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(v8 + 32);
      long long v13 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(void *)(a1 + 32) = v12;
      *(void *)(v8 + 32) = v11;
      BOOL result = 1;
      *(_OWORD *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((int *)a1, (int *)(a1 + 40), (int *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, (int *)(a1 + 40), (int *)(a1 + 80), (long long *)(a2 - 40), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, (int *)(a1 + 40), (int *)(a1 + 80), (long long *)(a1 + 120), (long long *)(a2 - 40), a3);
      return 1;
    default:
      uint64_t v14 = (int *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((int *)a1, (int *)(a1 + 40), (int *)(a1 + 80), a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)v15, v14))
    {
      long long v18 = *(_OWORD *)(v15 + 16);
      long long v24 = *(_OWORD *)v15;
      long long v25 = v18;
      uint64_t v26 = *(void *)(v15 + 32);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(void *)(v20 + 152) = *(void *)(a1 + v19 + 112);
        if (v19 == -80) {
          break;
        }
        v19 -= 40;
        if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)&v24, (int *)(v20 + 40)) & 1) == 0)
        {
          uint64_t v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      long long v23 = v25;
      *(_OWORD *)uint64_t v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(void *)(v22 + 32) = v26;
      if (++v17 == 8) {
        return v15 + 40 == a2;
      }
    }
    uint64_t v14 = (int *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(int *a1, int *a2, int *a3)
{
  double v3 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(*a1 - (uint64_t)*a2, a1[1] - (uint64_t)a2[1], *a2 - (uint64_t)*a3, a2[1] - (uint64_t)a3[1]);
  if (v3 >= 0.0) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = -1;
  }
  if (v3 == 0.0) {
    return 0;
  }
  else {
    return v4;
  }
}

double boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = -a1;
  }
  if (a2 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = -a2;
  }
  if (a3 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = -a3;
  }
  if (a4 >= 0) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = -a4;
  }
  unint64_t v8 = v7 * v4;
  unint64_t v9 = v6 * v5;
  uint64_t v10 = a2 ^ a3;
  double result = (double)(v8 - v9);
  double v12 = (double)(v9 - v8);
  if (v8 < v9) {
    double result = -v12;
  }
  if (v10 < 0) {
    double result = (double)(v8 + v9);
  }
  if (v8 > v9) {
    double v12 = -(double)(v8 - v9);
  }
  if (v10 >= 0) {
    double v12 = -(double)(v8 + v9);
  }
  if ((a4 ^ a1) < 0) {
    return v12;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, int *a2, int *a3, long long *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>((int *)a1, a2, a3, a5);
  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a5, (int *)a4, a3))
  {
    long long v11 = *(_OWORD *)a3;
    long long v12 = *((_OWORD *)a3 + 1);
    uint64_t v13 = *((void *)a3 + 4);
    uint64_t v14 = *((void *)a4 + 4);
    long long v15 = a4[1];
    *(_OWORD *)a3 = *a4;
    *((_OWORD *)a3 + 1) = v15;
    *((void *)a3 + 4) = v14;
    *((void *)a4 + 4) = v13;
    *a4 = v11;
    a4[1] = v12;
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a5, a3, a2))
    {
      long long v16 = *(_OWORD *)a2;
      long long v17 = *((_OWORD *)a2 + 1);
      uint64_t v18 = *((void *)a2 + 4);
      uint64_t v19 = *((void *)a3 + 4);
      long long v20 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v20;
      *((void *)a2 + 4) = v19;
      *((void *)a3 + 4) = v18;
      *(_OWORD *)a3 = v16;
      *((_OWORD *)a3 + 1) = v17;
      if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a5, a2, (int *)a1))
      {
        __n128 result = *(__n128 *)a1;
        long long v21 = *(_OWORD *)(a1 + 16);
        uint64_t v22 = *(void *)(a1 + 32);
        uint64_t v23 = *((void *)a2 + 4);
        long long v24 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(void *)(a1 + 32) = v23;
        *((void *)a2 + 4) = v22;
        *(__n128 *)a2 = result;
        *((_OWORD *)a2 + 1) = v21;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, int *a2, int *a3, long long *a4, long long *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, a2, a3, a4, a6);
  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a6, (int *)a5, (int *)a4))
  {
    long long v13 = *a4;
    long long v14 = a4[1];
    uint64_t v15 = *((void *)a4 + 4);
    uint64_t v16 = *((void *)a5 + 4);
    long long v17 = a5[1];
    *a4 = *a5;
    a4[1] = v17;
    *((void *)a4 + 4) = v16;
    *((void *)a5 + 4) = v15;
    *a5 = v13;
    a5[1] = v14;
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a6, (int *)a4, a3))
    {
      long long v18 = *(_OWORD *)a3;
      long long v19 = *((_OWORD *)a3 + 1);
      uint64_t v20 = *((void *)a3 + 4);
      uint64_t v21 = *((void *)a4 + 4);
      long long v22 = a4[1];
      *(_OWORD *)a3 = *a4;
      *((_OWORD *)a3 + 1) = v22;
      *((void *)a3 + 4) = v21;
      *((void *)a4 + 4) = v20;
      *a4 = v18;
      a4[1] = v19;
      if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a6, a3, a2))
      {
        long long v23 = *(_OWORD *)a2;
        long long v24 = *((_OWORD *)a2 + 1);
        uint64_t v25 = *((void *)a2 + 4);
        uint64_t v26 = *((void *)a3 + 4);
        long long v27 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v27;
        *((void *)a2 + 4) = v26;
        *((void *)a3 + 4) = v25;
        *(_OWORD *)a3 = v23;
        *((_OWORD *)a3 + 1) = v24;
        if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a6, a2, (int *)a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v28 = *(_OWORD *)(a1 + 16);
          uint64_t v29 = *(void *)(a1 + 32);
          uint64_t v30 = *((void *)a2 + 4);
          long long v31 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v31;
          *(void *)(a1 + 32) = v30;
          *((void *)a2 + 4) = v29;
          *(__n128 *)a2 = result;
          *((_OWORD *)a2 + 1) = v28;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*,boost::polygon::detail::site_event<int>*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 40 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a4, (int *)v14, (int *)a1))
        {
          long long v15 = *v14;
          long long v16 = v14[1];
          uint64_t v17 = *((void *)v14 + 4);
          uint64_t v18 = *(void *)(a1 + 32);
          long long v19 = *(_OWORD *)(a1 + 16);
          *long long v14 = *(_OWORD *)a1;
          v14[1] = v19;
          *((void *)v14 + 4) = v18;
          *(void *)(a1 + 32) = v17;
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 16) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 40);
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 41)
    {
      int64_t v20 = v8 / 0x28uLL;
      uint64_t v21 = (uint64_t)a2 - 40;
      do
      {
        __n128 v27 = *(__n128 *)a1;
        long long v28 = *(_OWORD *)(a1 + 16);
        uint64_t v29 = *(void *)(a1 + 32);
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, a4, v20);
        if (v21 == v22)
        {
          *(__n128 *)uint64_t v22 = v27;
          *(_OWORD *)(v22 + 16) = v28;
          *(void *)(v22 + 32) = v29;
        }
        else
        {
          __n128 v23 = *(__n128 *)v21;
          long long v24 = *(_OWORD *)(v21 + 16);
          *(void *)(v22 + 32) = *(void *)(v21 + 32);
          *(__n128 *)uint64_t v22 = v23;
          *(_OWORD *)(v22 + 16) = v24;
          *(void *)(v21 + 32) = v29;
          *(__n128 *)uint64_t v21 = v27;
          *(_OWORD *)(v21 + 16) = v28;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(a1, v22 + 40, a4, 0xCCCCCCCCCCCCCCCDLL * ((v22 + 40 - a1) >> 3));
        }
        v21 -= 40;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    uint64_t v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      long long v13 = (long long *)(a1 + 40 * v12);
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)(a1 + 40 * v12), (int *)v13 + 10))
      {
        long long v13 = (long long *)((char *)v13 + 40);
        int64_t v12 = v14;
      }
      if ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)v13, (int *)v7) & 1) == 0)
      {
        __n128 v16 = v7[1];
        __n128 v23 = *v7;
        __n128 v24 = v16;
        uint64_t v25 = v7[2].n128_i64[0];
        do
        {
          uint64_t v17 = (__n128 *)v13;
          __n128 v18 = (__n128)*v13;
          long long v19 = v13[1];
          v7[2].n128_u64[0] = *((void *)v13 + 4);
          *uint64_t v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          long long v13 = (long long *)(a1 + 40 * v20);
          uint64_t v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)(a1 + 40 * v20), (int *)v13 + 10))
            {
              long long v13 = (long long *)((char *)v13 + 40);
              uint64_t v20 = v21;
            }
          }
          uint64_t v7 = v17;
          int64_t v12 = v20;
        }
        while (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)v13, (int *)&v23));
        __n128 result = v23;
        __n128 v22 = v24;
        v17[2].n128_u64[0] = v25;
        *uint64_t v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 40 * v6 + 40;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a2, (int *)(a1 + 40 * v6 + 40), (int *)(a1 + 40 * v6 + 80)))
    {
      v9 += 40;
      uint64_t v10 = v11;
    }
    long long v12 = *(_OWORD *)v9;
    long long v13 = *(_OWORD *)(v9 + 16);
    *(void *)(a1 + 32) = *(void *)(v9 + 32);
    *(_OWORD *)a1 = v12;
    *(_OWORD *)(a1 + 16) = v13;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>> &,boost::polygon::detail::site_event<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 40 * v8);
    uint64_t v10 = (long long *)(a2 - 40);
    if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)v9, (int *)(a2 - 40)))
    {
      long long v12 = v10[1];
      long long v17 = *v10;
      long long v18 = v12;
      uint64_t v19 = *((void *)v10 + 4);
      do
      {
        long long v13 = v9;
        long long v14 = *v9;
        long long v15 = v9[1];
        *((void *)v10 + 4) = *((void *)v9 + 4);
        *uint64_t v10 = v14;
        v10[1] = v15;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 40 * v8);
        uint64_t v10 = v13;
      }
      while ((boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::event_comparison_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::operator()(a3, (int *)v9, (int *)&v17) & 1) != 0);
      double result = *(double *)&v17;
      long long v16 = v18;
      *long long v13 = v17;
      v13[1] = v16;
      *((void *)v13 + 4) = v19;
    }
  }
  return result;
}

unsigned int *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__equal_to &>(unsigned int *a1, unsigned int *a2)
{
  double result = std::__adjacent_find[abi:ne180100]<std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__equal_to &>(a1, a2);
  if (result != a2)
  {
    for (uint64_t i = result + 20; i != a2; i += 10)
    {
      if (*result != *i || result[1] != i[1] || result[2] != i[2] || result[3] != i[3])
      {
        long long v5 = *(_OWORD *)i;
        long long v6 = *((_OWORD *)i + 1);
        *((void *)result + 9) = *((void *)i + 4);
        *(_OWORD *)(result + 14) = v6;
        *(_OWORD *)(result + 10) = v5;
        result += 10;
      }
    }
    result += 10;
  }
  return result;
}

unsigned int *std::__adjacent_find[abi:ne180100]<std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__wrap_iter<boost::polygon::detail::site_event<int> *>,std::__equal_to &>(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 10;
    if (result + 10 == a2)
    {
      return a2;
    }
    else
    {
      unsigned int v3 = *result;
      while (1)
      {
        unsigned int v4 = v3;
        unsigned int v3 = *v2;
        if (__PAIR64__(*(v2 - 9), v4) == *(void *)v2 && *(v2 - 8) == v2[2] && *(v2 - 7) == v2[3]) {
          break;
        }
        v2 += 10;
        if (v2 == a2) {
          return a2;
        }
      }
      return v2 - 10;
    }
  }
  return result;
}

void boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_process_single_site<int>(void **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32) & 0x1FLL;
  unint64_t v7 = (unint64_t)a1[2];
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = v7;
  unint64_t v8 = *(void **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>(v5, v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[24 * v10];
    long long v16 = &v14[24 * v13];
    *(void *)long long v15 = v3;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v4;
    uint64_t v9 = v15 + 24;
    long long v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *(_OWORD *)(v17 - 24);
        *((void *)v15 - 1) = *((void *)v17 - 1);
        *(_OWORD *)(v15 - 24) = v19;
        v15 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *unint64_t v8 = v3;
    v8[1] = 0;
    uint64_t v9 = v8 + 3;
    v8[2] = v4;
  }
  a1[1] = v9;
}

uint64_t *boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::init_beach_line_collinear_sites<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t *result, char **a2)
{
  uint64_t v2 = result[1];
  if (v2 + 40 != result[4])
  {
    uint64_t v4 = result;
    uint64_t v5 = (uint64_t **)(result + 16);
    unint64_t v6 = result + 17;
    do
    {
      long long v7 = *(_OWORD *)(v2 + 16);
      long long v14 = *(_OWORD *)v2;
      long long v15 = v7;
      *(void *)long long v16 = *(void *)(v2 + 32);
      long long v8 = *(_OWORD *)(v2 + 56);
      *(_OWORD *)&v16[8] = *(_OWORD *)(v2 + 40);
      *(_OWORD *)&v16[24] = v8;
      *(void *)&v16[40] = *(void *)(v2 + 72);
      inserted = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int>(a2, v2, v2 + 40);
      v11[2] = *(_OWORD *)v16;
      v11[3] = *(_OWORD *)&v16[16];
      v11[4] = *(_OWORD *)&v16[32];
      v11[0] = v14;
      v11[1] = v15;
      uint64_t v12 = 0;
      unint64_t v13 = inserted;
      double result = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>(v5, v6, (uint64_t)v11, v11);
      uint64_t v10 = v2 + 80;
      v2 += 40;
    }
    while (v10 != v4[4]);
  }
  return result;
}

uint64_t *boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::insert_new_arc<boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char **a6)
{
  long long v9 = *(_OWORD *)(a2 + 16);
  int8x16_t v46 = *(int8x16_t *)a2;
  long long v47 = v9;
  uint64_t v10 = *(void *)(a2 + 32);
  *(_OWORD *)&v48[8] = *(_OWORD *)a4;
  *(_OWORD *)&v48[24] = *(_OWORD *)(a4 + 16);
  uint64_t v11 = *(void *)(a4 + 32);
  *(void *)long long v48 = v10;
  *(void *)&v48[40] = v11;
  uint64_t v13 = *(void *)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  long long v45 = *(_OWORD *)(a4 + 16);
  uint64_t v14 = *(void *)(a4 + 32);
  long long v15 = *(_OWORD *)(a3 + 16);
  long long v42 = *(_OWORD *)a3;
  long long v43 = v15;
  uint64_t v44 = *(void *)(a3 + 32);
  if (v13 == v12)
  {
    uint64_t v16 = v13;
    uint64_t v13 = v12;
  }
  else
  {
    v14 ^= 0x20uLL;
    uint64_t v16 = v12;
  }
  inserted = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int>(a6, a3, a4);
  long long v38 = v45;
  *(_OWORD *)&v39[8] = v42;
  v37.i64[0] = v16;
  v37.i64[1] = v13;
  *(void *)float64x2_t v39 = v14;
  *(_OWORD *)&v39[24] = v43;
  *(void *)&v39[40] = v44;
  uint64_t v40 = 0;
  float64x2_t v41 = v18;
  long long v19 = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>> const,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>((uint64_t **)(a1 + 128), a5, (uint64_t)&v37, &v37);
  if (*(_DWORD *)a4 != *(_DWORD *)(a4 + 8) || *(_DWORD *)(a4 + 4) != *(_DWORD *)(a4 + 12))
  {
    long long v20 = *(_OWORD *)(a4 + 16);
    int8x16_t v37 = *(int8x16_t *)a4;
    long long v38 = v20;
    *(_OWORD *)&v39[24] = *(_OWORD *)(a4 + 16);
    *(void *)float64x2_t v39 = *(void *)(a4 + 32);
    *(int8x16_t *)&v39[8] = vextq_s8(v37, v37, 8uLL);
    uint64_t v40 = 0;
    float64x2_t v41 = 0;
    *(void *)&v39[40] = *(void *)v39 ^ 0x20;
    long long v19 = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>> const,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>((uint64_t **)(a1 + 128), v19, (uint64_t)&v37, &v37);
    unint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(a4 + 8);
    __n128 v23 = *(void **)(a1 + 48);
    if ((unint64_t)v23 >= v21)
    {
      uint64_t v25 = *(void *)(a1 + 40);
      uint64_t v26 = ((uint64_t)v23 - v25) >> 4;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60) {
        std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v21 - v25;
      if (v28 >> 3 > v27) {
        unint64_t v27 = v28 >> 3;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PointInt64>>(a1 + 56, v29);
      }
      else {
        uint64_t v30 = 0;
      }
      long long v31 = &v30[16 * v26];
      long long v32 = &v30[16 * v29];
      *(void *)long long v31 = v22;
      *((void *)v31 + 1) = v19;
      uint64_t v24 = (uint64_t)(v31 + 16);
      uint64_t v34 = *(char **)(a1 + 40);
      long long v33 = *(char **)(a1 + 48);
      if (v33 != v34)
      {
        do
        {
          *((_OWORD *)v31 - 1) = *((_OWORD *)v33 - 1);
          v31 -= 16;
          v33 -= 16;
        }
        while (v33 != v34);
        long long v33 = *(char **)(a1 + 40);
      }
      *(void *)(a1 + 40) = v31;
      *(void *)(a1 + 48) = v24;
      *(void *)(a1 + 56) = v32;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *__n128 v23 = v22;
      v23[1] = v19;
      uint64_t v24 = (uint64_t)(v23 + 2);
    }
    *(void *)(a1 + 48) = v24;
    uint64_t v35 = *(void *)(a1 + 40);
    v37.i8[0] = *(unsigned char *)(a1 + 64);
    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>(v35, v24, (uint64_t)&v37, (v24 - v35) >> 4);
  }
  *(_OWORD *)float64x2_t v39 = *(_OWORD *)v48;
  *(_OWORD *)&v39[16] = *(_OWORD *)&v48[16];
  *(_OWORD *)&v39[32] = *(_OWORD *)&v48[32];
  int8x16_t v37 = v46;
  long long v38 = v47;
  uint64_t v40 = 0;
  float64x2_t v41 = inserted;
  return std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>> const,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>((uint64_t **)(a1 + 128), v19, (uint64_t)&v37, &v37);
}

char *boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int>(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a3 + 16);
  unsigned int v8 = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_linear_edge<boost::polygon::detail::site_event<int>>((uint64_t)a1, (int *)a2, (int *)a3);
  int v9 = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_primary_edge<boost::polygon::detail::site_event<int>>((uint64_t)a1, (int *)a2, (int *)a3);
  unint64_t v10 = (unint64_t)a1[8];
  uint64_t v11 = a1 + 6;
  if (v9) {
    uint64_t v12 = v8 | 2;
  }
  else {
    uint64_t v12 = v8;
  }
  unint64_t v13 = (unint64_t)a1[7];
  if (v13 >= v10)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v11) >> 4);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0x555555555555555) {
      goto LABEL_67;
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v11) >> 4);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v18 = 0x555555555555555;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18) {
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 8), v18);
    }
    else {
      long long v19 = 0;
    }
    long long v20 = &v19[48 * v15];
    unint64_t v21 = &v19[48 * v18];
    *(_OWORD *)long long v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((void *)v20 + 4) = 0;
    *((void *)v20 + 5) = v12;
    uint64_t v14 = v20 + 48;
    __n128 v23 = a1[6];
    uint64_t v22 = a1[7];
    if (v22 != v23)
    {
      do
      {
        long long v24 = *((_OWORD *)v22 - 3);
        long long v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v20 - 1) = v25;
        *((_OWORD *)v20 - 3) = v24;
        v20 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      uint64_t v22 = (char *)*v11;
    }
    a1[6] = v20;
    a1[7] = v14;
    a1[8] = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = v12;
    uint64_t v14 = (char *)(v13 + 48);
  }
  a1[7] = v14;
  unint64_t v26 = (unint64_t)a1[8];
  if ((unint64_t)v14 < v26)
  {
    *(_OWORD *)uint64_t v14 = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *((void *)v14 + 4) = 0;
    *((void *)v14 + 5) = v12;
    unint64_t v27 = v14 + 48;
    goto LABEL_36;
  }
  uint64_t v28 = v6;
  uint64_t v29 = v7;
  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v14[-*v11] >> 4);
  if (v30 + 1 > 0x555555555555555) {
LABEL_67:
  }
    std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v11) >> 4);
  uint64_t v32 = 2 * v31;
  if (2 * v31 <= v30 + 1) {
    uint64_t v32 = v30 + 1;
  }
  if (v31 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v33 = 0x555555555555555;
  }
  else {
    unint64_t v33 = v32;
  }
  if (v33) {
    uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 8), v33);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = &v34[48 * v30];
  double v36 = &v34[48 * v33];
  *(_OWORD *)uint64_t v35 = 0u;
  *((_OWORD *)v35 + 1) = 0u;
  *((void *)v35 + 4) = 0;
  *((void *)v35 + 5) = v12;
  unint64_t v27 = v35 + 48;
  long long v38 = a1[6];
  int8x16_t v37 = a1[7];
  uint64_t v7 = v29;
  if (v37 != v38)
  {
    do
    {
      long long v39 = *((_OWORD *)v37 - 3);
      long long v40 = *((_OWORD *)v37 - 1);
      *((_OWORD *)v35 - 2) = *((_OWORD *)v37 - 2);
      *((_OWORD *)v35 - 1) = v40;
      *((_OWORD *)v35 - 3) = v39;
      v35 -= 48;
      v37 -= 48;
    }
    while (v37 != v38);
    int8x16_t v37 = (char *)*v11;
  }
  uint64_t v6 = v28;
  a1[6] = v35;
  a1[7] = v27;
  a1[8] = v36;
  if (v37) {
    operator delete(v37);
  }
LABEL_36:
  a1[7] = v27;
  float64x2_t v41 = *a1;
  long long v42 = a1[1];
  if (*a1 == v42)
  {
    uint64_t v43 = *(void *)(a2 + 24);
    uint64_t v44 = *(void *)(a2 + 32) & 0x1FLL;
    unint64_t v45 = (unint64_t)a1[2];
    if ((unint64_t)v41 >= v45)
    {
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (void)v41) >> 3);
      uint64_t v47 = 2 * v46;
      if (2 * v46 <= 1) {
        uint64_t v47 = 1;
      }
      if (v46 >= 0x555555555555555) {
        unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v48 = v47;
      }
      uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>((uint64_t)(a1 + 2), v48);
      float64x2_t v51 = &v49[24 * v50];
      *(void *)uint64_t v49 = v43;
      *((void *)v49 + 1) = 0;
      *((void *)v49 + 2) = v44;
      long long v42 = v49 + 24;
      float64x2_t v53 = *a1;
      float64x2_t v52 = a1[1];
      if (v52 != *a1)
      {
        do
        {
          long long v54 = *(_OWORD *)(v52 - 24);
          *((void *)v49 - 1) = *((void *)v52 - 1);
          *(_OWORD *)(v49 - 24) = v54;
          v49 -= 24;
          v52 -= 24;
        }
        while (v52 != v53);
        float64x2_t v52 = *a1;
      }
      *a1 = v49;
      a1[1] = v42;
      a1[2] = v51;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      *(void *)float64x2_t v41 = v43;
      *((void *)v41 + 1) = 0;
      long long v42 = v41 + 24;
      *((void *)v41 + 2) = v44;
    }
    a1[1] = v42;
  }
  uint64_t v55 = *(void *)(a3 + 24);
  uint64_t v56 = *(void *)(a3 + 32) & 0x1FLL;
  unint64_t v57 = (unint64_t)a1[2];
  if ((unint64_t)v42 >= v57)
  {
    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v42 - *a1) >> 3);
    if (v59 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (void)*a1) >> 3);
    uint64_t v61 = 2 * v60;
    if (2 * v60 <= v59 + 1) {
      uint64_t v61 = v59 + 1;
    }
    if (v60 >= 0x555555555555555) {
      unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v62 = v61;
    }
    if (v62) {
      uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_cell<double>>>((uint64_t)(a1 + 2), v62);
    }
    else {
      uint64_t v63 = 0;
    }
    long long v64 = &v63[24 * v59];
    long long v65 = &v63[24 * v62];
    *(void *)long long v64 = v55;
    *((void *)v64 + 1) = 0;
    *((void *)v64 + 2) = v56;
    float64x2_t v58 = v64 + 24;
    long long v67 = *a1;
    uint64_t v66 = a1[1];
    if (v66 != *a1)
    {
      do
      {
        long long v68 = *(_OWORD *)(v66 - 24);
        *((void *)v64 - 1) = *((void *)v66 - 1);
        *(_OWORD *)(v64 - 24) = v68;
        v64 -= 24;
        v66 -= 24;
      }
      while (v66 != v67);
      uint64_t v66 = *a1;
    }
    *a1 = v64;
    a1[1] = v58;
    a1[2] = v65;
    if (v66) {
      operator delete(v66);
    }
  }
  else
  {
    *(void *)long long v42 = v55;
    *((void *)v42 + 1) = 0;
    float64x2_t v58 = v42 + 24;
    *((void *)v42 + 2) = v56;
  }
  a1[1] = v58;
  uint64_t v69 = *a1;
  *((void *)v14 - 6) = &(*a1)[24 * v6];
  double v70 = v14 - 48;
  *((void *)v27 - 6) = &v69[24 * v7];
  long long v71 = v27 - 48;
  *((void *)v70 + 2) = v71;
  *((void *)v71 + 2) = v70;
  return v70;
}

uint64_t boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_linear_edge<boost::polygon::detail::site_event<int>>(uint64_t a1, int *a2, int *a3)
{
  if (!boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_primary_edge<boost::polygon::detail::site_event<int>>(a1, a2, a3))return 1; {
  BOOL v6 = *a2 != a2[2] || a2[1] != a2[3];
  }
  BOOL v8 = *a3 != a3[2] || a3[1] != a3[3];
  return v6 ^ v8 ^ 1u;
}

uint64_t boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_primary_edge<boost::polygon::detail::site_event<int>>(uint64_t a1, int *a2, int *a3)
{
  int v4 = *a2;
  int v3 = a2[1];
  int v6 = a2[2];
  int v5 = a2[3];
  BOOL v8 = *a2 != v6 || v3 != v5;
  int v9 = *a3;
  int v10 = a3[2];
  if (*a3 == v10)
  {
    int v11 = a3[1];
    int v12 = a3[3];
    BOOL v13 = v11 != v12;
    if (v8 && v11 == v12)
    {
      BOOL v16 = v6 != v9 || v5 != v11;
      return (v4 != v9 || v3 != v11) && v16;
    }
  }
  else
  {
    BOOL v13 = 1;
  }
  if (v8 || !v13) {
    return 1;
  }
  if (v9 == v4 && a3[1] == v3) {
    return 0;
  }
  if (v10 != v4) {
    return 1;
  }
  return a3[3] != v3;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>> const,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  int v6 = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>(a1, a2, &v14, &v13, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x80uLL);
    long long v9 = a4[3];
    *((_OWORD *)v7 + 4) = a4[2];
    *((_OWORD *)v7 + 5) = v9;
    long long v10 = a4[5];
    *((_OWORD *)v7 + 6) = a4[4];
    *((_OWORD *)v7 + 7) = v10;
    long long v11 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v11;
    std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__insert_node_at(a1, v14, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  long long v9 = a1 + 1;
  if (a1 + 1 != a2
    && !boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()((uint64_t)(a1 + 3), a5, (uint64_t)(a2 + 4)))
  {
    if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()((uint64_t)(a1 + 3), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        unint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = a2;
      do
      {
        unint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()((uint64_t)(a1 + 3), a5, (uint64_t)(v15 + 4)))goto LABEL_28; {
      uint64_t v13 = *a4;
      }
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    int v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  long long v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      int v12 = v11;
      long long v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    BOOL v16 = a2;
    do
    {
      int v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      BOOL v16 = v12;
    }
    while (v17);
  }
  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()((uint64_t)(a1 + 3), (uint64_t)(v12 + 4), a5))goto LABEL_16; {
LABEL_28:
  }

  return std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>((uint64_t)a1, a3, a5);
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  double result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 24;
    do
    {
      while (1)
      {
        BOOL v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()(v7, a3, (uint64_t)(v4 + 4)))break; {
        int v4 = (void *)*v8;
        }
        int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()(v7, v9, a3))break; {
      int v5 = v8 + 1;
      }
      int v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    BOOL v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 56);
  if (v4 <= v5) {
    uint64_t v6 = 40;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v4 <= v5) {
    uint64_t v7 = a2 + 40;
  }
  else {
    uint64_t v7 = a2;
  }
  unint64_t v8 = *(void *)(a3 + 16);
  unint64_t v9 = *(void *)(a3 + 56);
  if (v8 <= v9) {
    uint64_t v10 = 40;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8 <= v9) {
    uint64_t v11 = a3 + 40;
  }
  else {
    uint64_t v11 = a3;
  }
  int v12 = *(_DWORD *)(a2 + v6);
  int v13 = *(_DWORD *)(v7 + 8);
  BOOL v14 = *(_DWORD *)(v7 + 4) < *(_DWORD *)(v7 + 12);
  if (v12 != v13) {
    BOOL v14 = v12 < v13;
  }
  if (v14)
  {
    int v13 = *(_DWORD *)(a2 + v6);
    unint64_t v15 = (int *)v7;
  }
  else
  {
    unint64_t v15 = (int *)(v7 + 8);
  }
  int v16 = *(_DWORD *)(v11 + 8);
  int v17 = *(_DWORD *)(a3 + v10);
  BOOL v18 = *(_DWORD *)(v11 + 4) < *(_DWORD *)(v11 + 12);
  if (v17 != v16) {
    BOOL v18 = v17 < v16;
  }
  if (!v18) {
    int v17 = *(_DWORD *)(v11 + 8);
  }
  if (v13 < v17)
  {
    if (v18) {
      long long v19 = (int *)v11;
    }
    else {
      long long v19 = (int *)(v11 + 8);
    }
    uint64_t v20 = a1 + 1;
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::operator()(v20, (int *)a2, (int *)(a2 + 40), v19);
  }
  if (v13 > v17) {
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::operator()(a1 + 1, (int *)a3, (int *)(a3 + 40), v15) ^ 1;
  }
  unint64_t v22 = *(void *)(v7 + 16);
  unint64_t v23 = *(void *)(v11 + 16);
  if (v22 == v23)
  {
    if (v4 == v5)
    {
      unint64_t v24 = *(unsigned int *)(a2 + 4);
    }
    else if (v4 > v5)
    {
      unint64_t v24 = *(unsigned int *)(a2 + 12) | 0x100000000;
    }
    else
    {
      unint64_t v24 = *(unsigned int *)(a2 + 44) | 0xFFFFFFFF00000000;
    }
    if (v8 == v9)
    {
      unint64_t v37 = *(unsigned int *)(a3 + 4);
    }
    else if (v8 > v9)
    {
      unint64_t v37 = *(unsigned int *)(a3 + 12) | 0x100000000;
    }
    else
    {
      unint64_t v37 = *(unsigned int *)(a3 + 44) | 0xFFFFFFFF00000000;
    }
    if ((int)v24 < (int)v37) {
      return 1;
    }
    return (int)v37 >= (int)v24 && SHIDWORD(v24) < SHIDWORD(v37);
  }
  if (v22 >= v23)
  {
    uint64_t v32 = (int *)(a2 + 44);
    if (v4 > v5) {
      uint64_t v32 = (int *)(a2 + 12);
    }
    if (v4 == v5) {
      uint64_t v32 = (int *)(a2 + 4);
    }
    int v33 = *v32;
    unint64_t comparison_y = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::get_comparison_y(a1, a3, 0);
    BOOL v35 = v33 < (int)comparison_y;
    if (v33 != comparison_y) {
      return v35;
    }
    BOOL v36 = *(_DWORD *)v11 != *(_DWORD *)(v11 + 8) || *(_DWORD *)(v11 + 4) != *(_DWORD *)(v11 + 12);
    return SHIDWORD(comparison_y) > 0 || v36;
  }
  else
  {
    int64_t v25 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::get_comparison_y(a1, a2, 0);
    unint64_t v26 = *(void *)(a3 + 16);
    unint64_t v27 = *(void *)(a3 + 56);
    uint64_t v28 = (int *)(a3 + 44);
    if (v26 > v27) {
      uint64_t v28 = (int *)(a3 + 12);
    }
    if (v26 == v27) {
      uint64_t v29 = (int *)(a3 + 4);
    }
    else {
      uint64_t v29 = v28;
    }
    int v30 = *v29;
    if (v30 == v25)
    {
      BOOL v31 = *(_DWORD *)v7 == *(_DWORD *)(v7 + 8) && *(_DWORD *)(v7 + 4) == *(_DWORD *)(v7 + 12);
      return v25 < 0 && v31;
    }
    else
    {
      return v30 > (int)v25;
    }
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::operator()(uint64_t a1, int *a2, int *a3, int *a4)
{
  unint64_t v4 = a2;
  if (*a2 == a2[2] && a2[1] == a2[3])
  {
    if (*a3 == a3[2] && a3[1] == a3[3]) {
      return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::pp(a1, a2, a3, a4);
    }
    int v6 = 0;
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ps(a1, a2, a3, a4, v6);
  }
  if (*a3 == a3[2] && a3[1] == a3[3])
  {
    a2 = a3;
    a3 = v4;
    int v6 = 1;
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ps(a1, a2, a3, a4, v6);
  }
  return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ss(a1, (uint64_t)a2, (uint64_t)a3, a4);
}

unint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>::get_comparison_y(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(a2 + 56);
  if (v3 == v4) {
    return *(unsigned int *)(a2 + 4);
  }
  if (v3 <= v4) {
    return *(unsigned int *)(a2 + 44) | 0xFFFFFFFF00000000;
  }
  if ((a3 & 1) != 0
    || *(_DWORD *)a2 != *(_DWORD *)(a2 + 8)
    || (uint64_t v6 = *(unsigned int *)(a2 + 4), v6 == *(_DWORD *)(a2 + 12)))
  {
    uint64_t v6 = *(unsigned int *)(a2 + 12);
  }
  return v6 | 0x100000000;
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::pp(uint64_t a1, int *a2, int *a3, int *a4)
{
  int v4 = *a2;
  int v5 = *a3;
  if (*a2 <= *a3)
  {
    if (v4 >= v5) {
      return a3[1] + (uint64_t)a2[1] < 2 * a4[1];
    }
    int v6 = a4[1];
    int v8 = a3[1];
    if (v6 < v8)
    {
      int v7 = a2[1];
      goto LABEL_8;
    }
    return 1;
  }
  else
  {
    int v6 = a4[1];
    int v7 = a2[1];
    if (v6 > v7)
    {
      int v8 = a3[1];
LABEL_8:
      double v9 = (double)v4;
      int v10 = *a4;
      return (((double)v7 - (double)v6) * ((double)v7 - (double)v6) + (v9 - (double)v10) * (v9 - (double)v10))
           / (v9 - (double)v10 + v9 - (double)v10) < (((double)v8 - (double)v6) * ((double)v8 - (double)v6)
                                                    + ((double)v5 - (double)v10) * ((double)v5 - (double)v10))
                                                   / ((double)v5 - (double)v10 + (double)v5 - (double)v10);
    }
    return 0;
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ps(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  int v10 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::fast_ps(a1, a2, a3, a4, a5);
  if (v10) {
    return v10 == -1;
  }
  double v12 = (double)*a2 - (double)*a4;
  double v13 = (((double)a2[1] - (double)a4[1]) * ((double)a2[1] - (double)a4[1]) + v12 * v12) / (v12 + v12);
  boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::find_distance_to_segment_arc(a1, a3, a4);
  return (v13 < v14) ^ a5;
}

BOOL boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::ss(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*(void *)(a2 + 16) == *(void *)(a3 + 16)) {
    return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>((int *)a2, (int *)(a2 + 8), a4) == 1;
  }
  boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::find_distance_to_segment_arc(a1, (int *)a2, a4);
  double v9 = v8;
  boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::find_distance_to_segment_arc(a1, (int *)a3, a4);
  return v9 < v10;
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::fast_ps(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(a3, a3 + 2, a4) == -1)
  {
    uint64_t v10 = a4[1];
    uint64_t v11 = a2[1];
    uint64_t v12 = a3[2];
    uint64_t v13 = *a3;
    if (v13 == v12)
    {
      if ((int)v10 >= (int)v11 || a5)
      {
        if ((int)v10 > (int)v11) {
          int v18 = a5;
        }
        else {
          int v18 = 0;
        }
        return (v18 << 31 >> 31);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      uint64_t v14 = *a4;
      uint64_t v15 = *a2;
      uint64_t v16 = a3[3];
      uint64_t v17 = a3[1];
      if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v12 - v13, v16 - v17, v14 - v15, v10 - v11) <= 0.0)
      {
        double v19 = (double)(int)v14 - (double)(int)v15;
        double v20 = (double)(int)v10 - (double)(int)v11;
        double v21 = (v20 - v19) * ((v19 + v20) * ((double)(int)v12 - (double)(int)v13));
        double v22 = v20 * (v19 * ((double)(int)v16 - (double)(int)v17 + (double)(int)v16 - (double)(int)v17));
        double v23 = v21;
        double v24 = v22;
        if (v21 >= 0.0) {
          *(void *)&double v23 = 0x8000000000000000 - *(void *)&v21;
        }
        if (v22 >= 0.0) {
          *(void *)&double v24 = 0x8000000000000000 - *(void *)&v22;
        }
        if (*(void *)&v23 - *(void *)&v24 <= 4uLL) {
          int v25 = 0;
        }
        else {
          int v25 = -1;
        }
        if (*(void *)&v23 > *(void *)&v24) {
          BOOL v26 = v25;
        }
        else {
          BOOL v26 = *(void *)&v24 - *(void *)&v23 > 4uLL;
        }
        BOOL v27 = v26;
        int v28 = v26 ^ a5;
        if (a5) {
          unsigned int v29 = -1;
        }
        else {
          unsigned int v29 = 1;
        }
        if ((v27 & v28) != 0) {
          return v29;
        }
        else {
          return 0;
        }
      }
      else if ((a3[8] & 0x20) != 0)
      {
        return a5 ^ 1u;
      }
      else
      {
        return (a5 << 31 >> 31);
      }
    }
  }
  else if ((a3[8] & 0x20) != 0)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::distance_predicate<boost::polygon::detail::site_event<int>>::find_distance_to_segment_arc(uint64_t a1, int *a2, int *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[2];
  if (v3 != v4) {
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v4 - v3, a2[3] - (uint64_t)a2[1], *a3 - v3, a3[1] - (uint64_t)a2[1]);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            double v9 = (uint64_t **)a2[2];
          }
          else
          {
            double v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *double v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *int v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = result + 16 * v4;
    int v7 = *(_DWORD *)(a2 - 16);
    int v8 = *(_DWORD *)(a2 - 12);
    int v6 = (_OWORD *)(a2 - 16);
    BOOL v9 = v8 < *(_DWORD *)(v5 + 4);
    BOOL v10 = v7 == *(_DWORD *)v5;
    BOOL v11 = v7 < *(_DWORD *)v5;
    if (v10) {
      BOOL v11 = v9;
    }
    if (v11)
    {
      long long v12 = *v6;
      uint64_t v13 = *(void *)v6;
      uint64_t v14 = HIDWORD(*(void *)v6);
      do
      {
        uint64_t v15 = v6;
        int v6 = (_OWORD *)v5;
        *uint64_t v15 = *(void *)v5;
        v15[1] = *(void *)(v5 + 8);
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = result + 16 * v4;
        BOOL v16 = *(_DWORD *)v5 > (int)v13;
        if (*(_DWORD *)v5 == v13) {
          BOOL v16 = *(_DWORD *)(v5 + 4) > (int)v14;
        }
      }
      while (v16);
      *int v6 = v12;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__emplace_hint_unique_key_args<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::pair<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  int v6 = std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__find_equal<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>(a1, a2, &v14, &v13, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x80uLL);
    long long v9 = a4[3];
    *((_OWORD *)v7 + 4) = a4[2];
    *((_OWORD *)v7 + 5) = v9;
    long long v10 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v10;
    long long v11 = a4[5];
    *((_OWORD *)v7 + 6) = a4[4];
    *((_OWORD *)v7 + 7) = v11;
    std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__insert_node_at(a1, v14, v8, v7);
  }
  return v7;
}

uint64_t boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::activate_circle_event(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  BYTE8(v11) = 1;
  uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::operator()(a1 + 160, a2, a3, a4, (uint64_t)&v10);
  if (result)
  {
    v8[0] = v10;
    v8[1] = v11;
    uint64_t v9 = a5;
    uint64_t result = boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::push((char **)(a1 + 72), (uint64_t)v8);
    *(void *)(a5 + 112) = result;
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::end_point_comparison &,std::__wrap_iter<std::pair<boost::polygon::detail::point_2d<int>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>> *>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = (uint64_t)&a1[2 * v3 + 2];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      int v9 = *(_DWORD *)(v6 + 16);
      BOOL v10 = v9 == *(_DWORD *)v6;
      BOOL v11 = v9 < *(_DWORD *)v6;
      if (v10) {
        BOOL v11 = *(_DWORD *)(v6 + 20) < *(_DWORD *)(v6 + 4);
      }
      if (v11)
      {
        v6 += 16;
        uint64_t v7 = v8;
      }
    }
    *a1 = *(void *)v6;
    a1[1] = *(void *)(v6 + 8);
    a1 = (void *)v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t *std::__tree<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__map_value_compare<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::node_comparison_predicate<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>>,false>,std::allocator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    uint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      BOOL v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        BOOL v16 = v7;
      }
      else
      {
        uint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      double v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      _OWORD v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *double v24 = v23;
      goto LABEL_72;
    }
    BOOL v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  double v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  double v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    double v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *double v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    double v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  double v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  _OWORD v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::operator()(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (int *)a4;
  uint64_t v7 = a3;
  int v8 = (int *)a2;
  if (*(_DWORD *)a2 == *(_DWORD *)(a2 + 8))
  {
    int v10 = *(_DWORD *)(a2 + 4);
    if (v10 == *(_DWORD *)(a2 + 12))
    {
      int v11 = a3[2];
      if (*a3 == v11 && a3[1] == a3[3])
      {
        if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8) && *(_DWORD *)(a4 + 4) == *(_DWORD *)(a4 + 12))
        {
          if (boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>((int *)a2, a3, (int *)a4) == -1)
          {
            boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::ppp(a1 + 4, v8, v7, v6, a5);
LABEL_39:
            if (!boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::lies_outside_vertical_segment(a1, a5, (uint64_t)v8)&& !boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::lies_outside_vertical_segment(a1, a5, (uint64_t)v7))
            {
              return !boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::lies_outside_vertical_segment(a1, a5, (uint64_t)v6);
            }
            return 0;
          }
          return 0;
        }
        uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pps(a1 + 2, (int *)a2, a3, (int *)a4, 3);
        if (!result) {
          return result;
        }
        uint64_t v13 = a1 + 4;
        a2 = (uint64_t)v8;
        uint64_t v14 = v7;
        uint64_t v15 = v6;
        uint64_t v16 = 3;
LABEL_38:
        boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pps(v13, (int *)a2, v14, v15, v16, a5);
        goto LABEL_39;
      }
      if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8))
      {
        int v21 = *(_DWORD *)(a4 + 4);
        if (v21 == *(_DWORD *)(a4 + 12))
        {
          if (*a3 == *(_DWORD *)a2 && v11 == *(_DWORD *)a4 && a3[1] == v10 && a3[3] == v21) {
            return 0;
          }
          uint64_t v13 = a1 + 4;
          uint64_t v14 = (int *)a4;
          uint64_t v15 = v7;
          uint64_t v16 = 2;
          goto LABEL_38;
        }
      }
      if (*((void *)a3 + 2) == *(void *)(a4 + 16)) {
        return 0;
      }
      uint64_t v17 = a1 + 4;
      uint64_t v18 = 1;
LABEL_35:
      boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pss(v17, (int *)a2, a3, (int *)a4, v18, a5);
      goto LABEL_39;
    }
  }
  if (*a3 == a3[2] && a3[1] == a3[3])
  {
    if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8) && *(_DWORD *)(a4 + 4) == *(_DWORD *)(a4 + 12))
    {
      uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pps(a1 + 2, a3, (int *)a4, (int *)a2, 1);
      if (!result) {
        return result;
      }
      uint64_t v13 = a1 + 4;
      a2 = (uint64_t)v7;
      uint64_t v14 = v6;
      uint64_t v15 = v8;
      uint64_t v16 = 1;
      goto LABEL_38;
    }
    uint64_t result = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pss(a1 + 2, a3, a2, a4, 2);
    if (!result) {
      return result;
    }
    uint64_t v17 = a1 + 4;
    a2 = (uint64_t)v7;
    a3 = v8;
    a4 = (uint64_t)v6;
    uint64_t v18 = 2;
    goto LABEL_35;
  }
  if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 8) && *(_DWORD *)(a4 + 4) == *(_DWORD *)(a4 + 12))
  {
    if (*(void *)(a2 + 16) == *((void *)a3 + 2)) {
      return 0;
    }
    uint64_t v17 = a1 + 4;
    a2 = a4;
    a3 = v8;
    a4 = (uint64_t)v7;
    uint64_t v18 = 3;
    goto LABEL_35;
  }
  uint64_t v19 = *((void *)a3 + 2);
  if (*(void *)(a2 + 16) != v19 && v19 != *(void *)(a4 + 16))
  {
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sss(a1 + 4, (int *)a2, a3, (int *)a4, a5);
    goto LABEL_39;
  }
  return 0;
}

uint64_t boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::push(char **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 4;
  int v5 = operator new(0x38uLL);
  long long v6 = *(_OWORD *)(a2 + 16);
  v5[1] = *(_OWORD *)a2;
  v5[2] = v6;
  *((void *)v5 + 6) = *(void *)(a2 + 32);
  uint64_t v7 = a1[5];
  *(void *)int v5 = v4;
  *((void *)v5 + 1) = v7;
  *(void *)uint64_t v7 = v5;
  unint64_t v8 = (unint64_t)a1[2];
  a1[5] = (char *)v5;
  ++a1[6];
  uint64_t v9 = a1[1];
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = (v9 - *a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *>>>((uint64_t)(a1 + 2), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = v5;
    uint64_t v10 = (uint64_t)(v16 + 8);
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = *a1;
    }
    *a1 = v16;
    a1[1] = (char *)v10;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *(void *)uint64_t v9 = v5;
    uint64_t v10 = (uint64_t)(v9 + 8);
  }
  a1[1] = (char *)v10;
  uint64_t v21 = (uint64_t)*a1;
  __int16 v23 = *((_WORD *)a1 + 12);
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>(v21, v10, (uint64_t)&v23, (v10 - v21) >> 3);
  return (uint64_t)(a1[5] + 16);
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::ppp(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  double v13 = (double)(int)v9 - (double)(int)v11;
  uint64_t v14 = *a4;
  uint64_t v15 = a4[1];
  double v16 = (double)(int)v11 - (double)(int)v14;
  double v17 = (double)(int)v10 - (double)(int)v12;
  double v18 = (double)(int)v12 - (double)(int)v15;
  double v19 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v9 - v11, v11 - v14, v10 - v12, v12 - v15);
  double v20 = (double)*a2;
  double v21 = (double)*a3;
  double v22 = (double)*a4;
  double v23 = 0.5 / v19;
  double v24 = v20 + v21;
  double v25 = v21 + v22;
  double v26 = (double)a2[1];
  double v27 = (double)a3[1];
  double v28 = (double)a4[1];
  double v29 = v26 + v27;
  double v30 = v27 + v28;
  double v44 = v20 - v22;
  double v45 = v23;
  double v43 = v26 - v28;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  double v31 = v13 * v24;
  *(double *)&long long v47 = v18 * (v13 * v24);
  *((void *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v51, (double *)&v47);
  double v32 = v17 * v29;
  *(double *)&long long v47 = v18 * v32;
  *((void *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v51, (double *)&v47);
  double v33 = v16 * v25;
  *(double *)&long long v47 = v17 * v33;
  *((void *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v51, (double *)&v47);
  double v34 = v18 * v30;
  *(double *)&long long v47 = v17 * v34;
  *((void *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v51, (double *)&v47);
  *(double *)&long long v47 = v13 * v33;
  *((void *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v49, (double *)&v47);
  *(double *)&long long v47 = v13 * v34;
  *((void *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v49, (double *)&v47);
  *(double *)&long long v47 = v16 * v31;
  *((void *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v49, (double *)&v47);
  *(double *)&long long v47 = v16 * v32;
  *((void *)&v47 + 1) = 0x4000000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v49, (double *)&v47);
  long long v47 = v51;
  long long v48 = v52;
  v46[0] = sqrt((v17 * v17 + v13 * v13) * (v18 * v18 + v16 * v16) * (v43 * v43 + v44 * v44));
  v46[1] = 5.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v47, v46);
  double v35 = v45 * boost::polygon::detail::robust_fpt<double>::operator-((double *)&v51, (double *)&v52);
  double v36 = v45 * boost::polygon::detail::robust_fpt<double>::operator-((double *)&v49, (double *)&v50);
  double v37 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v47, (double *)&v48);
  *(double *)a5 = v35;
  *(double *)(a5 + 8) = v36;
  *(double *)(a5 + 16) = v45 * v37;
  *(unsigned char *)(a5 + 24) = 1;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v51, (double *)&v52);
  double v39 = v38;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v49, (double *)&v50);
  double v41 = v40;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v47, (double *)&v48);
  if (v39 > 64.0 || v41 > 64.0 || v42 > 64.0) {
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::ppp();
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pps(uint64_t a1, int *a2, int *a3, int *a4, int a5)
{
  if (a5 == 2)
  {
    if (*a4 == *a2 && a4[1] == a2[1] && a4[2] == *a3) {
      return a4[3] != a3[1];
    }
    return 1;
  }
  int v10 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(a2, a3, a4);
  int v11 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>(a2, a3, a4 + 2);
  if (a5 != 3)
  {
    if (a5 == 1 && *a2 >= *a3) {
      return v10 == -1;
    }
LABEL_12:
    if (v10 == -1) {
      return 1;
    }
    return v11 == -1;
  }
  if (*a3 < *a2) {
    goto LABEL_12;
  }
  return v11 == -1;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pps(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  double v14 = (double)(int)v12;
  uint64_t v15 = a4[2];
  uint64_t v16 = a4[3];
  uint64_t v18 = *a3;
  uint64_t v17 = a3[1];
  uint64_t v20 = *a2;
  uint64_t v19 = a2[1];
  double v21 = (double)(int)v17 - (double)(int)v19;
  double v71 = (double)(int)v20;
  double v72 = (double)(int)v15;
  double v22 = (double)(int)v18;
  double v23 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v16 - v13, v12 - v15, v18 - v20, v17 - v19);
  double v24 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[1] - (uint64_t)a4[3], *a4 - (uint64_t)a4[2], a4[3] - (uint64_t)a2[1], a4[2] - (uint64_t)*a2);
  v88[0] = v24;
  v88[1] = 1.0;
  double v25 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[1] - (uint64_t)a4[3], *a4 - (uint64_t)a4[2], a4[3] - (uint64_t)a3[1], a4[2] - (uint64_t)*a3);
  v87[1] = 1.0;
  uint64_t v26 = a2[1] - (uint64_t)a3[1];
  uint64_t v27 = *a2 - (uint64_t)*a3;
  uint64_t v28 = a4[2];
  uint64_t v29 = *a4;
  uint64_t v30 = a4[3] - (uint64_t)a4[1];
  v87[0] = v25;
  double v31 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v26, v27, v30, v28 - v29);
  double v32 = 1.0;
  long long v85 = 0u;
  *(_OWORD *)float64x2x4_t v86 = 0u;
  if (v31 == 0.0)
  {
    *(double *)&long long v83 = v23 / (v24 * 8.0);
    *((void *)&v83 + 1) = 0x4010000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v85, (double *)&v83);
    *(double *)&long long v83 = v24 / (v23 + v23);
    *((void *)&v83 + 1) = 0x4010000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v85, (double *)&v83);
  }
  else
  {
    *(double *)&long long v83 = v23 * v23;
    *((void *)&v83 + 1) = 0x4008000000000000;
    *(double *)&long long v81 = v31 * v31;
    *((void *)&v81 + 1) = 0x4008000000000000;
    double v32 = 1.0;
    *(double *)&long long v83 = sqrt(boost::polygon::detail::robust_fpt<double>::operator+((double *)&v83, (double *)&v81)* v24* v25)/ (v31* v31);
    *((double *)&v83 + 1) = (v33 + 1.0 + 1.0 + 1.0 + 1.0) * 0.5 + 1.0 + 3.0 + 1.0;
    if (a5 == 2) {
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v85, (double *)&v83);
    }
    else {
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v85, (double *)&v83);
    }
    *(double *)&long long v83 = v23 * boost::polygon::detail::robust_fpt<double>::operator+(v88, v87) / (v31 * (v31 + v31));
    *((double *)&v83 + 1) = v34 + 1.0 + 1.0 + 4.0 + 1.0;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v85, (double *)&v83);
  }
  double v35 = v14 - v72;
  double v36 = v71 - v22;
  long long v83 = 0u;
  long long v84 = 0u;
  double v37 = (double)*a2;
  int v38 = *a3;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = COERCE_UNSIGNED_INT64((v37 + (double)v38) * 0.5);
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v83, (double *)&v79);
  if (v21 >= 0.0)
  {
    double v39 = *((double *)&v85 + 1);
    double v40 = v21 * *(double *)&v85;
    double v41 = v86[1];
    double v42 = v21 * v86[0];
  }
  else
  {
    double v39 = v86[1];
    double v40 = -(v21 * v86[0]);
    double v41 = *((double *)&v85 + 1);
    double v42 = -(v21 * *(double *)&v85);
  }
  double v43 = (double)(int)v16 - (double)(int)v13;
  *(double *)&long long v79 = v40;
  *((double *)&v79 + 1) = v39 + 0.0 + 1.0;
  *(double *)&long long v80 = v42;
  *((double *)&v80 + 1) = v41 + 0.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v83, (double *)&v79);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v84, (double *)&v80);
  *(double *)&long long v79 = ((double)a2[1] + (double)a3[1]) * 0.5;
  *((void *)&v79 + 1) = 0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v81, (double *)&v79);
  if (v36 >= 0.0)
  {
    double v44 = *((double *)&v85 + 1);
    double v45 = v36 * *(double *)&v85;
    double v46 = v86[1];
    double v47 = v36 * v86[0];
  }
  else
  {
    double v44 = v86[1];
    double v45 = -(v36 * v86[0]);
    double v46 = *((double *)&v85 + 1);
    double v47 = -(v36 * *(double *)&v85);
  }
  *(double *)&long long v79 = v45;
  *((double *)&v79 + 1) = v44 + 0.0 + 1.0;
  *(double *)&long long v80 = v47;
  *((double *)&v80 + 1) = v46 + 0.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v81, (double *)&v79);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v82, (double *)&v80);
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = v83;
  long long v78 = v84;
  double v73 = v43 * (double)*a4;
  double v74 = 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v79, &v73);
  double v73 = v35 * (double)a4[1];
  double v74 = 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v79, &v73);
  if (v43 >= 0.0)
  {
    double v48 = *((double *)&v83 + 1);
    double v49 = v43 * *(double *)&v83;
    double v50 = *((double *)&v84 + 1);
    double v51 = v43 * *(double *)&v84;
  }
  else
  {
    double v48 = *((double *)&v84 + 1);
    double v49 = -(v43 * *(double *)&v84);
    double v50 = *((double *)&v83 + 1);
    double v51 = -(v43 * *(double *)&v83);
  }
  double v52 = sqrt(v35 * v35 + v43 * v43);
  double v73 = v49;
  double v74 = v48 + 0.0 + 1.0;
  double v75 = v51;
  double v76 = v50 + 0.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v79, &v73);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v80, &v75);
  if (v35 >= 0.0)
  {
    double v53 = *((double *)&v81 + 1);
    double v54 = v35 * *(double *)&v81;
    double v55 = *((double *)&v82 + 1);
    double v56 = v35 * *(double *)&v82;
  }
  else
  {
    double v53 = *((double *)&v82 + 1);
    double v54 = -(v35 * *(double *)&v82);
    double v55 = *((double *)&v81 + 1);
    double v56 = -(v35 * *(double *)&v81);
  }
  double v57 = v32 / v52;
  double v73 = v54;
  double v74 = v53 + 0.0 + 1.0;
  double v75 = v56;
  double v76 = v55 + 0.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v79, &v73);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v80, &v75);
  long long v58 = v79;
  double v60 = *((double *)&v80 + 1);
  double v59 = *(double *)&v80;
  if (*(double *)&v79 >= *(double *)&v80)
  {
    double v61 = *((double *)&v80 + 1);
    double v62 = *(double *)&v80;
    double v60 = *((double *)&v79 + 1);
    double v59 = *(double *)&v79;
  }
  else
  {
    long long v79 = v80;
    double v61 = *((double *)&v58 + 1);
    double v62 = *(double *)&v58;
    long long v80 = v58;
  }
  double v73 = v57 * v59;
  double v74 = v60 + 3.0 + 1.0;
  double v75 = v57 * v62;
  double v76 = v61 + 3.0 + 1.0;
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v77, &v73);
  boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v78, &v75);
  double v63 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v83, (double *)&v84);
  double v64 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v81, (double *)&v82);
  double v65 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v77, (double *)&v78);
  *(double *)a6 = v63;
  *(double *)(a6 + 8) = v64;
  *(double *)(a6 + 16) = v65;
  *(unsigned char *)(a6 + 24) = 1;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v83, (double *)&v84);
  double v67 = v66;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v81, (double *)&v82);
  double v69 = v68;
  boost::polygon::detail::robust_fpt<double>::operator-((double *)&v77, (double *)&v78);
  if (v67 > 64.0 || v69 > 64.0 || v70 > 64.0) {
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pps(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v67 > 64.0, v69 > 64.0, v70 > 64.0);
  }
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>::pss(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(void *)(a3 + 16) == *(void *)(a4 + 16)) {
    return 0;
  }
  if (a5 == 2)
  {
    uint64_t v6 = *(void *)(a4 + 32);
    if ((*(unsigned char *)(a3 + 32) & 0x20) == 0)
    {
      if ((v6 & 0x20) != 0) {
        return 0;
      }
      return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>((int *)a3, a2, (int *)(a4 + 8)) == -1;
    }
    if ((v6 & 0x20) != 0) {
      return boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::orientation_test::eval<boost::polygon::detail::point_2d<int>>((int *)a3, a2, (int *)(a4 + 8)) == -1;
    }
  }
  return 1;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pss(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v14 = a3[2];
  uint64_t v15 = a3[3];
  double v16 = (double)(int)v12 - (double)(int)v14;
  double v17 = (double)(int)v13 - (double)(int)v15;
  uint64_t v19 = a4[2];
  uint64_t v18 = a4[3];
  uint64_t v21 = *a4;
  uint64_t v20 = a4[1];
  double v22 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v13 - v15, v12 - v14, v18 - v20, v19 - v21);
  double v23 = v17 * v17;
  if (v22 == 0.0)
  {
    *(double *)&long long v118 = v23 + v16 * v16;
    *((void *)&v118 + 1) = 0x4000000000000000;
    double v24 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[1] - (uint64_t)a3[3], *a3 - (uint64_t)a3[2], a4[1] - (uint64_t)a3[3], *a4 - (uint64_t)a3[2]);
    double v25 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(*a3 - (uint64_t)a3[2], a3[1] - (uint64_t)a3[3], *a2 - (uint64_t)a3[2], a2[1] - (uint64_t)a3[3]);
    double v26 = v25
        * boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[1] - (uint64_t)a3[3], *a3 - (uint64_t)a3[2], a2[1] - (uint64_t)a4[1], *a2 - (uint64_t)*a4);
    long long v128 = 0u;
    *(_OWORD *)v129 = 0u;
    *(double *)&long long v126 = v16 * -((double)*a2 - ((double)a3[2] + (double)*a4) * 0.5);
    *((void *)&v126 + 1) = 0x3FF0000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v128, (double *)&v126);
    *(double *)&long long v126 = v17 * -((double)a2[1] - ((double)a3[3] + (double)a4[1]) * 0.5);
    *((void *)&v126 + 1) = 0x3FF0000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v128, (double *)&v126);
    *(void *)&long long v126 = sqrt(v26);
    *((void *)&v126 + 1) = 0x4004000000000000;
    if (a5 == 2) {
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v128, (double *)&v126);
    }
    else {
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v128, (double *)&v126);
    }
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator/=((double *)&v128, (double *)&v118);
    long long v126 = 0u;
    long long v127 = 0u;
    double v32 = (double)a3[2];
    int v33 = *a4;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = COERCE_UNSIGNED_INT64((v32 + (double)v33) * 0.5);
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v126, (double *)&v122);
    if (v16 >= 0.0)
    {
      double v34 = *((double *)&v128 + 1);
      double v35 = v16 * *(double *)&v128;
      double v36 = v129[1];
      double v37 = v16 * v129[0];
    }
    else
    {
      double v34 = v129[1];
      double v35 = -(v16 * v129[0]);
      double v36 = *((double *)&v128 + 1);
      double v37 = -(v16 * *(double *)&v128);
    }
    *(double *)&long long v122 = v35;
    *((double *)&v122 + 1) = v34 + 0.0 + 1.0;
    *(double *)&long long v123 = v37;
    *((double *)&v123 + 1) = v36 + 0.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v122);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v123);
    *(double *)&long long v122 = ((double)a3[3] + (double)a4[1]) * 0.5;
    *((void *)&v122 + 1) = 0;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v124, (double *)&v122);
    if (v17 >= 0.0)
    {
      double v38 = *((double *)&v128 + 1);
      double v39 = v17 * *(double *)&v128;
      double v40 = v129[1];
      double v41 = v17 * v129[0];
    }
    else
    {
      double v38 = v129[1];
      double v39 = -(v17 * v129[0]);
      double v40 = *((double *)&v128 + 1);
      double v41 = -(v17 * *(double *)&v128);
    }
    *(double *)&long long v122 = v39;
    *((double *)&v122 + 1) = v38 + 0.0 + 1.0;
    *(double *)&long long v123 = v41;
    *((double *)&v123 + 1) = v40 + 0.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v124, (double *)&v122);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v125, (double *)&v123);
    long long v122 = v126;
    long long v123 = v127;
    *(double *)&long long v116 = v24 * 0.5 / sqrt(*(double *)&v118);
    *((double *)&v116 + 1) = *((double *)&v118 + 1) * 0.5 + 1.0 + 2.0 + 1.0;
    if (v24 >= 0.0) {
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v122, (double *)&v116);
    }
    else {
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v122, (double *)&v116);
    }
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v126, (double *)&v127);
    double v43 = v42;
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v124, (double *)&v125);
    double v45 = v44;
    double v46 = (double *)&v123;
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v122, (double *)&v123);
    double v48 = v47;
    double v49 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v126, (double *)&v127);
    double v50 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v124, (double *)&v125);
    double v51 = (double *)&v122;
  }
  else
  {
    double v27 = (double)(int)v19 - (double)(int)v21;
    double v28 = sqrt(v23 + v16 * v16);
    double v108 = (double)(int)v18 - (double)(int)v20;
    double v29 = sqrt(v108 * v108 + v27 * v27);
    double v30 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(*a3 - (uint64_t)a3[2], a3[1] - (uint64_t)a3[3], a4[1] - (uint64_t)a4[3], a4[2] - (uint64_t)*a4);
    double v120 = v30;
    double v121 = 1.0;
    double v109 = v29;
    double v106 = v28;
    *(double *)&long long v128 = v28 * v29;
    *((void *)&v128 + 1) = 0x4014000000000000;
    if (v30 < 0.0)
    {
      double v120 = v22 * v22 / boost::polygon::detail::robust_fpt<double>::operator-((double *)&v128, &v120);
      double v121 = v31 + 3.0 + 1.0;
    }
    else
    {
      boost::polygon::detail::robust_fpt<double>::operator+=(&v120, (double *)&v128);
    }
    double v104 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[1] - (uint64_t)a3[3], *a3 - (uint64_t)a3[2], a3[1] - (uint64_t)a2[1], *a3 - (uint64_t)*a2);
    double v105 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1], a4[2] - (uint64_t)*a2, a4[3] - (uint64_t)a2[1]);
    double v103 = v120;
    double v52 = v121 + 0.0 + 1.0 + 1.0;
    double v53 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[1] - (uint64_t)a3[3], *a3 - (uint64_t)a3[2], a3[1], *a3);
    double v54 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1], a4[2], a4[3]);
    double v107 = v22;
    double v55 = 1.0 / v22;
    long long v128 = 0u;
    *(_OWORD *)v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    *(double *)&long long v118 = v55 * (v27 * v53);
    *((void *)&v118 + 1) = 0x4014000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v124, (double *)&v118);
    *(double *)&long long v118 = v55 * (v16 * v54);
    *((void *)&v118 + 1) = 0x4014000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v124, (double *)&v118);
    *(double *)&long long v118 = v55 * (v17 * v54);
    *((void *)&v118 + 1) = 0x4014000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v122, (double *)&v118);
    *(double *)&long long v118 = v55 * (v108 * v53);
    *((void *)&v118 + 1) = 0x4014000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v122, (double *)&v118);
    double v56 = v16 * v109;
    if (v56 >= 0.0)
    {
      double v57 = *((double *)&v124 + 1);
      double v58 = *(double *)&v124;
      double v59 = *((double *)&v125 + 1);
      double v60 = *(double *)&v125;
    }
    else
    {
      double v57 = *((double *)&v125 + 1);
      double v58 = -*(double *)&v125;
      double v59 = *((double *)&v124 + 1);
      double v60 = -*(double *)&v124;
    }
    double v61 = v52 + 1.0;
    *(double *)&long long v118 = v56 * v58;
    *((double *)&v118 + 1) = v57 + 3.0 + 1.0;
    *(double *)&long long v119 = v56 * v60;
    *((double *)&v119 + 1) = v59 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v119);
    double v62 = v27 * v106;
    if (v27 * v106 >= 0.0)
    {
      double v63 = *((double *)&v124 + 1);
      double v64 = *(double *)&v124;
      double v65 = *((double *)&v125 + 1);
      double v66 = *(double *)&v125;
    }
    else
    {
      double v63 = *((double *)&v125 + 1);
      double v64 = -*(double *)&v125;
      double v65 = *((double *)&v124 + 1);
      double v66 = -*(double *)&v124;
    }
    double v67 = v61 + 1.0;
    *(double *)&long long v118 = v62 * v64;
    *((double *)&v118 + 1) = v63 + 3.0 + 1.0;
    *(double *)&long long v119 = v62 * v66;
    *((double *)&v119 + 1) = v65 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v119);
    double v68 = v17 * v109;
    if (v17 * v109 >= 0.0)
    {
      double v69 = *((double *)&v122 + 1);
      double v70 = *(double *)&v122;
      double v71 = *((double *)&v123 + 1);
      double v72 = *(double *)&v123;
    }
    else
    {
      double v69 = *((double *)&v123 + 1);
      double v70 = -*(double *)&v123;
      double v71 = *((double *)&v122 + 1);
      double v72 = -*(double *)&v122;
    }
    *(double *)&long long v118 = v68 * v70;
    *((double *)&v118 + 1) = v69 + 3.0 + 1.0;
    *(double *)&long long v119 = v68 * v72;
    *((double *)&v119 + 1) = v71 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v119);
    double v73 = v106 * v108;
    if (v106 * v108 >= 0.0)
    {
      double v74 = *((double *)&v122 + 1);
      double v75 = *(double *)&v122;
      double v76 = *((double *)&v123 + 1);
      double v77 = *(double *)&v123;
    }
    else
    {
      double v74 = *((double *)&v123 + 1);
      double v75 = -*(double *)&v123;
      double v76 = *((double *)&v122 + 1);
      double v77 = -*(double *)&v122;
    }
    *(double *)&long long v118 = v73 * v75;
    *((double *)&v118 + 1) = v74 + 3.0 + 1.0;
    *(double *)&long long v119 = v73 * v77;
    *((double *)&v119 + 1) = v76 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v127, (double *)&v119);
    *(double *)&long long v118 = v106
                     * boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1], -(uint64_t)a2[1], *a2);
    *((void *)&v118 + 1) = 0x4010000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v126, (double *)&v118);
    *(double *)&long long v118 = v109
                     * boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(*a3 - (uint64_t)a3[2], a3[1] - (uint64_t)a3[3], -(uint64_t)a2[1], *a2);
    *((void *)&v118 + 1) = 0x4010000000000000;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v126, (double *)&v118);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v128, (double *)&v127);
    boost::polygon::detail::robust_fpt<double>::operator+=(v129, (double *)&v126);
    *(void *)&long long v118 = sqrt(v105 * (v104 * (v103 + v103)));
    *((double *)&v118 + 1) = (v67 + 1.0) * 0.5 + 1.0;
    if (a5 == 2) {
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v128, (double *)&v118);
    }
    else {
      boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v128, (double *)&v118);
    }
    *(double *)&long long v118 = v120 * v120;
    *((double *)&v118 + 1) = v121 + v121 + 1.0;
    boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator/=((double *)&v128, (double *)&v118);
    long long v118 = v124;
    long long v119 = v125;
    long long v116 = v122;
    long long v117 = v123;
    if (v56 >= 0.0)
    {
      double v78 = *((double *)&v128 + 1);
      double v79 = *(double *)&v128;
      double v80 = v129[1];
      double v81 = v129[0];
    }
    else
    {
      double v78 = v129[1];
      double v79 = -v129[0];
      double v80 = *((double *)&v128 + 1);
      double v81 = -*(double *)&v128;
    }
    *(double *)&long long v114 = v56 * v79;
    *((double *)&v114 + 1) = v78 + 3.0 + 1.0;
    *(double *)&long long v115 = v56 * v81;
    *((double *)&v115 + 1) = v80 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v118, (double *)&v114);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v119, (double *)&v115);
    if (v62 >= 0.0)
    {
      double v82 = *((double *)&v128 + 1);
      double v83 = *(double *)&v128;
      double v84 = v129[1];
      double v85 = v129[0];
    }
    else
    {
      double v82 = v129[1];
      double v83 = -v129[0];
      double v84 = *((double *)&v128 + 1);
      double v85 = -*(double *)&v128;
    }
    *(double *)&long long v114 = v62 * v83;
    *((double *)&v114 + 1) = v82 + 3.0 + 1.0;
    *(double *)&long long v115 = v62 * v85;
    *((double *)&v115 + 1) = v84 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v118, (double *)&v114);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v119, (double *)&v115);
    if (v68 >= 0.0)
    {
      double v86 = *((double *)&v128 + 1);
      double v87 = *(double *)&v128;
      double v88 = v129[1];
      double v89 = v129[0];
    }
    else
    {
      double v86 = v129[1];
      double v87 = -v129[0];
      double v88 = *((double *)&v128 + 1);
      double v89 = -*(double *)&v128;
    }
    *(double *)&long long v114 = v68 * v87;
    *((double *)&v114 + 1) = v86 + 3.0 + 1.0;
    *(double *)&long long v115 = v68 * v89;
    *((double *)&v115 + 1) = v88 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v116, (double *)&v114);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v117, (double *)&v115);
    if (v73 >= 0.0)
    {
      double v90 = *((double *)&v128 + 1);
      double v91 = *(double *)&v128;
      double v92 = v129[1];
      double v93 = v129[0];
    }
    else
    {
      double v90 = v129[1];
      double v91 = -v129[0];
      double v92 = *((double *)&v128 + 1);
      double v93 = -*(double *)&v128;
    }
    *(double *)&long long v114 = v73 * v91;
    *((double *)&v114 + 1) = v90 + 3.0 + 1.0;
    *(double *)&long long v115 = v73 * v93;
    *((double *)&v115 + 1) = v92 + 3.0 + 1.0;
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v116, (double *)&v114);
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v117, (double *)&v115);
    double v94 = *(double *)&v128;
    double v95 = v129[0];
    if (*(double *)&v128 >= v129[0])
    {
      double v97 = v129[0];
      double v95 = *(double *)&v128;
    }
    else
    {
      double v96 = *((double *)&v128 + 1);
      long long v128 = *(_OWORD *)v129;
      v129[0] = v94;
      v129[1] = v96;
      double v97 = v94;
    }
    long long v114 = v118;
    long long v115 = v119;
    if (v107 >= 0.0)
    {
      double v110 = v107 * v95;
      double v111 = *((double *)&v128 + 1) + 1.0 + 1.0;
      double v112 = v107 * v97;
      double v113 = v129[1] + 1.0 + 1.0;
      boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v114, &v110);
      v98 = &v112;
    }
    else
    {
      double v110 = -(v97 * v107);
      double v111 = v129[1] + 1.0 + 1.0;
      double v112 = -(v95 * v107);
      double v113 = *((double *)&v128 + 1) + 1.0 + 1.0;
      boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v114, &v112);
      v98 = &v110;
    }
    boost::polygon::detail::robust_fpt<double>::operator+=((double *)&v115, v98);
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v118, (double *)&v119);
    double v43 = v99;
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v116, (double *)&v117);
    double v45 = v100;
    double v46 = (double *)&v115;
    boost::polygon::detail::robust_fpt<double>::operator-((double *)&v114, (double *)&v115);
    double v48 = v101;
    double v49 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v118, (double *)&v119);
    double v50 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v116, (double *)&v117);
    double v51 = (double *)&v114;
  }
  double v102 = boost::polygon::detail::robust_fpt<double>::operator-(v51, v46);
  *(double *)a6 = v49;
  *(double *)(a6 + 8) = v50;
  *(double *)(a6 + 16) = v102;
  *(unsigned char *)(a6 + 24) = 1;
  if (v43 > 64.0 || v45 > 64.0 || v48 > 64.0) {
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pss(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, v43 > 64.0, v45 > 64.0, v48 > 64.0);
  }
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sss(uint64_t a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  double v13 = (double)(int)v9 - (double)(int)v11;
  double v56 = v13;
  double v14 = (double)(int)v10 - (double)(int)v12;
  double v58 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v11, v12, v9, v10);
  uint64_t v15 = a3[2];
  uint64_t v16 = a3[3];
  uint64_t v17 = *a3;
  uint64_t v18 = a3[1];
  double v19 = (double)(int)v15 - (double)(int)v17;
  double v54 = v19;
  double v20 = (double)(int)v16 - (double)(int)v18;
  double v57 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v17, v18, v15, v16);
  uint64_t v21 = a4[2];
  uint64_t v22 = a4[3];
  uint64_t v23 = *a4;
  uint64_t v24 = a4[1];
  double v25 = (double)(int)v21 - (double)(int)v23;
  double v55 = v25;
  double v26 = (double)(int)v22 - (double)(int)v24;
  double v53 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(v23, v24, v21, v22);
  *(double *)&long long v72 = v13 * v13;
  *((void *)&v72 + 1) = 0x3FF0000000000000;
  *(double *)double v71 = v14 * v14;
  *((void *)&v71[0] + 1) = 0x3FF0000000000000;
  double v27 = boost::polygon::detail::robust_fpt<double>::operator+((double *)&v72, (double *)v71);
  double v63 = v28 * 0.5 + 1.0;
  *(double *)&long long v72 = v19 * v19;
  *((void *)&v72 + 1) = 0x3FF0000000000000;
  *(double *)double v71 = v20 * v20;
  *((void *)&v71[0] + 1) = 0x3FF0000000000000;
  double v60 = sqrt(v27);
  double v29 = boost::polygon::detail::robust_fpt<double>::operator+((double *)&v72, (double *)v71);
  *(double *)&long long v72 = v25 * v25;
  *((void *)&v72 + 1) = 0x3FF0000000000000;
  *(double *)double v71 = v26 * v26;
  *((void *)&v71[0] + 1) = 0x3FF0000000000000;
  double v61 = sqrt(v29);
  double v62 = v30 * 0.5 + 1.0;
  double v31 = boost::polygon::detail::robust_fpt<double>::operator+((double *)&v72, (double *)v71);
  double v33 = v32 * 0.5 + 1.0;
  double v59 = sqrt(v31);
  double v34 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a2[2] - (uint64_t)*a2, a2[3] - (uint64_t)a2[1], a3[2] - (uint64_t)*a3, a3[3] - (uint64_t)a3[1]);
  double v35 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a3[2] - (uint64_t)*a3, a3[3] - (uint64_t)a3[1], a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1]);
  double v36 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::robust_cross_product(a4[2] - (uint64_t)*a4, a4[3] - (uint64_t)a4[1], a2[2] - (uint64_t)*a2, a2[3] - (uint64_t)a2[1]);
  long long v72 = 0u;
  long long v73 = 0u;
  *(double *)double v71 = v59 * v34;
  *((double *)v71 + 1) = v33 + 1.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v72, (double *)v71);
  *(double *)double v71 = v60 * v35;
  *((double *)v71 + 1) = v63 + 1.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v72, (double *)v71);
  *(double *)double v71 = v61 * v36;
  *((double *)v71 + 1) = v62 + 1.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v72, (double *)v71);
  memset(v71, 0, sizeof(v71));
  *(double *)&long long v69 = v53 * v34;
  *((void *)&v69 + 1) = 0x4008000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)v71, (double *)&v69);
  *(double *)&long long v69 = v58 * v35;
  *((void *)&v69 + 1) = 0x4008000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)v71, (double *)&v69);
  *(double *)&long long v69 = v57 * v36;
  *((void *)&v69 + 1) = 0x4008000000000000;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)v71, (double *)&v69);
  long long v69 = 0u;
  long long v70 = 0u;
  *(double *)&long long v67 = v56 * v57 * v59;
  *((double *)&v67 + 1) = v33 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v69, (double *)&v67);
  *(double *)&long long v67 = v58 * v54 * v59;
  *((double *)&v67 + 1) = v33 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v69, (double *)&v67);
  *(double *)&long long v67 = v54 * v53 * v60;
  *((double *)&v67 + 1) = v63 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v69, (double *)&v67);
  *(double *)&long long v67 = v57 * v55 * v60;
  *((double *)&v67 + 1) = v63 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v69, (double *)&v67);
  *(double *)&long long v67 = v58 * v55 * v61;
  *((double *)&v67 + 1) = v62 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v69, (double *)&v67);
  *(double *)&long long v67 = v56 * v53 * v61;
  *((double *)&v67 + 1) = v62 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v69, (double *)&v67);
  long long v67 = 0u;
  long long v68 = 0u;
  double v64 = v14 * v57 * v59;
  double v65 = v33 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v67, &v64);
  double v64 = v58 * v20 * v59;
  double v65 = v33 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v67, &v64);
  double v64 = v20 * v53 * v60;
  double v65 = v63 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v67, &v64);
  double v64 = v57 * v26 * v60;
  double v65 = v63 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v67, &v64);
  double v64 = v58 * v26 * v61;
  double v65 = v62 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=((double *)&v67, &v64);
  double v64 = v14 * v53 * v61;
  double v65 = v62 + 2.0 + 1.0;
  boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=((double *)&v67, &v64);
  double v64 = boost::polygon::detail::operator+<boost::polygon::detail::robust_fpt<double>>(&v69, v71);
  double v65 = v37;
  v66[0] = v38;
  v66[1] = v39;
  double v40 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v72, (double *)&v73);
  double v42 = v41;
  double v43 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v69, (double *)&v70);
  double v45 = v42 + v44 + 1.0;
  double v46 = v43 / v40;
  double v47 = boost::polygon::detail::robust_fpt<double>::operator-((double *)&v67, (double *)&v68);
  double v49 = v42 + v48 + 1.0;
  double v50 = v47 / v40;
  double v52 = boost::polygon::detail::robust_fpt<double>::operator-(&v64, v66) / v40;
  *(double *)a5 = v46;
  *(double *)(a5 + 8) = v50;
  *(double *)(a5 + 16) = v52;
  *(unsigned char *)(a5 + 24) = 1;
  if (v45 > 64.0 || v49 > 64.0 || v42 + v51 + 1.0 > 64.0) {
    boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sss();
  }
}

BOOL boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_formation_predicate<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::circle_existence_predicate<boost::polygon::detail::site_event<int>>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::lazy_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>>::lies_outside_vertical_segment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a3 != *(_DWORD *)(a3 + 8)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a3 + 4);
  if (v3 == *(_DWORD *)(a3 + 12)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a3 + 32);
  if ((v5 & 0x20) != 0) {
    int v6 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v6 = *(_DWORD *)(a3 + 4);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7 >= 0) {
    uint64_t v7 = 0x8000000000000000 - v7;
  }
  if (v6 >= 0) {
    *(void *)&double v8 = 0x8000000000000000 - COERCE__INT64((double)v6);
  }
  else {
    double v8 = (double)v6;
  }
  BOOL v9 = (unint64_t)v7 >= *(void *)&v8;
  unint64_t v10 = v7 - *(void *)&v8;
  if (v10 != 0 && v9 && v10 > 0x40) {
    return 1;
  }
  if ((v5 & 0x20) == 0) {
    int v3 = *(_DWORD *)(a3 + 12);
  }
  if (v3 >= 0) {
    *(void *)&double v11 = 0x8000000000000000 - COERCE__INT64((double)v3);
  }
  else {
    double v11 = (double)v3;
  }
  BOOL v9 = *(void *)&v11 >= (unint64_t)v7;
  unint64_t v12 = *(void *)&v11 - v7;
  return v9 && v12 > 0x40;
}

double *boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator+=(double *a1, double *a2)
{
  if (*a2 >= 0.0) {
    boost::polygon::detail::robust_fpt<double>::operator+=(a1, a2);
  }
  else {
    boost::polygon::detail::robust_fpt<double>::operator-=(a1 + 2, a2);
  }
  return a1;
}

double *boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator-=(double *a1, double *a2)
{
  if (*a2 >= 0.0) {
    boost::polygon::detail::robust_fpt<double>::operator+=(a1 + 2, a2);
  }
  else {
    boost::polygon::detail::robust_fpt<double>::operator-=(a1, a2);
  }
  return a1;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::ppp()
{
  MEMORY[0x270FA5388]();
  int v4 = v3;
  int v6 = v5;
  char v8 = v7;
  uint64_t v10 = v9;
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v11 = *v0;
  uint64_t v12 = *v1;
  uint64_t v13 = v11 - v12;
  if (v11 > v12)
  {
    int v14 = 1;
LABEL_3:
    v95[0] = v13;
    goto LABEL_6;
  }
  if (v13 < 0)
  {
    uint64_t v13 = v12 - v11;
    int v14 = -1;
    goto LABEL_3;
  }
  int v14 = 0;
LABEL_6:
  int v96 = v14;
  uint64_t v15 = *v2;
  uint64_t v16 = v12 - v15;
  if (v12 > v15)
  {
    int v17 = 1;
LABEL_8:
    v97[0] = v16;
    goto LABEL_11;
  }
  if (v16 < 0)
  {
    uint64_t v16 = v15 - v12;
    int v17 = -1;
    goto LABEL_8;
  }
  int v17 = 0;
LABEL_11:
  int v98 = v17;
  uint64_t v18 = v11 - v15;
  if (v11 > v15)
  {
    int v19 = 1;
LABEL_13:
    v99[0] = v18;
    goto LABEL_16;
  }
  if (v18 < 0)
  {
    uint64_t v18 = v15 - v11;
    int v19 = -1;
    goto LABEL_13;
  }
  int v19 = 0;
LABEL_16:
  int v100 = v19;
  uint64_t v20 = v0[1];
  uint64_t v21 = v1[1];
  uint64_t v22 = v20 - v21;
  if (v20 > v21)
  {
    int v23 = 1;
LABEL_18:
    *(void *)double v89 = v22;
    goto LABEL_21;
  }
  if (v22 < 0)
  {
    uint64_t v22 = v21 - v20;
    int v23 = -1;
    goto LABEL_18;
  }
  int v23 = 0;
LABEL_21:
  int v90 = v23;
  uint64_t v24 = v2[1];
  uint64_t v25 = v21 - v24;
  if (v21 > v24)
  {
    int v26 = 1;
LABEL_23:
    v91[0] = v25;
    goto LABEL_26;
  }
  if (v25 < 0)
  {
    uint64_t v25 = v24 - v21;
    int v26 = -1;
    goto LABEL_23;
  }
  int v26 = 0;
LABEL_26:
  int v92 = v26;
  uint64_t v27 = v20 - v24;
  if (v20 > v24)
  {
    int v28 = 1;
LABEL_28:
    *(void *)double v93 = v27;
    goto LABEL_31;
  }
  if (v27 < 0)
  {
    uint64_t v27 = v24 - v20;
    int v28 = -1;
    goto LABEL_28;
  }
  int v28 = 0;
LABEL_31:
  int v94 = v28;
  uint64_t v29 = v12 + v11;
  if (v29 < 1)
  {
    if (v29 < 0)
    {
      v85[0] = -v29;
      if ((unint64_t)-v29 >> 32) {
        int v30 = -2;
      }
      else {
        int v30 = -1;
      }
    }
    else
    {
      int v30 = 0;
    }
  }
  else
  {
    v85[0] = v29;
    int v30 = 1;
  }
  int v86 = v30;
  uint64_t v31 = v15 + v12;
  if (v31 < 1)
  {
    if (v31 < 0)
    {
      v87[0] = -v31;
      if ((unint64_t)-v31 >> 32) {
        int v32 = -2;
      }
      else {
        int v32 = -1;
      }
    }
    else
    {
      int v32 = 0;
    }
  }
  else
  {
    v87[0] = v31;
    int v32 = 1;
  }
  int v88 = v32;
  uint64_t v33 = v21 + v20;
  if (v21 + v20 < 1)
  {
    if (v33 < 0)
    {
      v81[0] = -v33;
      if ((unint64_t)-v33 >> 32) {
        int v34 = -2;
      }
      else {
        int v34 = -1;
      }
    }
    else
    {
      int v34 = 0;
    }
  }
  else
  {
    v81[0] = v21 + v20;
    int v34 = 1;
  }
  int v82 = v34;
  uint64_t v35 = v24 + v21;
  if (v24 + v21 < 1)
  {
    if (v35 < 0)
    {
      v83[0] = -v35;
      if ((unint64_t)-v35 >> 32) {
        int v36 = -2;
      }
      else {
        int v36 = -1;
      }
    }
    else
    {
      int v36 = 0;
    }
  }
  else
  {
    v83[0] = v24 + v21;
    int v36 = 1;
  }
  int v84 = v36;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, (unsigned int *)v95, (uint64_t)v91);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v78, (unsigned int *)v97, (uint64_t)v89);
  boost::polygon::detail::extended_int<64ul>::dif (__dst, __src, (int *)v78);
  boost::polygon::detail::extended_int<64ul>::p(__dst, v37, v38);
  double v41 = 0.5 / ldexp(v39, v40);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, (unsigned int *)v95, (uint64_t)v85);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v78, v89, (uint64_t)v81);
  boost::polygon::detail::extended_int<64ul>::add(__dst, __src, v78);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v78, (unsigned int *)v97, (uint64_t)v87);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v77, (unsigned int *)v91, (uint64_t)v83);
  boost::polygon::detail::extended_int<64ul>::add(__src, v78, v77);
  if ((v8 & 1) != 0 || v4)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v77, __dst, (uint64_t)v91);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v76, __src, (uint64_t)v89);
    boost::polygon::detail::extended_int<64ul>::dif (v78, v77, (int *)v76);
    boost::polygon::detail::extended_int<64ul>::p(v78, v42, v43);
    *(long double *)uint64_t v10 = v41 * ldexp(v44, v45);
    if (v4)
    {
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v74, (unsigned int *)v95, (uint64_t)v95);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v73, v89, (uint64_t)v89);
      boost::polygon::detail::extended_int<64ul>::add(v75, v74, v73);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v71, (unsigned int *)v97, (uint64_t)v97);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v70, (unsigned int *)v91, (uint64_t)v91);
      boost::polygon::detail::extended_int<64ul>::add(v72, v71, v70);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v76, v75, (uint64_t)v72);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v68, (unsigned int *)v99, (uint64_t)v99);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v67, v93, (uint64_t)v93);
      boost::polygon::detail::extended_int<64ul>::add(v69, v68, v67);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v77, v76, (uint64_t)v69);
      boost::polygon::detail::extended_int<64ul>::p(v77, v46, v47);
      double v50 = ldexp(v48, v49);
      double v51 = *(double *)v10;
      double v52 = sqrt(v50);
      if (*(double *)v10 >= 0.0)
      {
        if (v41 >= 0.0) {
          double v62 = v51 + v52 * v41;
        }
        else {
          double v62 = v51 - v52 * v41;
        }
      }
      else
      {
        boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v75, v78, (uint64_t)v78);
        boost::polygon::detail::extended_int<64ul>::dif (v76, v75, (int *)v77);
        boost::polygon::detail::extended_int<64ul>::p(v76, v53, v54);
        double v57 = ldexp(v55, v56);
        double v58 = v41 * v57;
        boost::polygon::detail::extended_int<64ul>::p(v78, v57, v59);
        double v62 = v58 / (v52 + ldexp(v60, v61));
      }
      *(double *)(v10 + 16) = v62;
    }
  }
  if (v6)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v77, __src, (uint64_t)v95);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v76, __dst, (uint64_t)v97);
    boost::polygon::detail::extended_int<64ul>::dif (v78, v77, (int *)v76);
    boost::polygon::detail::extended_int<64ul>::p(v78, v63, v64);
    *(long double *)(v10 + 8) = v41 * ldexp(v65, v66);
  }
}

double *boost::polygon::detail::robust_fpt<double>::operator+=(double *result, double *a2)
{
  double v2 = *result;
  double v3 = *a2;
  double v4 = *result + *a2;
  if ((*result < 0.0 || v3 < 0.0) && (v2 > 0.0 || v3 > 0.0))
  {
    double v5 = (v2 * result[1] - v3 * a2[1]) / v4;
    double v6 = -v5;
    BOOL v7 = v5 < 0.0;
  }
  else
  {
    double v5 = result[1];
    double v6 = a2[1];
    BOOL v7 = v5 < v6;
  }
  if (v7) {
    double v5 = v6;
  }
  *uint64_t result = v4;
  result[1] = v5 + 1.0;
  return result;
}

double *boost::polygon::detail::robust_fpt<double>::operator-=(double *result, double *a2)
{
  double v2 = *result;
  double v3 = *a2;
  double v4 = *result - *a2;
  if ((*result < 0.0 || v3 > 0.0) && (v2 > 0.0 || v3 < 0.0))
  {
    double v5 = (v3 * a2[1] + v2 * result[1]) / v4;
    double v6 = -v5;
    BOOL v7 = v5 < 0.0;
  }
  else
  {
    double v5 = result[1];
    double v6 = a2[1];
    BOOL v7 = v5 < v6;
  }
  if (v7) {
    double v5 = v6;
  }
  *uint64_t result = v4;
  result[1] = v5 + 1.0;
  return result;
}

double boost::polygon::detail::robust_fpt<double>::operator-(double *a1, double *a2)
{
  return *a1 - *a2;
}

double boost::polygon::detail::extended_int<64ul>::p(_DWORD *a1, double result, double a3)
{
  int v4 = a1[64];
  if (v4 >= 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = -v4;
  }
  if (v5)
  {
    if (v5 == 1)
    {
      LODWORD(result) = *a1;
      uint64_t result = (double)*(unint64_t *)&result;
    }
    else if (v5 == 2)
    {
      LODWORD(a3) = *a1;
      LODWORD(result) = a1[1];
      uint64_t result = (double)*(unint64_t *)&a3 + (double)*(unint64_t *)&result * 4294967300.0;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = (uint64_t)&a1[v5 - 1];
      uint64_t result = 0.0;
      do
      {
        HIDWORD(v8) = 1106247680;
        LODWORD(v8) = *(_DWORD *)(v7 + v6);
        uint64_t result = result * 4294967300.0 + (double)v8;
        v6 -= 4;
      }
      while (v6 != -12);
    }
    if (v4 < 0) {
      return -result;
    }
  }
  return result;
}

uint64_t boost::polygon::detail::extended_int<64ul>::mul(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = result;
  int v4 = a2[64];
  if (v4 && (int v6 = *(_DWORD *)(a3 + 256)) != 0)
  {
    if (v4 >= 0) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = -v4;
    }
    if (v6 >= 0) {
      unint64_t v9 = v6;
    }
    else {
      unint64_t v9 = -v6;
    }
    uint64_t result = boost::polygon::detail::extended_int<64ul>::mul(result, a2, v8, a3, v9);
    if ((int)a2[64] > 0 != *(_DWORD *)(a3 + 256) > 0) {
      *(_DWORD *)(v3 + 256) = -*(_DWORD *)(v3 + 256);
    }
  }
  else
  {
    *(_DWORD *)(result + 256) = 0;
  }
  return result;
}

uint64_t boost::polygon::detail::extended_int<64ul>::mul(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = a3 - 1 + a5;
  if (v5 >= 0x40) {
    unint64_t v5 = 64;
  }
  *(_DWORD *)(result + 256) = v5;
  if (v5)
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if (v6 >= a3 - 1) {
        unint64_t v8 = a3 - 1;
      }
      else {
        unint64_t v8 = v6;
      }
      if (a3)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        unint64_t v11 = ~v8;
        uint64_t v12 = a2;
        do
        {
          if (v6 + v9 < a5)
          {
            unint64_t v13 = *(unsigned int *)(a4 + 4 * v9) * (unint64_t)*v12;
            v7 += v13;
            v10 += HIDWORD(v13);
          }
          --v9;
          ++v12;
        }
        while (v11 != v9);
      }
      else
      {
        uint64_t v10 = 0;
      }
      *(_DWORD *)(result + 4 * v6) = v7;
      unint64_t v7 = v10 + HIDWORD(v7);
      ++v6;
      unint64_t v14 = *(int *)(result + 256);
      a4 += 4;
    }
    while (v6 < v14);
    if (v7)
    {
      if (v14 != 64)
      {
        *(_DWORD *)(result + 4 * v14) = v7;
        ++*(_DWORD *)(result + 256);
      }
    }
  }
  return result;
}

void *boost::polygon::detail::extended_int<64ul>::dif (_DWORD *__dst, unsigned int *__src, int *a3)
{
  int v5 = __src[64];
  if (!v5)
  {
    uint64_t result = memcpy(__dst, a3, 0x104uLL);
LABEL_17:
    __dst[64] = -__dst[64];
    return result;
  }
  int v7 = a3[64];
  if (v7)
  {
    if (v5 >= 0) {
      unint64_t v8 = v5;
    }
    else {
      unint64_t v8 = -v5;
    }
    if (v7 >= 0) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = -v7;
    }
    if (v5 > 0 == v7 > 0) {
      uint64_t result = (void *)boost::polygon::detail::extended_int<64ul>::dif ((uint64_t)__dst, (uint64_t)__src, v8, (uint64_t)a3, v9, 0);
    }
    else {
      uint64_t result = boost::polygon::detail::extended_int<64ul>::add(__dst, __src, v8, (unsigned int *)a3, v9);
    }
    if ((__src[64] & 0x80000000) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    return memcpy(__dst, __src, 0x104uLL);
  }
  return result;
}

_DWORD *boost::polygon::detail::extended_int<64ul>::add(_DWORD *result, unsigned int *a2, unint64_t a3, unsigned int *a4, unint64_t a5)
{
  do
  {
    unint64_t v5 = a5;
    unint64_t v6 = a4;
    a5 = a3;
    a4 = a2;
    a2 = v6;
    a3 = v5;
  }
  while (a5 < v5);
  result[64] = a5;
  unint64_t v7 = 0;
  if (v5)
  {
    unint64_t v8 = a4;
    unint64_t v9 = result;
    unint64_t v10 = v5;
    do
    {
      unsigned int v12 = *v8++;
      uint64_t v11 = v12;
      unsigned int v13 = *v6++;
      unint64_t v14 = v7 + v11 + v13;
      *v9++ = v14;
      unint64_t v7 = HIDWORD(v14);
      --v10;
    }
    while (v10);
  }
  unint64_t v15 = a5 - v5;
  if (a5 > v5)
  {
    uint64_t v16 = &result[v5];
    int v17 = &a4[v5];
    do
    {
      unsigned int v18 = *v17++;
      unint64_t v19 = v7 + v18;
      *v16++ = v19;
      unint64_t v7 = HIDWORD(v19);
      --v15;
    }
    while (v15);
  }
  if (v7)
  {
    uint64_t v20 = (int)result[64];
    if (v20 != 64)
    {
      result[v20] = 1;
      ++result[64];
    }
  }
  return result;
}

uint64_t boost::polygon::detail::extended_int<64ul>::dif (uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  unint64_t v6 = a3;
  uint64_t v8 = result;
  if (a3 >= a5)
  {
    if (a3 != a5 || (a6 & 1) != 0)
    {
      unint64_t v14 = (_DWORD *)(result + 256);
      *(_DWORD *)(result + 256) = a3 - 1;
      if (a5)
      {
LABEL_15:
        uint64_t v16 = 0;
        char v15 = 0;
        do
        {
          *(_DWORD *)(result + 4 * v16) = *(_DWORD *)(a2 + 4 * v16) - (v15 & 1) - *(_DWORD *)(a4 + 4 * v16);
          unsigned int v17 = *(_DWORD *)(a2 + 4 * v16);
          unsigned int v18 = *(_DWORD *)(a4 + 4 * v16);
          v15 &= v17 == v18;
          if (v17 < v18) {
            char v15 = 1;
          }
          ++v16;
        }
        while (a5 != v16);
      }
      else
      {
        char v15 = 0;
      }
      BOOL v19 = v6 > a5;
      unint64_t v20 = v6 - a5;
      if (v19)
      {
        uint64_t v21 = (_DWORD *)(result + 4 * a5);
        uint64_t v22 = (int *)(a2 + 4 * a5);
        do
        {
          *v21++ = *v22 - (v15 & 1);
          int v23 = *v22++;
          v15 &= v23 == 0;
          --v20;
        }
        while (v20);
      }
      uint64_t v24 = *(int *)(result + 256);
      if (*(_DWORD *)(result + 4 * v24)) {
        *unint64_t v14 = v24 + 1;
      }
    }
    else
    {
      while (1)
      {
        unint64_t v11 = v6 - 1;
        unsigned int v12 = *(_DWORD *)(a2 - 4 + 4 * v6);
        unsigned int v13 = *(_DWORD *)(a4 - 4 + 4 * v6);
        if (v12 < v13)
        {
          uint64_t v9 = a4;
          unint64_t v10 = v6;
          goto LABEL_3;
        }
        if (v12 > v13) {
          break;
        }
        --v6;
        if (!v11) {
          goto LABEL_25;
        }
      }
      if (v6)
      {
        unint64_t v14 = (_DWORD *)(result + 256);
        *(_DWORD *)(result + 256) = v6 - 1;
        a5 = v6;
        goto LABEL_15;
      }
LABEL_25:
      *(_DWORD *)(result + 256) = 0;
    }
  }
  else
  {
    uint64_t v9 = a4;
    unint64_t v10 = a5;
LABEL_3:
    uint64_t result = boost::polygon::detail::extended_int<64ul>::dif (result, v9, v10, a2, v6, 1);
    *(_DWORD *)(v8 + 256) = -*(_DWORD *)(v8 + 256);
  }
  return result;
}

void *boost::polygon::detail::extended_int<64ul>::add(_DWORD *__dst, unsigned int *__src, unsigned int *a3)
{
  int v5 = __src[64];
  if (v5)
  {
    unint64_t v6 = __src;
    int v7 = a3[64];
    if (v7)
    {
      if (v5 >= 0) {
        unint64_t v8 = v5;
      }
      else {
        unint64_t v8 = -v5;
      }
      if (v7 >= 0) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = -v7;
      }
      if (v5 > 0 == v7 > 0) {
        uint64_t result = boost::polygon::detail::extended_int<64ul>::add(__dst, __src, v8, a3, v9);
      }
      else {
        uint64_t result = (void *)boost::polygon::detail::extended_int<64ul>::dif ((uint64_t)__dst, (uint64_t)__src, v8, (uint64_t)a3, v9, 0);
      }
      if ((v6[64] & 0x80000000) != 0) {
        __dst[64] = -__dst[64];
      }
      return result;
    }
  }
  else
  {
    __src = a3;
  }

  return memcpy(__dst, __src, 0x104uLL);
}

double boost::polygon::detail::robust_fpt<double>::operator+(double *a1, double *a2)
{
  return *a1 + *a2;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388]();
  int v12 = v11;
  int v14 = v13;
  uint64_t v16 = v15;
  int v18 = v17;
  BOOL v19 = v10;
  uint64_t v21 = v20;
  int v23 = v22;
  uint64_t v24 = (unsigned int *)v9;
  uint64_t v157 = *MEMORY[0x263EF8340];
  uint64_t v25 = v10[3];
  uint64_t v26 = v10[1];
  BOOL v27 = v25 <= v26;
  uint64_t v28 = v25 - v26;
  if (!v27)
  {
    int v29 = 1;
LABEL_3:
    *(void *)long long v128 = v28;
    goto LABEL_6;
  }
  if (v28 < 0)
  {
    uint64_t v28 = -v28;
    int v29 = -1;
    goto LABEL_3;
  }
  int v29 = 0;
LABEL_6:
  int v129 = v29;
  uint64_t v30 = *v10;
  uint64_t v31 = v10[2];
  BOOL v27 = v30 <= v31;
  uint64_t v32 = v30 - v31;
  if (!v27)
  {
    int v33 = 1;
LABEL_8:
    v126[0] = v32;
    goto LABEL_11;
  }
  if (v32 < 0)
  {
    uint64_t v32 = -v32;
    int v33 = -1;
    goto LABEL_8;
  }
  int v33 = 0;
LABEL_11:
  int v127 = v33;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, v128, (uint64_t)v128);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v126, (uint64_t)v126);
  boost::polygon::detail::extended_int<64ul>::add(__src, v137, v132);
  uint64_t v34 = v21[1];
  uint64_t v35 = v23[1];
  uint64_t v36 = v34 - v35;
  if (v34 > v35)
  {
    int v37 = 1;
LABEL_13:
    *(void *)&v123[0] = v36;
    goto LABEL_16;
  }
  if (v36 < 0)
  {
    uint64_t v36 = v35 - v34;
    int v37 = -1;
    goto LABEL_13;
  }
  int v37 = 0;
LABEL_16:
  int v124 = v37;
  uint64_t v38 = *v23;
  uint64_t v39 = *v21;
  uint64_t v40 = v38 - v39;
  if (v38 > v39)
  {
    int v41 = 1;
LABEL_18:
    *(void *)&v121[0] = v40;
    goto LABEL_21;
  }
  if (v40 < 0)
  {
    uint64_t v40 = v39 - v38;
    int v41 = -1;
    goto LABEL_18;
  }
  int v41 = 0;
LABEL_21:
  int v122 = v41;
  uint64_t v42 = v39 + v38;
  if (v42 < 1)
  {
    if (v42 < 0)
    {
      *(void *)long long v119 = -v42;
      if ((unint64_t)-v42 >> 32) {
        int v43 = -2;
      }
      else {
        int v43 = -1;
      }
    }
    else
    {
      int v43 = 0;
    }
  }
  else
  {
    *(void *)long long v119 = v42;
    int v43 = 1;
  }
  int v120 = v43;
  uint64_t v44 = v35 + v34;
  if (v44 < 1)
  {
    if (v44 < 0)
    {
      v117[0] = -v44;
      if ((unint64_t)-v44 >> 32) {
        int v45 = -2;
      }
      else {
        int v45 = -1;
      }
    }
    else
    {
      int v45 = 0;
    }
  }
  else
  {
    v117[0] = v44;
    int v45 = 1;
  }
  int v118 = v45;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, v128, (uint64_t)v123);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v126, (uint64_t)v121);
  boost::polygon::detail::extended_int<64ul>::add(v115, v137, v132);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, (unsigned int *)v123, (uint64_t)v126);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v121, (uint64_t)v128);
  boost::polygon::detail::extended_int<64ul>::dif (__dst, v137, (int *)v132);
  uint64_t v46 = v19[3];
  uint64_t v47 = v23[1];
  BOOL v27 = v46 <= v47;
  uint64_t v48 = v46 - v47;
  if (!v27)
  {
    int v49 = 1;
LABEL_41:
    v112[0] = v48;
    goto LABEL_44;
  }
  if (v48 < 0)
  {
    uint64_t v48 = -v48;
    int v49 = -1;
    goto LABEL_41;
  }
  int v49 = 0;
LABEL_44:
  int v113 = v49;
  uint64_t v50 = *v23;
  uint64_t v51 = v19[2];
  BOOL v27 = v50 <= v51;
  uint64_t v52 = v50 - v51;
  if (!v27)
  {
    int v53 = 1;
LABEL_46:
    v110[0] = v52;
    goto LABEL_49;
  }
  if (v52 < 0)
  {
    uint64_t v52 = -v52;
    int v53 = -1;
    goto LABEL_46;
  }
  int v53 = 0;
LABEL_49:
  int v111 = v53;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, v128, (uint64_t)v110);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v126, (uint64_t)v112);
  boost::polygon::detail::extended_int<64ul>::dif (v109, v137, (int *)v132);
  uint64_t v54 = v19[3];
  uint64_t v55 = v21[1];
  BOOL v27 = v54 <= v55;
  uint64_t v56 = v54 - v55;
  if (!v27)
  {
    int v57 = 1;
LABEL_51:
    v112[0] = v56;
    goto LABEL_54;
  }
  if (v56 < 0)
  {
    uint64_t v56 = -v56;
    int v57 = -1;
    goto LABEL_51;
  }
  int v57 = 0;
LABEL_54:
  int v113 = v57;
  uint64_t v58 = *v21;
  uint64_t v59 = v19[2];
  BOOL v27 = v58 <= v59;
  uint64_t v60 = v58 - v59;
  if (!v27)
  {
    int v61 = 1;
LABEL_56:
    v110[0] = v60;
    goto LABEL_59;
  }
  if (v60 < 0)
  {
    uint64_t v60 = -v60;
    int v61 = -1;
    goto LABEL_56;
  }
  int v61 = 0;
LABEL_59:
  int v111 = v61;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, v128, (uint64_t)v110);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v126, (uint64_t)v112);
  boost::polygon::detail::extended_int<64ul>::dif (v108, v137, (int *)v132);
  boost::polygon::detail::extended_int<64ul>::add(v107, v109, v108);
  if (!__dst[64])
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, (unsigned int *)v115, (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, v107, (uint64_t)v107);
    boost::polygon::detail::extended_int<64ul>::dif (v131, v137, (int *)v132);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v137, (unsigned int *)v115, (uint64_t)v107);
    memcpy(__dst, v137, sizeof(__dst));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v130, __dst, (uint64_t)v119);
    v137[0] = 2;
    v137[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, v130, (uint64_t)v137);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, (unsigned int *)v131, (uint64_t)v123);
    boost::polygon::detail::extended_int<64ul>::add(v137, v132, v106);
    memcpy(v132, __src, sizeof(v132));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, __dst, (uint64_t)v107);
    v130[0] = 2;
    v130[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, v105, (uint64_t)v130);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, (unsigned int *)v131, (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::add(v130, v106, v104);
    memcpy(v138, v130, sizeof(v138));
    v133[0] = 1;
    v133[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, __dst, (uint64_t)v117);
    v130[0] = 2;
    v130[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, v105, (uint64_t)v130);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, (unsigned int *)v131, (uint64_t)v121);
    boost::polygon::detail::extended_int<64ul>::add(v130, v106, v104);
    memcpy(v139, v130, sizeof(v139));
    boost::polygon::detail::extended_int<64ul>::p(__dst, v85, v86);
    double v89 = ldexp(v87, v88);
    double v90 = 1.0;
    double v67 = 1.0 / v89;
    if (v14)
    {
      boost::polygon::detail::extended_int<64ul>::p(v137, v89, 1.0);
      long double v93 = ldexp(v91, v92);
      double v90 = 0.25;
      double v89 = v67 * (v93 * 0.25);
      *uint64_t v16 = v89;
      if (!v12)
      {
LABEL_78:
        if (!a9) {
          return;
        }
LABEL_82:
        uint64_t v97 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v24, v137, v132, v89, v90);
        double v83 = ldexp(*(long double *)&v97, v98);
        double v84 = 0.25;
LABEL_83:
        double v99 = v83 * v84;
        double v100 = v67 * v99;
        boost::polygon::detail::extended_int<64ul>::p(__src, v99, v84);
        v16[2] = v100 / sqrt(ldexp(v101, v102));
        return;
      }
    }
    else if (!v12)
    {
      goto LABEL_78;
    }
    boost::polygon::detail::extended_int<64ul>::p(v139, v89, v90);
    long double v96 = ldexp(v94, v95);
    double v90 = 0.25;
    double v89 = v67 * (v96 * 0.25);
    v16[1] = v89;
    if (!a9) {
      return;
    }
    goto LABEL_82;
  }
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, (unsigned int *)v115, (uint64_t)v115);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, __dst, (uint64_t)__dst);
  boost::polygon::detail::extended_int<64ul>::add(v106, v105, v104);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v106, (uint64_t)v109);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v131, (uint64_t)v108);
  v137[0] = 4;
  v137[64] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v130, v132, (uint64_t)v137);
  boost::polygon::detail::extended_int<64ul>::p(__dst, v62, v63);
  long double v66 = ldexp(v64, v65);
  double v67 = 1.0 / v66 * (1.0 / v66);
  if ((v14 & 1) != 0 || a9)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v119, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v132, (unsigned int *)v131, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, (unsigned int *)v115, (uint64_t)v107);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, v105, (uint64_t)v123);
    boost::polygon::detail::extended_int<64ul>::add(v137, v132, v106);
    v132[0] = 1;
    v132[64] = 1;
    *(_OWORD *)&v131[192] = v123[12];
    *(_OWORD *)&v131[208] = v123[13];
    *(_OWORD *)&v131[224] = v123[14];
    *(_OWORD *)&v131[240] = v123[15];
    *(_OWORD *)&v131[128] = v123[8];
    *(_OWORD *)&v131[144] = v123[9];
    *(_OWORD *)&v131[160] = v123[10];
    *(_OWORD *)&v131[176] = v123[11];
    *(_OWORD *)&v131[64] = v123[4];
    *(_OWORD *)&v131[80] = v123[5];
    *(_OWORD *)&v131[96] = v123[6];
    *(_OWORD *)&v131[112] = v123[7];
    *(_OWORD *)v131 = v123[0];
    *(_OWORD *)&v131[16] = v123[1];
    *(_OWORD *)&v131[32] = v123[2];
    *(_OWORD *)&v131[48] = v123[3];
    int v68 = v124;
    if (v18 == 2) {
      int v68 = -v124;
    }
    *(_OWORD *)&v138[192] = *(_OWORD *)&v131[192];
    *(_OWORD *)&v138[208] = *(_OWORD *)&v131[208];
    *(_OWORD *)&v138[224] = *(_OWORD *)&v131[224];
    *(_OWORD *)&v138[240] = *(_OWORD *)&v131[240];
    *(_OWORD *)&v138[128] = *(_OWORD *)&v131[128];
    *(_OWORD *)&v138[144] = *(_OWORD *)&v131[144];
    *(_OWORD *)&v138[160] = *(_OWORD *)&v131[160];
    *(_OWORD *)&v138[176] = *(_OWORD *)&v131[176];
    *(_OWORD *)&v138[64] = *(_OWORD *)&v131[64];
    *(_OWORD *)&v138[80] = *(_OWORD *)&v131[80];
    *(_OWORD *)&v138[96] = *(_OWORD *)&v131[96];
    *(_OWORD *)&v138[112] = *(_OWORD *)&v131[112];
    *(_OWORD *)v138 = *(_OWORD *)v131;
    *(_OWORD *)&v138[16] = *(_OWORD *)&v131[16];
    *(_OWORD *)&v138[32] = *(_OWORD *)&v131[32];
    *(_OWORD *)&v138[48] = *(_OWORD *)&v131[48];
    *(_DWORD *)&v138[256] = v68;
    memcpy(v133, v130, sizeof(v133));
    if (v14)
    {
      uint64_t v71 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v24, v137, v132, v69, v70);
      *uint64_t v16 = v67 * (ldexp(*(long double *)&v71, v72) * 0.5);
    }
  }
  if ((v12 & 1) != 0 || a9)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, (unsigned int *)v117, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v106, v105, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v103, (unsigned int *)v115, (uint64_t)v107);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, v103, (uint64_t)v121);
    boost::polygon::detail::extended_int<64ul>::add(v131, v106, v104);
    memcpy(v139, v131, sizeof(v139));
    v134[0] = 1;
    int v135 = 1;
    *(_OWORD *)&v131[192] = v121[12];
    *(_OWORD *)&v131[208] = v121[13];
    *(_OWORD *)&v131[224] = v121[14];
    *(_OWORD *)&v131[240] = v121[15];
    *(_OWORD *)&v131[128] = v121[8];
    *(_OWORD *)&v131[144] = v121[9];
    *(_OWORD *)&v131[160] = v121[10];
    *(_OWORD *)&v131[176] = v121[11];
    *(_OWORD *)&v131[64] = v121[4];
    *(_OWORD *)&v131[80] = v121[5];
    *(_OWORD *)&v131[96] = v121[6];
    *(_OWORD *)&v131[112] = v121[7];
    *(_OWORD *)v131 = v121[0];
    *(_OWORD *)&v131[16] = v121[1];
    *(_OWORD *)&v131[32] = v121[2];
    *(_OWORD *)&v131[48] = v121[3];
    int v73 = v122;
    if (v18 == 2) {
      int v73 = -v122;
    }
    long long v152 = *(_OWORD *)&v131[192];
    long long v153 = *(_OWORD *)&v131[208];
    long long v154 = *(_OWORD *)&v131[224];
    long long v155 = *(_OWORD *)&v131[240];
    long long v148 = *(_OWORD *)&v131[128];
    long long v149 = *(_OWORD *)&v131[144];
    long long v150 = *(_OWORD *)&v131[160];
    long long v151 = *(_OWORD *)&v131[176];
    long long v144 = *(_OWORD *)&v131[64];
    long long v145 = *(_OWORD *)&v131[80];
    long long v146 = *(_OWORD *)&v131[96];
    long long v147 = *(_OWORD *)&v131[112];
    long long v140 = *(_OWORD *)v131;
    long long v141 = *(_OWORD *)&v131[16];
    long long v142 = *(_OWORD *)&v131[32];
    long long v143 = *(_OWORD *)&v131[48];
    int v156 = v73;
    memcpy(v136, v130, sizeof(v136));
    if (v12)
    {
      uint64_t v76 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v24, v139, v134, v74, v75);
      v16[1] = v67 * (ldexp(*(long double *)&v76, v77) * 0.5);
    }
  }
  if (a9)
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v132, (uint64_t)__src);
    memcpy(v132, v131, sizeof(v132));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v133, (uint64_t)__src);
    memcpy(v133, v131, sizeof(v133));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v105, __dst, (uint64_t)__dst);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v104, (unsigned int *)v115, (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::add(v106, v105, v104);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v107, (uint64_t)v106);
    memcpy(v139, v131, sizeof(v139));
    v134[0] = 1;
    int v135 = 1;
    *(_OWORD *)&v131[192] = v115[12];
    *(_OWORD *)&v131[208] = v115[13];
    *(_OWORD *)&v131[224] = v115[14];
    *(_OWORD *)&v131[240] = v115[15];
    *(_OWORD *)&v131[128] = v115[8];
    *(_OWORD *)&v131[144] = v115[9];
    *(_OWORD *)&v131[160] = v115[10];
    *(_OWORD *)&v131[176] = v115[11];
    *(_OWORD *)&v131[64] = v115[4];
    *(_OWORD *)&v131[80] = v115[5];
    *(_OWORD *)&v131[96] = v115[6];
    *(_OWORD *)&v131[112] = v115[7];
    *(_OWORD *)v131 = v115[0];
    *(_OWORD *)&v131[16] = v115[1];
    *(_OWORD *)&v131[32] = v115[2];
    *(_OWORD *)&v131[48] = v115[3];
    int v78 = v116;
    if (v18 == 2) {
      int v78 = -v116;
    }
    long long v152 = *(_OWORD *)&v131[192];
    long long v153 = *(_OWORD *)&v131[208];
    long long v154 = *(_OWORD *)&v131[224];
    long long v155 = *(_OWORD *)&v131[240];
    long long v148 = *(_OWORD *)&v131[128];
    long long v149 = *(_OWORD *)&v131[144];
    long long v150 = *(_OWORD *)&v131[160];
    long long v151 = *(_OWORD *)&v131[176];
    long long v144 = *(_OWORD *)&v131[64];
    long long v145 = *(_OWORD *)&v131[80];
    long long v146 = *(_OWORD *)&v131[96];
    long long v147 = *(_OWORD *)&v131[112];
    long long v140 = *(_OWORD *)v131;
    long long v141 = *(_OWORD *)&v131[16];
    long long v142 = *(_OWORD *)&v131[32];
    long long v143 = *(_OWORD *)&v131[48];
    int v156 = v78;
    memcpy(v136, v130, sizeof(v136));
    uint64_t v81 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval4(v24, v137, v132, v79, v80);
    double v83 = ldexp(*(long double *)&v81, v82);
    double v84 = 0.5;
    goto LABEL_83;
  }
}

uint64_t boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4, double a5)
{
  double v8 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(a4, a5, a1, a2, a3);
  double v10 = v9;
  v27[0] = v9;
  v27[1] = v11;
  boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(v8, v12, a1, a2 + 65, a3 + 65);
  v26[0] = v13;
  v26[1] = v14;
  if (v10 >= 0.0 && v13 >= 0.0 || v10 <= 0.0 && v13 <= 0.0) {
    return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v27, v26);
  }
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2, (uint64_t)a2);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v23, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v21, a2 + 65, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v22, v21, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::dif (__dst, __src, v22);
  boost::polygon::detail::extended_int<64ul>::p(__dst, v16, v17);
  double v19 = frexp(v18, &v28);
  double v20 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v27, (uint64_t)v26));
  return frexp(v19 / v20, &v28);
}

uint64_t boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval4(unsigned int *a1, unsigned int *a2, unsigned int *a3, double a4, double a5)
{
  double v8 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)a1, a2, a3, a4, a5));
  *(double *)uint64_t v30 = v8;
  v30[1] = v9;
  double v12 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)a1, a2 + 130, a3 + 130, v10, v11));
  v29[0] = v12;
  v29[1] = v13;
  if (v8 >= 0.0 && v12 >= 0.0 || v8 <= 0.0 && v12 <= 0.0) {
    return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v30, v29);
  }
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v25, a2, (uint64_t)a2);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v26, v25, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2 + 65, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, v23, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::add(__dst, v26, v24);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v21, a2 + 130, (uint64_t)(a2 + 130));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v22, v21, (uint64_t)(a3 + 130));
  boost::polygon::detail::extended_int<64ul>::dif (v28, __dst, v22);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v19, a2 + 195, (uint64_t)(a2 + 195));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v20, v19, (uint64_t)(a3 + 195));
  boost::polygon::detail::extended_int<64ul>::dif (__src, v28, v20);
  memcpy(a1, __src, 0x104uLL);
  a1[325] = 1;
  a1[389] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, a2, (uint64_t)(a2 + 65));
  LODWORD(__src[0]) = 2;
  LODWORD(__src[32]) = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v28, __dst, (uint64_t)__src);
  memcpy(a1 + 65, v28, 0x104uLL);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, a3, (uint64_t)(a3 + 65));
  memcpy(a1 + 390, __src, 0x104uLL);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, a2 + 130, (uint64_t)(a2 + 195));
  LODWORD(__src[0]) = 2;
  LODWORD(__src[32]) = -1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v28, __dst, (uint64_t)__src);
  memcpy(a1 + 130, v28, 0x104uLL);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, a3 + 130, (uint64_t)(a3 + 195));
  memcpy(a1 + 455, __src, 0x104uLL);
  double v17 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(a1, a1, a1 + 325, v15, v16));
  double v18 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v30, (uint64_t)v29));
  return frexp(v17 / v18, (int *)&__src[1]);
}

long double boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(double a1, double a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  boost::polygon::detail::extended_int<64ul>::p(a4, a1, a2);
  double v7 = frexp(v6, (int *)&v15);
  boost::polygon::detail::extended_int<64ul>::p(a5, v7, v8);
  LODWORD(a5) = v9;
  long double v11 = frexp(v10, (int *)&v15);
  LODWORD(v15) = v15 + a5;
  *(long double *)long double v14 = v11;
  v14[1] = v15;
  boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::sqrt((uint64_t)v14);
  return frexp(v7 * v12, (int *)&v15);
}

uint64_t boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(_DWORD *a1, long double *a2)
{
  long double v2 = *(double *)a1;
  if (*(double *)a1 == 0.0) {
    return *(_OWORD *)a2;
  }
  int v3 = *((_DWORD *)a2 + 2);
  int v4 = a1[2];
  if (v3 > v4 + 54) {
    return *(_OWORD *)a2;
  }
  double v7 = *a2;
  if (*a2 == 0.0 || v4 > v3 + 54) {
    return *(_OWORD *)a1;
  }
  if (v4 >= v3)
  {
    long double v11 = ldexp(v2, v4 - v3);
    *(void *)&long long v12 = frexp(v7 + v11, (int *)&v12 + 2);
    int v10 = DWORD2(v12) + v3;
  }
  else
  {
    long double v9 = ldexp(*a2, v3 - v4);
    *(void *)&long long v12 = frexp(v2 + v9, (int *)&v12 + 2);
    int v10 = DWORD2(v12) + v4;
  }
  DWORD2(v12) = v10;
  return v12;
}

uint64_t boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(_DWORD *a1, uint64_t a2)
{
  long double v2 = *(double *)a1;
  int v3 = *(_DWORD *)(a2 + 8);
  if (*(double *)a1 == 0.0 || (int v4 = a1[2], v3 > v4 + 54))
  {
    long double v5 = -*(double *)a2;
    goto LABEL_4;
  }
  double v9 = *(double *)a2;
  if (*(double *)a2 != 0.0 && v4 <= v3 + 54)
  {
    if (v4 < v3)
    {
      long double v11 = ldexp(-v9, v3 - v4);
      double v6 = frexp(v2 + v11, (int *)&v12 + 2);
      int v7 = DWORD2(v12) + v4;
      goto LABEL_5;
    }
    long double v5 = ldexp(v2, v4 - v3) - v9;
LABEL_4:
    double v6 = frexp(v5, (int *)&v12 + 2);
    int v7 = DWORD2(v12) + v3;
LABEL_5:
    DWORD2(v12) = v7;
    return *(void *)&v6;
  }
  return *(_OWORD *)a1;
}

long double boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::sqrt(uint64_t a1)
{
  double v1 = *(double *)a1;
  if (*(_DWORD *)(a1 + 8)) {
    double v1 = v1 + v1;
  }
  return frexp(sqrt(v1), (int *)&v3);
}

uint64_t boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(_DWORD *a1, unsigned int *a2, unsigned int *a3, double a4, double a5)
{
  double v8 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)a1, a2, a3, a4, a5));
  v27[0] = v8;
  v27[1] = v9;
  boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(v10, v11, (uint64_t)a1, a2 + 130, a3 + 130);
  v26[0] = v12;
  v26[1] = v13;
  if (v8 >= 0.0 && v12 >= 0.0 || v8 <= 0.0 && v12 <= 0.0) {
    return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v27, v26);
  }
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2, (uint64_t)a2);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, v23, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v21, a2 + 65, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v22, v21, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::add(__dst, v24, v22);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v19, a2 + 130, (uint64_t)(a2 + 130));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v20, v19, (uint64_t)(a3 + 130));
  boost::polygon::detail::extended_int<64ul>::dif (__src, __dst, v20);
  memcpy(a1 + 195, __src, 0x104uLL);
  a1[520] = 1;
  a1[584] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, a2, (uint64_t)(a2 + 65));
  __src[0] = 2;
  __src[64] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v24, (uint64_t)__src);
  memcpy(a1 + 260, __dst, 0x104uLL);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, a3, (uint64_t)(a3 + 65));
  memcpy(a1 + 585, __src, 0x104uLL);
  double v17 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)a1, a1 + 195, a1 + 520, v15, v16));
  double v18 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v27, (uint64_t)v26));
  return frexp(v17 / v18, &__src[2]);
}

double boost::polygon::detail::robust_dif<boost::polygon::detail::robust_fpt<double>>::operator/=(double *a1, double *a2)
{
  double v2 = *a2;
  double v3 = a1[1] + a2[1] + 1.0;
  if (*a2 >= 0.0)
  {
    *a1 = *a1 / v2;
    a1[1] = v3;
    double v6 = a1[2];
    a1[3] = a1[3] + a2[1] + 1.0;
    *(double *)&long long v5 = v6 / *a2;
    *((void *)a1 + 2) = v5;
  }
  else
  {
    *a1 = *a1 / -v2;
    a1[1] = v3;
    double v4 = a1[3] + a2[1] + 1.0;
    a1[2] = a1[2] / -*a2;
    a1[3] = v4;
    long long v5 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *((_OWORD *)a1 + 1);
    *((_OWORD *)a1 + 1) = v5;
  }
  return *(double *)&v5;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::pss(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388]();
  int v13 = v12;
  int v107 = v14;
  uint64_t v16 = v15;
  int v18 = v17;
  double v19 = v11;
  double v20 = v10;
  uint64_t v22 = v21;
  int v23 = (_DWORD *)v9;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v24 = *v10;
  uint64_t v25 = v10[2];
  BOOL v26 = v24 <= v25;
  uint64_t v27 = v24 - v25;
  if (!v26)
  {
    int v28 = 1;
LABEL_3:
    *(void *)v138 = v27;
    goto LABEL_6;
  }
  if (v27 < 0)
  {
    uint64_t v27 = -v27;
    int v28 = -1;
    goto LABEL_3;
  }
  int v28 = 0;
LABEL_6:
  int v139 = v28;
  uint64_t v29 = v10[1];
  uint64_t v30 = v10[3];
  BOOL v26 = v29 <= v30;
  uint64_t v31 = v29 - v30;
  if (!v26)
  {
    int v32 = 1;
LABEL_8:
    *(void *)v134 = v31;
    goto LABEL_11;
  }
  if (v31 < 0)
  {
    uint64_t v31 = -v31;
    int v32 = -1;
    goto LABEL_8;
  }
  int v32 = 0;
LABEL_11:
  int v135 = v32;
  uint64_t v33 = v11[2];
  uint64_t v34 = *v11;
  BOOL v26 = v33 <= v34;
  uint64_t v35 = v33 - v34;
  if (!v26)
  {
    int v36 = 1;
LABEL_13:
    v140[0] = v35;
    goto LABEL_16;
  }
  if (v35 < 0)
  {
    uint64_t v35 = -v35;
    int v36 = -1;
    goto LABEL_13;
  }
  int v36 = 0;
LABEL_16:
  int v141 = v36;
  uint64_t v37 = v11[3];
  uint64_t v38 = v11[1];
  BOOL v39 = __OFSUB__(v37, v38);
  uint64_t v40 = v37 - v38;
  if (!((v40 < 0) ^ v39 | (v40 == 0)))
  {
    int v41 = 1;
LABEL_18:
    v136[0] = v40;
    goto LABEL_21;
  }
  if (v40 < 0)
  {
    uint64_t v40 = -v40;
    int v41 = -1;
    goto LABEL_18;
  }
  int v41 = 0;
LABEL_21:
  int v137 = v41;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v127, (unsigned int *)v140, (uint64_t)v134);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v138, (uint64_t)v136);
  boost::polygon::detail::extended_int<64ul>::dif (v121, v127, (int *)v123);
  if (v122)
  {
    int v42 = *v20;
    if (*v20 <= 0)
    {
      if ((v42 & 0x80000000) == 0)
      {
        unsigned int v43 = 0;
LABEL_44:
        v127[64] = v43;
        boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v134, (uint64_t)v127);
        int v66 = v20[1];
        if (v66 <= 0)
        {
          if ((v66 & 0x80000000) == 0)
          {
            unsigned int v67 = 0;
LABEL_49:
            v127[64] = v67;
            boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v138, (uint64_t)v127);
            boost::polygon::detail::extended_int<64ul>::dif (v131, v123, (int *)v142);
            int v68 = v19[3];
            if (v68 <= 0)
            {
              if ((v68 & 0x80000000) == 0)
              {
                unsigned int v69 = 0;
LABEL_54:
                v127[64] = v69;
                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, (unsigned int *)v140, (uint64_t)v127);
                int v70 = v19[2];
                if (v70 <= 0)
                {
                  if ((v70 & 0x80000000) == 0)
                  {
                    unsigned int v71 = 0;
LABEL_59:
                    v127[64] = v71;
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, (unsigned int *)v136, (uint64_t)v127);
                    boost::polygon::detail::extended_int<64ul>::dif (v127, v123, (int *)v142);
                    memcpy(v133, v127, sizeof(v133));
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v127, v138, (uint64_t)v133);
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, (unsigned int *)v140, (uint64_t)v131);
                    boost::polygon::detail::extended_int<64ul>::add(v120, v127, v123);
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v127, v134, (uint64_t)v133);
                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, (unsigned int *)v136, (uint64_t)v131);
                    boost::polygon::detail::extended_int<64ul>::add(v119, v127, v123);
                    int v72 = *v22;
                    if (*v22 <= 0)
                    {
                      if ((v72 & 0x80000000) == 0)
                      {
                        unsigned int v73 = 0;
LABEL_64:
                        v127[64] = v73;
                        boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v121, (uint64_t)v127);
                        boost::polygon::detail::extended_int<64ul>::dif (__src, v120, (int *)v123);
                        int v74 = v22[1];
                        if (v74 <= 0)
                        {
                          if ((v74 & 0x80000000) == 0)
                          {
                            unsigned int v75 = 0;
LABEL_69:
                            v127[64] = v75;
                            boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v121, (uint64_t)v127);
                            boost::polygon::detail::extended_int<64ul>::dif (v117, v119, (int *)v123);
                            if (!(__src[64] | v117[64]))
                            {
                              boost::polygon::detail::extended_int<64ul>::p(v121, v76, v77);
                              double v80 = ldexp(v78, v79);
                              boost::polygon::detail::extended_int<64ul>::p(v120, v80, v81);
                              double v84 = ldexp(v82, v83);
                              double v85 = v84 / v80;
                              boost::polygon::detail::extended_int<64ul>::p(v119, v84, v86);
                              long double v89 = ldexp(v87, v88);
                              *(double *)uint64_t v16 = v85;
                              *(long double *)(v16 + 8) = v89 / v80;
                              *(double *)(v16 + 16) = v85;
                              *(unsigned char *)(v16 + 24) = 1;
                              return;
                            }
                            if (v122 >= 0) {
                              int v90 = -1;
                            }
                            else {
                              int v90 = 1;
                            }
                            if (v18 == 2) {
                              int v91 = v90;
                            }
                            else {
                              int v91 = -v90;
                            }
                            unsigned int v92 = 1;
                            if (v91 <= 0)
                            {
                              if ((v91 & 0x80000000) == 0)
                              {
                                unsigned int v92 = 0;
LABEL_85:
                                v116[64] = v92;
                                memcpy(v142, __src, sizeof(v142));
                                *(_DWORD *)&v142[256] = -*(_DWORD *)&v142[256];
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, (unsigned int *)v140, (uint64_t)v142);
                                memcpy(__dst, v117, sizeof(__dst));
                                __dst[64] = -__dst[64];
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, (unsigned int *)v136, (uint64_t)__dst);
                                boost::polygon::detail::extended_int<64ul>::add(v127, v123, v115);
                                memcpy(v115, __src, sizeof(v115));
                                v115[64] = -v115[64];
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v138, (uint64_t)v115);
                                memcpy(v113, v117, sizeof(v113));
                                v113[64] = -v113[64];
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v134, (uint64_t)v113);
                                boost::polygon::detail::extended_int<64ul>::add(v123, (unsigned int *)v142, __dst);
                                memcpy(v128, v123, sizeof(v128));
                                memcpy(v129, v116, sizeof(v129));
                                v130[64] = 0;
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v138, (uint64_t)v138);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, v134, (uint64_t)v134);
                                boost::polygon::detail::extended_int<64ul>::add(v123, (unsigned int *)v142, v115);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, (unsigned int *)v140, (uint64_t)v140);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, (unsigned int *)v136, (uint64_t)v136);
                                boost::polygon::detail::extended_int<64ul>::add(v142, v115, __dst);
                                memcpy(v124, v142, sizeof(v124));
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, v138, (uint64_t)v140);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v134, (uint64_t)v136);
                                boost::polygon::detail::extended_int<64ul>::add(v142, v115, __dst);
                                memcpy(v125, v142, sizeof(v125));
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v138, (uint64_t)v117);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v134, (uint64_t)__src);
                                boost::polygon::detail::extended_int<64ul>::dif (v113, v112, (int *)v111);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, (unsigned int *)v140, (uint64_t)v117);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, (unsigned int *)v136, (uint64_t)__src);
                                boost::polygon::detail::extended_int<64ul>::dif (v110, v109, (int *)v108);
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v113, (uint64_t)v110);
                                *(_DWORD *)long long v142 = 2;
                                *(_DWORD *)&v142[256] = -1;
                                boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, __dst, (uint64_t)v142);
                                memcpy(v126, v115, sizeof(v126));
                                uint64_t v93 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>();
                                double v95 = ldexp(*(long double *)&v93, v94);
                                boost::polygon::detail::extended_int<64ul>::p(v121, v95, v96);
                                double v99 = v95 * ldexp(v97, v98);
                                if (v13)
                                {
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v113, __src, (uint64_t)__src);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v117, (uint64_t)v117);
                                  boost::polygon::detail::extended_int<64ul>::add(__dst, v113, v112);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, (unsigned int *)v136, (uint64_t)__dst);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, __src, (uint64_t)v140);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, v117, (uint64_t)v136);
                                  boost::polygon::detail::extended_int<64ul>::add(v110, v109, v108);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v119, (uint64_t)v110);
                                  boost::polygon::detail::extended_int<64ul>::dif (v142, v115, (int *)v111);
                                  memcpy(v127, v142, sizeof(v127));
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v113, __src, (uint64_t)__src);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v117, (uint64_t)v117);
                                  boost::polygon::detail::extended_int<64ul>::add(__dst, v113, v112);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, v134, (uint64_t)__dst);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, __src, (uint64_t)v138);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, v117, (uint64_t)v134);
                                  boost::polygon::detail::extended_int<64ul>::add(v110, v109, v108);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v119, (uint64_t)v110);
                                  boost::polygon::detail::extended_int<64ul>::dif (v142, v115, (int *)v111);
                                  memcpy(v128, v142, sizeof(v128));
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v119, (uint64_t)v116);
                                  memcpy(v129, v142, sizeof(v129));
                                  uint64_t v100 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>();
                                  *(long double *)(v16 + 8) = ldexp(*(long double *)&v100, v101) / v99;
                                }
                                if ((v107 & 1) != 0 || a9)
                                {
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v113, __src, (uint64_t)__src);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v117, (uint64_t)v117);
                                  boost::polygon::detail::extended_int<64ul>::add(__dst, v113, v112);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, (unsigned int *)v140, (uint64_t)__dst);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, __src, (uint64_t)v140);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, v117, (uint64_t)v136);
                                  boost::polygon::detail::extended_int<64ul>::add(v110, v109, v108);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v120, (uint64_t)v110);
                                  boost::polygon::detail::extended_int<64ul>::dif (v142, v115, (int *)v111);
                                  memcpy(v127, v142, sizeof(v127));
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v113, __src, (uint64_t)__src);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v117, (uint64_t)v117);
                                  boost::polygon::detail::extended_int<64ul>::add(__dst, v113, v112);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, v138, (uint64_t)__dst);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v109, __src, (uint64_t)v138);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v108, v117, (uint64_t)v134);
                                  boost::polygon::detail::extended_int<64ul>::add(v110, v109, v108);
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v120, (uint64_t)v110);
                                  boost::polygon::detail::extended_int<64ul>::dif (v142, v115, (int *)v111);
                                  memcpy(v128, v142, sizeof(v128));
                                  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v142, v120, (uint64_t)v116);
                                  memcpy(v129, v142, sizeof(v129));
                                  if (v107)
                                  {
                                    uint64_t v102 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>();
                                    *(long double *)uint64_t v16 = ldexp(*(long double *)&v102, v103) / v99;
                                  }
                                  if (a9)
                                  {
                                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, __src, (uint64_t)__src);
                                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v111, v117, (uint64_t)v117);
                                    boost::polygon::detail::extended_int<64ul>::add(v113, v112, v111);
                                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v121, (uint64_t)v113);
                                    if (v95 >= 0.0) {
                                      int v104 = 1;
                                    }
                                    else {
                                      int v104 = -1;
                                    }
                                    *(_DWORD *)long long v142 = 1;
                                    *(_DWORD *)&v142[256] = v104;
                                    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v115, __dst, (uint64_t)v142);
                                    memcpy(v130, v115, sizeof(v130));
                                    uint64_t v105 = boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>();
                                    double v65 = ldexp(*(long double *)&v105, v106) / v99;
LABEL_96:
                                    *(double *)(v16 + 16) = v65;
                                    return;
                                  }
                                }
                                return;
                              }
                              unsigned int v92 = -1;
                            }
                            v116[0] = 1;
                            goto LABEL_85;
                          }
                          int v74 = -v74;
                          unsigned int v75 = -1;
                        }
                        else
                        {
                          unsigned int v75 = 1;
                        }
                        v127[0] = v74;
                        goto LABEL_69;
                      }
                      int v72 = -v72;
                      unsigned int v73 = -1;
                    }
                    else
                    {
                      unsigned int v73 = 1;
                    }
                    v127[0] = v72;
                    goto LABEL_64;
                  }
                  int v70 = -v70;
                  unsigned int v71 = -1;
                }
                else
                {
                  unsigned int v71 = 1;
                }
                v127[0] = v70;
                goto LABEL_59;
              }
              int v68 = -v68;
              unsigned int v69 = -1;
            }
            else
            {
              unsigned int v69 = 1;
            }
            v127[0] = v68;
            goto LABEL_54;
          }
          int v66 = -v66;
          unsigned int v67 = -1;
        }
        else
        {
          unsigned int v67 = 1;
        }
        v127[0] = v66;
        goto LABEL_49;
      }
      int v42 = -v42;
      unsigned int v43 = -1;
    }
    else
    {
      unsigned int v43 = 1;
    }
    v127[0] = v42;
    goto LABEL_44;
  }
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v138, (uint64_t)v138);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v131, v134, (uint64_t)v134);
  boost::polygon::detail::extended_int<64ul>::add(v127, v123, (unsigned int *)v131);
  boost::polygon::detail::extended_int<64ul>::p(v127, v44, v45);
  long double v48 = ldexp(v46, v47);
  double v49 = v48 + v48;
  boost::polygon::detail::extended_int<64ul>::operator*(v134, *v19 - (uint64_t)v20[2], (uint64_t)v127);
  boost::polygon::detail::extended_int<64ul>::operator*(v138, v19[1] - (uint64_t)v20[3], (uint64_t)v123);
  boost::polygon::detail::extended_int<64ul>::dif (v131, v127, (int *)v123);
  boost::polygon::detail::extended_int<64ul>::operator*(v138, v22[1] - (uint64_t)v20[3], (uint64_t)v127);
  boost::polygon::detail::extended_int<64ul>::operator*(v134, *v22 - (uint64_t)v20[2], (uint64_t)v123);
  boost::polygon::detail::extended_int<64ul>::dif (v120, v127, (int *)v123);
  boost::polygon::detail::extended_int<64ul>::operator*(v134, *v22 - (uint64_t)*v19, (uint64_t)v127);
  boost::polygon::detail::extended_int<64ul>::operator*(v138, v22[1] - (uint64_t)v19[1], (uint64_t)v123);
  boost::polygon::detail::extended_int<64ul>::dif (v119, v127, (int *)v123);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v123, v120, (uint64_t)v119);
  v124[0] = 1;
  v124[64] = 1;
  if (v13)
  {
    if (v18 == 2) {
      int v50 = 1;
    }
    else {
      int v50 = -1;
    }
    *(_DWORD *)long long v142 = 2;
    *(_DWORD *)&v142[256] = v50;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v127, v134, (uint64_t)v142);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v116, v138, (uint64_t)v138);
    boost::polygon::detail::extended_int<64ul>::operator*(v116, v19[1] + (uint64_t)v20[3], (uint64_t)v117);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v138, (uint64_t)v134);
    boost::polygon::detail::extended_int<64ul>::operator*(__dst, *v19 + (uint64_t)v20[2] - 2 * *v22, (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::dif (__src, v117, (int *)v115);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v134, (uint64_t)v134);
    boost::polygon::detail::extended_int<64ul>::operator*(v112, 2 * v22[1], (uint64_t)v113);
    boost::polygon::detail::extended_int<64ul>::add(v142, __src, v113);
    memcpy(v128, v142, sizeof(v128));
    uint64_t v53 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v23, v127, v123, v51, v52);
    *(long double *)(v16 + 8) = ldexp(*(long double *)&v53, v54) / v49;
  }
  if ((v107 & 1) != 0 || a9)
  {
    if (v18 == 2) {
      int v55 = 1;
    }
    else {
      int v55 = -1;
    }
    *(_DWORD *)long long v142 = 2;
    *(_DWORD *)&v142[256] = v55;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v138, (uint64_t)v142);
    memcpy(v127, __src, sizeof(v127));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v116, v134, (uint64_t)v134);
    boost::polygon::detail::extended_int<64ul>::operator*(v116, *v19 + (uint64_t)v20[2], (uint64_t)v117);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, v138, (uint64_t)v134);
    boost::polygon::detail::extended_int<64ul>::operator*(__dst, v19[1] + (uint64_t)v20[3] - 2 * v22[1], (uint64_t)v115);
    boost::polygon::detail::extended_int<64ul>::dif (__src, v117, (int *)v115);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v112, v138, (uint64_t)v138);
    boost::polygon::detail::extended_int<64ul>::operator*(v112, 2 * *v22, (uint64_t)v113);
    boost::polygon::detail::extended_int<64ul>::add(v142, __src, v113);
    memcpy(v128, v142, sizeof(v128));
    if (v107)
    {
      uint64_t v58 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v23, v127, v123, v56, v57);
      *(long double *)uint64_t v16 = ldexp(*(long double *)&v58, v59) / v49;
    }
    if (a9)
    {
      *(_OWORD *)&v142[192] = v131[12];
      *(_OWORD *)&v142[208] = v131[13];
      *(_OWORD *)&v142[224] = v131[14];
      *(_OWORD *)&v142[240] = v131[15];
      *(_OWORD *)&v142[128] = v131[8];
      *(_OWORD *)&v142[144] = v131[9];
      *(_OWORD *)&v142[160] = v131[10];
      *(_OWORD *)&v142[176] = v131[11];
      *(_OWORD *)&v142[64] = v131[4];
      *(_OWORD *)&v142[80] = v131[5];
      *(_OWORD *)&v142[96] = v131[6];
      *(_OWORD *)&v142[112] = v131[7];
      *(_OWORD *)long long v142 = v131[0];
      *(_OWORD *)&v142[16] = v131[1];
      *(_OWORD *)&v142[32] = v131[2];
      *(_OWORD *)&v142[48] = v131[3];
      if (v132 >= 0) {
        int v60 = v132;
      }
      else {
        int v60 = -v132;
      }
      *(_OWORD *)&v129[192] = *(_OWORD *)&v142[192];
      *(_OWORD *)&v129[208] = *(_OWORD *)&v142[208];
      *(_OWORD *)&v129[224] = *(_OWORD *)&v142[224];
      *(_OWORD *)&v129[240] = *(_OWORD *)&v142[240];
      *(_OWORD *)&v129[128] = *(_OWORD *)&v142[128];
      *(_OWORD *)&v129[144] = *(_OWORD *)&v142[144];
      *(_OWORD *)&v129[160] = *(_OWORD *)&v142[160];
      *(_OWORD *)&v129[176] = *(_OWORD *)&v142[176];
      *(_OWORD *)&v129[64] = *(_OWORD *)&v142[64];
      *(_OWORD *)&v129[80] = *(_OWORD *)&v142[80];
      *(_OWORD *)&v129[96] = *(_OWORD *)&v142[96];
      *(_OWORD *)&v129[112] = *(_OWORD *)&v142[112];
      *(_OWORD *)int v129 = *(_OWORD *)v142;
      *(_OWORD *)&v129[16] = *(_OWORD *)&v142[16];
      *(_OWORD *)&v129[32] = *(_OWORD *)&v142[32];
      *(_OWORD *)&v129[48] = *(_OWORD *)&v142[48];
      *(_DWORD *)&v129[256] = v60;
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v138, (uint64_t)v138);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v117, v134, (uint64_t)v134);
      boost::polygon::detail::extended_int<64ul>::add(v142, __src, v117);
      memcpy(v125, v142, sizeof(v125));
      uint64_t v63 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v23, v127, v123, v61, v62);
      double v65 = ldexp(*(long double *)&v63, v64) / v49;
      goto LABEL_96;
    }
  }
}

uint64_t boost::polygon::detail::extended_int<64ul>::operator*@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2 < 1)
  {
    if (a2 < 0)
    {
      v7[0] = -a2;
      if ((unint64_t)-a2 >> 32) {
        int v5 = -2;
      }
      else {
        int v5 = -1;
      }
    }
    else
    {
      int v5 = 0;
    }
  }
  else
  {
    v7[0] = a2;
    if (HIDWORD(a2)) {
      int v5 = 2;
    }
    else {
      int v5 = 1;
    }
  }
  int v8 = v5;
  return boost::polygon::detail::extended_int<64ul>::mul(a3, a1, (uint64_t)v7);
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss4<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v5 = v2;
  double v6 = v1;
  int v7 = (_DWORD *)v0;
  uint64_t v74 = *MEMORY[0x263EF8340];
  if (v1[259])
  {
    __dst[0] = 1;
    __dst[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v67, v2, (uint64_t)(v2 + 65));
    memcpy(v71, v5 + 130, sizeof(v71));
    v68[0] = 1;
    v68[64] = 1;
    double v51 = v6 + 130;
    uint64_t v52 = (uint64_t)(v5 + 195);
    double v10 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(v8, v9, (uint64_t)v7, v6 + 130, v5 + 195);
    int v12 = v11;
    double v14 = v13;
    __src[0] = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v7, __dst, v67, v10, v15);
    __src[1] = v16;
    boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::sqrt((uint64_t)__src);
    int v19 = v18 + v12;
    double v20 = frexp(v14 * v17, (int *)&v66[1]);
    LODWORD(v66[1]) += v19;
    *(double *)double v57 = v20;
    v57[1] = v66[1];
    memcpy(__dst, v6, sizeof(__dst));
    memcpy(v67, v5, sizeof(v67));
    memcpy(v71, v6 + 65, sizeof(v71));
    uint64_t v53 = (uint64_t)(v5 + 65);
    memcpy(v68, v5 + 65, 0x104uLL);
    memcpy(v72, v6 + 195, sizeof(v72));
    unsigned int v68[65] = 1;
    v68[129] = 1;
    double v23 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v7, __dst, v67, v21, v22));
    *(double *)double v56 = v23;
    v56[1] = v24;
    if (v23 >= 0.0 && v20 >= 0.0 || v23 <= 0.0 && v20 <= 0.0)
    {
      uint64_t v25 = v56;
      BOOL v26 = (long double *)v57;
      return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v25, v26);
    }
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v6 + 195, (uint64_t)v6);
    LODWORD(v66[0]) = 2;
    LODWORD(v66[32]) = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v64, (uint64_t)v66);
    memcpy(__dst, __src, sizeof(__dst));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v6 + 195, (uint64_t)(v6 + 65));
    LODWORD(v66[0]) = 2;
    LODWORD(v66[32]) = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v64, (uint64_t)v66);
    memcpy(v71, __src, sizeof(v71));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v62, v6, (uint64_t)v6);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v63, v62, (uint64_t)v5);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v60, v6 + 65, (uint64_t)(v6 + 65));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v61, v60, v53);
    boost::polygon::detail::extended_int<64ul>::add(v64, v63, v61);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v59, v6 + 195, (uint64_t)(v6 + 195));
    boost::polygon::detail::extended_int<64ul>::add(__src, v64, v59);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v54, v51, (uint64_t)v51);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v55, (unsigned int *)v54, (uint64_t)(v5 + 130));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v58, (unsigned int *)v55, v52);
    boost::polygon::detail::extended_int<64ul>::dif (v66, (unsigned int *)__src, (int *)v58);
    memcpy(v72, v66, sizeof(v72));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v6, (uint64_t)(v6 + 65));
    LODWORD(v66[0]) = 2;
    LODWORD(v66[32]) = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v64, (uint64_t)v66);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v62, v51, (uint64_t)v51);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v63, v62, v52);
    boost::polygon::detail::extended_int<64ul>::dif (v66, (unsigned int *)__src, (int *)v63);
    memcpy(v73, v66, sizeof(v73));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v66, v5, v53);
    memcpy(v69, v66, sizeof(v69));
    double v45 = COERCE_DOUBLE(boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss3<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>((uint64_t)v7, __dst, v67, v43, v44));
    long double v46 = v56;
    int v47 = v57;
  }
  else
  {
    double v27 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(v0, v1, v2, v3, v4));
    *(double *)int v55 = v27;
    v55[1] = v28;
    __dst[0] = 1;
    __dst[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v67, v5, (uint64_t)(v5 + 65));
    memcpy(v71, v5 + 130, sizeof(v71));
    v68[0] = 1;
    v68[64] = 1;
    double v31 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval1(v29, v30, (uint64_t)v7, v6 + 130, v5 + 195);
    int v33 = v32;
    double v35 = v34;
    __src[0] = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v7, __dst, v67, v31, v36);
    __src[1] = v37;
    boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::sqrt((uint64_t)__src);
    int v40 = v39 + v33;
    double v41 = frexp(v35 * v38, (int *)&v66[1]);
    LODWORD(v66[1]) += v40;
    *(double *)int v54 = v41;
    v54[1] = v66[1];
    if (v27 >= 0.0 && v41 >= 0.0 || v27 <= 0.0 && v41 <= 0.0)
    {
      uint64_t v25 = v55;
      BOOL v26 = (long double *)v54;
      return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v25, v26);
    }
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v63, v6, (uint64_t)v6);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v63, (uint64_t)v5);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v61, v6 + 65, (uint64_t)(v6 + 65));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v62, v61, (uint64_t)(v5 + 65));
    boost::polygon::detail::extended_int<64ul>::add(__src, v64, v62);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v58, v6 + 130, (uint64_t)(v6 + 130));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v59, v58, (uint64_t)(v5 + 195));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v60, v59, (uint64_t)(v5 + 130));
    boost::polygon::detail::extended_int<64ul>::dif (v66, (unsigned int *)__src, (int *)v60);
    memcpy(__dst, v66, sizeof(__dst));
    v67[0] = 1;
    v67[64] = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v64, v6, (uint64_t)(v6 + 65));
    LODWORD(v66[0]) = 2;
    LODWORD(v66[32]) = 1;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v64, (uint64_t)v66);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v62, v6 + 130, (uint64_t)(v6 + 130));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v63, v62, (uint64_t)(v5 + 195));
    boost::polygon::detail::extended_int<64ul>::dif (v66, (unsigned int *)__src, (int *)v63);
    memcpy(v71, v66, sizeof(v71));
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v66, v5, (uint64_t)(v5 + 65));
    memcpy(v68, v66, 0x104uLL);
    double v45 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2((uint64_t)v7, __dst, v67, v48, v49));
    long double v46 = v55;
    int v47 = v54;
  }
  double v50 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v46, (uint64_t)v47));
  return frexp(v45 / v50, (int *)&v66[1]);
}

uint64_t boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sqrt_expr_evaluator_pss3<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4, double a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  double v8 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(a1, a2, a3, a4, a5));
  *(double *)uint64_t v28 = v8;
  v28[1] = v9;
  double v12 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(a1, a2 + 130, a3 + 130, v10, v11));
  v27[0] = v12;
  v27[1] = v13;
  if (v8 >= 0.0 && v12 >= 0.0 || v8 <= 0.0 && v12 <= 0.0) {
    return boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator+(v28, v27);
  }
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v25, a2, (uint64_t)a2);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v25, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2 + 65, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, v23, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::add(&__dst, __src, v24);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v22, a2 + 130, (uint64_t)(a2 + 130));
  boost::polygon::detail::extended_int<64ul>::dif (v32, &__dst, v22);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v19, a2 + 195, (uint64_t)(a2 + 195));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v20, v19, (uint64_t)a3);
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v21, v20, (uint64_t)(a3 + 65));
  boost::polygon::detail::extended_int<64ul>::dif (v34, v32, v21);
  v32[0] = 1;
  v32[64] = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v24, a2, (uint64_t)(a2 + 65));
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v23, a2 + 130, (uint64_t)(a2 + 195));
  boost::polygon::detail::extended_int<64ul>::dif (v25, v24, (int *)v23);
  unsigned int __dst = 2;
  int v31 = 1;
  boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__src, v25, (uint64_t)&__dst);
  memcpy(v35, __src, sizeof(v35));
  memcpy(v33, a3 + 195, sizeof(v33));
  double v17 = COERCE_DOUBLE(boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval2(a1, v34, v32, v15, v16));
  double v18 = COERCE_DOUBLE(boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>::operator-(v28, (uint64_t)v27));
  return frexp(v17 / v18, v30);
}

double boost::polygon::detail::operator+<boost::polygon::detail::robust_fpt<double>>(long long *a1, long long *a2)
{
  long long v4 = *a1;
  long long v10 = *a2;
  long long v11 = v4;
  double v5 = boost::polygon::detail::robust_fpt<double>::operator+((double *)&v11, (double *)&v10);
  long long v6 = a1[1];
  long long v8 = a2[1];
  long long v9 = v6;
  boost::polygon::detail::robust_fpt<double>::operator+((double *)&v9, (double *)&v8);
  return v5;
}

void boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>::mp_circle_formation_functor<boost::polygon::detail::site_event<int>,boost::polygon::detail::circle_event<double>>::sss()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  int v79 = v4;
  int v75 = v5;
  char v77 = v6;
  uint64_t v76 = v7;
  long double v78 = (unsigned int *)v0;
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v8 = v1[2];
  uint64_t v9 = *v1;
  uint64_t v10 = v8 - v9;
  if (v8 > v9)
  {
    int v11 = 1;
LABEL_3:
    v98[0] = v10;
    goto LABEL_6;
  }
  if (v10 < 0)
  {
    uint64_t v10 = v9 - v8;
    int v11 = -1;
    goto LABEL_3;
  }
  int v11 = 0;
LABEL_6:
  int v99 = v11;
  uint64_t v12 = v2[2];
  uint64_t v13 = *v2;
  uint64_t v14 = v12 - v13;
  if (v12 > v13)
  {
    int v15 = 1;
LABEL_8:
    uint64_t v100 = v14;
    goto LABEL_11;
  }
  if (v14 < 0)
  {
    uint64_t v14 = v13 - v12;
    int v15 = -1;
    goto LABEL_8;
  }
  int v15 = 0;
LABEL_11:
  int v101 = v15;
  uint64_t v16 = v3[2];
  uint64_t v17 = *v3;
  uint64_t v18 = v16 - v17;
  if (v16 > v17)
  {
    int v19 = 1;
LABEL_13:
    uint64_t v102 = v18;
    goto LABEL_16;
  }
  if (v18 < 0)
  {
    uint64_t v18 = v17 - v16;
    int v19 = -1;
    goto LABEL_13;
  }
  int v19 = 0;
LABEL_16:
  int v103 = v19;
  uint64_t v20 = v1[3];
  uint64_t v21 = v1[1];
  uint64_t v22 = v20 - v21;
  if (v20 > v21)
  {
    int v23 = 1;
LABEL_18:
    v92[0] = v22;
    goto LABEL_21;
  }
  if (v22 < 0)
  {
    uint64_t v22 = v21 - v20;
    int v23 = -1;
    goto LABEL_18;
  }
  int v23 = 0;
LABEL_21:
  int v93 = v23;
  uint64_t v24 = v2[3];
  uint64_t v25 = v2[1];
  uint64_t v26 = v24 - v25;
  if (v24 > v25)
  {
    int v27 = 1;
LABEL_23:
    uint64_t v94 = v26;
    goto LABEL_26;
  }
  if (v26 < 0)
  {
    uint64_t v26 = v25 - v24;
    int v27 = -1;
    goto LABEL_23;
  }
  int v27 = 0;
LABEL_26:
  int v95 = v27;
  uint64_t v28 = v3[3];
  uint64_t v29 = v3[1];
  uint64_t v30 = v28 - v29;
  if (v28 <= v29)
  {
    if ((v30 & 0x8000000000000000) == 0)
    {
      int v31 = 0;
      goto LABEL_31;
    }
    uint64_t v30 = v29 - v28;
    int v31 = -1;
  }
  else
  {
    int v31 = 1;
  }
  uint64_t v96 = v30;
LABEL_31:
  int v97 = v31;
  uint64_t v32 = (int)v20 * (uint64_t)(int)v9 - (int)v21 * (uint64_t)(int)v8;
  if (v32 < 1)
  {
    if (v32 < 0)
    {
      v86[0] = -v32;
      if ((unint64_t)-v32 >> 32) {
        int v33 = -2;
      }
      else {
        int v33 = -1;
      }
    }
    else
    {
      int v33 = 0;
    }
  }
  else
  {
    v86[0] = v32;
    if (HIDWORD(v32)) {
      int v33 = 2;
    }
    else {
      int v33 = 1;
    }
  }
  int v87 = v33;
  uint64_t v34 = (int)v24 * (uint64_t)(int)v13 - (int)v25 * (uint64_t)(int)v12;
  if (v34 < 1)
  {
    if (v34 < 0)
    {
      uint64_t v88 = -v34;
      if ((unint64_t)-v34 >> 32) {
        int v35 = -2;
      }
      else {
        int v35 = -1;
      }
    }
    else
    {
      int v35 = 0;
    }
  }
  else
  {
    uint64_t v88 = v34;
    if (HIDWORD(v34)) {
      int v35 = 2;
    }
    else {
      int v35 = 1;
    }
  }
  int v89 = v35;
  uint64_t v36 = (int)v28 * (uint64_t)(int)v17 - (int)v29 * (uint64_t)(int)v16;
  if (v36 < 1)
  {
    if (v36 < 0)
    {
      uint64_t v90 = -v36;
      if ((unint64_t)-v36 >> 32) {
        int v37 = -2;
      }
      else {
        int v37 = -1;
      }
    }
    else
    {
      int v37 = 0;
    }
  }
  else
  {
    uint64_t v90 = v36;
    if (HIDWORD(v36)) {
      int v37 = 2;
    }
    else {
      int v37 = 1;
    }
  }
  unint64_t v38 = 0;
  int v91 = v37;
  do
  {
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)__dst, (unsigned int *)((char *)v98 + v38), (uint64_t)v98 + v38);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, (unsigned int *)((char *)v92 + v38), (uint64_t)v92 + v38);
    boost::polygon::detail::extended_int<64ul>::add(__src, __dst, v81);
    memcpy(&v83[v38 / 4], __src, 0x104uLL);
    v38 += 260;
  }
  while (v38 != 780);
  uint64_t v39 = 0;
  uint64_t v40 = 0xFFFFFFFF00000000;
  for (uint64_t i = 1; i != 4; ++i)
  {
    uint64_t v42 = v40 >> 32;
    if (v39 == 130) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = i;
    }
    uint64_t v44 = 65 * v43;
    if (!(v39 * 4)) {
      uint64_t v42 = 2;
    }
    uint64_t v45 = 65 * v42;
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, (unsigned int *)v98 + 65 * v43, (uint64_t)v92 + 260 * v42);
    boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v80, (unsigned int *)v98 + v45, (uint64_t)v92 + 4 * v44);
    boost::polygon::detail::extended_int<64ul>::dif (__dst, v81, v80);
    memcpy(&__src[v39], __dst, 0x104uLL);
    v40 += 0x100000000;
    v39 += 65;
  }
  uint64_t v48 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v78, __src, v83, v46, v47);
  double v50 = ldexp(*(long double *)&v48, v49);
  if (v75)
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0xFFFFFFFF00000000;
    for (uint64_t j = 1; j != 4; ++j)
    {
      uint64_t v54 = v52 >> 32;
      if (v51 == 130) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = j;
      }
      uint64_t v56 = 65 * v55;
      if (!(v51 * 4)) {
        uint64_t v54 = 2;
      }
      uint64_t v57 = 65 * v54;
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, (unsigned int *)v92 + 65 * v55, (uint64_t)v86 + 260 * v54);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v80, (unsigned int *)v92 + v57, (uint64_t)v86 + 4 * v56);
      boost::polygon::detail::extended_int<64ul>::dif (__dst, v81, v80);
      memcpy(&__src[v51], __dst, 0x104uLL);
      v52 += 0x100000000;
      v51 += 65;
    }
    uint64_t v60 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v78, __src, v83, v58, v59);
    *(long double *)(v76 + 8) = ldexp(*(long double *)&v60, v61) / v50;
  }
  if ((v77 & 1) != 0 || v79)
  {
    uint64_t v62 = 0;
    v85[64] = 0;
    uint64_t v63 = 0xFFFFFFFF00000000;
    uint64_t v64 = 1;
    do
    {
      uint64_t v65 = v63 >> 32;
      if (v62 == 130) {
        uint64_t v66 = 0;
      }
      else {
        uint64_t v66 = v64;
      }
      uint64_t v67 = 65 * v66;
      if (!(v62 * 4)) {
        uint64_t v65 = 2;
      }
      uint64_t v68 = 65 * v65;
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, (unsigned int *)v98 + 65 * v66, (uint64_t)v86 + 260 * v65);
      boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v80, (unsigned int *)v98 + v68, (uint64_t)v86 + 4 * v67);
      boost::polygon::detail::extended_int<64ul>::dif (__dst, v81, v80);
      memcpy(&__src[v62], __dst, 0x104uLL);
      if (v79)
      {
        boost::polygon::detail::extended_int<64ul>::mul((uint64_t)v81, &__src[v62], (uint64_t)v92 + v62 * 4);
        boost::polygon::detail::extended_int<64ul>::add(__dst, v85, v81);
        memcpy(v85, __dst, sizeof(v85));
      }
      v63 += 0x100000000;
      v62 += 65;
      ++v64;
    }
    while (v62 != 195);
    if (v77)
    {
      uint64_t v71 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval3(v78, __src, v83, v69, v70);
      double v69 = ldexp(*(long double *)&v71, v72) / v50;
      *(double *)uint64_t v76 = v69;
    }
    if (v79)
    {
      v83[195] = 1;
      v83[259] = 1;
      uint64_t v73 = boost::polygon::detail::robust_sqrt_expr<boost::polygon::detail::extended_int<64ul>,boost::polygon::detail::extended_exponent_fpt<double,boost::polygon::detail::extened_exponent_fpt_traits<double>>,boost::polygon::detail::type_converter_efpt>::eval4(v78, __src, v83, v69, v70);
      *(long double *)(v76 + 16) = ldexp(*(long double *)&v73, v74) / v50;
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = *(void *)(a2 - 8);
    int v5 = (void *)(a2 - 8);
    uint64_t v6 = v7;
    uint64_t v8 = (void *)(result + 8 * v4);
    uint64_t v9 = *v8;
    double v10 = *(double *)(v7 + 32);
    double v11 = *(double *)(*v8 + 32);
    BOOL v12 = *(double *)(v7 + 24) < *(double *)(*v8 + 24);
    if (v10 != v11) {
      BOOL v12 = v10 < v11;
    }
    if (v12)
    {
      do
      {
        *int v5 = v9;
        int v5 = v8;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v8 = (void *)(result + 8 * v4);
        uint64_t v9 = *v8;
        double v13 = *(double *)(*v8 + 32);
        BOOL v14 = *(double *)(v6 + 24) < *(double *)(*v8 + 24);
        if (v10 != v13) {
          BOOL v14 = v10 < v13;
        }
      }
      while (v14);
      *int v5 = v6;
    }
  }
  return result;
}

char *boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::_insert_new_edge<int,double>(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, void *a6)
{
  uint64_t v8 = a3;
  unint64_t v13 = a1[5];
  uint64_t v11 = (uint64_t)(a1 + 5);
  unint64_t v12 = v13;
  uint64_t v15 = *a4;
  uint64_t v14 = a4[1];
  uint64_t v16 = *(void **)(v11 - 8);
  if ((unint64_t)v16 >= v13)
  {
    int v19 = (void **)(v11 - 16);
    uint64_t v20 = *(void *)(v11 - 16);
    uint64_t v21 = ((uint64_t)v16 - v20) >> 5;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 59) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = v12 - v20;
    if (v23 >> 4 > v22) {
      unint64_t v22 = v23 >> 4;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_vertex<double>>>(v11, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[32 * v21];
    int v27 = &v25[32 * v24];
    *(void *)uint64_t v26 = v15;
    *((void *)v26 + 1) = v14;
    *((void *)v26 + 2) = 0;
    *((void *)v26 + 3) = 0;
    uint64_t v17 = v26 + 32;
    uint64_t v29 = (char *)a1[3];
    uint64_t v28 = (char *)a1[4];
    uint64_t v8 = a3;
    if (v28 != v29)
    {
      do
      {
        long long v30 = *((_OWORD *)v28 - 1);
        *((_OWORD *)v26 - 2) = *((_OWORD *)v28 - 2);
        *((_OWORD *)v26 - 1) = v30;
        v26 -= 32;
        v28 -= 32;
      }
      while (v28 != v29);
      uint64_t v28 = (char *)*v19;
    }
    a1[3] = v26;
    a1[4] = v17;
    a1[5] = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v16 = v15;
    v16[1] = v14;
    uint64_t v17 = v16 + 4;
    v16[2] = 0;
    v16[3] = 0;
  }
  a1[4] = v17;
  int v31 = v17 - 4;
  a5[1] = v17 - 4;
  a6[1] = v17 - 4;
  unsigned int v32 = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_linear_edge<boost::polygon::detail::site_event<int>>((uint64_t)a1, (int *)a2, (int *)v8);
  int v33 = boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::is_primary_edge<boost::polygon::detail::site_event<int>>((uint64_t)a1, (int *)a2, (int *)v8);
  unint64_t v34 = a1[8];
  int v35 = (char **)(a1 + 6);
  if (v33) {
    uint64_t v36 = v32 | 2;
  }
  else {
    uint64_t v36 = v32;
  }
  unint64_t v37 = a1[7];
  if (v37 >= v34)
  {
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (void)*v35) >> 4);
    unint64_t v40 = v39 + 1;
    if (v39 + 1 > 0x555555555555555) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)*v35) >> 4);
    if (2 * v41 > v40) {
      unint64_t v40 = 2 * v41;
    }
    if (v41 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v42 = 0x555555555555555;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42) {
      uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 8), v42);
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v44 = &v43[48 * v39];
    uint64_t v45 = &v43[48 * v42];
    *(_OWORD *)uint64_t v44 = 0u;
    *((_OWORD *)v44 + 1) = 0u;
    *((void *)v44 + 4) = 0;
    *((void *)v44 + 5) = v36;
    unint64_t v38 = v44 + 48;
    double v47 = (char *)a1[6];
    double v46 = (char *)a1[7];
    if (v46 != v47)
    {
      do
      {
        long long v48 = *((_OWORD *)v46 - 3);
        long long v49 = *((_OWORD *)v46 - 1);
        *((_OWORD *)v44 - 2) = *((_OWORD *)v46 - 2);
        *((_OWORD *)v44 - 1) = v49;
        *((_OWORD *)v44 - 3) = v48;
        v44 -= 48;
        v46 -= 48;
      }
      while (v46 != v47);
      double v46 = *v35;
    }
    a1[6] = v44;
    a1[7] = v38;
    a1[8] = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
    *(void *)(v37 + 32) = 0;
    *(void *)(v37 + 40) = v36;
    unint64_t v38 = (char *)(v37 + 48);
  }
  a1[7] = v38;
  *((void *)v38 - 6) = *a1 + 24 * *(void *)(a2 + 16);
  double v50 = v38 - 48;
  unint64_t v51 = a1[8];
  if ((unint64_t)v38 >= v51)
  {
    uint64_t v53 = v8;
    uint64_t v54 = a1[6];
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v38[-v54] >> 4);
    if (v55 + 1 > 0x555555555555555) {
      std::vector<PointInt64>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - v54) >> 4);
    uint64_t v57 = 2 * v56;
    if (2 * v56 <= v55 + 1) {
      uint64_t v57 = v55 + 1;
    }
    if (v56 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v58 = 0x555555555555555;
    }
    else {
      unint64_t v58 = v57;
    }
    if (v58) {
      double v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::polygon::voronoi_edge<double>>>((uint64_t)(a1 + 8), v58);
    }
    else {
      double v59 = 0;
    }
    uint64_t v60 = &v59[48 * v55];
    int v61 = &v59[48 * v58];
    *(_OWORD *)uint64_t v60 = 0u;
    *((_OWORD *)v60 + 1) = 0u;
    *((void *)v60 + 4) = 0;
    *((void *)v60 + 5) = v36;
    uint64_t v52 = v60 + 48;
    uint64_t v63 = (char *)a1[6];
    uint64_t v62 = (char *)a1[7];
    uint64_t v8 = v53;
    if (v62 != v63)
    {
      do
      {
        long long v64 = *((_OWORD *)v62 - 3);
        long long v65 = *((_OWORD *)v62 - 1);
        *((_OWORD *)v60 - 2) = *((_OWORD *)v62 - 2);
        *((_OWORD *)v60 - 1) = v65;
        *((_OWORD *)v60 - 3) = v64;
        v60 -= 48;
        v62 -= 48;
      }
      while (v62 != v63);
      uint64_t v62 = (char *)a1[6];
    }
    a1[6] = v60;
    a1[7] = v52;
    a1[8] = v61;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v38 = 0u;
    *((_OWORD *)v38 + 1) = 0u;
    *((void *)v38 + 4) = 0;
    *((void *)v38 + 5) = v36;
    uint64_t v52 = v38 + 48;
  }
  a1[7] = v52;
  *((void *)v52 - 6) = *a1 + 24 * *(void *)(v8 + 16);
  *((void *)v38 - 4) = v52 - 48;
  *((void *)v52 - 5) = v31;
  *((void *)v52 - 4) = v50;
  a5[4] = v50;
  *((void *)v38 - 3) = a5;
  uint64_t v66 = a5[2];
  *(void *)(v66 + 24) = a6;
  a6[4] = v66;
  uint64_t v67 = a6[2];
  *(void *)(v67 + 24) = v52 - 48;
  *((void *)v52 - 2) = v67;
  return v38 - 48;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::polygon::detail::ordered_queue<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,boost::polygon::voronoi_builder<int,boost::polygon::detail::voronoi_ctype_traits<int>,boost::polygon::detail::voronoi_predicates<boost::polygon::detail::voronoi_ctype_traits<int>>>::event_comparison_type>::comparison &,std::__wrap_iter<std::__list_iterator<std::pair<boost::polygon::detail::circle_event<double>,std::__map_iterator<std::__tree_iterator<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,std::__tree_node<std::__value_type<boost::polygon::detail::beach_line_node_key<boost::polygon::detail::site_event<int>>,boost::polygon::detail::beach_line_node_data<void,boost::polygon::detail::circle_event<double>>>,void *> *,long>>>,void *> *>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[v3 + 1];
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      uint64_t v9 = v6[1];
      double v10 = *(double *)(v9 + 32);
      double v11 = *(double *)(*v6 + 32);
      BOOL v12 = *(double *)(v9 + 24) < *(double *)(*v6 + 24);
      if (v10 != v11) {
        BOOL v12 = v10 < v11;
      }
      if (v12)
      {
        ++v6;
        uint64_t v7 = v8;
      }
    }
    *a1 = *v6;
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

BOOL boost::polygon::voronoi_diagram_traits<double>::vertex_equality_predicate_type::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if ((*a2 & 0x8000000000000000) == 0) {
    unint64_t v3 = 0x8000000000000000 - *a2;
  }
  if (v4 >= 0) {
    uint64_t v4 = 0x8000000000000000 - v4;
  }
  if (v3 - v4 <= 0x80) {
    int v5 = 0;
  }
  else {
    int v5 = -1;
  }
  if (v3 > v4) {
    BOOL v6 = v5;
  }
  else {
    BOOL v6 = v4 - v3 > 0x80;
  }
  if (v6) {
    return 0;
  }
  uint64_t v8 = a2[1];
  uint64_t v9 = a3[1];
  if (v8 >= 0) {
    uint64_t v8 = 0x8000000000000000 - v8;
  }
  unint64_t v10 = 0x8000000000000000 - v9;
  if (v9 < 0) {
    unint64_t v10 = a3[1];
  }
  if (v8 - v10 <= 0x80) {
    int v11 = 0;
  }
  else {
    int v11 = -1;
  }
  if (v8 > v10) {
    BOOL v12 = v11;
  }
  else {
    BOOL v12 = v10 - v8 > 0x80;
  }
  return !v12;
}

void boost::polygon::voronoi_diagram<double,boost::polygon::voronoi_diagram_traits<double>>::remove_edge(uint64_t a1, void *a2)
{
  double v2 = (void *)a2[2];
  unint64_t v3 = *(void **)(v2[4] + 16);
  if (v3 != v2)
  {
    uint64_t v4 = a2[1];
    int v5 = *(void **)(v2[4] + 16);
    do
    {
      v5[1] = v4;
      int v5 = *(void **)(v5[4] + 16);
    }
    while (v5 != v2);
  }
  uint64_t v6 = v2[3];
  uint64_t v7 = *(void *)(v2[2] + 24);
  uint64_t v8 = *(void *)(*(void *)(a2[4] + 16) + 16);
  *(void *)(v8 + 24) = v7;
  *(void *)(v7 + 32) = v8;
  uint64_t v9 = v3[2];
  *(void *)(v6 + 32) = v9;
  *(void *)(v9 + 24) = v6;
}

float64_t Decompose@<D0>(const simd_float4x4 *a1@<X0>, uint64_t a2@<X8>)
{
  TransformationMatrixFromMatrix(a1, v19);
  if (!WebCore::TransformationMatrix::decompose4((WebCore::TransformationMatrix *)v19, (uint64_t)&v9)) {
    abort();
  }
  *(float32x2_t *)&long long v3 = vcvt_f32_f64(v9);
  *(float *)&unsigned int v4 = v10;
  *((void *)&v3 + 1) = __PAIR64__(HIDWORD(v9.f64[1]), v4);
  *(int32x2_t *)&long long v5 = vrev64_s32((int32x2_t)vcvt_f32_f64(v11));
  *(float *)&unsigned int v6 = v12;
  *((void *)&v5 + 1) = __PAIR64__(HIDWORD(v11.f64[1]), v6);
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v5;
  *(float32x2_t *)&long long v3 = vcvt_f32_f64(v15);
  *(float *)&unsigned int v7 = v16;
  *((void *)&v3 + 1) = __PAIR64__(HIDWORD(v15.f64[1]), v7);
  *(float32x4_t *)(a2 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v13), v14);
  *(_OWORD *)(a2 + 48) = v3;
  float64_t result = v18.f64[0];
  *(float32x4_t *)(a2 + 64) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v17), v18);
  return result;
}

float64x2_t TransformationMatrixFromMatrix@<Q0>(const simd_float4x4 *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2 = vcvtq_f64_f32(*(float32x2_t *)&a1->columns[0].u32[2]);
  *a2 = vcvtq_f64_f32(*(float32x2_t *)a1->columns[0].f32);
  a2[1] = v2;
  float64x2_t v3 = vcvtq_f64_f32(*(float32x2_t *)&a1->columns[1].u32[2]);
  a2[2] = vcvtq_f64_f32(*(float32x2_t *)a1->columns[1].f32);
  a2[3] = v3;
  float64x2_t v4 = vcvtq_f64_f32(*(float32x2_t *)&a1->columns[2].u32[2]);
  a2[4] = vcvtq_f64_f32(*(float32x2_t *)a1->columns[2].f32);
  a2[5] = v4;
  float64x2_t result = vcvtq_f64_f32(*(float32x2_t *)a1->columns[3].f32);
  float64x2_t v6 = vcvtq_f64_f32(*(float32x2_t *)&a1->columns[3].u32[2]);
  a2[6] = result;
  a2[7] = v6;
  return result;
}

double Recompose(uint64_t a1)
{
  int8x16_t v1 = *(int8x16_t *)(a1 + 16);
  float32x2_t v2 = (float32x2_t)vzip1_s32(*(int32x2_t *)v1.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL));
  v1.i32[0] = *(void *)(a1 + 8);
  v18[0] = vcvtq_f64_f32(*(float32x2_t *)a1);
  v18[1] = vcvtq_f64_f32(*(float32x2_t *)v1.i8);
  float64x2_t v3 = vcvtq_f64_f32(v2);
  float32x4_t v4 = *(float32x4_t *)(a1 + 32);
  int32x4_t v5 = *(int32x4_t *)(a1 + 48);
  v18[2] = v3;
  v18[3] = vcvtq_f64_f32(*(float32x2_t *)v4.f32);
  v18[4] = vcvt_hight_f64_f32(v4);
  v18[5] = vcvtq_f64_f32(*(float32x2_t *)v5.i8);
  int32x4_t v6 = *(int32x4_t *)(a1 + 64);
  v18[6] = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v5, vuzp1q_s32(v5, v6)));
  v18[7] = vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), 4uLL));
  double v19 = *(float *)&v6.i32[3];
  uint64_t v8 = 0x3FF0000000000000;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0x3FF0000000000000;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0x3FF0000000000000;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v17 = 0x3FF0000000000000;
  WebCore::TransformationMatrix::recompose4((uint64_t)&v8, (uint64_t)v18);
  return TransformationMatrixToMatrix((float64x2_t *)&v8);
}

double TransformationMatrixToMatrix(float64x2_t *a1)
{
  *(void *)&double result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]).u64[0];
  return result;
}

void Interpolate(const simd_float4x4 *a1, const simd_float4x4 *a2, float a3)
{
  TransformationMatrixFromMatrix(a1, v6);
  TransformationMatrixFromMatrix(a2, v5);
  WebCore::TransformationMatrix::blend((WebCore::TransformationMatrix *)v5, (const WebCore::TransformationMatrix *)v6, a3);
  TransformationMatrixToMatrix(v5);
}

double FLDeceleratedRestPosition(double a1, double a2, double a3)
{
  return a2 / 1000.0 * a3 / (1.0 - a3) + a1;
}

double FLRubberbandValue(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0) {
    return a2;
  }
  if (a1 < a2) {
    a3 = -a3;
  }
  return a2 + (1.0 - 1.0 / (a4 * ((a1 - a2) / a3) + 1.0)) * a3;
}

double FLInverseRubberbandValue(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0) {
    return a2;
  }
  if (a1 < a2) {
    a3 = -a3;
  }
  return a2 + (-1.0 / ((a1 - a2) / a3 + -1.0) + -1.0) / a4 * a3;
}

double FLSpringConvertStiffnessDampingToDampingRatioResponse(double *a1, double *a2, double a3, double a4)
{
  double result = sqrt(a3);
  if (a1) {
    *a1 = a4 / (result + result);
  }
  if (a2)
  {
    double result = 6.28318531 / result;
    *a2 = result;
  }
  return result;
}

double FLSpringConvertMassStiffnessDampingToDampingRatioResponse(double *a1, double *a2, double result, double a4, double a5)
{
  if (a1)
  {
    double v5 = sqrt(result * a4);
    *a1 = a5 / (v5 + v5);
  }
  if (a2)
  {
    double result = 6.28318531 / sqrt(a4 / result);
    *a2 = result;
  }
  return result;
}

double FLSpringConvertDampingRatioResponseToStiffnessDamping(double *a1, double *a2, double result, double a4)
{
  double v4 = 6.28318531 / a4 * (6.28318531 / a4);
  if (a1) {
    *a1 = v4;
  }
  if (a2)
  {
    double v5 = sqrt(v4);
    double result = (v5 + v5) * result;
    *a2 = result;
  }
  return result;
}

double FLSpringConvertMassStiffnessDampingToStiffnessDamping(double *a1, double *a2, double result, double a4, double a5)
{
  double v5 = sqrt(a4 / result);
  double v6 = 6.28318531 / (6.28318531 / v5) * (6.28318531 / (6.28318531 / v5));
  if (a1) {
    *a1 = v6;
  }
  if (a2)
  {
    double v7 = sqrt(result * a4);
    double v8 = sqrt(v6);
    double result = a5 / (v7 + v7) * (v8 + v8);
    *a2 = result;
  }
  return result;
}

double FLCompoundSpringMake@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D3>, double a5@<D4>)
{
  double v27 = a5;
  double v28 = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v9 = a1 + 16;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 336) = 1;
  double v26 = 0.0;
  double v25 = 0.0;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v26, &v25, 1.0, 0.5);
  FLSimpleSpringMake(v9, a4, 0.0, a4, v26, v25);
  FLSimpleSpringMake((uint64_t)&v21, a5, 0.0, a5, v26, v25);
  long long v10 = v22;
  *(_OWORD *)(a1 + 80) = v21;
  *(_OWORD *)(a1 + 96) = v10;
  long long v11 = v24;
  *(_OWORD *)(a1 + 112) = v23;
  *(_OWORD *)(a1 + 128) = v11;
  double v19 = 0.0;
  double v20 = 0.0;
  FLSpringConvertStiffnessDampingToDampingRatioResponse(&v20, &v19, a4, a5);
  FLSimpleSpringMake((uint64_t)&v21, v20, 0.0, v20, v26, v25);
  long long v12 = v22;
  *(_OWORD *)(a1 + 144) = v21;
  *(_OWORD *)(a1 + 160) = v12;
  long long v13 = v24;
  *(_OWORD *)(a1 + 176) = v23;
  *(_OWORD *)(a1 + 192) = v13;
  FLSimpleSpringMake((uint64_t)&v21, v19, 0.0, v19, v26, v25);
  long long v14 = v22;
  *(_OWORD *)(a1 + 208) = v21;
  *(_OWORD *)(a1 + 224) = v14;
  long long v15 = v24;
  *(_OWORD *)(a1 + 240) = v23;
  *(_OWORD *)(a1 + 256) = v15;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v28, &v27, v20, v19);
  FLSimpleSpringMake((uint64_t)&v21, a2, 0.0, a2, v26, v25);
  long long v16 = v22;
  *(_OWORD *)(a1 + 272) = v21;
  *(_OWORD *)(a1 + 288) = v16;
  double result = *(double *)&v23;
  long long v18 = v24;
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 320) = v18;
  return result;
}

void FLCompoundSpringMakeWithDampingRatioResponse(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D3>, double a5@<D4>)
{
  double v8 = 0.0;
  double v9 = 0.0;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v9, &v8, a4, a5);
  FLCompoundSpringMake(a1, a2, a3, v9, v8);
}

uint64_t FLCompoundSpringSetAnchorImmediately(uint64_t result, double a2)
{
  *(double *)(result + 312) = a2;
  *(double *)(result + 272) = a2;
  *(void *)(result + 280) = 0;
  return result;
}

void FLCompoundSpringSetAnchorWithResponse(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 272) = a3;
    *(void *)(a1 + 280) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 296) = v7;
    *(void *)(a1 + 304) = v5;
    a3 = a2;
  }
  *(double *)(a1 + 312) = a3;
}

void FLCompoundSpringSetAnchorWithIntermediatePositionAndResponse(uint64_t a1, double a2, double a3, double a4)
{
  if (a4 == 0.0)
  {
    *(double *)(a1 + 312) = a2;
  }
  else
  {
    FLCompoundSpringSetAnchorWithResponse(a1, a2, a4);
    a2 = a3;
  }
  *(double *)(a1 + 272) = a2;
  *(void *)(a1 + 280) = 0;
}

uint64_t FLCompoundSpringSetStiffnessImmediately(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  *(double *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  return result;
}

void FLCompoundSpringSetStiffnessWithResponse(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 16) = a2;
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v5;
  }
  *(double *)(a1 + 56) = a2;
}

uint64_t FLCompoundSpringSetDampingImmediately(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  *(double *)(result + 80) = a2;
  *(void *)(result + 88) = 0;
  return result;
}

void FLCompoundSpringSetDampingWithResponse(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 80) = a2;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 104) = v7;
    *(void *)(a1 + 112) = v5;
  }
  *(double *)(a1 + 120) = a2;
}

uint64_t FLCompoundSpringSetDampingRatioImmediately(uint64_t result, double a2)
{
  *(double *)(result + 184) = a2;
  *(double *)(result + 144) = a2;
  *(void *)(result + 152) = 0;
  return result;
}

void FLCompoundSpringSetDampingRatioSmoothly(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 144) = a2;
    *(void *)(a1 + 152) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 168) = v7;
    *(void *)(a1 + 176) = v5;
  }
  *(double *)(a1 + 184) = a2;
}

uint64_t FLCompoundSpringSetResponseImmediately(uint64_t result, double a2)
{
  *(double *)(result + 248) = a2;
  *(double *)(result + 208) = a2;
  *(void *)(result + 216) = 0;
  return result;
}

void FLCompoundSpringSetResponseSmoothly(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 208) = a2;
    *(void *)(a1 + 216) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    FLSpringConvertDampingRatioResponseToStiffnessDamping((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 232) = v7;
    *(void *)(a1 + 240) = v5;
  }
  *(double *)(a1 + 248) = a2;
}

double FLCompoundSpringStep@<D0>(void *__src@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  memcpy(a2, __src, 0x158uLL);
  if (*((unsigned char *)a2 + 336))
  {
    long long v5 = a2[10];
    __dst[0] = a2[9];
    __dst[1] = v5;
    long long v6 = a2[12];
    __dst[2] = a2[11];
    __dst[3] = v6;
    FLSimpleSpringStep((uint64_t)__dst, (uint64_t)(a2 + 9), a3);
    long long v7 = a2[14];
    long long v24 = a2[13];
    long long v25 = v7;
    long long v8 = a2[16];
    long long v26 = a2[15];
    long long v27 = v8;
    FLSimpleSpringStep((uint64_t)&v24, (uint64_t)__dst, a3);
    long long v9 = __dst[1];
    a2[13] = __dst[0];
    a2[14] = v9;
    long long v10 = __dst[3];
    a2[15] = __dst[2];
    a2[16] = v10;
  }
  else
  {
    long long v11 = a2[2];
    __dst[0] = a2[1];
    __dst[1] = v11;
    long long v12 = a2[4];
    __dst[2] = a2[3];
    __dst[3] = v12;
    FLSimpleSpringStep((uint64_t)__dst, (uint64_t)(a2 + 1), a3);
    long long v13 = a2[6];
    long long v24 = a2[5];
    long long v25 = v13;
    long long v14 = a2[8];
    long long v26 = a2[7];
    long long v27 = v14;
    FLSimpleSpringStep((uint64_t)&v24, (uint64_t)__dst, a3);
    long long v15 = __dst[1];
    a2[5] = __dst[0];
    a2[6] = v15;
    long long v16 = __dst[3];
    a2[7] = __dst[2];
    a2[8] = v16;
  }
  long long v17 = a2[18];
  long long v24 = a2[17];
  long long v25 = v17;
  long long v18 = a2[20];
  long long v26 = a2[19];
  long long v27 = v18;
  FLSimpleSpringStep((uint64_t)&v24, (uint64_t)__dst, a3);
  long long v19 = __dst[1];
  a2[17] = __dst[0];
  a2[18] = v19;
  long long v20 = __dst[3];
  a2[19] = __dst[2];
  a2[20] = v20;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  memcpy(__dst, a2, 0x158uLL);
  _FLSimpleSpringFromCompoundSpring((uint64_t)__dst, (uint64_t)&v24);
  v22[0] = v24;
  v22[1] = v25;
  v22[2] = v26;
  v22[3] = v27;
  FLSimpleSpringStep((uint64_t)v22, (uint64_t)__dst, a3);
  double result = *(double *)__dst;
  *a2 = __dst[0];
  return result;
}

void _FLSimpleSpringFromCompoundSpring(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  double v4 = *(double *)(a1 + 272);
  if (*(unsigned char *)(a1 + 336)) {
    FLSimpleSpringMakeWithDampingRatioResponse(a2, v2, v3, v4, *(double *)(a1 + 144), *(double *)(a1 + 208));
  }
  else {
    FLSimpleSpringMake(a2, v2, v3, v4, *(double *)(a1 + 16), *(double *)(a1 + 80));
  }
}

BOOL FLCompoundSpringIsStable(void *__src)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  memcpy(v15, __src, 0x158uLL);
  _FLSimpleSpringFromCompoundSpring((uint64_t)v15, (uint64_t)&v16);
  if (*((unsigned char *)__src + 336))
  {
    v15[0] = v16;
    v15[1] = v17;
    v15[2] = v18;
    v15[3] = v19;
    BOOL result = FLSimpleSpringIsStable((double *)v15);
    if (result)
    {
      long long v3 = *((_OWORD *)__src + 18);
      v15[0] = *((_OWORD *)__src + 17);
      v15[1] = v3;
      long long v4 = *((_OWORD *)__src + 20);
      v15[2] = *((_OWORD *)__src + 19);
      v15[3] = v4;
      BOOL result = FLSimpleSpringIsStable((double *)v15);
      if (result)
      {
        long long v5 = *((_OWORD *)__src + 10);
        v15[0] = *((_OWORD *)__src + 9);
        v15[1] = v5;
        long long v6 = *((_OWORD *)__src + 12);
        v15[2] = *((_OWORD *)__src + 11);
        v15[3] = v6;
        BOOL result = FLSimpleSpringIsStable((double *)v15);
        if (result)
        {
          long long v7 = *((_OWORD *)__src + 14);
          v15[0] = *((_OWORD *)__src + 13);
          v15[1] = v7;
          long long v8 = *((_OWORD *)__src + 15);
          long long v9 = *((_OWORD *)__src + 16);
LABEL_10:
          v15[2] = v8;
          v15[3] = v9;
          return FLSimpleSpringIsStable((double *)v15);
        }
      }
    }
  }
  else
  {
    v15[0] = v16;
    v15[1] = v17;
    v15[2] = v18;
    v15[3] = v19;
    BOOL result = FLSimpleSpringIsStable((double *)v15);
    if (result)
    {
      long long v10 = *((_OWORD *)__src + 18);
      v15[0] = *((_OWORD *)__src + 17);
      v15[1] = v10;
      long long v11 = *((_OWORD *)__src + 20);
      v15[2] = *((_OWORD *)__src + 19);
      v15[3] = v11;
      BOOL result = FLSimpleSpringIsStable((double *)v15);
      if (result)
      {
        long long v12 = *((_OWORD *)__src + 2);
        v15[0] = *((_OWORD *)__src + 1);
        v15[1] = v12;
        long long v13 = *((_OWORD *)__src + 4);
        v15[2] = *((_OWORD *)__src + 3);
        v15[3] = v13;
        BOOL result = FLSimpleSpringIsStable((double *)v15);
        if (result)
        {
          long long v14 = *((_OWORD *)__src + 6);
          v15[0] = *((_OWORD *)__src + 5);
          v15[1] = v14;
          long long v8 = *((_OWORD *)__src + 7);
          long long v9 = *((_OWORD *)__src + 8);
          goto LABEL_10;
        }
      }
    }
  }
  return result;
}

void FLSimpleSpringMake(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a4;
}

BOOL FLSimpleSpringIsStable(double *a1)
{
  return vabdd_f64(*a1, a1[5]) <= a1[6] && fabs(a1[1]) <= a1[7];
}

double FLSimpleSpringMakeWithDampingRatioResponse@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  uint64_t v12 = 0;
  double v13 = 0.0;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v13, (double *)&v12, a5, a6);
  uint64_t v11 = v12;
  double result = v13;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 32) = v11;
  *(double *)(a1 + 40) = a4;
  return result;
}

double FLSimpleSpringSetDampingRatioResponse(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = 0;
  double v7 = 0.0;
  FLSpringConvertDampingRatioResponseToStiffnessDamping(&v7, (double *)&v6, a2, a3);
  uint64_t v5 = v6;
  double result = v7;
  *(double *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v5;
  return result;
}

void FLSimpleSpringStep(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5 = *(double *)(a1 + 40);
  if (vabdd_f64(*(double *)a1, v5) <= *(double *)(a1 + 48))
  {
    double v6 = *(double *)(a1 + 8);
    if (fabs(v6) <= *(double *)(a1 + 56))
    {
      long long v25 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_OWORD *)(a2 + 16) = v25;
      long long v26 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a2 + 48) = v26;
      return;
    }
  }
  else
  {
    double v6 = *(double *)(a1 + 8);
  }
  double v7 = *(double *)a1 - v5;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v8;
  long long v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  double v10 = sqrt(*(double *)(a1 + 24));
  double v11 = *(double *)(a1 + 32) * 0.5;
  double v12 = -v11;
  double v13 = exp(-(v11 * a3));
  double v14 = v6 + v11 * v7;
  if (v11 >= v10)
  {
    if (v11 <= v10)
    {
      double v19 = v7 + v14 * a3;
    }
    else
    {
      double v20 = sqrt(v11 * v11 - v10 * v10);
      long double v21 = v20 * a3;
      double v22 = v14 / v20;
      double v23 = cosh(v21);
      long double v24 = sinh(v21);
      double v19 = v22 * v24 + v7 * v23;
      double v14 = v20 * (v22 * v23) + v7 * v24 * v20;
    }
  }
  else
  {
    double v15 = sqrt(v11 * v12 + v10 * v10);
    double v16 = v15 * a3;
    double v17 = v14 / v15;
    __double2 v18 = __sincos_stret(v16);
    double v19 = v17 * v18.__sinval + v7 * v18.__cosval;
    double v14 = v15 * (v17 * v18.__cosval) + -(v18.__sinval * v7) * v15;
  }
  *(double *)a2 = v5 + v13 * v19;
  *(double *)(a2 + 8) = v13 * v12 * v19 + v13 * v14;
}

uint64_t type metadata accessor for DollHouse()
{
  uint64_t result = qword_2687AC030;
  if (!qword_2687AC030) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23469DC2C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23469DCC8()
{
  uint64_t v1 = qword_2687ABFB8;
  if (*(void *)(v0 + qword_2687ABFB8))
  {
    uint64_t v2 = *(void *)(v0 + qword_2687ABFB8);
  }
  else
  {
    type metadata accessor for DebugDollHouseManager();
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(void *)(v2 + 96) = 0;
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 24) = v0;
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v2;
}

uint64_t sub_23469DD4C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    double v5 = (int *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_23469DDA4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    double v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_23469DDFC()
{
  uint64_t v1 = qword_2687ABFC8;
  if (*(void *)(v0 + qword_2687ABFC8))
  {
    uint64_t v2 = *(void *)(v0 + qword_2687ABFC8);
  }
  else
  {
    uint64_t v3 = sub_23469E068();
    float v4 = *(float *)(v0 + qword_2687ABFB0);
    type metadata accessor for EntityManager();
    uint64_t v5 = swift_allocObject();
    uint64_t v2 = sub_2346A1CC8(v3, 0, 1, v5, v4);
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_23469DEA4()
{
  return sub_23469DFB0(&qword_2687ABFD0, (void (*)(void))type metadata accessor for DollhouseDebugMaterialFactory, sub_2346D0C58);
}

uint64_t sub_23469DED8()
{
  uint64_t v1 = qword_2687ABFD8;
  if (*(void *)(v0 + qword_2687ABFD8))
  {
    uint64_t v2 = *(void *)(v0 + qword_2687ABFD8);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for MetalConstants();
    swift_initStaticObject();
    uint64_t v4 = sub_2346FFCC4();
    type metadata accessor for DollhouseColorMaterialFactory();
    swift_allocObject();
    uint64_t v2 = sub_2346D0C58(v4);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_23469DF7C()
{
  return sub_23469DFB0(&qword_2687ABFE0, (void (*)(void))type metadata accessor for DollHouseDebugNormalsMaterialFactory, sub_2346D17D0);
}

uint64_t sub_23469DFB0(uint64_t *a1, void (*a2)(void), uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(v3 + *a1);
  if (v5)
  {
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v9 = v3;
    type metadata accessor for MetalConstants();
    swift_initStaticObject();
    uint64_t v10 = sub_2346FFCC4();
    a2(0);
    swift_allocObject();
    uint64_t v6 = a3(v10);
    *(void *)(v9 + v4) = v6;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v6;
}

uint64_t sub_23469E068()
{
  uint64_t v1 = qword_2687ABFE8;
  if (*(void *)(v0 + qword_2687ABFE8))
  {
    uint64_t v2 = *(void *)(v0 + qword_2687ABFE8);
  }
  else
  {
    uint64_t v3 = v0;
    type metadata accessor for MetalConstants();
    swift_initStaticObject();
    uint64_t v4 = sub_2346FFCC4();
    type metadata accessor for DollhouseMaterialFactory();
    swift_allocObject();
    uint64_t v2 = sub_2346D1C50(v4);
    *(void *)(v2 + 24) = &off_26E7719D8;
    swift_unknownObjectWeakAssign();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void sub_23469E128()
{
  uint64_t v21 = sub_2347ED540();
  uint64_t v1 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + qword_2687ABFF0)) {
    return;
  }
  uint64_t v4 = sub_23469DDFC();
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 96);
  swift_bridgeObjectRetain();
  swift_release();
  int64_t v6 = 0;
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v22 = v5 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  double v12 = (void (**)(uint64_t, char *, uint64_t))(v1 + 40);
  while (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v6 << 6);
LABEL_23:
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
    uint64_t v19 = qword_2687ADE78;
    if (*(float *)(v18 + qword_2687ADE78) != 1.0)
    {
      swift_retain();
      sub_2347ED520();
      uint64_t v20 = v18 + qword_2687ADE80;
      swift_beginAccess();
      (*v12)(v20, v3, v21);
      swift_endAccess();
      *(_DWORD *)(v18 + v19) = 1065353216;
      swift_release();
    }
  }
  int64_t v15 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v15 >= v11) {
    goto LABEL_25;
  }
  unint64_t v16 = *(void *)(v22 + 8 * v15);
  ++v6;
  if (v16) {
    goto LABEL_22;
  }
  int64_t v6 = v15 + 1;
  if (v15 + 1 >= v11) {
    goto LABEL_25;
  }
  unint64_t v16 = *(void *)(v22 + 8 * v6);
  if (v16) {
    goto LABEL_22;
  }
  int64_t v6 = v15 + 2;
  if (v15 + 2 >= v11) {
    goto LABEL_25;
  }
  unint64_t v16 = *(void *)(v22 + 8 * v6);
  if (v16) {
    goto LABEL_22;
  }
  int64_t v6 = v15 + 3;
  if (v15 + 3 >= v11) {
    goto LABEL_25;
  }
  unint64_t v16 = *(void *)(v22 + 8 * v6);
  if (v16)
  {
LABEL_22:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v6 << 6);
    goto LABEL_23;
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v11)
  {
LABEL_25:
    swift_release();
    return;
  }
  unint64_t v16 = *(void *)(v22 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v22 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_28:
  __break(1u);
}

void sub_23469E3D8()
{
}

void sub_23469E400()
{
  *(void *)(v0 + qword_2687ABFB8) = 0;
  *(unsigned char *)(v0 + qword_2687ABFC0) = 1;
  *(void *)(v0 + qword_2687ABFC8) = 0;
  *(void *)(v0 + qword_2687ABFD0) = 0;
  *(void *)(v0 + qword_2687ABFD8) = 0;
  *(void *)(v0 + qword_2687ABFE0) = 0;
  *(void *)(v0 + qword_2687ABFE8) = 0;
  *(unsigned char *)(v0 + qword_2687ABFF0) = 1;
  *(unsigned char *)(v0 + qword_2687ABFF8) = 0;
  *(unsigned char *)(v0 + qword_2687AC000) = 0;
  *(void *)(v0 + qword_2687AC008) = MEMORY[0x263F8EE80];
  *(_DWORD *)(v0 + qword_2687AC010) = 0;
  *(_DWORD *)(v0 + qword_2687AC018) = 0;
  *(_DWORD *)(v0 + qword_2687AC020) = 1065353216;
  uint64_t v1 = (void *)(v0 + qword_2687AC028);
  void *v1 = 0;
  v1[1] = 0;
  swift_release();
  sub_2347EEEA0();
  __break(1u);
}

uint64_t sub_23469E52C(float a1)
{
  *(void *)(v1 + qword_2687ABFB8) = 0;
  *(unsigned char *)(v1 + qword_2687ABFC0) = 1;
  *(void *)(v1 + qword_2687ABFC8) = 0;
  *(void *)(v1 + qword_2687ABFD0) = 0;
  *(void *)(v1 + qword_2687ABFD8) = 0;
  *(void *)(v1 + qword_2687ABFE0) = 0;
  *(void *)(v1 + qword_2687ABFE8) = 0;
  *(unsigned char *)(v1 + qword_2687ABFF0) = 1;
  *(unsigned char *)(v1 + qword_2687ABFF8) = 0;
  *(unsigned char *)(v1 + qword_2687AC000) = 0;
  *(void *)(v1 + qword_2687AC008) = MEMORY[0x263F8EE80];
  *(_DWORD *)(v1 + qword_2687AC010) = 0;
  *(_DWORD *)(v1 + qword_2687AC018) = 0;
  *(_DWORD *)(v1 + qword_2687AC020) = 1065353216;
  uint64_t v2 = (void *)(v1 + qword_2687AC028);
  *uint64_t v2 = 0;
  v2[1] = 0;
  *(float *)(v1 + qword_2687ABFB0) = a1;
  uint64_t v3 = sub_2347ED690();
  swift_retain();
  uint64_t v4 = sub_23469DDFC();
  *(void *)(v4 + 72) = v3;
  swift_retain_n();
  swift_release();
  if (*(void *)(v4 + 72))
  {
    sub_2347EDFB0();
    swift_retain();
    sub_2347ED700();
    swift_release();
  }
  swift_release();
  swift_release();
  *(void *)(sub_23469DDFC() + 24) = &off_26E7719F0;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_23469E6F8()
{
  uint64_t v1 = sub_23469DDFC();
  uint64_t v2 = qword_2687AC000;
  *(unsigned char *)(v1 + 136) = *(unsigned char *)(v0 + qword_2687AC000);
  swift_release();
  switch(*(unsigned char *)(v0 + v2))
  {
    case 1:
      uint64_t v3 = sub_23469DDFC();
      uint64_t v4 = sub_23469DEA4();
      uint64_t v5 = type metadata accessor for DollhouseDebugMaterialFactory();
      goto LABEL_6;
    case 2:
      uint64_t v3 = sub_23469DDFC();
      uint64_t v4 = sub_23469DED8();
      uint64_t v5 = type metadata accessor for DollhouseColorMaterialFactory();
LABEL_6:
      int64_t v6 = &off_26E772228;
      break;
    case 3:
      uint64_t v3 = sub_23469DDFC();
      uint64_t v4 = sub_23469DF7C();
      uint64_t v5 = type metadata accessor for DollHouseDebugNormalsMaterialFactory();
      int64_t v6 = &off_26E772198;
      break;
    default:
      uint64_t v3 = sub_23469DDFC();
      uint64_t v4 = sub_23469E068();
      uint64_t v5 = type metadata accessor for DollhouseMaterialFactory();
      int64_t v6 = &off_26E772108;
      break;
  }
  uint64_t v10 = v5;
  int64_t v11 = v6;
  *(void *)&long long v9 = v4;
  sub_2346A1E30(&v9, (uint64_t)v8);
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3 + 32);
  sub_2346A1E30(v8, v3 + 32);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_23469E83C(uint64_t *a1)
{
  if (qword_2687ABCD0 != -1) {
    swift_once();
  }
  unint64_t v3 = sub_234784A34(a1, 3u);
  uint64_t v4 = sub_2347B50FC(v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_2346A185C(v4);
  swift_bridgeObjectRelease();
  *(void *)(v1 + qword_2687AC008) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(sub_23469DCC8() + 16);
  uint64_t result = swift_release();
  if ((v6 & 2) != 0)
  {
    uint64_t v8 = sub_23469DCC8();
    unint64_t v9 = sub_234784A34(a1, 3u);
    sub_2347B4580(v9);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    *(void *)(v8 + 32) = v11;
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_23469E960(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2347ED5C0();
  uint64_t v134 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v128 = (char *)v118 - v8;
  MEMORY[0x270FA5388](v9);
  int v129 = (char *)v118 - v10;
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)v118 - v12;
  MEMORY[0x270FA5388](v14);
  long long v147 = (void (*)(char *, size_t, uint64_t, __n128, __n128))((char *)v118 - v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v118 - v20;
  uint64_t v136 = sub_2347ED540();
  uint64_t v22 = *(void *)(v136 - 8);
  MEMORY[0x270FA5388](v136);
  int v135 = (char *)v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + qword_2687ABFF8) == 1)
  {
    uint64_t v24 = sub_23469DDFC();
    swift_beginAccess();
    uint64_t v25 = *(void *)(v24 + 96);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v26 = 0;
    uint64_t v27 = *(void *)(v25 + 64);
    v146.n128_u64[0] = v25 + 64;
    uint64_t v28 = 1 << *(unsigned char *)(v25 + 32);
    uint64_t v29 = -1;
    if (v28 < 64) {
      uint64_t v29 = ~(-1 << v28);
    }
    unint64_t v30 = v29 & v27;
    long long v147 = (void (*)(char *, size_t, uint64_t, __n128, __n128))((unint64_t)(v28 + 63) >> 6);
    int v31 = v135;
    while (1)
    {
      if (v30)
      {
        unint64_t v32 = __clz(__rbit64(v30));
        v30 &= v30 - 1;
        unint64_t v33 = v32 | (v26 << 6);
      }
      else
      {
        uint64_t v34 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_93;
        }
        if (v34 >= (uint64_t)v147)
        {
LABEL_37:
          swift_release();
          return;
        }
        unint64_t v35 = *(void *)(v146.n128_u64[0] + 8 * v34);
        ++v26;
        if (!v35)
        {
          uint64_t v26 = v34 + 1;
          if (v34 + 1 >= (uint64_t)v147) {
            goto LABEL_37;
          }
          unint64_t v35 = *(void *)(v146.n128_u64[0] + 8 * v26);
          if (!v35)
          {
            uint64_t v26 = v34 + 2;
            if (v34 + 2 >= (uint64_t)v147) {
              goto LABEL_37;
            }
            unint64_t v35 = *(void *)(v146.n128_u64[0] + 8 * v26);
            if (!v35)
            {
              uint64_t v26 = v34 + 3;
              if (v34 + 3 >= (uint64_t)v147) {
                goto LABEL_37;
              }
              unint64_t v35 = *(void *)(v146.n128_u64[0] + 8 * v26);
              if (!v35)
              {
                uint64_t v36 = v34 + 4;
                if (v36 >= (uint64_t)v147) {
                  goto LABEL_37;
                }
                unint64_t v35 = *(void *)(v146.n128_u64[0] + 8 * v36);
                if (!v35)
                {
                  while (1)
                  {
                    uint64_t v26 = v36 + 1;
                    if (__OFADD__(v36, 1)) {
                      goto LABEL_94;
                    }
                    if (v26 >= (uint64_t)v147) {
                      goto LABEL_37;
                    }
                    unint64_t v35 = *(void *)(v146.n128_u64[0] + 8 * v26);
                    ++v36;
                    if (v35) {
                      goto LABEL_22;
                    }
                  }
                }
                uint64_t v26 = v36;
              }
            }
          }
        }
LABEL_22:
        unint64_t v30 = (v35 - 1) & v35;
        unint64_t v33 = __clz(__rbit64(v35)) + (v26 << 6);
      }
      uint64_t v37 = *(void *)(*(void *)(v25 + 56) + 8 * v33);
      uint64_t v38 = qword_2687ADE78;
      if (*(float *)(v37 + qword_2687ADE78) != 0.15)
      {
        swift_retain();
        sub_2347ED520();
        uint64_t v39 = v37 + qword_2687ADE80;
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v22 + 40))(v39, v31, v136);
        swift_endAccess();
        *(_DWORD *)(v37 + v38) = 1041865114;
        swift_release();
      }
    }
  }
  int v132 = v21;
  if (*(unsigned char *)(v2 + qword_2687ABFF0) == 1)
  {
    uint64_t v40 = qword_2687AC008;
    if (*(void *)(*(void *)(v2 + qword_2687AC008) + 16) && a1 != 0)
    {
      int v122 = v18;
      int v120 = v6;
      swift_retain();
      sub_2347EDED0();
      long long v145 = v42;
      swift_retain();
      sub_2347EDED0();
      __n128 v146 = (__n128)v43;
      swift_release();
      double v44 = COERCE_DOUBLE(vzip1_s32(*(int32x2_t *)&v145, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL)));
      *(float *)v45.i32 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&v44, *(float32x2_t *)&v44)));
      __n128 v146 = (__n128)v45;
      double v46 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v44, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 0)));
      if (*(float *)v45.i32 >= 0.01) {
        *(double *)&float32x2_t v47 = v46;
      }
      else {
        *(double *)&float32x2_t v47 = v44;
      }
      uint64_t v48 = sub_23469DDFC();
      swift_beginAccess();
      uint64_t v49 = *(void *)(v48 + 96);
      swift_bridgeObjectRetain();
      swift_release();
      size_t v50 = sub_2347C15BC(v49);
      swift_bridgeObjectRelease();
      size_t v148 = v50;
      v51.n128_u32[0] = 1008981770;
      __n128 v52 = v146;
      v118[1] = a1;
      uint64_t v130 = v2;
      if (v146.n128_f32[0] < 0.01)
      {
LABEL_78:
        uint64_t v95 = *(void *)(v148 + 16);
        uint64_t v96 = v122;
        size_t v142 = v148;
        if (v95)
        {
          uint64_t v97 = v134 + 16;
          long long v147 = *(void (**)(char *, size_t, uint64_t, __n128, __n128))(v134 + 16);
          size_t v98 = v148 + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
          long long v144 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v134 + 72);
          *(void *)&long long v145 = v134 + 48;
          uint64_t v143 = (void (**)(char *, char *, uint64_t))(v134 + 32);
          uint64_t v99 = v22;
          uint64_t v100 = (void (**)(uint64_t, uint64_t))(v134 + 8);
          int v141 = (void (**)(uint64_t, char *, uint64_t))(v99 + 40);
          v146.n128_u64[0] = v134 + 56;
          unint64_t v140 = (v134 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
          v134 += 16;
          v147(v122, v98, v4, v51, v52);
          while (1)
          {
            uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128, __n128))v146.n128_u64[0];
            (*(void (**)(char *, void, uint64_t, uint64_t))v146.n128_u64[0])(v96, 0, 1, v4);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))v145)(v96, 1, v4) == 1) {
              break;
            }
            uint64_t v105 = v128;
            (*v143)(v128, v96, v4);
            uint64_t v106 = sub_23469DDFC();
            uint64_t v107 = (uint64_t)v120;
            double v108 = v105;
            uint64_t v109 = v97;
            ((void (*)(char *, char *, uint64_t))v147)(v120, v108, v4);
            swift_beginAccess();
            uint64_t v110 = *(void *)(v106 + 96);
            swift_bridgeObjectRetain();
            swift_release();
            if (*(void *)(v110 + 16) && (unint64_t v111 = sub_2347BFA88(v107), (v112 & 1) != 0))
            {
              uint64_t v113 = *(void *)(*(void *)(v110 + 56) + 8 * v111);
              swift_retain();
              swift_bridgeObjectRelease();
              long long v114 = *v100;
              (*v100)(v107, v4);
              uint64_t v115 = qword_2687ADE78;
              if (*(float *)(v113 + qword_2687ADE78) != 1.0)
              {
                int v116 = v135;
                sub_2347ED520();
                uint64_t v117 = v113 + qword_2687ADE80;
                swift_beginAccess();
                (*v141)(v117, v116, v136);
                swift_endAccess();
                *(_DWORD *)(v113 + v115) = 1065353216;
              }
              swift_release();
              v114((uint64_t)v128, v4);
              uint64_t v97 = v134;
            }
            else
            {
              swift_bridgeObjectRelease();
              int v101 = *v100;
              (*v100)(v107, v4);
              v101((uint64_t)v128, v4);
              uint64_t v97 = v109;
            }
            v98 += (size_t)v144;
            --v95;
            uint64_t v96 = v122;
            if (!v95)
            {
              v104(v122, 1, 1, v4, v102, v103);
              break;
            }
            v147(v122, v98, v4, v102, v103);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128, __n128))(v134 + 56))(v122, 1, 1, v4, v51, v52);
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v53 = *(void *)(v2 + v40);
        uint64_t v54 = *(void *)(v53 + 64);
        uint64_t v123 = v53 + 64;
        uint64_t v55 = 1 << *(unsigned char *)(v53 + 32);
        uint64_t v56 = -1;
        if (v55 < 64) {
          uint64_t v56 = ~(-1 << v55);
        }
        unint64_t v57 = v56 & v54;
        int64_t v124 = (unint64_t)(v55 + 63) >> 6;
        uint64_t v58 = v134;
        v146.n128_u64[0] = v134 + 16;
        uint64_t v59 = v134 + 56;
        uint64_t v139 = v134 + 48;
        v138 = (void (**)(char *, char *, uint64_t))(v134 + 32);
        uint64_t v60 = v22;
        int v61 = (void (**)(char *, uint64_t))(v134 + 8);
        v118[0] = v60;
        long long v119 = (void (**)(uint64_t, char *, uint64_t))(v60 + 40);
        uint64_t v62 = swift_bridgeObjectRetain();
        unint64_t v63 = v57;
        int64_t v64 = 0;
        long long v65 = v132;
        uint64_t v121 = v62;
        uint64_t v131 = v59;
        while (1)
        {
          do
          {
            if (v63)
            {
              unint64_t v67 = __clz(__rbit64(v63));
              v63 &= v63 - 1;
              unint64_t v68 = v67 | (v64 << 6);
            }
            else
            {
              int64_t v69 = v64 + 1;
              if (__OFADD__(v64, 1)) {
                goto LABEL_95;
              }
              if (v69 >= v124)
              {
LABEL_77:
                swift_release();
                uint64_t v22 = v118[0];
                goto LABEL_78;
              }
              unint64_t v70 = *(void *)(v123 + 8 * v69);
              ++v64;
              if (!v70)
              {
                int64_t v64 = v69 + 1;
                if (v69 + 1 >= v124) {
                  goto LABEL_77;
                }
                unint64_t v70 = *(void *)(v123 + 8 * v64);
                if (!v70)
                {
                  int64_t v64 = v69 + 2;
                  if (v69 + 2 >= v124) {
                    goto LABEL_77;
                  }
                  unint64_t v70 = *(void *)(v123 + 8 * v64);
                  if (!v70)
                  {
                    int64_t v71 = v69 + 3;
                    if (v71 >= v124) {
                      goto LABEL_77;
                    }
                    unint64_t v70 = *(void *)(v123 + 8 * v71);
                    if (!v70)
                    {
                      while (1)
                      {
                        int64_t v64 = v71 + 1;
                        if (__OFADD__(v71, 1)) {
                          goto LABEL_96;
                        }
                        if (v64 >= v124) {
                          goto LABEL_77;
                        }
                        unint64_t v70 = *(void *)(v123 + 8 * v64);
                        ++v71;
                        if (v70) {
                          goto LABEL_57;
                        }
                      }
                    }
                    int64_t v64 = v71;
                  }
                }
              }
LABEL_57:
              unint64_t v63 = (v70 - 1) & v70;
              unint64_t v68 = __clz(__rbit64(v70)) + (v64 << 6);
            }
            uint64_t v72 = 8 * v68;
          }
          while (vaddv_f32(vmul_f32(v47, *(float32x2_t *)(*(void *)(v62 + 48) + v72))) <= 0.4);
          unint64_t v126 = v63;
          int64_t v127 = v64;
          unint64_t v73 = *(void *)(*(void *)(v62 + 56) + v72);
          size_t v74 = *(void *)(v73 + 16);
          unint64_t v125 = v59 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
          size_t v142 = v74;
          if (v74) {
            break;
          }
          uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v59;
          swift_bridgeObjectRetain();
LABEL_40:
          v66(v65, 1, 1, v4);
LABEL_41:
          swift_bridgeObjectRelease();
          uint64_t v62 = v121;
          int64_t v64 = v127;
          unint64_t v63 = v126;
        }
        unint64_t v133 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
        int v141 = (void (**)(uint64_t, char *, uint64_t))(v73 + v133);
        swift_bridgeObjectRetain();
        unint64_t v75 = 0;
        unint64_t v140 = v73;
        while (v75 < *(void *)(v73 + 16))
        {
          uint64_t v77 = *(void *)(v58 + 72);
          *(void *)&long long v145 = v75;
          long double v78 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
          v78(v65, (char *)v141 + v77 * v75, v4);
          int v79 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
          v79(v65, 0, 1, v4);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v65, 1, v4) == 1) {
            goto LABEL_41;
          }
          long long v144 = v79;
          (*v138)((char *)v147, v65, v4);
          uint64_t v80 = *(void *)(v148 + 16);
          if (v80)
          {
            uint64_t v137 = (unint64_t)v61 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
            size_t v81 = v148 + v133;
            uint64_t v143 = (void (**)(char *, char *, uint64_t))v148;
            swift_bridgeObjectRetain();
            unint64_t v82 = 0;
            while (1)
            {
              v78(v13, (char *)v81, v4);
              sub_2346A15EC((unint64_t *)&qword_2687AC5A0, MEMORY[0x263F07508]);
              char v83 = sub_2347EE570();
              uint64_t v76 = *v61;
              (*v61)(v13, v4);
              if (v83) {
                break;
              }
              ++v82;
              v81 += v77;
              if (v80 == v82)
              {
                swift_bridgeObjectRelease();
                uint64_t v58 = v134;
                long long v65 = v132;
                uint64_t v59 = v131;
                goto LABEL_62;
              }
            }
            swift_bridgeObjectRelease();
            sub_234750040(v82, (uint64_t)v13);
            v76(v13, v4);
            uint64_t v84 = sub_23469DDFC();
            uint64_t v85 = (uint64_t)v129;
            v78(v129, (char *)v147, v4);
            swift_beginAccess();
            uint64_t v86 = *(void *)(v84 + 96);
            swift_bridgeObjectRetain();
            swift_release();
            if (*(void *)(v86 + 16) && (unint64_t v87 = sub_2347BFA88(v85), (v88 & 1) != 0))
            {
              uint64_t v89 = *(void *)(*(void *)(v86 + 56) + 8 * v87);
              swift_retain();
              swift_bridgeObjectRelease();
              v76((char *)v85, v4);
              uint64_t v90 = qword_2687ADE78;
              uint64_t v58 = v134;
              uint64_t v59 = v131;
              if (*(float *)(v89 + qword_2687ADE78) != 0.15)
              {
                int v91 = v135;
                sub_2347ED520();
                uint64_t v92 = v89 + qword_2687ADE80;
                swift_beginAccess();
                uint64_t v93 = v92;
                uint64_t v94 = v91;
                uint64_t v59 = v131;
                uint64_t v58 = v134;
                (*v119)(v93, v94, v136);
                swift_endAccess();
                *(_DWORD *)(v89 + v90) = 1041865114;
              }
              swift_release();
              v76((char *)v147, v4);
              long long v65 = v132;
            }
            else
            {
              swift_bridgeObjectRelease();
              v76((char *)v85, v4);
              v76((char *)v147, v4);
              uint64_t v58 = v134;
              long long v65 = v132;
              uint64_t v59 = v131;
            }
          }
          else
          {
            uint64_t v76 = *v61;
LABEL_62:
            v76((char *)v147, v4);
          }
          unint64_t v73 = v140;
          unint64_t v75 = v145 + 1;
          uint64_t v66 = v144;
          if ((void)v145 + 1 == v142) {
            goto LABEL_40;
          }
        }
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
      }
    }
  }
}

uint64_t sub_23469F8AC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AC590);
  MEMORY[0x270FA5388](v1 - 8);
  unint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE0F0();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC570);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2347EE280();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v0;
  sub_23469DDFC();
  unint64_t v12 = sub_2347DD0CC();
  uint64_t result = swift_release();
  if (!(v12 >> 62))
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14) {
      goto LABEL_3;
    }
LABEL_16:
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_2347EEEC0();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_16;
  }
LABEL_3:
  if (v14 >= 1)
  {
    uint64_t v40 = v11;
    uint64_t v15 = 0;
    uint64_t v38 = qword_2687AC010;
    long long v42 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    unint64_t v43 = v12 & 0xC000000000000001;
    uint64_t v37 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v34 = (void (**)(uint64_t *, char *, uint64_t))(v9 + 16);
    uint64_t v36 = (void (**)(char *, uint64_t))(v9 + 8);
    long long v33 = xmmword_2347F0FA0;
    uint64_t v44 = v14;
    unint64_t v35 = v7;
    unint64_t v39 = v12;
    do
    {
      if (v43)
      {
        uint64_t v17 = MEMORY[0x237DC6CF0](v15, v12);
      }
      else
      {
        uint64_t v17 = *(void *)(v12 + 8 * v15 + 32);
        swift_retain();
      }
      uint64_t v18 = v17 + qword_2687BDFB0;
      swift_beginAccess();
      sub_2346A1DCC(v18, (uint64_t)v46);
      uint64_t v19 = v47;
      uint64_t v20 = v48;
      __swift_project_boxed_opaque_existential_1(v46, v47);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 8))(v45, v19, v20);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC578);
      char v21 = swift_dynamicCast();
      uint64_t v22 = *v42;
      if (v21)
      {
        v22(v7, 0, 1, v8);
        uint64_t v23 = v40;
        (*v37)(v40, v7, v8);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
        id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, *(float *)(v41 + v38), *(float *)(v41 + v38), *(float *)(v41 + v38), 1.0);
        uint64_t v25 = sub_2347EE0B0();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v3, 1, 1, v25);
        id v26 = v24;
        sub_2347EE0E0();
        sub_2347EE140();
        type metadata accessor for ScanEntity();
        sub_2346A15EC((unint64_t *)&qword_2687AC580, (void (*)(uint64_t))type metadata accessor for ScanEntity);
        uint64_t v27 = (void (*)(void *, void))sub_2347EDFD0();
        uint64_t v29 = v28;
        uint64_t v30 = sub_2347ED990();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
          uint64_t v31 = swift_allocObject();
          *(_OWORD *)(v31 + 16) = v33;
          *(void *)(v31 + 56) = v8;
          *(void *)(v31 + 64) = MEMORY[0x263F165F8];
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v31 + 32));
          (*v34)(boxed_opaque_existential_1, v23, v8);
          uint64_t v7 = v35;
          sub_2347ED980();
        }
        v27(v46, 0);
        uint64_t v16 = v44;

        swift_release();
        (*v36)(v23, v8);
        unint64_t v12 = v39;
      }
      else
      {
        v22(v7, 1, 1, v8);
        swift_release();
        sub_2346A1BB4((uint64_t)v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
        uint64_t v16 = v44;
      }
      ++v15;
    }
    while (v16 != v15);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_23469FEB0(__n128 a1)
{
  __n128 v36 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC570);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2347EE280();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v9 = v36.n128_u64[0];
  *((void *)&v9 + 1) = vextq_s8(*(int8x16_t *)(v1 + qword_2687AC028), *(int8x16_t *)(v1 + qword_2687AC028), 8uLL).u64[0];
  uint64_t v32 = qword_2687AC028;
  uint64_t v33 = v1;
  *(_OWORD *)(v1 + qword_2687AC028) = v9;
  sub_23469DDFC();
  unint64_t v10 = sub_2347DD0CC();
  uint64_t result = swift_release();
  if (!(v10 >> 62))
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_3;
    }
LABEL_16:
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_2347EEEC0();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_16;
  }
LABEL_3:
  if (v12 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v35 = v10 & 0xC000000000000001;
    uint64_t v14 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v29 = (void (**)(uint64_t *, char *, uint64_t))(v6 + 16);
    uint64_t v30 = (void (**)(char *, uint64_t))(v6 + 8);
    long long v28 = xmmword_2347F0FA0;
    v36.n128_u64[0] = v10;
    do
    {
      if (v35)
      {
        uint64_t v15 = MEMORY[0x237DC6CF0](v13, v10);
      }
      else
      {
        uint64_t v15 = *(void *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      uint64_t v16 = v15 + qword_2687BDFB0;
      swift_beginAccess();
      sub_2346A1DCC(v16, (uint64_t)v38);
      uint64_t v17 = v39;
      uint64_t v18 = v40;
      __swift_project_boxed_opaque_existential_1(v38, v39);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 8))(v37, v17, v18);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC578);
      int v19 = swift_dynamicCast();
      uint64_t v20 = *v14;
      if (v19)
      {
        v20(v4, 0, 1, v5);
        (*v31)(v8, v4, v5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        long long v34 = *(_OWORD *)(v33 + v32);
        char v21 = (void (*)(void *, void))sub_2347EE180();
        sub_2347EE090();
        v21(v38, 0);
        type metadata accessor for ScanEntity();
        sub_2346A15EC((unint64_t *)&qword_2687AC580, (void (*)(uint64_t))type metadata accessor for ScanEntity);
        uint64_t v22 = (void (*)(void *, void))sub_2347EDFD0();
        uint64_t v24 = v23;
        uint64_t v25 = sub_2347ED990();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
          uint64_t v26 = swift_allocObject();
          *(_OWORD *)(v26 + 16) = v28;
          *(void *)(v26 + 56) = v5;
          *(void *)(v26 + 64) = MEMORY[0x263F165F8];
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v26 + 32));
          (*v29)(boxed_opaque_existential_1, v8, v5);
          sub_2347ED980();
        }
        v22(v38, 0);
        unint64_t v10 = v36.n128_u64[0];
        swift_release();
        (*v30)(v8, v5);
      }
      else
      {
        v20(v4, 1, 1, v5);
        swift_release();
        sub_2346A1BB4((uint64_t)v4);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        unint64_t v10 = v36.n128_u64[0];
      }
      ++v13;
    }
    while (v12 != v13);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_2346A03A0(__n128 a1)
{
  __n128 v36 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC570);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2347EE280();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = *(_OWORD *)(v1 + qword_2687AC028);
  *((void *)&v9 + 1) = v36.n128_u64[0];
  uint64_t v32 = qword_2687AC028;
  uint64_t v33 = v1;
  *(_OWORD *)(v1 + qword_2687AC028) = v9;
  sub_23469DDFC();
  unint64_t v10 = sub_2347DD0CC();
  uint64_t result = swift_release();
  if (!(v10 >> 62))
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v12) {
      goto LABEL_3;
    }
LABEL_16:
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_2347EEEC0();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_16;
  }
LABEL_3:
  if (v12 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v35 = v10 & 0xC000000000000001;
    uint64_t v14 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v29 = (void (**)(uint64_t *, char *, uint64_t))(v6 + 16);
    uint64_t v30 = (void (**)(char *, uint64_t))(v6 + 8);
    long long v28 = xmmword_2347F0FA0;
    v36.n128_u64[0] = v10;
    do
    {
      if (v35)
      {
        uint64_t v15 = MEMORY[0x237DC6CF0](v13, v10);
      }
      else
      {
        uint64_t v15 = *(void *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      uint64_t v16 = v15 + qword_2687BDFB0;
      swift_beginAccess();
      sub_2346A1DCC(v16, (uint64_t)v38);
      uint64_t v17 = v39;
      uint64_t v18 = v40;
      __swift_project_boxed_opaque_existential_1(v38, v39);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 8))(v37, v17, v18);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC578);
      int v19 = swift_dynamicCast();
      uint64_t v20 = *v14;
      if (v19)
      {
        v20(v4, 0, 1, v5);
        (*v31)(v8, v4, v5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        long long v34 = *(_OWORD *)(v33 + v32);
        char v21 = (void (*)(void *, void))sub_2347EE180();
        sub_2347EE090();
        v21(v38, 0);
        type metadata accessor for ScanEntity();
        sub_2346A15EC((unint64_t *)&qword_2687AC580, (void (*)(uint64_t))type metadata accessor for ScanEntity);
        uint64_t v22 = (void (*)(void *, void))sub_2347EDFD0();
        uint64_t v24 = v23;
        uint64_t v25 = sub_2347ED990();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
          uint64_t v26 = swift_allocObject();
          *(_OWORD *)(v26 + 16) = v28;
          *(void *)(v26 + 56) = v5;
          *(void *)(v26 + 64) = MEMORY[0x263F165F8];
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v26 + 32));
          (*v29)(boxed_opaque_existential_1, v8, v5);
          sub_2347ED980();
        }
        v22(v38, 0);
        unint64_t v10 = v36.n128_u64[0];
        swift_release();
        (*v30)(v8, v5);
      }
      else
      {
        v20(v4, 1, 1, v5);
        swift_release();
        sub_2346A1BB4((uint64_t)v4);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        unint64_t v10 = v36.n128_u64[0];
      }
      ++v13;
    }
    while (v12 != v13);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_2346A088C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346A091C()
{
  uint64_t v0 = sub_2347EDFC0();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2346A09B4()
{
  sub_2346A091C();

  return swift_deallocClassInstance();
}

uint64_t sub_2346A09E4()
{
  return type metadata accessor for DollHouse();
}

uint64_t initializeBufferWithCopyOfBuffer for AngularVelocity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ObjectElement(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ObjectElement(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for simd_quatd(uint64_t a1)
{
}

void type metadata accessor for RunOptions(uint64_t a1)
{
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_rectangle(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_rectangle(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
}

void type metadata accessor for Target(uint64_t a1)
{
}

void type metadata accessor for Alignment(uint64_t a1)
{
}

void type metadata accessor for UIDeviceOrientation(uint64_t a1)
{
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_2346A0B94(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2346A0BB4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for CATransform3D(uint64_t a1)
{
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for CVMetalTextureCache(uint64_t a1)
{
}

void type metadata accessor for CVPixelBufferPool(uint64_t a1)
{
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AngularVelocity(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AngularVelocity(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_2346A0D04(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2346A0D24(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for SCNVector3(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_2346A0DA0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2346A0DC0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
}

uint64_t sub_2346A0E10()
{
  return 8;
}

uint64_t sub_2346A0E18()
{
  if (*(unsigned char *)(v0 + qword_2687ABFC0)) {
    return 6;
  }
  else {
    return 7;
  }
}

uint64_t sub_2346A0E34()
{
  return 5;
}

uint64_t sub_2346A0E3C()
{
  return 0;
}

uint64_t sub_2346A0E44()
{
  return *(void *)(v0 + qword_2687AC028);
}

void sub_2346A0E5C(void *a1@<X8>)
{
  *a1 = 0;
}

BOOL sub_2346A0E64(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2346A0E78()
{
  return sub_2347EE050();
}

uint64_t sub_2346A0EC4()
{
  return sub_2347EE040();
}

uint64_t sub_2346A0F1C()
{
  return sub_2347EF200();
}

BOOL sub_2346A0F84(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void sub_2346A0FB4(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_2346A0FC4(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_2346A0FD0(uint64_t a1, uint64_t a2)
{
  return sub_2346A16C4(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t sub_2346A0FF4(uint64_t a1, id *a2)
{
  uint64_t result = sub_2347EE600();
  *a2 = 0;
  return result;
}

uint64_t sub_2346A106C(uint64_t a1, id *a2)
{
  char v3 = sub_2347EE610();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_2346A10EC@<X0>(uint64_t *a1@<X8>)
{
  sub_2347EE620();
  uint64_t v2 = sub_2347EE5F0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_2346A1130(uint64_t a1, uint64_t a2)
{
  return sub_2346A16C4(a1, a2, MEMORY[0x263F8D308]);
}

void *sub_2346A1150@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_2346A1164@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_2346A1178@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_2346A11A4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_2346A11C8(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_2346A11DC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_2346A11F0(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_2346A1204(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_2346A1218(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_2346A122C()
{
  return *v0 == 0;
}

uint64_t sub_2346A123C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *sub_2346A1254(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_2346A1268@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_2346A127C(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_2346A1290(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_2346A12A4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_2346A12B4()
{
  swift_getWitnessTable();

  return sub_2347EE030();
}

uint64_t sub_2346A1320@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2347EE620();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2346A134C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_2346A1AF4(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_2346A138C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2346A139C(uint64_t a1)
{
  uint64_t v2 = sub_2346A15EC(&qword_2687AC640, type metadata accessor for Key);
  uint64_t v3 = sub_2346A15EC(&qword_2687AC648, type metadata accessor for Key);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_2346A1458@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_2347EE5F0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_2346A14A0(uint64_t a1)
{
  uint64_t v2 = sub_2346A15EC(&qword_2687AC630, type metadata accessor for UIAccessibilityPriority);
  uint64_t v3 = sub_2346A15EC(&qword_2687AC638, type metadata accessor for UIAccessibilityPriority);
  uint64_t v4 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_2346A155C()
{
  return sub_2346A15EC(&qword_2687AC4F0, type metadata accessor for RunOptions);
}

uint64_t sub_2346A15A4()
{
  return sub_2346A15EC(&qword_2687AC4F8, type metadata accessor for RunOptions);
}

uint64_t sub_2346A15EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2346A1634()
{
  return sub_2346A15EC(&qword_2687AC500, type metadata accessor for RunOptions);
}

uint64_t sub_2346A167C()
{
  return sub_2346A15EC(&qword_2687AC508, type metadata accessor for RunOptions);
}

uint64_t sub_2346A16C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_2347EE620();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2346A1708()
{
  sub_2347EE620();
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346A175C()
{
  sub_2347EE620();
  sub_2347EF1C0();
  sub_2347EE6C0();
  uint64_t v0 = sub_2347EF200();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2346A17D0()
{
  uint64_t v0 = sub_2347EE620();
  uint64_t v2 = v1;
  if (v0 == sub_2347EE620() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_2347EF090();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_2346A185C(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC5A8);
  uint64_t result = sub_2347EEED0();
  uint64_t v4 = (void *)result;
  int64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v19 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v20 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = result + 64;
  if ((v8 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    sub_2346AA144(&v22, &v21);
    uint64_t result = swift_bridgeObjectRelease();
    if (v1)
    {
      swift_release();
      return (uint64_t)v4;
    }
    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v4[6] + 8 * i) = v16;
    *(void *)(v4[7] + 8 * i) = v21;
    uint64_t v17 = v4[2];
    BOOL v13 = __OFADD__(v17, 1);
    uint64_t v18 = v17 + 1;
    if (v13)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v18;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v13 = __OFADD__(v5++, 1);
    if (v13) {
      goto LABEL_27;
    }
    if (v5 >= v20) {
      return (uint64_t)v4;
    }
    unint64_t v14 = *(void *)(v19 + 8 * v5);
    if (!v14) {
      break;
    }
LABEL_15:
    unint64_t v9 = (v14 - 1) & v14;
  }
  int64_t v15 = v5 + 1;
  if (v5 + 1 >= v20) {
    return (uint64_t)v4;
  }
  unint64_t v14 = *(void *)(v19 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v5 + 2;
  if (v5 + 2 >= v20) {
    return (uint64_t)v4;
  }
  unint64_t v14 = *(void *)(v19 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v5 + 3;
  if (v5 + 3 >= v20) {
    return (uint64_t)v4;
  }
  unint64_t v14 = *(void *)(v19 + 8 * v15);
  if (v14)
  {
LABEL_14:
    int64_t v5 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v20) {
      return (uint64_t)v4;
    }
    unint64_t v14 = *(void *)(v19 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2346A1A84(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_2346A1ABC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_2346A1AF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_2346A1BB4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC570);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_2346A1CC8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, float a5)
{
  char v9 = a3 & 1;
  void v12[3] = type metadata accessor for DollhouseMaterialFactory();
  v12[4] = &off_26E772108;
  v12[0] = a1;
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a4 + 72) = 0;
  type metadata accessor for ScanContainer();
  swift_allocObject();
  *(void *)(a4 + 80) = sub_2347ED690();
  uint64_t v10 = MEMORY[0x263F8EE80];
  *(void *)(a4 + 96) = MEMORY[0x263F8EE80];
  *(void *)(a4 + 104) = v10;
  *(void *)(a4 + 112) = sub_2347990BC(MEMORY[0x263F8EE78]);
  *(void *)(a4 + 120) = v10;
  *(void *)(a4 + 128) = v10;
  *(unsigned char *)(a4 + 136) = 0;
  *(void *)(a4 + 152) = 0x40A000003FC00000;
  sub_2346A1DCC((uint64_t)v12, a4 + 32);
  *(void *)(a4 + 144) = a2;
  *(unsigned char *)(a4 + 88) = v9;
  *(float *)(a4 + 140) = a5;
  *(float *)(a4 + 156) = a5 * 1.5;
  swift_retain();
  sub_2346B3250();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return a4;
}

uint64_t sub_2346A1DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2346A1E30(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for DotsVertexInput(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityPriority(uint64_t a1)
{
}

void type metadata accessor for RSError(uint64_t a1)
{
}

void type metadata accessor for OUError(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void sub_2346A1EFC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_2346A1F44()
{
  return sub_2346A15EC(&qword_2687AC5F0, type metadata accessor for Key);
}

uint64_t sub_2346A1F8C()
{
  return sub_2346A15EC(&qword_2687AC5F8, type metadata accessor for Key);
}

uint64_t sub_2346A1FD4()
{
  return sub_2346A15EC(&qword_2687AC600, type metadata accessor for UIAccessibilityPriority);
}

uint64_t sub_2346A201C()
{
  return sub_2346A15EC(&qword_2687AC608, type metadata accessor for UIAccessibilityPriority);
}

uint64_t sub_2346A2064()
{
  return sub_2346A15EC(&qword_2687AC610, type metadata accessor for UIAccessibilityPriority);
}

uint64_t sub_2346A20AC()
{
  return sub_2346A15EC(&qword_2687AC618, type metadata accessor for CFString);
}

uint64_t sub_2346A20F4()
{
  return sub_2346A15EC(&qword_2687AC620, type metadata accessor for CFString);
}

uint64_t sub_2346A213C()
{
  return sub_2346A15EC(&qword_2687AC628, type metadata accessor for Key);
}

void sub_2346A21D8()
{
  type metadata accessor for ARGlyphView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_2347ED2E0();
  uint64_t v4 = v3;

  qword_2687BDDE0 = v2;
  *(void *)algn_2687BDDE8 = v4;
}

void sub_2346A22A4()
{
  type metadata accessor for ARGlyphView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_2347ED2E0();
  uint64_t v4 = v3;

  qword_2687BDDF0 = v2;
  *(void *)algn_2687BDDF8 = v4;
}

void sub_2346A236C()
{
  type metadata accessor for ARGlyphView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_2347ED2E0();
  uint64_t v4 = v3;

  qword_2687BDE00 = v2;
  *(void *)algn_2687BDE08 = v4;
}

void sub_2346A2434()
{
  type metadata accessor for ARGlyphView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_2347ED2E0();
  uint64_t v4 = v3;

  qword_2687BDE10 = v2;
  *(void *)algn_2687BDE18 = v4;
}

void sub_2346A24FC()
{
  type metadata accessor for ARGlyphView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v2 = sub_2347ED2E0();
  uint64_t v4 = v3;

  qword_2687BDE20 = v2;
  *(void *)algn_2687BDE28 = v4;
}

char *sub_2346A25C4(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderer;
  *(void *)&v4[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderer] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_previousAngle] = 0;
  type metadata accessor for MetalConstants();
  unint64_t v11 = v4;
  swift_initStaticObject();
  uint64_t v12 = (void *)sub_2346FFCC4();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F15820]), sel_init);
  *(void *)&v11[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_metalLayer] = v13;
  objc_msgSend(v13, sel_setOpaque_, 0);
  objc_msgSend(v13, sel_setDevice_, v12);
  type metadata accessor for RenderTimer();
  swift_allocObject();
  swift_unknownObjectRetain();
  id v14 = v13;
  *(void *)&v11[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderTimer] = sub_23471820C(v12, v14);
  uint64_t v15 = 8;
  if ((objc_msgSend(v12, sel_supportsTextureSampleCount_, 8) & 1) == 0)
  {
    uint64_t v15 = 4;
    if (!objc_msgSend(v12, sel_supportsTextureSampleCount_, 4)) {
      uint64_t v15 = 1;
    }
  }
  swift_unknownObjectRetain();
  id v16 = v14;
  id v17 = objc_msgSend(v16, sel_pixelFormat);
  type metadata accessor for GlyphRenderer();
  swift_allocObject();
  *(void *)&v5[v10] = sub_2347D93D0(v16, v12, (uint64_t)v17, v15);
  swift_release();
  uint64_t v18 = *(void *)&v5[v10];
  if (v18)
  {
    *(unsigned char *)(*(void *)(v18 + 64) + 32) = 2;
    swift_retain();
    sub_2347B8D50();
    swift_release();
  }
  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  *(void *)&v11[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_backgroundView] = v19;
  objc_msgSend(v19, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  int64_t v20 = self;
  id v21 = v19;
  id v22 = objc_msgSend(v20, sel_blackColor);
  id v23 = objc_msgSend(v22, sel_colorWithAlphaComponent_, 0.6);

  objc_msgSend(v21, sel_setBackgroundColor_, v23);
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v25 = OBJC_IVAR____TtC8RoomPlan11ARGlyphView_onboardingLabel;
  *(void *)&v11[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_onboardingLabel] = v24;
  objc_msgSend(v24, sel_setNumberOfLines_, 0);
  id v26 = v24;
  id v27 = objc_msgSend(v20, sel_whiteColor);
  objc_msgSend(v26, sel_setTextColor_, v27);

  long long v28 = *(void **)&v11[v25];
  objc_msgSend(v28, sel_setTextAlignment_, 1);
  objc_msgSend(v28, sel_setLineBreakMode_, 0);
  objc_msgSend(v28, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v29 = self;
  uint64_t v30 = *MEMORY[0x263F835D0];
  id v31 = v28;
  id v32 = objc_msgSend(v29, sel_preferredFontForTextStyle_, v30);
  objc_msgSend(v31, sel_setFont_, v32);

  v63.receiver = v11;
  v63.super_class = (Class)type metadata accessor for ARGlyphView();
  uint64_t v33 = (char *)objc_msgSendSuper2(&v63, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v33, sel_setAlpha_, 0.0);
  uint64_t v34 = OBJC_IVAR____TtC8RoomPlan11ARGlyphView_backgroundView;
  objc_msgSend(v33, sel_addSubview_, *(void *)&v33[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_backgroundView]);
  uint64_t v35 = OBJC_IVAR____TtC8RoomPlan11ARGlyphView_onboardingLabel;
  objc_msgSend(v33, sel_addSubview_, *(void *)&v33[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_onboardingLabel]);
  id v36 = objc_msgSend(v33, sel_layer);
  objc_msgSend(v36, sel_addSublayer_, *(void *)&v33[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_metalLayer]);

  *(void *)(*(void *)&v33[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderTimer] + 88) = &off_26E771C20;
  swift_unknownObjectWeakAssign();
  uint64_t v37 = *(void **)&v33[v34];
  double v38 = *MEMORY[0x263F834E8];
  double v39 = *(double *)(MEMORY[0x263F834E8] + 8);
  double v40 = *(double *)(MEMORY[0x263F834E8] + 16);
  double v41 = *(double *)(MEMORY[0x263F834E8] + 24);
  long long v42 = v33;
  id v43 = v37;
  sub_2347E94E4(v42, v38, v39, v40, v41);

  id v44 = objc_msgSend(self, sel_currentDevice);
  id v45 = objc_msgSend(v44, sel_userInterfaceIdiom);

  uint64_t v46 = qword_2687ABCA0;
  id v47 = *(id *)&v33[v35];
  if (v46 != -1) {
    swift_once();
  }
  if (v45 == (id)1) {
    double v48 = 120.0;
  }
  else {
    double v48 = 80.0;
  }
  uint64_t v49 = (void *)sub_2347EE5F0();
  objc_msgSend(v47, sel_setText_, v49);

  id v50 = objc_msgSend(*(id *)&v33[v35], sel_centerXAnchor);
  id v51 = objc_msgSend(v42, sel_centerXAnchor);
  id v52 = objc_msgSend(v50, sel_constraintEqualToAnchor_, v51);

  objc_msgSend(v52, sel_setActive_, 1);
  id v53 = objc_msgSend(*(id *)&v33[v35], sel_centerYAnchor);
  id v54 = objc_msgSend(v42, sel_centerYAnchor);
  id v55 = objc_msgSend(v53, sel_constraintEqualToAnchor_constant_, v54, v48);

  objc_msgSend(v55, sel_setActive_, 1);
  id v56 = objc_msgSend(*(id *)&v33[v35], sel_trailingAnchor);
  id v57 = objc_msgSend(v42, sel_trailingAnchor);
  id v58 = objc_msgSend(v56, sel_constraintEqualToAnchor_constant_, v57, -24.0);

  objc_msgSend(v58, sel_setActive_, 1);
  id v59 = objc_msgSend(*(id *)&v33[v35], sel_leadingAnchor);
  id v60 = objc_msgSend(v42, sel_leadingAnchor);
  id v61 = objc_msgSend(v59, sel_constraintEqualToAnchor_constant_, v60, 24.0);

  objc_msgSend(v61, sel_setActive_, 1);
  swift_unknownObjectRelease();

  return v42;
}

id sub_2346A2D58()
{
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for ARGlyphView();
  objc_msgSendSuper2(&v14, sel_layoutSubviews);
  id v1 = self;
  objc_msgSend(v1, sel_setDisableActions_, 1);
  objc_msgSend(v0, sel_bounds);
  double Width = CGRectGetWidth(v15);
  objc_msgSend(v0, sel_bounds);
  double Height = CGRectGetHeight(v16);
  if (Height < Width) {
    double Width = Height;
  }
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_metalLayer];
  objc_msgSend(v4, sel_setBounds_, 0.0, 0.0, Width, Width);
  uint64_t v5 = self;
  id v6 = objc_msgSend(v5, sel_mainScreen);
  objc_msgSend(v6, sel_scale);
  double v8 = v7;

  id v9 = objc_msgSend(v5, sel_mainScreen);
  objc_msgSend(v9, sel_scale);
  double v11 = v10;

  objc_msgSend(v4, sel_setDrawableSize_, Width * v8, Width * v11);
  objc_msgSend(v0, sel_bounds);
  double MidX = CGRectGetMidX(v17);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v4, sel_setPosition_, MidX, CGRectGetMidY(v18));
  return objc_msgSend(v1, sel_setDisableActions_, 0);
}

char *sub_2346A2FD8(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  __n128 result = (char *)MEMORY[0x237DC8170](v3);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)&result[OBJC_IVAR____TtC8RoomPlan11ARGlyphView_renderTimer];
    swift_retain();

    __n128 result = *(char **)(v6 + 32);
    if (!result)
    {
      __break(1u);
      return result;
    }
    objc_msgSend(result, sel_invalidate);
    __n128 result = (char *)swift_release();
  }
  if (a2) {
    return (char *)a2(result);
  }
  return result;
}

void sub_2346A3078(uint64_t a1, uint64_t a2, double a3)
{
  double v7 = self;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v3;
  *(double *)(v8 + 24) = a3;
  CGRect v17 = sub_2346A332C;
  uint64_t v18 = v8;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  CGRect v15 = sub_23477C05C;
  CGRect v16 = &block_descriptor;
  id v9 = _Block_copy(&v13);
  id v10 = v3;
  swift_release();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  CGRect v17 = sub_2346A3398;
  uint64_t v18 = v11;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  CGRect v15 = sub_23479412C;
  CGRect v16 = &block_descriptor_22;
  uint64_t v12 = _Block_copy(&v13);
  sub_2346A33C8(a1);
  swift_release();
  objc_msgSend(v7, sel_animateKeyframesWithDuration_delay_options_animations_completion_, 4, v9, v12, 1.0, 0.0);
  _Block_release(v12);
  _Block_release(v9);
}

id sub_2346A3220()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ARGlyphView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ARGlyphView()
{
  return self;
}

uint64_t sub_2346A32F4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id sub_2346A332C()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, *(double *)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_2346A3358()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2346A3398()
{
  id v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_2346A33C8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for SplineArc()
{
  return self;
}

uint64_t sub_2346A3408(float a1, float a2, float a3, float a4, float a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17)
{
  *(void *)(v17 + 48) = MEMORY[0x263F8EE78];
  uint64_t v21 = v17 + 48;
  swift_beginAccess();
  id v22 = *(void **)(v17 + 48);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v17 + 48) = v22;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v22 = sub_2346FA354(0, v22[2] + 1, 1, v22);
    *(void *)uint64_t v21 = v22;
  }
  unint64_t v25 = v22[2];
  unint64_t v24 = v22[3];
  float v26 = a1;
  if (v25 >= v24 >> 1)
  {
    id v53 = sub_2346FA354((void *)(v24 > 1), v25 + 1, 1, v22);
    float v26 = a1;
    id v22 = v53;
    *(void *)uint64_t v21 = v53;
  }
  DWORD1(v27) = 0;
  *((void *)&v27 + 1) = 0;
  v28.i64[1] = v71;
  *(float32x2_t *)v28.i8 = vmul_n_f32((float32x2_t)LODWORD(a3), v26);
  int32x4_t v29 = vtrn2q_s32(vzip1q_s32((int32x4_t)0, v28), (int32x4_t)0);
  *(float *)&v29.i32[1] = v26;
  v22[2] = v25 + 1;
  *(int32x4_t *)&v22[2 * v25 + 4] = v29;
  uint64_t v30 = *(void **)v21;
  unint64_t v32 = *(void *)(*(void *)v21 + 16);
  unint64_t v31 = *(void *)(*(void *)v21 + 24);
  if (v32 >= v31 >> 1)
  {
    uint64_t v66 = v28.i64[0];
    id v54 = sub_2346FA354((void *)(v31 > 1), v32 + 1, 1, v30);
    float v26 = a1;
    v28.i64[0] = v66;
    DWORD1(v27) = 0;
    *((void *)&v27 + 1) = 0;
    uint64_t v30 = v54;
    *(void *)uint64_t v21 = v54;
  }
  float v33 = v26 * a4;
  *(float *)&long long v34 = v26 * a4;
  *((float *)&v34 + 1) = v26;
  *((void *)&v34 + 1) = v28.u32[1];
  void v30[2] = v32 + 1;
  *(_OWORD *)&v30[2 * v32 + 4] = v34;
  uint64_t v35 = *(void **)v21;
  unint64_t v37 = *(void *)(*(void *)v21 + 16);
  unint64_t v36 = *(void *)(*(void *)v21 + 24);
  if (v37 >= v36 >> 1)
  {
    uint64_t v67 = v28.i64[0];
    float v59 = v26 * a4;
    id v55 = sub_2346FA354((void *)(v36 > 1), v37 + 1, 1, v35);
    float v33 = v59;
    float v26 = a1;
    v28.i64[0] = v67;
    DWORD1(v27) = 0;
    *((void *)&v27 + 1) = 0;
    uint64_t v35 = v55;
    *(void *)uint64_t v21 = v55;
  }
  *(float *)&long long v27 = v26;
  float v38 = v26 * a5;
  *(float *)&long long v39 = v26 * a5;
  *((float *)&v39 + 1) = v26;
  *((void *)&v39 + 1) = v28.u32[1];
  v35[2] = v37 + 1;
  *(_OWORD *)&v35[2 * v37 + 4] = v39;
  double v40 = *(void **)v21;
  unint64_t v42 = *(void *)(*(void *)v21 + 16);
  unint64_t v41 = *(void *)(*(void *)v21 + 24);
  if (v42 >= v41 >> 1)
  {
    long long v62 = LODWORD(v26);
    uint64_t v68 = v28.i64[0];
    float v60 = v33;
    float v76 = v26 * a5;
    id v56 = sub_2346FA354((void *)(v41 > 1), v42 + 1, 1, v40);
    float v38 = v76;
    float v33 = v60;
    long long v27 = v62;
    v28.i64[0] = v68;
    double v40 = v56;
    *(void *)uint64_t v21 = v56;
  }
  long long v43 = v27;
  *((float *)&v43 + 1) = v38;
  DWORD2(v43) = v28.i32[1];
  v40[2] = v42 + 1;
  *(_OWORD *)&v40[2 * v42 + 4] = v43;
  id v44 = *(void **)v21;
  unint64_t v46 = *(void *)(*(void *)v21 + 16);
  unint64_t v45 = *(void *)(*(void *)v21 + 24);
  if (v46 >= v45 >> 1)
  {
    long long v63 = v27;
    uint64_t v69 = v28.i64[0];
    float v61 = v33;
    id v57 = sub_2346FA354((void *)(v45 > 1), v46 + 1, 1, v44);
    float v33 = v61;
    long long v27 = v63;
    v28.i64[0] = v69;
    id v44 = v57;
    *(void *)uint64_t v21 = v57;
  }
  long long v47 = v27;
  *((float *)&v47 + 1) = v33;
  DWORD2(v47) = v28.i32[1];
  v44[2] = v46 + 1;
  *(_OWORD *)&v44[2 * v46 + 4] = v47;
  double v48 = *(void **)v21;
  unint64_t v50 = *(void *)(*(void *)v21 + 16);
  unint64_t v49 = *(void *)(*(void *)v21 + 24);
  if (v50 >= v49 >> 1)
  {
    long long v64 = v27;
    uint64_t v70 = v28.i64[0];
    id v58 = sub_2346FA354((void *)(v49 > 1), v50 + 1, 1, v48);
    long long v27 = v64;
    v28.i64[0] = v70;
    double v48 = v58;
    *(void *)uint64_t v21 = v58;
  }
  *(void *)((char *)&v27 + 4) = v28.i64[0];
  v48[2] = v50 + 1;
  *(_OWORD *)&v48[2 * v50 + 4] = v27;
  swift_endAccess();
  swift_release();
  uint64_t v51 = swift_bridgeObjectRetain();
  return sub_2346D7B38(v51, 0, a2, a6, a7, a8, a17);
}

uint64_t sub_2346A374C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2346A3754()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SplineCorner()
{
  return self;
}

uint64_t sub_2346A37CC()
{
  type metadata accessor for FloorPlanManager();
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  uint64_t v1 = MEMORY[0x263F8EE80];
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  *(void *)(result + 32) = v1;
  qword_2687BDE30 = result;
  return result;
}

uint64_t sub_2346A3808(void *a1, uint64_t a2)
{
  return sub_2346A38B0(a1, a2, (void (*)(char *, uint64_t))sub_2346A4504, (void (*)(void))sub_2346A65A8, (void (*)(char *))sub_2346A5548, (void (*)(void))sub_2346A5B90);
}

uint64_t sub_2346A385C(void *a1, uint64_t a2)
{
  return sub_2346A38B0(a1, a2, (void (*)(char *, uint64_t))sub_2346A48D0, (void (*)(void))sub_2346A6968, (void (*)(char *))sub_2346A5568, (void (*)(void))sub_2346A5F80);
}

uint64_t sub_2346A38B0(void *a1, uint64_t a2, void (*a3)(char *, uint64_t), void (*a4)(void), void (*a5)(char *), void (*a6)(void))
{
  unint64_t v46 = a3;
  long long v47 = a5;
  uint64_t v10 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v48 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  CGRect v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  id v19 = (char *)v42 - v18;
  uint64_t v20 = *a1;
  uint64_t v21 = *(void *)(*a1 + 16);
  unint64_t v49 = a1;
  if (v21)
  {
    uint64_t v43 = v11;
    id v44 = a4;
    unint64_t v45 = a6;
    uint64_t v22 = v20 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v23 = *(void *)(v48 + 72);
    v42[1] = v20;
    swift_bridgeObjectRetain();
    uint64_t v24 = a2;
    unint64_t v25 = v46;
    do
    {
      sub_2346A7AE4(v22, (uint64_t)v19, type metadata accessor for CapturedRoom.Surface);
      v25(v19, v24);
      sub_2346A7B4C((uint64_t)v19, type metadata accessor for CapturedRoom.Surface);
      v22 += v23;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    a4 = v44;
    a6 = v45;
    a1 = v49;
    uint64_t v11 = v43;
  }
  uint64_t v26 = a1[5];
  uint64_t v27 = *(void *)(v26 + 16);
  if (v27)
  {
    int32x4_t v28 = (void (*)(char *))a4;
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v30 = *(void *)(v11 + 72);
    unint64_t v46 = (void (*)(char *, uint64_t))a1[5];
    swift_bridgeObjectRetain();
    do
    {
      sub_2346A7AE4(v29, (uint64_t)v13, type metadata accessor for CapturedRoom.Object);
      v28(v13);
      sub_2346A7B4C((uint64_t)v13, type metadata accessor for CapturedRoom.Object);
      v29 += v30;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    a1 = v49;
  }
  uint64_t v50 = a1[3];
  swift_bridgeObjectRetain();
  uint64_t v31 = swift_bridgeObjectRetain();
  sub_2346D9918(v31);
  uint64_t v32 = swift_bridgeObjectRetain();
  sub_2346D9918(v32);
  uint64_t v33 = *(void *)(v50 + 16);
  if (v33)
  {
    long long v34 = v47;
    uint64_t v35 = v50 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v36 = *(void *)(v48 + 72);
    do
    {
      sub_2346A7AE4(v35, (uint64_t)v16, type metadata accessor for CapturedRoom.Surface);
      v34(v16);
      sub_2346A7B4C((uint64_t)v16, type metadata accessor for CapturedRoom.Surface);
      v35 += v36;
      --v33;
    }
    while (v33);
    uint64_t result = swift_bridgeObjectRelease();
    a1 = v49;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v38 = a1[4];
  uint64_t v39 = *(void *)(v38 + 16);
  if (v39)
  {
    uint64_t v40 = v38 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v41 = *(void *)(v48 + 72);
    swift_bridgeObjectRetain();
    do
    {
      a6(v40);
      v40 += v41;
      --v39;
    }
    while (v39);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2346A3C48(void *a1)
{
  uint64_t v2 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v80 = (uint64_t)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2347ED5C0();
  uint64_t v85 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v82 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int v79 = (char *)v69 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v69 - v10;
  uint64_t v83 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v72 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v81 = (uint64_t)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v69 - v14;
  uint64_t v16 = *a1;
  uint64_t v17 = *(void *)(*a1 + 16);
  uint64_t v86 = v5;
  unint64_t v73 = a1;
  if (v17)
  {
    uint64_t v70 = v2;
    uint64_t v71 = v3;
    uint64_t v77 = &v15[*(int *)(v83 + 44)];
    uint64_t v18 = (uint64_t *)(v74 + 24);
    uint64_t v19 = v16 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
    uint64_t v20 = *(void *)(v72 + 72);
    unint64_t v75 = (void (**)(char *, char *, uint64_t))(v85 + 16);
    uint64_t v76 = v20;
    uint64_t v84 = (void (**)(unint64_t, uint64_t))(v85 + 8);
    v69[1] = v16;
    swift_bridgeObjectRetain();
    long double v78 = v15;
    do
    {
      sub_2346A7AE4(v19, (uint64_t)v15, type metadata accessor for CapturedRoom.Surface);
      (*v75)(v11, v77, v5);
      sub_2346A7B4C((uint64_t)v15, type metadata accessor for CapturedRoom.Surface);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v22 = sub_2347BFA88((uint64_t)v11);
      char v24 = v23;
      swift_bridgeObjectRelease();
      if (v24)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v26 = *v18;
        uint64_t v87 = *v18;
        *uint64_t v18 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_2347D5DB8();
          uint64_t v26 = v87;
        }
        uint64_t v5 = v86;
        uint64_t v21 = *(void (**)(unint64_t, uint64_t))(v85 + 8);
        v21(*(void *)(v26 + 48) + *(void *)(v85 + 72) * v22, v86);
        uint64_t v27 = v87;
        sub_2347D3174(v22, v87);
        *uint64_t v18 = v27;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v21 = *v84;
        uint64_t v5 = v86;
      }
      v21((unint64_t)v11, v5);
      swift_endAccess();
      swift_release();
      v19 += v76;
      --v17;
      uint64_t v15 = v78;
    }
    while (v17);
    swift_bridgeObjectRelease();
    a1 = v73;
    uint64_t v2 = v70;
    uint64_t v3 = v71;
  }
  uint64_t v28 = a1[5];
  uint64_t v29 = *(void *)(v28 + 16);
  if (v29)
  {
    uint64_t v84 = (void (**)(unint64_t, uint64_t))(v80 + *(int *)(v2 + 32));
    uint64_t v30 = (uint64_t *)(v74 + 24);
    uint64_t v31 = v28 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    long double v78 = *(char **)(v3 + 72);
    uint64_t v32 = (void (**)(uint64_t, void (**)(unint64_t, uint64_t), uint64_t))(v85 + 16);
    uint64_t v33 = (char *)(v85 + 8);
    uint64_t v76 = v28;
    swift_bridgeObjectRetain();
    uint64_t v77 = v33;
    uint64_t v34 = (uint64_t)v79;
    do
    {
      uint64_t v36 = v80;
      sub_2346A7AE4(v31, v80, type metadata accessor for CapturedRoom.Object);
      (*v32)(v34, v84, v5);
      sub_2346A7B4C(v36, type metadata accessor for CapturedRoom.Object);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v37 = sub_2347BFA88(v34);
      LOBYTE(v36) = v38;
      swift_bridgeObjectRelease();
      if (v36)
      {
        int v39 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v40 = *v30;
        uint64_t v87 = *v30;
        *uint64_t v30 = 0x8000000000000000;
        if (!v39)
        {
          sub_2347D5DB8();
          uint64_t v40 = v87;
        }
        uint64_t v5 = v86;
        uint64_t v35 = *(void (**)(unint64_t, uint64_t))(v85 + 8);
        v35(*(void *)(v40 + 48) + *(void *)(v85 + 72) * v37, v86);
        uint64_t v41 = v87;
        sub_2347D3174(v37, v87);
        *uint64_t v30 = v41;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = *(void (**)(unint64_t, uint64_t))v77;
        uint64_t v5 = v86;
      }
      uint64_t v34 = (uint64_t)v79;
      v35((unint64_t)v79, v5);
      swift_endAccess();
      swift_release();
      v31 += (uint64_t)v78;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    a1 = v73;
  }
  char v88 = (char *)a1[3];
  swift_bridgeObjectRetain();
  uint64_t v42 = swift_bridgeObjectRetain();
  sub_2346D9918(v42);
  uint64_t v43 = swift_bridgeObjectRetain();
  sub_2346D9918(v43);
  uint64_t v44 = *((void *)v88 + 2);
  if (v44)
  {
    uint64_t v45 = (uint64_t)v82;
    uint64_t v84 = (void (**)(unint64_t, uint64_t))(v81 + *(int *)(v83 + 44));
    unint64_t v46 = (uint64_t *)(v74 + 24);
    uint64_t v47 = (uint64_t)&v88[(*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80)];
    uint64_t v80 = *(void *)(v72 + 72);
    uint64_t v48 = (void (**)(uint64_t, void (**)(unint64_t, uint64_t), uint64_t))(v85 + 16);
    long double v78 = v88;
    int v79 = (char *)(v85 + 8);
    do
    {
      uint64_t v50 = v81;
      sub_2346A7AE4(v47, v81, type metadata accessor for CapturedRoom.Surface);
      (*v48)(v45, v84, v5);
      sub_2346A7B4C(v50, type metadata accessor for CapturedRoom.Surface);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v51 = sub_2347BFA88(v45);
      char v53 = v52;
      swift_bridgeObjectRelease();
      if (v53)
      {
        int v54 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = *v46;
        uint64_t v87 = *v46;
        *unint64_t v46 = 0x8000000000000000;
        if (!v54)
        {
          sub_2347D5DB8();
          uint64_t v55 = v87;
        }
        uint64_t v5 = v86;
        unint64_t v49 = *(void (**)(unint64_t, uint64_t))(v85 + 8);
        v49(*(void *)(v55 + 48) + *(void *)(v85 + 72) * v51, v86);
        uint64_t v56 = v87;
        sub_2347D3174(v51, v87);
        *unint64_t v46 = v56;
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v49 = *(void (**)(unint64_t, uint64_t))v79;
        uint64_t v5 = v86;
      }
      uint64_t v45 = (uint64_t)v82;
      v49((unint64_t)v82, v5);
      swift_endAccess();
      swift_release();
      v47 += v80;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    a1 = v73;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = a1[4];
  uint64_t v58 = *(void *)(result + 16);
  if (v58)
  {
    unint64_t v59 = result + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
    float v60 = (uint64_t *)(v74 + 24);
    uint64_t v61 = *(void *)(v72 + 72);
    uint64_t v84 = (void (**)(unint64_t, uint64_t))result;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v63 = v59 + *(int *)(v83 + 44);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v64 = sub_2347BFA88(v63);
      char v66 = v65;
      swift_bridgeObjectRelease();
      if (v66)
      {
        int v67 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v68 = *v60;
        uint64_t v87 = *v60;
        *float v60 = 0x8000000000000000;
        if (!v67)
        {
          sub_2347D5DB8();
          uint64_t v68 = v87;
        }
        (*(void (**)(unint64_t, uint64_t))(v85 + 8))(*(void *)(v68 + 48) + *(void *)(v85 + 72) * v64, v86);
        uint64_t v62 = v87;
        sub_2347D3174(v64, v87);
        *float v60 = v62;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_release();
      v59 += v61;
      --v58;
    }
    while (v58);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2346A4504(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for CapturedRoom.Surface(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2347EE370();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 24) + 16))
  {
    uint64_t v12 = a1 + *(int *)(v5 + 44);
    swift_bridgeObjectRetain();
    sub_2347BFA88(v12);
    LOBYTE(v12) = v13;
    swift_bridgeObjectRelease();
    if (v12)
    {
      uint64_t v29 = v9;
      type metadata accessor for Constants();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v15 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      id v16 = objc_msgSend(v15, sel_bundleIdentifier);

      if (v16)
      {
        sub_2347EE620();
      }
      sub_2346A7A4C();
      sub_2347EEAF0();
      sub_2347EE380();
      sub_2346A7AE4(a1, (uint64_t)v7, type metadata accessor for CapturedRoom.Surface);
      uint64_t v17 = sub_2347EE350();
      os_log_type_t v18 = sub_2347EE960();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v31 = v27;
        unint64_t v28 = a2;
        *(_DWORD *)uint64_t v19 = 136315138;
        unint64_t v25 = v19 + 4;
        uint64_t v26 = v19;
        sub_2347ED5C0();
        sub_2346A7A8C();
        uint64_t v20 = sub_2347EF070();
        uint64_t v30 = sub_234775704(v20, v21, &v31);
        a2 = v28;
        sub_2347EEB30();
        swift_bridgeObjectRelease();
        sub_2346A7B4C((uint64_t)v7, type metadata accessor for CapturedRoom.Surface);
        unint64_t v22 = v26;
        _os_log_impl(&dword_23468B000, v17, v18, "Wall scanItem with UUID %s already exists", v26, 0xCu);
        uint64_t v23 = v27;
        swift_arrayDestroy();
        MEMORY[0x237DC8070](v23, -1, -1);
        MEMORY[0x237DC8070](v22, -1, -1);
      }
      else
      {
        sub_2346A7B4C((uint64_t)v7, type metadata accessor for CapturedRoom.Surface);
      }

      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v8);
    }
  }
  return sub_2346A48D0(a1, a2);
}

uint64_t sub_2346A48D0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v90 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2347ED5C0();
  uint64_t v86 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v89 = (uint64_t)&v71 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v88 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  id v15 = (char *)&v71 - v14;
  MEMORY[0x270FA5388](v16);
  os_log_type_t v18 = (char *)&v71 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v87 = (uint64_t)&v71 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v71 - v25;
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  uint64_t v27 = off_2687AF0E8;
  uint64_t result = swift_beginAccess();
  if (v27[166] == 1)
  {
    uint64_t v29 = 0;
    long long v30 = *(_OWORD *)(a1 + 16);
    while (1)
    {
      long long v91 = v30;
      float v32 = *(float *)((unint64_t)&v91 & 0xFFFFFFFFFFFFFFF3 | (4 * (v29 & 3)));
      BOOL v31 = v32 == 0.0;
      if (v29 == 2) {
        break;
      }
      while (1)
      {
        ++v29;
        if (v31) {
          break;
        }
        if (v29 == 2) {
          goto LABEL_11;
        }
        BOOL v31 = 0;
      }
    }
    if (v32 != 0.0)
    {
LABEL_11:
      if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(MEMORY[0x263EF89A8] + 16)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 32), *MEMORY[0x263EF89A8])), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(MEMORY[0x263EF89A8] + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(MEMORY[0x263EF89A8] + 48))))) & 0x80000000) != 0)return result; {
      uint64_t v83 = v8;
      }
      uint64_t v84 = v6;
      uint64_t v33 = *(void *)(a1 + 8);
      if (sub_2346A71D8(0, v33)) {
        int v34 = 8;
      }
      else {
        int v34 = 0;
      }
      if (sub_2346A71D8(1u, v33)) {
        v34 |= 2u;
      }
      if (sub_2346A71D8(2u, v33)) {
        v34 |= 4u;
      }
      unsigned int v35 = v34 & 0xFFFFFFFE | sub_2346A71D8(3u, v33);
      int v36 = sub_2346C2354(v35);
      swift_beginAccess();
      BOOL v37 = v27[138] == 1;
      unsigned int v82 = v35;
      int v79 = v36;
      if (v37)
      {
        uint64_t v38 = type metadata accessor for CapturedRoom.Surface(0);
        uint64_t v39 = *(void *)(a1 + *(int *)(v38 + 68));
        uint64_t v71 = *(void *)(a1 + *(int *)(v38 + 64));
        swift_bridgeObjectRetain();
        uint64_t v72 = v39;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v72 = MEMORY[0x263F8EE78];
        uint64_t v71 = MEMORY[0x263F8EE78];
      }
      v77.i64[0] = type metadata accessor for CapturedRoom.Surface(0);
      v78.n128_u64[0] = a1 + *(int *)(v77.i64[0] + 52);
      sub_2346A7BCC(v78.n128_i64[0], (uint64_t)v26, (uint64_t *)&unk_2687AE190);
      uint64_t v40 = type metadata accessor for CapturedRoom.Surface.Curve(0);
      int v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v26, 1, v40);
      uint64_t v42 = sub_2346A7C30((uint64_t)v26, (uint64_t *)&unk_2687AE190);
      MEMORY[0x270FA5388](v42);
      uint64_t v70 = a1;
      if (v41 == 1)
      {
        uint64_t v43 = sub_2346A540C(sub_2346A7BAC, (uint64_t)&v69, a2);
        uint64_t v44 = v84;
        uint64_t v45 = v87;
      }
      else
      {
        uint64_t v46 = sub_2346A540C((uint64_t (*)(uint64_t *))sub_2346A7C8C, (uint64_t)&v69, a2);
        MEMORY[0x270FA5388](v46);
        uint64_t v70 = a1;
        uint64_t v43 = sub_2346A540C((uint64_t (*)(uint64_t *))sub_2346A7CB0, (uint64_t)&v69, a2);
        uint64_t v44 = v84;
        uint64_t v45 = v87;
        if (v46)
        {
          if (*(unsigned char *)(v46 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_configuration))
          {
            uint64_t v47 = type metadata accessor for ScanItemStrut();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v45, 1, 1, v47);
          }
          else
          {
            simd_float4 v81 = *(simd_float4 *)(a1 + 32);
            simd_float4 v80 = *(simd_float4 *)(a1 + 48);
            float32x4_t v76 = *(float32x4_t *)(a1 + 64);
            float32x4_t v75 = *(float32x4_t *)(a1 + 80);
            unint64_t v49 = (float32x2_t *)swift_retain();
            v93.columns[0] = v81;
            v93.columns[1] = v80;
            v93.columns[2] = (simd_float4)v76;
            v93.columns[3] = (simd_float4)v75;
            sub_2346BC77C(v49, v45, v93, 0.16, 0.16);
            uint64_t v50 = type metadata accessor for ScanItemStrut();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v45, 0, 1, v50);
          }
          goto LABEL_29;
        }
      }
      uint64_t v48 = type metadata accessor for ScanItemStrut();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v45, 1, 1, v48);
      uint64_t v46 = 0;
LABEL_29:
      v81.i64[0] = v43;
      v80.i64[0] = v46;
      if (v43 && (*(unsigned char *)(v43 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_configuration) & 1) == 0)
      {
        float32x4_t v76 = *(float32x4_t *)(a1 + 32);
        float32x4_t v75 = *(float32x4_t *)(a1 + 48);
        simd_float4 v74 = *(simd_float4 *)(a1 + 64);
        simd_float4 v73 = *(simd_float4 *)(a1 + 80);
        char v52 = (float32x2_t *)swift_retain();
        v94.columns[0] = (simd_float4)v76;
        v94.columns[1] = (simd_float4)v75;
        v94.columns[2] = v74;
        v94.columns[3] = v73;
        sub_2346BC7A0(v52, (uint64_t)v18, v94, 0.16, 0.16);
        uint64_t v53 = type metadata accessor for ScanItemStrut();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v18, 0, 1, v53);
      }
      else
      {
        uint64_t v51 = type metadata accessor for ScanItemStrut();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v18, 1, 1, v51);
      }
      uint64_t v54 = v77.i64[0];
      uint64_t v55 = a1 + *(int *)(v77.i64[0] + 44);
      uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16);
      v56(v89, v55, v44);
      sub_2346A7BCC(a1 + *(int *)(v54 + 56), v90, (uint64_t *)&unk_2687AEB70);
      float32x4_t v77 = *(float32x4_t *)(a1 + 16);
      sub_2346A7BCC(v78.n128_i64[0], (uint64_t)v23, (uint64_t *)&unk_2687AE190);
      float32x4_t v76 = *(float32x4_t *)(a1 + 32);
      float32x4_t v75 = *(float32x4_t *)(a1 + 48);
      simd_float4 v74 = *(simd_float4 *)(a1 + 64);
      simd_float4 v73 = *(simd_float4 *)(a1 + 80);
      __n128 v78 = *(__n128 *)(a1 + 112);
      int v57 = sub_2347121FC(v79);
      sub_2346A7BCC(v45, (uint64_t)v15, &qword_2687AC800);
      sub_2346A7BCC((uint64_t)v18, v88, &qword_2687AC800);
      uint64_t v58 = v85;
      unint64_t v59 = (uint64_t *)(v85 + 24);
      swift_beginAccess();
      uint64_t v60 = *(void *)(v58 + 24);
      if (*(void *)(v60 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v61 = sub_2347BFA88(v55);
        if (v62)
        {
          uint64_t v63 = *(void *)(*(void *)(v60 + 56) + 8 * v61);
          swift_retain();
        }
        else
        {
          uint64_t v63 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v63 = 0;
      }
      type metadata accessor for ScanItem();
      swift_allocObject();
      uint64_t v64 = sub_2346AAF60(v89, v90, 2, 1, (uint64_t)v23, v72, v71, v82, v77, v76, v75, v74, v73, v78, v57, (uint64_t)v15, v88, v63);
      uint64_t v65 = (uint64_t)v83;
      uint64_t v66 = v55;
      uint64_t v67 = v84;
      v56((uint64_t)v83, v66, v84);
      swift_beginAccess();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v92 = *v59;
      *unint64_t v59 = 0x8000000000000000;
      sub_2347AAEB0(v64, v65, isUniquelyReferenced_nonNull_native);
      *unint64_t v59 = v92;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v65, v67);
      swift_endAccess();
      swift_release();
      swift_release();
      swift_release();
      sub_2346A7C30((uint64_t)v18, &qword_2687AC800);
      return sub_2346A7C30(v87, &qword_2687AC800);
    }
  }
  return result;
}

uint64_t sub_2346A5388(uint64_t *a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for CapturedRoom.Surface(0);
  if (sub_2347ED570()) {
    char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_isRightCurved) ^ 1;
  }
  else {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t sub_2346A540C(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_2347EEEC0();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x237DC6CF0](v7 - 4, a3);
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a3 + 8 * v7);
          swift_retain();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10)
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        uint64_t v14 = v9;
        char v12 = a1(&v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v9;
        }
        if (v12)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_2346A5548(uint64_t a1)
{
  return sub_2346A5BB0(a1, "Opening scanItem with UUID %s already exists", sub_2346A5568);
}

uint64_t sub_2346A5568(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v68 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v52 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v8 - 8);
  BOOL v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2347ED5C0();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v52 - v19;
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  uint64_t v21 = off_2687AF0E8;
  uint64_t result = swift_beginAccess();
  if (v21[168] == 1)
  {
    uint64_t v23 = 0;
    float32x4_t v24 = *(float32x4_t *)(a1 + 16);
    while (1)
    {
      float32x4_t v69 = v24;
      float v26 = *(float *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
      BOOL v25 = v26 == 0.0;
      if (v23 == 2) {
        break;
      }
      while (1)
      {
        ++v23;
        if (v25) {
          break;
        }
        if (v23 == 2) {
          goto LABEL_10;
        }
        BOOL v25 = 0;
      }
    }
    if (v26 != 0.0)
    {
LABEL_10:
      float32x4_t v27 = *(float32x4_t *)(a1 + 32);
      float32x4_t v28 = *(float32x4_t *)(a1 + 48);
      float32x4_t v29 = *(float32x4_t *)(a1 + 64);
      if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v28, *(float32x4_t *)(MEMORY[0x263EF89A8] + 16)), (int8x16_t)vceqq_f32(v27, *MEMORY[0x263EF89A8])), vandq_s8((int8x16_t)vceqq_f32(v29, *(float32x4_t *)(MEMORY[0x263EF89A8] + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(MEMORY[0x263EF89A8] + 48))))) & 0x80000000) == 0)
      {
        simd_float4 v61 = *(simd_float4 *)(a1 + 80);
        simd_float4 v62 = (simd_float4)v29;
        float32x4_t v63 = v28;
        float32x4_t v64 = v27;
        float32x4_t v65 = v24;
        long long v30 = (int *)type metadata accessor for CapturedRoom.Surface(0);
        uint64_t v31 = a1 + v30[11];
        uint64_t v66 = v15;
        uint64_t v67 = v31;
        float v32 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
        uint64_t v60 = v15 + 16;
        unint64_t v59 = v32;
        ((void (*)(char *))v32)(v20);
        sub_2346A7BCC(a1 + v30[14], (uint64_t)v13, (uint64_t *)&unk_2687AEB70);
        unsigned int v33 = (*(unsigned char *)a1 - 2);
        unsigned int v34 = 0x6040102u >> (8 * v33);
        if (*(unsigned char *)a1) {
          int v35 = 0;
        }
        else {
          int v35 = 5;
        }
        if (*(unsigned char *)a1) {
          int v36 = 4;
        }
        else {
          int v36 = 3;
        }
        BOOL v37 = v33 >= 4;
        if (v33 >= 4) {
          unsigned int v38 = v36;
        }
        else {
          unsigned int v38 = 0x20501u >> (8 * v33);
        }
        unsigned int v53 = v38;
        if (!v37) {
          int v35 = v34;
        }
        int v58 = v35;
        sub_2346A7BCC(a1 + v30[13], (uint64_t)v10, (uint64_t *)&unk_2687AE190);
        uint64_t v39 = *(void *)(a1 + v30[17]);
        uint64_t v40 = *(void *)(a1 + v30[16]);
        __n128 v55 = *(__n128 *)(a1 + 112);
        uint64_t v41 = qword_2687ABE00;
        uint64_t v57 = v39;
        swift_bridgeObjectRetain();
        uint64_t v56 = v40;
        swift_bridgeObjectRetain();
        if (v41 != -1) {
          swift_once();
        }
        int v54 = dword_2687BE0D0;
        uint64_t v42 = type metadata accessor for ScanItemStrut();
        uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
        v43(v7, 1, 1, v42);
        v43(v68, 1, 1, v42);
        uint64_t v44 = (uint64_t *)(v1 + 24);
        swift_beginAccess();
        uint64_t v45 = *(void *)(v1 + 24);
        if (*(void *)(v45 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v46 = sub_2347BFA88(v67);
          if (v47)
          {
            uint64_t v48 = *(void *)(*(void *)(v45 + 56) + 8 * v46);
            swift_retain();
          }
          else
          {
            uint64_t v48 = 0;
          }
          int v49 = v53;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v48 = 0;
          int v49 = v53;
        }
        type metadata accessor for ScanItem();
        swift_allocObject();
        uint64_t v50 = sub_2346AAF60((uint64_t)v20, (uint64_t)v13, v58, v49, (uint64_t)v10, v57, v56, 15, v65, v64, v63, v62, v61, v55, v54, (uint64_t)v7, (uint64_t)v68, v48);
        v59(v17, v67, v14);
        swift_beginAccess();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v70 = *v44;
        *uint64_t v44 = 0x8000000000000000;
        sub_2347AAEB0(v50, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
        *uint64_t v44 = v70;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v17, v14);
        swift_endAccess();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_2346A5B90(uint64_t a1)
{
  return sub_2346A5BB0(a1, "Floor scanItem with UUID %s already exists", sub_2346A5F80);
}

uint64_t sub_2346A5BB0(uint64_t a1, const char *a2, uint64_t (*a3)(void))
{
  float v32 = a2;
  uint64_t v6 = type metadata accessor for CapturedRoom.Surface(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2347EE370();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(*(void *)(v3 + 24) + 16))
  {
    uint64_t v13 = a1 + *(int *)(v6 + 44);
    swift_bridgeObjectRetain();
    sub_2347BFA88(v13);
    LOBYTE(v13) = v14;
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v31 = a3;
      type metadata accessor for Constants();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v16 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      id v17 = objc_msgSend(v16, sel_bundleIdentifier);

      uint64_t v30 = v10;
      if (v17)
      {
        sub_2347EE620();
      }
      sub_2346A7A4C();
      sub_2347EEAF0();
      sub_2347EE380();
      sub_2346A7AE4(a1, (uint64_t)v8, type metadata accessor for CapturedRoom.Surface);
      uint64_t v18 = sub_2347EE350();
      os_log_type_t v19 = sub_2347EE960();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v34 = v29;
        float32x4_t v28 = v20;
        *(_DWORD *)uint64_t v20 = 136315138;
        v27[1] = v20 + 4;
        sub_2347ED5C0();
        sub_2346A7A8C();
        uint64_t v21 = sub_2347EF070();
        uint64_t v33 = sub_234775704(v21, v22, &v34);
        sub_2347EEB30();
        swift_bridgeObjectRelease();
        sub_2346A7B4C((uint64_t)v8, type metadata accessor for CapturedRoom.Surface);
        os_log_type_t v23 = v19;
        float32x4_t v24 = v28;
        _os_log_impl(&dword_23468B000, v18, v23, v32, v28, 0xCu);
        uint64_t v25 = v29;
        swift_arrayDestroy();
        MEMORY[0x237DC8070](v25, -1, -1);
        MEMORY[0x237DC8070](v24, -1, -1);
      }
      else
      {
        sub_2346A7B4C((uint64_t)v8, type metadata accessor for CapturedRoom.Surface);
      }

      (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v9);
      a3 = v31;
    }
  }
  return a3(a1);
}

uint64_t sub_2346A5F80(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v68 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v52 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2347ED5C0();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  id v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v52 - v19;
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  uint64_t v21 = off_2687AF0E8;
  uint64_t result = swift_beginAccess();
  if (v21[169] == 1)
  {
    uint64_t v23 = 0;
    float32x4_t v24 = *(float32x4_t *)(a1 + 16);
    while (1)
    {
      float32x4_t v69 = v24;
      float v26 = *(float *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
      BOOL v25 = v26 == 0.0;
      if (v23 == 2) {
        break;
      }
      while (1)
      {
        ++v23;
        if (v25) {
          break;
        }
        if (v23 == 2) {
          goto LABEL_10;
        }
        BOOL v25 = 0;
      }
    }
    if (v26 != 0.0)
    {
LABEL_10:
      float32x4_t v27 = *(float32x4_t *)(a1 + 32);
      float32x4_t v28 = *(float32x4_t *)(a1 + 48);
      float32x4_t v29 = *(float32x4_t *)(a1 + 64);
      if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v28, *(float32x4_t *)(MEMORY[0x263EF89A8] + 16)), (int8x16_t)vceqq_f32(v27, *MEMORY[0x263EF89A8])), vandq_s8((int8x16_t)vceqq_f32(v29, *(float32x4_t *)(MEMORY[0x263EF89A8] + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(MEMORY[0x263EF89A8] + 48))))) & 0x80000000) == 0)
      {
        simd_float4 v61 = *(simd_float4 *)(a1 + 80);
        simd_float4 v62 = (simd_float4)v29;
        float32x4_t v63 = v28;
        float32x4_t v64 = v27;
        float32x4_t v65 = v24;
        uint64_t v30 = (int *)type metadata accessor for CapturedRoom.Surface(0);
        uint64_t v31 = a1 + v30[11];
        uint64_t v66 = v15;
        uint64_t v67 = v31;
        float v32 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
        uint64_t v60 = v15 + 16;
        unint64_t v59 = v32;
        ((void (*)(char *))v32)(v20);
        sub_2346A7BCC(a1 + v30[14], (uint64_t)v13, (uint64_t *)&unk_2687AEB70);
        unsigned int v33 = (*(unsigned char *)a1 - 2);
        unsigned int v34 = 0x6040102u >> (8 * v33);
        if (*(unsigned char *)a1) {
          int v35 = 0;
        }
        else {
          int v35 = 5;
        }
        if (*(unsigned char *)a1) {
          int v36 = 4;
        }
        else {
          int v36 = 3;
        }
        BOOL v37 = v33 >= 4;
        if (v33 >= 4) {
          unsigned int v38 = v36;
        }
        else {
          unsigned int v38 = 0x20501u >> (8 * v33);
        }
        unsigned int v53 = v38;
        if (!v37) {
          int v35 = v34;
        }
        int v58 = v35;
        sub_2346A7BCC(a1 + v30[13], (uint64_t)v10, (uint64_t *)&unk_2687AE190);
        uint64_t v39 = *(void *)(a1 + v30[17]);
        uint64_t v40 = *(void *)(a1 + v30[16]);
        __n128 v55 = *(__n128 *)(a1 + 112);
        uint64_t v41 = qword_2687ABE00;
        uint64_t v57 = v39;
        swift_bridgeObjectRetain();
        uint64_t v56 = v40;
        swift_bridgeObjectRetain();
        if (v41 != -1) {
          swift_once();
        }
        int v54 = dword_2687BE0D0;
        uint64_t v42 = type metadata accessor for ScanItemStrut();
        uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
        v43(v7, 1, 1, v42);
        v43(v68, 1, 1, v42);
        uint64_t v44 = (uint64_t *)(v1 + 24);
        swift_beginAccess();
        uint64_t v45 = *(void *)(v1 + 24);
        if (*(void *)(v45 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v46 = sub_2347BFA88(v67);
          if (v47)
          {
            uint64_t v48 = *(void *)(*(void *)(v45 + 56) + 8 * v46);
            swift_retain();
          }
          else
          {
            uint64_t v48 = 0;
          }
          int v49 = v53;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v48 = 0;
          int v49 = v53;
        }
        type metadata accessor for ScanItem();
        swift_allocObject();
        uint64_t v50 = sub_2346AAF60((uint64_t)v20, (uint64_t)v13, v58, v49, (uint64_t)v10, v57, v56, 15, v65, v64, v63, v62, v61, v55, v54, (uint64_t)v7, (uint64_t)v68, v48);
        v59(v17, v67, v14);
        swift_beginAccess();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v70 = *v44;
        *uint64_t v44 = 0x8000000000000000;
        sub_2347AAEB0(v50, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
        *uint64_t v44 = v70;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v17, v14);
        swift_endAccess();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_2346A65A8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CapturedRoom.Object(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2347EE370();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 24) + 16))
  {
    uint64_t v10 = a1 + *(int *)(v3 + 32);
    swift_bridgeObjectRetain();
    sub_2347BFA88(v10);
    LOBYTE(v10) = v11;
    swift_bridgeObjectRelease();
    if (v10)
    {
      uint64_t v26 = v7;
      type metadata accessor for Constants();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v13 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      id v14 = objc_msgSend(v13, sel_bundleIdentifier);

      if (v14)
      {
        sub_2347EE620();
      }
      sub_2346A7A4C();
      sub_2347EEAF0();
      sub_2347EE380();
      sub_2346A7AE4(a1, (uint64_t)v5, type metadata accessor for CapturedRoom.Object);
      uint64_t v15 = sub_2347EE350();
      os_log_type_t v16 = sub_2347EE960();
      if (os_log_type_enabled(v15, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        uint64_t v28 = v25;
        float32x4_t v24 = v17;
        *(_DWORD *)id v17 = 136315138;
        v23[1] = v17 + 4;
        sub_2347ED5C0();
        sub_2346A7A8C();
        uint64_t v18 = sub_2347EF070();
        uint64_t v27 = sub_234775704(v18, v19, &v28);
        sub_2347EEB30();
        swift_bridgeObjectRelease();
        sub_2346A7B4C((uint64_t)v5, type metadata accessor for CapturedRoom.Object);
        uint64_t v20 = v24;
        _os_log_impl(&dword_23468B000, v15, v16, "Object scanItem with UUID %s already exists", v24, 0xCu);
        uint64_t v21 = v25;
        swift_arrayDestroy();
        MEMORY[0x237DC8070](v21, -1, -1);
        MEMORY[0x237DC8070](v20, -1, -1);
      }
      else
      {
        sub_2346A7B4C((uint64_t)v5, type metadata accessor for CapturedRoom.Object);
      }

      (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v6);
    }
  }
  return sub_2346A6968(a1);
}

uint64_t sub_2346A6968(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v2 - 8);
  simd_float4 v62 = &v47[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v4);
  simd_float4 v61 = &v47[-v5];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v9 - 8);
  char v11 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_2347ED5C0();
  uint64_t v63 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  id v14 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  id v17 = &v47[-v16];
  uint64_t v18 = (int *)type metadata accessor for CapturedRoom.Object(0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = &v47[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  uint64_t v21 = off_2687AF0E8;
  uint64_t result = swift_beginAccess();
  if (v21[167] == 1)
  {
    swift_beginAccess();
    int v23 = v21[41];
    sub_2346A7AE4(a1, (uint64_t)v20, type metadata accessor for CapturedRoom.Object);
    if (v23 == 1)
    {
      int v24 = *v20;
      uint64_t result = sub_2346A7B4C((uint64_t)v20, type metadata accessor for CapturedRoom.Object);
      if (v24 == 2 || v24 == 15) {
        return result;
      }
    }
    else
    {
      sub_2346A7B4C((uint64_t)v20, type metadata accessor for CapturedRoom.Object);
    }
    uint64_t v26 = off_2687AF0E8;
    swift_beginAccess();
    v65[0] = v26[40];
    int v27 = sub_2346A7000(v65);
    uint64_t v28 = v12;
    uint64_t v29 = a1 + v18[8];
    uint64_t v30 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v63 + 16);
    uint64_t v59 = v28;
    int v58 = v30;
    ((void (*)(unsigned char *, uint64_t))v30)(v17, v29);
    sub_2346A7BCC(a1 + v18[11], (uint64_t)v11, (uint64_t *)&unk_2687AEB70);
    v65[0] = *(unsigned char *)a1;
    int v48 = sub_2347B959C();
    float32x4_t v57 = *(float32x4_t *)(a1 + 16);
    uint64_t v31 = type metadata accessor for CapturedRoom.Surface.Curve(0);
    float v32 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
    int v49 = v8;
    v32(v8, 1, 1, v31);
    float32x4_t v55 = *(float32x4_t *)(a1 + 32);
    float32x4_t v54 = *(float32x4_t *)(a1 + 48);
    simd_float4 v53 = *(simd_float4 *)(a1 + 64);
    simd_float4 v52 = *(simd_float4 *)(a1 + 80);
    __n128 v56 = *(__n128 *)(a1 + v18[13]);
    int v51 = sub_2347124AC(v27);
    int v50 = sub_2347121FC(v27);
    uint64_t v33 = type metadata accessor for ScanItemStrut();
    unsigned int v34 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56);
    v34(v61, 1, 1, v33);
    v34(v62, 1, 1, v33);
    uint64_t v35 = v60;
    int v36 = (uint64_t *)(v60 + 24);
    swift_beginAccess();
    uint64_t v37 = *(void *)(v35 + 24);
    if (*(void *)(v37 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = v29;
      unint64_t v39 = sub_2347BFA88(v29);
      if (v40)
      {
        uint64_t v41 = *(void *)(*(void *)(v37 + 56) + 8 * v39);
        swift_retain();
      }
      else
      {
        uint64_t v41 = 0;
      }
      uint64_t v42 = (uint64_t)v49;
      int v43 = v48;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = v29;
      uint64_t v41 = 0;
      uint64_t v42 = (uint64_t)v49;
      int v43 = v48;
    }
    type metadata accessor for ScanItem();
    swift_allocObject();
    uint64_t v44 = sub_2346AAF60((uint64_t)v17, (uint64_t)v11, 3, v43, v42, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], v51, v57, v55, v54, v53, v52, v56, v50, (uint64_t)v61, (uint64_t)v62, v41);
    uint64_t v45 = v59;
    v58(v14, v38, v59);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v64 = *v36;
    *int v36 = 0x8000000000000000;
    sub_2347AAEB0(v44, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    *int v36 = v64;
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v14, v45);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_2346A7000(unsigned char *a1)
{
  if (!*a1) {
    return *(unsigned int *)&v1[*(int *)(type metadata accessor for CapturedRoom.Object(0) + 48)];
  }
  if (*a1 != 1)
  {
    int v4 = *v1;
    if (v4 == 14)
    {
      uint64_t v3 = &unk_26E76FD60;
      goto LABEL_12;
    }
    if (v4 == 12)
    {
      uint64_t v3 = &unk_26E76FD30;
LABEL_12:
      return sub_2346A7164((uint64_t)v3);
    }
    return *(unsigned int *)&v1[*(int *)(type metadata accessor for CapturedRoom.Object(0) + 48)];
  }
  uint64_t result = 0;
  switch(*v1)
  {
    case 2:
    case 3:
    case 4:
    case 7:
    case 0xA:
      uint64_t v3 = &unk_26E76FCA0;
      goto LABEL_12;
    case 6:
    case 0xB:
    case 0xC:
      uint64_t v3 = &unk_26E76FD00;
      goto LABEL_12;
    case 0xF:
      return result;
    default:
      uint64_t v3 = &unk_26E76FCD0;
      goto LABEL_12;
  }
  return result;
}

uint64_t sub_2346A7100()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FloorPlanManager()
{
  return self;
}

uint64_t sub_2346A7164(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for CapturedRoom.Object(0);
  LODWORD(result) = 0;
  int v6 = *(_DWORD *)(v1 + *(int *)(v4 + 48));
  uint64_t v7 = (int *)(a1 + 32);
  do
  {
    int v9 = *v7++;
    int v8 = v9;
    int v10 = v9 & ~v6;
    if ((v9 & ~result) == 0 || v10 != 0) {
      int v8 = 0;
    }
    uint64_t result = v8 | result;
    --v2;
  }
  while (v2);
  return result;
}

BOOL sub_2346A71D8(unsigned __int8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  int v3 = a1;
  sub_2347EF1C0();
  sub_2347EF1D0();
  uint64_t v4 = sub_2347EF200();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == v3;
    if (v12 == v3) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_2346A72C8(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v6 = v5;
  __n128 v27 = a4;
  __n128 v28 = a5;
  __n128 v25 = a2;
  __n128 v26 = a3;
  uint64_t v8 = sub_2347ED5C0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v18 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type);
  __n128 v19 = 0uLL;
  __n128 v29 = 0u;
  if ((v18 - 1) >= 2)
  {
    if (v18 == 3)
    {
      if (qword_2687ABE80 != -1) {
        swift_once();
      }
      sub_2347CA2E8(a1, *(unsigned char *)(v6 + 17), v25, v26, v27, v28);
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_2687ABE80 != -1) {
      swift_once();
    }
    v31.columns[0] = (simd_float4)v25;
    v31.columns[1] = (simd_float4)v26;
    v31.columns[2] = (simd_float4)v27;
    v31.columns[3] = (simd_float4)v28;
    v19.n128_u64[0] = (unint64_t)sub_2347CA09C(a1, *(unsigned __int8 *)(v6 + 16), v10, v11, v12, v13, v14, v15, v31);
    if ((v22 & 1) == 0)
    {
      v19.n128_u64[0] = v20;
      *(int8x8_t *)&v19.n128_i8[8] = v21;
LABEL_10:
      __n128 v29 = v19;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v17, a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid, v8, v19);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v30 = *(void *)(v6 + 32);
  *(void *)(v6 + 32) = 0x8000000000000000;
  sub_2347AAA50(1, (uint64_t)v17, isUniquelyReferenced_nonNull_native, v29);
  *(void *)(v6 + 32) = v30;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  swift_endAccess();
  return 1;
}

uint64_t sub_2346A74F4(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 v67 = a4;
  __n128 v66 = a3;
  __n128 v65 = a2;
  __n128 v64 = a1;
  uint64_t v5 = sub_2347ED5C0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  simd_float4 v61 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v60 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v60 - v12;
  swift_beginAccess();
  uint64_t v14 = *(void *)(v4 + 24);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v68 = v4;
  uint64_t v69 = v14 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  swift_bridgeObjectRetain();
  float32x4_t v75 = (uint64_t *)(v4 + 32);
  swift_beginAccess();
  int64_t v19 = 0;
  uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  int64_t v70 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v71 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v63 = v13;
  uint64_t v62 = v14;
  while (1)
  {
    if (v18)
    {
      uint64_t v73 = (v18 - 1) & v18;
      int64_t v74 = v19;
      unint64_t v21 = __clz(__rbit64(v18)) | (v19 << 6);
    }
    else
    {
      int64_t v22 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_42;
      }
      if (v22 >= v70) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v69 + 8 * v22);
      int64_t v24 = v19 + 1;
      if (!v23)
      {
        int64_t v24 = v19 + 2;
        if (v19 + 2 >= v70) {
          return swift_release();
        }
        unint64_t v23 = *(void *)(v69 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v19 + 3;
          if (v19 + 3 >= v70) {
            return swift_release();
          }
          unint64_t v23 = *(void *)(v69 + 8 * v24);
          if (!v23)
          {
            int64_t v24 = v19 + 4;
            if (v19 + 4 >= v70) {
              return swift_release();
            }
            unint64_t v23 = *(void *)(v69 + 8 * v24);
            if (!v23)
            {
              uint64_t v25 = v19 + 5;
              if (v19 + 5 >= v70) {
                return swift_release();
              }
              unint64_t v23 = *(void *)(v69 + 8 * v25);
              if (!v23)
              {
                while (1)
                {
                  int64_t v24 = v25 + 1;
                  if (__OFADD__(v25, 1)) {
                    goto LABEL_43;
                  }
                  if (v24 >= v70) {
                    return swift_release();
                  }
                  unint64_t v23 = *(void *)(v69 + 8 * v24);
                  ++v25;
                  if (v23) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v24 = v19 + 5;
            }
          }
        }
      }
LABEL_24:
      uint64_t v73 = (v23 - 1) & v23;
      int64_t v74 = v24;
      unint64_t v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    uint64_t v26 = *(void *)(*(void *)(v14 + 56) + 8 * v21);
    uint64_t v27 = v26 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
    __n128 v28 = *v72;
    (*v72)(v13, v26 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid, v5);
    uint64_t v29 = *v75;
    uint64_t v30 = *(void *)(*v75 + 16);
    swift_retain();
    simd_float4 v76 = 0u;
    if (!v30) {
      goto LABEL_29;
    }
    swift_bridgeObjectRetain();
    unint64_t v31 = sub_2347BFA88((uint64_t)v13);
    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_29:
      int v34 = 2;
      goto LABEL_30;
    }
    uint64_t v33 = (simd_float4 *)(*(void *)(v29 + 56) + 32 * v31);
    simd_float4 v76 = *v33;
    int v34 = v33[1].u8[0];
    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v35 = *v71;
    (*v71)(v13, v5);
    if (v34 != 2 && (v34 & 1) != 0) {
      goto LABEL_6;
    }
    uint64_t v36 = v68;
    char v37 = sub_2346A72C8(v26, v64, v65, v66, v67);
    simd_float4 v76 = v38;
    uint64_t v39 = v5;
    char v40 = v37;
    uint64_t v41 = v10;
    uint64_t v42 = v27;
    uint64_t v43 = (uint64_t)v10;
    uint64_t v44 = v39;
    ((void (*)(char *, uint64_t))v28)(v41, v42);
    swift_beginAccess();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    float32x4_t v77 = *(void **)(v36 + 32);
    unint64_t v46 = v77;
    *(void *)(v36 + 32) = 0x8000000000000000;
    uint64_t v47 = v43;
    unint64_t v49 = sub_2347BFA88(v43);
    uint64_t v50 = v46[2];
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      break;
    }
    char v53 = v48;
    if (v46[3] >= v52)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_2347D5778();
      }
    }
    else
    {
      sub_2347CF00C(v52, isUniquelyReferenced_nonNull_native);
      unint64_t v54 = sub_2347BFA88(v47);
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_44;
      }
      unint64_t v49 = v54;
    }
    unsigned __int8 v56 = v40 & 1;
    float32x4_t v57 = v77;
    if (v53)
    {
      int v58 = (simd_float4 *)(v77[7] + 32 * v49);
      *int v58 = v76;
      v58[1].i8[0] = v56;
      uint64_t v5 = v44;
    }
    else
    {
      uint64_t v20 = (uint64_t)v61;
      uint64_t v5 = v44;
      v28(v61, v47, v44);
      sub_2347AC2C4(v49, v20, v56, v57, (__n128)v76);
    }
    *float32x4_t v75 = (uint64_t)v57;
    swift_bridgeObjectRelease();
    v35((char *)v47, v5);
    swift_endAccess();
    uint64_t v10 = (char *)v47;
    uint64_t v13 = v63;
    uint64_t v14 = v62;
LABEL_6:
    sub_2346AF0B8(v76);
    swift_release();
    unint64_t v18 = v73;
    int64_t v19 = v74;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = sub_2347EF0F0();
  __break(1u);
  return result;
}

unint64_t sub_2346A7A4C()
{
  unint64_t result = qword_2687AD270;
  if (!qword_2687AD270)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2687AD270);
  }
  return result;
}

unint64_t sub_2346A7A8C()
{
  unint64_t result = qword_2687AC808;
  if (!qword_2687AC808)
  {
    sub_2347ED5C0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AC808);
  }
  return result;
}

uint64_t sub_2346A7AE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346A7B4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2346A7BAC(uint64_t *a1)
{
  return sub_2346A5388(a1) & 1;
}

uint64_t sub_2346A7BCC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346A7C30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2346A7C8C()
{
  return sub_2346A7CD4() & 1;
}

uint64_t sub_2346A7CB0()
{
  return sub_2346A7CD4() & 1;
}

uint64_t sub_2346A7CD4()
{
  return sub_2347ED570() & 1;
}

uint64_t sub_2346A7D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)&long long v44 = a4;
  uint64_t v40 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC810);
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v41 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v17 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (float *)((char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v21);
  unint64_t v23 = (char *)&v40 - v22;
  sub_2346A7BCC(a2, (uint64_t)v16, (uint64_t *)&unk_2687AE190);
  int64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v24(v16, 1, v17) == 1)
  {
    sub_2346A7C30((uint64_t)v16, (uint64_t *)&unk_2687AE190);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a3, 1, 1, v17);
  }
  else
  {
    sub_2346A9F28((uint64_t)v16, (uint64_t)v23, type metadata accessor for CapturedRoom.Surface.Curve);
    sub_2346A7BCC(v40, (uint64_t)v13, (uint64_t *)&unk_2687AE190);
    if (v24(v13, 1, v17) == 1)
    {
      sub_2346A7C30((uint64_t)v13, (uint64_t *)&unk_2687AE190);
      uint64_t v26 = &v23[*(int *)(v17 + 24)];
      sub_2346A895C((uint64_t)v10);
      uint64_t v27 = *(void *)v23;
      int v28 = *((_DWORD *)v23 + 2);
      uint64_t v30 = v41;
      uint64_t v29 = v42;
      uint64_t v31 = v43;
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v41, v26, v43);
      sub_2346A9F90((uint64_t)v23, type metadata accessor for CapturedRoom.Surface.Curve);
      *(void *)a3 = v27;
      *(_DWORD *)(a3 + 8) = v28;
      char v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
      v32(a3 + *(int *)(v17 + 24), v30, v31);
      v32(a3 + *(int *)(v17 + 28), (uint64_t)v10, v31);
    }
    else
    {
      sub_2346A9F28((uint64_t)v13, (uint64_t)v20, type metadata accessor for CapturedRoom.Surface.Curve);
      float v33 = v20[2] + (float)((float)(*((float *)v23 + 2) - v20[2]) * *(float *)&v44);
      sub_2346A895C((uint64_t)v10);
      uint64_t v34 = v41;
      sub_2346A895C(v41);
      float32x2_t v35 = *(float32x2_t *)v20;
      sub_2346A9F90((uint64_t)v20, type metadata accessor for CapturedRoom.Surface.Curve);
      float32x2_t v36 = *(float32x2_t *)v23;
      sub_2346A9F90((uint64_t)v23, type metadata accessor for CapturedRoom.Surface.Curve);
      *(float32x2_t *)a3 = vadd_f32(v35, vmul_n_f32(vsub_f32(v36, v35), *(float *)&v44));
      *(float *)(a3 + 8) = v33;
      char v37 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
      simd_float4 v38 = v10;
      uint64_t v39 = v43;
      v37(a3 + *(int *)(v17 + 24), v38, v43);
      v37(a3 + *(int *)(v17 + 28), (char *)v34, v39);
    }
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a3, 0, 1, v17);
  }
}

uint64_t sub_2346A81A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)&long long v82 = a4;
  uint64_t v80 = a1;
  *(void *)&long long v81 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v73 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v73 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v73 - v15;
  uint64_t v17 = type metadata accessor for ScanItemStrut();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  MEMORY[0x270FA5388](v19);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v73 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v73 - v24;
  MEMORY[0x270FA5388](v26);
  MEMORY[0x270FA5388](v27);
  char v32 = (float32x2_t *)((char *)&v73 - v31);
  if (fabsf(v33 + -1.0) < 0.00000011921) {
    return sub_2346A7BCC(v81, a3, &qword_2687AC800);
  }
  simd_float4 v76 = (float32x2_t *)v28;
  float32x4_t v77 = v10;
  uint64_t v73 = (float32x2_t *)v29;
  uint64_t v74 = v30;
  float32x4_t v75 = v7;
  uint64_t v78 = v18;
  uint64_t v79 = a3;
  float32x2_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  uint64_t v36 = v80;
  int v37 = v35(v80, 1, v17);
  uint64_t v38 = v81;
  if (v37 == 1)
  {
    sub_2346A7BCC(v81, (uint64_t)v16, &qword_2687AC800);
    if (v35((uint64_t)v16, 1, v17) != 1)
    {
      sub_2346A9F28((uint64_t)v16, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
      long long v81 = *(_OWORD *)v25;
      float32x2_t v45 = *(float32x2_t *)(v25 + 8);
      float32x2_t v46 = *(float32x2_t *)(v25 + 16);
      __int32 v47 = *((_DWORD *)v25 + 6);
      char v48 = (char *)v32 + *(int *)(v17 + 44);
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 1, 1, v49);
      *(_OWORD *)v32->f32 = v81;
      v32[2] = v46;
      v32[3].i32[0] = v47;
      v32[4] = v45;
      v32[5] = v46;
      v32[6].i32[0] = v47;
      uint64_t v42 = v76;
      sub_2346A9F28((uint64_t)v25, (uint64_t)v76, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
      goto LABEL_11;
    }
    sub_2346A7C30((uint64_t)v16, &qword_2687AC800);
  }
  sub_2346A7BCC(v36, (uint64_t)v13, &qword_2687AC800);
  if (v35((uint64_t)v13, 1, v17) == 1)
  {
    sub_2346A7C30((uint64_t)v13, &qword_2687AC800);
    goto LABEL_15;
  }
  sub_2346A9F28((uint64_t)v13, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  if (v35(v38, 1, v17) == 1)
  {
    sub_2346A9EC4((uint64_t)v22, (uint64_t)v32);
    long long v81 = *(_OWORD *)v22;
    float32x2_t v39 = *(float32x2_t *)(v22 + 8);
    float32x2_t v40 = *(float32x2_t *)(v22 + 16);
    __int32 v41 = *((_DWORD *)v22 + 6);
    sub_2346A9F90((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    uint64_t v42 = v76;
    uint64_t v43 = (char *)v76 + *(int *)(v17 + 44);
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
    *(_OWORD *)v42->f32 = v81;
    void v42[2] = v40;
    v42[3].i32[0] = v41;
    v42[4] = v39;
    v42[5] = v40;
    v42[6].i32[0] = v41;
LABEL_11:
    uint64_t v51 = v78;
    uint64_t v50 = v79;
    goto LABEL_12;
  }
  sub_2346A9F90((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
LABEL_15:
  uint64_t v63 = (uint64_t)v77;
  sub_2346A7BCC(v36, (uint64_t)v77, &qword_2687AC800);
  if (v35(v63, 1, v17) != 1)
  {
    uint64_t v65 = v63;
    uint64_t v66 = v74;
    sub_2346A9F28(v65, v74, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    uint64_t v67 = v38;
    uint64_t v64 = (uint64_t)v75;
    sub_2346A7BCC(v67, (uint64_t)v75, &qword_2687AC800);
    if (v35(v64, 1, v17) == 1)
    {
      sub_2346A9F90(v66, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
      goto LABEL_19;
    }
    int64_t v70 = v73;
    sub_2346A9F28(v64, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    BOOL v71 = sub_2346BC9D4(v70, 0.0001);
    uint64_t v51 = v78;
    uint64_t v50 = v79;
    if (v71)
    {
      sub_2346A9F90(v66, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
      sub_2346A9F28((uint64_t)v70, v50, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v50, 0, 1, v17);
    }
    sub_2346A9F28(v66, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    uint64_t v72 = (uint64_t)v70;
    uint64_t v42 = v76;
    sub_2346A9F28(v72, (uint64_t)v76, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
LABEL_12:
    float32x2_t v52 = vadd_f32(*v32, vmul_n_f32(vsub_f32(*v42, *v32), *(float *)&v82));
    float32x2_t v53 = sub_2346A9DD8(v32[1], v42[1], *(float *)&v82);
    float32x2_t v54 = sub_2346A9DD8(v32[2], v42[2], *(float *)&v82);
    float v55 = v32[3].f32[0] + (float)((float)(v42[3].f32[0] - v32[3].f32[0]) * *(float *)&v82);
    float32x2_t v56 = sub_2346A9DD8(v32[4], v42[4], *(float *)&v82);
    float32x2_t v57 = sub_2346A9DD8(v32[5], v42[5], *(float *)&v82);
    float v58 = v32[6].f32[0];
    sub_2346A9F90((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    float v59 = v42[6].f32[0];
    sub_2346A9F90((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    float v60 = v58 + (float)((float)(v59 - v58) * *(float *)&v82);
    uint64_t v61 = v50 + *(int *)(v17 + 44);
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 1, 1, v62);
    *(float32x2_t *)uint64_t v50 = v52;
    *(float32x2_t *)(v50 + 8) = v53;
    *(float32x2_t *)(v50 + 16) = v54;
    *(float *)(v50 + 24) = v55;
    *(float32x2_t *)(v50 + 32) = v56;
    *(float32x2_t *)(v50 + 40) = v57;
    *(float *)(v50 + 48) = v60;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v50, 0, 1, v17);
  }
  uint64_t v64 = v63;
LABEL_19:
  uint64_t v69 = v78;
  uint64_t v68 = v79;
  sub_2346A7C30(v64, &qword_2687AC800);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v68, 1, 1, v17);
}

uint64_t sub_2346A895C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC810);
  uint64_t v20 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_2347EE370();
  uint64_t v4 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2347ED120();
  uint64_t v7 = (void *)sub_2347ED100();
  uint64_t v8 = (void *)sub_2347ED100();
  sub_2346A9D9C(0, (unint64_t *)&qword_2687AE260);
  char v9 = sub_2347EEAE0();

  if (v9)
  {
    sub_2347ED120();
  }
  else
  {
    type metadata accessor for Constants();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v11 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    id v12 = objc_msgSend(v11, sel_bundleIdentifier);

    if (v12)
    {
      sub_2347EE620();
    }
    sub_2346A9D9C(0, (unint64_t *)&qword_2687AD270);
    sub_2347EEAF0();
    sub_2347EE380();
    uint64_t v13 = sub_2347EE350();
    os_log_type_t v14 = sub_2347EE960();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_23468B000, v13, v14, "startAngle unit is different than endAngle unit", v15, 2u);
      MEMORY[0x237DC8070](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
    uint64_t v16 = (void *)sub_2347ED100();
    sub_2347ED130();

    sub_2347ED120();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  }
  sub_2347ED100();
  return sub_2347ED110();
}

unint64_t sub_2346A8D00(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v97 = sub_2347EE370();
  uint64_t v6 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  uint64_t v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  id v11 = (char *)&v88 - v10;
  MEMORY[0x270FA5388](v12);
  simd_float4x4 v93 = (char *)&v88 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v88 - v16;
  if (!*(void *)(a1 + 16) || !*(void *)(a2 + 16))
  {
    type metadata accessor for Constants();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v22 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    id v23 = objc_msgSend(v22, sel_bundleIdentifier);

    if (v23)
    {
      sub_2347EE620();
    }
    sub_2346A9D9C(0, (unint64_t *)&qword_2687AD270);
    sub_2347EEAF0();
    sub_2347EE380();
    uint64_t v24 = sub_2347EE350();
    os_log_type_t v25 = sub_2347EE960();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_23468B000, v24, v25, "Edge is empty", v26, 2u);
      MEMORY[0x237DC8070](v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v97);
    return sub_2347AD1BC(MEMORY[0x263F8EE78]);
  }
  if (fabsf(a3 + -1.0) < 0.0001)
  {
    type metadata accessor for Constants();
    uint64_t v18 = swift_getObjCClassFromMetadata();
    id v19 = objc_msgSend(self, sel_bundleForClass_, v18);
    id v20 = objc_msgSend(v19, sel_bundleIdentifier);

    if (v20)
    {
      sub_2347EE620();
    }
    sub_2346A9D9C(0, (unint64_t *)&qword_2687AD270);
    sub_2347EEAF0();
    sub_2347EE380();
    uint64_t v84 = sub_2347EE350();
    os_log_type_t v85 = sub_2347EE960();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v86 = 0;
      _os_log_impl(&dword_23468B000, v84, v85, "Should not interpolate edges with a 1.0 percentage", v86, 2u);
      MEMORY[0x237DC8070](v86, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v97);
    swift_bridgeObjectRetain();
    return a2;
  }
  uint64_t v27 = 0;
  uint64_t v95 = MEMORY[0x263F8EE80];
  size_t v98 = (void (**)(char *, uint64_t))(v6 + 8);
  long long v91 = "nBorder";
  *(void *)&long long v15 = 136315138;
  long long v94 = v15;
  uint64_t v92 = MEMORY[0x263F8EE58] + 8;
  uint64_t v28 = v97;
  uint64_t v96 = a2;
  while (1)
  {
    unsigned __int8 v29 = byte_26E76FBE0[v27 + 32];
    if (!*(void *)(a1 + 16) || (unint64_t v30 = sub_2347BFCB4(byte_26E76FBE0[v27 + 32]), (v31 & 1) == 0))
    {
      type metadata accessor for Constants();
      uint64_t v55 = swift_getObjCClassFromMetadata();
      id v56 = objc_msgSend(self, sel_bundleForClass_, v55);
      id v57 = objc_msgSend(v56, sel_bundleIdentifier);

      if (v57)
      {
        sub_2347EE620();
      }
      sub_2346A9D9C(0, (unint64_t *)&qword_2687AD270);
      sub_2347EEAF0();
      sub_2347EE380();
      float v58 = sub_2347EE350();
      os_log_type_t v59 = sub_2347EE960();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        uint64_t v107 = v61;
        *(_DWORD *)uint64_t v60 = v94;
        LOBYTE(v103) = v29;
        uint64_t v62 = sub_2347EE690();
        *(void *)(v60 + 4) = sub_234775704(v62, v63, &v107);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23468B000, v58, v59, "Missing edge on %s side", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy();
        uint64_t v64 = v61;
        a2 = v96;
        MEMORY[0x237DC8070](v64, -1, -1);
        MEMORY[0x237DC8070](v60, -1, -1);
      }

      (*v98)(v11, v28);
      goto LABEL_13;
    }
    if (!*(void *)(a2 + 16)
      || (uint64_t v32 = *(void *)(a1 + 56) + 40 * v30,
          uint64_t v33 = *(void *)v32,
          char v34 = *(unsigned char *)(v32 + 8),
          long long v90 = *(_OWORD *)(v32 + 16),
          int v35 = *(_DWORD *)(v32 + 32),
          unint64_t v36 = sub_2347BFCB4(v29),
          (v38 & 1) == 0))
    {
      type metadata accessor for Constants();
      uint64_t v65 = swift_getObjCClassFromMetadata();
      id v66 = objc_msgSend(self, sel_bundleForClass_, v65);
      id v67 = objc_msgSend(v66, sel_bundleIdentifier);

      if (v67)
      {
        sub_2347EE620();
      }
      uint64_t v28 = v97;
      uint64_t v68 = v93;
      sub_2346A9D9C(0, (unint64_t *)&qword_2687AD270);
      sub_2347EEAF0();
      sub_2347EE380();
      uint64_t v69 = sub_2347EE350();
      os_log_type_t v70 = sub_2347EE960();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        uint64_t v107 = v72;
        *(_DWORD *)uint64_t v71 = v94;
        LOBYTE(v103) = v29;
        uint64_t v73 = sub_2347EE690();
        *(void *)(v71 + 4) = sub_234775704(v73, v74, &v107);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23468B000, v69, v70, "Missing edge on %s side", (uint8_t *)v71, 0xCu);
        swift_arrayDestroy();
        uint64_t v75 = v72;
        a2 = v96;
        MEMORY[0x237DC8070](v75, -1, -1);
        MEMORY[0x237DC8070](v71, -1, -1);
      }

      (*v98)(v68, v28);
      goto LABEL_13;
    }
    uint64_t v39 = *(void *)(a2 + 56) + 40 * v36;
    uint64_t v40 = *(void *)v39;
    char v41 = *(unsigned char *)(v39 + 8);
    LODWORD(v37) = *(_DWORD *)(v39 + 32);
    __n128 v103 = (void *)v33;
    char v104 = v34;
    long long v105 = v90;
    int v106 = v35;
    uint64_t v99 = v40;
    char v100 = v41;
    long long v101 = *(_OWORD *)(v39 + 16);
    int v102 = LODWORD(v37);
    *(float *)&double v37 = a3;
    sub_2346A9790((uint64_t *)&v103, &v99, (uint64_t)&v107, v37);
    uint64_t v42 = v107;
    char v43 = v108;
    uint64_t v89 = v109;
    *(void *)&long long v90 = v110;
    int v44 = v111;
    uint64_t v45 = v95;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    __n128 v103 = (void *)v45;
    unint64_t v48 = sub_2347BFCB4(v29);
    uint64_t v49 = *(void *)(v45 + 16);
    BOOL v50 = (v47 & 1) == 0;
    uint64_t v51 = v49 + v50;
    if (__OFADD__(v49, v50)) {
      break;
    }
    char v52 = v47;
    if (*(void *)(v45 + 24) >= v51)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_2347D5BCC();
      }
    }
    else
    {
      sub_2347CF710(v51, isUniquelyReferenced_nonNull_native);
      unint64_t v53 = sub_2347BFCB4(v29);
      if ((v52 & 1) != (v54 & 1)) {
        goto LABEL_44;
      }
      unint64_t v48 = v53;
    }
    a2 = v96;
    simd_float4 v76 = v103;
    uint64_t v95 = (uint64_t)v103;
    if (v52)
    {
      uint64_t v77 = v103[7] + 40 * v48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v77 = v42;
      *(unsigned char *)(v77 + 8) = v43;
      uint64_t v78 = v90;
      *(void *)(v77 + 16) = v89;
      *(void *)(v77 + 24) = v78;
      *(_DWORD *)(v77 + 32) = v44;
    }
    else
    {
      v103[(v48 >> 6) + 8] |= 1 << v48;
      *(unsigned char *)(v76[6] + v48) = v29;
      uint64_t v79 = v76[7] + 40 * v48;
      *(void *)uint64_t v79 = v42;
      *(unsigned char *)(v79 + 8) = v43;
      uint64_t v80 = v90;
      *(void *)(v79 + 16) = v89;
      *(void *)(v79 + 24) = v80;
      *(_DWORD *)(v79 + 32) = v44;
      uint64_t v81 = v76[2];
      BOOL v82 = __OFADD__(v81, 1);
      uint64_t v83 = v81 + 1;
      if (v82) {
        goto LABEL_43;
      }
      v76[2] = v83;
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = v97;
LABEL_13:
    if (++v27 == 4) {
      return v95;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  unint64_t result = sub_2347EF0F0();
  __break(1u);
  return result;
}

uint64_t sub_2346A9790@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)&long long v55 = a4;
  uint64_t v7 = sub_2347EE370();
  v56.i64[0] = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)(*a1 + 16);
  if (v12 == *(void *)(*a2 + 16))
  {
    char v13 = *((unsigned char *)a1 + 8);
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_2346FA354(0, 1, 1, MEMORY[0x263F8EE78]);
      uint64_t v15 = 0;
      unint64_t v16 = v14[2];
      float v17 = *(float *)&v55;
      do
      {
        float32x4_t v18 = *(float32x4_t *)(v10 + 16 * v15 + 32);
        float32x4_t v19 = *(float32x4_t *)(v11 + 32 + 16 * v15);
        unint64_t v20 = v14[3];
        if (v16 >= v20 >> 1)
        {
          float32x4_t v56 = *(float32x4_t *)(v10 + 16 * v15 + 32);
          float32x4_t v54 = v19;
          id v23 = sub_2346FA354((void *)(v20 > 1), v16 + 1, 1, v14);
          float32x4_t v19 = v54;
          float v17 = *(float *)&v55;
          float32x4_t v18 = v56;
          uint64_t v14 = v23;
        }
        float32x4_t v21 = vsubq_f32(v19, v18);
        float v22 = vmuls_lane_f32(v17, v21, 2);
        *(float32x2_t *)v21.f32 = vadd_f32(*(float32x2_t *)v18.f32, vmul_n_f32(*(float32x2_t *)v21.f32, v17));
        v21.f32[2] = v18.f32[2] + v22;
        v21.i32[3] = 0;
        ++v15;
        void v14[2] = v16 + 1;
        *(float32x4_t *)&v14[2 * v16++ + 4] = v21;
      }
      while (v12 != v15);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = (void *)MEMORY[0x263F8EE78];
    }
    LOBYTE(v58) = v13;
    return sub_23472B76C(v14, (char *)&v58, a3);
  }
  else
  {
    uint64_t v24 = a1[2];
    int v53 = *((unsigned __int8 *)a2 + 8);
    v54.i64[0] = a2[2];
    *(void *)&long long v55 = a2[3];
    int v25 = *((_DWORD *)a2 + 8);
    type metadata accessor for Constants();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v27 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    id v28 = objc_msgSend(v27, sel_bundleIdentifier);

    if (v28)
    {
      sub_2347EE620();
    }
    sub_2346A9D9C(0, (unint64_t *)&qword_2687AD270);
    sub_2347EEAF0();
    sub_2347EE380();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v30 = v54.i64[0];
    swift_bridgeObjectRetain_n();
    uint64_t v31 = v55;
    swift_bridgeObjectRetain_n();
    uint64_t v32 = sub_2347EE350();
    os_log_type_t v33 = sub_2347EE960();
    uint64_t v52 = v24;
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v51 = a3;
      uint64_t v36 = v35;
      uint64_t v49 = swift_slowAlloc();
      uint64_t v58 = v49;
      *(_DWORD *)uint64_t v36 = 136315394;
      HIDWORD(v48) = v34;
      swift_bridgeObjectRetain();
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AEC50);
      uint64_t v38 = MEMORY[0x237DC6760](v10, v37);
      uint64_t v50 = v7;
      unint64_t v40 = v39;
      swift_bridgeObjectRelease();
      uint64_t v57 = sub_234775704(v38, v40, &v58);
      sub_2347EEB30();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t v41 = swift_bridgeObjectRetain();
      uint64_t v42 = MEMORY[0x237DC6760](v41, v37);
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      uint64_t v45 = v42;
      uint64_t v30 = v54.i64[0];
      uint64_t v57 = sub_234775704(v45, v44, &v58);
      uint64_t v31 = v55;
      sub_2347EEB30();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23468B000, v32, BYTE4(v48), "\"from\" and \"to\" edges for interpolation have a different number of points (from: %s, to: %s)", (uint8_t *)v36, 0x16u);
      uint64_t v46 = v49;
      swift_arrayDestroy();
      MEMORY[0x237DC8070](v46, -1, -1);
      uint64_t v47 = v36;
      a3 = v51;
      MEMORY[0x237DC8070](v47, -1, -1);

      (*(void (**)(char *, uint64_t))(v56.i64[0] + 8))(v9, v50);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v56.i64[0] + 8))(v9, v7);
    }
    *(void *)a3 = v11;
    *(unsigned char *)(a3 + 8) = v53;
    *(void *)(a3 + 16) = v30;
    *(void *)(a3 + 24) = v31;
    *(_DWORD *)(a3 + 32) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_2346A9D40()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Easing()
{
  return self;
}

float32x2_t sub_2346A9D78(float32x4_t a1, float32x4_t a2, float a3)
{
  return vadd_f32(*(float32x2_t *)a1.f32, vmul_n_f32((float32x2_t)*(_OWORD *)&vsubq_f32(a2, a1), a3));
}

uint64_t sub_2346A9D9C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

float32x2_t sub_2346A9DD8(float32x2_t a1, float32x2_t a2, float a3)
{
  float32x2_t v4 = a1;
  float32x2_t v5 = vmul_f32(a1, a2);
  int32x2_t v6 = (int32x2_t)vmul_f32(v4, v4);
  int32x2_t v7 = (int32x2_t)vmul_f32(a2, a2);
  float32x2_t v8 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v6, v7), (float32x2_t)vzip2_s32(v6, v7)));
  float v9 = vdiv_f32(vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1)), vmul_lane_f32(v8, v8, 1)).f32[0];
  if (v9 < 0.0) {
    float v9 = 0.0;
  }
  float v10 = acosf(fminf(v9, 1.0));
  float v11 = sinf(v10);
  if (fabsf(v11) >= 0.00000011921)
  {
    float v13 = sinf((float)(1.0 - a3) * v10);
    float v14 = v10 * a3;
    float v18 = v13 / v11;
    float v15 = sinf(v14) / v11;
    float32x2_t v12 = vmul_n_f32(v4, v18);
    float32x2_t v4 = vmul_n_f32(a2, v15);
  }
  else
  {
    float32x2_t v12 = vmul_n_f32(vsub_f32(a2, v4), a3);
  }
  return vadd_f32(v12, v4);
}

uint64_t sub_2346A9EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScanItemStrut();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2346A9F28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346A9F90(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2346A9FF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_2346AA004(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_2346AA018(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_2346AA02C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_2346AA040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_2346AA054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

_DWORD *sub_2346AA07C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_2346AA090(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_2346AA0A4(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_2346AA0B8(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

void sub_2346AA0CC(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_2346AA0D8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2346AA0EC()
{
  type metadata accessor for WallPerimeterManager();
  uint64_t v0 = swift_allocObject();
  type metadata accessor for HullUtility();
  uint64_t result = swift_allocObject();
  *(void *)(v0 + 16) = result;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  qword_2687BDE38 = v0;
  return result;
}

void sub_2346AA144(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v41 = sub_2347ED5C0();
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  unint64_t v40 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  unint64_t v8 = *a1 & 0xC000000000000001;
  if (v8) {
    uint64_t v9 = sub_2347EECB0();
  }
  else {
    uint64_t v9 = *(void *)(v7 + 16);
  }
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (!v9)
  {
LABEL_23:
    *a2 = v10;
    return;
  }
  uint64_t v46 = MEMORY[0x263F8EE78];
  sub_23474578C(0, v9 & ~(v9 >> 63), 0);
  if (v8)
  {
    uint64_t v11 = sub_2347EEC60();
    char v13 = 1;
  }
  else
  {
    uint64_t v11 = sub_234754BA4(v7);
    char v13 = v14 & 1;
  }
  uint64_t v43 = v11;
  uint64_t v44 = v12;
  char v45 = v13;
  if ((v9 & 0x8000000000000000) == 0)
  {
    int v34 = a2;
    uint64_t v35 = v2;
    float v15 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v7 < 0) {
      uint64_t v16 = v7;
    }
    uint64_t v38 = v5;
    uint64_t v39 = v16;
    uint64_t v36 = v5 + 32;
    unint64_t v37 = v8;
    do
    {
      while (1)
      {
        uint64_t v28 = sub_234754918(v43, v44, v45, v7);
        (*v15)(v40, v28 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_uuid, v41);
        swift_release();
        uint64_t v29 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23474578C(0, *(void *)(v29 + 16) + 1, 1);
          uint64_t v29 = v46;
        }
        unint64_t v31 = *(void *)(v29 + 16);
        unint64_t v30 = *(void *)(v29 + 24);
        if (v31 >= v30 >> 1)
        {
          sub_23474578C(v30 > 1, v31 + 1, 1);
          uint64_t v29 = v46;
        }
        *(void *)(v29 + 16) = v31 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v29+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v31, v40, v41);
        uint64_t v46 = v29;
        if (v8) {
          break;
        }
        uint64_t v17 = v43;
        uint64_t v18 = v44;
        char v19 = v45;
        uint64_t v20 = v7;
        int64_t v21 = sub_234754834(v43, v44, v45, v7);
        uint64_t v23 = v22;
        uint64_t v24 = v15;
        char v26 = v25;
        sub_2346AAD48(v17, v18, v19);
        uint64_t v43 = v21;
        uint64_t v44 = v23;
        uint64_t v7 = v20;
        unint64_t v8 = v37;
        uint64_t v5 = v38;
        char v27 = v26 & 1;
        float v15 = v24;
        char v45 = v27;
        if (!--v9) {
          goto LABEL_22;
        }
      }
      if ((v45 & 1) == 0) {
        goto LABEL_25;
      }
      if (sub_2347EEC80()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC828);
      uint64_t v32 = (void (*)(unsigned char *, void))sub_2347EE8F0();
      sub_2347EED00();
      v32(v42, 0);
      --v9;
    }
    while (v9);
LABEL_22:
    sub_2346AAD48(v43, v44, v45);
    uint64_t v10 = v46;
    a2 = v34;
    goto LABEL_23;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t sub_2346AA494()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WallPerimeterManager()
{
  return self;
}

uint64_t sub_2346AA4F0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2347ED5C0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v14 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v73 = (float *)((char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v76 = MEMORY[0x263F8EE78];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  uint64_t v17 = result;
  uint64_t v18 = *(void *)(result + 16);
  if (v18)
  {
    unint64_t v67 = result + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v72 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    char v19 = (void (**)(uint64_t, char *, uint64_t))(v11 + 32);
    unint64_t v20 = 0;
    int v66 = (a2 >> 1) & 1;
    long long v58 = xmmword_2347F19A0;
    long long v68 = xmmword_2347F19B0;
    unsigned int v62 = a2;
    uint64_t v61 = v14;
    uint64_t v60 = result;
    uint64_t v59 = v18;
    while (v20 < *(void *)(v17 + 16))
    {
      int64_t v21 = v73;
      sub_2346AABC0(v67 + *(void *)(v14 + 72) * v20, (uint64_t)v73);
      long long v22 = *((_OWORD *)v21 + 1);
      float v23 = COERCE_FLOAT(*((void *)v21 + 3));
      if (v23 <= 0.0) {
        int v24 = 1;
      }
      else {
        int v24 = v66;
      }
      if (v24 == 1 && (v23 != 0.0) | a2 & 1)
      {
        unint64_t v65 = v20;
        float v25 = vmuls_lane_f32(-0.5, *(float32x2_t *)&v22, 1);
        char v26 = v73;
        float v27 = v25 * v73[12];
        float v28 = v25 * v73[13];
        float v29 = v25 * v73[14];
        float v30 = 0.5 * *(float *)&v22;
        float v31 = v30 * v73[8];
        float v32 = v30 * v73[9];
        float v33 = v30 * v73[10];
        __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
        int v34 = (_OWORD *)swift_allocObject();
        char v35 = 0;
        uint64_t v36 = 0;
        v34[1] = v58;
        float v37 = v26[20];
        float v38 = v26[21];
        float v39 = v26[22];
        HIDWORD(v40) = 0;
        *(float *)&long long v40 = v27 + (float)(v37 - v31);
        *((float *)&v40 + 1) = v28 + (float)(v38 - v32);
        *((float *)&v40 + 2) = v29 + (float)(v39 - v33);
        v34[2] = v40;
        uint64_t v71 = v34 + 2;
        *(float *)&long long v41 = v27 + (float)(v31 + v37);
        *((float *)&v41 + 1) = v28 + (float)(v32 + v38);
        *((void *)&v41 + 1) = COERCE_UNSIGNED_INT(v29 + (float)(v33 + v39));
        uint64_t v64 = v34;
        v34[3] = v41;
        os_log_type_t v70 = (char *)v26 + *(int *)(v63 + 44);
        uint64_t v42 = (uint64_t)v26 + *(int *)(v63 + 52);
        uint64_t v69 = *v72;
        while (1)
        {
          char v43 = v35;
          uint64_t v44 = (const float *)&v71[v36];
          uint64_t v45 = *(_OWORD *)vld2_f32(v44).val;
          v69(v13, v70, v10);
          sub_2346AAC24(v42, (uint64_t)v9);
          uint64_t v46 = type metadata accessor for CapturedRoom.Surface.Curve(0);
          BOOL v47 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v9, 1, v46) != 1;
          sub_2346AAC8C((uint64_t)v9);
          BOOL v48 = v73[6] > 0.0;
          type metadata accessor for HullPointUUID();
          uint64_t v49 = swift_allocObject();
          (*v19)(v49 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_uuid, v13, v10);
          *(unsigned char *)(v49 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_type) = v47;
          *(unsigned char *)(v49 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_hasThickness) = v48;
          __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v68;
          *(void *)(inited + 32) = v49;
          unint64_t v75 = inited;
          sub_2347EE7F0();
          unint64_t v51 = v75;
          if (v75 >> 62)
          {
            swift_retain();
            swift_bridgeObjectRetain();
            uint64_t v54 = sub_2347EEEC0();
            swift_bridgeObjectRelease();
            if (!v54)
            {
LABEL_15:
              unint64_t v53 = MEMORY[0x263F8EE88];
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t v52 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_retain();
            if (!v52) {
              goto LABEL_15;
            }
          }
          unint64_t v53 = sub_234775D6C(v51);
LABEL_16:
          swift_bridgeObjectRelease();
          long long v55 = (objc_class *)type metadata accessor for HullPoint();
          float32x4_t v56 = (char *)objc_allocWithZone(v55);
          *(void *)&v56[OBJC_IVAR____TtC8RoomPlan9HullPoint_position] = v45;
          *(void *)&v56[OBJC_IVAR____TtC8RoomPlan9HullPoint_uuids] = v53;
          v74.receiver = v56;
          v74.super_class = v55;
          id v57 = objc_msgSendSuper2(&v74, sel_init);
          MEMORY[0x237DC6730]();
          if (*(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();

          swift_release();
          char v35 = 1;
          uint64_t v36 = 1;
          if (v43)
          {
            swift_setDeallocating();
            swift_deallocClassInstance();
            LOBYTE(a2) = v62;
            uint64_t v14 = v61;
            uint64_t v17 = v60;
            uint64_t v18 = v59;
            unint64_t v20 = v65;
            break;
          }
        }
      }
      ++v20;
      uint64_t result = sub_2346AACEC((uint64_t)v73);
      if (v20 == v18)
      {
        swift_bridgeObjectRelease();
        return v76;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_2346AAB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = sub_2346AA4F0(a1, 3u, a2, a3);
  uint64_t v4 = sub_2347B58A4(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_2346AABC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CapturedRoom.Surface(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2346AAC24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2346AAC8C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2346AACEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CapturedRoom.Surface(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2346AAD48(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_2346AAD54()
{
  if (*(unsigned char *)(v0 + 16))
  {
    unint64_t v2 = 0;
    sub_2347EED50();
    sub_2347EE6F0();
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    sub_2347EE6F0();
    sub_2347EF070();
  }
  else
  {
    sub_2347EED50();
    swift_bridgeObjectRelease();
    unint64_t v2 = 0xD000000000000013;
    sub_2347EE690();
  }
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  sub_2347EE6F0();
  return v2;
}

uint64_t (*sub_2346AAF00())()
{
  return j__swift_endAccess;
}

uint64_t sub_2346AAF60(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, simd_float4 a12, simd_float4 a13, __n128 a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = v18;
  int v172 = a8;
  uint64_t v174 = a7;
  uint64_t v168 = a6;
  uint64_t v207 = a5;
  int v170 = a4;
  int v198 = a3;
  __n128 v171 = a14;
  simd_float4 v209 = a13;
  simd_float4 v204 = a12;
  float32x4_t v205 = a10;
  simd_float4 v206 = (simd_float4)a11;
  __n128 v196 = (__n128)a9;
  uint64_t v201 = a2;
  uint64_t v202 = a1;
  v208.i64[0] = a18;
  uint64_t v199 = a17;
  uint64_t v200 = a16;
  int v173 = a15;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F8);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v189 = (uint64_t)v160 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v188 = (uint64_t)v160 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v183 = (uint64_t)v160 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v182 = (uint64_t)v160 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v28 - 8);
  v181 = (void *)((char *)v160 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v30);
  uint64_t v197 = (uint64_t)v160 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v177 = (uint64_t)v160 - v33;
  MEMORY[0x270FA5388](v34);
  v178 = (void *)((char *)v160 - v35);
  MEMORY[0x270FA5388](v36);
  uint64_t v179 = (uint64_t)v160 - v37;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
  MEMORY[0x270FA5388](v38 - 8);
  v194 = (__n128 *)((char *)v160 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = sub_2347ED540();
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  v175 = (char *)v160 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_2347EE370();
  uint64_t v192 = *(void *)(v43 - 8);
  uint64_t v193 = v43;
  MEMORY[0x270FA5388](v43);
  v167 = (char *)v160 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v46 = MEMORY[0x270FA5388](v45);
  v166 = (char *)v160 - v47;
  uint64_t v176 = v41;
  BOOL v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v41 + 56);
  v48(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime, 1, 1, v40, v46);
  v180 = (void *)v40;
  v160[0] = v48;
  v160[1] = v41 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_fadeOutAnimationTime, 1, 1, v40);
  uint64_t v49 = (void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve);
  uint64_t v50 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  uint64_t v203 = *(void *)(v50 - 8);
  uint64_t v52 = v203 + 56;
  unint64_t v51 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v203 + 56);
  v190 = v51;
  v51(v49, 1, 1, v50);
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation) = xmmword_2347F19F0;
  v51((void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve), 1, 1, v50);
  uint64_t v53 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut;
  uint64_t v54 = type metadata accessor for ScanItemStrut();
  uint64_t v55 = *(void *)(v54 - 8);
  float32x4_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
  uint64_t v57 = v55 + 56;
  v56(v53, 1, 1, v54);
  v56(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut, 1, 1, v54);
  *(unsigned char *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = 4;
  uint64_t v58 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
  uint64_t v59 = type metadata accessor for AnimationGraph();
  uint64_t v184 = *(void *)(v59 - 8);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
  uint64_t v187 = v59;
  v161 = v60;
  uint64_t v162 = v184 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v60)(v58, 1, 1);
  *(unsigned char *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory) = 4;
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_floorExtensionFactor) = 1065982362;
  uint64_t v61 = OBJC_IVAR____TtC8RoomPlan8ScanItem_completedSides;
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedSides) = 12;
  uint64_t v169 = OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners;
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners) = 0;
  v51((void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationCurve), 1, 1, v50);
  v51((void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationCurve), 1, 1, v50);
  v56(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut, 1, 1, v54);
  v56(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut, 1, 1, v54);
  unsigned int v62 = (void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions);
  *unsigned int v62 = 0;
  v62[1] = 0;
  uint64_t v195 = v50;
  uint64_t v191 = v52;
  v51((void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseCurve), 1, 1, v50);
  v56(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseLeftStrut, 1, 1, v54);
  v164 = v56;
  uint64_t v165 = v54;
  uint64_t v163 = v57;
  v56(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseRightStrut, 1, 1, v54);
  uint64_t v63 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
  uint64_t v64 = sub_2347ED5C0();
  uint64_t v185 = *(void *)(v64 - 8);
  uint64_t v186 = v64;
  (*(void (**)(uint64_t, uint64_t))(v185 + 16))(v63, v202);
  sub_2346A7BCC(v201, v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t *)&unk_2687AEB70);
  char v65 = v170;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) = v198;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category) = v65;
  *(__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_color) = v171;
  *(_DWORD *)(v19 + v61) = v172 | 0xC;
  uint64_t v66 = v208.i64[0];
  if (v208.i64[0]) {
    int v67 = *(_DWORD *)(v208.i64[0] + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners);
  }
  else {
    int v67 = 0;
  }
  unsigned int v68 = v67 | v173;
  uint64_t v69 = v174;
  if (v65 == 20)
  {
    int v70 = (v68 >> 1) & 0x11 | (2 * v68) & 0x88;
    goto LABEL_8;
  }
  if (v65 == 18)
  {
    int v70 = 16 * (v68 & 0xF);
LABEL_8:
    *(_DWORD *)(v19 + v169) = v70 | v68;
    goto LABEL_11;
  }
  *(_DWORD *)(v19 + v169) = v68;
  if (!v65)
  {
    *(float32x2_t *)v71.f32 = vmul_f32((float32x2_t)v196.n128_u64[0], (float32x2_t)vdup_n_s32(0x3F89999Au));
    v71.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(1.075, (float32x4_t)v196, 2));
    __n128 v196 = (__n128)v71;
  }
LABEL_11:
  uint64_t v72 = v168;
  uint64_t v73 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform;
  float32x4_t v74 = (float32x4_t)v206;
  *(float32x4_t *)uint64_t v73 = v205;
  *(float32x4_t *)(v73 + 16) = v74;
  simd_float4 v75 = v209;
  *(simd_float4 *)(v73 + 32) = v204;
  *(simd_float4 *)(v73 + 48) = v75;
  *(__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions) = v196;
  sub_2346A7BCC(v207, v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, (uint64_t *)&unk_2687AE190);
  sub_2346A7BCC(v200, v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawLeftStrut, &qword_2687AC800);
  sub_2346A7BCC(v199, v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawRightStrut, &qword_2687AC800);
  unint64_t v76 = sub_2346B04B0(v69, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v77 = (uint64_t)v194;
  uint64_t v78 = v180;
  *(void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawScanItemEdges) = v76;
  swift_bridgeObjectRetain();
  uint64_t v79 = v175;
  sub_2347ED520();
  (*(void (**)(uint64_t, char *, void *))(v176 + 32))(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_bodyStartTime, v79, v78);
  if (v66)
  {
    uint64_t v80 = v66 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime;
    swift_beginAccess();
    sub_2346A7BCC(v80, v77, &qword_2687AC8F0);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, void *))v160[0])(v77, 1, 1, v78);
  }
  uint64_t v81 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime;
  swift_beginAccess();
  sub_2346B190C(v77, v81, &qword_2687AC8F0);
  swift_endAccess();
  if (v66)
  {
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition) = *(_OWORD *)(v66
                                                                                         + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition);
    __n128 v82 = *(__n128 *)(v66 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
    v194 = (__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
    __n128 *v194 = v82;
    uint64_t v83 = v66 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve;
    swift_beginAccess();
    uint64_t v84 = (__n128 (*)(void, void, void))v178;
    sub_2346A7BCC(v83, (uint64_t)v178, (uint64_t *)&unk_2687AE190);
    uint64_t v85 = v195;
  }
  else
  {
    simd_float4 v86 = v209;
    v86.i32[3] = 0;
    *(simd_float4 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition) = v86;
    v194 = (__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
    __n128 *v194 = v196;
    uint64_t v84 = (__n128 (*)(void, void, void))v178;
    uint64_t v85 = v195;
    v190(v178, 1, 1, v195);
  }
  uint64_t v87 = v177;
  sub_2346A7BCC(v207, v177, (uint64_t *)&unk_2687AE190);
  uint64_t v88 = *(void **)(v203 + 48);
  v203 += 48;
  v178 = v88;
  int v89 = ((uint64_t (*)(__n128 (*)(void, void, void), uint64_t, uint64_t))v88)(v84, 1, v85);
  v180 = 0;
  if (v89 == 1)
  {
    uint64_t v90 = v179;
    sub_2346B1970(v87, v179, (uint64_t *)&unk_2687AE190);
    sub_2346A7C30((uint64_t)v84, (uint64_t *)&unk_2687AE190);
  }
  else
  {
    sub_2346A7C30(v87, (uint64_t *)&unk_2687AE190);
    uint64_t v90 = v179;
    sub_2346B19D4((uint64_t)v84, v179);
    v190((void *)v90, 0, 1, v85);
  }
  uint64_t v91 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve;
  swift_beginAccess();
  sub_2346B190C(v90, v91, (uint64_t *)&unk_2687AE190);
  swift_endAccess();
  uint64_t v92 = v208.i64[0];
  if (v208.i64[0])
  {
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation) = *(_OWORD *)(v208.i64[0]
                                                                                            + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
    uint64_t v93 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceScanItemEdges;
    uint64_t v94 = swift_bridgeObjectRetain();
  }
  else
  {
    v214.columns[0] = (simd_float4)v205;
    v214.columns[1] = v206;
    v214.columns[2] = v204;
    v214.columns[3] = v209;
    *(double *)&long long v95 = simd_quaternion(v214);
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation) = v95;
    uint64_t v94 = swift_bridgeObjectRetain();
    uint64_t v93 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceScanItemEdges;
  }
  *(void *)(v19 + v93) = v94;
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationPosition) = *(_OWORD *)(v19
                                                                                                  + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition);
  *(__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationDimensions) = *v194;
  uint64_t v96 = v197;
  sub_2346A7BCC(v91, v197, (uint64_t *)&unk_2687AE190);
  uint64_t v97 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationCurve;
  swift_beginAccess();
  sub_2346B190C(v96, v97, (uint64_t *)&unk_2687AE190);
  swift_endAccess();
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationOrientation) = *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
  size_t v98 = (float32x2_t *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions);
  if (v92)
  {
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions) = *(_OWORD *)(v92
                                                                                          + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions);
    uint64_t v99 = v92 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
    swift_beginAccess();
    uint64_t v100 = v99;
    uint64_t v101 = (uint64_t)v181;
    sub_2346A7BCC(v100, (uint64_t)v181, (uint64_t *)&unk_2687AE190);
  }
  else
  {
    float32x2_t *v98 = 0;
    v98[1] = 0;
    uint64_t v101 = (uint64_t)v181;
    v190(v181, 1, 1, v195);
  }
  uint64_t v102 = v183;
  uint64_t v103 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
  swift_beginAccess();
  uint64_t v191 = v103;
  sub_2346B190C(v101, v103, (uint64_t *)&unk_2687AE190);
  swift_endAccess();
  if (v92)
  {
    uint64_t v104 = v92 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut;
    swift_beginAccess();
    uint64_t v105 = v104;
    uint64_t v106 = v182;
    sub_2346A7BCC(v105, v182, &qword_2687AC800);
  }
  else
  {
    uint64_t v106 = v182;
    v164(v182, 1, 1, v165);
  }
  uint64_t v107 = (void (*)(void *, uint64_t, uint64_t, uint64_t))(v19
                                                                  + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut);
  swift_beginAccess();
  v190 = v107;
  sub_2346B190C(v106, (uint64_t)v107, &qword_2687AC800);
  swift_endAccess();
  if (v92)
  {
    uint64_t v108 = v92 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut;
    swift_beginAccess();
    sub_2346A7BCC(v108, v102, &qword_2687AC800);
  }
  else
  {
    v164(v102, 1, 1, v165);
  }
  uint64_t v109 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut;
  swift_beginAccess();
  uint64_t v183 = v109;
  sub_2346B190C(v102, v109, &qword_2687AC800);
  swift_endAccess();
  if (v92)
  {
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition) = *(_OWORD *)(v92
                                                                                        + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition);
    uint64_t v110 = (__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation) = *(_OWORD *)(v92
                                                                                           + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
    unint64_t v111 = *(void *)(v92 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseScanItemEdges);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v76 = v111;
  }
  else
  {
    int32x4_t v112 = (int32x4_t)((__n128 (*)(uint64_t, uint64_t, uint64_t))v178)(v207, 1, v195);
    v112.i32[0] = v113;
    v114.i32[0] = 1;
    int8x16_t v115 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v112, v114), 0);
    v215.columns[3] = v209;
    int8x16_t v116 = (int8x16_t)v209;
    v116.i32[3] = 0;
    *(int8x16_t *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition) = vbicq_s8(v116, v115);
    v215.columns[0] = (simd_float4)v205;
    v215.columns[1] = v206;
    v215.columns[2] = v204;
    *(double *)&long long v117 = simd_quaternion(v215);
    uint64_t v110 = (__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
    *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation) = v117;
  }
  uint64_t v118 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseScanItemEdges;
  *(void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseScanItemEdges) = v76;
  uint64_t v119 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition;
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition) = *(_OWORD *)(v19
                                                                                             + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition);
  *(__n128 *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationOrientation) = *v110;
  *(_OWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationDimensions) = *(_OWORD *)v98->f32;
  unint64_t v120 = *(void *)(v19 + v118);
  uint64_t v121 = *(void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawScanItemEdges);
  uint64_t v122 = *(void *)(v121 + 16);
  if (*(void *)(v120 + 16))
  {
    unint64_t v212 = v120;
    uint64_t v124 = v207;
    uint64_t v123 = v208.i64[0];
    if (v122)
    {
      v211 = (char *)v121;
      swift_bridgeObjectRetain();
LABEL_40:
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
    swift_bridgeObjectRetain();
    int v129 = (char *)sub_2346B0B64(v205, (float32x4_t)v206, (__n128)v209, (float32x2_t)v196.n128_u64[0]);
  }
  else
  {
    uint64_t v124 = v207;
    uint64_t v123 = v208.i64[0];
    if (v122)
    {
      *(double *)v125.i64 = MEMORY[0x237DC6930](*(__n128 *)(v19 + v119), *v110, (__n128)xmmword_2347F1A00);
      unint64_t v128 = sub_2346B0B64(v125, v126, v127, *v98);
      v211 = (char *)v121;
      unint64_t v212 = v128;
      goto LABEL_40;
    }
    uint64_t v130 = MEMORY[0x263F8EE78];
    unint64_t v212 = sub_2347AD1BC(MEMORY[0x263F8EE78]);
    int v129 = (char *)sub_2347AD1BC(v130);
  }
  v211 = v129;
LABEL_44:
  uint64_t v131 = &unk_2687BD000;
  int v132 = v180;
  sub_2346B0EE8((uint64_t)&v212, &v211);
  if (v132)
  {
    type metadata accessor for Constants();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v134 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    id v135 = [v134 (SEL)0x1F66C4018];

    uint64_t v203 = v119;
    if (v135)
    {
      sub_2347EE620();
    }
    uint64_t v136 = v167;
    sub_2346A7A4C();
    sub_2347EEAF0();
    sub_2347EE380();
    id v137 = v132;
    id v138 = v132;
    uint64_t v139 = sub_2347EE350();
    os_log_type_t v140 = sub_2347EE960();
    if (os_log_type_enabled(v139, v140))
    {
      int v141 = (uint8_t *)swift_slowAlloc();
      uint64_t v142 = swift_slowAlloc();
      v213[0] = v142;
      *(_DWORD *)int v141 = 136315138;
      swift_getErrorValue();
      uint64_t v143 = sub_2347EF100();
      uint64_t v210 = sub_234775704(v143, v144, v213);
      uint64_t v124 = v207;
      sub_2347EEB30();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23468B000, v139, v140, "%s", v141, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x237DC8070](v142, -1, -1);
      long long v145 = v141;
      uint64_t v131 = (void *)&unk_2687BD000;
      MEMORY[0x237DC8070](v145, -1, -1);

      (*(void (**)(char *, uint64_t))(v192 + 8))(v167, v193);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v192 + 8))(v136, v193);
    }
    uint64_t v123 = v208.i64[0];
    uint64_t v119 = v203;
  }
  *(void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationScanItemEdges) = v212;
  *(void *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_finalAnimationScanItemEdges) = v211;
  uint64_t v146 = v197;
  sub_2346A7BCC(v191, v197, (uint64_t *)&unk_2687AE190);
  uint64_t v147 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationCurve;
  swift_beginAccess();
  sub_2346B190C(v146, v147, (uint64_t *)&unk_2687AE190);
  swift_endAccess();
  uint64_t v148 = v188;
  sub_2346A7BCC((uint64_t)v190, v188, &qword_2687AC800);
  uint64_t v149 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut;
  swift_beginAccess();
  sub_2346B190C(v148, v149, &qword_2687AC800);
  swift_endAccess();
  sub_2346A7BCC(v183, v148, &qword_2687AC800);
  uint64_t v150 = v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut;
  swift_beginAccess();
  sub_2346B190C(v148, v150, &qword_2687AC800);
  swift_endAccess();
  if (v123)
  {
    *(unsigned char *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory) = *(unsigned char *)(v123
                                                                                        + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory);
    uint64_t v151 = v123 + v131[482];
    swift_beginAccess();
    uint64_t v152 = v189;
    sub_2346A7BCC(v151, v189, &qword_2687AC8F8);
    uint64_t v153 = v187;
  }
  else
  {
    *(unsigned char *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory) = 4;
    uint64_t v152 = v189;
    uint64_t v153 = v187;
    v161(v189, 1, 1, v187);
  }
  uint64_t v154 = v19 + v131[482];
  swift_beginAccess();
  sub_2346B190C(v152, v154, &qword_2687AC8F8);
  swift_endAccess();
  float32x4_t v208 = *(float32x4_t *)(v19 + v119);
  v216.columns[0] = (simd_float4)v205;
  v216.columns[1] = v206;
  v216.columns[2] = v204;
  v216.columns[3] = v209;
  simd_float4x4 v217 = __invert_f4(v216);
  char v155 = v198;
  int v156 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48);
  unint64_t v157 = vsubq_f32(vaddq_f32((float32x4_t)v217.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v217.columns[0], v208.f32[0]), (float32x4_t)v217.columns[1], *(float32x2_t *)v208.f32, 1), (float32x4_t)v217.columns[2], v208, 2)), vaddq_f32((float32x4_t)v217.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v217.columns[0], v209.f32[0]), (float32x4_t)v217.columns[1], *(float32x2_t *)v209.f32, 1),
               (float32x4_t)v217.columns[2],
               (float32x4_t)v209,
               2))).u64[0];
  if (v198 == 3)
  {
    if (*((float *)&v157 + 1) > 0.0) {
      char v155 = 0;
    }
    *(unsigned char *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = v155;
    swift_beginAccess();
    if (!(*v156)(v154, 1, v153)) {
      sub_234700D08(*(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners), *v194);
    }
  }
  else
  {
    if (*(float *)&v157 <= 0.0) {
      char v158 = 1;
    }
    else {
      char v158 = 2;
    }
    *(unsigned char *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = v158;
    swift_beginAccess();
    if (!(*v156)(v154, 1, v153)) {
      sub_234700FBC(*(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedSides), *v194);
    }
  }
  swift_endAccess();
  swift_release();
  sub_2346A7C30(v199, &qword_2687AC800);
  sub_2346A7C30(v200, &qword_2687AC800);
  sub_2346A7C30(v201, (uint64_t *)&unk_2687AEB70);
  (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v202, v186);
  sub_2346A7C30(v124, (uint64_t *)&unk_2687AE190);
  return v19;
}

uint64_t sub_2346AC7CC(unint64_t a1, float a2)
{
  float v96 = a2;
  uint64_t v4 = sub_2347ED5C0();
  int64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v95 - v9;
  uint64_t v108 = sub_2346AD054(*(float32x4_t *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform), *(float32x4_t *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16), *(float32x4_t *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 32), *(__n128 *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48), *(float32x4_t *)((char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions), 0.16);
  if (a1 >> 62) {
    goto LABEL_89;
  }
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v11)
  {
    unint64_t v12 = a1;
    a1 = 0;
    char v13 = &unk_2687BD000;
    uint64_t v14 = (char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
    unint64_t v114 = v12 & 0xC000000000000001;
    uint64_t v99 = v12 & 0xFFFFFFFFFFFFFF8;
    unint64_t v98 = v12 + 32;
    int32x4_t v112 = (void (**)(char *, uint64_t))(v5 + 8);
    unsigned __int32 v113 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v97 = v108 + 2;
    unint64_t v109 = v12;
    uint64_t v102 = v4;
    uint64_t v101 = v7;
    uint64_t v100 = v10;
    uint64_t v111 = v11;
    uint64_t v103 = (char *)v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
    while (v114)
    {
      uint64_t v15 = MEMORY[0x237DC6CF0](a1, v109);
      BOOL v16 = __OFADD__(a1++, 1);
      if (v16) {
        goto LABEL_87;
      }
LABEL_12:
      uint64_t v17 = *v113;
      (*v113)(v10, v15 + v13[456], v4);
      v17(v7, (uint64_t)v14, v4);
      int64_t v5 = sub_2347ED570();
      unint64_t v2 = *v112;
      (*v112)(v7, v4);
      v2(v10, v4);
      if (v5)
      {
        swift_release();
      }
      else
      {
        simd_float4x4 v116 = __invert_f4(*(simd_float4x4 *)(v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform));
        int64_t v18 = v108[1].i64[0];
        uint64_t v19 = v15;
        if (v18)
        {
          uint64_t v20 = (char *)MEMORY[0x263F8EE78];
          int8x16_t v115 = (float32x4_t *)MEMORY[0x263F8EE78];
          float32x4_t v110 = (float32x4_t)v116.columns[0];
          simd_float4 v106 = v116.columns[1];
          simd_float4 v105 = v116.columns[2];
          simd_float4 v104 = v116.columns[3];
          sub_23473D210(0, v18, 0);
          float32x4_t v21 = (float32x4_t)v104;
          float32x4_t v22 = (float32x4_t)v105;
          float32x4_t v24 = (float32x4_t)v106;
          float32x4_t v23 = v107;
          float32x4_t v25 = v110;
          uint64_t v26 = v115;
          unint64_t v27 = v115[1].u64[0];
          uint64_t v28 = v97;
          do
          {
            float32x4_t v29 = *v28;
            int8x16_t v115 = v26;
            unint64_t v30 = v26[1].u64[1];
            int64_t v5 = v27 + 1;
            if (v27 >= v30 >> 1)
            {
              float32x4_t v107 = v23;
              float32x4_t v95 = v29;
              sub_23473D210(v30 > 1, v27 + 1, 1);
              float32x4_t v29 = v95;
              float32x4_t v21 = (float32x4_t)v104;
              float32x4_t v22 = (float32x4_t)v105;
              float32x4_t v24 = (float32x4_t)v106;
              v23.i32[3] = v107.i32[3];
              float32x4_t v25 = v110;
              uint64_t v26 = v115;
            }
            float32x4_t v31 = vaddq_f32(v21, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v29.f32[0]), v24, *(float32x2_t *)v29.f32, 1), v22, v29, 2));
            v31.i32[3] = v23.i32[3];
            v26[1].i64[0] = v5;
            v26[v27 + 2] = v31;
            ++v28;
            ++v27;
            float32x4_t v23 = v31;
            --v18;
          }
          while (v18);
          v110.i64[0] = v19;
          float32x4_t v107 = v31;
        }
        else
        {
          unint64_t v2 = (void (*)(char *, uint64_t))MEMORY[0x263F8EE78];
          int64_t v5 = *(void *)(MEMORY[0x263F8EE78] + 16);
          if (!v5)
          {
            swift_release();
            swift_bridgeObjectRelease_n();
            goto LABEL_85;
          }
          v110.i64[0] = v15;
          uint64_t v26 = (float32x4_t *)MEMORY[0x263F8EE78];
          uint64_t v20 = (char *)MEMORY[0x263F8EE78];
        }
        uint64_t v32 = v26 + 2;
        int8x16_t v115 = (float32x4_t *)v20;
        sub_234745618(0, v5, 0);
        uint64_t v33 = 0;
        uint64_t v34 = v115;
        uint64_t v35 = v115[1].i64[0];
        uint64_t v36 = v35;
        do
        {
          uint64_t v37 = v36;
          simd_float4 v38 = (simd_float4)v32[v33];
          int8x16_t v115 = v34;
          unint64_t v39 = v34[1].u64[1];
          if (v35 + v33 >= v39 >> 1)
          {
            simd_float4 v106 = v38;
            sub_234745618(v39 > 1, v35 + v33 + 1, 1);
            v38.i32[0] = v106.i32[0];
            uint64_t v34 = v115;
          }
          uint64_t v40 = v33 + 1;
          v34[1].i64[0] = v35 + v33 + 1;
          v34[2].i32[v35 + v33] = v38.i32[0];
          uint64_t v36 = v37 + 1;
          uint64_t v33 = v40;
        }
        while (v5 != v40);
        float v41 = v34[2].f32[0];
        if (v35 + v40 == 1)
        {
          float v45 = v34[2].f32[0];
          uint64_t v49 = (char *)MEMORY[0x263F8EE78];
        }
        else
        {
          uint64_t v42 = &v34[2].i8[4];
          uint64_t v43 = &v34[2].f32[1];
          uint64_t v44 = v37;
          float v45 = v34[2].f32[0];
          do
          {
            float v46 = *v43++;
            float v47 = v46;
            if (v46 < v45) {
              float v45 = v47;
            }
            --v44;
          }
          while (v44);
          uint64_t v48 = 0;
          uint64_t v49 = (char *)MEMORY[0x263F8EE78];
          do
          {
            if (v41 < *(float *)&v42[4 * v48]) {
              float v41 = *(float *)&v42[4 * v48];
            }
            ++v48;
          }
          while (v37 != v48);
        }
        swift_bridgeObjectRelease();
        int8x16_t v115 = (float32x4_t *)v49;
        sub_234745618(0, v5, 0);
        uint64_t v50 = 0;
        unint64_t v51 = v115;
        uint64_t v52 = v115[1].i64[0];
        uint64_t v53 = v52;
        do
        {
          uint64_t v54 = v53;
          simd_float4 v55 = (simd_float4)v32[v50];
          int8x16_t v115 = v51;
          unint64_t v56 = v51[1].u64[1];
          if (v52 + v50 >= v56 >> 1)
          {
            simd_float4 v106 = v55;
            sub_234745618(v56 > 1, v52 + v50 + 1, 1);
            v55.i32[1] = v106.i32[1];
            unint64_t v51 = v115;
          }
          uint64_t v57 = v50 + 1;
          v51[1].i64[0] = v52 + v50 + 1;
          v51[2].i32[v52 + v50] = v55.i32[1];
          uint64_t v53 = v54 + 1;
          uint64_t v50 = v57;
        }
        while (v5 != v57);
        float v58 = v51[2].f32[0];
        if (v52 + v57 == 1)
        {
          float v62 = v51[2].f32[0];
          uint64_t v4 = v102;
          int v67 = (char *)MEMORY[0x263F8EE78];
          uint64_t v63 = v110.i64[0];
        }
        else
        {
          uint64_t v59 = &v51[2].i8[4];
          uint64_t v60 = &v51[2].f32[1];
          uint64_t v61 = v54;
          float v62 = v51[2].f32[0];
          uint64_t v4 = v102;
          uint64_t v63 = v110.i64[0];
          do
          {
            float v64 = *v60++;
            float v65 = v64;
            if (v64 < v62) {
              float v62 = v65;
            }
            --v61;
          }
          while (v61);
          uint64_t v66 = 0;
          int v67 = (char *)MEMORY[0x263F8EE78];
          do
          {
            if (v58 < *(float *)&v59[4 * v66]) {
              float v58 = *(float *)&v59[4 * v66];
            }
            ++v66;
          }
          while (v54 != v66);
        }
        swift_bridgeObjectRelease();
        int8x16_t v115 = (float32x4_t *)v67;
        sub_234745618(0, v5, 0);
        unint64_t v2 = (void (*)(char *, uint64_t))v115;
        unint64_t v68 = v115[1].u64[0];
        do
        {
          float32x4_t v69 = *v32;
          int8x16_t v115 = (float32x4_t *)v2;
          unint64_t v70 = *((void *)v2 + 3);
          if (v68 >= v70 >> 1)
          {
            float32x4_t v110 = v69;
            sub_234745618(v70 > 1, v68 + 1, 1);
            v69.i32[2] = v110.i32[2];
            unint64_t v2 = (void (*)(char *, uint64_t))v115;
          }
          *((void *)v2 + 2) = v68 + 1;
          *((_DWORD *)v2 + v68 + 8) = v69.i32[2];
          ++v32;
          ++v68;
          --v5;
        }
        while (v5);
        swift_bridgeObjectRelease();
        uint64_t v71 = *((void *)v2 + 2);
        if (!v71)
        {
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v7 = v101;
          uint64_t v10 = v100;
          char v13 = (void *)&unk_2687BD000;
LABEL_85:
          uint64_t v14 = v103;
          goto LABEL_5;
        }
        float v72 = *((float *)v2 + 8);
        uint64_t v73 = v71 - 1;
        uint64_t v7 = v101;
        uint64_t v10 = v100;
        char v13 = (void *)&unk_2687BD000;
        uint64_t v14 = v103;
        if (v73)
        {
          uint64_t v75 = 0;
          float v74 = *((float *)v2 + 8);
          do
          {
            if (*((float *)v2 + v75 + 9) < v74) {
              float v74 = *((float *)v2 + v75 + 9);
            }
            ++v75;
          }
          while (v73 != v75);
          unint64_t v76 = (float *)((char *)v2 + 36);
          do
          {
            float v77 = *v76++;
            float v78 = v77;
            if (v72 < v77) {
              float v72 = v78;
            }
            --v73;
          }
          while (v73);
        }
        else
        {
          float v74 = *((float *)v2 + 8);
        }
        swift_bridgeObjectRelease();
        float32x4_t v110 = *(float32x4_t *)(v63 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions);
        swift_release();
        float v79 = vmuls_lane_f32(0.5, v110, 2);
        float v80 = 0.0 - v79;
        float v81 = (float)(v41 - v45) * v96;
        BOOL v82 = v81 > (float)((float)(0.5 * v110.f32[0]) - v45)
           || v81 > (float)(v41 - (float)(0.0 - (float)(0.5 * v110.f32[0])));
        float v83 = vmuls_lane_f32(0.5, *(float32x2_t *)v110.f32, 1);
        float v84 = 0.0 - v83;
        float v85 = v83 - v62;
        float v86 = (float)(v58 - v62) * v96;
        float v87 = v58 - v84;
        BOOL v89 = v82 || v86 > v85 || v86 > v87;
        float v90 = v79 - v74;
        float v91 = (float)(v72 - v74) * v96;
        if (!v89 && v91 <= v90 && v91 <= (float)(v72 - v80))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 1;
        }
      }
LABEL_5:
      if (a1 == v111) {
        goto LABEL_90;
      }
    }
    if (a1 >= *(void *)(v99 + 16)) {
      goto LABEL_88;
    }
    uint64_t v15 = *(void *)(v98 + 8 * a1);
    swift_retain();
    BOOL v16 = __OFADD__(a1++, 1);
    if (!v16) {
      goto LABEL_12;
    }
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_2347EEEC0();
  }
LABEL_90:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

float32x4_t *sub_2346AD054(float32x4_t a1, float32x4_t a2, float32x4_t a3, __n128 a4, float32x4_t a5, float a6)
{
  if (*(unsigned char *)(v6 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3)
  {
    a4.n128_u32[3] = 0;
    __n128 v58 = a4;
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)a5.f32, (float32x2_t)0x3F0000003F000000);
    v7.i32[2] = vmuls_lane_f32(0.5, a5, 2);
  }
  else
  {
    float v8 = a6 * 0.5;
    a4.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)a4.n128_u64[0], vmul_n_f32(*(float32x2_t *)a3.f32, v8));
    a4.n128_u64[1] = COERCE_UNSIGNED_INT(a4.n128_f32[2] - vmuls_lane_f32(v8, a3, 2));
    __n128 v58 = a4;
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)a5.f32, (float32x2_t)0x3F0000003F000000);
    v7.f32[2] = v8;
  }
  v7.i32[3] = 0;
  float32x2_t v55 = vmul_n_f32(*(float32x2_t *)a1.f32, v7.f32[0]);
  float v59 = vmulq_laneq_f32(v7, a1, 2).f32[0];
  *(float32x2_t *)v9.f32 = v55;
  v9.i64[1] = LODWORD(v59);
  float32x2_t v64 = vmul_lane_f32(*(float32x2_t *)a2.f32, *(float32x2_t *)v7.f32, 1);
  float32x4_t v68 = v9;
  float32x4_t v10 = vmulq_laneq_f32(v7, a2, 2);
  *(float32x2_t *)v11.f32 = v64;
  v11.i64[1] = v10.u32[1];
  float32x4_t v57 = v11;
  float v12 = v10.f32[1];
  float32x2_t v50 = vmul_laneq_f32(vneg_f32(*(float32x2_t *)a3.f32), v7, 2);
  float v51 = vmuls_lane_f32(-a3.f32[2], v7, 2);
  *(float32x2_t *)v10.f32 = v50;
  v10.i64[1] = LODWORD(v51);
  float32x4_t v70 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
  uint64_t result = (float32x4_t *)swift_allocObject();
  uint64_t v14 = result;
  char v15 = 0;
  unint64_t v16 = 0;
  result[1] = (float32x4_t)xmmword_2347F19A0;
  *(float32x2_t *)v17.f32 = vsub_f32(0, v55);
  v17.f32[2] = 0.0 - v59;
  v17.i32[3] = 0;
  result[2] = v17;
  f32 = (_OWORD *)result[2].f32;
  result[3] = v68;
  *(float32x2_t *)v19.f32 = vsub_f32(0, v64);
  v19.f32[2] = 0.0 - v12;
  v19.i32[3] = 0;
  float32x4_t v56 = v19;
  *(float32x2_t *)v17.f32 = vsub_f32(0, v50);
  v17.f32[2] = 0.0 - v51;
  v17.i32[3] = 0;
  float32x4_t v69 = v17;
  uint64_t v20 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    char v21 = v15;
    if (v16 >= v14[1].i64[0]) {
      break;
    }
    float32x4_t v65 = (float32x4_t)f32[v16];
    uint64_t result = (float32x4_t *)swift_allocObject();
    result[1] = (float32x4_t)xmmword_2347F19A0;
    result[2] = v56;
    result[3] = v57;
    if (!result[1].i64[0]) {
      goto LABEL_22;
    }
    float32x4_t v22 = result;
    float32x4_t v60 = result[2];
    uint64_t v23 = swift_allocObject();
    *(float32x4_t *)(v23 + 32) = v69;
    *(float32x4_t *)(v23 + 48) = v70;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = sub_2346FA354(0, v20[2] + 1, 1, v20);
    }
    float32x4_t v24 = *(float32x4_t *)(v23 + 32);
    unint64_t v26 = v20[2];
    unint64_t v25 = v20[3];
    int64_t v27 = v25 >> 1;
    unint64_t v28 = v26 + 1;
    float32x4_t v29 = (float32x4_t)v58;
    if (v25 >> 1 <= v26)
    {
      float32x4_t v52 = *(float32x4_t *)(v23 + 32);
      float v46 = sub_2346FA354((void *)(v25 > 1), v26 + 1, 1, v20);
      float32x4_t v24 = v52;
      float32x4_t v29 = (float32x4_t)v58;
      uint64_t v20 = v46;
      unint64_t v25 = v46[3];
      int64_t v27 = v25 >> 1;
    }
    float32x4_t v66 = vaddq_f32(v29, v65);
    float32x4_t v30 = vaddq_f32(v66, v60);
    float32x4_t v31 = vaddq_f32(v30, v24);
    v31.i32[3] = 0;
    v20[2] = v28;
    *(float32x4_t *)&v20[2 * v26 + 4] = v31;
    float32x4_t v32 = *(float32x4_t *)(v23 + 48);
    int64_t v33 = v26 + 2;
    if (v27 < v33)
    {
      float32x4_t v62 = v30;
      float32x4_t v53 = *(float32x4_t *)(v23 + 48);
      float v47 = sub_2346FA354((void *)(v25 > 1), v33, 1, v20);
      float32x4_t v32 = v53;
      float32x4_t v30 = v62;
      uint64_t v20 = v47;
    }
    float32x4_t v34 = vaddq_f32(v30, v32);
    v34.i32[3] = 0;
    v20[2] = v33;
    *(float32x4_t *)&v20[2 * v28 + 4] = v34;
    swift_setDeallocating();
    uint64_t result = (float32x4_t *)swift_deallocClassInstance();
    if (v22[1].i64[0] < 2uLL)
    {
LABEL_22:
      __break(1u);
      break;
    }
    float32x4_t v61 = v22[3];
    uint64_t v35 = swift_allocObject();
    *(float32x4_t *)(v35 + 32) = v69;
    *(float32x4_t *)(v35 + 48) = v70;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = sub_2346FA354(0, v20[2] + 1, 1, v20);
    }
    float32x4_t v36 = *(float32x4_t *)(v35 + 32);
    unint64_t v38 = v20[2];
    unint64_t v37 = v20[3];
    int64_t v39 = v37 >> 1;
    unint64_t v40 = v38 + 1;
    if (v37 >> 1 <= v38)
    {
      float32x4_t v54 = *(float32x4_t *)(v35 + 32);
      uint64_t v48 = sub_2346FA354((void *)(v37 > 1), v38 + 1, 1, v20);
      float32x4_t v36 = v54;
      uint64_t v20 = v48;
      unint64_t v37 = v48[3];
      int64_t v39 = v37 >> 1;
    }
    float32x4_t v41 = vaddq_f32(v66, v61);
    float32x4_t v42 = vaddq_f32(v41, v36);
    v42.i32[3] = 0;
    v20[2] = v40;
    *(float32x4_t *)&v20[2 * v38 + 4] = v42;
    float32x4_t v43 = *(float32x4_t *)(v35 + 48);
    int64_t v44 = v38 + 2;
    if (v39 < v44)
    {
      float32x4_t v63 = *(float32x4_t *)(v35 + 48);
      float32x4_t v67 = v41;
      uint64_t v49 = sub_2346FA354((void *)(v37 > 1), v44, 1, v20);
      float32x4_t v43 = v63;
      float32x4_t v41 = v67;
      uint64_t v20 = v49;
    }
    float32x4_t v45 = vaddq_f32(v41, v43);
    v45.i32[3] = 0;
    v20[2] = v44;
    *(float32x4_t *)&v20[2 * v40 + 4] = v45;
    swift_setDeallocating();
    swift_deallocClassInstance();
    swift_setDeallocating();
    uint64_t result = (float32x4_t *)swift_deallocClassInstance();
    char v15 = 1;
    unint64_t v16 = 1;
    if (v21)
    {
      swift_setDeallocating();
      swift_deallocClassInstance();
      return (float32x4_t *)v20;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2346AD51C(__n128 a1)
{
  uint64_t v2 = v1;
  __n128 v72 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v69 = (uint64_t)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  float32x4_t v68 = (char *)&v62 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v67 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v66 = (uint64_t)&v62 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v11 - 8);
  char v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v14 - 8);
  unint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for AnimationGraph();
  uint64_t v64 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  int64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = OBJC_IVAR____TtC8RoomPlan8ScanItem_type;
  uint64_t v20 = OBJC_IVAR____TtC8RoomPlan8ScanItem_category;
  sub_234701690(*(unsigned char *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type), *(unsigned char *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category), (uint64_t)v18);
  if (qword_2687ABDF8 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_2687BE0C0;
  sub_234729B10();
  sub_2347EF160();
  long long v70 = v22;
  sub_2347EF170();
  float v24 = v23;
  sub_2347EF170();
  if (v25 >= v24) {
    float v26 = v24;
  }
  else {
    float v26 = v25;
  }
  if (v26 == v24)
  {
    int v27 = 2;
    *(unsigned char *)(v21 + 40) = 2;
  }
  else if (v26 == v25)
  {
    int v27 = 3;
    *(unsigned char *)(v21 + 40) = 3;
  }
  else
  {
    int v27 = *(unsigned __int8 *)(v21 + 40);
  }
  *(unsigned char *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationTrajectory) = v27;
  int v28 = *(unsigned __int8 *)(v2 + v19);
  uint64_t v29 = *(unsigned __int8 *)(v2 + v20);
  char v30 = 4;
  uint64_t v71 = v18;
  if (((1 << v28) & 0x37) != 0)
  {
    if (v27 == 2) {
      char v30 = 2;
    }
    else {
      char v30 = 1;
    }
  }
  else if (v28 == 3)
  {
    if (qword_2687ABCF0 != -1) {
      swift_once();
    }
    if (sub_2347E8E34(v29, qword_2687BDF48))
    {
      char v30 = 1;
    }
    else
    {
      if (qword_2687ABCE8 != -1) {
        swift_once();
      }
      if (sub_2347E8E34(v29, qword_2687BDF40)) {
        char v30 = 1;
      }
      else {
        char v30 = 3;
      }
    }
  }
  uint64_t v63 = v19;
  uint64_t v31 = OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = v30;
  uint64_t v32 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform;
  v73.columns[3] = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48);
  simd_float4 v33 = v73.columns[3];
  v33.i32[3] = 0;
  *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition) = v33;
  *(void *)&long long v70 = OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions;
  long long v34 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions);
  uint64_t v62 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions) = v34;
  v73.columns[0] = *(simd_float4 *)v32;
  v73.columns[1] = *(simd_float4 *)(v32 + 16);
  v73.columns[2] = *(simd_float4 *)(v32 + 32);
  *(double *)&long long v35 = simd_quaternion(v73);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation) = v35;
  *(double *)&long long v36 = sub_2346ADD80();
  uint64_t v37 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions) = v36;
  uint64_t v38 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseLeftStrut;
  swift_beginAccess();
  sub_2346A7BCC(v38, (uint64_t)v16, &qword_2687AC800);
  uint64_t v39 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut;
  swift_beginAccess();
  sub_2346B190C((uint64_t)v16, v39, &qword_2687AC800);
  swift_endAccess();
  uint64_t v40 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseRightStrut;
  swift_beginAccess();
  sub_2346A7BCC(v40, (uint64_t)v16, &qword_2687AC800);
  uint64_t v41 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut;
  swift_beginAccess();
  sub_2346B190C((uint64_t)v16, v41, &qword_2687AC800);
  swift_endAccess();
  sub_2346A7BCC(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, (uint64_t)v13, (uint64_t *)&unk_2687AE190);
  uint64_t v42 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  int v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v13, 1, v42);
  sub_2346A7C30((uint64_t)v13, (uint64_t *)&unk_2687AE190);
  if (v43 == 1)
  {
    *(float32x2_t *)&long long v44 = sub_2346ADE70(*(unsigned char *)(v2 + v31));
    *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition) = v44;
  }
  else
  {
    long long v44 = *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition);
  }
  uint64_t v45 = (uint64_t)v71;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition) = v44;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationOrientation) = *(_OWORD *)(v2
                                                                                               + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationDimensions) = *(_OWORD *)(v2 + v37);
  sub_2346A7BCC(v39, (uint64_t)v16, &qword_2687AC800);
  uint64_t v46 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut;
  swift_beginAccess();
  sub_2346B190C((uint64_t)v16, v46, &qword_2687AC800);
  swift_endAccess();
  sub_2346A7BCC(v41, (uint64_t)v16, &qword_2687AC800);
  uint64_t v47 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut;
  swift_beginAccess();
  sub_2346B190C((uint64_t)v16, v47, &qword_2687AC800);
  swift_endAccess();
  __invert_f4(*(simd_float4x4 *)v32);
  uint64_t v48 = v70;
  uint64_t v49 = sub_2347018EC();
  if (v50) {
    return sub_2346B184C(v45);
  }
  __n128 v51 = *(__n128 *)(v2 + v48);
  *(void *)(v45 + 24) = v49;
  sub_234703724(v51);
  __n128 v52 = *(__n128 *)(v2 + v62);
  if (*(unsigned char *)(v2 + v63) == 3) {
    sub_234700D08(*(_DWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners), v52);
  }
  else {
    sub_234700FBC(*(_DWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedSides), v52);
  }
  uint64_t v54 = v66;
  sub_2346B18A8(v45, v66);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v54, 0, 1, v65);
  uint64_t v55 = v67;
  sub_2346B1970(v54, v67, &qword_2687AC8F8);
  uint64_t v56 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
  swift_beginAccess();
  sub_2346B190C(v55, v56, &qword_2687AC8F8);
  swift_endAccess();
  float32x4_t v57 = v68;
  sub_2347ED520();
  sub_2346B184C(v45);
  uint64_t v58 = sub_2347ED540();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 0, 1, v58);
  uint64_t v59 = (uint64_t)v57;
  uint64_t v60 = v69;
  sub_2346B1970(v59, v69, &qword_2687AC8F0);
  uint64_t v61 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime;
  swift_beginAccess();
  sub_2346B190C(v60, v61, &qword_2687AC8F0);
  return swift_endAccess();
}

double sub_2346ADD80()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) != 3) {
    goto LABEL_8;
  }
  if (qword_2687ABCF0 != -1) {
    swift_once();
  }
  uint64_t v1 = OBJC_IVAR____TtC8RoomPlan8ScanItem_category;
  if (sub_2347E8E34(*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category), qword_2687BDF48)) {
    goto LABEL_8;
  }
  if (qword_2687ABCE8 != -1) {
    swift_once();
  }
  if (sub_2347E8E34(*(unsigned __int8 *)(v0 + v1), qword_2687BDF40))
  {
LABEL_8:
    long long v2 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions);
    LODWORD(v2) = 0;
  }
  else
  {
    *(void *)&long long v2 = vtrn2q_s32(vrev64q_s32(*(int32x4_t *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions)), (int32x4_t)0).u64[0];
  }
  return *(double *)&v2;
}

float32x2_t sub_2346ADE70(char a1)
{
  float v2 = 0.0;
  LODWORD(v3) = 0;
  switch(a1)
  {
    case 1:
    case 2:
      long long v3 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions);
      LODWORD(v2) = *(_OWORD *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions);
      break;
    case 4:
      break;
    default:
      LODWORD(v2) = HIDWORD(*(void *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions));
      long long v3 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions);
      if ((a1 - 1) > 1u) {
        LODWORD(v3) = HIDWORD(*(void *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions));
      }
      break;
  }
  return vadd_f32(COERCE_FLOAT32X2_T(sub_2346ADF44(a1, (float)(v2 - *(float *)&v3) * 0.5)), *(float32x2_t *)(v1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48));
}

double sub_2346ADF44(char a1, float a2)
{
  double v3 = 0.0;
  switch(a1)
  {
    case 1:
      float32x2_t v5 = *(float32x2_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform);
      goto LABEL_6;
    case 2:
      float32x2_t v4 = *(float32x2_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform);
      return COERCE_DOUBLE(vmul_n_f32(v4, a2));
    case 3:
      float32x2_t v5 = *(float32x2_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16);
LABEL_6:
      float32x2_t v4 = vsub_f32(0, v5);
      return COERCE_DOUBLE(vmul_n_f32(v4, a2));
    case 4:
      return v3;
    default:
      float32x2_t v4 = *(float32x2_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16);
      return COERCE_DOUBLE(vmul_n_f32(v4, a2));
  }
}

uint64_t sub_2346AE00C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
  uint64_t v2 = sub_2347ED5C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t *)&unk_2687AEB70);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, (uint64_t *)&unk_2687AE190);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawLeftStrut, &qword_2687AC800);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawRightStrut, &qword_2687AC800);
  swift_bridgeObjectRelease();
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime, &qword_2687AC8F0);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_fadeOutAnimationTime, &qword_2687AC8F0);
  swift_bridgeObjectRelease();
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve, (uint64_t *)&unk_2687AE190);
  swift_bridgeObjectRelease();
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve, (uint64_t *)&unk_2687AE190);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut, &qword_2687AC800);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut, &qword_2687AC800);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph, &qword_2687AC8F8);
  uint64_t v3 = v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_bodyStartTime;
  uint64_t v4 = sub_2347ED540();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationCurve, (uint64_t *)&unk_2687AE190);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationCurve, (uint64_t *)&unk_2687AE190);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut, &qword_2687AC800);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut, &qword_2687AC800);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseCurve, (uint64_t *)&unk_2687AE190);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseLeftStrut, &qword_2687AC800);
  sub_2346A7C30(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseRightStrut, &qword_2687AC800);
  return v0;
}

uint64_t sub_2346AE294()
{
  sub_2346AE00C();

  return swift_deallocClassInstance();
}

uint64_t sub_2346AE2EC()
{
  return type metadata accessor for ScanItem();
}

uint64_t type metadata accessor for ScanItem()
{
  uint64_t result = qword_2687AC8C0;
  if (!qword_2687AC8C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_2346AE340()
{
  sub_2347ED5C0();
  if (v0 <= 0x3F)
  {
    sub_2346AE674(319, (unint64_t *)&qword_2687AE000, MEMORY[0x263F07508]);
    if (v1 <= 0x3F)
    {
      sub_2346AE674(319, &qword_2687AC8D0, (void (*)(uint64_t))type metadata accessor for CapturedRoom.Surface.Curve);
      if (v2 <= 0x3F)
      {
        sub_2346AE674(319, &qword_2687AC8D8, (void (*)(uint64_t))type metadata accessor for ScanItemStrut);
        if (v3 <= 0x3F)
        {
          sub_2346AE674(319, (unint64_t *)&qword_2687AC8E0, MEMORY[0x263F07490]);
          if (v4 <= 0x3F)
          {
            sub_2346AE674(319, &qword_2687AC8E8, (void (*)(uint64_t))type metadata accessor for AnimationGraph);
            if (v5 <= 0x3F)
            {
              sub_2347ED540();
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

void sub_2346AE674(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2347EEB10();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_2346AE6C8(void *a1)
{
  unint64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_2347EF060();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v80 = 0;
      uint64_t v81 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        float v83 = *(float *)(v81 + 4 * i);
        uint64_t v84 = v80;
        do
        {
          uint64_t v85 = v81 + 4 * v84;
          if (v83 >= *(float *)v85) {
            break;
          }
          if (!v81) {
            goto LABEL_140;
          }
          *(_DWORD *)(v85 + 4) = *(_DWORD *)v85;
          *(float *)(v81 + 4 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v97 = result;
  uint64_t v98 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    unsigned int __dst = (float *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_102:
      uint64_t v96 = v8;
      if (v12 >= 2)
      {
        uint64_t v86 = *v2;
        do
        {
          unint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          uint64_t v88 = v11;
          BOOL v89 = v11 + 32;
          uint64_t v90 = *(void *)&v11[16 * v87 + 32];
          uint64_t v91 = *(void *)&v11[16 * v12 + 24];
          sub_2346AED5C((float *)(v86 + 4 * v90), (float *)(v86 + 4 * *(void *)&v89[16 * v12 - 16]), v86 + 4 * v91, __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v88 = sub_234748228((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          uint64_t v92 = &v88[16 * v87 + 32];
          *(void *)uint64_t v92 = v90;
          *((void *)v92 + 1) = v91;
          unint64_t v93 = *((void *)v88 + 2);
          if (v12 > v93) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          uint64_t v11 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(void *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v96 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_2347EE810();
    *(void *)(v7 + 16) = v6;
    uint64_t v3 = v98;
    uint64_t v96 = v7;
    unsigned int __dst = (float *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v94 = v2;
  uint64_t v95 = *v2 - 4;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v99 = *v2;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      float v14 = *(float *)(v10 + 4 * v9);
      float v15 = *(float *)(v10 + 4 * v13);
      uint64_t v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        float v16 = v14;
        while (1)
        {
          float v17 = v16;
          float v16 = *(float *)(v10 + 4 * v9);
          if (v14 < v15 == v16 >= v17) {
            break;
          }
          if (v3 == ++v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          int64_t v18 = (int *)(v95 + 4 * v9);
          uint64_t v19 = v9;
          uint64_t v20 = v13;
          uint64_t v21 = (int *)(v10 + 4 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_143;
              }
              int v22 = *v21;
              *uint64_t v21 = *v18;
              *int64_t v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v97) {
      goto LABEL_46;
    }
    uint64_t v23 = v13 + v97;
    if (__OFADD__(v13, v97)) {
      goto LABEL_138;
    }
    if (v23 >= v3) {
      uint64_t v23 = v3;
    }
    if (v23 < v13) {
      break;
    }
    if (v9 != v23)
    {
      float v24 = (float *)(v95 + 4 * v9);
      do
      {
        float v25 = *(float *)(v10 + 4 * v9);
        uint64_t v26 = v13;
        int v27 = v24;
        do
        {
          float v28 = *v27;
          if (v25 >= *v27) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          *int v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      uint64_t v9 = v23;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_234747DB8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v30 = *((void *)v11 + 2);
    unint64_t v29 = *((void *)v11 + 3);
    unint64_t v12 = v30 + 1;
    uint64_t v10 = v99;
    if (v30 >= v29 >> 1)
    {
      float v79 = sub_234747DB8((char *)(v29 > 1), v30 + 1, 1, v11);
      uint64_t v10 = v99;
      uint64_t v11 = v79;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v31 = v11 + 32;
    uint64_t v32 = &v11[16 * v30 + 32];
    *(void *)uint64_t v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        unint64_t v33 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v38 = &v31[16 * v12];
          uint64_t v39 = *((void *)v38 - 8);
          uint64_t v40 = *((void *)v38 - 7);
          BOOL v44 = __OFSUB__(v40, v39);
          uint64_t v41 = v40 - v39;
          if (v44) {
            goto LABEL_119;
          }
          uint64_t v43 = *((void *)v38 - 6);
          uint64_t v42 = *((void *)v38 - 5);
          BOOL v44 = __OFSUB__(v42, v43);
          uint64_t v36 = v42 - v43;
          char v37 = v44;
          if (v44) {
            goto LABEL_120;
          }
          unint64_t v45 = v12 - 2;
          uint64_t v46 = &v31[16 * v12 - 32];
          uint64_t v48 = *(void *)v46;
          uint64_t v47 = *((void *)v46 + 1);
          BOOL v44 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          if (v44) {
            goto LABEL_122;
          }
          BOOL v44 = __OFADD__(v36, v49);
          uint64_t v50 = v36 + v49;
          if (v44) {
            goto LABEL_125;
          }
          if (v50 >= v41)
          {
            float32x4_t v68 = &v31[16 * v33];
            uint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            BOOL v44 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v44) {
              goto LABEL_129;
            }
            BOOL v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v62 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            BOOL v44 = __OFSUB__(v63, v62);
            uint64_t v55 = v63 - v62;
            char v56 = v44;
            goto LABEL_77;
          }
          uint64_t v35 = *((void *)v11 + 4);
          uint64_t v34 = *((void *)v11 + 5);
          BOOL v44 = __OFSUB__(v34, v35);
          uint64_t v36 = v34 - v35;
          char v37 = v44;
        }
        if (v37) {
          goto LABEL_121;
        }
        unint64_t v45 = v12 - 2;
        __n128 v51 = &v31[16 * v12 - 32];
        uint64_t v53 = *(void *)v51;
        uint64_t v52 = *((void *)v51 + 1);
        BOOL v54 = __OFSUB__(v52, v53);
        uint64_t v55 = v52 - v53;
        char v56 = v54;
        if (v54) {
          goto LABEL_124;
        }
        float32x4_t v57 = &v31[16 * v33];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v44 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v44) {
          goto LABEL_127;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_128;
        }
        if (v55 + v60 >= v36)
        {
          BOOL v61 = v36 < v60;
LABEL_83:
          if (v61) {
            unint64_t v33 = v45;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v56) {
          goto LABEL_123;
        }
        uint64_t v64 = &v31[16 * v33];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v44 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v44) {
          goto LABEL_126;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10) {
          goto LABEL_142;
        }
        simd_float4x4 v73 = &v31[16 * v72];
        uint64_t v74 = *(void *)v73;
        uint64_t v75 = v31;
        unint64_t v76 = &v31[16 * v33];
        uint64_t v77 = *((void *)v76 + 1);
        sub_2346AED5C((float *)(v10 + 4 * *(void *)v73), (float *)(v10 + 4 * *(void *)v76), v10 + 4 * v77, __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v77 < v74) {
          goto LABEL_116;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)simd_float4x4 v73 = v74;
        *(void *)&v75[16 * v72 + 8] = v77;
        unint64_t v78 = *((void *)v11 + 2);
        if (v33 >= v78) {
          goto LABEL_118;
        }
        unint64_t v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        uint64_t v31 = v75;
        *((void *)v11 + 2) = v78 - 1;
        uint64_t v10 = v99;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v98;
    if (v9 >= v98)
    {
      uint64_t v8 = v96;
      unint64_t v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  uint64_t result = sub_2347EEE90();
  __break(1u);
  return result;
}

uint64_t sub_2346AED5C(float *__src, float *a2, unint64_t a3, float *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 3;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 2;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 3;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 2;
  float v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 2)
  {
    if (v11 >= -3)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 4 * v13);
      }
      float v16 = &v4[v13];
      int v22 = v16;
      float v24 = v6;
      if (v7 < v6 && v11 >= 4)
      {
        float v17 = (float *)(a3 - 4);
        while (1)
        {
          int64_t v18 = v17 + 1;
          uint64_t v19 = v6 - 1;
          float v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            int v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *float v17 = *(v16 - 1);
            }
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *float v17 = v20;
            }
            float v24 = --v6;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -3)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 4 * v10);
    }
    float v14 = &v4[v10];
    int v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 4)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *uint64_t v7 = *v4;
          }
          uint64_t v23 = ++v4;
          float v15 = v6;
        }
        else
        {
          float v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *uint64_t v7 = *v6;
          }
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      float v24 = v7;
    }
LABEL_42:
    sub_2347480B4((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

float32x2_t sub_2346AEFCC()
{
  uint64_t v1 = 0;
  *(float32x2_t *)&long long v2 = vsub_f32(*(float32x2_t *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition), *(float32x2_t *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48));
  *((float *)&v2 + 2) = *(float *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition + 8)
                      - *(float *)(v0 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 56);
  HIDWORD(v2) = 0;
  while (1)
  {
    long long v9 = v2;
    float v4 = *(float *)((unint64_t)&v9 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    BOOL v3 = v4 == 0.0;
    if (v1 == 2) {
      break;
    }
    while (1)
    {
      ++v1;
      if (v3) {
        break;
      }
      if (v1 == 2) {
        goto LABEL_7;
      }
      BOOL v3 = 0;
    }
  }
  float32x2_t result = 0;
  if (v4 != 0.0)
  {
LABEL_7:
    sub_2347EF170();
    float v8 = v6 * 0.5;
    sub_2347EF160();
    return vmul_n_f32(v7, v8);
  }
  return result;
}

uint64_t sub_2346AF0B8(simd_float4 a1)
{
  uint64_t v2 = v1;
  simd_float4 v147 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v153 = (uint64_t)v137 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v152 = (uint64_t)v137 - v6;
  MEMORY[0x270FA5388](v7);
  v154.i64[0] = (uint64_t)v137 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v151 = (uint64_t)v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v137 - v12;
  MEMORY[0x270FA5388](v14);
  v157.i64[0] = (uint64_t)v137 - v15;
  v156.i64[0] = sub_2347ED540();
  v158.i64[0] = *(void *)(v156.i64[0] - 8);
  MEMORY[0x270FA5388](v156.i64[0]);
  v137[0] = (char *)v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v143 = (char *)v137 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v137 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v142 = (uint64_t)v137 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v137 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v27 - 8);
  unint64_t v29 = (char *)v137 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_2347ED5C0();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  unint64_t v33 = (char *)v137 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)v137 - v35;
  int v37 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category);
  float32x4_t v155 = 0u;
  uint64_t v38 = (void *)&unk_2687BD000;
  if (v37 != 18) {
    goto LABEL_14;
  }
  sub_2346A7BCC(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t)v29, (uint64_t *)&unk_2687AEB70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_2346A7C30((uint64_t)v29, (uint64_t *)&unk_2687AEB70);
LABEL_13:
    uint64_t v38 = &unk_2687BD000;
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v36, v29, v30);
  if (qword_2687ABCC8 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_2687BDE30;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v33, v36, v30);
  swift_beginAccess();
  uint64_t v40 = *(void *)(v39 + 24);
  if (!*(void *)(v40 + 16))
  {
LABEL_12:
    uint64_t v50 = *(void (**)(char *, uint64_t))(v31 + 8);
    v50(v33, v30);
    v50(v36, v30);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  unint64_t v41 = sub_2347BFA88((uint64_t)v33);
  if ((v42 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v150 = v21;
  unint64_t v43 = *(void *)(*(void *)(v40 + 56) + 8 * v41);
  swift_retain();
  swift_bridgeObjectRelease();
  BOOL v44 = *(void (**)(char *, uint64_t))(v31 + 8);
  v44(v33, v30);
  float v45 = *(float *)(v43 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 52);
  v155.i64[0] = v43;
  long long v149 = *(_OWORD *)(v43 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions);
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  uint64_t v46 = (float *)off_2687AF0E8;
  swift_beginAccess();
  float32x2_t v47 = (float32x2_t)v149;
  float v48 = vmuls_lane_f32(v46[13], *(float32x2_t *)&v149, 1);
  *(float *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions + 4) = v48;
  *(float *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 52) = (float)(v45 - vmuls_lane_f32(0.5, v47, 1))
                                                                        + (float)(v48 * 0.5);
  swift_release();
  v44(v36, v30);
  swift_beginAccess();
  LODWORD(v49) = 0;
  *((float *)&v49 + 1) = v46[15] * 0.5;
  float32x4_t v155 = (float32x4_t)v49;
  uint64_t v38 = &unk_2687BD000;
  uint64_t v21 = v150;
LABEL_14:
  uint64_t v51 = v38[462];
  long long v52 = *(_OWORD *)(v2 + v51);
  uint64_t v145 = OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseDimensions) = v52;
  uint64_t v53 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve;
  uint64_t v54 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseCurve;
  swift_beginAccess();
  uint64_t v148 = v54;
  sub_2346B023C(v53, v54, (uint64_t *)&unk_2687AE190);
  swift_endAccess();
  uint64_t v55 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawLeftStrut;
  uint64_t v56 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseLeftStrut;
  swift_beginAccess();
  *(void *)&long long v149 = v56;
  sub_2346B023C(v55, v56, &qword_2687AC800);
  swift_endAccess();
  uint64_t v57 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawRightStrut;
  uint64_t v58 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_currentRawDollhouseRightStrut;
  swift_beginAccess();
  uint64_t v150 = (char *)v58;
  sub_2346B023C(v57, v58, &qword_2687AC800);
  swift_endAccess();
  uint64_t v59 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationTime;
  swift_beginAccess();
  uint64_t v141 = v59;
  sub_2346A7BCC(v59, (uint64_t)v26, &qword_2687AC8F0);
  uint64_t v60 = v156.i64[0];
  uint64_t v139 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v158.i64[0] + 48);
  uint64_t v140 = v158.i64[0] + 48;
  int v61 = v139(v26, 1, v156.i64[0]);
  sub_2346A7C30((uint64_t)v26, &qword_2687AC8F0);
  if (v61 == 1)
  {
    sub_2346AD51C((__n128)v147);
  }
  else if (*(unsigned char *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 2)
  {
    v160.columns[2] = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 32);
    simd_float4 v147 = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48);
    v160.columns[3] = v147;
    v160.columns[0] = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform);
    v160.columns[1] = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16);
    simd_float4x4 v161 = __invert_f4(v160);
    if (vsubq_f32(vaddq_f32((float32x4_t)v161.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v161.columns[0], v147.f32[0]), (float32x4_t)v161.columns[1], *(float32x2_t *)v147.f32, 1), (float32x4_t)v161.columns[2], (float32x4_t)v147, 2)), vaddq_f32((float32x4_t)v161.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v161.columns[0], COERCE_FLOAT(*(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition))), (float32x4_t)v161.columns[1],
                 *(float32x2_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition),
                 1),
               (float32x4_t)v161.columns[2],
               *(float32x4_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition),
               2))).f32[0] >= 0.0)
      char v62 = 1;
    else {
      char v62 = 2;
    }
    *(unsigned char *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin) = v62;
  }
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  v147.i64[0] = OBJC_IVAR____TtC8RoomPlan8ScanItem_type;
  uint64_t v63 = v158.i64[0];
  switch(*(unsigned char *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type))
  {
    case 2:
      uint64_t v64 = (float *)((char *)off_2687AF0E8 + 76);
      break;
    case 3:
      uint64_t v64 = (float *)((char *)off_2687AF0E8 + 84);
      break;
    case 6:
      uint64_t v64 = (float *)((char *)off_2687AF0E8 + 80);
      break;
    default:
      uint64_t v64 = (float *)((char *)off_2687AF0E8 + 88);
      break;
  }
  swift_beginAccess();
  float v65 = *v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v21, v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_bodyStartTime, v60);
  if (v65 <= 0.0)
  {
    uint64_t v75 = v63 + 8;
    uint64_t v71 = *(void (**)(char *, uint64_t))(v63 + 8);
    uint64_t v72 = v75 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    float v74 = 1.0;
  }
  else
  {
    double v66 = v65;
    uint64_t v67 = v143;
    sub_2347ED520();
    sub_2347ED4F0();
    double v69 = v68;
    uint64_t v70 = v63 + 8;
    uint64_t v71 = *(void (**)(char *, uint64_t))(v63 + 8);
    uint64_t v72 = v70 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v71(v67, v60);
    double v73 = v69 / v66;
    float v74 = 0.0;
    if (v73 > 0.0)
    {
      if (v73 > 1.0) {
        double v73 = 1.0;
      }
      float v74 = v73;
    }
  }
  v137[1] = v72;
  id v138 = v71;
  v71(v21, v60);
  float v76 = 1.0 - (float)((float)(1.0 - v74) * (float)(1.0 - v74));
  type metadata accessor for Easing();
  __n128 v77 = *(__n128 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationPosition);
  uint64_t v78 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform;
  float32x4_t v146 = *(float32x4_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48);
  __n128 v79 = (__n128)vaddq_f32(v155, v146);
  v79.n128_u32[3] = 0;
  *(double *)&long long v80 = sub_2346A9D74(v77, v79, v76);
  v155.i64[0] = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition) = v80;
  float32x4_t v144 = *(float32x4_t *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationOrientation);
  v162.columns[1] = *(simd_float4 *)(v78 + 16);
  v162.columns[2] = *(simd_float4 *)(v78 + 32);
  v162.columns[0] = *(simd_float4 *)v78;
  v162.columns[3] = (simd_float4)v146;
  *(double *)v81.i64 = simd_quaternion(v162);
  simd_slerp(v144, v81, v76);
  v146.i64[0] = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation) = v82;
  *(double *)&long long v83 = sub_2346A9D74(*(__n128 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationDimensions), *(__n128 *)(v2 + v51), v76);
  v144.i64[0] = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions) = v83;
  uint64_t v84 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialWorldAnimationCurve;
  swift_beginAccess();
  sub_2346A7BCC(v84, (uint64_t)v13, (uint64_t *)&unk_2687AE190);
  uint64_t v85 = v157.i64[0];
  *(float *)&double v86 = v76;
  sub_2346A7D2C((uint64_t)v13, v53, v157.i64[0], v86);
  sub_2346A7C30((uint64_t)v13, (uint64_t *)&unk_2687AE190);
  uint64_t v87 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceCurve;
  swift_beginAccess();
  sub_2346B190C(v85, v87, (uint64_t *)&unk_2687AE190);
  swift_endAccess();
  uint64_t v88 = *(void *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationScanItemEdges);
  if (*(void *)(v88 + 16)
    || *(void *)(*(void *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_finalAnimationScanItemEdges) + 16))
  {
    if (fabsf(v76 + -1.0) >= 0.0001)
    {
      uint64_t v89 = *(void *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_finalAnimationScanItemEdges);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v90 = sub_2346A8D00(v88, v89, v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceScanItemEdges) = v90;
    }
    else
    {
      *(void *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceScanItemEdges) = *(void *)(v2
                                                                                               + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawScanItemEdges);
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    *(void *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceScanItemEdges) = sub_2347AD1BC(MEMORY[0x263F8EE78]);
  }
  unint64_t v91 = v147.i64[0];
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v2 + v91) == 2)
  {
    *(float32x2_t *)&long long v92 = vadd_f32(sub_2346AEFCC(), *(float32x2_t *)(v78 + 48));
    *((float *)&v92 + 2) = *((float *)&v92 + 2) + *(float *)(v78 + 56);
    HIDWORD(v92) = 0;
  }
  else
  {
    v93.n128_u64[0] = (unint64_t)sub_2346ADE70(*(unsigned char *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationOrigin));
    *(double *)&long long v92 = sub_2346A9D74(*(__n128 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationPosition), v93, v76);
  }
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition) = v92;
  simd_float4 v147 = *(simd_float4 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationOrientation);
  *(double *)v94.i64 = simd_quaternion(*(simd_float4x4 *)v78);
  simd_slerp((float32x4_t)v147, v94, v76);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation) = v95;
  *(double *)&long long v96 = sub_2346A9D74(*(__n128 *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationDimensions), *(__n128 *)(v2 + v145), v76);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions) = v96;
  *(void *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseScanItemEdges) = *(void *)(v2
                                                                                          + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceScanItemEdges);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationCurve;
  swift_beginAccess();
  sub_2346A7BCC(v97, (uint64_t)v13, (uint64_t *)&unk_2687AE190);
  uint64_t v98 = v151;
  sub_2346A7BCC(v148, v151, (uint64_t *)&unk_2687AE190);
  uint64_t v99 = v157.i64[0];
  *(float *)&double v100 = v76;
  sub_2346A7D2C((uint64_t)v13, v98, v157.i64[0], v100);
  sub_2346A7C30(v98, (uint64_t *)&unk_2687AE190);
  sub_2346A7C30((uint64_t)v13, (uint64_t *)&unk_2687AE190);
  uint64_t v101 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
  swift_beginAccess();
  sub_2346B190C(v99, v101, (uint64_t *)&unk_2687AE190);
  swift_endAccess();
  uint64_t v102 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationLeftStrut;
  swift_beginAccess();
  uint64_t v103 = v152;
  sub_2346A7BCC(v102, v152, &qword_2687AC800);
  uint64_t v104 = v153;
  sub_2346A7BCC(v149, v153, &qword_2687AC800);
  uint64_t v105 = v154.i64[0];
  *(float *)&double v106 = v76;
  sub_2346A81A4(v103, v104, v154.i64[0], v106);
  sub_2346A7C30(v104, &qword_2687AC800);
  sub_2346A7C30(v103, &qword_2687AC800);
  uint64_t v107 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseLeftStrut;
  swift_beginAccess();
  sub_2346B190C(v105, v107, &qword_2687AC800);
  swift_endAccess();
  uint64_t v108 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_initialAnimationRightStrut;
  swift_beginAccess();
  sub_2346A7BCC(v108, v103, &qword_2687AC800);
  sub_2346A7BCC((uint64_t)v150, v104, &qword_2687AC800);
  *(float *)&double v109 = v76;
  sub_2346A81A4(v103, v104, v105, v109);
  sub_2346A7C30(v104, &qword_2687AC800);
  sub_2346A7C30(v103, &qword_2687AC800);
  uint64_t v110 = v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseRightStrut;
  swift_beginAccess();
  sub_2346B190C(v105, v110, &qword_2687AC800);
  swift_endAccess();
  uint64_t v111 = (double *)off_2687AF0E8;
  uint64_t v112 = swift_beginAccess();
  if (v111[12] > 0.0 && *(unsigned char *)(v2 + v91) == 3)
  {
    uint64_t v113 = OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners;
    int v114 = *(_DWORD *)(v2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_completedCorners);
    if (qword_2687ABE00 != -1) {
      uint64_t v112 = swift_once();
    }
    if (v114 != dword_2687BE0D0)
    {
      uint64_t v115 = v142;
      sub_2346A7BCC(v141, v142, &qword_2687AC8F0);
      uint64_t v116 = v156.i64[0];
      if (v139((char *)v115, 1, v156.i64[0]) == 1)
      {
        uint64_t v112 = sub_2346A7C30(v115, &qword_2687AC8F0);
      }
      else
      {
        uint64_t v117 = v137[0];
        (*(void (**)(void, uint64_t, uint64_t))(v158.i64[0] + 32))(v137[0], v115, v116);
        uint64_t v118 = v143;
        sub_2347ED520();
        sub_2347ED4F0();
        double v120 = v119;
        uint64_t v121 = (uint64_t (*)(uint64_t, uint64_t))v138;
        v138(v118, v116);
        uint64_t v122 = (double *)off_2687AF0E8;
        swift_beginAccess();
        if (v122[12] >= v120)
        {
          uint64_t v112 = v121(v117, v116);
        }
        else
        {
          *(_DWORD *)(v2 + v113) = dword_2687BE0D0;
          uint64_t v123 = sub_2346AAF00();
          uint64_t v125 = v124;
          uint64_t v126 = type metadata accessor for AnimationGraph();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 48))(v125, 1, v126))sub_234700D08(*(_DWORD *)(v2 + v113), *(__n128 *)(v2 + v144.i64[0])); {
          ((void (*)(unsigned char *, void))v123)(v159, 0);
          }
          uint64_t v112 = ((uint64_t (*)(uint64_t, uint64_t))v138)(v117, v116);
        }
      }
    }
  }
  *(double *)v127.i64 = MEMORY[0x237DC6930](v112, *(__n128 *)(v2 + v155.i64[0]), *(__n128 *)(v2 + v146.i64[0]), (__n128)xmmword_2347F1A00);
  float32x4_t v157 = v128;
  float32x4_t v158 = v127;
  float32x4_t v155 = v130;
  float32x4_t v156 = v129;
  uint64_t v131 = sub_2346AAF00();
  uint64_t v133 = v132;
  uint64_t v134 = type metadata accessor for AnimationGraph();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 48))(v133, 1, v134))
  {
    float32x4_t v154 = *(float32x4_t *)(v2 + v144.i64[0]);
    uint64_t v135 = swift_bridgeObjectRetain();
    sub_2347012F8(v135, v158, v157, v156, (__n128)v155, v154);
    swift_bridgeObjectRelease();
  }
  return ((uint64_t (*)(unsigned char *, void))v131)(v159, 0);
}

uint64_t sub_2346B023C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

double simd_quaternion(simd_float4x4 a1)
{
  float v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    a1.columns[3].f32[0] = sqrtf(v1 + 1.0);
    float32x2_t v5 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]));
    float32x2_t v6 = vmul_f32(v5, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v5));
    *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v6, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(a1.columns[3].f32[0] + a1.columns[3].f32[0]), v6)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    float v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      a1.columns[3].f32[0] = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      a1.columns[3].f32[0] = a1.columns[3].f32[0] + a1.columns[3].f32[0];
      float32x2_t v16 = vrecpe_f32((float32x2_t)a1.columns[3].u32[0]);
      float32x2_t v17 = vmul_f32(v16, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v16));
      v18.i32[0] = vmul_f32(v17, vrecps_f32((float32x2_t)a1.columns[3].u32[0], v17)).u32[0];
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v17.i32[1] = a1.columns[3].i32[0];
      v18.i32[1] = 0.25;
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v17, v18);
    }
    else
    {
      float32x2_t v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      *(float32x2_t *)a1.columns[3].f32 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      *(float32x2_t *)a1.columns[3].f32 = vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32));
      *(float32x2_t *)a1.columns[3].f32 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(*(float32x2_t *)a1.columns[3].f32, vrecps_f32((float32x2_t)a1.columns[1].u32[0], *(float32x2_t *)a1.columns[3].f32)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    *(int32x2_t *)a1.columns[3].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    float32x2_t v7 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, *(float32x2_t *)a1.columns[3].f32);
    a1.columns[3].i32[0] = 2.0;
    v8.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), *(float32x2_t *)a1.columns[3].f32).u32[0];
    v8.i32[1] = v7.i32[1];
    float32x2_t v9 = vrecpe_f32((float32x2_t)v8.u32[0]);
    float32x2_t v10 = vmul_f32(v9, vrecps_f32((float32x2_t)v8.u32[0], v9));
    unsigned __int32 v11 = vmul_f32(v10, vrecps_f32((float32x2_t)v8.u32[0], v10)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v11;
    *(float32x2_t *)a1.columns[3].f32 = vmul_f32(v8, _D5);
  }
  return *(double *)a1.columns[3].i64;
}

void simd_slerp(float32x4_t a1, float32x4_t a2, float a3)
{
  float32x4_t v3 = vmulq_f32(a1, a2);
  float32x4_t v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i64[0] = 0;
  _simd_slerp_internal(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

unint64_t sub_2346B04B0(uint64_t a1, uint64_t a2)
{
  float32x4_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return sub_2347AD1BC(MEMORY[0x263F8EE78]);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5 != v4)
  {
    sub_2346B1A38();
    swift_allocError();
    *(void *)uint64_t v24 = v4;
    *(void *)(v24 + 8) = v5;
    *(unsigned char *)(v24 + 16) = 1;
    swift_willThrow();
    return (unint64_t)v3;
  }
  uint64_t v75 = *(void *)(a1 + 16);
  unint64_t v6 = 0;
  float32x2_t v7 = (void *)MEMORY[0x263F8EE80];
  uint64_t v8 = MEMORY[0x263F8EE78];
  do
  {
    if (v6 >= qword_26E76FC60)
    {
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    unsigned __int8 v10 = *((unsigned char *)&unk_26E76FC50 + v6 + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v85 = v7;
    unint64_t v13 = sub_2347BFCB4(v10);
    uint64_t v14 = v7[2];
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      goto LABEL_74;
    }
    char v17 = v12;
    if (v7[3] >= v16)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        float32x2_t v7 = v85;
        if (v12) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_2347D5DAC();
        float32x2_t v7 = v85;
        if (v17) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_2347CFA38(v16, isUniquelyReferenced_nonNull_native);
      unint64_t v18 = sub_2347BFCB4(v10);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_79;
      }
      unint64_t v13 = v18;
      float32x2_t v7 = v85;
      if (v17)
      {
LABEL_4:
        uint64_t v9 = v7[7];
        swift_bridgeObjectRelease();
        *(void *)(v9 + 8 * v13) = v8;
        goto LABEL_5;
      }
    }
    v7[(v13 >> 6) + 8] |= 1 << v13;
    *(unsigned char *)(v7[6] + v13) = v10;
    *(void *)(v7[7] + 8 * v13) = v8;
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_77;
    }
    v7[2] = v22;
LABEL_5:
    ++v6;
    swift_bridgeObjectRelease();
  }
  while (v6 != 4);
  unint64_t v90 = v7;
  uint64_t v73 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v25 = 0;
  uint64_t v26 = v4 - 1;
  do
  {
    unsigned __int8 v28 = *(unsigned char *)(v73 + v25);
    if (v26 == v25) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v25 + 1;
    }
    long long v79 = *(_OWORD *)(a1 + 16 * v25 + 32);
    long long v82 = *(_OWORD *)(a1 + 32 + 16 * v29);
    uint64_t v31 = sub_23470124C(&v85, v28);
    uint64_t v32 = *v30;
    if (*v30)
    {
      unint64_t v33 = v30;
      char v34 = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v33 = v32;
      if ((v34 & 1) == 0)
      {
        uint64_t v32 = sub_2346FA354(0, v32[2] + 1, 1, v32);
        *unint64_t v33 = v32;
      }
      unint64_t v36 = v32[2];
      unint64_t v35 = v32[3];
      if (v36 >= v35 >> 1)
      {
        uint64_t v32 = sub_2346FA354((void *)(v35 > 1), v36 + 1, 1, v32);
        *unint64_t v33 = v32;
      }
      v32[2] = v36 + 1;
      *(_OWORD *)&v32[2 * v36 + 4] = v79;
    }
    ((void (*)(void **, void))v31)(&v85, 0);
    uint64_t v38 = sub_23470124C(&v85, v28);
    uint64_t v39 = *v37;
    if (*v37)
    {
      uint64_t v40 = v37;
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v40 = v39;
      if ((v41 & 1) == 0)
      {
        uint64_t v39 = sub_2346FA354(0, v39[2] + 1, 1, v39);
        *uint64_t v40 = v39;
      }
      unint64_t v43 = v39[2];
      unint64_t v42 = v39[3];
      if (v43 >= v42 >> 1)
      {
        uint64_t v39 = sub_2346FA354((void *)(v42 > 1), v43 + 1, 1, v39);
        *uint64_t v40 = v39;
      }
      uint64_t v27 = v75;
      v39[2] = v43 + 1;
      *(_OWORD *)&v39[2 * v43 + 4] = v82;
      ((void (*)(void **, void))v38)(&v85, 0);
    }
    else
    {
      ((void (*)(void **, void))v38)(&v85, 0);
      uint64_t v27 = v75;
    }
    ++v25;
  }
  while (v27 != v25);
  swift_bridgeObjectRelease();
  int64_t v44 = 0;
  float v74 = v90 + 8;
  uint64_t v78 = v90;
  uint64_t v45 = 1 << *((unsigned char *)v90 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & v90[8];
  int64_t v76 = (unint64_t)(v45 + 63) >> 6;
  float32x4_t v3 = (void *)MEMORY[0x263F8EE80];
  while (2)
  {
    if (v47)
    {
      uint64_t v80 = (v47 - 1) & v47;
      int64_t v83 = v44;
      unint64_t v49 = __clz(__rbit64(v47)) | (v44 << 6);
      goto LABEL_59;
    }
    int64_t v50 = v44 + 1;
    if (__OFADD__(v44, 1)) {
      goto LABEL_76;
    }
    if (v50 >= v76)
    {
LABEL_70:
      swift_release();
      return (unint64_t)v3;
    }
    unint64_t v51 = v74[v50];
    int64_t v52 = v44 + 1;
    if (v51) {
      goto LABEL_58;
    }
    int64_t v52 = v44 + 2;
    if (v44 + 2 >= v76) {
      goto LABEL_70;
    }
    unint64_t v51 = v74[v52];
    if (v51) {
      goto LABEL_58;
    }
    int64_t v52 = v44 + 3;
    if (v44 + 3 >= v76) {
      goto LABEL_70;
    }
    unint64_t v51 = v74[v52];
    if (v51)
    {
LABEL_58:
      uint64_t v80 = (v51 - 1) & v51;
      int64_t v83 = v52;
      unint64_t v49 = __clz(__rbit64(v51)) + (v52 << 6);
LABEL_59:
      LOBYTE(v84) = *(unsigned char *)(v78[6] + v49);
      unsigned __int8 v54 = v84;
      uint64_t v55 = (void *)swift_bridgeObjectRetain();
      sub_23472B76C(v55, (char *)&v84, (uint64_t)&v85);
      uint64_t v56 = v85;
      char v57 = v86;
      uint64_t v59 = v87;
      uint64_t v58 = v88;
      int v60 = v89;
      char v61 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v84 = v3;
      unint64_t v63 = sub_2347BFCB4(v54);
      uint64_t v64 = v3[2];
      BOOL v65 = (v62 & 1) == 0;
      uint64_t v66 = v64 + v65;
      if (__OFADD__(v64, v65))
      {
        __break(1u);
        goto LABEL_73;
      }
      char v67 = v62;
      if (v3[3] < v66)
      {
        sub_2347CF710(v66, v61);
        unint64_t v68 = sub_2347BFCB4(v54);
        if ((v67 & 1) != (v69 & 1)) {
          goto LABEL_79;
        }
        unint64_t v63 = v68;
        float32x4_t v3 = v84;
        if ((v67 & 1) == 0) {
          goto LABEL_66;
        }
LABEL_41:
        uint64_t v48 = v3[7] + 40 * v63;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v48 = v56;
        *(unsigned char *)(v48 + 8) = v57;
        *(void *)(v48 + 16) = v59;
        *(void *)(v48 + 24) = v58;
        *(_DWORD *)(v48 + 32) = v60;
LABEL_42:
        swift_bridgeObjectRelease();
        int64_t v44 = v83;
        unint64_t v47 = v80;
        continue;
      }
      if (v61)
      {
        float32x4_t v3 = v84;
        if (v62) {
          goto LABEL_41;
        }
      }
      else
      {
        sub_2347D5BCC();
        float32x4_t v3 = v84;
        if (v67) {
          goto LABEL_41;
        }
      }
LABEL_66:
      v3[(v63 >> 6) + 8] |= 1 << v63;
      *(unsigned char *)(v3[6] + v63) = v54;
      uint64_t v70 = v3[7] + 40 * v63;
      *(void *)uint64_t v70 = v56;
      *(unsigned char *)(v70 + 8) = v57;
      *(void *)(v70 + 16) = v59;
      *(void *)(v70 + 24) = v58;
      *(_DWORD *)(v70 + 32) = v60;
      uint64_t v71 = v3[2];
      BOOL v21 = __OFADD__(v71, 1);
      uint64_t v72 = v71 + 1;
      if (v21) {
        goto LABEL_75;
      }
      v3[2] = v72;
      goto LABEL_42;
    }
    break;
  }
  uint64_t v53 = v44 + 4;
  if (v44 + 4 >= v76) {
    goto LABEL_70;
  }
  unint64_t v51 = v74[v53];
  if (v51)
  {
    int64_t v52 = v44 + 4;
    goto LABEL_58;
  }
  while (1)
  {
    int64_t v52 = v53 + 1;
    if (__OFADD__(v53, 1)) {
      break;
    }
    if (v52 >= v76) {
      goto LABEL_70;
    }
    unint64_t v51 = v74[v52];
    ++v53;
    if (v51) {
      goto LABEL_58;
    }
  }
LABEL_78:
  __break(1u);
LABEL_79:
  unint64_t result = sub_2347EF0F0();
  __break(1u);
  return result;
}

unint64_t sub_2346B0B64(float32x4_t a1, float32x4_t a2, __n128 a3, float32x2_t a4)
{
  float32x2_t v46 = *(float32x2_t *)a2.f32;
  float32x2_t v43 = a4;
  float32x2_t v44 = *(float32x2_t *)a1.f32;
  float v4 = vmuls_lane_f32(0.5, a1, 2) * a4.f32[0];
  float v5 = vmuls_lane_f32(vmuls_lane_f32(0.5, a2, 2), a4, 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
  uint64_t v6 = swift_allocObject();
  float32x2_t v7 = vmul_n_f32(vmul_f32(v44, (float32x2_t)0x3F0000003F000000), v43.f32[0]);
  float32x2_t v8 = vsub_f32(0, v7);
  float32x2_t v9 = vmul_lane_f32(vmul_f32(v46, (float32x2_t)0x3F0000003F000000), v43, 1);
  float32x2_t v10 = vadd_f32((float32x2_t)a3.n128_u64[0], v9);
  *(float32x2_t *)&long long v11 = vadd_f32(v10, v8);
  *((float *)&v11 + 2) = (float)(a3.n128_f32[2] + v5) + (float)(0.0 - v4);
  HIDWORD(v11) = 0;
  *(_OWORD *)(v6 + 16) = xmmword_2347F19A0;
  *(_OWORD *)(v6 + 32) = v11;
  *(float32x2_t *)&long long v12 = vadd_f32(v7, v10);
  *((void *)&v12 + 1) = COERCE_UNSIGNED_INT(v4 + (float)(a3.n128_f32[2] + v5));
  *(_OWORD *)(v6 + 48) = v12;
  char v50 = 0;
  sub_23472B76C((void *)v6, &v50, (uint64_t)&v51);
  uint64_t v45 = v51;
  v43.i8[0] = v52;
  v46.i32[0] = v54;
  float32x2_t v13 = vadd_f32((float32x2_t)a3.n128_u64[0], v7);
  *(float32x2_t *)&long long v14 = vadd_f32(v9, v13);
  *((float *)&v14 + 2) = v5 + (float)(a3.n128_f32[2] + v4);
  HIDWORD(v14) = 0;
  float32x2_t v15 = vsub_f32(0, v9);
  *(float32x2_t *)&long long v16 = vadd_f32(v13, v15);
  *((float *)&v16 + 2) = (float)(a3.n128_f32[2] + v4) + (float)(0.0 - v5);
  HIDWORD(v16) = 0;
  long long v35 = v16;
  float32x2_t v17 = vadd_f32((float32x2_t)a3.n128_u64[0], v15);
  *(float32x2_t *)&long long v16 = vadd_f32(v7, v17);
  *((float *)&v16 + 2) = v4 + (float)(a3.n128_f32[2] + (float)(0.0 - v5));
  HIDWORD(v16) = 0;
  float32x2_t v18 = vadd_f32((float32x2_t)a3.n128_u64[0], v8);
  *(float32x2_t *)&long long v19 = vadd_f32(v8, v17);
  *((float *)&v19 + 2) = (float)(0.0 - v4) + (float)(a3.n128_f32[2] + (float)(0.0 - v5));
  HIDWORD(v19) = 0;
  long long v36 = v19;
  long long v37 = v16;
  *(float32x2_t *)&long long v19 = vadd_f32(v15, v18);
  *((float *)&v19 + 2) = (float)(0.0 - v5) + (float)(a3.n128_f32[2] + (float)(0.0 - v4));
  HIDWORD(v19) = 0;
  long long v40 = v19;
  long long v41 = v14;
  *(float32x2_t *)&long long v20 = vadd_f32(v9, v18);
  *((float *)&v20 + 2) = v5 + (float)(a3.n128_f32[2] + (float)(0.0 - v4));
  HIDWORD(v20) = 0;
  long long v39 = v20;
  long long v48 = v53;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_2347F19A0;
  *(_OWORD *)(v21 + 32) = v41;
  *(_OWORD *)(v21 + 48) = v35;
  char v50 = 1;
  sub_23472B76C((void *)v21, &v50, (uint64_t)&v51);
  uint64_t v22 = v51;
  __int8 v23 = v52;
  __int32 v24 = v54;
  long long v42 = v53;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_2347F19A0;
  *(_OWORD *)(v25 + 32) = v37;
  *(_OWORD *)(v25 + 48) = v36;
  char v50 = 2;
  sub_23472B76C((void *)v25, &v50, (uint64_t)&v51);
  uint64_t v26 = v51;
  __int8 v27 = v52;
  __int32 v28 = v54;
  long long v38 = v53;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_2347F19A0;
  *(_OWORD *)(v29 + 32) = v40;
  *(_OWORD *)(v29 + 48) = v39;
  char v50 = 3;
  sub_23472B76C((void *)v29, &v50, (uint64_t)&v51);
  uint64_t v30 = v51;
  __int8 v31 = v52;
  v9.i32[0] = v54;
  long long v49 = v53;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC900);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F1A10;
  *(unsigned char *)(inited + 32) = 0;
  *(void *)(inited + 40) = v45;
  *(unsigned char *)(inited + 48) = v43.i8[0];
  *(_OWORD *)(inited + 56) = v48;
  *(_DWORD *)(inited + 72) = v46.i32[0];
  *(unsigned char *)(inited + 80) = 1;
  *(void *)(inited + 88) = v22;
  *(unsigned char *)(inited + 96) = v23;
  *(_OWORD *)(inited + 104) = v42;
  *(_DWORD *)(inited + 120) = v24;
  *(unsigned char *)(inited + 128) = 2;
  *(void *)(inited + 136) = v26;
  *(unsigned char *)(inited + 144) = v27;
  *(_OWORD *)(inited + 152) = v38;
  *(_DWORD *)(inited + 168) = v28;
  *(unsigned char *)(inited + 176) = 3;
  *(void *)(inited + 184) = v30;
  *(unsigned char *)(inited + 192) = v31;
  *(_OWORD *)(inited + 200) = v49;
  *(_DWORD *)(inited + 216) = v9.i32[0];
  unint64_t v33 = sub_2347AD1BC(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC908);
  swift_arrayDestroy();
  return v33;
}

uint64_t sub_2346B0EE8(uint64_t result, char **a2)
{
  uint64_t v2 = a2;
  float32x4_t v3 = (uint64_t *)result;
  if (*(void *)(*(void *)result + 16) || *((void *)*a2 + 2))
  {
    unint64_t v4 = 0;
    long long v53 = (uint64_t *)result;
    while (v4 < qword_26E76FC88)
    {
      uint64_t v9 = *((unsigned __int8 *)&unk_26E76FC78 + v4 + 32);
      uint64_t v10 = *v3;
      if (!*(void *)(v10 + 16)) {
        goto LABEL_63;
      }
      unint64_t v11 = sub_2347BFCB4(*((unsigned char *)&unk_26E76FC78 + v4 + 32));
      if ((v12 & 1) == 0) {
        goto LABEL_63;
      }
      float32x2_t v13 = *v2;
      if (!*((void *)*v2 + 2)
        || (uint64_t v14 = *(void *)(v10 + 56) + 40 * v11,
            unint64_t v68 = *(char **)v14,
            char v15 = *(unsigned char *)(v14 + 8),
            long long v16 = *(char **)(v14 + 24),
            uint64_t v60 = *(void *)(v14 + 16),
            int v17 = *(_DWORD *)(v14 + 32),
            unint64_t v18 = sub_2347BFCB4(v9),
            (v19 & 1) == 0))
      {
LABEL_63:
        sub_2346B1A38();
        swift_allocError();
        *(void *)uint64_t v52 = v9;
        *(void *)(v52 + 8) = 0;
        *(unsigned char *)(v52 + 16) = 0;
        return swift_willThrow();
      }
      char v55 = v15;
      unint64_t v57 = v4;
      unsigned __int8 v59 = v9;
      uint64_t v20 = *((void *)v13 + 7) + 40 * v18;
      char v56 = *(unsigned char *)(v20 + 8);
      uint64_t v22 = *(void *)(v20 + 16);
      uint64_t v21 = *(void *)(v20 + 24);
      int v23 = *(_DWORD *)(v20 + 32);
      unint64_t v24 = *((void *)v16 + 2);
      uint64_t v58 = *(char **)v20;
      if (v24 >= 2)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v25 = v22;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v26 = v16;
        while (1)
        {
          unint64_t v27 = v24 - 1;
          unint64_t v28 = *((void *)v26 + 2);
          if (v24 - 1 >= v28) {
            break;
          }
          if (v24 - 2 >= v28) {
            goto LABEL_66;
          }
          if (vabds_f32(*(float *)&v26[4 * v24 + 28], *(float *)&v26[4 * v24 + 24]) < 0.0001)
          {
            if (v24 == 2) {
              unint64_t v29 = 1;
            }
            else {
              unint64_t v29 = v24 - 2;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v26 = sub_23473D0FC((uint64_t)v26);
            }
            unint64_t v30 = *((void *)v26 + 2);
            if (v29 >= v30) {
              goto LABEL_71;
            }
            unint64_t v31 = v30 - 1;
            uint64_t v32 = v30 - 1 - v29;
            if (v32 < 0) {
              goto LABEL_75;
            }
            memmove(&v26[4 * v29 + 32], &v26[4 * v29 + 36], 4 * v32);
            *((void *)v26 + 2) = v31;
          }
          unint64_t v24 = v27;
          if (v27 <= 1)
          {
            swift_bridgeObjectRelease();
            long long v16 = v26;
            uint64_t v22 = v25;
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_28:
      uint64_t v33 = v22;
      unint64_t v34 = *(void *)(v21 + 16);
      if (v34 >= 2)
      {
        swift_bridgeObjectRetain();
        long long v35 = (char *)v21;
        while (1)
        {
          unint64_t v36 = v34 - 1;
          unint64_t v37 = *((void *)v35 + 2);
          if (v34 - 1 >= v37) {
            goto LABEL_67;
          }
          if (v34 - 2 >= v37) {
            goto LABEL_68;
          }
          if (vabds_f32(*(float *)&v35[4 * v34 + 28], *(float *)&v35[4 * v34 + 24]) < 0.0001)
          {
            if (v34 == 2) {
              unint64_t v38 = 1;
            }
            else {
              unint64_t v38 = v34 - 2;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v35 = sub_23473D0FC((uint64_t)v35);
            }
            unint64_t v39 = *((void *)v35 + 2);
            if (v38 >= v39) {
              goto LABEL_72;
            }
            unint64_t v40 = v39 - 1;
            uint64_t v41 = v39 - 1 - v38;
            if (v41 < 0) {
              goto LABEL_75;
            }
            memmove(&v35[4 * v38 + 32], &v35[4 * v38 + 36], 4 * v41);
            *((void *)v35 + 2) = v40;
          }
          --v34;
          if (v36 <= 1)
          {
            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
        }
      }
      long long v35 = (char *)v21;
LABEL_45:
      char v61 = v16;
      swift_bridgeObjectRetain();
      uint64_t v42 = swift_bridgeObjectRetain();
      sub_2346DAB38(v42);
      float32x2_t v43 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        float32x2_t v43 = sub_23473D0FC((uint64_t)v43);
      }
      uint64_t v44 = *((void *)v43 + 2);
      char v61 = v43 + 32;
      uint64_t v62 = v44;
      sub_2346AE6C8(&v61);
      unint64_t v45 = *((void *)v43 + 2);
      if (v45 >= 2)
      {
        swift_bridgeObjectRetain();
        float v5 = v43;
        while (1)
        {
          unint64_t v46 = v45 - 1;
          unint64_t v47 = *((void *)v5 + 2);
          if (v45 - 1 >= v47) {
            goto LABEL_69;
          }
          if (v45 - 2 >= v47) {
            goto LABEL_70;
          }
          if (vabds_f32(*(float *)&v5[4 * v45 + 28], *(float *)&v5[4 * v45 + 24]) < 0.0001)
          {
            if (v45 == 2) {
              unint64_t v48 = 1;
            }
            else {
              unint64_t v48 = v45 - 2;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              float v5 = sub_23473D0FC((uint64_t)v5);
            }
            unint64_t v49 = *((void *)v5 + 2);
            if (v48 >= v49) {
              goto LABEL_73;
            }
            unint64_t v50 = v49 - 1;
            uint64_t v51 = v49 - 1 - v48;
            if (v51 < 0) {
              goto LABEL_75;
            }
            memmove(&v5[4 * v48 + 32], &v5[4 * v48 + 36], 4 * v51);
            *((void *)v5 + 2) = v50;
          }
          --v45;
          if (v46 <= 1)
          {
            swift_bridgeObjectRelease();
            goto LABEL_5;
          }
        }
      }
      float v5 = v43;
LABEL_5:
      unint64_t v4 = v57 + 1;
      char v61 = v68;
      LOBYTE(v62) = v55;
      uint64_t v63 = v60;
      uint64_t v64 = v16;
      int v65 = v17;
      uint64_t v6 = swift_bridgeObjectRetain();
      sub_23472B8F0(v6, (uint64_t)v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      float32x4_t v3 = v53;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v61 = (char *)*v53;
      *long long v53 = 0x8000000000000000;
      sub_2347AAD44((uint64_t)v67, v59, isUniquelyReferenced_nonNull_native);
      *long long v53 = (uint64_t)v61;
      swift_bridgeObjectRelease();
      char v61 = v58;
      LOBYTE(v62) = v56;
      uint64_t v63 = v33;
      uint64_t v64 = v35;
      int v65 = v23;
      sub_23472B8F0((uint64_t)v5, (uint64_t)v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v2 = a2;
      char v8 = swift_isUniquelyReferenced_nonNull_native();
      char v61 = *a2;
      *a2 = (char *)0x8000000000000000;
      sub_2347AAD44((uint64_t)v66, v59, v8);
      *a2 = v61;
      unint64_t result = swift_bridgeObjectRelease();
      if (v57 == 3) {
        return result;
      }
    }
    __break(1u);
LABEL_75:
    unint64_t result = sub_2347EEF10();
    __break(1u);
  }
  return result;
}

uint64_t sub_2346B14F8(uint64_t a1)
{
  uint64_t v2 = sub_2347EE370();
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x263F8EE78];
  if (*(void *)(a1 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v34 = MEMORY[0x263F8EE78];
    uint64_t v9 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v10 = &unk_26E76FDB8;
    unint64_t v28 = "nBorder";
    *(void *)&long long v5 = 136315138;
    long long v30 = v5;
    uint64_t v29 = MEMORY[0x263F8EE58] + 8;
    unint64_t v31 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    while (1)
    {
      char v11 = v10[v8 + 32];
      if (*(void *)(a1 + 16) && (unint64_t v12 = sub_2347BFCB4(v10[v8 + 32]), (v13 & 1) != 0))
      {
        uint64_t result = *(void *)(*(void *)(a1 + 56) + 40 * v12);
        uint64_t v33 = result;
        if (!*(void *)(result + 16))
        {
          __break(1u);
          return result;
        }
        swift_bridgeObjectRetain();
        sub_23478E4F4(0, 1);
        sub_2346D9684(v33);
      }
      else
      {
        type metadata accessor for Constants();
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        id v15 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata, v28, v29);
        id v16 = objc_msgSend(v15, sel_bundleIdentifier);

        if (v16)
        {
          sub_2347EE620();
        }
        sub_2346A7A4C();
        sub_2347EEAF0();
        sub_2347EE380();
        int v17 = sub_2347EE350();
        os_log_type_t v18 = sub_2347EE960();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = swift_slowAlloc();
          uint64_t v20 = a1;
          uint64_t v21 = v9;
          uint64_t v22 = v2;
          int v23 = v10;
          uint64_t v24 = swift_slowAlloc();
          uint64_t v33 = v24;
          *(_DWORD *)uint64_t v19 = v30;
          char v32 = v11;
          uint64_t v25 = sub_2347EE690();
          *(void *)(v19 + 4) = sub_234775704(v25, v26, &v33);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23468B000, v17, v18, "Missing edge on %s side", (uint8_t *)v19, 0xCu);
          swift_arrayDestroy();
          uint64_t v27 = v24;
          uint64_t v10 = v23;
          uint64_t v2 = v22;
          uint64_t v9 = v21;
          a1 = v20;
          uint64_t v6 = v31;
          MEMORY[0x237DC8070](v27, -1, -1);
          MEMORY[0x237DC8070](v19, -1, -1);
        }

        (*v9)(v6, v2);
      }
      if (++v8 == 4) {
        return v34;
      }
    }
  }
  return result;
}

uint64_t sub_2346B184C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationGraph();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2346B18A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnimationGraph();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2346B190C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346B1970(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346B19D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_2346B1A38()
{
  unint64_t result = qword_2687AC910;
  if (!qword_2687AC910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AC910);
  }
  return result;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScanItemError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScanItemError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_2346B1B2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_2346B1B34(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ScanItemError()
{
  return &type metadata for ScanItemError;
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5 = 1.0 - a3;
  float32x4_t v6 = vsubq_f32(a1, a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float32x4_t v8 = vaddq_f32(a1, a2);
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  float v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  float v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0) {
    sinf(v11);
  }
  if ((float)(v5 * v11) != 0.0) {
    sinf(v5 * v11);
  }
  float v12 = v11 * a3;
  if (v12 != 0.0) {
    sinf(v12);
  }
}

uint64_t sub_2346B1CC0(float *a1)
{
  uint64_t v2 = v1;
  float v4 = a1[4];
  float v3 = a1[5];
  if (vabds_f32(v4, v3) < 0.00000011921
    || (float v6 = a1[6], v5 = a1[7], vabds_f32(v6, v5) < 0.00000011921)
    || (float v7 = v1[5], v7 <= v4)
    || (float v8 = v1[4], v3 <= v8)
    || (float v9 = v1[7], v9 <= v6)
    || (float v10 = v1[6], v5 <= v10))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2347F19B0;
    *(void *)(v19 + 32) = v1;
    uint64_t v24 = v19;
    sub_2347EE7F0();
    uint64_t v17 = v24;
    goto LABEL_31;
  }
  unint64_t v23 = MEMORY[0x263F8EE78];
  if (v8 < v4)
  {
    type metadata accessor for CurvedElement();
    float v11 = (float *)swift_allocObject();
    v11[4] = v8;
    _OWORD v11[5] = v4;
    v11[6] = v10;
    v11[7] = v9;
    MEMORY[0x237DC6730]();
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2347EE800();
    }
    sub_2347EE820();
    sub_2347EE7F0();
    float v7 = v1[5];
    float v10 = v1[6];
  }
  if (v3 < v7)
  {
    int v12 = *((_DWORD *)v1 + 7);
    type metadata accessor for CurvedElement();
    uint64_t v13 = swift_allocObject();
    *(float *)(v13 + 16) = v3;
    *(float *)(v13 + 20) = v7;
    *(float *)(v13 + 24) = v10;
    *(_DWORD *)(v13 + 28) = v12;
    MEMORY[0x237DC6730]();
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2347EE800();
    }
    sub_2347EE820();
    sub_2347EE7F0();
    float v10 = v1[6];
  }
  if (v4 <= v8) {
    float v4 = v8;
  }
  if (v7 < v3) {
    float v3 = v7;
  }
  if (v10 < v6)
  {
    type metadata accessor for CurvedElement();
    uint64_t v14 = (float *)swift_allocObject();
    v14[4] = v4;
    v14[5] = v3;
    v14[6] = v10;
    v14[7] = v6;
    MEMORY[0x237DC6730]();
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2347EE800();
    }
    sub_2347EE820();
    sub_2347EE7F0();
  }
  float v15 = v1[7];
  if (v5 < v15)
  {
    type metadata accessor for CurvedElement();
    id v16 = (float *)swift_allocObject();
    v16[4] = v4;
    v16[5] = v3;
    v16[6] = v5;
    v16[7] = v15;
    MEMORY[0x237DC6730]();
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2347EE800();
    }
    sub_2347EE820();
    sub_2347EE7F0();
  }
  uint64_t v17 = v23;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
    if (v21) {
      return v17;
    }
    goto LABEL_29;
  }
  if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_29:
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2347F19B0;
    *(void *)(v18 + 32) = v2;
    uint64_t v22 = v18;
    sub_2347EE7F0();
    uint64_t v17 = v22;
LABEL_31:
    swift_retain();
  }
  return v17;
}

BOOL sub_2346B2050(float *a1)
{
  return a1[5] <= v1[4] || v1[5] <= a1[4] || a1[7] <= v1[6] || v1[7] <= a1[6];
}

uint64_t sub_2346B209C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CurvedElement()
{
  return self;
}

int32x2_t sub_2346B20D0(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17)
{
  float32x4_t v98 = a9;
  float32x4_t v99 = a10;
  float32x4_t v96 = a6;
  float32x4_t v97 = a8;
  uint64_t v104 = a1;
  float32x4_t v95 = a5;
  float32x4_t v94 = a4;
  float32x4_t v93 = a3;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC810);
  v100.i64[0] = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v88 - v26;
  uint64_t v28 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v102 = (uint64_t)&v88 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v88 - v32;
  uint64_t v101 = a2;
  sub_2346AAC24(a2, (uint64_t)v27);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v35 = v34(v27, 1, v28);
  uint64_t v103 = v33;
  if (v35 == 1)
  {
    unint64_t v36 = self;
    v92.i64[0] = (uint64_t)v25;
    uint64_t v37 = v28;
    unint64_t v38 = v36;
    id v39 = objc_msgSend(v36, sel_degrees);
    sub_2346B2804();
    unint64_t v40 = v103;
    sub_2347ED110();
    uint64_t v41 = v38;
    uint64_t v28 = v37;
    uint64_t v25 = (char *)v92.i64[0];
    id v42 = objc_msgSend(v41, sel_degrees);
    sub_2347ED110();
    *unint64_t v40 = 0;
    *((_DWORD *)v40 + 2) = 0;
    sub_2346AAC8C((uint64_t)v27);
  }
  else
  {
    sub_2346B19D4((uint64_t)v27, (uint64_t)v33);
  }
  float32x4_t v92 = a17;
  sub_2346AAC24(v104, (uint64_t)v25);
  if (v34(v25, 1, v28) == 1)
  {
    float32x2_t v43 = self;
    id v44 = objc_msgSend(v43, sel_degrees);
    uint64_t v45 = v102;
    sub_2346B2804();
    sub_2347ED110();
    id v46 = objc_msgSend(v43, sel_degrees);
    sub_2347ED110();
    *(void *)uint64_t v45 = 0;
    *(_DWORD *)(v45 + 8) = 0;
    sub_2346AAC8C((uint64_t)v25);
  }
  else
  {
    uint64_t v45 = v102;
    sub_2346B19D4((uint64_t)v25, v102);
  }
  *(void *)&long long v47 = *(void *)v45;
  long long v91 = v47;
  float v48 = *(float *)(v45 + 8);
  unint64_t v49 = self;
  id v50 = objc_msgSend(v49, sel_radians);
  sub_2347ED130();

  sub_2347ED120();
  double v52 = v51;
  long long v53 = *(void (**)(char *, uint64_t))(v100.i64[0] + 8);
  v53(v21, v19);
  float v54 = v52;
  v55.f32[0] = a7 * -0.5;
  float32x4_t v100 = v55;
  __float2 v56 = __sincosf_stret(v54);
  *(float *)&long long v57 = *(float *)&v91 + (float)(v48 * v56.__cosval);
  long long v90 = v57;
  *(float *)&long long v58 = *((float *)&v91 + 1) + (float)(v48 * v56.__sinval);
  long long v91 = v58;
  *(void *)&long long v58 = *(void *)v45;
  long long v89 = v58;
  float v59 = *(float *)(v45 + 8);
  id v60 = objc_msgSend(v49, sel_radians);
  sub_2347ED130();

  sub_2347ED120();
  double v62 = v61;
  v53(v21, v19);
  float v63 = v62;
  *(float *)&long long v64 = a7 * 0.5;
  long long v88 = v64;
  __float2 v65 = __sincosf_stret(v63);
  float32x4_t v66 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v93, *(float *)&v90), v94, v100.f32[0]), v95, *(float *)&v91), v96);
  float32x4_t v67 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v93, *(float *)&v89 + (float)(v59 * v65.__cosval)), v94, *(float *)&v88), v95, *((float *)&v89 + 1) + (float)(v59 * v65.__sinval)), v96);
  float32x4_t v68 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v97, v66.f32[0]), v98, *(float32x2_t *)v66.f32, 1), v99, v66, 2), v92, v66, 3);
  float32x4_t v99 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v97, v67.f32[0]), v98, *(float32x2_t *)v67.f32, 1), v99, v67, 2), v92, v67, 3);
  float32x4_t v100 = v68;
  uint64_t v69 = (uint64_t)v103;
  LODWORD(v70) = HIDWORD(*v103);
  float v71 = v99.f32[0] - COERCE_FLOAT(*v103);
  *(float *)&double v62 = v99.f32[2] - v70;
  float v72 = atan2f(v68.f32[2] - v70, v68.f32[0] - COERCE_FLOAT(*v103));
  float v73 = atan2f(*(float *)&v62, v71);
  float v74 = v72 + 6.2832;
  if (v72 >= 0.0) {
    float v74 = v72;
  }
  else {
    float v73 = v73 + 6.2832;
  }
  if (v74 < 6.2832)
  {
    float v75 = v74;
  }
  else
  {
    float v73 = v73 + -6.2832;
    float v75 = v74 + -6.2832;
  }
  if (v73 >= v75) {
    float v76 = v73;
  }
  else {
    float v76 = v73 + 6.2832;
  }
  id v77 = objc_msgSend(v49, sel_radians);
  sub_2347ED130();

  sub_2347ED120();
  double v79 = v78;
  v53(v21, v19);
  float v80 = v79;
  if (v75 < v80) {
    float v75 = v79;
  }
  id v81 = objc_msgSend(v49, sel_radians);
  sub_2347ED130();

  sub_2347ED120();
  double v83 = v82;
  v53(v21, v19);
  float v84 = v83;
  if (v76 >= v84) {
    float v85 = v83;
  }
  else {
    float v85 = v76;
  }
  sub_2346AAC8C(v101);
  sub_2346AAC8C(v104);
  sub_2346B2844(v102);
  sub_2346B2844(v69);
  type metadata accessor for CurvedElement();
  uint64_t v86 = swift_allocObject();
  *(float *)(v86 + 16) = v75;
  *(float *)(v86 + 20) = v85;
  int32x2_t result = vzip2_s32(*(int32x2_t *)v100.f32, *(int32x2_t *)v99.f32);
  *(int32x2_t *)(v86 + 24) = result;
  return result;
}

unint64_t sub_2346B2804()
{
  unint64_t result = qword_2687AE260;
  if (!qword_2687AE260)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2687AE260);
  }
  return result;
}

uint64_t sub_2346B2844(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2346B28A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_2346B28B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_2346B28C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_2346B28DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_2346B28F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_2346B2904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_2346B2918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t sub_2346B292C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t sub_2346B2940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t sub_2346B2954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t sub_2346B2968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t sub_2346B297C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t sub_2346B2990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t sub_2346B29A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t sub_2346B29B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t sub_2346B29CC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2347ED5C0();
  MEMORY[0x270FA5388](v4);
  float v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x270FA5388](v7);
  float v10 = (char *)&v40 - v9;
  uint64_t v41 = v11;
  int v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v49 = a1 + qword_2687BDFA8;
  id v50 = v12;
  uint64_t v51 = v11 + 16;
  ((void (*)(char *, double))v12)((char *)&v40 - v9, v8);
  uint64_t v13 = (void *)(v2 + 24);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v2 + 24);
  if (*(void *)(v14 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_2347BFA88((uint64_t)v10);
    if (v16)
    {
      uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v4);
      return v17;
    }
    swift_bridgeObjectRelease();
  }
  long long v47 = *(void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v48 = v41 + 8;
  v47(v10, v4);
  uint64_t v53 = MEMORY[0x263F8EE78];
  uint64_t v18 = *(void *)(v2 + 16);
  if (v18 < 0) {
    goto LABEL_28;
  }
  if (!v18) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v46 = sub_2347ED8E0();
  long long v45 = *(_OWORD *)(v2 + 32);
  uint64_t v19 = *(void **)(v2 + 48);
  uint64_t v43 = *(void *)(v2 + 56);
  id v44 = v19;
  long long v42 = xmmword_2347F0FA0;
  while (1)
  {
    sub_2347ED890();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = v42;
    *(void *)(v21 + 56) = sub_2347ED930();
    *(void *)(v21 + 64) = MEMORY[0x263F16178];
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v21 + 32));
    id v22 = v44;
    sub_2347ED920();
    sub_2347ED650();
    swift_allocObject();
    sub_2347ED640();
    sub_2347EDFB0();
    sub_2347ED700();
    swift_retain();
    uint64_t v23 = sub_2347EDF90();
    MEMORY[0x237DC6730](v23);
    if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2347EE800();
    }
    sub_2347EE820();
    sub_2347EE7F0();
    v50(v6, v49, v4);
    uint64_t v24 = v53;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v52 = (void *)*v13;
    uint64_t v26 = v52;
    *uint64_t v13 = 0x8000000000000000;
    unint64_t v28 = sub_2347BFA88((uint64_t)v6);
    uint64_t v29 = v26[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      break;
    }
    char v32 = v27;
    if (v26[3] >= v31)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        int v35 = v52;
        if (v27) {
          goto LABEL_8;
        }
      }
      else
      {
        sub_2347D54E0();
        int v35 = v52;
        if (v32) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      sub_2347CEBE8(v31, isUniquelyReferenced_nonNull_native);
      unint64_t v33 = sub_2347BFA88((uint64_t)v6);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_29;
      }
      unint64_t v28 = v33;
      int v35 = v52;
      if (v32)
      {
LABEL_8:
        uint64_t v20 = v35[7];
        swift_bridgeObjectRelease();
        *(void *)(v20 + 8 * v28) = v24;
        goto LABEL_9;
      }
    }
    v35[(v28 >> 6) + 8] |= 1 << v28;
    v50((char *)(v35[6] + *(void *)(v41 + 72) * v28), (uint64_t)v6, v4);
    *(void *)(v35[7] + 8 * v28) = v24;
    uint64_t v36 = v35[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37) {
      goto LABEL_27;
    }
    v35[2] = v38;
LABEL_9:
    *uint64_t v13 = v35;
    swift_bridgeObjectRelease();
    v47(v6, v4);
    swift_endAccess();
    swift_release();
    if (!--v18) {
      return v53;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = sub_2347EF0F0();
  __break(1u);
  return result;
}

uint64_t sub_2346B2EA8()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v16 = v1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(v1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v7 << 6);
    }
    else
    {
      int64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_35;
      }
      if (v10 >= v5)
      {
LABEL_33:
        swift_release();
        *(void *)(v0 + 24) = MEMORY[0x263F8EE80];
        return swift_bridgeObjectRelease();
      }
      unint64_t v11 = *(void *)(v16 + 8 * v10);
      ++v7;
      if (!v11)
      {
        int64_t v7 = v10 + 1;
        if (v10 + 1 >= v5) {
          goto LABEL_33;
        }
        unint64_t v11 = *(void *)(v16 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 2;
          if (v10 + 2 >= v5) {
            goto LABEL_33;
          }
          unint64_t v11 = *(void *)(v16 + 8 * v7);
          if (!v11)
          {
            int64_t v7 = v10 + 3;
            if (v10 + 3 >= v5) {
              goto LABEL_33;
            }
            unint64_t v11 = *(void *)(v16 + 8 * v7);
            if (!v11)
            {
              int64_t v12 = v10 + 4;
              if (v12 >= v5) {
                goto LABEL_33;
              }
              unint64_t v11 = *(void *)(v16 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  int64_t v7 = v12 + 1;
                  if (__OFADD__(v12, 1)) {
                    goto LABEL_36;
                  }
                  if (v7 >= v5) {
                    goto LABEL_33;
                  }
                  unint64_t v11 = *(void *)(v16 + 8 * v7);
                  ++v12;
                  if (v11) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v7 = v12;
            }
          }
        }
      }
LABEL_22:
      unint64_t v4 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    }
    unint64_t v13 = *(void *)(*(void *)(v1 + 56) + 8 * v9);
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = sub_2347EEEC0();
      uint64_t v14 = result;
      if (!result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v14) {
        goto LABEL_4;
      }
    }
    if (v14 < 1) {
      break;
    }
    uint64_t v15 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        MEMORY[0x237DC6CF0](v15, v13);
      }
      else {
        swift_retain();
      }
      ++v15;
      sub_2347ED650();
      sub_2347ED6F0();
      swift_release();
    }
    while (v14 != v15);
LABEL_4:
    uint64_t result = swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_2346B3114()
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DebugEntityPools()
{
  return self;
}

BOOL sub_2346B3180(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t _s8RoomPlan08CapturedA0V5ErrorO9hashValueSivg_0()
{
  return sub_2347EF200();
}

uint64_t sub_2346B31E0()
{
  return sub_2347EF1D0();
}

uint64_t sub_2346B320C()
{
  return sub_2347EF200();
}

uint64_t sub_2346B3250()
{
  uint64_t v1 = v0;
  v45[1] = *MEMORY[0x263EF8340];
  uint64_t v39 = sub_2347EE370();
  uint64_t v2 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  unint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_2347ED670();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v43 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_2347DD0CC();
  unint64_t v9 = v7;
  if (v7 >> 62)
  {
    uint64_t v10 = sub_2347EEEC0();
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10)
    {
LABEL_3:
      if (v10 < 1) {
        __break(1u);
      }
      uint64_t v11 = 0;
      unint64_t v12 = v9 & 0xC000000000000001;
      uint64_t v41 = (void (**)(char *, uint64_t))(v5 + 8);
      BOOL v37 = (void (**)(char *, uint64_t))(v2 + 8);
      uint64_t v38 = v4;
      unint64_t v33 = "nBorder";
      *(void *)&long long v8 = 136315138;
      long long v35 = v8;
      uint64_t v34 = MEMORY[0x263F8EE58] + 8;
      uint64_t v36 = v1;
      unint64_t v42 = v9 & 0xC000000000000001;
      while (1)
      {
        if (v12)
        {
          uint64_t v13 = MEMORY[0x237DC6CF0](v11, v9);
        }
        else
        {
          uint64_t v13 = *(void *)(v9 + 8 * v11 + 32);
          swift_retain();
        }
        if (*(void *)(v13 + qword_2687BDFC8))
        {
          float v14 = *(float *)(v1 + 156);
          LODWORD(v45[0]) = 0;
          swift_retain();
          REMaterialParameterBlockGetFloat();
          if (v14 != *(float *)v45)
          {
            REMaterialParameterBlockSetFloat();
            uint64_t v15 = v43;
            sub_2347EDEA0();
            sub_2347ED600();
            (*v41)(v15, v44);
            REMeshComponentGetComponentType();
            if (REEntityGetComponentByClass())
            {
              REMeshComponentRemoveAllMaterials();
              REMeshComponentAddMaterial();
              REMaterialParameterBlockArrayComponentGetComponentType();
              REEntityGetOrAddComponentByClass();
              if (REMaterialParameterBlockArrayComponentSize() != 1) {
                REMaterialParameterBlockArrayComponentResize();
              }
              REMaterialParameterBlockArrayComponentSetBlockAtIndex();
              swift_release();
              swift_release();
            }
            else
            {
              sub_2346BB03C();
              uint64_t v16 = (void *)swift_allocError();
              *(void *)uint64_t v17 = 0;
              *(void *)(v17 + 8) = 0;
              *(unsigned char *)(v17 + 16) = 4;
              swift_willThrow();
              swift_release();
              type metadata accessor for Constants();
              uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
              id v19 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata, v33, v34);
              id v20 = objc_msgSend(v19, sel_bundleIdentifier);

              if (v20)
              {
                sub_2347EE620();
              }
              sub_2346A7A4C();
              sub_2347EEAF0();
              uint64_t v21 = v38;
              sub_2347EE380();
              id v22 = v16;
              id v23 = v16;
              uint64_t v24 = sub_2347EE350();
              os_log_type_t v25 = sub_2347EE960();
              uint64_t v40 = v24;
              if (os_log_type_enabled(v24, v25))
              {
                uint64_t v26 = swift_slowAlloc();
                uint64_t v27 = swift_slowAlloc();
                v45[0] = v27;
                *(_DWORD *)uint64_t v26 = v35;
                swift_getErrorValue();
                uint64_t v28 = sub_2347EF100();
                *(void *)(v26 + 4) = sub_234775704(v28, v29, v45);
                swift_bridgeObjectRelease();

                BOOL v30 = v40;
                _os_log_impl(&dword_23468B000, v40, v25, "cannot update edge line width: %s", (uint8_t *)v26, 0xCu);
                swift_arrayDestroy();
                uint64_t v31 = v27;
                uint64_t v1 = v36;
                MEMORY[0x237DC8070](v31, -1, -1);
                MEMORY[0x237DC8070](v26, -1, -1);
                swift_release();
              }
              else
              {
                swift_release();
              }
              (*v37)(v21, v39);
            }
            unint64_t v12 = v42;
            goto LABEL_7;
          }
          swift_release();
        }
        swift_release();
LABEL_7:
        if (v10 == ++v11) {
          return swift_bridgeObjectRelease();
        }
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346B388C(uint64_t a1, char a2, double a3)
{
  int v98 = a2 & 1;
  uint64_t v97 = sub_2347EE370();
  uint64_t v6 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  float v85 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v86 = (char *)&v81 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v87 = (char *)&v81 - v11;
  MEMORY[0x270FA5388](v12);
  float v14 = (char *)&v81 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC930);
  MEMORY[0x270FA5388](v15 - 8);
  long long v91 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v90 = (char *)&v81 - v18;
  swift_beginAccess();
  uint64_t v82 = v3;
  int64_t v19 = *(void *)(v3 + 96);
  uint64_t v20 = *(void *)(v19 + 64);
  int64_t v88 = v19 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  uint64_t i = v22 & v20;
  int64_t v92 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v96 = v6 + 8;
  int64_t v94 = v19;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  long long v89 = "nBorder";
  *(void *)&long long v26 = 136315138;
  long long v93 = v26;
  uint64_t v83 = MEMORY[0x263F8EE58] + 8;
  uint64_t v84 = (uint64_t)v14;
  uint64_t v95 = a1;
  if (i) {
    goto LABEL_6;
  }
  while (1)
  {
    BOOL v27 = __OFADD__(v25++, 1);
    if (v27)
    {
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (v25 >= v92) {
      goto LABEL_25;
    }
    uint64_t v28 = *(void *)(v88 + 8 * v25);
    if (!v28) {
      break;
    }
LABEL_19:
    for (uint64_t i = (v28 - 1) & v28; ; i &= i - 1)
    {
      swift_retain();
      sub_2347499BC(a1, v98, a3);
      uint64_t result = swift_release();
      if (!i) {
        break;
      }
LABEL_6:
      ;
    }
  }
  int64_t v29 = v25 + 1;
  if (v25 + 1 >= v92) {
    goto LABEL_25;
  }
  uint64_t v28 = *(void *)(v88 + 8 * v29);
  if (v28) {
    goto LABEL_18;
  }
  int64_t v29 = v25 + 2;
  if (v25 + 2 >= v92) {
    goto LABEL_25;
  }
  uint64_t v28 = *(void *)(v88 + 8 * v29);
  if (v28) {
    goto LABEL_18;
  }
  int64_t v29 = v25 + 3;
  if (v25 + 3 >= v92) {
    goto LABEL_25;
  }
  uint64_t v28 = *(void *)(v88 + 8 * v29);
  if (v28)
  {
LABEL_18:
    int64_t v25 = v29;
    goto LABEL_19;
  }
  int64_t v29 = v25 + 4;
  if (v25 + 4 < v92)
  {
    uint64_t v28 = *(void *)(v88 + 8 * v29);
    if (!v28)
    {
      while (1)
      {
        int64_t v25 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          break;
        }
        if (v25 >= v92) {
          goto LABEL_25;
        }
        uint64_t v28 = *(void *)(v88 + 8 * v25);
        ++v29;
        if (v28) {
          goto LABEL_19;
        }
      }
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    goto LABEL_18;
  }
LABEL_25:
  swift_release();
  uint64_t v30 = v82;
  swift_beginAccess();
  int64_t v31 = *(void *)(v30 + 120);
  uint64_t v32 = *(void *)(v31 + 64);
  uint64_t v87 = (char *)(v31 + 64);
  uint64_t v33 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  uint64_t j = v34 & v32;
  int64_t v88 = (unint64_t)(v33 + 63) >> 6;
  int64_t v92 = v31;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v36 = 0;
  uint64_t v84 = MEMORY[0x263F8EE58] + 8;
  if (j) {
    goto LABEL_30;
  }
  while (1)
  {
    BOOL v27 = __OFADD__(v36++, 1);
    if (v27) {
      goto LABEL_128;
    }
    if (v36 >= v88) {
      break;
    }
    uint64_t v37 = *(void *)&v87[8 * v36];
    uint64_t v39 = (uint64_t)v90;
    uint64_t v38 = (uint64_t)v91;
    if (!v37)
    {
      int64_t v40 = v36 + 1;
      if (v36 + 1 >= v88) {
        goto LABEL_50;
      }
      uint64_t v37 = *(void *)&v87[8 * v40];
      if (!v37)
      {
        int64_t v40 = v36 + 2;
        if (v36 + 2 >= v88) {
          goto LABEL_50;
        }
        uint64_t v37 = *(void *)&v87[8 * v40];
        if (!v37)
        {
          int64_t v40 = v36 + 3;
          if (v36 + 3 >= v88) {
            goto LABEL_50;
          }
          uint64_t v37 = *(void *)&v87[8 * v40];
          if (!v37)
          {
            int64_t v40 = v36 + 4;
            if (v36 + 4 >= v88) {
              goto LABEL_50;
            }
            uint64_t v37 = *(void *)&v87[8 * v40];
            if (!v37)
            {
              while (1)
              {
                int64_t v36 = v40 + 1;
                if (__OFADD__(v40, 1)) {
                  break;
                }
                if (v36 >= v88) {
                  goto LABEL_50;
                }
                uint64_t v37 = *(void *)&v87[8 * v36];
                ++v40;
                if (v37) {
                  goto LABEL_43;
                }
              }
LABEL_133:
              __break(1u);
              goto LABEL_134;
            }
          }
        }
      }
      int64_t v36 = v40;
    }
LABEL_43:
    for (uint64_t j = (v37 - 1) & v37; ; j &= j - 1)
    {
      swift_retain();
      sub_2347499BC(a1, v98, a3);
      uint64_t result = swift_release();
      if (!j) {
        break;
      }
LABEL_30:
      ;
    }
  }
  uint64_t v39 = (uint64_t)v90;
  uint64_t v38 = (uint64_t)v91;
LABEL_50:
  swift_release();
  uint64_t v41 = v82;
  swift_beginAccess();
  int64_t v42 = *(void *)(v41 + 112);
  uint64_t v43 = *(void *)(v42 + 64);
  uint64_t v84 = v42 + 64;
  uint64_t v44 = 1 << *(unsigned char *)(v42 + 32);
  uint64_t v45 = -1;
  if (v44 < 64) {
    uint64_t v45 = ~(-1 << v44);
  }
  unint64_t v46 = v45 & v43;
  int64_t v88 = (unint64_t)(v44 + 63) >> 6;
  uint64_t v83 = v88 - 1;
  int64_t v92 = v42;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v47 = 0;
  uint64_t v87 = (char *)(MEMORY[0x263F8EE58] + 8);
  while (2)
  {
    if (v46)
    {
      unint64_t v49 = __clz(__rbit64(v46));
      v46 &= v46 - 1;
      int64_t v94 = v47;
      unint64_t v50 = v49 | (v47 << 6);
      goto LABEL_55;
    }
    int64_t v56 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      goto LABEL_131;
    }
    if (v56 >= v88) {
      goto LABEL_66;
    }
    unint64_t v57 = *(void *)(v84 + 8 * v56);
    if (!v57)
    {
      v47 += 2;
      if (v56 + 1 >= v88)
      {
LABEL_78:
        int64_t v94 = v56;
        goto LABEL_67;
      }
      unint64_t v57 = *(void *)(v84 + 8 * v47);
      if (v57)
      {
LABEL_62:
        int64_t v56 = v47;
        goto LABEL_59;
      }
      if (v56 + 2 < v88)
      {
        unint64_t v57 = *(void *)(v84 + 8 * (v56 + 2));
        if (v57)
        {
          v56 += 2;
          goto LABEL_59;
        }
        int64_t v47 = v56 + 3;
        if (v56 + 3 < v88)
        {
          unint64_t v57 = *(void *)(v84 + 8 * v47);
          if (v57) {
            goto LABEL_62;
          }
          while (1)
          {
            int64_t v56 = v47 + 1;
            if (__OFADD__(v47, 1)) {
              goto LABEL_136;
            }
            if (v56 >= v88) {
              break;
            }
            unint64_t v57 = *(void *)(v84 + 8 * v56);
            ++v47;
            if (v57) {
              goto LABEL_59;
            }
          }
          int64_t v56 = v83;
          goto LABEL_78;
        }
        int64_t v94 = v56 + 2;
LABEL_67:
        uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC938);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v38, 1, 1, v58);
        unint64_t v46 = 0;
        goto LABEL_68;
      }
LABEL_66:
      int64_t v94 = v47;
      goto LABEL_67;
    }
LABEL_59:
    unint64_t v46 = (v57 - 1) & v57;
    unint64_t v50 = __clz(__rbit64(v57)) + (v56 << 6);
    int64_t v94 = v56;
LABEL_55:
    int64_t v51 = v92;
    uint64_t v52 = *(void *)(v92 + 48);
    uint64_t v53 = sub_2347ED5C0();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v53 - 8) + 16))(v38, v52 + *(void *)(*(void *)(v53 - 8) + 72) * v50, v53);
    uint64_t v54 = *(void *)(v51 + 56);
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC938);
    *(void *)(v38 + *(int *)(v55 + 48)) = *(void *)(v54 + 8 * v50);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v38, 0, 1, v55);
    swift_retain();
LABEL_68:
    sub_2346BB504(v38, v39);
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC938);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v39, 1, v59) != 1)
    {
      sub_2346D4018(a1, v98, a3);
      swift_release();
      uint64_t v48 = sub_2347ED5C0();
      uint64_t v39 = (uint64_t)v90;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8))(v90, v48);
      uint64_t v38 = (uint64_t)v91;
      int64_t v47 = v94;
      continue;
    }
    break;
  }
  swift_release();
  uint64_t v60 = v82;
  swift_beginAccess();
  int64_t v61 = *(void *)(v60 + 104);
  uint64_t v62 = *(void *)(v61 + 64);
  long long v91 = (char *)(v61 + 64);
  uint64_t v63 = 1 << *(unsigned char *)(v61 + 32);
  uint64_t v64 = -1;
  if (v63 < 64) {
    uint64_t v64 = ~(-1 << v63);
  }
  uint64_t k = v64 & v62;
  int64_t v92 = (unint64_t)(v63 + 63) >> 6;
  int64_t v94 = v61;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v66 = 0;
  long long v90 = (char *)(MEMORY[0x263F8EE58] + 8);
  if (k) {
    goto LABEL_84;
  }
  while (2)
  {
    BOOL v27 = __OFADD__(v66++, 1);
    if (v27) {
      goto LABEL_129;
    }
    if (v66 >= v92) {
      break;
    }
    uint64_t v67 = *(void *)&v91[8 * v66];
    if (v67) {
      goto LABEL_97;
    }
    int64_t v68 = v66 + 1;
    if (v66 + 1 >= v92) {
      break;
    }
    uint64_t v67 = *(void *)&v91[8 * v68];
    if (v67) {
      goto LABEL_96;
    }
    int64_t v68 = v66 + 2;
    if (v66 + 2 >= v92) {
      break;
    }
    uint64_t v67 = *(void *)&v91[8 * v68];
    if (v67) {
      goto LABEL_96;
    }
    int64_t v68 = v66 + 3;
    if (v66 + 3 >= v92) {
      break;
    }
    uint64_t v67 = *(void *)&v91[8 * v68];
    if (v67) {
      goto LABEL_96;
    }
    int64_t v68 = v66 + 4;
    if (v66 + 4 < v92)
    {
      uint64_t v67 = *(void *)&v91[8 * v68];
      if (!v67)
      {
        while (1)
        {
          int64_t v66 = v68 + 1;
          if (__OFADD__(v68, 1)) {
            break;
          }
          if (v66 >= v92) {
            goto LABEL_103;
          }
          uint64_t v67 = *(void *)&v91[8 * v66];
          ++v68;
          if (v67) {
            goto LABEL_97;
          }
        }
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
LABEL_96:
      int64_t v66 = v68;
LABEL_97:
      for (uint64_t k = (v67 - 1) & v67; ; k &= k - 1)
      {
        swift_retain();
        sub_2346BD624(a1, v98, a3);
        uint64_t result = swift_release();
        if (!k) {
          break;
        }
LABEL_84:
        ;
      }
      continue;
    }
    break;
  }
LABEL_103:
  swift_release();
  uint64_t v69 = v82;
  swift_beginAccess();
  uint64_t v70 = *(void *)(v69 + 128);
  uint64_t v73 = *(void *)(v70 + 64);
  uint64_t v72 = v70 + 64;
  uint64_t v71 = v73;
  uint64_t v74 = 1 << *(unsigned char *)(*(void *)(v69 + 128) + 32);
  uint64_t v75 = -1;
  if (v74 < 64) {
    uint64_t v75 = ~(-1 << v74);
  }
  uint64_t v76 = v75 & v71;
  int64_t v77 = (unint64_t)(v74 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v78 = 0;
  while (2)
  {
    if (v76)
    {
      v76 &= v76 - 1;
LABEL_107:
      swift_retain();
      sub_2347D8A20();
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  BOOL v27 = __OFADD__(v78++, 1);
  if (v27) {
    goto LABEL_130;
  }
  if (v78 >= v77) {
    return swift_release();
  }
  uint64_t v79 = *(void *)(v72 + 8 * v78);
  if (v79)
  {
LABEL_121:
    uint64_t v76 = (v79 - 1) & v79;
    goto LABEL_107;
  }
  int64_t v80 = v78 + 1;
  if (v78 + 1 >= v77) {
    return swift_release();
  }
  uint64_t v79 = *(void *)(v72 + 8 * v80);
  if (v79) {
    goto LABEL_120;
  }
  int64_t v80 = v78 + 2;
  if (v78 + 2 >= v77) {
    return swift_release();
  }
  uint64_t v79 = *(void *)(v72 + 8 * v80);
  if (v79) {
    goto LABEL_120;
  }
  int64_t v80 = v78 + 3;
  if (v78 + 3 >= v77) {
    return swift_release();
  }
  uint64_t v79 = *(void *)(v72 + 8 * v80);
  if (v79) {
    goto LABEL_120;
  }
  int64_t v80 = v78 + 4;
  if (v78 + 4 >= v77) {
    return swift_release();
  }
  uint64_t v79 = *(void *)(v72 + 8 * v80);
  if (v79)
  {
LABEL_120:
    int64_t v78 = v80;
    goto LABEL_121;
  }
  while (1)
  {
    int64_t v78 = v80 + 1;
    if (__OFADD__(v80, 1)) {
      break;
    }
    if (v78 >= v77) {
      return swift_release();
    }
    uint64_t v79 = *(void *)(v72 + 8 * v78);
    ++v80;
    if (v79) {
      goto LABEL_121;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
  return result;
}

uint64_t sub_2346B4C50(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2347EE370();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int64_t v56 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v59 = (char *)v48 - v8;
  MEMORY[0x270FA5388](v9);
  MEMORY[0x270FA5388](v10);
  v48[0] = (char *)v48 - v11;
  uint64_t v12 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12 - 8);
  *(void *)&long long v60 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CapturedRoom.Surface(0) - 8;
  MEMORY[0x270FA5388](v15);
  unint64_t v57 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v48 - v19;
  uint64_t v52 = a1;
  uint64_t v21 = *a1;
  uint64_t v22 = *(void *)(*a1 + 16);
  uint64_t v61 = v4;
  uint64_t v50 = v5;
  uint64_t v63 = v2;
  uint64_t v51 = v18;
  if (v22)
  {
    uint64_t v49 = v13;
    uint64_t v23 = v21 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v62 = *(void *)(v18 + 72);
    *(void *)&long long v58 = v5 + 8;
    v48[1] = v21;
    swift_bridgeObjectRetain();
    uint64_t v53 = "nBorder";
    *(void *)&long long v24 = 136315138;
    long long v55 = v24;
    uint64_t v54 = (char *)(MEMORY[0x263F8EE58] + 8);
    do
    {
      sub_2346BB994(v23, (uint64_t)v20, type metadata accessor for CapturedRoom.Surface);
      sub_2346B6684((uint64_t)v20);
      sub_2346BB9FC((uint64_t)v20, type metadata accessor for CapturedRoom.Surface);
      v23 += v62;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease();
    uint64_t v13 = v49;
  }
  uint64_t v25 = v52[5];
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = v60;
  if (v26)
  {
    uint64_t v28 = v25 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v62 = *(void *)(v13 + 72);
    uint64_t v53 = (char *)v25;
    swift_bridgeObjectRetain();
    uint64_t v54 = "nBorder";
    *(void *)&long long v29 = 136315138;
    long long v58 = v29;
    *(void *)&long long v55 = MEMORY[0x263F8EE58] + 8;
    do
    {
      sub_2346BB994(v28, v27, type metadata accessor for CapturedRoom.Object);
      sub_2346B8FA8(v27);
      sub_2346BB9FC(v27, type metadata accessor for CapturedRoom.Object);
      v28 += v62;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  uint64_t v64 = v52[3];
  swift_bridgeObjectRetain();
  uint64_t v30 = swift_bridgeObjectRetain();
  sub_2346D9918(v30);
  uint64_t v31 = swift_bridgeObjectRetain();
  sub_2346D9918(v31);
  uint64_t v33 = *(void *)(v64 + 16);
  if (v33)
  {
    unint64_t v34 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    *(void *)&long long v55 = v64;
    uint64_t v35 = v64 + v34;
    uint64_t v36 = *(void *)(v51 + 72);
    uint64_t v62 = v50 + 8;
    *(void *)&long long v58 = "nBorder";
    *(void *)&long long v32 = 136315138;
    long long v60 = v32;
    uint64_t v59 = (char *)(MEMORY[0x263F8EE58] + 8);
    uint64_t v37 = (unsigned __int8 *)v57;
    do
    {
      sub_2346BB994(v35, (uint64_t)v37, type metadata accessor for CapturedRoom.Surface);
      int v38 = *v37;
      unsigned int v39 = v38 - 6;
      int v40 = v38 & 1;
      if (v39 <= 0xFFFFFFFB && v40 == 0) {
        char v42 = *(unsigned char *)(v2 + 88) ^ 1;
      }
      else {
        char v42 = 0;
      }
      if (*(unsigned char *)(v2 + 136) == 1 || (v42 & 1) != 0)
      {
        sub_2346B79A8((uint64_t)v37);
      }
      else if (*(unsigned char *)(v2 + 88) == 1)
      {
        sub_2346B759C((uint64_t)v37);
      }
      sub_2346BB9FC((uint64_t)v37, type metadata accessor for CapturedRoom.Surface);
      v35 += v36;
      --v33;
    }
    while (v33);
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (*(unsigned char *)(v2 + 88) == 1)
  {
    uint64_t v44 = v52[4];
    uint64_t v45 = *(void *)(v44 + 16);
    if (v45)
    {
      uint64_t v46 = v44 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
      uint64_t v47 = *(void *)(v51 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_2346B84C0(v46);
        v46 += v47;
        --v45;
      }
      while (v45);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_2346B5B90(uint64_t a1)
{
  uint64_t result = sub_2347EE370();
  if (*(unsigned char *)(v1 + 88) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      uint64_t v6 = *(void *)(type metadata accessor for CapturedRoom.Surface(0) - 8);
      uint64_t v7 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      uint64_t v8 = *(void *)(v6 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_2346B84C0(v7);
        v7 += v8;
        --v5;
      }
      while (v5);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_2346B5C88(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v81 = (uint64_t)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_2347ED5C0();
  uint64_t v85 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v75 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v69 - v10;
  uint64_t v82 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v72 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v83 = (uint64_t)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v69 - v14;
  uint64_t v73 = v2;
  uint64_t v74 = a1;
  uint64_t v16 = *a1;
  uint64_t v17 = *(void *)(*a1 + 16);
  uint64_t v84 = v7;
  if (v17)
  {
    uint64_t v70 = v4;
    uint64_t v71 = v5;
    int64_t v80 = &v15[*(int *)(v82 + 44)];
    uint64_t v18 = (uint64_t *)(v2 + 96);
    uint64_t v19 = v16 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
    uint64_t v20 = *(void *)(v72 + 72);
    int64_t v78 = (void (**)(char *, char *, uint64_t))(v85 + 16);
    uint64_t v79 = v20;
    int64_t v77 = (void (**)(char *, uint64_t))(v85 + 8);
    v69[1] = v16;
    swift_bridgeObjectRetain();
    uint64_t v76 = v15;
    do
    {
      sub_2346BB994(v19, (uint64_t)v15, type metadata accessor for CapturedRoom.Surface);
      (*v78)(v11, v80, v7);
      sub_2346BB9FC((uint64_t)v15, type metadata accessor for CapturedRoom.Surface);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v21 = sub_2347BFA88((uint64_t)v11);
      char v23 = v22;
      swift_bridgeObjectRelease();
      if (v23)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v25 = *v18;
        uint64_t v86 = *v18;
        *uint64_t v18 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_2347D4AA4();
          uint64_t v25 = v86;
        }
        uint64_t v7 = v84;
        uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v85 + 8);
        v26(*(void *)(v25 + 48) + *(void *)(v85 + 72) * v21, v84);
        uint64_t v27 = v86;
        sub_2347D3174(v21, v86);
        *uint64_t v18 = v27;
        swift_bridgeObjectRelease();
        v26((unint64_t)v11, v7);
        swift_endAccess();
        type metadata accessor for WallEntity();
        swift_retain();
        sub_2347ED6F0();
        swift_release_n();
      }
      else
      {
        (*v77)(v11, v7);
        swift_endAccess();
      }
      v19 += v79;
      --v17;
      uint64_t v15 = v76;
    }
    while (v17);
    swift_bridgeObjectRelease();
    uint64_t v2 = v73;
    uint64_t v4 = v70;
    uint64_t v5 = v71;
  }
  uint64_t v28 = v74;
  uint64_t v29 = v74[5];
  uint64_t v30 = *(void *)(v29 + 16);
  if (v30)
  {
    int64_t v80 = (char *)(v81 + *(int *)(v4 + 32));
    uint64_t v31 = (uint64_t *)(v2 + 104);
    uint64_t v32 = v29 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v33 = *(void *)(v5 + 72);
    int64_t v78 = (void (**)(char *, char *, uint64_t))(v85 + 16);
    uint64_t v79 = v33;
    unint64_t v34 = (void (**)(uint64_t, uint64_t))(v85 + 8);
    int64_t v77 = (void (**)(char *, uint64_t))v29;
    swift_bridgeObjectRetain();
    uint64_t v35 = (uint64_t)v75;
    do
    {
      uint64_t v36 = v81;
      sub_2346BB994(v32, v81, type metadata accessor for CapturedRoom.Object);
      (*v78)((char *)v35, v80, v7);
      sub_2346BB9FC(v36, type metadata accessor for CapturedRoom.Object);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v37 = sub_2347BFA88(v35);
      char v39 = v38;
      swift_bridgeObjectRelease();
      if (v39)
      {
        int v40 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v41 = *v31;
        uint64_t v86 = *v31;
        *uint64_t v31 = 0x8000000000000000;
        if (!v40)
        {
          sub_2347D4AB0();
          uint64_t v41 = v86;
        }
        uint64_t v7 = v84;
        char v42 = *(void (**)(unint64_t, uint64_t))(v85 + 8);
        v42(*(void *)(v41 + 48) + *(void *)(v85 + 72) * v37, v84);
        uint64_t v43 = v86;
        sub_2347D3174(v37, v86);
        *uint64_t v31 = v43;
        swift_bridgeObjectRelease();
        uint64_t v35 = (uint64_t)v75;
        v42((unint64_t)v75, v7);
        swift_endAccess();
        type metadata accessor for ObjectEntity();
        swift_retain();
        sub_2347ED6F0();
        swift_release_n();
      }
      else
      {
        (*v34)(v35, v7);
        swift_endAccess();
      }
      v32 += v79;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    uint64_t v2 = v73;
    uint64_t v28 = v74;
  }
  uint64_t v87 = v28[3];
  swift_bridgeObjectRetain();
  uint64_t v44 = swift_bridgeObjectRetain();
  sub_2346D9918(v44);
  uint64_t v45 = swift_bridgeObjectRetain();
  sub_2346D9918(v45);
  uint64_t v46 = *(void *)(v87 + 16);
  if (v46)
  {
    uint64_t v47 = (uint64_t *)(v2 + 120);
    uint64_t v48 = (uint64_t *)(v2 + 128);
    uint64_t v49 = v87 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
    uint64_t v81 = *(void *)(v72 + 72);
    uint64_t v79 = v87;
    int64_t v80 = (char *)(v85 + 8);
    do
    {
      uint64_t v50 = v83;
      sub_2346BB994(v49, v83, type metadata accessor for CapturedRoom.Surface);
      uint64_t v51 = v50 + *(int *)(v82 + 44);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v52 = sub_2347BFA88(v51);
      char v54 = v53;
      swift_bridgeObjectRelease();
      if (v54)
      {
        int v55 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = *v47;
        uint64_t v86 = *v47;
        *uint64_t v47 = 0x8000000000000000;
        if (!v55)
        {
          sub_2347D4ABC();
          uint64_t v56 = v86;
        }
        (*(void (**)(unint64_t, uint64_t))(v85 + 8))(*(void *)(v56 + 48) + *(void *)(v85 + 72) * v52, v84);
        uint64_t v57 = v86;
        sub_2347D3174(v52, v86);
        *uint64_t v47 = v57;
        swift_bridgeObjectRelease();
        swift_endAccess();
        type metadata accessor for OpeningEntity();
        swift_retain();
        sub_2347ED6F0();
        swift_release();
      }
      else
      {
        swift_endAccess();
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v58 = sub_2347BFA88(v51);
      char v60 = v59;
      swift_bridgeObjectRelease();
      if (v60)
      {
        int v61 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v62 = *v48;
        uint64_t v86 = *v48;
        *uint64_t v48 = 0x8000000000000000;
        if (!v61)
        {
          sub_2347D4AC8();
          uint64_t v62 = v86;
        }
        (*(void (**)(unint64_t, uint64_t))(v85 + 8))(*(void *)(v62 + 48) + *(void *)(v85 + 72) * v58, v84);
        uint64_t v63 = v86;
        sub_2347D3174(v58, v86);
        *uint64_t v48 = v63;
        swift_bridgeObjectRelease();
        swift_endAccess();
        type metadata accessor for PlaceholderEntity();
        swift_retain();
        sub_2347ED6F0();
        swift_release();
        swift_release_n();
        sub_2346BB9FC(v83, type metadata accessor for CapturedRoom.Surface);
      }
      else
      {
        swift_endAccess();
        sub_2346BB9FC(v83, type metadata accessor for CapturedRoom.Surface);
        swift_release();
      }
      v49 += v81;
      --v46;
    }
    while (v46);
  }
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v64 = swift_bridgeObjectRetain();
  unint64_t v65 = sub_2346BB090(v64, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (!(v65 >> 62))
  {
    uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v66) {
      goto LABEL_34;
    }
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_2347EEEC0();
  uint64_t v66 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n();
  }
LABEL_34:
  if (v66 >= 1)
  {
    uint64_t v68 = 0;
    do
    {
      if ((v65 & 0xC000000000000001) != 0) {
        MEMORY[0x237DC6CF0](v68, v65);
      }
      else {
        swift_retain();
      }
      ++v68;
      type metadata accessor for FloorEntity();
      sub_2347ED6F0();
      swift_release();
    }
    while (v66 != v68);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_2346B6684(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_2347EE370();
  uint64_t v119 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v121 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2347ED5C0();
  uint64_t v126 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v126 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v123 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v124 = (char *)&v106 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v106 - v14;
  uint64_t v16 = a1 + *(int *)(type metadata accessor for CapturedRoom.Surface(0) + 44);
  uint64_t v122 = v3 + 96;
  swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 96) + 16)
    || (swift_bridgeObjectRetain(), sub_2347BFA88(v16), v18 = v17, uint64_t result = swift_bridgeObjectRelease(), (v18 & 1) == 0))
  {
    uint64_t v118 = v7;
    uint64_t v125 = v16;
    if (qword_2687ABCC8 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_2687BDE30;
    uint64_t v21 = v126;
    uint64_t v22 = v126 + 16;
    char v23 = *(void (**)(char *, uint64_t, uint64_t))(v126 + 16);
    v23(v15, v125, v9);
    swift_beginAccess();
    uint64_t v24 = *(void *)(v20 + 24);
    if (*(void *)(v24 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v25 = sub_2347BFA88((uint64_t)v15);
      if (v26)
      {
        uint64_t v115 = v23;
        uint64_t v116 = v22;
        uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v28 = *(void (**)(char *, uint8_t *))(v21 + 8);
        uint64_t v109 = v21 + 8;
        uint64_t v108 = v28;
        v28(v15, (uint8_t *)v9);
        uint64_t v29 = swift_allocObject();
        swift_weakInit();
        swift_retain();
        uint64_t v113 = v27;
        sub_2346B7350(v27);
        uint64_t v31 = v30;
        uint64_t v33 = v32;
        char v35 = v34;
        uint64_t v117 = v29;
        swift_release();
        v36.i32[0] = 0;
        v37.i32[0] = v35 & 1;
        int8x16_t v38 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v37, v36), 0);
        v37.i64[0] = v31;
        v37.i64[1] = v33;
        __asm { FMOV            V2.4S, #1.0 }
        __n128 v114 = (__n128)vbslq_s8(v38, v37, _Q2);
        if (*(void *)(v3 + 144))
        {
          float v44 = *(float *)(v3 + 156);
          type metadata accessor for EdgeEntity();
          swift_allocObject();
          __asm { FMOV            V1.4S, #1.0 }
          uint64_t v46 = sub_23470589C(v44, _Q1, 1.0, 0.000006);
          if (!v2)
          {
            uint64_t v110 = v46;
            uint64_t v50 = v123;
            os_log_t v111 = 0;
            goto LABEL_20;
          }
          type metadata accessor for Constants();
          uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
          id v48 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
          id v49 = objc_msgSend(v48, sel_bundleIdentifier);

          if (v49)
          {
            sub_2347EE620();
          }
          unint64_t v52 = v121;
          sub_2346A7A4C();
          sub_2347EEAF0();
          sub_2347EE380();
          char v53 = v2;
          char v54 = v2;
          int v55 = sub_2347EE350();
          os_log_type_t v56 = sub_2347EE960();
          if (os_log_type_enabled(v55, v56))
          {
            uint64_t v50 = v123;
            os_log_t v111 = v55;
            uint64_t v57 = (uint8_t *)swift_slowAlloc();
            uint64_t v110 = swift_slowAlloc();
            v128[0] = v110;
            *(_DWORD *)uint64_t v57 = 136315138;
            uint64_t v107 = v57 + 4;
            swift_getErrorValue();
            uint64_t v58 = sub_2347EF100();
            uint64_t v127 = sub_234775704(v58, v59, v128);
            sub_2347EEB30();
            swift_bridgeObjectRelease();

            os_log_t v60 = v111;
            _os_log_impl(&dword_23468B000, v111, v56, "Cannot create Edge Entity: %s", v57, 0xCu);
            uint64_t v61 = v110;
            swift_arrayDestroy();
            MEMORY[0x237DC8070](v61, -1, -1);
            MEMORY[0x237DC8070](v57, -1, -1);

            (*(void (**)(char *, uint64_t))(v119 + 8))(v121, v120);
          }
          else
          {
            uint64_t v50 = v123;

            (*(void (**)(char *, uint64_t))(v119 + 8))(v52, v120);
          }
          uint64_t v110 = 0;
          uint64_t v51 = &v130;
        }
        else
        {
          uint64_t v50 = v123;
          os_log_t v111 = v2;
          uint64_t v51 = &v129;
        }
        *((void *)v51 - 32) = 0;
LABEL_20:
        uint64_t v62 = v126;
        uint64_t v63 = (void (*)(char *, char *, uint64_t))v115;
        uint64_t v64 = v124;
        v115(v124, v125, v9);
        uint64_t v126 = swift_allocObject();
        uint64_t v112 = v3;
        swift_weakInit();
        unint64_t v65 = v50;
        v63(v50, v64, v9);
        uint64_t v66 = *(unsigned __int8 *)(v62 + 80);
        uint64_t v67 = (v66 + 16) & ~v66;
        uint64_t v121 = (char *)(v10 + 7);
        uint64_t v68 = v10 + 7 + v67;
        uint64_t v69 = v62;
        unint64_t v70 = v68 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v71 = ((v68 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v72 = swift_allocObject();
        uint64_t v119 = *(void *)(v69 + 32);
        ((void (*)(uint64_t, char *, uint64_t))v119)(v72 + v67, v65, v9);
        uint64_t v73 = (double (**)(uint64_t))(v72 + v70);
        uint64_t v74 = (double (*)(uint64_t))v117;
        *uint64_t v73 = sub_2346BB644;
        v73[1] = v74;
        *(__n128 *)(v72 + v71) = v114;
        uint64_t v120 = v72;
        uint64_t v75 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))(v72
                                                                                    + ((v71 + 23) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v76 = v126;
        *uint64_t v75 = sub_2346BB64C;
        v75[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))v76;
        uint64_t v77 = swift_allocObject();
        uint64_t v78 = v112;
        swift_weakInit();
        uint64_t v79 = v65;
        v115(v65, (uint64_t)v124, v9);
        uint64_t v80 = (v66 + 24) & ~v66;
        unint64_t v81 = (unint64_t)&v121[v80] & 0xFFFFFFFFFFFFFFF8;
        uint64_t v82 = swift_allocObject();
        *(void *)(v82 + 16) = v77;
        uint64_t v107 = (uint8_t *)v9;
        ((void (*)(uint64_t, char *, uint64_t))v119)(v82 + v80, v79, v9);
        uint64_t v121 = (char *)v82;
        uint64_t v83 = (double (**)(uint64_t))(v82 + v81);
        uint64_t v84 = v78;
        uint64_t v85 = (double (*)(uint64_t))v117;
        *uint64_t v83 = sub_2346BB644;
        v83[1] = v85;
        uint64_t v86 = v113;
        uint64_t v87 = (uint64_t)v118;
        sub_2346A7BCC(v113 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, (uint64_t)v118, (uint64_t *)&unk_2687AE190);
        uint64_t v88 = type metadata accessor for CapturedRoom.Surface.Curve(0);
        LODWORD(v70) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 48))(v87, 1, v88);
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        sub_2346A7C30(v87, (uint64_t *)&unk_2687AE190);
        uint64_t v89 = MEMORY[0x237DC8170](v84 + 16);
        if (v70 == 1)
        {
          uint64_t v90 = v110;
          uint64_t v91 = v120;
          if (v89)
          {
            uint64_t v92 = *(void *)(v84 + 24);
            uint64_t ObjectType = swift_getObjectType();
            int v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(ObjectType, v92);
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v90 = v110;
          uint64_t v91 = v120;
          if (v89)
          {
            uint64_t v95 = *(void *)(v84 + 24);
            uint64_t v96 = swift_getObjectType();
            int v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 16))(v96, v95);
LABEL_25:
            int v97 = v94;
            swift_unknownObjectRelease();
            char v98 = *(unsigned char *)(v84 + 88);
            if (v97 != 10)
            {
LABEL_29:
              type metadata accessor for WallEntity();
              uint64_t v99 = swift_allocObject();
              *(_DWORD *)(v99 + qword_2687ADE70) = 1065353216;
              *(_DWORD *)(v99 + qword_2687ADE78) = 1065353216;
              swift_retain();
              swift_retain();
              uint64_t v100 = (uint64_t)v121;
              swift_retain();
              swift_retain();
              sub_2347ED520();
              swift_retain();
              LOBYTE(v128[0]) = 1;
              uint64_t v101 = sub_2346D6FF0(v86, (uint64_t)sub_2346BB5CC, v91, (uint64_t)sub_2346BB5E8, v100, v90, v98, v97, v114, 0, 1, v99, v84);
              swift_release();
              if (v101)
              {
                uint64_t v102 = (uint64_t)v123;
                uint64_t v103 = v107;
                v115(v123, v125, (uint64_t)v107);
                swift_beginAccess();
                swift_retain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v127 = *(void *)(v84 + 96);
                *(void *)(v84 + 96) = 0x8000000000000000;
                sub_2347AA414(v101, v102, isUniquelyReferenced_nonNull_native);
                *(void *)(v84 + 96) = v127;
                swift_bridgeObjectRelease();
                uint64_t v105 = v108;
                v108((char *)v102, v103);
                swift_endAccess();
                type metadata accessor for ScanContainer();
                sub_2347ED700();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v105(v124, v103);
                return swift_release_n();
              }
              else
              {
                v108(v124, v107);
                swift_release_n();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                return swift_release();
              }
            }
LABEL_28:
            int v97 = 0;
            goto LABEL_29;
          }
        }
        char v98 = *(unsigned char *)(v84 + 88);
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v15, v9);
  }
  return result;
}

double sub_2346B7350(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v3 = Strong;
  if (!Strong) {
    return 0.0;
  }
  switch(*(unsigned char *)(Strong + 136))
  {
    case 1:
      swift_release();
      double result = sub_2347296E0();
      break;
    case 2:
      long long v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_color);
      swift_release();
      double result = *(double *)&v8;
      break;
    default:
      swift_beginAccess();
      sub_2346A1DCC(v3 + 32, (uint64_t)v9);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      double v7 = (*(double (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      double result = v7;
      break;
  }
  return result;
}

uint64_t sub_2346B74A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result + 32;
    swift_beginAccess();
    sub_2346A1DCC(v6, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 112))(a1, v7, v8, a3);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_2346B759C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_2347ED5C0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v34 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v32 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = a1 + *(int *)(type metadata accessor for CapturedRoom.Surface(0) + 44);
  swift_beginAccess();
  if (*(void *)(*(void *)(v3 + 120) + 16))
  {
    swift_bridgeObjectRetain();
    sub_2347BFA88(v14);
    char v16 = v15;
    uint64_t result = swift_bridgeObjectRelease();
    if (v16) {
      return result;
    }
  }
  uint64_t v35 = v2;
  if (qword_2687ABCC8 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_2687BDE30;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v19(v13, v14, v5);
  swift_beginAccess();
  if (!*(void *)(*(void *)(v18 + 24) + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  swift_bridgeObjectRetain();
  sub_2347BFA88((uint64_t)v13);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  uint64_t v33 = v19;
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v13;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v22(v21, v5);
  char v23 = v33;
  swift_release();
  uint64_t v24 = qword_2687BDE30;
  v23(v10, v14, v5);
  swift_beginAccess();
  if (!*(void *)(*(void *)(v24 + 24) + 16)) {
    return ((uint64_t (*)(char *, uint64_t))v22)(v10, v5);
  }
  swift_bridgeObjectRetain();
  sub_2347BFA88((uint64_t)v10);
  if ((v25 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v22)(v10, v5);
  }
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v32 = (void (*)(uint64_t, uint64_t))v22;
  v22(v10, v5);
  char v26 = *(unsigned char *)(v3 + 88);
  type metadata accessor for PlaceholderEntity();
  swift_allocObject();
  uint64_t v27 = swift_retain();
  uint64_t v28 = sub_2347D8590(v27, v26);
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = (uint64_t)v34;
    v33(v34, v14, v5);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *(void *)(v3 + 128);
    *(void *)(v3 + 128) = 0x8000000000000000;
    sub_2347AA658(v29, v30, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + 128) = v36;
    swift_bridgeObjectRelease();
    v32(v30, v5);
    swift_endAccess();
    type metadata accessor for ScanContainer();
    sub_2347ED700();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_2346B79A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v97 = (uint64_t)v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_2347ED5C0();
  uint64_t v6 = *(void *)(v102 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v102);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v86 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v86 - v12;
  uint64_t v14 = a1 + *(int *)(type metadata accessor for CapturedRoom.Surface(0) + 44);
  uint64_t v96 = v2 + 120;
  swift_beginAccess();
  if (!*(void *)(*(void *)(v2 + 120) + 16)
    || (swift_bridgeObjectRetain(), sub_2347BFA88(v14), v16 = v15, uint64_t result = swift_bridgeObjectRelease(), (v16 & 1) == 0))
  {
    uint64_t v100 = v10;
    uint64_t v101 = v14;
    uint64_t v95 = (char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (qword_2687ABCC8 != -1) {
      swift_once();
    }
    uint64_t v18 = qword_2687BDE30;
    uint64_t v19 = v101;
    uint64_t v20 = v102;
    char v98 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v98(v13, v101, v102);
    swift_beginAccess();
    uint64_t v21 = *(void *)(v18 + 24);
    if (*(void *)(v21 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v22 = sub_2347BFA88((uint64_t)v13);
      if (v23)
      {
        uint64_t v89 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
        uint64_t v24 = v89;
        swift_retain();
        swift_bridgeObjectRelease();
        char v25 = *(void (**)(char *, uint64_t))(v6 + 8);
        v86[1] = v6 + 8;
        v86[0] = v25;
        v25(v13, v20);
        uint64_t v26 = swift_allocObject();
        uint64_t v99 = v2;
        uint64_t v27 = v26;
        swift_weakInit();
        swift_retain();
        uint64_t v92 = v27;
        sub_2346B8274(v24);
        uint64_t v28 = v19;
        uint64_t v30 = v29;
        uint64_t v32 = v31;
        char v34 = v33;
        swift_release();
        v35.i32[0] = 0;
        v36.i32[0] = v34 & 1;
        int8x16_t v37 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v36, v35), 0);
        v36.i64[0] = v30;
        v36.i64[1] = v32;
        __asm { FMOV            V2.4S, #1.0 }
        __n128 v93 = (__n128)vbslq_s8(v37, v36, _Q2);
        uint64_t v43 = v100;
        uint64_t v44 = v28;
        uint64_t v45 = v20;
        uint64_t v46 = (void (*)(char *, char *, uint64_t))v98;
        v98(v100, v44, v20);
        uint64_t v94 = swift_allocObject();
        swift_weakInit();
        uint64_t v47 = v95;
        uint64_t v48 = v45;
        v46(v95, v43, v45);
        uint64_t v49 = *(unsigned __int8 *)(v6 + 80);
        uint64_t v50 = (v49 + 16) & ~v49;
        uint64_t v88 = v7 + 7;
        unint64_t v51 = (v7 + 7 + v50) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v52 = (v51 + 31) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v91 = v6 + 16;
        uint64_t v53 = swift_allocObject();
        uint64_t v54 = v53 + v50;
        uint64_t v87 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
        uint64_t v55 = v48;
        v87(v54, v47, v48);
        os_log_type_t v56 = (double (**)(uint64_t))(v53 + v51);
        uint64_t v57 = (double (*)(uint64_t))v92;
        *os_log_type_t v56 = sub_2346BB618;
        v56[1] = v57;
        *(__n128 *)(v53 + v52) = v93;
        uint64_t v90 = v53;
        uint64_t v58 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))(v53
                                                                                    + ((v52 + 23) & 0xFFFFFFFFFFFFFFF0));
        uint64_t v59 = v94;
        *uint64_t v58 = sub_2346BB620;
        v58[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))v59;
        uint64_t v60 = swift_allocObject();
        swift_weakInit();
        v98(v47, (uint64_t)v100, v55);
        uint64_t v61 = (v49 + 24) & ~v49;
        unint64_t v62 = (v88 + v61) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v63 = swift_allocObject();
        *(void *)(v63 + 16) = v60;
        uint64_t v64 = v63 + v61;
        uint64_t v65 = v89;
        v87(v64, v47, v55);
        uint64_t v66 = (double (**)(uint64_t))(v63 + v62);
        *uint64_t v66 = sub_2346BB618;
        v66[1] = v57;
        uint64_t v67 = v97;
        sub_2346A7BCC(v65 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, v97, (uint64_t *)&unk_2687AE190);
        uint64_t v68 = type metadata accessor for CapturedRoom.Surface.Curve(0);
        LODWORD(v60) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48))(v67, 1, v68);
        swift_retain_n();
        uint64_t v69 = v99;
        swift_retain_n();
        swift_retain();
        sub_2346A7C30(v67, (uint64_t *)&unk_2687AE190);
        uint64_t v70 = MEMORY[0x237DC8170](v69 + 16);
        if (v60 == 1)
        {
          unint64_t v71 = v100;
          uint64_t v72 = v90;
          if (v70)
          {
            uint64_t v73 = *(void *)(v69 + 24);
            uint64_t ObjectType = swift_getObjectType();
            int v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 24))(ObjectType, v73);
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v71 = v100;
          uint64_t v72 = v90;
          if (v70)
          {
            uint64_t v76 = *(void *)(v69 + 24);
            uint64_t v77 = swift_getObjectType();
            int v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 32))(v77, v76);
LABEL_14:
            int v78 = v75;
            swift_unknownObjectRelease();
            char v79 = *(unsigned char *)(v69 + 88);
            if (v78 != 10)
            {
LABEL_18:
              type metadata accessor for OpeningEntity();
              uint64_t v80 = swift_allocObject();
              *(_DWORD *)(v80 + qword_2687ADE70) = 1065353216;
              *(_DWORD *)(v80 + qword_2687ADE78) = 1065353216;
              swift_retain();
              swift_retain();
              swift_retain();
              sub_2347ED520();
              swift_retain();
              char v103 = 1;
              uint64_t v81 = sub_2346D7AB8(v65, (uint64_t)sub_2346BB5CC, v72, (uint64_t)sub_2346BB5E8, v63, 0, v79, v78, v93, 0, 1, v80, v69);
              swift_release();
              if (v81)
              {
                uint64_t v82 = (uint64_t)v95;
                uint64_t v83 = v102;
                v98(v95, v101, v102);
                swift_beginAccess();
                swift_retain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v104 = *(void *)(v69 + 120);
                *(void *)(v69 + 120) = 0x8000000000000000;
                sub_2347AA62C(v81, v82, isUniquelyReferenced_nonNull_native);
                *(void *)(v69 + 120) = v104;
                swift_bridgeObjectRelease();
                uint64_t v85 = (void (*)(char *, uint64_t))v86[0];
                ((void (*)(uint64_t, uint64_t))v86[0])(v82, v83);
                swift_endAccess();
                type metadata accessor for ScanContainer();
                sub_2347ED700();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                v85(v100, v83);
                return swift_release_n();
              }
              else
              {
                ((void (*)(char *, uint64_t))v86[0])(v71, v102);
                swift_release_n();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                return swift_release();
              }
            }
LABEL_17:
            int v78 = 0;
            goto LABEL_18;
          }
        }
        char v79 = *(unsigned char *)(v69 + 88);
        goto LABEL_17;
      }
      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v20);
  }
  return result;
}

double sub_2346B8274(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v3 = Strong;
  if (!Strong) {
    return 0.0;
  }
  switch(*(unsigned char *)(Strong + 136))
  {
    case 1:
      swift_release();
      double result = sub_2347296E0();
      break;
    case 2:
      long long v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_color);
      swift_release();
      double result = *(double *)&v8;
      break;
    default:
      swift_beginAccess();
      sub_2346A1DCC(v3 + 32, (uint64_t)v9);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      double v7 = (*(double (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      double result = v7;
      break;
  }
  return result;
}

uint64_t sub_2346B83C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result + 32;
    swift_beginAccess();
    sub_2346A1DCC(v6, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 120))(a1, v7, v8, a3);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_2346B84C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2347ED5C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v87 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v71 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v71 - v11;
  uint64_t v13 = a1 + *(int *)(type metadata accessor for CapturedRoom.Surface(0) + 44);
  uint64_t v86 = v2 + 14;
  swift_beginAccess();
  if (*(void *)(v2[14] + 16))
  {
    swift_bridgeObjectRetain();
    sub_2347BFA88(v13);
    char v15 = v14;
    uint64_t result = swift_bridgeObjectRelease();
    if (v15) {
      return result;
    }
  }
  uint64_t v88 = v9;
  if (qword_2687ABCC8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_2687BDE30;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v12, v13, v4);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v17 + 24);
  if (!*(void *)(v19 + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_2347BFA88((uint64_t)v12);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  uint64_t v83 = v18;
  uint64_t v84 = v5 + 16;
  uint64_t v79 = v13;
  uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
  swift_retain();
  swift_bridgeObjectRelease();
  char v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v76 = v5 + 8;
  int v75 = v23;
  v23(v12, v4);
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  uint64_t v77 = v22;
  sub_2346B8D5C(v22);
  unint64_t v26 = v25;
  unint64_t v28 = v27;
  char v30 = v29;
  uint64_t v74 = v24;
  swift_release();
  uint64_t v85 = v2;
  if (v30)
  {
    swift_beginAccess();
    uint64_t v32 = v2[7];
    uint64_t v33 = v2[8];
    char v34 = __swift_project_boxed_opaque_existential_1(v2 + 4, v32);
    uint64_t v35 = v4;
    uint64_t v36 = *(void *)(v32 - 8);
    double v37 = MEMORY[0x270FA5388](v34);
    char v39 = (char *)&v71 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v36 + 16))(v39, v37);
    v40.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v33 + 48))(v32, v33);
    __n128 v81 = v40;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v32);
    uint64_t v4 = v35;
  }
  else
  {
    v31.n128_u64[0] = v26;
    v31.n128_u64[1] = v28;
    __n128 v81 = v31;
  }
  uint64_t v41 = (void (*)(char *, char *, uint64_t))v83;
  char v42 = v88;
  v83(v88, v79, v4);
  uint64_t v82 = swift_allocObject();
  swift_weakInit();
  uint64_t v43 = v87;
  v41(v87, v42, v4);
  uint64_t v44 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v45 = v4;
  uint64_t v46 = (v44 + 16) & ~v44;
  uint64_t v73 = v6 + 7;
  unint64_t v47 = (v6 + 7 + v46) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = (v47 + 31) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v49 = swift_allocObject();
  uint64_t v72 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v72(v49 + v46, v43, v45);
  uint64_t v50 = (double (**)(uint64_t))(v49 + v47);
  unint64_t v51 = (double (*)(uint64_t))v74;
  *uint64_t v50 = sub_2346BB5EC;
  v50[1] = v51;
  *(__n128 *)(v49 + v48) = v81;
  uint64_t v78 = v49;
  unint64_t v52 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))(v49 + ((v48 + 23) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v53 = v82;
  *unint64_t v52 = sub_2346BB5F4;
  v52[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))v53;
  uint64_t v54 = swift_allocObject();
  swift_weakInit();
  v83(v43, (uint64_t)v88, v45);
  uint64_t v55 = (v44 + 24) & ~v44;
  unint64_t v56 = (v73 + v55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = v54;
  uint64_t v80 = v45;
  uint64_t v58 = v45;
  uint64_t v59 = (uint64_t)v85;
  v72(v57 + v55, v43, v58);
  uint64_t v60 = (double (**)(uint64_t))(v57 + v56);
  *uint64_t v60 = sub_2346BB5EC;
  v60[1] = v51;
  LODWORD(v56) = *(unsigned __int8 *)(v59 + 88);
  type metadata accessor for FloorEntity();
  uint64_t v61 = swift_allocObject();
  if (v56 == 1)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v62 = v77;
    swift_retain();
    swift_retain();
    uint64_t v63 = v78;
    swift_retain();
    swift_retain();
    char v89 = 0;
    uint64_t v64 = sub_2346D7AF8(v62, (uint64_t)sub_2346BB5CC, v63, (uint64_t)sub_2346BB5E8, v57, 0, 1, 8, v81, 1042536202, 0, v61, v59);
    if (v64)
    {
      uint64_t v65 = v64;
      uint64_t v66 = (uint64_t)v87;
      uint64_t v67 = v80;
      v83(v87, v79, v80);
      swift_beginAccess();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v90 = *(void *)(v59 + 112);
      *(void *)(v59 + 112) = 0x8000000000000000;
      sub_2347AAEDC(v65, v66, isUniquelyReferenced_nonNull_native);
      *(void *)(v59 + 112) = v90;
      swift_bridgeObjectRelease();
      uint64_t v69 = v67;
      uint64_t v70 = v75;
      v75((char *)v66, v69);
      swift_endAccess();
      type metadata accessor for ScanContainer();
      sub_2347ED700();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v70(v88, v80);
      return swift_release_n();
    }
  }
  else
  {
    swift_deallocPartialClassInstance();
    swift_retain_n();
    swift_retain_n();
    swift_retain();
  }
  v75(v88, v80);
  swift_release_n();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

double sub_2346B8D5C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v3 = Strong;
  if (!Strong) {
    return 0.0;
  }
  switch(*(unsigned char *)(Strong + 136))
  {
    case 1:
      swift_release();
      double result = sub_2347296E0();
      break;
    case 2:
      long long v8 = *(_OWORD *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_color);
      swift_release();
      double result = *(double *)&v8;
      break;
    default:
      swift_beginAccess();
      sub_2346A1DCC(v3 + 32, (uint64_t)v9);
      uint64_t v4 = v10;
      uint64_t v5 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      double v7 = (*(double (**)(uint64_t, uint64_t))(v5 + 48))(v4, v5);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      double result = v7;
      break;
  }
  return result;
}

uint64_t sub_2346B8EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result + 32;
    swift_beginAccess();
    sub_2346A1DCC(v6, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 128))(a1, v7, v8, a3);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_2346B8FA8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2347ED5C0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v99 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v84 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v84 - v11;
  uint64_t v13 = a1 + *(int *)(type metadata accessor for CapturedRoom.Object(0) + 32);
  char v98 = v2 + 13;
  swift_beginAccess();
  if (*(void *)(v2[13] + 16))
  {
    swift_bridgeObjectRetain();
    sub_2347BFA88(v13);
    char v15 = v14;
    uint64_t result = swift_bridgeObjectRelease();
    if (v15) {
      return result;
    }
  }
  uint64_t v100 = v13;
  if (qword_2687ABCC8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_2687BDE30;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v12, v100, v4);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v17 + 24);
  if (!*(void *)(v19 + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_2347BFA88((uint64_t)v12);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  uint64_t v96 = v18;
  uint64_t v97 = v5 + 16;
  uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
  swift_retain();
  swift_bridgeObjectRelease();
  char v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v86 = v5 + 8;
  uint64_t v85 = v23;
  v23(v12, v4);
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  uint64_t v92 = v22;
  sub_2346B9938(v22);
  unint64_t v26 = v25;
  unint64_t v28 = v27;
  LOBYTE(v22) = v29;
  uint64_t v90 = v24;
  swift_release();
  if (v22)
  {
    swift_beginAccess();
    uint64_t v31 = v2[7];
    uint64_t v32 = v2[8];
    uint64_t v33 = __swift_project_boxed_opaque_existential_1(v2 + 4, v31);
    uint64_t v95 = &v84;
    char v34 = v9;
    uint64_t v35 = *(void *)(v31 - 8);
    double v36 = MEMORY[0x270FA5388](v33);
    uint64_t v38 = (char *)&v84 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v35 + 16))(v38, v36);
    v39.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v32 + 56))(v31, v32);
    __n128 v94 = v39;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v31);
    uint64_t v9 = v34;
  }
  else
  {
    v30.n128_u64[0] = v26;
    v30.n128_u64[1] = v28;
    __n128 v94 = v30;
  }
  __n128 v40 = (void (*)(char *, char *, uint64_t))v96;
  __n128 v93 = v9;
  v96(v9, v100, v4);
  uint64_t v91 = swift_allocObject();
  swift_weakInit();
  uint64_t v95 = v2;
  uint64_t v41 = v99;
  v40(v99, v9, v4);
  uint64_t v42 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v43 = (v42 + 16) & ~v42;
  uint64_t v89 = v6 + 7;
  unint64_t v44 = (v6 + 7 + v43) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (v44 + 31) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v46 = swift_allocObject();
  uint64_t v88 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v88(v46 + v43, v41, v4);
  unint64_t v47 = (double (**)(uint64_t))(v46 + v44);
  uint64_t v87 = sub_2346BB5A4;
  unint64_t v48 = (double (*)(uint64_t))v90;
  *unint64_t v47 = sub_2346BB5A4;
  v47[1] = v48;
  *(__n128 *)(v46 + v45) = v94;
  uint64_t v84 = v46;
  uint64_t v49 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))(v46 + ((v45 + 23) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = v91;
  *uint64_t v49 = sub_2346BB5AC;
  v49[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>, __n128@<Q0>))v50;
  uint64_t v51 = swift_allocObject();
  swift_weakInit();
  v96(v41, (uint64_t)v93, v4);
  uint64_t v52 = (v42 + 24) & ~v42;
  unint64_t v53 = (v89 + v52) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = v51;
  uint64_t v55 = v41;
  uint64_t v56 = (uint64_t)v95;
  uint64_t v89 = v4;
  v88(v54 + v52, v55, v4);
  uint64_t v57 = (double (**)(uint64_t))(v54 + v53);
  *uint64_t v57 = v87;
  v57[1] = v48;
  if (*(void *)(v56 + 144))
  {
    float v58 = *(float *)(v56 + 156);
    type metadata accessor for EdgeEntity();
    swift_allocObject();
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    __asm { FMOV            V1.4S, #1.0 }
    uint64_t v64 = v101;
    uint64_t v65 = sub_23470589C(v58, _Q1, 1.0, 0.000006);
    uint64_t v66 = v64;
    if (v64)
    {

      uint64_t v67 = 0;
      uint64_t v66 = 0;
    }
    else
    {
      uint64_t v67 = v65;
    }
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    uint64_t v67 = 0;
    uint64_t v66 = v101;
  }
  uint64_t v68 = v84;
  int v69 = *(unsigned __int8 *)(v56 + 88);
  if (MEMORY[0x237DC8170](v56 + 16))
  {
    LODWORD(v101) = v69;
    uint64_t v70 = v67;
    uint64_t v71 = *(void *)(v56 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v73 = *(uint64_t (**)(uint64_t, uint64_t))(v71 + 40);
    uint64_t v74 = v71;
    uint64_t v67 = v70;
    LOBYTE(v69) = (_BYTE)v101;
    int v75 = v73(ObjectType, v74);
    swift_unknownObjectRelease();
  }
  else
  {
    int v75 = 0;
  }
  type metadata accessor for ObjectEntity();
  uint64_t v76 = swift_allocObject();
  uint64_t v77 = v92;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  char v103 = 1;
  uint64_t v78 = sub_2346D7030(v77, (uint64_t)sub_2346BB5CC, v68, (uint64_t)sub_2346BB5E8, v54, v67, v69, v75, v94, 0, 1, v76, v56);
  swift_release();
  if (v78)
  {
    v94.n128_u64[0] = v67;
    uint64_t v79 = v56;
    uint64_t v80 = (uint64_t)v99;
    uint64_t v81 = v89;
    v96(v99, v100, v89);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v102 = *(void *)(v79 + 104);
    *(void *)(v79 + 104) = 0x8000000000000000;
    sub_2347AA440(v78, v80, isUniquelyReferenced_nonNull_native);
    *(void *)(v79 + 104) = v102;
    swift_bridgeObjectRelease();
    uint64_t v101 = v66;
    uint64_t v83 = v85;
    v85((char *)v80, v81);
    swift_endAccess();
    type metadata accessor for ScanContainer();
    sub_2347ED700();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v83(v93, v81);
    return swift_release_n();
  }
  else
  {
    v85(v93, v89);
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
}

double sub_2346B9938(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v6 = Strong;
  if (!Strong) {
    return 0.0;
  }
  switch(*(unsigned char *)(Strong + 136))
  {
    case 1:
      sub_2346A7BCC(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t)v4, (uint64_t *)&unk_2687AEB70);
      uint64_t v11 = sub_2347ED5C0();
      int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v4, 1, v11);
      sub_2346A7C30((uint64_t)v4, (uint64_t *)&unk_2687AEB70);
      if (v12 != 1) {
        goto LABEL_15;
      }
      if (*(unsigned char *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3)
      {
        if (qword_2687ABCC8 != -1) {
          swift_once();
        }
        swift_beginAccess();
        swift_retain();
        uint64_t v13 = swift_bridgeObjectRetain();
        sub_23471162C(v13, a1);
        unint64_t v15 = v14;
        swift_release();
      }
      else
      {
        unint64_t v15 = MEMORY[0x263F8EE78];
      }
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v16 = sub_2347EEEC0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v16 >= 1)
      {
LABEL_15:
        *(double *)&long long v17 = sub_2347296E0();
        *(_OWORD *)uint64_t v18 = v17;
        swift_release();
        goto LABEL_16;
      }
      swift_release();
      double result = sub_2347296E0();
      break;
    case 2:
      *(_OWORD *)uint64_t v18 = *(_OWORD *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_color);
      swift_release();
LABEL_16:
      double result = v18[0];
      break;
    default:
      swift_beginAccess();
      sub_2346A1DCC(v6 + 32, (uint64_t)v19);
      uint64_t v7 = v20;
      uint64_t v8 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      *(double *)&long long v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
      *(_OWORD *)uint64_t v18 = v9;
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      double result = v18[0];
      break;
  }
  return result;
}

uint64_t sub_2346B9C5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result + 32;
    swift_beginAccess();
    sub_2346A1DCC(v6, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 136))(a1, v7, v8, a3);
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_2346B9D58(__n128 a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  __n128 v26 = a1;
  uint64_t v6 = sub_2347ED5C0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388]();
  long long v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  if (*(unsigned __int8 *)(result + 136) - 1 > 1)
  {
LABEL_13:
    swift_release();
    return 0;
  }
  if (qword_2687ABCC8 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_2687BDE30;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v11 + 24);
  if (!*(void *)(v12 + 16))
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_2347BFA88((uint64_t)v9);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v16 = a4(v15);
  uint64_t v18 = v17;
  char v20 = v19;
  swift_release();
  swift_release();
  if (v20)
  {
    BOOL v24 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    *(void *)&long long v22 = v16;
    *((void *)&v22 + 1) = v18;
    while (1)
    {
      long long v27 = v22;
      float v25 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
      __n128 v28 = v26;
      BOOL v23 = v25 == *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
      BOOL v24 = v23;
      if (v21 == 3) {
        break;
      }
      while (1)
      {
        ++v21;
        if (v23) {
          break;
        }
        BOOL v23 = 0;
        BOOL v24 = 0;
        if (v21 == 3) {
          return !v24;
        }
      }
    }
  }
  return !v24;
}

void sub_2346B9FF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, __n128)@<X4>, uint64_t a6@<X8>, __n128 a7@<Q0>)
{
  __n128 v28 = a5;
  __n128 v27 = a7;
  v26[1] = a4;
  uint64_t v11 = sub_2347ED5C0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    *(void *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return;
  }
  v26[0] = a3;
  if (qword_2687ABCC8 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_2687BDE30;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  swift_beginAccess();
  uint64_t v16 = *(void *)(v15 + 24);
  if (*(void *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_2347BFA88((uint64_t)v14);
    if (v18)
    {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      uint64_t v20 = ((uint64_t (*)(uint64_t))v26[0])(v19);
      unint64_t v22 = v21;
      char v24 = v23;
      swift_release();
      __n128 v25 = v27;
      if ((v24 & 1) == 0)
      {
        v25.n128_u64[0] = v20;
        v25.n128_u64[1] = v22;
      }
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  __n128 v25 = v27;
LABEL_11:
  v28(a1, v25);
}

uint64_t sub_2346BA224()
{
  uint64_t v1 = sub_2347EDF50();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v86 = (char *)&v82 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC928);
  uint64_t v89 = *(void *)(v3 - 8);
  uint64_t v90 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v88 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC930);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v82 - v9;
  uint64_t v87 = v0 + 12;
  swift_beginAccess();
  uint64_t v91 = v0;
  uint64_t v11 = v0[12];
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v13 = v11 + 64;
  uint64_t v12 = v14;
  uint64_t v15 = 1 << *(unsigned char *)(v0[12] + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  uint64_t v17 = v16 & v12;
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  while (1)
  {
    if (v17)
    {
      v17 &= v17 - 1;
      goto LABEL_5;
    }
    int64_t v21 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
      goto LABEL_124;
    }
    if (v21 >= v18) {
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v13 + 8 * v21);
    ++v20;
    if (!v22)
    {
      int64_t v20 = v21 + 1;
      if (v21 + 1 >= v18) {
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v13 + 8 * v20);
      if (!v22)
      {
        int64_t v20 = v21 + 2;
        if (v21 + 2 >= v18) {
          goto LABEL_23;
        }
        uint64_t v22 = *(void *)(v13 + 8 * v20);
        if (!v22)
        {
          int64_t v20 = v21 + 3;
          if (v21 + 3 >= v18) {
            goto LABEL_23;
          }
          uint64_t v22 = *(void *)(v13 + 8 * v20);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v17 = (v22 - 1) & v22;
LABEL_5:
    type metadata accessor for WallEntity();
    swift_retain();
    sub_2347ED6F0();
    uint64_t result = swift_release();
  }
  int64_t v23 = v21 + 4;
  if (v23 < v18)
  {
    uint64_t v22 = *(void *)(v13 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        int64_t v20 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          break;
        }
        if (v20 >= v18) {
          goto LABEL_23;
        }
        uint64_t v22 = *(void *)(v13 + 8 * v20);
        ++v23;
        if (v22) {
          goto LABEL_22;
        }
      }
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    int64_t v20 = v23;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  char v24 = v91;
  uint64_t v85 = v91 + 15;
  swift_beginAccess();
  uint64_t v25 = v24[15];
  uint64_t v26 = v25 + 64;
  uint64_t v27 = 1 << *(unsigned char *)(v25 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  uint64_t v29 = v28 & *(void *)(v25 + 64);
  int64_t v30 = (unint64_t)(v27 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  while (2)
  {
    if (v29)
    {
      v29 &= v29 - 1;
LABEL_27:
      type metadata accessor for OpeningEntity();
      swift_retain();
      sub_2347ED6F0();
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v32 = v31 + 1;
  if (__OFADD__(v31, 1)) {
    goto LABEL_120;
  }
  if (v32 < v30)
  {
    uint64_t v33 = *(void *)(v26 + 8 * v32);
    ++v31;
    if (!v33)
    {
      int64_t v31 = v32 + 1;
      if (v32 + 1 >= v30) {
        goto LABEL_45;
      }
      uint64_t v33 = *(void *)(v26 + 8 * v31);
      if (!v33)
      {
        int64_t v31 = v32 + 2;
        if (v32 + 2 >= v30) {
          goto LABEL_45;
        }
        uint64_t v33 = *(void *)(v26 + 8 * v31);
        if (!v33)
        {
          int64_t v31 = v32 + 3;
          if (v32 + 3 >= v30) {
            goto LABEL_45;
          }
          uint64_t v33 = *(void *)(v26 + 8 * v31);
          if (!v33)
          {
            int64_t v34 = v32 + 4;
            if (v34 >= v30) {
              goto LABEL_45;
            }
            uint64_t v33 = *(void *)(v26 + 8 * v34);
            if (!v33)
            {
              while (1)
              {
                int64_t v31 = v34 + 1;
                if (__OFADD__(v34, 1)) {
                  break;
                }
                if (v31 >= v30) {
                  goto LABEL_45;
                }
                uint64_t v33 = *(void *)(v26 + 8 * v31);
                ++v34;
                if (v33) {
                  goto LABEL_44;
                }
              }
LABEL_125:
              __break(1u);
              goto LABEL_126;
            }
            int64_t v31 = v34;
          }
        }
      }
    }
LABEL_44:
    uint64_t v29 = (v33 - 1) & v33;
    goto LABEL_27;
  }
LABEL_45:
  swift_release();
  uint64_t v35 = v91;
  uint64_t v84 = v91 + 14;
  swift_beginAccess();
  uint64_t v36 = v35[14];
  uint64_t v37 = *(void *)(v36 + 64);
  uint64_t v92 = v36 + 64;
  uint64_t v38 = 1 << *(unsigned char *)(v36 + 32);
  uint64_t v39 = -1;
  if (v38 < 64) {
    uint64_t v39 = ~(-1 << v38);
  }
  unint64_t v40 = v39 & v37;
  int64_t v41 = (unint64_t)(v38 + 63) >> 6;
  int64_t v83 = v41 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v42 = 0;
  if (!v40) {
    goto LABEL_52;
  }
LABEL_50:
  unint64_t v44 = __clz(__rbit64(v40));
  v40 &= v40 - 1;
  unint64_t v45 = v44 | (v42 << 6);
LABEL_51:
  uint64_t v46 = *(void *)(v36 + 48);
  uint64_t v47 = sub_2347ED5C0();
  (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(v7, v46 + *(void *)(*(void *)(v47 - 8) + 72) * v45, v47);
  uint64_t v48 = *(void *)(v36 + 56);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC938);
  *(void *)&v7[*(int *)(v49 + 48)] = *(void *)(v48 + 8 * v45);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v7, 0, 1, v49);
  swift_retain();
  while (1)
  {
    sub_2346BB504((uint64_t)v7, (uint64_t)v10);
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC938);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v10, 1, v54) == 1) {
      break;
    }
    type metadata accessor for FloorEntity();
    sub_2347ED6F0();
    swift_release();
    uint64_t v43 = sub_2347ED5C0();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8))(v10, v43);
    if (v40) {
      goto LABEL_50;
    }
LABEL_52:
    int64_t v50 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      goto LABEL_123;
    }
    if (v50 < v41)
    {
      unint64_t v51 = *(void *)(v92 + 8 * v50);
      if (v51) {
        goto LABEL_55;
      }
      int64_t v52 = v42 + 2;
      ++v42;
      if (v50 + 1 < v41)
      {
        unint64_t v51 = *(void *)(v92 + 8 * v52);
        if (v51) {
          goto LABEL_58;
        }
        int64_t v42 = v50 + 1;
        if (v50 + 2 < v41)
        {
          unint64_t v51 = *(void *)(v92 + 8 * (v50 + 2));
          if (v51)
          {
            v50 += 2;
            goto LABEL_55;
          }
          int64_t v52 = v50 + 3;
          int64_t v42 = v50 + 2;
          if (v50 + 3 < v41)
          {
            unint64_t v51 = *(void *)(v92 + 8 * v52);
            if (v51)
            {
LABEL_58:
              int64_t v50 = v52;
LABEL_55:
              unint64_t v40 = (v51 - 1) & v51;
              unint64_t v45 = __clz(__rbit64(v51)) + (v50 << 6);
              int64_t v42 = v50;
              goto LABEL_51;
            }
            while (1)
            {
              int64_t v50 = v52 + 1;
              if (__OFADD__(v52, 1)) {
                goto LABEL_128;
              }
              if (v50 >= v41) {
                break;
              }
              unint64_t v51 = *(void *)(v92 + 8 * v50);
              ++v52;
              if (v51) {
                goto LABEL_55;
              }
            }
            int64_t v42 = v83;
          }
        }
      }
    }
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC938);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v7, 1, 1, v53);
    unint64_t v40 = 0;
  }
  swift_release();
  uint64_t v55 = v91;
  uint64_t v56 = v91 + 13;
  swift_beginAccess();
  uint64_t v57 = v55[13];
  uint64_t v58 = v57 + 64;
  uint64_t v59 = 1 << *(unsigned char *)(v57 + 32);
  uint64_t v60 = -1;
  if (v59 < 64) {
    uint64_t v60 = ~(-1 << v59);
  }
  uint64_t v61 = v60 & *(void *)(v57 + 64);
  int64_t v62 = (unint64_t)(v59 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v63 = 0;
  while (2)
  {
    if (v61)
    {
      v61 &= v61 - 1;
LABEL_75:
      type metadata accessor for ObjectEntity();
      swift_retain();
      sub_2347ED6F0();
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v64 = v63 + 1;
  if (__OFADD__(v63, 1)) {
    goto LABEL_121;
  }
  if (v64 < v62)
  {
    uint64_t v65 = *(void *)(v58 + 8 * v64);
    ++v63;
    if (!v65)
    {
      int64_t v63 = v64 + 1;
      if (v64 + 1 >= v62) {
        goto LABEL_93;
      }
      uint64_t v65 = *(void *)(v58 + 8 * v63);
      if (!v65)
      {
        int64_t v63 = v64 + 2;
        if (v64 + 2 >= v62) {
          goto LABEL_93;
        }
        uint64_t v65 = *(void *)(v58 + 8 * v63);
        if (!v65)
        {
          int64_t v63 = v64 + 3;
          if (v64 + 3 >= v62) {
            goto LABEL_93;
          }
          uint64_t v65 = *(void *)(v58 + 8 * v63);
          if (!v65)
          {
            int64_t v66 = v64 + 4;
            if (v66 >= v62) {
              goto LABEL_93;
            }
            uint64_t v65 = *(void *)(v58 + 8 * v66);
            if (!v65)
            {
              while (1)
              {
                int64_t v63 = v66 + 1;
                if (__OFADD__(v66, 1)) {
                  break;
                }
                if (v63 >= v62) {
                  goto LABEL_93;
                }
                uint64_t v65 = *(void *)(v58 + 8 * v63);
                ++v66;
                if (v65) {
                  goto LABEL_92;
                }
              }
LABEL_126:
              __break(1u);
              goto LABEL_127;
            }
            int64_t v63 = v66;
          }
        }
      }
    }
LABEL_92:
    uint64_t v61 = (v65 - 1) & v65;
    goto LABEL_75;
  }
LABEL_93:
  swift_release();
  uint64_t v67 = v91;
  uint64_t v68 = v91 + 16;
  swift_beginAccess();
  uint64_t v69 = v67[16];
  uint64_t v70 = v69 + 64;
  uint64_t v71 = 1 << *(unsigned char *)(v69 + 32);
  uint64_t v72 = -1;
  if (v71 < 64) {
    uint64_t v72 = ~(-1 << v71);
  }
  uint64_t v73 = v72 & *(void *)(v69 + 64);
  int64_t v74 = (unint64_t)(v71 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v75 = 0;
  while (2)
  {
    if (v73)
    {
      v73 &= v73 - 1;
LABEL_97:
      type metadata accessor for PlaceholderEntity();
      swift_retain();
      sub_2347ED6F0();
      uint64_t result = swift_release();
      continue;
    }
    break;
  }
  int64_t v76 = v75 + 1;
  if (__OFADD__(v75, 1)) {
    goto LABEL_122;
  }
  if (v76 >= v74)
  {
LABEL_115:
    swift_release();
    type metadata accessor for ScanContainer();
    sub_2347ED710();
    uint64_t v79 = v88;
    sub_2347EDF30();
    uint64_t v80 = v90;
    sub_2347EDF40();
    if (v93)
    {
      sub_2347EDFB0();
      do
      {
        sub_2347ED6F0();
        swift_release();
        sub_2347EDF40();
      }
      while (v93);
    }
    (*(void (**)(char *, uint64_t))(v89 + 8))(v79, v80);
    uint64_t v81 = MEMORY[0x263F8EE80];
    *uint64_t v87 = MEMORY[0x263F8EE80];
    swift_bridgeObjectRelease();
    *uint64_t v85 = v81;
    swift_bridgeObjectRelease();
    *uint64_t v84 = v81;
    swift_bridgeObjectRelease();
    *uint64_t v56 = v81;
    swift_bridgeObjectRelease();
    *uint64_t v68 = v81;
    return swift_bridgeObjectRelease();
  }
  uint64_t v77 = *(void *)(v70 + 8 * v76);
  ++v75;
  if (v77) {
    goto LABEL_114;
  }
  int64_t v75 = v76 + 1;
  if (v76 + 1 >= v74) {
    goto LABEL_115;
  }
  uint64_t v77 = *(void *)(v70 + 8 * v75);
  if (v77) {
    goto LABEL_114;
  }
  int64_t v75 = v76 + 2;
  if (v76 + 2 >= v74) {
    goto LABEL_115;
  }
  uint64_t v77 = *(void *)(v70 + 8 * v75);
  if (v77) {
    goto LABEL_114;
  }
  int64_t v75 = v76 + 3;
  if (v76 + 3 >= v74) {
    goto LABEL_115;
  }
  uint64_t v77 = *(void *)(v70 + 8 * v75);
  if (v77)
  {
LABEL_114:
    uint64_t v73 = (v77 - 1) & v77;
    goto LABEL_97;
  }
  int64_t v78 = v76 + 4;
  if (v78 >= v74) {
    goto LABEL_115;
  }
  uint64_t v77 = *(void *)(v70 + 8 * v78);
  if (v77)
  {
    int64_t v75 = v78;
    goto LABEL_114;
  }
  while (1)
  {
    int64_t v75 = v78 + 1;
    if (__OFADD__(v78, 1)) {
      break;
    }
    if (v75 >= v74) {
      goto LABEL_115;
    }
    uint64_t v77 = *(void *)(v70 + 8 * v75);
    ++v78;
    if (v77) {
      goto LABEL_114;
    }
  }
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
  return result;
}

uint64_t sub_2346BAD70()
{
  sub_2346BBA5C(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_2346BADD8()
{
  sub_2346BAD70();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EntityManager()
{
  return self;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScanEntityType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ScanEntityType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346BAF98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_2346BAFC0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_2346BAFC8(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ScanEntityType()
{
  return &type metadata for ScanEntityType;
}

unint64_t sub_2346BAFE8()
{
  unint64_t result = qword_2687AC918;
  if (!qword_2687AC918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AC918);
  }
  return result;
}

unint64_t sub_2346BB03C()
{
  unint64_t result = qword_2687AC920;
  if (!qword_2687AC920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AC920);
  }
  return result;
}

uint64_t sub_2346BB090(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x263F8EE78];
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = type metadata accessor for CapturedRoom.Surface(0);
    uint64_t v7 = a1
       + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));
    int v8 = (uint64_t *)(a2 + 112);
    uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v10 = v7 + *(int *)(v6 + 44);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v11 = sub_2347BFA88(v10);
      LOBYTE(v10) = v12;
      swift_bridgeObjectRelease();
      if (v10)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *v8;
        uint64_t v18 = *v8;
        *int v8 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_2347D5DC4();
          uint64_t v14 = v18;
        }
        uint64_t v15 = *(void *)(v14 + 48);
        uint64_t v16 = sub_2347ED5C0();
        (*(void (**)(unint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v11, v16);
        sub_2347D3174(v11, v18);
        *int v8 = v18;
        swift_bridgeObjectRelease();
        uint64_t v17 = swift_endAccess();
        MEMORY[0x237DC6730](v17);
        if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
      }
      else
      {
        swift_endAccess();
      }
      v7 += v9;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v19;
  }
  return result;
}

uint64_t sub_2346BB2BC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  char v12 = a3 & 1;
  v16[3] = a5;
  v16[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a4 + 72) = 0;
  type metadata accessor for ScanContainer();
  swift_allocObject();
  *(void *)(a4 + 80) = sub_2347ED690();
  uint64_t v14 = MEMORY[0x263F8EE80];
  *(void *)(a4 + 96) = MEMORY[0x263F8EE80];
  *(void *)(a4 + 104) = v14;
  *(void *)(a4 + 112) = sub_2347990BC(MEMORY[0x263F8EE78]);
  *(void *)(a4 + 120) = v14;
  *(void *)(a4 + 128) = v14;
  *(unsigned char *)(a4 + 136) = 0;
  *(void *)(a4 + 152) = 0x40A000003FC00000;
  sub_2346A1DCC((uint64_t)v16, a4 + 32);
  *(void *)(a4 + 144) = a2;
  *(unsigned char *)(a4 + 88) = v12;
  *(float *)(a4 + 140) = a7;
  *(float *)(a4 + 156) = a7 * 1.5;
  swift_retain();
  sub_2346B3250();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return a4;
}

uint64_t sub_2346BB3F0(uint64_t a1, uint64_t a2, char a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v12 = a3 & 1;
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EntityManager();
  uint64_t v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a6);
  return sub_2346BB2BC((uint64_t)v15, a2, v12, v16, a6, a7, a4);
}

uint64_t sub_2346BB504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC930);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2346BB56C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

double sub_2346BB5A4(uint64_t a1)
{
  return sub_2346B9938(a1);
}

uint64_t sub_2346BB5AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346B9C5C(a1, a2, a3);
}

void sub_2346BB5CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

double sub_2346BB5EC(uint64_t a1)
{
  return sub_2346B8D5C(a1);
}

uint64_t sub_2346BB5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346B8EAC(a1, a2, a3);
}

double sub_2346BB618(uint64_t a1)
{
  return sub_2346B8274(a1);
}

uint64_t sub_2346BB620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346B83C4(a1, a2, a3);
}

double sub_2346BB644(uint64_t a1)
{
  return sub_2346B7350(a1);
}

uint64_t sub_2346BB64C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346B74A0(a1, a2, a3);
}

uint64_t objectdestroy_52Tm()
{
  uint64_t v1 = sub_2347ED5C0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 0xF;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF0) + 23) & 0xFFFFFFFFFFFFFFF0)
     + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

void sub_2346BB738(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_2347ED5C0() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_2346B9FF0(a1, v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void (**)(uint64_t, __n128))(v2 + ((((v7 + 31) & 0xFFFFFFFFFFFFFFF0) + 23) & 0xFFFFFFFFFFFFFFF0)), a2, *(__n128 *)(v2 + ((v7 + 31) & 0xFFFFFFFFFFFFFFF0)));
}

uint64_t objectdestroy_56Tm()
{
  uint64_t v1 = sub_2347ED5C0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x270FA0238](v0, v6, v5);
}

uint64_t sub_2346BB8F0(__n128 a1)
{
  uint64_t v2 = *(void *)(sub_2347ED5C0() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_2346B9D58(a1, v4, v1 + v3, v5);
}

uint64_t sub_2346BB994(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346BB9FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2346BBA5C(uint64_t a1)
{
  return a1;
}

void *sub_2346BBA84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 44);
    unint64_t v6 = (char *)(a1 + v5);
    unint64_t v7 = (char *)a2 + v5;
    *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC940);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v12 = sub_2347ED5C0();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(v6, v7, v12);
      v13(&v6[*(int *)(v8 + 48)], &v7[*(int *)(v8 + 48)], v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_2346BBC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 44);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = sub_2347ED5C0();
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v5 - 8), v2, v5);
    uint64_t v6 = v2 + *(int *)(v3 + 48);
    return v7(v6, v5);
  }
  return result;
}

uint64_t sub_2346BBD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC940);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = sub_2347ED5C0();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v5, v6, v10);
    v11(&v5[*(int *)(v7 + 48)], &v6[*(int *)(v7 + 48)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_2346BBEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v16 = sub_2347ED5C0();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24);
      v17(v5, v6, v16);
      v17(&v5[*(int *)(v7 + 48)], &v6[*(int *)(v7 + 48)], v16);
      return a1;
    }
    sub_2346BC0E0((uint64_t)v5);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC940);
    memcpy(v5, v6, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  uint64_t v12 = sub_2347ED5C0();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v5, v6, v12);
  v13(&v5[*(int *)(v7 + 48)], &v6[*(int *)(v7 + 48)], v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_2346BC0E0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2346BC140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC940);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = sub_2347ED5C0();
    int v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(v5, v6, v10);
    v11(&v5[*(int *)(v7 + 48)], &v6[*(int *)(v7 + 48)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_2346BC2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      uint64_t v17 = sub_2347ED5C0();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40);
      v18(v6, v7, v17);
      v18(&v6[*(int *)(v8 + 48)], &v7[*(int *)(v8 + 48)], v17);
      return a1;
    }
    sub_2346BC0E0((uint64_t)v6);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC940);
    memcpy(v6, v7, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  uint64_t v13 = sub_2347ED5C0();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v6, v7, v13);
  v14(&v6[*(int *)(v8 + 48)], &v7[*(int *)(v8 + 48)], v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  return a1;
}

uint64_t sub_2346BC4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2346BC4D8);
}

uint64_t sub_2346BC4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 44);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC940);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_2346BC54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2346BC560);
}

uint64_t sub_2346BC560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 44);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC940);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata accessor for ScanItemStrut()
{
  uint64_t result = qword_2687AC948;
  if (!qword_2687AC948) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_2346BC624()
{
  sub_2346BC6D8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_2346BC6D8()
{
  if (!qword_2687AC958)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2687AC818);
    unint64_t v0 = sub_2347EEB10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687AC958);
    }
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_2346BC77C@<X0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>, simd_float4x4 a3@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, float a4@<S4>, float a5@<S5>)
{
  return sub_2346BC7C4(a1, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightNormal, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftNormal, a2, a3, a4, a5);
}

uint64_t sub_2346BC7A0@<X0>(float32x2_t *a1@<X0>, uint64_t a2@<X8>, simd_float4x4 a3@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, float a4@<S4>, float a5@<S5>)
{
  return sub_2346BC7C4(a1, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftNormal, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightNormal, a2, a3, a4, a5);
}

uint64_t sub_2346BC7C4@<X0>(float32x2_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>, simd_float4x4 a7@<0:Q0, 16:Q1, 32:Q2, 48:Q3>, float a8@<S4>, float a9@<S5>)
{
  simd_float4x4 v33 = __invert_f4(a7);
  int8x16_t v17 = (int8x16_t)vaddq_f32((float32x4_t)v33.columns[3], vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(void *)&a1[2])), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], a1[2], 1));
  int32x2_t v18 = vzip1_s32(*(int32x2_t *)v17.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  int8x16_t v19 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(void *)((char *)a1 + *a2))), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], *(float32x2_t *)((char *)a1 + *a2), 1), (float32x4_t)0, (float32x4_t)v33.columns[3]);
  int32x2_t v20 = vzip1_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
  int8x16_t v21 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(void *)((char *)a1 + *a3))), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], *(float32x2_t *)((char *)a1 + *a3), 1), (float32x4_t)0, (float32x4_t)v33.columns[3]);
  int32x2_t v22 = vzip1_s32(*(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
  int8x16_t v23 = (int8x16_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(void *)((char *)a1 + *a4))), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], *(float32x2_t *)((char *)a1 + *a4), 1), (float32x4_t)0, (float32x4_t)v33.columns[3]);
  int32x2_t v24 = vzip1_s32(*(int32x2_t *)v23.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
  v33.columns[0] = (simd_float4)vmlaq_f32(vmlaq_lane_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)v33.columns[0], COERCE_FLOAT(*(void *)((char *)a1 + *a5))), (float32x4_t)0, (float32x4_t)v33.columns[1]), (float32x4_t)v33.columns[2], *(float32x2_t *)((char *)a1 + *a5), 1), (float32x4_t)0, (float32x4_t)v33.columns[3]);
  int32x2_t v25 = vzip1_s32(*(int32x2_t *)v33.columns[0].f32, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33.columns[0], (int8x16_t)v33.columns[0], 8uLL));
  uint64_t v26 = a6 + *(int *)(type metadata accessor for ScanItemStrut() + 44);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC818);
  uint64_t v28 = v26 + *(int *)(v27 + 48);
  uint64_t v29 = (char *)a1 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftUUID;
  uint64_t v30 = sub_2347ED5C0();
  int64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v30 - 8) + 16);
  v31(v26, v29, v30);
  v31(v28, (char *)a1 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightUUID, v30);
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 0, 1, v27);
  *(int32x2_t *)a6 = v18;
  *(int32x2_t *)(a6 + 8) = v20;
  *(int32x2_t *)(a6 + 16) = v22;
  *(float *)(a6 + 24) = a8;
  *(int32x2_t *)(a6 + 32) = v24;
  *(int32x2_t *)(a6 + 40) = v25;
  *(float *)(a6 + 48) = a9;
  return result;
}

BOOL sub_2346BC9D4(float32x2_t *a1, float a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ScanItemStrut();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v63 = (uint64_t)&v59 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v61 = (float32x2_t *)((char *)&v59 - v12);
  MEMORY[0x270FA5388](v13);
  int64_t v62 = (float32x2_t *)((char *)&v59 - v14);
  MEMORY[0x270FA5388](v15);
  int8x16_t v17 = (float32x2_t *)((char *)&v59 - v16);
  MEMORY[0x270FA5388](v18);
  uint64_t v60 = (float32x2_t *)((char *)&v59 - v19);
  MEMORY[0x270FA5388](v20);
  int32x2_t v22 = (float *)((char *)&v59 - v21);
  MEMORY[0x270FA5388](v23);
  int32x2_t v25 = (float *)((char *)&v59 - v24);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (float32x2_t *)((char *)&v59 - v27);
  MEMORY[0x270FA5388](v29);
  int64_t v31 = (float32x2_t *)((char *)&v59 - v30);
  MEMORY[0x270FA5388](v32);
  int64_t v34 = (float32x2_t *)((char *)&v59 - v33);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (float32x2_t *)((char *)&v59 - v36);
  float32x2_t v38 = vsub_f32(*v3, *a1);
  float v39 = vaddv_f32(vmul_f32(v38, v38));
  float v40 = a2 * a2;
  sub_2346A9EC4((uint64_t)v3, (uint64_t)&v59 - v36);
  sub_2346A9EC4((uint64_t)a1, (uint64_t)v34);
  int64_t v64 = v8;
  if (v39 >= (float)(a2 * a2))
  {
    sub_2346BD1B0((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346BD1B0((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346A9EC4((uint64_t)v3, (uint64_t)v31);
    sub_2346A9EC4((uint64_t)a1, (uint64_t)v28);
    goto LABEL_9;
  }
  float32x2_t v41 = vsub_f32(v37[1], v34[1]);
  float v42 = vaddv_f32(vmul_f32(v41, v41));
  sub_2346BD1B0((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346BD1B0((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346A9EC4((uint64_t)v3, (uint64_t)v31);
  sub_2346A9EC4((uint64_t)a1, (uint64_t)v28);
  if (v42 >= v40)
  {
LABEL_9:
    sub_2346BD1B0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346BD1B0((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346A9EC4((uint64_t)v3, (uint64_t)v25);
    sub_2346A9EC4((uint64_t)a1, (uint64_t)v22);
    uint64_t v46 = v60;
    unint64_t v45 = v61;
    goto LABEL_10;
  }
  float32x2_t v43 = vsub_f32(v31[2], v28[2]);
  float v44 = vaddv_f32(vmul_f32(v43, v43));
  sub_2346BD1B0((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346BD1B0((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346A9EC4((uint64_t)v3, (uint64_t)v25);
  sub_2346A9EC4((uint64_t)a1, (uint64_t)v22);
  uint64_t v46 = v60;
  unint64_t v45 = v61;
  if (v44 >= v40)
  {
LABEL_10:
    sub_2346BD1B0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346BD1B0((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346A9EC4((uint64_t)v3, (uint64_t)v46);
    sub_2346A9EC4((uint64_t)a1, (uint64_t)v17);
    uint64_t v48 = (uint64_t)v64;
    uint64_t v49 = v62;
    goto LABEL_11;
  }
  float v47 = vabds_f32(v25[6], v22[6]);
  sub_2346BD1B0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346BD1B0((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346A9EC4((uint64_t)v3, (uint64_t)v46);
  sub_2346A9EC4((uint64_t)a1, (uint64_t)v17);
  uint64_t v48 = (uint64_t)v64;
  uint64_t v49 = v62;
  if (v47 >= a2)
  {
LABEL_11:
    sub_2346BD1B0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346BD1B0((uint64_t)v46, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346A9EC4((uint64_t)v3, (uint64_t)v49);
    sub_2346A9EC4((uint64_t)a1, (uint64_t)v45);
    goto LABEL_12;
  }
  float32x2_t v50 = vsub_f32(v46[4], v17[4]);
  float v51 = vaddv_f32(vmul_f32(v50, v50));
  sub_2346BD1B0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346BD1B0((uint64_t)v46, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346A9EC4((uint64_t)v3, (uint64_t)v49);
  sub_2346A9EC4((uint64_t)a1, (uint64_t)v45);
  if (v51 >= v40)
  {
LABEL_12:
    sub_2346BD1B0((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    sub_2346BD1B0((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
    uint64_t v57 = (uint64_t)v3;
    uint64_t v55 = v63;
    sub_2346A9EC4(v57, v63);
    sub_2346A9EC4((uint64_t)a1, v48);
    goto LABEL_13;
  }
  float32x2_t v52 = vsub_f32(v49[5], v45[5]);
  float v53 = vaddv_f32(vmul_f32(v52, v52));
  sub_2346BD1B0((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346BD1B0((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  uint64_t v54 = (uint64_t)v3;
  uint64_t v55 = v63;
  sub_2346A9EC4(v54, v63);
  sub_2346A9EC4((uint64_t)a1, v48);
  if (v53 >= v40)
  {
LABEL_13:
    BOOL v56 = 0;
    goto LABEL_14;
  }
  BOOL v56 = vabds_f32(*(float *)(v55 + 48), *(float *)(v48 + 48)) < a2;
LABEL_14:
  sub_2346BD1B0(v48, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  sub_2346BD1B0(v55, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  return v56;
}

uint64_t sub_2346BCFBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (a3->i8[OBJC_IVAR____TtC8RoomPlan13JunctionPoint_configuration])
  {
    swift_release();
    sub_2346BD1B0(a2, type metadata accessor for CapturedRoom.Surface);
    sub_2346BD1B0(a1, type metadata accessor for CapturedRoom.Surface);
    uint64_t v7 = type metadata accessor for ScanItemStrut();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = a4;
    uint64_t v11 = 1;
  }
  else
  {
    float v12 = *(float *)(a1 + 24);
    if (v12 <= 0.0)
    {
      if ((*(unsigned char *)a1 - 2) > 3u) {
        float v13 = 0.08;
      }
      else {
        float v13 = flt_2347F1D00[(char)(*(unsigned char *)a1 - 2)];
      }
    }
    else
    {
      float v13 = v12 * 0.5;
    }
    float v15 = *(float *)(a2 + 24);
    if (v15 <= 0.0)
    {
      if ((*(unsigned char *)a2 - 2) > 3u) {
        float v16 = 0.08;
      }
      else {
        float v16 = flt_2347F1D00[(char)(*(unsigned char *)a2 - 2)];
      }
    }
    else
    {
      float v16 = v15 * 0.5;
    }
    simd_float4x4 v14 = *(simd_float4x4 *)(a1 + 32);
    sub_2346BC7C4(a3, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_leftNormal, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightDirection, &OBJC_IVAR____TtC8RoomPlan13JunctionPoint_rightNormal, a4, v14, v13, v16);
    sub_2346BD1B0(a2, type metadata accessor for CapturedRoom.Surface);
    sub_2346BD1B0(a1, type metadata accessor for CapturedRoom.Surface);
    uint64_t v17 = type metadata accessor for ScanItemStrut();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    uint64_t v9 = v17;
    uint64_t v10 = a4;
    uint64_t v11 = 0;
  }

  return v8(v10, v11, 1, v9);
}

uint64_t sub_2346BD1B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2346BD210(float32x2_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v29 - v8;
  MEMORY[0x270FA5388](v10);
  float v12 = (char *)&v29 - v11;
  MEMORY[0x270FA5388](v13);
  float v15 = (char *)&v29 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (float *)((char *)&v29 - v17);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (float *)((char *)&v29 - v20);
  int32x2_t v22 = vceq_f32(*v2, *a1);
  if ((v22.i8[0] & 1) == 0)
  {
    sub_2346BD4BC((uint64_t)v2, (uint64_t)&v29 - v20);
    sub_2346BD4BC((uint64_t)a1, (uint64_t)v18);
    goto LABEL_7;
  }
  __int8 v23 = v22.i8[4];
  sub_2346BD4BC((uint64_t)v2, (uint64_t)&v29 - v20);
  sub_2346BD4BC((uint64_t)a1, (uint64_t)v18);
  if ((v23 & 1) == 0)
  {
LABEL_7:
    sub_2346B2844((uint64_t)v18);
    sub_2346B2844((uint64_t)v21);
    sub_2346BD4BC((uint64_t)v2, (uint64_t)v15);
    sub_2346BD4BC((uint64_t)a1, (uint64_t)v12);
    goto LABEL_8;
  }
  float v24 = v21[2];
  sub_2346B2844((uint64_t)v21);
  float v25 = v18[2];
  sub_2346B2844((uint64_t)v18);
  sub_2346BD4BC((uint64_t)v2, (uint64_t)v15);
  sub_2346BD4BC((uint64_t)a1, (uint64_t)v12);
  if (v24 != v25)
  {
LABEL_8:
    sub_2346B2844((uint64_t)v12);
    sub_2346B2844((uint64_t)v15);
    sub_2346BD4BC((uint64_t)v2, (uint64_t)v9);
    sub_2346BD4BC((uint64_t)a1, (uint64_t)v6);
    goto LABEL_9;
  }
  sub_2346B2804();
  char v26 = sub_2347ED0F0();
  sub_2346B2844((uint64_t)v12);
  sub_2346B2844((uint64_t)v15);
  sub_2346BD4BC((uint64_t)v2, (uint64_t)v9);
  sub_2346BD4BC((uint64_t)a1, (uint64_t)v6);
  if ((v26 & 1) == 0)
  {
LABEL_9:
    char v27 = 0;
    goto LABEL_10;
  }
  char v27 = sub_2347ED0F0();
LABEL_10:
  sub_2346B2844((uint64_t)v6);
  sub_2346B2844((uint64_t)v9);
  return v27 & 1;
}

uint64_t sub_2346BD4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_2346BD520()
{
  qword_2687BDF30 = MEMORY[0x263F8EE78];
}

void sub_2346BD534()
{
  qword_2687BDF38 = MEMORY[0x263F8EE78];
}

void sub_2346BD548()
{
  qword_2687BDF40 = MEMORY[0x263F8EE78];
}

void sub_2346BD55C()
{
  qword_2687BDF48 = (uint64_t)&unk_26E76FBB8;
}

void sub_2346BD570()
{
  qword_2687BDF50 = MEMORY[0x263F8EE78];
}

void sub_2346BD584()
{
  qword_2687BDF58 = (uint64_t)&unk_26E76FDE0;
}

uint64_t type metadata accessor for ObjectEntity()
{
  uint64_t result = qword_2687AC960;
  if (!qword_2687AC960) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2346BD5E4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_2346BD624(uint64_t a1, char a2, double a3)
{
  uint64_t v5 = v3;
  int v8 = a2 & 1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2347ED5C0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  float v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_2346D4018(a1, v8, a3);
  if (v4) {
    return result;
  }
  if (qword_2687ABCC8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_2687BDE30;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v5 + qword_2687BDFA8, v12);
  swift_beginAccess();
  uint64_t v18 = *(void *)(v17 + 24);
  if (!*(void *)(v18 + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_2347BFA88((uint64_t)v15);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if ((*(unsigned char *)(v5 + qword_2687BDFB8) & 1) == 0
    && *(unsigned char *)(v21 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category) == 18)
  {
    uint64_t v22 = v5 + qword_2687BDFB0;
    swift_beginAccess();
    sub_2346A1DCC(v22, (uint64_t)v37);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC970);
    type metadata accessor for SimpleScanMaterial();
    if (swift_dynamicCast())
    {
      uint64_t v23 = v36[4];
      sub_2346BDD0C(v21 + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID, (uint64_t)v11);
      int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
      sub_2346BDD74((uint64_t)v11);
      float v25 = 1.0;
      if (v24 != 1)
      {
        if (qword_2687ABE90 != -1) {
          swift_once();
        }
        char v26 = (float *)off_2687AF0E8;
        swift_beginAccess();
        float v25 = 1.0 - (float)(v26[30] + v26[30]);
      }
      if (*(float *)(v23 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) != v25)
      {
        *(float *)(v23 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = v25;
        sub_2346D3990();
        type metadata accessor for ObjectEntity();
        sub_2346BDDD4();
        char v27 = (void (*)(unsigned char *, void))sub_2347EDFD0();
        uint64_t v29 = v28;
        uint64_t v30 = sub_2347ED990();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
          uint64_t v31 = swift_allocObject();
          *(_OWORD *)(v31 + 16) = xmmword_2347F0FA0;
          uint64_t v32 = sub_2347EE280();
          uint64_t v33 = MEMORY[0x263F165F8];
          *(void *)(v31 + 56) = v32;
          *(void *)(v31 + 64) = v33;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v31 + 32));
          uint64_t v35 = v23 + OBJC_IVAR____TtC8RoomPlan22MeshUpdateScanMaterial_customMaterial;
          swift_beginAccess();
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(boxed_opaque_existential_1, v35, v32);
          sub_2347ED980();
        }
        v27(v37, 0);
      }
      swift_release();
    }
  }
  return swift_release();
}

uint64_t sub_2346BDB20()
{
  if (*(void *)(v0 + qword_2687BDFC8))
  {
    type metadata accessor for ScanEntity();
    swift_retain();
    sub_2347ED6E0();
    swift_release();
  }
  if (qword_2687ABDC8 != -1) {
    swift_once();
  }
  if (qword_2687BE090)
  {
    swift_beginAccess();
    uint64_t v1 = swift_retain();
    sub_2347CC948(v1);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  uint64_t v2 = sub_2347EDFC0();
  uint64_t v3 = v2 + qword_2687BDFA8;
  uint64_t v4 = sub_2347ED5C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v2 + qword_2687BDFB0);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_2346BDD04()
{
  return type metadata accessor for ObjectEntity();
}

uint64_t sub_2346BDD0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2346BDD74(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2346BDDD4()
{
  unint64_t result = qword_2687AC978;
  if (!qword_2687AC978)
  {
    type metadata accessor for ObjectEntity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AC978);
  }
  return result;
}

uint64_t sub_2346BDE2C()
{
  type metadata accessor for ScanItemPerimeterManager();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 40) = MEMORY[0x263F8EE78];
  type metadata accessor for HullUtility();
  uint64_t result = swift_allocObject();
  *(void *)(v0 + 16) = result;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  qword_2687BDF70 = v0;
  return result;
}

uint64_t sub_2346BDE90()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2346BDE98()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScanItemPerimeterManager()
{
  return self;
}

uint64_t sub_2346BDEFC(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  float32x4_t v9 = 0uLL;
  float32x4_t v10 = 0uLL;
LABEL_4:
  float32x4_t v34 = v9;
  float32x4_t v33 = v10;
  while (v5)
  {
    unint64_t v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_6:
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * v12);
    if ((*(unsigned char *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) & 0xFE) == 2)
    {
      float32x4_t v31 = *(float32x4_t *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 16);
      float32x4_t v32 = *(float32x4_t *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform);
      __n128 v29 = *(__n128 *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 48);
      float32x4_t v30 = *(float32x4_t *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawTransform + 32);
      float32x4_t v28 = *(float32x4_t *)(v13 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions);
      swift_retain();
      uint64_t v17 = sub_2346AD054(v32, v31, v30, v29, v28, 0.16);
      uint64_t v18 = v17[1].i64[0];
      if (v18)
      {
        unint64_t v19 = v17 + 2;
        float32x4_t v20 = v34;
        float32x4_t v21 = v33;
        do
        {
          float32x4_t v22 = *v19++;
          int16x4_t v23 = vmovn_s32(vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)vtrn1q_s32((int32x4_t)v22, (int32x4_t)v21), (int8x16_t)vtrn2q_s32((int32x4_t)v22, (int32x4_t)v21), 8uLL), (float32x4_t)vextq_s8((int8x16_t)vtrn1q_s32((int32x4_t)v20, (int32x4_t)v22), (int8x16_t)vtrn2q_s32((int32x4_t)v20, (int32x4_t)v22), 8uLL)));
          v24.i64[1] = v21.i64[1];
          v24.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32(v21, v22), (int8x16_t)v22, (int8x16_t)v21).u32[0];
          v25.i64[1] = v20.i64[1];
          v25.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32(v22, v20), (int8x16_t)v22, (int8x16_t)v20).u32[0];
          int8x16_t v26 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s16(v23, *(int16x4_t *)v22.f32)), 0x1FuLL)), (int8x16_t)v22, (int8x16_t)v21);
          int8x16_t v27 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(v23, 0)), 0x1FuLL)), (int8x16_t)v22, (int8x16_t)v20);
          v24.i32[1] = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(v23, 3)), 0x1FuLL)), *(int8x16_t *)&v22, *(int8x16_t *)&v21).i32[1];
          v25.i32[1] = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(v23, 2)), 0x1FuLL)), *(int8x16_t *)&v22, *(int8x16_t *)&v20).i32[1];
          float32x4_t v21 = v24;
          v21.i32[2] = v26.i32[2];
          float32x4_t v20 = v25;
          v20.i32[2] = v27.i32[2];
          --v18;
        }
        while (v18);
        float32x4_t v33 = v21;
        float32x4_t v34 = v20;
      }
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      float32x4_t v9 = v34;
      float32x4_t v10 = v33;
      goto LABEL_4;
    }
  }
  int64_t v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v14 >= v6) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v2 + 8 * v14);
  ++v8;
  if (v15) {
    goto LABEL_23;
  }
  int64_t v8 = v14 + 1;
  if (v14 + 1 >= v6) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v2 + 8 * v8);
  if (v15) {
    goto LABEL_23;
  }
  int64_t v8 = v14 + 2;
  if (v14 + 2 >= v6) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v2 + 8 * v8);
  if (v15) {
    goto LABEL_23;
  }
  int64_t v8 = v14 + 3;
  if (v14 + 3 >= v6) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v2 + 8 * v8);
  if (v15)
  {
LABEL_23:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v8 << 6);
    goto LABEL_6;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v6) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v2 + 8 * v16);
  if (v15)
  {
    int64_t v8 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v8 >= v6) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v2 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

BOOL sub_2346BE230(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

__n128 sub_2346BE244(int8x16_t a1)
{
  type metadata accessor for RoomCaptureMeshDimensionsRestriction();
  if (swift_initStaticObject() == v1)
  {
    return (__n128)a1;
  }
  else
  {
    int8x16_t v3 = a1;
    v3.i32[0] = fabsf(*(float *)(v1 + 20));
    if (*(unsigned char *)(v1 + 24)) {
      unsigned int v4 = -1;
    }
    else {
      unsigned int v4 = 0;
    }
    result.n128_u64[0] = vbslq_s8((int8x16_t)vdupq_n_s32(v4), a1, v3).u64[0];
    if ((*(unsigned char *)(v1 + 32) & 1) == 0) {
      result.n128_u32[1] = fabsf(*(float *)(v1 + 28));
    }
  }
  return result;
}

double sub_2346BE2D4(double a1, double a2)
{
  type metadata accessor for RoomCaptureMeshDimensionsRestriction();
  if (swift_initStaticObject() == v2) {
    return a1;
  }
  if (*(unsigned char *)(v2 + 24)) {
    float v3 = 0.0;
  }
  else {
    float v3 = *(float *)(v2 + 20);
  }
  if (*(unsigned char *)(v2 + 32)) {
    float v4 = 0.0;
  }
  else {
    float v4 = *(float *)(v2 + 28);
  }
  double result = a1;
  switch(*(unsigned char *)(v2 + 16))
  {
    case 1:
      float v6 = (float)(*(float *)&a1 + (float)(0.5 * *(float *)&a2)) - (float)(v3 * 0.5);
      float v7 = (float)(*((float *)&a1 + 1) + 0.0) - (float)(v4 * 0.5);
      goto LABEL_16;
    case 2:
      float v6 = (float)(*(float *)&a1 + 0.0) - (float)(v3 * 0.5);
      float v7 = (float)(*((float *)&a1 + 1) + vmuls_lane_f32(0.5, *(float32x2_t *)&a2, 1)) - (float)(v4 * 0.5);
      goto LABEL_16;
    case 3:
      float v6 = *(float *)&a1 + (float)(v3 * 0.5);
      float v7 = (float)(*((float *)&a1 + 1) - vmuls_lane_f32(0.5, *(float32x2_t *)&a2, 1)) + (float)(v4 * 0.5);
      goto LABEL_16;
    case 4:
      float v6 = (float)(*(float *)&a1 + 0.0) - (float)(v3 * 0.5);
      float v7 = (float)(*((float *)&a1 + 1) + 0.0) - (float)(v4 * 0.5);
      goto LABEL_16;
    case 5:
      float v6 = *(float *)&a1 + (float)(v3 * 0.5);
      float v7 = *((float *)&a1 + 1) + (float)(v4 * 0.5);
      goto LABEL_16;
    case 6:
      return result;
    default:
      float v6 = (float)(*(float *)&a1 - (float)(0.5 * *(float *)&a2)) + (float)(v3 * 0.5);
      float v7 = *((float *)&a1 + 1) + (float)(v4 * 0.5);
LABEL_16:
      double result = COERCE_DOUBLE(__PAIR64__(LODWORD(v7), LODWORD(v6)));
      break;
  }
  return result;
}

uint64_t sub_2346BE4F4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RoomCaptureMeshDimensionsRestriction()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ScanItemType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RoomCaptureMeshDimensionsRestriction.Side(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *double result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346BE684);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 6;
        break;
    }
  }
  return result;
}

unsigned char *sub_2346BE6AC(unsigned char *result, char a2)
{
  *double result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RoomCaptureMeshDimensionsRestriction.Side()
{
  return &type metadata for RoomCaptureMeshDimensionsRestriction.Side;
}

unint64_t sub_2346BE6C8()
{
  unint64_t result = qword_2687AC980;
  if (!qword_2687AC980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AC980);
  }
  return result;
}

uint64_t type metadata accessor for DebugArrowEntity()
{
  uint64_t result = qword_2687AC990;
  if (!qword_2687AC990) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2346BE768()
{
  uint64_t result = sub_2347ED930();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_2346BE80C()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9A0);
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v5 = sub_2347EE340();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = qword_2687BDF80;
  BOOL v7 = *(void **)(v0 + qword_2687BDF80);
  sub_2346BEF18();
  id v8 = v7;
  char v9 = sub_2347EEAE0();

  if ((v9 & 1) == 0)
  {
    float32x4_t v10 = *(void **)(v1 + v6);
    uint64_t v11 = sub_2347EE2A0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
    id v12 = v10;
    sub_2347EE330();
    uint64_t v13 = v1 + qword_2687AC988;
    swift_beginAccess();
    sub_2347ED910();
    swift_endAccess();
    type metadata accessor for DebugArrowEntity();
    sub_2346BEF58();
    int64_t v14 = (void (*)(unsigned char *, void))sub_2347EDFD0();
    uint64_t v16 = v15;
    uint64_t v17 = sub_2347ED990();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_2347F0FA0;
      uint64_t v19 = sub_2347ED930();
      uint64_t v20 = MEMORY[0x263F16178];
      *(void *)(v18 + 56) = v19;
      *(void *)(v18 + 64) = v20;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v18 + 32));
      swift_beginAccess();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(boxed_opaque_existential_1, v13, v19);
      sub_2347ED980();
    }
    v14(v23, 0);
  }
}

void sub_2346BEAC0()
{
}

uint64_t sub_2346BEB1C(void *a1)
{
  uint64_t v3 = sub_2347ED7D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_2347ED930();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  float32x4_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_retain();
  id v11 = a1;
  sub_2347ED920();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v8 + 32))(v1 + qword_2687AC988, v10, v7);
  *(void *)(v1 + qword_2687BDF80) = v11;
  id v12 = v11;
  swift_release();
  uint64_t v13 = sub_2347ED690();
  uint64_t v14 = qword_2687ABE08;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  sub_2347657E4((uint64_t)v6, (float32x4_t)xmmword_2347F1E50, 0.4);
  unint64_t v15 = sub_2346BEF58();
  uint64_t v16 = v13 + qword_2687AC988;
  swift_beginAccess();
  v21[3] = v7;
  v21[4] = MEMORY[0x263F16178];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v16, v7);
  uint64_t v18 = swift_retain();
  sub_234768190(v18, v15, (uint64_t)v6, (uint64_t)v21);

  swift_release_n();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  sub_2346BEFB0((uint64_t)v21);
  return v13;
}

void sub_2346BEDD0()
{
  uint64_t v1 = v0 + qword_2687AC988;
  uint64_t v2 = sub_2347ED930();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(void **)(v0 + qword_2687BDF80);
}

uint64_t sub_2346BEE4C()
{
  uint64_t v0 = sub_2347EDFC0();
  uint64_t v1 = v0 + qword_2687AC988;
  uint64_t v2 = sub_2347ED930();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_2346BEF04()
{
  return type metadata accessor for DebugArrowEntity();
}

uint64_t sub_2346BEF0C()
{
  return MEMORY[0x263F16570];
}

unint64_t sub_2346BEF18()
{
  unint64_t result = qword_2687AC9A8;
  if (!qword_2687AC9A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2687AC9A8);
  }
  return result;
}

unint64_t sub_2346BEF58()
{
  unint64_t result = qword_2687AC9B0;
  if (!qword_2687AC9B0)
  {
    type metadata accessor for DebugArrowEntity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AC9B0);
  }
  return result;
}

uint64_t sub_2346BEFB0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD280);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_2346BF010(double a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for StateSpring();
  id v3 = objc_msgSendSuper2(&v7, sel_initWithValue_, a1);
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
    objc_msgSend(v5, sel_setParameters_, 0.825, 0.08, 0.65, 0.08);
    objc_msgSend(v5, sel_parameters);
    objc_msgSend(v5, sel_setParameters_, 0.9);
    objc_msgSend(v5, sel_parameters);
    objc_msgSend(v5, sel_setParameters_);
  }
  return v4;
}

id sub_2346BF11C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StateSpring();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StateSpring()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for SpringDouble3(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SpringDouble3()
{
  return swift_bridgeObjectRelease();
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SpringDouble3(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for SpringDouble3()
{
  return &type metadata for SpringDouble3;
}

void *_s8RoomPlan16QuaternionSpringVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t _s8RoomPlan16QuaternionSpringVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_2346BF2C4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuaternionSpring()
{
  return &type metadata for QuaternionSpring;
}

void sub_2346BF314(__n128 a1, __n128 a2)
{
}

void sub_2346BF320(__n128 a1, __n128 a2)
{
}

void sub_2346BF32C(SEL *a1, __n128 a2, __n128 a3)
{
  unint64_t v5 = (unint64_t)*v3;
  unint64_t v6 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v7 = (id)MEMORY[0x237DC6CF0](0, v5);
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_17;
    }
    id v7 = *(id *)(v5 + 32);
  }
  uint64_t v8 = v7;
  objc_msgSend(v7, *a1, a2.n128_f64[0], *(_OWORD *)&a3);

  if (v6)
  {
    id v9 = (id)MEMORY[0x237DC6CF0](1, v5);
    goto LABEL_8;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v9 = *(id *)(v5 + 40);
LABEL_8:
  float32x4_t v10 = v9;
  objc_msgSend(v9, *a1, a2.n128_f64[1]);

  if (!v6)
  {
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
    {
      id v11 = *(id *)(v5 + 48);
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
    return;
  }
  id v11 = (id)MEMORY[0x237DC6CF0](2, v5);
LABEL_12:
  unint64_t v15 = v11;
  objc_msgSend(v11, *a1, v13);
}

void sub_2346BF444()
{
  unint64_t v1 = *v0;
  unint64_t v2 = *v0 & 0xC000000000000001;
  if (v2)
  {
    id v3 = (id)MEMORY[0x237DC6CF0](0, *v0);
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_17;
    }
    id v3 = *(id *)(v1 + 32);
  }
  id v4 = v3;
  objc_msgSend(v3, sel_parameters);
  objc_msgSend(v4, sel_setParameters_);

  if (v2)
  {
    id v5 = (id)MEMORY[0x237DC6CF0](1, v1);
    goto LABEL_8;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v5 = *(id *)(v1 + 40);
LABEL_8:
  unint64_t v6 = v5;
  objc_msgSend(v5, sel_parameters);
  objc_msgSend(v6, sel_setParameters_);

  if (!v2)
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
    {
      id v7 = *(id *)(v1 + 48);
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
    return;
  }
  id v7 = (id)MEMORY[0x237DC6CF0](2, v1);
LABEL_12:
  id v8 = v7;
  objc_msgSend(v7, sel_parameters);
  objc_msgSend(v8, sel_setParameters_);
}

void sub_2346BF590(unint64_t a1, double a2)
{
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v5 = (id)MEMORY[0x237DC6CF0](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }
    id v5 = *(id *)(a1 + 32);
  }
  unint64_t v6 = v5;
  objc_msgSend(v5, sel_step_, a2);

  if (v4)
  {
    id v7 = (id)MEMORY[0x237DC6CF0](1, a1);
    goto LABEL_8;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v7 = *(id *)(a1 + 40);
LABEL_8:
  id v8 = v7;
  objc_msgSend(v7, sel_step_, a2);

  if (v4)
  {
    id v9 = (id)MEMORY[0x237DC6CF0](2, a1);
    goto LABEL_12;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v9 = *(id *)(a1 + 48);
LABEL_12:
  float32x4_t v10 = v9;
  objc_msgSend(v9, sel_step_, a2);

  if (!v4)
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
    {
      id v11 = *(id *)(a1 + 56);
      goto LABEL_16;
    }
LABEL_23:
    __break(1u);
    return;
  }
  id v11 = (id)MEMORY[0x237DC6CF0](3, a1);
LABEL_16:
  id v12 = v11;
  objc_msgSend(v11, sel_step_, a2);
}

void sub_2346BF6F0(unint64_t a1)
{
}

void sub_2346BF6FC(__n128 a1, __n128 a2)
{
}

void sub_2346BF708(unint64_t a1)
{
}

void sub_2346BF714(unint64_t a1, SEL *a2)
{
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v5 = (id)MEMORY[0x237DC6CF0](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_19;
    }
    id v5 = *(id *)(a1 + 32);
  }
  unint64_t v6 = v5;
  [v5 *a2];

  if (v4)
  {
    id v7 = (id)MEMORY[0x237DC6CF0](1, a1);
    goto LABEL_8;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v7 = *(id *)(a1 + 40);
LABEL_8:
  id v8 = v7;
  [v7 *a2];

  if (!v4)
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
    {
      id v9 = *(id *)(a1 + 48);
      goto LABEL_12;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v9 = (id)MEMORY[0x237DC6CF0](2, a1);
LABEL_12:
  float32x4_t v10 = v9;
  [v9 *a2];

  if (v4)
  {
    id v11 = (id)MEMORY[0x237DC6CF0](3, a1);
LABEL_16:
    id v12 = v11;
    [v11 *a2];

    return;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
  {
    id v11 = *(id *)(a1 + 56);
    goto LABEL_16;
  }
LABEL_21:
  __break(1u);
}

void sub_2346BF868(__n128 a1, __n128 a2)
{
}

void sub_2346BF874(SEL *a1, __n128 a2, __n128 a3)
{
  unint64_t v5 = (unint64_t)*v3;
  unint64_t v6 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v7 = (id)MEMORY[0x237DC6CF0](0, v5);
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }
    id v7 = *(id *)(v5 + 32);
  }
  id v8 = v7;
  objc_msgSend(v7, *a1, a2.n128_f64[0], a3.n128_u64[0]);

  if (v6)
  {
    id v9 = (id)MEMORY[0x237DC6CF0](1, v5);
    goto LABEL_8;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v9 = *(id *)(v5 + 40);
LABEL_8:
  float32x4_t v10 = v9;
  objc_msgSend(v9, *a1, a2.n128_f64[1]);

  if (v6)
  {
    id v11 = (id)MEMORY[0x237DC6CF0](2, v5);
    goto LABEL_12;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  id v11 = *(id *)(v5 + 48);
LABEL_12:
  id v12 = v11;
  objc_msgSend(v11, *a1, v15);

  if (!v6)
  {
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
    {
      id v13 = *(id *)(v5 + 56);
      goto LABEL_16;
    }
LABEL_23:
    __break(1u);
    return;
  }
  id v13 = (id)MEMORY[0x237DC6CF0](3, v5);
LABEL_16:
  uint64_t v17 = v13;
  objc_msgSend(v13, *a1, a3.n128_f64[1]);
}

uint64_t sub_2346BF9D4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
  unint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2347F1EE0;
  type metadata accessor for StateSpring();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  *(void *)(v0 + 32) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(void *)(v0 + 40) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(void *)(v0 + 48) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(void *)(v0 + 56) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  sub_2347EE7F0();
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_2347EEEC0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = v0 & 0xC000000000000001;
    do
    {
      if (v4) {
        id v7 = (id)MEMORY[0x237DC6CF0](v3, v0);
      }
      else {
        id v7 = *(id *)(v0 + 8 * v3 + 32);
      }
      id v8 = v7;
      objc_msgSend(v7, sel_setTarget_, 1.0);

      if (v4) {
        id v9 = (id)MEMORY[0x237DC6CF0](v3, v0);
      }
      else {
        id v9 = *(id *)(v0 + 8 * v3 + 32);
      }
      float32x4_t v10 = v9;
      objc_msgSend(v9, sel_setValue_, 1.0);

      if (v4) {
        id v5 = (id)MEMORY[0x237DC6CF0](v3, v0);
      }
      else {
        id v5 = *(id *)(v0 + 8 * v3 + 32);
      }
      unint64_t v6 = v5;
      ++v3;
      objc_msgSend(v5, sel_setVelocity_, 0.0);
    }
    while (v2 != v3);
  }
  return v0;
}

uint64_t sub_2346BFBBC()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
  unint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2347F1EF0;
  type metadata accessor for StateSpring();
  uint64_t ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  *(void *)(v0 + 32) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(void *)(v0 + 40) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  *(void *)(v0 + 48) = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  sub_2347EE7F0();
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_2347EEEC0();
    uint64_t result = swift_bridgeObjectRelease();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = v0 & 0xC000000000000001;
    do
    {
      if (v4) {
        id v7 = (id)MEMORY[0x237DC6CF0](v3, v0);
      }
      else {
        id v7 = *(id *)(v0 + 8 * v3 + 32);
      }
      id v8 = v7;
      objc_msgSend(v7, sel_setTarget_, 1.0);

      if (v4) {
        id v9 = (id)MEMORY[0x237DC6CF0](v3, v0);
      }
      else {
        id v9 = *(id *)(v0 + 8 * v3 + 32);
      }
      float32x4_t v10 = v9;
      objc_msgSend(v9, sel_setValue_, 1.0);

      if (v4) {
        id v5 = (id)MEMORY[0x237DC6CF0](v3, v0);
      }
      else {
        id v5 = *(id *)(v0 + 8 * v3 + 32);
      }
      unint64_t v6 = v5;
      ++v3;
      objc_msgSend(v5, sel_setVelocity_, 0.0);
    }
    while (v2 != v3);
  }
  return v0;
}

__n128 sub_2346BFD9C(float32x4_t *a1, __n128 result, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  int64_t v7 = a1[1].i64[0];
  if (v7)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
    __n128 v28 = result;
    sub_23473D210(0, v7, 0);
    float32x4_t v10 = (float32x4_t)v28;
    float32x4_t v12 = a4;
    float32x4_t v11 = a5;
    uint64_t v13 = v32;
    uint64_t v14 = a1 + 2;
    *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)a6.f32, (float32x2_t)0xBF000000BF000000);
    *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)a6.f32, (float32x2_t)0x3F0000003F000000);
    v15.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(-0.5, a6, 2));
    float32x4_t v16 = a3;
    v17.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, a6, 2));
    do
    {
      float32x4_t v18 = *v14;
      uint64_t v33 = v13;
      unint64_t v20 = *(void *)(v13 + 16);
      unint64_t v19 = *(void *)(v13 + 24);
      if (v20 >= v19 >> 1)
      {
        float32x4_t v25 = v17;
        float32x4_t v27 = v15;
        int v23 = v9;
        unsigned __int32 v24 = v8;
        float32x4_t v22 = *v14;
        sub_23473D210(v19 > 1, v20 + 1, 1);
        float32x4_t v18 = v22;
        int v9 = v23;
        unsigned __int32 v8 = v24;
        float32x4_t v17 = v25;
        float32x4_t v15 = v27;
        float32x4_t v10 = (float32x4_t)v28;
        float32x4_t v16 = a3;
        float32x4_t v12 = a4;
        float32x4_t v11 = a5;
        uint64_t v13 = v33;
      }
      float32x4_t v21 = vmaxnmq_f32((float32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v18.f32[0]), v16, *(float32x2_t *)v18.f32, 1), v12, v18, 2), v11).u64[0], v15);
      v21.i32[3] = 0;
      uint64_t result = (__n128)vminnmq_f32(v21, v17);
      result.n128_u32[3] = v8;
      *(void *)(v13 + 16) = v20 + 1;
      *(__n128 *)(v13 + 16 * v20 + 32) = result;
      ++v14;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_2346BFF00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
  MEMORY[0x270FA5388](v3 - 8);
  id v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + *(int *)(type metadata accessor for LineAnimation() + 60);
  sub_2346C09D0(v6, (uint64_t)v5);
  uint64_t v7 = sub_2347ED540();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  }
  sub_2346C0970((uint64_t)v5);
  sub_2347ED520();
  sub_2346C0970(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
}

uint64_t sub_2346C0070(uint64_t *a1, __n128 a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, int8x16_t a8, double a9)
{
  uint64_t v10 = v9;
  int8x16_t v52 = a8;
  float32x4_t v53 = a7;
  float32x4_t v50 = a5;
  float32x4_t v51 = a6;
  float32x4_t v48 = a3;
  float32x4_t v49 = a4;
  __n128 v47 = a2;
  uint64_t v13 = sub_2347ED540();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  float32x4_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v45 - v18;
  uint64_t v21 = *a1;
  uint64_t v20 = a1[1];
  uint64_t v23 = a1[2];
  uint64_t v22 = a1[3];
  int v24 = *((_DWORD *)a1 + 8);
  float v25 = v10[4].f32[0];
  sub_2346BFF00((uint64_t)&v45 - v18);
  uint64_t v46 = v22;
  if (a9 <= 0.0)
  {
    __n128 v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    float v31 = 100.0;
  }
  else
  {
    double v26 = v25 * a9;
    sub_2347ED520();
    sub_2347ED4F0();
    double v28 = v27;
    __n128 v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    v29(v16, v13);
    double v30 = (v28 - v26) / a9;
    float v31 = 0.0;
    if (v30 > 0.0)
    {
      if (v30 > 1.0) {
        double v30 = 1.0;
      }
      float v32 = v30;
      float v31 = v32 * 100.0;
    }
  }
  v29(v19, v13);
  float v33 = roundf(v31) / 100.0;
  int v34 = v10->u8[0];
  float v35 = 1.0 - v33;
  if (v10->i8[0])
  {
    unsigned int v36 = -1;
  }
  else
  {
    float v35 = 0.0;
    unsigned int v36 = 0;
  }
  float32x4_t v37 = v53;
  float32x4_t v38 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v36), v52, (int8x16_t)v53), v53);
  *(float *)&unsigned int v39 = v53.f32[2] + vmuls_lane_f32(v33, v38, 2);
  v10[6].i32[0] = 0;
  *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v37.f32, vmul_n_f32(*(float32x2_t *)v38.f32, v33));
  v38.i64[1] = v39;
  v10[6].f32[1] = v35;
  v10[2] = v37;
  void v10[3] = v38;
  int8x16_t v52 = (int8x16_t)v38;
  if (v34 == 1
    && v21
    && *(void *)(v21 + 16) >= 2uLL
    && v33 > 0.0
    && (float32x4_t v40 = v10[5],
        uint64_t v54 = v21,
        char v55 = v20,
        uint64_t v56 = v23,
        uint64_t v57 = v46,
        int v58 = v24,
        (float32x2_t v41 = sub_2346C0348((uint64_t)&v54, v33, v47, v48, v49, v50, v51, v40)) != 0))
  {
    uint64_t v42 = (uint64_t)v41;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
    uint64_t v42 = swift_allocObject();
    float32x4_t v43 = v53;
    *(_OWORD *)(v42 + 16) = xmmword_2347F19A0;
    *(float32x4_t *)(v42 + 32) = v43;
    *(int8x16_t *)(v42 + 48) = v52;
  }
  uint64_t result = swift_bridgeObjectRelease();
  v10[7].i64[0] = v42;
  return result;
}

void *sub_2346C0348(uint64_t a1, float a2, __n128 a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  int v9 = 0;
  uint64_t v10 = *(float32x4_t **)a1;
  if (*(void *)(*(void *)a1 + 16) >= 2uLL)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    float v13 = *(float *)(a1 + 32);
    uint64_t v14 = (float32x4_t *)swift_bridgeObjectRetain();
    sub_2346BFD9C(v14, a3, a4, a5, a6, a7);
    float32x4_t v16 = v15;
    swift_bridgeObjectRelease();
    unint64_t v18 = (unint64_t)v16[2];
    if (!v18) {
      goto LABEL_25;
    }
    uint64_t v19 = (uint64_t)&v16[2 * v18 + 4];
    *(float32x2_t *)v17.f32 = vsub_f32(*(float32x2_t *)(v19 - 16), v16[4]);
    v17.f32[2] = *(float *)(v19 - 8) - v16[5].f32[0];
    float32x4_t v20 = vmulq_f32(v17, a8);
    a7 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)));
    swift_bridgeObjectRetain();
    if (a7.f32[0] <= 0.0)
    {
      uint64_t v12 = sub_234750990(v12);
      uint64_t v21 = sub_234750A4C((uint64_t)v16);
      unint64_t v18 = *(void *)(v21 + 16);
      if (!v18) {
        goto LABEL_26;
      }
      float32x4_t v16 = (float32x2_t *)v21;
    }
    a7 = *(float32x4_t *)v16[4].f32;
    int v9 = sub_2346FA354(0, 1, 1, MEMORY[0x263F8EE78]);
    uint64_t v10 = (float32x4_t *)v9[2];
    unint64_t v18 = v9[3];
    unint64_t v8 = (unint64_t)v10->u64 + 1;
    if ((unint64_t)v10 >= v18 >> 1) {
LABEL_27:
    }
      int v9 = sub_2346FA354((void *)(v18 > 1), v8, 1, v9);
    v9[2] = v8;
    *(float32x4_t *)&v9[2 * (void)v10 + 4] = a7;
    uint64_t v22 = *(void *)(v12 + 16);
    if (v22)
    {
      unint64_t v8 = 0;
      uint64_t v10 = (float32x4_t *)&v16[6];
      float v23 = 0.0;
      do
      {
        unint64_t v24 = v8 + 1;
        float v25 = v23 + *(float *)(v12 + 4 * v8 + 32);
        if (v25 > (float)(v13 * a2))
        {
          if ((float)((float)(a2 - (float)(v23 / v13)) / (float)((float)(v25 / v13) - (float)(v23 / v13))) > 0.0001)
          {
            float v44 = (float)(a2 - (float)(v23 / v13)) / (float)((float)(v25 / v13) - (float)(v23 / v13));
            swift_bridgeObjectRelease();
            unint64_t v31 = (unint64_t)v16[2];
            if (v8 >= v31)
            {
              __break(1u);
            }
            else if (v8 + 1 < v31)
            {
              float32x4_t v40 = v10[-1];
              float32x4_t v42 = *v10;
              swift_bridgeObjectRelease();
              float32x4_t v32 = vsubq_f32(v42, v40);
              float v33 = vmuls_lane_f32(v44, v32, 2);
              *(float32x2_t *)&long long v30 = vadd_f32(*(float32x2_t *)v40.f32, vmul_n_f32(*(float32x2_t *)v32.f32, v44));
              *((float *)&v30 + 2) = v40.f32[2] + v33;
              HIDWORD(v30) = 0;
              unint64_t v8 = v9[2];
              unint64_t v31 = v9[3];
              uint64_t v12 = v8 + 1;
              if (v8 < v31 >> 1)
              {
LABEL_20:
                v9[2] = v12;
                *(_OWORD *)&v9[2 * v8 + 4] = v30;
                goto LABEL_21;
              }
LABEL_30:
              long long v45 = v30;
              float v35 = sub_2346FA354((void *)(v31 > 1), v12, 1, v9);
              long long v30 = v45;
              int v9 = v35;
              goto LABEL_20;
            }
            __break(1u);
            goto LABEL_30;
          }
        }
        else
        {
          unint64_t v18 = (unint64_t)v16[2];
          if (v24 >= v18)
          {
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
          float32x4_t v26 = *v10;
          unint64_t v28 = v9[2];
          unint64_t v27 = v9[3];
          if (v28 >= v27 >> 1)
          {
            a7 = *v10;
            __n128 v29 = sub_2346FA354((void *)(v27 > 1), v28 + 1, 1, v9);
            float32x4_t v26 = a7;
            int v9 = v29;
          }
          v9[2] = v28 + 1;
          *(float32x4_t *)&v9[2 * v28 + 4] = v26;
          float v23 = v25;
        }
        ++v10;
        ++v8;
      }
      while (v22 != v24);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    if (v9[2] < 2uLL)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v9;
}

uint64_t sub_2346C068C(__n128 a1)
{
  __n128 v12 = a1;
  uint64_t v2 = sub_2347ED540();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v12 - v7;
  sub_2347EF170();
  sub_2347ED520();
  sub_2346BFF00((uint64_t)v5);
  sub_2347ED4F0();
  int v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v5, v2);
  v9(v8, v2);
  sub_2347ED520();
  sub_2347ED500();
  v9(v5, v2);
  uint64_t v10 = v1 + *(int *)(type metadata accessor for LineAnimation() + 60);
  sub_2346C0970(v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v10, v8, v2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v10, 0, 1, v2);
}

uint64_t type metadata accessor for LineAnimation()
{
  uint64_t result = qword_2687AC9B8;
  if (!qword_2687AC9B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2346C0970(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2346C09D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_2346C0A3C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LineAnimation();
  uint64_t v4 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 8);
  sub_2346C0B38(a1, (uint64_t)&v14 - v7);
  sub_2346C0B38(a2, (uint64_t)v6);
  if (v9 == v10)
  {
    uint64_t v11 = *((void *)v8 + 2);
    sub_2346C0B9C((uint64_t)v8);
    uint64_t v12 = *((void *)v6 + 2);
    sub_2346C0B9C((uint64_t)v6);
    return v11 == v12;
  }
  else
  {
    sub_2346C0B9C((uint64_t)v6);
    sub_2346C0B9C((uint64_t)v8);
    return 0;
  }
}

uint64_t sub_2346C0B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LineAnimation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2346C0B9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LineAnimation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_2346C0BF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    long long v5 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v5;
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(void *)(a1 + 96) = a2[12];
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    uint64_t v6 = *(int *)(a3 + 60);
    uint64_t v7 = (void *)(a1 + v6);
    unint64_t v8 = (char *)a2 + v6;
    *(void *)(a1 + 112) = a2[14];
    uint64_t v9 = sub_2347ED540();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t sub_2346C0DA4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  uint64_t v5 = sub_2347ED540();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_2346C0E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v5 = *(int *)(a3 + 60);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v8 = sub_2347ED540();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_2346C0FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 60);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_2347ED540();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_2346C11B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v5 = *(int *)(a3 + 60);
  uint64_t v6 = (const void *)(a2 + v5);
  uint64_t v7 = (void *)(a1 + v5);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v8 = sub_2347ED540();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    memcpy(v7, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v7, v6, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_2346C12FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 60);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_2347ED540();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_2346C14BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2346C14D0);
}

uint64_t sub_2346C14D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 112);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 60);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_2346C1584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2346C1598);
}

uint64_t sub_2346C1598(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 112) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 60);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_2346C1644()
{
  sub_2346C1728();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_2346C1728()
{
  if (!qword_2687AC8E0)
  {
    sub_2347ED540();
    unint64_t v0 = sub_2347EEB10();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2687AC8E0);
    }
  }
}

uint64_t sub_2346C1780(float32x2_t *a1, float a2, float32x2_t a3)
{
  if (a1[4].i8[0]) {
    goto LABEL_13;
  }
  float32x2_t v4 = a1[2];
  simd_float2 v5 = (simd_float2)vsub_f32(a3, v4);
  float v6 = fabsf(v5.f32[1]);
  BOOL v7 = fabsf(v5.f32[0]) < a2 && v6 < a2;
  if (v7
    || ((float32x2_t v8 = a1[3], v9 = vsub_f32(a3, v8), v10 = fabsf(v9.f32[1]), fabsf(v9.f32[0]) < a2)
      ? (BOOL v11 = v10 < a2)
      : (BOOL v11 = 0),
        v11))
  {
    unsigned __int8 v16 = 1;
    return v16 & 1;
  }
  float32x2_t v18 = (float32x2_t)v5;
  float32x2_t v12 = vsub_f32(v8, v4);
  if (fabsf(_simd_orient_vf2(v5, (simd_float2)v12)) > a2 || (float32x2_t v13 = vmul_f32(v18, v12), vaddv_f32(v13) <= 0.0))
  {
LABEL_13:
    unsigned __int8 v16 = 0;
  }
  else
  {
    float32x2_t v14 = vsub_f32(v4, v8);
    float32x2_t v15 = vmul_f32(v14, v14);
    unsigned __int8 v16 = vcgt_f32(vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1)), vadd_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1))).u8[0];
  }
  return v16 & 1;
}

uint64_t sub_2346C1860(uint64_t a1, float a2, double a3)
{
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4 >> 62) {
    goto LABEL_44;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v5)
  {
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        BOOL v7 = (float32x2_t *)MEMORY[0x237DC6CF0](0, v4);
      }
      else
      {
        if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        BOOL v7 = *(float32x2_t **)(v4 + 32);
        swift_retain();
      }
      if (sub_2346C1780(v7, a2, *(float32x2_t *)&a3))
      {
LABEL_7:
        swift_bridgeObjectRelease();
        swift_release();
        char v8 = 1;
        return v8 & 1;
      }
      uint64_t v9 = 0;
      char v8 = 0;
      uint64_t v10 = v5 - 1;
      while (1)
      {
        LODWORD(v11) = HIDWORD(*(void *)&v7[2]);
        LODWORD(v12) = HIDWORD(*(void *)&v7[3]);
        float v13 = vabds_f32(v12, *((float *)&a3 + 1));
        BOOL v14 = vabds_f32(v11, v12) > 0.00000011921 || v13 > 0.00000011921;
        if (!v14
          && (vmvn_s8(veor_s8((int8x8_t)vcge_f32(v7[2], *(float32x2_t *)&a3), (int8x8_t)vcge_f32(v7[3], *(float32x2_t *)&a3))).u8[0] & 1) == 0)
        {
          swift_release();
LABEL_41:
          swift_bridgeObjectRelease();
          char v8 = 1;
          return v8 & 1;
        }
        float32x2_t v29 = v7[3];
        float32x2_t v30 = v7[2];
        swift_release();
        if (*((float *)&a3 + 1) >= v11 == *((float *)&a3 + 1) < v12)
        {
          float v15 = v30.f32[0]
              + (float)((float)((float)(*((float *)&a3 + 1) - v11) * vsub_f32(v29, v30).f32[0]) / (float)(v12 - v11));
          if (vabds_f32(*(float *)&a3, v15) <= 0.00000011921) {
            goto LABEL_41;
          }
          if (*(float *)&a3 <= v15) {
            v8 ^= 1u;
          }
        }
        if (v10 == v9)
        {
          swift_bridgeObjectRelease();
          return v8 & 1;
        }
        unint64_t v16 = v9 + 1;
        if ((v4 & 0xC000000000000001) == 0) {
          break;
        }
        BOOL v7 = (float32x2_t *)MEMORY[0x237DC6CF0](v9 + 1, v4);
        if (__OFADD__(v16, 1)) {
          goto LABEL_42;
        }
LABEL_26:
        if ((v7[4].i8[0] & 1) == 0)
        {
          float32x2_t v17 = v7[2];
          simd_float2 v18 = (simd_float2)vsub_f32(*(float32x2_t *)&a3, v17);
          float v19 = fabsf(v18.f32[1]);
          if (fabsf(v18.f32[0]) < a2 && v19 < a2) {
            goto LABEL_7;
          }
          float32x2_t v21 = v7[3];
          float32x2_t v22 = vsub_f32(*(float32x2_t *)&a3, v21);
          float v23 = fabsf(v22.f32[1]);
          if (fabsf(v22.f32[0]) < a2 && v23 < a2) {
            goto LABEL_7;
          }
          float32x2_t v31 = (float32x2_t)v18;
          float32x2_t v25 = vsub_f32(v21, v17);
          if (fabsf(_simd_orient_vf2(v18, (simd_float2)v25)) <= a2)
          {
            float32x2_t v26 = vmul_f32(v31, v25);
            if (vaddv_f32(v26) > 0.0)
            {
              float32x2_t v27 = vsub_f32(v17, v21);
              float32x2_t v28 = vmul_f32(v27, v27);
              if (vcgt_f32(vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)), vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1))).u8[0])goto LABEL_7; {
            }
              }
          }
        }
        ++v9;
      }
      if (v16 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_43;
      }
      BOOL v7 = *(float32x2_t **)(v4 + 8 * v9 + 40);
      swift_retain();
      if (!__OFADD__(v16, 1)) {
        goto LABEL_26;
      }
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      swift_bridgeObjectRetain();
      uint64_t result = sub_2347EEEC0();
      uint64_t v5 = result;
    }
    while (result);
  }
  swift_bridgeObjectRelease();
  char v8 = 0;
  return v8 & 1;
}

_OWORD *sub_2346C1B54()
{
  float v1 = v0[2].f32[0] * 0.5;
  float v2 = v0[2].f32[1] * 0.5;
  float v3 = v0[3].f32[0] * 0.5;
  float32x2_t v4 = v0[10];
  float v5 = v0[11].f32[0];
  *(float *)&unsigned int v44 = v1 * v0[5].f32[0];
  *(float32x2_t *)&long long v6 = vmul_n_f32(v0[4], v1);
  *((void *)&v6 + 1) = v44;
  long long v50 = v6;
  float32x2_t v40 = (float32x2_t)v6;
  float32x2_t v42 = vmul_n_f32(v0[6], v2);
  *(float *)&unsigned int v7 = v2 * v0[7].f32[0];
  *(float32x2_t *)&long long v6 = v42;
  *((void *)&v6 + 1) = v7;
  long long v46 = v6;
  float v47 = *(float *)&v7;
  float32x2_t v38 = vmul_n_f32(vneg_f32(v0[8]), v3);
  *(float *)&unsigned int v39 = -(float)(v0[9].f32[0] * v3);
  *(float32x2_t *)&long long v8 = v38;
  *((void *)&v8 + 1) = v39;
  long long v49 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
  uint64_t result = (_OWORD *)swift_allocObject();
  uint64_t v10 = result;
  char v11 = 0;
  unint64_t v12 = 0;
  result[1] = xmmword_2347F19A0;
  *(float32x2_t *)&long long v13 = vsub_f32(0, v40);
  *((float *)&v13 + 2) = 0.0 - *(float *)&v44;
  HIDWORD(v13) = 0;
  result[2] = v13;
  long long v45 = result + 2;
  result[3] = v50;
  *(float32x2_t *)&long long v14 = vsub_f32(0, v42);
  *((float *)&v14 + 2) = 0.0 - v47;
  HIDWORD(v14) = 0;
  long long v43 = v14;
  *(float32x2_t *)&long long v13 = vsub_f32(0, v38);
  *((float *)&v13 + 2) = 0.0 - *(float *)&v39;
  HIDWORD(v13) = 0;
  long long v48 = v13;
  float v15 = (void *)MEMORY[0x263F8EE78];
  while (2)
  {
    char v16 = v11;
    if (v12 >= *((void *)v10 + 2))
    {
LABEL_16:
      __break(1u);
    }
    else
    {
      long long v51 = v45[v12];
      uint64_t result = (_OWORD *)swift_allocObject();
      float32x2_t v17 = result;
      char v18 = 0;
      unint64_t v19 = 0;
      result[1] = xmmword_2347F19A0;
      result[2] = v43;
      float32x4_t v20 = result + 2;
      result[3] = v46;
      float32x2_t v21 = vadd_f32(v4, *(float32x2_t *)&v51);
      float v22 = v5 + *((float *)&v51 + 2);
      do
      {
        char v23 = v18;
        if (v19 >= *((void *)v17 + 2))
        {
          __break(1u);
          goto LABEL_16;
        }
        long long v52 = v20[v19];
        uint64_t v24 = swift_allocObject();
        *(_OWORD *)(v24 + 32) = v48;
        *(_OWORD *)(v24 + 48) = v49;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          float v15 = sub_2346FA354(0, v15[2] + 1, 1, v15);
        }
        long long v25 = *(_OWORD *)(v24 + 32);
        unint64_t v27 = v15[2];
        unint64_t v26 = v15[3];
        int64_t v28 = v26 >> 1;
        unint64_t v29 = v27 + 1;
        if (v26 >> 1 <= v27)
        {
          long long v41 = *(_OWORD *)(v24 + 32);
          unsigned int v36 = sub_2346FA354((void *)(v26 > 1), v27 + 1, 1, v15);
          long long v25 = v41;
          float v15 = v36;
          unint64_t v26 = v36[3];
          int64_t v28 = v26 >> 1;
        }
        float32x2_t v30 = vadd_f32(v21, *(float32x2_t *)&v52);
        float v31 = v22 + *((float *)&v52 + 2);
        *(float32x2_t *)&long long v32 = vadd_f32(v30, *(float32x2_t *)&v25);
        *((float *)&v32 + 2) = (float)(v22 + *((float *)&v52 + 2)) + *((float *)&v25 + 2);
        HIDWORD(v32) = 0;
        v15[2] = v29;
        *(_OWORD *)&v15[2 * v27 + 4] = v32;
        long long v33 = *(_OWORD *)(v24 + 48);
        int64_t v34 = v27 + 2;
        if (v28 < v34)
        {
          long long v53 = *(_OWORD *)(v24 + 48);
          float32x4_t v37 = sub_2346FA354((void *)(v26 > 1), v34, 1, v15);
          long long v33 = v53;
          float v15 = v37;
        }
        *(float32x2_t *)&long long v35 = vadd_f32(v30, *(float32x2_t *)&v33);
        *((float *)&v35 + 2) = v31 + *((float *)&v33 + 2);
        HIDWORD(v35) = 0;
        v15[2] = v34;
        *(_OWORD *)&v15[2 * v29 + 4] = v35;
        swift_setDeallocating();
        uint64_t result = (_OWORD *)swift_deallocClassInstance();
        char v18 = 1;
        unint64_t v19 = 1;
      }
      while ((v23 & 1) == 0);
      swift_setDeallocating();
      uint64_t result = (_OWORD *)swift_deallocClassInstance();
      char v11 = 1;
      unint64_t v12 = 1;
      if ((v16 & 1) == 0) {
        continue;
      }
      swift_setDeallocating();
      swift_deallocClassInstance();
      return v15;
    }
    return result;
  }
}

BOOL sub_2346C1EF8(uint64_t a1, float a2)
{
  simd_float4x4 v72 = __invert_f4(*(simd_float4x4 *)(a1 + 32));
  simd_float4 v63 = v72.columns[1];
  simd_float4 v65 = v72.columns[0];
  simd_float4 v61 = v72.columns[3];
  simd_float4 v62 = v72.columns[2];
  float32x2_t v4 = sub_2346C1B54();
  int64_t v5 = *((void *)v4 + 2);
  if (v5)
  {
    uint64_t v68 = MEMORY[0x263F8EE78];
    sub_23473D210(0, v5, 0);
    uint64_t v7 = 0;
    uint64_t v8 = v68;
    unint64_t v9 = *(void *)(v68 + 16);
    float32x4_t v11 = (float32x4_t)v63;
    float32x4_t v10 = (float32x4_t)v65;
    float32x4_t v13 = (float32x4_t)v61;
    float32x4_t v12 = (float32x4_t)v62;
    do
    {
      float32x4_t v14 = (float32x4_t)v4[v7 + 2];
      unint64_t v15 = *(void *)(v68 + 24);
      if (v9 >= v15 >> 1)
      {
        float32x4_t v59 = (float32x4_t)v4[v7 + 2];
        __int32 v60 = v6;
        sub_23473D210(v15 > 1, v9 + 1, 1);
        float32x4_t v14 = v59;
        __int32 v6 = v60;
        float32x4_t v13 = (float32x4_t)v61;
        float32x4_t v12 = (float32x4_t)v62;
        float32x4_t v11 = (float32x4_t)v63;
        float32x4_t v10 = (float32x4_t)v65;
      }
      float32x4_t v16 = vaddq_f32(v13, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v14.f32[0]), v11, *(float32x2_t *)v14.f32, 1), v12, v14, 2));
      ++v7;
      v16.i32[3] = v6;
      *(void *)(v68 + 16) = v9 + 1;
      *(float32x4_t *)(v68 + 16 * v9++ + 32) = v16;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  int64_t v17 = *(void *)(v8 + 16);
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (v17)
  {
    uint64_t v69 = MEMORY[0x263F8EE78];
    sub_234745618(0, v17, 0);
    uint64_t v18 = v69;
    unint64_t v19 = (long long *)(v8 + 32);
    unint64_t v20 = *(void *)(v69 + 16);
    int64_t v21 = v17;
    do
    {
      long long v22 = *v19;
      unint64_t v23 = *(void *)(v69 + 24);
      if (v20 >= v23 >> 1)
      {
        int v66 = *v19;
        sub_234745618(v23 > 1, v20 + 1, 1);
        LODWORD(v22) = v66;
      }
      *(void *)(v69 + 16) = v20 + 1;
      *(_DWORD *)(v69 + 4 * v20 + 32) = v22;
      ++v19;
      ++v20;
      --v21;
    }
    while (v21);
  }
  unint64_t v24 = sub_23475B0C0(v18);
  if ((v24 & 0x100000000) != 0) {
    goto LABEL_28;
  }
  float v25 = *(float *)&v24;
  unint64_t v26 = sub_23475B118(v18);
  swift_bridgeObjectRelease();
  if ((v26 & 0x100000000) != 0)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v27 = MEMORY[0x263F8EE78];
  if (v17)
  {
    uint64_t v70 = MEMORY[0x263F8EE78];
    sub_234745618(0, v17, 0);
    uint64_t v27 = v70;
    int64_t v28 = (long long *)(v8 + 32);
    unint64_t v29 = *(void *)(v70 + 16);
    int64_t v30 = v17;
    do
    {
      long long v31 = *v28;
      unint64_t v32 = *(void *)(v70 + 24);
      if (v29 >= v32 >> 1)
      {
        int v67 = HIDWORD(*(void *)v28);
        sub_234745618(v32 > 1, v29 + 1, 1);
        DWORD1(v31) = v67;
      }
      *(void *)(v70 + 16) = v29 + 1;
      *(_DWORD *)(v70 + 4 * v29 + 32) = DWORD1(v31);
      ++v28;
      ++v29;
      --v30;
    }
    while (v30);
  }
  unint64_t v33 = sub_23475B0C0(v27);
  if ((v33 & 0x100000000) != 0)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  float v34 = *(float *)&v33;
  unint64_t v35 = sub_23475B118(v27);
  swift_bridgeObjectRelease();
  if ((v35 & 0x100000000) != 0) {
    goto LABEL_29;
  }
  if (v17)
  {
    uint64_t v71 = MEMORY[0x263F8EE78];
    sub_234745618(0, v17, 0);
    uint64_t v36 = 0;
    uint64_t v37 = v71;
    unint64_t v38 = *(void *)(v71 + 16);
    do
    {
      long long v39 = *(_OWORD *)(v8 + 16 * v36 + 32);
      unint64_t v40 = *(void *)(v71 + 24);
      if (v38 >= v40 >> 1)
      {
        int v64 = *(void *)(v8 + 16 * v36 + 40);
        sub_234745618(v40 > 1, v38 + 1, 1);
        DWORD2(v39) = v64;
      }
      ++v36;
      *(void *)(v71 + 16) = v38 + 1;
      *(_DWORD *)(v71 + 4 * v38++ + 32) = DWORD2(v39);
    }
    while (v17 != v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
  unint64_t v42 = sub_23475B0C0(v37);
  if ((v42 & 0x100000000) != 0) {
    goto LABEL_29;
  }
  float v43 = *(float *)&v42;
  unint64_t v44 = sub_23475B118(v37);
  swift_bridgeObjectRelease();
  if ((v44 & 0x100000000) != 0) {
    return 0;
  }
  float32x4_t v45 = *(float32x4_t *)(a1 + 16);
  float v46 = vmuls_lane_f32(0.5, v45, 2);
  float v47 = (float)(*(float *)&v26 - v25) * a2;
  BOOL v48 = v47 > (float)((float)(0.5 * v45.f32[0]) - v25)
     || v47 > (float)(*(float *)&v26 - (float)(0.0 - (float)(0.5 * v45.f32[0])));
  float v49 = vmuls_lane_f32(0.5, *(float32x2_t *)v45.f32, 1);
  float v50 = 0.0 - v49;
  float v51 = v49 - v34;
  float v52 = (float)(*(float *)&v35 - v34) * a2;
  float v53 = *(float *)&v35 - v50;
  BOOL v54 = v48 || v52 > v51;
  BOOL v55 = v54 || v52 > v53;
  float v56 = (float)(*(float *)&v44 - v43) * a2;
  BOOL v57 = v55 || v56 > (float)(v46 - v43);
  return !v57 && v56 <= (float)(*(float *)&v44 - (float)(0.0 - v46));
}

uint64_t sub_2346C2354(char a1)
{
  if ((a1 & 8) != 0)
  {
    if ((a1 & 4) == 0)
    {
      uint64_t result = 240;
      if ((a1 & 2) == 0)
      {
        if (a1) {
          goto LABEL_22;
        }
        return result;
      }
      goto LABEL_16;
    }
    uint64_t result = 255;
    if ((a1 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  if ((a1 & 4) == 0)
  {
    uint64_t result = 0;
    if ((a1 & 2) == 0)
    {
      if ((a1 & 1) == 0) {
        return result;
      }
LABEL_20:
      LODWORD(result) = result | 0x40;
LABEL_21:
      if ((result & 4) != 0) {
        return result | 0x88;
      }
LABEL_22:
      LODWORD(result) = result | 4;
      return result | 0x88;
    }
LABEL_14:
    LODWORD(result) = result | 0x20;
LABEL_15:
    if ((result & 2) != 0)
    {
LABEL_17:
      uint64_t result = result | 0x11;
      goto LABEL_18;
    }
LABEL_16:
    LODWORD(result) = result | 2;
    goto LABEL_17;
  }
  uint64_t result = 15;
  if ((a1 & 2) != 0)
  {
LABEL_13:
    if ((result & 0x20) != 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_18:
  if (a1)
  {
    if ((result & 0x40) != 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_2346C23D0(void *a1)
{
  uint64_t v183 = *MEMORY[0x263EF8340];
  uint64_t v162 = sub_2347ED490();
  uint64_t v161 = *(void *)(v162 - 8);
  MEMORY[0x270FA5388](v162);
  float32x2_t v4 = (char *)&v156 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_2347ED540();
  uint64_t v159 = *(void *)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  float32x4_t v158 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v169 = *(void *)(v167 - 8);
  MEMORY[0x270FA5388](v167);
  v175 = (float *)((char *)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v168 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v171 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  uint64_t v177 = (void **)((char *)&v156 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = v1 + OBJC_IVAR____TtC8RoomPlan15RoomCaptureView_logPerimeterDirectoryPath;
  uint64_t result = *(void *)(v1 + OBJC_IVAR____TtC8RoomPlan15RoomCaptureView_logPerimeterDirectoryPath + 8);
  int v170 = v4;
  if (result) {
    goto LABEL_2;
  }
  float v56 = (void *)(v1 + OBJC_IVAR____TtC8RoomPlan15RoomCaptureView_captureSession);
  uint64_t result = swift_beginAccess();
  if (!*v56)
  {
    __break(1u);
    return result;
  }
  uint64_t v57 = *v56 + OBJC_IVAR____TtC8RoomPlan18RoomCaptureSession_debugDelegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x237DC8170](v57);
  if (result)
  {
    int v58 = a1;
    uint64_t v59 = *(void *)(v57 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(ObjectType, v59);
    uint64_t v63 = v62;
    swift_unknownObjectRelease();
    *(void *)&long long v181 = v61;
    *((void *)&v181 + 1) = v63;
    swift_bridgeObjectRetain();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    long long v64 = v181;
    simd_float4 v65 = self;
    id v66 = objc_msgSend(v65, sel_defaultManager);
    int v67 = (void *)sub_2347EE5F0();
    unsigned int v68 = objc_msgSend(v66, sel_fileExistsAtPath_, v67);

    if (v68)
    {
      id v69 = objc_msgSend(v65, sel_defaultManager);
      uint64_t v70 = (void *)sub_2347EE5F0();
      *(void *)&long long v181 = 0;
      unsigned int v71 = objc_msgSend(v69, sel_removeItemAtPath_error_, v70, &v181);

      simd_float4x4 v72 = (void *)v181;
      if (!v71) {
        goto LABEL_59;
      }
      id v73 = (id)v181;
    }
    id v74 = objc_msgSend(v65, sel_defaultManager);
    int64_t v75 = (void *)sub_2347EE5F0();
    *(void *)&long long v181 = 0;
    unsigned int v76 = objc_msgSend(v74, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v75, 1, 0, &v181);

    simd_float4x4 v72 = (void *)v181;
    if (v76)
    {
      *(_OWORD *)uint64_t v8 = v64;
      id v77 = v72;
      swift_bridgeObjectRelease();
      uint64_t result = *(void *)(v8 + 8);
      float32x2_t v4 = v170;
      a1 = v58;
      if (result)
      {
LABEL_2:
        *(void *)&long long v157 = *(void *)v8;
        uint64_t v10 = *a1;
        uint64_t v166 = *(void *)(*a1 + 16);
        *((void *)&v157 + 1) = result;
        if (v166)
        {
          float32x4_t v156 = a1;
          uint64_t v165 = v10 + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v11 = 0;
          float32x4_t v12 = (char *)MEMORY[0x263F8EE78];
          long long v164 = xmmword_2347F19A0;
          float32x4_t v13 = (void *)MEMORY[0x263F8EE78];
          uint64_t v163 = v10;
          do
          {
            if (v11 >= *(void *)(v10 + 16))
            {
              __break(1u);
LABEL_62:
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              __break(1u);
            }
            uint64_t v14 = (uint64_t)v177;
            sub_2346BB994(v165 + *(void *)(v171 + 72) * v11, (uint64_t)v177, type metadata accessor for CapturedRoom.Surface);
            long long v15 = *(_OWORD *)(v14 + 16);
            float v16 = vmuls_lane_f32(-0.5, *(float32x2_t *)&v15, 1);
            float v17 = v16 * *(float *)(v14 + 48);
            float v18 = v16 * *(float *)(v14 + 52);
            float v19 = v16 * *(float *)(v14 + 56);
            *(float *)&long long v15 = 0.5 * *(float *)&v15;
            float v20 = *(float *)&v15 * *(float *)(v14 + 32);
            float v21 = *(float *)&v15 * *(float *)(v14 + 36);
            float v22 = *(float *)&v15 * *(float *)(v14 + 40);
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
            unint64_t v23 = (_OWORD *)swift_allocObject();
            v23[1] = v164;
            float v24 = *(float *)(v14 + 80);
            float v25 = *(float *)(v14 + 84);
            float v26 = *(float *)(v14 + 88);
            HIDWORD(v27) = 0;
            *(float *)&long long v27 = v17 + (float)(v24 - v20);
            *((float *)&v27 + 1) = v18 + (float)(v25 - v21);
            *((float *)&v27 + 2) = v19 + (float)(v26 - v22);
            void v23[2] = v27;
            int64_t v28 = v23 + 2;
            HIDWORD(v29) = 0;
            *(float *)&long long v29 = v17 + (float)(v20 + v24);
            *((float *)&v29 + 1) = v18 + (float)(v21 + v25);
            *((float *)&v29 + 2) = v19 + (float)(v22 + v26);
            v23[3] = v29;
            uint64_t v30 = sub_2347ED550();
            uint64_t v182 = MEMORY[0x263F8D310];
            *(void *)&long long v181 = v30;
            *((void *)&v181 + 1) = v31;
            sub_2346C3738(&v181, &v180);
            unint64_t v32 = (_OWORD *)MEMORY[0x263F8EE80];
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v179 = v32;
            sub_2347AAF08(&v180, 0x696669746E656469, 0xEA00000000007265, isUniquelyReferenced_nonNull_native);
            float v34 = v179;
            swift_bridgeObjectRelease();
            if (*((void *)v23 + 2) < 2uLL) {
              goto LABEL_62;
            }
            int v172 = v34;
            int v173 = v23;
            uint64_t v176 = v13;
            char v35 = 0;
            uint64_t v36 = 0;
            unint64_t v174 = v11 + 1;
            uint64_t v37 = v12;
            do
            {
              char v38 = v35;
              long long v178 = v28[v36];
              long long v39 = sub_2346FBA68(0, 1, 1, v12);
              unint64_t v41 = *((void *)v39 + 2);
              unint64_t v40 = *((void *)v39 + 3);
              int64_t v42 = v40 >> 1;
              unint64_t v43 = v41 + 1;
              if (v40 >> 1 <= v41)
              {
                long long v39 = sub_2346FBA68((char *)(v40 > 1), v41 + 1, 1, v39);
                unint64_t v40 = *((void *)v39 + 3);
                int64_t v42 = v40 >> 1;
              }
              *((void *)v39 + 2) = v43;
              long long v44 = v178;
              *(_DWORD *)&v39[4 * v41 + 32] = v178;
              unint64_t v45 = v41 + 2;
              if (v42 < (uint64_t)(v41 + 2))
              {
                float v49 = sub_2346FBA68((char *)(v40 > 1), v41 + 2, 1, v39);
                long long v44 = v178;
                long long v39 = v49;
              }
              *((void *)v39 + 2) = v45;
              *(_DWORD *)&v39[4 * v43 + 32] = DWORD2(v44);
              unint64_t v46 = *((void *)v39 + 3);
              if ((uint64_t)(v41 + 3) > (uint64_t)(v46 >> 1))
              {
                float v50 = sub_2346FBA68((char *)(v46 > 1), v41 + 3, 1, v39);
                DWORD1(v44) = DWORD1(v178);
                long long v39 = v50;
              }
              *((void *)v39 + 2) = v41 + 3;
              *(_DWORD *)&v39[4 * v45 + 32] = DWORD1(v44);
              uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9C8);
              *(void *)&long long v181 = v39;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v37 = sub_2346FBB78(0, v37[2] + 1, 1, v37);
              }
              unint64_t v48 = v37[2];
              unint64_t v47 = v37[3];
              if (v48 >= v47 >> 1) {
                uint64_t v37 = sub_2346FBB78((void *)(v47 > 1), v48 + 1, 1, v37);
              }
              v37[2] = v48 + 1;
              sub_2346C3738(&v181, &v37[4 * v48 + 4]);
              char v35 = 1;
              uint64_t v36 = 1;
            }
            while ((v38 & 1) == 0);
            swift_bridgeObjectRelease();
            uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9D0);
            *(void *)&long long v181 = v37;
            sub_2346C3738(&v181, &v180);
            float v51 = v172;
            char v52 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v179 = v51;
            sub_2347AAF08(&v180, 0x73746E696F70, 0xE600000000000000, v52);
            float v53 = v179;
            swift_bridgeObjectRelease();
            uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9D8);
            *(void *)&long long v181 = v53;
            float32x4_t v13 = v176;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              float32x4_t v13 = sub_2346FBB78(0, v13[2] + 1, 1, v13);
            }
            uint64_t v10 = v163;
            unint64_t v11 = v174;
            unint64_t v55 = v13[2];
            unint64_t v54 = v13[3];
            if (v55 >= v54 >> 1) {
              float32x4_t v13 = sub_2346FBB78((void *)(v54 > 1), v55 + 1, 1, v13);
            }
            v13[2] = v55 + 1;
            sub_2346C3738(&v181, &v13[4 * v55 + 4]);
            sub_2346BB9FC((uint64_t)v177, type metadata accessor for CapturedRoom.Surface);
          }
          while (v11 != v166);
          swift_bridgeObjectRelease();
          float32x2_t v4 = v170;
          a1 = v156;
        }
        else
        {
          swift_bridgeObjectRetain();
          float32x4_t v13 = (void *)MEMORY[0x263F8EE78];
        }
        uint64_t v78 = a1[5];
        int v172 = *(_OWORD **)(v78 + 16);
        if (v172)
        {
          uint64_t v176 = v13;
          uint64_t v171 = v78 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
          swift_bridgeObjectRetain();
          unint64_t v79 = 0;
          uint64_t v80 = (char *)MEMORY[0x263F8EE78];
          long long v168 = xmmword_2347F1A10;
          uint64_t v81 = (void *)MEMORY[0x263F8EE78];
          uint64_t v166 = v78;
          do
          {
            if (v79 >= *(void *)(v78 + 16)) {
              goto LABEL_63;
            }
            uint64_t v177 = v81;
            uint64_t v82 = v175;
            sub_2346BB994(v171 + *(void *)(v169 + 72) * v79, (uint64_t)v175, type metadata accessor for CapturedRoom.Object);
            float v83 = v82[4];
            float v84 = v82[5] * -0.5;
            float v85 = v84 * v82[12];
            float v86 = v84 * v82[13];
            *(float *)&long long v178 = v84 * v82[14];
            float v87 = (float)(v83 * 0.5) * v82[8];
            float v88 = (float)(v83 * 0.5) * v82[9];
            float v89 = (float)(v83 * 0.5) * v82[10];
            float v90 = v82[6] * 0.5;
            float v91 = -(float)(v82[16] * v90);
            float v92 = -(float)(v82[17] * v90);
            float v93 = -(float)(v82[18] * v90);
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
            __n128 v94 = (_OWORD *)swift_allocObject();
            float v95 = v82[20];
            float v96 = v82[21];
            float v97 = v82[22];
            float v98 = v85 + (float)(v95 - v87);
            float v99 = v86 + (float)(v96 - v88);
            float v100 = *(float *)&v178;
            float v101 = *(float *)&v178 + (float)(v97 - v89);
            HIDWORD(v102) = 0;
            *(float *)&long long v102 = v98 - v91;
            *((float *)&v102 + 1) = v99 - v92;
            *((float *)&v102 + 2) = v101 - v93;
            v94[1] = v168;
            v94[2] = v102;
            HIDWORD(v103) = 0;
            *(float *)&long long v103 = v91 + v98;
            *((float *)&v103 + 1) = v92 + v99;
            *((float *)&v103 + 2) = v93 + v101;
            float v104 = v85 + (float)(v87 + v95);
            float v105 = v86 + (float)(v88 + v96);
            float v106 = v100 + (float)(v89 + v97);
            HIDWORD(v107) = 0;
            *(float *)&long long v107 = v91 + v104;
            *((float *)&v107 + 1) = v92 + v105;
            *((float *)&v107 + 2) = v93 + v106;
            v94[3] = v103;
            v94[4] = v107;
            HIDWORD(v108) = 0;
            *(float *)&long long v108 = v104 - v91;
            *((float *)&v108 + 1) = v105 - v92;
            *((float *)&v108 + 2) = v106 - v93;
            v94[5] = v108;
            uint64_t v109 = sub_2347ED550();
            uint64_t v182 = MEMORY[0x263F8D310];
            *(void *)&long long v181 = v109;
            *((void *)&v181 + 1) = v110;
            sub_2346C3738(&v181, &v180);
            os_log_t v111 = (_OWORD *)MEMORY[0x263F8EE80];
            char v112 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v179 = v111;
            sub_2347AAF08(&v180, 0x696669746E656469, 0xEA00000000007265, v112);
            uint64_t v113 = v179;
            swift_bridgeObjectRelease();
            if (*((void *)v94 + 2) < 4uLL) {
              goto LABEL_64;
            }
            int v173 = v113;
            unint64_t v174 = v79 + 1;
            uint64_t v114 = 2;
            uint64_t v115 = v80;
            do
            {
              long long v178 = v94[v114];
              uint64_t v116 = sub_2346FBA68(0, 1, 1, v80);
              unint64_t v118 = *((void *)v116 + 2);
              unint64_t v117 = *((void *)v116 + 3);
              int64_t v119 = v117 >> 1;
              unint64_t v120 = v118 + 1;
              if (v117 >> 1 <= v118)
              {
                uint64_t v116 = sub_2346FBA68((char *)(v117 > 1), v118 + 1, 1, v116);
                unint64_t v117 = *((void *)v116 + 3);
                int64_t v119 = v117 >> 1;
              }
              *((void *)v116 + 2) = v120;
              long long v121 = v178;
              *(_DWORD *)&v116[4 * v118 + 32] = v178;
              unint64_t v122 = v118 + 2;
              if (v119 < (uint64_t)(v118 + 2))
              {
                uint64_t v126 = sub_2346FBA68((char *)(v117 > 1), v118 + 2, 1, v116);
                long long v121 = v178;
                uint64_t v116 = v126;
              }
              *((void *)v116 + 2) = v122;
              *(_DWORD *)&v116[4 * v120 + 32] = DWORD2(v121);
              unint64_t v123 = *((void *)v116 + 3);
              if ((uint64_t)(v118 + 3) > (uint64_t)(v123 >> 1))
              {
                uint64_t v127 = sub_2346FBA68((char *)(v123 > 1), v118 + 3, 1, v116);
                DWORD1(v121) = DWORD1(v178);
                uint64_t v116 = v127;
              }
              *((void *)v116 + 2) = v118 + 3;
              *(_DWORD *)&v116[4 * v122 + 32] = DWORD1(v121);
              uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9C8);
              *(void *)&long long v181 = v116;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v115 = sub_2346FBB78(0, v115[2] + 1, 1, v115);
              }
              unint64_t v125 = v115[2];
              unint64_t v124 = v115[3];
              if (v125 >= v124 >> 1) {
                uint64_t v115 = sub_2346FBB78((void *)(v124 > 1), v125 + 1, 1, v115);
              }
              v115[2] = v125 + 1;
              sub_2346C3738(&v181, &v115[4 * v125 + 4]);
              ++v114;
            }
            while (v114 != 6);
            swift_bridgeObjectRelease();
            uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9D0);
            *(void *)&long long v181 = v115;
            sub_2346C3738(&v181, &v180);
            float32x4_t v128 = v173;
            char v129 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v179 = v128;
            sub_2347AAF08(&v180, 0x73746E696F70, 0xE600000000000000, v129);
            char v130 = v179;
            swift_bridgeObjectRelease();
            uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9D8);
            *(void *)&long long v181 = v130;
            uint64_t v81 = v177;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v81 = sub_2346FBB78(0, v81[2] + 1, 1, v81);
            }
            float32x2_t v4 = v170;
            uint64_t v78 = v166;
            unint64_t v79 = v174;
            unint64_t v132 = v81[2];
            unint64_t v131 = v81[3];
            if (v132 >= v131 >> 1) {
              uint64_t v81 = sub_2346FBB78((void *)(v131 > 1), v132 + 1, 1, v81);
            }
            v81[2] = v132 + 1;
            sub_2346C3738(&v181, &v81[4 * v132 + 4]);
            sub_2346BB9FC((uint64_t)v175, type metadata accessor for CapturedRoom.Object);
          }
          while ((_OWORD *)v79 != v172);
          swift_bridgeObjectRelease();
          float32x4_t v13 = v176;
        }
        else
        {
          uint64_t v81 = (void *)MEMORY[0x263F8EE78];
        }
        uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9D0);
        uint64_t v182 = v133;
        *(void *)&long long v181 = v13;
        sub_2346C3738(&v181, &v180);
        uint64_t v134 = (_OWORD *)MEMORY[0x263F8EE80];
        char v135 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v179 = v134;
        sub_2347AAF08(&v180, 0x736C6C6177, 0xE500000000000000, v135);
        uint64_t v136 = v179;
        swift_bridgeObjectRelease();
        uint64_t v182 = v133;
        *(void *)&long long v181 = v81;
        sub_2346C3738(&v181, &v180);
        char v137 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v179 = v136;
        sub_2347AAF08(&v180, 0x737463656A626FLL, 0xE700000000000000, v137);
        swift_bridgeObjectRelease();
        id v138 = self;
        uint64_t v139 = (void *)sub_2347EE510();
        swift_bridgeObjectRelease();
        *(void *)&long long v181 = 0;
        id v140 = objc_msgSend(v138, sel_dataWithPropertyList_format_options_error_, v139, 100, 0, &v181);

        id v141 = (id)v181;
        if (v140)
        {
          uint64_t v142 = sub_2347ED4C0();
          unint64_t v144 = v143;

          uint64_t v145 = v4;
          id v146 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
          simd_float4 v147 = (void *)sub_2347EE5F0();
          objc_msgSend(v146, sel_setDateFormat_, v147);

          uint64_t v148 = v158;
          sub_2347ED530();
          long long v149 = (void *)sub_2347ED510();
          (*(void (**)(char *, uint64_t))(v159 + 8))(v148, v160);
          id v150 = objc_msgSend(v146, sel_stringFromDate_, v149);

          uint64_t v151 = sub_2347EE620();
          uint64_t v153 = v152;

          *(void *)&long long v181 = v151;
          *((void *)&v181 + 1) = v153;
          swift_bridgeObjectRetain();
          sub_2347EE6F0();
          swift_bridgeObjectRelease();
          long long v181 = v157;
          swift_bridgeObjectRetain();
          sub_2347EE6F0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_2347ED3C0();
          swift_bridgeObjectRelease();
          sub_2347ED4D0();
          (*(void (**)(char *, uint64_t))(v161 + 8))(v145, v162);

          return sub_2346C3748(v142, v144);
        }
        float32x4_t v154 = v141;
        swift_bridgeObjectRelease();
        sub_2347ED350();

        return swift_willThrow();
      }
      return result;
    }
LABEL_59:
    id v155 = v72;
    swift_bridgeObjectRelease();
    sub_2347ED350();

    return swift_willThrow();
  }
  return result;
}

_OWORD *sub_2346C3738(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_2346C3748(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_2346C37A0()
{
  type metadata accessor for RoomCaptureGeometryManager();
  uint64_t result = swift_initStaticObject();
  qword_2687AC9E0 = result;
  return result;
}

uint64_t static RoomCaptureGeometryManager.shared.getter()
{
  type metadata accessor for RoomCaptureGeometryManager();

  return swift_initStaticObject();
}

uint64_t type metadata accessor for RoomCaptureGeometryManager()
{
  return self;
}

void *sub_2346C3820(uint64_t a1, unint64_t a2, uint64_t a3, float a4)
{
  uint64_t v12 = 0;
  unint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v6 = sub_2346CA6C0(a1, a4);
  if (a3)
  {
    type metadata accessor for CDTPolygon();
    swift_allocObject();
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = sub_23476A158(v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = sub_2346C38F4(v6, a2, v8, &v12, &v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v9;
}

void *sub_2346C38F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  type metadata accessor for CDTTriangulator();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 24) = 0;
  *(_WORD *)(inited + 16) = 0;
  int64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v61 = MEMORY[0x263F8EE78];
    sub_234745680(0, v9, 0);
    uint64_t v11 = v61;
    uint64_t v12 = (long long *)(a1 + 32);
    unint64_t v13 = *(void *)(v61 + 16);
    do
    {
      long long v14 = *v12;
      uint64_t v61 = v11;
      unint64_t v15 = *(void *)(v11 + 24);
      if (v13 >= v15 >> 1)
      {
        uint64_t v57 = v14;
        sub_234745680(v15 > 1, v13 + 1, 1);
        *(void *)&long long v14 = v57;
        uint64_t v11 = v61;
      }
      *(void *)(v11 + 16) = v13 + 1;
      *(void *)(v11 + 8 * v13 + 32) = v14;
      ++v12;
      ++v13;
      --v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  *a5 = v10;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_2347EEEC0();
    uint64_t v16 = (uint64_t)result;
    if (!result) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (!v16) {
      goto LABEL_20;
    }
  }
  if (v16 < 1)
  {
    __break(1u);
LABEL_69:
    __break(1u);
    return result;
  }
  uint64_t v18 = 0;
  do
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      uint64_t v19 = MEMORY[0x237DC6CF0](v18, a2);
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 8 * v18 + 32);
      swift_retain();
    }
    uint64_t v58 = *(void *)(v19 + 16);
    uint64_t v56 = *(void *)(v19 + 32);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9E8);
    uint64_t v20 = swift_initStackObject();
    *(_OWORD *)(v20 + 16) = xmmword_2347F1A10;
    *(void *)(v20 + 32) = v58;
    *(void *)(v20 + 40) = __PAIR64__(HIDWORD(v58), v56);
    *(void *)(v20 + 48) = v56;
    *(void *)(v20 + 56) = __PAIR64__(HIDWORD(v56), v58);
    type metadata accessor for CDTPolygon();
    swift_allocObject();
    sub_23476A158(v20);
    MEMORY[0x237DC6730]();
    if (*(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2347EE800();
    }
    ++v18;
    sub_2347EE820();
    sub_2347EE7F0();
    swift_release();
  }
  while (v16 != v18);
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v53 + 16) == 1)
  {
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = sub_23475070C(v21);
    type metadata accessor for CDTPolygon();
    swift_initStackObject();
    uint64_t v23 = sub_23476A158(v22);
    float v24 = a4;
    if (a3)
    {
      uint64_t v25 = a3;
    }
    else
    {
      swift_allocObject();
      uint64_t v25 = sub_23476A158(MEMORY[0x263F8EE78]);
    }
    swift_retain();
    swift_release();
    sub_23476033C(v23, v25, MEMORY[0x263F8EE78]);
    swift_release();
  }
  else
  {
    float v24 = a4;
  }
  swift_release();
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = sub_23475070C(v26);
  type metadata accessor for CDTPolygon();
  swift_allocObject();
  uint64_t v28 = sub_23476A158(v27);
  *float v24 = v28;
  if (sub_23476A8A4())
  {
    swift_release();
    swift_allocObject();
    uint64_t v28 = sub_23476A158(v11);
    *float v24 = v28;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v30 = a3;
  if (a3)
  {
    swift_retain();
    if (sub_23476A8A4())
    {
      uint64_t v31 = swift_bridgeObjectRetain();
      uint64_t v32 = sub_23475070C(v31);
      swift_allocObject();
      uint64_t v33 = sub_23476A158(v32);
      swift_release();
      uint64_t v30 = v33;
    }
    uint64_t v34 = sub_23475B780(v28, v30);
    swift_release();
    swift_release();
    *float v24 = v34;
    uint64_t v28 = v34;
  }
  unint64_t v35 = sub_23475B864(*a5);
  swift_bridgeObjectRelease();
  *a5 = v35;
  if (v35 >> 62)
  {
LABEL_58:
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_2347EEEC0();
    uint64_t v36 = (uint64_t)result;
    if (result)
    {
LABEL_35:
      if (v36 >= 1)
      {
        unint64_t v37 = 0;
        uint64_t v29 = 953267991;
        while (1)
        {
          if ((v35 & 0xC000000000000001) != 0)
          {
            uint64_t v38 = MEMORY[0x237DC6CF0](v37, v35);
          }
          else
          {
            uint64_t v38 = *(void *)(v35 + 8 * v37 + 32);
            swift_retain();
          }
          if ((sub_23476A61C() & 1) != 0 && (sub_23476A37C(v28, 0.001) & 1) == 0)
          {
            swift_retain();
            uint64_t v40 = v38;
            goto LABEL_50;
          }
          if (sub_23476A61C() & 1) != 0 && (sub_23476A61C())
          {
            uint64_t v39 = sub_234760E74(v38, v28, 0);
            if (!v39) {
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v39 = sub_23475D334(v38, v28, 0, 1, 0.0001);
            if (!v39)
            {
LABEL_47:
              swift_allocObject();
              uint64_t v39 = sub_23476A158(MEMORY[0x263F8EE78]);
            }
          }
          uint64_t v40 = v39;
LABEL_50:
          uint64_t v41 = *a5;
          int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a5 = v41;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v41 < 0 || (v41 & 0x4000000000000000) != 0)
          {
            uint64_t v41 = sub_23473CFA4(v41);
            *a5 = v41;
          }
          if (v37 >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_58;
          }
          *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 8 * v37 + 0x20) = v40;
          swift_release();
          sub_2347EE7F0();
          swift_release();
          if (v36 == ++v37)
          {
            swift_bridgeObjectRelease();
            uint64_t v29 = MEMORY[0x263F8EE78];
            goto LABEL_60;
          }
        }
      }
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v36) {
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease();
LABEL_60:
  uint64_t v43 = *a5;
  swift_bridgeObjectRetain();
  unint64_t v44 = sub_23475BB5C(v28, v43, 0, 0, 1);
  swift_bridgeObjectRelease();
  uint64_t v61 = v29;
  __int32 v60 = (char *)v29;
  sub_234763A4C(v44, (uint64_t)&v61, &v60);
  swift_bridgeObjectRelease();
  uint64_t v45 = v61;
  int64_t v46 = *(void *)(v61 + 16);
  if (v46)
  {
    swift_bridgeObjectRetain();
    sub_23473D210(0, v46, 0);
    uint64_t v48 = 0;
    unint64_t v49 = *(void *)(v29 + 16);
    do
    {
      *(void *)&long long v47 = *(void *)(v45 + 8 * v48 + 32);
      unint64_t v50 = *(void *)(v29 + 24);
      if (v49 >= v50 >> 1)
      {
        long long v59 = v47;
        sub_23473D210(v50 > 1, v49 + 1, 1);
        long long v47 = v59;
      }
      ++v48;
      *(void *)(v29 + 16) = v49 + 1;
      *(_OWORD *)(v29 + 16 * v49++ + 32) = v47;
    }
    while (v46 != v48);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_234799DD0(*(void *)(v29 + 16), (__n128)xmmword_2347F1FC0);
  uint64_t v51 = swift_bridgeObjectRetain();
  sub_2346D9684(v51);
  swift_bridgeObjectRelease();
  swift_release();
  char v52 = v60;
  type metadata accessor for RoomCaptureMesh();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v29;
  result[3] = v29;
  result[4] = v52;
  return result;
}

void *sub_2346C407C(uint64_t a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, __n128 a7, float a8, float32_t a9, float a10)
{
  v11.f32[0] = a9;
  uint64_t v315 = a6;
  LODWORD(v334) = a4;
  __n128 v322 = a7;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  v329 = (char *)&v314 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  v327 = (char *)&v314 - v20;
  uint64_t v317 = type metadata accessor for ScanItemStrut();
  uint64_t v319 = *(void *)(v317 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v317);
  v330 = (float32x2_t *)((char *)&v314 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v21);
  v328 = (float32x2_t *)((char *)&v314 - v23);
  uint64_t v345 = MEMORY[0x263F8EE78];
  v346 = (void *)MEMORY[0x263F8EE78];
  uint64_t v343 = 0;
  uint64_t v344 = MEMORY[0x263F8EE78];
  unint64_t v342 = MEMORY[0x263F8EE78];
  uint64_t v24 = sub_2346CA6C0(a1, a10);
  uint64_t v316 = a5;
  if (a3)
  {
    type metadata accessor for CDTPolygon();
    swift_allocObject();
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = sub_23476A158(v25);
  }
  else
  {
    uint64_t v26 = 0;
  }
  unint64_t v324 = a2;
  unint64_t v27 = (unint64_t)sub_2346C38F4(v24, a2, v26, &v343, &v342);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = sub_2346C8084(v28, a8);
  swift_bridgeObjectRelease();
  swift_release();
  sub_2346D9684(v29);
  uint64_t v30 = swift_bridgeObjectRetain();
  sub_2346D9684(v30);
  unint64_t v318 = v27;
  uint64_t v31 = *(void *)(v27 + 32);
  uint64_t v32 = swift_bridgeObjectRetain();
  sub_2346D97CC(v32);
  int64_t v33 = *(void *)(v31 + 16);
  uint64_t v34 = MEMORY[0x263F8EE78];
  if (v33)
  {
    v340.i64[0] = 0;
    uint64_t v341 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_234745638(0, v33, 0);
    uint64_t v35 = 0;
    uint64_t v34 = v341;
    uint64_t v36 = v346;
    while (1)
    {
      unint64_t v37 = v36[2];
      if (HIDWORD(v37)) {
        goto LABEL_267;
      }
      int v38 = *(_DWORD *)(v31 + 4 * v35 + 32);
      int v39 = v38 + v37;
      if (__CFADD__(v38, v37))
      {
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      uint64_t v341 = v34;
      unint64_t v27 = *(void *)(v34 + 16);
      unint64_t v40 = *(void *)(v34 + 24);
      if (v27 >= v40 >> 1)
      {
        sub_234745638(v40 > 1, v27 + 1, 1);
        uint64_t v34 = v341;
      }
      ++v35;
      *(void *)(v34 + 16) = v27 + 1;
      *(_DWORD *)(v34 + 4 * v27 + 32) = v39;
      if (v33 == v35)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_2346DA364(v34);
  unint64_t v41 = v318;
  swift_retain();
  uint64_t v42 = swift_bridgeObjectRetain();
  uint64_t v43 = sub_2346C8178(v42, v11.f32[0]);
  swift_bridgeObjectRelease();
  swift_release();
  sub_2346D9684(v43);
  uint64_t v44 = sub_234799DD0(*(void *)(*(void *)(v41 + 16) + 16), (__n128)xmmword_2347F1FD0);
  sub_2346D9684(v44);
  if (!v343) {
    goto LABEL_266;
  }
  unint64_t v27 = *(void *)(v343 + 24);
  if (v27 >> 62)
  {
LABEL_70:
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_2347EEEC0();
    if (v45) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v45 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v45)
    {
LABEL_15:
      if (v45 >= 1)
      {
        uint64_t v49 = 0;
        *(void *)&long long v333 = v27 & 0xC000000000000001;
        v50.i32[1] = v322.n128_i32[1];
        float v51 = vmuls_lane_f32(-0.5, (float32x2_t)v322.n128_u64[0], 1);
        DWORD1(v46) = 0;
        *(float *)v50.i32 = a8 * 0.0;
        v48.f32[0] = a8 + 0.0;
        *(float *)v47.i32 = v11.f32[0] * 0.0;
        *(float *)&long long v46 = 0.0 - v11.f32[0];
        long long v339 = v46;
        *(float *)&long long v46 = (float)(0.0 - v11.f32[0]) - (float)(a8 + 0.0);
        long long v332 = v46;
        float32x4_t v340 = v48;
        *(float *)&long long v46 = v48.f32[0] - v48.f32[0];
        long long v326 = v46;
        float32x2_t v52 = (float32x2_t)vdup_lane_s32(v50, 0);
        float32x2_t v53 = (float32x2_t)vdup_lane_s32(v47, 0);
        long long v325 = xmmword_2347F1FE0;
        while (1)
        {
          if ((void)v333)
          {
            uint64_t v56 = MEMORY[0x237DC6CF0](v49, v27);
          }
          else
          {
            uint64_t v56 = *(void *)(v27 + 8 * v49 + 32);
            swift_retain();
          }
          if ((v334 & 1) == 0
            || vabds_f32(*(float *)(v56 + 20), v51) >= 0.0001
            || vabds_f32(*(float *)(v56 + 28), v51) >= 0.0001)
          {
            float32x2_t v60 = *(float32x2_t *)(v56 + 16);
            *(void *)&long long v57 = *(void *)(v56 + 24);
            *(float32x2_t *)v59.f32 = vadd_f32(v52, *(float32x2_t *)&v57);
            *(float32x2_t *)&long long v57 = vadd_f32(v53, *(float32x2_t *)&v57);
            long long v335 = v57;
            *(float32x2_t *)v61.f32 = vsub_f32(*(float32x2_t *)&v57, *(float32x2_t *)v59.f32);
            *(float32x2_t *)&long long v58 = vadd_f32(v52, v60);
            v61.i64[1] = v332;
            float32x4_t v62 = vmulq_f32(v61, v61);
            float32x4_t v63 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1)));
            long long v337 = v58;
            float32x4_t v336 = v59;
            if (v63.f32[0] >= 1.4211e-14)
            {
              *(float32x2_t *)v63.f32 = vsub_f32(*(float32x2_t *)&v58, *(float32x2_t *)v59.f32);
              v63.i32[2] = v326;
              float32x4_t v64 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61), (int8x16_t)v61, 0xCuLL), vnegq_f32(v63)), v61, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), (int8x16_t)v63, 0xCuLL));
              int32x4_t v65 = (int32x4_t)vmulq_f32(v64, v64);
              v65.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v65, 2), *(float32x2_t *)v65.i8)).u32[0];
              float32x4_t v66 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), (int8x16_t)v64, 0xCuLL);
              *(float32x2_t *)v64.f32 = vrsqrte_f32((float32x2_t)v65.u32[0]);
              *(float32x2_t *)v64.f32 = vmul_f32(*(float32x2_t *)v64.f32, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32)));
              float32x4_t v67 = vmulq_n_f32(v66, vmul_f32(*(float32x2_t *)v64.f32, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32))).f32[0]);
              v67.i32[3] = v331.i32[3];
              long long v338 = (__int128)v67;
              float32x4_t v331 = v67;
            }
            else
            {
              long long v338 = v325;
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687AEC50);
            uint64_t v68 = sub_2347EE810();
            *(void *)(v68 + 16) = 4;
            long long v69 = v338;
            *(_OWORD *)(v68 + 32) = v338;
            *(_OWORD *)(v68 + 48) = v69;
            *(_OWORD *)(v68 + 64) = v69;
            *(_OWORD *)(v68 + 80) = v69;
            uint64_t v341 = MEMORY[0x263F8EE78];
            sub_234745638(0, 6, 0);
            uint64_t v70 = v346;
            unint64_t v71 = v346[2];
            if (HIDWORD(v71)) {
              goto LABEL_267;
            }
            int v72 = dword_26E770090 + v71;
            if (__CFADD__(dword_26E770090, v71)) {
              goto LABEL_67;
            }
            uint64_t v73 = v341;
            unint64_t v75 = *(void *)(v341 + 16);
            unint64_t v74 = *(void *)(v341 + 24);
            unint64_t v76 = v75 + 1;
            if (v75 >= v74 >> 1)
            {
              sub_234745638(v74 > 1, v75 + 1, 1);
              uint64_t v73 = v341;
            }
            *(void *)(v73 + 16) = v76;
            *(_DWORD *)(v73 + 4 * v75 + 32) = v72;
            unint64_t v77 = v70[2];
            if (HIDWORD(v77)) {
              goto LABEL_267;
            }
            int v78 = dword_26E770094 + v77;
            if (__CFADD__(dword_26E770094, v77)) {
              goto LABEL_67;
            }
            uint64_t v341 = v73;
            unint64_t v79 = *(void *)(v73 + 24);
            int64_t v80 = v75 + 2;
            if (v76 >= v79 >> 1)
            {
              sub_234745638(v79 > 1, v80, 1);
              uint64_t v73 = v341;
            }
            *(void *)(v73 + 16) = v80;
            *(_DWORD *)(v73 + 4 * v76 + 32) = v78;
            unint64_t v81 = v70[2];
            if (HIDWORD(v81)) {
              goto LABEL_267;
            }
            int v82 = dword_26E770098 + v81;
            if (__CFADD__(dword_26E770098, v81)) {
              goto LABEL_67;
            }
            uint64_t v341 = v73;
            unint64_t v84 = *(void *)(v73 + 16);
            unint64_t v83 = *(void *)(v73 + 24);
            unint64_t v85 = v84 + 1;
            if (v84 >= v83 >> 1)
            {
              sub_234745638(v83 > 1, v84 + 1, 1);
              uint64_t v73 = v341;
            }
            *(void *)(v73 + 16) = v85;
            *(_DWORD *)(v73 + 4 * v84 + 32) = v82;
            unint64_t v86 = v70[2];
            if (HIDWORD(v86)) {
              goto LABEL_267;
            }
            int v87 = dword_26E77009C + v86;
            if (__CFADD__(dword_26E77009C, v86)) {
              goto LABEL_67;
            }
            uint64_t v341 = v73;
            unint64_t v88 = *(void *)(v73 + 24);
            int64_t v89 = v84 + 2;
            if (v85 >= v88 >> 1)
            {
              sub_234745638(v88 > 1, v89, 1);
              uint64_t v73 = v341;
            }
            *(void *)(v73 + 16) = v89;
            *(_DWORD *)(v73 + 4 * v85 + 32) = v87;
            unint64_t v90 = v70[2];
            if (HIDWORD(v90)) {
              goto LABEL_267;
            }
            int v91 = dword_26E7700A0 + v90;
            if (__CFADD__(dword_26E7700A0, v90)) {
              goto LABEL_67;
            }
            uint64_t v341 = v73;
            unint64_t v93 = *(void *)(v73 + 16);
            unint64_t v92 = *(void *)(v73 + 24);
            unint64_t v94 = v93 + 1;
            if (v93 >= v92 >> 1)
            {
              sub_234745638(v92 > 1, v93 + 1, 1);
              uint64_t v73 = v341;
            }
            *(void *)(v73 + 16) = v94;
            *(_DWORD *)(v73 + 4 * v93 + 32) = v91;
            unint64_t v95 = v70[2];
            if (HIDWORD(v95)) {
              goto LABEL_267;
            }
            int v96 = dword_26E7700A4 + v95;
            if (__CFADD__(dword_26E7700A4, v95))
            {
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }
            uint64_t v341 = v73;
            unint64_t v97 = *(void *)(v73 + 24);
            int64_t v98 = v93 + 2;
            if (v94 >= v97 >> 1)
            {
              sub_234745638(v97 > 1, v98, 1);
              uint64_t v73 = v341;
            }
            *(void *)(v73 + 16) = v98;
            *(_DWORD *)(v73 + 4 * v94 + 32) = v96;
            sub_2346D97CC(v73);
            int64_t v99 = v70[2];
            int64_t v100 = v99 + 4;
            if (__OFADD__(v99, 4)) {
              goto LABEL_69;
            }
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0
              || (unint64_t v102 = v70[3], v103 = v102 >> 1, (uint64_t)(v102 >> 1) < v100))
            {
              if (v99 <= v100) {
                int64_t v104 = v99 + 4;
              }
              else {
                int64_t v104 = v99;
              }
              uint64_t v70 = sub_2346FA354((void *)isUniquelyReferenced_nonNull_native, v104, 1, v70);
              unint64_t v102 = v70[3];
              unint64_t v103 = v102 >> 1;
            }
            *(void *)&long long v105 = v337;
            *(void *)&long long v106 = v336.i64[0];
            unint64_t v107 = v70[2];
            unint64_t v108 = v107 + 1;
            if (v103 <= v107)
            {
              uint64_t v114 = sub_2346FA354((void *)(v102 > 1), v107 + 1, 1, v70);
              *(void *)&long long v106 = v336.i64[0];
              *(void *)&long long v105 = v337;
              uint64_t v70 = v114;
              unint64_t v102 = v114[3];
              unint64_t v103 = v102 >> 1;
            }
            *((void *)&v106 + 1) = v340.u32[0];
            v70[2] = v108;
            *(_OWORD *)&v70[2 * v107 + 4] = v106;
            unint64_t v109 = v107 + 2;
            if ((uint64_t)v103 < (uint64_t)(v107 + 2))
            {
              uint64_t v115 = sub_2346FA354((void *)(v102 > 1), v107 + 2, 1, v70);
              *(void *)&long long v105 = v337;
              uint64_t v70 = v115;
            }
            *((void *)&v105 + 1) = v340.u32[0];
            v70[2] = v109;
            *(_OWORD *)&v70[2 * v108 + 4] = v105;
            unint64_t v110 = v70[3];
            unint64_t v111 = v107 + 3;
            if ((uint64_t)(v107 + 3) > (uint64_t)(v110 >> 1)) {
              uint64_t v70 = sub_2346FA354((void *)(v110 > 1), v107 + 3, 1, v70);
            }
            *(float32x2_t *)&long long v112 = vadd_f32(v53, v60);
            *((void *)&v112 + 1) = v339;
            v70[2] = v111;
            *(_OWORD *)&v70[2 * v109 + 4] = v112;
            unint64_t v113 = v70[3];
            if ((uint64_t)(v107 + 4) > (uint64_t)(v113 >> 1)) {
              uint64_t v70 = sub_2346FA354((void *)(v113 > 1), v107 + 4, 1, v70);
            }
            *(void *)&long long v54 = v335;
            *((void *)&v54 + 1) = v339;
            v70[2] = v107 + 4;
            *(_OWORD *)&v70[2 * v111 + 4] = v54;
            v346 = v70;
            uint64_t v55 = swift_bridgeObjectRetain();
            sub_2346D9684(v55);
            swift_bridgeObjectRelease();
          }
          ++v49;
          swift_release();
          if (v45 == v49) {
            goto LABEL_71;
          }
        }
      }
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      uint64_t result = (void *)sub_2347EEE90();
      __break(1u);
      goto LABEL_268;
    }
  }
LABEL_71:
  swift_bridgeObjectRelease();
  if (v334)
  {
    unint64_t v116 = sub_2346CAD48(v324, v322.n128_f64[0], a8, v11.f32[0]);
    unint64_t v117 = sub_23474CE64(v116);
    swift_bridgeObjectRelease();
    uint64_t v118 = v117[4];
    int64_t v119 = *(void *)(v118 + 16);
    uint64_t v120 = MEMORY[0x263F8EE78];
    if (v119)
    {
      uint64_t v341 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_234745638(0, v119, 0);
      uint64_t v121 = 0;
      uint64_t v120 = v341;
      unint64_t v122 = v346;
      while (1)
      {
        unint64_t v123 = v122[2];
        if (HIDWORD(v123)) {
          goto LABEL_267;
        }
        int v124 = *(_DWORD *)(v118 + 4 * v121 + 32);
        int v125 = v124 + v123;
        if (__CFADD__(v124, v123)) {
          goto LABEL_258;
        }
        uint64_t v341 = v120;
        unint64_t v127 = *(void *)(v120 + 16);
        unint64_t v126 = *(void *)(v120 + 24);
        if (v127 >= v126 >> 1)
        {
          sub_234745638(v126 > 1, v127 + 1, 1);
          uint64_t v120 = v341;
        }
        ++v121;
        *(void *)(v120 + 16) = v127 + 1;
        *(_DWORD *)(v120 + 4 * v127 + 32) = v125;
        if (v119 == v121)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    sub_2346D97CC(v120);
    uint64_t v128 = swift_bridgeObjectRetain();
    sub_2346D9684(v128);
    uint64_t v129 = swift_bridgeObjectRetain();
    sub_2346D9684(v129);
    swift_release();
  }
  unint64_t v324 = v342;
  if (v342 >> 62) {
    goto LABEL_264;
  }
  uint64_t v130 = *(void *)((v324 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_83:
  char v135 = v330;
  uint64_t v136 = (uint64_t)v329;
  unint64_t v137 = (unint64_t)v328;
  uint64_t v138 = (uint64_t)v327;
  if (v130)
  {
    unint64_t v139 = 0;
    *(void *)&long long v325 = v324 & 0xC000000000000001;
    unint64_t v321 = v324 & 0xFFFFFFFFFFFFFF8;
    uint64_t v320 = v324 + 32;
    v140.i32[1] = v322.n128_i32[1];
    float v141 = vmuls_lane_f32(-0.5, (float32x2_t)v322.n128_u64[0], 1);
    DWORD1(v131) = 0;
    *(float *)v140.i32 = a8 * 0.0;
    *(float *)&long long v133 = a8 + 0.0;
    *(float *)v132.i32 = v11.f32[0] * 0.0;
    *(float *)&long long v131 = 0.0 - v11.f32[0];
    *(float *)&long long v134 = *(float *)&v133 - *(float *)&v133;
    long long v333 = v134;
    long long v338 = v131;
    long long v339 = v133;
    *(float *)&long long v131 = (float)(0.0 - v11.f32[0]) - (float)(a8 + 0.0);
    long long v332 = v131;
    float32x2_t v11 = (float32x2_t)vdup_lane_s32(v132, 0);
    float32x2_t v142 = (float32x2_t)vdup_lane_s32(v140, 0);
    uint64_t v323 = v130;
    do
    {
      if ((void)v325)
      {
        uint64_t v143 = MEMORY[0x237DC6CF0](v139, v324);
        BOOL v144 = __OFADD__(v139++, 1);
        if (v144) {
          goto LABEL_259;
        }
      }
      else
      {
        if (v139 >= *(void *)(v321 + 16)) {
          goto LABEL_263;
        }
        uint64_t v143 = *(void *)(v320 + 8 * v139);
        swift_retain();
        BOOL v144 = __OFADD__(v139++, 1);
        if (v144) {
          goto LABEL_259;
        }
      }
      uint64_t v145 = *(void *)(v143 + 24);
      if ((unint64_t)v145 >> 62)
      {
        if (v145 < 0) {
          unint64_t v137 = *(void *)(v143 + 24);
        }
        else {
          unint64_t v137 = v145 & 0xFFFFFFFFFFFFFF8;
        }
        swift_bridgeObjectRetain();
        uint64_t v146 = sub_2347EEEC0();
        if (v146)
        {
LABEL_95:
          if (v146 < 1) {
            goto LABEL_260;
          }
          *(void *)&long long v326 = v143;
          v331.i64[0] = v139;
          uint64_t v147 = 0;
          unint64_t v334 = v145 & 0xC000000000000001;
          while (1)
          {
            if (v334)
            {
              uint64_t v138 = MEMORY[0x237DC6CF0](v147, v145);
            }
            else
            {
              uint64_t v138 = *(void *)(v145 + 8 * v147 + 32);
              swift_retain();
            }
            v149.i64[0] = *(void *)(v138 + 16);
            if (vabds_f32(v149.f32[1], v141) >= 0.0001 || vabds_f32(*(float *)(v138 + 28), v141) >= 0.0001)
            {
              float32x2_t v152 = *(float32x2_t *)(v138 + 24);
              *(float32x2_t *)&long long v151 = vadd_f32(v142, *(float32x2_t *)v149.f32);
              *(float32x2_t *)&long long v150 = vadd_f32(v11, *(float32x2_t *)v149.f32);
              *(float32x2_t *)v149.f32 = vadd_f32(v142, v152);
              float32x4_t v336 = v149;
              *(float32x2_t *)v149.f32 = vsub_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)&v151);
              v149.i32[2] = v333;
              long long v337 = v150;
              long long v335 = v151;
              *(float32x2_t *)v153.i8 = vsub_f32(*(float32x2_t *)&v150, *(float32x2_t *)&v151);
              v153.i64[1] = __PAIR64__(HIDWORD(v333), v332);
              float32x4_t v154 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v153, v153), (int8x16_t)v153, 0xCuLL), vnegq_f32(v149)), (float32x4_t)v153, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v149, (int32x4_t)v149), (int8x16_t)v149, 0xCuLL));
              float32x4_t v155 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v154, (int32x4_t)v154), (int8x16_t)v154, 0xCuLL);
              int32x4_t v156 = (int32x4_t)vmulq_f32(v154, v154);
              v156.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v156.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v156, 2), *(float32x2_t *)v156.i8)).u32[0];
              float32x2_t v157 = vrsqrte_f32((float32x2_t)v156.u32[0]);
              float32x2_t v158 = vmul_f32(v157, vrsqrts_f32((float32x2_t)v156.u32[0], vmul_f32(v157, v157)));
              float32x4_t v159 = vmulq_n_f32(v155, vmul_f32(v158, vrsqrts_f32((float32x2_t)v156.u32[0], vmul_f32(v158, v158))).f32[0]);
              v159.i32[3] = v340.i32[3];
              float32x4_t v340 = v159;
              __swift_instantiateConcreteTypeFromMangledName(&qword_2687AEC50);
              uint64_t v160 = sub_2347EE810();
              *(void *)(v160 + 16) = 4;
              float32x4_t v161 = v340;
              *(float32x4_t *)(v160 + 32) = v340;
              *(float32x4_t *)(v160 + 48) = v161;
              *(float32x4_t *)(v160 + 64) = v161;
              *(float32x4_t *)(v160 + 80) = v161;
              uint64_t v341 = MEMORY[0x263F8EE78];
              sub_234745638(0, 6, 0);
              uint64_t v162 = v346;
              unint64_t v163 = v346[2];
              if (HIDWORD(v163)) {
                goto LABEL_267;
              }
              int v164 = dword_26E7700C8 + v163;
              if (__CFADD__(dword_26E7700C8, v163)) {
                goto LABEL_150;
              }
              uint64_t v165 = v341;
              unint64_t v137 = *(void *)(v341 + 16);
              unint64_t v166 = *(void *)(v341 + 24);
              unint64_t v167 = v137 + 1;
              if (v137 >= v166 >> 1)
              {
                sub_234745638(v166 > 1, v137 + 1, 1);
                uint64_t v165 = v341;
              }
              *(void *)(v165 + 16) = v167;
              *(_DWORD *)(v165 + 4 * v137 + 32) = v164;
              unint64_t v168 = v162[2];
              if (HIDWORD(v168)) {
                goto LABEL_267;
              }
              int v169 = dword_26E7700CC + v168;
              if (__CFADD__(dword_26E7700CC, v168)) {
                goto LABEL_150;
              }
              uint64_t v341 = v165;
              unint64_t v170 = *(void *)(v165 + 24);
              v137 += 2;
              if (v167 >= v170 >> 1)
              {
                sub_234745638(v170 > 1, v137, 1);
                uint64_t v165 = v341;
              }
              *(void *)(v165 + 16) = v137;
              *(_DWORD *)(v165 + 4 * v167 + 32) = v169;
              unint64_t v171 = v162[2];
              if (HIDWORD(v171)) {
                goto LABEL_267;
              }
              int v172 = dword_26E7700D0 + v171;
              if (__CFADD__(dword_26E7700D0, v171)) {
                goto LABEL_150;
              }
              uint64_t v341 = v165;
              unint64_t v137 = *(void *)(v165 + 16);
              unint64_t v173 = *(void *)(v165 + 24);
              unint64_t v174 = v137 + 1;
              if (v137 >= v173 >> 1)
              {
                sub_234745638(v173 > 1, v137 + 1, 1);
                uint64_t v165 = v341;
              }
              *(void *)(v165 + 16) = v174;
              *(_DWORD *)(v165 + 4 * v137 + 32) = v172;
              unint64_t v175 = v162[2];
              if (HIDWORD(v175)) {
                goto LABEL_267;
              }
              int v176 = dword_26E7700D4 + v175;
              if (__CFADD__(dword_26E7700D4, v175)) {
                goto LABEL_150;
              }
              uint64_t v341 = v165;
              unint64_t v177 = *(void *)(v165 + 24);
              v137 += 2;
              if (v174 >= v177 >> 1)
              {
                sub_234745638(v177 > 1, v137, 1);
                uint64_t v165 = v341;
              }
              *(void *)(v165 + 16) = v137;
              *(_DWORD *)(v165 + 4 * v174 + 32) = v176;
              unint64_t v178 = v162[2];
              if (HIDWORD(v178)) {
                goto LABEL_267;
              }
              int v179 = dword_26E7700D8 + v178;
              if (__CFADD__(dword_26E7700D8, v178)) {
                goto LABEL_150;
              }
              uint64_t v341 = v165;
              unint64_t v137 = *(void *)(v165 + 16);
              unint64_t v180 = *(void *)(v165 + 24);
              unint64_t v181 = v137 + 1;
              if (v137 >= v180 >> 1)
              {
                sub_234745638(v180 > 1, v137 + 1, 1);
                uint64_t v165 = v341;
              }
              *(void *)(v165 + 16) = v181;
              *(_DWORD *)(v165 + 4 * v137 + 32) = v179;
              unint64_t v182 = v162[2];
              if (HIDWORD(v182)) {
                goto LABEL_267;
              }
              int v183 = dword_26E7700DC + v182;
              if (__CFADD__(dword_26E7700DC, v182))
              {
LABEL_150:
                __break(1u);
                goto LABEL_151;
              }
              uint64_t v341 = v165;
              unint64_t v184 = *(void *)(v165 + 24);
              int64_t v185 = v137 + 2;
              if (v181 >= v184 >> 1)
              {
                sub_234745638(v184 > 1, v185, 1);
                uint64_t v165 = v341;
              }
              *(void *)(v165 + 16) = v185;
              *(_DWORD *)(v165 + 4 * v181 + 32) = v183;
              sub_2346D97CC(v165);
              int64_t v186 = v162[2];
              int64_t v187 = v186 + 4;
              if (__OFADD__(v186, 4))
              {
                __break(1u);
LABEL_258:
                __break(1u);
LABEL_259:
                __break(1u);
LABEL_260:
                __break(1u);
LABEL_261:
                __break(1u);
LABEL_262:
                __break(1u);
LABEL_263:
                __break(1u);
LABEL_264:
                swift_bridgeObjectRetain();
                uint64_t v130 = sub_2347EEEC0();
                goto LABEL_83;
              }
              uint64_t v188 = swift_isUniquelyReferenced_nonNull_native();
              if ((v188 & 1) == 0 || (unint64_t v189 = v162[3], v190 = v189 >> 1, (uint64_t)(v189 >> 1) < v187))
              {
                if (v186 <= v187) {
                  int64_t v191 = v186 + 4;
                }
                else {
                  int64_t v191 = v186;
                }
                uint64_t v162 = sub_2346FA354((void *)v188, v191, 1, v162);
                unint64_t v189 = v162[3];
                unint64_t v190 = v189 >> 1;
              }
              unint64_t v137 = v162[2];
              unint64_t v192 = v137 + 1;
              if (v190 <= v137)
              {
                uint64_t v162 = sub_2346FA354((void *)(v189 > 1), v137 + 1, 1, v162);
                unint64_t v189 = v162[3];
                unint64_t v190 = v189 >> 1;
              }
              *(void *)&long long v193 = v335;
              *((void *)&v193 + 1) = v339;
              v162[2] = v192;
              *(_OWORD *)&v162[2 * v137 + 4] = v193;
              unint64_t v194 = v137 + 2;
              if ((uint64_t)v190 < (uint64_t)(v137 + 2)) {
                uint64_t v162 = sub_2346FA354((void *)(v189 > 1), v137 + 2, 1, v162);
              }
              *(void *)&long long v195 = v336.i64[0];
              *((void *)&v195 + 1) = v339;
              v162[2] = v194;
              *(_OWORD *)&v162[2 * v192 + 4] = v195;
              unint64_t v196 = v162[3];
              unint64_t v197 = v137 + 3;
              if ((uint64_t)(v137 + 3) > (uint64_t)(v196 >> 1)) {
                uint64_t v162 = sub_2346FA354((void *)(v196 > 1), v137 + 3, 1, v162);
              }
              *(float32x2_t *)&long long v198 = vadd_f32(v11, v152);
              *((void *)&v198 + 1) = v338;
              v162[2] = v197;
              *(_OWORD *)&v162[2 * v194 + 4] = v198;
              unint64_t v199 = v162[3];
              if ((uint64_t)(v137 + 4) > (uint64_t)(v199 >> 1)) {
                uint64_t v162 = sub_2346FA354((void *)(v199 > 1), v137 + 4, 1, v162);
              }
              *(void *)&long long v148 = v337;
              *((void *)&v148 + 1) = v338;
              v162[2] = v137 + 4;
              *(_OWORD *)&v162[2 * v197 + 4] = v148;
              v346 = v162;
              sub_2346D9684(v160);
            }
            ++v147;
            swift_release();
            if (v146 == v147)
            {
              swift_release();
              uint64_t v130 = v323;
              unint64_t v139 = v331.i64[0];
              goto LABEL_86;
            }
          }
        }
      }
      else
      {
        uint64_t v146 = *(void *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v146) {
          goto LABEL_95;
        }
      }
      swift_release();
LABEL_86:
      swift_bridgeObjectRelease();
      char v135 = v330;
      uint64_t v136 = (uint64_t)v329;
      unint64_t v137 = (unint64_t)v328;
      uint64_t v138 = (uint64_t)v327;
    }
    while (v139 != v130);
  }
  swift_bridgeObjectRelease();
  sub_2346CBE84(v316, v138);
  uint64_t v147 = *(void *)(v319 + 48);
  v319 += 48;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v147)(v138, 1, v317) == 1)
  {
    sub_2346CBEEC(v138);
  }
  else
  {
LABEL_151:
    uint64_t result = (void *)sub_2346CBF4C(v138, v137);
    uint64_t v201 = v343;
    if (!v343)
    {
LABEL_268:
      __break(1u);
      goto LABEL_269;
    }
    uint64_t v202 = *(void *)(v343 + 16);
    int64_t v203 = *(void *)(v202 + 16);
    uint64_t v204 = MEMORY[0x263F8EE78];
    if (v203)
    {
      uint64_t v341 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_234745618(0, v203, 0);
      uint64_t v206 = 0;
      uint64_t v204 = v341;
      unint64_t v207 = *(void *)(v341 + 16);
      do
      {
        v205.i64[0] = *(void *)(v202 + 8 * v206 + 32);
        uint64_t v341 = v204;
        unint64_t v208 = *(void *)(v204 + 24);
        if (v207 >= v208 >> 1)
        {
          float32x4_t v340 = v205;
          sub_234745618(v208 > 1, v207 + 1, 1);
          float32x4_t v205 = v340;
          uint64_t v204 = v341;
        }
        ++v206;
        *(void *)(v204 + 16) = v207 + 1;
        *(_DWORD *)(v204 + 4 * v207++ + 32) = v205.i32[0];
      }
      while (v203 != v206);
      swift_bridgeObjectRelease();
    }
    unint64_t v209 = sub_23475B0C0(v204);
    swift_bridgeObjectRelease();
    if ((v209 & 0x100000000) != 0) {
      float v210 = -0.5 * v322.n128_f32[0];
    }
    else {
      float v210 = *(float *)&v209;
    }
    uint64_t v211 = *(void *)(v201 + 16);
    uint64_t v212 = *(void *)(v211 + 16);
    if (v212)
    {
      swift_bridgeObjectRetain();
      uint64_t v214 = 0;
      simd_float4x4 v215 = (void *)MEMORY[0x263F8EE78];
      do
      {
        v213.i64[0] = *(void *)(v211 + 8 * v214 + 32);
        if (vabds_f32(v213.f32[0], v210) < 0.0001)
        {
          float32x4_t v340 = v213;
          char v219 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v341 = (uint64_t)v215;
          if ((v219 & 1) == 0)
          {
            sub_234745680(0, v215[2] + 1, 1);
            simd_float4x4 v215 = (void *)v341;
          }
          unint64_t v217 = v215[2];
          unint64_t v216 = v215[3];
          uint64_t v218 = v340.i64[0];
          if (v217 >= v216 >> 1)
          {
            sub_234745680(v216 > 1, v217 + 1, 1);
            uint64_t v218 = v340.i64[0];
            simd_float4x4 v215 = (void *)v341;
          }
          v215[2] = v217 + 1;
          v215[v217 + 4] = v218;
        }
        ++v214;
      }
      while (v212 != v214);
      swift_bridgeObjectRelease();
    }
    else
    {
      simd_float4x4 v215 = (void *)MEMORY[0x263F8EE78];
    }
    int64_t v220 = v215[2];
    uint64_t v221 = MEMORY[0x263F8EE78];
    if (v220)
    {
      uint64_t v341 = MEMORY[0x263F8EE78];
      sub_234745618(0, v220, 0);
      uint64_t v223 = v341;
      v224 = v215 + 4;
      unint64_t v225 = *(void *)(v341 + 16);
      int64_t v226 = v220;
      do
      {
        v222.i64[0] = *v224;
        uint64_t v341 = v223;
        unint64_t v227 = *(void *)(v223 + 24);
        if (v225 >= v227 >> 1)
        {
          float32x4_t v340 = v222;
          sub_234745618(v227 > 1, v225 + 1, 1);
          float32x4_t v222 = v340;
          uint64_t v223 = v341;
        }
        *(void *)(v223 + 16) = v225 + 1;
        *(_DWORD *)(v223 + 4 * v225 + 32) = v222.i32[1];
        ++v224;
        ++v225;
        --v226;
      }
      while (v226);
    }
    else
    {
      uint64_t v223 = MEMORY[0x263F8EE78];
    }
    unint64_t v228 = sub_23475B0C0(v223);
    swift_bridgeObjectRelease();
    float v229 = vmuls_lane_f32(-0.5, (float32x2_t)v322.n128_u64[0], 1);
    if ((v228 & 0x100000000) != 0) {
      v11.f32[0] = v229;
    }
    else {
      v11.f32[0] = *(float *)&v228;
    }
    if (v220)
    {
      uint64_t v341 = v221;
      sub_234745618(0, v220, 0);
      uint64_t v231 = 0;
      uint64_t v232 = v341;
      unint64_t v233 = *(void *)(v341 + 16);
      do
      {
        v230.i64[0] = v215[v231 + 4];
        uint64_t v341 = v232;
        unint64_t v234 = *(void *)(v232 + 24);
        if (v233 >= v234 >> 1)
        {
          float32x4_t v340 = v230;
          sub_234745618(v234 > 1, v233 + 1, 1);
          float32x4_t v230 = v340;
          uint64_t v232 = v341;
        }
        ++v231;
        *(void *)(v232 + 16) = v233 + 1;
        *(_DWORD *)(v232 + 4 * v233++ + 32) = v230.i32[1];
      }
      while (v220 != v231);
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v232 = MEMORY[0x263F8EE78];
    }
    unint64_t v235 = sub_23475B118(v232);
    swift_bridgeObjectRelease();
    v240.n128_f32[0] = vmuls_lane_f32(0.5, (float32x2_t)v322.n128_u64[0], 1);
    double v241 = COERCE_DOUBLE(__PAIR64__(v322.n128_u32[1], v235));
    if ((v235 & 0x100000000) != 0) {
      *(float *)&double v241 = v240.n128_f32[0];
    }
    char v135 = v330;
    uint64_t v136 = (uint64_t)v329;
    v242 = v328;
    v240.n128_u64[0] = (unint64_t)*v328;
    v240.n128_u32[0] = v11.i32[0];
    v243 = sub_2346CBFB0(v328, a8 > 0.0, v240, v241, (float32x2_t)COERCE_UNSIGNED_INT(v210 - COERCE_FLOAT(*v328)), v236, v237, v238, v239);
    if (v243)
    {
      uint64_t v244 = v243[4];
      int64_t v245 = *(void *)(v244 + 16);
      uint64_t v246 = MEMORY[0x263F8EE78];
      if (v245)
      {
        v340.i64[0] = v147;
        uint64_t v341 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_234745638(0, v245, 0);
        uint64_t v247 = 0;
        uint64_t v246 = v341;
        v248 = v346;
        while (1)
        {
          unint64_t v249 = v248[2];
          if (HIDWORD(v249)) {
            goto LABEL_267;
          }
          int v250 = *(_DWORD *)(v244 + 4 * v247 + 32);
          int v251 = v250 + v249;
          if (__CFADD__(v250, v249)) {
            goto LABEL_261;
          }
          uint64_t v341 = v246;
          unint64_t v253 = *(void *)(v246 + 16);
          unint64_t v252 = *(void *)(v246 + 24);
          if (v253 >= v252 >> 1)
          {
            sub_234745638(v252 > 1, v253 + 1, 1);
            uint64_t v246 = v341;
          }
          ++v247;
          *(void *)(v246 + 16) = v253 + 1;
          *(_DWORD *)(v246 + 4 * v253 + 32) = v251;
          if (v245 == v247)
          {
            swift_bridgeObjectRelease();
            uint64_t v147 = v340.i64[0];
            break;
          }
        }
      }
      sub_2346D97CC(v246);
      uint64_t v254 = swift_bridgeObjectRetain();
      sub_2346D9684(v254);
      uint64_t v255 = swift_bridgeObjectRetain();
      sub_2346D9684(v255);
      sub_2346CD704((uint64_t)v328);
      swift_release();
      char v135 = v330;
      uint64_t v136 = (uint64_t)v329;
    }
    else
    {
      sub_2346CD704((uint64_t)v242);
    }
  }
  sub_2346CBE84(v315, v136);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v147)(v136, 1, v317) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_2346CBEEC(v136);
    goto LABEL_256;
  }
  uint64_t result = (void *)sub_2346CBF4C(v136, (uint64_t)v135);
  uint64_t v256 = v343;
  if (v343)
  {
    uint64_t v257 = *(void *)(v343 + 16);
    int64_t v258 = *(void *)(v257 + 16);
    uint64_t v259 = MEMORY[0x263F8EE78];
    if (v258)
    {
      uint64_t v341 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_234745618(0, v258, 0);
      uint64_t v261 = 0;
      uint64_t v259 = v341;
      unint64_t v262 = *(void *)(v341 + 16);
      do
      {
        v260.i64[0] = *(void *)(v257 + 8 * v261 + 32);
        uint64_t v341 = v259;
        unint64_t v263 = *(void *)(v259 + 24);
        if (v262 >= v263 >> 1)
        {
          float32x4_t v340 = v260;
          sub_234745618(v263 > 1, v262 + 1, 1);
          float32x4_t v260 = v340;
          uint64_t v259 = v341;
        }
        ++v261;
        *(void *)(v259 + 16) = v262 + 1;
        *(_DWORD *)(v259 + 4 * v262++ + 32) = v260.i32[0];
      }
      while (v258 != v261);
      swift_bridgeObjectRelease();
    }
    unint64_t v264 = sub_23475B118(v259);
    swift_bridgeObjectRelease();
    if ((v264 & 0x100000000) != 0) {
      float v265 = 0.5 * v322.n128_f32[0];
    }
    else {
      float v265 = *(float *)&v264;
    }
    uint64_t v266 = *(void *)(v256 + 16);
    uint64_t v267 = *(void *)(v266 + 16);
    if (v267)
    {
      swift_bridgeObjectRetain();
      uint64_t v269 = 0;
      v270 = (void *)MEMORY[0x263F8EE78];
      do
      {
        v268.i64[0] = *(void *)(v266 + 8 * v269 + 32);
        if (vabds_f32(v268.f32[0], v265) < 0.0001)
        {
          float32x4_t v340 = v268;
          char v274 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v341 = (uint64_t)v270;
          if ((v274 & 1) == 0)
          {
            sub_234745680(0, v270[2] + 1, 1);
            v270 = (void *)v341;
          }
          unint64_t v272 = v270[2];
          unint64_t v271 = v270[3];
          uint64_t v273 = v340.i64[0];
          if (v272 >= v271 >> 1)
          {
            sub_234745680(v271 > 1, v272 + 1, 1);
            uint64_t v273 = v340.i64[0];
            v270 = (void *)v341;
          }
          v270[2] = v272 + 1;
          v270[v272 + 4] = v273;
        }
        ++v269;
      }
      while (v267 != v269);
      swift_bridgeObjectRelease();
    }
    else
    {
      v270 = (void *)MEMORY[0x263F8EE78];
    }
    int64_t v275 = v270[2];
    uint64_t v276 = MEMORY[0x263F8EE78];
    if (v275)
    {
      uint64_t v341 = MEMORY[0x263F8EE78];
      sub_234745618(0, v275, 0);
      uint64_t v278 = v341;
      v279 = v270 + 4;
      unint64_t v280 = *(void *)(v341 + 16);
      int64_t v281 = v275;
      do
      {
        v277.i64[0] = *v279;
        uint64_t v341 = v278;
        unint64_t v282 = *(void *)(v278 + 24);
        if (v280 >= v282 >> 1)
        {
          float32x4_t v340 = v277;
          sub_234745618(v282 > 1, v280 + 1, 1);
          float32x4_t v277 = v340;
          uint64_t v278 = v341;
        }
        *(void *)(v278 + 16) = v280 + 1;
        *(_DWORD *)(v278 + 4 * v280 + 32) = v277.i32[1];
        ++v279;
        ++v280;
        --v281;
      }
      while (v281);
    }
    else
    {
      uint64_t v278 = MEMORY[0x263F8EE78];
    }
    unint64_t v283 = sub_23475B0C0(v278);
    swift_bridgeObjectRelease();
    float v284 = vmuls_lane_f32(-0.5, (float32x2_t)v322.n128_u64[0], 1);
    if ((v283 & 0x100000000) != 0) {
      v11.f32[0] = v284;
    }
    else {
      v11.f32[0] = *(float *)&v283;
    }
    if (v275)
    {
      uint64_t v341 = v276;
      sub_234745618(0, v275, 0);
      uint64_t v286 = 0;
      uint64_t v287 = v341;
      unint64_t v288 = *(void *)(v341 + 16);
      do
      {
        v285.i64[0] = v270[v286 + 4];
        uint64_t v341 = v287;
        unint64_t v289 = *(void *)(v287 + 24);
        if (v288 >= v289 >> 1)
        {
          float32x4_t v340 = v285;
          sub_234745618(v289 > 1, v288 + 1, 1);
          float32x4_t v285 = v340;
          uint64_t v287 = v341;
        }
        ++v286;
        *(void *)(v287 + 16) = v288 + 1;
        *(_DWORD *)(v287 + 4 * v288++ + 32) = v285.i32[1];
      }
      while (v275 != v286);
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v287 = MEMORY[0x263F8EE78];
    }
    unint64_t v290 = sub_23475B118(v287);
    swift_bridgeObjectRelease();
    v295.n128_f32[0] = vmuls_lane_f32(0.5, (float32x2_t)v322.n128_u64[0], 1);
    double v296 = COERCE_DOUBLE(__PAIR64__(v322.n128_u32[1], v290));
    if ((v290 & 0x100000000) != 0) {
      *(float *)&double v296 = v295.n128_f32[0];
    }
    v297 = v330;
    v295.n128_u64[0] = (unint64_t)*v330;
    v295.n128_u32[0] = v11.i32[0];
    v298 = sub_2346CBFB0(v330, a8 > 0.0, v295, v296, (float32x2_t)COERCE_UNSIGNED_INT(v265 - COERCE_FLOAT(*v330)), v291, v292, v293, v294);
    if (v298)
    {
      uint64_t v299 = v298[4];
      int64_t v300 = *(void *)(v299 + 16);
      uint64_t v301 = MEMORY[0x263F8EE78];
      if (v300)
      {
        uint64_t v341 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_234745638(0, v300, 0);
        uint64_t v302 = 0;
        uint64_t v301 = v341;
        v303 = v346;
        while (1)
        {
          unint64_t v304 = v303[2];
          if (HIDWORD(v304)) {
            goto LABEL_267;
          }
          int v305 = *(_DWORD *)(v299 + 4 * v302 + 32);
          int v306 = v305 + v304;
          if (__CFADD__(v305, v304)) {
            goto LABEL_262;
          }
          uint64_t v341 = v301;
          unint64_t v308 = *(void *)(v301 + 16);
          unint64_t v307 = *(void *)(v301 + 24);
          if (v308 >= v307 >> 1)
          {
            sub_234745638(v307 > 1, v308 + 1, 1);
            uint64_t v301 = v341;
          }
          ++v302;
          *(void *)(v301 + 16) = v308 + 1;
          *(_DWORD *)(v301 + 4 * v308 + 32) = v306;
          if (v300 == v302)
          {
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
      sub_2346D97CC(v301);
      uint64_t v309 = swift_bridgeObjectRetain();
      sub_2346D9684(v309);
      uint64_t v310 = swift_bridgeObjectRetain();
      sub_2346D9684(v310);
      swift_release();
      sub_2346CD704((uint64_t)v330);
      swift_release();
    }
    else
    {
      swift_release();
      sub_2346CD704((uint64_t)v297);
      swift_bridgeObjectRelease();
    }
    swift_release();
LABEL_256:
    uint64_t v312 = v345;
    v311 = v346;
    uint64_t v313 = v344;
    type metadata accessor for RoomCaptureMesh();
    uint64_t result = (void *)swift_allocObject();
    result[2] = v311;
    result[3] = v313;
    result[4] = v312;
    return result;
  }
LABEL_269:
  __break(1u);
  return result;
}

void *sub_2346C5E78(float32x2_t *a1, unint64_t a2, double a3, float a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v122[0] = a3;
  int v16 = a9 & 1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC810);
  uint64_t v116 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v115 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v128 = MEMORY[0x263F8EE78];
  unint64_t v129 = MEMORY[0x263F8EE78];
  uint64_t v127 = MEMORY[0x263F8EE78];
  int64_t v119 = a1;
  unint64_t v117 = a2;
  uint64_t v120 = a8;
  int v118 = v16;
  uint64_t v20 = sub_2346C9E80(a1, a2, a8, v16, v122[0]);
  *(void *)&long long v114 = v9;
  uint64_t v123 = v9;
  float v124 = a4;
  int v125 = v20;
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_2346CD7B4(v21, (void (*)(uint64_t, __n128))sub_2346CD760);
  swift_bridgeObjectRelease();
  sub_2346D9684(v22);
  uint64_t v23 = swift_bridgeObjectRetain();
  sub_2346D9684(v23);
  uint64_t v121 = v20;
  uint64_t v24 = v20[4];
  uint64_t v25 = swift_bridgeObjectRetain();
  sub_2346D97CC(v25);
  int64_t v26 = *(void *)(v24 + 16);
  if (v26)
  {
    unint64_t v113 = 0;
    uint64_t v27 = v17;
    uint64_t v126 = v19;
    swift_bridgeObjectRetain();
    sub_234745638(0, v26, 0);
    uint64_t v28 = 0;
    uint64_t v19 = v126;
    unint64_t v29 = v129;
    while (1)
    {
      unint64_t v30 = *(void *)(v29 + 16);
      if (HIDWORD(v30)) {
        goto LABEL_70;
      }
      int v31 = *(_DWORD *)(v24 + 4 * v28 + 32);
      int v32 = v31 + v30;
      if (__CFADD__(v31, v30)) {
        break;
      }
      uint64_t v126 = v19;
      unint64_t v34 = *(void *)(v19 + 16);
      unint64_t v33 = *(void *)(v19 + 24);
      uint64_t v10 = v34 + 1;
      if (v34 >= v33 >> 1)
      {
        sub_234745638(v33 > 1, v34 + 1, 1);
        uint64_t v19 = v126;
      }
      ++v28;
      *(void *)(v19 + 16) = v10;
      *(_DWORD *)(v19 + 4 * v34 + 32) = v32;
      if (v26 == v28)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = v27;
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_66;
  }
LABEL_9:
  uint64_t v35 = sub_2346DA364(v19);
  uint64_t v36 = v121;
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v38 = sub_2346CD7B4(v37, (void (*)(uint64_t, __n128))sub_2346CD8BC);
  swift_bridgeObjectRelease();
  sub_2346D9684(v38);
  uint64_t v39 = v36[3];
  int64_t v40 = *(void *)(v39 + 16);
  uint64_t v41 = MEMORY[0x263F8EE78];
  if (v40)
  {
    uint64_t v126 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_23473D210(0, v40, 0);
    uint64_t v42 = 0;
    uint64_t v41 = v126;
    unint64_t v43 = *(void *)(v126 + 16);
    do
    {
      long long v44 = *(_OWORD *)(v39 + 16 * v42 + 32);
      uint64_t v126 = v41;
      unint64_t v45 = *(void *)(v41 + 24);
      if (v43 >= v45 >> 1)
      {
        long long v114 = v44;
        sub_23473D210(v45 > 1, v43 + 1, 1);
        long long v44 = v114;
        uint64_t v41 = v126;
      }
      *(float32x2_t *)&long long v46 = vsub_f32(0, *(float32x2_t *)&v44);
      *((float *)&v46 + 2) = 0.0 - *((float *)&v44 + 2);
      HIDWORD(v46) = 0;
      ++v42;
      *(void *)(v41 + 16) = v43 + 1;
      *(_OWORD *)(v41 + 16 * v43++ + 32) = v46;
    }
    while (v40 != v42);
    swift_bridgeObjectRelease();
  }
  sub_2346D9684(v41);
  type metadata accessor for CapturedRoom.Surface.Curve(0);
  int32x2_t v47 = v119;
  float32x4_t v48 = self;
  id v49 = objc_msgSend(v48, sel_radians);
  int32x2_t v50 = v115;
  sub_2347ED130();

  sub_2347ED120();
  double v52 = v51;
  float32x2_t v53 = *(void (**)(char *, uint64_t))(v116 + 8);
  v53(v50, v17);
  float v54 = v52;
  id v55 = objc_msgSend(v48, sel_radians);
  sub_2347ED130();

  sub_2347ED120();
  double v57 = v56;
  v53(v50, v17);
  *(float *)&double v57 = v57;
  float32x2_t v58 = vmul_n_f32((float32x2_t)0x3F000000BF000000, *(float *)v122);
  uint64_t v116 = type metadata accessor for CurvedElement();
  uint64_t inited = swift_initStackObject();
  *(float *)(inited + 16) = v54;
  *(_DWORD *)(inited + 20) = LODWORD(v57);
  *(float32x2_t *)(inited + 24) = v58;
  double v60 = *(double *)v47;
  float v61 = v47[1].f32[0];
  *(void *)&v122[0] = inited;
  float32x4_t v62 = sub_2346CE054((float *)inited, v120, v118, 0, v60, v61, a4, a5);
  uint64_t v10 = (uint64_t)v62;
  uint64_t v63 = v62[4];
  int64_t v64 = *(void *)(v63 + 16);
  uint64_t v65 = MEMORY[0x263F8EE78];
  if (v64)
  {
    float32x4_t v66 = v62;
    uint64_t v126 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_234745638(0, v64, 0);
    uint64_t v10 = 0;
    uint64_t v65 = v126;
    unint64_t v29 = v129;
    while (1)
    {
      unint64_t v67 = *(void *)(v29 + 16);
      if (HIDWORD(v67)) {
        goto LABEL_70;
      }
      int v68 = *(_DWORD *)(v63 + 4 * v10 + 32);
      int v69 = v68 + v67;
      if (__CFADD__(v68, v67)) {
        break;
      }
      uint64_t v126 = v65;
      unint64_t v71 = *(void *)(v65 + 16);
      unint64_t v70 = *(void *)(v65 + 24);
      if (v71 >= v70 >> 1)
      {
        sub_234745638(v70 > 1, v71 + 1, 1);
        uint64_t v65 = v126;
      }
      ++v10;
      *(void *)(v65 + 16) = v71 + 1;
      *(_DWORD *)(v65 + 4 * v71 + 32) = v69;
      if (v64 == v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = (uint64_t)v66;
        goto LABEL_23;
      }
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
LABEL_23:
  sub_2346D97CC(v65);
  uint64_t v72 = swift_bridgeObjectRetain();
  sub_2346D9684(v72);
  uint64_t v73 = swift_bridgeObjectRetain();
  sub_2346D9684(v73);
  unint64_t v29 = v117;
  if (v117 >> 62)
  {
LABEL_68:
    swift_bridgeObjectRetain();
    uint64_t v74 = sub_2347EEEC0();
    goto LABEL_25;
  }
  uint64_t v74 = *(void *)((v117 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_25:
  double v75 = v122[0];
  if (!v74)
  {
LABEL_64:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v107 = v128;
    unint64_t v106 = v129;
    uint64_t v108 = v127;
    type metadata accessor for RoomCaptureMesh();
    uint64_t result = (void *)swift_allocObject();
    result[2] = v106;
    result[3] = v107;
    result[4] = v108;
    return result;
  }
  if (v74 < 1)
  {
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v76 = 0;
  unint64_t v77 = v29 & 0xC000000000000001;
  unint64_t v78 = v29 + 32;
  while (1)
  {
    if (v77)
    {
      unint64_t v79 = (float *)MEMORY[0x237DC6CF0](v76, v29);
    }
    else
    {
      unint64_t v79 = *(float **)(v78 + 8 * v76);
      swift_retain();
    }
    float v81 = v79[4];
    float v80 = v79[5];
    if (vabds_f32(v81, v80) >= 0.00000011921)
    {
      float v83 = v79[6];
      float v82 = v79[7];
      if (vabds_f32(v83, v82) >= 0.00000011921)
      {
        float v85 = *(float *)(*(void *)&v75 + 16);
        float v84 = *(float *)(*(void *)&v75 + 20);
        if (vabds_f32(v85, v84) >= 0.00000011921)
        {
          float v87 = *(float *)(*(void *)&v75 + 24);
          float v86 = *(float *)(*(void *)&v75 + 28);
          if (vabds_f32(v87, v86) >= 0.00000011921 && v84 > v81 && v80 > v85 && v86 > v83 && v82 > v87) {
            break;
          }
        }
      }
    }
    swift_release();
LABEL_60:
    if (++v76 == v74) {
      goto LABEL_64;
    }
  }
  *(void *)&long long v114 = v78;
  uint64_t v115 = (char *)v10;
  if (v81 > v85) {
    float v88 = v81;
  }
  else {
    float v88 = v85;
  }
  if (v84 >= v80) {
    float v89 = v80;
  }
  else {
    float v89 = v84;
  }
  if (v83 > v87) {
    float v90 = v83;
  }
  else {
    float v90 = v87;
  }
  if (v86 >= v82) {
    float v91 = v82;
  }
  else {
    float v91 = v86;
  }
  unint64_t v92 = (float *)swift_initStackObject();
  v92[4] = v88;
  v92[5] = v89;
  v92[6] = v90;
  v92[7] = v91;
  unint64_t v113 = sub_2346CE054(v92, v120, v118, 1, *(double *)v119, v119[1].f32[0], a4, a5);
  uint64_t v93 = v113[4];
  int64_t v94 = *(void *)(v93 + 16);
  if (!v94)
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
LABEL_63:
    sub_2346D97CC(v10);
    uint64_t v104 = swift_bridgeObjectRetain();
    sub_2346D9684(v104);
    uint64_t v105 = swift_bridgeObjectRetain();
    sub_2346D9684(v105);
    swift_release();
    swift_release();
    uint64_t v10 = (uint64_t)v115;
    unint64_t v78 = v114;
    goto LABEL_60;
  }
  uint64_t v126 = MEMORY[0x263F8EE78];
  uint64_t v112 = v93;
  int64_t v111 = v94;
  swift_bridgeObjectRetain();
  sub_234745638(0, v111, 0);
  int64_t v95 = v111;
  uint64_t v96 = v112;
  unint64_t v29 = 0;
  uint64_t v10 = v126;
  unint64_t v97 = v129;
  while (1)
  {
    unint64_t v98 = *(void *)(v97 + 16);
    if (HIDWORD(v98)) {
      break;
    }
    int v99 = *(_DWORD *)(v96 + 4 * v29 + 32);
    int v100 = v99 + v98;
    if (__CFADD__(v99, v98)) {
      goto LABEL_67;
    }
    uint64_t v126 = v10;
    unint64_t v102 = *(void *)(v10 + 16);
    unint64_t v101 = *(void *)(v10 + 24);
    if (v102 >= v101 >> 1)
    {
      unint64_t v103 = v97;
      sub_234745638(v101 > 1, v102 + 1, 1);
      unint64_t v97 = v103;
      int64_t v95 = v111;
      uint64_t v96 = v112;
      uint64_t v10 = v126;
    }
    ++v29;
    *(void *)(v10 + 16) = v102 + 1;
    *(_DWORD *)(v10 + 4 * v102 + 32) = v100;
    if (v95 == v29)
    {
      swift_bridgeObjectRelease();
      unint64_t v29 = v117;
      double v75 = v122[0];
      goto LABEL_63;
    }
  }
LABEL_70:
  uint64_t result = (void *)sub_2347EEE90();
  __break(1u);
  return result;
}

void *sub_2346C685C(unint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, float a5, float a6)
{
  uint64_t v100 = a3;
  unint64_t v102 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))a2;
  __n128 v108 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v101 = (uint64_t)&v96 - v13;
  uint64_t v103 = type metadata accessor for ScanItemStrut();
  uint64_t v105 = *(void *)(v103 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v103);
  uint64_t v104 = (float32x2_t *)((char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  int v99 = (float32x2_t *)((char *)&v96 - v16);
  uint64_t v17 = MEMORY[0x263F8EE78];
  uint64_t v111 = MEMORY[0x263F8EE78];
  uint64_t v112 = MEMORY[0x263F8EE78];
  uint64_t v110 = MEMORY[0x263F8EE78];
  unint64_t v18 = sub_2346C953C(a1, (float32x2_t)v108.n128_u64[0], 0.0);
  uint64_t v19 = sub_23474CE64(v18);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = sub_2346C7E94(v20, a5);
  uint64_t v106 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  sub_2346D9684(v21);
  uint64_t v22 = swift_bridgeObjectRetain();
  sub_2346D9684(v22);
  uint64_t v107 = v19;
  uint64_t v23 = v19[4];
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_2346D97CC(v24);
  int64_t v25 = *(void *)(v23 + 16);
  if (v25)
  {
    unint64_t v97 = a1;
    unint64_t v98 = v12;
    uint64_t v109 = v17;
    swift_bridgeObjectRetain();
    sub_234745638(0, v25, 0);
    uint64_t v26 = 0;
    uint64_t v17 = v109;
    uint64_t v27 = v112;
    while (1)
    {
      unint64_t v28 = *(void *)(v27 + 16);
      if (HIDWORD(v28)) {
        goto LABEL_49;
      }
      int v29 = *(_DWORD *)(v23 + 4 * v26 + 32);
      int v30 = v29 + v28;
      if (__CFADD__(v29, v28))
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      uint64_t v109 = v17;
      unint64_t v32 = *(void *)(v17 + 16);
      unint64_t v31 = *(void *)(v17 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_234745638(v31 > 1, v32 + 1, 1);
        uint64_t v17 = v109;
      }
      ++v26;
      *(void *)(v17 + 16) = v32 + 1;
      *(_DWORD *)(v17 + 4 * v32 + 32) = v30;
      if (v25 == v26)
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = v98;
        a1 = v97;
        break;
      }
    }
  }
  sub_2346DA364(v17);
  unint64_t v33 = v107;
  swift_retain();
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = sub_2346C7F8C(v34, a6);
  swift_bridgeObjectRelease();
  swift_release();
  sub_2346D9684(v35);
  uint64_t v36 = sub_234799DD0(*(void *)(v33[2] + 16), (__n128)xmmword_2347F1FD0);
  sub_2346D9684(v36);
  uint64_t v106 = sub_2346CB454(a1, v108.n128_f64[0], a5, a6);
  uint64_t v37 = *(void *)(v106 + 32);
  int64_t v38 = *(void *)(v37 + 16);
  uint64_t v39 = MEMORY[0x263F8EE78];
  if (v38)
  {
    uint64_t v109 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_234745638(0, v38, 0);
    uint64_t v40 = 0;
    uint64_t v39 = v109;
    uint64_t v41 = v112;
    while (1)
    {
      unint64_t v42 = *(void *)(v41 + 16);
      if (HIDWORD(v42)) {
        goto LABEL_49;
      }
      int v43 = *(_DWORD *)(v37 + 4 * v40 + 32);
      int v44 = v43 + v42;
      if (__CFADD__(v43, v42)) {
        goto LABEL_46;
      }
      uint64_t v109 = v39;
      unint64_t v46 = *(void *)(v39 + 16);
      unint64_t v45 = *(void *)(v39 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_234745638(v45 > 1, v46 + 1, 1);
        uint64_t v39 = v109;
      }
      ++v40;
      *(void *)(v39 + 16) = v46 + 1;
      *(_DWORD *)(v39 + 4 * v46 + 32) = v44;
      if (v38 == v40)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_2346D97CC(v39);
  uint64_t v47 = swift_bridgeObjectRetain();
  sub_2346D9684(v47);
  uint64_t v48 = swift_bridgeObjectRetain();
  sub_2346D9684(v48);
  uint64_t v49 = v101;
  sub_2346CBE84((uint64_t)v102, v101);
  uint64_t v50 = v105 + 48;
  double v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
  uint64_t v52 = v103;
  if (v51(v49, 1, v103) == 1)
  {
    sub_2346CBEEC(v49);
LABEL_30:
    uint64_t v72 = v104;
    uint64_t v73 = v100;
    goto LABEL_31;
  }
  float32x2_t v53 = v99;
  sub_2346CBF4C(v49, (uint64_t)v99);
  v54.n128_f32[0] = vmuls_lane_f32(-0.5, (float32x2_t)v108.n128_u64[0], 1);
  *(float *)&double v55 = vmuls_lane_f32(0.5, (float32x2_t)v108.n128_u64[0], 1);
  float32x4_t v59 = sub_2346CBFB0(v53, a5 > 0.0, v54, v55, (float32x2_t)COERCE_UNSIGNED_INT((float)(-0.5 * v108.n128_f32[0]) - COERCE_FLOAT(*v53)), v108.n128_f64[0], v56, v57, v58);
  if (!v59)
  {
    sub_2346CD704((uint64_t)v53);
    goto LABEL_30;
  }
  unint64_t v102 = v51;
  uint64_t v60 = v59[4];
  int64_t v61 = *(void *)(v60 + 16);
  uint64_t v62 = MEMORY[0x263F8EE78];
  if (v61)
  {
    uint64_t v105 = v50;
    unint64_t v98 = v12;
    uint64_t v109 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_234745638(0, v61, 0);
    uint64_t v63 = 0;
    uint64_t v62 = v109;
    uint64_t v64 = v112;
    while (1)
    {
      unint64_t v65 = *(void *)(v64 + 16);
      if (HIDWORD(v65)) {
        goto LABEL_49;
      }
      int v66 = *(_DWORD *)(v60 + 4 * v63 + 32);
      int v67 = v66 + v65;
      if (__CFADD__(v66, v65)) {
        goto LABEL_47;
      }
      uint64_t v109 = v62;
      unint64_t v69 = *(void *)(v62 + 16);
      unint64_t v68 = *(void *)(v62 + 24);
      if (v69 >= v68 >> 1)
      {
        sub_234745638(v68 > 1, v69 + 1, 1);
        uint64_t v62 = v109;
      }
      ++v63;
      *(void *)(v62 + 16) = v69 + 1;
      *(_DWORD *)(v62 + 4 * v69 + 32) = v67;
      if (v61 == v63)
      {
        swift_bridgeObjectRelease();
        uint64_t v12 = v98;
        uint64_t v52 = v103;
        break;
      }
    }
  }
  sub_2346D97CC(v62);
  uint64_t v70 = swift_bridgeObjectRetain();
  sub_2346D9684(v70);
  uint64_t v71 = swift_bridgeObjectRetain();
  sub_2346D9684(v71);
  sub_2346CD704((uint64_t)v99);
  swift_release();
  uint64_t v72 = v104;
  uint64_t v73 = v100;
  double v51 = v102;
LABEL_31:
  sub_2346CBE84(v73, (uint64_t)v12);
  if (v51((uint64_t)v12, 1, v52) == 1)
  {
    swift_release();
    swift_release();
    sub_2346CBEEC((uint64_t)v12);
LABEL_44:
    uint64_t v93 = v111;
    uint64_t v92 = v112;
    uint64_t v94 = v110;
    type metadata accessor for RoomCaptureMesh();
    uint64_t result = (void *)swift_allocObject();
    result[2] = v92;
    result[3] = v94;
    result[4] = v93;
    return result;
  }
  sub_2346CBF4C((uint64_t)v12, (uint64_t)v72);
  v74.n128_f32[0] = vmuls_lane_f32(-0.5, (float32x2_t)v108.n128_u64[0], 1);
  *(float *)&double v75 = vmuls_lane_f32(0.5, (float32x2_t)v108.n128_u64[0], 1);
  unint64_t v79 = sub_2346CBFB0(v72, a5 > 0.0, v74, v75, (float32x2_t)COERCE_UNSIGNED_INT((float)(0.5 * v108.n128_f32[0]) - COERCE_FLOAT(*v72)), v108.n128_f64[0], v76, v77, v78);
  if (!v79)
  {
    swift_release();
    swift_release();
    sub_2346CD704((uint64_t)v72);
    goto LABEL_44;
  }
  uint64_t v80 = v79[4];
  int64_t v81 = *(void *)(v80 + 16);
  uint64_t v82 = MEMORY[0x263F8EE78];
  if (!v81)
  {
LABEL_42:
    sub_2346D97CC(v82);
    uint64_t v90 = swift_bridgeObjectRetain();
    sub_2346D9684(v90);
    uint64_t v91 = swift_bridgeObjectRetain();
    sub_2346D9684(v91);
    swift_release();
    swift_release();
    sub_2346CD704((uint64_t)v104);
    swift_release();
    goto LABEL_44;
  }
  uint64_t v109 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  sub_234745638(0, v81, 0);
  uint64_t v83 = 0;
  uint64_t v82 = v109;
  uint64_t v84 = v112;
  while (1)
  {
    unint64_t v85 = *(void *)(v84 + 16);
    if (HIDWORD(v85)) {
      break;
    }
    int v86 = *(_DWORD *)(v80 + 4 * v83 + 32);
    int v87 = v86 + v85;
    if (__CFADD__(v86, v85)) {
      goto LABEL_48;
    }
    uint64_t v109 = v82;
    unint64_t v89 = *(void *)(v82 + 16);
    unint64_t v88 = *(void *)(v82 + 24);
    if (v89 >= v88 >> 1)
    {
      sub_234745638(v88 > 1, v89 + 1, 1);
      uint64_t v82 = v109;
    }
    ++v83;
    *(void *)(v82 + 16) = v89 + 1;
    *(_DWORD *)(v82 + 4 * v89 + 32) = v87;
    if (v81 == v83)
    {
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
  }
LABEL_49:
  uint64_t result = (void *)sub_2347EEE90();
  __break(1u);
  return result;
}

uint64_t sub_2346C7094(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
  {
    uint64_t v2 = sub_23473CFA4(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  sub_2346C714C(v6);
  return sub_2347EE7F0();
}

uint64_t RoomCaptureGeometryManager.deinit()
{
  return v0;
}

uint64_t RoomCaptureGeometryManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t method lookup function for RoomCaptureGeometryManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RoomCaptureGeometryManager);
}

uint64_t sub_2346C714C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t result = sub_2347EF060();
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_134;
    }
    if ((unint64_t)v4 >= 2)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *a1;
      for (uint64_t i = 1; i != v4; ++i)
      {
        uint64_t v15 = *(void *)(v13 + 8 * i);
        uint64_t v16 = v12;
        do
        {
          uint64_t v17 = (void *)(v13 + 8 * v16);
          uint64_t v18 = *v17;
          if (COERCE_FLOAT(*(void *)(v15 + 16)) >= COERCE_FLOAT(*(void *)(*v17 + 16))) {
            break;
          }
          if (!v13) {
            goto LABEL_138;
          }
          *uint64_t v17 = v15;
          v17[1] = v18;
          --v16;
        }
        while (v16 != -1);
        ++v12;
      }
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_143;
  }
  uint64_t v9 = result;
  unint64_t v97 = a1;
  if (v4 < 2)
  {
    uint64_t v19 = (char *)MEMORY[0x263F8EE78];
    uint64_t v103 = MEMORY[0x263F8EE78];
    unsigned int __dst = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v22 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_100:
      unint64_t v89 = v19;
      if (v22 >= 2)
      {
        uint64_t v90 = *v97;
        do
        {
          unint64_t v91 = v22 - 2;
          if (v22 < 2) {
            goto LABEL_129;
          }
          if (!v90) {
            goto LABEL_142;
          }
          uint64_t v92 = v89;
          uint64_t v93 = *(void *)&v89[16 * v91 + 32];
          uint64_t v94 = *(void *)&v89[16 * v22 + 24];
          sub_2346C7800((char *)(v90 + 8 * v93), (char *)(v90 + 8 * *(void *)&v89[16 * v22 + 16]), v90 + 8 * v94, __dst, v6, v7);
          if (v2) {
            break;
          }
          if (v94 < v93) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v92 = sub_234748228((uint64_t)v92);
          }
          if (v91 >= *((void *)v92 + 2)) {
            goto LABEL_131;
          }
          int64_t v95 = &v92[16 * v91 + 32];
          *(void *)int64_t v95 = v93;
          *((void *)v95 + 1) = v94;
          unint64_t v96 = *((void *)v92 + 2);
          if (v22 > v96) {
            goto LABEL_132;
          }
          memmove(&v92[16 * v22 + 16], &v92[16 * v22 + 32], 16 * (v96 - v22));
          unint64_t v89 = v92;
          *((void *)v92 + 2) = v96 - 1;
          unint64_t v22 = v96 - 1;
        }
        while (v96 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_2347EE7F0();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v10 = v8 >> 1;
    type metadata accessor for OpeningElement();
    uint64_t v11 = sub_2347EE810();
    *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
    unsigned int __dst = (char *)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v103 = v11;
  }
  uint64_t v20 = 0;
  uint64_t v21 = *a1;
  uint64_t v98 = *a1 - 8;
  uint64_t v19 = (char *)MEMORY[0x263F8EE78];
  uint64_t v99 = v9;
  uint64_t v100 = v4;
  uint64_t v101 = *a1;
  while (1)
  {
    uint64_t v23 = v20++;
    if (v20 < v4)
    {
      float32x2_t v24 = *(float32x2_t *)(*(void *)(v21 + 8 * v20) + 16);
      int8x8_t v25 = (int8x8_t)vcgt_f32(*(float32x2_t *)(*(void *)(v21 + 8 * v23) + 16), v24);
      uint64_t v20 = v23 + 2;
      if (v23 + 2 < v4)
      {
        while (1)
        {
          float32x2_t v26 = v24;
          float32x2_t v24 = *(float32x2_t *)(*(void *)(v21 + 8 * v20) + 16);
          if ((vmvn_s8(veor_s8((int8x8_t)vcgt_f32(v26, v24), v25)).u8[0] & 1) == 0) {
            break;
          }
          if (v4 == ++v20)
          {
            uint64_t v20 = v4;
            break;
          }
        }
      }
      if (v25.i8[0])
      {
        if (v20 < v23) {
          goto LABEL_135;
        }
        if (v23 < v20)
        {
          uint64_t v27 = (uint64_t *)(v98 + 8 * v20);
          uint64_t v28 = v20;
          uint64_t v29 = v23;
          int v30 = (uint64_t *)(v21 + 8 * v23);
          do
          {
            if (v29 != --v28)
            {
              if (!v21) {
                goto LABEL_141;
              }
              uint64_t v31 = *v30;
              *int v30 = *v27;
              *uint64_t v27 = v31;
            }
            ++v29;
            --v27;
            ++v30;
          }
          while (v29 < v28);
        }
      }
    }
    if (v20 >= v4) {
      goto LABEL_50;
    }
    if (__OFSUB__(v20, v23)) {
      goto LABEL_133;
    }
    if (v20 - v23 >= v9) {
      goto LABEL_50;
    }
    uint64_t v32 = v23 + v9;
    if (__OFADD__(v23, v9)) {
      goto LABEL_136;
    }
    if (v32 >= v4) {
      uint64_t v32 = v4;
    }
    if (v32 < v23) {
      break;
    }
    if (v20 != v32)
    {
      unint64_t v33 = (void *)(v98 + 8 * v20);
      do
      {
        uint64_t v34 = *(void *)(v21 + 8 * v20);
        uint64_t v35 = v23;
        uint64_t v36 = v33;
        do
        {
          uint64_t v37 = *v36;
          if (COERCE_FLOAT(*(void *)(v34 + 16)) >= COERCE_FLOAT(*(void *)(*v36 + 16))) {
            break;
          }
          if (!v21) {
            goto LABEL_139;
          }
          *uint64_t v36 = v34;
          v36[1] = v37;
          --v36;
          ++v35;
        }
        while (v20 != v35);
        ++v20;
        ++v33;
      }
      while (v20 != v32);
      uint64_t v20 = v32;
    }
LABEL_50:
    if (v20 < v23) {
      goto LABEL_128;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = sub_234747DB8(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v39 = *((void *)v19 + 2);
    unint64_t v38 = *((void *)v19 + 3);
    unint64_t v22 = v39 + 1;
    uint64_t v21 = v101;
    if (v39 >= v38 >> 1)
    {
      unint64_t v88 = sub_234747DB8((char *)(v38 > 1), v39 + 1, 1, v19);
      uint64_t v21 = v101;
      uint64_t v19 = v88;
    }
    *((void *)v19 + 2) = v22;
    uint64_t v40 = v19 + 32;
    uint64_t v41 = &v19[16 * v39 + 32];
    *(void *)uint64_t v41 = v23;
    *((void *)v41 + 1) = v20;
    if (v39)
    {
      while (1)
      {
        unint64_t v42 = v22 - 1;
        if (v22 >= 4)
        {
          uint64_t v47 = &v40[16 * v22];
          uint64_t v48 = *((void *)v47 - 8);
          uint64_t v49 = *((void *)v47 - 7);
          BOOL v53 = __OFSUB__(v49, v48);
          uint64_t v50 = v49 - v48;
          if (v53) {
            goto LABEL_117;
          }
          uint64_t v52 = *((void *)v47 - 6);
          uint64_t v51 = *((void *)v47 - 5);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v45 = v51 - v52;
          char v46 = v53;
          if (v53) {
            goto LABEL_118;
          }
          unint64_t v54 = v22 - 2;
          double v55 = &v40[16 * v22 - 32];
          uint64_t v57 = *(void *)v55;
          uint64_t v56 = *((void *)v55 + 1);
          BOOL v53 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v53) {
            goto LABEL_120;
          }
          BOOL v53 = __OFADD__(v45, v58);
          uint64_t v59 = v45 + v58;
          if (v53) {
            goto LABEL_123;
          }
          if (v59 >= v50)
          {
            __n128 v77 = &v40[16 * v42];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            BOOL v53 = __OFSUB__(v78, v79);
            uint64_t v80 = v78 - v79;
            if (v53) {
              goto LABEL_127;
            }
            BOOL v70 = v45 < v80;
            goto LABEL_87;
          }
        }
        else
        {
          if (v22 != 3)
          {
            uint64_t v71 = *((void *)v19 + 4);
            uint64_t v72 = *((void *)v19 + 5);
            BOOL v53 = __OFSUB__(v72, v71);
            uint64_t v64 = v72 - v71;
            char v65 = v53;
            goto LABEL_81;
          }
          uint64_t v44 = *((void *)v19 + 4);
          uint64_t v43 = *((void *)v19 + 5);
          BOOL v53 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          char v46 = v53;
        }
        if (v46) {
          goto LABEL_119;
        }
        unint64_t v54 = v22 - 2;
        uint64_t v60 = &v40[16 * v22 - 32];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v63 = __OFSUB__(v61, v62);
        uint64_t v64 = v61 - v62;
        char v65 = v63;
        if (v63) {
          goto LABEL_122;
        }
        int v66 = &v40[16 * v42];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v53 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v53) {
          goto LABEL_125;
        }
        if (__OFADD__(v64, v69)) {
          goto LABEL_126;
        }
        if (v64 + v69 >= v45)
        {
          BOOL v70 = v45 < v69;
LABEL_87:
          if (v70) {
            unint64_t v42 = v54;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v65) {
          goto LABEL_121;
        }
        uint64_t v73 = &v40[16 * v42];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v53 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v53) {
          goto LABEL_124;
        }
        if (v76 < v64) {
          goto LABEL_20;
        }
LABEL_89:
        unint64_t v81 = v42 - 1;
        if (v42 - 1 >= v22)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v21) {
          goto LABEL_140;
        }
        uint64_t v82 = v19;
        uint64_t v83 = &v40[16 * v81];
        uint64_t v84 = *(void *)v83;
        unint64_t v85 = &v40[16 * v42];
        uint64_t v86 = *((void *)v85 + 1);
        sub_2346C7800((char *)(v21 + 8 * *(void *)v83), (char *)(v21 + 8 * *(void *)v85), v21 + 8 * v86, __dst, v6, v7);
        if (v1) {
          goto LABEL_97;
        }
        if (v86 < v84) {
          goto LABEL_114;
        }
        if (v42 > *((void *)v82 + 2)) {
          goto LABEL_115;
        }
        *(void *)uint64_t v83 = v84;
        *(void *)&v40[16 * v81 + 8] = v86;
        unint64_t v87 = *((void *)v82 + 2);
        if (v42 >= v87) {
          goto LABEL_116;
        }
        uint64_t v19 = v82;
        unint64_t v22 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((void *)v82 + 2) = v87 - 1;
        uint64_t v21 = v101;
        if (v87 <= 2) {
          goto LABEL_20;
        }
      }
    }
    unint64_t v22 = 1;
LABEL_20:
    uint64_t v9 = v99;
    uint64_t v4 = v100;
    if (v20 >= v100)
    {
      uint64_t v2 = v1;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  uint64_t result = sub_2347EEE90();
  __break(1u);
  return result;
}

uint64_t sub_2346C7800(char *__src, char *a2, unint64_t a3, char *__dst, __n128 a5, __n128 a6)
{
  __n128 v6 = __dst;
  uint64_t v8 = a2;
  uint64_t v9 = __src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 3;
  float32x2_t v26 = __src;
  int8x8_t v25 = __dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst) {
        memmove(__dst, a2, 8 * v15);
      }
      uint64_t v18 = &v6[8 * v15];
      float32x2_t v24 = v18;
      float32x2_t v26 = v8;
      if (v9 < v8 && v13 >= 8)
      {
        uint64_t v19 = (char *)(a3 - 8);
        while (1)
        {
          uint64_t v20 = v19 + 8;
          uint64_t v21 = v8 - 8;
          uint64_t v22 = *((void *)v8 - 1);
          a5.n128_u64[0] = *(void *)(*((void *)v18 - 1) + 16);
          a6.n128_u64[0] = *(void *)(v22 + 16);
          if (a5.n128_f32[0] >= a6.n128_f32[0])
          {
            float32x2_t v24 = v18 - 8;
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              *(void *)uint64_t v19 = *((void *)v18 - 1);
            }
            v18 -= 8;
            if (v8 <= v9) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v20 != v8 || v19 >= v8) {
              *(void *)uint64_t v19 = v22;
            }
            float32x2_t v26 = v8 - 8;
            v8 -= 8;
            if (v21 <= v9) {
              goto LABEL_42;
            }
          }
          v19 -= 8;
          if (v18 <= v6) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst) {
      memmove(__dst, __src, 8 * v12);
    }
    uint64_t v16 = &v6[8 * v12];
    float32x2_t v24 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      do
      {
        a5.n128_u64[0] = *(void *)(*(void *)v8 + 16);
        a6.n128_u64[0] = *(void *)(*(void *)v6 + 16);
        if (a5.n128_f32[0] >= a6.n128_f32[0])
        {
          if (v9 != v6) {
            *(void *)uint64_t v9 = *(void *)v6;
          }
          v6 += 8;
          int8x8_t v25 = v6;
          uint64_t v17 = v8;
        }
        else
        {
          uint64_t v17 = v8 + 8;
          if (v9 < v8 || v9 >= v17 || v9 != v8) {
            *(void *)uint64_t v9 = *(void *)v8;
          }
        }
        v9 += 8;
        if (v6 >= v16) {
          break;
        }
        uint64_t v8 = v17;
      }
      while ((unint64_t)v17 < a3);
      float32x2_t v26 = v9;
    }
LABEL_42:
    sub_234747EB4(&v26, &v25, &v24, a5, a6);
    return 1;
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

void *sub_2346C7A80(float32x4_t a1, __n128 a2, double a3, __n128 a4)
{
  a4.n128_f32[0] = 0.5 * a1.f32[0];
  float v4 = vmuls_lane_f32(0.5, *(float32x2_t *)a1.f32, 1);
  float v5 = vmuls_lane_f32(0.5, a1, 2);
  *(float *)&unint64_t v6 = a2.n128_f32[0] - a4.n128_f32[0];
  long long v40 = COERCE_UNSIGNED_INT(a2.n128_f32[0] - a4.n128_f32[0]);
  *((float *)&v6 + 1) = a2.n128_f32[1] - v4;
  long long v44 = v6;
  float v7 = a2.n128_f32[2] - v5;
  long long v46 = COERCE_UNSIGNED_INT(a4.n128_f32[0] + a2.n128_f32[0]);
  float v8 = v4 + a2.n128_f32[1];
  float v39 = v5 + a2.n128_f32[2];
  a4.n128_f32[0] = a4.n128_f32[0] + a2.n128_f32[0];
  a2.n128_u32[1] = 0;
  a2.n128_f32[0] = a2.n128_f32[0] - a4.n128_f32[0];
  __n128 v9 = a2;
  v9.n128_u32[1] = HIDWORD(v6);
  a2.n128_f32[1] = v8;
  a4.n128_u64[0] = a4.n128_u32[0];
  unint64_t v48 = MEMORY[0x263F8EE78];
  __n128 v10 = a4;
  int v31 = HIDWORD(v6);
  float v33 = v8;
  v10.n128_f32[1] = v8;
  a4.n128_u32[1] = HIDWORD(v6);
  __n128 v28 = v10;
  __n128 v29 = v9;
  __n128 v35 = a2;
  float v37 = v7;
  __n128 v30 = a4;
  __n128 v11 = sub_2346F3C1C(v9, a2, v10, a4, (__n128)xmmword_2347F1FD0, v7);
  MEMORY[0x237DC6730](v11);
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  long long v12 = v46;
  *((float *)&v12 + 1) = v33;
  long long v42 = v12;
  long long v13 = v44;
  *((float *)&v13 + 2) = v37;
  long long v34 = v13;
  sub_2347EE820();
  sub_2347EE7F0();
  __n128 v14 = sub_2346F3C1C(v29, v30, v28, v35, (__n128)xmmword_2347F1FC0, v39);
  MEMORY[0x237DC6730](v14);
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  long long v15 = v42;
  *((float *)&v15 + 2) = v39;
  long long v36 = v15;
  sub_2347EE820();
  sub_2347EE7F0();
  long long v16 = v44;
  long long v17 = v46;
  *((float *)&v16 + 2) = v39;
  long long v45 = v16;
  DWORD1(v17) = v31;
  long long v18 = v17;
  *((float *)&v18 + 2) = v37;
  long long v32 = v18;
  *((float *)&v17 + 2) = v39;
  long long v47 = v17;
  type metadata accessor for RoomCaptureQuad();
  uint64_t v19 = (_OWORD *)swift_allocObject();
  v19[1] = v45;
  v19[2] = v34;
  void v19[3] = v32;
  v19[4] = v47;
  v19[5] = xmmword_2347F1FF0;
  MEMORY[0x237DC6730]();
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  sub_2347EE820();
  sub_2347EE7F0();
  long long v21 = v40;
  long long v20 = v42;
  *((float *)&v20 + 2) = v37;
  long long v43 = v20;
  *((float *)&v21 + 1) = v33;
  long long v22 = v21;
  *((float *)&v22 + 2) = v37;
  long long v38 = v22;
  *((float *)&v21 + 2) = v39;
  long long v41 = v21;
  uint64_t v23 = (_OWORD *)swift_allocObject();
  v23[1] = v36;
  void v23[2] = v43;
  v23[3] = v38;
  v23[4] = v41;
  v23[5] = xmmword_2347F2000;
  MEMORY[0x237DC6730]();
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  sub_2347EE820();
  sub_2347EE7F0();
  float32x2_t v24 = (_OWORD *)swift_allocObject();
  v24[1] = v41;
  _OWORD v24[2] = v38;
  v24[3] = v34;
  v24[4] = v45;
  v24[5] = xmmword_2347F2010;
  MEMORY[0x237DC6730]();
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  sub_2347EE820();
  sub_2347EE7F0();
  int8x8_t v25 = (_OWORD *)swift_allocObject();
  v25[1] = v47;
  v25[2] = v32;
  v25[3] = v43;
  v25[4] = v36;
  v25[5] = xmmword_2347F1FE0;
  MEMORY[0x237DC6730]();
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  sub_2347EE820();
  sub_2347EE7F0();
  float32x2_t v26 = sub_23474CE64(v48);
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_2346C7E94(uint64_t a1, float a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_23473D210(0, v3, 0);
    uint64_t result = v13;
    unint64_t v6 = (long long *)(a1 + 32);
    float32x2_t v7 = (float32x2_t)vdup_lane_s32((int32x2_t)COERCE_UNSIGNED_INT(a2 * 0.0), 0);
    do
    {
      long long v8 = *v6;
      uint64_t v14 = result;
      unint64_t v10 = *(void *)(result + 16);
      unint64_t v9 = *(void *)(result + 24);
      if (v10 >= v9 >> 1)
      {
        long long v12 = *v6;
        sub_23473D210(v9 > 1, v10 + 1, 1);
        long long v8 = v12;
        uint64_t result = v14;
      }
      *(float32x2_t *)&long long v11 = vadd_f32(v7, *(float32x2_t *)&v8);
      *((float *)&v11 + 2) = *((float *)&v8 + 2) + a2;
      HIDWORD(v11) = 0;
      *(void *)(result + 16) = v10 + 1;
      *(_OWORD *)(result + 16 * v10 + 32) = v11;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2346C7F8C(uint64_t a1, float a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_23473D210(0, v3, 0);
    uint64_t result = v13;
    unint64_t v6 = (long long *)(a1 + 32);
    float32x2_t v7 = (float32x2_t)vdup_lane_s32((int32x2_t)COERCE_UNSIGNED_INT(a2 * 0.0), 0);
    do
    {
      long long v8 = *v6;
      uint64_t v14 = result;
      unint64_t v10 = *(void *)(result + 16);
      unint64_t v9 = *(void *)(result + 24);
      if (v10 >= v9 >> 1)
      {
        long long v12 = *v6;
        sub_23473D210(v9 > 1, v10 + 1, 1);
        long long v8 = v12;
        uint64_t result = v14;
      }
      *(float32x2_t *)&long long v11 = vadd_f32(v7, *(float32x2_t *)&v8);
      *((float *)&v11 + 2) = *((float *)&v8 + 2) - a2;
      HIDWORD(v11) = 0;
      *(void *)(result + 16) = v10 + 1;
      *(_OWORD *)(result + 16 * v10 + 32) = v11;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2346C8084(uint64_t a1, float a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_23473D210(0, v3, 0);
    uint64_t result = v16;
    unint64_t v6 = (long long *)(a1 + 32);
    *(float *)v7.i32 = a2 * 0.0;
    *(float *)&long long v8 = a2 + 0.0;
    float32x2_t v9 = (float32x2_t)vdup_lane_s32(v7, 0);
    do
    {
      long long v10 = *v6;
      uint64_t v17 = result;
      unint64_t v12 = *(void *)(result + 16);
      unint64_t v11 = *(void *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        long long v14 = *v6;
        long long v15 = v8;
        sub_23473D210(v11 > 1, v12 + 1, 1);
        *(void *)&long long v10 = v14;
        long long v8 = v15;
        uint64_t result = v17;
      }
      *(float32x2_t *)&long long v13 = vadd_f32(v9, *(float32x2_t *)&v10);
      *((void *)&v13 + 1) = v8;
      *(void *)(result + 16) = v12 + 1;
      *(_OWORD *)(result + 16 * v12 + 32) = v13;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2346C8178(uint64_t a1, float a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_23473D210(0, v3, 0);
    uint64_t result = v16;
    unint64_t v6 = (long long *)(a1 + 32);
    *(float *)v7.i32 = a2 * 0.0;
    *(float *)&long long v8 = 0.0 - a2;
    float32x2_t v9 = (float32x2_t)vdup_lane_s32(v7, 0);
    do
    {
      long long v10 = *v6;
      uint64_t v17 = result;
      unint64_t v12 = *(void *)(result + 16);
      unint64_t v11 = *(void *)(result + 24);
      if (v12 >= v11 >> 1)
      {
        long long v14 = *v6;
        long long v15 = v8;
        sub_23473D210(v11 > 1, v12 + 1, 1);
        *(void *)&long long v10 = v14;
        long long v8 = v15;
        uint64_t result = v17;
      }
      *(float32x2_t *)&long long v13 = vadd_f32(v9, *(float32x2_t *)&v10);
      *((void *)&v13 + 1) = v8;
      *(void *)(result + 16) = v12 + 1;
      *(_OWORD *)(result + 16 * v12 + 32) = v13;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_2346C826C(void *a1, __n128 a2, __n128 a3, float a4, __n128 a5)
{
  uint64_t v6 = a1[2];
  if (v6)
  {
    long long v8 = sub_2346D2924(a1, a2, a3);
    unint64_t v159 = MEMORY[0x263F8EE78];
    uint64_t v10 = v8[2];
    unint64_t v11 = &unk_2347F1000;
    unint64_t v12 = &xmmword_2347F2000;
    long long v13 = &unk_2347F1000;
    if (v10)
    {
      float v112 = vmuls_lane_f32(0.5, (float32x4_t)a3, 2);
      long long v14 = (float32x2_t *)((char *)v8 + 52);
      long long v15 = xmmword_2347F1FE0;
      do
      {
        *(float *)&long long v15 = v14[-1].f32[1] * 0.5;
        float v16 = v14[-3].f32[1];
        float v116 = v16 - *(float *)&v15;
        *(float *)&unint64_t v23 = v16 - *(float *)&v15;
        *(float *)&long long v15 = v16 + *(float *)&v15;
        long long v122 = v15;
        LODWORD(v24) = v15;
        float32x2_t v17 = vmul_f32(*v14, (float32x2_t)0x3F0000003F000000);
        float32x2_t v18 = v14[-2];
        float32x2_t v19 = vsub_f32(v18, v17);
        long long v20 = v23;
        DWORD1(v20) = v19.i32[0];
        long long v147 = v20;
        DWORD2(v20) = v19.i32[1];
        long long v128 = v20;
        *(float32x2_t *)&long long v9 = vadd_f32(v18, v17);
        long long v21 = v24;
        DWORD1(v21) = v9;
        float v22 = v112;
        HIDWORD(v23) = v9;
        long long v137 = v23;
        long long v155 = v21;
        DWORD2(v21) = v19.i32[1];
        long long v130 = v21;
        float32x2_t v152 = v19;
        HIDWORD(v24) = v19.i32[0];
        long long v142 = v24;
        long long v132 = v9;
        if (fabsf(v19.f32[1] + v112) < a4)
        {
          long long v25 = v23;
          DWORD2(v25) = v19.i32[1];
          long long v100 = v25;
          long long v26 = v24;
          DWORD2(v26) = v19.i32[1];
          long long v105 = v26;
          type metadata accessor for RoomCaptureQuad();
          uint64_t v27 = (_OWORD *)swift_allocObject();
          v27[1] = v128;
          void v27[2] = v100;
          v27[3] = v130;
          v27[4] = v105;
          v27[5] = xmmword_2347F1FD0;
          MEMORY[0x237DC6730]();
          if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();
          float v22 = v112;
          long long v9 = v132;
        }
        long long v28 = v155;
        DWORD2(v28) = DWORD1(v9);
        long long v156 = v28;
        long long v29 = v147;
        DWORD2(v29) = DWORD1(v9);
        long long v148 = v29;
        if (vabds_f32(*((float *)&v9 + 1), v22) < a4)
        {
          long long v30 = v142;
          DWORD2(v30) = DWORD1(v9);
          long long v106 = v30;
          long long v31 = v137;
          DWORD2(v31) = DWORD1(v9);
          long long v101 = v31;
          type metadata accessor for RoomCaptureQuad();
          long long v32 = (_OWORD *)swift_allocObject();
          v32[1] = v148;
          v32[2] = v106;
          v32[3] = v156;
          v32[4] = v101;
          v32[5] = xmmword_2347F1FC0;
          MEMORY[0x237DC6730]();
          if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();
          long long v9 = v132;
        }
        float v33 = a3.n128_f32[1] * 0.5;
        if (fabsf(v152.f32[0] + (float)(a3.n128_f32[1] * 0.5)) < a4)
        {
          long long v34 = v142;
          long long v35 = v142;
          DWORD2(v35) = v152.i32[1];
          DWORD2(v34) = DWORD1(v9);
          long long v102 = v34;
          long long v107 = v35;
          type metadata accessor for RoomCaptureQuad();
          long long v36 = (_OWORD *)swift_allocObject();
          v36[1] = v148;
          v36[2] = v128;
          v36[3] = v107;
          v36[4] = v102;
          v36[5] = xmmword_2347F1FF0;
          MEMORY[0x237DC6730]();
          if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();
          float v33 = a3.n128_f32[1] * 0.5;
          long long v9 = v132;
        }
        if (vabds_f32(*(float *)&v9, v33) < a4)
        {
          long long v37 = v137;
          long long v38 = v137;
          DWORD2(v38) = v152.i32[1];
          DWORD2(v37) = DWORD1(v9);
          long long v103 = v37;
          long long v108 = v38;
          type metadata accessor for RoomCaptureQuad();
          float v39 = (_OWORD *)swift_allocObject();
          v39[1] = v156;
          v39[2] = v130;
          v39[3] = v108;
          v39[4] = v103;
          v39[5] = xmmword_2347F2000;
          MEMORY[0x237DC6730]();
          if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();
          long long v9 = v132;
        }
        float v40 = 0.5 * a3.n128_f32[0];
        if (fabsf(v116 + (float)(0.5 * a3.n128_f32[0])) < a4)
        {
          long long v41 = v137;
          long long v42 = v137;
          DWORD2(v42) = DWORD1(v9);
          long long v117 = v42;
          DWORD2(v41) = v152.i32[1];
          long long v138 = v41;
          type metadata accessor for RoomCaptureQuad();
          long long v43 = (_OWORD *)swift_allocObject();
          v43[1] = v117;
          v43[2] = v138;
          v43[3] = v128;
          v43[4] = v148;
          v43[5] = xmmword_2347F2010;
          MEMORY[0x237DC6730]();
          if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();
          float v40 = 0.5 * a3.n128_f32[0];
          long long v9 = v132;
        }
        long long v15 = v122;
        if (vabds_f32(*(float *)&v122, v40) < a4)
        {
          long long v44 = v142;
          long long v45 = v142;
          DWORD2(v45) = DWORD1(v9);
          long long v149 = v45;
          DWORD2(v44) = v152.i32[1];
          long long v143 = v44;
          type metadata accessor for RoomCaptureQuad();
          long long v46 = (_OWORD *)swift_allocObject();
          v46[1] = v149;
          double v46[2] = v143;
          void v46[3] = v130;
          v46[4] = v156;
          v46[5] = xmmword_2347F1FE0;
          MEMORY[0x237DC6730]();
          if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();
        }
        v14 += 4;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      unint64_t v11 = (_OWORD *)&unk_2347F1000;
      unint64_t v12 = &xmmword_2347F2000;
      long long v13 = (_OWORD *)&unk_2347F1000;
      float32x2_t v47 = (float32x2_t)a3.n128_u64[0];
      float v49 = a3.n128_f32[1] * 0.5;
      float v48 = v112;
      float v50 = 0.5 * a3.n128_f32[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      float32x2_t v47 = (float32x2_t)a3.n128_u64[0];
      float v50 = 0.5 * a3.n128_f32[0];
      float v49 = a3.n128_f32[1] * 0.5;
      float v48 = vmuls_lane_f32(0.5, (float32x4_t)a3, 2);
    }
    *(float32x2_t *)v52.f32 = vmul_f32(v47, (float32x2_t)0xBF000000BF000000);
    float v53 = (float)(a3.n128_f32[2] * -0.5) + a4;
    float v54 = v48 - a4;
    float v55 = v52.f32[1] + a4;
    float v56 = v49 - a4;
    float v57 = v52.f32[0] + a4;
    float v58 = v50 - a4;
    v52.i64[1] = COERCE_UNSIGNED_INT(a3.n128_f32[2] * -0.5);
    v59.i64[0] = __PAIR64__(LODWORD(v49), LODWORD(v50));
    v59.i64[1] = LODWORD(v48);
    float32x4_t v129 = v59;
    float32x4_t v131 = v52;
    swift_bridgeObjectRetain();
    uint64_t v62 = (float *)(a1 + 7);
    long long v104 = v11[253];
    long long v99 = *v12;
    long long v98 = v13[255];
    while (1)
    {
      float v63 = *(v62 - 2) * 0.5;
      float v64 = *(v62 - 1) * 0.5;
      float v65 = *v62 * 0.5;
      float v66 = *(v62 - 6);
      float v67 = *(v62 - 5);
      float32_t v68 = v66 - v63;
      *(float *)&long long v61 = v67 - v64;
      float v69 = *(v62 - 4);
      *(float *)&unsigned int v70 = v69 - v65;
      float32_t v71 = v66 + v63;
      *(float *)&long long v60 = v69 + v65;
      float v144 = v68;
      v72.f32[0] = v68;
      v72.f32[1] = v67 - v64;
      v72.i64[1] = v70;
      float v150 = v71;
      float32x4_t v153 = vmaxnmq_f32(v72, v131);
      v72.f32[0] = v71;
      float v139 = v67 + v64;
      v72.f32[1] = v67 + v64;
      v72.i64[1] = v60;
      float32x4_t v157 = vminnmq_f32(v72, v129);
      long long v133 = v61;
      if (v53 < *(float *)&v70)
      {
        long long v123 = v60;
        float32x4_t v73 = v153;
        v73.i32[3] = 0;
        float32x4_t v74 = v73;
        float32x4_t v75 = v73;
        float32x4_t v110 = v73;
        v74.i32[1] = v157.i32[1];
        v74.i32[2] = v153.i32[2];
        float32x4_t v118 = v74;
        v74.i64[0] = v157.i64[0];
        v74.i64[1] = v153.u32[2];
        float32x4_t v113 = v74;
        v75.i32[0] = v157.i32[0];
        float32x4_t v109 = v75;
        type metadata accessor for RoomCaptureQuad();
        uint64_t v76 = (_OWORD *)swift_allocObject();
        v76[1] = v110;
        v76[2] = v109;
        v76[3] = v113;
        v76[4] = v118;
        v76[5] = xmmword_2347F1FC0;
        MEMORY[0x237DC6730]();
        if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
        long long v61 = v133;
        long long v60 = v123;
        if (*(float *)&v123 < v54)
        {
LABEL_44:
          *(void *)&long long v77 = v153.i64[0];
          *((void *)&v77 + 1) = v157.u32[2];
          long long v124 = v77;
          float32x4_t v78 = v157;
          v78.i32[3] = 0;
          float32x4_t v79 = v78;
          v79.i32[1] = v153.i32[1];
          v79.i32[2] = v157.i32[2];
          float32x4_t v114 = v78;
          float32x4_t v119 = v79;
          v78.i32[0] = v153.i32[0];
          float32x4_t v111 = v78;
          type metadata accessor for RoomCaptureQuad();
          uint64_t v80 = (_OWORD *)swift_allocObject();
          v80[1] = v124;
          v80[2] = v111;
          v80[3] = v114;
          v80[4] = v119;
          v80[5] = v104;
          MEMORY[0x237DC6730]();
          if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();
          long long v61 = v133;
          if (v55 >= *(float *)&v133) {
            goto LABEL_50;
          }
LABEL_47:
          float32x4_t v81 = v153;
          v81.i32[3] = 0;
          float32x4_t v134 = v81;
          float32x4_t v82 = v81;
          v82.i32[2] = v157.i32[2];
          float32x4_t v125 = v82;
          v82.i64[0] = __PAIR64__(v153.u32[1], v157.u32[0]);
          float32x4_t v83 = v153;
          v83.i32[0] = v157.i32[0];
          v83.i32[3] = 0;
          v82.i64[1] = v157.u32[2];
          float32x4_t v115 = v82;
          float32x4_t v120 = v83;
          type metadata accessor for RoomCaptureQuad();
          uint64_t v84 = (_OWORD *)swift_allocObject();
          v84[1] = v125;
          v84[2] = v115;
          v84[3] = v120;
          v84[4] = v134;
          v84[5] = v99;
          MEMORY[0x237DC6730]();
          if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_2347EE800();
          }
          sub_2347EE820();
          sub_2347EE7F0();
          goto LABEL_50;
        }
      }
      else if (*(float *)&v60 < v54)
      {
        goto LABEL_44;
      }
      if (v55 < *(float *)&v61) {
        goto LABEL_47;
      }
LABEL_50:
      if (v139 < v56)
      {
        float32x4_t v85 = v157;
        v85.i32[3] = 0;
        float32x4_t v135 = v85;
        v85.i32[2] = v153.i32[2];
        float32x4_t v140 = v85;
        v85.i64[0] = __PAIR64__(v157.u32[1], v153.u32[0]);
        float32x4_t v86 = v157;
        v86.i32[0] = v153.i32[0];
        v86.i32[3] = 0;
        v85.i64[1] = v153.u32[2];
        float32x4_t v121 = v85;
        float32x4_t v126 = v86;
        type metadata accessor for RoomCaptureQuad();
        unint64_t v87 = (_OWORD *)swift_allocObject();
        v87[1] = v135;
        double v87[2] = v126;
        v87[3] = v121;
        v87[4] = v140;
        v87[5] = v98;
        MEMORY[0x237DC6730]();
        if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
      }
      if (v57 < v144)
      {
        float32x4_t v88 = v153;
        *(void *)&long long v89 = __PAIR64__(v157.u32[1], v153.u32[0]);
        float32x4_t v90 = v157;
        v90.i32[0] = v153.i32[0];
        v90.i32[3] = 0;
        *((void *)&v89 + 1) = v153.u32[2];
        long long v141 = v89;
        float32x4_t v145 = v90;
        v88.i32[3] = 0;
        float32x4_t v136 = v88;
        v88.i32[2] = v157.i32[2];
        float32x4_t v127 = v88;
        type metadata accessor for RoomCaptureQuad();
        unint64_t v91 = (_OWORD *)swift_allocObject();
        v91[1] = v145;
        v91[2] = v127;
        v91[3] = v136;
        v91[4] = v141;
        v91[5] = xmmword_2347F1FE0;
        MEMORY[0x237DC6730]();
        if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
      }
      if (v150 < v58)
      {
        float32x4_t v92 = v157;
        *(void *)&long long v93 = __PAIR64__(v153.u32[1], v157.u32[0]);
        float32x4_t v94 = v153;
        v94.i32[0] = v157.i32[0];
        v94.i32[3] = 0;
        *((void *)&v93 + 1) = v157.u32[2];
        long long v146 = v93;
        float32x4_t v151 = v94;
        v92.i32[3] = 0;
        float32x4_t v158 = v92;
        v92.i32[2] = v153.i32[2];
        float32x4_t v154 = v92;
        type metadata accessor for RoomCaptureQuad();
        int64_t v95 = (_OWORD *)swift_allocObject();
        v95[1] = v146;
        v95[2] = v158;
        v95[3] = v154;
        v95[4] = v151;
        v95[5] = xmmword_2347F2010;
        MEMORY[0x237DC6730]();
        if (*(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v159 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
      }
      v62 += 8;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        unint64_t v96 = sub_23474CE64(v159);
        swift_bridgeObjectRelease();
        return v96;
      }
    }
  }

  return sub_2346C7A80((float32x4_t)a3, a2, a2.n128_f64[0], a5);
}

uint64_t sub_2346C8EA0(uint64_t a1, float32x2_t a2)
{
  float32x2_t v3 = vmul_f32(a2, (float32x2_t)0x3F0000003F000000);
  float32x2_t v4 = vmul_f32(vsub_f32(v3, v3), (float32x2_t)0x3F0000003F000000);
  float32x2_t v5 = vadd_f32(v3, v3);
  uint64_t v6 = sub_2346FAA44(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  unint64_t v9 = v8 + 1;
  if (v8 >= v7 >> 1) {
    goto LABEL_81;
  }
LABEL_2:
  uint64_t v6[2] = v9;
  uint64_t v10 = (float32x2_t *)&v6[2 * v8];
  v10[4] = v4;
  v10[5] = v5;
  float32x4_t v79 = v6;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      unint64_t v9 = a1;
    }
    else {
      unint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_2347EEEC0();
    if (!v8)
    {
LABEL_86:
      swift_bridgeObjectRelease();
      return (uint64_t)v6;
    }
  }
  else
  {
    unint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_86;
    }
  }
  uint64_t v11 = a1;
  a1 = 0;
  unint64_t v71 = v8;
  unint64_t v72 = v11 & 0xC000000000000001;
  uint64_t v69 = v11 & 0xFFFFFFFFFFFFFF8;
  uint64_t v70 = v11;
  uint64_t v68 = v11 + 32;
  while (1)
  {
    if (v72)
    {
      uint64_t v12 = MEMORY[0x237DC6CF0](a1, v70);
      BOOL v13 = __OFADD__(a1++, 1);
      if (v13) {
        goto LABEL_79;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(v69 + 16);
      if (a1 >= v7) {
        goto LABEL_80;
      }
      uint64_t v12 = *(void *)(v68 + 8 * a1);
      swift_retain();
      BOOL v13 = __OFADD__(a1++, 1);
      if (v13) {
        goto LABEL_79;
      }
    }
    uint64_t v6 = v79;
    float32x2_t v77 = *(float32x2_t *)(v12 + 16);
    float32x2_t v74 = *(float32x2_t *)(v12 + 32);
    uint64_t v14 = swift_bridgeObjectRetain();
    long long v15 = (float32x2_t *)sub_234753EEC(v14);
    unint64_t v9 = (unint64_t)v15[2];
    swift_bridgeObjectRelease();
    if (v9 >= 2)
    {
      unint64_t v8 = 0;
      uint64_t v6 = (void *)(v9 >> 1);
      unint64_t v59 = v9 - 1;
      uint64_t v60 = 24 * v9 + 16;
      uint64_t v61 = 6;
      do
      {
        if (v8 != v59)
        {
          unint64_t v7 = (unint64_t)v15[2];
          if (v8 >= v7)
          {
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
LABEL_81:
            uint64_t v6 = sub_2346FAA44((void *)(v7 > 1), v9, 1, v6);
            goto LABEL_2;
          }
          if (v59 >= v7) {
            goto LABEL_77;
          }
          float32x2_t v64 = v15[v61 - 2];
          float32x2_t v4 = v15[v61 - 1];
          float32x2_t v5 = v15[v61];
          unint64_t v9 = *(unint64_t *)((char *)&v15[-1] + v60);
          float32x2_t v65 = *(float32x2_t *)((char *)v15 + v60);
          float32x2_t v66 = *(float32x2_t *)((char *)v15 + v60 + 8);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v15 = (float32x2_t *)sub_23473D020(v15);
          }
          uint64_t v62 = &v15[v61];
          v62[-2] = (float32x2_t)v9;
          v62[-1] = v65;
          *uint64_t v62 = v66;
          float v63 = (float32x2_t *)((char *)v15 + v60);
          v63[-1] = v64;
          *float v63 = v4;
          v63[1] = v5;
        }
        ++v8;
        v61 += 3;
        --v59;
        v60 -= 24;
      }
      while (v6 != (void *)v8);
    }
    unint64_t v8 = (unint64_t)v15[2];
    if (v8) {
      break;
    }
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v8 = v71;
    if (a1 == v71)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v79;
    }
  }
  float v16 = 0.5 * vadd_f32(v77, v74).f32[0];
  float v17 = (float)(v77.f32[1] + v74.f32[1]) * 0.5;
  float v18 = vsub_f32(v74, v77).f32[0] * 0.5;
  v5.f32[0] = v16 + v18;
  float v19 = v16 - v18;
  float v20 = (float)(v74.f32[1] - v77.f32[1]) * 0.5;
  float v21 = v17 + v20;
  float v22 = v17 - v20;
  unint64_t v23 = v15 + 6;
  while (1)
  {
    float32x2_t v24 = v23[-1];
    float v25 = 0.5 * COERCE_FLOAT(*v23);
    v4.f32[0] = v24.f32[0] - v25;
    float v26 = v24.f32[0] + v25;
    BOOL v27 = (float)(v24.f32[0] - v25) < v5.f32[0] && v19 < v26;
    float v28 = vmuls_lane_f32(0.5, *v23, 1);
    float v29 = v24.f32[1] - v28;
    BOOL v30 = v27 && v29 < v21;
    float v31 = v24.f32[1] + v28;
    if (!v30 || v22 >= v31) {
      goto LABEL_25;
    }
    unint64_t v33 = (unint64_t)v23[-2];
    float v78 = v31 + v29;
    long long v34 = (void *)MEMORY[0x263F8EE78];
    if (v4.f32[0] < v19)
    {
      long long v34 = sub_2346FAA44(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v36 = v34[2];
      unint64_t v35 = v34[3];
      if (v36 >= v35 >> 1) {
        long long v34 = sub_2346FAA44((void *)(v35 > 1), v36 + 1, 1, v34);
      }
      *(float *)&uint64_t v37 = (float)(v19 + v4.f32[0]) * 0.5;
      *((float *)&v37 + 1) = v78 * 0.5;
      *(float *)&uint64_t v38 = v19 - v4.f32[0];
      *((float *)&v38 + 1) = v31 - v29;
      v34[2] = v36 + 1;
      float v39 = &v34[2 * v36];
      v39[4] = v37;
      v39[5] = v38;
      if (v29 >= v22)
      {
LABEL_29:
        if (v21 >= v31) {
          goto LABEL_30;
        }
        goto LABEL_46;
      }
    }
    else if (v29 >= v22)
    {
      goto LABEL_29;
    }
    if (v19 > v4.f32[0]) {
      float v40 = v19;
    }
    else {
      float v40 = v4.f32[0];
    }
    if (v26 >= v5.f32[0]) {
      float v41 = v5.f32[0];
    }
    else {
      float v41 = v26;
    }
    float v73 = v41;
    float v75 = v40;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v34 = sub_2346FAA44(0, v34[2] + 1, 1, v34);
    }
    unint64_t v43 = v34[2];
    unint64_t v42 = v34[3];
    if (v43 >= v42 >> 1) {
      long long v34 = sub_2346FAA44((void *)(v42 > 1), v43 + 1, 1, v34);
    }
    *(float *)&uint64_t v44 = (float)(v75 + v73) * 0.5;
    *((float *)&v44 + 1) = (float)(v22 + v29) * 0.5;
    *(float *)&uint64_t v45 = v73 - v75;
    *((float *)&v45 + 1) = v22 - v29;
    v34[2] = v43 + 1;
    long long v46 = &v34[2 * v43];
    v46[4] = v44;
    v46[5] = v45;
    if (v21 >= v31)
    {
LABEL_30:
      if (v5.f32[0] >= v26) {
        goto LABEL_62;
      }
LABEL_57:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v34 = sub_2346FAA44(0, v34[2] + 1, 1, v34);
      }
      unint64_t v54 = v34[2];
      unint64_t v53 = v34[3];
      if (v54 >= v53 >> 1) {
        long long v34 = sub_2346FAA44((void *)(v53 > 1), v54 + 1, 1, v34);
      }
      *(float *)&uint64_t v55 = (float)(v5.f32[0] + v26) * 0.5;
      *((float *)&v55 + 1) = v78 * 0.5;
      *(float *)&uint64_t v56 = v26 - v5.f32[0];
      *((float *)&v56 + 1) = v31 - v29;
      v34[2] = v54 + 1;
      float v57 = &v34[2 * v54];
      v57[4] = v55;
      v57[5] = v56;
      goto LABEL_62;
    }
LABEL_46:
    if (v19 > v4.f32[0]) {
      float v47 = v19;
    }
    else {
      float v47 = v4.f32[0];
    }
    float v76 = v47;
    if (v26 >= v5.f32[0]) {
      v4.f32[0] = v5.f32[0];
    }
    else {
      v4.f32[0] = v26;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v34 = sub_2346FAA44(0, v34[2] + 1, 1, v34);
    }
    unint64_t v49 = v34[2];
    unint64_t v48 = v34[3];
    if (v49 >= v48 >> 1) {
      long long v34 = sub_2346FAA44((void *)(v48 > 1), v49 + 1, 1, v34);
    }
    *(float *)&uint64_t v50 = (float)(v76 + v4.f32[0]) * 0.5;
    *((float *)&v50 + 1) = (float)(v21 + v31) * 0.5;
    *(float *)&uint64_t v51 = v4.f32[0] - v76;
    *((float *)&v51 + 1) = v31 - v21;
    v34[2] = v49 + 1;
    float32x4_t v52 = &v34[2 * v49];
    v52[4] = v50;
    v52[5] = v51;
    if (v5.f32[0] < v26) {
      goto LABEL_57;
    }
LABEL_62:
    uint64_t v6 = v79;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = sub_23473D00C(v6);
    }
    unint64_t v7 = v6[2];
    if (v33 >= v7) {
      goto LABEL_78;
    }
    unint64_t v9 = v7 - 1;
    uint64_t v58 = v7 - 1 - v33;
    if (v58 < 0) {
      break;
    }
    memmove(&v6[2 * v33 + 4], &v6[2 * v33 + 6], 16 * v58);
    uint64_t v6[2] = v9;
    float32x4_t v79 = v6;
    uint64_t v6 = &v79;
    sub_23478EC38(v33, v33, (uint64_t)v34);
    swift_bridgeObjectRelease();
LABEL_25:
    v23 += 3;
    if (!--v8) {
      goto LABEL_5;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346C953C(uint64_t a1, float32x2_t a2, float a3)
{
  uint64_t v3 = sub_2346C8EA0(a1, a2);
  uint64_t v21 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    type metadata accessor for RoomCaptureQuad();
    float32x2_t v5 = (float32x2_t *)(v3 + 40);
    do
    {
      float32x2_t v6 = v5[-1];
      float v7 = 0.5 * COERCE_FLOAT(*v5);
      float v8 = vmuls_lane_f32(0.5, *v5, 1);
      float v9 = v6.f32[1] - v8;
      float v10 = v6.f32[1] + v8;
      long long v11 = COERCE_UNSIGNED_INT(v6.f32[0] - v7);
      long long v12 = v11;
      *((float *)&v11 + 1) = v9;
      *((float *)&v11 + 2) = a3;
      long long v20 = v11;
      *(float *)&long long v11 = v6.f32[0] + v7;
      long long v13 = COERCE_UNSIGNED_INT(v6.f32[0] + v7);
      *((float *)&v13 + 1) = v9;
      *((float *)&v13 + 2) = a3;
      *((float *)&v11 + 1) = v10;
      *((void *)&v11 + 1) = LODWORD(a3);
      long long v18 = v11;
      long long v19 = v13;
      *((float *)&v12 + 1) = v10;
      *((float *)&v12 + 2) = a3;
      long long v17 = v12;
      uint64_t v14 = (_OWORD *)swift_allocObject();
      v14[1] = v20;
      void v14[2] = v19;
      v14[3] = v18;
      v14[4] = v17;
      v14[5] = xmmword_2347F1FC0;
      MEMORY[0x237DC6730]();
      if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      sub_2347EE820();
      sub_2347EE7F0();
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
}

void sub_2346C96D4(uint64_t a1, void **a2, uint64_t a3, float a4, float a5, float a6, float32x2_t a7, float a8, float a9, float a10)
{
  __float2 v18 = __sincosf_stret(a4);
  v17.f32[0] = v18.__cosval;
  long long v19 = *(void **)a1;
  unint64_t v20 = *(void *)(*(void *)a1 + 16);
  if (HIDWORD(v20))
  {
    sub_2347EEE90();
    __break(1u);
    return;
  }
  v17.i32[1] = LODWORD(v18.__sinval);
  v21.i64[1] = v88;
  *(float32x2_t *)v21.i8 = vadd_f32(vmul_n_f32(v17, a8), a7);
  LODWORD(v22) = v21.i32[0];
  int32x4_t v81 = v21;
  long long v82 = v21.u32[0];
  *((float *)&v22 + 1) = a9;
  long long v79 = v22;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v19 = sub_2346FA354(0, v20 + 1, 1, v19);
  }
  long long v23 = v82;
  *((float *)&v23 + 1) = a10;
  long long v25 = v79;
  int32x4_t v24 = v81;
  DWORD2(v25) = v81.i32[1];
  unint64_t v27 = v19[2];
  unint64_t v26 = v19[3];
  int64_t v28 = v26 >> 1;
  unint64_t v29 = v27 + 1;
  if (v26 >> 1 <= v27)
  {
    long long v84 = v23;
    long long v80 = v25;
    uint64_t v70 = sub_2346FA354((void *)(v26 > 1), v27 + 1, 1, v19);
    long long v25 = v80;
    int32x4_t v24 = v81;
    long long v23 = v84;
    long long v19 = v70;
    unint64_t v26 = v70[3];
    int64_t v28 = v26 >> 1;
  }
  DWORD2(v23) = v24.i32[1];
  v19[2] = v29;
  *(_OWORD *)&v19[2 * v27 + 4] = v25;
  if (v28 < (uint64_t)(v27 + 2))
  {
    long long v85 = v23;
    unint64_t v71 = sub_2346FA354((void *)(v26 > 1), v27 + 2, 1, v19);
    int32x4_t v24 = v81;
    long long v23 = v85;
    long long v19 = v71;
  }
  v19[2] = v27 + 2;
  *(_OWORD *)&v19[2 * v29 + 4] = v23;
  *(float32x2_t *)v24.i8 = vsub_f32(*(float32x2_t *)v24.i8, a7);
  float32x2_t v30 = vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8);
  *(void *)a1 = v19;
  v30.i32[0] = vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1)).u32[0];
  float32x2_t v31 = vrsqrte_f32((float32x2_t)v30.u32[0]);
  float32x2_t v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v31, v31)));
  *(float32x2_t *)v24.i8 = vsub_f32(0, vmul_n_f32(*(float32x2_t *)v24.i8, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v32, v32))).f32[0]));
  int32x4_t v83 = vrev64q_s32(vzip1q_s32(v24, v24));
  unint64_t v33 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v33 = sub_2346FA354(0, v33[2] + 1, 1, v33);
  }
  int32x4_t v34 = vtrn2q_s32(v83, (int32x4_t)0);
  unint64_t v36 = v33[2];
  unint64_t v35 = v33[3];
  int64_t v37 = v35 >> 1;
  uint64_t v38 = (char *)(v36 + 1);
  if (v35 >> 1 <= v36)
  {
    int32x4_t v83 = v34;
    unint64_t v72 = sub_2346FA354((void *)(v35 > 1), v36 + 1, 1, v33);
    int32x4_t v34 = v83;
    unint64_t v33 = v72;
    unint64_t v35 = v72[3];
    int64_t v37 = v35 >> 1;
  }
  v33[2] = v38;
  *(int32x4_t *)&v33[2 * v36 + 4] = v34;
  int64_t v39 = v36 + 2;
  if (v37 < (uint64_t)(v36 + 2))
  {
    int32x4_t v83 = v34;
    float v73 = sub_2346FA354((void *)(v35 > 1), v36 + 2, 1, v33);
    int32x4_t v34 = v83;
    unint64_t v33 = v73;
  }
  v33[2] = v39;
  unint64_t v40 = (unint64_t)&v33[2 * (void)v38];
  *(int32x4_t *)(v40 + 32) = v34;
  *a2 = v33;
  int v41 = v20 + 3;
  if (v20 >= 0xFFFFFFFD)
  {
    __break(1u);
  }
  else
  {
    uint64_t v38 = *(char **)a3;
    int64_t v10 = *(void *)(*(void *)a3 + 16);
    int64_t v39 = v10 + 6;
    if (!__OFADD__(v10, 6))
    {
      uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      float v78 = a2;
      if (!isUniquelyReferenced_nonNull_native
        || (unint64_t v40 = *((void *)v38 + 3), v43 = v40 >> 1, (uint64_t)(v40 >> 1) < v39))
      {
        if (v10 <= v39) {
          int64_t v44 = v10 + 6;
        }
        else {
          int64_t v44 = v10;
        }
        uint64_t v38 = sub_2346FA360(isUniquelyReferenced_nonNull_native, v44, 1, v38);
        unint64_t v40 = *((void *)v38 + 3);
        unint64_t v43 = v40 >> 1;
      }
      v83.i64[0] = a1;
      LODWORD(a2) = v20 + 2;
      int64_t v10 = *((void *)v38 + 2);
      int64_t v39 = v10 + 1;
      a1 = a3;
      if (v43 > v10) {
        goto LABEL_23;
      }
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_46:
  uint64_t v38 = sub_2346FA360((char *)(v40 > 1), v39, 1, v38);
  unint64_t v40 = *((void *)v38 + 3);
  unint64_t v43 = v40 >> 1;
LABEL_23:
  *((void *)v38 + 2) = v39;
  *(_DWORD *)&v38[4 * v10 + 32] = v20;
  int64_t v45 = v10 + 2;
  if ((uint64_t)v43 < v10 + 2) {
    uint64_t v38 = sub_2346FA360((char *)(v40 > 1), v10 + 2, 1, v38);
  }
  *((void *)v38 + 2) = v45;
  *(_DWORD *)&v38[4 * v39 + 32] = a2;
  unint64_t v46 = *((void *)v38 + 3);
  int64_t v47 = v10 + 3;
  if (v10 + 3 > (uint64_t)(v46 >> 1)) {
    uint64_t v38 = sub_2346FA360((char *)(v46 > 1), v10 + 3, 1, v38);
  }
  *((void *)v38 + 2) = v47;
  *(_DWORD *)&v38[4 * v45 + 32] = v41;
  unint64_t v48 = *((void *)v38 + 3);
  int64_t v49 = v10 + 4;
  if (v10 + 4 > (uint64_t)(v48 >> 1)) {
    uint64_t v38 = sub_2346FA360((char *)(v48 > 1), v10 + 4, 1, v38);
  }
  *((void *)v38 + 2) = v49;
  *(_DWORD *)&v38[4 * v47 + 32] = v20;
  unint64_t v50 = *((void *)v38 + 3);
  int64_t v51 = v10 + 5;
  if (v10 + 5 > (uint64_t)(v50 >> 1)) {
    uint64_t v38 = sub_2346FA360((char *)(v50 > 1), v10 + 5, 1, v38);
  }
  *((void *)v38 + 2) = v51;
  *(_DWORD *)&v38[4 * v49 + 32] = v41;
  unint64_t v52 = *((void *)v38 + 3);
  if (v10 + 6 > (uint64_t)(v52 >> 1)) {
    uint64_t v38 = sub_2346FA360((char *)(v52 > 1), v10 + 6, 1, v38);
  }
  *((void *)v38 + 2) = v10 + 6;
  *(_DWORD *)&v38[4 * v51 + 32] = v20 + 1;
  *(void *)a1 = v38;
  if (a5 == a6)
  {
    __float2 v53 = __sincosf_stret(a5);
    float32x2_t v54 = vadd_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v53.__sinval), LODWORD(v53.__cosval)), a8), a7);
    *((void *)&v57 + 1) = 0;
    LODWORD(v57) = v54.i32[0];
    long long v55 = v54.u32[0];
    *((float *)&v55 + 1) = a9;
    DWORD2(v55) = v54.i32[1];
    v56.i64[1] = v97;
    *((float *)&v57 + 1) = a10;
    unint64_t v59 = v19[2];
    unint64_t v58 = v19[3];
    int64_t v60 = v58 >> 1;
    unint64_t v61 = v59 + 1;
    if (v58 >> 1 <= v59)
    {
      long long v90 = v57;
      float32x2_t v93 = v54;
      long long v87 = v55;
      float32x2_t v74 = sub_2346FA354((void *)(v58 > 1), v59 + 1, 1, v19);
      long long v55 = v87;
      long long v57 = v90;
      float32x2_t v54 = v93;
      long long v19 = v74;
      unint64_t v58 = v74[3];
      int64_t v60 = v58 >> 1;
    }
    DWORD2(v57) = v54.i32[1];
    v19[2] = v61;
    *(_OWORD *)&v19[2 * v59 + 4] = v55;
    if (v60 < (uint64_t)(v59 + 2))
    {
      long long v91 = v57;
      float32x2_t v94 = v54;
      float v75 = sub_2346FA354((void *)(v58 > 1), v59 + 2, 1, v19);
      long long v57 = v91;
      float32x2_t v54 = v94;
      long long v19 = v75;
    }
    v19[2] = v59 + 2;
    *(_OWORD *)&v19[2 * v61 + 4] = v57;
    *(void *)v83.i64[0] = v19;
    *(float32x2_t *)v56.i8 = vsub_f32(v54, a7);
    float32x2_t v62 = vmul_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8);
    v62.i32[0] = vadd_f32(v62, (float32x2_t)vdup_lane_s32((int32x2_t)v62, 1)).u32[0];
    float32x2_t v63 = vrsqrte_f32((float32x2_t)v62.u32[0]);
    float32x2_t v64 = vmul_f32(v63, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v63, v63)));
    *(float32x2_t *)v56.i8 = vsub_f32(0, vmul_n_f32(*(float32x2_t *)v56.i8, vmul_f32(v64, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v64, v64))).f32[0]));
    int32x4_t v65 = vtrn2q_s32(vrev64q_s32(vzip1q_s32(v56, v56)), (int32x4_t)0);
    unint64_t v67 = v33[2];
    unint64_t v66 = v33[3];
    int64_t v68 = v66 >> 1;
    unint64_t v69 = v67 + 1;
    if (v66 >> 1 <= v67)
    {
      int32x4_t v95 = v65;
      float v76 = sub_2346FA354((void *)(v66 > 1), v67 + 1, 1, v33);
      int32x4_t v65 = v95;
      unint64_t v33 = v76;
      unint64_t v66 = v76[3];
      int64_t v68 = v66 >> 1;
    }
    v33[2] = v69;
    *(int32x4_t *)&v33[2 * v67 + 4] = v65;
    if (v68 < (uint64_t)(v67 + 2))
    {
      int32x4_t v96 = v65;
      float32x2_t v77 = sub_2346FA354((void *)(v66 > 1), v67 + 2, 1, v33);
      int32x4_t v65 = v96;
      unint64_t v33 = v77;
    }
    v33[2] = v67 + 2;
    *(int32x4_t *)&v33[2 * v69 + 4] = v65;
    *float v78 = v33;
  }
}

uint64_t sub_2346C9D6C(uint64_t result, uint64_t a2, float32x2_t a3, float a4)
{
  __float2 v18 = (void *)MEMORY[0x263F8EE78];
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v7 = 0;
      float v9 = *(float *)(result + 16);
      float v8 = *(float *)(result + 20);
      float v10 = *(float *)(result + 24);
      float v11 = *(float *)(result + 28);
      float v12 = (float)a2;
      do
      {
        uint64_t v13 = v7 + 1;
        sub_2346C96D4((uint64_t)&v19, &v18, (uint64_t)&v17, v9 + (float)((float)(v8 - v9) * (float)((float)v7 / v12)), v9 + (float)((float)(v8 - v9) * (float)((float)(v7 + 1) / v12)), v8, a3, a4, v10, v11);
        uint64_t v7 = v13;
      }
      while (a2 != v13);
      uint64_t v14 = v18;
      uint64_t v15 = v19;
      uint64_t v16 = v17;
    }
    else
    {
      uint64_t v16 = MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = MEMORY[0x263F8EE78];
    }
    type metadata accessor for RoomCaptureMesh();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v15;
    *(void *)(result + 24) = v14;
    *(void *)(result + 32) = v16;
  }
  return result;
}

void *sub_2346C9E80(float32x2_t *a1, unint64_t a2, uint64_t a3, int a4, double a5)
{
  int v75 = a4;
  uint64_t v71 = a3;
  *(double *)&long long v78 = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC810);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  float v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  float32x2_t v11 = *a1;
  float v12 = a1[1].f32[0];
  type metadata accessor for CapturedRoom.Surface.Curve(0);
  uint64_t v13 = self;
  id v14 = objc_msgSend(v13, sel_radians);
  sub_2347ED130();

  sub_2347ED120();
  double v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, v7);
  float v18 = v16;
  id v19 = objc_msgSend(v13, sel_radians);
  sub_2347ED130();

  sub_2347ED120();
  double v21 = v20;
  v17(v10, v7);
  *(float *)&double v21 = v21;
  float32x2_t v22 = vmul_n_f32((float32x2_t)0x3F000000BF000000, *(float *)&v78);
  type metadata accessor for CurvedElement();
  uint64_t v23 = swift_allocObject();
  *(float *)(v23 + 16) = v18;
  *(_DWORD *)(v23 + 20) = LODWORD(v21);
  *(float32x2_t *)(v23 + 24) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F19B0;
  *(void *)(inited + 32) = v23;
  uint64_t v84 = inited;
  sub_2347EE7F0();
  unint64_t v25 = a2;
  unint64_t v26 = v84;
  if (a2 >> 62) {
    goto LABEL_71;
  }
  uint64_t v27 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  swift_bridgeObjectRetain();
LABEL_3:
  uint64_t v73 = v23;
  if (v27)
  {
    unint64_t v28 = 0;
    *(void *)&long long v78 = v25 & 0xFFFFFFFFFFFFFF8;
    unint64_t v77 = v25 + 32;
    do
    {
      if ((v25 & 0xC000000000000001) != 0)
      {
        unint64_t v29 = (float *)MEMORY[0x237DC6CF0](v28, v25);
        BOOL v30 = __OFADD__(v28++, 1);
        if (v30) {
          goto LABEL_65;
        }
      }
      else
      {
        if (v28 >= *(void *)(v78 + 16)) {
          goto LABEL_69;
        }
        unint64_t v29 = *(float **)(v77 + 8 * v28);
        swift_retain();
        BOOL v30 = __OFADD__(v28++, 1);
        if (v30)
        {
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v27 = sub_2347EEEC0();
          goto LABEL_3;
        }
      }
      uint64_t v84 = MEMORY[0x263F8EE78];
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v31 = sub_2347EEEC0();
        swift_bridgeObjectRelease();
        if (!v31) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v31 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v31) {
          goto LABEL_5;
        }
      }
      if (v31 < 1) {
        goto LABEL_67;
      }
      if ((v26 & 0xC000000000000001) != 0)
      {
        uint64_t v23 = 0;
        do
        {
          MEMORY[0x237DC6CF0](v23++, v26);
          unint64_t v32 = sub_2346B1CC0(v29);
          sub_2346D9FA4(v32);
          swift_unknownObjectRelease();
        }
        while (v31 != v23);
      }
      else
      {
        uint64_t v23 = 0;
        do
        {
          ++v23;
          swift_retain();
          unint64_t v33 = sub_2346B1CC0(v29);
          sub_2346D9FA4(v33);
          swift_release();
        }
        while (v31 != v23);
      }
LABEL_5:
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v26 = v84;
    }
    while (v28 != v27);
  }
  swift_bridgeObjectRelease();
  uint64_t v83 = MEMORY[0x263F8EE78];
  uint64_t v84 = MEMORY[0x263F8EE78];
  uint64_t v82 = MEMORY[0x263F8EE78];
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v25 = v73;
  if (v34)
  {
    unint64_t v35 = 0;
    unint64_t v74 = v26 & 0xC000000000000001;
    uint64_t v70 = v26 & 0xFFFFFFFFFFFFFF8;
    unint64_t v69 = v26 + 32;
    float v36 = *(float *)&v71;
    uint64_t v72 = v34;
    while (1)
    {
      if (v74)
      {
        uint64_t v23 = MEMORY[0x237DC6CF0](v35, v26);
        BOOL v30 = __OFADD__(v35++, 1);
        if (v30) {
          goto LABEL_66;
        }
      }
      else
      {
        if (v35 >= *(void *)(v70 + 16)) {
          goto LABEL_70;
        }
        uint64_t v23 = *(void *)(v69 + 8 * v35);
        swift_retain();
        BOOL v30 = __OFADD__(v35++, 1);
        if (v30) {
          goto LABEL_66;
        }
      }
      *(void *)&long long v78 = v23;
      if (v75)
      {
        uint64_t v51 = MEMORY[0x263F8EE78];
        long long v80 = (void *)MEMORY[0x263F8EE78];
        uint64_t v81 = MEMORY[0x263F8EE78];
        unint64_t v79 = MEMORY[0x263F8EE78];
        float v53 = *(float *)(v23 + 16);
        float v52 = *(float *)(v23 + 20);
        unint64_t v54 = MEMORY[0x263F8EE78];
        long long v55 = (void *)MEMORY[0x263F8EE78];
        if (v53 < v52)
        {
          uint64_t v56 = 0;
          float v57 = *(float *)(v23 + 24);
          float v58 = *(float *)(v23 + 28);
          while (1)
          {
            float v59 = v53 + (float)(v36 * (float)v56);
            float v60 = v59 + v36;
            float v61 = (float)(v59 + v36) >= v52 ? v52 : v59 + v36;
            sub_2346C96D4((uint64_t)&v81, &v80, (uint64_t)&v79, v59, v61, v52, v11, v12, v57, v58);
            if (__OFADD__(v56, 1)) {
              break;
            }
            ++v56;
            if (v60 >= v52)
            {
              long long v55 = v80;
              uint64_t v51 = v81;
              unint64_t v54 = v79;
              goto LABEL_58;
            }
          }
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
LABEL_58:
        unint64_t v62 = v54;
        type metadata accessor for RoomCaptureMesh();
        float32x2_t v63 = (void *)swift_allocObject();
        unint64_t v39 = v62;
        v63[2] = v51;
        v63[3] = v55;
        v63[4] = v62;
        uint64_t v23 = *(void *)(v62 + 16);
        if (!v23)
        {
LABEL_59:
          uint64_t v44 = MEMORY[0x263F8EE78];
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v39 = *(void *)(sub_2346C9D6C(v23, v71, v11, v12) + 32);
        uint64_t v23 = *(void *)(v39 + 16);
        if (!v23) {
          goto LABEL_59;
        }
      }
      unint64_t v76 = v35;
      uint64_t v81 = MEMORY[0x263F8EE78];
      unint64_t v77 = v39;
      swift_bridgeObjectRetain();
      sub_234745638(0, v23, 0);
      unint64_t v40 = v77;
      unint64_t v25 = v84;
      unint64_t v41 = *(void *)(v84 + 16);
      if (HIDWORD(v41)) {
        goto LABEL_73;
      }
      int v42 = *(_DWORD *)(v77 + 32);
      int v43 = v42 + v41;
      if (__CFADD__(v42, v41)) {
        goto LABEL_68;
      }
      uint64_t v44 = v81;
      unint64_t v46 = *(void *)(v81 + 16);
      unint64_t v45 = *(void *)(v81 + 24);
      if (v46 >= v45 >> 1)
      {
        sub_234745638(v45 > 1, v46 + 1, 1);
        unint64_t v40 = v77;
        uint64_t v44 = v81;
      }
      *(void *)(v44 + 16) = v46 + 1;
      *(_DWORD *)(v44 + 4 * v46 + 32) = v43;
      if (--v23)
      {
        unint64_t v25 = *(void *)(v25 + 16);
        unint64_t v47 = v46 + 9;
        unint64_t v48 = (_DWORD *)(v40 + 36);
        while (!HIDWORD(v25))
        {
          int v49 = *v48 + v25;
          if (__CFADD__(*v48, v25))
          {
            __break(1u);
            goto LABEL_64;
          }
          uint64_t v81 = v44;
          unint64_t v50 = *(void *)(v44 + 24);
          if (v47 - 8 >= v50 >> 1)
          {
            sub_234745638(v50 > 1, v47 - 7, 1);
            uint64_t v44 = v81;
          }
          *(void *)(v44 + 16) = v47 - 7;
          *(_DWORD *)(v44 + 4 * v47++) = v49;
          ++v48;
          if (!--v23) {
            goto LABEL_28;
          }
        }
LABEL_73:
        uint64_t result = (void *)sub_2347EEE90();
        __break(1u);
        return result;
      }
LABEL_28:
      swift_bridgeObjectRelease();
      unint64_t v25 = v73;
      uint64_t v34 = v72;
      unint64_t v35 = v76;
LABEL_29:
      sub_2346D97CC(v44);
      uint64_t v37 = swift_bridgeObjectRetain();
      sub_2346D9684(v37);
      uint64_t v38 = swift_bridgeObjectRetain();
      sub_2346D9684(v38);
      swift_release();
      swift_release();
      if (v35 == v34)
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v64 = v83;
        uint64_t v65 = v84;
        uint64_t v66 = v82;
        goto LABEL_62;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v66 = MEMORY[0x263F8EE78];
  uint64_t v64 = MEMORY[0x263F8EE78];
  uint64_t v65 = MEMORY[0x263F8EE78];
LABEL_62:
  type metadata accessor for RoomCaptureMesh();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v65;
  result[3] = v64;
  result[4] = v66;
  return result;
}

uint64_t sub_2346CA6C0(uint64_t a1, float a2)
{
  uint64_t v3 = a1;
  if (a2 == 0.0)
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  uint64_t v82 = (void *)MEMORY[0x263F8EE78];
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_29;
  }
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  do
  {
    if (v7) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = v5;
    }
    if (v10 > v5)
    {
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    float32x4_t v11 = *(float32x4_t *)(v6 + 16 * v7);
    unint64_t v12 = v7 + 1;
    unint64_t v13 = vsubq_f32(v11, *(float32x4_t *)(v6 + 16 * v10 - 16)).u64[0];
    v14.f32[0] = -*((float *)&v13 + 1);
    v14.i32[1] = v13;
    float32x2_t v15 = vmul_f32(v14, v14);
    unsigned __int32 v16 = vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1)).u32[0];
    if (v5 - 1 == v7) {
      unint64_t v17 = 0;
    }
    else {
      unint64_t v17 = v7 + 1;
    }
    float32x2_t v18 = vrsqrte_f32((float32x2_t)v16);
    float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v16, vmul_f32(v18, v18)));
    LODWORD(v20) = vmul_f32(v19, vrsqrts_f32((float32x2_t)v16, vmul_f32(v19, v19))).u32[0];
    float32x4_t v78 = v11;
    unint64_t v21 = vsubq_f32(*(float32x4_t *)(v6 + 16 * v17), v11).u64[0];
    v22.f32[0] = -*((float *)&v21 + 1);
    v22.i32[1] = v21;
    float32x2_t v23 = vmul_f32(v22, v22);
    float32x2_t v24 = vmul_n_f32(v14, v20);
    unsigned __int32 v25 = vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1)).u32[0];
    float32x2_t v26 = vrsqrte_f32((float32x2_t)v25);
    float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25, vmul_f32(v26, v26)));
    float32x2_t v28 = vmul_n_f32(v22, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25, vmul_f32(v27, v27))).f32[0]);
    float v29 = _simd_orient_vf2((simd_float2)v24, (simd_float2)v28);
    v2.i32[0] = atan2f(v29, vaddv_f32(vmul_f32(v24, v28)));
    if (fabsf(v2.f32[0]) >= 2.0944)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_2346FA354(0, v4[2] + 1, 1, v4);
      }
      unint64_t v36 = v4[2];
      unint64_t v35 = v4[3];
      int64_t v37 = v35 >> 1;
      unint64_t v38 = v36 + 1;
      if (v35 >> 1 <= v36)
      {
        uint64_t v4 = sub_2346FA354((void *)(v35 > 1), v36 + 1, 1, v4);
        unint64_t v35 = v4[3];
        int64_t v37 = v35 >> 1;
      }
      float v39 = a2;
      float32x4_t v8 = v78;
      *(float32x2_t *)&long long v40 = vadd_f32(*(float32x2_t *)v78.f32, vmul_n_f32(v24, a2));
      *((void *)&v40 + 1) = v78.u32[2];
      v4[2] = v38;
      *(_OWORD *)&v4[2 * v36 + 4] = v40;
      unint64_t v33 = v36 + 2;
      if (v37 < (uint64_t)(v36 + 2))
      {
        int v42 = sub_2346FA354((void *)(v35 > 1), v36 + 2, 1, v4);
        float v39 = a2;
        float32x4_t v8 = v78;
        uint64_t v4 = v42;
      }
      v4[2] = v33;
      *(float32x4_t *)&v4[2 * v38 + 4] = v8;
      unint64_t v41 = v4[3];
      unint64_t v34 = v36 + 3;
      if ((uint64_t)(v36 + 3) > (uint64_t)(v41 >> 1))
      {
        int v43 = sub_2346FA354((void *)(v41 > 1), v36 + 3, 1, v4);
        float v39 = a2;
        float32x4_t v8 = v78;
        uint64_t v4 = v43;
      }
      float32x2_t v31 = vmul_n_f32(v28, v39);
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_2346FA354(0, v4[2] + 1, 1, v4);
      }
      float32x2_t v30 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v2, 0), 0), (int8x8_t)vsub_f32(vsub_f32(0, v24), v28), (int8x8_t)vadd_f32(v24, v28));
      float32x2_t v31 = vmul_n_f32(v30, a2 / vaddv_f32(vmul_f32(v24, v30)));
      unint64_t v33 = v4[2];
      unint64_t v32 = v4[3];
      unint64_t v34 = v33 + 1;
      if (v33 >= v32 >> 1) {
        uint64_t v4 = sub_2346FA354((void *)(v32 > 1), v33 + 1, 1, v4);
      }
      float32x4_t v8 = v78;
    }
    *(float32x2_t *)&long long v9 = vadd_f32(*(float32x2_t *)v8.f32, v31);
    *((void *)&v9 + 1) = v8.u32[2];
    v4[2] = v34;
    *(_OWORD *)&v4[2 * v33 + 4] = v9;
    unint64_t v7 = v12;
  }
  while (v5 != v12);
  swift_bridgeObjectRelease();
  uint64_t v82 = v4;
LABEL_29:
  unint64_t v44 = v4[2];
  if (!v44) {
    return (uint64_t)v4;
  }
  unint64_t v45 = 0;
  while (1)
  {
    if (v45 >= v44) {
      goto LABEL_74;
    }
    int64_t v46 = v45;
    long long v47 = *(_OWORD *)&v4[2 * v45++ + 4];
    if (v45 == v44) {
      int64_t v48 = 0;
    }
    else {
      int64_t v48 = v46 + 1;
    }
    unint64_t v74 = v4 + 4;
    long long v76 = *(_OWORD *)&v4[2 * v48 + 4];
    double v79 = *(double *)&v47;
    type metadata accessor for CDTEdge();
    swift_initStackObject();
    uint64_t v49 = sub_23470AD70(v79, *(double *)&v76);
    unint64_t v50 = v4[2];
    if (v50 < v46) {
      goto LABEL_75;
    }
    uint64_t v51 = (float32x2_t *)v49;
    if (v50 != v46) {
      break;
    }
LABEL_64:
    swift_release();
LABEL_65:
    uint64_t v4 = v82;
    unint64_t v44 = v82[2];
    if (v45 >= v44) {
      return (uint64_t)v4;
    }
  }
  if (v50)
  {
    uint64_t v73 = v45;
    float v52 = v4 + 2;
    int64_t v53 = v4[2];
    while (1)
    {
      if (v46 >= v53)
      {
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      int64_t v54 = v53 - 1;
      if (v53 - 1 >= *v52) {
        goto LABEL_71;
      }
      if (v53 % v50 >= *v52) {
        goto LABEL_72;
      }
      float32x4_t v77 = *(float32x4_t *)&v74[2 * (v53 % v50)];
      float32x4_t v80 = *(float32x4_t *)&v52[2 * v53];
      uint64_t inited = swift_initStackObject();
      *(void *)(inited + 16) = v80.i64[0];
      *(void *)(inited + 24) = v77.i64[0];
      *(unsigned char *)(inited + 32) = vmovn_s32(vceqq_f32(v80, v77)).u8[0] & (v80.f32[1] == v77.f32[1]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9E8);
      uint64_t v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = xmmword_2347F19A0;
      *(void *)(v56 + 32) = v80.i64[0];
      *(void *)(v56 + 40) = v77.i64[0];
      uint64_t v81 = v56;
      swift_bridgeObjectRetain();
      sub_23470A404(&v81);
      swift_bridgeObjectRelease();
      *(void *)(inited + 40) = v81;
      if ((sub_2346C1780(v51, 0.0001, *(float32x2_t *)v80.f32) & 1) == 0
        && (sub_2346C1780(v51, 0.0001, *(float32x2_t *)v77.f32) & 1) == 0)
      {
        float32x2_t v57 = v51[2];
        float32x2_t v58 = v51[3];
        float v59 = v77.f32[1] - v57.f32[1];
        float v60 = (float)(v77.f32[1] - v57.f32[1]) * (float)(v80.f32[0] - v57.f32[0]);
        float v61 = v77.f32[0] - v57.f32[0];
        float v62 = (float)(v80.f32[1] - v57.f32[1]) * (float)(v77.f32[0] - v57.f32[0]);
        float v63 = vabds_f32(v60, v62);
        float v64 = (float)(v77.f32[1] - v58.f32[1]) * (float)(v80.f32[0] - v58.f32[0]);
        float v65 = (float)(v80.f32[1] - v58.f32[1]) * (float)(v77.f32[0] - v58.f32[0]);
        if (vabds_f32(v64, v65) >= 1.4211e-14)
        {
          float v66 = v60 - v62;
          if ((float)(v64 - v65) <= 0.0)
          {
            if (v63 >= 1.4211e-14 && v66 <= 0.0) {
              goto LABEL_40;
            }
          }
          else if (v63 >= 1.4211e-14 && v66 > 0.0)
          {
            goto LABEL_40;
          }
        }
        else if (v63 < 1.4211e-14)
        {
          goto LABEL_40;
        }
        v58.f32[0] = vsub_f32(v58, v57).f32[0];
        float v67 = (float)(v80.f32[1] - v57.f32[1]) * v58.f32[0];
        float v68 = (float)(v80.f32[0] - v57.f32[0]) * (float)(v58.f32[1] - v57.f32[1]);
        v57.f32[0] = vabds_f32(v67, v68);
        float v69 = v59 * v58.f32[0];
        float v70 = v61 * (float)(v58.f32[1] - v57.f32[1]);
        if (vabds_f32(v59 * v58.f32[0], v70) < 1.4211e-14)
        {
          if (v57.f32[0] >= 1.4211e-14) {
            goto LABEL_62;
          }
        }
        else
        {
          float v71 = v67 - v68;
          if ((float)(v69 - v70) <= 0.0)
          {
            if (v57.f32[0] < 1.4211e-14 || v71 > 0.0)
            {
LABEL_62:
              unint64_t v45 = v73;
              if (v53 <= v73) {
                goto LABEL_77;
              }
              sub_23478E4F4(v73, v53);
              swift_release();
              goto LABEL_64;
            }
          }
          else if (v57.f32[0] < 1.4211e-14 || v71 <= 0.0)
          {
            goto LABEL_62;
          }
        }
      }
LABEL_40:
      swift_release();
      --v53;
      if (v46 == v54)
      {
        swift_release();
        unint64_t v45 = v73;
        goto LABEL_65;
      }
    }
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_2346CAD48(unint64_t a1, double a2, float a3, float a4)
{
  *(float *)&long long v44 = a3;
  unint64_t v9 = a1;
  uint64_t v10 = MEMORY[0x263F8EE78];
  unint64_t v53 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_2347EEEC0();
    if (!v11) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_18;
    }
  }
  if (v11 < 1)
  {
    __break(1u);
    goto LABEL_64;
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if ((*(unsigned char *)(MEMORY[0x237DC6CF0](i, v9) + 48) & 4) != 0)
      {
        uint64_t v13 = swift_retain();
        MEMORY[0x237DC6730](v13);
        if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
      }
      swift_unknownObjectRelease();
    }
  }
  else
  {
    for (uint64_t j = 0; j != v11; ++j)
    {
      if ((*(unsigned char *)(*(void *)(v9 + 8 * j + 32) + 48) & 4) != 0)
      {
        uint64_t v15 = swift_retain_n();
        MEMORY[0x237DC6730](v15);
        if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
        swift_release();
      }
    }
  }
LABEL_18:
  swift_bridgeObjectRelease();
  float v7 = -0.5;
  uint64_t v52 = v10;
  sub_2346C7094((uint64_t *)&v53);
  unint64_t v9 = v53;
  unint64_t v4 = v53 >> 62;
  if (v53 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_2347EEEC0();
  }
  else
  {
    uint64_t v16 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  float v6 = v7 * *(float *)&a2;
  if (v16)
  {
    unint64_t v5 = v9 & 0xC000000000000001;
    if ((v9 & 0xC000000000000001) == 0)
    {
      if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_66;
      }
      uint64_t v17 = *(void *)(v9 + 32);
      swift_retain();
LABEL_24:
      uint64_t result = swift_bridgeObjectRelease();
      if ((*(unsigned char *)(v17 + 48) & 1) == 0)
      {
        swift_release();
        goto LABEL_27;
      }
      LODWORD(v49) = *(void *)(v17 + 32);
      if (!v4)
      {
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_54;
        }
        goto LABEL_72;
      }
LABEL_66:
      swift_bridgeObjectRetain();
      uint64_t v33 = sub_2347EEEC0();
      uint64_t result = swift_bridgeObjectRelease();
      if (v33)
      {
        swift_bridgeObjectRetain();
        uint64_t v34 = sub_2347EEEC0();
        uint64_t result = swift_bridgeObjectRelease();
        if (!v34)
        {
          __break(1u);
          goto LABEL_69;
        }
LABEL_54:
        if (!v5)
        {
          if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_73:
            __break(1u);
            return result;
          }
          uint64_t result = swift_retain();
          if (!v4) {
            goto LABEL_57;
          }
          goto LABEL_70;
        }
LABEL_69:
        uint64_t result = MEMORY[0x237DC6CF0](0, v9);
        if (!v4)
        {
LABEL_57:
          if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_58;
          }
LABEL_71:
          __break(1u);
          goto LABEL_72;
        }
LABEL_70:
        swift_bridgeObjectRetain();
        uint64_t v35 = sub_2347EEEC0();
        uint64_t result = swift_bridgeObjectRelease();
        if (v35)
        {
LABEL_58:
          sub_23478EC08(0, 1);
          swift_release();
          swift_release();
          unint64_t v9 = v53;
          if (!(v53 >> 62)) {
            goto LABEL_28;
          }
LABEL_59:
          swift_bridgeObjectRetain();
          uint64_t v19 = sub_2347EEEC0();
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
        goto LABEL_71;
      }
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
LABEL_64:
    uint64_t v17 = MEMORY[0x237DC6CF0](0, v9);
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
LABEL_27:
  float v49 = v6;
  if (v9 >> 62) {
    goto LABEL_59;
  }
LABEL_28:
  uint64_t v19 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_29:
  float v20 = vmuls_lane_f32(v7, *(float32x2_t *)&a2, 1);
  unint64_t v21 = &unk_2347F1000;
  if (v19)
  {
    unint64_t v22 = 0;
    float v7 = a4 * 0.0;
    float32x2_t v37 = vadd_f32((float32x2_t)__PAIR64__(v44, LODWORD(v20)), (float32x2_t)COERCE_UNSIGNED_INT(*(float *)&v44 * 0.0));
    float v39 = v20 + (float)(a4 * 0.0);
    float v40 = *(float *)&v44 * 0.0;
    float v38 = 0.0 - a4;
    char v23 = 1;
LABEL_31:
    char v36 = v23;
    unint64_t v24 = v22;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        unint64_t v4 = MEMORY[0x237DC6CF0](v24, v9);
        unint64_t v22 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          goto LABEL_60;
        }
      }
      else
      {
        if (v24 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_61;
        }
        unint64_t v4 = *(void *)(v9 + 8 * v24 + 32);
        swift_retain();
        unint64_t v22 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
      }
      uint64_t v25 = *(void *)(v4 + 16);
      a2 = *(double *)(v4 + 32);
      HIDWORD(v26) = 0;
      *(float *)&long long v26 = v40 + *(float *)&v25;
      *(float32x2_t *)((char *)&v26 + 4) = v37;
      long long v44 = v26;
      *(float *)&long long v27 = v40 + v49;
      DWORD1(v27) = v37.i32[0];
      *((void *)&v27 + 1) = v37.u32[1];
      long long v42 = v27;
      *(float *)&long long v27 = v7 + v49;
      *((float *)&v27 + 1) = v39;
      *((void *)&v27 + 1) = LODWORD(v38);
      long long v50 = v27;
      HIDWORD(v27) = 0;
      *(float *)&long long v27 = v7 + *(float *)&v25;
      long long v41 = v27;
      type metadata accessor for RoomCaptureQuad();
      float32x2_t v28 = (_OWORD *)swift_allocObject();
      v28[1] = v44;
      void v28[2] = v42;
      v28[3] = v50;
      v28[4] = v41;
      v28[5] = xmmword_2347F1FF0;
      MEMORY[0x237DC6730]();
      if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      sub_2347EE820();
      sub_2347EE7F0();
      int v29 = *(_DWORD *)(v4 + 48);
      swift_release();
      float v49 = *(float *)&a2;
      if ((v29 & 2) != 0)
      {
        char v23 = 0;
        if (v22 != v19) {
          goto LABEL_31;
        }
        swift_bridgeObjectRelease();
        return v52;
      }
      ++v24;
    }
    while (v22 != v19);
    swift_bridgeObjectRelease();
    unint64_t v21 = (_OWORD *)&unk_2347F1000;
    if (v36) {
      goto LABEL_48;
    }
  }
  else
  {
    float v47 = v20;
    swift_bridgeObjectRelease();
    float32x2_t v37 = vadd_f32((float32x2_t)__PAIR64__(v44, LODWORD(v47)), (float32x2_t)COERCE_UNSIGNED_INT(*(float *)&v44 * 0.0));
    float v7 = a4 * 0.0;
    float v39 = v47 + (float)(a4 * 0.0);
    float v40 = *(float *)&v44 * 0.0;
    float v38 = 0.0 - a4;
LABEL_48:
    HIDWORD(v30) = 0;
    *(float *)&long long v30 = (float)(0.0 - v6) + v40;
    *(float32x2_t *)((char *)&v30 + 4) = v37;
    long long v48 = v30;
    *(float *)&long long v31 = v40 + v49;
    DWORD1(v31) = v37.i32[0];
    *((void *)&v31 + 1) = v37.u32[1];
    long long v45 = v31;
    *(float *)&long long v31 = v7 + v49;
    *((float *)&v31 + 1) = v39;
    *((void *)&v31 + 1) = LODWORD(v38);
    long long v51 = v31;
    HIDWORD(v31) = 0;
    *(float *)&long long v31 = (float)(0.0 - v6) + v7;
    long long v43 = v31;
    type metadata accessor for RoomCaptureQuad();
    unint64_t v32 = (_OWORD *)swift_allocObject();
    v32[1] = v48;
    v32[2] = v45;
    v32[3] = v51;
    v32[4] = v43;
    v32[5] = v21[255];
    MEMORY[0x237DC6730]();
    if (*(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2347EE800();
    }
    sub_2347EE820();
    sub_2347EE7F0();
  }
  return v52;
}

uint64_t sub_2346CB454(unint64_t a1, double a2, float a3, float a4)
{
  unint64_t v141 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_2347EEEC0();
    uint64_t v7 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    float v11 = a3 * 0.0;
    float v65 = a3 + 0.0;
    float v67 = a4 * 0.0;
    float v66 = 0.0 - a4;
    goto LABEL_35;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_34;
  }
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    return result;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = 0;
    float v11 = a3 * 0.0;
    float v139 = a3 + 0.0;
    *(float *)v9.i32 = a4 * 0.0;
    float v134 = a4 * 0.0;
    float v137 = 0.0 - a4;
    float32x2_t v12 = (float32x2_t)vdup_lane_s32(v9, 0);
    do
    {
      uint64_t v13 = MEMORY[0x237DC6CF0](v10, a1);
      float32x2_t v14 = *(float32x2_t *)(v13 + 16);
      uint64_t v15 = *(void *)(v13 + 32);
      float v16 = v14.f32[1];
      float v104 = v11 + v14.f32[1];
      float v107 = v14.f32[0];
      if ((*(unsigned char *)(v13 + 48) & 4) != 0)
      {
        v26.i32[3] = 0;
        v26.f32[0] = v11 + *(float *)&v15;
        float32x4_t v28 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + *(float *)&v15);
        v28.f32[1] = v11 + v14.f32[1];
        float v23 = a3 + 0.0;
        v28.f32[2] = a3 + 0.0;
        float v25 = a4 * 0.0;
        v27.n128_u32[3] = 0;
        v27.n128_f32[0] = v134 + *(float *)&v15;
        float32x4_t v22 = (float32x4_t)COERCE_UNSIGNED_INT(v134 + *(float *)&v15);
        float v99 = v134 + v16;
        v22.f32[1] = v134 + v16;
        float v24 = 0.0 - a4;
        v22.f32[2] = 0.0 - a4;
      }
      else
      {
        v17.f32[0] = v11 + v14.f32[0];
        v17.f32[1] = v11 + v14.f32[1];
        v17.i64[1] = LODWORD(v139);
        float32x4_t v87 = v17;
        v17.f32[0] = v11 + *(float *)&v15;
        float32x4_t v128 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + *(float *)&v15);
        v17.f32[1] = v11 + v14.f32[1];
        v17.i64[1] = LODWORD(v139);
        float32x4_t v114 = v17;
        int v92 = HIDWORD(*(void *)(v13 + 32));
        v18.f32[0] = v134 + *(float *)&v15;
        *(float32x2_t *)&long long v19 = vadd_f32(v12, v14);
        __n128 v122 = (__n128)COERCE_UNSIGNED_INT(v134 + *(float *)&v15);
        v18.i32[1] = DWORD1(v19);
        v18.i64[1] = LODWORD(v137);
        float32x4_t v94 = v18;
        float v103 = *((float *)&v19 + 1);
        *((void *)&v19 + 1) = LODWORD(v137);
        long long v84 = v19;
        type metadata accessor for RoomCaptureQuad();
        float v20 = (_OWORD *)swift_allocObject();
        v20[1] = v87;
        v20[2] = v114;
        v20[3] = v94;
        v20[4] = v84;
        v20[5] = xmmword_2347F2000;
        MEMORY[0x237DC6730](v20, v21);
        if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
        float32x4_t v22 = v94;
        float v99 = v103;
        float v24 = 0.0 - a4;
        float v23 = a3 + 0.0;
        float v25 = a4 * 0.0;
        __n128 v27 = v122;
        float32x4_t v26 = v128;
        HIDWORD(v15) = v92;
        float32x4_t v28 = v114;
      }
      v26.f32[1] = v11 + *((float *)&v15 + 1);
      v26.f32[2] = v23;
      float32x4_t v129 = v26;
      float v88 = v25 + *((float *)&v15 + 1);
      v27.n128_f32[1] = v25 + *((float *)&v15 + 1);
      v27.n128_f32[2] = v24;
      float v115 = v11 + *((float *)&v15 + 1);
      __n128 v123 = v27;
      __n128 v29 = sub_2346F3C94(v28, v26, v27, v22);
      MEMORY[0x237DC6730](v29);
      if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      sub_2347EE820();
      sub_2347EE7F0();
      v30.f32[0] = v11 + v107;
      float32x4_t v95 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + v107);
      v30.f32[1] = v115;
      v30.i64[1] = LODWORD(v139);
      float32x4_t v116 = v30;
      v31.f32[0] = v134 + v107;
      __n128 v89 = (__n128)COERCE_UNSIGNED_INT(v134 + v107);
      v31.f32[1] = v88;
      v31.i64[1] = LODWORD(v137);
      float32x4_t v108 = v31;
      type metadata accessor for RoomCaptureQuad();
      unint64_t v32 = (_OWORD *)swift_allocObject();
      v32[1] = v129;
      v32[2] = v116;
      v32[3] = v108;
      v32[4] = v123;
      v32[5] = xmmword_2347F1FF0;
      MEMORY[0x237DC6730](v32, v33);
      if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      sub_2347EE820();
      sub_2347EE7F0();
      __n128 v35 = v89;
      float32x4_t v34 = v95;
      v34.f32[1] = v104;
      v34.f32[2] = a3 + 0.0;
      v35.n128_f32[1] = v99;
      v35.n128_f32[2] = 0.0 - a4;
      __n128 v36 = sub_2346F3C94(v116, v34, v35, v108);
      MEMORY[0x237DC6730](v36);
      if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      ++v10;
      sub_2347EE820();
      sub_2347EE7F0();
      swift_unknownObjectRelease();
    }
    while (v7 != v10);
  }
  else
  {
    uint64_t v37 = 0;
    float v11 = a3 * 0.0;
    float v139 = a3 + 0.0;
    *(float *)v9.i32 = a4 * 0.0;
    float v134 = a4 * 0.0;
    float v137 = 0.0 - a4;
    float32x2_t v38 = (float32x2_t)vdup_lane_s32(v9, 0);
    do
    {
      float v39 = *(float32x2_t **)(a1 + 8 * v37 + 32);
      float32x2_t v40 = v39[2];
      float32x2_t v41 = v39[4];
      float v100 = v40.f32[0];
      float v105 = v11 + v40.f32[1];
      float v93 = v41.f32[1];
      if ((v39[6].i8[0] & 4) != 0)
      {
        v55.f32[0] = v11 + v41.f32[0];
        float32x4_t v131 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + v41.f32[0]);
        v55.f32[1] = v11 + v40.f32[1];
        v55.i64[1] = LODWORD(v139);
        v56.f32[0] = v134 + v41.f32[0];
        float32x4_t v118 = v55;
        __n128 v125 = (__n128)COERCE_UNSIGNED_INT(v134 + v41.f32[0]);
        float v96 = v134 + v40.f32[1];
        v56.f32[1] = v134 + v40.f32[1];
        v56.i64[1] = LODWORD(v137);
        float32x4_t v110 = v56;
        swift_retain();
        float v47 = v93;
        float32x4_t v54 = v110;
        float32x4_t v53 = v118;
        float v50 = a4 * 0.0;
        float v49 = 0.0 - a4;
        __n128 v52 = v125;
        float32x4_t v51 = v131;
        float v48 = a3 + 0.0;
      }
      else
      {
        v42.f32[0] = v11 + v40.f32[0];
        v42.f32[1] = v11 + v40.f32[1];
        v42.i64[1] = LODWORD(v139);
        float32x4_t v86 = v42;
        v42.i32[3] = 0;
        v42.f32[0] = v11 + v41.f32[0];
        float32x4_t v130 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + v41.f32[0]);
        v42.f32[1] = v11 + v40.f32[1];
        v43.f32[0] = v134 + v41.f32[0];
        *(float32x2_t *)&long long v44 = vadd_f32(v38, v40);
        float32x4_t v117 = v42;
        __n128 v124 = (__n128)COERCE_UNSIGNED_INT(v134 + v41.f32[0]);
        v43.i32[1] = DWORD1(v44);
        v43.i64[1] = LODWORD(v137);
        float32x4_t v109 = v43;
        float v98 = *((float *)&v44 + 1);
        *((void *)&v44 + 1) = LODWORD(v137);
        long long v85 = v44;
        type metadata accessor for RoomCaptureQuad();
        long long v45 = (_OWORD *)swift_allocObject();
        v45[1] = v86;
        v45[2] = v117;
        uint64_t v45[3] = v109;
        v45[4] = v85;
        uint64_t v45[5] = xmmword_2347F2000;
        uint64_t v46 = swift_retain();
        MEMORY[0x237DC6730](v46);
        if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_2347EE800();
        }
        sub_2347EE820();
        sub_2347EE7F0();
        float v47 = v93;
        float v96 = v98;
        float v49 = 0.0 - a4;
        float v48 = a3 + 0.0;
        float v50 = a4 * 0.0;
        __n128 v52 = v124;
        float32x4_t v51 = v130;
        float32x4_t v54 = v109;
        float32x4_t v53 = v117;
      }
      v51.f32[1] = v11 + v47;
      v51.f32[2] = v48;
      float v111 = v50 + v47;
      float v119 = v11 + v47;
      v52.n128_f32[1] = v50 + v47;
      v52.n128_f32[2] = v49;
      __n128 v126 = v52;
      float32x4_t v132 = v51;
      __n128 v57 = sub_2346F3C94(v53, v51, v52, v54);
      MEMORY[0x237DC6730](v57);
      if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      sub_2347EE820();
      sub_2347EE7F0();
      v58.f32[0] = v11 + v100;
      float32x4_t v90 = (float32x4_t)COERCE_UNSIGNED_INT(v11 + v100);
      v58.f32[1] = v119;
      v58.i64[1] = LODWORD(v139);
      float32x4_t v120 = v58;
      v59.f32[0] = v134 + v100;
      __n128 v101 = (__n128)COERCE_UNSIGNED_INT(v134 + v100);
      v59.f32[1] = v111;
      v59.i64[1] = LODWORD(v137);
      float32x4_t v112 = v59;
      type metadata accessor for RoomCaptureQuad();
      float v60 = (_OWORD *)swift_allocObject();
      v60[1] = v132;
      v60[2] = v120;
      v60[3] = v112;
      v60[4] = v126;
      v60[5] = xmmword_2347F1FF0;
      MEMORY[0x237DC6730](v60, v61);
      if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      sub_2347EE820();
      sub_2347EE7F0();
      __n128 v62 = v101;
      float32x4_t v63 = v90;
      v63.f32[1] = v105;
      v63.f32[2] = a3 + 0.0;
      v62.n128_f32[1] = v96;
      v62.n128_f32[2] = 0.0 - a4;
      __n128 v64 = sub_2346F3C94(v120, v63, v62, v112);
      MEMORY[0x237DC6730](v64);
      if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      ++v37;
      sub_2347EE820();
      sub_2347EE7F0();
      swift_release();
    }
    while (v7 != v37);
  }
  swift_bridgeObjectRelease();
  float v66 = v137;
  float v65 = v139;
  float v67 = v134;
LABEL_35:
  float v135 = v67;
  __int32 v138 = LODWORD(v66);
  __int32 v140 = LODWORD(v65);
  float v68 = vmuls_lane_f32(-0.5, *(float32x2_t *)&a2, 1);
  v69.f32[0] = (float)(-0.5 * *(float *)&a2) + v11;
  float32x4_t v106 = (float32x4_t)v69.u32[0];
  v69.f32[1] = (float)(0.0 - v68) + v11;
  v69.i64[1] = LODWORD(v65);
  float32x4_t v133 = v69;
  float v70 = 0.0 - (float)(-0.5 * *(float *)&a2);
  v71.f32[0] = v70 + v11;
  float32x4_t v97 = (float32x4_t)COERCE_UNSIGNED_INT(v70 + v11);
  v71.f32[1] = v69.f32[1];
  v71.i64[1] = LODWORD(v65);
  v72.f32[0] = v70 + v67;
  __n128 v91 = (__n128)COERCE_UNSIGNED_INT(v70 + v67);
  v72.f32[1] = (float)(0.0 - v68) + v67;
  v72.i64[1] = LODWORD(v66);
  float32x4_t v113 = v72;
  float32x4_t v121 = v71;
  v73.n128_f32[0] = (float)(-0.5 * *(float *)&a2) + v67;
  float32x4_t v102 = (float32x4_t)v73.n128_u32[0];
  v73.n128_f32[1] = v72.f32[1];
  v73.n128_u64[1] = LODWORD(v66);
  __n128 v127 = v73;
  type metadata accessor for RoomCaptureQuad();
  unint64_t v74 = (_OWORD *)swift_allocObject();
  v74[1] = v133;
  v74[2] = v121;
  v74[3] = v113;
  v74[4] = v127;
  v74[5] = xmmword_2347F2000;
  MEMORY[0x237DC6730]();
  if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  sub_2347EE820();
  sub_2347EE7F0();
  unint64_t v75 = sub_2346CAD48(a1, a2, a3, a4);
  sub_2346DA328(v75);
  __n128 v77 = v91;
  float32x4_t v76 = v97;
  v76.f32[1] = v68 + v11;
  v76.i32[2] = v140;
  float v136 = v68 + v135;
  v77.n128_f32[1] = v136;
  v77.n128_u32[2] = v138;
  __n128 v78 = sub_2346F3C94(v121, v76, v77, v113);
  MEMORY[0x237DC6730](v78);
  if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  sub_2347EE820();
  sub_2347EE7F0();
  float32x4_t v80 = v102;
  float32x4_t v79 = v106;
  v79.f32[1] = v68 + v11;
  v79.i32[2] = v140;
  v80.f32[1] = v136;
  v80.i32[2] = v138;
  __n128 v81 = sub_2346F3C94(v79, v133, v127, v80);
  MEMORY[0x237DC6730](v81);
  if (*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2347EE800();
  }
  sub_2347EE820();
  sub_2347EE7F0();
  uint64_t v82 = sub_23474CE64(v141);
  swift_bridgeObjectRelease();
  return (uint64_t)v82;
}

uint64_t sub_2346CBE84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2346CBEEC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2346CBF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScanItemStrut();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_2346CBFB0(float32x2_t *a1, char a2, __n128 a3, double a4, float32x2_t a5, double a6, double a7, __n128 a8, __n128 a9)
{
  *(double *)&long long v194 = a4;
  v193.i32[0] = a3.n128_u32[0];
  a3.n128_u32[0] = a1[3].u32[0];
  float32x2_t v9 = a1[1];
  a9.n128_u64[0] = (unint64_t)a1[2];
  __n128 v10 = a9;
  v10.n128_u32[0] = 1.0;
  __n128 v11 = a9;
  v11.n128_u32[0] = 2.0;
  if (a2) {
    unsigned int v12 = -1;
  }
  else {
    unsigned int v12 = 0;
  }
  int8x8_t v13 = (int8x8_t)vdup_n_s32(v12);
  v11.n128_u64[0] = (unint64_t)vbsl_s8(v13, (int8x8_t)v11.n128_u64[0], (int8x8_t)v10.n128_u64[0]);
  a8.n128_u64[0] = (unint64_t)vadd_f32(vadd_f32(*a1, a5), (float32x2_t)vand_s8((int8x8_t)vmul_n_f32((float32x2_t)a9.n128_u64[0], a3.n128_f32[0]), v13));
  __n128 v191 = v11;
  __n128 v192 = a9;
  __n128 v14 = a9;
  v14.n128_u32[1] = v11.n128_u32[1];
  a3.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)a8.n128_u64[0], vmul_n_f32((float32x2_t)v14.n128_u64[0], a3.n128_f32[0] * v11.n128_f32[0]));
  v10.n128_u64[0] = (unint64_t)a1[4];
  float32x2_t v15 = a1[5];
  __n128 v195 = a8;
  __n128 v196 = a3;
  v14.n128_u64[0] = (unint64_t)vsub_f32((float32x2_t)a8.n128_u64[0], vmul_n_f32(v15, a1[6].f32[0]));
  int32x4_t v197 = (int32x4_t)v14;
  int32x4_t v190 = (int32x4_t)v10;
  sub_23478768C();
  if (v18) {
    return 0;
  }
  *(float32x2_t *)&long long v17 = v16;
  long long v189 = v17;
  float32x2_t v19 = vsub_f32(v16, (float32x2_t)v195.n128_u64[0]);
  int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
  float32x2_t v21 = vsub_f32(vadd_f32(vsub_f32((float32x2_t)v196.n128_u64[0], (float32x2_t)v195.n128_u64[0]), *(float32x2_t *)v197.i8), (float32x2_t)v195.n128_u64[0]);
  int32x2_t v22 = (int32x2_t)vmul_f32(v21, v21);
  float32x2_t v23 = vadd_f32((float32x2_t)vzip1_s32(v22, v20), (float32x2_t)vzip2_s32(v22, v20));
  if ((float)(4.0 * v23.f32[0]) < v23.f32[1]) {
    return 0;
  }
  unint64_t v25 = MEMORY[0x263F8EE78];
  unint64_t v207 = (void *)MEMORY[0x263F8EE78];
  sub_23473D210(0, 4, 0);
  float32x4_t v26 = v207;
  unint64_t v28 = v207[2];
  unint64_t v27 = v207[3];
  int64_t v29 = v27 >> 1;
  int64_t v30 = v28 + 1;
  if (v27 >> 1 <= v28) {
    goto LABEL_198;
  }
  while (1)
  {
    __n128 v31 = v195;
    v31.n128_u32[3] = 0;
    __n128 v188 = v31;
    __int32 v32 = v193.i32[0];
    v31.n128_u32[1] = v193.i32[0];
    v31.n128_u32[2] = v195.n128_u32[1];
    void v26[2] = v30;
    *(__n128 *)&v26[2 * v28 + 4] = v31;
    unint64_t v33 = v28 + 2;
    __n128 v35 = v196;
    int32x4_t v34 = v197;
    if (v29 < (uint64_t)(v28 + 2))
    {
      sub_23473D210(v27 > 1, v28 + 2, 1);
      __int32 v32 = v193.i32[0];
      __n128 v35 = v196;
      int32x4_t v34 = v197;
      float32x4_t v26 = v207;
    }
    __n128 v36 = v35;
    v36.n128_u32[3] = 0;
    __n128 v187 = v36;
    v36.n128_u32[1] = v32;
    v36.n128_u32[2] = v35.n128_u32[1];
    void v26[2] = v33;
    *(__n128 *)&v26[2 * v30 + 4] = v36;
    unint64_t v37 = v26[3];
    int64_t v30 = v28 + 3;
    if ((uint64_t)(v28 + 3) > (uint64_t)(v37 >> 1))
    {
      sub_23473D210(v37 > 1, v28 + 3, 1);
      __int32 v32 = v193.i32[0];
      int32x4_t v34 = v197;
      float32x4_t v26 = v207;
    }
    long long v38 = v189;
    HIDWORD(v38) = 0;
    long long v186 = v38;
    DWORD1(v38) = v32;
    DWORD2(v38) = DWORD1(v189);
    void v26[2] = v30;
    *(_OWORD *)&v26[2 * v33 + 4] = v38;
    unint64_t v39 = v26[3];
    if ((uint64_t)(v28 + 4) > (uint64_t)(v39 >> 1))
    {
      sub_23473D210(v39 > 1, v28 + 4, 1);
      __int32 v32 = v193.i32[0];
      int32x4_t v34 = v197;
      float32x4_t v26 = v207;
    }
    int32x4_t v40 = v34;
    v40.i32[3] = 0;
    int32x4_t v193 = v40;
    v40.i32[1] = v32;
    v40.i32[2] = v34.i32[1];
    void v26[2] = v28 + 4;
    float32x2_t v41 = (int32x4_t *)(v26 + 4);
    *(int32x4_t *)&v26[2 * v30 + 4] = v40;
    LODWORD(v30) = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AEC50);
    unint64_t v42 = sub_2347EE810();
    *(void *)(v42 + 16) = 4;
    *(_OWORD *)(v42 + 32) = xmmword_2347F1FF0;
    *(_OWORD *)(v42 + 48) = xmmword_2347F1FF0;
    *(_OWORD *)(v42 + 64) = xmmword_2347F1FF0;
    *(_OWORD *)(v42 + 80) = xmmword_2347F1FF0;
    unint64_t v207 = (void *)v25;
    sub_23473D210(0, 4, 0);
    uint64_t v43 = v25;
    unint64_t v45 = *(void *)(v25 + 16);
    unint64_t v44 = *(void *)(v25 + 24);
    int64_t v46 = v44 >> 1;
    unint64_t v47 = v45 + 1;
    if (v44 >> 1 <= v45)
    {
      sub_23473D210(v44 > 1, v45 + 1, 1);
      uint64_t v43 = v25;
      unint64_t v44 = *(void *)(v25 + 24);
      int64_t v46 = v44 >> 1;
    }
    unsigned __int32 v48 = v196.n128_u32[1];
    int v49 = v194;
    __n128 v50 = v188;
    v50.n128_u32[1] = v194;
    v50.n128_u32[2] = v195.n128_u32[1];
    *(void *)(v43 + 16) = v47;
    *(__n128 *)(v43 + 16 * v45 + 32) = v50;
    unint64_t v51 = v45 + 2;
    __int32 v52 = v197.i32[1];
    if (v46 < (uint64_t)(v45 + 2))
    {
      sub_23473D210(v44 > 1, v45 + 2, 1);
      unsigned __int32 v48 = v196.n128_u32[1];
      __int32 v52 = v197.i32[1];
      int v49 = v194;
      uint64_t v43 = v25;
    }
    __n128 v53 = v187;
    v53.n128_u32[1] = v49;
    v53.n128_u32[2] = v48;
    *(void *)(v43 + 16) = v51;
    *(__n128 *)(v43 + 16 * v47 + 32) = v53;
    unint64_t v54 = *(void *)(v43 + 24);
    unint64_t v28 = v45 + 3;
    if ((uint64_t)(v45 + 3) > (uint64_t)(v54 >> 1))
    {
      sub_23473D210(v54 > 1, v45 + 3, 1);
      __int32 v52 = v197.i32[1];
      int v49 = v194;
      uint64_t v43 = v25;
    }
    long long v55 = v186;
    DWORD1(v55) = v49;
    DWORD2(v55) = DWORD1(v189);
    *(void *)(v43 + 16) = v28;
    *(_OWORD *)(v43 + 16 * v51 + 32) = v55;
    unint64_t v56 = *(void *)(v43 + 24);
    uint64_t v57 = v45 + 4;
    if ((uint64_t)(v45 + 4) > (uint64_t)(v56 >> 1))
    {
      sub_23473D210(v56 > 1, v45 + 4, 1);
      __int32 v52 = v197.i32[1];
      int v49 = v194;
      uint64_t v43 = v25;
    }
    int32x4_t v58 = v193;
    v58.i32[1] = v49;
    v58.i32[2] = v52;
    *(void *)(v43 + 16) = v57;
    *(int32x4_t *)(v43 + 16 * v28 + 32) = v58;
    uint64_t v59 = sub_2347EE810();
    *(void *)(v59 + 16) = 4;
    *(_OWORD *)(v59 + 32) = xmmword_2347F2000;
    *(_OWORD *)(v59 + 48) = xmmword_2347F2000;
    *(_OWORD *)(v59 + 64) = xmmword_2347F2000;
    *(_OWORD *)(v59 + 80) = xmmword_2347F2000;
    unint64_t v60 = v26[2];
    if (!v60)
    {
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      sub_234745638(v60 > 1, v42, 1);
      uint64_t v67 = v199;
      goto LABEL_32;
    }
    if (v60 == 1) {
      goto LABEL_200;
    }
    unint64_t v60 = *(void *)(v43 + 16);
    if (v60 < 2) {
      goto LABEL_201;
    }
    unint64_t v45 = v59;
    int32x4_t v193 = *v41;
    long long v194 = *((_OWORD *)v26 + 3);
    int32x4_t v61 = *(int32x4_t *)(v43 + 32);
    __n128 v195 = *(__n128 *)(v43 + 48);
    __n128 v196 = (__n128)v61;
    *(float32x2_t *)v61.i8 = vsub_f32(0, v9);
    int32x4_t v197 = vtrn2q_s32(vrev64q_s32(vzip1q_s32(v61, v61)), (int32x4_t)0);
    uint64_t v62 = sub_2347EE810();
    *(void *)(v62 + 16) = 4;
    *(int32x4_t *)(v62 + 32) = v197;
    *(int32x4_t *)(v62 + 48) = v197;
    *(int32x4_t *)(v62 + 64) = v197;
    *(int32x4_t *)(v62 + 80) = v197;
    unint64_t v60 = v26[2];
    if (v60 < 3) {
      goto LABEL_202;
    }
    unint64_t v60 = *(void *)(v43 + 16);
    if (v60 < 3) {
      goto LABEL_203;
    }
    float32x2_t v41 = (int32x4_t *)v62;
    long long v186 = *((_OWORD *)v26 + 3);
    __n128 v187 = *((__n128 *)v26 + 4);
    __n128 v188 = *(__n128 *)(v43 + 64);
    long long v189 = *(_OWORD *)(v43 + 48);
    v63.i32[1] = 0;
    v63.i32[3] = 0;
    *(float *)v63.i32 = 0.0 - v192.n128_f32[0];
    *(float *)&v63.i32[2] = 0.0 - v191.n128_f32[1];
    int32x4_t v197 = v63;
    uint64_t v64 = sub_2347EE810();
    *(void *)(v64 + 16) = 4;
    *(int32x4_t *)(v64 + 32) = v197;
    *(int32x4_t *)(v64 + 48) = v197;
    *(int32x4_t *)(v64 + 64) = v197;
    *(int32x4_t *)(v64 + 80) = v197;
    unint64_t v60 = v26[2];
    if (v60 < 4) {
      goto LABEL_204;
    }
    unint64_t v60 = *(void *)(v43 + 16);
    if (v60 < 4) {
      goto LABEL_205;
    }
    uint64_t v57 = v64;
    long long v184 = *((_OWORD *)v26 + 4);
    long long v185 = *((_OWORD *)v26 + 5);
    int32x4_t v65 = *(int32x4_t *)(v43 + 64);
    __n128 v191 = *(__n128 *)(v43 + 80);
    __n128 v192 = (__n128)v65;
    *(float32x2_t *)v65.i8 = vsub_f32(0, v15);
    int32x4_t v198 = vtrn2q_s32(vrev64q_s32(vzip1q_s32(v65, v65)), (int32x4_t)0);
    unint64_t v28 = sub_2347EE810();
    *(void *)(v28 + 16) = 4;
    *(int32x4_t *)(v28 + 32) = v198;
    *(int32x4_t *)(v28 + 48) = v198;
    *(int32x4_t *)(v28 + 64) = v198;
    *(int32x4_t *)(v28 + 80) = v198;
    long long v180 = *((_OWORD *)v26 + 5);
    long long v181 = *((_OWORD *)v26 + 2);
    long long v182 = *(_OWORD *)(v43 + 32);
    int32x4_t v197 = vtrn2q_s32(vzip1q_s32(v190, v190), (int32x4_t)0);
    int32x4_t v190 = *(int32x4_t *)(v43 + 80);
    uint64_t v66 = sub_2347EE810();
    *(void *)(v66 + 16) = 4;
    *(int32x4_t *)(v66 + 32) = v197;
    *(int32x4_t *)(v66 + 48) = v197;
    *(int32x4_t *)(v66 + 64) = v197;
    *(int32x4_t *)(v66 + 80) = v197;
    uint64_t v183 = v66;
    unint64_t v206 = v42;
    unint64_t v207 = v26;
    uint64_t v199 = v25;
    float32x4_t v205 = &unk_26E76FF20;
    sub_234745638(0, 6, 0);
    unint64_t v27 = v26[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FF78 + v27);
    if (__CFADD__(dword_26E76FF78, v27)) {
      goto LABEL_193;
    }
    uint64_t v67 = v25;
    unint64_t v25 = *(void *)(v25 + 16);
    unint64_t v60 = *(void *)(v199 + 24);
    unint64_t v42 = v25 + 1;
    if (v25 >= v60 >> 1) {
      goto LABEL_206;
    }
LABEL_32:
    *(void *)(v67 + 16) = v42;
    *(_DWORD *)(v67 + 4 * v25 + 32) = v30;
    unint64_t v27 = v26[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FF7C + v27);
    if (__CFADD__(dword_26E76FF7C, v27)) {
      goto LABEL_193;
    }
    uint64_t v199 = v67;
    unint64_t v68 = *(void *)(v67 + 24);
    unint64_t v69 = v25 + 2;
    if (v42 >= v68 >> 1)
    {
      v197.i64[0] = v25 + 2;
      sub_234745638(v68 > 1, v25 + 2, 1);
      unint64_t v69 = v25 + 2;
      uint64_t v67 = v199;
    }
    *(void *)(v67 + 16) = v69;
    *(_DWORD *)(v67 + 4 * v42 + 32) = v30;
    unint64_t v27 = v26[2];
    if (HIDWORD(v27))
    {
LABEL_224:
      uint64_t result = (void *)sub_2347EEE90();
      __break(1u);
      return result;
    }
    int64_t v30 = (dword_26E76FF80 + v27);
    if (__CFADD__(dword_26E76FF80, v27)) {
      goto LABEL_193;
    }
    uint64_t v199 = v67;
    unint64_t v25 = *(void *)(v67 + 16);
    unint64_t v70 = *(void *)(v67 + 24);
    unint64_t v71 = v25 + 1;
    if (v25 >= v70 >> 1)
    {
      sub_234745638(v70 > 1, v25 + 1, 1);
      uint64_t v67 = v199;
    }
    *(void *)(v67 + 16) = v71;
    *(_DWORD *)(v67 + 4 * v25 + 32) = v30;
    unint64_t v27 = v26[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FF84 + v27);
    if (__CFADD__(dword_26E76FF84, v27)) {
      goto LABEL_193;
    }
    uint64_t v199 = v67;
    unint64_t v72 = *(void *)(v67 + 24);
    unint64_t v73 = v25 + 2;
    if (v71 >= v72 >> 1)
    {
      v197.i64[0] = v25 + 2;
      sub_234745638(v72 > 1, v25 + 2, 1);
      unint64_t v73 = v25 + 2;
      uint64_t v67 = v199;
    }
    *(void *)(v67 + 16) = v73;
    *(_DWORD *)(v67 + 4 * v71 + 32) = v30;
    unint64_t v27 = v26[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FF88 + v27);
    if (__CFADD__(dword_26E76FF88, v27)) {
      goto LABEL_193;
    }
    uint64_t v199 = v67;
    unint64_t v25 = *(void *)(v67 + 16);
    unint64_t v74 = *(void *)(v67 + 24);
    unint64_t v75 = v25 + 1;
    if (v25 >= v74 >> 1)
    {
      sub_234745638(v74 > 1, v25 + 1, 1);
      uint64_t v67 = v199;
    }
    *(void *)(v67 + 16) = v75;
    *(_DWORD *)(v67 + 4 * v25 + 32) = v30;
    unint64_t v27 = v26[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FF8C + v27);
    if (__CFADD__(dword_26E76FF8C, v27))
    {
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
      goto LABEL_197;
    }
    uint64_t v200 = v67;
    unint64_t v76 = *(void *)(v67 + 24);
    unint64_t v77 = v25 + 2;
    if (v75 >= v76 >> 1)
    {
      v197.i64[0] = v25 + 2;
      sub_234745638(v76 > 1, v25 + 2, 1);
      unint64_t v77 = v25 + 2;
      uint64_t v67 = v200;
    }
    *(void *)(v67 + 16) = v77;
    *(_DWORD *)(v67 + 4 * v75 + 32) = v30;
    sub_2346D97CC(v67);
    sub_2346D9684(v43);
    sub_2346D9684(v45);
    uint64_t v199 = MEMORY[0x263F8EE78];
    sub_234745638(0, 6, 0);
    __n128 v78 = v207;
    unint64_t v27 = v207[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    unint64_t v25 = (dword_26E76FFB0 + v27);
    if (__CFADD__(dword_26E76FFB0, v27)) {
      goto LABEL_194;
    }
    uint64_t v79 = v199;
    unint64_t v81 = *(void *)(v199 + 16);
    unint64_t v80 = *(void *)(v199 + 24);
    unint64_t v82 = v81 + 1;
    if (v81 >= v80 >> 1)
    {
      sub_234745638(v80 > 1, v81 + 1, 1);
      uint64_t v79 = v199;
    }
    *(void *)(v79 + 16) = v82;
    *(_DWORD *)(v79 + 4 * v81 + 32) = v25;
    unint64_t v27 = v207[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFB4 + v27);
    if (__CFADD__(dword_26E76FFB4, v27)) {
      goto LABEL_194;
    }
    uint64_t v199 = v79;
    unint64_t v83 = *(void *)(v79 + 24);
    int64_t v84 = v81 + 2;
    if (v82 >= v83 >> 1)
    {
      sub_234745638(v83 > 1, v84, 1);
      uint64_t v79 = v199;
    }
    *(void *)(v79 + 16) = v84;
    *(_DWORD *)(v79 + 4 * v82 + 32) = v30;
    unint64_t v27 = v207[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFB8 + v27);
    if (__CFADD__(dword_26E76FFB8, v27)) {
      goto LABEL_194;
    }
    uint64_t v199 = v79;
    unint64_t v86 = *(void *)(v79 + 16);
    unint64_t v85 = *(void *)(v79 + 24);
    unint64_t v87 = v86 + 1;
    if (v86 >= v85 >> 1)
    {
      sub_234745638(v85 > 1, v86 + 1, 1);
      uint64_t v79 = v199;
    }
    *(void *)(v79 + 16) = v87;
    *(_DWORD *)(v79 + 4 * v86 + 32) = v30;
    unint64_t v27 = v207[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFBC + v27);
    if (__CFADD__(dword_26E76FFBC, v27)) {
      goto LABEL_194;
    }
    uint64_t v199 = v79;
    unint64_t v88 = *(void *)(v79 + 24);
    int64_t v89 = v86 + 2;
    if (v87 >= v88 >> 1)
    {
      sub_234745638(v88 > 1, v89, 1);
      uint64_t v79 = v199;
    }
    *(void *)(v79 + 16) = v89;
    *(_DWORD *)(v79 + 4 * v87 + 32) = v30;
    unint64_t v27 = v207[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFC0 + v27);
    if (__CFADD__(dword_26E76FFC0, v27)) {
      goto LABEL_194;
    }
    uint64_t v199 = v79;
    unint64_t v91 = *(void *)(v79 + 16);
    unint64_t v90 = *(void *)(v79 + 24);
    unint64_t v92 = v91 + 1;
    if (v91 >= v90 >> 1)
    {
      sub_234745638(v90 > 1, v91 + 1, 1);
      uint64_t v79 = v199;
    }
    *(void *)(v79 + 16) = v92;
    *(_DWORD *)(v79 + 4 * v91 + 32) = v30;
    unint64_t v27 = v207[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFC4 + v27);
    if (__CFADD__(dword_26E76FFC4, v27)) {
      goto LABEL_194;
    }
    uint64_t v201 = v79;
    unint64_t v93 = *(void *)(v79 + 24);
    unint64_t v94 = v91 + 2;
    if (v92 >= v93 >> 1)
    {
      sub_234745638(v93 > 1, v94, 1);
      uint64_t v79 = v201;
    }
    *(void *)(v79 + 16) = v94;
    *(_DWORD *)(v79 + 4 * v92 + 32) = v30;
    sub_2346D97CC(v79);
    int64_t v96 = v207[2];
    int64_t v97 = v96 + 4;
    unint64_t v25 = MEMORY[0x263F8EE78];
    if (__OFADD__(v96, 4))
    {
      __break(1u);
LABEL_208:
      __n128 v78 = sub_2346FA354((void *)(v95 > 1), v97, 1, v78);
      unint64_t v95 = v78[3];
      unint64_t v99 = v95 >> 1;
      goto LABEL_84;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || (unint64_t v95 = v207[3], v99 = v95 >> 1, (uint64_t)(v95 >> 1) < v97))
    {
      if (v96 <= v97) {
        int64_t v100 = v96 + 4;
      }
      else {
        int64_t v100 = v96;
      }
      __n128 v78 = sub_2346FA354((void *)isUniquelyReferenced_nonNull_native, v100, 1, v207);
      unint64_t v95 = v78[3];
      unint64_t v99 = v95 >> 1;
    }
    unint64_t v94 = v78[2];
    int64_t v97 = v94 + 1;
    if (v99 <= v94) {
      goto LABEL_208;
    }
LABEL_84:
    v78[2] = v97;
    *(int32x4_t *)&v78[2 * v94 + 4] = v193;
    unint64_t v101 = v94 + 2;
    if ((uint64_t)v99 < (uint64_t)(v94 + 2)) {
      __n128 v78 = sub_2346FA354((void *)(v95 > 1), v94 + 2, 1, v78);
    }
    v78[2] = v101;
    *(_OWORD *)&v78[2 * v97 + 4] = v194;
    unint64_t v102 = v78[3];
    unint64_t v103 = v94 + 3;
    if ((uint64_t)(v94 + 3) > (uint64_t)(v102 >> 1)) {
      __n128 v78 = sub_2346FA354((void *)(v102 > 1), v94 + 3, 1, v78);
    }
    v78[2] = v103;
    *(__n128 *)&v78[2 * v101 + 4] = v195;
    unint64_t v104 = v78[3];
    if ((uint64_t)(v94 + 4) > (uint64_t)(v104 >> 1)) {
      __n128 v78 = sub_2346FA354((void *)(v104 > 1), v94 + 4, 1, v78);
    }
    v78[2] = v94 + 4;
    *(__n128 *)&v78[2 * v103 + 4] = v196;
    unint64_t v207 = v78;
    sub_2346D9684((uint64_t)v41);
    uint64_t v199 = v25;
    sub_234745638(0, 6, 0);
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFE8 + v27);
    if (__CFADD__(dword_26E76FFE8, v27)) {
      goto LABEL_195;
    }
    uint64_t v105 = v25;
    unint64_t v107 = *(void *)(v25 + 16);
    unint64_t v106 = *(void *)(v25 + 24);
    unint64_t v108 = v107 + 1;
    if (v107 >= v106 >> 1)
    {
      sub_234745638(v106 > 1, v107 + 1, 1);
      uint64_t v105 = v25;
    }
    *(void *)(v105 + 16) = v108;
    *(_DWORD *)(v105 + 4 * v107 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFEC + v27);
    if (__CFADD__(dword_26E76FFEC, v27)) {
      goto LABEL_195;
    }
    uint64_t v199 = v105;
    unint64_t v109 = *(void *)(v105 + 24);
    int64_t v110 = v107 + 2;
    if (v108 >= v109 >> 1)
    {
      sub_234745638(v109 > 1, v110, 1);
      uint64_t v105 = v199;
    }
    *(void *)(v105 + 16) = v110;
    *(_DWORD *)(v105 + 4 * v108 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFF0 + v27);
    if (__CFADD__(dword_26E76FFF0, v27)) {
      goto LABEL_195;
    }
    uint64_t v199 = v105;
    unint64_t v112 = *(void *)(v105 + 16);
    unint64_t v111 = *(void *)(v105 + 24);
    unint64_t v113 = v112 + 1;
    if (v112 >= v111 >> 1)
    {
      sub_234745638(v111 > 1, v112 + 1, 1);
      uint64_t v105 = v199;
    }
    *(void *)(v105 + 16) = v113;
    *(_DWORD *)(v105 + 4 * v112 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFF4 + v27);
    if (__CFADD__(dword_26E76FFF4, v27)) {
      goto LABEL_195;
    }
    uint64_t v199 = v105;
    unint64_t v114 = *(void *)(v105 + 24);
    int64_t v115 = v112 + 2;
    if (v113 >= v114 >> 1)
    {
      sub_234745638(v114 > 1, v115, 1);
      uint64_t v105 = v199;
    }
    *(void *)(v105 + 16) = v115;
    *(_DWORD *)(v105 + 4 * v113 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFF8 + v27);
    if (__CFADD__(dword_26E76FFF8, v27)) {
      goto LABEL_195;
    }
    uint64_t v199 = v105;
    unint64_t v117 = *(void *)(v105 + 16);
    unint64_t v116 = *(void *)(v105 + 24);
    unint64_t v118 = v117 + 1;
    if (v117 >= v116 >> 1)
    {
      sub_234745638(v116 > 1, v117 + 1, 1);
      uint64_t v105 = v199;
    }
    *(void *)(v105 + 16) = v118;
    *(_DWORD *)(v105 + 4 * v117 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E76FFFC + v27);
    if (__CFADD__(dword_26E76FFFC, v27)) {
      goto LABEL_195;
    }
    uint64_t v202 = v105;
    unint64_t v119 = *(void *)(v105 + 24);
    int64_t v120 = v117 + 2;
    if (v118 >= v119 >> 1)
    {
      sub_234745638(v119 > 1, v120, 1);
      uint64_t v105 = v202;
    }
    *(void *)(v105 + 16) = v120;
    *(_DWORD *)(v105 + 4 * v118 + 32) = v30;
    sub_2346D97CC(v105);
    unint64_t v121 = v78[2];
    int64_t v122 = v121 + 4;
    if (__OFADD__(v121, 4))
    {
      __break(1u);
    }
    else
    {
      unint64_t v123 = v78[3];
      unint64_t v124 = v123 >> 1;
      if ((uint64_t)(v123 >> 1) >= v122) {
        goto LABEL_116;
      }
    }
    int64_t v177 = (uint64_t)v121 <= v122 ? v121 + 4 : v121;
    __n128 v78 = sub_2346FA354((void *)1, v177, 1, v78);
    unint64_t v121 = v78[2];
    unint64_t v123 = v78[3];
    unint64_t v124 = v123 >> 1;
LABEL_116:
    unint64_t v125 = v121 + 1;
    if (v124 <= v121)
    {
      __n128 v78 = sub_2346FA354((void *)(v123 > 1), v121 + 1, 1, v78);
      unint64_t v123 = v78[3];
      unint64_t v124 = v123 >> 1;
    }
    v78[2] = v125;
    *(_OWORD *)&v78[2 * v121 + 4] = v186;
    unint64_t v126 = v121 + 2;
    if ((uint64_t)v124 < (uint64_t)(v121 + 2)) {
      __n128 v78 = sub_2346FA354((void *)(v123 > 1), v121 + 2, 1, v78);
    }
    v78[2] = v126;
    *(__n128 *)&v78[2 * v125 + 4] = v187;
    unint64_t v127 = v78[3];
    unint64_t v128 = v121 + 3;
    if ((uint64_t)(v121 + 3) > (uint64_t)(v127 >> 1)) {
      __n128 v78 = sub_2346FA354((void *)(v127 > 1), v121 + 3, 1, v78);
    }
    v78[2] = v128;
    *(__n128 *)&v78[2 * v126 + 4] = v188;
    unint64_t v129 = v78[3];
    if ((uint64_t)(v121 + 4) > (uint64_t)(v129 >> 1)) {
      __n128 v78 = sub_2346FA354((void *)(v129 > 1), v121 + 4, 1, v78);
    }
    v78[2] = v121 + 4;
    *(_OWORD *)&v78[2 * v128 + 4] = v189;
    unint64_t v207 = v78;
    sub_2346D9684(v57);
    uint64_t v199 = v25;
    sub_234745638(0, 6, 0);
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E770020 + v27);
    if (__CFADD__(dword_26E770020, v27)) {
      goto LABEL_196;
    }
    uint64_t v130 = v25;
    unint64_t v132 = *(void *)(v25 + 16);
    unint64_t v131 = *(void *)(v25 + 24);
    unint64_t v133 = v132 + 1;
    if (v132 >= v131 >> 1)
    {
      sub_234745638(v131 > 1, v132 + 1, 1);
      uint64_t v130 = v25;
    }
    *(void *)(v130 + 16) = v133;
    *(_DWORD *)(v130 + 4 * v132 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E770024 + v27);
    if (__CFADD__(dword_26E770024, v27)) {
      goto LABEL_196;
    }
    uint64_t v199 = v130;
    unint64_t v134 = *(void *)(v130 + 24);
    int64_t v135 = v132 + 2;
    if (v133 >= v134 >> 1)
    {
      sub_234745638(v134 > 1, v135, 1);
      uint64_t v130 = v199;
    }
    *(void *)(v130 + 16) = v135;
    *(_DWORD *)(v130 + 4 * v133 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E770028 + v27);
    if (__CFADD__(dword_26E770028, v27)) {
      goto LABEL_196;
    }
    uint64_t v199 = v130;
    unint64_t v137 = *(void *)(v130 + 16);
    unint64_t v136 = *(void *)(v130 + 24);
    unint64_t v138 = v137 + 1;
    if (v137 >= v136 >> 1)
    {
      sub_234745638(v136 > 1, v137 + 1, 1);
      uint64_t v130 = v199;
    }
    *(void *)(v130 + 16) = v138;
    *(_DWORD *)(v130 + 4 * v137 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E77002C + v27);
    if (__CFADD__(dword_26E77002C, v27)) {
      goto LABEL_196;
    }
    uint64_t v199 = v130;
    unint64_t v139 = *(void *)(v130 + 24);
    int64_t v140 = v137 + 2;
    if (v138 >= v139 >> 1)
    {
      sub_234745638(v139 > 1, v140, 1);
      uint64_t v130 = v199;
    }
    *(void *)(v130 + 16) = v140;
    *(_DWORD *)(v130 + 4 * v138 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E770030 + v27);
    if (__CFADD__(dword_26E770030, v27)) {
      goto LABEL_196;
    }
    uint64_t v199 = v130;
    unint64_t v142 = *(void *)(v130 + 16);
    unint64_t v141 = *(void *)(v130 + 24);
    unint64_t v143 = v142 + 1;
    if (v142 >= v141 >> 1)
    {
      sub_234745638(v141 > 1, v142 + 1, 1);
      uint64_t v130 = v199;
    }
    *(void *)(v130 + 16) = v143;
    *(_DWORD *)(v130 + 4 * v142 + 32) = v30;
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E770034 + v27);
    if (__CFADD__(dword_26E770034, v27)) {
      goto LABEL_196;
    }
    uint64_t v203 = v130;
    unint64_t v144 = *(void *)(v130 + 24);
    int64_t v145 = v142 + 2;
    if (v143 >= v144 >> 1)
    {
      sub_234745638(v144 > 1, v145, 1);
      uint64_t v130 = v203;
    }
    *(void *)(v130 + 16) = v145;
    *(_DWORD *)(v130 + 4 * v143 + 32) = v30;
    sub_2346D97CC(v130);
    unint64_t v146 = v78[2];
    int64_t v147 = v146 + 4;
    if (__OFADD__(v146, 4))
    {
      __break(1u);
    }
    else
    {
      unint64_t v148 = v78[3];
      unint64_t v149 = v148 >> 1;
      if ((uint64_t)(v148 >> 1) >= v147) {
        goto LABEL_150;
      }
    }
    int64_t v178 = (uint64_t)v146 <= v147 ? v146 + 4 : v146;
    __n128 v78 = sub_2346FA354((void *)1, v178, 1, v78);
    unint64_t v146 = v78[2];
    unint64_t v148 = v78[3];
    unint64_t v149 = v148 >> 1;
LABEL_150:
    unint64_t v150 = v146 + 1;
    if (v149 <= v146)
    {
      __n128 v78 = sub_2346FA354((void *)(v148 > 1), v146 + 1, 1, v78);
      unint64_t v148 = v78[3];
      unint64_t v149 = v148 >> 1;
    }
    v78[2] = v150;
    *(_OWORD *)&v78[2 * v146 + 4] = v184;
    unint64_t v151 = v146 + 2;
    if ((uint64_t)v149 < (uint64_t)(v146 + 2)) {
      __n128 v78 = sub_2346FA354((void *)(v148 > 1), v146 + 2, 1, v78);
    }
    v78[2] = v151;
    *(_OWORD *)&v78[2 * v150 + 4] = v185;
    unint64_t v152 = v78[3];
    unint64_t v153 = v146 + 3;
    if ((uint64_t)(v146 + 3) > (uint64_t)(v152 >> 1)) {
      __n128 v78 = sub_2346FA354((void *)(v152 > 1), v146 + 3, 1, v78);
    }
    v78[2] = v153;
    *(__n128 *)&v78[2 * v151 + 4] = v191;
    unint64_t v154 = v78[3];
    if ((uint64_t)(v146 + 4) > (uint64_t)(v154 >> 1)) {
      __n128 v78 = sub_2346FA354((void *)(v154 > 1), v146 + 4, 1, v78);
    }
    v78[2] = v146 + 4;
    *(__n128 *)&v78[2 * v153 + 4] = v192;
    unint64_t v207 = v78;
    sub_2346D9684(v28);
    uint64_t v199 = v25;
    sub_234745638(0, 6, 0);
    unint64_t v27 = v78[2];
    if (HIDWORD(v27)) {
      goto LABEL_224;
    }
    int64_t v30 = (dword_26E770058 + v27);
    if (!__CFADD__(dword_26E770058, v27))
    {
      uint64_t v155 = v25;
      unint64_t v157 = *(void *)(v25 + 16);
      unint64_t v156 = *(void *)(v25 + 24);
      unint64_t v28 = v157 + 1;
      if (v157 >= v156 >> 1)
      {
        sub_234745638(v156 > 1, v157 + 1, 1);
        uint64_t v155 = v25;
      }
      *(void *)(v155 + 16) = v28;
      *(_DWORD *)(v155 + 4 * v157 + 32) = v30;
      unint64_t v27 = v78[2];
      if (HIDWORD(v27)) {
        goto LABEL_224;
      }
      int64_t v30 = (dword_26E77005C + v27);
      if (!__CFADD__(dword_26E77005C, v27))
      {
        uint64_t v199 = v155;
        unint64_t v158 = *(void *)(v155 + 24);
        int64_t v159 = v157 + 2;
        if (v28 >= v158 >> 1)
        {
          sub_234745638(v158 > 1, v159, 1);
          uint64_t v155 = v199;
        }
        *(void *)(v155 + 16) = v159;
        *(_DWORD *)(v155 + 4 * v28 + 32) = v30;
        unint64_t v27 = v78[2];
        if (HIDWORD(v27)) {
          goto LABEL_224;
        }
        int64_t v30 = (dword_26E770060 + v27);
        if (!__CFADD__(dword_26E770060, v27))
        {
          uint64_t v199 = v155;
          unint64_t v161 = *(void *)(v155 + 16);
          unint64_t v160 = *(void *)(v155 + 24);
          unint64_t v28 = v161 + 1;
          if (v161 >= v160 >> 1)
          {
            sub_234745638(v160 > 1, v161 + 1, 1);
            uint64_t v155 = v199;
          }
          *(void *)(v155 + 16) = v28;
          *(_DWORD *)(v155 + 4 * v161 + 32) = v30;
          unint64_t v27 = v78[2];
          if (HIDWORD(v27)) {
            goto LABEL_224;
          }
          int64_t v30 = (dword_26E770064 + v27);
          if (!__CFADD__(dword_26E770064, v27))
          {
            uint64_t v199 = v155;
            unint64_t v162 = *(void *)(v155 + 24);
            int64_t v163 = v161 + 2;
            if (v28 >= v162 >> 1)
            {
              sub_234745638(v162 > 1, v163, 1);
              uint64_t v155 = v199;
            }
            *(void *)(v155 + 16) = v163;
            *(_DWORD *)(v155 + 4 * v28 + 32) = v30;
            unint64_t v27 = v78[2];
            if (HIDWORD(v27)) {
              goto LABEL_224;
            }
            int64_t v30 = (dword_26E770068 + v27);
            if (!__CFADD__(dword_26E770068, v27))
            {
              uint64_t v199 = v155;
              unint64_t v165 = *(void *)(v155 + 16);
              unint64_t v164 = *(void *)(v155 + 24);
              unint64_t v28 = v165 + 1;
              if (v165 >= v164 >> 1)
              {
                sub_234745638(v164 > 1, v165 + 1, 1);
                uint64_t v155 = v199;
              }
              *(void *)(v155 + 16) = v28;
              *(_DWORD *)(v155 + 4 * v165 + 32) = v30;
              unint64_t v27 = v78[2];
              if (HIDWORD(v27)) {
                goto LABEL_224;
              }
              int64_t v30 = (dword_26E77006C + v27);
              if (!__CFADD__(dword_26E77006C, v27)) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_197:
    __break(1u);
LABEL_198:
    sub_23473D210(v27 > 1, v30, 1);
    float32x4_t v26 = v207;
    unint64_t v27 = v207[3];
    int64_t v29 = v27 >> 1;
  }
  uint64_t v204 = v155;
  unint64_t v166 = *(void *)(v155 + 24);
  int64_t v167 = v165 + 2;
  if (v28 >= v166 >> 1)
  {
    sub_234745638(v166 > 1, v167, 1);
    uint64_t v155 = v204;
  }
  *(void *)(v155 + 16) = v167;
  *(_DWORD *)(v155 + 4 * v28 + 32) = v30;
  sub_2346D97CC(v155);
  int64_t v168 = v78[2];
  int64_t v169 = v168 + 4;
  if (__OFADD__(v168, 4))
  {
    __break(1u);
  }
  else
  {
    unint64_t v170 = v78[3];
    unint64_t v171 = v170 >> 1;
    if ((uint64_t)(v170 >> 1) >= v169) {
      goto LABEL_184;
    }
  }
  if (v168 <= v169) {
    int64_t v179 = v168 + 4;
  }
  else {
    int64_t v179 = v168;
  }
  __n128 v78 = sub_2346FA354((void *)1, v179, 1, v78);
  int64_t v168 = v78[2];
  unint64_t v170 = v78[3];
  unint64_t v171 = v170 >> 1;
LABEL_184:
  int64_t v172 = v168 + 1;
  if (v171 <= v168)
  {
    __n128 v78 = sub_2346FA354((void *)(v170 > 1), v168 + 1, 1, v78);
    unint64_t v170 = v78[3];
    unint64_t v171 = v170 >> 1;
  }
  v78[2] = v172;
  *(_OWORD *)&v78[2 * v168 + 4] = v180;
  int64_t v173 = v168 + 2;
  if ((uint64_t)v171 < v168 + 2) {
    __n128 v78 = sub_2346FA354((void *)(v170 > 1), v168 + 2, 1, v78);
  }
  v78[2] = v173;
  *(_OWORD *)&v78[2 * v172 + 4] = v181;
  unint64_t v174 = v78[3];
  int64_t v175 = v168 + 3;
  if (v168 + 3 > (uint64_t)(v174 >> 1)) {
    __n128 v78 = sub_2346FA354((void *)(v174 > 1), v168 + 3, 1, v78);
  }
  v78[2] = v175;
  *(_OWORD *)&v78[2 * v173 + 4] = v182;
  unint64_t v176 = v78[3];
  if (v168 + 4 > (uint64_t)(v176 >> 1)) {
    __n128 v78 = sub_2346FA354((void *)(v176 > 1), v168 + 4, 1, v78);
  }
  v78[2] = v168 + 4;
  *(int32x4_t *)&v78[2 * v175 + 4] = v190;
  sub_2346D9684(v183);
  type metadata accessor for RoomCaptureMesh();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v78;
  result[3] = v206;
  result[4] = v205;
  return result;
}

uint64_t sub_2346CD704(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScanItemStrut();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_2346CD760(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(*(void *)(*(void *)(v1 + 32) + 24) + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_2346CD7B4(uint64_t a1, void (*a2)(uint64_t, __n128))
{
  uint64_t v12 = MEMORY[0x263F8EE78];
  sub_23473D210(0, 0, 0);
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 32;
    do
    {
      a2(v5, *(__n128 *)(v6 + 16 * v5));
      unint64_t v9 = *(void *)(v12 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
      if (v9 >= v8 >> 1)
      {
        long long v11 = v7;
        sub_23473D210(v8 > 1, v9 + 1, 1);
        long long v7 = v11;
      }
      ++v5;
      *(void *)(v12 + 16) = v9 + 1;
      *(_OWORD *)(v12 + 16 * v9 + 32) = v7;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t sub_2346CD8BC(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(void *)(*(void *)(*(void *)(v1 + 32) + 24) + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_2346CD920(uint64_t a1, char **a2, float a3, float a4, float a5, float a6, float32x2_t a7, float a8, float a9)
{
  __float2 v21 = __sincosf_stret(a3);
  v20.f32[0] = v21.__cosval;
  float sinval = v21.__sinval;
  float v22 = a8;
  float v23 = a9;
  if (a3 < a4)
  {
    unint64_t v24 = *(void *)(*(void *)a1 + 16);
    unint64_t v25 = HIDWORD(v24);
    if (HIDWORD(v24))
    {
      uint64_t result = sub_2347EEE90();
      __break(1u);
      return result;
    }
    int v26 = v24 + 3;
    if (v24 >= 0xFFFFFFFD)
    {
      __break(1u);
    }
    else
    {
      unint64_t v9 = *a2;
      int64_t v10 = *((void *)*a2 + 2);
      int64_t v11 = v10 + 6;
      if (!__OFADD__(v10, 6))
      {
        float v64 = v21.__sinval;
        float cosval = v21.__cosval;
        uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (!isUniquelyReferenced_nonNull_native
          || (unint64_t v25 = *((void *)v9 + 3), v28 = v25 >> 1, (uint64_t)(v25 >> 1) < v11))
        {
          if (v10 <= v11) {
            int64_t v29 = v10 + 6;
          }
          else {
            int64_t v29 = v10;
          }
          unint64_t v9 = sub_2346FA360(isUniquelyReferenced_nonNull_native, v29, 1, v9);
          unint64_t v25 = *((void *)v9 + 3);
          unint64_t v28 = v25 >> 1;
        }
        LODWORD(v11) = v24 + 1;
        unint64_t v12 = *((void *)v9 + 2);
        int64_t v10 = v12 + 1;
        v20.i32[0] = LODWORD(v21.__cosval);
        float sinval = v21.__sinval;
        if (v28 > v12) {
          goto LABEL_12;
        }
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_32:
    uint64_t v57 = sub_2346FA360((char *)(v25 > 1), v10, 1, v9);
    float sinval = v64;
    v20.f32[0] = cosval;
    unint64_t v9 = v57;
    unint64_t v25 = *((void *)v57 + 3);
    unint64_t v28 = v25 >> 1;
LABEL_12:
    *((void *)v9 + 2) = v10;
    *(_DWORD *)&v9[4 * v12 + 32] = v24;
    unint64_t v30 = v12 + 2;
    if ((uint64_t)v28 < (uint64_t)(v12 + 2))
    {
      int32x4_t v58 = sub_2346FA360((char *)(v25 > 1), v12 + 2, 1, v9);
      float sinval = v64;
      v20.f32[0] = cosval;
      unint64_t v9 = v58;
    }
    *((void *)v9 + 2) = v30;
    *(_DWORD *)&v9[4 * v10 + 32] = v11;
    unint64_t v31 = *((void *)v9 + 3);
    unint64_t v32 = v12 + 3;
    if ((uint64_t)(v12 + 3) > (uint64_t)(v31 >> 1))
    {
      uint64_t v59 = sub_2346FA360((char *)(v31 > 1), v12 + 3, 1, v9);
      float sinval = v64;
      v20.f32[0] = cosval;
      unint64_t v9 = v59;
    }
    *((void *)v9 + 2) = v32;
    *(_DWORD *)&v9[4 * v30 + 32] = v26;
    unint64_t v33 = *((void *)v9 + 3);
    unint64_t v34 = v12 + 4;
    if ((uint64_t)(v12 + 4) > (uint64_t)(v33 >> 1))
    {
      unint64_t v60 = sub_2346FA360((char *)(v33 > 1), v12 + 4, 1, v9);
      float sinval = v64;
      v20.f32[0] = cosval;
      unint64_t v9 = v60;
    }
    *((void *)v9 + 2) = v34;
    *(_DWORD *)&v9[4 * v32 + 32] = v24;
    unint64_t v35 = *((void *)v9 + 3);
    unint64_t v36 = v12 + 5;
    if ((uint64_t)(v12 + 5) > (uint64_t)(v35 >> 1))
    {
      int32x4_t v61 = sub_2346FA360((char *)(v35 > 1), v12 + 5, 1, v9);
      float sinval = v64;
      v20.f32[0] = cosval;
      unint64_t v9 = v61;
    }
    *((void *)v9 + 2) = v36;
    *(_DWORD *)&v9[4 * v34 + 32] = v26;
    unint64_t v37 = *((void *)v9 + 3);
    if ((uint64_t)(v12 + 6) > (uint64_t)(v37 >> 1))
    {
      uint64_t v62 = sub_2346FA360((char *)(v37 > 1), v12 + 6, 1, v9);
      float sinval = v64;
      v20.f32[0] = cosval;
      unint64_t v9 = v62;
    }
    *((void *)v9 + 2) = v12 + 6;
    *(_DWORD *)&v9[4 * v36 + 32] = v24 + 2;
    *a2 = v9;
    float v22 = a8;
    float v23 = a9;
  }
  v20.f32[1] = sinval;
  float32x2_t v38 = vadd_f32(vmul_n_f32(v20, v22), a7);
  float32x2_t v39 = vsub_f32(a7, v38);
  float32x2_t v40 = vmul_f32(v39, v39);
  v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
  float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
  float32x2_t v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
  float32x2_t v43 = vmul_n_f32(v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
  v39.f32[0] = a5 * v43.f32[0];
  float32x2_t v71 = v43;
  v43.f32[0] = vmuls_lane_f32(a5, v43, 1);
  v40.f32[0] = (float)(a5 * 0.0) + v23;
  float v44 = v38.f32[1];
  float v63 = v38.f32[1] + v43.f32[0];
  __int32 v65 = v38.i32[0];
  long long v68 = __PAIR64__(v40.u32[0], v38.f32[0] + v39.f32[0]);
  unint64_t v45 = *(void **)a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_2346FA354(0, v45[2] + 1, 1, v45);
    unint64_t v45 = (void *)result;
  }
  long long v47 = v68;
  *((float *)&v47 + 2) = v63;
  unint64_t v49 = v45[2];
  unint64_t v48 = v45[3];
  int64_t v50 = v48 >> 1;
  unint64_t v51 = v49 + 1;
  float32x2_t v52 = v71;
  float v53 = a9;
  if (v48 >> 1 <= v49)
  {
    long long v69 = v47;
    uint64_t result = (uint64_t)sub_2346FA354((void *)(v48 > 1), v49 + 1, 1, v45);
    long long v47 = v69;
    float32x2_t v52 = v71;
    float v53 = a9;
    unint64_t v45 = (void *)result;
    unint64_t v48 = *(void *)(result + 24);
    int64_t v50 = v48 >> 1;
  }
  float v54 = v52.f32[1];
  v45[2] = v51;
  *(_OWORD *)&v45[2 * v49 + 4] = v47;
  int64_t v55 = v49 + 2;
  if (v50 < v55)
  {
    uint64_t result = (uint64_t)sub_2346FA354((void *)(v48 > 1), v55, 1, v45);
    v52.i32[0] = v71.i32[0];
    float v53 = a9;
    unint64_t v45 = (void *)result;
  }
  *(float32x2_t *)&long long v56 = vadd_f32((float32x2_t)__PAIR64__(LODWORD(v53), v65), vmul_n_f32((float32x2_t)COERCE_UNSIGNED_INT(0.0 - v52.f32[0]), a6));
  *((float *)&v56 + 2) = v44 + (float)((float)(0.0 - v54) * a6);
  HIDWORD(v56) = 0;
  v45[2] = v55;
  *(_OWORD *)&v45[2 * v51 + 4] = v56;
  *(void *)a1 = v45;
  return result;
}

void *sub_2346CDDA0(void *result, uint64_t a2, float a3, float a4, float32x2_t a5, float a6, float a7, float a8, float a9)
{
  unint64_t v24 = (char *)MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    char v10 = (char)result;
    float v15 = a4 - a3;
    float v23 = (float)a2;
    sub_2346CD920((uint64_t)&v25, &v24, (float)((float)(a4 - a3) * (float)(0.0 / (float)a2)) + a3, a4, a8, a9, a5, a6, a7);
    if (a2)
    {
      uint64_t v19 = 0;
      do
        sub_2346CD920((uint64_t)&v25, &v24, (float)(v15 * (float)((float)++v19 / v23)) + a3, a4, a8, a9, a5, a6, a7);
      while (a2 != v19);
    }
    if (v10)
    {
      float32x2_t v20 = (char *)sub_2347507C8((uint64_t)v24);
      uint64_t v21 = v25;
      uint64_t v22 = sub_234799DD0(*(void *)(v25 + 16), (__n128)xmmword_2347F2000);
    }
    else
    {
      uint64_t v21 = v25;
      uint64_t v22 = sub_234799DD0(*(void *)(v25 + 16), (__n128)xmmword_2347F1FF0);
      float32x2_t v20 = v24;
    }
    type metadata accessor for RoomCaptureMesh();
    uint64_t result = (void *)swift_allocObject();
    result[2] = v21;
    result[3] = v22;
    result[4] = v20;
  }
  return result;
}

void *sub_2346CDF10(char a1, float a2, float a3, float32x2_t a4, float a5, float a6, float a7, float a8, float a9)
{
  unint64_t v24 = (char *)MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  if (a2 >= a3)
  {
LABEL_8:
    if (a1)
    {
      float32x2_t v20 = (char *)sub_2347507C8((uint64_t)v24);
      uint64_t v21 = v25;
      uint64_t v22 = sub_234799DD0(*(void *)(v25 + 16), (__n128)xmmword_2347F2000);
    }
    else
    {
      uint64_t v21 = v25;
      uint64_t v22 = sub_234799DD0(*(void *)(v25 + 16), (__n128)xmmword_2347F1FF0);
      float32x2_t v20 = v24;
    }
    type metadata accessor for RoomCaptureMesh();
    uint64_t result = (void *)swift_allocObject();
    result[2] = v21;
    result[3] = v22;
    result[4] = v20;
  }
  else
  {
    uint64_t v17 = 0;
    while (1)
    {
      float v18 = (float)((float)((float)v17 * a9) + a2) <= a3 ? (float)((float)v17 * a9) + a2 : a3;
      uint64_t result = (void *)sub_2346CD920((uint64_t)&v25, &v24, v18, a3, a7, a8, a4, a5, a6);
      if (__OFADD__(v17, 1)) {
        break;
      }
      ++v17;
      if (v18 >= a3) {
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  return result;
}

void *sub_2346CE054(float *a1, uint64_t a2, char a3, char a4, double a5, float a6, float a7, float a8)
{
  uint64_t v136 = MEMORY[0x263F8EE78];
  uint64_t v137 = MEMORY[0x263F8EE78];
  uint64_t v135 = MEMORY[0x263F8EE78];
  float v12 = a1[5];
  float v14 = a1[6];
  float v13 = a1[7];
  float v114 = a1[4];
  __float2 v15 = __sincosf_stret(v114);
  float v16 = *(float *)&a5 + (float)(v15.__cosval * a6);
  float v122 = a6;
  float v17 = *((float *)&a5 + 1) + (float)(v15.__sinval * a6);
  __float2 v18 = __sincosf_stret(v12);
  v19.f32[0] = *(float *)&a5 - v16;
  v19.f32[1] = *((float *)&a5 + 1) - v17;
  float32x2_t v20 = vmul_f32(v19, v19);
  v20.i32[0] = vadd_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1)).u32[0];
  float32x2_t v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
  v22.n128_u64[0] = (unint64_t)vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
  float32x2_t v23 = vmul_n_f32(v19, vmul_f32((float32x2_t)v22.n128_u64[0], vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32((float32x2_t)v22.n128_u64[0], (float32x2_t)v22.n128_u64[0]))).f32[0]);
  v22.n128_u32[3] = 0;
  v22.n128_f32[0] = v16 + (float)(a7 * v23.f32[0]);
  float32x4_t v24 = (float32x4_t)v22.n128_u32[0];
  v24.f32[1] = (float)(a7 * 0.0) + v14;
  v24.f32[2] = v17 + vmuls_lane_f32(a7, v23, 1);
  v22.n128_f32[1] = (float)(a7 * 0.0) + v13;
  v22.n128_f32[2] = v24.f32[2];
  float v25 = (float)(0.0 - v23.f32[1]) * a8;
  v26.f32[0] = v16 + (float)((float)(0.0 - v23.f32[0]) * a8);
  float32x4_t v27 = (float32x4_t)v26.u32[0];
  v27.f32[1] = (float)(a8 * 0.0) + v14;
  v27.f32[2] = v17 + v25;
  v26.f32[1] = (float)(a8 * 0.0) + v13;
  v26.i64[1] = COERCE_UNSIGNED_INT(v17 + v25);
  sub_2346F3C94(v27, v24, v22, v26);
  uint64_t v29 = v28;
  if (a4)
  {
    sub_2346F3B60();
    uint64_t v31 = v30;
    swift_release();
    uint64_t v29 = v31;
  }
  char v121 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F19B0;
  *(void *)(inited + 32) = v29;
  unint64_t v127 = inited;
  sub_2347EE7F0();
  swift_retain();
  unint64_t v33 = sub_23474CE64(v127);
  swift_bridgeObjectRelease();
  uint64_t v34 = v33[4];
  int64_t v35 = *(void *)(v34 + 16);
  uint64_t v36 = MEMORY[0x263F8EE78];
  if (v35)
  {
    uint64_t v128 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_234745638(0, v35, 0);
    uint64_t v37 = 0;
    uint64_t v38 = v128;
    while (1)
    {
      unint64_t v39 = *(void *)(v36 + 16);
      if (HIDWORD(v39)) {
        goto LABEL_60;
      }
      int v40 = *(_DWORD *)(v34 + 4 * v37 + 32);
      int v41 = v40 + v39;
      if (__CFADD__(v40, v39))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      unint64_t v43 = *(void *)(v128 + 16);
      unint64_t v42 = *(void *)(v128 + 24);
      if (v43 >= v42 >> 1) {
        sub_234745638(v42 > 1, v43 + 1, 1);
      }
      ++v37;
      *(void *)(v128 + 16) = v43 + 1;
      *(_DWORD *)(v128 + 4 * v43 + 32) = v41;
      if (v35 == v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
  }
  uint64_t v38 = MEMORY[0x263F8EE78];
LABEL_12:
  float v44 = *(float *)&a5 + (float)(v18.__cosval * v122);
  float v45 = *((float *)&a5 + 1) + (float)(v18.__sinval * v122);
  v46.f32[0] = *(float *)&a5 - v44;
  v46.f32[1] = *((float *)&a5 + 1) - v45;
  float32x2_t v47 = vmul_f32(v46, v46);
  v47.i32[0] = vadd_f32(v47, (float32x2_t)vdup_lane_s32((int32x2_t)v47, 1)).u32[0];
  float32x2_t v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
  float32x2_t v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
  float32x2_t v50 = vmul_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]);
  v51.f32[0] = v44 + (float)((float)(0.0 - v50.f32[0]) * a8);
  __n128 v52 = (__n128)COERCE_UNSIGNED_INT(v44 + (float)(a7 * v50.f32[0]));
  v52.n128_f32[1] = (float)(a7 * 0.0) + v14;
  float32x4_t v53 = (float32x4_t)__PAIR64__((float)(a7 * 0.0) + v13, v44 + (float)(a7 * v50.f32[0]));
  float32x4_t v54 = (float32x4_t)v51.u32[0];
  v54.f32[1] = (float)(a8 * 0.0) + v14;
  v51.f32[1] = (float)(a8 * 0.0) + v13;
  v52.n128_f32[2] = v45 + vmuls_lane_f32(a7, v50, 1);
  v53.i32[2] = v52.n128_i32[2];
  v54.f32[2] = v45 + (float)((float)(0.0 - v50.f32[1]) * a8);
  float32x4_t v119 = v54;
  __n128 v120 = v52;
  v51.i64[1] = v54.u32[2];
  float32x4_t v117 = v51;
  float32x4_t v118 = v53;
  sub_2346D97CC(v38);
  uint64_t v55 = swift_bridgeObjectRetain();
  sub_2346D9684(v55);
  uint64_t v56 = swift_bridgeObjectRetain();
  sub_2346D9684(v56);
  sub_2346F3C94(v117, v118, v120, v119);
  uint64_t v58 = v57;
  if (v121)
  {
    sub_2346F3B60();
    uint64_t v60 = v59;
    swift_release();
    uint64_t v58 = v60;
  }
  uint64_t v61 = swift_initStackObject();
  *(_OWORD *)(v61 + 16) = xmmword_2347F19B0;
  *(void *)(v61 + 32) = v58;
  unint64_t v129 = v61;
  sub_2347EE7F0();
  swift_retain();
  uint64_t v62 = sub_23474CE64(v129);
  swift_bridgeObjectRelease();
  uint64_t v63 = v62[4];
  int64_t v64 = *(void *)(v63 + 16);
  uint64_t v65 = MEMORY[0x263F8EE78];
  if (v64)
  {
    uint64_t v130 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_234745638(0, v64, 0);
    uint64_t v66 = 0;
    uint64_t v65 = v130;
    while (1)
    {
      unint64_t v67 = *(void *)(v137 + 16);
      if (HIDWORD(v67)) {
        goto LABEL_60;
      }
      int v68 = *(_DWORD *)(v63 + 4 * v66 + 32);
      int v69 = v68 + v67;
      if (__CFADD__(v68, v67)) {
        goto LABEL_56;
      }
      unint64_t v71 = *(void *)(v130 + 16);
      unint64_t v70 = *(void *)(v130 + 24);
      if (v71 >= v70 >> 1) {
        sub_234745638(v70 > 1, v71 + 1, 1);
      }
      ++v66;
      *(void *)(v130 + 16) = v71 + 1;
      *(_DWORD *)(v130 + 4 * v71 + 32) = v69;
      if (v64 == v66)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_2346D97CC(v65);
  uint64_t v72 = swift_bridgeObjectRetain();
  sub_2346D9684(v72);
  uint64_t v73 = swift_bridgeObjectRetain();
  sub_2346D9684(v73);
  if (a3) {
    unint64_t v74 = sub_2346CDF10(v121 & 1, v114, v12, *(float32x2_t *)&a5, v122, v14, a7, a8, *(float *)&a2);
  }
  else {
    unint64_t v74 = sub_2346CDDA0((void *)(v121 & 1), a2, v114, v12, *(float32x2_t *)&a5, v122, v14, a7, a8);
  }
  unint64_t v75 = v74;
  uint64_t v76 = v74[4];
  int64_t v77 = *(void *)(v76 + 16);
  uint64_t v78 = MEMORY[0x263F8EE78];
  if (v77)
  {
    uint64_t v131 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_234745638(0, v77, 0);
    uint64_t v79 = 0;
    uint64_t v78 = v131;
    while (1)
    {
      unint64_t v80 = *(void *)(v137 + 16);
      if (HIDWORD(v80)) {
        break;
      }
      int v81 = *(_DWORD *)(v76 + 4 * v79 + 32);
      int v82 = v81 + v80;
      if (__CFADD__(v81, v80)) {
        goto LABEL_57;
      }
      unint64_t v84 = *(void *)(v131 + 16);
      unint64_t v83 = *(void *)(v131 + 24);
      if (v84 >= v83 >> 1) {
        sub_234745638(v83 > 1, v84 + 1, 1);
      }
      ++v79;
      *(void *)(v131 + 16) = v84 + 1;
      *(_DWORD *)(v131 + 4 * v84 + 32) = v82;
      if (v77 == v79)
      {
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
LABEL_60:
    uint64_t result = (void *)sub_2347EEE90();
    __break(1u);
    return result;
  }
LABEL_33:
  sub_2346D97CC(v78);
  uint64_t v85 = swift_bridgeObjectRetain();
  sub_2346D9684(v85);
  uint64_t v86 = swift_bridgeObjectRetain();
  sub_2346D9684(v86);
  uint64_t v87 = v75[4];
  int64_t v88 = *(void *)(v87 + 16);
  uint64_t v89 = MEMORY[0x263F8EE78];
  if (v88)
  {
    uint64_t v132 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_234745638(0, v88, 0);
    uint64_t v89 = v132;
    int64_t v90 = v88 + 7;
    while (v90 != 7)
    {
      unint64_t v91 = *(void *)(v137 + 16);
      if (HIDWORD(v91)) {
        goto LABEL_60;
      }
      int v92 = *(_DWORD *)(v87 + 4 * v90);
      int v93 = v92 + v91;
      if (__CFADD__(v92, v91)) {
        goto LABEL_59;
      }
      unint64_t v95 = *(void *)(v132 + 16);
      unint64_t v94 = *(void *)(v132 + 24);
      if (v95 >= v94 >> 1) {
        sub_234745638(v94 > 1, v95 + 1, 1);
      }
      *(void *)(v132 + 16) = v95 + 1;
      *(_DWORD *)(v132 + 4 * v95 + 32) = v93;
      if (--v90 == 7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_42:
  sub_2346D97CC(v89);
  uint64_t v96 = v75[2];
  int64_t v97 = *(void *)(v96 + 16);
  uint64_t v98 = MEMORY[0x263F8EE78];
  if (v97)
  {
    uint64_t v133 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_23473D210(0, v97, 0);
    uint64_t v99 = 0;
    uint64_t v98 = v133;
    unint64_t v100 = *(void *)(v133 + 16);
    LODWORD(v101) = 0;
    *((float *)&v101 + 1) = v13 - v14;
    do
    {
      long long v102 = *(_OWORD *)(v96 + 16 * v99 + 32);
      unint64_t v103 = *(void *)(v133 + 24);
      if (v100 >= v103 >> 1)
      {
        long long v125 = v101;
        long long v123 = *(_OWORD *)(v96 + 16 * v99 + 32);
        sub_23473D210(v103 > 1, v100 + 1, 1);
        long long v102 = v123;
        long long v101 = v125;
      }
      *(float32x2_t *)&long long v104 = vadd_f32(*(float32x2_t *)&v101, *(float32x2_t *)&v102);
      *((float *)&v104 + 2) = *((float *)&v102 + 2) + 0.0;
      HIDWORD(v104) = 0;
      ++v99;
      *(void *)(v133 + 16) = v100 + 1;
      *(_OWORD *)(v133 + 16 * v100++ + 32) = v104;
    }
    while (v97 != v99);
    swift_bridgeObjectRelease();
  }
  sub_2346D9684(v98);
  uint64_t v105 = v75[3];
  int64_t v106 = *(void *)(v105 + 16);
  if (v106)
  {
    uint64_t v134 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_23473D210(0, v106, 0);
    uint64_t v107 = 0;
    unint64_t v108 = *(void *)(v134 + 16);
    do
    {
      long long v109 = *(_OWORD *)(v105 + 16 * v107 + 32);
      unint64_t v110 = *(void *)(v134 + 24);
      if (v108 >= v110 >> 1)
      {
        long long v126 = *(_OWORD *)(v105 + 16 * v107 + 32);
        sub_23473D210(v110 > 1, v108 + 1, 1);
        long long v109 = v126;
      }
      *(float32x2_t *)&long long v111 = vsub_f32(0, *(float32x2_t *)&v109);
      *((float *)&v111 + 2) = 0.0 - *((float *)&v109 + 2);
      HIDWORD(v111) = 0;
      ++v107;
      *(void *)(v134 + 16) = v108 + 1;
      *(_OWORD *)(v134 + 16 * v108++ + 32) = v111;
    }
    while (v106 != v107);
    swift_bridgeObjectRelease();
  }
  uint64_t v112 = swift_bridgeObjectRetain();
  sub_2346D9684(v112);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for RoomCaptureMesh();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v137;
  result[3] = v136;
  result[4] = v135;
  return result;
}

uint64_t type metadata accessor for Constants()
{
  return self;
}

uint64_t sub_2346CEA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_2346CEA48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_2346CEA7C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_2346CEA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_2346CEAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_2346CEAB8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_2346CEACC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_2346CEAE0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_2346CEAF4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_2346CEB08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_2346CEB1C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t sub_2346CEB30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t sub_2346CEB44(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t sub_2346CEB58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t sub_2346CEB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t sub_2346CEB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t sub_2346CEBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t sub_2346CEBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t sub_2346CEBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t sub_2346CEC20(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 64))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a2 + 112))(v5, a1, a2, a3);
}

uint64_t sub_2346CECB0(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 72))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a2 + 120))(v5, a1, a2, a3);
}

uint64_t sub_2346CED40(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 80))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a2 + 128))(v5, a1, a2, a3);
}

uint64_t sub_2346CEDD0(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 88))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(a2 + 136))(v5, a1, a2, a3);
}

uint64_t sub_2346CEE60@<X0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v55 = a5;
  unint64_t v56 = a2;
  uint64_t v57 = a4;
  LODWORD(v51) = a1;
  uint64_t v54 = a6;
  uint64_t v7 = sub_2347EE310();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v42 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2347EE1F0();
  MEMORY[0x270FA5388](v9 - 8);
  float32x4_t v53 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2347EE1D0();
  MEMORY[0x270FA5388](v11 - 8);
  __n128 v52 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_2347EE250();
  MEMORY[0x270FA5388](v13 - 8);
  float32x2_t v50 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACB28);
  MEMORY[0x270FA5388](v15 - 8);
  float32x2_t v48 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_2347EE170();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v46 = v17;
  uint64_t v47 = v18;
  MEMORY[0x270FA5388](v17);
  float32x2_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_2347EE130();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  float v45 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  float32x4_t v26 = (char *)&v41 - v25;
  uint64_t v27 = sub_2347EE110();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v41 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  unint64_t v33 = (char *)&v41 - v32;
  if (!a3)
  {
    (*(void (**)(char *, void, uint64_t))(v28 + 104))((char *)&v41 - v32, *MEMORY[0x263F16600], v27);
    uint64_t v34 = sub_2347EE100();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
    unint64_t v35 = 0xD00000000000001BLL;
    if ((v34 & 1) == 0) {
      unint64_t v35 = 0xD00000000000001DLL;
    }
    unint64_t v56 = v35;
  }
  type metadata accessor for MetalConstants();
  swift_bridgeObjectRetain();
  swift_initStaticObject();
  sub_2346FFD78();
  sub_2347EE120();
  sub_2346FFD78();
  sub_2347EE160();
  uint64_t v51 = v22;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  float32x2_t v49 = v26;
  unint64_t v56 = v21;
  v36(v45, v26, v21);
  uint64_t v38 = v47;
  uint64_t v37 = v48;
  uint64_t v39 = v46;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v48, v20, v46);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v37, 0, 1, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v57, v27);
  sub_2347EE150();
  sub_2347EE1C0();
  sub_2347EE270();
  sub_2347EE1C0();
  sub_2347EE210();
  sub_2347EE1C0();
  sub_2347EE220();
  if (v55)
  {
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v42, *MEMORY[0x263F167D0], v44);
    sub_2347EE0D0();
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v39);
  return (*(uint64_t (**)(char *, unint64_t))(v51 + 8))(v49, v56);
}

uint64_t sub_2346CF4B8()
{
  return 24;
}

uint64_t sub_2346CF4C0()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687AC9F0);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687AC9F0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16608], v0);
  sub_2346CEE60(0, 0xD000000000000016, 0x80000002347FD080, (uint64_t)v3, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346CF600()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACA08);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA08);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16608], v0);
  sub_2346CEE60(0, 0xD000000000000016, 0x80000002347FD080, (uint64_t)v3, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346CF740()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACA20);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA20);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16608], v0);
  sub_2346CEE60(0, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346CF870(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(void *)(v1 + 96) = a1;
  sub_2347ED8E0();
  swift_unknownObjectRetain();
  sub_2347ED880();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2347F0FA0;
  uint64_t v5 = qword_2687ABD28;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_2347EE280();
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)qword_2687ACA20);
  uint64_t v8 = MEMORY[0x263F165F8];
  *(void *)(v4 + 56) = v6;
  *(void *)(v4 + 64) = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 32));
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v10(boxed_opaque_existential_1, v7, v6);
  sub_2347ED650();
  swift_allocObject();
  sub_2347ED640();
  swift_release();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2347F0FA0;
  if (qword_2687ABD18 != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v6, (uint64_t)qword_2687AC9F0);
  *(void *)(v11 + 56) = v6;
  *(void *)(v11 + 64) = MEMORY[0x263F165F8];
  uint64_t v13 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v11 + 32));
  v10(v13, v12, v6);
  swift_allocObject();
  sub_2347ED640();
  swift_release();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_2346CFAC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  __n128 v23 = a3;
  uint64_t v21 = a2;
  uint64_t v22 = a1;
  uint64_t v4 = sub_2347EE280();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v21 - v9;
  if (qword_2687ABD28 != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA20);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, v11, v4);
  uint64_t v13 = *(void *)(v3 + 96);
  uint64_t v14 = type metadata accessor for SimpleScanMaterial();
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v15 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v12(v8, (uint64_t)v10, v4);
  swift_unknownObjectRetain();
  uint64_t v16 = v24;
  uint64_t v17 = sub_23472C348((uint64_t)v8, v13, v22, 0, v23, v23);
  if (v16) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  uint64_t v19 = v17;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  float32x2_t v20 = v21;
  v21[3] = v14;
  v20[4] = (uint64_t)&off_26E774260;
  *float32x2_t v20 = v19;
  return result;
}

uint64_t type metadata accessor for OcclusionMaterialFactory()
{
  return self;
}

uint64_t sub_2346CFD10()
{
  return 4;
}

uint64_t sub_2346CFD18@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346CFDC0(a1, &qword_2687ABD18, (uint64_t)qword_2687AC9F0, (uint64_t)sub_2346CF4C0, a2, a3);
}

uint64_t sub_2346CFD50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346CFDC0(a1, &qword_2687ABD28, (uint64_t)qword_2687ACA20, (uint64_t)sub_2346CF740, a2, a3);
}

uint64_t sub_2346CFD88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346CFDC0(a1, &qword_2687ABD20, (uint64_t)qword_2687ACA08, (uint64_t)sub_2346CF600, a2, a3);
}

uint64_t sub_2346CFDC0@<X0>(uint64_t a1@<X0>, void *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v22 = a4;
  __n128 v21 = a6;
  uint64_t v12 = sub_2347EE280();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v6;
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v12, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17, v12);
  uint64_t v18 = *(void *)(v16 + 96);
  uint64_t updated = type metadata accessor for MeshUpdateScanMaterial();
  swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t result = sub_23472C348((uint64_t)v15, v18, a1, 0, v21, v21);
  if (!v7)
  {
    a5[3] = updated;
    a5[4] = (uint64_t)&off_26E774260;
    *a5 = result;
  }
  return result;
}

uint64_t sub_2346CFF40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346CFAC0(a1, a2, a3);
}

uint64_t sub_2346CFF64()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACA38);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA38);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16608], v0);
  sub_2346CEE60(0, 0, 0, (uint64_t)v3, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D0094()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACA50);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA50);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16608], v0);
  sub_2346CEE60(0, 0, 0, (uint64_t)v3, 1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D01C4()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACA68);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA68);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16608], v0);
  sub_2346CEE60(0, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D02F4(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v1 + 32) = _Q0;
  *(_OWORD *)(v1 + 48) = _Q0;
  *(_OWORD *)(v1 + 64) = _Q0;
  *(_OWORD *)(v1 + 80) = _Q0;
  *(void *)(v1 + 96) = a1;
  sub_2347ED8E0();
  swift_unknownObjectRetain();
  sub_2347ED880();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2347F0FA0;
  uint64_t v10 = qword_2687ABD40;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_2347EE280();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)qword_2687ACA68);
  uint64_t v13 = MEMORY[0x263F165F8];
  *(void *)(v9 + 56) = v11;
  *(void *)(v9 + 64) = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 32));
  uint64_t v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v15(boxed_opaque_existential_1, v12, v11);
  sub_2347ED650();
  swift_allocObject();
  sub_2347ED640();
  swift_release();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_2347F0FA0;
  if (qword_2687ABD30 != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v11, (uint64_t)qword_2687ACA38);
  *(void *)(v16 + 56) = v11;
  *(void *)(v16 + 64) = MEMORY[0x263F165F8];
  uint64_t v18 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v16 + 32));
  v15(v18, v17, v11);
  swift_allocObject();
  sub_2347ED640();
  swift_release();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_2346D0544@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D05EC(a1, &qword_2687ABD30, (uint64_t)qword_2687ACA38, a2, a3);
}

uint64_t sub_2346D057C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D05EC(a1, &qword_2687ABD40, (uint64_t)qword_2687ACA68, a2, a3);
}

uint64_t sub_2346D05B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D05EC(a1, &qword_2687ABD38, (uint64_t)qword_2687ACA50, a2, a3);
}

uint64_t sub_2346D05EC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  __n128 v32 = a5;
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  uint64_t v8 = sub_2347EE280();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v30 - v13;
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v8, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16(v14, v15, v8);
  uint64_t v17 = *(void *)(v5 + 96);
  uint64_t v18 = type metadata accessor for SimpleScanMaterial();
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v16(v12, (uint64_t)v14, v8);
  swift_unknownObjectRetain();
  __asm { FMOV            V1.4S, #1.0 }
  uint64_t v25 = v33;
  uint64_t v26 = sub_23472C348((uint64_t)v12, v17, v31, 0, v32, _Q1);
  if (v25) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  uint64_t v28 = v26;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  uint64_t v29 = v30;
  v30[3] = v18;
  v29[4] = (uint64_t)&off_26E774260;
  *uint64_t v29 = v28;
  return result;
}

uint64_t type metadata accessor for DebugMaterialFactory()
{
  return self;
}

__n128 sub_2346D082C()
{
  return (*v0)[2];
}

__n128 sub_2346D0838()
{
  return (*v0)[3];
}

__n128 sub_2346D0844()
{
  return (*v0)[4];
}

__n128 sub_2346D0850()
{
  return (*v0)[5];
}

uint64_t sub_2346D085C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D0544(a1, a2, a3);
}

uint64_t sub_2346D0880@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D05B4(a1, a2, a3);
}

uint64_t sub_2346D08A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D057C(a1, a2, a3);
}

uint64_t sub_2346D08C8()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACA80);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA80);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16600], v0);
  sub_2346CEE60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D09F8()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACA98);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA98);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16600], v0);
  sub_2346CEE60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D0B28()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACAB0);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACAB0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16600], v0);
  sub_2346CEE60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D0C58(uint64_t a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  return sub_2346D17FC(a1, &qword_2687ABD48, (uint64_t)qword_2687ACA80, _Q0);
}

uint64_t sub_2346D0C80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D138C(a1, &qword_2687ABD50, (uint64_t)qword_2687ACA98, a2, a3);
}

uint64_t sub_2346D0CB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D138C(a1, &qword_2687ABD48, (uint64_t)qword_2687ACA80, a2, a3);
}

uint64_t sub_2346D0CF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D138C(a1, &qword_2687ABD58, (uint64_t)qword_2687ACAB0, a2, a3);
}

void sub_2346D0D28(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  __n128 v27 = a3;
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v4 = sub_2347EE280();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v25 - v9;
  if (qword_2687ABD48 != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACA80);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, v11, v4);
  uint64_t v13 = *(void *)(v3 + 96);
  uint64_t v14 = type metadata accessor for SimpleScanMaterial();
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v15 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v12(v8, (uint64_t)v10, v4);
  swift_unknownObjectRetain();
  __asm { FMOV            V1.4S, #1.0 }
  uint64_t v21 = v28;
  uint64_t v22 = sub_23472C348((uint64_t)v8, v13, v26, 1, v27, _Q1);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  else
  {
    uint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    *(_DWORD *)(v23 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = v27.n128_u32[3];
    sub_2346D3990();
    uint64_t v24 = v25;
    v25[3] = v14;
    v24[4] = (uint64_t)&off_26E774260;
    *uint64_t v24 = v23;
  }
}

uint64_t type metadata accessor for DollhouseDebugMaterialFactory()
{
  return self;
}

uint64_t sub_2346D0F90()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t sub_2346D0FDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D0CB8(a1, a2, a3);
}

uint64_t sub_2346D1000@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D0CF0(a1, a2, a3);
}

void sub_2346D1024(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
}

uint64_t sub_2346D1048()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACAC8);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACAC8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16608], v0);
  sub_2346CEE60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D1178@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D138C(a1, &qword_2687ABD60, (uint64_t)qword_2687ACAC8, a2, a3);
}

uint64_t sub_2346D11B0()
{
  sub_2346BBA5C(v0 + 16);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DollhouseColorMaterialFactory()
{
  return self;
}

uint64_t sub_2346D1214()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACAE0);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACAE0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16608], v0);
  sub_2346CEE60(1, 0xD00000000000001ELL, 0x80000002347FD170, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D1354@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D138C(a1, &qword_2687ABD68, (uint64_t)qword_2687ACAE0, a2, a3);
}

uint64_t sub_2346D138C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  __n128 v32 = a5;
  uint64_t v30 = a4;
  uint64_t v31 = a1;
  uint64_t v8 = sub_2347EE280();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v30 - v13;
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v8, a3);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16(v14, v15, v8);
  uint64_t v17 = *(void *)(v5 + 96);
  uint64_t v18 = type metadata accessor for SimpleScanMaterial();
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v19 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v16(v12, (uint64_t)v14, v8);
  swift_unknownObjectRetain();
  __asm { FMOV            V1.4S, #1.0 }
  uint64_t v25 = v33;
  uint64_t v26 = sub_23472C348((uint64_t)v12, v17, v31, 1, v32, _Q1);
  if (v25) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  uint64_t v28 = v26;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  uint64_t v29 = v30;
  v30[3] = v18;
  v29[4] = (uint64_t)&off_26E774260;
  *uint64_t v29 = v28;
  return result;
}

uint64_t sub_2346D15A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  __n128 v28 = a3;
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  uint64_t v4 = sub_2347EE280();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v26 - v9;
  if (qword_2687ABD68 != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACAE0);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, v11, v4);
  uint64_t v13 = *(void *)(v3 + 96);
  uint64_t v14 = type metadata accessor for SimpleScanMaterial();
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v15 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v12(v8, (uint64_t)v10, v4);
  swift_unknownObjectRetain();
  __asm { FMOV            V1.4S, #1.0 }
  uint64_t v21 = v29;
  uint64_t v22 = sub_23472C348((uint64_t)v8, v13, v27, 1, v28, _Q1);
  if (v21) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  uint64_t v24 = v22;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t v25 = v26;
  v26[3] = v14;
  v25[4] = (uint64_t)&off_26E774260;
  *uint64_t v25 = v24;
  return result;
}

uint64_t sub_2346D17D0(uint64_t a1)
{
  return sub_2346D17FC(a1, &qword_2687ABD68, (uint64_t)qword_2687ACAE0, (__n128)xmmword_2347F20A0);
}

uint64_t sub_2346D17FC(uint64_t a1, void *a2, uint64_t a3, __n128 a4)
{
  *(void *)(v4 + 24) = 0;
  swift_unknownObjectWeakInit();
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v4 + 32) = _Q0;
  *(_OWORD *)(v4 + 48) = _Q0;
  *(__n128 *)(v4 + 64) = a4;
  *(_OWORD *)(v4 + 80) = _Q0;
  *(void *)(v4 + 96) = a1;
  sub_2347ED8E0();
  swift_unknownObjectRetain();
  sub_2347ED880();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2347F0FA0;
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_2347EE280();
  uint64_t v15 = __swift_project_value_buffer(v14, a3);
  uint64_t v16 = MEMORY[0x263F165F8];
  *(void *)(v13 + 56) = v14;
  *(void *)(v13 + 64) = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v13 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_1, v15, v14);
  sub_2347ED650();
  swift_allocObject();
  sub_2347ED640();
  swift_release();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t type metadata accessor for DollHouseDebugNormalsMaterialFactory()
{
  return self;
}

uint64_t sub_2346D1998@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D1354(a1, a2, a3);
}

uint64_t sub_2346D19BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D15A8(a1, a2, a3);
}

uint64_t sub_2346D19E0()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACAF8);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACAF8);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16600], v0);
  sub_2346CEE60(1, 0xD00000000000001BLL, 0x80000002347FD150, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D1B20()
{
  uint64_t v0 = sub_2347EE110();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_2347EE280();
  __swift_allocate_value_buffer(v4, qword_2687ACB10);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_2687ACB10);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F16600], v0);
  sub_2346CEE60(1, 0, 0, (uint64_t)v3, 0, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_2346D1C50(uint64_t a1)
{
  *(void *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v1 + 32) = _Q0;
  *(_OWORD *)(v1 + 48) = _Q0;
  *(_OWORD *)(v1 + 64) = xmmword_2347F20A0;
  *(_OWORD *)(v1 + 80) = xmmword_2347F20B0;
  *(void *)(v1 + 96) = a1;
  sub_2347ED8E0();
  swift_unknownObjectRetain();
  sub_2347ED880();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2347F0FA0;
  if (qword_2687ABD70 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_2347EE280();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)qword_2687ACAF8);
  uint64_t v11 = MEMORY[0x263F165F8];
  *(void *)(v8 + 56) = v9;
  *(void *)(v8 + 64) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, v10, v9);
  sub_2347ED650();
  swift_allocObject();
  sub_2347ED640();
  swift_release();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_2346D1DD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D1E44(a1, &qword_2687ABD70, (uint64_t)qword_2687ACAF8, (uint64_t)sub_2346D19E0, a2, a3);
}

uint64_t sub_2346D1E0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D1E44(a1, &qword_2687ABD78, (uint64_t)qword_2687ACB10, (uint64_t)sub_2346D1B20, a2, a3);
}

uint64_t sub_2346D1E44@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v34 = a4;
  unint64_t v35 = a5;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  __n128 v40 = a6;
  uint64_t v39 = a1;
  uint64_t v7 = sub_2347EE280();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = MEMORY[0x237DC8170](v6 + 16);
  __n128 v15 = v40;
  if (v14)
  {
    uint64_t v16 = *(void *)(v6 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(ObjectType, v16);
    unint64_t v20 = v19;
    char v22 = v21;
    swift_unknownObjectRelease();
    __n128 v15 = v40;
    if ((v22 & 1) == 0)
    {
      v15.n128_u64[0] = v18;
      v15.n128_u64[1] = v20;
    }
  }
  __n128 v36 = v15;
  if (*v37 != -1) {
    swift_once();
  }
  uint64_t v23 = __swift_project_value_buffer(v7, v38);
  uint64_t v24 = v8;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v25(v13, v23, v7);
  uint64_t v26 = *(void *)(v6 + 96);
  uint64_t v27 = type metadata accessor for SimpleScanMaterial();
  uint64_t v28 = swift_allocObject();
  *(_DWORD *)(v28 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = 1065353216;
  *(_DWORD *)(v28 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity) = 1065353216;
  v25(v11, (uint64_t)v13, v7);
  swift_unknownObjectRetain();
  uint64_t v29 = v41;
  uint64_t v30 = sub_23472C348((uint64_t)v11, v26, v39, 1, v40, v36);
  if (v29) {
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v7);
  }
  uint64_t v32 = v30;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v7);
  uint64_t v33 = v35;
  v35[3] = v27;
  v33[4] = (uint64_t)&off_26E774260;
  *uint64_t v33 = v32;
  return result;
}

uint64_t type metadata accessor for DollhouseMaterialFactory()
{
  return self;
}

uint64_t sub_2346D20E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D1DD4(a1, a2, a3);
}

uint64_t sub_2346D2108@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D1E0C(a1, a2, a3);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_2346D21C8()
{
  return 0;
}

uint64_t sub_2346D21E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D08A4(a1, a2, a3);
}

uint64_t sub_2346D2200@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D1998(a1, a2, a3);
}

uint64_t sub_2346D2218@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  return sub_2346D20E4(a1, a2, a3);
}

BOOL sub_2346D2230(unsigned char *a1, unsigned char *a2)
{
  float v2 = -1.0;
  if (*a1) {
    float v3 = 1.0;
  }
  else {
    float v3 = -1.0;
  }
  if (*a2) {
    float v2 = 1.0;
  }
  return v3 == v2;
}

uint64_t sub_2346D225C()
{
  return sub_23472555C();
}

uint64_t sub_2346D2264()
{
  return sub_2347EF1F0();
}

uint64_t sub_2346D22A0()
{
  return sub_234725D58();
}

float *sub_2346D22A8@<X0>(float *result@<X0>, char *a2@<X8>)
{
  if (*result == 1.0) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == -1.0) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void sub_2346D22D0(float *a1@<X8>)
{
  float v2 = -1.0;
  if (*v1) {
    float v2 = 1.0;
  }
  *a1 = v2;
}

float sub_2346D22EC(unint64_t a1, float32x2_t a2)
{
  float32x2_t v2 = vmul_f32(a2, (float32x2_t)0x3F0000003F000000);
  LODWORD(result) = vbsl_s8((int8x8_t)vmovn_s64(vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(a1), (int8x16_t)xmmword_2347F2320))), (int8x8_t)vneg_f32(v2), (int8x8_t)v2).u32[0];
  return result;
}

uint64_t __swift_memcpy5_1(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)float result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Corner(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[5]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Corner(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)float result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)float result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Corner()
{
  return &type metadata for Corner;
}

uint64_t sub_2346D23E4()
{
  return sub_2347EF1E0();
}

uint64_t sub_2346D244C()
{
  return sub_2347EF200();
}

uint64_t sub_2346D24E0()
{
  return sub_2346D244C();
}

uint64_t sub_2346D2538()
{
  return sub_2346D23E4();
}

uint64_t sub_2346D2590()
{
  return sub_2347EF200();
}

uint64_t sub_2346D2640(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  int v3 = a1[1];
  int v4 = a1[2];
  int v5 = a1[3];
  uint64_t v6 = *a2;
  int v7 = a2[1];
  int v8 = a2[2];
  int v9 = a2[3];
  int v10 = a2[4];
  if (a1[4]) {
    uint64_t v11 = 0x100000000;
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v12 = v5 == 0;
  uint64_t v13 = 0x1000000;
  if (v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = 0x1000000;
  }
  BOOL v12 = v4 == 0;
  uint64_t v15 = 0x10000;
  if (v12) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = 0x10000;
  }
  BOOL v12 = v3 == 0;
  uint64_t v17 = 256;
  if (v12) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = 256;
  }
  unint64_t v19 = v18 | v2 | v16 | v14 | v11;
  if (v10) {
    uint64_t v20 = 0x100000000;
  }
  else {
    uint64_t v20 = 0;
  }
  if (!v9) {
    uint64_t v13 = 0;
  }
  if (!v8) {
    uint64_t v15 = 0;
  }
  if (!v7) {
    uint64_t v17 = 0;
  }
  return sub_2346D2734(v19, v17 | v6 | v15 | v13 | v20);
}

unint64_t sub_2346D26E0()
{
  unint64_t result = qword_2687ACB40;
  if (!qword_2687ACB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACB40);
  }
  return result;
}

uint64_t sub_2346D2734(unint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if ((a1 & 1) == 0) {
      return 0;
    }
  }
  else if (a1)
  {
    return 0;
  }
  if ((a2 & 0x100) != 0)
  {
    if ((a1 & 0x100) == 0) {
      return 0;
    }
  }
  else if ((a1 & 0x100) != 0)
  {
    return 0;
  }
  int v3 = (a1 >> 24) & 1 ^ (a2 >> 24) & 1;
  if ((a2 & 0x10000) != 0)
  {
    if ((a1 & 0x10000) == 0) {
      LOBYTE(v3) = 1;
    }
    if (v3) {
      return 0;
    }
  }
  else if ((a1 >> 16) & 1 | (a1 >> 24) & 1 ^ (a2 >> 24) & 1)
  {
    return 0;
  }
  return ((a1 & 0x100000000) == 0) ^ BYTE4(a2) & 1u;
}

unsigned char *storeEnumTagSinglePayload for Extent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346D2884);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Extent()
{
  return &type metadata for Extent;
}

unint64_t sub_2346D28C0()
{
  unint64_t result = qword_2687ACB48;
  if (!qword_2687ACB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACB48);
  }
  return result;
}

ValueMetadata *type metadata accessor for ObjectElement()
{
  return &type metadata for ObjectElement;
}

void *sub_2346D2924(void *a1, __n128 a2, __n128 a3)
{
  unsigned int v4 = sub_2346FA80C(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  int v7 = (void *)(v6 + 1);
  if (v6 >= v5 >> 1) {
    goto LABEL_63;
  }
  while (1)
  {
    v4[2] = v7;
    int v8 = (__n128 *)&v4[4 * v6];
    long long v8[2] = a2;
    v8[3] = a3;
    long long v111 = v4;
    uint64_t v70 = a1[2];
    if (!v70) {
      return v4;
    }
    unint64_t v71 = a1 + 4;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v72 = v9;
      int v10 = (float32x4_t *)&v71[4 * v9];
      float32x4_t v85 = v10[1];
      float32x4_t v86 = *v10;
      int v7 = v111;
      uint64_t v11 = swift_bridgeObjectRetain();
      a1 = (void *)sub_234753D50(v11);
      unint64_t v12 = a1[2];
      swift_bridgeObjectRelease();
      if (v12 >= 2)
      {
        unint64_t v6 = 0;
        int v7 = (void *)(v12 >> 1);
        unint64_t v62 = v12 - 1;
        uint64_t v63 = 48 * v12 - 16;
        uint64_t v64 = 8;
        do
        {
          if (v6 != v62)
          {
            unint64_t v5 = a1[2];
            if (v6 >= v5) {
              goto LABEL_61;
            }
            if (v62 >= v5) {
              goto LABEL_62;
            }
            unint64_t v67 = a1[v64 - 4];
            a2 = *(__n128 *)&a1[v64];
            a3 = *(__n128 *)&a1[v64 - 2];
            uint64_t v68 = *(void *)((char *)a1 + v63);
            long long v81 = *(_OWORD *)((char *)a1 + v63 + 32);
            long long v84 = *(_OWORD *)((char *)a1 + v63 + 16);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              a1 = sub_23473CFF8(a1);
            }
            uint64_t v65 = &a1[v64];
            *((void *)v65 - 4) = v68;
            *(v65 - 1) = v84;
            *uint64_t v65 = v81;
            uint64_t v66 = (__n128 *)((char *)a1 + v63);
            v66->n128_u64[0] = v67;
            v66[1] = a3;
            double v66[2] = a2;
          }
          ++v6;
          v64 += 6;
          --v62;
          v63 -= 48;
        }
        while (v7 != (void *)v6);
      }
      unint64_t v6 = a1[2];
      if (v6) {
        break;
      }
LABEL_4:
      swift_bridgeObjectRelease();
      uint64_t v9 = v72 + 1;
      if (v72 + 1 == v70)
      {
LABEL_57:
        swift_bridgeObjectRelease();
        return v111;
      }
    }
    unint64_t v13 = 0;
    uint64_t v14 = a1 + 4;
    float v15 = vmuls_lane_f32(0.5, v85, 2);
    float32x2_t v16 = vmul_f32(*(float32x2_t *)v85.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)&long long v17 = vsub_f32(*(float32x2_t *)v86.f32, v16);
    float32x2_t v77 = (float32x2_t)v17;
    *((float *)&v17 + 2) = v86.f32[2] - v15;
    HIDWORD(v17) = 0;
    *(float32x2_t *)&long long v18 = vadd_f32(*(float32x2_t *)v86.f32, v16);
    long long v75 = v17;
    float32x2_t v76 = (float32x2_t)v18;
    *((void *)&v18 + 1) = COERCE_UNSIGNED_INT(v86.f32[2] + v15);
    long long v74 = v18;
    while (1)
    {
      unint64_t v5 = a1[2];
      if (v13 >= v5) {
        break;
      }
      unint64_t v19 = (__n128 *)&v14[6 * v13];
      __n128 v20 = v19[1];
      float32x4_t v78 = (float32x4_t)v19[2];
      float32x2_t v21 = vmul_f32(*(float32x2_t *)v78.f32, (float32x2_t)0x3F0000003F000000);
      *(float32x2_t *)&long long v22 = vsub_f32((float32x2_t)v20.n128_u64[0], v21);
      *(float32x2_t *)&long long v23 = vadd_f32((float32x2_t)v20.n128_u64[0], v21);
      if ((vorr_s8((int8x8_t)vcge_f32(v77, *(float32x2_t *)&v23), (int8x8_t)vcge_f32(*(float32x2_t *)&v22, v76)).u8[0] & 1) == 0)
      {
        unint64_t v5 = qword_26E76FEA0;
        if ((unint64_t)qword_26E76FEA0 > 2) {
          goto LABEL_60;
        }
        unint64_t v24 = v19->n128_u64[0];
        float v25 = vmuls_lane_f32(0.5, v78, 2);
        *((float *)&v22 + 2) = v20.n128_f32[2] - v25;
        HIDWORD(v22) = 0;
        *((float *)&v23 + 2) = v20.n128_f32[2] + v25;
        HIDWORD(v23) = 0;
        long long v107 = v75;
        float v26 = *(float *)((unint64_t)&v107 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FEA0 & 3)));
        long long v108 = v23;
        float v27 = *(float *)((unint64_t)&v108 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FEA0 & 3)));
        long long v109 = v74;
        float v28 = *(float *)((unint64_t)&v109 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FEA0 & 3)));
        long long v110 = v22;
        if (v27 > v26 && v28 > *(float *)((unint64_t)&v110 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FEA0 & 3))))
        {
          unint64_t v5 = qword_26E76FEA8;
          if ((unint64_t)qword_26E76FEA8 > 2) {
            goto LABEL_60;
          }
          long long v103 = v75;
          float v30 = *(float *)((unint64_t)&v103 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FEA8 & 3)));
          long long v104 = v23;
          float v31 = *(float *)((unint64_t)&v104 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FEA8 & 3)));
          long long v105 = v74;
          float v32 = *(float *)((unint64_t)&v105 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FEA8 & 3)));
          long long v106 = v22;
          if (v31 > v30
            && v32 > *(float *)((unint64_t)&v106 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FEA8 & 3))))
          {
            unint64_t v73 = v24;
            uint64_t v34 = 0;
            int v7 = v111;
            __n128 v35 = (__n128)v78;
            do
            {
              unint64_t v36 = *(void *)((char *)&unk_26E76FEB0 + v34 + 32);
              if (v36 > 2)
              {
                __break(1u);
                goto LABEL_57;
              }
              float32x4_t v99 = v86;
              float v37 = *(float *)((unint64_t)&v99 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
              float32x4_t v100 = v85;
              float v38 = *(float *)((unint64_t)&v100 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
              __n128 v101 = v20;
              float v39 = *(float *)((unint64_t)&v101 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
              __n128 v102 = v35;
              float v40 = *(float *)((unint64_t)&v102 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3)));
              float v41 = v40 * 0.5;
              float v42 = v39 + (float)(v40 * 0.5);
              float v43 = v38 * 0.5;
              float v44 = v37 + (float)(v38 * 0.5);
              if ((float)(v44 + 0.0001) < v42)
              {
                a3 = v20;
                __n128 v98 = v20;
                *(float *)((unint64_t)&v98 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = (float)(v44 + v42) * 0.5;
                __n128 v82 = v98;
                a2 = v35;
                __n128 v97 = v35;
                *(float *)((unint64_t)&v97 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v42 - v44;
                __n128 v79 = v97;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  int v7 = sub_2346FA80C(0, v7[2] + 1, 1, v7);
                }
                unint64_t v46 = v7[2];
                unint64_t v45 = v7[3];
                __n128 v35 = a2;
                __n128 v20 = a3;
                if (v46 >= v45 >> 1)
                {
                  unint64_t v56 = sub_2346FA80C((void *)(v45 > 1), v46 + 1, 1, v7);
                  __n128 v35 = a2;
                  __n128 v20 = a3;
                  int v7 = v56;
                }
                v7[2] = v46 + 1;
                uint64_t v47 = (__n128 *)&v7[4 * v46];
                v47[2] = v82;
                v47[3] = v79;
                float v48 = v39 - v41;
                if ((float)((float)(v39 - v41) + 0.0001) < v44)
                {
                  float v39 = (float)(v48 + v44) * 0.5;
                  __n128 v96 = v20;
                  *(float *)((unint64_t)&v96 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v39;
                  __n128 v20 = v96;
                  float v40 = v44 - v48;
                  __n128 v95 = v35;
                  *(float *)((unint64_t)&v95 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v44 - v48;
                  __n128 v35 = v95;
                }
              }
              float v49 = v40 * -0.5;
              float v50 = v39 + (float)(v40 * -0.5);
              float v51 = v37 - v43;
              if ((float)(v50 + 0.0001) < v51)
              {
                a3 = v20;
                __n128 v94 = v20;
                *(float *)((unint64_t)&v94 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = (float)(v51 + v50) * 0.5;
                __n128 v83 = v94;
                a2 = v35;
                __n128 v93 = v35;
                *(float *)((unint64_t)&v93 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v51 - v50;
                __n128 v80 = v93;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  int v7 = sub_2346FA80C(0, v7[2] + 1, 1, v7);
                }
                unint64_t v53 = v7[2];
                unint64_t v52 = v7[3];
                __n128 v35 = a2;
                __n128 v20 = a3;
                if (v53 >= v52 >> 1)
                {
                  uint64_t v57 = sub_2346FA80C((void *)(v52 > 1), v53 + 1, 1, v7);
                  __n128 v35 = a2;
                  __n128 v20 = a3;
                  int v7 = v57;
                }
                v7[2] = v53 + 1;
                uint64_t v54 = (__n128 *)&v7[4 * v53];
                v54[2] = v83;
                v54[3] = v80;
                float v55 = v39 - v49;
                if ((float)(v51 + 0.0001) < (float)(v39 - v49))
                {
                  __n128 v92 = v20;
                  *(float *)((unint64_t)&v92 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = (float)(v51 + v55) * 0.5;
                  __n128 v20 = v92;
                  __n128 v91 = v35;
                  *(float *)((unint64_t)&v91 & 0xFFFFFFFFFFFFFFF3 | (4 * (v36 & 3))) = v55 - v51;
                  __n128 v35 = v91;
                }
              }
              v34 += 8;
            }
            while (v34 != 24);
            uint64_t v58 = 0;
            long long v111 = v7;
            uint64_t v14 = a1 + 4;
            while (1)
            {
              __n128 v89 = v35;
              float v60 = *(float *)((unint64_t)&v89 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
              float32x4_t v90 = v78;
              float v61 = *(float *)((unint64_t)&v90 & 0xFFFFFFFFFFFFFFF3 | (4 * (v58 & 3)));
              BOOL v59 = v60 == v61;
              if (v58 == 2) {
                break;
              }
              while (1)
              {
                ++v58;
                if (v59) {
                  break;
                }
                if (v58 == 2) {
                  goto LABEL_8;
                }
                BOOL v59 = 0;
              }
            }
            if (v60 != v61)
            {
LABEL_8:
              int v7 = &v111;
              sub_23474FF64(v73);
            }
          }
        }
      }
      if (++v13 == v6) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    unsigned int v4 = sub_2346FA80C((void *)(v5 > 1), (int64_t)v7, 1, v4);
  }
}

uint64_t sub_2346D304C(BOOL a1)
{
  if (qword_2687ABCD8 != -1) {
    swift_once();
  }
  BOOL v2 = sub_2347E8E34(a1, qword_2687BDF30);
  if (qword_2687ABCE0 != -1) {
    swift_once();
  }
  BOOL v3 = sub_2347E8E34(a1, qword_2687BDF38);
  if (qword_2687ABCE8 != -1) {
    swift_once();
  }
  BOOL v4 = sub_2347E8E34(a1, qword_2687BDF40);
  if (qword_2687ABCF0 != -1) {
    swift_once();
  }
  BOOL v5 = sub_2347E8E34(a1, qword_2687BDF48);
  if (qword_2687ABCF8 != -1) {
    swift_once();
  }
  BOOL v6 = sub_2347E8E34(a1, qword_2687BDF50);
  if (qword_2687ABD00 != -1) {
    swift_once();
  }
  int v7 = v2;
  if (v3) {
    int v7 = v2 | 2;
  }
  if (v4) {
    v7 |= 4u;
  }
  if (v5) {
    v7 |= 8u;
  }
  if (v6) {
    unsigned int v8 = v7 | 0x20;
  }
  else {
    unsigned int v8 = v7;
  }
  if (sub_2347E8E34(a1, qword_2687BDF58) && (v8 & 0x10) == 0) {
    return v8 | 0x10;
  }
  else {
    return v8;
  }
}

BOOL sub_2346D325C(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  BOOL result = 0;
  if ((vmovn_s32(vcgeq_f32(a1, a4)).u8[0] & 1) == 0 && (vmovn_s32(vcgeq_f32(a3, a2)).u8[0] & 1) == 0)
  {
    if ((unint64_t)qword_26E76FE30 > 2) {
      goto LABEL_14;
    }
    float32x4_t v16 = a1;
    float v5 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FE30 & 3)));
    float32x4_t v17 = a4;
    float v6 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FE30 & 3)));
    float32x4_t v18 = a2;
    float v7 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FE30 & 3)));
    float32x4_t v19 = a3;
    if (v6 <= v5 || v7 <= *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FE30 & 3)))) {
      return 0;
    }
    if ((unint64_t)qword_26E76FE38 > 2)
    {
LABEL_14:
      __break(1u);
    }
    else
    {
      float32x4_t v12 = a1;
      float v9 = *(float *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FE38 & 3)));
      float32x4_t v13 = a4;
      BOOL v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FE38 & 3))) > v9;
      float32x4_t v14 = a2;
      float v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FE38 & 3)));
      float32x4_t v15 = a3;
      return v11 > *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (qword_26E76FE38 & 3))) && v10;
    }
  }
  return result;
}

uint64_t sub_2346D3358(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  *(float32x2_t *)v4.f32 = vsub_f32(0, *(float32x2_t *)a2.f32);
  v4.f32[2] = 0.0 - a2.f32[2];
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_f32(v4, a1);
  a2.i32[3] = 0;
  float32x4_t v6 = vmulq_f32(a2, a1);
  unsigned __int8 v7 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))))).u8[0];
  if (v7) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0;
  }
  float32x4_t v9 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v8), (int8x16_t)a2, (int8x16_t)v4);
  float32x4_t v10 = vmulq_f32(v9, a1);
  *(float32x2_t *)v11.f32 = vsub_f32(0, *(float32x2_t *)a3.f32);
  v11.f32[2] = 0.0 - a3.f32[2];
  v11.i32[3] = 0;
  float32x4_t v12 = vmulq_f32(v11, a1);
  v10.i8[0] = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))))).u8[0];
  BOOL v13 = (v10.i8[0] & 1) == 0;
  if (v10.i8[0]) {
    unsigned int v14 = -1;
  }
  else {
    unsigned int v14 = 0;
  }
  float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v14), (int8x16_t)v11, (int8x16_t)v9);
  float32x4_t v16 = vmulq_f32(v15, a1);
  a3.i32[3] = 0;
  float32x4_t v17 = vmulq_f32(a3, a1);
  unsigned __int8 v18 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))))).u8[0];
  uint64_t v19 = v7 & 1;
  if (!v13) {
    uint64_t v19 = 2;
  }
  BOOL v20 = (v18 & 1) == 0;
  if (v18) {
    unsigned int v21 = -1;
  }
  else {
    unsigned int v21 = 0;
  }
  float32x4_t v22 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v21), (int8x16_t)a3, (int8x16_t)v15);
  float32x4_t v23 = vmulq_f32(v22, a1);
  float32x4_t v24 = vnegq_f32(a4);
  v24.i32[3] = 0;
  float32x4_t v25 = vmulq_f32(v24, a1);
  unsigned __int8 v26 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))))).u8[0];
  if (!v20) {
    uint64_t v19 = 3;
  }
  BOOL v27 = (v26 & 1) == 0;
  if (v26) {
    unsigned int v28 = -1;
  }
  else {
    unsigned int v28 = 0;
  }
  float32x4_t v29 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v28), (int8x16_t)v24, (int8x16_t)v22), a1);
  float32x4_t v30 = vmulq_f32(a1, a4);
  unsigned __int8 v31 = vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))))).u8[0];
  if (!v27) {
    uint64_t v19 = 4;
  }
  if (v31) {
    uint64_t v19 = 5;
  }
  return dword_26E76FE40[v19 + 8];
}

uint64_t sub_2346D3518(char a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v29 = a6;
  float32x4_t v30 = a7;
  float32x4_t v28 = a5;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0)
    {
      if ((a1 & 4) == 0)
      {
        if ((a1 & 8) == 0)
        {
          if ((a1 & 0x20) == 0) {
            goto LABEL_6;
          }
LABEL_17:
          LODWORD(v8) = 0;
          goto LABEL_44;
        }
        LODWORD(v8) = 0;
        goto LABEL_40;
      }
      LODWORD(v8) = 0;
      goto LABEL_28;
    }
    LODWORD(v8) = 0;
    goto LABEL_20;
  }
  float32x4_t v25 = a2;
  *(float32x2_t *)a2.f32 = vsub_f32(0, *(float32x2_t *)a2.f32);
  a2.f32[2] = 0.0 - a2.f32[2];
  a2.i32[3] = 0;
  uint64_t v9 = sub_2346D3358(a2, a5, a6, a7);
  if (v9)
  {
    uint64_t v8 = v9;
    a6 = v29;
    a7 = v30;
    a5 = v28;
    a2 = v25;
    if ((a1 & 2) == 0)
    {
      if ((a1 & 4) == 0) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
LABEL_20:
    a2.i32[3] = 0;
    int v10 = sub_2346D3358(a2, a5, a6, a7);
    a5 = v28;
    a6 = v29;
    a7 = v30;
    if ((v10 & ~v8) != 0) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    uint64_t v8 = v11 | v8;
    if ((a1 & 4) == 0)
    {
LABEL_24:
      if ((a1 & 8) != 0) {
        goto LABEL_40;
      }
      goto LABEL_32;
    }
LABEL_28:
    *(float32x2_t *)v12.f32 = vsub_f32(0, *(float32x2_t *)a3.f32);
    v12.f32[2] = 0.0 - a3.f32[2];
    v12.i32[3] = 0;
    int v13 = sub_2346D3358(v12, a5, a6, a7);
    a5 = v28;
    a6 = v29;
    a7 = v30;
    if ((v13 & ~v8) != 0) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    uint64_t v8 = v14 | v8;
    if ((a1 & 8) != 0) {
      goto LABEL_40;
    }
LABEL_32:
    if ((a1 & 0x20) != 0) {
      goto LABEL_44;
    }
LABEL_33:
    if ((a1 & 0x10) == 0) {
      return v8;
    }
    goto LABEL_34;
  }
  if ((a1 & 2) != 0)
  {
    LODWORD(v8) = 0;
    a6 = v29;
    a7 = v30;
    a5 = v28;
    a2 = v25;
    goto LABEL_20;
  }
  if ((a1 & 4) != 0)
  {
    LODWORD(v8) = 0;
    a6 = v29;
    a7 = v30;
    a5 = v28;
    goto LABEL_28;
  }
  if ((a1 & 8) == 0)
  {
    a6 = v29;
    a7 = v30;
    a5 = v28;
    if ((a1 & 0x20) == 0)
    {
LABEL_6:
      uint64_t v8 = 0;
      if ((a1 & 0x10) == 0) {
        return v8;
      }
      goto LABEL_34;
    }
    goto LABEL_17;
  }
  LODWORD(v8) = 0;
  a6 = v29;
  a7 = v30;
  a5 = v28;
LABEL_40:
  float32x4_t v19 = a3;
  v19.i32[3] = 0;
  int v20 = sub_2346D3358(v19, a5, a6, a7);
  a5 = v28;
  a6 = v29;
  a7 = v30;
  if ((v20 & ~v8) != 0) {
    int v21 = v20;
  }
  else {
    int v21 = 0;
  }
  uint64_t v8 = v21 | v8;
  if ((a1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_44:
  float32x4_t v22 = vnegq_f32(a4);
  v22.i32[3] = 0;
  int v23 = sub_2346D3358(v22, a5, a6, a7);
  a5 = v28;
  a6 = v29;
  a7 = v30;
  if ((v23 & ~v8) != 0) {
    int v24 = v23;
  }
  else {
    int v24 = 0;
  }
  uint64_t v8 = v24 | v8;
  if ((a1 & 0x10) != 0)
  {
LABEL_34:
    float32x4_t v15 = a4;
    v15.i32[3] = 0;
    int v16 = sub_2346D3358(v15, a5, a6, a7);
    if ((v16 & ~v8) != 0) {
      int v17 = v16;
    }
    else {
      int v17 = 0;
    }
    return v17 | v8;
  }
  return v8;
}

uint64_t sub_2346D3730@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>, float32x4_t a7@<Q4>, float32x4_t a8@<Q5>, float32x4_t a9@<Q6>, float32x4_t a10@<Q7>, long long a11, long long a12)
{
  long long v13 = 0uLL;
  if (result)
  {
    char v14 = result;
    v57.columns[2] = (simd_float4)a11;
    v57.columns[3] = (simd_float4)a12;
    v57.columns[0] = (simd_float4)a9;
    v57.columns[1] = (simd_float4)a10;
    simd_float4x4 v58 = __invert_f4(v57);
    v15.i64[1] = a7.i64[1];
    float32x4_t v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v58.columns[0], a7.f32[0]), (float32x4_t)v58.columns[1], *(float32x2_t *)a7.f32, 1), (float32x4_t)v58.columns[2], a7, 2), (float32x4_t)v58.columns[3], a7, 3);
    v58.columns[2].f32[0] = vmuls_lane_f32(0.5, a3, 2);
    float32x2_t v17 = vmul_f32(*(float32x2_t *)a3.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v58.columns[0].f32 = vsub_f32(*(float32x2_t *)v16.f32, v17);
    v58.columns[0].f32[2] = v16.f32[2] - v58.columns[2].f32[0];
    v58.columns[0].i32[3] = 0;
    *(float32x2_t *)v58.columns[1].f32 = vadd_f32(v17, *(float32x2_t *)v16.f32);
    v58.columns[1].f32[2] = v58.columns[2].f32[0] + v16.f32[2];
    v58.columns[1].i32[3] = 0;
    *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)a8.f32, (float32x2_t)0xBF000000BF000000);
    v16.f32[0] = vmuls_lane_f32(-0.5, a8, 2);
    int8x16_t v45 = (int8x16_t)v15;
    v58.columns[2].i64[0] = v15.i64[0];
    v58.columns[2].i64[1] = v16.u32[0];
    *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)a8.f32, (float32x2_t)0x3F0000003F000000);
    int8x16_t v52 = (int8x16_t)v15;
    float32x4_t v54 = v16;
    float v56 = vmuls_lane_f32(0.5, a8, 2);
    v15.i64[1] = LODWORD(v56);
    simd_float4 v42 = v58.columns[1];
    simd_float4 v43 = v58.columns[0];
    float32x4_t v39 = v15;
    simd_float4 v40 = v58.columns[2];
    BOOL result = sub_2346D325C((float32x4_t)v58.columns[0], (float32x4_t)v58.columns[1], (float32x4_t)v58.columns[2], v15);
    if (result)
    {
      float32x4_t v18 = (float32x4_t)v43;
      v18.i32[3] = 0;
      float32x4_t v19 = (float32x4_t)v40;
      v19.i32[3] = 0;
      int8x16_t v41 = (int8x16_t)vmaxnmq_f32(v18, v19);
      float32x4_t v20 = (float32x4_t)v42;
      v20.i32[3] = 0;
      float32x4_t v21 = v39;
      v21.i32[3] = 0;
      int8x16_t v44 = (int8x16_t)vminnmq_f32(v20, v21);
      BOOL result = sub_2346D3518(v14, a4, a5, a6, a9, a10, (float32x4_t)a11);
      v22.i32[0] = 0;
      char v23 = 0;
      v24.i32[0] = result & 1;
      int32x4_t v25 = (int32x4_t)v41;
      int32x4_t v27 = (int32x4_t)v44;
      int32x4_t v26 = (int32x4_t)v45;
      v25.i32[0] = v45.i32[0];
      int8x16_t v28 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v24, v22), 0), v41, (int8x16_t)v25);
      v25.i32[0] = result & 2;
      int32x4_t v29 = (int32x4_t)v44;
      v29.i32[0] = v52.i32[0];
      int8x16_t v30 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v25, v22), 0), v44, (int8x16_t)v29);
      v29.i32[0] = result & 4;
      v26.i32[0] = result & 8;
      v27.i32[0] = result & 0x20;
      v28.i32[1] = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vceqq_s32(v29, v22), 0), v28, v45).i32[1];
      v30.i32[1] = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vceqq_s32(v26, v22), 0), v30, v52).i32[1];
      int8x16_t v31 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v27, v22), 0);
      int8x16_t v32 = v28;
      int32x4_t v33 = (int32x4_t)v54;
      v32.i32[2] = v54.i32[0];
      v33.i32[0] = result & 0x10;
      int8x16_t v34 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v33, v22), 0);
      int8x16_t v35 = v30;
      *(float *)&v35.i32[2] = v56;
      int8x16_t v36 = vbslq_s8(v31, v28, v32);
      int8x16_t v37 = vbslq_s8(v34, v30, v35);
      *(float32x2_t *)&long long v13 = vmul_f32(vadd_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v37.i8), (float32x2_t)0x3F0000003F000000);
      *((float *)&v13 + 2) = (float)(*(float *)&v36.i32[2] + *(float *)&v37.i32[2]) * 0.5;
      HIDWORD(v13) = 0;
      *(float32x2_t *)&long long v38 = vsub_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v36.i8);
      *((float *)&v38 + 2) = *(float *)&v37.i32[2] - *(float *)&v36.i32[2];
      HIDWORD(v38) = 0;
    }
    else
    {
      char v23 = 1;
      long long v38 = 0uLL;
      long long v13 = 0uLL;
    }
  }
  else
  {
    char v23 = 1;
    long long v38 = 0uLL;
  }
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v38;
  *(unsigned char *)(a2 + 32) = v23;
  return result;
}

float sub_2346D3990()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2347EE320();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  float32x4_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2347EE1B0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity;
  float v11 = *(float *)(v1 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial_opacity);
  float v12 = *(float *)(v1 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity);
  if (v11 == 1.0)
  {
    if (v12 != 1.0)
    {
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F16858], v2);
      sub_2347EE1A0();
      goto LABEL_8;
    }
    if (v11 != 1.0)
    {
LABEL_6:
      sub_2347EE190();
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F16610], v6);
LABEL_8:
      swift_beginAccess();
      sub_2347EE200();
      swift_endAccess();
    }
  }
  else if (v11 != v12)
  {
    goto LABEL_6;
  }
  float result = *(float *)(v1 + v10);
  *(float *)(v1 + OBJC_IVAR____TtC8RoomPlan18SimpleScanMaterial__opacity) = result;
  return result;
}

uint64_t sub_2346D3BB0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8RoomPlan22MeshUpdateScanMaterial_customMaterial;
  uint64_t v2 = sub_2347EE280();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_2346D3C64()
{
  return type metadata accessor for SimpleScanMaterial();
}

uint64_t type metadata accessor for SimpleScanMaterial()
{
  uint64_t result = qword_2687ACB50;
  if (!qword_2687ACB50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2346D3CB8()
{
  return swift_updateClassMetadata2();
}

uint64_t type metadata accessor for ScanEntity()
{
  uint64_t result = qword_2687ACB90;
  if (!qword_2687ACB90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2346D3D4C()
{
  uint64_t result = sub_2347ED5C0();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t sub_2346D3E40(uint64_t result)
{
  int64_t v1 = 0;
  uint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t v2 = result + 64;
  uint64_t v3 = 1 << *(unsigned char *)(result + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(result + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v13 = result;
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v1 << 6);
LABEL_19:
    uint64_t v12 = *(void *)(*(void *)(result + 56) + 8 * v8);
    if (*(unsigned char *)(v12 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3
      && *(unsigned char *)(v12 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category) != 10)
    {
      swift_retain();
      sub_2347EEDF0();
      sub_2347EEE20();
      sub_2347EEE30();
      sub_2347EEE00();
      uint64_t result = v13;
    }
  }
  if (__OFADD__(v1++, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v1);
  if (v10)
  {
LABEL_18:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v1 << 6);
    goto LABEL_19;
  }
  int64_t v11 = v1 + 1;
  if (v1 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v11);
  if (v10) {
    goto LABEL_17;
  }
  int64_t v11 = v1 + 2;
  if (v1 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v11);
  if (v10) {
    goto LABEL_17;
  }
  int64_t v11 = v1 + 3;
  if (v1 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v11);
  if (v10) {
    goto LABEL_17;
  }
  int64_t v11 = v1 + 4;
  if (v1 + 4 >= v6)
  {
LABEL_26:
    swift_release();
    return v14;
  }
  unint64_t v10 = *(void *)(v2 + 8 * v11);
  if (v10)
  {
LABEL_17:
    int64_t v1 = v11;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v1 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v1 >= v6) {
      goto LABEL_26;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v1);
    ++v11;
    if (v10) {
      goto LABEL_18;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_2346D4018(uint64_t a1, int a2, double a3)
{
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  int v280 = a2;
  uint64_t v261 = a1;
  uint64_t v265 = sub_2347EDF00();
  v264.i64[0] = *(void *)(v265 - 8);
  MEMORY[0x270FA5388](v265);
  v263.i64[0] = (uint64_t)&v235 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2347ED9B0();
  MEMORY[0x270FA5388](v9 - 8);
  v258.n128_u64[0] = (unint64_t)&v235 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2347EDAB0();
  uint64_t v254 = *(void *)(v11 - 8);
  uint64_t v255 = v11;
  MEMORY[0x270FA5388](v11);
  unint64_t v253 = (char *)&v235 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v262.i64[0] = sub_2347EDAE0();
  unint64_t v257 = *(void *)(v262.i64[0] - 8);
  MEMORY[0x270FA5388](v262.i64[0]);
  uint64_t v256 = (uint64_t)&v235 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v270 = (uint64_t)&v235 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  v269.i64[0] = (uint64_t)&v235 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v18 - 8);
  float32x4_t v268 = (uint64_t (*)(void, __n128))((char *)&v235 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F8);
  MEMORY[0x270FA5388](v20 - 8);
  unint64_t v272 = (unint64_t)&v235 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v271 = (uint64_t)&v235 - v23;
  MEMORY[0x270FA5388](v24);
  v266.i64[0] = (uint64_t)&v235 - v25;
  MEMORY[0x270FA5388](v26);
  v267.i64[0] = (uint64_t)&v235 - v27;
  MEMORY[0x270FA5388](v28);
  int8x16_t v30 = (float *)((char *)&v235 - v29);
  uint64_t v31 = sub_2347ED5C0();
  MEMORY[0x270FA5388](v31);
  int32x4_t v33 = (char *)&v235 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  long long v38 = (char *)&v235 - v37;
  if (qword_2687ABCC8 != -1)
  {
    uint64_t v81 = v35;
    uint64_t v82 = v36;
    swift_once();
    uint64_t v36 = v82;
    uint64_t v35 = v81;
  }
  uint64_t v39 = qword_2687BDE30;
  uint64_t v40 = v36;
  int8x16_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  uint64_t v273 = v35;
  uint64_t v259 = v41;
  uint64_t v260 = v36 + 16;
  v41(v38, v6 + qword_2687BDFA8, v35);
  swift_beginAccess();
  uint64_t v42 = *(void *)(v39 + 24);
  if (!*(void *)(v42 + 16)) {
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v273);
  }
  swift_bridgeObjectRetain();
  unint64_t v43 = sub_2347BFA88((uint64_t)v38);
  if ((v44 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v273);
  }
  int v250 = v33;
  uint64_t v45 = *(void *)(*(void *)(v42 + 56) + 8 * v43);
  swift_retain();
  swift_bridgeObjectRelease();
  unint64_t v46 = v38;
  uint64_t v47 = v45;
  v248 = *(void (**)(char *, uint64_t))(v40 + 8);
  uint64_t v249 = v40 + 8;
  v248(v46, v273);
  if ((sub_2347EDF80() & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v48 = v45 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
  swift_beginAccess();
  sub_2346A7BCC(v48, (uint64_t)v30, &qword_2687AC8F8);
  uint64_t v49 = type metadata accessor for AnimationGraph();
  if ((*(unsigned int (**)(float *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v30, 1, v49) == 1)
  {
    sub_2346A7C30((uint64_t)v30, &qword_2687AC8F8);
    goto LABEL_11;
  }
  float v51 = v30[4];
  sub_2346B184C((uint64_t)v30);
  if (v51 != 0.0)
  {
LABEL_11:
    if (sub_2347EDF80()) {
      goto LABEL_13;
    }
  }
  sub_2347EDF90();
LABEL_13:
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  int8x16_t v52 = (float *)off_2687AF0E8;
  swift_beginAccess();
  if (!*((unsigned char *)v52 + 177))
  {
    swift_beginAccess();
    if (*((unsigned char *)v52 + 41) == 1 && *(unsigned char *)(v45 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category) == 10)
    {
      swift_beginAccess();
      uint64_t v53 = swift_bridgeObjectRetain();
      unint64_t v54 = sub_2346D3E40(v53);
      swift_beginAccess();
      sub_2346AC7CC(v54, v52[11]);
      swift_bridgeObjectRelease();
      sub_2347EDF90();
    }
  }
  if ((sub_2347EDF80() & 1) == 0) {
    return swift_release();
  }
  uint64_t v55 = qword_2687BDFB8;
  if (*(unsigned char *)(v6 + qword_2687BDFB8) == 1)
  {
    long long v56 = *(_OWORD *)(v45 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation);
    simd_float4x4 v57 = &OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition;
  }
  else
  {
    long long v56 = *(_OWORD *)(v45 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
    simd_float4x4 v57 = &OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition;
  }
  long long v58 = *(_OWORD *)(v45 + *v57);
  long long v244 = v56;
  long long v245 = v58;
  *(double *)v59.i64 = MEMORY[0x237DC6930]();
  float32x4_t v274 = v59;
  float32x4_t v251 = v60;
  __n128 v246 = v62;
  __n128 v247 = v61;
  uint64_t v237 = v55;
  unsigned __int32 v63 = *(unsigned __int8 *)(v6 + v55);
  int64_t v64 = swift_retain();
  uint64_t v65 = sub_23474B32C(v64, v63, v274, v251, v247, v246);
  swift_release();
  uint64_t v236 = qword_2687ACB88;
  uint64_t v66 = *(void *)(v6 + qword_2687ACB88);
  v274.i64[0] = v6;
  uint64_t v252 = v45;
  v251.i64[0] = (uint64_t)v65;
  if (v66)
  {
    swift_retain();
    BOOL v67 = sub_23474ACA8(v65, 0.001);
    swift_release();
    if (v67) {
      goto LABEL_56;
    }
  }
  uint64_t v68 = OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childObjects;
  unint64_t v69 = *(unint64_t *)((char *)v65->u64 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childObjects);
  uint64_t v70 = (__n128 *)v65;
  if (v69 >> 62)
  {
    __n128 v83 = (__n128 *)v65;
    swift_bridgeObjectRetain();
    uint64_t v71 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
    uint64_t v70 = v83;
  }
  else
  {
    uint64_t v71 = *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v72 = MEMORY[0x263F8EE78];
  if (v71 >= 1)
  {
    unint64_t v73 = *(unint64_t *)((char *)v70->n128_u64 + v68);
    if (v73 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_2347EEEC0();
      if (v47) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v47 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v47)
      {
LABEL_30:
        v246.n128_u64[0] = v73;
        v247.n128_u64[0] = v5;
        v277[0] = v72;
        sub_2347456E0(0, v47 & ~(v47 >> 63), 0);
        if (v47 < 0)
        {
          __break(1u);
          goto LABEL_102;
        }
        uint64_t v74 = 0;
        uint64_t v72 = v277[0];
        unint64_t v75 = v246.n128_u64[0];
        unint64_t v76 = v246.n128_u64[0] & 0xC000000000000001;
        do
        {
          if (v76) {
            uint64_t v77 = MEMORY[0x237DC6CF0](v74, v75);
          }
          else {
            uint64_t v77 = swift_retain();
          }
          char v78 = *(unsigned char *)(v77 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category);
          swift_release();
          v277[0] = v72;
          unint64_t v80 = *(void *)(v72 + 16);
          unint64_t v79 = *(void *)(v72 + 24);
          if (v80 >= v79 >> 1)
          {
            sub_2347456E0(v79 > 1, v80 + 1, 1);
            unint64_t v75 = v246.n128_u64[0];
            uint64_t v72 = v277[0];
          }
          ++v74;
          *(void *)(v72 + 16) = v80 + 1;
          *(unsigned char *)(v72 + v80 + 32) = v78;
          uint64_t v6 = v274.i64[0];
        }
        while (v47 != v74);
        swift_bridgeObjectRelease();
        unint64_t v5 = v247.n128_u64[0];
        goto LABEL_42;
      }
    }
    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t v70 = (__n128 *)v251.i64[0];
  }
  v247.n128_u64[0] = v5;
  uint64_t v84 = v252;
  if (qword_2687ABE08 != -1)
  {
    int64_t v175 = v70;
    swift_once();
    uint64_t v70 = v175;
  }
  v246.n128_u64[0] = qword_2687BE178;
  __n128 v241 = v70[1];
  float32x4_t v85 = v70;
  unsigned __int32 v86 = *(unsigned __int8 *)(v84 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category);
  int v242 = *(unsigned __int8 *)(v6 + qword_2687ACB60);
  v243.n128_u32[0] = v86;
  uint64_t v87 = v268;
  sub_2346A7BCC((uint64_t)v70 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_curve, (uint64_t)v268, (uint64_t *)&unk_2687AE190);
  uint64_t v240 = *(uint64_t *)((char *)v85->n128_i64 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_polygonCorners);
  uint64_t v239 = *(uint64_t *)((char *)v85->n128_i64 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_straightOpeningElements);
  unint64_t v238 = *(unint64_t *)((char *)v85->n128_u64
                             + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_curvedOpeningElements);
  int64_t v88 = *(void **)((char *)v85->n128_u64 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childObjectElements);
  uint64_t v235 = OBJC_IVAR____TtC8RoomPlan8ScanItem_type;
  int v89 = *(unsigned __int8 *)(v84 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type);
  uint64_t v90 = v269.i64[0];
  sub_2346A7BCC((uint64_t)v85 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_leftStrut, v269.i64[0], &qword_2687AC800);
  uint64_t v91 = v270;
  sub_2346A7BCC((uint64_t)v85 + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_rightStrut, v270, &qword_2687AC800);
  if (*(unsigned char *)(v274.i64[0] + qword_2687BDFC0 + 4)) {
    float v92 = 0.0;
  }
  else {
    float v92 = *(float *)(v274.i64[0] + qword_2687BDFC0);
  }
  type metadata accessor for RoomCaptureMeshDimensionsRestriction();
  uint64_t inited = swift_initStaticObject();
  __n128 v94 = sub_234764CD8(v242, v243.n128_u32[0], (uint64_t)v87, v240, v239, v238, v88, v72, v241, v92, v89 != 6, v89 != 6, v90, v91, inited);
  swift_bridgeObjectRelease();
  sub_2346A7C30(v91, &qword_2687AC800);
  sub_2346A7C30(v90, &qword_2687AC800);
  sub_2346A7C30((uint64_t)v87, (uint64_t *)&unk_2687AE190);
  uint64_t v95 = v94[4];
  v246.n128_u64[0] = (unint64_t)v94;
  uint64_t v96 = qword_2687ACB80;
  LODWORD(v270) = sub_23470A67C(v95, *(void *)(v274.i64[0] + qword_2687ACB80));
  __n128 v97 = (void *)(v274.i64[0] + qword_2687BDFB0);
  swift_beginAccess();
  sub_2346A1DCC((uint64_t)v97, (uint64_t)v277);
  uint64_t v98 = v278;
  uint64_t v99 = v279;
  __swift_project_boxed_opaque_existential_1(v277, v278);
  v269.i32[0] = (*(uint64_t (**)(void, uint64_t, uint64_t))(v99 + 40))(*(void *)(v94[2] + 16), v98, v99);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v277);
  *(void *)(v274.i64[0] + v96) = v94[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  float32x4_t v268 = *(uint64_t (**)(void, __n128))(v274.i64[0] + qword_2687ACB70);
  uint64_t v100 = v97[3];
  uint64_t v101 = v97[4];
  __n128 v102 = __swift_project_boxed_opaque_existential_1(v97, v100);
  uint64_t v103 = *(void *)(v100 - 8);
  double v104 = MEMORY[0x270FA5388](v102);
  long long v106 = (char *)&v235 - v105;
  (*(void (**)(char *, double))(v103 + 16))((char *)&v235 - v105, v104);
  v107.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v101 + 16))(v100, v101);
  __n128 v243 = v107;
  uint64_t v108 = v100;
  uint64_t v109 = v246.n128_u64[0];
  uint64_t v110 = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v106, v108);
  char v111 = v268(v110, v243);
  unint64_t v112 = v247.n128_u64[0];
  sub_2346D5DF0(v109, v111 & 1 | ((v270 & 1) == 0) | v269.i8[0] & 1);
  if (v112)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  sub_2346A1DCC((uint64_t)v97, (uint64_t)v277);
  uint64_t v113 = v278;
  uint64_t v114 = v279;
  __swift_project_boxed_opaque_existential_1(v277, v278);
  uint64_t v116 = *(void *)(v109 + 16);
  uint64_t v115 = *(void *)(v109 + 24);
  float32x4_t v117 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v114 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v117(v252, v116, v115, v113, v114, a3);
  unint64_t v5 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v277);
  uint64_t v6 = v274.i64[0];
  *(void *)(v274.i64[0] + v236) = v251.i64[0];
  swift_retain();
  swift_release();
  BOOL IsVoiceOverRunning = UIAccessibilityIsVoiceOverRunning();
  uint64_t v47 = v252;
  if (IsVoiceOverRunning && *(unsigned char *)(v252 + v235) == 2 && *(unsigned char *)(v6 + v237) == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
    uint64_t v119 = swift_allocObject();
    *(_OWORD *)(v119 + 16) = xmmword_2347F19B0;
    sub_2347ED900();
    *(void *)(v119 + 32) = MEMORY[0x237DC5870](*(__n128 *)(v47 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawDimensions));
    v277[0] = v119;
    sub_2347EE7F0();
    (*(void (**)(char *, void, uint64_t))(v254 + 104))(v253, *MEMORY[0x263F16208], v255);
    sub_2347ED9A0();
    uint64_t v120 = v256;
    sub_2347EDAC0();
    uint64_t v121 = v263.i64[0];
    sub_2347EDEC0();
    uint64_t v122 = v262.i64[0];
    sub_2347EDEE0();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v264.i64[0] + 8))(v121, v265);
    (*(void (**)(uint64_t, uint64_t))(v257 + 8))(v120, v122);
  }
  else
  {
    uint64_t v123 = v263.i64[0];
    sub_2347EDEC0();
    sub_2347EDEF0();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v264.i64[0] + 8))(v123, v265);
  }
LABEL_56:
  type metadata accessor for ScanEntity();
  sub_2347ED740();
  sub_2347ED780();
  uint64_t v124 = *(void *)(v6 + qword_2687BDFC8);
  if (v124) {
    sub_2347EDF90();
  }
  uint64_t v265 = v124;
  uint64_t v71 = (uint64_t)qword_2687BE000;
  if (dword_2687BE088)
  {
    if (qword_2687ABDC8 == -1)
    {
LABEL_60:
      uint64_t v125 = qword_2687BE090;
      if (qword_2687BE090)
      {
        if (*(unsigned char *)(qword_2687BE090 + 16) == 1)
        {
          swift_beginAccess();
          uint64_t v126 = *(void *)(v125 + 24);
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v127 = sub_23471262C(v6, v126);
          swift_release();
          swift_bridgeObjectRelease();
          if (v127)
          {
            if ((sub_2347EDF80() & 1) == 0) {
              sub_2347EDF90();
            }
            swift_release();
          }
        }
      }
      goto LABEL_66;
    }
LABEL_102:
    swift_once();
    goto LABEL_60;
  }
LABEL_66:
  if ((!v265 || (sub_2347EDF80() & 1) == 0) && ((*(unsigned char *)(v71 + 136) & 1) == 0 || *(unsigned char *)(v6 + v237) != 1)) {
    goto LABEL_73;
  }
  uint64_t v128 = v47 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
  swift_beginAccess();
  uint64_t v129 = v267.i64[0];
  sub_2346A7BCC(v128, v267.i64[0], &qword_2687AC8F8);
  uint64_t v130 = type metadata accessor for AnimationGraph();
  uint64_t v131 = *(void *)(v130 - 8);
  uint64_t v132 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  uint64_t v133 = (uint64_t (*)(void, __n128))(v131 + 48);
  if (v132(v129, 1, v130) == 1
    || (uint64_t v256 = *(unsigned int *)(v129 + 16),
        sub_2346B184C(v129),
        uint64_t v129 = v266.i64[0],
        sub_2346A7BCC(v128, v266.i64[0], &qword_2687AC8F8),
        v132(v129, 1, v130) == 1))
  {
    sub_2346A7C30(v129, &qword_2687AC8F8);
LABEL_73:
    if (*(void *)(v6 + qword_2687ACB78)) {
      REMeshComponentSetBoundsMargin();
    }
    swift_release();
    return swift_release();
  }
  float32x4_t v268 = v133;
  uint64_t v270 = v130;
  uint64_t v134 = swift_bridgeObjectRetain();
  uint64_t v255 = sub_2346D69F0(v134);
  swift_bridgeObjectRelease();
  uint64_t v135 = sub_2346B184C(v129);
  __n128 v136 = *(__n128 *)(v47 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition);
  __n128 v137 = *(__n128 *)(v47 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
  __n128 v258 = (__n128)xmmword_2347F1A00;
  *(double *)v282.columns[0].i64 = MEMORY[0x237DC6930](v135, v136, v137);
  simd_float4x4 v283 = __invert_f4(v282);
  float32x4_t v266 = (float32x4_t)v283.columns[0];
  float32x4_t v263 = (float32x4_t)v283.columns[2];
  float32x4_t v264 = (float32x4_t)v283.columns[1];
  float32x4_t v262 = (float32x4_t)v283.columns[3];
  uint64_t v138 = swift_bridgeObjectRetain();
  uint64_t v139 = sub_2346B14F8(v138);
  swift_bridgeObjectRelease();
  uint64_t v140 = *(void *)(v139 + 16);
  swift_bridgeObjectRelease();
  v247.n128_u64[0] = v5;
  if (v140)
  {
    uint64_t v141 = swift_bridgeObjectRetain();
    uint64_t v142 = sub_2346B14F8(v141);
    swift_bridgeObjectRelease();
    int64_t v143 = *(void *)(v142 + 16);
    if (v143)
    {
      uint64_t v276 = MEMORY[0x263F8EE78];
      sub_23473D210(0, v143, 0);
      uint64_t v145 = 0;
      uint64_t v146 = v276;
      unint64_t v147 = *(void *)(v276 + 16);
      float32x4_t v148 = v266;
      float32x4_t v150 = v263;
      float32x4_t v149 = v264;
      float32x4_t v151 = v262;
      do
      {
        float32x4_t v152 = *(float32x4_t *)(v142 + 16 * v145 + 32);
        uint64_t v276 = v146;
        unint64_t v153 = *(void *)(v146 + 24);
        if (v147 >= v153 >> 1)
        {
          float32x4_t v269 = v144;
          float32x4_t v267 = v152;
          sub_23473D210(v153 > 1, v147 + 1, 1);
          float32x4_t v148 = v266;
          float32x4_t v152 = v267;
          v144.i32[3] = v269.i32[3];
          float32x4_t v151 = v262;
          float32x4_t v150 = v263;
          float32x4_t v149 = v264;
          uint64_t v146 = v276;
        }
        float32x4_t v154 = vaddq_f32(v151, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v152.f32[0]), v149, *(float32x2_t *)v152.f32, 1), v150, v152, 2));
        ++v145;
        v154.i32[3] = v144.i32[3];
        *(void *)(v146 + 16) = v147 + 1;
        *(float32x4_t *)(v146 + 16 * v147++ + 32) = v154;
        float32x4_t v144 = v154;
      }
      while (v143 != v145);
      v267.i64[0] = v146;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v267.i64[0] = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    sub_234787700(*(double *)(v47 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions));
    v267.i64[0] = v155;
  }
  v269.i64[0] = (uint64_t)v132;
  unint64_t v156 = *(void *)(v251.i64[0] + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childOpenings);
  if (v156 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v157 = sub_2347EEEC0();
    if (v157) {
      goto LABEL_88;
    }
  }
  else
  {
    uint64_t v157 = *(void *)((v156 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v157)
    {
LABEL_88:
      if (v157 < 1)
      {
        __break(1u);
LABEL_191:
        uint64_t result = sub_2347EEF10();
        __break(1u);
        return result;
      }
      uint64_t v158 = 0;
      unint64_t v159 = v156 & 0xC000000000000001;
      unint64_t v160 = (void *)MEMORY[0x263F8EE78];
      unint64_t v257 = v156 & 0xC000000000000001;
      do
      {
        if (v159)
        {
          uint64_t v161 = MEMORY[0x237DC6CF0](v158, v156);
        }
        else
        {
          uint64_t v161 = *(void *)(v156 + 8 * v158 + 32);
          swift_retain();
        }
        uint64_t v162 = v161 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
        swift_beginAccess();
        uint64_t v163 = v162;
        uint64_t v164 = v272;
        sub_2346A7BCC(v163, v272, &qword_2687AC8F8);
        if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v269.i64[0])(v164, 1, v270) == 1)
        {
          sub_2346A7C30(v164, &qword_2687AC8F8);
          swift_release();
        }
        else
        {
          uint64_t v165 = v157;
          unint64_t v166 = v156;
          *(double *)v167.i64 = MEMORY[0x237DC6930](*(__n128 *)(v161 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition), *(__n128 *)(v161 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation), v258);
          uint64_t v168 = v164;
          uint64_t v172 = sub_234701A9C((float32x4_t *)v267.i64[0], v167, v169, v170, v171, v266, v264, v263, v262);
          sub_2346B184C(v168);
          swift_release();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v160 = sub_2346FB390(0, v160[2] + 1, 1, v160);
          }
          unint64_t v174 = v160[2];
          unint64_t v173 = v160[3];
          if (v174 >= v173 >> 1) {
            unint64_t v160 = sub_2346FB390((void *)(v173 > 1), v174 + 1, 1, v160);
          }
          void v160[2] = v174 + 1;
          v160[v174 + 4] = v172;
          unint64_t v156 = v166;
          uint64_t v157 = v165;
          unint64_t v159 = v257;
        }
        ++v158;
      }
      while (v157 != v158);
      goto LABEL_105;
    }
  }
  unint64_t v160 = (void *)MEMORY[0x263F8EE78];
LABEL_105:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v176 = v160[2];
  if (!v176)
  {
    uint64_t v178 = MEMORY[0x263F8EE78];
    goto LABEL_129;
  }
  swift_bridgeObjectRetain();
  uint64_t v177 = 0;
  uint64_t v178 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v179 = v160[v177 + 4];
    uint64_t v180 = *(void *)(v179 + 16);
    int64_t v181 = *(void *)(v178 + 16);
    int64_t v182 = v181 + v180;
    if (__OFADD__(v181, v180)) {
      goto LABEL_181;
    }
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v182 <= *(void *)(v178 + 24) >> 1)
    {
      if (!*(void *)(v179 + 16)) {
        goto LABEL_107;
      }
    }
    else
    {
      if (v181 <= v182) {
        int64_t v184 = v181 + v180;
      }
      else {
        int64_t v184 = v181;
      }
      uint64_t v178 = sub_2346FAFC4(isUniquelyReferenced_nonNull_native, v184, 1, v178);
      if (!*(void *)(v179 + 16))
      {
LABEL_107:
        if (v180) {
          goto LABEL_182;
        }
        goto LABEL_108;
      }
    }
    uint64_t v185 = *(void *)(v178 + 16);
    uint64_t v186 = (*(void *)(v178 + 24) >> 1) - v185;
    uint64_t v187 = *(void *)(type metadata accessor for LineAnimation() - 8);
    uint64_t v188 = *(void *)(v187 + 72);
    if (v186 < v180) {
      goto LABEL_185;
    }
    unint64_t v189 = (*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80);
    unint64_t v190 = v178 + v189 + v188 * v185;
    unint64_t v191 = v179 + v189;
    uint64_t v192 = v188 * v180;
    unint64_t v193 = v190 + v192;
    unint64_t v194 = v191 + v192;
    if (v191 < v193 && v190 < v194) {
      goto LABEL_191;
    }
    swift_arrayInitWithCopy();
    if (v180)
    {
      uint64_t v196 = *(void *)(v178 + 16);
      BOOL v197 = __OFADD__(v196, v180);
      uint64_t v198 = v196 + v180;
      if (v197) {
        goto LABEL_187;
      }
      *(void *)(v178 + 16) = v198;
    }
LABEL_108:
    ++v177;
    swift_bridgeObjectRelease();
  }
  while (v176 != v177);
  swift_bridgeObjectRelease();
LABEL_129:
  swift_bridgeObjectRelease();
  uint64_t v176 = *(void *)(v251.i64[0] + OBJC_IVAR____TtC8RoomPlan19ScanEntityMeshModel_childObjects);
  uint64_t v177 = v252;
  if ((unint64_t)v176 >> 62) {
    goto LABEL_189;
  }
  uint64_t v199 = *(void *)((v176 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  swift_retain();
LABEL_131:
  uint64_t v200 = (void *)MEMORY[0x263F8EE78];
  if (v199)
  {
    unint64_t v272 = v176 & 0xC000000000000001;
    uint64_t v201 = 4;
    v267.i64[0] = v176;
    v266.i64[0] = v178;
    do
    {
      uint64_t v202 = v201 - 4;
      if (v272)
      {
        uint64_t v176 = MEMORY[0x237DC6CF0](v201 - 4, v176);
        uint64_t v203 = v201 - 3;
        if (__OFADD__(v202, 1)) {
          goto LABEL_180;
        }
      }
      else
      {
        uint64_t v176 = *(void *)(v176 + 8 * v201);
        swift_retain();
        uint64_t v203 = v201 - 3;
        if (__OFADD__(v202, 1))
        {
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          swift_bridgeObjectRetain_n();
          swift_retain();
          uint64_t v199 = sub_2347EEEC0();
          goto LABEL_131;
        }
      }
      uint64_t v204 = sub_2346D304C(*(unsigned __int8 *)(v176 + OBJC_IVAR____TtC8RoomPlan8ScanItem_category));
      uint64_t v205 = v176 + OBJC_IVAR____TtC8RoomPlan8ScanItem_animationGraph;
      swift_beginAccess();
      uint64_t v206 = v205;
      uint64_t v207 = v271;
      sub_2346A7BCC(v206, v271, &qword_2687AC8F8);
      if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v269.i64[0])(v207, 1, v270) == 1)
      {
        sub_2346A7C30(v207, &qword_2687AC8F8);
        swift_release();
        uint64_t v177 = v252;
        uint64_t v178 = v266.i64[0];
      }
      else
      {
        unint64_t v208 = sub_2347023A8(v176, v252, v204);
        sub_2346B184C(v207);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v200 = sub_2346FB390(0, v200[2] + 1, 1, v200);
        }
        uint64_t v178 = v266.i64[0];
        unint64_t v210 = v200[2];
        unint64_t v209 = v200[3];
        if (v210 >= v209 >> 1) {
          uint64_t v200 = sub_2346FB390((void *)(v209 > 1), v210 + 1, 1, v200);
        }
        v200[2] = v210 + 1;
        v200[v210 + 4] = v208;
        uint64_t v177 = v252;
      }
      ++v201;
      uint64_t v176 = v267.i64[0];
    }
    while (v203 != v199);
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v272 = v200[2];
  if (v272)
  {
    swift_bridgeObjectRetain();
    uint64_t v211 = 0;
    uint64_t v212 = MEMORY[0x263F8EE78];
    while (1)
    {
      uint64_t v213 = v200[v211 + 4];
      uint64_t v177 = *(void *)(v213 + 16);
      int64_t v214 = *(void *)(v212 + 16);
      uint64_t v176 = v214 + v177;
      if (__OFADD__(v214, v177)) {
        goto LABEL_183;
      }
      swift_bridgeObjectRetain();
      int v215 = swift_isUniquelyReferenced_nonNull_native();
      if (v215 && v176 <= *(void *)(v212 + 24) >> 1)
      {
        if (*(void *)(v213 + 16)) {
          goto LABEL_159;
        }
      }
      else
      {
        if (v214 <= v176) {
          int64_t v216 = v214 + v177;
        }
        else {
          int64_t v216 = v214;
        }
        uint64_t v212 = sub_2346FAFC4(v215, v216, 1, v212);
        if (*(void *)(v213 + 16))
        {
LABEL_159:
          uint64_t v217 = *(void *)(v212 + 16);
          uint64_t v176 = (*(void *)(v212 + 24) >> 1) - v217;
          uint64_t v218 = *(void *)(type metadata accessor for LineAnimation() - 8);
          uint64_t v219 = *(void *)(v218 + 72);
          if (v176 < v177) {
            goto LABEL_186;
          }
          unint64_t v220 = (*(unsigned __int8 *)(v218 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 80);
          unint64_t v221 = v212 + v220 + v219 * v217;
          unint64_t v222 = v213 + v220;
          uint64_t v223 = v219 * v177;
          unint64_t v224 = v221 + v223;
          unint64_t v225 = v222 + v223;
          if (v222 < v224 && v221 < v225) {
            goto LABEL_191;
          }
          swift_arrayInitWithCopy();
          if (v177)
          {
            uint64_t v227 = *(void *)(v212 + 16);
            BOOL v197 = __OFADD__(v227, v177);
            uint64_t v228 = v227 + v177;
            if (v197) {
              goto LABEL_188;
            }
            *(void *)(v212 + 16) = v228;
          }
          goto LABEL_149;
        }
      }
      if (v177) {
        goto LABEL_184;
      }
LABEL_149:
      ++v211;
      swift_bridgeObjectRelease();
      if (v272 == v211)
      {
        swift_bridgeObjectRelease();
        uint64_t v177 = v252;
        goto LABEL_170;
      }
    }
  }
  uint64_t v212 = MEMORY[0x263F8EE78];
LABEL_170:
  swift_bridgeObjectRelease();
  uint64_t v275 = v255;
  sub_2346DA574(v178);
  sub_2346DA574(v212);
  uint64_t v229 = v275;
  float32x4_t v230 = v250;
  if (qword_2687ABDC8 != -1) {
    swift_once();
  }
  uint64_t v231 = qword_2687BE090;
  unint64_t v232 = v247.n128_u64[0];
  uint64_t v6 = v274.i64[0];
  if (qword_2687BE090)
  {
    v259(v230, v177 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid, v273);
    swift_beginAccess();
    uint64_t v233 = *(void *)(v231 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v234 = sub_23471262C(v6, v233);
    swift_release();
    swift_bridgeObjectRelease();
    if (v234)
    {
      sub_2347136AC(v229);
      swift_release();
    }
    v248(v230, v273);
  }
  if (!v265 || (char v281 = 0, sub_234705B88(v229, v256, v261, v280 & 1), !v232))
  {
    swift_bridgeObjectRelease();
    goto LABEL_73;
  }
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_2346D5D54()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + qword_2687ACB78) = 0;
  *(void *)(v0 + qword_2687ACB80) = MEMORY[0x263F8EE78];
  *(void *)(v0 + qword_2687ACB88) = 0;
  swift_release();
  sub_2347EEEA0();
  __break(1u);
}

uint64_t sub_2346D5DF0(uint64_t a1, char a2)
{
  void (*v56)(long long *__return_ptr, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, void, uint64_t, uint64_t);
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  long long v69;
  uint64_t v70;
  uint64_t v71[6];
  uint64_t v72;

  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v66 = a1;
  float32x4_t v59 = sub_2347ED670();
  long long v58 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  simd_float4x4 v57 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACBA0);
  float32x4_t v60 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_2347ED7D0();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACBA8);
  MEMORY[0x270FA5388](v15 - 8);
  __n128 v62 = (uint64_t)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  BOOL v67 = (uint64_t *)((char *)&v55 - v18);
  MEMORY[0x270FA5388](v19);
  __n128 v61 = (char *)&v55 - v20;
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v55 - v23;
  uint64_t v65 = *(unsigned __int8 *)(v5 + qword_2687ACB60);
  uint64_t v68 = v12;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
  uint64_t v72 = v11;
  unsigned __int32 v63 = v25;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v25)((char *)&v55 - v23, 1, 1, v11, v22);
  if (a2)
  {
    int64_t v64 = v3;
    if (qword_2687ABE08 != -1) {
      swift_once();
    }
    sub_234764918(v66);
    uint64_t v26 = (uint64_t *)(v5 + qword_2687BDFB0);
    swift_beginAccess();
    sub_2346A1DCC((uint64_t)v26, (uint64_t)v71);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC970);
    type metadata accessor for MeshUpdateScanMaterial();
    if (swift_dynamicCast())
    {
      swift_release();
      uint64_t v55 = v5;
      long long v56 = *(void (**)(long long *__return_ptr, uint64_t))(v5 + qword_2687ACB68);
      uint64_t v27 = v72;
      sub_2347EE2C0();
      uint64_t v28 = sub_2347EE060();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v10, v8);
      uint64_t v29 = v64;
      v56(&v69, v28);
      uint64_t v4 = v29;
      if (v29)
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v14, v27);
        return sub_2346A7C30((uint64_t)v24, &qword_2687ACBA8);
      }
      uint64_t v5 = v55;
      uint64_t v32 = (uint64_t)v67;
      uint64_t v31 = v68;
      if (v70)
      {
        sub_2346A7C30((uint64_t)v24, &qword_2687ACBA8);
        sub_2346A1E30(&v69, (uint64_t)v71);
        uint64_t v53 = v14;
        uint64_t v30 = v72;
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v24, v53, v72);
        v63(v24, 0, 1, v30);
        swift_beginAccess();
        __swift_assign_boxed_opaque_existential_1(v26, v71);
        swift_endAccess();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
        *(void *)(v5 + qword_2687ACB78) = 0;
      }
      else
      {
        unint64_t v54 = v14;
        uint64_t v30 = v72;
        (*(void (**)(char *, uint64_t))(v68 + 8))(v54, v72);
        sub_2346A7C30((uint64_t)&v69, &qword_2687ACBB0);
      }
    }
    else
    {
      uint64_t v31 = v68;
      int32x4_t v33 = v14;
      uint64_t v30 = v72;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v33, v72);
      uint64_t v4 = v64;
      uint64_t v32 = (uint64_t)v67;
    }
  }
  else
  {
    uint64_t v30 = v72;
    uint64_t v32 = (uint64_t)v67;
    uint64_t v31 = v68;
  }
  if (*(void *)(v5 + qword_2687ACB78)) {
    return sub_2346A7C30((uint64_t)v24, &qword_2687ACBA8);
  }
  float32x4_t v60 = qword_2687ACB78;
  int64_t v64 = v4;
  sub_2346A7BCC((uint64_t)v24, v32, &qword_2687ACBA8);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v35(v32, 1, v30) == 1)
  {
    if (qword_2687ABE08 != -1) {
      swift_once();
    }
    uint64_t v36 = v61;
    sub_234764918(v66);
    uint64_t v37 = (uint64_t)v36;
    sub_2346A7C30((uint64_t)v24, &qword_2687ACBA8);
    sub_2346A7C30((uint64_t)v67, &qword_2687ACBA8);
    uint64_t v30 = v72;
  }
  else
  {
    sub_2346A7C30((uint64_t)v24, &qword_2687ACBA8);
    long long v38 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 32);
    uint64_t v37 = (uint64_t)v61;
    v38(v61, v32, v30);
  }
  v63((char *)v37, 0, 1, v30);
  sub_2346D6D58(v37, (uint64_t)v24);
  if (qword_2687ABE08 != -1) {
    swift_once();
  }
  uint64_t v39 = v62;
  sub_2346A7BCC((uint64_t)v24, v62, &qword_2687ACBA8);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v35)(v39, 1, v30);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v40 = sub_2346D7A70((unint64_t *)&qword_2687AC580, (void (*)(uint64_t))type metadata accessor for ScanEntity);
    int8x16_t v41 = (void *)(v5 + qword_2687BDFB0);
    swift_beginAccess();
    uint64_t v42 = v41[3];
    uint64_t v43 = v41[4];
    char v44 = __swift_project_boxed_opaque_existential_1(v41, v42);
    BOOL v67 = &v55;
    uint64_t v45 = v5;
    uint64_t v46 = *(void *)(v42 - 8);
    double v47 = MEMORY[0x270FA5388](v44);
    uint64_t v49 = (char *)&v55 - v48;
    (*(void (**)(char *, double))(v46 + 16))((char *)&v55 - v48, v47);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v43 + 8))(v71, v42, v43);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v42);
    uint64_t v50 = v64;
    sub_234768190(v45, v40, v39, (uint64_t)v71);
    sub_2346A7C30((uint64_t)v71, &qword_2687AD280);
    if (v50)
    {
      sub_2346A7C30((uint64_t)v24, &qword_2687ACBA8);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v39, v72);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v39, v72);
      float v51 = v57;
      sub_2347EDEA0();
      sub_2347ED600();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v51, v59);
      REMeshComponentGetComponentType();
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      uint64_t result = sub_2346A7C30((uint64_t)v24, &qword_2687ACBA8);
      *(void *)(v45 + v60) = ComponentByClass;
    }
  }
  return result;
}

uint64_t sub_2346D673C()
{
  uint64_t v1 = v0 + qword_2687BDFA8;
  uint64_t v2 = sub_2347ED5C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + qword_2687BDFB0);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_2346D6810()
{
  if (*(void *)(v0 + qword_2687BDFC8))
  {
    type metadata accessor for ScanEntity();
    swift_retain();
    sub_2347ED6E0();
    swift_release();
  }
  if (qword_2687ABDC8 != -1) {
    swift_once();
  }
  if (qword_2687BE090)
  {
    swift_beginAccess();
    uint64_t v1 = swift_retain();
    sub_2347CC948(v1);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  uint64_t v2 = sub_2347EDFC0();
  uint64_t v3 = v2 + qword_2687BDFA8;
  uint64_t v4 = sub_2347ED5C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(v2 + qword_2687BDFB0);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_2346D69E8()
{
  return type metadata accessor for ScanEntity();
}

uint64_t sub_2346D69F0(uint64_t a1)
{
  uint64_t v34 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  unint64_t v7 = MEMORY[0x263F8EE78];
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v6 << 6);
    }
    else
    {
      int64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_47;
      }
      if (v10 >= v5)
      {
LABEL_42:
        swift_release();
        return v7;
      }
      unint64_t v11 = *(void *)(v34 + 8 * v10);
      ++v6;
      if (!v11)
      {
        int64_t v6 = v10 + 1;
        if (v10 + 1 >= v5) {
          goto LABEL_42;
        }
        unint64_t v11 = *(void *)(v34 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 2;
          if (v10 + 2 >= v5) {
            goto LABEL_42;
          }
          unint64_t v11 = *(void *)(v34 + 8 * v6);
          if (!v11)
          {
            int64_t v6 = v10 + 3;
            if (v10 + 3 >= v5) {
              goto LABEL_42;
            }
            unint64_t v11 = *(void *)(v34 + 8 * v6);
            if (!v11)
            {
              int64_t v12 = v10 + 4;
              if (v12 >= v5) {
                goto LABEL_42;
              }
              unint64_t v11 = *(void *)(v34 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  int64_t v6 = v12 + 1;
                  if (__OFADD__(v12, 1)) {
                    goto LABEL_48;
                  }
                  if (v6 >= v5) {
                    goto LABEL_42;
                  }
                  unint64_t v11 = *(void *)(v34 + 8 * v6);
                  ++v12;
                  if (v11) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v6 = v12;
            }
          }
        }
      }
LABEL_23:
      unint64_t v4 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * v9);
    uint64_t v14 = *(void *)(v13 + 16);
    int64_t v15 = *(void *)(v7 + 16);
    int64_t v16 = v15 + v14;
    if (__OFADD__(v15, v14)) {
      break;
    }
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v16 <= *(void *)(v7 + 24) >> 1)
    {
      if (!*(void *)(v13 + 16)) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v15 <= v16) {
        int64_t v18 = v15 + v14;
      }
      else {
        int64_t v18 = v15;
      }
      unint64_t v7 = sub_2346FAFC4(isUniquelyReferenced_nonNull_native, v18, 1, v7);
      if (!*(void *)(v13 + 16))
      {
LABEL_4:
        if (v14) {
          goto LABEL_44;
        }
        goto LABEL_5;
      }
    }
    uint64_t v19 = *(void *)(v7 + 16);
    uint64_t v20 = (*(void *)(v7 + 24) >> 1) - v19;
    uint64_t v21 = *(void *)(type metadata accessor for LineAnimation() - 8);
    uint64_t v22 = *(void *)(v21 + 72);
    if (v20 < v14) {
      goto LABEL_45;
    }
    unint64_t v23 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    unint64_t v24 = v7 + v23 + v22 * v19;
    unint64_t v25 = v13 + v23;
    uint64_t v26 = v22 * v14;
    unint64_t v27 = v24 + v26;
    unint64_t v28 = v25 + v26;
    if (v25 < v27 && v24 < v28) {
      goto LABEL_49;
    }
    swift_arrayInitWithCopy();
    if (v14)
    {
      uint64_t v30 = *(void *)(v7 + 16);
      BOOL v31 = __OFADD__(v30, v14);
      uint64_t v32 = v30 + v14;
      if (v31) {
        goto LABEL_46;
      }
      *(void *)(v7 + 16) = v32;
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346D6CE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_2687BDFA8;
  uint64_t v4 = sub_2347ED5C0();
  int64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_2346D6D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACBA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        unint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_2346D6FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13)
{
  return sub_2346D7070(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(long long *__return_ptr, uint64_t, uint64_t, __n128))sub_2346CEC20);
}

uint64_t sub_2346D7030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13)
{
  return sub_2346D7070(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(long long *__return_ptr, uint64_t, uint64_t, __n128))sub_2346CEDD0);
}

uint64_t sub_2346D7070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13, void (*a14)(long long *__return_ptr, uint64_t, uint64_t, __n128))
{
  void (*v38)(long long *__return_ptr, uint64_t, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  void (*v53)(long long *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void v59[3];
  uint64_t v60;
  uint64_t v61;
  long long v62;

  unint64_t v54 = a9;
  uint64_t v46 = a8;
  simd_float4x4 v57 = a5;
  long long v58 = a6;
  uint64_t v45 = a4;
  long long v56 = a3;
  uint64_t v43 = a2;
  uint64_t v53 = a14;
  char v15 = a7 & 1;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACBB8);
  MEMORY[0x270FA5388](v16 - 8);
  int64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  float v51 = (void (*)(char *, uint64_t, uint64_t))sub_2347EE370();
  uint64_t v50 = *((void *)v51 - 1);
  MEMORY[0x270FA5388](v51);
  int8x16_t v52 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_2347ED5C0();
  uint64_t v21 = *(void **)(v20 - 8);
  double v22 = MEMORY[0x270FA5388](v20);
  unint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a12 + qword_2687ACB78) = 0;
  uint64_t v48 = qword_2687ACB80;
  *(void *)(a12 + qword_2687ACB80) = MEMORY[0x263F8EE78];
  uint64_t v49 = qword_2687ACB88;
  *(void *)(a12 + qword_2687ACB88) = 0;
  uint64_t v55 = a1;
  unint64_t v25 = (void (*)(char *, uint64_t, uint64_t))v21[2];
  char v44 = a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
  uint64_t v26 = v25;
  ((void (*)(char *, double))v25)(v24, v22);
  unint64_t v27 = (void (*)(void))v21[4];
  double v47 = a12 + qword_2687BDFA8;
  v27();
  *(unsigned char *)(a12 + qword_2687BDFB8) = v15;
  swift_beginAccess();
  sub_2346A1DCC(a13 + 32, (uint64_t)v59);
  uint64_t v28 = v60;
  uint64_t v29 = v61;
  __swift_project_boxed_opaque_existential_1(v59, v60);
  swift_retain();
  v53(&v62, v28, v29, v54);
  int8x16_t v52 = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  sub_2346A1E30(&v62, a12 + qword_2687BDFB0);
  uint64_t v30 = (void *)(a12 + qword_2687ACB68);
  uint64_t v32 = v56;
  uint64_t v31 = v57;
  *uint64_t v30 = v43;
  v30[1] = v32;
  int32x4_t v33 = (void *)(a12 + qword_2687ACB70);
  *int32x4_t v33 = v45;
  v33[1] = v31;
  *(unsigned char *)(a12 + qword_2687ACB60) = v46;
  *(void *)(a12 + qword_2687BDFC8) = v58;
  uint64_t v34 = a12 + qword_2687BDFC0;
  *(_DWORD *)uint64_t v34 = a10;
  *(unsigned char *)(v34 + 4) = a11 & 1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v35 = sub_2347ED690();
  uint64_t v36 = v44;
  v26(v24, v44, v20);
  sub_2346D7A70((unint64_t *)&qword_2687AC808, MEMORY[0x263F07508]);
  swift_retain();
  sub_2347EF070();
  long long v38 = (void (*)(long long *__return_ptr, uint64_t, uint64_t, __n128))v21[1];
  unint64_t v37 = (unint64_t)(v21 + 1);
  uint64_t v53 = v38;
  ((void (*)(char *, uint64_t))v38)(v24, v20);
  sub_2347EDF70();
  if (v58)
  {
    v26(v24, v36, v20);
    swift_retain();
    *(void *)&__n128 v62 = sub_2347EF070();
    *((void *)&v62 + 1) = v39;
    ((void (*)(char *, uint64_t))v53)(v24, v20);
    sub_2347EE6F0();
    sub_2347EDF70();
    type metadata accessor for ScanEntity();
    sub_2347ED700();
    swift_release();
  }
  float v51 = v26;
  v54.n128_u64[0] = v37;
  uint64_t v40 = sub_2347EDB50();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v52, 1, 1, v40);
  type metadata accessor for ScanEntity();
  sub_2347EDAF0();
  sub_2347EE010();
  sub_2347ED7A0();
  if (qword_2687ABDC8 != -1) {
    swift_once();
  }
  if (qword_2687BE090)
  {
    v51(v24, v36, v20);
    sub_234712D0C(v35, (uint64_t)v24);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v53)(v24, v20);
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  return v35;
}

uint64_t sub_2346D7A70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2346D7AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13)
{
  return sub_2346D7070(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(long long *__return_ptr, uint64_t, uint64_t, __n128))sub_2346CECB0);
}

uint64_t sub_2346D7AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8, __n128 a9, int a10, char a11, uint64_t a12, uint64_t a13)
{
  return sub_2346D7070(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(long long *__return_ptr, uint64_t, uint64_t, __n128))sub_2346CED40);
}

uint64_t sub_2346D7B38(uint64_t a1, char a2, float a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(v7 + 16) = MEMORY[0x263F8EE78];
  *(void *)(v7 + 24) = v11;
  uint64_t v12 = (void **)(v7 + 16);
  *(void *)(v7 + 32) = v11;
  *(_DWORD *)(v7 + 44) = 1048576000;
  *(float *)(v7 + 40) = a3;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = 0;
    do
    {
      float32x4_t v28 = *(float32x4_t *)(a1 + 16 * v14 + 32);
      swift_beginAccess();
      char v15 = *v12;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v12 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        char v15 = sub_2346FB5F4(0, v15[2] + 1, 1, v15);
        *uint64_t v12 = v15;
      }
      unint64_t v18 = v15[2];
      unint64_t v17 = v15[3];
      if (v18 >= v17 >> 1)
      {
        char v15 = sub_2346FB5F4((void *)(v17 > 1), v18 + 1, 1, v15);
        *uint64_t v12 = v15;
      }
      ++v14;
      float32x4_t v19 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4, v28.f32[0]), a5, *(float32x2_t *)v28.f32, 1), a6, v28, 2), a7);
      v19.i32[3] = 0;
      v15[2] = v18 + 1;
      uint64_t v20 = (float32x4_t *)&v15[4 * v18];
      v20[2] = v19;
      v20[3].f32[0] = a3;
      swift_endAccess();
    }
    while (v13 != v14);
  }
  swift_bridgeObjectRelease();
  sub_2346D85CC(a2);
  if (a2 != 2)
  {
    float v21 = a3 * 0.05;
    sub_2346D7CDC(v21);
    *(float *)&double v22 = v21;
    sub_2346D8008(v22);
  }
  return v7;
}

uint64_t sub_2346D7CDC(float a1)
{
  uint64_t v6 = v1;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v1 + 16);
  unint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 == 1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v8 < 3)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 == 3)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    uint64_t v4 = sub_23473D098((uint64_t)v4);
    goto LABEL_7;
  }
  long long v35 = *(_OWORD *)(v7 + 64);
  long long v36 = *(_OWORD *)(v7 + 32);
  long long v33 = *(_OWORD *)(v7 + 128);
  long long v34 = *(_OWORD *)(v7 + 96);
  *(float32x2_t *)&long long v9 = sub_2347B9758(*(float32x2_t *)&v36, *(float32x2_t *)(v7 + 64), *(float32x2_t *)&v34, *(float32x2_t *)(v7 + 128), 0.0);
  long long v39 = v9;
  *(float32x2_t *)v10.f32 = sub_2347B9828(*(float32x2_t *)&v36, *(float32x2_t *)&v35, *(float32x2_t *)&v34, *(float32x2_t *)&v33, 0.0);
  int32x4_t v11 = (int32x4_t)vmulq_f32(v10, v10);
  v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
  float32x2_t v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
  float32x4_t v14 = vmulq_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
  float v15 = vmuls_lane_f32(a1, v14, 2);
  float32x2_t v16 = vmul_n_f32(*(float32x2_t *)v14.f32, a1);
  *(float32x2_t *)&long long v35 = vsub_f32(*(float32x2_t *)&v39, v16);
  v14.i64[0] = v35;
  v14.f32[2] = *((float *)&v39 + 2) - v15;
  v14.i32[3] = 0;
  float32x4_t v38 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACC38);
  uint64_t v1 = swift_allocObject();
  *(float32x2_t *)&long long v17 = vadd_f32(*(float32x2_t *)&v35, vmul_f32(v16, (float32x2_t)vdup_n_s32(0xBA83126F)));
  *((float *)&v17 + 2) = (float)(*((float *)&v39 + 2) - v15) + (float)(v15 * -0.001);
  HIDWORD(v17) = 0;
  *(_OWORD *)(v1 + 16) = xmmword_2347F1A10;
  *(_OWORD *)(v1 + 32) = v17;
  *(_DWORD *)(v1 + 48) = 0;
  LODWORD(v17) = *(_DWORD *)(v6 + 40);
  *(float32x4_t *)(v1 + 64) = v38;
  *(_DWORD *)(v1 + 80) = v17;
  __asm { FMOV            V2.2S, #0.25 }
  *(float32x2_t *)&long long v23 = vadd_f32(*(float32x2_t *)&v39, vmul_f32(v16, _D2));
  *((float *)&v23 + 2) = *((float *)&v39 + 2) + (float)(v15 * 0.25);
  HIDWORD(v23) = 0;
  *(_OWORD *)(v1 + 96) = v23;
  *(_DWORD *)(v1 + 112) = v17;
  *(_OWORD *)(v1 + 128) = v23;
  *(_DWORD *)(v1 + 144) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACC40);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2347F19A0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v2 + 32) = _D0;
  *(void *)(v2 + 40) = _D0;
  uint64_t v3 = (char **)(v6 + 32);
  swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)(v6 + 32) + 16);
  if (!v5) {
    goto LABEL_12;
  }
  swift_beginAccess();
  uint64_t v4 = *v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_19;
  }
LABEL_7:
  unint64_t v26 = 0;
  do
  {
    *uint64_t v3 = v4;
    if (v26 >= *((void *)v4 + 2))
    {
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    unint64_t v27 = &v4[2 * v26];
    int v28 = *((unsigned __int16 *)v27 + 16) + 4;
    if ((v28 & 0x10000) != 0) {
      goto LABEL_14;
    }
    ++v26;
    *((_WORD *)v27 + 16) = v28;
    uint64_t v4 = *v3;
  }
  while (v5 != v26);
  swift_endAccess();
LABEL_12:
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_2346DA9F0(v29);
  *(void *)(v6 + 16) = v1;
  swift_bridgeObjectRelease();
  uint64_t v30 = swift_bridgeObjectRetain();
  sub_2346DA8A8(v30);
  *(void *)(v6 + 32) = &unk_26E76F680;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v31 = swift_bridgeObjectRetain();
  sub_2346DA760(v31);
  *(void *)(v6 + 24) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2346D8008(double a1)
{
  uint64_t v10 = v1;
  *(double *)v66.i64 = a1;
  int32x4_t v11 = (void **)(v1 + 16);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v10 + 16);
  unint64_t v13 = *(void *)(v12 + 16);
  if (v13 < 4)
  {
    __break(1u);
    goto LABEL_40;
  }
  float32x4_t v14 = (float32x2_t *)(v12 + 32 * v13);
  *(float32x2_t *)&long long v15 = sub_2347B9758(v14[-12], v14[-8], v14[-4], *v14, 1.0);
  long long v67 = v15;
  *(float32x2_t *)v16.f32 = sub_2347B9828(v14[-12], v14[-8], v14[-4], *v14, 1.0);
  float32x4_t v65 = v16;
  int v6 = *(_DWORD *)(v10 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACC30);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F2580;
  *(_OWORD *)(inited + 32) = xmmword_2347F2590;
  swift_beginAccess();
  unint64_t v12 = *(void *)(v10 + 32);
  uint64_t v17 = *(void *)(v12 + 16);
  if (!v17)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v12 = *(unsigned __int16 *)(v12 + 2 * v17 + 30) + 1;
  if ((v12 & 0x10000) != 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  int v18 = *(unsigned __int16 *)(inited + 32) + (unsigned __int16)v12;
  if ((v18 & 0x10000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  *(_WORD *)(inited + 32) = v18;
  int v19 = *(unsigned __int16 *)(inited + 34) + (unsigned __int16)v12;
  if ((v19 & 0x10000) != 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  *(_WORD *)(inited + 34) = v19;
  int v20 = *(unsigned __int16 *)(inited + 36) + (unsigned __int16)v12;
  if ((v20 & 0x10000) != 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  *(_WORD *)(inited + 36) = v20;
  int v21 = *(unsigned __int16 *)(inited + 38) + (unsigned __int16)v12;
  if ((v21 & 0x10000) != 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  *(_WORD *)(inited + 38) = v21;
  int v22 = *(unsigned __int16 *)(inited + 40) + (unsigned __int16)v12;
  if ((v22 & 0x10000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  *(_WORD *)(inited + 40) = v22;
  int v23 = *(unsigned __int16 *)(inited + 42) + (unsigned __int16)v12;
  if ((v23 & 0x10000) != 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  *(_WORD *)(inited + 42) = v23;
  int v24 = *(unsigned __int16 *)(inited + 44) + (unsigned __int16)v12;
  if ((v24 & 0x10000) != 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  *(_WORD *)(inited + 44) = v24;
  unint64_t v12 = *(unsigned __int16 *)(inited + 46) + (unsigned __int16)v12;
  if ((v12 & 0x10000) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  *(_WORD *)(inited + 46) = v12;
  unint64_t v25 = *v11;
  uint64_t v3 = (void *)v25[2];
  int64_t v4 = (int64_t)v3 + 4;
  if (__OFADD__(v3, 4))
  {
LABEL_50:
    __break(1u);
LABEL_51:
    float32x4_t v60 = sub_2346FB5F4((void *)(v12 > 1), v4, 1, v3);
    float v34 = v65.f32[0];
    float32x4_t v33 = v66;
    uint64_t v3 = v60;
    unint64_t v12 = v60[3];
    int64_t v31 = v12 >> 1;
    goto LABEL_21;
  }
  int32x4_t v26 = (int32x4_t)vmulq_f32(v65, v65);
  v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
  float32x2_t v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
  float32x2_t v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
  float32x4_t v29 = vmulq_n_f32(v65, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]);
  float v7 = vmuls_lane_f32(v66.f32[0], v29, 2);
  float32x2_t v8 = vmul_n_f32(*(float32x2_t *)v29.f32, v66.f32[0]);
  *(float32x2_t *)v29.f32 = vadd_f32(*(float32x2_t *)&v67, vmul_f32(v8, (float32x2_t)vdup_n_s32(0x3F7FBE77u)));
  float32x4_t v66 = v29;
  float v9 = *((float *)&v67 + 2);
  v65.f32[0] = *((float *)&v67 + 2) + (float)(v7 * 0.999);
  swift_bridgeObjectRetain_n();
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && (unint64_t v12 = v25[3], v31 = v12 >> 1, (uint64_t)(v12 >> 1) >= v4))
  {
    uint64_t v3 = v25;
  }
  else
  {
    if ((uint64_t)v3 <= v4) {
      int64_t v32 = (int64_t)v3 + 4;
    }
    else {
      int64_t v32 = (int64_t)v3;
    }
    uint64_t v3 = sub_2346FB5F4(isUniquelyReferenced_nonNull_native, v32, 1, v25);
    unint64_t v12 = v3[3];
    int64_t v31 = v12 >> 1;
  }
  unint64_t v5 = v3[2];
  int64_t v4 = v5 + 1;
  float v34 = *((float *)&v67 + 2) + (float)(v7 * 0.999);
  float32x4_t v33 = v66;
  if (v31 <= v5) {
    goto LABEL_51;
  }
LABEL_21:
  float32x4_t v35 = v33;
  v35.f32[2] = v34;
  __asm { FMOV            V1.2S, #-0.25 }
  *(float32x2_t *)&long long v41 = vadd_f32(*(float32x2_t *)&v67, vmul_f32(v8, _D1));
  *((float *)&v41 + 2) = v9 + (float)(v7 * -0.25);
  HIDWORD(v41) = 0;
  v3[2] = v4;
  uint64_t v42 = &v3[4 * v5];
  *((_OWORD *)v42 + 2) = v41;
  *((_DWORD *)v42 + 12) = v6;
  unint64_t v43 = v5 + 2;
  if (v31 < (uint64_t)(v5 + 2))
  {
    float32x4_t v68 = v35;
    long long v64 = v41;
    __n128 v61 = sub_2346FB5F4((void *)(v12 > 1), v5 + 2, 1, v3);
    long long v41 = v64;
    float v34 = v65.f32[0];
    v33.i64[0] = v66.i64[0];
    float32x4_t v35 = v68;
    uint64_t v3 = v61;
    unint64_t v12 = v61[3];
    int64_t v31 = v12 >> 1;
  }
  v35.i32[3] = 0;
  v3[2] = v43;
  char v44 = &v3[4 * v4];
  *((_OWORD *)v44 + 2) = v41;
  *((_DWORD *)v44 + 12) = v6;
  unint64_t v45 = v5 + 3;
  if (v31 < (uint64_t)(v5 + 3))
  {
    float32x4_t v69 = v35;
    __n128 v62 = sub_2346FB5F4((void *)(v12 > 1), v5 + 3, 1, v3);
    v33.i64[0] = v66.i64[0];
    float32x4_t v35 = v69;
    float v34 = v65.f32[0];
    uint64_t v3 = v62;
    unint64_t v12 = v62[3];
    int64_t v31 = v12 >> 1;
  }
  v3[2] = v45;
  uint64_t v46 = (float32x4_t *)&v3[4 * v43];
  double v46[2] = v35;
  v46[3].i32[0] = v6;
  if (v31 < (uint64_t)(v5 + 4))
  {
    unsigned __int32 v63 = sub_2346FB5F4((void *)(v12 > 1), v5 + 4, 1, v3);
    float v34 = v65.f32[0];
    v33.i64[0] = v66.i64[0];
    uint64_t v3 = v63;
  }
  *(float32x2_t *)&long long v47 = vadd_f32(vmul_f32(v8, (float32x2_t)vdup_n_s32(0x3C23D70Au)), *(float32x2_t *)v33.f32);
  *((float *)&v47 + 2) = (float)(v7 * 0.01) + v34;
  HIDWORD(v47) = 0;
  v3[2] = v5 + 4;
  uint64_t v48 = &v3[4 * v45];
  *((_OWORD *)v48 + 2) = v47;
  *((_DWORD *)v48 + 12) = 0;
  swift_bridgeObjectRelease();
  *(void *)(v10 + 16) = v3;
  swift_bridgeObjectRelease();
  uint64_t v70 = *(void *)(v10 + 32);
  swift_bridgeObjectRetain();
  sub_2346DA8A8(inited);
  *(void *)(v10 + 32) = v70;
  swift_bridgeObjectRelease();
  uint64_t v49 = (void *)(v10 + 24);
  swift_beginAccess();
  float v51 = *(void **)(v10 + 24);
  int8x16_t v52 = (void *)v51[2];
  int64_t v53 = (int64_t)v52 + 2;
  if (__OFADD__(v52, 2))
  {
    __break(1u);
LABEL_53:
    int8x16_t v52 = sub_2346FB3D8((void *)(v50 > 1), v53, 1, v52);
    unint64_t v50 = v52[3];
    unint64_t v55 = v50 >> 1;
    goto LABEL_36;
  }
  swift_bridgeObjectRetain_n();
  unint64_t v54 = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (v54 && (unint64_t v50 = v51[3], v55 = v50 >> 1, (uint64_t)(v50 >> 1) >= v53))
  {
    int8x16_t v52 = v51;
  }
  else
  {
    if ((uint64_t)v52 <= v53) {
      int64_t v56 = (int64_t)v52 + 2;
    }
    else {
      int64_t v56 = (int64_t)v52;
    }
    int8x16_t v52 = sub_2346FB3D8(v54, v56, 1, v51);
    unint64_t v50 = v52[3];
    unint64_t v55 = v50 >> 1;
  }
  unint64_t v45 = v52[2];
  int64_t v53 = v45 + 1;
  if (v55 <= v45) {
    goto LABEL_53;
  }
LABEL_36:
  v52[2] = v53;
  __asm { FMOV            V8.2S, #1.0 }
  v52[v45 + 4] = _D8;
  int64_t v58 = v45 + 2;
  if ((uint64_t)v55 < v58) {
    int8x16_t v52 = sub_2346FB3D8((void *)(v50 > 1), v58, 1, v52);
  }
  v52[2] = v58;
  v52[v53 + 4] = _D8;
  swift_bridgeObjectRelease();
  *uint64_t v49 = v52;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2346D85CC(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v1 = v2 + 32;
      swift_beginAccess();
      float32x2_t v8 = (char *)*((void *)v2 + 4);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *((void *)v2 + 4) = v8;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_4:
        unint64_t v11 = *((void *)v8 + 2);
        unint64_t v10 = *((void *)v8 + 3);
        if (v11 >= v10 >> 1)
        {
          float32x2_t v8 = sub_2346FB4E8((char *)(v10 > 1), v11 + 1, 1, v8);
          *(void *)uint64_t v1 = v8;
        }
        *((void *)v8 + 2) = v11 + 1;
        *(_WORD *)&v8[2 * v11 + 32] = 0;
        unint64_t v12 = *(char **)v1;
        unint64_t v14 = *(void *)(*(void *)v1 + 16);
        unint64_t v13 = *(void *)(*(void *)v1 + 24);
        if (v14 >= v13 >> 1)
        {
          unint64_t v12 = sub_2346FB4E8((char *)(v13 > 1), v14 + 1, 1, v12);
          *(void *)uint64_t v1 = v12;
        }
        *((void *)v12 + 2) = v14 + 1;
        *(_WORD *)&v12[2 * v14 + 32] = 1;
        long long v15 = *(char **)v1;
        unint64_t v17 = *(void *)(*(void *)v1 + 16);
        unint64_t v16 = *(void *)(*(void *)v1 + 24);
        if (v17 >= v16 >> 1)
        {
          long long v15 = sub_2346FB4E8((char *)(v16 > 1), v17 + 1, 1, v15);
          *(void *)uint64_t v1 = v15;
        }
        *((void *)v15 + 2) = v17 + 1;
        *(_WORD *)&v15[2 * v17 + 32] = 2;
        int v18 = *(char **)v1;
        unint64_t v20 = *(void *)(*(void *)v1 + 16);
        unint64_t v19 = *(void *)(*(void *)v1 + 24);
        if (v20 >= v19 >> 1)
        {
          int v18 = sub_2346FB4E8((char *)(v19 > 1), v20 + 1, 1, v18);
          *(void *)uint64_t v1 = v18;
        }
        *((void *)v18 + 2) = v20 + 1;
        *(_WORD *)&v18[2 * v20 + 32] = 3;
        swift_endAccess();
        int64_t v4 = v2 + 24;
        swift_beginAccess();
        int v21 = (void *)*((void *)v2 + 3);
        char v22 = swift_isUniquelyReferenced_nonNull_native();
        *((void *)v2 + 3) = v21;
        if ((v22 & 1) == 0)
        {
          int v21 = sub_2346FB3D8(0, v21[2] + 1, 1, v21);
          *int64_t v4 = v21;
        }
        unint64_t v5 = v21[2];
        unint64_t v23 = v21[3];
        if (v5 >= v23 >> 1)
        {
          int v21 = sub_2346FB3D8((void *)(v23 > 1), v5 + 1, 1, v21);
          *int64_t v4 = v21;
        }
        v21[2] = v5 + 1;
        __asm { FMOV            V8.2S, #1.0 }
        v21[v5 + 4] = _D8;
        swift_endAccess();
        uint64_t v3 = v2 + 16;
        swift_beginAccess();
        unint64_t v6 = *(void *)(*((void *)v2 + 2) + 16);
        if (v6 >= 3)
        {
          unint64_t v5 = 65537;
          if (v6 == 3)
          {
            LOWORD(v6) = 3;
          }
          else
          {
            for (uint64_t i = 3; i != v6; ++i)
            {
              swift_beginAccess();
              float32x4_t v29 = *(char **)v1;
              char v30 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)uint64_t v1 = v29;
              if ((v30 & 1) == 0)
              {
                float32x4_t v29 = sub_2346FB4E8(0, *((void *)v29 + 2) + 1, 1, v29);
                *(void *)uint64_t v1 = v29;
              }
              unint64_t v32 = *((void *)v29 + 2);
              unint64_t v31 = *((void *)v29 + 3);
              if (v32 >= v31 >> 1)
              {
                float32x4_t v29 = sub_2346FB4E8((char *)(v31 > 1), v32 + 1, 1, v29);
                *(void *)uint64_t v1 = v29;
              }
              *((void *)v29 + 2) = v32 + 1;
              *(_WORD *)&v29[2 * v32 + 32] = i - 3;
              swift_endAccess();
              swift_beginAccess();
              float32x4_t v33 = *(char **)v1;
              char v34 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)uint64_t v1 = v33;
              if ((v34 & 1) == 0)
              {
                float32x4_t v33 = sub_2346FB4E8(0, *((void *)v33 + 2) + 1, 1, v33);
                *(void *)uint64_t v1 = v33;
              }
              unint64_t v36 = *((void *)v33 + 2);
              unint64_t v35 = *((void *)v33 + 3);
              if (v36 >= v35 >> 1)
              {
                float32x4_t v33 = sub_2346FB4E8((char *)(v35 > 1), v36 + 1, 1, v33);
                *(void *)uint64_t v1 = v33;
              }
              *((void *)v33 + 2) = v36 + 1;
              *(_WORD *)&v33[2 * v36 + 32] = i - 2;
              swift_endAccess();
              swift_beginAccess();
              unint64_t v37 = *(char **)v1;
              char v38 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)uint64_t v1 = v37;
              if ((v38 & 1) == 0)
              {
                unint64_t v37 = sub_2346FB4E8(0, *((void *)v37 + 2) + 1, 1, v37);
                *(void *)uint64_t v1 = v37;
              }
              unint64_t v40 = *((void *)v37 + 2);
              unint64_t v39 = *((void *)v37 + 3);
              if (v40 >= v39 >> 1)
              {
                unint64_t v37 = sub_2346FB4E8((char *)(v39 > 1), v40 + 1, 1, v37);
                *(void *)uint64_t v1 = v37;
              }
              *((void *)v37 + 2) = v40 + 1;
              *(_WORD *)&v37[2 * v40 + 32] = i - 1;
              swift_endAccess();
              if (i == 0x10000) {
                goto LABEL_145;
              }
              swift_beginAccess();
              long long v41 = *(char **)v1;
              char v42 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)uint64_t v1 = v41;
              if ((v42 & 1) == 0)
              {
                long long v41 = sub_2346FB4E8(0, *((void *)v41 + 2) + 1, 1, v41);
                *(void *)uint64_t v1 = v41;
              }
              unint64_t v44 = *((void *)v41 + 2);
              unint64_t v43 = *((void *)v41 + 3);
              if (v44 >= v43 >> 1)
              {
                long long v41 = sub_2346FB4E8((char *)(v43 > 1), v44 + 1, 1, v41);
                *(void *)uint64_t v1 = v41;
              }
              *((void *)v41 + 2) = v44 + 1;
              *(_WORD *)&v41[2 * v44 + 32] = i;
              swift_endAccess();
              swift_beginAccess();
              unint64_t v45 = (void *)*v4;
              char v46 = swift_isUniquelyReferenced_nonNull_native();
              *int64_t v4 = v45;
              if ((v46 & 1) == 0)
              {
                unint64_t v45 = sub_2346FB3D8(0, v45[2] + 1, 1, v45);
                *int64_t v4 = v45;
              }
              unint64_t v48 = v45[2];
              unint64_t v47 = v45[3];
              if (v48 >= v47 >> 1)
              {
                unint64_t v45 = sub_2346FB3D8((void *)(v47 > 1), v48 + 1, 1, v45);
                *int64_t v4 = v45;
              }
              v45[2] = v48 + 1;
              v45[v48 + 4] = _D8;
              swift_endAccess();
            }
            unint64_t v6 = *(void *)(*(void *)v3 + 16);
            if (v6 <= 2 || v6 > 0x10002) {
              goto LABEL_145;
            }
          }
          swift_beginAccess();
          uint64_t v2 = *(char **)v1;
          char v108 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t v1 = v2;
          if (v108) {
            goto LABEL_109;
          }
          goto LABEL_144;
        }
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        uint64_t v2 = sub_2346FB4E8(0, *((void *)v2 + 2) + 1, 1, v2);
        *(void *)uint64_t v1 = v2;
LABEL_109:
        unint64_t v110 = *((void *)v2 + 2);
        unint64_t v109 = *((void *)v2 + 3);
        if (v110 >= v109 >> 1)
        {
          uint64_t v2 = sub_2346FB4E8((char *)(v109 > 1), v110 + 1, 1, v2);
          *(void *)uint64_t v1 = v2;
        }
        *((void *)v2 + 2) = v110 + 1;
        *(_WORD *)&v2[2 * v110 + 32] = v6 - 3;
        swift_endAccess();
        unint64_t v111 = *(void *)(*(void *)v3 + 16);
        if (v111 <= 1 || v111 > v5) {
          goto LABEL_145;
        }
        swift_beginAccess();
        unint64_t v112 = *(char **)v1;
        char v113 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v1 = v112;
        if ((v113 & 1) == 0)
        {
          unint64_t v112 = sub_2346FB4E8(0, *((void *)v112 + 2) + 1, 1, v112);
          *(void *)uint64_t v1 = v112;
        }
        unint64_t v115 = *((void *)v112 + 2);
        unint64_t v114 = *((void *)v112 + 3);
        if (v115 >= v114 >> 1)
        {
          unint64_t v112 = sub_2346FB4E8((char *)(v114 > 1), v115 + 1, 1, v112);
          *(void *)uint64_t v1 = v112;
        }
        *((void *)v112 + 2) = v115 + 1;
        *(_WORD *)&v112[2 * v115 + 32] = v111 - 2;
        swift_endAccess();
        unint64_t v116 = *(void *)(*(void *)v3 + 16);
        if (!v116 || v116 > 0x10000) {
          goto LABEL_145;
        }
        swift_beginAccess();
        float32x4_t v117 = *(char **)v1;
        char v118 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v1 = v117;
        if ((v118 & 1) == 0)
        {
          float32x4_t v117 = sub_2346FB4E8(0, *((void *)v117 + 2) + 1, 1, v117);
          *(void *)uint64_t v1 = v117;
        }
        unint64_t v120 = *((void *)v117 + 2);
        unint64_t v119 = *((void *)v117 + 3);
        if (v120 >= v119 >> 1)
        {
          float32x4_t v117 = sub_2346FB4E8((char *)(v119 > 1), v120 + 1, 1, v117);
          *(void *)uint64_t v1 = v117;
        }
        *((void *)v117 + 2) = v120 + 1;
        *(_WORD *)&v117[2 * v120 + 32] = v116 - 1;
        swift_endAccess();
        unint64_t v121 = *(void *)(*(void *)v3 + 16);
        if (!v121 || v121 > 0x10000) {
          goto LABEL_145;
        }
        swift_beginAccess();
        uint64_t v122 = *(char **)v1;
        char v123 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v1 = v122;
        if ((v123 & 1) == 0)
        {
          uint64_t v122 = sub_2346FB4E8(0, *((void *)v122 + 2) + 1, 1, v122);
          *(void *)uint64_t v1 = v122;
        }
        unint64_t v125 = *((void *)v122 + 2);
        unint64_t v124 = *((void *)v122 + 3);
        if (v125 >= v124 >> 1)
        {
          uint64_t v122 = sub_2346FB4E8((char *)(v124 > 1), v125 + 1, 1, v122);
          *(void *)uint64_t v1 = v122;
        }
        *((void *)v122 + 2) = v125 + 1;
        *(_WORD *)&v122[2 * v125 + 32] = v121 - 1;
        swift_endAccess();
        swift_beginAccess();
        uint64_t v126 = (void *)*v4;
        char v127 = swift_isUniquelyReferenced_nonNull_native();
        *int64_t v4 = v126;
        if ((v127 & 1) == 0)
        {
          uint64_t v126 = sub_2346FB3D8(0, v126[2] + 1, 1, v126);
          *int64_t v4 = v126;
        }
        unint64_t v129 = v126[2];
        unint64_t v128 = v126[3];
        if (v129 >= v128 >> 1)
        {
          uint64_t v126 = sub_2346FB3D8((void *)(v128 > 1), v129 + 1, 1, v126);
          *int64_t v4 = v126;
        }
        v126[2] = v129 + 1;
        v126[v129 + 4] = _D8;
        return swift_endAccess();
      }
    }
    else
    {
      uint64_t v1 = v2 + 16;
      uint64_t result = swift_beginAccess();
      uint64_t v75 = *(void *)(*((void *)v2 + 2) + 16);
      if (!v75) {
        return result;
      }
      uint64_t v76 = 0;
      uint64_t v77 = (char **)(v2 + 32);
      float32x2_t v8 = v2 + 24;
      __asm { FMOV            V8.2S, #1.0 }
      while (1)
      {
        uint64_t v79 = *(void *)(*(void *)v1 + 16) - 1;
        if (*(void *)(*(void *)v1 + 16) == 1) {
          break;
        }
        uint64_t v80 = v76 % v79;
        if ((unint64_t)(v76 % v79) >= 0x10000) {
          goto LABEL_145;
        }
        swift_beginAccess();
        uint64_t v2 = *v77;
        char v81 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v77 = v2;
        if ((v81 & 1) == 0)
        {
          uint64_t v2 = sub_2346FB4E8(0, *((void *)v2 + 2) + 1, 1, v2);
          *uint64_t v77 = v2;
        }
        unint64_t v83 = *((void *)v2 + 2);
        unint64_t v82 = *((void *)v2 + 3);
        if (v83 >= v82 >> 1)
        {
          uint64_t v2 = sub_2346FB4E8((char *)(v82 > 1), v83 + 1, 1, v2);
          *uint64_t v77 = v2;
        }
        *((void *)v2 + 2) = v83 + 1;
        *(_WORD *)&v2[2 * v83 + 32] = v80;
        swift_endAccess();
        uint64_t v84 = *(void *)(*(void *)v1 + 16) - 1;
        if (*(void *)(*(void *)v1 + 16) == 1) {
          goto LABEL_136;
        }
        uint64_t v85 = v76 + 1;
        uint64_t v86 = v85 % v84;
        if ((unint64_t)(v85 % v84) >= 0x10000) {
          goto LABEL_145;
        }
        swift_beginAccess();
        uint64_t v2 = *v77;
        char v87 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v77 = v2;
        if ((v87 & 1) == 0)
        {
          uint64_t v2 = sub_2346FB4E8(0, *((void *)v2 + 2) + 1, 1, v2);
          *uint64_t v77 = v2;
        }
        unint64_t v89 = *((void *)v2 + 2);
        unint64_t v88 = *((void *)v2 + 3);
        if (v89 >= v88 >> 1)
        {
          uint64_t v2 = sub_2346FB4E8((char *)(v88 > 1), v89 + 1, 1, v2);
          *uint64_t v77 = v2;
        }
        *((void *)v2 + 2) = v89 + 1;
        *(_WORD *)&v2[2 * v89 + 32] = v86;
        swift_endAccess();
        uint64_t v90 = *(void *)(*(void *)v1 + 16) - 1;
        if (*(void *)(*(void *)v1 + 16) == 1) {
          goto LABEL_137;
        }
        uint64_t v91 = v85 + 1;
        uint64_t v92 = v91 % v90;
        if ((unint64_t)(v91 % v90) >= 0x10000) {
          goto LABEL_145;
        }
        swift_beginAccess();
        uint64_t v2 = *v77;
        char v93 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v77 = v2;
        if ((v93 & 1) == 0)
        {
          uint64_t v2 = sub_2346FB4E8(0, *((void *)v2 + 2) + 1, 1, v2);
          *uint64_t v77 = v2;
        }
        unint64_t v95 = *((void *)v2 + 2);
        unint64_t v94 = *((void *)v2 + 3);
        if (v95 >= v94 >> 1)
        {
          uint64_t v2 = sub_2346FB4E8((char *)(v94 > 1), v95 + 1, 1, v2);
          *uint64_t v77 = v2;
        }
        *((void *)v2 + 2) = v95 + 1;
        *(_WORD *)&v2[2 * v95 + 32] = v92;
        swift_endAccess();
        uint64_t v96 = v91 - 2;
        if (v91 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_138;
        }
        uint64_t v97 = *(void *)(*(void *)v1 + 16);
        uint64_t v98 = v97 - 1;
        if (v97 == 1) {
          goto LABEL_139;
        }
        uint64_t v99 = v91 + 1;
        if (v96 == 0x7FFFFFFFFFFFFFFDLL && !v97) {
          goto LABEL_140;
        }
        unint64_t v100 = v99 % v98;
        if (v99 % v98 < 0 || v100 >= 0x10000) {
          goto LABEL_145;
        }
        swift_beginAccess();
        uint64_t v101 = *v77;
        char v102 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v77 = v101;
        if ((v102 & 1) == 0)
        {
          uint64_t v101 = sub_2346FB4E8(0, *((void *)v101 + 2) + 1, 1, v101);
          *uint64_t v77 = v101;
        }
        unint64_t v104 = *((void *)v101 + 2);
        unint64_t v103 = *((void *)v101 + 3);
        if (v104 >= v103 >> 1)
        {
          uint64_t v101 = sub_2346FB4E8((char *)(v103 > 1), v104 + 1, 1, v101);
          *uint64_t v77 = v101;
        }
        *((void *)v101 + 2) = v104 + 1;
        *(_WORD *)&v101[2 * v104 + 32] = v100;
        swift_endAccess();
        swift_beginAccess();
        uint64_t v2 = *(char **)v8;
        char v105 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)float32x2_t v8 = v2;
        if ((v105 & 1) == 0)
        {
          uint64_t v2 = (char *)sub_2346FB3D8(0, *((void *)v2 + 2) + 1, 1, v2);
          *(void *)float32x2_t v8 = v2;
        }
        unint64_t v107 = *((void *)v2 + 2);
        unint64_t v106 = *((void *)v2 + 3);
        if (v107 >= v106 >> 1)
        {
          uint64_t v2 = (char *)sub_2346FB3D8((void *)(v106 > 1), v107 + 1, 1, v2);
          *(void *)float32x2_t v8 = v2;
        }
        *((void *)v2 + 2) = v107 + 1;
        *(void *)&v2[8 * v107 + 32] = _D8;
        uint64_t result = swift_endAccess();
        uint64_t v76 = v99 - 2;
        if (v76 == v75) {
          return result;
        }
      }
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
    }
    float32x2_t v8 = sub_2346FB4E8(0, *((void *)v8 + 2) + 1, 1, v8);
    *(void *)uint64_t v1 = v8;
    goto LABEL_4;
  }
  uint64_t result = swift_beginAccess();
  unint64_t v50 = *(void *)(*((void *)v2 + 2) + 16);
  if (v50 < 3) {
    goto LABEL_143;
  }
  if (v50 != 3)
  {
    float v51 = (char **)(v2 + 32);
    int8x16_t v52 = (void **)(v2 + 24);
    uint64_t v53 = 3;
    __asm { FMOV            V8.2S, #1.0 }
    while (1)
    {
      swift_beginAccess();
      unint64_t v55 = *v51;
      char v56 = swift_isUniquelyReferenced_nonNull_native();
      *float v51 = v55;
      if ((v56 & 1) == 0)
      {
        unint64_t v55 = sub_2346FB4E8(0, *((void *)v55 + 2) + 1, 1, v55);
        *float v51 = v55;
      }
      unint64_t v58 = *((void *)v55 + 2);
      unint64_t v57 = *((void *)v55 + 3);
      if (v58 >= v57 >> 1)
      {
        unint64_t v55 = sub_2346FB4E8((char *)(v57 > 1), v58 + 1, 1, v55);
        *float v51 = v55;
      }
      *((void *)v55 + 2) = v58 + 1;
      *(_WORD *)&v55[2 * v58 + 32] = v53 - 3;
      swift_endAccess();
      swift_beginAccess();
      float32x4_t v59 = *v51;
      char v60 = swift_isUniquelyReferenced_nonNull_native();
      *float v51 = v59;
      if ((v60 & 1) == 0)
      {
        float32x4_t v59 = sub_2346FB4E8(0, *((void *)v59 + 2) + 1, 1, v59);
        *float v51 = v59;
      }
      unint64_t v62 = *((void *)v59 + 2);
      unint64_t v61 = *((void *)v59 + 3);
      if (v62 >= v61 >> 1)
      {
        float32x4_t v59 = sub_2346FB4E8((char *)(v61 > 1), v62 + 1, 1, v59);
        *float v51 = v59;
      }
      *((void *)v59 + 2) = v62 + 1;
      *(_WORD *)&v59[2 * v62 + 32] = v53 - 2;
      swift_endAccess();
      swift_beginAccess();
      unsigned __int32 v63 = *v51;
      char v64 = swift_isUniquelyReferenced_nonNull_native();
      *float v51 = v63;
      if ((v64 & 1) == 0)
      {
        unsigned __int32 v63 = sub_2346FB4E8(0, *((void *)v63 + 2) + 1, 1, v63);
        *float v51 = v63;
      }
      unint64_t v66 = *((void *)v63 + 2);
      unint64_t v65 = *((void *)v63 + 3);
      if (v66 >= v65 >> 1)
      {
        unsigned __int32 v63 = sub_2346FB4E8((char *)(v65 > 1), v66 + 1, 1, v63);
        *float v51 = v63;
      }
      *((void *)v63 + 2) = v66 + 1;
      *(_WORD *)&v63[2 * v66 + 32] = v53 - 1;
      swift_endAccess();
      if (v53 == 0x10000) {
        break;
      }
      swift_beginAccess();
      long long v67 = *v51;
      char v68 = swift_isUniquelyReferenced_nonNull_native();
      *float v51 = v67;
      if ((v68 & 1) == 0)
      {
        long long v67 = sub_2346FB4E8(0, *((void *)v67 + 2) + 1, 1, v67);
        *float v51 = v67;
      }
      unint64_t v70 = *((void *)v67 + 2);
      unint64_t v69 = *((void *)v67 + 3);
      if (v70 >= v69 >> 1)
      {
        long long v67 = sub_2346FB4E8((char *)(v69 > 1), v70 + 1, 1, v67);
        *float v51 = v67;
      }
      *((void *)v67 + 2) = v70 + 1;
      *(_WORD *)&v67[2 * v70 + 32] = v53;
      swift_endAccess();
      swift_beginAccess();
      uint64_t v71 = *v52;
      char v72 = swift_isUniquelyReferenced_nonNull_native();
      *int8x16_t v52 = v71;
      if ((v72 & 1) == 0)
      {
        uint64_t v71 = sub_2346FB3D8(0, v71[2] + 1, 1, v71);
        *int8x16_t v52 = v71;
      }
      unint64_t v74 = v71[2];
      unint64_t v73 = v71[3];
      if (v74 >= v73 >> 1)
      {
        uint64_t v71 = sub_2346FB3D8((void *)(v73 > 1), v74 + 1, 1, v71);
        *int8x16_t v52 = v71;
      }
      long long v71[2] = v74 + 1;
      v71[v74 + 4] = _D8;
      uint64_t result = swift_endAccess();
      if (v50 == ++v53) {
        return result;
      }
    }
    while (1)
    {
LABEL_145:
      sub_2347EEE90();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_2346D9684(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_2346FA354(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  float v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346D97CC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_2346FA360(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = &v3[4 * v9 + 32];
  if (a1 + 32 < (unint64_t)&v10[4 * v8] && (unint64_t)v10 < a1 + 32 + 4 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 4 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = *((void *)v3 + 2);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *((void *)v3 + 2) = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    char *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346D9918(uint64_t a1)
{
  return sub_2346DA5A0(a1, (uint64_t (*)(void))sub_2346FA490, type metadata accessor for CapturedRoom.Surface);
}

uint64_t sub_2346D9944(uint64_t result)
{
  int64_t v4 = v2;
  uint64_t v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t result = sub_2347EECB0();
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 16);
  }
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_2347EEEC0();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v20 + v6;
    if (!__OFADD__(v20, v6)) {
      goto LABEL_6;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6)) {
    goto LABEL_24;
  }
LABEL_6:
  unint64_t v9 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v4 = v9;
  uint64_t v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v11 = 1;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v13 <= v8) {
    uint64_t v13 = v8;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = MEMORY[0x237DC6D00](v11, v13, 1, v9);
  swift_bridgeObjectRelease();
  *int64_t v4 = v14;
  uint64_t v12 = v14 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
  uint64_t v15 = *(void *)(v12 + 16);
  uint64_t v16 = (*(void *)(v12 + 24) >> 1) - v15;
  uint64_t result = sub_2347C70F0((uint64_t)&v42, (void *)(v12 + 8 * v15 + 32), v16, v5);
  if (result < v6)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (result >= 1)
  {
    uint64_t v17 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v18 = __OFADD__(v17, result);
    uint64_t v19 = v17 + result;
    if (v18)
    {
      __break(1u);
LABEL_33:
      if (!sub_2347EECE0()) {
        goto LABEL_21;
      }
      type metadata accessor for HullPointUUID();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v24 = v41;
      swift_unknownObjectRelease();
      while (2)
      {
        if (!v24) {
          goto LABEL_21;
        }
        while (1)
        {
          uint64_t v25 = *v4 & 0xFFFFFFFFFFFFFF8;
          if (v3 + 1 > *(void *)(v25 + 0x18) >> 1)
          {
            sub_2347EE800();
            uint64_t v25 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v26 = *(void *)(v25 + 24) >> 1;
          if (v3 < v26) {
            break;
          }
LABEL_37:
          *(void *)(v25 + 16) = v3;
        }
        uint64_t v27 = v25 + 32;
        while (1)
        {
          *(void *)(v27 + 8 * v3++) = v24;
          int64_t v28 = v45;
          if (v42 < 0)
          {
            if (!sub_2347EECE0()) {
              goto LABEL_74;
            }
            type metadata accessor for HullPointUUID();
            swift_unknownObjectRetain();
            swift_dynamicCast();
            uint64_t v24 = v41;
            swift_unknownObjectRelease();
            goto LABEL_49;
          }
          if (!v46) {
            break;
          }
          unint64_t v29 = (v46 - 1) & v46;
          unint64_t v30 = __clz(__rbit64(v46)) | (v45 << 6);
LABEL_45:
          uint64_t v24 = *(void *)(*(void *)(v42 + 48) + 8 * v30);
          swift_retain();
LABEL_46:
          int64_t v45 = v28;
          unint64_t v46 = v29;
LABEL_49:
          if (!v24)
          {
LABEL_74:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v3;
            goto LABEL_21;
          }
          if (v3 >= v26)
          {
            uint64_t v25 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_37;
          }
        }
        int64_t v31 = v45 + 1;
        if (__OFADD__(v45, 1))
        {
          __break(1u);
LABEL_98:
          uint64_t v24 = 0;
          unint64_t v22 = 0;
          int64_t v21 = v1;
LABEL_30:
          int64_t v45 = v21;
          unint64_t v46 = v22;
          continue;
        }
        break;
      }
      int64_t v32 = (unint64_t)(v44 + 64) >> 6;
      if (v31 >= v32)
      {
        uint64_t v24 = 0;
        unint64_t v29 = 0;
        goto LABEL_46;
      }
      unint64_t v33 = *(void *)(v43 + 8 * v31);
      if (!v33)
      {
        int64_t v34 = v45 + 2;
        if (v45 + 2 >= v32) {
          goto LABEL_71;
        }
        unint64_t v33 = *(void *)(v43 + 8 * v34);
        if (!v33)
        {
          int64_t v1 = v45 + 3;
          if (v45 + 3 >= v32) {
            goto LABEL_72;
          }
          unint64_t v33 = *(void *)(v43 + 8 * v1);
          if (v33)
          {
            int64_t v31 = v45 + 3;
            goto LABEL_55;
          }
          int64_t v34 = v45 + 4;
          if (v45 + 4 >= v32)
          {
            uint64_t v24 = 0;
            unint64_t v29 = 0;
            int64_t v28 = v45 + 3;
            goto LABEL_46;
          }
          unint64_t v33 = *(void *)(v43 + 8 * v34);
          if (!v33)
          {
            int64_t v31 = v45 + 5;
            if (v45 + 5 >= v32)
            {
LABEL_72:
              uint64_t v24 = 0;
              unint64_t v29 = 0;
              int64_t v28 = v34;
              goto LABEL_46;
            }
            unint64_t v33 = *(void *)(v43 + 8 * v31);
            if (!v33)
            {
              int64_t v31 = v32 - 1;
              uint64_t v35 = v45 + 6;
              while (v32 != v35)
              {
                unint64_t v33 = *(void *)(v43 + 8 * v35++);
                if (v33)
                {
                  int64_t v31 = v35 - 1;
                  goto LABEL_55;
                }
              }
LABEL_71:
              uint64_t v24 = 0;
              unint64_t v29 = 0;
              int64_t v28 = v31;
              goto LABEL_46;
            }
            goto LABEL_55;
          }
        }
        int64_t v31 = v34;
      }
LABEL_55:
      unint64_t v29 = (v33 - 1) & v33;
      unint64_t v30 = __clz(__rbit64(v33)) + (v31 << 6);
      int64_t v28 = v31;
      goto LABEL_45;
    }
    *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  if (result != v16)
  {
LABEL_21:
    sub_2346DC0DC();
    return sub_2347EE7F0();
  }
LABEL_26:
  uint64_t v3 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v21 = v45;
  if (v42 < 0) {
    goto LABEL_33;
  }
  if (v46)
  {
    unint64_t v22 = (v46 - 1) & v46;
    unint64_t v23 = __clz(__rbit64(v46)) | (v45 << 6);
LABEL_29:
    uint64_t v24 = *(void *)(*(void *)(v42 + 48) + 8 * v23);
    swift_retain();
    goto LABEL_30;
  }
  int64_t v36 = v45 + 1;
  if (!__OFADD__(v45, 1))
  {
    int64_t v37 = (unint64_t)(v44 + 64) >> 6;
    if (v36 >= v37)
    {
      uint64_t v24 = 0;
      unint64_t v22 = 0;
      goto LABEL_30;
    }
    unint64_t v38 = *(void *)(v43 + 8 * v36);
    if (v38) {
      goto LABEL_79;
    }
    int64_t v39 = v45 + 2;
    if (v45 + 2 >= v37)
    {
LABEL_95:
      uint64_t v24 = 0;
      unint64_t v22 = 0;
      int64_t v21 = v36;
      goto LABEL_30;
    }
    unint64_t v38 = *(void *)(v43 + 8 * v39);
    if (v38) {
      goto LABEL_83;
    }
    int64_t v1 = v45 + 3;
    if (v45 + 3 < v37)
    {
      unint64_t v38 = *(void *)(v43 + 8 * v1);
      if (v38)
      {
        int64_t v36 = v45 + 3;
        goto LABEL_79;
      }
      int64_t v39 = v45 + 4;
      if (v45 + 4 >= v37) {
        goto LABEL_98;
      }
      unint64_t v38 = *(void *)(v43 + 8 * v39);
      if (v38)
      {
LABEL_83:
        int64_t v36 = v39;
LABEL_79:
        unint64_t v22 = (v38 - 1) & v38;
        unint64_t v23 = __clz(__rbit64(v38)) + (v36 << 6);
        int64_t v21 = v36;
        goto LABEL_29;
      }
      int64_t v36 = v45 + 5;
      if (v45 + 5 < v37)
      {
        unint64_t v38 = *(void *)(v43 + 8 * v36);
        if (!v38)
        {
          int64_t v36 = v37 - 1;
          uint64_t v40 = v45 + 6;
          do
          {
            if (v37 == v40) {
              goto LABEL_95;
            }
            unint64_t v38 = *(void *)(v43 + 8 * v40++);
          }
          while (!v38);
          int64_t v36 = v40 - 1;
        }
        goto LABEL_79;
      }
    }
    uint64_t v24 = 0;
    unint64_t v22 = 0;
    int64_t v21 = v39;
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_2346D9F2C(unint64_t a1)
{
  return sub_2346DAF1C(a1, (unint64_t *)type metadata accessor for HullPoint, &qword_2687ACC50, &qword_2687ACC48, (uint64_t *)sub_2347ACB04);
}

uint64_t sub_2346D9F68(unint64_t a1)
{
  return sub_2346DACBC(a1, (unint64_t *)type metadata accessor for HullPointUUID, &qword_2687ACC60, &qword_2687ACC58, (uint64_t *)sub_2347ACB6C);
}

uint64_t sub_2346D9FA4(unint64_t a1)
{
  return sub_2346DACBC(a1, (unint64_t *)type metadata accessor for CurvedElement, &qword_2687ACBD8, &qword_2687ACBD0, (uint64_t *)sub_2347ACB6C);
}

uint64_t sub_2346D9FE0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_2346FAD8C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = &v3[2 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 16 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DA12C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_2346FA4C4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DA274(unint64_t a1)
{
  return sub_2346DACBC(a1, (unint64_t *)type metadata accessor for CDTTriangle, &qword_2687ACC08, &qword_2687ACC00, (uint64_t *)sub_2347ACB6C);
}

uint64_t sub_2346DA2B0(unint64_t a1)
{
  return sub_2346DACBC(a1, (unint64_t *)type metadata accessor for CDTTriangleEdge, &qword_2687ACBE8, &qword_2687ACBE0, (uint64_t *)sub_2347ACB6C);
}

uint64_t sub_2346DA2EC(unint64_t a1)
{
  return sub_2346DACBC(a1, (unint64_t *)type metadata accessor for CDTEdge, &qword_2687ACBF8, &qword_2687ACBF0, (uint64_t *)sub_2347ACB6C);
}

uint64_t sub_2346DA328(unint64_t a1)
{
  return sub_2346DACBC(a1, (unint64_t *)type metadata accessor for RoomCaptureQuad, &qword_2687ACC28, &qword_2687ACC20, (uint64_t *)sub_2347ACA98);
}

uint64_t sub_2346DA364(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = *((void *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    uint64_t v3 = sub_2346FA360(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    int64_t v8 = *((void *)v3 + 3) >> 1;
  }
  uint64_t v10 = *((void *)v3 + 2);
  uint64_t v11 = v8 - v10;
  uint64_t result = sub_2346DB668(&v27, &v3[4 * v10 + 32], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v12 = *((void *)v3 + 2);
    BOOL v13 = __OFADD__(v12, result);
    uint64_t v14 = v12 + result;
    if (v13)
    {
      __break(1u);
      goto LABEL_31;
    }
    *((void *)v3 + 2) = v14;
  }
  if (result != v11)
  {
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease();
    char *v1 = v3;
    return result;
  }
LABEL_16:
  if (!v28) {
    goto LABEL_13;
  }
  unint64_t v15 = v28 - 1;
  if (!__OFSUB__(v28, 1))
  {
    uint64_t v2 = *((void *)v3 + 2);
    uint64_t v16 = v27;
    uint64_t v17 = sub_2347ACD0C((uint64_t (*)())v26, v28 - 1, v27);
    int v19 = *v18;
    ((void (*)(unsigned char *, void))v17)(v26, 0);
    while (1)
    {
      unint64_t v20 = *((void *)v3 + 3);
      int64_t v21 = v20 >> 1;
      uint64_t v22 = v2 + 1;
      if ((uint64_t)(v20 >> 1) < v2 + 1)
      {
        uint64_t v25 = sub_2346FA360((char *)(v20 > 1), v2 + 1, 1, v3);
        uint64_t v22 = v2 + 1;
        uint64_t v3 = v25;
        int64_t v21 = *((void *)v25 + 3) >> 1;
        if (v2 < v21)
        {
LABEL_23:
          *(_DWORD *)&v3[4 * v2 + 32] = v19;
          if (v15)
          {
            while (1)
            {
              BOOL v13 = __OFSUB__(v15--, 1);
              if (v13) {
                break;
              }
              unint64_t v23 = sub_2347ACD0C((uint64_t (*)())v26, v15, v16);
              int v19 = *v24;
              ((void (*)(unsigned char *, void))v23)(v26, 0);
              if (v21 - 1 == v2)
              {
                uint64_t v2 = v21;
                goto LABEL_20;
              }
              *(_DWORD *)&v3[4 * v2++ + 36] = v19;
              if (!v15) {
                goto LABEL_32;
              }
            }
LABEL_31:
            __break(1u);
LABEL_32:
            uint64_t v22 = v2 + 1;
          }
          *((void *)v3 + 2) = v22;
          goto LABEL_13;
        }
      }
      else if (v2 < v21)
      {
        goto LABEL_23;
      }
LABEL_20:
      *((void *)v3 + 2) = v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_2346DA574(uint64_t a1)
{
  return sub_2346DA5A0(a1, (uint64_t (*)(void))sub_2346FAFC4, (uint64_t (*)(void))type metadata accessor for LineAnimation);
}

uint64_t sub_2346DA5A0(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = (*(void *)(v5 + 24) >> 1) - v11;
  uint64_t v13 = *(void *)(a3(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = v5 + v15 + v14 * v11;
  unint64_t v17 = a1 + v15;
  uint64_t v18 = v14 * v10;
  unint64_t v19 = v16 + v18;
  unint64_t v20 = v17 + v18;
  if (v17 < v19 && v16 < v20) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v22 = *(void *)(v5 + 16);
  BOOL v23 = __OFADD__(v22, v10);
  uint64_t v24 = v22 + v10;
  if (!v23)
  {
    *(void *)(v5 + 16) = v24;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DA760(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_2346FB3D8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DA8A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_2346FB4E8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v9 = &v3[2 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 2 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 2 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    char *v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DA9F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_2346FB5F4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DAB38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_2346FBA68(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    char *v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DAC80(unint64_t a1)
{
  return sub_2346DACBC(a1, (unint64_t *)type metadata accessor for OpeningElement, &qword_2687ACC18, &qword_2687ACC10, (uint64_t *)sub_2347ACB6C);
}

uint64_t sub_2346DACBC(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
    uint64_t v14 = v13 + v11;
    if (!__OFADD__(v13, v11)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v12 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v5 = v12;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v13 = 1;
  }
  uint64_t v23 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62) {
    goto LABEL_27;
  }
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    swift_bridgeObjectRetain();
    unint64_t v12 = MEMORY[0x237DC6D00](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *int64_t v5 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    uint64_t v11 = v23;
LABEL_15:
    uint64_t result = sub_2346DB82C(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, (void (*)(void))a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();

  return sub_2347EE7F0();
}

uint64_t sub_2346DAEE0(unint64_t a1)
{
  return sub_2346DAF1C(a1, (unint64_t *)sub_2346DC09C, &qword_2687ACBC8, &qword_2687ACBC0, (uint64_t *)sub_2347ACBD4);
}

uint64_t sub_2346DAF1C(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
    uint64_t v14 = v13 + v11;
    if (!__OFADD__(v13, v11)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v12 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v5 = v12;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v13 = 1;
  }
  uint64_t v23 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62) {
    goto LABEL_27;
  }
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    swift_bridgeObjectRetain();
    unint64_t v12 = MEMORY[0x237DC6D00](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *int64_t v5 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    uint64_t v11 = v23;
LABEL_15:
    uint64_t result = sub_2346DBB40(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, (void (*)(void))a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();

  return sub_2347EE7F0();
}

uint64_t sub_2346DB140(unint64_t a1)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  v1[2] = MEMORY[0x263F8EE78];
  v1[3] = v3;
  int64_t v4 = (void **)(v1 + 2);
  v1[4] = v3;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v5)
  {
    while ((a1 & 0xC000000000000001) == 0)
    {
      if (v5 < 1) {
        goto LABEL_30;
      }
      uint64_t v27 = v1;
      unint64_t v17 = 0;
      uint64_t v1 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
      while (v17 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v18 = *(void *)(a1 + 8 * v17 + 32);
        swift_beginAccess();
        swift_beginAccess();
        uint64_t v19 = *(void *)(v18 + 16);
        swift_beginAccess();
        uint64_t v20 = *v4;
        swift_retain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *int64_t v4 = v20;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v20 = sub_2346FB600(0, v20[2] + 1, 1, v20);
          *int64_t v4 = v20;
        }
        unint64_t v23 = v20[2];
        unint64_t v22 = v20[3];
        if (v23 >= v22 >> 1)
        {
          uint64_t v20 = sub_2346FB600((void *)(v22 > 1), v23 + 1, 1, v20);
          *int64_t v4 = v20;
        }
        ++v17;
        v20[2] = v23 + 1;
        v20[v23 + 4] = v19;
        swift_endAccess();
        swift_release();
        if (v5 == v17)
        {
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v1 = v27;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      uint64_t result = sub_2347EEEC0();
      uint64_t v5 = result;
      if (!result) {
        goto LABEL_24;
      }
    }
    if (v5 >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = MEMORY[0x237DC6CF0](v7, a1);
        swift_beginAccess();
        swift_beginAccess();
        uint64_t v9 = *(void *)(v8 + 16);
        swift_beginAccess();
        unint64_t v10 = *v4;
        swift_bridgeObjectRetain();
        char v11 = swift_isUniquelyReferenced_nonNull_native();
        *int64_t v4 = v10;
        if ((v11 & 1) == 0)
        {
          unint64_t v10 = sub_2346FB600(0, v10[2] + 1, 1, v10);
          *int64_t v4 = v10;
        }
        unint64_t v13 = v10[2];
        unint64_t v12 = v10[3];
        if (v13 >= v12 >> 1)
        {
          unint64_t v10 = sub_2346FB600((void *)(v12 > 1), v13 + 1, 1, v10);
          *int64_t v4 = v10;
        }
        ++v7;
        v10[2] = v13 + 1;
        v10[v13 + 4] = v9;
        swift_endAccess();
        swift_unknownObjectRelease();
      }
      while (v5 != v7);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  else
  {
LABEL_24:
    uint64_t result = swift_bridgeObjectRelease();
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_12:
      uint64_t v14 = MEMORY[0x237DC6CF0](0, a1);
      swift_beginAccess();
      uint64_t v15 = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      v1[3] = v15;
      swift_bridgeObjectRelease();
      uint64_t v16 = MEMORY[0x237DC6CF0](0, a1);
LABEL_27:
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v26 = *(void *)(v16 + 32);
      swift_bridgeObjectRetain();
      swift_release();
      v1[4] = v26;
      swift_bridgeObjectRelease();
      return (uint64_t)v1;
    }
LABEL_25:
    if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      swift_retain();
      swift_beginAccess();
      uint64_t v25 = *(void *)(v24 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      v1[3] = v25;
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(a1 + 32);
      swift_retain();
      goto LABEL_27;
    }
    __break(1u);
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2346DB518()
{
  return sub_2346DB570();
}

uint64_t type metadata accessor for BlendableSplineGroup()
{
  return self;
}

uint64_t type metadata accessor for SplineGroup()
{
  return self;
}

uint64_t sub_2346DB568()
{
  return sub_2346DB570();
}

uint64_t sub_2346DB570()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Spline()
{
  return self;
}

ValueMetadata *type metadata accessor for PatchData()
{
  return &type metadata for PatchData;
}

__n128 __swift_memcpy20_16(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ControlPoint(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ControlPoint(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ControlPoint()
{
  return &type metadata for ControlPoint;
}

uint64_t sub_2346DB668(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (!a2)
  {
    uint64_t v5 = *(void *)(a4 + 16);
    uint64_t v4 = 0;
    goto LABEL_26;
  }
  if (!a3)
  {
    uint64_t v5 = *(void *)(a4 + 16);
    goto LABEL_18;
  }
  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (!v4)
  {
LABEL_29:
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  uint64_t v5 = v4 - 1;
  *a2 = *(_DWORD *)(a4 + 4 * (v4 - 1) + 32);
  if (a3 == 1)
  {
LABEL_18:
    uint64_t v4 = a3;
    goto LABEL_26;
  }
  if (v4 != 1)
  {
    unint64_t v6 = a3 - 2;
    if (v4 - 2 >= (unint64_t)(a3 - 2)) {
      uint64_t v7 = a3 - 2;
    }
    else {
      uint64_t v7 = v4 - 2;
    }
    unint64_t v8 = v7 + 1;
    if (v8 < 0x15) {
      goto LABEL_15;
    }
    if (v4 - 2 < v6) {
      unint64_t v6 = v4 - 2;
    }
    if ((unint64_t)(a2 + 1) >= 4 * v4 + a4 + 28 || 4 * v4 - 4 * v6 + a4 + 24 >= (unint64_t)&a2[v6 + 2])
    {
      uint64_t v11 = v8 & 7;
      if ((v8 & 7) == 0) {
        uint64_t v11 = 8;
      }
      unint64_t v12 = v8 - v11;
      v5 -= v8 - v11;
      unint64_t v10 = &a2[v8 - v11];
      uint64_t v9 = v12 + 2;
      unint64_t v13 = (int32x4_t *)(a4 + 4 * v4 + 12);
      uint64_t v14 = (int8x16_t *)(a2 + 5);
      do
      {
        int8x16_t v15 = (int8x16_t)vrev64q_s32(*v13);
        int8x16_t v16 = (int8x16_t)vrev64q_s32(v13[-1]);
        v14[-1] = vextq_s8(v15, v15, 8uLL);
        *uint64_t v14 = vextq_s8(v16, v16, 8uLL);
        v13 -= 2;
        v14 += 2;
        v12 -= 8;
      }
      while (v12);
    }
    else
    {
LABEL_15:
      uint64_t v9 = 2;
      unint64_t v10 = a2;
    }
    unint64_t v17 = v10 + 1;
    while (1)
    {
      uint64_t v18 = v5 - 1;
      *unint64_t v17 = *(_DWORD *)(a4 + 28 + 4 * v5);
      if (a3 == v9) {
        break;
      }
      ++v9;
      ++v17;
      --v5;
      if (!v18) {
        goto LABEL_26;
      }
    }
    --v5;
    goto LABEL_18;
  }
LABEL_26:
  *a1 = a4;
  a1[1] = v5;
  return v4;
}

uint64_t sub_2346DB7B4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2346DB82C(a1, a2, a3, (void (*)(void))type metadata accessor for DistanceAngleHullPoint, &qword_2687ACC70, &qword_2687ACC68, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_2347ACB6C);
}

uint64_t sub_2346DB7F0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2346DBB40(a1, a2, a3, (void (*)(void))type metadata accessor for HullPoint, &qword_2687ACC50, &qword_2687ACC48, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_2347ACB04);
}

uint64_t sub_2346DB82C(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_2346DC0E4(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          unint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DBA50(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2346DB82C(a1, a2, a3, (void (*)(void))type metadata accessor for CDTEdge, &qword_2687ACBF8, &qword_2687ACBF0, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_2347ACB6C);
}

uint64_t sub_2346DBA8C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2346DB82C(a1, a2, a3, (void (*)(void))type metadata accessor for CDTTriangle, &qword_2687ACC08, &qword_2687ACC00, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_2347ACB6C);
}

uint64_t sub_2346DBAC8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2346DB82C(a1, a2, a3, (void (*)(void))type metadata accessor for CDTTriangleEdge, &qword_2687ACBE8, &qword_2687ACBE0, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_2347ACB6C);
}

uint64_t sub_2346DBB04(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_2346DB82C(a1, a2, a3, (void (*)(void))type metadata accessor for OpeningElement, &qword_2687ACC18, &qword_2687ACC10, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_2347ACB6C);
}

uint64_t sub_2346DBB40(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_2346DC0E4(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          unint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          id v24 = *v23;
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346DBD64(unint64_t a1)
{
  unint64_t v2 = a1;
  uint64_t v3 = MEMORY[0x263F8EE78];
  v1[2] = MEMORY[0x263F8EE78];
  uint64_t v4 = v1 + 2;
  v1[3] = v3;
  v1[4] = v3;
  if (!(a1 >> 62))
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
    return v18;
  }
LABEL_23:
  uint64_t v5 = sub_2347EEEC0();
  if (!v5) {
    return v18;
  }
LABEL_3:
  unint64_t v6 = 0;
  LOWORD(v7) = 0;
  uint64_t v23 = v5;
  unint64_t v24 = v2 & 0xC000000000000001;
  unint64_t v19 = v2 + 32;
  uint64_t v20 = v2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v21 = v4;
  unint64_t v22 = v2;
  while (1)
  {
    if (v24)
    {
      unint64_t v8 = (void *)MEMORY[0x237DC6CF0](v6, v2);
      BOOL v9 = __OFADD__(v6++, 1);
      if (v9) {
        goto LABEL_21;
      }
    }
    else
    {
      if (v6 >= *(void *)(v20 + 16)) {
        goto LABEL_22;
      }
      unint64_t v8 = *(void **)(v19 + 8 * v6);
      swift_retain();
      BOOL v9 = __OFADD__(v6++, 1);
      if (v9) {
        goto LABEL_21;
      }
    }
    swift_beginAccess();
    uint64_t v10 = v8[2];
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    sub_2346DA9F0(v10);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v11 = v8[4];
    int64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v25 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_234745730(0, v12, 0);
      uint64_t v4 = 0;
      while (1)
      {
        unint64_t v2 = *(unsigned __int16 *)(v11 + 2 * (void)v4 + 32) + (unsigned __int16)v7;
        if ((v2 & 0x10000) != 0) {
          break;
        }
        unint64_t v14 = *(void *)(v25 + 16);
        unint64_t v13 = *(void *)(v25 + 24);
        if (v14 >= v13 >> 1) {
          sub_234745730(v13 > 1, v14 + 1, 1);
        }
        uint64_t v4 = (void *)((char *)v4 + 1);
        *(void *)(v25 + 16) = v14 + 1;
        *(_WORD *)(v25 + 2 * v14 + 32) = v2;
        if ((void *)v12 == v4)
        {
          swift_bridgeObjectRelease();
          uint64_t v4 = v21;
          unint64_t v2 = v22;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_17:
    swift_beginAccess();
    uint64_t v15 = swift_bridgeObjectRetain();
    sub_2346DA8A8(v15);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v16 = v8[3];
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    sub_2346DA760(v16);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v7 = *(void *)(*v4 + 16);
    if (v7 >> 16) {
      break;
    }
    if (v6 == v23) {
      return v18;
    }
  }
  uint64_t result = sub_2347EEE90();
  __break(1u);
  return result;
}

unint64_t sub_2346DC09C()
{
  unint64_t result = qword_2687AE1B0;
  if (!qword_2687AE1B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2687AE1B0);
  }
  return result;
}

uint64_t sub_2346DC0DC()
{
  return swift_release();
}

uint64_t sub_2346DC0E4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2346DC134(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_2346DC148(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_2346DC15C(uint64_t a1, uint64_t a2)
{
  uint64_t v188 = type metadata accessor for ScanItemStrut();
  uint64_t v176 = *(void *)(v188 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v188);
  uint64_t v162 = (uint64_t)&v157 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v169 = (uint64_t)&v157 - v7;
  uint64_t v189 = sub_2347ED5C0();
  uint64_t v175 = *(void *)(v189 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v189);
  unint64_t v10 = (unint64_t)&v157 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (uint64_t)&v157 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v184 = (uint64_t)&v157 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (uint64_t *)((char *)&v157 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v161 = (uint64_t)&v157 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unint64_t v158 = (unint64_t)&v157 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v160 = (uint64_t)&v157 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v182 = (uint64_t)&v157 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  unint64_t v159 = (unint64_t)&v157 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  unint64_t v174 = (char *)&v157 - v30;
  MEMORY[0x270FA5388](v29);
  uint64_t v180 = (uint64_t)&v157 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v32 - 8);
  uint64_t v181 = (uint64_t)&v157 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACC78);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v191 = (uint64_t)&v157 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v35);
  uint64_t v198 = (uint64_t)&v157 - v37;
  uint64_t v38 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v195 = *(void *)(v38 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](v38);
  uint64_t v173 = (uint64_t)&v157 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v172 = (uint64_t)&v157 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v171 = (uint64_t)&v157 - v44;
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  uint64_t v170 = (uint64_t)&v157 - v46;
  uint64_t v47 = MEMORY[0x270FA5388](v45);
  uint64_t v49 = (char *)&v157 - v48;
  uint64_t v50 = MEMORY[0x270FA5388](v47);
  uint64_t v193 = (uint64_t)&v157 - v51;
  uint64_t v52 = MEMORY[0x270FA5388](v50);
  unint64_t v54 = (char *)&v157 - v53;
  MEMORY[0x270FA5388](v52);
  uint64_t v199 = (uint64_t)&v157 - v55;
  if (qword_2687ABCD0 != -1) {
LABEL_84:
  }
    swift_once();
  unint64_t v56 = sub_2346AAB7C(v2, a1, a2);
  unint64_t v57 = v56;
  if (v56 >> 62)
  {
    unint64_t v156 = v56;
    uint64_t v58 = sub_2347EEEC0();
    unint64_t v57 = v156;
    if (v58) {
      goto LABEL_4;
    }
LABEL_86:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE80];
  }
  uint64_t v58 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v58) {
    goto LABEL_86;
  }
LABEL_4:
  unint64_t v59 = 0;
  uint64_t v202 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  uint64_t v203 = a2 + 24;
  unint64_t v197 = v57 & 0xC000000000000001;
  uint64_t v187 = v57 & 0xFFFFFFFFFFFFFF8;
  unint64_t v194 = v57;
  unint64_t v186 = v57 + 32;
  uint64_t v200 = (uint64_t **)(v195 + 48);
  uint64_t v201 = (uint64_t *)(v195 + 56);
  uint64_t v179 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 56);
  uint64_t v183 = (void (**)(uint64_t, uint64_t, uint64_t))(v175 + 16);
  uint64_t v178 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v176 + 48);
  uint64_t v177 = (void (**)(uint64_t, uint64_t *))(v175 + 8);
  uint64_t v168 = MEMORY[0x263F8EE80];
  uint64_t v185 = MEMORY[0x263F8EE80];
  uint64_t v196 = v58;
  uint64_t v190 = v2;
  uint64_t v204 = a1;
  uint64_t v205 = a2;
  unint64_t v192 = v10;
  uint64_t v167 = v13;
  uint64_t v157 = v18;
  while (1)
  {
    if (v197)
    {
      uint64_t v207 = MEMORY[0x237DC6CF0](v59, v194);
      BOOL v60 = __OFADD__(v59, 1);
      unint64_t v61 = v59 + 1;
      if (v60) {
        goto LABEL_81;
      }
    }
    else
    {
      if (v59 >= *(void *)(v187 + 16)) {
        goto LABEL_82;
      }
      uint64_t v207 = *(void *)(v186 + 8 * v59);
      swift_retain();
      BOOL v60 = __OFADD__(v59, 1);
      unint64_t v61 = v59 + 1;
      if (v60)
      {
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
    }
    unint64_t v206 = v61;
    uint64_t v62 = v202(a1, a2);
    uint64_t v63 = *(void *)(v62 + 16);
    if (v63)
    {
      uint64_t v64 = v62 + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80));
      uint64_t v65 = *(void *)(v195 + 72);
      while (1)
      {
        sub_2346AABC0(v64, (uint64_t)v54);
        if (sub_2347ED570()) {
          break;
        }
        sub_2346AACEC((uint64_t)v54);
        v64 += v65;
        if (!--v63) {
          goto LABEL_17;
        }
      }
      unint64_t v10 = v198;
      sub_2346DD874((uint64_t)v54, v198, type metadata accessor for CapturedRoom.Surface);
      uint64_t v13 = *v201;
      ((void (*)(unint64_t, void, uint64_t, uint64_t))*v201)(v10, 0, 1, v38);
    }
    else
    {
LABEL_17:
      uint64_t v13 = *v201;
      unint64_t v10 = v198;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v201)(v198, 1, 1, v38);
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = *v200;
    int v66 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))*v200)(v10, 1, v38);
    a1 = v204;
    a2 = v205;
    if (v66 != 1) {
      break;
    }
    swift_release();
    sub_2346A7C30(v10, &qword_2687ACC78);
    unint64_t v59 = v206;
LABEL_6:
    if (v59 == v196)
    {
      swift_bridgeObjectRelease();
      return v185;
    }
  }
  sub_2346DD874(v10, v199, type metadata accessor for CapturedRoom.Surface);
  uint64_t v67 = v202(a1, a2);
  uint64_t v68 = *(void *)(v67 + 16);
  if (v68)
  {
    uint64_t v69 = v67 + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80));
    uint64_t v70 = *(void *)(v195 + 72);
    while (1)
    {
      sub_2346AABC0(v69, (uint64_t)v49);
      if (sub_2347ED570()) {
        break;
      }
      sub_2346AACEC((uint64_t)v49);
      v69 += v70;
      if (!--v68) {
        goto LABEL_24;
      }
    }
    uint64_t v71 = v191;
    sub_2346DD874((uint64_t)v49, v191, type metadata accessor for CapturedRoom.Surface);
    uint64_t v72 = v71;
    uint64_t v73 = 0;
  }
  else
  {
LABEL_24:
    uint64_t v71 = v191;
    uint64_t v72 = v191;
    uint64_t v73 = 1;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v72, v73, 1, v38);
  swift_bridgeObjectRelease();
  int v74 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v71, 1, v38);
  a2 = v205;
  unint64_t v59 = v206;
  unint64_t v10 = v192;
  if (v74 == 1)
  {
    sub_2346AACEC(v199);
    swift_release();
    sub_2346A7C30(v71, &qword_2687ACC78);
    uint64_t v2 = v190;
    a1 = v204;
    goto LABEL_6;
  }
  uint64_t v75 = v193;
  sub_2346DD874(v71, v193, type metadata accessor for CapturedRoom.Surface);
  uint64_t v76 = v181;
  sub_2346A7BCC(v75 + *(int *)(v38 + 52), v181, (uint64_t *)&unk_2687AE190);
  uint64_t v77 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  int v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48))(v76, 1, v77);
  sub_2346A7C30(v76, (uint64_t *)&unk_2687AE190);
  if (v78 == 1)
  {
    uint64_t v79 = v199;
    uint64_t v80 = v172;
    sub_2346AABC0(v199, v172);
    uint64_t v81 = v173;
    sub_2346AABC0(v75, v173);
    unint64_t v82 = (float32x2_t *)v207;
    swift_retain();
    uint64_t v83 = v182;
    sub_2346BCFBC(v80, v81, v82, v182);
    float32x2_t v84 = v82[2];
    v84.i32[1] = HIDWORD(*(void *)(v79 + 80));
    *(float32x2_t *)v85.f32 = vsub_f32(v84, *(float32x2_t *)(v79 + 80));
    v85.f32[2] = COERCE_FLOAT(HIDWORD(*(void *)&v82[2])) - *(float *)(v79 + 88);
    float32x4_t v86 = vmulq_f32(*(float32x4_t *)(v79 + 32), v85);
    uint64_t v87 = v79 + *(int *)(v38 + 44);
    unint64_t v88 = *v183;
    a1 = v204;
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).f32[0] <= 0.0)
    {
      uint64_t v18 = (uint64_t *)v189;
      v88(v10, v87, v189);
      uint64_t v108 = v83;
      uint64_t v109 = v161;
      uint64_t v13 = (uint64_t)&qword_2687AC800;
      sub_2346A7BCC(v108, v161, &qword_2687AC800);
      int v110 = (*v178)(v109, 1, v188);
      unint64_t v59 = v206;
      if (v110 == 1)
      {
        sub_2346A7C30(v109, &qword_2687AC800);
        unint64_t v111 = (void *)v185;
        swift_bridgeObjectRetain();
        unint64_t v10 = sub_2347BFA88(v10);
        char v113 = v112;
        swift_bridgeObjectRelease();
        if (v113)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v208 = v111;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_2347D624C();
            unint64_t v111 = v208;
          }
          unint64_t v115 = v111[6] + *(void *)(v175 + 72) * v10;
          v166.i64[0] = *(void *)(v175 + 8);
          uint64_t v116 = v189;
          ((void (*)(unint64_t, uint64_t))v166.i64[0])(v115, v189);
          uint64_t v117 = (uint64_t)v208;
          uint64_t v118 = v176;
          uint64_t v18 = v157;
          sub_2346DD874(v208[7] + *(void *)(v176 + 72) * v10, (uint64_t)v157, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
          uint64_t v185 = v117;
          sub_2347D3A10(v10, v117);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v118 + 56))(v18, 0, 1, v188);
          unint64_t v119 = (void (*)(uint64_t, uint64_t *))v166.i64[0];
        }
        else
        {
          uint64_t v18 = v157;
          (*v179)((uint64_t)v157, 1, 1, v188);
          unint64_t v119 = *v177;
          uint64_t v116 = v189;
        }
        a2 = v205;
        v119(v192, (uint64_t *)v116);
        uint64_t v13 = (uint64_t)&qword_2687AC800;
        sub_2346A7C30((uint64_t)v18, &qword_2687AC800);
        a1 = v204;
      }
      else
      {
        uint64_t v126 = v162;
        sub_2346DD874(v109, v162, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
        char v127 = (void *)v185;
        char v128 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v208 = v127;
        sub_2347AB05C(v126, v10, v128);
        uint64_t v185 = (uint64_t)v208;
        swift_bridgeObjectRelease();
        (*v177)(v10, v18);
        a2 = v205;
      }
    }
    else
    {
      uint64_t v13 = v167;
      uint64_t v18 = (uint64_t *)v189;
      v88(v167, v87, v189);
      uint64_t v89 = v83;
      uint64_t v90 = v160;
      sub_2346A7BCC(v89, v160, &qword_2687AC800);
      int v91 = (*v178)(v90, 1, v188);
      unint64_t v59 = v206;
      uint64_t v92 = (void *)v168;
      if (v91 == 1)
      {
        sub_2346A7C30(v90, &qword_2687AC800);
        swift_bridgeObjectRetain();
        unint64_t v93 = sub_2347BFA88(v13);
        char v95 = v94;
        swift_bridgeObjectRelease();
        if (v95)
        {
          char v96 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v208 = v92;
          if ((v96 & 1) == 0)
          {
            sub_2347D624C();
            uint64_t v92 = v208;
          }
          unint64_t v97 = v92[6] + *(void *)(v175 + 72) * v93;
          v166.i64[0] = *(void *)(v175 + 8);
          int64_t v98 = v93;
          uint64_t v18 = (uint64_t *)v189;
          ((void (*)(unint64_t, uint64_t))v166.i64[0])(v97, v189);
          uint64_t v99 = (uint64_t)v208;
          uint64_t v100 = v176;
          unint64_t v10 = v158;
          sub_2346DD874(v208[7] + *(void *)(v176 + 72) * v98, v158, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
          uint64_t v168 = v99;
          sub_2347D3A10(v98, v99);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v100 + 56))(v10, 0, 1, v188);
          uint64_t v101 = (void (*)(uint64_t, uint64_t *))v166.i64[0];
          uint64_t v13 = v167;
        }
        else
        {
          unint64_t v10 = v158;
          (*v179)(v158, 1, 1, v188);
          uint64_t v101 = *v177;
          uint64_t v18 = (uint64_t *)v189;
        }
        a2 = v205;
        v101(v13, v18);
        sub_2346A7C30(v10, &qword_2687AC800);
        a1 = v204;
      }
      else
      {
        uint64_t v123 = v162;
        sub_2346DD874(v90, v162, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
        char v124 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v208 = v92;
        uint64_t v125 = v123;
        uint64_t v13 = v167;
        sub_2347AB05C(v125, v167, v124);
        uint64_t v168 = (uint64_t)v208;
        swift_bridgeObjectRelease();
        (*v177)(v13, v18);
        a2 = v205;
      }
    }
    swift_release();
    sub_2346A7C30(v182, &qword_2687AC800);
    sub_2346AACEC(v193);
    sub_2346AACEC(v199);
    uint64_t v2 = v190;
    goto LABEL_6;
  }
  uint64_t v102 = v170;
  sub_2346AABC0(v75, v170);
  uint64_t v103 = v171;
  sub_2346AABC0(v199, v171);
  uint64_t v104 = (uint64_t)v174;
  uint64_t v105 = v180;
  if (*(unsigned char *)(v207 + OBJC_IVAR____TtC8RoomPlan13JunctionPoint_configuration))
  {
    sub_2346AACEC(v103);
    sub_2346AACEC(v102);
    unint64_t v106 = *v179;
    a1 = v188;
    (*v179)(v105, 1, 1, v188);
    uint64_t v107 = v184;
  }
  else
  {
    float v120 = *(float *)(v102 + 24);
    a1 = v188;
    uint64_t v121 = v184;
    if (v120 <= 0.0)
    {
      if ((*(unsigned char *)v102 - 2) > 3u) {
        float v122 = 0.08;
      }
      else {
        float v122 = flt_2347F1D00[(char)(*(unsigned char *)v102 - 2)];
      }
    }
    else
    {
      float v122 = v120 * 0.5;
    }
    float v129 = *(float *)(v103 + 24);
    if (v129 <= 0.0)
    {
      if ((*(unsigned char *)v103 - 2) > 3u) {
        float v130 = 0.08;
      }
      else {
        float v130 = flt_2347F1D00[(char)(*(unsigned char *)v103 - 2)];
      }
    }
    else
    {
      float v130 = v129 * 0.5;
    }
    simd_float4 v166 = *(simd_float4 *)(v102 + 32);
    simd_float4 v165 = *(simd_float4 *)(v102 + 48);
    simd_float4 v164 = *(simd_float4 *)(v102 + 64);
    simd_float4 v163 = *(simd_float4 *)(v102 + 80);
    uint64_t v131 = (float32x2_t *)swift_retain();
    v209.columns[0] = v166;
    v209.columns[1] = v165;
    v209.columns[2] = v164;
    v209.columns[3] = v163;
    sub_2346BC77C(v131, v105, v209, v122, v130);
    sub_2346AACEC(v103);
    sub_2346AACEC(v102);
    unint64_t v106 = *v179;
    (*v179)(v105, 0, 1, a1);
    uint64_t v107 = v121;
  }
  uint64_t v132 = *v183;
  (*v183)(v107, v193 + *(int *)(v38 + 44), v189);
  uint64_t v133 = v105;
  uint64_t v18 = &qword_2687AC800;
  sub_2346A7BCC(v133, v104, &qword_2687AC800);
  if ((*v178)(v104, 1, a1) == 1)
  {
    sub_2346A7C30(v104, &qword_2687AC800);
    uint64_t v134 = (void *)v185;
    swift_bridgeObjectRetain();
    unint64_t v135 = sub_2347BFA88(v107);
    char v137 = v136;
    swift_bridgeObjectRelease();
    uint64_t v18 = (uint64_t *)((unint64_t)v177 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
    if (v137)
    {
      v166.i64[0] = (uint64_t)v106;
      char v138 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v208 = v134;
      if ((v138 & 1) == 0)
      {
        sub_2347D624C();
        uint64_t v134 = v208;
      }
      unint64_t v139 = v134[6] + *(void *)(v175 + 72) * v135;
      uint64_t v140 = *(void (**)(uint64_t, uint64_t *))(v175 + 8);
      uint64_t v141 = v189;
      v140(v139, (uint64_t *)v189);
      uint64_t v142 = (uint64_t)v208;
      unint64_t v10 = v159;
      sub_2346DD874(v208[7] + *(void *)(v176 + 72) * v135, v159, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
      uint64_t v185 = v142;
      sub_2347D3A10(v135, v142);
      swift_bridgeObjectRelease();
      ((void (*)(unint64_t, void, uint64_t, uint64_t))v166.i64[0])(v10, 0, 1, v188);
    }
    else
    {
      float32x4_t v150 = v177;
      unint64_t v10 = v159;
      v106(v159, 1, 1, v188);
      uint64_t v140 = *v150;
      uint64_t v141 = v189;
    }
    v140(v184, (uint64_t *)v141);
    uint64_t v13 = (uint64_t)&qword_2687AC800;
    sub_2346A7C30(v10, &qword_2687AC800);
    a1 = v204;
    uint64_t v2 = v190;
    unint64_t v59 = v206;
    goto LABEL_78;
  }
  v166.i64[0] = (uint64_t)v132;
  sub_2346DD874(v104, v169, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  uint64_t v2 = v185;
  uint64_t v13 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v208 = (void *)v2;
  unint64_t v10 = sub_2347BFA88(v107);
  uint64_t v144 = *(void *)(v2 + 16);
  BOOL v145 = (v143 & 1) == 0;
  uint64_t v146 = v144 + v145;
  if (__OFADD__(v144, v145)) {
    goto LABEL_83;
  }
  char v147 = v143;
  if (*(void *)(v2 + 24) >= v146)
  {
    uint64_t v2 = v190;
    unint64_t v59 = v206;
    if ((v13 & 1) == 0)
    {
      sub_2347D624C();
      goto LABEL_69;
    }
  }
  else
  {
    sub_2347D0024(v146, v13);
    unint64_t v148 = sub_2347BFA88(v184);
    unint64_t v59 = v206;
    if ((v147 & 1) != (v149 & 1)) {
      goto LABEL_88;
    }
    unint64_t v10 = v148;
LABEL_69:
    uint64_t v2 = v190;
  }
  float32x4_t v151 = v208;
  if (v147)
  {
    uint64_t v185 = (uint64_t)v208;
    sub_2346DD8DC(v169, v208[7] + *(void *)(v176 + 72) * v10);
    uint64_t v152 = v189;
LABEL_77:
    swift_bridgeObjectRelease();
    (*v177)(v184, (uint64_t *)v152);
    a1 = v204;
    uint64_t v13 = (uint64_t)&qword_2687AC800;
LABEL_78:
    swift_release();
    sub_2346A7C30(v180, &qword_2687AC800);
    sub_2346AACEC(v193);
    sub_2346AACEC(v199);
    goto LABEL_6;
  }
  v208[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v152 = v189;
  ((void (*)(unint64_t, uint64_t, uint64_t))v166.i64[0])(v151[6] + *(void *)(v175 + 72) * v10, v184, v189);
  sub_2346DD874(v169, v151[7] + *(void *)(v176 + 72) * v10, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
  uint64_t v153 = v151[2];
  BOOL v60 = __OFADD__(v153, 1);
  uint64_t v154 = v153 + 1;
  if (!v60)
  {
    v151[2] = v154;
    uint64_t v185 = (uint64_t)v208;
    goto LABEL_77;
  }
  __break(1u);
LABEL_88:
  uint64_t result = sub_2347EF0F0();
  __break(1u);
  return result;
}

uint64_t sub_2346DD874(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346DD8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScanItemStrut();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SpriteKitUtilities()
{
  return self;
}

uint64_t sub_2346DD964()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_uuid;
  uint64_t v2 = sub_2347ED5C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_2346DDA04()
{
  return type metadata accessor for HullPointUUID();
}

uint64_t type metadata accessor for HullPointUUID()
{
  uint64_t result = qword_2687ACC80;
  if (!qword_2687ACC80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2346DDA58()
{
  uint64_t result = sub_2347ED5C0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2346DDAFC()
{
  return sub_2347EF200();
}

uint64_t sub_2346DDB4C()
{
  return sub_2347ED590();
}

uint64_t sub_2346DDB7C()
{
  return sub_2347EF200();
}

BOOL sub_2346DDBC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return (sub_2347ED570() & 1) != 0
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_type) == *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8RoomPlan13HullPointUUID_type);
}

id sub_2346DDC54()
{
  return sub_2346DDCE8(type metadata accessor for HullPoint);
}

uint64_t type metadata accessor for HullPoint()
{
  return self;
}

id sub_2346DDCD0()
{
  return sub_2346DDCE8(type metadata accessor for HullPointHierarchy);
}

id sub_2346DDCE8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for HullPointHierarchy()
{
  return self;
}

uint64_t getEnumTagSinglePayload for HullPointType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HullPointType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346DDF30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HullPointType()
{
  return &type metadata for HullPointType;
}

unint64_t sub_2346DDF6C()
{
  unint64_t result = qword_2687ACCB0;
  if (!qword_2687ACCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACCB0);
  }
  return result;
}

unint64_t sub_2346DDFC4()
{
  unint64_t result = qword_2687ACCB8;
  if (!qword_2687ACCB8)
  {
    type metadata accessor for HullPointUUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACCB8);
  }
  return result;
}

uint64_t sub_2346DE01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t sub_2346DE030()
{
  type metadata accessor for FramerateLogManager();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_2346DED1C();
  qword_2687BDFF8 = v0;
  return result;
}

uint64_t sub_2346DE070(char *a1, char *a2)
{
  return sub_234724470(*a1, *a2);
}

uint64_t sub_2346DE07C()
{
  return sub_2347EF200();
}

uint64_t sub_2346DE0D8()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346DE118()
{
  return sub_2347EF200();
}

uint64_t sub_2346DE170@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2346DEF5C();
  *a1 = result;
  return result;
}

void sub_2346DE1A0(void *a1@<X8>)
{
  *a1 = qword_2347F29A8[*v1];
  a1[1] = 0xE300000000000000;
}

uint64_t sub_2346DE1BC(uint64_t result)
{
  if ((result & 0x100000000) == 0)
  {
    int v2 = result;
    int v3 = *(NSObject **)(v1 + 40);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v1;
    *(_DWORD *)(v4 + 24) = v2;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_2346DF1BC;
    *(void *)(v5 + 24) = v4;
    v8[4] = sub_2346DF1D8;
    v8[5] = v5;
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 1107296256;
    long long v8[2] = sub_2347E9AA8;
    v8[3] = &block_descriptor_45;
    unsigned int v6 = _Block_copy(v8);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v3, v6);
    _Block_release(v6);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_2346DE318(uint64_t a1, float a2)
{
  *(float *)(a1 + 48) = a2;
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  uint64_t v4 = (float *)off_2687AF0E8;
  uint64_t result = swift_beginAccess();
  if (v4[36] <= a2)
  {
    char v7 = 2;
  }
  else
  {
    float v6 = *(float *)(a1 + 48);
    uint64_t result = swift_beginAccess();
    if (v6 >= v4[37]) {
      return result;
    }
    char v7 = 1;
  }
  *(unsigned char *)(a1 + 52) = v7;
  return result;
}

uint64_t sub_2346DE3DC(double a1)
{
  if (*(unsigned char *)(v1 + 72))
  {
    int v3 = 0;
LABEL_4:
    *(double *)(v1 + 64) = a1;
    *(unsigned char *)(v1 + 72) = 0;
    return sub_2346DF0F0((uint64_t)v3);
  }
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(NSObject **)(v1 + 40);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v1;
  *(double *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = v4;
  uint64_t v7 = swift_allocObject();
  int v3 = sub_2346DF138;
  *(void *)(v7 + 16) = sub_2346DF138;
  *(void *)(v7 + 24) = v6;
  v10[4] = sub_2346DF164;
  v10[5] = v7;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  v10[2] = sub_2347E9AA8;
  void v10[3] = &block_descriptor_0;
  int v8 = _Block_copy(v10);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v5 & 1) == 0) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t sub_2346DE56C(uint64_t a1, float a2)
{
  uint64_t v4 = sub_2347ED540();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = &v16[-v9];
  *(double *)(a1 + 80) = 1.0 / a2;
  sub_2347ED520();
  uint64_t v11 = a1 + OBJC_IVAR____TtC8RoomPlan19FramerateLogManager_lastDisplayTime;
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v11, v4);
  sub_2347ED4F0();
  double v13 = v12;
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v14)(v10, v4);
  if (v13 >= 0.1)
  {
    sub_2346DE754(*(unsigned char *)(a1 + 52), *(float *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 80));
    *(unsigned char *)(a1 + 52) = 0;
    sub_2347ED520();
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 40))(v11, v10, v4);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_2346DE754(char a1, float a2, double a3, double a4)
{
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACCE0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2347F19A0;
  uint64_t v11 = qword_2347F29A8[a1];
  *(void *)(v10 + 56) = MEMORY[0x263F8D310];
  *(void *)(v10 + 64) = sub_2346DF09C();
  uint64_t v12 = MEMORY[0x263F8D5C8];
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = 0xE300000000000000;
  uint64_t v13 = MEMORY[0x263F8D648];
  *(void *)(v10 + 96) = v12;
  *(void *)(v10 + 104) = v13;
  *(float *)(v10 + 72) = a2;
  uint64_t v24 = sub_2347EE650();
  uint64_t v25 = v14;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2347F0FA0;
  uint64_t v16 = MEMORY[0x263F8D538];
  uint64_t v17 = MEMORY[0x263F8D5B8];
  *(void *)(v15 + 56) = MEMORY[0x263F8D538];
  *(void *)(v15 + 64) = v17;
  *(double *)(v15 + 32) = a3;
  sub_2347EE650();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2347F0FA0;
  *(void *)(v18 + 56) = v16;
  *(void *)(v18 + 64) = v17;
  *(double *)(v18 + 32) = a4;
  sub_2347EE650();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  uint64_t v19 = MEMORY[0x237DC8170](v5 + 16);
  if (v19)
  {
    uint64_t v20 = v19 + OBJC_IVAR____TtC8RoomPlan18RoomCaptureSession_debugDelegate;
    swift_beginAccess();
    if (MEMORY[0x237DC8170](v20))
    {
      uint64_t v21 = *(void *)(v20 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 32))(v24, v25, ObjectType, v21);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2346DE9D8()
{
  sub_2346BBA5C(v0 + 16);

  uint64_t v1 = v0 + OBJC_IVAR____TtC8RoomPlan19FramerateLogManager_lastDisplayTime;
  uint64_t v2 = sub_2347ED540();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_2346DEA88()
{
  return type metadata accessor for FramerateLogManager();
}

uint64_t type metadata accessor for FramerateLogManager()
{
  uint64_t result = qword_2687ACCC8;
  if (!qword_2687ACCC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2346DEADC()
{
  uint64_t result = sub_2347ED540();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FramerateLogManager.DeviceVelocityMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346DEC8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FramerateLogManager.DeviceVelocityMode()
{
  return &type metadata for FramerateLogManager.DeviceVelocityMode;
}

unint64_t sub_2346DECC8()
{
  unint64_t result = qword_2687ACCD8;
  if (!qword_2687ACCD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACCD8);
  }
  return result;
}

uint64_t sub_2346DED1C()
{
  uint64_t v1 = sub_2347EE9F0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unsigned int v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2347EE9D0();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_2347EE410();
  MEMORY[0x270FA5388](v6 - 8);
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v0 + 32) = 0;
  sub_2346DEFA8();
  sub_2347EE3D0();
  v8[1] = MEMORY[0x263F8EE78];
  sub_2346DEFE8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AD2C0);
  sub_2346DF040();
  sub_2347EEC30();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F130], v1);
  *(void *)(v0 + 40) = sub_2347EEA20();
  *(_DWORD *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 52) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(void *)(v0 + 80) = 0;
  sub_2347ED520();
  return v0;
}

uint64_t sub_2346DEF5C()
{
  unint64_t v0 = sub_2347EEF30();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

unint64_t sub_2346DEFA8()
{
  unint64_t result = qword_2687AD2B0;
  if (!qword_2687AD2B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2687AD2B0);
  }
  return result;
}

unint64_t sub_2346DEFE8()
{
  unint64_t result = qword_2687AE910;
  if (!qword_2687AE910)
  {
    sub_2347EE9D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AE910);
  }
  return result;
}

unint64_t sub_2346DF040()
{
  unint64_t result = qword_2687AE920;
  if (!qword_2687AE920)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2687AD2C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AE920);
  }
  return result;
}

unint64_t sub_2346DF09C()
{
  unint64_t result = qword_2687AEBF0;
  if (!qword_2687AEBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AEBF0);
  }
  return result;
}

uint64_t sub_2346DF0F0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_2346DF100()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

double sub_2346DF138()
{
  double result = 1.0 / (*(double *)(v0 + 24) - *(double *)(v0 + 32));
  *(double *)(*(void *)(v0 + 16) + 56) = result;
  return result;
}

uint64_t sub_2346DF154()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2346DF164()
{
  return sub_2347E9A80(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_2346DF184()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 28, 7);
}

uint64_t sub_2346DF1BC()
{
  return sub_2346DE318(*(void *)(v0 + 16), *(float *)(v0 + 24));
}

uint64_t sub_2346DF1C8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2346DF1E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (sub_2347EF090() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = sub_2347EF090();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

uint64_t sub_2346DF2CC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD30);
  uint64_t result = MEMORY[0x270FA5388](v3);
  BOOL v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v1;
  unint64_t v8 = v1[1];
  unint64_t v10 = *(void *)(*v1 + 16);
  if (v8 == v10)
  {
    uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v11(a1, 1, 1, v3);
  }
  else
  {
    if (v8 >= v10)
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = v5;
      uint64_t v12 = *(void *)(type metadata accessor for CapturedRoom.Surface(0) - 8);
      uint64_t v13 = v9
          + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
          + *(void *)(v12 + 72) * v8;
      v1[1] = v8 + 1;
      uint64_t v14 = (uint64_t)&v7[*(int *)(v3 + 48)];
      uint64_t v15 = v1[2];
      uint64_t result = sub_2346F2B6C(v13, v14, type metadata accessor for CapturedRoom.Surface);
      if (!__OFADD__(v15, 1))
      {
        v1[2] = v15 + 1;
        uint64_t v16 = (uint64_t)a1 + *(int *)(v3 + 48);
        *a1 = v15;
        sub_2346F16F8(v14, v16, type metadata accessor for CapturedRoom.Surface);
        return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v3);
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_2346DF4C4(uint64_t a1)
{
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD78);
  uint64_t v3 = MEMORY[0x270FA5388](v64);
  uint64_t v59 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v58 = (char *)&v49 - v6;
  MEMORY[0x270FA5388](v5);
  unint64_t v57 = (char *)&v49 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD70);
  uint64_t v55 = *(void *)(v8 - 8);
  uint64_t v56 = v8;
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (!v11) {
    return v12;
  }
  uint64_t v49 = v1;
  uint64_t v65 = MEMORY[0x263F8EE78];
  sub_2347458F0(0, v11, 0);
  unint64_t result = sub_2346ED428(a1);
  uint64_t v15 = 0;
  uint64_t v16 = a1 + 64;
  uint64_t v60 = a1 + 80;
  uint64_t v53 = v10;
  uint64_t v54 = a1;
  int64_t v50 = v11;
  uint64_t v51 = v14;
  uint64_t v52 = a1 + 64;
  while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v19 = result >> 6;
    if ((*(void *)(v16 + 8 * (result >> 6)) & (1 << result)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v14) {
      goto LABEL_26;
    }
    uint64_t v61 = v15;
    uint64_t v62 = 1 << result;
    uint64_t v20 = (uint64_t)v57;
    uint64_t v21 = &v57[*(int *)(v64 + 48)];
    uint64_t v22 = *(void *)(a1 + 48);
    uint64_t v23 = a1;
    unint64_t v24 = result;
    uint64_t v25 = sub_2347ED5C0();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16);
    v27(v20, v22 + *(void *)(v26 + 72) * v24, v25);
    uint64_t v28 = *(void *)(v23 + 56);
    int64_t v63 = v24;
    uint64_t v29 = (uint64_t *)(v28 + 16 * v24);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    *(void *)uint64_t v21 = *v29;
    *((void *)v21 + 1) = v31;
    uint64_t v32 = v58;
    v27((uint64_t)v58, v20, v25);
    uint64_t v33 = v64;
    uint64_t v34 = &v32[*(int *)(v64 + 48)];
    *(void *)uint64_t v34 = v30;
    *((void *)v34 + 1) = v31;
    uint64_t v35 = (uint64_t)v32;
    uint64_t v36 = v59;
    sub_2346B1970(v35, v59, &qword_2687ACD78);
    swift_bridgeObjectRetain_n();
    sub_2346A7C30(v20, &qword_2687ACD78);
    uint64_t v37 = *(int *)(v33 + 48);
    uint64_t v38 = v53;
    uint64_t v39 = (uint64_t *)(v36 + v37);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    v27((uint64_t)v53 + *(int *)(v56 + 48), v36, v25);
    *uint64_t v38 = v40;
    v38[1] = v41;
    swift_bridgeObjectRetain();
    sub_2346A7C30(v36, &qword_2687ACD78);
    uint64_t v12 = v65;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2347458F0(0, *(void *)(v12 + 16) + 1, 1);
      uint64_t v12 = v65;
    }
    unint64_t v43 = *(void *)(v12 + 16);
    unint64_t v42 = *(void *)(v12 + 24);
    a1 = v54;
    if (v43 >= v42 >> 1)
    {
      sub_2347458F0(v42 > 1, v43 + 1, 1);
      uint64_t v12 = v65;
    }
    *(void *)(v12 + 16) = v43 + 1;
    unint64_t result = sub_2346B1970((uint64_t)v38, v12+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v43, &qword_2687ACD70);
    int64_t v17 = 1 << *(unsigned char *)(a1 + 32);
    if (v63 >= v17) {
      goto LABEL_27;
    }
    uint64_t v16 = v52;
    uint64_t v44 = *(void *)(v52 + 8 * v19);
    if ((v44 & v62) == 0) {
      goto LABEL_28;
    }
    LODWORD(v14) = v51;
    if (*(_DWORD *)(a1 + 36) != v51) {
      goto LABEL_29;
    }
    unint64_t v45 = v44 & (-2 << (v63 & 0x3F));
    if (v45)
    {
      int64_t v17 = __clz(__rbit64(v45)) | v63 & 0xFFFFFFFFFFFFFFC0;
      int64_t v18 = v50;
    }
    else
    {
      unint64_t v46 = v19 + 1;
      unint64_t v47 = (unint64_t)(v17 + 63) >> 6;
      int64_t v18 = v50;
      if (v19 + 1 < v47)
      {
        unint64_t v48 = *(void *)(v52 + 8 * v46);
        if (v48)
        {
LABEL_22:
          int64_t v17 = __clz(__rbit64(v48)) + (v46 << 6);
        }
        else
        {
          while (v47 - 2 != v19)
          {
            unint64_t v48 = *(void *)(v60 + 8 * v19++);
            if (v48)
            {
              unint64_t v46 = v19 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v15 = v61 + 1;
    unint64_t result = v17;
    if (v61 + 1 == v18) {
      return v12;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *sub_2346DF950(void (*a1)(void *__return_ptr, void), uint64_t a2, uint64_t a3)
{
  void (*v19)(void *__return_ptr, void);
  void v20[4];
  char v21;
  uint64_t v22;

  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v7 = *(void *)(type metadata accessor for CapturedRoom.Object(0) - 8);
  uint64_t v8 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v9 = *(void *)(v7 + 72);
  swift_bridgeObjectRetain();
  unint64_t v10 = (void *)MEMORY[0x263F8EE78];
  uint64_t v18 = v9;
  unint64_t v19 = a1;
  do
  {
    a1(v20, v8);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    if ((v21 & 1) == 0)
    {
      uint64_t v12 = v20[1];
      uint64_t v22 = v20[0];
      uint64_t v14 = v20[2];
      uint64_t v13 = v20[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v10 = sub_2346FA80C(0, v10[2] + 1, 1, v10);
      }
      unint64_t v16 = v10[2];
      unint64_t v15 = v10[3];
      if (v16 >= v15 >> 1) {
        unint64_t v10 = sub_2346FA80C((void *)(v15 > 1), v16 + 1, 1, v10);
      }
      v10[2] = v16 + 1;
      int64_t v11 = &v10[4 * v16];
      v11[4] = v22;
      _OWORD v11[5] = v12;
      v11[6] = v14;
      v11[7] = v13;
      a1 = v19;
      uint64_t v9 = v18;
    }
    v8 += v9;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_2346DFB08()
{
  sub_2347ED470();
  sub_2346EFB68();
  uint64_t v0 = (void *)sub_2347EEB60();
  swift_bridgeObjectRelease();
  unint64_t result = sub_2346DF1E4(0x737465737361, 0xE600000000000000, v0);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    if (!result)
    {
LABEL_6:
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD10);
      sub_2346F1648();
      sub_2347EE560();
      swift_bridgeObjectRelease();
      sub_2347EE6F0();
      swift_bridgeObjectRelease();
      return 12078;
    }
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v0[2] >= result)
    {
      sub_23478EF28(0, result);
      goto LABEL_6;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2346DFC4C()
{
  uint64_t v0 = sub_2347ED1A0();
  __swift_allocate_value_buffer(v0, qword_2687BE000);
  __swift_project_value_buffer(v0, (uint64_t)qword_2687BE000);
  return sub_2347ED150();
}

uint64_t sub_2346DFCA0()
{
  uint64_t v0 = sub_2347ED1A0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v2);
  uint64_t v7 = (char *)&v10 - v6;
  __swift_allocate_value_buffer(v5, qword_2687BE018);
  __swift_project_value_buffer(v0, (uint64_t)qword_2687BE018);
  sub_2347ED150();
  sub_2347ED150();
  sub_2347ED160();
  if (qword_2687ABD88 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v0, (uint64_t)qword_2687BE000);
  sub_2347ED190();
  sub_2347ED170();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  return ((uint64_t (*)(char *, uint64_t))v8)(v7, v0);
}

unint64_t sub_2346DFE34()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2347ED490();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for USDModel.Error();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2346F2B6C(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for USDModel.Error);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 6u:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      unint64_t v13 = 0;
      unint64_t v14 = 0xE000000000000000;
      sub_2347EED50();
      sub_2347EE6F0();
      sub_2347ED470();
      sub_2347EE6F0();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      unint64_t v13 = 0;
      unint64_t v14 = 0xE000000000000000;
      sub_2347EED50();
      sub_2347ED470();
      sub_2347EE6F0();
      swift_bridgeObjectRelease();
LABEL_5:
      sub_2347EE6F0();
      goto LABEL_6;
    case 7u:
      unint64_t v13 = 0;
      unint64_t v14 = 0xE000000000000000;
      sub_2347EED50();
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000020;
      int64_t v11 = "Cannot create USD node at path: ";
      goto LABEL_9;
    case 8u:
      unint64_t v13 = 0;
      unint64_t v14 = 0xE000000000000000;
      sub_2347EED50();
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000013;
      int64_t v11 = "Unknown Identifier ";
LABEL_9:
      unint64_t v13 = v10;
      unint64_t v14 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      sub_2347EE6F0();
      swift_bridgeObjectRelease();
      unint64_t v9 = v13;
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
      unint64_t v13 = 0;
      unint64_t v14 = 0xE000000000000000;
      sub_2347EED50();
      swift_bridgeObjectRelease();
      unint64_t v13 = 0xD000000000000012;
      unint64_t v14 = 0x80000002347FDAC0;
      sub_2347ED470();
      sub_2347EE6F0();
      swift_bridgeObjectRelease();
LABEL_6:
      unint64_t v9 = v13;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      break;
  }
  return v9;
}

uint64_t sub_2346E03B8(void *a1, uint64_t a2, uint64_t a3, void **a4, int *a5)
{
  uint64_t v222 = a3;
  unint64_t v224 = a1;
  uint64_t v235 = *MEMORY[0x263EF8340];
  uint64_t v214 = sub_2347ED5C0();
  uint64_t v213 = *(void *)(v214 - 8);
  MEMORY[0x270FA5388](v214);
  uint64_t v212 = (char *)&v192 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE940);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v208 = (uint64_t)&v192 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v216 = (uint64_t)&v192 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v210 = (uint64_t)&v192 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v211 = (char *)&v192 - v16;
  MEMORY[0x270FA5388](v17);
  simd_float4x4 v209 = (char *)&v192 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v221 = (uint64_t)&v192 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v229 = (uint64_t)&v192 - v22;
  uint64_t v23 = sub_2347ED490();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v219 = (char *)&v192 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  int v215 = (char *)&v192 - v27;
  MEMORY[0x270FA5388](v28);
  unint64_t v220 = (char *)&v192 - v29;
  MEMORY[0x270FA5388](v30);
  unint64_t v225 = (char *)&v192 - v31;
  MEMORY[0x270FA5388](v32);
  int64_t v226 = (char *)&v192 - v33;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v192 - v35;
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (char *)&v192 - v38;
  MEMORY[0x270FA5388](v40);
  unint64_t v42 = (char *)&v192 - v41;
  MEMORY[0x270FA5388](v43);
  unint64_t v45 = (char *)&v192 - v44;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD40);
  MEMORY[0x270FA5388](v46 - 8);
  float32x4_t v230 = (char *)&v192 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v48 = *a4;
  uint64_t v49 = a4[1];
  uint64_t v218 = v48;
  int v217 = *a5;
  if ((sub_2347ED380() & 1) == 0)
  {
    type metadata accessor for USDModel.Error();
    sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v51, a2, v23);
    goto LABEL_17;
  }
  uint64_t v227 = v24;
  if ((sub_2347ED3D0() & 1) == 0)
  {
    unint64_t v196 = (unint64_t)v49;
    uint64_t v200 = (void (*)(char *, uint64_t))v39;
    uint64_t v198 = v36;
    id v233 = (id)sub_2347ED3A0();
    unint64_t v234 = v52;
    uint64_t v231 = 6583157;
    unint64_t v232 = 0xE300000000000000;
    uint64_t v53 = sub_2347ED5F0();
    uint64_t v54 = *(void *)(v53 - 8);
    uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
    uint64_t v56 = (uint64_t)v230;
    uint64_t v204 = v53;
    uint64_t v205 = v54 + 56;
    unint64_t v206 = v55;
    ((void (*)(char *, uint64_t, uint64_t))v55)(v230, 1, 1);
    unint64_t v57 = sub_2346EFB68();
    uint64_t v58 = sub_2347EEBA0();
    sub_2346A7C30(v56, &qword_2687ACD40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v59 = v227;
    uint64_t v60 = v227 + 16;
    uint64_t v207 = *(void (**)(char *, uint64_t, uint64_t))(v227 + 16);
    v207(v45, a2, v23);
    unint64_t v202 = v57;
    uint64_t v203 = v23;
    uint64_t v199 = v60;
    uint64_t v201 = a2;
    if (v58)
    {
      id v233 = (id)sub_2347ED3A0();
      unint64_t v234 = v61;
      uint64_t v231 = 1633973109;
      unint64_t v232 = 0xE400000000000000;
      v206(v56, 1, 1, v204);
      uint64_t v62 = sub_2347EEBA0();
      sub_2346A7C30(v56, &qword_2687ACD40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v63 = v45;
      uint64_t v64 = *(void (**)(char *, uint64_t))(v59 + 8);
      uint64_t v197 = v59 + 8;
      v64(v63, v23);
      v207(v42, a2, v23);
      if (v62)
      {
        id v233 = (id)sub_2347ED3A0();
        unint64_t v234 = v65;
        uint64_t v231 = 1667527541;
        unint64_t v232 = 0xE400000000000000;
        v206(v56, 1, 1, v204);
        uint64_t v66 = sub_2347EEBA0();
        sub_2346A7C30(v56, &qword_2687ACD40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v67 = v203;
        v64(v42, v203);
        uint64_t v68 = (char *)v200;
        uint64_t v69 = a2;
        uint64_t v70 = (void (*)(uint64_t, uint64_t, uint64_t))v207;
        v207((char *)v200, v69, v67);
        uint64_t v71 = v204;
        if (v66)
        {
          id v233 = (id)sub_2347ED3A0();
          unint64_t v234 = v72;
          uint64_t v231 = 2053403509;
          unint64_t v232 = 0xE400000000000000;
          uint64_t v73 = v71;
          int v74 = v206;
          v206(v56, 1, 1, v73);
          uint64_t v75 = sub_2347EEBA0();
          sub_2346A7C30(v56, &qword_2687ACD40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v23 = v203;
          v64(v68, v203);
          uint64_t v76 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v74;
          if (v75)
          {
            type metadata accessor for USDModel.Error();
            sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
            swift_allocError();
            v70(v77, v201, v23);
            goto LABEL_17;
          }
LABEL_14:
          uint64_t v200 = v64;
          uint64_t v79 = v201;
          id v233 = (id)sub_2347ED3B0();
          unint64_t v234 = v80;
          uint64_t v81 = (void *)sub_2347EEB90();
          unint64_t v83 = v82;
          swift_bridgeObjectRelease();
          if (v83)
          {
            id v233 = v81;
            unint64_t v234 = v83;
            uint64_t v231 = 92;
            unint64_t v232 = 0xE100000000000000;
            char v84 = sub_2347EEBB0();
            swift_bridgeObjectRelease();
            if (v84)
            {
              type metadata accessor for USDModel.Error();
              sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
              swift_allocError();
              v207(v85, v79, v23);
              goto LABEL_17;
            }
          }
          id v233 = (id)sub_2347ED3A0();
          unint64_t v234 = v87;
          uint64_t v231 = 1633973109;
          unint64_t v232 = 0xE400000000000000;
          uint64_t v88 = (uint64_t)v230;
          uint64_t v89 = v204;
          v76(v230, 1, 1, v204);
          uint64_t v90 = sub_2347EEBA0();
          sub_2346A7C30(v88, &qword_2687ACD40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v90)
          {
            id v233 = (id)sub_2347ED3A0();
            unint64_t v234 = v91;
            uint64_t v231 = 1667527541;
            unint64_t v232 = 0xE400000000000000;
            v76((char *)v88, 1, 1, v89);
            uint64_t v92 = sub_2347EEBA0();
            sub_2346A7C30(v88, &qword_2687ACD40);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v93 = v227;
            char v94 = v228 + 4;
            if (v92) {
              v228[3] = 1633973109;
            }
            else {
              v228[3] = 1667527541;
            }
          }
          else
          {
            uint64_t v93 = v227;
            char v94 = v228 + 4;
            v228[3] = 1633973109;
          }
          *char v94 = 0xE400000000000000;
          swift_bridgeObjectRelease();
          char v95 = self;
          uint64_t v96 = (uint64_t)&selRef_setOpaque_;
          id v97 = objc_msgSend(v95, sel_defaultManager);
          sub_2347ED470();
          int64_t v98 = (void *)sub_2347EE5F0();
          swift_bridgeObjectRelease();
          unsigned int v99 = objc_msgSend(v97, sel_fileExistsAtPath_, v98);

          if (v99)
          {
            id v100 = objc_msgSend(v95, sel_defaultManager);
            uint64_t v101 = (void *)sub_2347ED3F0();
            id v233 = 0;
            unsigned int v102 = objc_msgSend(v100, sel_removeItemAtURL_error_, v101, &v233);

            if (!v102)
            {
              id v149 = v233;
              sub_2347ED350();

              return swift_willThrow();
            }
            id v103 = v233;
            uint64_t v96 = 0x1F721D000;
          }
          id v233 = (id)sub_2347ED3A0();
          unint64_t v234 = v104;
          uint64_t v231 = 2053403509;
          unint64_t v232 = 0xE400000000000000;
          v206(v88, 1, 1, v204);
          uint64_t v197 = sub_2347EEBA0();
          sub_2346A7C30(v88, &qword_2687ACD40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v105 = v93;
          unint64_t v106 = v198;
          uint64_t v107 = v96;
          uint64_t v108 = v203;
          uint64_t v109 = (void (*)(char *, char *, uint64_t))v207;
          v207(v198, v79, v203);
          int v110 = v226;
          v109(v226, v106, v108);
          uint64_t v195 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56);
          v195(v229, 1, 1, v108);
          id v193 = v95;
          id v111 = [v95 (SEL)(v107 + 827)];
          char v112 = v225;
          sub_2347ED440();
          char v113 = (void *)sub_2347ED3F0();
          uint64_t v201 = v105 + 56;
          unint64_t v114 = v112;
          unint64_t v115 = v200;
          v200(v114, v108);
          id v233 = 0;
          LODWORD(v109) = objc_msgSend(v111, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v113, 1, 0, &v233);

          id v116 = v233;
          if (!v109)
          {
            unint64_t v148 = v116;
            sub_2347ED350();

            swift_willThrow();
            sub_2346A7C30(v229, &qword_2687AE940);
            v115(v110, v108);
            return ((uint64_t (*)(char *, uint64_t))v115)(v106, v108);
          }
          uint64_t v194 = v105 + 8;
          uint64_t v117 = sub_2346ED54C(v224);
          v228[2] = v117;
          swift_bridgeObjectRelease();
          uint64_t v118 = v221;
          sub_2346A7BCC(v222, v221, &qword_2687AE940);
          uint64_t v119 = v105 + 48;
          float v120 = *(unsigned int (**)(void, void, void))(v105 + 48);
          uint64_t v121 = v108;
          if (v120(v118, 1, v108) == 1)
          {
            unint64_t v192 = v120;
            sub_2346A7C30(v118, &qword_2687AE940);
            id v122 = v223;
            goto LABEL_32;
          }
          float32x4_t v150 = v220;
          (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(v220, v118, v121);
          uint64_t v151 = sub_2347ED3A0();
          unint64_t v153 = v152;
          uint64_t v154 = swift_bridgeObjectRetain();
          id v155 = v223;
          unint64_t v156 = sub_2346DF4C4(v154);
          swift_bridgeObjectRelease();
          if (*(void *)(v156 + 16))
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD50);
            uint64_t v157 = (void *)sub_2347EEF00();
          }
          else
          {
            uint64_t v157 = (void *)MEMORY[0x263F8EE80];
          }
          id v233 = v157;
          sub_2346EEDE0(v156, 1, &v233);
          if (v155) {
            goto LABEL_64;
          }
          swift_bridgeObjectRelease();
          uint64_t v168 = HIBYTE(v153) & 0xF;
          if ((v153 & 0x2000000000000000) == 0) {
            uint64_t v168 = v151 & 0xFFFFFFFFFFFFLL;
          }
          if (v168)
          {
            id v223 = v233;
            unint64_t v192 = v120;
            uint64_t v222 = v119;
            id v233 = (id)v151;
            unint64_t v234 = v153;
            uint64_t v231 = 1852797802;
            unint64_t v232 = 0xE400000000000000;
            uint64_t v169 = (uint64_t)v230;
            uint64_t v170 = v204;
            uint64_t v171 = v206;
            v206((uint64_t)v230, 1, 1, v204);
            uint64_t v172 = sub_2347EEBA0();
            sub_2346A7C30(v169, &qword_2687ACD40);
            swift_bridgeObjectRelease();
            if (v172)
            {
              id v233 = (id)v151;
              unint64_t v234 = v153;
              uint64_t v231 = 0x7473696C70;
              unint64_t v232 = 0xE500000000000000;
              v171(v169, 1, 1, v170);
              uint64_t v173 = sub_2347EEBA0();
              sub_2346A7C30(v169, &qword_2687ACD40);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v173)
              {
                swift_release();
                type metadata accessor for USDModel.Error();
                sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
                swift_allocError();
                unint64_t v174 = v220;
                uint64_t v175 = v203;
                v207(v176, (uint64_t)v220, v203);
                swift_storeEnumTagMultiPayload();
                swift_willThrow();
                uint64_t v177 = v174;
                uint64_t v178 = v200;
                v200(v177, v175);
                sub_2346A7C30(v229, &qword_2687AE940);
                uint64_t v179 = v226;
LABEL_57:
                v178(v179, v175);
                return ((uint64_t (*)(char *, uint64_t))v178)(v198, v175);
              }
              sub_2347ED330();
              swift_allocObject();
              sub_2347ED320();
              uint64_t v181 = v223;
              id v233 = v223;
              __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD58);
              sub_2346F1944();
              uint64_t v182 = sub_2347ED310();
              unint64_t v184 = v185;
              sub_2347ED4D0();
              id v122 = 0;
            }
            else
            {
              swift_bridgeObjectRelease();
              sub_2347ED0E0();
              swift_allocObject();
              sub_2347ED0D0();
              uint64_t v181 = v223;
              id v233 = v223;
              __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD58);
              sub_2346F1944();
              uint64_t v182 = sub_2347ED0C0();
              unint64_t v184 = v183;
              sub_2347ED4D0();
              id v122 = 0;
            }
            sub_2346C3748(v182, v184);
            swift_release();
            sub_2347ED330();
            swift_allocObject();
            sub_2347ED320();
            id v233 = v181;
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD58);
            sub_2346F1944();
            uint64_t v186 = sub_2347ED310();
            uint64_t v119 = v222;
            uint64_t v187 = v186;
            unint64_t v189 = v188;
            swift_release();
            uint64_t v190 = v220;
            sub_2347ED4D0();
            uint64_t v191 = v190;
            uint64_t v121 = v203;
            v200(v191, v203);
            sub_2346C3748(v187, v189);
            swift_release();
            int v110 = v226;
LABEL_32:
            uint64_t v222 = v119;
            uint64_t v123 = v224;
            if (!v197)
            {
              char v124 = v225;
              uint64_t v125 = v195;
              sub_2347ED410();
              float32x4_t v230 = (char *)sub_2347ED3E0();
              id v223 = v126;
              v200(v124, v121);
              id v127 = objc_msgSend(v193, sel_defaultManager);
              id v128 = objc_msgSend(v127, sel_temporaryDirectory);

              uint64_t v129 = (uint64_t)v209;
              sub_2347ED450();

              uint64_t v130 = v229;
              sub_2346A7C30(v229, &qword_2687AE940);
              v125(v129, 0, 1, v121);
              sub_2346B1970(v129, v130, &qword_2687AE940);
              uint64_t v131 = v121;
              uint64_t v132 = v210;
              sub_2346A7BCC(v130, v210, &qword_2687AE940);
              uint64_t v133 = v192;
              if (v192(v132, 1, v131) == 1)
              {
                __break(1u);
              }
              else
              {
                uint64_t v134 = v212;
                sub_2347ED5B0();
                sub_2347ED550();
                (*(void (**)(char *, uint64_t))(v213 + 8))(v134, v214);
                uint64_t v135 = (uint64_t)v211;
                sub_2347ED420();
                swift_bridgeObjectRelease();
                sub_2346A7C30(v130, &qword_2687AE940);
                v200((char *)v132, v131);
                v195(v135, 0, 1, v131);
                sub_2346B1970(v135, v130, &qword_2687AE940);
                uint64_t v136 = v216;
                sub_2346A7BCC(v130, v216, &qword_2687AE940);
                if (v133(v136, 1, v131) != 1)
                {
                  char v137 = v215;
                  char v138 = v230;
                  unint64_t v139 = (unint64_t)v223;
                  sub_2347ED420();
                  uint64_t v140 = v200;
                  v200((char *)v136, v131);
                  id v233 = v138;
                  unint64_t v234 = v139;
                  sub_2347EE6F0();
                  swift_bridgeObjectRetain();
                  sub_2347EE6F0();
                  swift_bridgeObjectRelease();
                  uint64_t v141 = v225;
                  sub_2347ED420();
                  uint64_t v121 = v131;
                  swift_bridgeObjectRelease();
                  v140(v137, v131);
                  uint64_t v142 = v198;
                  v140(v198, v131);
                  (*(void (**)(char *, char *, uint64_t))(v227 + 32))(v142, v141, v131);
                  int v110 = v226;
                  uint64_t v123 = v224;
                  goto LABEL_36;
                }
              }
              __break(1u);
LABEL_63:
              __break(1u);
LABEL_64:
              swift_bridgeObjectRelease();
              uint64_t result = swift_release();
              __break(1u);
              return result;
            }
LABEL_36:
            uint64_t v143 = (uint64_t)v219;
            uint64_t v144 = (uint64_t)v198;
            sub_2347ED440();
            sub_2347ED400();
            id v233 = v218;
            unint64_t v234 = v196;
            LODWORD(v231) = v217;
            id v145 = sub_2346E21C4(v123, v144, v143, (uint64_t *)&v233, (int *)&v231);
            uint64_t v146 = v200;
            if (v122)
            {
              v200((char *)v143, v121);
              sub_2346A7C30(v229, &qword_2687AE940);
              char v147 = v110;
LABEL_47:
              v146(v147, v121);
              return ((uint64_t (*)(uint64_t, uint64_t))v146)(v144, v121);
            }
            unint64_t v158 = v145;
            if (v197)
            {
LABEL_46:

              v146((char *)v143, v121);
              sub_2346A7C30(v229, &qword_2687AE940);
              char v147 = v226;
              goto LABEL_47;
            }
            unint64_t v159 = (void *)sub_2347ED3F0();
            objc_msgSend(v158, sel_saveAndCreateUSDZPackageWithURL_, v159);

            id v160 = objc_msgSend(v193, sel_defaultManager);
            uint64_t v161 = v208;
            sub_2346A7BCC(v229, v208, &qword_2687AE940);
            if (v192(v161, 1, v121) != 1)
            {
              uint64_t v162 = (void *)sub_2347ED3F0();
              uint64_t v163 = v161;
              simd_float4 v164 = v200;
              v200((char *)v163, v121);
              id v233 = 0;
              unsigned __int8 v165 = objc_msgSend(v160, sel_removeItemAtURL_error_, v162, &v233);

              uint64_t v146 = v164;
              id v166 = v233;
              if ((v165 & 1) == 0)
              {
                uint64_t v167 = v166;
                sub_2347ED350();

                swift_willThrow();
              }
              goto LABEL_46;
            }
            goto LABEL_63;
          }
          swift_release();
          swift_bridgeObjectRelease();
          type metadata accessor for USDModel.Error();
          sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
          swift_allocError();
          uint64_t v175 = v203;
          v207(v180, (uint64_t)v150, v203);
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          uint64_t v178 = v200;
          v200(v150, v175);
          sub_2346A7C30(v229, &qword_2687AE940);
          uint64_t v179 = v110;
          goto LABEL_57;
        }
        uint64_t v76 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v206;
        uint64_t v23 = v203;
LABEL_13:
        v64(v68, v23);
        goto LABEL_14;
      }
      uint64_t v76 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v206;
      uint64_t v23 = v203;
    }
    else
    {
      uint64_t v76 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v206;
      int v78 = v45;
      uint64_t v64 = *(void (**)(char *, uint64_t))(v59 + 8);
      v64(v78, v23);
      v207(v42, a2, v23);
    }
    v64(v42, v23);
    uint64_t v68 = (char *)v200;
    v207((char *)v200, a2, v23);
    goto LABEL_13;
  }
  type metadata accessor for USDModel.Error();
  sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v227 + 16))(v50, a2, v23);
LABEL_17:
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

id sub_2346E21C4(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5)
{
  uint64_t v66 = a1;
  uint64_t v64 = a3;
  uint64_t v8 = sub_2347ED490();
  uint64_t v65 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v56 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v17 = *a4;
  uint64_t v18 = a4[1];
  int v19 = *a5;
  uint64_t v20 = v69;
  id v21 = sub_2346EF15C(a2);
  if (!v20)
  {
    uint64_t v69 = 0;
    uint64_t v60 = v13;
    unint64_t v61 = v16;
    int v63 = v19;
    uint64_t v57 = v18;
    uint64_t v58 = v17;
    uint64_t v59 = v10;
    uint64_t v22 = v66;
    uint64_t v62 = v8;
    uint64_t v23 = 1836019538;
    uint64_t v24 = (void *)sub_2347EE5F0();
    id v25 = objc_msgSend(v21, sel_metadataWithKey_, v24);

    if (v25 && (id v26 = objc_msgSend(v25, sel_stringValue), v25, v26))
    {
      uint64_t v23 = sub_2347EE620();
      uint64_t v28 = v27;
    }
    else
    {
      uint64_t v28 = 0xE400000000000000;
    }
    uint64_t v29 = (void *)*MEMORY[0x263F84028];
    id v30 = objc_msgSend(v21, sel_rootNode);
    uint64_t v31 = v69;
    uint64_t v32 = sub_2346EF7A0(v23, v28, v29, 0, v30, v21);
    if (v31)
    {

      swift_bridgeObjectRelease();
      return v21;
    }
    uint64_t v33 = v32;

    swift_bridgeObjectRelease();
    uint64_t v34 = (char *)sub_2346EF7A0(0x5F6E6F6974636553, 0xEB00000000707267, v29, 1, v33, v21);
    uint64_t v35 = v29;
    uint64_t v36 = v34;
    uint64_t v69 = v35;
    uint64_t v37 = v22[3];
    uint64_t v38 = v22[4];
    __swift_project_boxed_opaque_existential_1(v22, v37);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 72))(v37, v38);
    sub_2346EFFCC(v39, v36, v21);
    swift_bridgeObjectRelease();
    char v41 = v63;
    if ((v63 & 2) != 0)
    {
      unint64_t v45 = sub_2346EF7A0(0x7072675F6873654DLL, 0xE800000000000000, v69, 1, v33, v21);
      uint64_t v46 = (uint64_t)v61;
      sub_2347ED420();
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      sub_2346E2838(v22, v45, v21, v46, &v67);
      uint64_t v47 = v46;
      uint64_t v42 = v65;
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v47, v62);

      char v41 = v63;
      unint64_t v61 = v36;
      if ((v63 & 1) == 0)
      {
LABEL_12:
        uint64_t v43 = v62;
        if ((v41 & 4) == 0)
        {
LABEL_13:
          uint64_t v44 = v61;
          objc_msgSend(v21, sel_save);

          return v21;
        }
LABEL_16:
        unint64_t v52 = v22;
        uint64_t v53 = v33;
        uint64_t v54 = sub_2346EF7A0(0x72675F6C65646F4DLL, 0xE900000000000070, v69, 1, v33, v21);
        uint64_t v69 = v53;
        uint64_t v55 = (uint64_t)v59;
        sub_2347ED420();
        uint64_t v67 = v58;
        uint64_t v68 = v57;
        sub_2346E2838(v52, v54, v21, v55, &v67);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v55, v43);

        uint64_t v33 = v69;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v42 = v65;
      unint64_t v61 = v36;
      if ((v63 & 1) == 0) {
        goto LABEL_12;
      }
    }
    unint64_t v48 = v33;
    uint64_t v49 = sub_2346EF7A0(0x7274656D61726150, 0xEE007072675F6369, v69, 1, v33, v21);
    uint64_t v50 = (uint64_t)v60;
    sub_2347ED420();
    sub_2346E9DA0(v22, v49, v21, v50);
    uint64_t v51 = v62;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v50, v62);

    uint64_t v33 = v48;
    uint64_t v43 = v51;
    if ((v63 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  return v21;
}

void sub_2346E2838(void *a1, void *a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v361 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v347 = (uint64_t)&v338 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v354 = sub_2347ED5C0();
  unint64_t v397 = *(void *)(v354 - 8);
  MEMORY[0x270FA5388](v354);
  unint64_t v342 = (char *)&v338 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE1D0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v346 = (uint64_t)&v338 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v343 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v350 = *(void *)(v343 - 8);
  MEMORY[0x270FA5388](v343);
  v353 = (unsigned __int8 *)&v338 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v348 = (uint64_t)&v338 - v16;
  MEMORY[0x270FA5388](v17);
  v357 = (float32x4_t *)((char *)&v338 - v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v344 = (char *)&v338 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v21 - 8);
  v352 = (char *)&v338 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v351 = (char *)&v338 - v24;
  MEMORY[0x270FA5388](v25);
  v376 = (char *)&v338 - v26;
  MEMORY[0x270FA5388](v27);
  v375 = (char *)&v338 - v28;
  MEMORY[0x270FA5388](v29);
  v373 = (char *)&v338 - v30;
  MEMORY[0x270FA5388](v31);
  v391 = (void (**)(char *, uint64_t))((char *)&v338 - v32);
  MEMORY[0x270FA5388](v33);
  v383 = (char *)&v338 - v34;
  MEMORY[0x270FA5388](v35);
  v382 = (char *)&v338 - v36;
  MEMORY[0x270FA5388](v37);
  uint64_t v369 = (uint64_t)&v338 - v38;
  MEMORY[0x270FA5388](v39);
  uint64_t v371 = (uint64_t)&v338 - v40;
  uint64_t v368 = type metadata accessor for CapturedRoom.Surface(0);
  unint64_t v395 = *(void *)(v368 - 8);
  MEMORY[0x270FA5388](v368);
  v355 = (unsigned __int8 *)&v338 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  v390 = (unsigned __int8 *)&v338 - v43;
  MEMORY[0x270FA5388](v44);
  v393 = (unsigned __int8 *)&v338 - v45;
  MEMORY[0x270FA5388](v46);
  unint64_t v389 = (unint64_t)&v338 - v47;
  MEMORY[0x270FA5388](v48);
  v381 = (unsigned __int8 *)&v338 - v49;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD28);
  MEMORY[0x270FA5388](v50 - 8);
  v366 = (uint64_t *)((char *)v338.i64 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v52);
  v365 = (uint64_t *)((char *)&v338 - v53);
  uint64_t v396 = sub_2347ED490();
  v398 = *(char **)(v396 - 8);
  MEMORY[0x270FA5388](v396);
  uint64_t v356 = (uint64_t)&v338 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v55);
  v349 = (char *)&v338 - v56;
  MEMORY[0x270FA5388](v57);
  uint64_t v59 = (char *)&v338 - v58;
  MEMORY[0x270FA5388](v60);
  v358 = (char *)&v338 - v61;
  MEMORY[0x270FA5388](v62);
  uint64_t v374 = (uint64_t)&v338 - v63;
  MEMORY[0x270FA5388](v64);
  uint64_t v372 = (uint64_t)&v338 - v65;
  MEMORY[0x270FA5388](v66);
  uint64_t v68 = (char *)&v338 - v67;
  MEMORY[0x270FA5388](v69);
  uint64_t v71 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v338 - v70);
  MEMORY[0x270FA5388](v72);
  uint64_t v400 = (uint64_t)&v338 - v73;
  MEMORY[0x270FA5388](v74);
  v370 = (void (**)(char *, uint64_t))((char *)&v338 - v75);
  uint64_t v76 = a5[1];
  uint64_t v345 = *a5;
  uint64_t v77 = a1[3];
  uint64_t v78 = a1[4];
  v367 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v77);
  uint64_t v79 = sub_2346DC15C(v77, v78);
  uint64_t v81 = v80;
  unint64_t v82 = (void *)*MEMORY[0x263F84028];
  uint64_t v83 = v399.i64[0];
  char v84 = sub_2346EF7A0(0x7072675F68637241, 0xE800000000000000, (void *)*MEMORY[0x263F84028], 1, a2, a3);
  v399.i64[0] = v83;
  if (v83)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v388 = v68;
  uint64_t v363 = v81;
  uint64_t v362 = v79;
  v394 = v71;
  uint64_t v341 = v59;
  long long v339 = a2;
  v360 = v82;
  uint64_t v340 = v76;
  v364 = v84;
  v359 = a3;
  float32x4_t v85 = v370;
  sub_2347ED420();
  uint64_t v86 = v367[3];
  uint64_t v87 = v367[4];
  __swift_project_boxed_opaque_existential_1(v367, v86);
  uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 24))(v86, v87);
  v392 = v398 + 8;
  uint64_t v405 = 0;
  long long v404 = (unint64_t)v88;
  unint64_t v89 = MEMORY[0x263F8EE78];
  unint64_t v90 = v397;
  uint64_t v91 = v399.i64[0];
LABEL_4:
  uint64_t v92 = v366;
  sub_2346DF2CC(v366);
  uint64_t v93 = v365;
  sub_2346B1970((uint64_t)v92, (uint64_t)v365, &qword_2687ACD28);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD30);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v94 - 8) + 48))(v93, 1, v94) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v244 = (char *)sub_2346EF7A0(0x72675F726F6F6C46, 0xE900000000000070, v360, 1, v339, v359);
    if (v91)
    {
      (*(void (**)(void, uint64_t))v392)(v85, v396);

      return;
    }
    v398 = v244;
    unint64_t v184 = v358;
    sub_2347ED420();
    uint64_t v245 = v367[3];
    uint64_t v246 = v367[4];
    __swift_project_boxed_opaque_existential_1(v367, v245);
    uint64_t v247 = (*(uint64_t (**)(uint64_t, uint64_t))(v246 + 64))(v245, v246);
    uint64_t v248 = *(void *)(v247 + 16);
    if (v248)
    {
      unint64_t v249 = (*(unsigned __int8 *)(v395 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v395 + 80);
      v399.i64[0] = v247;
      uint64_t v250 = v247 + v249;
      uint64_t v400 = *(void *)(v395 + 72);
      float32x4_t v251 = v355;
      uint64_t v252 = (uint64_t)v341;
      do
      {
        sub_2346F2B6C(v250, (uint64_t)v251, type metadata accessor for CapturedRoom.Surface);
        float v255 = *((float *)v251 + 6);
        if (v255 <= 0.0)
        {
          float v257 = 0.0;
          if ((*v251 - 2) > 3u) {
            float v256 = 0.08;
          }
          else {
            float v256 = flt_2347F1D00[(char)(*v251 - 2)];
          }
        }
        else
        {
          float v256 = v255 * 0.5;
          float v257 = v255 * 0.5;
        }
        uint64_t v258 = type metadata accessor for ScanItemStrut();
        uint64_t v259 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v258 - 8) + 56);
        uint64_t v260 = (uint64_t)v351;
        v259(v351, 1, 1, v258);
        uint64_t v261 = (uint64_t)v352;
        v259(v352, 1, 1, v258);
        float32x4_t v251 = v355;
        sub_2346E697C(v355, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], 0, 0, v260, v261, v252, v257, v256, 0.16);
        sub_2346A7C30(v261, &qword_2687AC800);
        sub_2346A7C30(v260, &qword_2687AC800);
        sub_2346DFB08();
        if (v262)
        {
          unint64_t v253 = (void *)sub_2347EE5F0();
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v253 = 0;
        }
        objc_msgSend(v398, sel_addReferenceWithPath_nodePath_, v253, 0);

        (*(void (**)(uint64_t, uint64_t))v392)(v252, v396);
        sub_2346F241C((uint64_t)v251, type metadata accessor for CapturedRoom.Surface);
        v250 += v400;
        --v248;
        float32x4_t v85 = v370;
        unint64_t v184 = v358;
        uint64_t v254 = v360;
      }
      while (v248);
      swift_bridgeObjectRelease();
      unint64_t v89 = MEMORY[0x263F8EE78];
      unint64_t v90 = v397;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v254 = v360;
    }
    float32x4_t v263 = sub_2346EF7A0(0x675F7463656A624FLL, 0xEA00000000007072, v254, 1, v339, v359);
    uint64_t v159 = v350;
    v385.i64[0] = (uint64_t)v263;
    uint64_t v266 = v367[3];
    uint64_t v267 = v367[4];
    __swift_project_boxed_opaque_existential_1(v367, v266);
    uint64_t v268 = (*(uint64_t (**)(uint64_t, uint64_t))(v267 + 56))(v266, v267);
    int64_t v269 = *(void *)(v268 + 16);
    if (v269)
    {
      *(void *)&long long v404 = v89;
      sub_23474588C(0, v269, 0);
      uint64_t v270 = v268 + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
      uint64_t v271 = *(void *)(v159 + 72);
      uint64_t v162 = (void *)v404;
      do
      {
        unint64_t v272 = v344;
        sub_2346F2B6C(v270, (uint64_t)v344, type metadata accessor for CapturedRoom.Object);
        char v273 = *v272;
        sub_2346F241C((uint64_t)v272, type metadata accessor for CapturedRoom.Object);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23474588C(0, v162[2] + 1, 1);
          uint64_t v162 = (void *)v404;
        }
        unint64_t v275 = v162[2];
        unint64_t v274 = v162[3];
        if (v275 >= v274 >> 1)
        {
          sub_23474588C(v274 > 1, v275 + 1, 1);
          uint64_t v162 = (void *)v404;
        }
        v162[2] = v275 + 1;
        *((unsigned char *)v162 + v275 + 32) = v273;
        v270 += v271;
        --v269;
        unint64_t v90 = MEMORY[0x263F8EE78];
      }
      while (v269);
LABEL_134:
      unint64_t v89 = v90;
      swift_bridgeObjectRelease();
      float32x4_t v85 = v370;
      uint64_t v159 = v350;
      unint64_t v184 = v358;
      unint64_t v90 = v397;
      goto LABEL_138;
    }
  }
  else
  {
    uint64_t v95 = *v93;
    uint64_t v96 = v381;
    sub_2346F16F8((uint64_t)v93 + *(int *)(v94 + 48), (uint64_t)v381, type metadata accessor for CapturedRoom.Surface);
    uint64_t v401 = v95;
    uint64_t v402 = 0x5F6C6C6157;
    uint64_t v403 = 0xE500000000000000;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    sub_2347EE6F0();
    v398 = (char *)sub_2346EF7A0(v402, v403, v360, 1, v364, v359);
    if (v91)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(void, uint64_t))v392)(v85, v396);
      __n128 v243 = v96;
      goto LABEL_111;
    }
    swift_bridgeObjectRelease();
    uint64_t v401 = v95;
    uint64_t v402 = 1819042135;
    uint64_t v403 = 0xE400000000000000;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    sub_2347ED420();
    swift_bridgeObjectRelease();
    id v97 = v367;
    uint64_t v98 = v367[3];
    uint64_t v99 = v367[4];
    __swift_project_boxed_opaque_existential_1(v367, v98);
    uint64_t v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 32))(v98, v99);
    MEMORY[0x270FA5388](v100);
    *((void *)&v338 - 2) = v96;
    sub_234789C90((uint64_t (*)(char *))sub_2346F2BD4, (uint64_t)(&v338 - 2), v101);
    uint64_t v103 = v102;
    uint64_t v104 = v97[3];
    uint64_t v105 = v97[4];
    __swift_project_boxed_opaque_existential_1(v97, v104);
    uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 40))(v104, v105);
    MEMORY[0x270FA5388](v106);
    *((void *)&v338 - 2) = v96;
    sub_234789C90((uint64_t (*)(char *))sub_2346F1884, (uint64_t)(&v338 - 2), v107);
    uint64_t v109 = v108;
    uint64_t v110 = v97[3];
    uint64_t v111 = v97[4];
    __swift_project_boxed_opaque_existential_1(v97, v110);
    uint64_t v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 48))(v110, v111);
    MEMORY[0x270FA5388](v112);
    *((void *)&v338 - 2) = v96;
    sub_234789C90((uint64_t (*)(char *))sub_2346F2BD4, (uint64_t)(&v338 - 2), v113);
    uint64_t v115 = v114;
    uint64_t v116 = v97[3];
    uint64_t v117 = v97[4];
    __swift_project_boxed_opaque_existential_1(v97, v116);
    uint64_t v118 = (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 56))(v116, v117);
    MEMORY[0x270FA5388](v118);
    *((void *)&v338 - 2) = v96;
    sub_234789CE4((uint64_t (*)(char *))sub_2346F18A4, (uint64_t)(&v338 - 2), v119);
    unint64_t v121 = v120;
    uint64_t v402 = v103;
    v399.i64[0] = v103;
    swift_bridgeObjectRetain();
    uint64_t v122 = swift_bridgeObjectRetain();
    uint64_t v379 = v109;
    sub_2346D9918(v122);
    uint64_t v123 = swift_bridgeObjectRetain();
    uint64_t v380 = v115;
    sub_2346D9918(v123);
    float v124 = COERCE_FLOAT(*((void *)v96 + 3));
    simd_float4 v387 = *((simd_float4 *)v96 + 1);
    if (v124 <= 0.0)
    {
      float v126 = 0.0;
      uint64_t v127 = v371;
      uint64_t v128 = v368;
      if ((*v96 - 2) > 3u) {
        float v125 = 0.08;
      }
      else {
        float v125 = flt_2347F1D00[(char)(*v96 - 2)];
      }
    }
    else
    {
      float v125 = v124 * 0.5;
      float v126 = v124 * 0.5;
      uint64_t v127 = v371;
      uint64_t v128 = v368;
    }
    uint64_t v129 = v402;
    uint64_t v130 = &v381[*(int *)(v128 + 44)];
    if (*(void *)(v362 + 16))
    {
      uint64_t v131 = v362;
      unint64_t v132 = sub_2347BFA88((uint64_t)v130);
      if (v133)
      {
        unint64_t v134 = v132;
        uint64_t v135 = *(void *)(v131 + 56);
        uint64_t v136 = type metadata accessor for ScanItemStrut();
        uint64_t v137 = *(void *)(v136 - 8);
        uint64_t v127 = v371;
        sub_2346F2B6C(v135 + *(void *)(v137 + 72) * v134, v371, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v137 + 56))(v127, 0, 1, v136);
      }
      else
      {
        uint64_t v139 = type metadata accessor for ScanItemStrut();
        uint64_t v127 = v371;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v371, 1, 1, v139);
      }
    }
    else
    {
      uint64_t v138 = type metadata accessor for ScanItemStrut();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56))(v127, 1, 1, v138);
    }
    if (*(void *)(v363 + 16))
    {
      uint64_t v140 = v363;
      unint64_t v141 = sub_2347BFA88((uint64_t)v130);
      if (v142)
      {
        unint64_t v143 = v141;
        uint64_t v144 = *(void *)(v140 + 56);
        uint64_t v145 = type metadata accessor for ScanItemStrut();
        uint64_t v146 = *(void *)(v145 - 8);
        uint64_t v147 = v144 + *(void *)(v146 + 72) * v143;
        uint64_t v148 = v369;
        sub_2346F2B6C(v147, v369, (uint64_t (*)(void))type metadata accessor for ScanItemStrut);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v146 + 56))(v148, 0, 1, v145);
      }
      else
      {
        uint64_t v150 = type metadata accessor for ScanItemStrut();
        uint64_t v148 = v369;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56))(v369, 1, 1, v150);
      }
      uint64_t v127 = v371;
    }
    else
    {
      uint64_t v149 = type metadata accessor for ScanItemStrut();
      uint64_t v148 = v369;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 56))(v369, 1, 1, v149);
    }
    uint64_t v151 = v394;
    sub_2346E697C(v381, v129, v121, 0, 1, v127, v148, (uint64_t)v394, v126, v125, 0.0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2346DFB08();
    float32x4_t v85 = v370;
    if (v152)
    {
      unint64_t v153 = (void *)sub_2347EE5F0();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v153 = 0;
    }
    uint64_t v154 = MEMORY[0x263F8EE78];
    id v155 = (unsigned __int8 *)v389;
    objc_msgSend(v398, sel_addReferenceWithPath_nodePath_, v153, 0);

    unint64_t v90 = v397;
    if (qword_2687ABE90 != -1) {
      swift_once();
    }
    unint64_t v156 = off_2687AF0E8;
    swift_beginAccess();
    if ((v156[136] & 1) != 0 || (swift_beginAccess(), v156[137] == 1))
    {
      uint64_t v157 = v154;
      unint64_t v158 = v381;
      uint64_t v159 = *(void *)&v381[*(int *)(v368 + 64)];
      if (*(void *)(v159 + 16))
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_234787700(*(double *)v387.i64);
        uint64_t v161 = v160;
        MEMORY[0x270FA5388](v160);
        *((void *)&v338 - 2) = v158;
        uint64_t v159 = sub_23472CC78((void (*)(long long *__return_ptr, long long *))sub_2346F18C4, (uint64_t)(&v338 - 2), v161);
        swift_bridgeObjectRelease();
        uint64_t v151 = v394;
      }
      uint64_t v154 = v157;
    }
    else
    {
      uint64_t v159 = 0;
    }
    uint64_t v162 = off_2687AF0E8;
    swift_beginAccess();
    if (*((unsigned char *)v162 + 136) == 1)
    {
      uint64_t v163 = v399.i64[0];
      uint64_t v91 = 0;
      v378.i64[0] = *(void *)(v399.i64[0] + 16);
      if (!v378.i64[0])
      {
        swift_bridgeObjectRelease();
        float32x4_t v85 = v391;
        goto LABEL_58;
      }
      unint64_t v164 = 0;
      unint64_t v165 = v395;
      v377.i64[0] = v399.i64[0]
                  + ((*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80));
      do
      {
        if (v164 >= *(void *)(v163 + 16))
        {
          __break(1u);
          goto LABEL_134;
        }
        sub_2346F2B6C(v377.i64[0] + *(void *)(v165 + 72) * v164, (uint64_t)v155, type metadata accessor for CapturedRoom.Surface);
        simd_float4x4 v406 = __invert_f4(*(simd_float4x4 *)(v155 + 32));
        if (!v159)
        {
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
          goto LABEL_193;
        }
        int64_t v166 = *(void *)(v159 + 16);
        if (v166)
        {
          uint64_t v402 = v154;
          simd_float4 v387 = v406.columns[0];
          simd_float4 v386 = v406.columns[1];
          simd_float4 v385 = v406.columns[2];
          simd_float4 v384 = v406.columns[3];
          swift_bridgeObjectRetain();
          sub_234745680(0, v166, 0);
          float32x4_t v167 = (float32x4_t)v384;
          float32x4_t v168 = (float32x4_t)v385;
          float32x4_t v169 = (float32x4_t)v386;
          float32x4_t v170 = (float32x4_t)v387;
          uint64_t v171 = 0;
          uint64_t v172 = v402;
          unint64_t v173 = *(void *)(v402 + 16);
          do
          {
            float32x4_t v174 = *(float32x4_t *)(v159 + 16 * v171 + 32);
            uint64_t v402 = v172;
            unint64_t v175 = *(void *)(v172 + 24);
            if (v173 >= v175 >> 1)
            {
              float32x4_t v338 = v174;
              sub_234745680(v175 > 1, v173 + 1, 1);
              float32x4_t v174 = v338;
              float32x4_t v167 = (float32x4_t)v384;
              float32x4_t v168 = (float32x4_t)v385;
              float32x4_t v169 = (float32x4_t)v386;
              float32x4_t v170 = (float32x4_t)v387;
              uint64_t v172 = v402;
            }
            ++v171;
            *(void *)(v172 + 16) = v173 + 1;
            *(void *)(v172 + 8 * v173++ + 32) = vaddq_f32(v167, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v170, v174.f32[0]), v169, *(float32x2_t *)v174.f32, 1), v168, v174, 2)).u64[0];
          }
          while (v166 != v171);
          swift_bridgeObjectRelease();
          id v155 = (unsigned __int8 *)v389;
        }
        else
        {
          uint64_t v172 = v154;
        }
        float v176 = *((float *)v155 + 6);
        uint64_t v177 = (uint64_t)v382;
        if (v176 <= 0.0)
        {
          float v179 = 0.0;
          if ((*v155 - 2) > 3u) {
            float v178 = 0.08;
          }
          else {
            float v178 = flt_2347F1D00[(char)(*v155 - 2)];
          }
        }
        else
        {
          float v178 = v176 * 0.5;
          float v179 = v176 * 0.5;
        }
        uint64_t v180 = type metadata accessor for ScanItemStrut();
        uint64_t v181 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v180 - 8) + 56);
        v181(v177, 1, 1, v180);
        uint64_t v182 = (uint64_t)v383;
        v181((uint64_t)v383, 1, 1, v180);
        id v155 = (unsigned __int8 *)v389;
        sub_2346E697C((unsigned __int8 *)v389, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], v172, 1, v177, v182, (uint64_t)v388, v179, v178, 0.0);
        swift_bridgeObjectRelease();
        sub_2346A7C30(v182, &qword_2687AC800);
        sub_2346A7C30(v177, &qword_2687AC800);
        sub_2346DFB08();
        if (v183)
        {
          uint64_t v162 = (void *)sub_2347EE5F0();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v162 = 0;
        }
        uint64_t v154 = MEMORY[0x263F8EE78];
        uint64_t v91 = 0;
        uint64_t v151 = v394;
        ++v164;
        objc_msgSend(v398, sel_addReferenceWithPath_nodePath_, v162, 0);

        (*(void (**)(char *, uint64_t))v392)(v388, v396);
        sub_2346F241C((uint64_t)v155, type metadata accessor for CapturedRoom.Surface);
        unint64_t v165 = v395;
        float32x4_t v85 = v391;
        unint64_t v90 = v397;
        uint64_t v163 = v399.i64[0];
      }
      while (v164 != v378.i64[0]);
      swift_bridgeObjectRelease();
LABEL_58:
      uint64_t v185 = v379;
      unint64_t v186 = v395;
      unint64_t v184 = (char *)MEMORY[0x263F8D738];
      v384.i64[0] = *(void *)(v379 + 16);
      if (v384.i64[0])
      {
        unint64_t v89 = 0;
        v378.i64[0] = v379
                    + ((*(unsigned __int8 *)(v395 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v395 + 80));
        while (1)
        {
          if (v89 >= *(void *)(v185 + 16)) {
            goto LABEL_136;
          }
          unint64_t v188 = v393;
          sub_2346F2B6C(v378.i64[0] + *(void *)(v186 + 72) * v89, (uint64_t)v393, type metadata accessor for CapturedRoom.Surface);
          simd_float4x4 v407 = __invert_f4(*(simd_float4x4 *)(v188 + 32));
          if (!v159) {
            goto LABEL_192;
          }
          int64_t v189 = *(void *)(v159 + 16);
          if (v189)
          {
            uint64_t v402 = v154;
            simd_float4 v399 = v407.columns[0];
            simd_float4 v387 = v407.columns[1];
            simd_float4 v386 = v407.columns[2];
            simd_float4 v385 = v407.columns[3];
            swift_bridgeObjectRetain();
            sub_234745680(0, v189, 0);
            float32x4_t v190 = (float32x4_t)v385;
            float32x4_t v191 = (float32x4_t)v386;
            float32x4_t v192 = (float32x4_t)v387;
            float32x4_t v193 = (float32x4_t)v399;
            uint64_t v194 = 0;
            uint64_t v195 = v402;
            unint64_t v196 = *(void *)(v402 + 16);
            do
            {
              float32x4_t v197 = *(float32x4_t *)(v159 + 16 * v194 + 32);
              uint64_t v402 = v195;
              unint64_t v198 = *(void *)(v195 + 24);
              if (v196 >= v198 >> 1)
              {
                float32x4_t v377 = v197;
                sub_234745680(v198 > 1, v196 + 1, 1);
                float32x4_t v197 = v377;
                float32x4_t v190 = (float32x4_t)v385;
                float32x4_t v191 = (float32x4_t)v386;
                float32x4_t v192 = (float32x4_t)v387;
                float32x4_t v193 = (float32x4_t)v399;
                uint64_t v195 = v402;
              }
              ++v194;
              *(void *)(v195 + 16) = v196 + 1;
              *(void *)(v195 + 8 * v196++ + 32) = vaddq_f32(v190, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v193, v197.f32[0]), v192, *(float32x2_t *)v197.f32, 1), v191, v197, 2)).u64[0];
            }
            while (v189 != v194);
            swift_bridgeObjectRelease();
            uint64_t v154 = MEMORY[0x263F8EE78];
            float32x4_t v85 = v391;
            unint64_t v188 = v393;
          }
          else
          {
            uint64_t v195 = v154;
          }
          float v199 = *((float *)v188 + 6);
          v399.i64[0] = v91;
          if (v199 <= 0.0)
          {
            float v202 = 0.0;
            unint64_t v200 = v154;
            float v201 = (*v188 - 2) > 3u ? 0.08 : flt_2347F1D00[(char)(*v188 - 2)];
          }
          else
          {
            unint64_t v200 = v154;
            float v201 = v199 * 0.5;
            float v202 = v199 * 0.5;
          }
          uint64_t v203 = type metadata accessor for ScanItemStrut();
          uint64_t v204 = *(void (**)(void (**)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(void *)(v203 - 8) + 56);
          v204(v85, 1, 1, v203);
          uint64_t v205 = v373;
          v204((void (**)(char *, uint64_t))v373, 1, 1, v203);
          uint64_t v206 = (uint64_t)v205;
          float32x4_t v85 = v391;
          uint64_t v207 = v372;
          uint64_t v154 = v200;
          uint64_t v208 = v399.i64[0];
          sub_2346E697C(v393, v200, v200, v195, 1, (uint64_t)v391, v206, v372, v202, v201, 0.0);
          uint64_t v91 = v208;
          if (v208) {
            break;
          }
          swift_bridgeObjectRelease();
          sub_2346A7C30(v206, &qword_2687AC800);
          sub_2346A7C30((uint64_t)v85, &qword_2687AC800);
          sub_2346DFB08();
          uint64_t v209 = v207;
          if (v210)
          {
            uint64_t v187 = (void *)sub_2347EE5F0();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v187 = 0;
          }
          unint64_t v90 = v397;
          uint64_t v151 = v394;
          ++v89;
          objc_msgSend(v398, sel_addReferenceWithPath_nodePath_, v187, 0);

          (*(void (**)(uint64_t, uint64_t))v392)(v209, v396);
          sub_2346F241C((uint64_t)v393, type metadata accessor for CapturedRoom.Surface);
          unint64_t v186 = v395;
          unint64_t v184 = (char *)MEMORY[0x263F8D738];
          uint64_t v185 = v379;
          if (v89 == v384.i64[0]) {
            goto LABEL_79;
          }
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        sub_2346A7C30(v206, &qword_2687AC800);
        sub_2346A7C30((uint64_t)v85, &qword_2687AC800);
        sub_2346F241C((uint64_t)v393, type metadata accessor for CapturedRoom.Surface);
        swift_bridgeObjectRelease();
        __n128 v241 = *(void (**)(uint64_t, uint64_t))v392;
        uint64_t v242 = v396;
        (*(void (**)(void (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v392)(v394, v396);
        sub_2346A7C30(v369, &qword_2687AC800);
        sub_2346A7C30(v371, &qword_2687AC800);
        v241(v400, v242);
        swift_bridgeObjectRelease();
        v241((uint64_t)v370, v242);
        __n128 v243 = v381;
LABEL_111:
        sub_2346F241C((uint64_t)v243, type metadata accessor for CapturedRoom.Surface);
        return;
      }
LABEL_79:
      swift_bridgeObjectRelease();
      float32x4_t v85 = v370;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v184 = (char *)MEMORY[0x263F8D738];
      uint64_t v91 = 0;
    }
    uint64_t v211 = off_2687AF0E8;
    swift_beginAccess();
    if (v211[137] != 1)
    {
      unint64_t v89 = v154;
      swift_bridgeObjectRelease();

      goto LABEL_105;
    }
    v384.i64[0] = *(void *)(v380 + 16);
    if (!v384.i64[0])
    {
      unint64_t v89 = v154;

      swift_bridgeObjectRelease();
      goto LABEL_105;
    }
    unint64_t v89 = 0;
    unint64_t v212 = v395;
    uint64_t v379 = v380 + ((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80));
    uint64_t v213 = v390;
    while (v89 < *(void *)(v380 + 16))
    {
      sub_2346F2B6C(v379 + *(void *)(v212 + 72) * v89, (uint64_t)v213, type metadata accessor for CapturedRoom.Surface);
      simd_float4x4 v408 = __invert_f4(*(simd_float4x4 *)(v213 + 32));
      if (!v159) {
        goto LABEL_190;
      }
      int64_t v215 = *(void *)(v159 + 16);
      if (v215)
      {
        uint64_t v402 = v154;
        simd_float4 v399 = v408.columns[0];
        simd_float4 v387 = v408.columns[1];
        simd_float4 v386 = v408.columns[2];
        simd_float4 v385 = v408.columns[3];
        swift_bridgeObjectRetain();
        sub_234745680(0, v215, 0);
        float32x4_t v216 = (float32x4_t)v385;
        float32x4_t v217 = (float32x4_t)v386;
        float32x4_t v218 = (float32x4_t)v387;
        float32x4_t v219 = (float32x4_t)v399;
        uint64_t v213 = v390;
        uint64_t v220 = 0;
        uint64_t v221 = v402;
        unint64_t v222 = *(void *)(v402 + 16);
        do
        {
          float32x4_t v223 = *(float32x4_t *)(v159 + 16 * v220 + 32);
          uint64_t v402 = v221;
          unint64_t v224 = *(void *)(v221 + 24);
          if (v222 >= v224 >> 1)
          {
            float32x4_t v378 = v223;
            sub_234745680(v224 > 1, v222 + 1, 1);
            float32x4_t v223 = v378;
            float32x4_t v216 = (float32x4_t)v385;
            float32x4_t v217 = (float32x4_t)v386;
            float32x4_t v218 = (float32x4_t)v387;
            float32x4_t v219 = (float32x4_t)v399;
            uint64_t v213 = v390;
            uint64_t v221 = v402;
          }
          ++v220;
          *(void *)(v221 + 16) = v222 + 1;
          *(void *)(v221 + 8 * v222++ + 32) = vaddq_f32(v216, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v219, v223.f32[0]), v218, *(float32x2_t *)v223.f32, 1), v217, v223, 2)).u64[0];
        }
        while (v215 != v220);
        v399.i64[0] = v91;
        swift_bridgeObjectRelease();
      }
      else
      {
        v399.i64[0] = v91;
        uint64_t v221 = v154;
      }
      float v225 = *((float *)v213 + 6);
      uint64_t v226 = (uint64_t)v375;
      if (v225 <= 0.0)
      {
        float v228 = 0.0;
        if ((*v213 - 2) > 3u) {
          float v227 = 0.08;
        }
        else {
          float v227 = flt_2347F1D00[(char)(*v213 - 2)];
        }
      }
      else
      {
        float v227 = v225 * 0.5;
        float v228 = v225 * 0.5;
      }
      uint64_t v229 = type metadata accessor for ScanItemStrut();
      float32x4_t v230 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v229 - 8) + 56);
      v230(v226, 1, 1, v229);
      uint64_t v231 = (uint64_t)v376;
      v230((uint64_t)v376, 1, 1, v229);
      uint64_t v232 = v374;
      uint64_t v154 = MEMORY[0x263F8EE78];
      id v233 = (void (**)(char *, uint64_t))v399.i64[0];
      sub_2346E697C(v390, MEMORY[0x263F8EE78], MEMORY[0x263F8EE78], v221, 1, v226, v231, v374, v228, v227, 0.0);
      float32x4_t v85 = v233;
      if (v233)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        sub_2346A7C30(v231, &qword_2687AC800);
        sub_2346A7C30(v226, &qword_2687AC800);
        sub_2346F241C((uint64_t)v390, type metadata accessor for CapturedRoom.Surface);
        swift_bridgeObjectRelease();
        uint64_t v239 = *(void (**)(uint64_t, uint64_t))v392;
        uint64_t v240 = v396;
        (*(void (**)(void (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v392)(v394, v396);
        sub_2346A7C30(v369, &qword_2687AC800);
        sub_2346A7C30(v371, &qword_2687AC800);
        v239(v400, v240);
        swift_bridgeObjectRelease();
        v239((uint64_t)v370, v240);
        sub_2346F241C((uint64_t)v381, type metadata accessor for CapturedRoom.Surface);
        return;
      }
      swift_bridgeObjectRelease();
      sub_2346A7C30(v231, &qword_2687AC800);
      sub_2346A7C30(v226, &qword_2687AC800);
      sub_2346DFB08();
      uint64_t v234 = v232;
      if (v235)
      {
        uint64_t v214 = (void *)sub_2347EE5F0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v214 = 0;
      }
      unint64_t v90 = v397;
      uint64_t v91 = 0;
      uint64_t v151 = v394;
      ++v89;
      objc_msgSend(v398, sel_addReferenceWithPath_nodePath_, v214, 0);

      (*(void (**)(uint64_t, uint64_t))v392)(v234, v396);
      uint64_t v213 = v390;
      sub_2346F241C((uint64_t)v390, type metadata accessor for CapturedRoom.Surface);
      unint64_t v212 = v395;
      unint64_t v184 = (char *)MEMORY[0x263F8D738];
      if (v89 == v384.i64[0])
      {
        unint64_t v89 = v154;

        swift_bridgeObjectRelease();
        float32x4_t v85 = v370;
LABEL_105:
        swift_bridgeObjectRelease();
        uint64_t v236 = *(void (**)(uint64_t, uint64_t))v392;
        uint64_t v237 = v151;
        uint64_t v238 = v396;
        (*(void (**)(void (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))v392)(v237, v396);
        sub_2346A7C30(v369, &qword_2687AC800);
        sub_2346A7C30(v371, &qword_2687AC800);
        v236(v400, v238);
        sub_2346F241C((uint64_t)v381, type metadata accessor for CapturedRoom.Surface);
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_136:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  uint64_t v162 = (void *)MEMORY[0x263F8EE78];
LABEL_138:
  uint64_t v276 = sub_2347C8FB8((uint64_t)v162);
  swift_bridgeObjectRelease();
  uint64_t v277 = 0;
  uint64_t v278 = v276 + 56;
  uint64_t v279 = 1 << *(unsigned char *)(v276 + 32);
  uint64_t v280 = -1;
  if (v279 < 64) {
    uint64_t v280 = ~(-1 << v279);
  }
  unint64_t v281 = v280 & *(void *)(v276 + 56);
  int64_t v282 = (unint64_t)(v279 + 63) >> 6;
  unint64_t v395 = v90 + 48;
  v393 = (unsigned __int8 *)(v90 + 32);
  v394 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v159 + 56);
  v391 = (void (**)(char *, uint64_t))(v90 + 8);
  simd_float4x4 v283 = v367;
  v386.i64[0] = v276;
  v384.i64[0] = v276 + 56;
  v383 = (char *)v282;
  while (v281)
  {
    unint64_t v284 = __clz(__rbit64(v281));
    v281 &= v281 - 1;
    unint64_t v285 = v284 | (v277 << 6);
LABEL_154:
    LODWORD(v400) = *(unsigned __int8 *)(*(void *)(v276 + 48) + v285);
    if (v400 != 15)
    {
      v387.i64[0] = v281;
      v388 = (char *)v277;
      uint64_t v289 = v283[3];
      uint64_t v290 = v283[4];
      __swift_project_boxed_opaque_existential_1(v283, v289);
      uint64_t v291 = (*(uint64_t (**)(uint64_t, uint64_t))(v290 + 56))(v289, v290);
      unint64_t v292 = v89;
      *(void *)&long long v404 = v89;
      v399.i64[0] = *(void *)(v291 + 16);
      if (v399.i64[0])
      {
        unint64_t v293 = 0;
        uint64_t v294 = v348;
        while (v293 < *(void *)(v291 + 16))
        {
          unint64_t v295 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
          uint64_t v296 = *(void *)(v159 + 72);
          v297 = (unsigned __int8 *)v357;
          sub_2346F2B6C(v291 + v295 + v296 * v293, (uint64_t)v357, type metadata accessor for CapturedRoom.Object);
          if (*v297 == v400)
          {
            sub_2346F16F8((uint64_t)v297, v294, type metadata accessor for CapturedRoom.Object);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_2347458B4(0, *(void *)(v292 + 16) + 1, 1);
            }
            unint64_t v292 = v404;
            unint64_t v299 = *(void *)(v404 + 16);
            unint64_t v298 = *(void *)(v404 + 24);
            if (v299 >= v298 >> 1)
            {
              sub_2347458B4(v298 > 1, v299 + 1, 1);
              unint64_t v292 = v404;
            }
            *(void *)(v292 + 16) = v299 + 1;
            uint64_t v294 = v348;
            sub_2346F16F8(v348, v292 + v295 + v299 * v296, type metadata accessor for CapturedRoom.Object);
            uint64_t v159 = v350;
          }
          else
          {
            sub_2346F241C((uint64_t)v297, type metadata accessor for CapturedRoom.Object);
          }
          if (v399.i64[0] == ++v293)
          {
            unint64_t v300 = v404;
            unint64_t v292 = MEMORY[0x263F8EE78];
            goto LABEL_168;
          }
        }
        __break(1u);
        goto LABEL_189;
      }
      unint64_t v300 = v89;
LABEL_168:
      swift_bridgeObjectRelease();
      uint64_t v301 = *(void *)(v300 + 16);
      uint64_t v302 = v354;
      if (v301)
      {
        unint64_t v389 = v300;
        LOBYTE(v404) = v400;
        *(void *)&long long v404 = sub_2347EE690();
        *((void *)&v404 + 1) = v303;
        sub_2346EFB68();
        uint64_t v304 = sub_2347EEB70();
        uint64_t v306 = v305;
        swift_bridgeObjectRelease();
        *(void *)&long long v404 = v304;
        *((void *)&v404 + 1) = v306;
        swift_bridgeObjectRetain();
        sub_2347EE6F0();
        uint64_t v307 = *((void *)&v404 + 1);
        uint64_t v308 = v404;
        sub_2347ED420();
        swift_bridgeObjectRelease();
        v399.i64[0] = (uint64_t)sub_2346EF7A0(v308, v307, v360, 1, (void *)v385.i64[0], v359);
        swift_bridgeObjectRelease();
        v390 = (unsigned __int8 *)((*(unsigned __int8 *)(v350 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v350 + 80));
        uint64_t v309 = &v390[v389];
        unint64_t v397 = *(void *)(v350 + 72);
        uint64_t v310 = v353;
        uint64_t v311 = v343;
        do
        {
          sub_2346F2B6C((uint64_t)v309, (uint64_t)v310, type metadata accessor for CapturedRoom.Object);
          uint64_t v314 = v367;
          uint64_t v315 = v367[3];
          uint64_t v316 = v367[4];
          __swift_project_boxed_opaque_existential_1(v367, v315);
          uint64_t v317 = *(uint64_t (**)(uint64_t, uint64_t))(v316 + 56);
          uint64_t v318 = v316;
          uint64_t v310 = v353;
          uint64_t v319 = v317(v315, v318);
          MEMORY[0x270FA5388](v319);
          *((void *)&v338 - 2) = v310;
          sub_234789CE4((uint64_t (*)(char *))sub_2346F1814, (uint64_t)(&v338 - 2), v320);
          uint64_t v400 = (uint64_t)v321;
          uint64_t v322 = v347;
          sub_2346A7BCC((uint64_t)&v310[*(int *)(v311 + 44)], v347, (uint64_t *)&unk_2687AEB70);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v395)(v322, 1, v302) == 1)
          {
            sub_2346A7C30(v322, (uint64_t *)&unk_2687AEB70);
            uint64_t v323 = v346;
            uint64_t v324 = v311;
            (*v394)(v346, 1, 1, v311);
            uint64_t v325 = v400;
            uint64_t v326 = v345;
          }
          else
          {
            v327 = v342;
            (*(void (**)(char *, uint64_t, uint64_t))v393)(v342, v322, v302);
            uint64_t v329 = v314[3];
            uint64_t v328 = v314[4];
            __swift_project_boxed_opaque_existential_1(v314, v329);
            uint64_t v330 = v329;
            float32x4_t v331 = v327;
            uint64_t v332 = (*(uint64_t (**)(uint64_t, uint64_t))(v328 + 56))(v330, v328);
            MEMORY[0x270FA5388](v332);
            *((void *)&v338 - 2) = v327;
            sub_234789CE4((uint64_t (*)(char *))sub_2346F1834, (uint64_t)(&v338 - 2), v333);
            if (*(void *)(v334 + 16))
            {
              uint64_t v323 = v346;
              sub_2346F2B6C((uint64_t)&v390[v334], v346, type metadata accessor for CapturedRoom.Object);
              uint64_t v335 = 0;
            }
            else
            {
              uint64_t v335 = 1;
              uint64_t v323 = v346;
            }
            uint64_t v326 = v345;
            uint64_t v325 = v400;
            uint64_t v324 = v343;
            ((void (*)(uint64_t, uint64_t, uint64_t))*v394)(v323, v335, 1);
            swift_bridgeObjectRelease();
            (*v391)(v331, v354);
            uint64_t v310 = v353;
          }
          *(void *)&long long v404 = v326;
          *((void *)&v404 + 1) = v340;
          sub_2346E7BF8(v310, v323, v325, &v404, v356);
          swift_bridgeObjectRelease();
          sub_2346DFB08();
          if (v336)
          {
            uint64_t v312 = (void *)sub_2347EE5F0();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v312 = 0;
          }
          uint64_t v311 = v324;
          objc_msgSend((id)v399.i64[0], sel_addReferenceWithPath_nodePath_, v312, 0);

          uint64_t v313 = *(void (**)(char *, uint64_t))v392;
          (*(void (**)(uint64_t, uint64_t))v392)(v356, v396);
          sub_2346A7C30(v323, (uint64_t *)&unk_2687AE1D0);
          sub_2346F241C((uint64_t)v310, type metadata accessor for CapturedRoom.Object);
          v309 += v397;
          --v301;
          uint64_t v302 = v354;
        }
        while (v301);
        swift_release();

        v313(v349, v396);
        float32x4_t v85 = v370;
        simd_float4x4 v283 = v367;
        uint64_t v159 = v350;
        unint64_t v184 = v358;
        unint64_t v89 = MEMORY[0x263F8EE78];
      }
      else
      {
        unint64_t v89 = v292;
        swift_release();
        float32x4_t v85 = v370;
        simd_float4x4 v283 = v367;
        uint64_t v159 = v350;
        unint64_t v184 = v358;
      }
      uint64_t v276 = v386.i64[0];
      uint64_t v278 = v384.i64[0];
      int64_t v282 = (int64_t)v383;
      uint64_t v277 = (uint64_t)v388;
      unint64_t v281 = v387.i64[0];
    }
  }
  if (__OFADD__(v277++, 1)) {
    goto LABEL_191;
  }
  if (v277 >= v282)
  {
LABEL_187:
    long long v337 = v398;

    swift_release();
    float32x4_t v264 = *(void (**)(void, uint64_t))v392;
    uint64_t v265 = v396;
    (*(void (**)(char *, uint64_t))v392)(v184, v396);
    v264(v85, v265);
    return;
  }
  unint64_t v287 = *(void *)(v278 + 8 * v277);
  if (v287)
  {
LABEL_153:
    unint64_t v281 = (v287 - 1) & v287;
    unint64_t v285 = __clz(__rbit64(v287)) + (v277 << 6);
    goto LABEL_154;
  }
  uint64_t v288 = v277 + 1;
  if (v277 + 1 >= v282) {
    goto LABEL_187;
  }
  unint64_t v287 = *(void *)(v278 + 8 * v288);
  if (v287) {
    goto LABEL_152;
  }
  uint64_t v288 = v277 + 2;
  if (v277 + 2 >= v282) {
    goto LABEL_187;
  }
  unint64_t v287 = *(void *)(v278 + 8 * v288);
  if (v287) {
    goto LABEL_152;
  }
  uint64_t v288 = v277 + 3;
  if (v277 + 3 >= v282) {
    goto LABEL_187;
  }
  unint64_t v287 = *(void *)(v278 + 8 * v288);
  if (v287)
  {
LABEL_152:
    uint64_t v277 = v288;
    goto LABEL_153;
  }
  while (1)
  {
    uint64_t v277 = v288 + 1;
    if (__OFADD__(v288, 1)) {
      break;
    }
    if (v277 >= v282) {
      goto LABEL_187;
    }
    unint64_t v287 = *(void *)(v278 + 8 * v277);
    ++v288;
    if (v287) {
      goto LABEL_153;
    }
  }
LABEL_193:
  __break(1u);
}

uint64_t sub_2346E5D88(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = sub_2347ED5C0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD38);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v30 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v18 = type metadata accessor for CapturedRoom.Surface(0);
  sub_2346A7BCC(a1 + *(int *)(v18 + 56), (uint64_t)v17, (uint64_t *)&unk_2687AEB70);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v14, v31 + *(int *)(v18 + 44), v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v14, 0, 1, v3);
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_2346A7BCC((uint64_t)v17, (uint64_t)v9, (uint64_t *)&unk_2687AEB70);
  sub_2346A7BCC((uint64_t)v14, v19, (uint64_t *)&unk_2687AEB70);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
    sub_2346A7C30((uint64_t)v17, (uint64_t *)&unk_2687AEB70);
    int v21 = v20(v19, 1, v3);
    if (v21 == 1) {
      uint64_t v22 = (uint64_t *)&unk_2687AEB70;
    }
    else {
      uint64_t v22 = &qword_2687ACD38;
    }
    if (v21 == 1) {
      char v23 = -1;
    }
    else {
      char v23 = 0;
    }
  }
  else
  {
    uint64_t v24 = v30;
    sub_2346A7BCC((uint64_t)v9, v30, (uint64_t *)&unk_2687AEB70);
    if (v20(v19, 1, v3) == 1)
    {
      sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
      sub_2346A7C30((uint64_t)v17, (uint64_t *)&unk_2687AEB70);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v24, v3);
      char v23 = 0;
      uint64_t v22 = &qword_2687ACD38;
    }
    else
    {
      uint64_t v25 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v29, v19, v3);
      sub_2346F19F0((unint64_t *)&qword_2687AC5A0, MEMORY[0x263F07508]);
      char v23 = sub_2347EE570();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
      v26(v25, v3);
      uint64_t v22 = (uint64_t *)&unk_2687AEB70;
      sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
      sub_2346A7C30((uint64_t)v17, (uint64_t *)&unk_2687AEB70);
      v26((char *)v24, v3);
    }
  }
  sub_2346A7C30((uint64_t)v9, v22);
  return v23 & 1;
}

uint64_t sub_2346E6184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2347ED5C0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v30 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD38);
  uint64_t v8 = v7 - 8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v31 = (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v30 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = type metadata accessor for CapturedRoom.Object(0);
  sub_2346A7BCC(a1 + *(int *)(v19 + 44), (uint64_t)v18, (uint64_t *)&unk_2687AEB70);
  uint64_t v20 = type metadata accessor for CapturedRoom.Surface(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v15, a2 + *(int *)(v20 + 44), v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
  uint64_t v21 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_2346A7BCC((uint64_t)v18, (uint64_t)v10, (uint64_t *)&unk_2687AEB70);
  sub_2346A7BCC((uint64_t)v15, v21, (uint64_t *)&unk_2687AEB70);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v10, 1, v4) == 1)
  {
    sub_2346A7C30((uint64_t)v15, (uint64_t *)&unk_2687AEB70);
    sub_2346A7C30((uint64_t)v18, (uint64_t *)&unk_2687AEB70);
    int v23 = v22(v21, 1, v4);
    if (v23 == 1) {
      uint64_t v24 = (uint64_t *)&unk_2687AEB70;
    }
    else {
      uint64_t v24 = &qword_2687ACD38;
    }
    if (v23 == 1) {
      char v25 = -1;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    uint64_t v26 = v31;
    sub_2346A7BCC((uint64_t)v10, v31, (uint64_t *)&unk_2687AEB70);
    if (v22(v21, 1, v4) == 1)
    {
      sub_2346A7C30((uint64_t)v15, (uint64_t *)&unk_2687AEB70);
      sub_2346A7C30((uint64_t)v18, (uint64_t *)&unk_2687AEB70);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v26, v4);
      char v25 = 0;
      uint64_t v24 = &qword_2687ACD38;
    }
    else
    {
      uint64_t v27 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v30, v21, v4);
      sub_2346F19F0((unint64_t *)&qword_2687AC5A0, MEMORY[0x263F07508]);
      char v25 = sub_2347EE570();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v27, v4);
      uint64_t v24 = (uint64_t *)&unk_2687AEB70;
      sub_2346A7C30((uint64_t)v15, (uint64_t *)&unk_2687AEB70);
      sub_2346A7C30((uint64_t)v18, (uint64_t *)&unk_2687AEB70);
      v28((char *)v26, v4);
    }
  }
  sub_2346A7C30((uint64_t)v10, v24);
  return v25 & 1;
}

uint64_t sub_2346E6580(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = sub_2347ED5C0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD38);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v30 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v18 = type metadata accessor for CapturedRoom.Object(0);
  sub_2346A7BCC(a1 + *(int *)(v18 + 44), (uint64_t)v17, (uint64_t *)&unk_2687AEB70);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v14, v31 + *(int *)(v18 + 32), v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v14, 0, 1, v3);
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_2346A7BCC((uint64_t)v17, (uint64_t)v9, (uint64_t *)&unk_2687AEB70);
  sub_2346A7BCC((uint64_t)v14, v19, (uint64_t *)&unk_2687AEB70);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v20((uint64_t)v9, 1, v3) == 1)
  {
    sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
    sub_2346A7C30((uint64_t)v17, (uint64_t *)&unk_2687AEB70);
    int v21 = v20(v19, 1, v3);
    if (v21 == 1) {
      uint64_t v22 = (uint64_t *)&unk_2687AEB70;
    }
    else {
      uint64_t v22 = &qword_2687ACD38;
    }
    if (v21 == 1) {
      char v23 = -1;
    }
    else {
      char v23 = 0;
    }
  }
  else
  {
    uint64_t v24 = v30;
    sub_2346A7BCC((uint64_t)v9, v30, (uint64_t *)&unk_2687AEB70);
    if (v20(v19, 1, v3) == 1)
    {
      sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
      sub_2346A7C30((uint64_t)v17, (uint64_t *)&unk_2687AEB70);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v24, v3);
      char v23 = 0;
      uint64_t v22 = &qword_2687ACD38;
    }
    else
    {
      char v25 = v29;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v29, v19, v3);
      sub_2346F19F0((unint64_t *)&qword_2687AC5A0, MEMORY[0x263F07508]);
      char v23 = sub_2347EE570();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
      v26(v25, v3);
      uint64_t v22 = (uint64_t *)&unk_2687AEB70;
      sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
      sub_2346A7C30((uint64_t)v17, (uint64_t *)&unk_2687AEB70);
      v26((char *)v24, v3);
    }
  }
  sub_2346A7C30((uint64_t)v9, v22);
  return v23 & 1;
}

void sub_2346E697C(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, float a9@<S0>, float32_t a10@<S1>, float a11@<S2>)
{
  uint64_t v13 = v11;
  uint64_t v160 = a6;
  uint64_t v161 = a2;
  int v156 = a5;
  unint64_t v158 = a3;
  v165.n128_u64[0] = type metadata accessor for CapturedRoom.Surface.Curve(0);
  uint64_t v162 = *(void *)(v165.n128_u64[0] - 8);
  MEMORY[0x270FA5388](v165.n128_u64[0]);
  uint64_t v157 = (float32x2_t *)((char *)&v139 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  uint64_t v23 = ((uint64_t (*)(uint64_t))MEMORY[0x270FA5388])(v22 - 8);
  uint64_t v159 = (char *)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v164.i64[0] = (uint64_t)&v139 - v25;
  uint64_t v26 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v27 = ((uint64_t (*)(uint64_t))MEMORY[0x270FA5388])(v26);
  uint64_t v28 = ((uint64_t (*)(uint64_t))MEMORY[0x270FA5388])(v27);
  uint64_t v29 = ((uint64_t (*)(uint64_t))MEMORY[0x270FA5388])(v28);
  uint64_t v34 = (char *)&v139 - v33;
  uint64_t v35 = *(int *)(v29 + 44);
  uint64_t v163 = a1;
  uint64_t v36 = (uint64_t)&a1[v35];
  uint64_t v37 = *(void *)(v13 + 16);
  if (!*(void *)(v37 + 16)) {
    goto LABEL_6;
  }
  uint64_t v152 = v32;
  uint64_t v154 = v31;
  unint64_t v153 = (unsigned char *)v30;
  uint64_t v155 = v29;
  swift_bridgeObjectRetain();
  unint64_t v38 = sub_2347BFA88(v36);
  if ((v39 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for USDModel.Error();
    sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
    swift_allocError();
    uint64_t v46 = v45;
    *uint64_t v45 = sub_2347ED550();
    v46[1] = v47;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  uint64_t v150 = a4;
  uint64_t v151 = a7;
  uint64_t v40 = (uint64_t *)(*(void *)(v37 + 56) + 16 * v38);
  uint64_t v41 = *v40;
  uint64_t v42 = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v169 = v41;
  unint64_t v170 = v42;
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  sub_2347ED420();
  swift_bridgeObjectRelease();
  id v43 = sub_2346EF15C(a8);
  if (v12)
  {
    uint64_t v44 = sub_2347ED490();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(a8, v44);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v48 = v43;
  sub_2347ED3E0();
  uint64_t v50 = v49;
  id v51 = objc_msgSend(v48, sel_rootNode);
  uint64_t v52 = (void *)*MEMORY[0x263F84028];
  v148[0] = v51;
  id v144 = sub_2346EF7A0(v41, v42, v52, 2, v51, v48);
  v142.i64[0] = sub_2347EE5F0();
  v141.i64[0] = sub_2347EE5F0();
  uint64_t v169 = 12078;
  unint64_t v170 = 0xE200000000000000;
  uint64_t v149 = v42;
  uint64_t v146 = v41;
  v143.i64[0] = v50;
  sub_2347EE6F0();
  id v53 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v145 = v48;
  id v54 = v53;
  uint64_t v55 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v56 = objc_msgSend(v54, sel_initWithResourcePath_, v55);

  uint64_t v147 = 0;
  id v57 = v144;
  uint64_t v58 = (void *)v142.i64[0];
  uint64_t v59 = (void *)v141.i64[0];
  objc_msgSend(v144, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v142.i64[0], v141.i64[0], v56);

  uint64_t v60 = (void *)sub_2347EE5F0();
  uint64_t v61 = (void *)sub_2347EE5F0();
  id v62 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  swift_bridgeObjectRetain();
  uint64_t v63 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v64 = objc_msgSend(v62, sel_initWithString_, v63);

  objc_msgSend(v57, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v60, v61, v64);
  swift_bridgeObjectRelease();

  uint64_t v65 = (void *)sub_2347EE5F0();
  sub_2347ED550();
  id v66 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v67 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v68 = objc_msgSend(v66, sel_initWithString_, v67);

  objc_msgSend(v57, sel_setCustomMetadata_value_, v65, v68);
  uint64_t v69 = (void *)sub_2347EE5F0();
  LOBYTE(v169) = *v163;
  uint64_t v169 = sub_2347EE690();
  unint64_t v170 = v70;
  sub_2346EFB68();
  sub_2347EEB70();
  swift_bridgeObjectRelease();
  id v71 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v72 = (void *)sub_2347EE5F0();
  uint64_t v73 = v146;
  swift_bridgeObjectRelease();
  id v74 = objc_msgSend(v71, sel_initWithString_, v72);

  uint64_t v75 = v149;
  objc_msgSend(v57, sel_setCustomMetadata_value_, v69, v74);

  uint64_t v76 = v145;
  uint64_t v77 = v147;
  uint64_t v78 = sub_2346EF7A0(v73, v75, (void *)*MEMORY[0x263F83FF8], 3, v57, v145);
  if (v77)
  {
    uint64_t v79 = sub_2347ED490();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(a8, v79);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v80 = v78;
  uint64_t v147 = 0;
  uint64_t v81 = (void *)sub_2347EE5F0();
  uint64_t v82 = *MEMORY[0x263F83FB8];
  uint64_t v140 = v80;
  id v83 = objc_msgSend(v80, sel_newPropertyWithName_type_role_, v81, v82, 0);

  if (!v83)
  {
    __break(1u);
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_2347F19B0;
  id v85 = objc_allocWithZone(MEMORY[0x263F83F08]);
  uint64_t v86 = (void *)sub_2347EE5F0();
  id v87 = objc_msgSend(v85, sel_initWithString_, v86);

  *(void *)(v84 + 32) = v87;
  uint64_t v169 = v84;
  sub_2347EE7F0();
  sub_2346A9D9C(0, &qword_2687ACCF8);
  uint64_t v88 = (void *)sub_2347EE7C0();
  swift_bridgeObjectRelease();
  id v139 = v83;
  objc_msgSend(v83, sel_setTokenArray_, v88);

  unint64_t v89 = (float32x4_t *)v163;
  simd_float4x4 v172 = __invert_f4(*(simd_float4x4 *)(v163 + 32));
  uint64_t v91 = MEMORY[0x263F8EE78];
  unint64_t v171 = MEMORY[0x263F8EE78];
  uint64_t v92 = v161;
  uint64_t v93 = v162;
  uint64_t v94 = *(void *)(v161 + 16);
  *(simd_float4 *)uint64_t v148 = v172.columns[0];
  simd_float4 v143 = v172.columns[1];
  simd_float4 v142 = v172.columns[2];
  simd_float4 v141 = v172.columns[3];
  if (v94)
  {
    *(double *)&long long v95 = MEMORY[0x270FA5388](v90);
    *((_OWORD *)&v139 - 5) = v95;
    *((_OWORD *)&v139 - 4) = v96;
    *((_OWORD *)&v139 - 3) = v97;
    *((_OWORD *)&v139 - 2) = v98;
    *(&v139 - 2) = v89;
    uint64_t v99 = v147;
    unint64_t v100 = sub_23472CF0C((void (*)(uint64_t *__return_ptr, uint64_t))sub_2346F17A4, (uint64_t)(&v139 - 12), v92, (uint64_t)v166);
    uint64_t v147 = v99;
    uint64_t v90 = sub_2346DAC80(v100);
  }
  if (*(void *)(v158 + 16))
  {
    MEMORY[0x270FA5388](v90);
    simd_float4 v101 = v143;
    *((_OWORD *)&v139 - 5) = *(_OWORD *)v148;
    *((simd_float4 *)&v139 - 4) = v101;
    simd_float4 v102 = v141;
    *((simd_float4 *)&v139 - 3) = v142;
    *((simd_float4 *)&v139 - 2) = v102;
    *(&v139 - 2) = v89;
    uint64_t v103 = v147;
    unint64_t v105 = sub_23472CF38((void (*)(uint64_t *__return_ptr, uint64_t))sub_2346F17A4, (uint64_t)(&v139 - 12), v104, (uint64_t)v167);
    uint64_t v147 = v103;
    sub_2346DAC80(v105);
  }
  uint64_t v169 = v91;
  swift_bridgeObjectRetain();
  if (v94)
  {
    uint64_t v106 = *(void *)(v152 + 72);
    unint64_t v158 = (*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80);
    uint64_t v107 = v92 + v158;
    uint64_t v108 = MEMORY[0x263F8EE78];
    do
    {
      sub_2346F2B6C(v107, (uint64_t)v34, type metadata accessor for CapturedRoom.Surface);
      uint64_t v109 = v164.i64[0];
      sub_2346A7BCC((uint64_t)&v34[*(int *)(v155 + 52)], v164.i64[0], (uint64_t *)&unk_2687AE190);
      int v110 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v93 + 48))(v109, 1, v165.n128_u64[0]);
      sub_2346A7C30(v109, (uint64_t *)&unk_2687AE190);
      if (v110 == 1)
      {
        sub_2346F241C((uint64_t)v34, type metadata accessor for CapturedRoom.Surface);
      }
      else
      {
        sub_2346F16F8((uint64_t)v34, v154, type metadata accessor for CapturedRoom.Surface);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_234745810(0, *(void *)(v108 + 16) + 1, 1);
        }
        uint64_t v108 = v169;
        unint64_t v112 = *(void *)(v169 + 16);
        unint64_t v111 = *(void *)(v169 + 24);
        if (v112 >= v111 >> 1)
        {
          sub_234745810(v111 > 1, v112 + 1, 1);
          uint64_t v108 = v169;
        }
        *(void *)(v108 + 16) = v112 + 1;
        sub_2346F16F8(v154, v108 + v158 + v112 * v106, type metadata accessor for CapturedRoom.Surface);
      }
      v107 += v106;
      --v94;
    }
    while (v94);
    uint64_t v91 = v169;
    uint64_t v93 = v162;
    unint64_t v89 = (float32x4_t *)v163;
  }
  uint64_t v113 = swift_bridgeObjectRelease();
  uint64_t v114 = (uint64_t)v159;
  if (*(void *)(v91 + 16))
  {
    MEMORY[0x270FA5388](v113);
    simd_float4 v115 = v143;
    *((_OWORD *)&v139 - 5) = *(_OWORD *)v148;
    *((simd_float4 *)&v139 - 4) = v115;
    simd_float4 v116 = v141;
    *((simd_float4 *)&v139 - 3) = v142;
    *((simd_float4 *)&v139 - 2) = v116;
    *(&v139 - 2) = v89;
    uint64_t v117 = v147;
    unint64_t v118 = sub_23472CF0C((void (*)(uint64_t *__return_ptr, uint64_t))sub_2346F177C, (uint64_t)(&v139 - 12), v91, (uint64_t)v168);
    uint64_t v147 = v117;
    swift_release();
  }
  else
  {
    swift_release();
    unint64_t v118 = MEMORY[0x263F8EE78];
  }
  float32x4_t v164 = v89[1];
  uint64_t v119 = v145;
  if (qword_2687ABE90 != -1) {
    swift_once();
  }
  unint64_t v120 = off_2687AF0E8;
  swift_beginAccess();
  LOBYTE(v120) = v120[138];
  unint64_t v121 = v153;
  sub_2346F2B6C((uint64_t)v89, (uint64_t)v153, type metadata accessor for CapturedRoom.Surface);
  BOOL v122 = (v120 & 1) == 0 && *v121 != 5;
  sub_2346F241C((uint64_t)v121, type metadata accessor for CapturedRoom.Surface);
  uint64_t v123 = v155;
  sub_2346A7BCC((uint64_t)v89 + *(int *)(v155 + 52), v114, (uint64_t *)&unk_2687AE190);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v93 + 48))(v114, 1, v165.n128_u64[0]) == 1)
  {
    v124.n128_f32[0] = a11 + a11;
    v124.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v124.n128_u64[0], 0), *(float32x2_t *)v164.f32);
    __n128 v165 = v124;
    swift_bridgeObjectRelease();
    sub_2346A7C30(v114, (uint64_t *)&unk_2687AE190);
    uint64_t v125 = *(uint64_t *)((char *)v89->i64 + *(int *)(v123 + 60));
    if (*(void *)(v125 + 16)) {
      char v126 = v122;
    }
    else {
      char v126 = 1;
    }
    if (v126)
    {
      uint64_t v127 = v150;
      uint64_t v128 = v140;
      uint64_t v129 = v139;
      if (v150)
      {
        sub_234787700(v165.n128_f64[0]);
        uint64_t v131 = v130;
        type metadata accessor for RoomCaptureGeometryManager();
        swift_initStaticObject();
        unint64_t v132 = sub_2346C407C(v131, v171, v127, v156 & 1, v160, v151, v165, a9, a10, a11);
        swift_bridgeObjectRelease();
      }
      else
      {
        type metadata accessor for RoomCaptureGeometryManager();
        swift_initStaticObject();
        unint64_t v132 = sub_2346C685C(v171, v160, v151, v165, a9, a10);
      }
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    type metadata accessor for RoomCaptureGeometryManager();
    swift_initStaticObject();
    unint64_t v132 = sub_2346C407C(v125, v171, v150, v156 & 1, v160, v151, v165, a9, a10, a11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    char v133 = v157;
    sub_2346F16F8(v114, (uint64_t)v157, type metadata accessor for CapturedRoom.Surface.Curve);
    type metadata accessor for RoomCaptureGeometryManager();
    swift_initStaticObject();
    LODWORD(v134) = v89[1].i32[1];
    unint64_t v132 = sub_2346C5E78(v133, v118, v134, a9, a10, v160, v151, 1016003125, 1);
    swift_bridgeObjectRelease();
    sub_2346F241C((uint64_t)v133, type metadata accessor for CapturedRoom.Surface.Curve);
  }
  uint64_t v128 = v140;
  uint64_t v129 = v139;
LABEL_45:
  sub_2346F0958(v128, v132, v89[2], v89[3], v89[4], v89[5]);
  int v135 = v89->u8[0];
  if (v135 == 5 || (double v136 = 0.0, v135 == 2)) {
    double v136 = 0.00781250185;
  }
  BOOL v137 = v135 == 5 || v135 == 2;
  float v138 = 0.0;
  if (v137) {
    float v138 = 1.0;
  }
  sub_2346F0E4C(v128, v136, v138, v146, v149, v119);
  swift_bridgeObjectRelease();
  objc_msgSend(v119, sel_save);

  swift_release();
}

void sub_2346E7AAC(float32x4_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>, float32x4_t a7@<Q3>)
{
  float32x4_t v31 = a7;
  float32x4_t v32 = a4;
  float32x4_t v33 = a5;
  float32x4_t v34 = a6;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v27 - v14;
  float32x4_t v16 = a1[2];
  float32x4_t v29 = a1[3];
  float32x4_t v30 = v16;
  float32x4_t v17 = a1[4];
  float32x4_t v27 = a1[5];
  float32x4_t v28 = v17;
  uint64_t v18 = type metadata accessor for CapturedRoom.Surface(0);
  sub_2346A7BCC((uint64_t)a1 + *(int *)(v18 + 52), (uint64_t)v15, (uint64_t *)&unk_2687AE190);
  float v19 = a1[1].f32[1];
  sub_2346A7BCC(a2 + *(int *)(v18 + 52), (uint64_t)v13, (uint64_t *)&unk_2687AE190);
  sub_2346B20D0((uint64_t)v15, (uint64_t)v13, v30, v29, v28, v27, v19, v32, v33, v34, v20, v21, v22, v23, v24, v25, v31);
  *a3 = v26;
}

void sub_2346E7BF8(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, long long *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v122 = a2;
  uint64_t v124 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE1D0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v123 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  *(void *)&long long v119 = (char *)&v109 - v13;
  uint64_t v14 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v120 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  float32x4_t v16 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v118 = (uint64_t)&v109 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE940);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_2347ED490();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v121 = v14;
  float32x4_t v29 = &a1[*(int *)(v14 + 32)];
  uint64_t v30 = *(void *)(v6 + 16);
  if (!*(void *)(v30 + 16)) {
    goto LABEL_6;
  }
  uint64_t v125 = (uint64_t)&v109 - v27;
  uint64_t v115 = v28;
  uint64_t v116 = v26;
  long long v114 = *a4;
  swift_bridgeObjectRetain();
  uint64_t v117 = v29;
  unint64_t v31 = sub_2347BFA88((uint64_t)v29);
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for USDModel.Error();
    sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
    swift_allocError();
    uint64_t v40 = v39;
    *char v39 = sub_2347ED550();
    v40[1] = v41;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  v111.i64[0] = a3;
  unint64_t v112 = v16;
  uint64_t v113 = (float32x4_t *)a1;
  float32x4_t v33 = (uint64_t *)(*(void *)(v30 + 56) + 16 * v31);
  uint64_t v34 = *v33;
  uint64_t v35 = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&long long v127 = v34;
  *((void *)&v127 + 1) = v35;
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  uint64_t v36 = v125;
  sub_2347ED420();
  swift_bridgeObjectRelease();
  unint64_t v37 = v126.n128_u64[0];
  id v38 = sub_2346EF15C(v36);
  if (v37)
  {
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v36, v116);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v42 = v38;
  uint64_t v110 = v34;
  v126.n128_u64[0] = v35;
  if ((void)v114)
  {
    long long v127 = v114;
    CapturedRoom.ModelProvider.modelFileURL(for:)((unsigned __int8 *)v113, (uint64_t)v21);
    id v43 = v42;
    uint64_t v45 = v115;
    uint64_t v44 = v116;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v21, 1, v116) != 1)
    {
      swift_bridgeObjectRelease();
      v126.n128_u64[0] = *(void *)(v45 + 32);
      ((void (*)(char *, char *, uint64_t))v126.n128_u64[0])(v24, v21, v44);
      uint64_t v75 = v125;
      sub_2346E8BA4(v43, v125, (uint64_t)v113, (uint64_t)v24);
      objc_msgSend(v43, sel_save);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v24, v44);
      ((void (*)(uint64_t, uint64_t, uint64_t))v126.n128_u64[0])(v124, v75, v44);
      return;
    }
    sub_2346A7C30((uint64_t)v21, &qword_2687AE940);
    uint64_t v42 = v43;
  }
  sub_2347ED3E0();
  uint64_t v47 = v46;
  id v48 = objc_msgSend(v42, sel_rootNode);
  uint64_t v49 = v42;
  uint64_t v50 = sub_2346EF7A0(v110, v126.n128_i64[0], (void *)*MEMORY[0x263F84028], 2, v48, v42);
  uint64_t v51 = sub_2347EE5F0();
  *(void *)&long long v114 = v50;
  uint64_t v52 = (void *)v51;
  uint64_t v53 = sub_2347EE5F0();
  id v109 = v47;
  id v54 = (void *)v53;
  *(void *)&long long v127 = 12078;
  *((void *)&v127 + 1) = 0xE200000000000000;
  sub_2347EE6F0();
  id v55 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  id v56 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v57 = objc_msgSend(v55, sel_initWithResourcePath_, v56);

  objc_msgSend((id)v114, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v52, v54, v57);
  uint64_t v58 = (void *)sub_2347EE5F0();
  uint64_t v59 = (void *)sub_2347EE5F0();
  id v60 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  swift_bridgeObjectRetain();
  uint64_t v61 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v62 = objc_msgSend(v60, sel_initWithString_, v61);

  objc_msgSend((id)v114, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v58, v59, v62);
  swift_bridgeObjectRelease();

  uint64_t v63 = (void *)sub_2347EE5F0();
  sub_2347ED550();
  id v64 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v65 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v66 = objc_msgSend(v64, sel_initWithString_, v65);

  objc_msgSend((id)v114, sel_setCustomMetadata_value_, v63, v66);
  uint64_t v67 = (void *)sub_2347EE5F0();
  int v68 = v113->u8[0];
  LOBYTE(v127) = v113->i8[0];
  *(void *)&long long v127 = sub_2347EE690();
  *((void *)&v127 + 1) = v69;
  sub_2346EFB68();
  sub_2347EEB70();
  swift_bridgeObjectRelease();
  id v70 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  id v71 = (void *)sub_2347EE5F0();
  uint64_t v72 = v126.n128_u64[0];
  swift_bridgeObjectRelease();
  id v73 = objc_msgSend(v70, sel_initWithString_, v71);

  id v74 = (void *)v114;
  objc_msgSend((id)v114, sel_setCustomMetadata_value_, v67, v73);

  uint64_t v76 = sub_2346EF7A0(v110, v72, (void *)*MEMORY[0x263F83FF8], 3, v74, v49);
  uint64_t v117 = (unsigned __int8 *)v49;
  uint64_t v77 = (void *)sub_2347EE5F0();
  uint64_t v78 = v76;
  id v79 = objc_msgSend(v76, sel_newPropertyWithName_type_role_, v77, *MEMORY[0x263F83FB8], 0);

  if (v79)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
    uint64_t v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = xmmword_2347F19B0;
    id v81 = objc_allocWithZone(MEMORY[0x263F83F08]);
    uint64_t v82 = (void *)sub_2347EE5F0();
    id v83 = objc_msgSend(v81, sel_initWithString_, v82);

    *(void *)(v80 + 32) = v83;
    *(void *)&long long v127 = v80;
    sub_2347EE7F0();
    sub_2346A9D9C(0, &qword_2687ACCF8);
    uint64_t v84 = (void *)sub_2347EE7C0();
    swift_bridgeObjectRelease();
    id v109 = v79;
    objc_msgSend(v79, sel_setTokenArray_, v84);

    uint64_t v88 = (uint64_t)v112;
    if (*(void *)(v111.i64[0] + 16))
    {
      MEMORY[0x270FA5388](v85);
      unint64_t v89 = (unsigned __int8 *)v113;
      *(&v109 - 2) = v113;
      uint64_t v91 = sub_2346DF950((void (*)(void *__return_ptr, void))sub_2346F1760, (uint64_t)(&v109 - 4), v90);
      __n128 v93 = *((__n128 *)v89 + 1);
      uint64_t v94 = v124;
      if (qword_2687ABD10 != -1)
      {
        long long v119 = *((_OWORD *)v89 + 1);
        swift_once();
        __n128 v93 = (__n128)v119;
      }
      long long v95 = sub_2346C826C(v91, (__n128)0, v93, 0.0001, v92);
      swift_bridgeObjectRelease();
      uint64_t v96 = v126.n128_u64[0];
      uint64_t v97 = (uint64_t)v123;
    }
    else
    {
      float32x4_t v98 = v113[1];
      __n128 v99 = 0uLL;
      uint64_t v94 = v124;
      if (v68 == 12)
      {
        float32x4_t v111 = v113[1];
        uint64_t v100 = v119;
        sub_2346A7BCC(v122, v119, (uint64_t *)&unk_2687AE1D0);
        int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v100, 1, v121);
        uint64_t v96 = v126.n128_u64[0];
        if (v101 == 1)
        {
          sub_2346A7C30(v100, (uint64_t *)&unk_2687AE1D0);
          uint64_t v97 = (uint64_t)v123;
          unint64_t v89 = (unsigned __int8 *)v113;
          float32x4_t v98 = v111;
          __n128 v99 = 0uLL;
        }
        else
        {
          uint64_t v102 = v118;
          sub_2346F16F8(v100, v118, type metadata accessor for CapturedRoom.Object);
          float v103 = *(float *)(v102 + 84);
          long long v119 = *(_OWORD *)(v102 + 16);
          uint64_t v97 = (uint64_t)v123;
          unint64_t v89 = (unsigned __int8 *)v113;
          if (qword_2687ABE90 != -1) {
            swift_once();
          }
          uint64_t v104 = (float *)off_2687AF0E8;
          sub_2346F241C(v102, type metadata accessor for CapturedRoom.Object);
          swift_beginAccess();
          HIDWORD(v86) = DWORD1(v119);
          v87.n128_f32[0] = vmuls_lane_f32(v104[13], *(float32x2_t *)&v119, 1);
          float32x4_t v98 = v111;
          v98.i32[1] = v87.n128_u32[0];
          *(float *)&double v86 = (float)((float)(v103 - vmuls_lane_f32(0.5, *(float32x2_t *)&v119, 1))
                                 + (float)(v87.n128_f32[0] * 0.5))
                         - *((float *)v89 + 21);
          v99.n128_u32[0] = 0;
          v99.n128_u64[1] = 0;
          v99.n128_u32[1] = LODWORD(v86);
        }
      }
      else
      {
        uint64_t v96 = v126.n128_u64[0];
        uint64_t v97 = (uint64_t)v123;
        unint64_t v89 = (unsigned __int8 *)v113;
      }
      if (qword_2687ABD10 != -1)
      {
        float32x4_t v111 = v98;
        __n128 v126 = v99;
        swift_once();
        __n128 v99 = v126;
        float32x4_t v98 = v111;
      }
      long long v95 = sub_2346C7A80(v98, v99, v86, v87);
    }
    sub_2346F0958(v78, v95, *((float32x4_t *)v89 + 2), *((float32x4_t *)v89 + 3), *((float32x4_t *)v89 + 4), *((float32x4_t *)v89 + 5));
    int v105 = *v89;
    float v106 = 0.0;
    if (v105 == 2 || v105 == 15) {
      goto LABEL_37;
    }
    if (v105 == 4)
    {
      sub_2346A7BCC(v122, v97, (uint64_t *)&unk_2687AE1D0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v97, 1, v121) != 1)
      {
        sub_2346F16F8(v97, v88, type metadata accessor for CapturedRoom.Object);
        if (qword_2687ABE90 != -1) {
          swift_once();
        }
        uint64_t v107 = (float *)off_2687AF0E8;
        swift_beginAccess();
        LOBYTE(v107) = sub_2346C1EF8(v88, v107[11]);
        sub_2346F241C(v88, type metadata accessor for CapturedRoom.Object);
        float v106 = 0.0;
        if ((v107 & 1) == 0) {
          float v106 = 1.0;
        }
        goto LABEL_37;
      }
      sub_2346A7C30(v97, (uint64_t *)&unk_2687AE1D0);
    }
    float v106 = 1.0;
LABEL_37:
    uint64_t v108 = v117;
    sub_2346F0E4C(v78, 0.00781250185, v106, v110, v96, v117);
    swift_bridgeObjectRelease();
    objc_msgSend(v108, sel_save);

    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v94, v125, v116);
    return;
  }
  __break(1u);
}

uint64_t sub_2346E8B10@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = a1->i8[0];
  uint64_t v6 = sub_2347B959C();
  uint64_t v7 = sub_2346D304C(v6);
  sub_2346D3730(v7, (uint64_t)v9, a1[1], a1[2], a1[3], a1[4], a1[5], *(float32x4_t *)(a2 + 16), *(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 48), *(_OWORD *)(a2 + 64), *(_OWORD *)(a2 + 80));
  return sub_2346B1970((uint64_t)v9, a3, &qword_2687ACD48);
}

void sub_2346E8BA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v126.i64[0] = a3;
  *(void *)&long long v131 = a2;
  uint64_t v130 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v128 = sub_2347ED390();
  long long v127 = *(char **)(v128 - 8);
  MEMORY[0x270FA5388](v128);
  uint64_t v6 = (char *)v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_2347ED490();
  uint64_t v7 = *(void *)(v132 - 8);
  MEMORY[0x270FA5388](v132);
  uint64_t v9 = (char *)v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v119 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD40);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v133.f64[0] = sub_2347ED3A0();
  v133.f64[1] = v16;
  uint64_t v141 = 1667527541;
  unint64_t v142 = 0xE400000000000000;
  uint64_t v17 = sub_2347ED5F0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 1, 1, v17);
  unint64_t v18 = sub_2346EFB68();
  uint64_t v19 = sub_2347EEBA0();
  sub_2346A7C30((uint64_t)v15, &qword_2687ACD40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
    type metadata accessor for USDModel.Error();
    sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v20, a4, v132);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  sub_2347ED440();
  uint64_t v124 = a4;
  *(void *)&v133.f64[0] = sub_2347ED3E0();
  v133.f64[1] = v21;
  uint64_t v22 = (void (**)(void, void, void))v127;
  uint64_t v23 = v128;
  (*((void (**)(char *, void, uint64_t))v127 + 13))(v6, *MEMORY[0x263F06E50], v128);
  *(void *)&long long v122 = v18;
  sub_2347ED480();
  ((void (*)(char *, uint64_t))v22[1])(v6, v23);
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v24 = v7 + 8;
  uint64_t v25 = v26;
  uint64_t v27 = v132;
  v26((uint64_t)v9, v132);
  uint64_t v28 = self;
  id v29 = objc_msgSend(v28, sel_defaultManager);
  uint64_t v128 = (uint64_t)v12;
  sub_2347ED460();
  uint64_t v30 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  uint64_t v31 = objc_msgSend(v29, sel_fileExistsAtPath_, v30);

  uint64_t v32 = v27;
  id v33 = v129;
  if ((v31 & 1) == 0)
  {
    long long v127 = v9;
    id v34 = objc_msgSend(v28, sel_defaultManager);
    uint64_t v35 = (void *)sub_2347ED3F0();
    uint64_t v36 = v128;
    unint64_t v37 = (void *)sub_2347ED3F0();
    v133.f64[0] = 0.0;
    unsigned int v38 = objc_msgSend(v34, sel_copyItemAtURL_toURL_error_, v35, v37, &v133);

    if (!v38)
    {
      id v77 = *(id *)&v133.f64[0];
      sub_2347ED350();

      swift_willThrow();
      v25(v36, v32);
      return;
    }
    id v39 = *(id *)&v133.f64[0];
    uint64_t v9 = v127;
  }
  sub_2347ED410();
  uint64_t v40 = sub_2347ED3E0();
  uint64_t v42 = v41;
  v25((uint64_t)v9, v32);
  uint64_t v121 = (void *)sub_2347ED3E0();
  long long v127 = v43;
  uint64_t v44 = v130;
  uint64_t v45 = v25;
  id v46 = objc_msgSend(v130, sel_rootNode);
  uint64_t v47 = (void *)*MEMORY[0x263F84028];
  uint64_t v123 = v40;
  *(void *)&long long v131 = v42;
  id v48 = sub_2346EF7A0(v40, v42, v47, 2, v46, v44);
  if (v33)
  {
    v45(v128, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v49 = v48;
  v119[1] = v24;
  v119[0] = v45;
  uint64_t v50 = sub_2347EE5F0();
  uint64_t v120 = 0;
  uint64_t v51 = (void *)v50;
  uint64_t v52 = sub_2347EE5F0();
  id v129 = v49;
  uint64_t v53 = (void *)v52;
  *(void *)&v133.f64[0] = 12078;
  v133.f64[1] = -1.15172193e164;
  sub_2347EE6F0();
  id v54 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v121 = v47;
  id v55 = v54;
  id v56 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v57 = objc_msgSend(v55, sel_initWithResourcePath_, v56);

  objc_msgSend(v129, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v51, v53, v57);
  uint64_t v58 = (void *)sub_2347EE5F0();
  uint64_t v59 = (void *)sub_2347EE5F0();
  id v60 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v61 = v131;
  swift_bridgeObjectRetain();
  id v62 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v63 = objc_msgSend(v60, sel_initWithString_, v62);

  objc_msgSend(v129, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v58, v59, v63);
  swift_bridgeObjectRelease();

  id v64 = (void *)sub_2347EE5F0();
  type metadata accessor for CapturedRoom.Object(0);
  uint64_t v65 = v126.i64[0];
  sub_2347ED550();
  id v66 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v67 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v68 = objc_msgSend(v66, sel_initWithString_, v67);

  objc_msgSend(v129, sel_setCustomMetadata_value_, v64, v68);
  uint64_t v69 = (void *)sub_2347EE5F0();
  LOBYTE(v133.f64[0]) = *(unsigned char *)v65;
  *(void *)&v133.f64[0] = sub_2347EE690();
  v133.f64[1] = v70;
  sub_2347EEB70();
  swift_bridgeObjectRelease();
  id v71 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v72 = (void *)sub_2347EE5F0();
  id v73 = v129;
  swift_bridgeObjectRelease();
  id v74 = objc_msgSend(v71, sel_initWithString_, v72);

  objc_msgSend(v73, sel_setCustomMetadata_value_, v69, v74);
  uint64_t v75 = v120;
  uint64_t v76 = sub_2346EF7A0(v123, v61, v121, 0, v73, v130);
  if (v75)
  {
    ((void (*)(uint64_t, uint64_t))v119[0])(v128, v132);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v78 = v76;
  swift_bridgeObjectRelease();
  *(void *)&long long v131 = "modelPositionAndDimensionsCache";
  id v79 = (void *)sub_2347EE5F0();
  uint64_t v80 = *MEMORY[0x263F83F30];
  id v81 = (char *)objc_msgSend(v78, sel_newPropertyWithName_type_role_, v79, *MEMORY[0x263F83F30], 0);

  if (!v81)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v123 = v80;
  float32x4_t v82 = *(float32x4_t *)(v65 + 32);
  float32x4_t v83 = *(float32x4_t *)(v65 + 48);
  float32x4_t v84 = *(float32x4_t *)(v65 + 64);
  float32x4_t v85 = *(float32x4_t *)(v65 + 80);
  float64x2_t v133 = vcvtq_f64_f32(*(float32x2_t *)v82.f32);
  float64x2_t v134 = vcvt_hight_f64_f32(v82);
  float64x2_t v135 = vcvtq_f64_f32(*(float32x2_t *)v83.f32);
  float64x2_t v136 = vcvt_hight_f64_f32(v83);
  float64x2_t v137 = vcvtq_f64_f32(*(float32x2_t *)v84.f32);
  float64x2_t v138 = vcvt_hight_f64_f32(v84);
  float64x2_t v139 = vcvtq_f64_f32(*(float32x2_t *)v85.f32);
  float64x2_t v140 = vcvt_hight_f64_f32(v85);
  long long v127 = v81;
  objc_msgSend(v81, sel_setDouble4x4Value_, &v133);
  double v86 = (void *)sub_2347EE5F0();
  uint64_t v87 = *MEMORY[0x263F83FB8];
  id v88 = objc_msgSend(v78, sel_newPropertyWithName_type_role_, v86, *MEMORY[0x263F83FB8], 0);

  if (!v88)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
  uint64_t v89 = swift_allocObject();
  long long v122 = xmmword_2347F19B0;
  *(_OWORD *)(v89 + 16) = xmmword_2347F19B0;
  id v90 = objc_allocWithZone(MEMORY[0x263F83F08]);
  uint64_t v91 = (void *)sub_2347EE5F0();
  id v92 = objc_msgSend(v90, sel_initWithString_, v91);

  *(void *)(v89 + 32) = v92;
  *(void *)&v133.f64[0] = v89;
  sub_2347EE7F0();
  sub_2346A9D9C(0, &qword_2687ACCF8);
  __n128 v93 = (void *)sub_2347EE7C0();
  swift_bridgeObjectRelease();
  objc_msgSend(v88, sel_setTokenArray_, v93);

  uint64_t v94 = sub_2346EF7A0(0x6C65646F6DLL, 0xE500000000000000, v121, 0, v78, v130);
  uint64_t v130 = v88;
  uint64_t v121 = v78;
  long long v95 = (void *)sub_2347EE5F0();
  uint64_t v96 = v94;
  id v97 = objc_msgSend(v94, sel_newPropertyWithName_type_role_, v95, v87, 0);

  if (!v97)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  float32x4_t v98 = v97;
  uint64_t v99 = swift_allocObject();
  *(_OWORD *)(v99 + 16) = v122;
  id v100 = objc_allocWithZone(MEMORY[0x263F83F08]);
  int v101 = (void *)sub_2347EE5F0();
  id v102 = objc_msgSend(v100, sel_initWithString_, v101);

  *(void *)(v99 + 32) = v102;
  *(void *)&v133.f64[0] = v99;
  sub_2347EE7F0();
  float v103 = (void *)sub_2347EE7C0();
  swift_bridgeObjectRelease();
  objc_msgSend(v98, sel_setTokenArray_, v103);

  *(double *)&long long v104 = sub_2346E9B48(v124);
  long long v131 = v104;
  float32x4_t v125 = v105;
  float32x4_t v126 = *(float32x4_t *)(v126.i64[0] + 16);
  float v106 = (void *)sub_2347EE5F0();
  id v107 = objc_msgSend(v96, sel_newPropertyWithName_type_role_, v106, v123, 0);

  if (v107)
  {
    float32x4_t v108 = vdivq_f32(v126, v125);
    LODWORD(v109) = 0;
    HIDWORD(v109) = v108.i32[1];
    v110.i64[0] = 0;
    v110.i64[1] = v108.u32[2];
    float32x4_t v111 = vmulq_n_f32((float32x4_t)v108.u32[0], 0.0 - *(float *)&v131);
    float32x4_t v112 = vaddq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v108.u32[0], (float32x4_t)0, (float32x4_t)v109), (float32x4_t)0, v110), (float32x4_t)0);
    *(float *)&unsigned int v113 = 0.0 * v108.f32[0];
    float32x4_t v114 = vaddq_f32(vmlaq_f32(vaddq_f32((float32x4_t)v109, (float32x4_t)COERCE_UNSIGNED_INT(0.0 * v108.f32[0])), (float32x4_t)0, v110), (float32x4_t)0);
    float32x4_t v115 = vaddq_f32(vaddq_f32(v110, vmlaq_f32((float32x4_t)v113, (float32x4_t)0, (float32x4_t)v109)), (float32x4_t)0);
    float64x2_t v133 = vcvtq_f64_f32(*(float32x2_t *)v112.f32);
    float64x2_t v134 = vcvt_hight_f64_f32(v112);
    float32x4_t v116 = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(v111, (float32x4_t)v109, 0.0 - *((float *)&v131 + 1)), v110, 0.0 - *((float *)&v131 + 2)), (float32x4_t)xmmword_2347F19F0);
    float64x2_t v135 = vcvtq_f64_f32(*(float32x2_t *)v114.f32);
    float64x2_t v136 = vcvt_hight_f64_f32(v114);
    float64x2_t v137 = vcvtq_f64_f32(*(float32x2_t *)v115.f32);
    float64x2_t v138 = vcvt_hight_f64_f32(v115);
    float64x2_t v139 = vcvtq_f64_f32(*(float32x2_t *)v116.f32);
    float64x2_t v140 = vcvt_hight_f64_f32(v116);
    objc_msgSend(v107, sel_setDouble4x4Value_, &v133);
    *(void *)&v133.f64[0] = 12078;
    v133.f64[1] = -1.15172193e164;
    uint64_t v117 = v128;
    sub_2347ED3E0();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    uint64_t v118 = (void *)sub_2347EE5F0();
    swift_bridgeObjectRelease();
    objc_msgSend(v96, sel_addReferenceWithPath_nodePath_, v118, 0);

    ((void (*)(uint64_t, uint64_t))v119[0])(v117, v132);
    return;
  }
LABEL_19:
  __break(1u);
}

double sub_2346E9B48(uint64_t a1)
{
  uint64_t v3 = sub_2347ED490();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v1 + 40);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 40);
  if (!*(void *)(v8 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_2347C0048(a1);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    id v13 = objc_allocWithZone(MEMORY[0x263F135E8]);
    uint64_t v14 = (void *)sub_2347ED3F0();
    id v15 = objc_msgSend(v13, sel_initWithURL_, v14);

    objc_msgSend(v15, sel_boundingBox);
    float32x4_t v26 = v16;
    objc_msgSend(v15, sel_boundingBox);
    float32x4_t v18 = vaddq_f32(v26, v17);
    *(float32x2_t *)v19.f32 = vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)0x3F0000003F000000);
    v19.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.5, v18, 2));
    float32x4_t v26 = v19;
    objc_msgSend(v15, sel_boundingBox);
    float32x4_t v25 = v20;
    objc_msgSend(v15, sel_boundingBox);
    float32x4_t v22 = vsubq_f32(v25, v21);
    v22.i32[3] = 0;
    float32x4_t v25 = v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = *v7;
    *uint64_t v7 = 0x8000000000000000;
    sub_2347AB53C((uint64_t)v6, isUniquelyReferenced_nonNull_native, (__n128)v26, (__n128)v25);
    *uint64_t v7 = v27;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_endAccess();

    return *(double *)v26.i64;
  }
  uint64_t v11 = *(void *)(v8 + 56) + 32 * v9;
  float32x4_t v12 = *(float32x4_t *)v11;
  float32x4_t v25 = *(float32x4_t *)(v11 + 16);
  float32x4_t v26 = v12;
  swift_bridgeObjectRelease();
  return *(double *)v26.i64;
}

void sub_2346E9DA0(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v208 = a4;
  unint64_t v212 = a1;
  uint64_t v6 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v201 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v200 = (float32x2_t *)((char *)v191 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v204 = (uint64_t)v191 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v203 = (unsigned __int8 *)v191 - v11;
  MEMORY[0x270FA5388](v12);
  unint64_t v198 = (char *)v191 - v13;
  uint64_t v14 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v211 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  float v202 = (float32x4_t *)((char *)v191 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v16);
  int64_t v215 = (float32x4_t *)((char *)v191 - v17);
  MEMORY[0x270FA5388](v18);
  float32x4_t v218 = (float32x4_t *)((char *)v191 - v19);
  MEMORY[0x270FA5388](v20);
  float32x4_t v219 = (float32x4_t *)((char *)v191 - v21);
  MEMORY[0x270FA5388](v22);
  uint64_t v214 = (float32x4_t *)((char *)v191 - v23);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD28);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v209 = (char *)v191 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v210 = (void *)((char *)v191 - v27);
  uint64_t v28 = sub_2347ED490();
  unint64_t v221 = *(void *)(v28 - 8);
  uint64_t v222 = v28;
  MEMORY[0x270FA5388](v28);
  float v199 = (char *)v191 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)v191 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)v191 - v34;
  MEMORY[0x270FA5388](v36);
  unsigned int v38 = (char *)v191 - v37;
  MEMORY[0x270FA5388](v39);
  uint64_t v205 = (char *)v191 - v40;
  MEMORY[0x270FA5388](v41);
  id v43 = (char *)v191 - v42;
  MEMORY[0x270FA5388](v44);
  uint64_t v213 = (char *)v191 - v45;
  MEMORY[0x270FA5388](v46);
  float32x4_t v217 = (char *)v191 - v47;
  MEMORY[0x270FA5388](v48);
  uint64_t v50 = (char *)v191 - v49;
  MEMORY[0x270FA5388](v51);
  uint64_t v53 = (char *)v191 - v52;
  id v54 = (void *)*MEMORY[0x263F84028];
  id v55 = v223;
  id v56 = sub_2346EF7A0(0x7072675F68637241, 0xE800000000000000, (void *)*MEMORY[0x263F84028], 1, a2, a3);
  id v220 = v55;
  if (!v55)
  {
    float32x4_t v216 = v43;
    float32x4_t v223 = v50;
    uint64_t v194 = v35;
    float32x4_t v192 = a2;
    unint64_t v196 = v54;
    uint64_t v206 = v56;
    float32x4_t v193 = v32;
    uint64_t v195 = v38;
    float32x4_t v197 = a3;
    sub_2347ED420();
    id v57 = v212;
    uint64_t v58 = v212[3];
    uint64_t v59 = v212[4];
    __swift_project_boxed_opaque_existential_1(v212, v58);
    uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 24))(v58, v59);
    v221 += 8;
    uint64_t v227 = 0;
    uint64_t v228 = 0;
    uint64_t v226 = v60;
    uint64_t v207 = v53;
    uint64_t v61 = v211;
    id v62 = v209;
    id v63 = v213;
    id v64 = v220;
    while (1)
    {
      sub_2346DF2CC(v62);
      uint64_t v65 = (uint64_t)v62;
      id v66 = v210;
      sub_2346B1970(v65, (uint64_t)v210, &qword_2687ACD28);
      uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD30);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48))(v66, 1, v67) == 1) {
        break;
      }
      id v68 = v66;
      uint64_t v69 = *v66;
      float64_t v70 = v214;
      sub_2346F16F8((uint64_t)v68 + *(int *)(v67 + 48), (uint64_t)v214, type metadata accessor for CapturedRoom.Surface);
      uint64_t v224 = 0x5F6C6C6157;
      uint64_t v225 = 0xE500000000000000;
      uint64_t v229 = v69;
      sub_2347EF070();
      sub_2347EE6F0();
      swift_bridgeObjectRelease();
      sub_2347EE6F0();
      id v220 = sub_2346EF7A0(v224, v225, v196, 1, v206, v197);
      if (v64)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))v221)(v207, v222);
        sub_2346F241C((uint64_t)v70, type metadata accessor for CapturedRoom.Surface);
        return;
      }
      swift_bridgeObjectRelease();
      uint64_t v224 = 1819042135;
      uint64_t v225 = 0xE400000000000000;
      uint64_t v229 = v69;
      sub_2347EF070();
      sub_2347EE6F0();
      swift_bridgeObjectRelease();
      sub_2347ED420();
      swift_bridgeObjectRelease();
      sub_2346EB6EC(v70, 1, v217);
      id v71 = v70;
      sub_2346DFB08();
      id v72 = v220;
      if (v73)
      {
        id v74 = (void *)sub_2347EE5F0();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v74 = 0;
      }
      objc_msgSend(v72, sel_addReferenceWithPath_nodePath_, v74, 0);

      id v57 = v212;
      uint64_t v75 = v212[3];
      uint64_t v76 = v212[4];
      __swift_project_boxed_opaque_existential_1(v212, v75);
      uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 32))(v75, v76);
      MEMORY[0x270FA5388](v77);
      v191[-2] = v71;
      sub_234789C90((uint64_t (*)(char *))sub_2346F2BD4, (uint64_t)&v191[-4], v78);
      uint64_t v80 = *((void *)v79 + 2);
      if (v80)
      {
        uint64_t v81 = *(unsigned __int8 *)(v211 + 80);
        uint64_t v213 = v79;
        uint64_t v82 = (uint64_t)&v79[(v81 + 32) & ~v81];
        uint64_t v83 = *(void *)(v211 + 72);
        float32x4_t v84 = v219;
        do
        {
          sub_2346F2B6C(v82, (uint64_t)v84, type metadata accessor for CapturedRoom.Surface);
          sub_2346EB6EC(v84, 1, v63);
          sub_2346DFB08();
          if (v86)
          {
            float32x4_t v85 = (void *)sub_2347EE5F0();
            swift_bridgeObjectRelease();
          }
          else
          {
            float32x4_t v85 = 0;
          }
          objc_msgSend(v220, sel_addReferenceWithPath_nodePath_, v85, 0);

          (*(void (**)(void *, uint64_t))v221)(v63, v222);
          float32x4_t v84 = v219;
          sub_2346F241C((uint64_t)v219, type metadata accessor for CapturedRoom.Surface);
          v82 += v83;
          --v80;
        }
        while (v80);
        swift_bridgeObjectRelease();
        id v57 = v212;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v87 = v57[3];
      uint64_t v88 = v57[4];
      __swift_project_boxed_opaque_existential_1(v57, v87);
      uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 40))(v87, v88);
      MEMORY[0x270FA5388](v89);
      v191[-2] = v214;
      sub_234789C90((uint64_t (*)(char *))sub_2346F2BD4, (uint64_t)&v191[-4], v90);
      uint64_t v92 = *((void *)v91 + 2);
      if (v92)
      {
        uint64_t v93 = *(unsigned __int8 *)(v211 + 80);
        uint64_t v213 = v91;
        uint64_t v94 = (uint64_t)&v91[(v93 + 32) & ~v93];
        uint64_t v95 = *(void *)(v211 + 72);
        uint64_t v96 = v218;
        id v97 = v216;
        id v98 = v220;
        do
        {
          sub_2346F2B6C(v94, (uint64_t)v96, type metadata accessor for CapturedRoom.Surface);
          sub_2346EB6EC(v96, 1, v97);
          sub_2346DFB08();
          if (v100)
          {
            uint64_t v99 = (void *)sub_2347EE5F0();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v99 = 0;
          }
          objc_msgSend(v98, sel_addReferenceWithPath_nodePath_, v99, 0);

          id v97 = v216;
          (*(void (**)(void *, uint64_t))v221)(v216, v222);
          uint64_t v96 = v218;
          sub_2346F241C((uint64_t)v218, type metadata accessor for CapturedRoom.Surface);
          v94 += v95;
          --v92;
        }
        while (v92);
        swift_bridgeObjectRelease();
        id v57 = v212;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v101 = v57[3];
      uint64_t v102 = v57[4];
      __swift_project_boxed_opaque_existential_1(v57, v101);
      uint64_t v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 48))(v101, v102);
      MEMORY[0x270FA5388](v103);
      v191[-2] = v214;
      sub_234789C90((uint64_t (*)(char *))sub_2346F2BD4, (uint64_t)&v191[-4], v104);
      uint64_t v106 = *(void *)(v105 + 16);
      id v107 = (void (**)(char *, uint64_t))v221;
      if (v106)
      {
        v191[1] = v221 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        unint64_t v108 = (*(unsigned __int8 *)(v211 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80);
        v191[2] = v105;
        uint64_t v109 = v105 + v108;
        uint64_t v213 = *(char **)(v211 + 72);
        float32x4_t v110 = v215;
        float32x4_t v111 = v205;
        id v112 = v220;
        do
        {
          sub_2346F2B6C(v109, (uint64_t)v110, type metadata accessor for CapturedRoom.Surface);
          sub_2346EB6EC(v110, 1, v111);
          sub_2346DFB08();
          if (v116)
          {
            unsigned int v113 = (void *)sub_2347EE5F0();
            swift_bridgeObjectRelease();
          }
          else
          {
            unsigned int v113 = 0;
          }
          objc_msgSend(v112, sel_addReferenceWithPath_nodePath_, v113, 0);

          float32x4_t v114 = *(void (**)(char *, uint64_t))v221;
          (*(void (**)(void *, uint64_t))v221)(v111, v222);
          float32x4_t v110 = v215;
          sub_2346F241C((uint64_t)v215, type metadata accessor for CapturedRoom.Surface);
          v109 += (uint64_t)v213;
          --v106;
          float32x4_t v115 = v217;
        }
        while (v106);
        swift_bridgeObjectRelease();

        id v57 = v212;
      }
      else
      {
        swift_bridgeObjectRelease();

        float32x4_t v114 = *v107;
        float32x4_t v115 = v217;
      }
      uint64_t v117 = v222;
      v114(v115, v222);
      v114(v223, v117);
      sub_2346F241C((uint64_t)v214, type metadata accessor for CapturedRoom.Surface);
      uint64_t v61 = v211;
      id v62 = v209;
    }
    swift_bridgeObjectRelease();
    uint64_t v118 = v192;
    long long v119 = sub_2346EF7A0(0x72675F726F6F6C46, 0xE900000000000070, v196, 1, v192, v197);
    if (v64)
    {
      (*(void (**)(char *, uint64_t))v221)(v207, v222);
    }
    else
    {
      id v220 = v119;
      sub_2347ED420();
      uint64_t v121 = v57[3];
      uint64_t v120 = v57[4];
      __swift_project_boxed_opaque_existential_1(v57, v121);
      uint64_t v122 = (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 64))(v121, v120);
      uint64_t v123 = *(void *)(v122 + 16);
      if (v123)
      {
        uint64_t v124 = *(unsigned __int8 *)(v61 + 80);
        float32x4_t v223 = (char *)v122;
        uint64_t v125 = v122 + ((v124 + 32) & ~v124);
        uint64_t v126 = *(void *)(v61 + 72);
        long long v127 = v202;
        uint64_t v128 = v194;
        do
        {
          sub_2346F2B6C(v125, (uint64_t)v127, type metadata accessor for CapturedRoom.Surface);
          sub_2346EB6EC(v127, 0, v128);
          sub_2346DFB08();
          if (v130)
          {
            id v129 = (void *)sub_2347EE5F0();
            swift_bridgeObjectRelease();
          }
          else
          {
            id v129 = 0;
          }
          objc_msgSend(v220, sel_addReferenceWithPath_nodePath_, v129, 0);

          uint64_t v128 = v194;
          (*(void (**)(char *, uint64_t))v221)(v194, v222);
          long long v127 = v202;
          sub_2346F241C((uint64_t)v202, type metadata accessor for CapturedRoom.Surface);
          v125 += v126;
          --v123;
        }
        while (v123);
      }
      swift_bridgeObjectRelease();
      long long v131 = sub_2346EF7A0(0x675F7463656A624FLL, 0xEA00000000007072, v196, 1, v118, v197);
      uint64_t v132 = v201;
      float64x2_t v133 = v207;
      float32x4_t v216 = v131;
      uint64_t v134 = v57[3];
      uint64_t v135 = v57[4];
      __swift_project_boxed_opaque_existential_1(v57, v134);
      uint64_t v136 = (*(uint64_t (**)(uint64_t, uint64_t))(v135 + 56))(v134, v135);
      int64_t v137 = *(void *)(v136 + 16);
      if (v137)
      {
        uint64_t v226 = MEMORY[0x263F8EE78];
        sub_23474588C(0, v137, 0);
        uint64_t v138 = v136 + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
        uint64_t v139 = *(void *)(v132 + 72);
        uint64_t v140 = v226;
        do
        {
          uint64_t v141 = v198;
          sub_2346F2B6C(v138, (uint64_t)v198, type metadata accessor for CapturedRoom.Object);
          char v142 = *v141;
          sub_2346F241C((uint64_t)v141, type metadata accessor for CapturedRoom.Object);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23474588C(0, *(void *)(v140 + 16) + 1, 1);
            uint64_t v140 = v226;
          }
          unint64_t v144 = *(void *)(v140 + 16);
          unint64_t v143 = *(void *)(v140 + 24);
          if (v144 >= v143 >> 1)
          {
            sub_23474588C(v143 > 1, v144 + 1, 1);
            uint64_t v140 = v226;
          }
          *(void *)(v140 + 16) = v144 + 1;
          *(unsigned char *)(v140 + v144 + 32) = v142;
          v138 += v139;
          --v137;
          float64x2_t v133 = v207;
          id v57 = v212;
        }
        while (v137);
        swift_bridgeObjectRelease();
        uint64_t v132 = v201;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v140 = MEMORY[0x263F8EE78];
      }
      uint64_t v145 = (char *)sub_2347C8FB8(v140);
      swift_bridgeObjectRelease();
      uint64_t v146 = 0;
      uint64_t v147 = (uint64_t)(v145 + 56);
      uint64_t v148 = 1 << v145[32];
      uint64_t v149 = -1;
      if (v148 < 64) {
        uint64_t v149 = ~(-1 << v148);
      }
      unint64_t v150 = v149 & *((void *)v145 + 7);
      int64_t v151 = (unint64_t)(v148 + 63) >> 6;
      uint64_t v152 = (void (**)(char *, uint64_t))v221;
      float32x4_t v217 = v145;
      uint64_t v214 = (float32x4_t *)v151;
      int64_t v215 = (float32x4_t *)(v145 + 56);
      while (1)
      {
        do
        {
          if (v150)
          {
            unint64_t v153 = __clz(__rbit64(v150));
            v150 &= v150 - 1;
            unint64_t v154 = v153 | (v146 << 6);
          }
          else
          {
            if (__OFADD__(v146++, 1)) {
              goto LABEL_96;
            }
            if (v146 >= v151)
            {
LABEL_94:
              uint64_t v187 = v222;
              unint64_t v188 = v195;
              id v189 = v220;

              swift_release();
              float32x4_t v190 = *v152;
              (*v152)(v188, v187);
              v190(v133, v187);
              return;
            }
            unint64_t v156 = *(void *)(v147 + 8 * v146);
            if (!v156)
            {
              uint64_t v157 = v146 + 1;
              if (v146 + 1 >= v151) {
                goto LABEL_94;
              }
              unint64_t v156 = *(void *)(v147 + 8 * v157);
              if (!v156)
              {
                uint64_t v157 = v146 + 2;
                if (v146 + 2 >= v151) {
                  goto LABEL_94;
                }
                unint64_t v156 = *(void *)(v147 + 8 * v157);
                if (!v156)
                {
                  uint64_t v157 = v146 + 3;
                  if (v146 + 3 >= v151) {
                    goto LABEL_94;
                  }
                  unint64_t v156 = *(void *)(v147 + 8 * v157);
                  if (!v156)
                  {
                    while (1)
                    {
                      uint64_t v146 = v157 + 1;
                      if (__OFADD__(v157, 1)) {
                        goto LABEL_97;
                      }
                      if (v146 >= v151) {
                        goto LABEL_94;
                      }
                      unint64_t v156 = *(void *)(v147 + 8 * v146);
                      ++v157;
                      if (v156) {
                        goto LABEL_66;
                      }
                    }
                  }
                }
              }
              uint64_t v146 = v157;
            }
LABEL_66:
            unint64_t v150 = (v156 - 1) & v156;
            unint64_t v154 = __clz(__rbit64(v156)) + (v146 << 6);
          }
          LODWORD(v223) = *(unsigned __int8 *)(*((void *)v145 + 6) + v154);
        }
        while (v223 == 15);
        float32x4_t v218 = (float32x4_t *)v150;
        float32x4_t v219 = (float32x4_t *)v146;
        uint64_t v158 = v57[3];
        uint64_t v159 = v57[4];
        __swift_project_boxed_opaque_existential_1(v57, v158);
        uint64_t v160 = (*(uint64_t (**)(uint64_t, uint64_t))(v159 + 56))(v158, v159);
        uint64_t v161 = MEMORY[0x263F8EE78];
        uint64_t v226 = MEMORY[0x263F8EE78];
        uint64_t v162 = *(void *)(v160 + 16);
        if (v162) {
          break;
        }
        uint64_t v169 = (char *)MEMORY[0x263F8EE78];
LABEL_81:
        uint64_t v152 = (void (**)(char *, uint64_t))v221;
        swift_bridgeObjectRelease();
        uint64_t v170 = *((void *)v169 + 2);
        if (v170)
        {
          LOBYTE(v226) = (_BYTE)v223;
          uint64_t v226 = sub_2347EE690();
          uint64_t v227 = v171;
          sub_2346EFB68();
          uint64_t v172 = sub_2347EEB70();
          uint64_t v174 = v173;
          swift_bridgeObjectRelease();
          uint64_t v226 = v172;
          uint64_t v227 = v174;
          swift_bridgeObjectRetain();
          sub_2347EE6F0();
          uint64_t v175 = v226;
          uint64_t v176 = v227;
          sub_2347ED420();
          swift_bridgeObjectRelease();
          uint64_t v177 = sub_2346EF7A0(v175, v176, v196, 1, v216, v197);
          swift_bridgeObjectRelease();
          uint64_t v178 = *(unsigned __int8 *)(v201 + 80);
          float32x4_t v223 = v169;
          uint64_t v179 = (uint64_t)&v169[(v178 + 32) & ~v178];
          uint64_t v180 = *(void *)(v201 + 72);
          uint64_t v181 = v200;
          uint64_t v182 = (uint64_t)v199;
          do
          {
            sub_2346F2B6C(v179, (uint64_t)v181, type metadata accessor for CapturedRoom.Object);
            sub_2346ECA10(v181, v182);
            sub_2346DFB08();
            if (v186)
            {
              uint64_t v183 = (void *)sub_2347EE5F0();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v183 = 0;
            }
            objc_msgSend(v177, sel_addReferenceWithPath_nodePath_, v183, 0);

            unint64_t v184 = *(void (**)(char *, uint64_t))v221;
            uint64_t v182 = (uint64_t)v199;
            (*(void (**)(char *, uint64_t))v221)(v199, v222);
            uint64_t v181 = v200;
            sub_2346F241C((uint64_t)v200, type metadata accessor for CapturedRoom.Object);
            v179 += v180;
            --v170;
            uint64_t v185 = v193;
          }
          while (v170);
          swift_release();

          uint64_t v152 = (void (**)(char *, uint64_t))v221;
          v184(v185, v222);
        }
        else
        {
          swift_release();
        }
        float64x2_t v133 = v207;
        id v57 = v212;
        uint64_t v132 = v201;
        uint64_t v145 = v217;
        unint64_t v150 = (unint64_t)v218;
        int64_t v151 = (int64_t)v214;
        uint64_t v147 = (uint64_t)v215;
        uint64_t v146 = (uint64_t)v219;
      }
      unint64_t v163 = 0;
      while (v163 < *(void *)(v160 + 16))
      {
        unint64_t v164 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
        uint64_t v165 = *(void *)(v132 + 72);
        int64_t v166 = v203;
        sub_2346F2B6C(v160 + v164 + v165 * v163, (uint64_t)v203, type metadata accessor for CapturedRoom.Object);
        if (*v166 == v223)
        {
          sub_2346F16F8((uint64_t)v166, v204, type metadata accessor for CapturedRoom.Object);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_2347458B4(0, *(void *)(v161 + 16) + 1, 1);
          }
          uint64_t v161 = v226;
          unint64_t v168 = *(void *)(v226 + 16);
          unint64_t v167 = *(void *)(v226 + 24);
          if (v168 >= v167 >> 1)
          {
            sub_2347458B4(v167 > 1, v168 + 1, 1);
            uint64_t v161 = v226;
          }
          *(void *)(v161 + 16) = v168 + 1;
          sub_2346F16F8(v204, v161 + v164 + v168 * v165, type metadata accessor for CapturedRoom.Object);
          uint64_t v132 = v201;
        }
        else
        {
          sub_2346F241C((uint64_t)v166, type metadata accessor for CapturedRoom.Object);
        }
        if (v162 == ++v163)
        {
          uint64_t v169 = (char *)v226;
          goto LABEL_81;
        }
      }
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
    }
  }
}

void sub_2346EB6EC(float32x4_t *a1@<X1>, int a2@<W2>, void *a3@<X8>)
{
  int v143 = a2;
  uint64_t v148 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC800);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v144 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v145 = (char *)&v130 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  uint64_t v147 = *(uint64_t (***)(void, void, void))(v13 - 8);
  MEMORY[0x270FA5388](v13);
  v146.n128_u64[0] = (unint64_t)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CapturedRoom.Surface(0);
  uint64_t v16 = (uint64_t)a1 + *(int *)(v15 + 44);
  uint64_t v17 = *(void *)(v3 + 16);
  if (!*(void *)(v17 + 16)) {
    goto LABEL_6;
  }
  uint64_t v18 = v15;
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_2347BFA88(v16);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for USDModel.Error();
    sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
    swift_allocError();
    uint64_t v26 = v25;
    *uint64_t v25 = sub_2347ED550();
    v26[1] = v27;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  uint64_t v21 = (uint64_t *)(*(void *)(v17 + 56) + 16 * v19);
  uint64_t v22 = v21[1];
  uint64_t v142 = *v21;
  uint64_t v141 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v24 = a1->u8[0];
  uint64_t v140 = a1;
  uint64_t v138 = v12;
  int v137 = v24;
  if ((v24 - 2) >= 4u) {
    LODWORD(v23) = 973279855;
  }
  else {
    LODWORD(v23) = dword_2347F29E0[(char)(v24 - 2)];
  }
  long long v139 = v23;
  uint64_t v28 = v141;
  *(void *)&v149.f64[0] = v142;
  *(void *)&v149.f64[1] = v141;
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  uint64_t v29 = v148;
  sub_2347ED420();
  swift_bridgeObjectRelease();
  id v30 = sub_2346EF15C((uint64_t)v29);
  if (v4)
  {
    uint64_t v31 = sub_2347ED490();
    (*(void (**)(void *, uint64_t))(*(void *)(v31 - 8) + 8))(v29, v31);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v32 = v30;
  sub_2347ED3E0();
  uint64_t v34 = v33;
  id v35 = objc_msgSend(v32, sel_rootNode);
  uint64_t v36 = (void *)*MEMORY[0x263F84028];
  v136.i64[0] = (uint64_t)v35;
  id v135 = sub_2346EF7A0(v142, v28, v36, 2, v35, v32);
  uint64_t v134 = v32;
  uint64_t v132 = sub_2347EE5F0();
  uint64_t v131 = sub_2347EE5F0();
  *(void *)&v149.f64[0] = 12078;
  v149.f64[1] = -1.15172193e164;
  uint64_t v133 = v34;
  sub_2347EE6F0();
  id v37 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  unsigned int v38 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v39 = objc_msgSend(v37, sel_initWithResourcePath_, v38);

  id v40 = v135;
  uint64_t v41 = (void *)v132;
  uint64_t v42 = (void *)v131;
  objc_msgSend(v135, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v132, v131, v39);

  uint64_t v132 = sub_2347EE5F0();
  id v43 = (void *)sub_2347EE5F0();
  id v44 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  swift_bridgeObjectRetain();
  uint64_t v45 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v46 = objc_msgSend(v44, sel_initWithString_, v45);

  uint64_t v47 = (void *)v132;
  objc_msgSend(v40, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v132, v43, v46);
  swift_bridgeObjectRelease();

  uint64_t v48 = (void *)sub_2347EE5F0();
  sub_2347ED550();
  id v49 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v50 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v51 = objc_msgSend(v49, (SEL)&protocolRef_NSCopying, v50);

  objc_msgSend(v40, sel_setCustomMetadata_value_, v48, v51);
  uint64_t v52 = (void *)sub_2347EE5F0();
  int v53 = v137;
  LOBYTE(v149.f64[0]) = v137;
  *(void *)&v149.f64[0] = sub_2347EE690();
  v149.f64[1] = v54;
  sub_2346EFB68();
  sub_2347EEB70();
  swift_bridgeObjectRelease();
  id v55 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  id v56 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v57 = objc_msgSend(v55, sel_initWithString_, v56);

  objc_msgSend(v40, sel_setCustomMetadata_value_, v52, v57);
  uint64_t v58 = v140;
  float v59 = COERCE_FLOAT(v140[1].i64[1]);
  float32x4_t v136 = v140[1];
  float v60 = vmuls_lane_f32(0.5, v136, 2);
  if (v59 <= 0.0) {
    float v61 = *(float *)&v139;
  }
  else {
    float v61 = v60;
  }
  if (v59 <= 0.0) {
    float v62 = 0.0;
  }
  else {
    float v62 = v60;
  }
  id v63 = v40;
  uint64_t v64 = (uint64_t)v138;
  sub_2346A7BCC((uint64_t)v140 + *(int *)(v18 + 52), (uint64_t)v138, (uint64_t *)&unk_2687AE190);
  int v65 = v147[6](v64, 1, v13);
  uint64_t v66 = v142;
  if (v65 != 1)
  {
    sub_2346F16F8(v64, v146.n128_i64[0], type metadata accessor for CapturedRoom.Surface.Curve);
    id v68 = sub_2346EF7A0(v66, v141, (void *)*MEMORY[0x263F83FF8], 3, v63, v134);
    uint64_t v69 = (void *)sub_2347EE5F0();
    id v70 = objc_msgSend(v68, sel_newPropertyWithName_type_role_, v69, *MEMORY[0x263F83FB8], 0);

    if (v70)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
      uint64_t v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_2347F19B0;
      id v72 = objc_allocWithZone(MEMORY[0x263F83F08]);
      uint64_t v73 = (void *)sub_2347EE5F0();
      id v74 = objc_msgSend(v72, sel_initWithString_, v73);

      *(void *)(v71 + 32) = v74;
      *(void *)&v149.f64[0] = v71;
      sub_2347EE7F0();
      sub_2346A9D9C(0, &qword_2687ACCF8);
      uint64_t v75 = (void *)sub_2347EE7C0();
      swift_bridgeObjectRelease();
      objc_msgSend(v70, sel_setTokenArray_, v75);

      type metadata accessor for RoomCaptureGeometryManager();
      swift_initStaticObject();
      __int32 v76 = v136.i32[1];
      uint64_t v77 = type metadata accessor for ScanItemStrut();
      uint64_t v78 = *(__n128 (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56);
      uint64_t v79 = (uint64_t)v145;
      v78(v145, 1, 1, v77);
      uint64_t v80 = (uint64_t)v144;
      __n128 v81 = v78(v144, 1, 1, v77);
      v81.n128_u32[0] = v76;
      uint64_t v82 = v146.n128_u64[0];
      uint64_t v83 = sub_2346C5E78((float32x2_t *)v146.n128_u64[0], MEMORY[0x263F8EE78], v81.n128_f64[0], v62, v61, v79, v80, 1016003125, 1);
      sub_2346A7C30(v80, &qword_2687AC800);
      sub_2346A7C30(v79, &qword_2687AC800);
      float32x4_t v84 = v140;
      sub_2346F0958(v68, v83, v140[2], v140[3], v140[4], v140[5]);

      swift_release();
      sub_2346F241C(v82, type metadata accessor for CapturedRoom.Surface.Curve);
LABEL_26:
      uint64_t v100 = v134;
      uint64_t v101 = v141;
      goto LABEL_34;
    }
    __break(1u);
    goto LABEL_40;
  }
  sub_2346A7C30(v64, (uint64_t *)&unk_2687AE190);
  if (v53 == 5)
  {
    uint64_t v67 = *(uint64_t *)((char *)v58->i64 + *(int *)(v18 + 60));
    if (*(void *)(v67 + 16))
    {
      float32x4_t v85 = v58;
      uint64_t v86 = sub_2346EF7A0(v66, v141, (void *)*MEMORY[0x263F83FF8], 3, v63, v134);
      uint64_t v87 = (void *)sub_2347EE5F0();
      uint64_t v88 = *MEMORY[0x263F83FB8];
      uint64_t v148 = v86;
      id v89 = objc_msgSend(v86, sel_newPropertyWithName_type_role_, v87, v88, 0);

      if (v89)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
        uint64_t v90 = swift_allocObject();
        *(_OWORD *)(v90 + 16) = xmmword_2347F19B0;
        id v91 = objc_allocWithZone(MEMORY[0x263F83F08]);
        uint64_t v92 = (void *)sub_2347EE5F0();
        id v93 = objc_msgSend(v91, sel_initWithString_, v92);

        *(void *)(v90 + 32) = v93;
        *(void *)&v149.f64[0] = v90;
        sub_2347EE7F0();
        sub_2346A9D9C(0, &qword_2687ACCF8);
        uint64_t v94 = (void *)sub_2347EE7C0();
        swift_bridgeObjectRelease();
        objc_msgSend(v89, sel_setTokenArray_, v94);

        type metadata accessor for RoomCaptureGeometryManager();
        swift_initStaticObject();
        __n128 v146 = (__n128)v85[1];
        uint64_t v95 = type metadata accessor for ScanItemStrut();
        uint64_t v96 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56);
        uint64_t v97 = (uint64_t)v145;
        v96(v145, 1, 1, v95);
        uint64_t v147 = (uint64_t (**)(void, void, void))v89;
        uint64_t v98 = (uint64_t)v144;
        v96(v144, 1, 1, v95);
        float32x4_t v84 = v85;
        uint64_t v99 = sub_2346C407C(v67, MEMORY[0x263F8EE78], 0, v143 & 1, v97, v98, v146, v62, v61, 0.0);
        sub_2346A7C30(v98, &qword_2687AC800);
        sub_2346A7C30(v97, &qword_2687AC800);
        id v68 = v148;
        sub_2346F0958(v148, v99, v85[2], v85[3], v85[4], v85[5]);

        swift_release();
        goto LABEL_26;
      }
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
  }
  uint64_t v102 = sub_2346EF7A0(v66, v141, (void *)*MEMORY[0x263F83FE0], 3, v63, v134);
  uint64_t v103 = (void *)sub_2347EE5F0();
  id v104 = objc_msgSend(v102, sel_newPropertyWithName_type_role_, v103, *MEMORY[0x263F83FB8], 0);

  if (!v104)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v148 = v104;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = xmmword_2347F19B0;
  id v106 = objc_allocWithZone(MEMORY[0x263F83F08]);
  id v107 = (void *)sub_2347EE5F0();
  id v108 = objc_msgSend(v106, sel_initWithString_, v107);

  *(void *)(v105 + 32) = v108;
  *(void *)&v149.f64[0] = v105;
  sub_2347EE7F0();
  float64_t v157 = v149.f64[0];
  uint64_t v109 = (void *)sub_2347EE5F0();
  id v110 = objc_msgSend(v102, sel_newPropertyWithName_type_role_, v109, *MEMORY[0x263F83F20], 0);

  if (!v110)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  objc_msgSend(v110, sel_setDoubleValue_, 1.0);
  float32x4_t v111 = (void *)sub_2347EE5F0();
  id v112 = v102;
  id v113 = objc_msgSend(v102, sel_newPropertyWithName_type_role_, v111, *MEMORY[0x263F83F28], 0);

  if (!v113)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    return;
  }
  float32x4_t v114 = v58[1];
  v114.i32[3] = 0;
  float32x4_t v115 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v139, 0);
  v115.i32[3] = 0;
  float32x4_t v116 = vmaxnmq_f32(v114, v115);
  float64x2_t v149 = vcvtq_f64_f32(*(float32x2_t *)v116.f32);
  float64x2_t v150 = (float64x2_t)COERCE_UNSIGNED_INT64(v116.f32[2]);
  objc_msgSend(v113, sel_setDouble3Value_, &v149);
  id v117 = objc_allocWithZone(MEMORY[0x263F83F08]);
  uint64_t v118 = (void *)sub_2347EE5F0();
  objc_msgSend(v117, sel_initWithString_, v118);

  MEMORY[0x237DC6730]();
  if (*(void *)((*(void *)&v157 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v157 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
    sub_2347EE800();
  sub_2347EE820();
  sub_2347EE7F0();
  long long v119 = (void *)sub_2347EE5F0();
  id v120 = objc_msgSend(v112, sel_newPropertyWithName_type_role_, v119, *MEMORY[0x263F83F30], 0);

  if (!v120) {
    goto LABEL_44;
  }
  float32x4_t v121 = v58[2];
  float32x4_t v122 = v58[3];
  float32x4_t v123 = v58[4];
  float32x4_t v124 = v58[5];
  float64x2_t v149 = vcvtq_f64_f32(*(float32x2_t *)v121.f32);
  float64x2_t v150 = vcvt_hight_f64_f32(v121);
  float64x2_t v151 = vcvtq_f64_f32(*(float32x2_t *)v122.f32);
  float64x2_t v152 = vcvt_hight_f64_f32(v122);
  float64x2_t v153 = vcvtq_f64_f32(*(float32x2_t *)v123.f32);
  float64x2_t v154 = vcvt_hight_f64_f32(v123);
  float64x2_t v155 = vcvtq_f64_f32(*(float32x2_t *)v124.f32);
  float64x2_t v156 = vcvt_hight_f64_f32(v124);
  objc_msgSend(v120, sel_setDouble4x4Value_, &v149);
  sub_2346A9D9C(0, &qword_2687ACCF8);
  uint64_t v125 = (void *)sub_2347EE7C0();
  float32x4_t v84 = v58;
  swift_bridgeObjectRelease();
  uint64_t v126 = v148;
  objc_msgSend(v148, sel_setTokenArray_, v125);

  uint64_t v101 = v141;
  uint64_t v100 = v134;
  id v68 = v112;
LABEL_34:
  int v127 = v84->u8[0];
  if (v127 == 5 || v127 == 2) {
    double v128 = 0.00781250185;
  }
  else {
    double v128 = 0.000000743866278;
  }
  id v129 = v135;
  sub_2346F0E4C(v68, v128, 1.0, v142, v101, v100);
  swift_bridgeObjectRelease();
  objc_msgSend(v100, sel_save);
}

void sub_2346ECA10(float32x2_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v6 = (uint64_t)a1 + *(int *)(type metadata accessor for CapturedRoom.Object(0) + 32);
  uint64_t v7 = *(void *)(v2 + 16);
  if (!*(void *)(v7 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_2347BFA88(v6);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    type metadata accessor for USDModel.Error();
    sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
    swift_allocError();
    uint64_t v16 = v15;
    *uint64_t v15 = sub_2347ED550();
    v16[1] = v17;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return;
  }
  uint64_t v75 = a1;
  uint64_t v10 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v67.f64[0] = v11;
  *(void *)&v67.f64[1] = v12;
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  sub_2347ED420();
  swift_bridgeObjectRelease();
  id v13 = sub_2346EF15C(a2);
  if (v3)
  {
    uint64_t v14 = sub_2347ED490();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a2, v14);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v18 = v13;
  sub_2347ED3E0();
  id v19 = objc_msgSend(v18, sel_rootNode);
  id v63 = sub_2346EF7A0(v11, v12, (void *)*MEMORY[0x263F84028], 2, v19, v18);
  float v61 = (void *)sub_2347EE5F0();
  float v60 = (void *)sub_2347EE5F0();
  uint64_t v65 = v11;
  uint64_t v66 = v12;
  sub_2347EE6F0();
  uint64_t v64 = v18;
  id v20 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v21 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(v20, sel_initWithResourcePath_, v21);

  objc_msgSend(v63, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v61, v60, v22);
  long long v23 = (void *)sub_2347EE5F0();
  int v24 = (void *)sub_2347EE5F0();
  id v25 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  swift_bridgeObjectRetain();
  uint64_t v26 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v27 = objc_msgSend(v25, sel_initWithString_, v26);

  objc_msgSend(v63, sel_setDictionaryMetadataWithKey_dictionaryKey_value_, v23, v24, v27);
  swift_bridgeObjectRelease();

  uint64_t v28 = (void *)sub_2347EE5F0();
  sub_2347ED550();
  id v29 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  id v30 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v31 = objc_msgSend(v29, sel_initWithString_, v30);

  objc_msgSend(v63, sel_setCustomMetadata_value_, v28, v31);
  uint64_t v32 = (void *)sub_2347EE5F0();
  uint64_t v33 = v75;
  *(void *)&v67.f64[0] = sub_2347EE690();
  v67.f64[1] = v34;
  sub_2346EFB68();
  sub_2347EEB70();
  swift_bridgeObjectRelease();
  id v35 = objc_allocWithZone(MEMORY[0x263F83ED8]);
  uint64_t v36 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v37 = objc_msgSend(v35, sel_initWithString_, v36);

  objc_msgSend(v63, sel_setCustomMetadata_value_, v32, v37);
  unsigned int v38 = sub_2346EF7A0(v11, v66, (void *)*MEMORY[0x263F83FE0], 3, v63, v64);
  id v39 = (void *)sub_2347EE5F0();
  id v40 = objc_msgSend(v38, sel_newPropertyWithName_type_role_, v39, *MEMORY[0x263F83F20], 0);

  if (!v40)
  {
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(v40, sel_setDoubleValue_, 1.0);
  uint64_t v41 = (void *)sub_2347EE5F0();
  id v42 = objc_msgSend(v38, sel_newPropertyWithName_type_role_, v41, *MEMORY[0x263F83F28], 0);

  if (!v42)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(double *)&unint64_t v43 = v75[3].f32[0];
  float64x2_t v67 = vcvtq_f64_f32(v75[2]);
  float64x2_t v68 = (float64x2_t)v43;
  objc_msgSend(v42, sel_setDouble3Value_, &v67);
  id v44 = (void *)sub_2347EE5F0();
  uint64_t v45 = (float32x2_t *)objc_msgSend(v38, sel_newPropertyWithName_type_role_, v44, *MEMORY[0x263F83F30], 0);

  if (!v45)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  float v62 = v42;
  float32x4_t v46 = *(float32x4_t *)v33[4].f32;
  float32x4_t v47 = *(float32x4_t *)v33[6].f32;
  float32x4_t v48 = *(float32x4_t *)v33[8].f32;
  float32x4_t v49 = *(float32x4_t *)v33[10].f32;
  float64x2_t v67 = vcvtq_f64_f32(*(float32x2_t *)v46.f32);
  float64x2_t v68 = vcvt_hight_f64_f32(v46);
  float64x2_t v69 = vcvtq_f64_f32(*(float32x2_t *)v47.f32);
  float64x2_t v70 = vcvt_hight_f64_f32(v47);
  float64x2_t v71 = vcvtq_f64_f32(*(float32x2_t *)v48.f32);
  float64x2_t v72 = vcvt_hight_f64_f32(v48);
  float64x2_t v73 = vcvtq_f64_f32(*(float32x2_t *)v49.f32);
  float64x2_t v74 = vcvt_hight_f64_f32(v49);
  uint64_t v75 = v45;
  [(float32x2_t *)v45 setDouble4x4Value:&v67];
  uint64_t v50 = (void *)sub_2347EE5F0();
  id v51 = objc_msgSend(v38, sel_newPropertyWithName_type_role_, v50, *MEMORY[0x263F83FB8], 0);

  if (v51)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_2347F29D0;
    id v53 = objc_allocWithZone(MEMORY[0x263F83F08]);
    float64_t v54 = (void *)sub_2347EE5F0();
    id v55 = objc_msgSend(v53, sel_initWithString_, v54);

    *(void *)(v52 + 32) = v55;
    id v56 = objc_allocWithZone(MEMORY[0x263F83F08]);
    id v57 = (void *)sub_2347EE5F0();
    id v58 = objc_msgSend(v56, sel_initWithString_, v57);

    *(void *)(v52 + 40) = v58;
    *(void *)&v67.f64[0] = v52;
    sub_2347EE7F0();
    sub_2346A9D9C(0, &qword_2687ACCF8);
    float v59 = (void *)sub_2347EE7C0();
    swift_bridgeObjectRelease();
    objc_msgSend(v51, sel_setTokenArray_, v59);

    sub_2346F0E4C(v38, 0.00781250185, 1.0, v65, v66, v64);
    swift_bridgeObjectRelease();
    objc_msgSend(v64, sel_save);

    return;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_2346ED370()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for USDModel()
{
  return self;
}

uint64_t type metadata accessor for USDModel.Error()
{
  uint64_t result = qword_2687ACD80;
  if (!qword_2687ACD80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_2346ED428(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  char v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_2346ED4B0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v6 = a2;
    }
    uint64_t v7 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
      uint64_t v7 = 11;
    }
    uint64_t v8 = v7 | (v6 << 16);
    uint64_t v9 = sub_2347EE6E0();
    if (v10) {
      a2 = v8;
    }
    else {
      a2 = v9;
    }
    a1 = 15;
    a3 = v5;
    a4 = v4;
  }
  return MEMORY[0x270F9D8F0](a1, a2, a3, a4);
}

uint64_t sub_2346ED54C(void *a1)
{
  uint64_t v227 = type metadata accessor for CapturedRoom.Object(0);
  uint64_t v224 = *(void *)(v227 - 8);
  MEMORY[0x270FA5388](v227);
  uint64_t v229 = (unsigned __int8 *)&v223 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = sub_2347ED5C0();
  uint64_t v3 = *(void *)(v252 - 8);
  MEMORY[0x270FA5388](v252);
  uint64_t v226 = (char *)&v223 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v241 = (uint64_t)&v223 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v242 = (uint64_t)&v223 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v243 = (uint64_t)&v223 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t j = (uint64_t)&v223 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v245 = (uint64_t *)((char *)&v223 - v14);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD30);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v240 = (char *)&v223 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD28);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v231 = (char *)&v223 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  float32x4_t v230 = (uint64_t *)((char *)&v223 - v21);
  MEMORY[0x270FA5388](v22);
  id v233 = (char *)&v223 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v232 = (uint64_t *)((char *)&v223 - v25);
  MEMORY[0x270FA5388](v26);
  uint64_t v235 = (char *)&v223 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v234 = (uint64_t *)((char *)&v223 - v29);
  MEMORY[0x270FA5388](v30);
  uint64_t v238 = (char *)&v223 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v237 = (uint64_t *)((char *)&v223 - v33);
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (unint64_t *)((char *)&v223 - v35);
  MEMORY[0x270FA5388](v37);
  id v39 = (uint64_t *)((char *)&v223 - v38);
  uint64_t v40 = a1[3];
  uint64_t v41 = a1[4];
  uint64_t v225 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v40);
  unint64_t v42 = 0;
  uint64_t v228 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
  unint64_t v43 = *(void (**)(void, void, void, void))(v228 + 16);
  uint64_t v248 = (uint64_t **)(v16 + 48);
  unint64_t v249 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v239 = v3;
  uint64_t v250 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  float32x4_t v251 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  id v44 = (void *)MEMORY[0x263F8EE80];
  uint64_t v246 = v15;
  uint64_t i = (uint64_t)v43;
  while (1)
  {
    if ((void (*)(void, void, void, void))v42 == v43)
    {
      uint64_t v247 = *v249;
      v247(v36, 1, 1, v15);
      float32x4_t v46 = (void (*)(unint64_t *, uint64_t, uint64_t, uint64_t))v43;
    }
    else
    {
      uint64_t v47 = v228;
      if (v42 >= *(void *)(v228 + 16)) {
        goto LABEL_107;
      }
      uint64_t v48 = *(void *)(type metadata accessor for CapturedRoom.Surface(0) - 8);
      float32x4_t v46 = (void (*)(unint64_t *, uint64_t, uint64_t, uint64_t))(v42 + 1);
      uint64_t v49 = v47
          + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
          + *(void *)(v48 + 72) * v42;
      uint64_t v50 = (uint64_t)&v240[*(int *)(v15 + 48)];
      sub_2346F2B6C(v49, v50, type metadata accessor for CapturedRoom.Surface);
      uint64_t v51 = (uint64_t)v36 + *(int *)(v15 + 48);
      *uint64_t v36 = v42;
      sub_2346F16F8(v50, v51, type metadata accessor for CapturedRoom.Surface);
      uint64_t v247 = *v249;
      v247(v36, 0, 1, v15);
    }
    sub_2346B1970((uint64_t)v36, (uint64_t)v39, &qword_2687ACD28);
    uint64_t v52 = *v248;
    if (((unsigned int (*)(void *, uint64_t, uint64_t))*v248)(v39, 1, v15) == 1) {
      break;
    }
    uint64_t v247 = v46;
    id v53 = v36;
    uint64_t v54 = *v39;
    id v55 = v39;
    uint64_t v56 = (uint64_t)v39 + *(int *)(v15 + 48);
    uint64_t v57 = type metadata accessor for CapturedRoom.Surface(0);
    id v58 = *v251;
    uint64_t v59 = (uint64_t)v245;
    (*v251)((uint64_t)v245, v56 + *(int *)(v57 + 44), v252);
    sub_2346F241C(v56, type metadata accessor for CapturedRoom.Surface);
    uint64_t v253 = v54;
    uint64_t v254 = 1819042135;
    unint64_t v255 = 0xE400000000000000;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    uint64_t v61 = v254;
    unint64_t v60 = v255;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v254 = (uint64_t)v44;
    unint64_t v64 = sub_2347BFA88(v59);
    uint64_t v65 = v44[2];
    BOOL v66 = (v63 & 1) == 0;
    uint64_t v67 = v65 + v66;
    if (__OFADD__(v65, v66))
    {
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      uint64_t result = sub_2347EF0F0();
      __break(1u);
      return result;
    }
    char v68 = v63;
    if (v44[3] >= v67)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        id v44 = (void *)v254;
        if (v63) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_2347D6410();
        id v44 = (void *)v254;
        if (v68) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_2347D0320(v67, isUniquelyReferenced_nonNull_native);
      unint64_t v69 = sub_2347BFA88((uint64_t)v245);
      if ((v68 & 1) != (v70 & 1)) {
        goto LABEL_117;
      }
      unint64_t v64 = v69;
      id v44 = (void *)v254;
      if (v68)
      {
LABEL_2:
        uint64_t v45 = (uint64_t *)(v44[7] + 16 * v64);
        swift_bridgeObjectRelease();
        *uint64_t v45 = v61;
        v45[1] = v60;
        goto LABEL_3;
      }
    }
    v44[(v64 >> 6) + 8] |= 1 << v64;
    v58(v44[6] + *(void *)(v239 + 72) * v64, (uint64_t)v245, v252);
    float64x2_t v71 = (uint64_t *)(v44[7] + 16 * v64);
    *float64x2_t v71 = v61;
    v71[1] = v60;
    uint64_t v72 = v44[2];
    BOOL v73 = __OFADD__(v72, 1);
    uint64_t v74 = v72 + 1;
    if (v73) {
      goto LABEL_109;
    }
    v44[2] = v74;
LABEL_3:
    swift_bridgeObjectRelease();
    (*v250)((uint64_t)v245, v252);
    uint64_t v36 = v53;
    id v39 = v55;
    unint64_t v43 = (void (*)(void, void, void, void))i;
    uint64_t v15 = v246;
    unint64_t v42 = (unint64_t)v247;
  }
  swift_bridgeObjectRelease();
  uint64_t v75 = v225[3];
  uint64_t v76 = v225[4];
  __swift_project_boxed_opaque_existential_1(v225, v75);
  uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 32))(v75, v76);
  unint64_t v78 = 0;
  unint64_t v79 = *(void *)(v77 + 16);
  uint64_t v245 = v52;
  uint64_t v80 = (unint64_t *)v238;
  for (uint64_t i = v77; ; v77 = i)
  {
    if (v78 == v79)
    {
      v247(v80, 1, 1, v15);
      unint64_t v78 = v79;
    }
    else
    {
      if (v78 >= *(void *)(v77 + 16)) {
        goto LABEL_108;
      }
      uint64_t v82 = *(void *)(type metadata accessor for CapturedRoom.Surface(0) - 8);
      uint64_t v83 = (uint64_t)&v240[*(int *)(v15 + 48)];
      sub_2346F2B6C(v77+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(void *)(v82 + 72) * v78, v83, type metadata accessor for CapturedRoom.Surface);
      uint64_t v84 = (uint64_t)v80 + *(int *)(v15 + 48);
      *uint64_t v80 = v78;
      sub_2346F16F8(v83, v84, type metadata accessor for CapturedRoom.Surface);
      v247(v80, 0, 1, v15);
      ++v78;
    }
    float32x4_t v85 = v237;
    sub_2346B1970((uint64_t)v80, (uint64_t)v237, &qword_2687ACD28);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v52)(v85, 1, v15) == 1) {
      break;
    }
    uint64_t v86 = *v85;
    uint64_t v87 = (uint64_t)v85 + *(int *)(v15 + 48);
    uint64_t v88 = type metadata accessor for CapturedRoom.Surface(0);
    id v89 = *v251;
    uint64_t v90 = j;
    (*v251)(j, v87 + *(int *)(v88 + 44), v252);
    sub_2346F241C(v87, type metadata accessor for CapturedRoom.Surface);
    uint64_t v253 = v86;
    uint64_t v254 = 1919905604;
    unint64_t v255 = 0xE400000000000000;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    uint64_t v92 = v254;
    unint64_t v91 = v255;
    int v93 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v254 = (uint64_t)v44;
    unint64_t v95 = sub_2347BFA88(v90);
    uint64_t v96 = v44[2];
    BOOL v97 = (v94 & 1) == 0;
    uint64_t v98 = v96 + v97;
    if (__OFADD__(v96, v97)) {
      goto LABEL_103;
    }
    char v99 = v94;
    if (v44[3] >= v98)
    {
      if (v93)
      {
        id v44 = (void *)v254;
        if (v94) {
          goto LABEL_21;
        }
      }
      else
      {
        sub_2347D6410();
        id v44 = (void *)v254;
        if (v99) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      sub_2347D0320(v98, v93);
      unint64_t v100 = sub_2347BFA88(j);
      if ((v99 & 1) != (v101 & 1)) {
        goto LABEL_117;
      }
      unint64_t v95 = v100;
      id v44 = (void *)v254;
      if (v99)
      {
LABEL_21:
        __n128 v81 = (uint64_t *)(v44[7] + 16 * v95);
        swift_bridgeObjectRelease();
        *__n128 v81 = v92;
        v81[1] = v91;
        goto LABEL_22;
      }
    }
    v44[(v95 >> 6) + 8] |= 1 << v95;
    v89(v44[6] + *(void *)(v239 + 72) * v95, j, v252);
    uint64_t v102 = (uint64_t *)(v44[7] + 16 * v95);
    *uint64_t v102 = v92;
    v102[1] = v91;
    uint64_t v103 = v44[2];
    BOOL v73 = __OFADD__(v103, 1);
    uint64_t v104 = v103 + 1;
    if (v73) {
      goto LABEL_111;
    }
    v44[2] = v104;
LABEL_22:
    swift_bridgeObjectRelease();
    (*v250)(j, v252);
    uint64_t v52 = v245;
    uint64_t v15 = v246;
    uint64_t v80 = (unint64_t *)v238;
  }
  swift_bridgeObjectRelease();
  uint64_t v105 = v225[3];
  uint64_t v106 = v225[4];
  __swift_project_boxed_opaque_existential_1(v225, v105);
  uint64_t v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 40))(v105, v106);
  unint64_t v108 = 0;
  uint64_t v109 = *(void *)(v107 + 16);
  id v110 = (unint64_t *)v235;
  for (j = v109; ; uint64_t v109 = j)
  {
    if (v108 == v109)
    {
      v247(v110, 1, 1, v15);
      unint64_t v108 = v109;
    }
    else
    {
      if (v108 >= *(void *)(v107 + 16)) {
        goto LABEL_110;
      }
      uint64_t v112 = *(void *)(type metadata accessor for CapturedRoom.Surface(0) - 8);
      uint64_t v113 = (uint64_t)&v240[*(int *)(v15 + 48)];
      sub_2346F2B6C(v107+ ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))+ *(void *)(v112 + 72) * v108, v113, type metadata accessor for CapturedRoom.Surface);
      uint64_t v114 = (uint64_t)v110 + *(int *)(v15 + 48);
      *id v110 = v108;
      sub_2346F16F8(v113, v114, type metadata accessor for CapturedRoom.Surface);
      v247(v110, 0, 1, v15);
      ++v108;
    }
    float32x4_t v115 = v234;
    sub_2346B1970((uint64_t)v110, (uint64_t)v234, &qword_2687ACD28);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v52)(v115, 1, v15) == 1) {
      break;
    }
    uint64_t v116 = v107;
    uint64_t v117 = *v115;
    uint64_t v118 = (uint64_t)v115 + *(int *)(v15 + 48);
    uint64_t v119 = type metadata accessor for CapturedRoom.Surface(0);
    id v120 = *v251;
    uint64_t v121 = v243;
    (*v251)(v243, v118 + *(int *)(v119 + 44), v252);
    sub_2346F241C(v118, type metadata accessor for CapturedRoom.Surface);
    uint64_t v253 = v117;
    uint64_t v254 = 0x776F646E6957;
    unint64_t v255 = 0xE600000000000000;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    uint64_t v123 = v254;
    unint64_t v122 = v255;
    int v124 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v254 = (uint64_t)v44;
    unint64_t v126 = sub_2347BFA88(v121);
    uint64_t v127 = v44[2];
    BOOL v128 = (v125 & 1) == 0;
    uint64_t v129 = v127 + v128;
    if (__OFADD__(v127, v128)) {
      goto LABEL_104;
    }
    char v130 = v125;
    if (v44[3] >= v129)
    {
      if ((v124 & 1) == 0) {
        sub_2347D6410();
      }
    }
    else
    {
      sub_2347D0320(v129, v124);
      unint64_t v131 = sub_2347BFA88(v243);
      if ((v130 & 1) != (v132 & 1)) {
        goto LABEL_117;
      }
      unint64_t v126 = v131;
    }
    id v110 = (unint64_t *)v235;
    id v44 = (void *)v254;
    if (v130)
    {
      float32x4_t v111 = (uint64_t *)(*(void *)(v254 + 56) + 16 * v126);
      swift_bridgeObjectRelease();
      *float32x4_t v111 = v123;
      v111[1] = v122;
    }
    else
    {
      *(void *)(v254 + 8 * (v126 >> 6) + 64) |= 1 << v126;
      v120(v44[6] + *(void *)(v239 + 72) * v126, v243, v252);
      uint64_t v133 = (uint64_t *)(v44[7] + 16 * v126);
      *uint64_t v133 = v123;
      v133[1] = v122;
      uint64_t v134 = v44[2];
      BOOL v73 = __OFADD__(v134, 1);
      uint64_t v135 = v134 + 1;
      if (v73) {
        goto LABEL_113;
      }
      v44[2] = v135;
    }
    swift_bridgeObjectRelease();
    (*v250)(v243, v252);
    uint64_t v52 = v245;
    uint64_t v15 = v246;
    uint64_t v107 = v116;
  }
  swift_bridgeObjectRelease();
  uint64_t v136 = v225[3];
  uint64_t v137 = v225[4];
  __swift_project_boxed_opaque_existential_1(v225, v136);
  uint64_t v138 = (*(uint64_t (**)(uint64_t, uint64_t))(v137 + 48))(v136, v137);
  unint64_t v139 = 0;
  uint64_t v140 = *(void *)(v138 + 16);
  uint64_t v141 = (unint64_t *)v233;
  for (j = v140; ; uint64_t v140 = j)
  {
    if (v139 == v140)
    {
      v247(v141, 1, 1, v15);
      unint64_t v139 = v140;
    }
    else
    {
      if (v139 >= *(void *)(v138 + 16)) {
        goto LABEL_112;
      }
      uint64_t v143 = *(void *)(type metadata accessor for CapturedRoom.Surface(0) - 8);
      uint64_t v144 = (uint64_t)&v240[*(int *)(v15 + 48)];
      sub_2346F2B6C(v138+ ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80))+ *(void *)(v143 + 72) * v139, v144, type metadata accessor for CapturedRoom.Surface);
      uint64_t v145 = (uint64_t)v141 + *(int *)(v15 + 48);
      *uint64_t v141 = v139;
      sub_2346F16F8(v144, v145, type metadata accessor for CapturedRoom.Surface);
      v247(v141, 0, 1, v15);
      ++v139;
    }
    __n128 v146 = v232;
    sub_2346B1970((uint64_t)v141, (uint64_t)v232, &qword_2687ACD28);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v52)(v146, 1, v15) == 1) {
      break;
    }
    uint64_t v147 = v138;
    uint64_t v148 = *v146;
    uint64_t v149 = (uint64_t)v146 + *(int *)(v15 + 48);
    uint64_t v150 = type metadata accessor for CapturedRoom.Surface(0);
    float64x2_t v151 = *v251;
    uint64_t v152 = v242;
    (*v251)(v242, v149 + *(int *)(v150 + 44), v252);
    sub_2346F241C(v149, type metadata accessor for CapturedRoom.Surface);
    uint64_t v253 = v148;
    uint64_t v254 = 0x676E696E65704FLL;
    unint64_t v255 = 0xE700000000000000;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    uint64_t v154 = v254;
    unint64_t v153 = v255;
    int v155 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v254 = (uint64_t)v44;
    unint64_t v157 = sub_2347BFA88(v152);
    uint64_t v158 = v44[2];
    BOOL v159 = (v156 & 1) == 0;
    uint64_t v160 = v158 + v159;
    if (__OFADD__(v158, v159)) {
      goto LABEL_105;
    }
    char v161 = v156;
    if (v44[3] >= v160)
    {
      if ((v155 & 1) == 0) {
        sub_2347D6410();
      }
    }
    else
    {
      sub_2347D0320(v160, v155);
      unint64_t v162 = sub_2347BFA88(v242);
      if ((v161 & 1) != (v163 & 1)) {
        goto LABEL_117;
      }
      unint64_t v157 = v162;
    }
    uint64_t v141 = (unint64_t *)v233;
    id v44 = (void *)v254;
    if (v161)
    {
      uint64_t v142 = (uint64_t *)(*(void *)(v254 + 56) + 16 * v157);
      swift_bridgeObjectRelease();
      *uint64_t v142 = v154;
      v142[1] = v153;
    }
    else
    {
      *(void *)(v254 + 8 * (v157 >> 6) + 64) |= 1 << v157;
      v151(v44[6] + *(void *)(v239 + 72) * v157, v242, v252);
      unint64_t v164 = (uint64_t *)(v44[7] + 16 * v157);
      *unint64_t v164 = v154;
      v164[1] = v153;
      uint64_t v165 = v44[2];
      BOOL v73 = __OFADD__(v165, 1);
      uint64_t v166 = v165 + 1;
      if (v73) {
        goto LABEL_115;
      }
      v44[2] = v166;
    }
    swift_bridgeObjectRelease();
    (*v250)(v242, v252);
    uint64_t v52 = v245;
    uint64_t v15 = v246;
    uint64_t v138 = v147;
  }
  swift_bridgeObjectRelease();
  uint64_t v167 = v225[3];
  uint64_t v168 = v225[4];
  __swift_project_boxed_opaque_existential_1(v225, v167);
  uint64_t v169 = (*(uint64_t (**)(uint64_t, uint64_t))(v168 + 64))(v167, v168);
  unint64_t v170 = 0;
  uint64_t v171 = *(void *)(v169 + 16);
  uint64_t v172 = (unint64_t *)v231;
  for (uint64_t j = v171; ; v171 = j)
  {
    if (v170 == v171)
    {
      v247(v172, 1, 1, v15);
      unint64_t v170 = v171;
    }
    else
    {
      if (v170 >= *(void *)(v169 + 16)) {
        goto LABEL_114;
      }
      uint64_t v174 = *(void *)(type metadata accessor for CapturedRoom.Surface(0) - 8);
      uint64_t v175 = (uint64_t)&v240[*(int *)(v15 + 48)];
      sub_2346F2B6C(v169+ ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80))+ *(void *)(v174 + 72) * v170, v175, type metadata accessor for CapturedRoom.Surface);
      uint64_t v176 = (uint64_t)v172 + *(int *)(v15 + 48);
      *uint64_t v172 = v170;
      sub_2346F16F8(v175, v176, type metadata accessor for CapturedRoom.Surface);
      v247(v172, 0, 1, v15);
      ++v170;
    }
    uint64_t v177 = v230;
    sub_2346B1970((uint64_t)v172, (uint64_t)v230, &qword_2687ACD28);
    if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v52)(v177, 1, v15) == 1) {
      break;
    }
    uint64_t v178 = v169;
    uint64_t v179 = *v177;
    uint64_t v180 = (uint64_t)v177 + *(int *)(v15 + 48);
    uint64_t v181 = type metadata accessor for CapturedRoom.Surface(0);
    uint64_t v182 = *v251;
    uint64_t v183 = v241;
    (*v251)(v241, v180 + *(int *)(v181 + 44), v252);
    sub_2346F241C(v180, type metadata accessor for CapturedRoom.Surface);
    uint64_t v253 = v179;
    uint64_t v254 = 0x726F6F6C46;
    unint64_t v255 = 0xE500000000000000;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    uint64_t v185 = v254;
    unint64_t v184 = v255;
    int v186 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v254 = (uint64_t)v44;
    unint64_t v188 = sub_2347BFA88(v183);
    uint64_t v189 = v44[2];
    BOOL v190 = (v187 & 1) == 0;
    uint64_t v191 = v189 + v190;
    if (__OFADD__(v189, v190)) {
      goto LABEL_106;
    }
    char v192 = v187;
    if (v44[3] >= v191)
    {
      if ((v186 & 1) == 0) {
        sub_2347D6410();
      }
    }
    else
    {
      sub_2347D0320(v191, v186);
      unint64_t v193 = sub_2347BFA88(v241);
      if ((v192 & 1) != (v194 & 1)) {
        goto LABEL_117;
      }
      unint64_t v188 = v193;
    }
    uint64_t v172 = (unint64_t *)v231;
    id v44 = (void *)v254;
    if (v192)
    {
      uint64_t v173 = (uint64_t *)(*(void *)(v254 + 56) + 16 * v188);
      swift_bridgeObjectRelease();
      *uint64_t v173 = v185;
      v173[1] = v184;
    }
    else
    {
      *(void *)(v254 + 8 * (v188 >> 6) + 64) |= 1 << v188;
      v182(v44[6] + *(void *)(v239 + 72) * v188, v241, v252);
      uint64_t v195 = (uint64_t *)(v44[7] + 16 * v188);
      *uint64_t v195 = v185;
      v195[1] = v184;
      uint64_t v196 = v44[2];
      BOOL v73 = __OFADD__(v196, 1);
      uint64_t v197 = v196 + 1;
      if (v73) {
        goto LABEL_116;
      }
      v44[2] = v197;
    }
    swift_bridgeObjectRelease();
    (*v250)(v241, v252);
    uint64_t v52 = v245;
    uint64_t v15 = v246;
    uint64_t v169 = v178;
  }
  swift_bridgeObjectRelease();
  uint64_t v198 = v225[3];
  uint64_t v199 = v225[4];
  __swift_project_boxed_opaque_existential_1(v225, v198);
  uint64_t v200 = (*(uint64_t (**)(uint64_t, uint64_t))(v199 + 56))(v198, v199);
  uint64_t v201 = *(void *)(v200 + 16);
  if (!v201) {
    goto LABEL_101;
  }
  uint64_t v202 = *(unsigned __int8 *)(v224 + 80);
  unint64_t v249 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))v200;
  uint64_t v203 = v200 + ((v202 + 32) & ~v202);
  uint64_t v204 = *(void *)(v224 + 72);
  uint64_t v205 = MEMORY[0x263F8EE80];
  uint64_t v206 = v229;
  uint64_t v207 = (uint64_t)v226;
  while (2)
  {
    sub_2346F2B6C(v203, (uint64_t)v206, type metadata accessor for CapturedRoom.Object);
    int v219 = *v206;
    if (v219 == 15)
    {
LABEL_94:
      sub_2346F241C((uint64_t)v206, type metadata accessor for CapturedRoom.Object);
      v203 += v204;
      if (!--v201) {
        goto LABEL_101;
      }
      continue;
    }
    break;
  }
  if (!*(void *)(v205 + 16) || (unint64_t v220 = sub_2347BFCB4(*v206), (v221 & 1) == 0))
  {
    uint64_t v208 = 0;
    uint64_t v209 = 1;
    goto LABEL_93;
  }
  uint64_t v208 = *(void *)(*(void *)(v205 + 56) + 8 * v220);
  uint64_t v209 = v208 + 1;
  if (!__OFADD__(v208, 1))
  {
LABEL_93:
    char v210 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v254 = v205;
    sub_2347AB258(v209, v219, v210);
    uint64_t v205 = v254;
    swift_bridgeObjectRelease();
    LOBYTE(v254) = *v229;
    uint64_t v254 = sub_2347EE690();
    unint64_t v255 = v211;
    sub_2346EFB68();
    uint64_t v212 = sub_2347EEB70();
    unint64_t v214 = v213;
    swift_bridgeObjectRelease();
    uint64_t v254 = v212;
    unint64_t v255 = v214;
    uint64_t v253 = v208;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    uint64_t v215 = v254;
    uint64_t v216 = v255;
    uint64_t v217 = v252;
    (*v251)(v207, (uint64_t)&v229[*(int *)(v227 + 32)], v252);
    char v218 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v254 = (uint64_t)v44;
    sub_2347AB384(v215, v216, v207, v218);
    uint64_t v206 = v229;
    id v44 = (void *)v254;
    swift_bridgeObjectRelease();
    (*v250)(v207, v217);
    goto LABEL_94;
  }
  __break(1u);
LABEL_101:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v44;
}

void sub_2346EEDE0(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v47 = a3;
  uint64_t v7 = sub_2347ED5C0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v39 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  float32x4_t v46 = (char *)v38 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD70);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (void *)((char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    v38[1] = a1;
    v38[2] = v4;
    unint64_t v43 = (char *)v16 + *(int *)(v13 + 48);
    uint64_t v18 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v40 = *(void *)(v14 + 72);
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    void v38[3] = v8 + 40;
    swift_bridgeObjectRetain();
    uint64_t v41 = v16;
    uint64_t v42 = v8;
    while (1)
    {
      uint64_t v44 = v17;
      sub_2346A7BCC(v18, (uint64_t)v16, &qword_2687ACD70);
      uint64_t v21 = *v16;
      uint64_t v20 = v16[1];
      uint64_t v22 = *v45;
      uint64_t v23 = v7;
      (*v45)(v46, v43, v7);
      uint64_t v24 = (void *)*v47;
      unint64_t v26 = sub_2347BFB5C(v21, v20);
      uint64_t v27 = v24[2];
      BOOL v28 = (v25 & 1) == 0;
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        break;
      }
      char v30 = v25;
      if (v24[3] >= v29)
      {
        if ((a2 & 1) == 0) {
          sub_2347D6B40();
        }
      }
      else
      {
        sub_2347D0D84(v29, a2 & 1);
        unint64_t v31 = sub_2347BFB5C(v21, v20);
        if ((v30 & 1) != (v32 & 1)) {
          goto LABEL_18;
        }
        unint64_t v26 = v31;
      }
      uint64_t v33 = (void *)*v47;
      if (v30)
      {
        uint64_t v19 = v39;
        uint64_t v7 = v23;
        v22(v39, v46, v23);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, char *, uint64_t))(v42 + 40))(v33[7] + *(void *)(v42 + 72) * v26, v19, v23);
      }
      else
      {
        v33[(v26 >> 6) + 8] |= 1 << v26;
        uint64_t v34 = (uint64_t *)(v33[6] + 16 * v26);
        *uint64_t v34 = v21;
        v34[1] = v20;
        uint64_t v7 = v23;
        v22((char *)(v33[7] + *(void *)(v42 + 72) * v26), v46, v23);
        uint64_t v35 = v33[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_17;
        }
        v33[2] = v37;
      }
      uint64_t v16 = v41;
      v18 += v40;
      a2 = 1;
      uint64_t v17 = v44 - 1;
      if (v44 == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    sub_2347EF0F0();
    __break(1u);
  }
}

id sub_2346EF15C(uint64_t a1)
{
  uint64_t v2 = sub_2347ED1A0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  float v62 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v53 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v53 - v9;
  uint64_t v11 = sub_2347ED490();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a1;
  sub_2347ED410();
  uint64_t v15 = sub_2347ED3E0();
  unint64_t v17 = v16;
  uint64_t v53 = v12;
  uint64_t v54 = v11;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v58 = v15;
  unint64_t v59 = v17;
  unint64_t v56 = v17;
  if (qword_2687ABD90 != -1) {
    swift_once();
  }
  uint64_t v18 = __swift_project_value_buffer(v2, (uint64_t)qword_2687BE018);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v19(v10, v18, v2);
  sub_2347ED180();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20(v10, v2);
  sub_2346EFB68();
  uint64_t v21 = sub_2347EEB50();
  id v55 = v20;
  v20(v8, v2);
  uint64_t v58 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD10);
  sub_2346F1648();
  uint64_t v22 = sub_2347EE560();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (qword_2687ABD88 != -1) {
    swift_once();
  }
  uint64_t v25 = __swift_project_value_buffer(v2, (uint64_t)qword_2687BE000);
  v19(v62, v25, v2);
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_2346ED4B0(1, v22, v24, v26);
  unint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  uint64_t v58 = v27;
  unint64_t v59 = v29;
  uint64_t v60 = v31;
  uint64_t v61 = v33;
  sub_2346F16A4();
  sub_2347EEB80();
  LOBYTE(v27) = v34;
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
    uint64_t v58 = 95;
    unint64_t v59 = 0xE100000000000000;
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
  }
  v55(v62, v2);
  swift_bridgeObjectRelease();
  uint64_t v35 = self;
  uint64_t v36 = v57;
  uint64_t v37 = (void *)sub_2347ED3F0();
  id v38 = objc_msgSend(v35, sel_newSceneWithURL_, v37);

  if (v38)
  {
    id v39 = (void *)sub_2347EE5F0();
    id v40 = objc_allocWithZone(MEMORY[0x263F83F08]);
    uint64_t v41 = (void *)sub_2347EE5F0();
    swift_bridgeObjectRelease();
    id v42 = objc_msgSend(v40, sel_initWithString_, v41);

    id v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithToken_, v42);
    objc_msgSend(v38, sel_setMetadataWithKey_value_, v39, v43);

    uint64_t v44 = (void *)sub_2347EE5F0();
    id v45 = objc_allocWithZone(MEMORY[0x263F83F08]);
    float32x4_t v46 = (void *)sub_2347EE5F0();
    id v47 = objc_msgSend(v45, sel_initWithString_, v46);

    id v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithToken_, v47);
    objc_msgSend(v38, sel_setMetadataWithKey_value_, v44, v48);

    uint64_t v49 = (void *)sub_2347EE5F0();
    id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithDouble_, 1.0);
    objc_msgSend(v38, sel_setMetadataWithKey_value_, v49, v50);
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for USDModel.Error();
    sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v36, v54);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return v38;
}

void *sub_2346EF7A0(uint64_t a1, uint64_t a2, void *a3, char a4, void *a5, void *a6)
{
  sub_2346A9D9C(0, &qword_2687ACD08);
  id v10 = objc_msgSend(a6, sel_rootNode);
  char v11 = sub_2347EEAE0();

  if ((v11 & 1) != 0
    || (id v12 = objc_msgSend(a5, sel_path),
        id v13 = objc_msgSend(v12, sel_stringValue),
        v12,
        !v13))
  {
    uint64_t v14 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  else
  {
    uint64_t v14 = sub_2347EE620();
    unint64_t v16 = v15;
  }
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  uint64_t v18 = v14;
  unint64_t v17 = v16;
  id v19 = objc_allocWithZone(MEMORY[0x263F83EE8]);
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v19, sel_initWithString_, v20);

  if (v21)
  {
    id v22 = objc_msgSend(a6, sel_newNodeAtPath_type_, v21, a3);
    if (v22)
    {
      a3 = v22;
      swift_bridgeObjectRelease();
      if (a4 != 3)
      {
        unint64_t v23 = (void *)sub_2347EE5F0();
        id v26 = objc_allocWithZone(MEMORY[0x263F83F08]);
        uint64_t v27 = (void *)sub_2347EE5F0();
        swift_bridgeObjectRelease();
        id v28 = objc_msgSend(v26, sel_initWithString_, v27);

        id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F83ED8]), sel_initWithToken_, v28);
        objc_msgSend(a3, sel_setMetadataWithKey_value_, v23, v29);
      }
    }
    else
    {
      type metadata accessor for USDModel.Error();
      sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
      swift_allocError();
      *uint64_t v25 = v18;
      v25[1] = v17;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
  else
  {
    type metadata accessor for USDModel.Error();
    sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
    swift_allocError();
    *unint64_t v24 = v18;
    v24[1] = v17;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return a3;
}

unint64_t sub_2346EFB68()
{
  unint64_t result = qword_2687ACCF0;
  if (!qword_2687ACCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACCF0);
  }
  return result;
}

void sub_2346EFBBC(uint64_t a1, id a2, uint64_t a3, void *a4)
{
  long long v37 = *(_OWORD *)(a1 + 16);
  float32x2_t v7 = *(float32x2_t *)(a1 + 128);
  char v8 = *(unsigned char *)(a1 + 144);
  id v9 = objc_msgSend(a2, sel_name);
  id v10 = objc_msgSend(v9, sel_stringValue);

  if (v10)
  {
    uint64_t v11 = sub_2347EE620();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = 0xE700000000000000;
    uint64_t v11 = 0x6E6F6974636573;
  }
  *(void *)&v46[0] = v11;
  *((void *)&v46[0] + 1) = v13;
  sub_2347EE6F0();
  uint64_t v14 = sub_2346EF7A0(v11, v13, (void *)*MEMORY[0x263F84028], 0, a2, a4);
  swift_bridgeObjectRelease();
  if (!v4)
  {
    float v15 = vmuls_lane_f32(0.5, v7, 1);
    if (v8) {
      float v16 = 1.5;
    }
    else {
      float v16 = v15;
    }
    unint64_t v17 = (void *)sub_2347EE5F0();
    id v18 = objc_msgSend(v14, sel_newPropertyWithName_type_role_, v17, *MEMORY[0x263F83F30], 0);

    if (v18)
    {
      float v19 = v16 * 0.0;
      float v20 = *(float *)&v37 + (float)(v16 * 0.0);
      float v21 = *((float *)&v37 + 1) + v16;
      float v22 = *((float *)&v37 + 2) + v19;
      __invert_d4();
      float64x2_t v23 = vmulq_f64(v38, (float64x2_t)0);
      float64x2_t v24 = vmulq_f64(v39, (float64x2_t)0);
      __asm { FMOV            V25.2D, #-1.0 }
      v46[0] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v38, (float64x2_t)0, v40), (float64x2_t)0, v42), (float64x2_t)0, v44);
      v46[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v39, (float64x2_t)0, v41), (float64x2_t)0, v43), (float64x2_t)0, v45);
      double v46[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v23, (float64x2_t)0, v40), _Q25, v42), (float64x2_t)0, v44);
      void v46[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(v24, (float64x2_t)0, v41), _Q25, v43), (float64x2_t)0, v45);
      v46[4] = vmlaq_f64(vmlaq_f64(vaddq_f64(v40, v23), (float64x2_t)0, v42), (float64x2_t)0, v44);
      v46[5] = vmlaq_f64(vmlaq_f64(vaddq_f64(v41, v24), (float64x2_t)0, v43), (float64x2_t)0, v45);
      v46[6] = vaddq_f64(v44, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v38, v20), v40, v21), v42, v22));
      v46[7] = vaddq_f64(v45, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v20), v41, v21), v43, v22));
      objc_msgSend(v18, sel_setDouble4x4Value_, v46);
      uint64_t v30 = (void *)sub_2347EE5F0();
      id v31 = objc_msgSend(v14, sel_newPropertyWithName_type_role_, v30, *MEMORY[0x263F83FB8], 0);

      if (v31)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_2347F19B0;
        id v33 = objc_allocWithZone(MEMORY[0x263F83F08]);
        char v34 = (void *)sub_2347EE5F0();
        id v35 = objc_msgSend(v33, sel_initWithString_, v34);

        *(void *)(v32 + 32) = v35;
        *(void *)&v46[0] = v32;
        sub_2347EE7F0();
        sub_2346A9D9C(0, &qword_2687ACCF8);
        uint64_t v36 = (void *)sub_2347EE7C0();
        swift_bridgeObjectRelease();
        objc_msgSend(v31, sel_setTokenArray_, v36);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_2346EFFCC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    float64_t v13 = MEMORY[0x263F8EE80];
    goto LABEL_26;
  }
  uint64_t v96 = v4;
  uint64_t v6 = swift_bridgeObjectRetain();
  float64x2_t v7 = *(float64x2_t *)(v6 + 144);
  float32x4_t v117 = *(float32x4_t *)(v6 + 128);
  float64x2_t v118 = v7;
  float64x2_t v119 = *(float64x2_t *)(v6 + 160);
  char v120 = *(unsigned char *)(v6 + 176);
  float32x4_t v8 = *(float32x4_t *)(v6 + 80);
  float64x2_t v113 = *(float64x2_t *)(v6 + 64);
  float32x4_t v114 = v8;
  float32x4_t v9 = *(float32x4_t *)(v6 + 112);
  float32x4_t v115 = *(float32x4_t *)(v6 + 96);
  float32x4_t v116 = v9;
  float32x4_t v10 = *(float32x4_t *)(v6 + 48);
  uint64_t v98 = v6;
  uint64_t v11 = v5 - 1;
  uint64_t v12 = 192;
  float64x2_t v111 = *(float64x2_t *)(v6 + 32);
  float32x4_t v112 = v10;
  float64_t v13 = MEMORY[0x263F8EE80];
  while (1)
  {
    unsigned __int8 v14 = LOBYTE(v111.f64[0]);
    uint64_t v15 = *(void *)(*(void *)&v13 + 16);
    sub_2346F18EC((uint64_t)&v111);
    if (v15)
    {
      unint64_t v16 = sub_2347BFE9C(v14);
      unint64_t v17 = (void *)MEMORY[0x263F8EE78];
      if (v18)
      {
        unint64_t v17 = *(void **)(*(void *)(*(void *)&v13 + 56) + 8 * v16);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      unint64_t v17 = (void *)MEMORY[0x263F8EE78];
    }
    sub_2346F18EC((uint64_t)&v111);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = sub_2346FBDAC(0, v17[2] + 1, 1, v17);
    }
    unint64_t v20 = v17[2];
    unint64_t v19 = v17[3];
    if (v20 >= v19 >> 1) {
      unint64_t v17 = sub_2346FBDAC((void *)(v19 > 1), v20 + 1, 1, v17);
    }
    v17[2] = v20 + 1;
    float v21 = (float64x2_t *)&v17[20 * v20];
    float32x4_t v22 = v112;
    v21[2] = v111;
    v21[3] = (float64x2_t)v22;
    float64x2_t v23 = v113;
    float32x4_t v24 = v114;
    float32x4_t v25 = v116;
    v21[6] = (float64x2_t)v115;
    v21[7] = (float64x2_t)v25;
    v21[4] = v23;
    uint64_t v21[5] = (float64x2_t)v24;
    float32x4_t v26 = v117;
    float64x2_t v27 = v118;
    float64x2_t v28 = v119;
    LOBYTE(v21[11].f64[0]) = v120;
    v21[9] = v27;
    v21[10] = v28;
    v21[8] = (float64x2_t)v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v101.f64[0] = v13;
    unint64_t v31 = sub_2347BFE9C(v14);
    uint64_t v32 = *(void *)(*(void *)&v13 + 16);
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      sub_2347EF0F0();
      __break(1u);
      JUMPOUT(0x2346F0940);
    }
    char v35 = v30;
    if (*(void *)(*(void *)&v13 + 24) >= v34)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        float64_t v13 = v101.f64[0];
        if (v30) {
          goto LABEL_19;
        }
      }
      else
      {
        sub_2347D66E8();
        float64_t v13 = v101.f64[0];
        if (v35) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      sub_2347D0760(v34, isUniquelyReferenced_nonNull_native);
      unint64_t v36 = sub_2347BFE9C(v14);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_68;
      }
      unint64_t v31 = v36;
      float64_t v13 = v101.f64[0];
      if (v35)
      {
LABEL_19:
        uint64_t v41 = *(void *)(*(void *)&v13 + 56);
        swift_bridgeObjectRelease();
        *(void *)(v41 + 8 * v31) = v17;
        goto LABEL_20;
      }
    }
    *(void *)(*(void *)&v13 + 8 * (v31 >> 6) + 64) |= 1 << v31;
    *(unsigned char *)(*(void *)(*(void *)&v13 + 48) + v31) = v14;
    *(void *)(*(void *)(*(void *)&v13 + 56) + 8 * v31) = v17;
    uint64_t v38 = *(void *)(*(void *)&v13 + 16);
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (v39) {
      goto LABEL_63;
    }
    *(void *)(*(void *)&v13 + 16) = v40;
LABEL_20:
    swift_bridgeObjectRelease();
    sub_2346F1918((uint64_t)&v111);
    if (!v11) {
      break;
    }
    float64x2_t v42 = *(float64x2_t *)(v98 + v12 + 112);
    float32x4_t v117 = *(float32x4_t *)(v98 + v12 + 96);
    float64x2_t v118 = v42;
    float64x2_t v119 = *(float64x2_t *)(v98 + v12 + 128);
    char v120 = *(unsigned char *)(v98 + v12 + 144);
    float32x4_t v43 = *(float32x4_t *)(v98 + v12 + 48);
    float64x2_t v113 = *(float64x2_t *)(v98 + v12 + 32);
    float32x4_t v114 = v43;
    float32x4_t v44 = *(float32x4_t *)(v98 + v12 + 80);
    float32x4_t v115 = *(float32x4_t *)(v98 + v12 + 64);
    float32x4_t v116 = v44;
    float64x2_t v45 = *(float64x2_t *)(v98 + v12);
    float32x4_t v46 = *(float32x4_t *)(v98 + v12 + 16);
    v12 += 160;
    --v11;
    float64x2_t v111 = v45;
    float32x4_t v112 = v46;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = v96;
LABEL_26:
  uint64_t v82 = *(void *)&v13 + 64;
  uint64_t v47 = 1 << *(unsigned char *)(*(void *)&v13 + 32);
  uint64_t v48 = -1;
  if (v47 < 64) {
    uint64_t v48 = ~(-1 << v47);
  }
  unint64_t v49 = v48 & *(void *)(*(void *)&v13 + 64);
  int64_t v83 = (unint64_t)(v47 + 63) >> 6;
  id v89 = (void *)*MEMORY[0x263F84028];
  uint64_t v87 = *MEMORY[0x263F83F30];
  uint64_t v86 = *MEMORY[0x263F83FB8];
  swift_bridgeObjectRetain();
  int64_t v50 = 0;
  uint64_t v51 = &selRef_setOpaque_;
  for (i = v13; ; float64_t v13 = i)
  {
    if (v49)
    {
      uint64_t v84 = (v49 - 1) & v49;
      int64_t v85 = v50;
      unint64_t v52 = __clz(__rbit64(v49)) | (v50 << 6);
    }
    else
    {
      BOOL v39 = __OFADD__(v50, 1);
      int64_t v53 = v50 + 1;
      if (v39) {
        goto LABEL_64;
      }
      if (v53 >= v83)
      {
LABEL_60:
        swift_release();
        return swift_bridgeObjectRelease();
      }
      unint64_t v54 = *(void *)(v82 + 8 * v53);
      if (!v54)
      {
        int64_t v55 = v53 + 1;
        if (v53 + 1 >= v83) {
          goto LABEL_60;
        }
        unint64_t v54 = *(void *)(v82 + 8 * v55);
        if (!v54)
        {
          int64_t v55 = v53 + 2;
          if (v53 + 2 >= v83) {
            goto LABEL_60;
          }
          unint64_t v54 = *(void *)(v82 + 8 * v55);
          if (!v54)
          {
            int64_t v55 = v53 + 3;
            if (v53 + 3 >= v83) {
              goto LABEL_60;
            }
            unint64_t v54 = *(void *)(v82 + 8 * v55);
            if (!v54)
            {
              while (1)
              {
                int64_t v53 = v55 + 1;
                if (__OFADD__(v55, 1)) {
                  goto LABEL_65;
                }
                if (v53 >= v83) {
                  goto LABEL_60;
                }
                unint64_t v54 = *(void *)(v82 + 8 * v53);
                ++v55;
                if (v54) {
                  goto LABEL_42;
                }
              }
            }
          }
        }
        int64_t v53 = v55;
      }
LABEL_42:
      uint64_t v84 = (v54 - 1) & v54;
      int64_t v85 = v53;
      unint64_t v52 = __clz(__rbit64(v54)) + (v53 << 6);
    }
    uint64_t v56 = *(void *)(*(void *)(*(void *)&v13 + 56) + 8 * v52);
    unint64_t v57 = *(void *)(v56 + 16);
    swift_bridgeObjectRetain();
    if (v57) {
      break;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    unint64_t v49 = v84;
    int64_t v50 = v85;
  }
  unint64_t v58 = 0;
  uint64_t v59 = 32;
  uint64_t v88 = v56;
  while (1)
  {
    if (v58 >= v57) {
      goto LABEL_62;
    }
    uint64_t v99 = v59;
    uint64_t v60 = v56 + v59;
    float32x4_t v61 = *(float32x4_t *)(v60 + 16);
    float64x2_t v111 = *(float64x2_t *)v60;
    float32x4_t v112 = v61;
    float64x2_t v62 = *(float64x2_t *)(v60 + 32);
    float32x4_t v63 = *(float32x4_t *)(v60 + 48);
    float32x4_t v64 = *(float32x4_t *)(v60 + 80);
    float32x4_t v115 = *(float32x4_t *)(v60 + 64);
    float32x4_t v116 = v64;
    float64x2_t v113 = v62;
    float32x4_t v114 = v63;
    float32x4_t v65 = *(float32x4_t *)(v60 + 96);
    float64x2_t v66 = *(float64x2_t *)(v60 + 112);
    float64x2_t v67 = *(float64x2_t *)(v60 + 128);
    char v120 = *(unsigned char *)(v60 + 144);
    float64x2_t v118 = v66;
    float64x2_t v119 = v67;
    float32x4_t v117 = v65;
    unint64_t v97 = v58 + 1;
    v101.f64[0] = 0.0;
    v101.f64[1] = -2.68156159e154;
    sub_2346F18EC((uint64_t)&v111);
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    unint64_t v129 = v58;
    sub_2347EF070();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    char v68 = sub_2346EF7A0(*(uint64_t *)&v101.f64[0], *(uint64_t *)&v101.f64[1], v89, 0, a2, a3);
    if (v4) {
      break;
    }
    unint64_t v69 = v68;
    swift_bridgeObjectRelease();
    if (LOBYTE(v118.f64[0]))
    {
      float32x4_t v70 = v112;
      v70.i32[3] = 1.0;
      float32x4_t v94 = (float32x4_t)xmmword_2347F2000;
      float32x4_t v95 = v70;
      float32x4_t v92 = (float32x4_t)xmmword_2347F1FE0;
      float32x4_t v93 = (float32x4_t)xmmword_2347F1FC0;
    }
    else
    {
      float32x4_t v92 = v114;
      float32x4_t v94 = v115;
      float32x4_t v93 = v116;
      float32x4_t v95 = v117;
    }
    float64x2_t v71 = (void *)sub_2347EE5F0();
    id v72 = objc_msgSend(v69, v51[52], v71, v87, 0);

    if (!v72) {
      goto LABEL_66;
    }
    float64x2_t v121 = vcvtq_f64_f32(*(float32x2_t *)v92.f32);
    float64x2_t v122 = vcvt_hight_f64_f32(v92);
    float64x2_t v123 = vcvtq_f64_f32(*(float32x2_t *)v94.f32);
    float64x2_t v124 = vcvt_hight_f64_f32(v94);
    float64x2_t v125 = vcvtq_f64_f32(*(float32x2_t *)v93.f32);
    float64x2_t v126 = vcvt_hight_f64_f32(v93);
    float64x2_t v127 = vcvtq_f64_f32(*(float32x2_t *)v95.f32);
    float64x2_t v128 = vcvt_hight_f64_f32(v95);
    float64x2_t v101 = v121;
    float64x2_t v102 = v122;
    float64x2_t v103 = v123;
    float64x2_t v104 = v124;
    float64x2_t v105 = v125;
    float64x2_t v106 = v126;
    float64x2_t v107 = v127;
    float64x2_t v108 = v128;
    objc_msgSend(v72, sel_setDouble4x4Value_, &v101);
    BOOL v73 = (void *)sub_2347EE5F0();
    uint64_t v74 = v51;
    id v75 = objc_msgSend(v69, v51[52], v73, v86, 0);

    if (!v75) {
      goto LABEL_67;
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_2347F19B0;
    id v77 = objc_allocWithZone(MEMORY[0x263F83F08]);
    unint64_t v78 = (void *)sub_2347EE5F0();
    id v79 = objc_msgSend(v77, sel_initWithString_, v78);

    *(void *)(v76 + 32) = v79;
    *(void *)&v101.f64[0] = v76;
    sub_2347EE7F0();
    sub_2346A9D9C(0, &qword_2687ACCF8);
    uint64_t v80 = (void *)sub_2347EE7C0();
    swift_bridgeObjectRelease();
    objc_msgSend(v75, sel_setTokenArray_, v80);

    float64x2_t v107 = (float64x2_t)v117;
    float64x2_t v108 = v118;
    float64x2_t v109 = v119;
    char v110 = v120;
    float64x2_t v103 = v113;
    float64x2_t v104 = (float64x2_t)v114;
    float64x2_t v105 = (float64x2_t)v115;
    float64x2_t v106 = (float64x2_t)v116;
    float64x2_t v101 = v111;
    float64x2_t v102 = (float64x2_t)v112;
    sub_2346EFBBC((uint64_t)&v101, v69, (uint64_t)&v121, a3);
    uint64_t v4 = 0;

    sub_2346F1918((uint64_t)&v111);
    uint64_t v56 = v88;
    unint64_t v57 = *(void *)(v88 + 16);
    uint64_t v59 = v99 + 160;
    ++v58;
    uint64_t v51 = v74;
    if (v97 == v57) {
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease();
  sub_2346F1918((uint64_t)&v111);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_2346F0958(void *a1, void *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  float32x4_t v8 = (void *)sub_2347EE5F0();
  uint64_t v9 = *MEMORY[0x263F83F80];
  id v10 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v8, *MEMORY[0x263F83F80], 0);

  if (!v10)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v11 = a2[4];
  uint64_t v12 = sub_234799E90(3u, *(void *)(v11 + 16) / 3uLL);
  int64_t v13 = *(void *)(v12 + 16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = (uint64_t)sub_2346FBECC(0, v13, 0, (char *)v12);
  }
  uint64_t v40 = v10;
  objc_msgSend(v10, sel_setIntArray_count_, v12 + 32, v13);
  unsigned __int8 v14 = (void *)sub_2347EE5F0();
  id v15 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v14, v9, 0);

  id v45 = v15;
  if (!v15) {
    goto LABEL_25;
  }
  int64_t v16 = *(void *)(v11 + 16);
  unint64_t v17 = (char *)MEMORY[0x263F8EE78];
  if (v16)
  {
    *(void *)&v46[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_2347457E8(0, v16, 0);
    uint64_t v18 = 0;
    unint64_t v17 = *(char **)&v46[0];
    while (1)
    {
      int v19 = *(_DWORD *)(v11 + 4 * v18 + 32);
      if (v19 < 0) {
        break;
      }
      *(void *)&v46[0] = v17;
      unint64_t v21 = *((void *)v17 + 2);
      unint64_t v20 = *((void *)v17 + 3);
      if (v21 >= v20 >> 1)
      {
        sub_2347457E8(v20 > 1, v21 + 1, 1);
        unint64_t v17 = *(char **)&v46[0];
      }
      ++v18;
      *((void *)v17 + 2) = v21 + 1;
      *(_DWORD *)&v17[4 * v21 + 32] = v19;
      if (v16 == v18)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_12:
  int64_t v22 = *((void *)v17 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v17 = sub_2346FBECC(0, v22, 0, v17);
  }
  objc_msgSend(v45, sel_setIntArray_count_, v17 + 32, v22);
  float64x2_t v23 = (void *)sub_2347EE5F0();
  uint64_t v24 = *MEMORY[0x263F83F58];
  id v25 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v23, *MEMORY[0x263F83F58], 0);

  if (!v25) {
    goto LABEL_26;
  }
  float32x4_t v26 = (void *)a2[2];
  int64_t v27 = v26[2];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    float32x4_t v26 = sub_2346FA354(0, v27, 0, v26);
  }
  objc_msgSend(v25, sel_setFloat3Array_count_, v26 + 4, v27);
  float64x2_t v28 = (void *)sub_2347EE5F0();
  id v29 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v28, v24, 0);

  if (!v29) {
    goto LABEL_27;
  }
  char v30 = (void *)a2[3];
  int64_t v31 = v30[2];
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v30 = sub_2346FA354(0, v31, 0, v30);
  }
  objc_msgSend(v29, sel_setFloat3Array_count_, v30 + 4, v31, v25);
  uint64_t v32 = (void *)sub_2347EE5F0();
  id v33 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v32, *MEMORY[0x263F83FB0], 0);

  if (!v33) {
    goto LABEL_28;
  }
  id v34 = objc_allocWithZone(MEMORY[0x263F83F08]);
  char v35 = (void *)sub_2347EE5F0();
  id v36 = objc_msgSend(v34, sel_initWithString_, v35);

  objc_msgSend(v33, sel_setTokenValue_, v36);
  char v37 = (void *)sub_2347EE5F0();
  id v38 = objc_msgSend(a1, (SEL)&selRef_computeTriangulation_ + 5, v37, *MEMORY[0x263F83F30], 0);

  if (v38)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46[0] = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
    v46[1] = vcvt_hight_f64_f32(a3);
    double v46[2] = vcvtq_f64_f32(*(float32x2_t *)a4.f32);
    void v46[3] = vcvt_hight_f64_f32(a4);
    v46[4] = vcvtq_f64_f32(*(float32x2_t *)a5.f32);
    v46[5] = vcvt_hight_f64_f32(a5);
    v46[6] = vcvtq_f64_f32(*(float32x2_t *)a6.f32);
    v46[7] = vcvt_hight_f64_f32(a6);
    objc_msgSend(v38, sel_setDouble4x4Value_, v46);

    return;
  }
LABEL_29:
  __break(1u);
}

void sub_2346F0E4C(void *a1, double a2, float a3, uint64_t a4, uint64_t a5, void *a6)
{
  float32x4_t v8 = (void *)sub_2347EE5F0();
  id v9 = objc_msgSend(a1, sel_newPropertyWithName_type_role_, v8, *MEMORY[0x263F83F88], 0);

  if (!v9)
  {
    __break(1u);
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  sub_2347EE6F0();
  sub_2347EE6F0();
  sub_2347EE6F0();
  id v10 = objc_allocWithZone(MEMORY[0x263F83EE8]);
  uint64_t v11 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v10, sel_initWithString_, v11);

  if (!v12)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v9, sel_setObjectPath_, v12);

  sub_2347EE6F0();
  sub_2347EE6F0();
  sub_2347EE6F0();
  id v13 = objc_allocWithZone(MEMORY[0x263F83EE8]);
  unsigned __int8 v14 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithString_, v14);

  if (!v15)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v52 = v9;
  uint64_t v16 = *MEMORY[0x263F83FC0];
  id v17 = objc_msgSend(a6, sel_newNodeAtPath_type_specifier_, v15, *MEMORY[0x263F83FF0], *MEMORY[0x263F83FC0]);

  if (!v17)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v18 = (void *)sub_2347EE5F0();
  uint64_t v51 = v17;
  uint64_t v54 = *MEMORY[0x263F83FB0];
  id v19 = objc_msgSend(v17, sel_newPropertyWithName_type_role_, v18);

  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2347F19B0;
  id v21 = objc_allocWithZone(MEMORY[0x263F83EE8]);
  int64_t v22 = (void *)sub_2347EE5F0();
  id v23 = objc_msgSend(v21, sel_initWithString_, v22);

  if (!v23)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(void *)(v20 + 32) = v23;
  sub_2347EE7F0();
  if (v19)
  {
    sub_2346A9D9C(0, &qword_2687ACD00);
    id v24 = v19;
    id v25 = (void *)sub_2347EE7C0();
    swift_bridgeObjectRelease();
    objc_msgSend(v24, sel_setConnectionWithTargetPaths_, v25);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_2347EED50();
  swift_bridgeObjectRelease();
  sub_2347EE6F0();
  sub_2347EE6F0();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  sub_2347EE6F0();
  id v26 = objc_allocWithZone(MEMORY[0x263F83EE8]);
  int64_t v27 = (void *)sub_2347EE5F0();
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(v26, sel_initWithString_, v27);

  if (!v28) {
    goto LABEL_25;
  }
  id v29 = objc_msgSend(a6, sel_newNodeAtPath_type_specifier_, v28, *MEMORY[0x263F84000], v16);

  if (!v29)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  char v30 = (void *)sub_2347EE5F0();
  id v31 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v30, v54, 0);

  if (!v31)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  id v32 = objc_allocWithZone(MEMORY[0x263F83F08]);
  id v33 = (void *)sub_2347EE5F0();
  id v34 = objc_msgSend(v32, sel_initWithString_, v33);

  objc_msgSend(v31, sel_setTokenValue_, v34);
  char v35 = (void *)sub_2347EE5F0();
  uint64_t v36 = *MEMORY[0x263F83F50];
  uint64_t v37 = *MEMORY[0x263F84038];
  id v38 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v35, *MEMORY[0x263F83F50], *MEMORY[0x263F84038]);

  if (!v38)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  objc_msgSend(v38, sel_setFloat3Value_, a2);
  BOOL v39 = (void *)sub_2347EE5F0();
  id v40 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v39, v36, v37);

  if (!v40)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  objc_msgSend(v40, sel_setFloat3Value_, 0.0);
  uint64_t v41 = (void *)sub_2347EE5F0();
  id v42 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v41, v36, *MEMORY[0x263F84048]);

  if (!v42)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  objc_msgSend(v42, sel_setFloat3Value_, 0.00781250185);
  float32x4_t v43 = (void *)sub_2347EE5F0();
  uint64_t v44 = *MEMORY[0x263F83F40];
  id v45 = objc_msgSend(v29, sel_newPropertyWithName_type_role_, v43, *MEMORY[0x263F83F40], 0);

  if (!v45)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  LODWORD(v46) = 1.0;
  objc_msgSend(v45, sel_setFloatValue_, v46);
  uint64_t v47 = (void *)sub_2347EE5F0();
  id v48 = objc_msgSend(v29, (SEL)&selRef_computeTriangulation_ + 5, v47, v44, 0);

  if (!v48)
  {
LABEL_32:
    __break(1u);
    return;
  }
  *(float *)&double v49 = a3;
  objc_msgSend(v48, sel_setFloatValue_, v49);
  id v56 = (id)sub_2347EE5F0();
  id v50 = objc_msgSend(v29, (SEL)&selRef_computeTriangulation_ + 5, v56, v54, 0);
}

unint64_t sub_2346F1648()
{
  unint64_t result = qword_2687ACD18;
  if (!qword_2687ACD18)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2687ACD10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACD18);
  }
  return result;
}

unint64_t sub_2346F16A4()
{
  unint64_t result = qword_2687ACD20;
  if (!qword_2687ACD20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACD20);
  }
  return result;
}

uint64_t sub_2346F16F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346F1760@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2346E8B10(a1, *(void *)(v2 + 16), a2);
}

void sub_2346F177C(float32x4_t *a1@<X0>, void *a2@<X8>)
{
  sub_2346E7AAC(a1, v2[5].i64[0], a2, v2[1], v2[2], v2[3], v2[4]);
}

uint64_t sub_2346F17A4@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  return sub_2346F17BC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2346F17BC@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t result = sub_2347EB8FC(a1[2], a1[3], a1[4], a1[5], a1[1], v9[1], v9[2], v9[3], (uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, v9[4], *(float32x2_t *)(v9[5].i64[0] + 16));
  *a9 = result;
  return result;
}

uint64_t sub_2346F1814(uint64_t a1)
{
  return sub_2346E6580(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_2346F1834()
{
  return sub_2347ED570() & 1;
}

uint64_t sub_2346F1884(uint64_t a1)
{
  return sub_2346E5D88(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_2346F18A4(uint64_t a1)
{
  return sub_2346E6184(a1, *(void *)(v1 + 16)) & 1;
}

float32x4_t sub_2346F18C4@<Q0>(float32x2_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t result = vaddq_f32(*(float32x4_t *)(*(void *)(v2 + 16) + 80), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)(v2 + 16) + 32), COERCE_FLOAT(*(_OWORD *)a1->f32)), *(float32x4_t *)(*(void *)(v2 + 16) + 48), *a1, 1), *(float32x4_t *)(*(void *)(v2 + 16) + 64), *(float32x4_t *)a1->f32, 2));
  *a2 = result;
  return result;
}

uint64_t sub_2346F18EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_2346F1918(uint64_t a1)
{
  return a1;
}

unint64_t sub_2346F1944()
{
  unint64_t result = qword_2687ACD60;
  if (!qword_2687ACD60)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2687ACD58);
    sub_2346F19F0(&qword_2687ACD68, MEMORY[0x263F07508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACD60);
  }
  return result;
}

uint64_t sub_2346F19F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_2346F1A38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 7u:
      case 8u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = sub_2347ED490();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_2346F1D5C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      uint64_t v3 = sub_2347ED490();
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    case 7:
    case 8:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void *sub_2346F1E40(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 7u:
    case 8u:
      uint64_t v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = sub_2347ED490();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_2346F2114(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_2346F241C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for USDModel.Error);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 7u:
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = sub_2347ED490();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_2346F241C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_2346F247C(void *a1, const void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      uint64_t v6 = sub_2347ED490();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_2346F273C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_2346F241C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for USDModel.Error);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        uint64_t v6 = sub_2347ED490();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_2346F2A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_2346F2A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_2346F2A74()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_2346F2A84()
{
  uint64_t result = sub_2347ED490();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_2346F2B24()
{
  return sub_2346F19F0(&qword_2687ACCE8, (void (*)(uint64_t))type metadata accessor for USDModel.Error);
}

uint64_t sub_2346F2B6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2346F2BD4(uint64_t a1)
{
  return sub_2346F1884(a1) & 1;
}

uint64_t sub_2346F2BF0()
{
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *((void *)v0 + 6);
  if (*(void *)(v2 + 16) < 2uLL) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v4 = v2 + 64;
  char v5 = *(unsigned char *)(v2 + 32);
  uint64_t v6 = 1 << v5;
  uint64_t v7 = -1;
  if (1 << v5 < 64) {
    uint64_t v7 = ~(-1 << (1 << v5));
  }
  unint64_t v8 = v7 & *(void *)(v2 + 64);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = __clz(__rbit64(v8));
    unint64_t v11 = (v8 - 1) & v8;
  }
  else
  {
    unsigned int v12 = v5 & 0x3F;
    if (v12 < 7)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v13 = *(void *)(v2 + 72);
    if (v13)
    {
      uint64_t v9 = 1;
    }
    else
    {
      if (v12 < 8)
      {
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      unint64_t v13 = *(void *)(v2 + 80);
      if (v13)
      {
        uint64_t v9 = 2;
      }
      else
      {
        unint64_t v13 = *(void *)(v2 + 88);
        if (!v13)
        {
          uint64_t v14 = 0;
          unint64_t v15 = (unint64_t)(v6 + 63) >> 6;
          if (v15 <= 4) {
            unint64_t v15 = 4;
          }
          unint64_t v16 = v15 - 4;
          while (v16 != v14)
          {
            unint64_t v13 = *(void *)(v2 + 96 + 8 * v14++);
            if (v13)
            {
              uint64_t v9 = v14 + 3;
              goto LABEL_21;
            }
          }
          __break(1u);
          goto LABEL_40;
        }
        uint64_t v9 = 3;
      }
    }
LABEL_21:
    unint64_t v11 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v9 << 6);
  }
  uint64_t v17 = *(void *)(v2 + 56);
  double v18 = *(double *)(v17 + 8 * v10);
  if (v11)
  {
    unint64_t v19 = __clz(__rbit64(v11)) | (v9 << 6);
LABEL_34:
    double v23 = *(double *)(v17 + 8 * v19);
    double v24 = v0[2];
    float v25 = _simd_orient_vf2((simd_float2)vsub_f32(*(float32x2_t *)&v23, *(float32x2_t *)&v18), (simd_float2)vsub_f32(*(float32x2_t *)&v24, *(float32x2_t *)&v18));
    type metadata accessor for CDTTriangle();
    swift_allocObject();
    swift_bridgeObjectRetain();
    if (v25 >= 0.0)
    {
      id v26 = sub_234793A44(v18, v23, v24, 0.001);
      double v27 = v23;
      double v23 = v0[3];
    }
    else
    {
      id v26 = sub_234793A44(v18, v24, v23, 0.001);
      double v27 = v0[3];
    }
    swift_allocObject();
    id v28 = sub_234793A44(v18, v23, v27, 0.001);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AE8B0);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_2347F29D0;
    *(void *)(v29 + 32) = v26;
    *(void *)(v29 + 40) = v28;
    uint64_t v30 = v29;
    sub_2347EE7F0();
    uint64_t v3 = v30;
    swift_bridgeObjectRelease();
    return v3;
  }
  int64_t v20 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v21 = v9 + 1;
  if (v9 + 1 >= v20) {
    goto LABEL_42;
  }
  unint64_t v22 = *(void *)(v4 + 8 * v21);
  if (v22) {
    goto LABEL_33;
  }
  uint64_t v21 = v9 + 2;
  if (v9 + 2 >= v20)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unint64_t v22 = *(void *)(v4 + 8 * v21);
  if (v22)
  {
LABEL_33:
    unint64_t v19 = __clz(__rbit64(v22)) + (v21 << 6);
    goto LABEL_34;
  }
  uint64_t v21 = v9 + 3;
  if (v9 + 3 < v20)
  {
    unint64_t v22 = *(void *)(v4 + 8 * v21);
    if (!v22)
    {
      while (v20 - 4 != v9)
      {
        unint64_t v22 = *(void *)(v2 + 96 + 8 * v9++);
        if (v22)
        {
          uint64_t v21 = v9 + 3;
          goto LABEL_33;
        }
      }
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    goto LABEL_33;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_2346F2EE0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CDTTriangleEdge()
{
  return self;
}

uint64_t sub_2346F2F44(unint64_t a1)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_49;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
LABEL_3:
    unint64_t v4 = 0;
    char v5 = (uint64_t *)(v1 + 16);
    uint64_t v35 = v2;
    unint64_t v36 = v2 & 0xC000000000000001;
    uint64_t v32 = v2 + 32;
    uint64_t v33 = v2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v34 = v3;
    while (1)
    {
      if (v36)
      {
        uint64_t v6 = MEMORY[0x237DC6CF0](v4, v2);
        BOOL v7 = __OFADD__(v4++, 1);
        if (v7) {
          goto LABEL_47;
        }
      }
      else
      {
        if (v4 >= *(void *)(v33 + 16)) {
          goto LABEL_48;
        }
        uint64_t v6 = *(void *)(v32 + 8 * v4);
        swift_retain();
        BOOL v7 = __OFADD__(v4++, 1);
        if (v7) {
          goto LABEL_47;
        }
      }
      unint64_t v8 = *(void *)(v6 + 32);
      unint64_t v39 = v8;
      if (v8 >> 62) {
        break;
      }
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v9) {
        goto LABEL_14;
      }
LABEL_43:
      swift_release();
LABEL_5:
      swift_bridgeObjectRelease();
      if (v4 == v3) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_2347EEEC0();
    if (!v9) {
      goto LABEL_43;
    }
LABEL_14:
    unint64_t v37 = v4;
    unint64_t v10 = v39;
    unint64_t v11 = v39 & 0xC000000000000001;
    swift_beginAccess();
    unint64_t v12 = 0;
    uint64_t v38 = v9;
    while (1)
    {
      if (v11)
      {
        uint64_t v13 = MEMORY[0x237DC6CF0](v12, v10);
        BOOL v7 = __OFADD__(v12++, 1);
        if (v7) {
          goto LABEL_45;
        }
      }
      else
      {
        if (v12 >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_46;
        }
        uint64_t v13 = *(void *)(v39 + 32 + 8 * v12);
        swift_retain();
        BOOL v7 = __OFADD__(v12++, 1);
        if (v7)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          swift_bridgeObjectRetain();
          uint64_t v3 = sub_2347EEEC0();
          if (!v3) {
            break;
          }
          goto LABEL_3;
        }
      }
      sub_2347EF1C0();
      uint64_t v2 = *(void *)(v13 + 40);
      sub_2347EF1D0();
      uint64_t v14 = *(void *)(v2 + 16);
      if (v14)
      {
        v2 += 32;
        do
        {
          v2 += 8;
          sub_2347EF1F0();
          sub_2347EF1F0();
          --v14;
        }
        while (v14);
      }
      uint64_t v15 = sub_2347EF200();
      uint64_t v1 = *v5;
      if (*(void *)(*v5 + 16))
      {
        unint64_t v16 = sub_2347BFCB8(v15);
        if (v17)
        {
          unint64_t v18 = v11;
          uint64_t v19 = *(void *)(*(void *)(v1 + 56) + 8 * v16);
          uint64_t v2 = v19 + 48;
          swift_beginAccess();
          uint64_t v1 = *(void *)(v19 + 48);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          unint64_t v20 = sub_2347BFCFC(v6);
          char v22 = v21;
          swift_bridgeObjectRelease();
          if (v22)
          {
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v1 = *(void *)v2;
            uint64_t v40 = *(void *)v2;
            *(void *)uint64_t v2 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_2347D5000();
              uint64_t v1 = v40;
            }
            swift_release();
            sub_2347D3470(v20, v1);
            *(void *)uint64_t v2 = v1;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          if (*(void *)(*(void *)v2 + 16))
          {
            swift_release();
            unint64_t v10 = v39;
            unint64_t v11 = v18;
          }
          else
          {
            sub_2347EF1C0();
            uint64_t v24 = *(void *)(v19 + 40);
            sub_2347EF1D0();
            uint64_t v25 = *(void *)(v24 + 16);
            unint64_t v10 = v39;
            if (v25)
            {
              uint64_t v26 = v24 + 32;
              do
              {
                v26 += 8;
                sub_2347EF1F0();
                sub_2347EF1F0();
                --v25;
              }
              while (v25);
            }
            uint64_t v2 = sub_2347EF200();
            swift_beginAccess();
            uint64_t v1 = *v5;
            unint64_t v27 = sub_2347BFCB8(v2);
            unint64_t v11 = v18;
            if (v28)
            {
              unint64_t v29 = v27;
              char v30 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v1 = *v5;
              uint64_t v41 = *v5;
              *char v5 = 0x8000000000000000;
              if ((v30 & 1) == 0)
              {
                sub_2347D51A8();
                uint64_t v1 = v41;
              }
              sub_2347D36BC(v29, v1);
              uint64_t v2 = *v5;
              *char v5 = v1;
              swift_release();
              swift_bridgeObjectRelease();
              unint64_t v11 = v18;
            }
            swift_endAccess();
            swift_release();
          }
          uint64_t v9 = v38;
        }
      }
      swift_release();
      if (v12 == v9)
      {
        swift_release();
        uint64_t v3 = v34;
        uint64_t v2 = v35;
        unint64_t v4 = v37;
        goto LABEL_5;
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F33F0(unint64_t a1)
{
  float32x2_t v2 = (float32x2_t)a1;
  uint64_t v68 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_72;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_73:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
LABEL_3:
  unint64_t v4 = 0;
  char v5 = (void *)(v1 + 16);
  float32x2_t v57 = v2;
  unint64_t v58 = *(void *)&v2 & 0xC000000000000001;
  uint64_t v54 = *(void *)&v2 + 32;
  uint64_t v55 = *(void *)&v2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v56 = v3;
  while (1)
  {
    if (v58)
    {
      uint64_t v6 = MEMORY[0x237DC6CF0](v4, *(void *)&v2);
      BOOL v7 = __OFADD__(v4++, 1);
      if (v7) {
        goto LABEL_69;
      }
    }
    else
    {
      if (v4 >= *(void *)(v55 + 16)) {
        goto LABEL_71;
      }
      uint64_t v6 = *(void *)(v54 + 8 * v4);
      swift_retain();
      BOOL v7 = __OFADD__(v4++, 1);
      if (v7)
      {
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        swift_bridgeObjectRetain();
        uint64_t v3 = sub_2347EEEC0();
        if (!v3) {
          goto LABEL_73;
        }
        goto LABEL_3;
      }
    }
    unint64_t v1 = *(void *)(v6 + 32);
    if (v1 >> 62) {
      break;
    }
    uint64_t v8 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_14;
    }
LABEL_65:
    swift_release();
LABEL_5:
    swift_bridgeObjectRelease();
    if (v4 == v3)
    {
      swift_bridgeObjectRelease();
      return v68;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v8 = sub_2347EEEC0();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_65;
  }
LABEL_14:
  unint64_t v59 = v4;
  unint64_t v63 = v1 & 0xC000000000000001;
  swift_beginAccess();
  unint64_t v9 = 0;
  uint64_t v61 = v1 & 0xFFFFFFFFFFFFFF8;
  float64x2_t v62 = (void *)v1;
  uint64_t v60 = (void *)(v1 + 32);
  uint64_t v10 = MEMORY[0x263F8EE80];
  while (1)
  {
    if (v63)
    {
      unint64_t v11 = (double *)MEMORY[0x237DC6CF0](v9, v62);
      BOOL v7 = __OFADD__(v9++, 1);
      if (v7) {
        goto LABEL_67;
      }
    }
    else
    {
      if (v9 >= *(void *)(v61 + 16)) {
        goto LABEL_68;
      }
      unint64_t v11 = (double *)v60[v9];
      swift_retain();
      BOOL v7 = __OFADD__(v9++, 1);
      if (v7)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
    }
    sub_2347EF1C0();
    uint64_t v12 = *((void *)v11 + 5);
    sub_2347EF1D0();
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v14 = v12 + 32;
      do
      {
        v14 += 8;
        sub_2347EF1F0();
        sub_2347EF1F0();
        --v13;
      }
      while (v13);
    }
    uint64_t v15 = sub_2347EF200();
    uint64_t v16 = *v5;
    if (!*(void *)(*v5 + 16) || (unint64_t v17 = sub_2347BFCB8(v15), (v18 & 1) == 0))
    {
      double v22 = v11[2];
      double v23 = v11[3];
      type metadata accessor for CDTTriangleEdge();
      *(void *)(swift_allocObject() + 48) = v10;
      uint64_t v24 = (float32x2_t *)sub_23470AD70(v22, v23);
      uint64_t v25 = v24 + 6;
      swift_beginAccess();
      if (!*(void *)(*(void *)&v24[6] + 16)
        || (swift_retain(),
            swift_bridgeObjectRetain(),
            sub_2347BFCFC(v6),
            char v27 = v26,
            swift_release(),
            swift_bridgeObjectRelease(),
            (v27 & 1) == 0)
        && *(void *)(*(void *)v25 + 16) <= 1uLL)
      {
        char v28 = *(float32x2_t **)(v6 + 16);
        float32x2_t v29 = v28[2];
        if (v29)
        {
          char v30 = v28 + 4;
          while (1)
          {
            float32x2_t v31 = *v30;
            int32x2_t v32 = vceq_f32(*v30, v24[2]);
            if ((v32.i8[0] & 1) == 0 || (v32.i8[4] & 1) == 0)
            {
              int32x2_t v33 = vceq_f32(v31, v24[3]);
              if ((v33.i8[0] & 1) == 0 || (v33.i8[4] & 1) == 0) {
                break;
              }
            }
            ++v30;
            if (!--*(void *)&v29) {
              goto LABEL_45;
            }
          }
          swift_beginAccess();
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          float32x2_t v64 = *v25;
          *uint64_t v25 = (float32x2_t)0x8000000000000000;
          sub_2347AA7C0(v6, isUniquelyReferenced_nonNull_native, *(double *)&v31);
          *uint64_t v25 = v64;
          swift_release();
          swift_bridgeObjectRelease();
          swift_endAccess();
        }
      }
LABEL_45:
      sub_2347EF1C0();
      sub_23470B96C((uint64_t)v67, *((void *)v11 + 5));
      uint64_t v35 = sub_2347EF200();
      swift_beginAccess();
      swift_retain();
      char v36 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v65 = *v5;
      *char v5 = 0x8000000000000000;
      sub_2347AA914((uint64_t)v24, v35, v36);
      *char v5 = v65;
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v37 = swift_retain();
      unint64_t v1 = (unint64_t)&v68;
      MEMORY[0x237DC6730](v37);
      float32x2_t v2 = *(float32x2_t *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (*(void *)&v2 >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2347EE800();
      }
      sub_2347EE820();
      sub_2347EE7F0();
      swift_release();
      goto LABEL_18;
    }
    uint64_t v19 = *(float32x2_t **)(*(void *)(v16 + 56) + 8 * v17);
    float32x2_t v2 = (float32x2_t)&v19[6];
    swift_beginAccess();
    unint64_t v1 = (unint64_t)v19[6];
    uint64_t v20 = *(void *)(v1 + 16);
    swift_retain();
    if (!v20) {
      break;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    sub_2347BFCFC(v6);
    if (v21)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      if (v9 == v8)
      {
LABEL_4:
        swift_release();
        uint64_t v3 = v56;
        float32x2_t v2 = v57;
        unint64_t v4 = v59;
        unint64_t v1 = (unint64_t)v62;
        goto LABEL_5;
      }
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      if (*(void *)(**(void **)&v2 + 16) <= 1uLL) {
        break;
      }
LABEL_17:
      swift_release();
LABEL_18:
      swift_release();
      if (v9 == v8) {
        goto LABEL_4;
      }
    }
  }
  uint64_t v38 = *(float32x2_t **)(v6 + 16);
  float32x2_t v39 = v38[2];
  if (!*(void *)&v39) {
    goto LABEL_17;
  }
  uint64_t v40 = v38 + 4;
  while (1)
  {
    float32x2_t v41 = *v40;
    int32x2_t v42 = vceq_f32(*v40, v19[2]);
    if ((v42.i8[0] & 1) == 0 || (v42.i8[4] & 1) == 0)
    {
      int32x2_t v43 = vceq_f32(v41, v19[3]);
      if ((v43.i8[0] & 1) == 0 || (v43.i8[4] & 1) == 0) {
        break;
      }
    }
    ++v40;
    if (!--*(void *)&v39) {
      goto LABEL_17;
    }
  }
  swift_beginAccess();
  swift_retain();
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v1 = **(void **)&v2;
  float64x2_t v66 = **(void ***)&v2;
  **(void **)&float32x2_t v2 = 0x8000000000000000;
  unint64_t v46 = sub_2347BFCFC(v6);
  uint64_t v47 = *(void *)(v1 + 16);
  BOOL v48 = (v45 & 1) == 0;
  uint64_t v49 = v47 + v48;
  if (__OFADD__(v47, v48)) {
    goto LABEL_70;
  }
  char v50 = v45;
  if (*(void *)(v1 + 24) >= v49)
  {
    if ((v44 & 1) == 0) {
      sub_2347D5000();
    }
    goto LABEL_62;
  }
  sub_2347CE460(v49, v44);
  unint64_t v51 = sub_2347BFCFC(v6);
  if ((v50 & 1) == (v52 & 1))
  {
    unint64_t v46 = v51;
LABEL_62:
    uint64_t v10 = MEMORY[0x263F8EE80];
    unint64_t v1 = (unint64_t)v66;
    if (v50)
    {
      *(float32x2_t *)(v66[7] + 8 * v46) = v41;
    }
    else
    {
      sub_2347AC27C(v46, v6, v66, *(double *)&v41);
      swift_retain();
    }
    float32x2_t v2 = v19[6];
    v19[6] = (float32x2_t)v66;
    swift_release();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_17;
  }
  type metadata accessor for CDTTriangle();
  uint64_t result = sub_2347EF0F0();
  __break(1u);
  return result;
}

uint64_t sub_2346F3B04()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CDTTriangleEdgeManager()
{
  return self;
}

__n128 sub_2346F3B60()
{
  long long v7 = *(_OWORD *)(v0 + 48);
  long long v8 = *(_OWORD *)(v0 + 64);
  long long v5 = *(_OWORD *)(v0 + 16);
  long long v6 = *(_OWORD *)(v0 + 32);
  v1.n128_u64[0] = (unint64_t)vsub_f32(0, *(float32x2_t *)(v0 + 80));
  v1.n128_f32[2] = 0.0 - *(float *)(v0 + 88);
  v1.n128_u32[3] = 0;
  __n128 v4 = v1;
  type metadata accessor for RoomCaptureQuad();
  float32x2_t v2 = (_OWORD *)swift_allocObject();
  v2[1] = v5;
  v2[2] = v8;
  v2[3] = v7;
  v2[4] = v6;
  __n128 result = v4;
  v2[5] = v4;
  return result;
}

uint64_t sub_2346F3BE8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RoomCaptureQuad()
{
  return self;
}

__n128 sub_2346F3C1C(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, float a6)
{
  a1.n128_u64[1] = LODWORD(a6);
  __n128 v11 = a1;
  a2.n128_u64[1] = LODWORD(a6);
  a3.n128_u64[1] = LODWORD(a6);
  __n128 v9 = a3;
  __n128 v10 = a2;
  a4.n128_u64[1] = LODWORD(a6);
  __n128 v8 = a4;
  type metadata accessor for RoomCaptureQuad();
  uint64_t v6 = swift_allocObject();
  *(__n128 *)(v6 + 16) = v11;
  *(__n128 *)(v6 + 32) = v10;
  *(__n128 *)(v6 + 48) = v9;
  *(__n128 *)(v6 + 64) = v8;
  __n128 result = a5;
  *(__n128 *)(v6 + 80) = a5;
  return result;
}

__n128 sub_2346F3C94(float32x4_t a1, float32x4_t a2, __n128 a3, float32x4_t a4)
{
  float32x4_t v4 = a2;
  float32x4_t v6 = vsubq_f32(a2, a1);
  float32x4_t v7 = vmulq_f32(v6, v6);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0] < 1.4211e-14)
  {
    *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)a1.f32, (float32x2_t)0x3F80000000000000);
    v4.f32[2] = a1.f32[2] + 0.0;
    v4.i32[3] = 0;
  }
  float32x4_t v8 = vsubq_f32(a4, a1);
  float32x4_t v9 = vmulq_f32(v8, v8);
  float32x4_t v10 = vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1));
  float32x4_t v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v10);
  if (v11.f32[0] < 1.4211e-14)
  {
    *(float32x2_t *)a4.f32 = vadd_f32(*(float32x2_t *)a1.f32, 0);
    a4.f32[2] = a1.f32[2] + -1.0;
    a4.i32[3] = 0;
  }
  *(float32x2_t *)v11.f32 = vsub_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)a1.f32);
  v11.f32[2] = v4.f32[2] - a1.f32[2];
  *(float32x2_t *)v10.f32 = vsub_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)a1.f32);
  float32x4_t v22 = a4;
  v10.f32[2] = a4.f32[2] - a1.f32[2];
  float32x4_t v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v11)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  int32x4_t v14 = (int32x4_t)vmulq_f32(v12, v12);
  v14.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), *(float32x2_t *)v14.i8)).u32[0];
  float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
  float32x4_t v20 = v4;
  float32x4_t v21 = vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  float32x4_t v19 = a1;
  type metadata accessor for RoomCaptureQuad();
  uint64_t v17 = swift_allocObject();
  *(float32x4_t *)(v17 + 16) = v19;
  *(float32x4_t *)(v17 + 32) = v20;
  *(__n128 *)(v17 + 48) = a3;
  *(float32x4_t *)(v17 + 64) = v22;
  __n128 result = (__n128)v21;
  *(float32x4_t *)(v17 + 80) = v21;
  return result;
}

uint64_t sub_2346F3DFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v1 = sub_2347EE500();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  float32x4_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2347EE670();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  float32x4_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_2347EE4C0();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  MEMORY[0x270FA5388](v9);
  float32x4_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2347EE660();
  uint64_t v12 = sub_2347EE630();
  unint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v14 >> 60 == 15) {
LABEL_11:
  }
    __break(1u);
  uint64_t v15 = sub_2347ED4A0();
  unint64_t v17 = v16;
  sub_2346F6BC8(v12, v14);
  sub_2346F6BDC(&qword_2687ACE40, MEMORY[0x263F047F8]);
  sub_2347EE4B0();
  switch(v17 >> 62)
  {
    case 1uLL:
      if (v15 >> 32 < (int)v15)
      {
        __break(1u);
        goto LABEL_11;
      }
      sub_2346F550C(v15, v17);
      sub_2347482B4((int)v15, v15 >> 32);
LABEL_9:
      sub_2346C3748(v15, v17);
      sub_2347EE4A0();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      sub_2346C3748(v15, v17);
      sub_2346F6BDC(&qword_2687ACE48, MEMORY[0x263F045C0]);
      uint64_t v20 = v30;
      uint64_t v21 = sub_2347EE4F0();
      uint64_t v23 = sub_2347546C4(v21, v22);
      swift_bridgeObjectRelease();
      uint64_t v24 = sub_2347485EC(v23);
      uint64_t v26 = v25;
      swift_release();
      *(void *)&long long v32 = v24;
      *((void *)&v32 + 1) = v26;
      sub_2347EE4D0();
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v11, v20);
    case 2uLL:
      uint64_t v19 = *(void *)(v15 + 16);
      uint64_t v18 = *(void *)(v15 + 24);
      sub_2346F550C(v15, v17);
      swift_retain();
      swift_retain();
      sub_2347482B4(v19, v18);
      swift_release();
      swift_release();
      goto LABEL_9;
    case 3uLL:
      *(void *)((char *)&v32 + 6) = 0;
      *(void *)&long long v32 = 0;
      goto LABEL_8;
    default:
      *(void *)&long long v32 = v15;
      WORD4(v32) = v17;
      BYTE10(v32) = BYTE2(v17);
      BYTE11(v32) = BYTE3(v17);
      BYTE12(v32) = BYTE4(v17);
      BYTE13(v32) = BYTE5(v17);
LABEL_8:
      sub_2347EE490();
      goto LABEL_9;
  }
}

void CapturedRoomData.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  float64x2_t v71 = a2;
  uint64_t v83 = sub_2347EEDB0();
  uint64_t v75 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  float32x4_t v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD90);
  uint64_t v72 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_2347EE4E0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  float32x4_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2346F3DFC((uint64_t)v11);
  uint64_t v12 = a1[3];
  uint64_t v74 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_2346F5308();
  unint64_t v13 = v73;
  sub_2347EF220();
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v14 = v83;
    swift_allocError();
    uint64_t v19 = v18;
    sub_2347EED90();
    (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v19, *MEMORY[0x263F8DCB8], v14);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    swift_bridgeObjectRelease();
    return;
  }
  BOOL v73 = v4;
  uint64_t v68 = v11;
  uint64_t v69 = v9;
  uint64_t v70 = v8;
  LOBYTE(v81) = 1;
  unint64_t v15 = sub_2346F535C();
  sub_2347EEFB0();
  unint64_t v66 = v15;
  float64x2_t v67 = v7;
  long long v16 = v76[0];
  sub_2346F550C(*(uint64_t *)&v76[0], *((unint64_t *)&v76[0] + 1));
  uint64_t v17 = sub_2346F53B0(v16, *((unint64_t *)&v16 + 1));
  uint64_t v65 = v5;
  uint64_t v64 = v16;
  uint64_t v20 = v17;
  unint64_t v22 = v21;
  uint64_t v23 = sub_2347EE450();
  unint64_t v25 = v24;
  uint64_t v61 = v20;
  unint64_t v62 = v22;
  unint64_t v63 = *((void *)&v16 + 1);
  uint64_t v26 = sub_2346A9D9C(0, &qword_2687AE100);
  sub_2347EE9C0();
  unint64_t v27 = v25;
  uint64_t v28 = v23;
  uint64_t v29 = v67;
  if (!v82)
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_2346C3738(&v81, v76);
  sub_2346A9D9C(0, &qword_2687ACDB0);
  swift_dynamicCast();
  LOBYTE(v81) = 0;
  id v30 = (id)v79;
  sub_2347EEFB0();
  uint64_t v60 = v26;
  long long v31 = v76[0];
  sub_2346F550C(*(uint64_t *)&v76[0], *((unint64_t *)&v76[0] + 1));
  uint64_t v32 = sub_2346F53B0(v31, *((unint64_t *)&v31 + 1));
  unint64_t v59 = *((void *)&v31 + 1);
  uint64_t v33 = v32;
  unint64_t v35 = v34;
  uint64_t v36 = sub_2347EE450();
  uint64_t v57 = v33;
  unint64_t v58 = v35;
  uint64_t v37 = v36;
  unint64_t v39 = v38;
  sub_2347EE9C0();
  uint64_t v54 = v37;
  uint64_t v55 = v31;
  uint64_t v56 = v28;
  sub_2346F5564((uint64_t)&v81, (uint64_t)&v79);
  if (!v80)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_2346C3738(&v79, v76);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACDC0);
  swift_dynamicCast();
  uint64_t v40 = (void *)sub_2347EE510();
  swift_bridgeObjectRelease();
  id v41 = (id)RSKeyframeSequenceFromDictionary();

  if (!v41)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_2347ED5C0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE400);
  sub_2346F6BDC(&qword_2687ACDD0, MEMORY[0x263F07508]);
  sub_2347EE520();

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v79) = 2;
  sub_2347EEFB0();
  long long v42 = v76[0];
  sub_2346F550C(*(uint64_t *)&v76[0], *((unint64_t *)&v76[0] + 1));
  uint64_t v52 = sub_2346F53B0(v42, *((unint64_t *)&v42 + 1));
  unint64_t v53 = v43;
  uint64_t v50 = sub_2347EE450();
  unint64_t v51 = v44;
  sub_2347EE9C0();
  unint64_t v66 = 0;
  if (v78)
  {
    sub_2346C3748(v50, v51);
    sub_2346C3748(v52, v53);
    sub_2346C3748(v54, v39);
    sub_2346C3748(v57, v58);
    sub_2346C3748(v56, v27);
    sub_2346C3748(v61, v62);
    sub_2346C3748(v42, *((unint64_t *)&v42 + 1));
    sub_2346C3748(v55, v59);
    sub_2346C3748(v64, v63);
    sub_2346A7C30((uint64_t)&v81, &qword_2687ACDB8);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v29, v65);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
    sub_2346C3738(&v77, &v79);
    type metadata accessor for simd_float4x4(0);
    swift_dynamicCast();
    long long v47 = v76[0];
    long long v46 = v76[1];
    long long v49 = v76[2];
    long long v48 = v76[3];
    char v45 = v71;
    *float64x2_t v71 = v31;
    v45[1] = v30;
    *((_OWORD *)v45 + 1) = v47;
    *((_OWORD *)v45 + 2) = v46;
    *((_OWORD *)v45 + 3) = v49;
    *((_OWORD *)v45 + 4) = v48;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);

    swift_bridgeObjectRelease();
    return;
  }
LABEL_11:
  __break(1u);
}

unint64_t sub_2346F5308()
{
  unint64_t result = qword_2687ACD98;
  if (!qword_2687ACD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACD98);
  }
  return result;
}

unint64_t sub_2346F535C()
{
  unint64_t result = qword_2687ACDA0;
  if (!qword_2687ACDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACDA0);
  }
  return result;
}

uint64_t sub_2346F53B0(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x2346F54FCLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 > 27) {
        return sub_23472D2A0(a1, a2);
      }
LABEL_7:
      uint64_t v8 = sub_2347EE480();
      sub_2346F6BDC(&qword_2687ACE38, MEMORY[0x263F04548]);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, *MEMORY[0x263F04538], v8);
      swift_willThrow();
      return sub_2346C3748(a1, a2);
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_2346F550C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_2346F5564(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACDB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void CapturedRoomData.encode(to:)(void *a1)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACDE8);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v86 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v91 = (unint64_t)&v77 - v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v100 = (uint64_t)&v77 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACDF0);
  uint64_t v98 = *(void *)(v9 - 8);
  uint64_t v99 = v9;
  MEMORY[0x270FA5388](v9);
  float32x4_t v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2347EE4E0();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t)v1[1];
  float32x4_t v92 = *v1;
  long long v90 = *((_OWORD *)v1 + 1);
  long long v89 = *((_OWORD *)v1 + 2);
  long long v88 = *((_OWORD *)v1 + 3);
  long long v87 = *((_OWORD *)v1 + 4);
  sub_2346F3DFC((uint64_t)v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2346F5308();
  sub_2347EF230();
  uint64_t v17 = self;
  *(void *)&v102[0] = 0;
  id v18 = objc_msgSend(v17, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v16, 0, v102);
  id v19 = *(id *)&v102[0];
  if (!v18)
  {
    uint64_t v32 = v19;
    long long v31 = (void *)sub_2347ED350();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v11, v99);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    goto LABEL_6;
  }
  id v85 = v17;
  uint64_t v95 = v12;
  uint64_t v96 = v11;
  uint64_t v93 = v13;
  uint64_t v20 = sub_2347ED4C0();
  unint64_t v22 = v21;

  *(void *)&v102[0] = v20;
  *((void *)&v102[0] + 1) = v22;
  unint64_t v94 = v22;
  uint64_t v23 = sub_2347EE470();
  uint64_t v24 = *(void *)(v23 - 8);
  unint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v26 = v24 + 56;
  v25(v100, 1, 1, v23);
  unint64_t v27 = sub_2346F62EC();
  uint64_t v28 = v97;
  uint64_t v29 = sub_2347EE460();
  if (v28)
  {
    sub_2346A7C30(v100, &qword_2687ACDE8);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v96, v99);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v15, v95);
    sub_2346C3748(v20, v94);
    long long v31 = (void *)v28;
LABEL_6:
    uint64_t v35 = sub_2347EEDD0();
    swift_allocError();
    uint64_t v37 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACDF8);
    v37[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACE00);
    *uint64_t v37 = &type metadata for CapturedRoomData;
    sub_2347EED90();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x263F8DCE0], v35);
    swift_willThrow();

    return;
  }
  uint64_t v33 = v29;
  unint64_t v34 = v30;
  unint64_t v81 = v27;
  uint64_t v82 = v26;
  uint64_t v83 = (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v25;
  uint64_t v84 = v23;
  uint64_t v97 = v20;
  sub_2346A7C30(v100, &qword_2687ACDE8);
  *(void *)&v102[0] = v33;
  *((void *)&v102[0] + 1) = v34;
  char v101 = 1;
  sub_2346F550C(v33, v34);
  sub_2346F6340();
  sub_2347EF030();
  uint64_t v100 = v33;
  sub_2346C3748(v33, v34);
  sub_2347ED5C0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE400);
  sub_2346F6BDC(&qword_2687ACDD0, MEMORY[0x263F07508]);
  unint64_t v38 = (void *)sub_2347EE510();
  id v39 = (id)RSKeyframeSequenceToDictionary();

  unint64_t v80 = v34;
  uint64_t v40 = v15;
  if (v39)
  {
    uint64_t v41 = sub_2347EE520();
  }
  else
  {
    uint64_t v41 = 0;
  }
  unint64_t v42 = v94;
  id v43 = v85;
  *(void *)&v102[0] = v41;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE290);
  uint64_t v44 = sub_2347EEB00();
  swift_bridgeObjectRelease();
  *(void *)&v102[0] = 0;
  id v45 = objc_msgSend(v43, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v44, 1, v102);
  swift_unknownObjectRelease();
  id v46 = *(id *)&v102[0];
  if (!v45)
  {
    uint64_t v54 = v46;
    long long v31 = (void *)sub_2347ED350();

    swift_willThrow();
    sub_2346C3748(v97, v42);
    sub_2346C3748(v100, v80);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v96, v99);
    uint64_t v55 = *(void (**)(char *, uint64_t))(v93 + 8);
    uint64_t v56 = v15;
LABEL_13:
    v55(v56, v95);
    goto LABEL_6;
  }
  uint64_t v47 = sub_2347ED4C0();
  unint64_t v49 = v48;

  *(void *)&v102[0] = v47;
  *((void *)&v102[0] + 1) = v49;
  uint64_t v50 = v91;
  v83(v91, 1, 1, v84);
  uint64_t v51 = sub_2347EE460();
  uint64_t v52 = v99;
  unint64_t v53 = v96;
  unint64_t v58 = v57;
  float32x4_t v92 = v40;
  uint64_t v78 = v47;
  unint64_t v79 = v49;
  uint64_t v59 = v51;
  sub_2346A7C30(v50, &qword_2687ACDE8);
  *(void *)&v102[0] = v59;
  *((void *)&v102[0] + 1) = v58;
  char v101 = 0;
  sub_2346F550C(v59, v58);
  sub_2347EF030();
  uint64_t v60 = v52;
  uint64_t v61 = v53;
  sub_2346C3748(v59, v58);
  v102[0] = v90;
  v102[1] = v89;
  v102[2] = v88;
  v102[3] = v87;
  type metadata accessor for simd_float4x4(0);
  uint64_t v62 = sub_2347EF0D0();
  *(void *)&v102[0] = 0;
  id v63 = objc_msgSend(v85, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v62, 0, v102);
  swift_unknownObjectRelease();
  id v64 = *(id *)&v102[0];
  uint64_t v65 = v92;
  if (!v63)
  {
    uint64_t v70 = v64;
    long long v31 = (void *)sub_2347ED350();

    swift_willThrow();
    sub_2346C3748(v78, v79);
    sub_2346C3748(v97, v94);
    sub_2346C3748(v59, v58);
    sub_2346C3748(v100, v80);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v61, v60);
    uint64_t v55 = *(void (**)(char *, uint64_t))(v93 + 8);
    uint64_t v56 = v65;
    goto LABEL_13;
  }
  *(void *)&long long v90 = v59;
  unint64_t v91 = v58;
  uint64_t v66 = sub_2347ED4C0();
  unint64_t v68 = v67;

  *(void *)&v102[0] = v66;
  *((void *)&v102[0] + 1) = v68;
  uint64_t v69 = (uint64_t)v86;
  v83((unint64_t)v86, 1, 1, v84);
  uint64_t v71 = sub_2347EE460();
  unint64_t v73 = v72;
  sub_2346A7C30(v69, &qword_2687ACDE8);
  *(void *)&v102[0] = v71;
  *((void *)&v102[0] + 1) = v73;
  char v101 = 2;
  sub_2346F550C(v71, v73);
  uint64_t v74 = v99;
  uint64_t v75 = v96;
  sub_2347EF030();
  uint64_t v76 = v98;
  sub_2346C3748(v66, v68);
  sub_2346C3748(v78, v79);
  sub_2346C3748(v97, v94);
  sub_2346C3748(v71, v73);
  sub_2346C3748(v90, v91);
  sub_2346C3748(v100, v80);
  sub_2346C3748(v71, v73);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v74);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v92, v95);
}

unint64_t sub_2346F62EC()
{
  unint64_t result = qword_2687ACE08;
  if (!qword_2687ACE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE08);
  }
  return result;
}

unint64_t sub_2346F6340()
{
  unint64_t result = qword_2687ACE10;
  if (!qword_2687ACE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE10);
  }
  return result;
}

uint64_t sub_2346F6394(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_234724D10(*a1, *a2);
}

uint64_t sub_2346F63A0()
{
  return sub_2347EF200();
}

uint64_t sub_2346F6448()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F64DC()
{
  return sub_2347EF200();
}

uint64_t sub_2346F6580@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2346F6B7C();
  *a1 = result;
  return result;
}

void sub_2346F65B0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000073;
  int v3 = *v1;
  unint64_t v4 = 0x6573734165726F63;
  unint64_t v5 = 0x80000002347FBB70;
  if (v3 == 1) {
    unint64_t v5 = 0xE900000000000074;
  }
  else {
    unint64_t v4 = 0xD000000000000018;
  }
  BOOL v6 = v3 == 0;
  if (*v1) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 0x656D61726679656BLL;
  }
  if (!v6) {
    unint64_t v2 = v5;
  }
  *a1 = v7;
  a1[1] = v2;
}

uint64_t sub_2346F6614()
{
  unint64_t v1 = 0x6573734165726F63;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000018;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656D61726679656BLL;
  }
}

uint64_t sub_2346F6674@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_2346F6B7C();
  *a1 = result;
  return result;
}

uint64_t sub_2346F669C()
{
  return 0;
}

void sub_2346F66A8(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_2346F66B4(uint64_t a1)
{
  unint64_t v2 = sub_2346F5308();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2346F66F0(uint64_t a1)
{
  unint64_t v2 = sub_2346F5308();

  return MEMORY[0x270FA00B8](a1, v2);
}

void sub_2346F672C(void *a1@<X0>, void *a2@<X8>)
{
}

void sub_2346F6744(void *a1)
{
}

void destroy for CapturedRoomData(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 8);
}

uint64_t initializeWithCopy for CapturedRoomData(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  id v6 = v3;
  return a1;
}

uint64_t assignWithCopy for CapturedRoomData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a2 + 8);
  long long v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy80_16(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CapturedRoomData(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = a2[4];
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_OWORD *)(a1 + 64) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for CapturedRoomData(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CapturedRoomData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CapturedRoomData()
{
  return &type metadata for CapturedRoomData;
}

unsigned char *storeEnumTagSinglePayload for CapturedRoomData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346F6A3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CapturedRoomData.CodingKeys()
{
  return &type metadata for CapturedRoomData.CodingKeys;
}

unint64_t sub_2346F6A78()
{
  unint64_t result = qword_2687ACE20;
  if (!qword_2687ACE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE20);
  }
  return result;
}

unint64_t sub_2346F6AD0()
{
  unint64_t result = qword_2687ACE28;
  if (!qword_2687ACE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE28);
  }
  return result;
}

unint64_t sub_2346F6B28()
{
  unint64_t result = qword_2687ACE30;
  if (!qword_2687ACE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE30);
  }
  return result;
}

uint64_t sub_2346F6B7C()
{
  unint64_t v0 = sub_2347EEF30();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_2346F6BC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_2346C3748(a1, a2);
  }
  return a1;
}

uint64_t sub_2346F6BDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2346F6C28()
{
  if (*v0) {
    return 0x7463656A626FLL;
  }
  else {
    return 0x65636166727573;
  }
}

uint64_t sub_2346F6C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2346FF850(a1, a2);
  *a3 = result;
  return result;
}

void sub_2346F6C88(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2346F6C94(uint64_t a1)
{
  unint64_t v2 = sub_2346FC7A0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2346F6CD0(uint64_t a1)
{
  unint64_t v2 = sub_2346FC7A0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2346F6D0C()
{
  return 1;
}

uint64_t sub_2346F6D18()
{
  return sub_2347EF1D0();
}

uint64_t sub_2346F6D44()
{
  return 12383;
}

void sub_2346F6D54(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_2346F6D60(uint64_t a1)
{
  unint64_t v2 = sub_2346FC7F4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2346F6D9C(uint64_t a1)
{
  unint64_t v2 = sub_2346FC7F4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2346F6DD8()
{
  return sub_2347EF200();
}

uint64_t sub_2346F6E1C()
{
  return sub_2347EF200();
}

uint64_t sub_2346F6E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_2347EF090();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2346F6EDC(uint64_t a1)
{
  unint64_t v2 = sub_2346FC89C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2346F6F18(uint64_t a1)
{
  unint64_t v2 = sub_2346FC89C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CapturedElementCategory.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACE50);
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x270FA5388](v3);
  char v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACE58);
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v18 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACE60);
  uint64_t v9 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  float32x4_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v22 = *v1;
  unsigned __int8 v12 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2346FC7A0();
  sub_2347EF230();
  if (v12)
  {
    char v26 = 1;
    sub_2346FC7F4();
    uint64_t v13 = v21;
    sub_2347EEFE0();
    char v25 = v22;
    sub_2346FC848();
    uint64_t v14 = v20;
    sub_2347EF030();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v14);
  }
  else
  {
    char v24 = 0;
    sub_2346FC89C();
    uint64_t v13 = v21;
    sub_2347EEFE0();
    char v23 = v22;
    sub_2346FC8F0();
    uint64_t v15 = v18;
    sub_2347EF030();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v13);
}

uint64_t CapturedElementCategory.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  char v25 = a2;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACE90);
  uint64_t v28 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACE98);
  uint64_t v27 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACEA0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  float32x4_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_2346FC7A0();
  uint64_t v13 = v30;
  sub_2347EF220();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  uint64_t v30 = v9;
  uint64_t v14 = sub_2347EEFD0();
  if (*(void *)(v14 + 16) != 1)
  {
    uint64_t v18 = sub_2347EEDB0();
    swift_allocError();
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACEA8);
    *uint64_t v20 = &type metadata for CapturedElementCategory;
    sub_2347EEF50();
    sub_2347EED90();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x263F8DCB0], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  v24[1] = v14;
  char v15 = *(unsigned char *)(v14 + 32);
  if (v15)
  {
    char v34 = 1;
    sub_2346FC7F4();
    sub_2347EEF40();
    sub_2346FC944();
    uint64_t v16 = v26;
    sub_2347EEFB0();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
    char v17 = v33;
  }
  else
  {
    char v32 = 0;
    sub_2346FC89C();
    sub_2347EEF40();
    sub_2346FC998();
    sub_2347EEFB0();
    uint64_t v22 = v30;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v8);
    char v17 = v31;
  }
  char v23 = v25;
  *char v25 = v17;
  v23[1] = v15;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
}

uint64_t sub_2346F7794@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return CapturedElementCategory.init(from:)(a1, a2);
}

uint64_t sub_2346F77AC(void *a1)
{
  return CapturedElementCategory.encode(to:)(a1);
}

uint64_t sub_2346F77C8()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_2346F77F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_2346F780C()
{
  return *(void *)(v0 + 16);
}

void sub_2346F7818(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t sub_2346F7828()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  sub_2347EF1C0();
  sub_2347EE6C0();
  sub_2347EF1E0();
  if (v1 != 1) {
    sub_2347EF1D0();
  }
  return sub_2347EF200();
}

uint64_t sub_2346F78B4()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  sub_2347EE6C0();
  if (v1 == 1) {
    return sub_2347EF1E0();
  }
  sub_2347EF1E0();
  return sub_2347EF1D0();
}

uint64_t sub_2346F7918()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  sub_2347EF1C0();
  sub_2347EE6C0();
  sub_2347EF1E0();
  if (v1 != 1) {
    sub_2347EF1D0();
  }
  return sub_2347EF200();
}

void *sub_2346F79A0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[1];
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_2346F79B8(uint64_t a1)
{
  unint64_t v2 = sub_2346FC9EC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2346F79F4(uint64_t a1)
{
  unint64_t v2 = sub_2346FC9EC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2346F7A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  BOOL v6 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v6 || (v7 = sub_2347EF090(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v3)
    {
      if (v5) {
        return 1;
      }
    }
    else
    {
      if (v2 == v4) {
        char v9 = v5;
      }
      else {
        char v9 = 1;
      }
      if ((v9 & 1) == 0) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t CapturedRoom.AttributesCodableRepresentation.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CapturedRoom.AttributesCodableRepresentation.init(attributes:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CapturedRoom.AttributesCodableRepresentation.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACEC0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2346FC9EC();
  sub_2347EF220();
  if (!v2)
  {
    unint64_t v42 = a2;
    uint64_t v39 = qword_26E7701C0;
    if (qword_26E7701C0)
    {
      unint64_t v9 = 0;
      long long v38 = xmmword_2347F0FA0;
      long long v37 = xmmword_2347F19A0;
      long long v36 = xmmword_2347F1A10;
      id v46 = (void *)MEMORY[0x263F8EE78];
      uint64_t v41 = a1;
      uint64_t v40 = v6;
      uint64_t v44 = v8;
      do
      {
        if (v9 >= qword_26E7701C0)
        {
          __break(1u);
          JUMPOUT(0x2346F8110);
        }
        unint64_t v43 = v9 + 1;
        uint64_t v11 = MEMORY[0x263F8EE78];
        switch(*((unsigned char *)&unk_26E7701B0 + v9 + 32))
        {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xD:
          case 0xE:
          case 0xF:
            break;
          case 0xA:
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED8);
            uint64_t v11 = swift_allocObject();
            *(_OWORD *)(v11 + 16) = v37;
            unint64_t v29 = sub_2346FCA94();
            *(void *)(v11 + 32) = &type metadata for TableType;
            *(void *)(v11 + 40) = v29;
            unint64_t v30 = sub_2346FCAE8();
            *(void *)(v11 + 48) = &type metadata for TableShapeType;
            *(void *)(v11 + 56) = v30;
            break;
          case 0xB:
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED8);
            uint64_t v11 = swift_allocObject();
            *(_OWORD *)(v11 + 16) = v38;
            unint64_t v27 = sub_2346FCB3C();
            uint64_t v28 = &type metadata for SofaType;
            goto LABEL_21;
          case 0xC:
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED8);
            uint64_t v11 = swift_allocObject();
            *(_OWORD *)(v11 + 16) = v36;
            unint64_t v31 = sub_2346FCB90();
            *(void *)(v11 + 32) = &type metadata for ChairType;
            *(void *)(v11 + 40) = v31;
            unint64_t v32 = sub_2346FCBE4();
            *(void *)(v11 + 48) = &type metadata for ChairBackType;
            *(void *)(v11 + 56) = v32;
            unint64_t v33 = sub_2346FCC38();
            *(void *)(v11 + 64) = &type metadata for ChairLegType;
            *(void *)(v11 + 72) = v33;
            unint64_t v34 = sub_2346FCC8C();
            *(void *)(v11 + 80) = &type metadata for ChairArmType;
            *(void *)(v11 + 88) = v34;
            break;
          default:
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED8);
            uint64_t v11 = swift_allocObject();
            *(_OWORD *)(v11 + 16) = v38;
            unint64_t v27 = sub_2346FCA40();
            uint64_t v28 = &type metadata for StorageType;
LABEL_21:
            *(void *)(v11 + 32) = v28;
            *(void *)(v11 + 40) = v27;
            break;
        }
        uint64_t v54 = *(void *)(v11 + 16);
        if (v54)
        {
          uint64_t v12 = 0;
          uint64_t v45 = v11;
          do
          {
            long long v47 = *(_OWORD *)(v11 + 16 * v12 + 32);
            long long v51 = v47;
            __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED0);
            *(void *)&long long v51 = sub_2347EE690();
            *((void *)&v51 + 1) = v13;
            uint64_t v52 = 0;
            char v53 = 1;
            uint64_t v14 = sub_2347EEF60();
            uint64_t v16 = v15;
            swift_bridgeObjectRelease();
            if (v16)
            {
              uint64_t v48 = v14;
              uint64_t v49 = v16;
              uint64_t v17 = v47;
              uint64_t v18 = sub_2347EEB10();
              uint64_t v19 = *(void *)(v18 - 8);
              MEMORY[0x270FA5388](v18);
              uint64_t v21 = (char *)&v36 - v20;
              sub_2347EE760();
              uint64_t v22 = *(void *)(v17 - 8);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v17) == 1)
              {
                (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
                uint64_t v8 = v44;
                uint64_t v11 = v45;
              }
              else
              {
                *(_OWORD *)&v50[3] = v47;
                boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v50);
                (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_1, v21, v17);
                sub_2346A1E30((long long *)v50, (uint64_t)&v51);
                sub_2346A1DCC((uint64_t)&v51, (uint64_t)v50);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  id v46 = sub_2346FBFF8(0, v46[2] + 1, 1, v46, &qword_2687AD1F8, &qword_2687AD200);
                }
                uint64_t v8 = v44;
                uint64_t v11 = v45;
                unint64_t v25 = v46[2];
                unint64_t v24 = v46[3];
                if (v25 >= v24 >> 1) {
                  id v46 = sub_2346FBFF8((void *)(v24 > 1), v25 + 1, 1, v46, &qword_2687AD1F8, &qword_2687AD200);
                }
                uint64_t v26 = v46;
                double v46[2] = v25 + 1;
                sub_2346A1E30((long long *)v50, (uint64_t)&v26[5 * v25 + 4]);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
              }
            }
            ++v12;
          }
          while (v54 != v12);
        }
        swift_bridgeObjectRelease();
        uint64_t v10 = v42;
        unint64_t v9 = v43;
        a1 = v41;
        uint64_t v6 = v40;
      }
      while (v43 != v39);
    }
    else
    {
      id v46 = (void *)MEMORY[0x263F8EE78];
      uint64_t v10 = v42;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *uint64_t v10 = v46;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CapturedRoom.AttributesCodableRepresentation.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACF00);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2346FC9EC();
  sub_2347EF230();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  if (!v10) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v22 = v5;
  uint64_t v11 = v9 + 32;
  uint64_t v14 = v9;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_2346A1DCC(v11, (uint64_t)v19);
    __swift_project_boxed_opaque_existential_1(v19, v20);
    sub_2347EE750();
    __swift_project_boxed_opaque_existential_1(v19, v20);
    uint64_t DynamicType = swift_getDynamicType();
    uint64_t v16 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED0);
    uint64_t DynamicType = sub_2347EE690();
    uint64_t v16 = v12;
    uint64_t v17 = 0;
    char v18 = 1;
    sub_2347EEFF0();
    if (v2) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    v11 += 40;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = v22;
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

uint64_t sub_2346F83A8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return CapturedRoom.AttributesCodableRepresentation.init(from:)(a1, a2);
}

uint64_t sub_2346F83C0(void *a1)
{
  return CapturedRoom.AttributesCodableRepresentation.encode(to:)(a1);
}

uint64_t sub_2346F83D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(boxed_opaque_existential_1, a1, a2);
}

uint64_t sub_2346F8444()
{
  sub_2347EF1C0();
  sub_2346A1DCC((uint64_t)v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED0);
  sub_2347EE690();
  sub_2347EE6C0();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_2347EE750();
  sub_2347EE6C0();
  swift_bridgeObjectRelease();
  return sub_2347EF200();
}

uint64_t sub_2346F8534()
{
  sub_2346A1DCC((uint64_t)v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED0);
  sub_2347EE690();
  sub_2347EE6C0();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_2347EE750();
  sub_2347EE6C0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F861C()
{
  sub_2347EF1C0();
  sub_2346A1DCC((uint64_t)v0, (uint64_t)v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED0);
  sub_2347EE690();
  sub_2347EE6C0();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  sub_2347EE750();
  sub_2347EE6C0();
  swift_bridgeObjectRelease();
  return sub_2347EF200();
}

BOOL sub_2346F8708()
{
  uint64_t v0 = sub_2346F8444();
  return v0 == sub_2346F8444();
}

uint64_t sub_2346F874C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 24))(&DynamicType);
  if (BYTE1(DynamicType) <= 0xFEu)
  {
    uint64_t DynamicType = sub_2347EE690();
    uint64_t v6 = v3;
    sub_2347EE6F0();
    swift_getDynamicType();
    swift_getMetatypeMetadata();
    sub_2347EE690();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t DynamicType = swift_getDynamicType();
    swift_getMetatypeMetadata();
    uint64_t DynamicType = sub_2347EE690();
    uint64_t v6 = v2;
  }
  sub_2347EE6F0();
  sub_2347EE750();
  sub_2347EE6F0();
  swift_bridgeObjectRelease();
  return DynamicType;
}

uint64_t ChairType.shortIdentifier.getter()
{
  uint64_t result = 0x6843676E696E6964;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C6F6F7473;
      break;
    case 2:
      uint64_t result = 0x6C6576697773;
      break;
    case 3:
      uint64_t result = 0x69746E6564696E75;
      break;
    default:
      return result;
  }
  return result;
}

RoomPlan::ChairType_optional __swiftcall ChairType.init(rawValue:)(Swift::String rawValue)
{
  return (RoomPlan::ChairType_optional)sub_2346F9D1C(v1);
}

void *static ChairType.allCases.getter()
{
  return &unk_26E770EA8;
}

uint64_t ChairType.rawValue.getter()
{
  uint64_t result = 0x676E696E6964;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C6F6F7473;
      break;
    case 2:
      uint64_t result = 0x6C6576697773;
      break;
    case 3:
      uint64_t result = 0x69746E6564696E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2346F89DC(unsigned __int8 *a1, char *a2)
{
  return sub_234723EF8(*a1, *a2);
}

uint64_t sub_2346F89E8()
{
  return sub_2347EF200();
}

uint64_t sub_2346F8ABC()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F8B78()
{
  return sub_2347EF200();
}

RoomPlan::ChairType_optional sub_2346F8C48(Swift::String *a1)
{
  return ChairType.init(rawValue:)(*a1);
}

void sub_2346F8C54(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x676E696E6964;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6C6F6F7473;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6C6576697773;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 3:
      strcpy((char *)a1, "unidentified");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_2346F8CE8(_WORD *a1@<X8>)
{
  *a1 = 268;
}

uint64_t sub_2346F8CF4()
{
  uint64_t result = 0x6843676E696E6964;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6C6F6F7473;
      break;
    case 2:
      uint64_t result = 0x6C6576697773;
      break;
    case 3:
      uint64_t result = 0x69746E6564696E75;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2346F8D8C(void *a1@<X8>)
{
  *a1 = &unk_26E770ED0;
}

uint64_t ChairLegType.shortIdentifier.getter()
{
  unint64_t v1 = 0x7367654C72617473;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7367654C72756F66;
  }
}

RoomPlan::ChairLegType_optional __swiftcall ChairLegType.init(rawValue:)(Swift::String rawValue)
{
  return (RoomPlan::ChairLegType_optional)sub_2346F98D0(v1);
}

void *static ChairLegType.allCases.getter()
{
  return &unk_26E770EF8;
}

uint64_t ChairLegType.rawValue.getter()
{
  uint64_t v1 = 1918989427;
  if (*v0 != 1) {
    uint64_t v1 = 0x69746E6564696E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1920298854;
  }
}

uint64_t sub_2346F8E68(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_234724AB8(*a1, *a2);
}

uint64_t sub_2346F8E74()
{
  return sub_2347EF200();
}

uint64_t sub_2346F8F10()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F8F98()
{
  return sub_2347EF200();
}

RoomPlan::ChairLegType_optional sub_2346F9030(Swift::String *a1)
{
  return ChairLegType.init(rawValue:)(*a1);
}

void sub_2346F903C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1918989427;
  if (v2 != 1)
  {
    uint64_t v5 = 0x69746E6564696E75;
    unint64_t v4 = 0xEC00000064656966;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1920298854;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_2346F9094()
{
  unint64_t v1 = 0x7367654C72617473;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7367654C72756F66;
  }
}

void sub_2346F90F4(void *a1@<X8>)
{
  *a1 = &unk_26E770F20;
}

void static ChairArmType.parentCategory.getter(_WORD *a1@<X8>)
{
  *a1 = 268;
}

uint64_t ChairArmType.shortIdentifier.getter()
{
  if (*v0) {
    return 0x736D72416F6ELL;
  }
  else {
    return 0x736D724177;
  }
}

RoomPlan::ChairArmType_optional __swiftcall ChairArmType.init(rawValue:)(Swift::String rawValue)
{
  return (RoomPlan::ChairArmType_optional)sub_2346FA0D8(v1);
}

void *static ChairArmType.allCases.getter()
{
  return &unk_26E770F48;
}

uint64_t ChairArmType.rawValue.getter()
{
  if (*v0) {
    return 0x676E697373696DLL;
  }
  else {
    return 0x676E697473697865;
  }
}

uint64_t sub_2346F9198(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2347247B4(*a1, *a2);
}

RoomPlan::ChairArmType_optional sub_2346F91B0(Swift::String *a1)
{
  return ChairArmType.init(rawValue:)(*a1);
}

void sub_2346F91BC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x676E697473697865;
  if (*v1) {
    uint64_t v2 = 0x676E697373696DLL;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_2346F91FC()
{
  if (*v0) {
    return 0x736D72416F6ELL;
  }
  else {
    return 0x736D724177;
  }
}

void sub_2346F9230(void *a1@<X8>)
{
  *a1 = &unk_26E770F70;
}

uint64_t ChairBackType.shortIdentifier.getter()
{
  if (*v0) {
    return 0x6B6361426F6ELL;
  }
  else {
    return 0x6B63614277;
  }
}

RoomPlan::ChairBackType_optional __swiftcall ChairBackType.init(rawValue:)(Swift::String rawValue)
{
  return (RoomPlan::ChairBackType_optional)sub_2346FA0D8(v1);
}

void *static ChairBackType.allCases.getter()
{
  return &unk_26E770F98;
}

uint64_t sub_2346F928C()
{
  return sub_2347EF200();
}

uint64_t sub_2346F9310()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F9380()
{
  return sub_2347EF200();
}

RoomPlan::ChairBackType_optional sub_2346F9400(Swift::String *a1)
{
  return ChairBackType.init(rawValue:)(*a1);
}

uint64_t sub_2346F940C()
{
  if (*v0) {
    return 0x6B6361426F6ELL;
  }
  else {
    return 0x6B63614277;
  }
}

void sub_2346F9440(void *a1@<X8>)
{
  *a1 = &unk_26E770FC0;
}

void static SofaType.parentCategory.getter(_WORD *a1@<X8>)
{
  *a1 = 267;
}

unint64_t SofaType.shortIdentifier.getter()
{
  unint64_t result = 0x75676E6174636572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6465706168536CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6553656C676E6973;
      break;
    case 4:
      unint64_t result = 0x69746E6564696E75;
      break;
    default:
      return result;
  }
  return result;
}

RoomPlan::SofaType_optional __swiftcall SofaType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_2347EEF30();
  result.value = swift_bridgeObjectRelease();
  char v5 = 5;
  if (v3 < 5) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

void *static SofaType.allCases.getter()
{
  return &unk_26E770FE8;
}

uint64_t sub_2346F9588(unsigned __int8 *a1, char *a2)
{
  return sub_234724078(*a1, *a2);
}

uint64_t sub_2346F9594()
{
  return sub_2347255B0();
}

uint64_t sub_2346F959C()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F9694()
{
  return sub_234725C4C();
}

RoomPlan::SofaType_optional sub_2346F969C(Swift::String *a1)
{
  return SofaType.init(rawValue:)(*a1);
}

void sub_2346F96A8(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEB0000000072616CLL;
  uint64_t v3 = 0x75676E6174636572;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x6465706168536CLL;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0xD000000000000010;
      *(void *)(a1 + 8) = 0x80000002347FBEA0;
      break;
    case 3:
      *(void *)a1 = 0x6553656C676E6973;
      *(void *)(a1 + 8) = 0xEA00000000007461;
      break;
    case 4:
      strcpy((char *)a1, "unidentified");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_2346F977C(_WORD *a1@<X8>)
{
  *a1 = 267;
}

unint64_t sub_2346F9788()
{
  unint64_t result = 0x75676E6174636572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6465706168536CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6553656C676E6973;
      break;
    case 4:
      unint64_t result = 0x69746E6564696E75;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2346F984C(void *a1@<X8>)
{
  *a1 = &unk_26E771010;
}

uint64_t TableType.shortIdentifier.getter()
{
  uint64_t v1 = 0x6154676E696E6964;
  if (*v0 != 1) {
    uint64_t v1 = 0x69746E6564696E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6154656566666F63;
  }
}

RoomPlan::TableType_optional __swiftcall TableType.init(rawValue:)(Swift::String rawValue)
{
  return (RoomPlan::TableType_optional)sub_2346F98D0(v1);
}

uint64_t sub_2346F98D0@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_2347EEF30();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

void *static TableType.allCases.getter()
{
  return &unk_26E771038;
}

uint64_t TableType.rawValue.getter()
{
  uint64_t v1 = 0x676E696E6964;
  if (*v0 != 1) {
    uint64_t v1 = 0x69746E6564696E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656566666F63;
  }
}

uint64_t sub_2346F9990(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_234723DDC(*a1, *a2);
}

uint64_t sub_2346F999C()
{
  return sub_2347EF200();
}

uint64_t sub_2346F9A40()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F9AD0()
{
  return sub_2347EF200();
}

RoomPlan::TableType_optional sub_2346F9B70(Swift::String *a1)
{
  return TableType.init(rawValue:)(*a1);
}

void sub_2346F9B7C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x676E696E6964;
  if (v2 != 1)
  {
    uint64_t v5 = 0x69746E6564696E75;
    unint64_t v4 = 0xEC00000064656966;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x656566666F63;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_2346F9BDC(_WORD *a1@<X8>)
{
  *a1 = 266;
}

uint64_t sub_2346F9BE8()
{
  uint64_t v1 = 0x6154676E696E6964;
  if (*v0 != 1) {
    uint64_t v1 = 0x69746E6564696E75;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6154656566666F63;
  }
}

void sub_2346F9C50(void *a1@<X8>)
{
  *a1 = &unk_26E771060;
}

void static TableShapeType.parentCategory.getter(_WORD *a1@<X8>)
{
  *a1 = 266;
}

unint64_t TableShapeType.shortIdentifier.getter()
{
  unint64_t result = 0x75676E6174636572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6465706168536CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

RoomPlan::TableShapeType_optional __swiftcall TableShapeType.init(rawValue:)(Swift::String rawValue)
{
  return (RoomPlan::TableShapeType_optional)sub_2346F9D1C(v1);
}

uint64_t sub_2346F9D1C@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_2347EEF30();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 4;
  if (v2 < 4) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

void *static TableShapeType.allCases.getter()
{
  return &unk_26E771088;
}

unint64_t TableShapeType.rawValue.getter()
{
  unint64_t result = 0x75676E6174636572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6465706168536CLL;
      break;
    case 3:
      unint64_t result = 0x69746E6564696E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2346F9E24(unsigned __int8 *a1, char *a2)
{
  return sub_2347245FC(*a1, *a2);
}

uint64_t sub_2346F9E30()
{
  return sub_2347256C0();
}

uint64_t sub_2346F9E38()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346F9F10()
{
  return sub_234725DA8();
}

RoomPlan::TableShapeType_optional sub_2346F9F18(Swift::String *a1)
{
  return TableShapeType.init(rawValue:)(*a1);
}

void sub_2346F9F24(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEB0000000072616CLL;
  unint64_t v3 = 0x75676E6174636572;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x80000002347FBCF0;
      unint64_t v3 = 0xD000000000000010;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6465706168536CLL;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    case 3:
      strcpy((char *)a1, "unidentified");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unint64_t sub_2346F9FD4()
{
  unint64_t result = 0x75676E6174636572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6465706168536CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

void sub_2346FA078(void *a1@<X8>)
{
  *a1 = &unk_26E7710B0;
}

void static StorageType.parentCategory.getter(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t StorageType.shortIdentifier.getter()
{
  if (*v0) {
    return 0x666C656873;
  }
  else {
    return 0x74656E69626163;
  }
}

RoomPlan::StorageType_optional __swiftcall StorageType.init(rawValue:)(Swift::String rawValue)
{
  return (RoomPlan::StorageType_optional)sub_2346FA0D8(v1);
}

uint64_t sub_2346FA0D8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_2347EEF30();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void *static StorageType.allCases.getter()
{
  return &unk_26E7710D8;
}

uint64_t sub_2346FA144(char *a1, char *a2)
{
  return sub_234724C6C(*a1, *a2);
}

uint64_t sub_2346FA150()
{
  return sub_2347EF200();
}

uint64_t sub_2346FA1D0()
{
  sub_2347EE6C0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2346FA23C()
{
  return sub_2347EF200();
}

RoomPlan::StorageType_optional sub_2346FA2B8(Swift::String *a1)
{
  return StorageType.init(rawValue:)(*a1);
}

void sub_2346FA2C4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x74656E69626163;
  if (*v1) {
    uint64_t v2 = 0x666C656873;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_2346FA300(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t sub_2346FA30C()
{
  if (*v0) {
    return 0x666C656873;
  }
  else {
    return 0x74656E69626163;
  }
}

void sub_2346FA344(void *a1@<X8>)
{
  *a1 = &unk_26E771100;
}

void *sub_2346FA354(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FB284(a1, a2, a3, a4, &qword_2687AC820);
}

char *sub_2346FA360(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_2346FBED8(a1, a2, a3, a4, &qword_2687AD158);
}

void *sub_2346FA36C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FBFF8(a1, a2, a3, a4, (uint64_t *)&unk_2687ACB30, &qword_2687AC578);
}

void *sub_2346FA380(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEBE0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FF08C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2346FA490(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_2346FAFF8(a1, a2, a3, a4, &qword_2687AD0D8, type metadata accessor for CapturedRoom.Surface, type metadata accessor for CapturedRoom.Surface);
}

void *sub_2346FA4C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9E8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FE8E8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FA5D4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD108);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FE9D4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FA6E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD1D8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FEAE0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FA80C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD168);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FEBF0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FA91C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD160);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FF180(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FAA44(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD178);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FF270(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FAB54(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD170);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FF35C(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FAC7C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD130);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FF270(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FAD8C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD180);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FF270(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FAE9C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD188);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FF35C(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2346FAFC4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_2346FAFF8(a1, a2, a3, a4, &qword_2687AD128, (uint64_t (*)(void))type metadata accessor for LineAnimation, (uint64_t (*)(void))type metadata accessor for LineAnimation);
}

uint64_t sub_2346FAFF8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    char v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  char v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_2347EEE90();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  double v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_2346FFB34(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_2346FB278(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FB284(a1, a2, a3, a4, &qword_2687AD1A0);
}

void *sub_2346FB284(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      unint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FF270(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_2346FB390(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FB614(a1, a2, a3, a4, &qword_2687AD1B0, &qword_2687AD1B8);
}

uint64_t sub_2346FB3A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_2346FAFF8(a1, a2, a3, a4, &qword_2687AD100, MEMORY[0x263F07508], MEMORY[0x263F07508]);
}

void *sub_2346FB3D8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACC40);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FE8E8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_2346FB4E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACC30);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32]) {
          memmove(v13, a4 + 32, 2 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_2346FECDC(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FB5F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FC360(a1, a2, a3, a4, &qword_2687ACC38);
}

void *sub_2346FB600(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FB614(a1, a2, a3, a4, &qword_2687AD0C0, &qword_2687AD0C8);
}

void *sub_2346FB614(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = _swift_stdlib_malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v16 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FF44C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_2346FB730(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD1D0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FEDC8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_2346FB840(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD1C0);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 5);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 32]) {
          memmove(v12, a4 + 32, 5 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FEEB4(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FB958(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD1C8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FEBF0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_2346FBA68(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD120);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_2346FEFA0(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FBB78(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD118);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FF660(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FBC88(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FB614(a1, a2, a3, a4, &qword_2687AD148, &qword_2687AD150);
}

void *sub_2346FBC9C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD138);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FF554(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FBDAC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD0E8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4]) {
          memmove(v12, a4 + 4, 160 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FF758(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_2346FBECC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_2346FBED8(a1, a2, a3, a4, &qword_2687AD1A8);
}

char *sub_2346FBED8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      size_t v11 = (char *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 2);
      int64_t v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = (char *)MEMORY[0x263F8EE78];
      int64_t v14 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32]) {
          memmove(v14, a4 + 32, 4 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_2346FEFA0(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_2346FBFE4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FBFF8(a1, a2, a3, a4, &qword_2687AD1F8, &qword_2687AD200);
}

void *sub_2346FBFF8(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FF940(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *sub_2346FC128(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_2346FC478(a1, a2, a3, a4, &qword_2687AD1E8);
}

void *sub_2346FC134(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD198);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FE8E8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FC244(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD190);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FE8E8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2346FC354(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_2346FC360(a1, a2, a3, a4, &qword_2687AD0D0);
}

void *sub_2346FC360(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 5);
      size_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x263F8EE78];
      size_t v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 4]) {
          memmove(v14, a4 + 4, 32 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2346FEBF0(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_2346FC46C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_2346FC478(a1, a2, a3, a4, &qword_2687AD0F8);
}

char *sub_2346FC478(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      int64_t v10 = *((void *)a4 + 2);
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (char *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * v12 - 64;
      uint64_t v13 = v11 + 32;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32]) {
          memmove(v13, a4 + 32, v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FFA4C(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_2346FC570(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_2346FAFF8(a1, a2, a3, a4, &qword_2687AD0F0, type metadata accessor for CapturedRoom.Object, type metadata accessor for CapturedRoom.Object);
}

uint64_t sub_2346FC5A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_2346FAFF8(a1, a2, a3, a4, &qword_2687AD1F0, type metadata accessor for CapturedRoom, type metadata accessor for CapturedRoom);
}

char *sub_2346FC5D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD0E0);
      int64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      size_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = (char *)MEMORY[0x263F8EE78];
      size_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2346FFA4C(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t _s8RoomPlan23CapturedElementCategoryO2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (a1[1])
  {
    if (v2 == v3) {
      return a2[1];
    }
    else {
      return 0;
    }
  }
  else if (a2[1])
  {
    return 0;
  }
  else
  {
    switch(*a1)
    {
      case 2u:
        if (v3 != 2) {
          return 0;
        }
        uint64_t result = 1;
        break;
      case 3u:
        if (v3 != 3) {
          return 0;
        }
        uint64_t result = 1;
        break;
      case 4u:
        if (v3 != 4) {
          return 0;
        }
        uint64_t result = 1;
        break;
      case 5u:
        if (v3 != 5) {
          return 0;
        }
        uint64_t result = 1;
        break;
      default:
        if ((v3 - 2) < 4 || ((((v2 & 1) == 0) ^ v3) & 1) == 0) {
          return 0;
        }
        uint64_t result = 1;
        break;
    }
  }
  return result;
}

unint64_t sub_2346FC7A0()
{
  unint64_t result = qword_2687ACE68;
  if (!qword_2687ACE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE68);
  }
  return result;
}

unint64_t sub_2346FC7F4()
{
  unint64_t result = qword_2687ACE70;
  if (!qword_2687ACE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE70);
  }
  return result;
}

unint64_t sub_2346FC848()
{
  unint64_t result = qword_2687ACE78;
  if (!qword_2687ACE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE78);
  }
  return result;
}

unint64_t sub_2346FC89C()
{
  unint64_t result = qword_2687ACE80;
  if (!qword_2687ACE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE80);
  }
  return result;
}

unint64_t sub_2346FC8F0()
{
  unint64_t result = qword_2687ACE88;
  if (!qword_2687ACE88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACE88);
  }
  return result;
}

unint64_t sub_2346FC944()
{
  unint64_t result = qword_2687ACEB0;
  if (!qword_2687ACEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACEB0);
  }
  return result;
}

unint64_t sub_2346FC998()
{
  unint64_t result = qword_2687ACEB8;
  if (!qword_2687ACEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACEB8);
  }
  return result;
}

unint64_t sub_2346FC9EC()
{
  unint64_t result = qword_2687ACEC8;
  if (!qword_2687ACEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACEC8);
  }
  return result;
}

unint64_t sub_2346FCA40()
{
  unint64_t result = qword_2687ACEE0;
  if (!qword_2687ACEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACEE0);
  }
  return result;
}

unint64_t sub_2346FCA94()
{
  unint64_t result = qword_2687ACEE8;
  if (!qword_2687ACEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACEE8);
  }
  return result;
}

unint64_t sub_2346FCAE8()
{
  unint64_t result = qword_2687AE240;
  if (!qword_2687AE240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AE240);
  }
  return result;
}

unint64_t sub_2346FCB3C()
{
  unint64_t result = qword_2687AE230;
  if (!qword_2687AE230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AE230);
  }
  return result;
}

unint64_t sub_2346FCB90()
{
  unint64_t result = qword_2687AE210;
  if (!qword_2687AE210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AE210);
  }
  return result;
}

unint64_t sub_2346FCBE4()
{
  unint64_t result = qword_2687ACEF0;
  if (!qword_2687ACEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACEF0);
  }
  return result;
}

unint64_t sub_2346FCC38()
{
  unint64_t result = qword_2687ACEF8;
  if (!qword_2687ACEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACEF8);
  }
  return result;
}

unint64_t sub_2346FCC8C()
{
  unint64_t result = qword_2687AE220;
  if (!qword_2687AE220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AE220);
  }
  return result;
}

unint64_t sub_2346FCCE4()
{
  unint64_t result = qword_2687ACF08;
  if (!qword_2687ACF08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF08);
  }
  return result;
}

uint64_t sub_2346FCD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2346FD6B0(a1, a2, a3, (uint64_t (*)(void))sub_2346FCD64, (uint64_t (*)(void))sub_2346FCDB8);
}

unint64_t sub_2346FCD64()
{
  unint64_t result = qword_2687ACF10;
  if (!qword_2687ACF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF10);
  }
  return result;
}

unint64_t sub_2346FCDB8()
{
  unint64_t result = qword_2687ACF18;
  if (!qword_2687ACF18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF18);
  }
  return result;
}

uint64_t sub_2346FCE0C()
{
  return sub_2346DC0E4(&qword_2687ACF20, &qword_2687ACF28);
}

unint64_t sub_2346FCE38()
{
  unint64_t result = qword_2687ACF30;
  if (!qword_2687ACF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF30);
  }
  return result;
}

uint64_t sub_2346FCE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2346FD6B0(a1, a2, a3, (uint64_t (*)(void))sub_2346FCEB8, (uint64_t (*)(void))sub_2346FCF0C);
}

unint64_t sub_2346FCEB8()
{
  unint64_t result = qword_2687ACF38;
  if (!qword_2687ACF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF38);
  }
  return result;
}

unint64_t sub_2346FCF0C()
{
  unint64_t result = qword_2687ACF40;
  if (!qword_2687ACF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF40);
  }
  return result;
}

uint64_t sub_2346FCF60()
{
  return sub_2346DC0E4(&qword_2687ACF48, &qword_2687ACF50);
}

unint64_t sub_2346FCF8C()
{
  unint64_t result = qword_2687ACF58;
  if (!qword_2687ACF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF58);
  }
  return result;
}

uint64_t sub_2346FCFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2346FD6B0(a1, a2, a3, (uint64_t (*)(void))sub_2346FD00C, (uint64_t (*)(void))sub_2346FD060);
}

unint64_t sub_2346FD00C()
{
  unint64_t result = qword_2687ACF60;
  if (!qword_2687ACF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF60);
  }
  return result;
}

unint64_t sub_2346FD060()
{
  unint64_t result = qword_2687ACF68;
  if (!qword_2687ACF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF68);
  }
  return result;
}

uint64_t sub_2346FD0B4()
{
  return sub_2346DC0E4(&qword_2687ACF70, &qword_2687ACF78);
}

unint64_t sub_2346FD0E0()
{
  unint64_t result = qword_2687ACF80;
  if (!qword_2687ACF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF80);
  }
  return result;
}

uint64_t sub_2346FD134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2346FD6B0(a1, a2, a3, (uint64_t (*)(void))sub_2346FD160, (uint64_t (*)(void))sub_2346FD1B4);
}

unint64_t sub_2346FD160()
{
  unint64_t result = qword_2687ACF88;
  if (!qword_2687ACF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF88);
  }
  return result;
}

unint64_t sub_2346FD1B4()
{
  unint64_t result = qword_2687ACF90;
  if (!qword_2687ACF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACF90);
  }
  return result;
}

uint64_t sub_2346FD208()
{
  return sub_2346DC0E4(&qword_2687ACF98, &qword_2687ACFA0);
}

unint64_t sub_2346FD234()
{
  unint64_t result = qword_2687ACFA8;
  if (!qword_2687ACFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACFA8);
  }
  return result;
}

uint64_t sub_2346FD288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2346FD6B0(a1, a2, a3, (uint64_t (*)(void))sub_2346FD2B4, (uint64_t (*)(void))sub_2346FD308);
}

unint64_t sub_2346FD2B4()
{
  unint64_t result = qword_2687ACFB0;
  if (!qword_2687ACFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACFB0);
  }
  return result;
}

unint64_t sub_2346FD308()
{
  unint64_t result = qword_2687ACFB8;
  if (!qword_2687ACFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACFB8);
  }
  return result;
}

uint64_t sub_2346FD35C()
{
  return sub_2346DC0E4(&qword_2687ACFC0, &qword_2687ACFC8);
}

unint64_t sub_2346FD388()
{
  unint64_t result = qword_2687ACFD0;
  if (!qword_2687ACFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACFD0);
  }
  return result;
}

uint64_t sub_2346FD3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2346FD6B0(a1, a2, a3, (uint64_t (*)(void))sub_2346FD408, (uint64_t (*)(void))sub_2346FD45C);
}

unint64_t sub_2346FD408()
{
  unint64_t result = qword_2687ACFD8;
  if (!qword_2687ACFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACFD8);
  }
  return result;
}

unint64_t sub_2346FD45C()
{
  unint64_t result = qword_2687ACFE0;
  if (!qword_2687ACFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACFE0);
  }
  return result;
}

uint64_t sub_2346FD4B0()
{
  return sub_2346DC0E4(&qword_2687ACFE8, &qword_2687ACFF0);
}

unint64_t sub_2346FD4DC()
{
  unint64_t result = qword_2687ACFF8;
  if (!qword_2687ACFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687ACFF8);
  }
  return result;
}

uint64_t sub_2346FD530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2346FD6B0(a1, a2, a3, (uint64_t (*)(void))sub_2346FD55C, (uint64_t (*)(void))sub_2346FD5B0);
}

unint64_t sub_2346FD55C()
{
  unint64_t result = qword_2687AD000;
  if (!qword_2687AD000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD000);
  }
  return result;
}

unint64_t sub_2346FD5B0()
{
  unint64_t result = qword_2687AD008;
  if (!qword_2687AD008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD008);
  }
  return result;
}

uint64_t sub_2346FD604()
{
  return sub_2346DC0E4(&qword_2687AD010, &qword_2687AD018);
}

unint64_t sub_2346FD630()
{
  unint64_t result = qword_2687AD020;
  if (!qword_2687AD020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD020);
  }
  return result;
}

uint64_t sub_2346FD684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2346FD6B0(a1, a2, a3, (uint64_t (*)(void))sub_2346FD6EC, (uint64_t (*)(void))sub_2346FD740);
}

uint64_t sub_2346FD6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 8) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_2346FD6EC()
{
  unint64_t result = qword_2687AD028;
  if (!qword_2687AD028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD028);
  }
  return result;
}

unint64_t sub_2346FD740()
{
  unint64_t result = qword_2687AD030;
  if (!qword_2687AD030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD030);
  }
  return result;
}

uint64_t sub_2346FD794()
{
  return sub_2346DC0E4(&qword_2687AD038, &qword_2687AD040);
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CapturedElementCategory(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  if (v6 <= 1) {
    int v7 = -1;
  }
  else {
    int v7 = v6 ^ 0xFF;
  }
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for CapturedElementCategory(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346FD92CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = -(char)a2;
        break;
    }
  }
  return result;
}

uint64_t sub_2346FD954(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

uint64_t sub_2346FD95C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CapturedElementCategory()
{
  return &type metadata for CapturedElementCategory;
}

uint64_t dispatch thunk of static CapturedRoomAttribute.parentCategory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CapturedRoomAttribute.shortIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for CapturedRoom.AttributesCodableRepresentation()
{
  return &type metadata for CapturedRoom.AttributesCodableRepresentation;
}

ValueMetadata *type metadata accessor for ChairType()
{
  return &type metadata for ChairType;
}

ValueMetadata *type metadata accessor for ChairLegType()
{
  return &type metadata for ChairLegType;
}

ValueMetadata *type metadata accessor for ChairArmType()
{
  return &type metadata for ChairArmType;
}

ValueMetadata *type metadata accessor for ChairBackType()
{
  return &type metadata for ChairBackType;
}

uint64_t getEnumTagSinglePayload for AnimationOrigin(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SofaType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346FDB64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SofaType()
{
  return &type metadata for SofaType;
}

unsigned char *_s8RoomPlan12ChairLegTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346FDC68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableType()
{
  return &type metadata for TableType;
}

uint64_t getEnumTagSinglePayload for GlyphSnapState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s8RoomPlan9ChairTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346FDDFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableShapeType()
{
  return &type metadata for TableShapeType;
}

ValueMetadata *type metadata accessor for StorageType()
{
  return &type metadata for StorageType;
}

uint64_t initializeWithCopy for AnyCapturedRoomAttribute(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyCapturedRoomAttribute(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AnyCapturedRoomAttribute(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyCapturedRoomAttribute(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyCapturedRoomAttribute(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyCapturedRoomAttribute()
{
  return &type metadata for AnyCapturedRoomAttribute;
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s31AttributesCodableRepresentationV10CodingKeysVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s31AttributesCodableRepresentationV10CodingKeysVMa()
{
  return &_s31AttributesCodableRepresentationV10CodingKeysVN;
}

unsigned char *_s8RoomPlan12ChairArmTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2346FE224);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CapturedElementCategory.CodingKeys()
{
  return &type metadata for CapturedElementCategory.CodingKeys;
}

ValueMetadata *type metadata accessor for CapturedElementCategory.SurfaceCodingKeys()
{
  return &type metadata for CapturedElementCategory.SurfaceCodingKeys;
}

uint64_t getEnumTagSinglePayload for CapturedRoom.Surface.Category.DoorCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s8RoomPlan23CapturedElementCategoryO17SurfaceCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2346FE364);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CapturedElementCategory.ObjectCodingKeys()
{
  return &type metadata for CapturedElementCategory.ObjectCodingKeys;
}

unint64_t sub_2346FE3A0()
{
  unint64_t result = qword_2687AD048;
  if (!qword_2687AD048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD048);
  }
  return result;
}

unint64_t sub_2346FE3F8()
{
  unint64_t result = qword_2687AD050;
  if (!qword_2687AD050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD050);
  }
  return result;
}

unint64_t sub_2346FE450()
{
  unint64_t result = qword_2687AD058;
  if (!qword_2687AD058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD058);
  }
  return result;
}

uint64_t sub_2346FE4A4()
{
  return MEMORY[0x263F8D390];
}

unint64_t sub_2346FE4B4()
{
  unint64_t result = qword_2687AD060;
  if (!qword_2687AD060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD060);
  }
  return result;
}

uint64_t sub_2346FE508()
{
  return MEMORY[0x263F8D398];
}

unint64_t sub_2346FE518()
{
  unint64_t result = qword_2687AD068;
  if (!qword_2687AD068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD068);
  }
  return result;
}

uint64_t sub_2346FE56C()
{
  return MEMORY[0x263F8D388];
}

unint64_t sub_2346FE57C()
{
  unint64_t result = qword_2687AD070;
  if (!qword_2687AD070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD070);
  }
  return result;
}

unint64_t sub_2346FE5D4()
{
  unint64_t result = qword_2687AD078;
  if (!qword_2687AD078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD078);
  }
  return result;
}

unint64_t sub_2346FE62C()
{
  unint64_t result = qword_2687AD080;
  if (!qword_2687AD080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD080);
  }
  return result;
}

unint64_t sub_2346FE684()
{
  unint64_t result = qword_2687AD088;
  if (!qword_2687AD088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD088);
  }
  return result;
}

unint64_t sub_2346FE6DC()
{
  unint64_t result = qword_2687AD090;
  if (!qword_2687AD090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD090);
  }
  return result;
}

unint64_t sub_2346FE734()
{
  unint64_t result = qword_2687AD098;
  if (!qword_2687AD098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD098);
  }
  return result;
}

unint64_t sub_2346FE78C()
{
  unint64_t result = qword_2687AD0A0;
  if (!qword_2687AD0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD0A0);
  }
  return result;
}

unint64_t sub_2346FE7E4()
{
  unint64_t result = qword_2687AD0A8;
  if (!qword_2687AD0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD0A8);
  }
  return result;
}

unint64_t sub_2346FE83C()
{
  unint64_t result = qword_2687AD0B0;
  if (!qword_2687AD0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD0B0);
  }
  return result;
}

unint64_t sub_2346FE894()
{
  unint64_t result = qword_2687AD0B8;
  if (!qword_2687AD0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD0B8);
  }
  return result;
}

char *sub_2346FE8E8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FE9D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD110);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FEAE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD1E0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FEBF0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FECDC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FEDC8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + (a1 << 6) + 32);
    size_t v6 = v4 << 6;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FEEB4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 5 * a1 + 32);
    size_t v6 = 5 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FEFA0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FF08C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FF180(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 48 * a1 + 32);
    size_t v6 = 48 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FF270(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FF35C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    BOOL v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FF44C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FF554(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD140);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FF660(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FF758(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 160 * a1 + 32;
    unint64_t v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FF850(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65636166727573 && a2 == 0xE700000000000000;
  if (v2 || (sub_2347EF090() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7463656A626FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_2347EF090();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_2346FF940(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

char *sub_2346FFA4C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FFB34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_2346FFCC4()
{
  if (*(void *)(v0 + 16))
  {
    id v1 = *(id *)(v0 + 16);
LABEL_5:
    swift_unknownObjectRetain();
    return (uint64_t)v1;
  }
  id v2 = MTLCreateSystemDefaultDevice();
  if (v2)
  {
    id v1 = v2;
    *(void *)(v0 + 16) = v2;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  uint64_t result = sub_2347EEEA0();
  __break(1u);
  return result;
}

uint64_t sub_2346FFD78()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    uint64_t v1 = sub_2346FFDD8();
    *(void *)(v0 + 24) = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t sub_2346FFDD8()
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  type metadata accessor for MetalConstants();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v6 = 0;
  id v2 = objc_msgSend((id)sub_2346FFCC4(), sel_newDefaultLibraryWithBundle_error_, v1, &v6);
  swift_unknownObjectRelease();
  if (v2)
  {
    id v3 = v6;

    return (uint64_t)v2;
  }
  else
  {
    id v5 = v6;
    sub_2347ED350();

    swift_willThrow();
    id v6 = 0;
    unint64_t v7 = 0xE000000000000000;
    sub_2347EED50();
    swift_bridgeObjectRelease();
    id v6 = (id)0xD00000000000001DLL;
    unint64_t v7 = 0x80000002347FDD40;
    swift_getErrorValue();
    sub_2347EF100();
    sub_2347EE6F0();
    swift_bridgeObjectRelease();
    uint64_t result = sub_2347EEEA0();
    __break(1u);
  }
  return result;
}

uint64_t sub_2346FFF6C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MetalConstants()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for AnimationOrigin(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23470009CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationOrigin()
{
  return &type metadata for AnimationOrigin;
}

void *sub_2347000D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(void *)(a1 + 24) = a2[3];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    uint64_t v7 = *(int *)(a3 + 40);
    unsigned int __dst = (void *)(a1 + v7);
    uint64_t v8 = (char *)a2 + v7;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v9 = sub_2347ED540();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
      memcpy(__dst, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
    }
    *(void *)((char *)v4 + *(int *)(a3 + 44)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 44));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_2347002A8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_2347ED540();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_234700380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = sub_2347ED540();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_234700500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_2347ED540();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_2347006EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_2347ED540();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_234700844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_2347ED540();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(void *)(a1 + *(int *)(a3 + 44)) = *(void *)(a2 + *(int *)(a3 + 44));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_234700A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_234700A2C);
}

uint64_t sub_234700A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_234700AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_234700AF4);
}

uint64_t sub_234700AF4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AnimationGraph()
{
  uint64_t result = qword_2687AD208;
  if (!qword_2687AD208) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_234700BEC()
{
  sub_2346C1728();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_234700CB4()
{
  unint64_t result = qword_2687AD218;
  if (!qword_2687AD218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD218);
  }
  return result;
}

void sub_234700D08(int a1, __n128 a2)
{
  BOOL v3 = (~a1 & 0x44) == 0;
  sub_234703308(0, 1, v3, a2);
  sub_234703308(1, 0, v3, a2);
  sub_234703308(4, 5, (~a1 & 0x88) == 0, a2);
  sub_234703308(5, 4, (~a1 & 0x88) == 0, a2);
  sub_234703308(1, 5, (~a1 & 0xC0) == 0, a2);
  sub_234703308(5, 1, (~a1 & 0xC0) == 0, a2);
  sub_234703308(0, 4, (~a1 & 0xC) == 0, a2);
  sub_234703308(4, 0, (~a1 & 0xC) == 0, a2);
  sub_234703308(1, 2, (~a1 & 0x60) == 0, a2);
  sub_234703308(2, 1, (~a1 & 0x60) == 0, a2);
  sub_234703308(5, 6, (~a1 & 0x90) == 0, a2);
  sub_234703308(6, 5, (~a1 & 0x90) == 0, a2);
  sub_234703308(2, 3, (~a1 & 0x22) == 0, a2);
  sub_234703308(3, 2, (~a1 & 0x22) == 0, a2);
  sub_234703308(6, 7, (~a1 & 0x11) == 0, a2);
  sub_234703308(7, 6, (~a1 & 0x11) == 0, a2);
  sub_234703308(2, 6, (~a1 & 0x30) == 0, a2);
  sub_234703308(6, 2, (~a1 & 0x30) == 0, a2);
  sub_234703308(3, 7, (~a1 & 3) == 0, a2);
  sub_234703308(7, 3, (~a1 & 3) == 0, a2);
  sub_234703308(0, 3, (~a1 & 6) == 0, a2);
  sub_234703308(3, 0, (~a1 & 6) == 0, a2);
  BOOL v4 = (~a1 & 9) == 0;
  sub_234703308(4, 7, v4, a2);

  sub_234703308(7, 4, v4, a2);
}

void sub_234700FBC(unsigned int a1, __n128 a2)
{
  int v3 = a1 & 1;
  sub_234703308(0, 1, v3, a2);
  sub_234703308(1, 0, v3, a2);
  sub_234703308(4, 5, v3, a2);
  sub_234703308(5, 4, v3, a2);
  sub_234703308(1, 5, v3, a2);
  sub_234703308(5, 1, v3, a2);
  sub_234703308(0, 4, v3, a2);
  sub_234703308(4, 0, v3, a2);
  sub_234703308(1, 2, (a1 >> 3) & 1, a2);
  sub_234703308(2, 1, (a1 >> 3) & 1, a2);
  sub_234703308(5, 6, (a1 >> 3) & 1, a2);
  sub_234703308(6, 5, (a1 >> 3) & 1, a2);
  sub_234703308(2, 3, (a1 >> 1) & 1, a2);
  sub_234703308(3, 2, (a1 >> 1) & 1, a2);
  sub_234703308(6, 7, (a1 >> 1) & 1, a2);
  sub_234703308(7, 6, (a1 >> 1) & 1, a2);
  sub_234703308(2, 6, (a1 >> 1) & 1, a2);
  sub_234703308(6, 2, (a1 >> 1) & 1, a2);
  sub_234703308(3, 7, (a1 >> 1) & 1, a2);
  sub_234703308(7, 3, (a1 >> 1) & 1, a2);
  int v4 = (a1 >> 2) & 1;
  sub_234703308(0, 3, v4, a2);
  sub_234703308(3, 0, v4, a2);
  sub_234703308(4, 7, v4, a2);

  sub_234703308(7, 4, v4, a2);
}

void (*sub_2347011E8(void *a1, uint64_t a2))(void *)
{
  int v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_234704E90(v4, a2);
  return sub_234701248;
}

void (*sub_23470124C(void *a1, unsigned __int8 a2))(void *)
{
  int v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_234704F24(v4, a2);
  return sub_234701248;
}

void sub_2347012AC(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

uint64_t sub_2347012F8(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, __n128 a5, float32x4_t a6)
{
  uint64_t v7 = v6;
  __n128 v45 = a5;
  float32x4_t v46 = a6;
  float32x4_t v43 = a3;
  float32x4_t v44 = a4;
  float32x4_t v42 = a2;
  uint64_t v9 = sub_2347ED540();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  int v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v42 - v14;
  if (qword_2687ABE90 != -1) {
LABEL_28:
  }
    swift_once();
  uint64_t v16 = (float *)off_2687AF0E8;
  swift_beginAccess();
  float v17 = v16[17];
  sub_234702A44((uint64_t)v15);
  if (v17 <= 0.0)
  {
    uint64_t v21 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v10 = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    float v24 = 1.0;
  }
  else
  {
    double v18 = v17;
    sub_2347ED520();
    sub_2347ED4F0();
    double v20 = v19;
    unint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    v10 += 8;
    uint64_t v21 = v22;
    v22(v12, v9);
    double v23 = v20 / v18;
    float v24 = 0.0;
    if (v23 > 0.0)
    {
      if (v23 > 1.0) {
        double v23 = 1.0;
      }
      float v24 = v23;
    }
  }
  v21(v15, v9);
  *(float *)(v7 + 16) = v24;
  v48.columns[0] = (simd_float4)v42;
  v48.columns[1] = (simd_float4)v43;
  v48.columns[2] = (simd_float4)v44;
  v48.columns[3] = (simd_float4)v45;
  simd_float4x4 v49 = __invert_f4(v48);
  float32x4_t v44 = (float32x4_t)v49.columns[1];
  __n128 v45 = (__n128)v49.columns[0];
  float32x4_t v42 = (float32x4_t)v49.columns[3];
  float32x4_t v43 = (float32x4_t)v49.columns[2];
  uint64_t result = type metadata accessor for AnimationGraph();
  uint64_t v26 = *(char **)(*(void *)(v7 + *(int *)(result + 44)) + 16);
  if (v26)
  {
    uint64_t v15 = 0;
    uint64_t v9 = 0;
    do
    {
      if (!*(void *)(*(void *)(v7 + 40) + 16))
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      sub_2347BFCB8((uint64_t)v15);
      if ((v27 & 1) == 0) {
        goto LABEL_25;
      }
      swift_bridgeObjectRetain();
      uint64_t v28 = swift_bridgeObjectRetain();
      int v12 = (char *)sub_2347053B0(v28, a1, (unsigned char *)v7, (unint64_t)v15, v45, v44, v43, v42, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      long long v47 = *(void **)(v7 + 40);
      unint64_t v30 = v47;
      *(void *)(v7 + 40) = 0x8000000000000000;
      unint64_t v32 = sub_2347BFCB8((uint64_t)v15);
      uint64_t v33 = v30[2];
      BOOL v34 = (v31 & 1) == 0;
      uint64_t v35 = v33 + v34;
      if (__OFADD__(v33, v34)) {
        goto LABEL_26;
      }
      uint64_t v10 = v31;
      if (v30[3] >= v35)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_2347D5A24();
        }
      }
      else
      {
        sub_2347CF450(v35, isUniquelyReferenced_nonNull_native);
        unint64_t v36 = sub_2347BFCB8((uint64_t)v15);
        if ((v10 & 1) != (v37 & 1))
        {
          uint64_t result = sub_2347EF0F0();
          __break(1u);
          return result;
        }
        unint64_t v32 = v36;
      }
      long long v38 = v47;
      if (v10)
      {
        uint64_t v10 = v47[7];
        swift_bridgeObjectRelease();
        *(void *)(v10 + 8 * v32) = v12;
      }
      else
      {
        v47[(v32 >> 6) + 8] |= 1 << v32;
        *(void *)(v38[6] + 8 * v32) = v15;
        *(void *)(v38[7] + 8 * v32) = v12;
        uint64_t v39 = v38[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_27;
        }
        v38[2] = v41;
      }
      ++v15;
      *(void *)(v7 + 40) = v38;
      uint64_t result = swift_bridgeObjectRelease();
    }
    while (v26 != v15);
  }
  return result;
}

uint64_t sub_234701690@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = a1;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = MEMORY[0x263F8EE80];
  uint64_t v7 = type metadata accessor for AnimationGraph();
  uint64_t v8 = a3 + *(int *)(v7 + 40);
  uint64_t v9 = sub_2347ED540();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)(a3 + *(int *)(v7 + 44)) = &unk_26E76FB70;
  *(unsigned char *)a3 = a1;
  if (v6 == 3)
  {
    sub_2347E9268(a2);
  }
  else if (qword_2687ABD98 != -1)
  {
LABEL_20:
    swift_once();
  }
  uint64_t result = swift_bridgeObjectRetain();
  *(void *)(a3 + 8) = result;
  uint64_t v11 = qword_26E76FB80;
  if (qword_26E76FB80)
  {
    uint64_t v12 = 0;
    uint64_t v13 = MEMORY[0x263F8EE78];
    do
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v16 = *(void **)(a3 + 40);
      *(void *)(a3 + 40) = 0x8000000000000000;
      unint64_t v18 = sub_2347BFCB8(v12);
      uint64_t v19 = v16[2];
      BOOL v20 = (v17 & 1) == 0;
      uint64_t v21 = v19 + v20;
      if (__OFADD__(v19, v20))
      {
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      char v22 = v17;
      if (v16[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_2347D5A24();
        }
      }
      else
      {
        sub_2347CF450(v21, isUniquelyReferenced_nonNull_native);
        unint64_t v23 = sub_2347BFCB8(v12);
        if ((v22 & 1) != (v24 & 1))
        {
          uint64_t result = sub_2347EF0F0();
          __break(1u);
          return result;
        }
        unint64_t v18 = v23;
      }
      if (v22)
      {
        uint64_t v14 = v16[7];
        swift_bridgeObjectRelease();
        *(void *)(v14 + 8 * v18) = v13;
      }
      else
      {
        v16[(v18 >> 6) + 8] |= 1 << v18;
        *(void *)(v16[6] + 8 * v18) = v12;
        *(void *)(v16[7] + 8 * v18) = v13;
        uint64_t v25 = v16[2];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_19;
        }
        v16[2] = v27;
      }
      ++v12;
      *(void *)(a3 + 40) = v16;
      uint64_t result = swift_bridgeObjectRelease();
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t sub_2347018EC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AnimationGraph() + 44));
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = v1 + 34;
  char v6 = 1;
  float v7 = 3.4028e38;
  do
  {
    v5 += 5;
    uint64_t v8 = v4 + 1;
    sub_2347EF170();
    if (v9 < v7) {
      uint64_t v3 = v4;
    }
    v6 &= v9 >= v7;
    if (v9 < v7) {
      float v7 = v9;
    }
    ++v4;
  }
  while (v2 != v8);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_234701A20(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_234748400(v5);
  }
  uint64_t v6 = *(void *)(v5 + 16);
  v9[0] = v5 + 32;
  v9[1] = v6;
  uint64_t result = sub_234704308(v9, a2, a3);
  *a1 = v5;
  return result;
}

uint64_t sub_234701A9C(float32x4_t *a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v97 = a8;
  float32x4_t v98 = a9;
  float32x4_t v95 = a7;
  float32x4_t v93 = a6;
  float32x4_t v96 = a5;
  float32x4_t v91 = a4;
  float32x4_t v90 = a3;
  float32x4_t v89 = a2;
  uint64_t v86 = type metadata accessor for LineAnimation();
  uint64_t v10 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v73 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v74 = (uint64_t)&v73 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v99 = (float32x4_t *)((char *)&v73 - v19);
  MEMORY[0x270FA5388](v20);
  uint64_t v92 = (uint64_t)&v73 - v21;
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = sub_2346D69F0(v22);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v85 = *(void *)(v23 + 16);
  if (v85)
  {
    unint64_t v25 = 0;
    float32x4_t v26 = v98;
    float32x4_t v84 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, v89.f32[0]), v95, *(float32x2_t *)v89.f32, 1), v97, v89, 2), v98, v89, 3);
    float32x4_t v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, v90.f32[0]), v95, *(float32x2_t *)v90.f32, 1), v97, v90, 2), v98, v90, 3);
    float32x4_t v82 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, v91.f32[0]), v95, *(float32x2_t *)v91.f32, 1), v97, v91, 2), v98, v91, 3);
    float32x4_t v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v93, v96.f32[0]), v95, *(float32x2_t *)v96.f32, 1), v97, v96, 2), v98, v96, 3);
    int64_t v80 = a1[1].i64[0];
    v95.i64[0] = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v79 = v23 + v95.i64[0];
    unint64_t v27 = MEMORY[0x263F8EE78];
    uint64_t v76 = a1 + 2;
    long long v28 = xmmword_2347F19A0;
    long long v73 = xmmword_2347F19A0;
    uint64_t v77 = v10;
    unint64_t v94 = v12;
    uint64_t v78 = v23;
    while (v25 < *(void *)(v23 + 16))
    {
      uint64_t v29 = *(void *)(v10 + 72);
      v93.i64[0] = v25;
      v98.i64[0] = v29;
      uint64_t v30 = v92;
      float32x4_t v96 = (float32x4_t)v28;
      float32x4_t v97 = v26;
      sub_2346C0B38(v79 + v29 * v25, v92);
      float32x4_t v31 = *(float32x4_t *)(v30 + 48);
      float32x4_t v32 = vaddq_f32(v81, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, COERCE_FLOAT(*(_OWORD *)(v30 + 32))), v83, *(float32x2_t *)(v30 + 32), 1), v82, *(float32x4_t *)(v30 + 32), 2));
      float32x4_t v91 = v32;
      v32.i32[3] = v96.i32[3];
      float32x4_t v33 = vaddq_f32(v81, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v84, v31.f32[0]), v83, *(float32x2_t *)v31.f32, 1), v82, v31, 2));
      float32x4_t v90 = v33;
      v33.i32[3] = v97.i32[3];
      long long v88 = (__int128)v32;
      v32.i32[2] = 0;
      float32x4_t v97 = v32;
      float32x4_t v87 = v33;
      v33.i32[2] = 0;
      float32x4_t v96 = v33;
      __int8 v34 = *(unsigned char *)v30;
      uint64_t v35 = *(void *)(v30 + 8);
      uint64_t v36 = *(void *)(v30 + 16);
      __int32 v37 = *(_DWORD *)(v30 + 64);
      float32x4_t v89 = *(float32x4_t *)(v30 + 80);
      __int8 v38 = *(unsigned char *)(v30 + 104);
      uint64_t v39 = v99;
      uint64_t v40 = (uint64_t)v99 + *(int *)(v86 + 60);
      uint64_t v41 = *(void *)(v30 + 96);
      sub_2346BFF00(v40);
      uint64_t v42 = sub_2347ED540();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v40, 0, 1, v42);
      v39->i8[0] = v34;
      v39->i64[1] = v35;
      v39[1].i64[0] = v36;
      float32x4_t v43 = v96;
      v39[2] = v97;
      v39[3] = v43;
      v39[4].i32[0] = v37;
      v39[5] = v89;
      v39[6].i64[0] = v41;
      v39[6].i8[8] = v38;
      uint64_t v44 = MEMORY[0x263F8EE78];
      v39[7].i64[0] = MEMORY[0x263F8EE78];
      int64_t v45 = v80;
      if (v80)
      {
        uint64_t v100 = v44;
        sub_234745680(0, v80, 0);
        uint64_t v46 = v100;
        unint64_t v47 = *(void *)(v100 + 16);
        simd_float4x4 v48 = v76;
        do
        {
          float32x4_t v49 = *v48;
          uint64_t v100 = v46;
          unint64_t v50 = *(void *)(v46 + 24);
          if (v47 >= v50 >> 1)
          {
            float32x4_t v89 = v49;
            sub_234745680(v50 > 1, v47 + 1, 1);
            v49.i64[0] = v89.i64[0];
            uint64_t v46 = v100;
          }
          *(void *)(v46 + 16) = v47 + 1;
          *(void *)(v46 + 8 * v47 + 32) = v49.i64[0];
          ++v48;
          ++v47;
          --v45;
        }
        while (v45);
        uint64_t v51 = (uint64_t)v99;
        uint64_t v44 = MEMORY[0x263F8EE78];
      }
      else
      {
        uint64_t v51 = (uint64_t)v39;
        uint64_t v46 = v44;
      }
      type metadata accessor for CDTPolygon();
      swift_initStackObject();
      uint64_t v52 = sub_23476A158(v46);
      type metadata accessor for CDTEdge();
      swift_initStackObject();
      uint64_t v53 = sub_23470AD70(*(double *)v91.i64, *(double *)v90.i64);
      char v54 = sub_23476A61C();
      uint64_t v55 = (uint64_t)v94;
      uint64_t v56 = v93.i64[0];
      if ((v54 & 1) != 0
        && (sub_2346C1860(v52, 0.00000011921, *(double *)(v53 + 16)) & 1) != 0
        && (sub_2346C1860(v52, 0.00000011921, *(double *)(v53 + 24)) & 1) != 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
        uint64_t v57 = swift_allocObject();
        float32x4_t v58 = v97;
        *(_OWORD *)(v57 + 16) = v73;
        *(float32x4_t *)(v57 + 32) = v58;
        *(float32x4_t *)(v57 + 48) = v96;
        *(void *)(v51 + 112) = v57;
        sub_2346C0B38(v51, v74);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v27 = sub_2346FAFC4(0, *(void *)(v27 + 16) + 1, 1, v27);
        }
        unint64_t v60 = *(void *)(v27 + 16);
        unint64_t v59 = *(void *)(v27 + 24);
        if (v60 >= v59 >> 1) {
          unint64_t v27 = sub_2346FAFC4(v59 > 1, v60 + 1, 1, v27);
        }
        *(void *)(v27 + 16) = v60 + 1;
        sub_234705558(v74, v27 + v95.i64[0] + v60 * v98.i64[0]);
        swift_release();
        swift_release();
        sub_2346C0B9C(v92);
      }
      else
      {
        uint64_t result = sub_23476A9BC(v53);
        uint64_t v61 = result;
        v97.i64[0] = *(void *)(result + 16);
        if (v97.i64[0])
        {
          v90.i64[0] = v53;
          v91.i64[0] = v52;
          unint64_t v62 = 0;
          v96.i64[0] = result + 32;
          while (v62 < *(void *)(v61 + 16))
          {
            uint64_t v63 = *(void *)(v96.i64[0] + 8 * v62);
            sub_2346C0B38(v51, (uint64_t)v15);
            int64_t v64 = *(void *)(v63 + 16);
            if (v64)
            {
              uint64_t v100 = v44;
              swift_bridgeObjectRetain();
              sub_23473D210(0, v64, 0);
              uint64_t v66 = 0;
              float32x4_t v67 = *(float32x4_t *)(v51 + 32);
              uint64_t v68 = v100;
              unint64_t v69 = *(void *)(v100 + 16);
              do
              {
                *(void *)&long long v65 = *(void *)(v63 + 8 * v66 + 32);
                uint64_t v100 = v68;
                unint64_t v70 = *(void *)(v68 + 24);
                if (v69 >= v70 >> 1)
                {
                  float32x4_t v89 = v67;
                  long long v75 = v65;
                  sub_23473D210(v70 > 1, v69 + 1, 1);
                  long long v65 = v75;
                  float32x4_t v67 = v89;
                  uint64_t v68 = v100;
                }
                DWORD2(v65) = v67.i32[2];
                ++v66;
                *(void *)(v68 + 16) = v69 + 1;
                *(_OWORD *)(v68 + 16 * v69++ + 32) = v65;
              }
              while (v64 != v66);
              swift_bridgeObjectRelease();
              uint64_t v55 = (uint64_t)v94;
              uint64_t v44 = MEMORY[0x263F8EE78];
            }
            else
            {
              uint64_t v68 = v44;
            }
            swift_bridgeObjectRelease();
            *((void *)v15 + 14) = v68;
            sub_2346C0B38((uint64_t)v15, v55);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v27 = sub_2346FAFC4(0, *(void *)(v27 + 16) + 1, 1, v27);
            }
            uint64_t v51 = (uint64_t)v99;
            unint64_t v72 = *(void *)(v27 + 16);
            unint64_t v71 = *(void *)(v27 + 24);
            if (v72 >= v71 >> 1) {
              unint64_t v27 = sub_2346FAFC4(v71 > 1, v72 + 1, 1, v27);
            }
            ++v62;
            *(void *)(v27 + 16) = v72 + 1;
            sub_234705558(v55, v27 + v95.i64[0] + v72 * v98.i64[0]);
            uint64_t result = sub_2346C0B9C((uint64_t)v15);
            if (v62 == v97.i64[0])
            {
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              sub_2346C0B9C(v92);
              uint64_t v10 = v77;
              uint64_t v56 = v93.i64[0];
              goto LABEL_3;
            }
          }
          __break(1u);
          break;
        }
        sub_2346C0B9C(v92);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v10 = v77;
      }
LABEL_3:
      unint64_t v25 = v56 + 1;
      uint64_t result = sub_2346C0B9C(v51);
      uint64_t v23 = v78;
      long long v28 = v88;
      float32x4_t v26 = v87;
      if (v25 == v85)
      {
        swift_bridgeObjectRelease();
        return v27;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

unint64_t sub_2347023A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for LineAnimation();
  MEMORY[0x270FA5388](v7);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (__n128 *)((char *)&v68 - v9);
  MEMORY[0x270FA5388](v11);
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) != 3) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v78 = (uint64_t)&v68 - v12;
  v74.i64[0] = v3;
  uint64_t v71 = v14;
  uint64_t v69 = v13;
  uint64_t v15 = (float32x2_t *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
  uint64_t v16 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition;
  __n128 v17 = *(__n128 *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition);
  __n128 v81 = *(__n128 *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
  v73.i64[0] = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation;
  __n128 v18 = *(__n128 *)(a1 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation);
  __n128 v82 = (__n128)xmmword_2347F1A00;
  *(double *)v19.i64 = MEMORY[0x237DC6930](v17, v18);
  float32x4_t v80 = v19;
  __n128 v79 = (__n128)v20;
  float32x4_t v77 = v21;
  float32x4_t v76 = v22;
  float32x4_t v75 = *(float32x4_t *)(a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceDimensions);
  uint64_t v23 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition;
  uint64_t v24 = OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation;
  *(double *)v25.i64 = MEMORY[0x237DC6930](*(__n128 *)(a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpacePosition), *(__n128 *)(a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_worldSpaceOrientation), v82);
  sub_2346D3730(a3, (uint64_t)v83, (float32x4_t)v81, v80, (float32x4_t)v79, v77, v76, v75, v25, v26, v27, v28);
  uint64_t v29 = sub_234705608((uint64_t)v83, (uint64_t)&v84);
  if (v87) {
    return MEMORY[0x263F8EE78];
  }
  v30.n128_u64[0] = (unint64_t)vdiv_f32(v85, *v15);
  v30.n128_f32[2] = v86 / v15[1].f32[0];
  v30.n128_u32[3] = 0;
  float32x4_t v80 = v84;
  __n128 v81 = v30;
  *(double *)v31.i64 = MEMORY[0x237DC6930](v29, *(__n128 *)(a2 + v23), *(__n128 *)(a2 + v24), v82);
  float32x4_t v80 = vaddq_f32(v34, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, v80.f32[0]), v32, *(float32x2_t *)v80.f32, 1), v33, v80, 2));
  uint64_t v35 = v73.i64[0];
  *(double *)v88.columns[0].i64 = MEMORY[0x237DC6930](*(__n128 *)(a1 + v16), *(__n128 *)(a1 + v73.i64[0]), v82);
  simd_float4x4 v89 = __invert_f4(v88);
  *(double *)v36.i64 = MEMORY[0x237DC6930]((__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v89.columns[0], v80.f32[0]), (float32x4_t)v89.columns[1], *(float32x2_t *)v80.f32, 1), (float32x4_t)v89.columns[2], v80, 2), (float32x4_t)v89.columns[3], v80, 3), (__n128)xmmword_2347F19F0, v81);
  float32x4_t v76 = v36;
  __n128 v79 = (__n128)v37;
  float32x4_t v80 = v38;
  __n128 v81 = v39;
  *(double *)v90.columns[0].i64 = MEMORY[0x237DC6930](*(__n128 *)(a2 + v23), *(__n128 *)(a2 + v24), v82);
  simd_float4x4 v91 = __invert_f4(v90);
  float32x4_t v68 = (float32x4_t)v91.columns[0];
  float32x4_t v70 = (float32x4_t)v91.columns[1];
  float32x4_t v72 = (float32x4_t)v91.columns[2];
  float32x4_t v75 = (float32x4_t)v91.columns[3];
  MEMORY[0x237DC6930](*(__n128 *)(a1 + v16), *(__n128 *)(a1 + v35), v82);
  __n128 v82 = v40;
  uint64_t v41 = swift_bridgeObjectRetain();
  uint64_t v42 = sub_2346D69F0(v41);
  swift_bridgeObjectRelease();
  uint64_t v43 = *(void *)(v42 + 16);
  if (!v43)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  v77.i64[0] = v7;
  float32x4_t v44 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, v82.n128_f32[0]), v70, (float32x2_t)v82.n128_u64[0], 1), v72, (float32x4_t)v82, 2), v75, (float32x4_t)v82, 3);
  v44.i32[3] = 1.0;
  float32x4_t v76 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2347F1FE0, v76.f32[0]), (float32x4_t)xmmword_2347F2000, *(float32x2_t *)v76.f32, 1), (float32x4_t)xmmword_2347F1FC0, v76, 2), v44, v76, 3);
  float32x4_t v75 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2347F1FE0, v79.n128_f32[0]), (float32x4_t)xmmword_2347F2000, (float32x2_t)v79.n128_u64[0], 1), (float32x4_t)xmmword_2347F1FC0, (float32x4_t)v79, 2), v44, (float32x4_t)v79, 3);
  float32x4_t v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2347F1FE0, v80.f32[0]), (float32x4_t)xmmword_2347F2000, *(float32x2_t *)v80.f32, 1), (float32x4_t)xmmword_2347F1FC0, v80, 2), v44, v80, 3);
  float32x4_t v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2347F1FE0, v81.n128_f32[0]), (float32x4_t)xmmword_2347F2000, (float32x2_t)v81.n128_u64[0], 1), (float32x4_t)xmmword_2347F1FC0, (float32x4_t)v81, 2), v44, (float32x4_t)v81, 3);
  unint64_t v45 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  v68.i64[0] = v42;
  v72.i64[0] = v45;
  uint64_t v46 = v42 + v45;
  uint64_t v71 = *(void *)(v71 + 72);
  unint64_t v47 = MEMORY[0x263F8EE78];
  float32x4_t v70 = (float32x4_t)xmmword_2347F19A0;
  uint64_t v48 = v69;
  uint64_t v49 = v78;
  do
  {
    v80.i64[0] = v43;
    sub_2346C0B38(v46, v49);
    float32x4_t v50 = *(float32x4_t *)(v49 + 48);
    float32x4_t v51 = vaddq_f32(v73, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, COERCE_FLOAT(*(_OWORD *)(v49 + 32))), v75, *(float32x2_t *)(v49 + 32), 1), v74, *(float32x4_t *)(v49 + 32), 2));
    v51.i32[3] = v82.n128_i32[3];
    __n128 v82 = (__n128)v51;
    float32x4_t v52 = vaddq_f32(v73, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v76, v50.f32[0]), v75, *(float32x2_t *)v50.f32, 1), v74, v50, 2));
    v52.i32[3] = v81.n128_i32[3];
    __n128 v81 = (__n128)v52;
    unsigned __int8 v53 = *(unsigned char *)v49;
    unint64_t v55 = *(void *)(v49 + 8);
    unint64_t v54 = *(void *)(v49 + 16);
    unsigned __int32 v56 = *(_DWORD *)(v49 + 64);
    __n128 v79 = *(__n128 *)(v49 + 80);
    char v57 = *(unsigned char *)(v49 + 104);
    uint64_t v58 = (uint64_t)v10 + *(int *)(v77.i64[0] + 60);
    unint64_t v59 = *(void *)(v49 + 96);
    sub_2346BFF00(v58);
    uint64_t v60 = sub_2347ED540();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v58, 0, 1, v60);
    v10->n128_u8[0] = v53;
    v10->n128_u64[1] = v55;
    v10[1].n128_u64[0] = v54;
    __n128 v61 = v81;
    v10[2] = v82;
    void v10[3] = v61;
    v10[4].n128_u32[0] = v56;
    v10[5] = v79;
    v10[6].n128_u64[0] = v59;
    v10[6].n128_u8[8] = v57;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC820);
    uint64_t v62 = swift_allocObject();
    __n128 v63 = v82;
    *(float32x4_t *)(v62 + 16) = v70;
    *(__n128 *)(v62 + 32) = v63;
    *(__n128 *)(v62 + 48) = v81;
    v10[7].n128_u64[0] = v62;
    sub_2346C0B38((uint64_t)v10, v48);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v47 = sub_2346FAFC4(0, *(void *)(v47 + 16) + 1, 1, v47);
    }
    unint64_t v65 = *(void *)(v47 + 16);
    unint64_t v64 = *(void *)(v47 + 24);
    if (v65 >= v64 >> 1) {
      unint64_t v47 = sub_2346FAFC4(v64 > 1, v65 + 1, 1, v47);
    }
    *(void *)(v47 + 16) = v65 + 1;
    uint64_t v66 = v71;
    sub_234705558(v48, v47 + v72.i64[0] + v65 * v71);
    uint64_t v49 = v78;
    sub_2346C0B9C(v78);
    sub_2346C0B9C((uint64_t)v10);
    v46 += v66;
    uint64_t v43 = v80.i64[0] - 1;
  }
  while (v80.i64[0] != 1);
  swift_bridgeObjectRelease();
  return v47;
}

uint64_t sub_234702A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC8F0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + *(int *)(type metadata accessor for AnimationGraph() + 40);
  sub_2346C09D0(v6, (uint64_t)v5);
  uint64_t v7 = sub_2347ED540();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  }
  sub_2346C0970((uint64_t)v5);
  sub_2347ED520();
  sub_2346C0970(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
}

uint64_t sub_234702BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>, float32x4_t a7@<Q1>, float32x4_t a8@<Q2>, float32x4_t a9@<Q3>, float32x4_t a10@<Q4>)
{
  sub_2346C0B38(a1, a5);
  if (*(void *)(a2 + 16) && (unint64_t v16 = sub_2347BFCB4(*(unsigned char *)(a1 + 104)), (v17 & 1) != 0))
  {
    uint64_t v18 = *(void *)(a2 + 56) + 40 * v16;
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(unsigned __int8 *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    int v23 = *(_DWORD *)(v18 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = 0;
  }
  uint64_t v24 = type metadata accessor for AnimationGraph();
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v25 = *(void *)&a3[*(int *)(v24 + 44)];
  unint64_t v26 = *(void *)(v25 + 16);
  if (v26 <= a4)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v27 = *(void *)(a5 + 16);
  if (v27 < v26)
  {
    char v57 = a3;
    int v58 = v23;
    uint64_t v59 = v22;
    uint64_t v60 = v21;
    uint64_t v61 = v20;
    uint64_t v62 = v19;
    uint64_t v70 = v10;
    uint64_t v28 = v25 + 32;
    uint64_t v29 = (unsigned __int8 *)(v28 + 5 * a4);
    int v30 = v29[4];
    int v31 = v29[3];
    int v32 = v29[2];
    int v33 = v29[1];
    uint64_t v34 = *v29;
    uint64_t v35 = (unsigned __int8 *)(v28 + 5 * v27);
    uint64_t v36 = *v35;
    int v37 = v35[1];
    int v38 = v35[2];
    int v39 = v35[3];
    int v40 = v35[4];
    if (v30) {
      uint64_t v41 = 0x100000000;
    }
    else {
      uint64_t v41 = 0;
    }
    if (v31) {
      uint64_t v42 = 0x1000000;
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = v42 | v41;
    if (v32) {
      uint64_t v44 = 0x10000;
    }
    else {
      uint64_t v44 = 0;
    }
    if (v33) {
      uint64_t v45 = 256;
    }
    else {
      uint64_t v45 = 0;
    }
    v46.f32[0] = sub_2346D22EC(v43 | v44 | v45 | v34, *(float32x2_t *)a10.f32);
    float32x4_t v55 = v46;
    if (v40) {
      uint64_t v47 = 0x100000000;
    }
    else {
      uint64_t v47 = 0;
    }
    if (v39) {
      uint64_t v48 = 0x1000000;
    }
    else {
      uint64_t v48 = 0;
    }
    if (v38) {
      uint64_t v49 = 0x10000;
    }
    else {
      uint64_t v49 = 0;
    }
    if (v37) {
      uint64_t v50 = 256;
    }
    else {
      uint64_t v50 = 0;
    }
    *(float *)v51.i32 = sub_2346D22EC(v50 | v36 | v49 | v48 | v47, *(float32x2_t *)a10.f32);
    int8x16_t v56 = v51;
    if (qword_2687ABE90 == -1) {
      goto LABEL_33;
    }
    goto LABEL_42;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  swift_once();
LABEL_33:
  switch(*v57)
  {
    case 2:
      float32x4_t v52 = (float *)((char *)off_2687AF0E8 + 76);
      break;
    case 3:
      float32x4_t v52 = (float *)((char *)off_2687AF0E8 + 84);
      break;
    case 6:
      float32x4_t v52 = (float *)((char *)off_2687AF0E8 + 80);
      break;
    default:
      float32x4_t v52 = (float *)((char *)off_2687AF0E8 + 88);
      break;
  }
  swift_beginAccess();
  double v53 = *v52;
  v68[0] = v62;
  v68[1] = v61;
  v68[2] = v60;
  v68[3] = v59;
  int v69 = v58;
  sub_2346C0070(v68, a6, a7, a8, a9, a10, v55, v56, v53);
  return sub_2347055BC(v62);
}

uint64_t sub_234702EA4(unint64_t a1, unint64_t a2, void *a3, char *a4, __n128 a5, float a6, __n128 a7)
{
  uint64_t v8 = v7;
  __n128 v66 = a7;
  __n128 v67 = a5;
  uint64_t v14 = type metadata accessor for LineAnimation();
  unint64_t v65 = *(char **)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v64 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v64 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v64 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v64 - v23;
  MEMORY[0x270FA5388](v25);
  unint64_t v27 = (__n128 *)((char *)&v64 - v26);
  char v28 = *a4;
  uint64_t v29 = type metadata accessor for AnimationGraph();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v30 = *(void *)((char *)v8 + *(int *)(v29 + 44));
  if (*(void *)(v30 + 16) <= a1)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    uint64_t v8 = (void *)sub_2346FAFC4(0, v8[2] + 1, 1, (unint64_t)v8);
    *a3 = v8;
LABEL_27:
    unint64_t v62 = v8[2];
    unint64_t v61 = v8[3];
    if (v62 >= v61 >> 1)
    {
      uint64_t v8 = (void *)sub_2346FAFC4(v61 > 1, v62 + 1, 1, (unint64_t)v8);
      *a3 = v8;
    }
    void v8[2] = v62 + 1;
    sub_234705558((uint64_t)v21, (uint64_t)v8+ ((v18[80] + 32) & ~(unint64_t)v18[80])+ *((void *)v18 + 9) * v62);
    ((void (*)(void *, void))v14)(v68, 0);
    return sub_2346C0B9C((uint64_t)v27);
  }
  int v31 = (unsigned __int8 *)(v30 + 5 * a1);
  uint64_t v32 = v31[32];
  int v33 = v31[33];
  int v34 = v31[34];
  int v35 = v31[35];
  BOOL v36 = v31[36] == 0;
  uint64_t v37 = 0x100000000;
  if (v36) {
    uint64_t v37 = 0;
  }
  BOOL v36 = v35 == 0;
  uint64_t v38 = 0x1000000;
  if (v36) {
    uint64_t v38 = 0;
  }
  BOOL v36 = v34 == 0;
  uint64_t v39 = 0x10000;
  if (v36) {
    uint64_t v39 = 0;
  }
  BOOL v36 = v33 == 0;
  uint64_t v40 = 256;
  if (v36) {
    uint64_t v40 = 0;
  }
  v41.n128_f32[0] = sub_2346D22EC(v40 | v32 | v39 | v38 | v37, (float32x2_t)v66.n128_u64[0]);
  __n128 v66 = v41;
  uint64_t v42 = (char *)v27 + *(int *)(v14 + 60);
  uint64_t v43 = sub_2347ED540();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 1, v43);
  v27->n128_u8[0] = a3 & 1;
  v27->n128_u64[1] = a1;
  v27[1].n128_u64[0] = a2;
  __n128 v44 = v66;
  void v27[2] = v66;
  v27[3] = v44;
  v27[4].n128_f32[0] = a6;
  v27[5] = v67;
  v27[6].n128_u64[0] = 0x3F80000000000000;
  v27[6].n128_u8[8] = v28;
  v27[7].n128_u64[0] = MEMORY[0x263F8EE78];
  uint64_t v47 = v8[5];
  float32x4_t v46 = v8 + 5;
  uint64_t v45 = v47;
  if (*(void *)(v47 + 16))
  {
    unint64_t v48 = sub_2347BFCB8(a1);
    if (v49)
    {
      unint64_t v50 = *(void *)(*(void *)(v45 + 56) + 8 * v48);
      uint64_t v51 = *(void *)(v50 + 16);
      float32x4_t v52 = v65;
      if (v51)
      {
        v66.n128_u64[0] = (unint64_t)v46;
        uint64_t v53 = v50 + ((v65[80] + 32) & ~(unint64_t)v65[80]);
        uint64_t v54 = *((void *)v65 + 9);
        v67.n128_u64[0] = v50;
        swift_bridgeObjectRetain();
        do
        {
          sub_2346C0B38(v53, (uint64_t)v24);
          uint64_t v55 = *((void *)v24 + 1);
          unint64_t v56 = v27->n128_u64[1];
          sub_2346C0B38((uint64_t)v24, (uint64_t)v21);
          sub_2346C0B38((uint64_t)v27, (uint64_t)v18);
          if (v55 == v56)
          {
            uint64_t v57 = *((void *)v21 + 2);
            sub_2346C0B9C((uint64_t)v21);
            uint64_t v58 = *((void *)v18 + 2);
            sub_2346C0B9C((uint64_t)v18);
            sub_2346C0B9C((uint64_t)v24);
            if (v57 == v58)
            {
              swift_bridgeObjectRelease();
              return sub_2346C0B9C((uint64_t)v27);
            }
          }
          else
          {
            sub_2346C0B9C((uint64_t)v18);
            sub_2346C0B9C((uint64_t)v21);
            sub_2346C0B9C((uint64_t)v24);
          }
          v53 += v54;
          --v51;
        }
        while (v51);
        swift_bridgeObjectRelease();
        float32x4_t v52 = v65;
      }
      uint64_t v14 = (uint64_t)sub_2347011E8(v68, a1);
      if (!*v59)
      {
        ((void (*)(void *, void))v14)(v68, 0);
        return sub_2346C0B9C((uint64_t)v27);
      }
      a3 = v59;
      uint64_t v18 = v52;
      uint64_t v21 = v64;
      sub_2346C0B38((uint64_t)v27, (uint64_t)v64);
      uint64_t v8 = (void *)*a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v8;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_27;
      }
      goto LABEL_34;
    }
  }
  return sub_2346C0B9C((uint64_t)v27);
}

void sub_234703308(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  uint64_t v5 = v4;
  __n128 v38 = a4;
  uint64_t v9 = type metadata accessor for LineAnimation();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = *(void *)(v4 + 40);
  if (*(void *)(v16 + 16) && (unint64_t v17 = sub_2347BFCB8(a1), (v18 & 1) != 0))
  {
    int v37 = a3;
    uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      uint64_t v35 = v10;
      uint64_t v36 = v5;
      uint64_t v21 = v19 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      uint64_t v22 = *(void *)(v10 + 72);
      swift_bridgeObjectRetain();
      for (unint64_t i = 0; i != v20; ++i)
      {
        sub_2346C0B38(v21, (uint64_t)v15);
        uint64_t v24 = *((void *)v15 + 1);
        sub_2346C0B38((uint64_t)v15, (uint64_t)v12);
        if (v24 == a1)
        {
          uint64_t v25 = *((void *)v12 + 2);
          sub_2346C0B9C((uint64_t)v12);
          sub_2346C0B9C((uint64_t)v15);
          if (v25 == a2)
          {
            uint64_t v26 = 0;
            goto LABEL_12;
          }
        }
        else
        {
          sub_2346C0B9C((uint64_t)v12);
          sub_2346C0B9C((uint64_t)v15);
        }
        v21 += v22;
      }
      unint64_t i = 0;
      uint64_t v26 = 1;
LABEL_12:
      uint64_t v10 = v35;
      swift_bridgeObjectRelease();
      uint64_t v5 = v36;
    }
    else
    {
      unint64_t i = 0;
      uint64_t v26 = 1;
    }
    LOBYTE(a3) = v37;
  }
  else
  {
    unint64_t i = 0;
    uint64_t v26 = 1;
  }
  uint64_t v27 = *(void *)(v5 + 40);
  if (*(void *)(v27 + 16))
  {
    unint64_t v28 = sub_2347BFCB8(a1);
    if ((v29 & 1) != 0 && (v26 & 1) == 0)
    {
      uint64_t v30 = *(void *)(*(void *)(v27 + 56) + 8 * v28);
      if (i >= *(void *)(v30 + 16))
      {
        __break(1u);
      }
      else
      {
        uint64_t v12 = (char *)((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        uint64_t v26 = (uint64_t)&v12[v30];
        uint64_t v10 = *(void *)(v10 + 72) * i;
        if (v12[v30 + v10] == (a3 & 1)) {
          return;
        }
        uint64_t v31 = qword_2687ABE90;
        swift_bridgeObjectRetain();
        if (v31 == -1) {
          goto LABEL_21;
        }
      }
      swift_once();
LABEL_21:
      uint64_t v32 = (char *)off_2687AF0E8;
      swift_beginAccess();
      if (v32[64] != 1) {
        goto LABEL_25;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_43;
      }
      while (i < *(void *)(v30 + 16))
      {
LABEL_29:
        v12[v30 + v10] = a3 & 1;
LABEL_30:
        switch(*(unsigned char *)v5)
        {
          case 2:
            v32 += 76;
            break;
          case 3:
            v32 += 84;
            break;
          case 6:
            v32 += 80;
            break;
          default:
            v32 += 88;
            break;
        }
        swift_beginAccess();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = sub_23473D0C0(v30);
        }
        if (i < *(void *)(v30 + 16))
        {
          sub_2346C068C(v38);
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v39 = *(void *)(v5 + 40);
          *(void *)(v5 + 40) = 0x8000000000000000;
          sub_2347AAC08(v30, a1, isUniquelyReferenced_nonNull_native);
          *(void *)(v5 + 40) = v39;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        __break(1u);
LABEL_43:
        uint64_t v30 = sub_23473D0C0(v30);
      }
      __break(1u);
LABEL_25:
      if (i >= *(void *)(v30 + 16))
      {
        __break(1u);
      }
      else
      {
        if (*(unsigned char *)(v26 + v10)) {
          goto LABEL_30;
        }
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_28;
        }
      }
      uint64_t v30 = sub_23473D0C0(v30);
LABEL_28:
      if (i >= *(void *)(v30 + 16))
      {
        __break(1u);
        JUMPOUT(0x234703708);
      }
      goto LABEL_29;
    }
  }
}

uint64_t sub_234703724(__n128 a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = type metadata accessor for AnimationGraph();
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  uint64_t v5 = *(int *)(v4 + 44);
  uint64_t v6 = *(void *)(v1 + v5);
  if (v3 >= *(void *)(v6 + 16))
  {
LABEL_73:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v7 = (unsigned __int8 *)(v6 + 5 * v3);
  int v8 = v7[32];
  int v9 = v7[33];
  int v10 = v7[34];
  float v11 = -1.0;
  if (v8) {
    float v12 = 1.0;
  }
  else {
    float v12 = -1.0;
  }
  if (v9) {
    float v13 = 1.0;
  }
  else {
    float v13 = -1.0;
  }
  v14.n128_u32[3] = 0;
  float v76 = v13;
  float v77 = v12;
  v14.n128_f32[0] = v12;
  if (v10) {
    float v11 = 1.0;
  }
  v14.n128_f32[1] = v13;
  v14.n128_f32[2] = v11;
  __n128 v71 = v14;
  float v75 = v11;
  uint64_t v15 = *(void *)(v1 + 8);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = sub_2347C16F0(v15);
  swift_bridgeObjectRelease();
  v78[0] = (uint64_t)v16;
  sub_234701A20(v78, v2, v71);
  swift_bridgeObjectRelease();
  uint64_t v17 = v78[0];
  uint64_t v60 = *(void *)(v78[0] + 16);
  if (v60)
  {
    unint64_t v18 = 0;
    uint64_t v61 = *(void *)(v2 + 8);
    uint64_t v62 = v78[0] + 32;
    __asm { FMOV            V10.2S, #1.0 }
    uint64_t v65 = v2;
    uint64_t v58 = v5;
    uint64_t v59 = v78[0];
    while (v18 < *(void *)(v17 + 16))
    {
      unint64_t v24 = *(void *)(v62 + 8 * v18);
      if ((v24 & 0x8000000000000000) != 0) {
        goto LABEL_69;
      }
      uint64_t v25 = *(char **)(v2 + v5);
      if (v24 >= *((void *)v25 + 2)) {
        goto LABEL_70;
      }
      unint64_t v63 = v18;
      uint64_t v26 = (unsigned __int8 *)&v25[5 * v24];
      int v27 = v26[32];
      int v28 = v26[33];
      int v72 = v26[34];
      unsigned __int8 v29 = v26[36];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v25 = sub_23473D0AC((uint64_t)v25);
      }
      if (v24 >= *((void *)v25 + 2)) {
        goto LABEL_71;
      }
      uint64_t v30 = &v25[5 * v24 + 32];
      *uint64_t v30 = v27;
      v30[1] = v28;
      void v30[2] = v72;
      v30[3] = 1;
      v30[4] = v29;
      *(void *)(v2 + v5) = v25;
      if (!*(void *)(v61 + 16)) {
        goto LABEL_61;
      }
      unint64_t v31 = sub_2347BFCB8(v24);
      if ((v32 & 1) == 0) {
        goto LABEL_61;
      }
      uint64_t v33 = *(void *)(*(void *)(v61 + 56) + 8 * v31);
      uint64_t v34 = *(void *)(v33 + 16);
      if (v34)
      {
        if (v27) {
          float v35 = 1.0;
        }
        else {
          float v35 = -1.0;
        }
        if (v28) {
          float v36 = 1.0;
        }
        else {
          float v36 = -1.0;
        }
        if (v72) {
          float v37 = 1.0;
        }
        else {
          float v37 = -1.0;
        }
        v38.i64[0] = __PAIR64__(LODWORD(v36), LODWORD(v35));
        v38.i64[1] = LODWORD(v37);
        float32x4_t v66 = v38;
        float v39 = (float)(vabds_f32(v35, v77) + vabds_f32(v36, v76)) + vabds_f32(v37, v75);
        swift_bridgeObjectRetain();
        uint64_t v40 = 0;
        while (1)
        {
          uint64_t v41 = *(void *)(v33 + 8 * v40 + 32);
          if (v41 < 0) {
            break;
          }
          if ((unint64_t)v41 >= *((void *)v25 + 2)) {
            goto LABEL_65;
          }
          uint64_t v42 = &v25[5 * v41 + 32];
          if ((v42[3] & 1) == 0)
          {
            if (*v42) {
              float v43 = 1.0;
            }
            else {
              float v43 = -1.0;
            }
            if (v42[1]) {
              float v44 = 1.0;
            }
            else {
              float v44 = -1.0;
            }
            if (v42[2]) {
              float v45 = 1.0;
            }
            else {
              float v45 = -1.0;
            }
            v46.i64[0] = __PAIR64__(LODWORD(v44), LODWORD(v43));
            v46.i64[1] = LODWORD(v45);
            if (v39 >= (float)(vabds_f32(v45, v75) + (float)(vabds_f32(v44, v76) + vabds_f32(v43, v77))))
            {
              uint64_t v47 = v24;
              float32x4_t v48 = v66;
            }
            else
            {
              uint64_t v47 = *(void *)(v33 + 8 * v40 + 32);
              uint64_t v41 = v24;
              float32x4_t v48 = v46;
              float32x4_t v46 = v66;
            }
            float32x4_t v49 = vsubq_f32(v46, v48);
            float v50 = fabsf(v49.f32[2]);
            if (v50 <= 1.0) {
              float v51 = v50;
            }
            else {
              float v51 = 1.0;
            }
            if (qword_2687ABDC0 == -1)
            {
              if (v41 > 0x7FFFFFFF) {
                goto LABEL_66;
              }
            }
            else
            {
              float v70 = v51;
              float32x4_t v74 = v46;
              uint64_t v68 = v49.i64[0];
              swift_once();
              v49.i64[0] = v68;
              float v51 = v70;
              float32x4_t v46 = v74;
              if (v41 > 0x7FFFFFFF) {
                goto LABEL_66;
              }
            }
            if (v47 > 0x7FFFFFFF) {
              goto LABEL_67;
            }
            uint64_t v52 = qword_2687BE060;
            if (*(void *)(qword_2687BE060 + 16))
            {
              float v69 = v51;
              float32x4_t v73 = v46;
              float32x2_t v67 = *(float32x2_t *)v49.f32;
              unint64_t v53 = sub_2347BFDC0((int32x2_t)__PAIR64__(v47, v41));
              if (v54)
              {
                float32x2_t v55 = vabs_f32(v67);
                v56.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcgt_f32(v55, _D10), (int8x8_t)_D10, (int8x8_t)v55);
                v56.n128_u64[1] = LODWORD(v69);
                LOBYTE(v78[0]) = *(unsigned char *)(*(void *)(v52 + 56) + v53);
                sub_234702EA4(v41, v47, 0, (char *)v78, v56, (float)(vabds_f32(v75, v73.f32[2]) + (float)(vabds_f32(v77, v73.f32[0]) + vabds_f32(v76, v73.f32[1])))* 0.5, a1);
              }
            }
          }
          if (v34 == ++v40)
          {
            swift_bridgeObjectRelease();
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        break;
      }
LABEL_14:
      unint64_t v18 = v63 + 1;
      uint64_t v17 = v59;
      uint64_t v2 = v65;
      uint64_t v5 = v58;
      if (v63 + 1 == v60) {
        goto LABEL_61;
      }
    }
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
LABEL_61:

  return swift_release();
}

uint64_t sub_234703BD0(unint64_t *a1, unint64_t *a2, uint64_t a3, __n128 a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = *a2;
  uint64_t result = type metadata accessor for AnimationGraph();
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)(a3 + *(int *)(result + 44));
  unint64_t v9 = *(void *)(v8 + 16);
  if (v5 >= v9)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v6 >= v9)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v10 = v8 + 32;
  float v11 = (unsigned char *)(v10 + 5 * v5);
  float v12 = (unsigned __int8 *)(v10 + 5 * v6);
  int v13 = *v12;
  int v14 = v12[1];
  int v15 = v12[2];
  float v16 = -1.0;
  if (*v11) {
    float v17 = 1.0;
  }
  else {
    float v17 = -1.0;
  }
  if (v11[1]) {
    float v18 = 1.0;
  }
  else {
    float v18 = -1.0;
  }
  if (v11[2]) {
    float v19 = 1.0;
  }
  else {
    float v19 = -1.0;
  }
  if (v13) {
    float v20 = 1.0;
  }
  else {
    float v20 = -1.0;
  }
  if (v14) {
    float v21 = 1.0;
  }
  else {
    float v21 = -1.0;
  }
  if (v15) {
    float v16 = 1.0;
  }
  return (float)(vabds_f32(v19, a4.n128_f32[2])
               + (float)(vabds_f32(v18, a4.n128_f32[1]) + vabds_f32(v17, a4.n128_f32[0]))) < (float)((float)(vabds_f32(v20, a4.n128_f32[0]) + vabds_f32(v21, a4.n128_f32[1])) + vabds_f32(v16, a4.n128_f32[2]));
}

uint64_t sub_234703CE8()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD228);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F1A10;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 40) = &unk_26E76FAB0;
  *(void *)(inited + 48) = 1;
  *(void *)(inited + 56) = &unk_26E76FAE0;
  *(void *)(inited + 64) = 2;
  *(void *)(inited + 72) = &unk_26E76FB10;
  *(void *)(inited + 80) = 3;
  *(void *)(inited + 88) = &unk_26E76FB40;
  unint64_t v1 = sub_2347ACFE4((void *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AD230);
  uint64_t result = swift_arrayDestroy();
  qword_2687BE038 = v1;
  return result;
}

uint64_t sub_234703DB0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD228);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F1A10;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 40) = &unk_26E76F930;
  *(void *)(inited + 48) = 1;
  *(void *)(inited + 56) = &unk_26E76F960;
  *(void *)(inited + 64) = 2;
  *(void *)(inited + 72) = &unk_26E76F990;
  *(void *)(inited + 80) = 3;
  *(void *)(inited + 88) = &unk_26E76F9C0;
  unint64_t v1 = sub_2347ACFE4((void *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AD230);
  uint64_t result = swift_arrayDestroy();
  qword_2687BE040 = v1;
  return result;
}

uint64_t sub_234703E78()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD228);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F1A10;
  *(void *)(inited + 32) = 1;
  *(void *)(inited + 40) = &unk_26E76F870;
  *(void *)(inited + 48) = 5;
  *(void *)(inited + 56) = &unk_26E76F8A0;
  *(void *)(inited + 64) = 6;
  *(void *)(inited + 72) = &unk_26E76F8D0;
  *(void *)(inited + 80) = 2;
  *(void *)(inited + 88) = &unk_26E76F900;
  unint64_t v1 = sub_2347ACFE4((void *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AD230);
  uint64_t result = swift_arrayDestroy();
  qword_2687BE048 = v1;
  return result;
}

uint64_t sub_234703F44()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD228);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F1A10;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 40) = &unk_26E76F9F0;
  *(void *)(inited + 48) = 4;
  *(void *)(inited + 56) = &unk_26E76FA20;
  *(void *)(inited + 64) = 7;
  *(void *)(inited + 72) = &unk_26E76FA50;
  *(void *)(inited + 80) = 3;
  *(void *)(inited + 88) = &unk_26E76FA80;
  unint64_t v1 = sub_2347ACFE4((void *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AD230);
  uint64_t result = swift_arrayDestroy();
  qword_2687BE050 = v1;
  return result;
}

uint64_t sub_23470400C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD228);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F2580;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 40) = &unk_26E76F6B0;
  *(void *)(inited + 48) = 1;
  *(void *)(inited + 56) = &unk_26E76F6E8;
  *(void *)(inited + 64) = 2;
  *(void *)(inited + 72) = &unk_26E76F720;
  *(void *)(inited + 80) = 3;
  *(void *)(inited + 88) = &unk_26E76F758;
  *(void *)(inited + 96) = 4;
  *(void *)(inited + 104) = &unk_26E76F790;
  *(void *)(inited + 112) = 5;
  *(void *)(inited + 120) = &unk_26E76F7C8;
  *(void *)(inited + 128) = 6;
  *(void *)(inited + 136) = &unk_26E76F800;
  *(void *)(inited + 144) = 7;
  *(void *)(inited + 152) = &unk_26E76F838;
  unint64_t v1 = sub_2347ACFE4((void *)inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AD230);
  uint64_t result = swift_arrayDestroy();
  qword_2687BE058 = v1;
  return result;
}

uint64_t sub_234704114()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD220);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F3CD0;
  *(void *)(inited + 32) = 0x100000000;
  *(unsigned char *)(inited + 40) = 3;
  *(void *)(inited + 48) = 1;
  *(unsigned char *)(inited + 56) = 3;
  *(void *)(inited + 64) = 0x500000004;
  *(unsigned char *)(inited + 72) = 3;
  *(void *)(inited + 80) = 0x400000005;
  *(unsigned char *)(inited + 88) = 3;
  *(void *)(inited + 96) = 0x200000001;
  *(unsigned char *)(inited + 104) = 0;
  *(void *)(inited + 112) = 0x100000002;
  *(unsigned char *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0x600000005;
  *(unsigned char *)(inited + 136) = 0;
  *(void *)(inited + 144) = 0x500000006;
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0x500000001;
  *(unsigned char *)(inited + 168) = 0;
  *(void *)(inited + 176) = 0x100000005;
  *(unsigned char *)(inited + 184) = 0;
  *(void *)(inited + 192) = 0x600000002;
  *(unsigned char *)(inited + 200) = 0;
  *(void *)(inited + 208) = 0x200000006;
  *(unsigned char *)(inited + 216) = 0;
  *(void *)(inited + 224) = 0x300000002;
  *(unsigned char *)(inited + 232) = 1;
  *(void *)(inited + 240) = 0x200000003;
  *(unsigned char *)(inited + 248) = 1;
  *(void *)(inited + 256) = 0x700000006;
  *(unsigned char *)(inited + 264) = 1;
  *(void *)(inited + 272) = 0x600000007;
  *(unsigned char *)(inited + 280) = 1;
  *(void *)(inited + 288) = 0x300000000;
  *(unsigned char *)(inited + 296) = 2;
  *(void *)(inited + 304) = 3;
  *(unsigned char *)(inited + 312) = 2;
  *(void *)(inited + 320) = 0x400000000;
  *(unsigned char *)(inited + 328) = 2;
  *(void *)(inited + 336) = 4;
  *(unsigned char *)(inited + 344) = 2;
  *(void *)(inited + 352) = 0x700000003;
  *(unsigned char *)(inited + 360) = 2;
  *(void *)(inited + 368) = 0x300000007;
  *(unsigned char *)(inited + 376) = 2;
  *(void *)(inited + 384) = 0x700000004;
  *(unsigned char *)(inited + 392) = 2;
  *(void *)(inited + 400) = 0x400000007;
  *(unsigned char *)(inited + 408) = 2;
  unint64_t v1 = sub_2347AD0E4(inited);
  uint64_t result = swift_setDeallocating();
  qword_2687BE060 = v1;
  return result;
}

uint64_t sub_234704308(uint64_t *a1, uint64_t a2, __n128 a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1[1];
  uint64_t result = sub_2347EF060();
  if (result >= v7)
  {
    if (v7 < 0) {
      goto LABEL_162;
    }
    if (v7) {
      return sub_234704AF4(0, v7, 1, a1, a2, a3);
    }
    return result;
  }
  if (v7 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v7 + 1;
  }
  if (v7 < -1) {
    goto LABEL_171;
  }
  uint64_t v10 = result;
  uint64_t v122 = a2;
  float32x4_t v115 = a1;
  if (v7 < 2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    float64x2_t v121 = (unint64_t *)(MEMORY[0x263F8EE78] + 32);
    __n128 v13 = a3;
    if (v7 != 1)
    {
      unint64_t v55 = *(void *)(MEMORY[0x263F8EE78] + 16);
      float v19 = (char *)MEMORY[0x263F8EE78];
LABEL_123:
      uint64_t v119 = v14;
      if (v55 >= 2)
      {
        uint64_t v105 = *v115;
        do
        {
          unint64_t v106 = v55 - 2;
          if (v55 < 2) {
            goto LABEL_157;
          }
          if (!v105) {
            goto LABEL_170;
          }
          uint64_t v107 = (uint64_t)v19;
          uint64_t v108 = *(void *)&v19[16 * v106 + 32];
          uint64_t v109 = *(void *)&v19[16 * v55 + 24];
          sub_234704BBC((unint64_t *)(v105 + 8 * v108), (unint64_t *)(v105 + 8 * *(void *)&v19[16 * v55 + 16]), v105 + 8 * v109, v121, v122, v13);
          if (v4) {
            break;
          }
          if (v109 < v108) {
            goto LABEL_158;
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            char v110 = (char *)v107;
          }
          else {
            char v110 = sub_234748228(v107);
          }
          if (v106 >= *((void *)v110 + 2)) {
            goto LABEL_159;
          }
          float64x2_t v111 = &v110[16 * v106 + 32];
          *(void *)float64x2_t v111 = v108;
          *((void *)v111 + 1) = v109;
          unint64_t v112 = *((void *)v110 + 2);
          if (v55 > v112) {
            goto LABEL_160;
          }
          float64x2_t v113 = v110;
          memmove(&v110[16 * v55 + 16], &v110[16 * v55 + 32], 16 * (v112 - v55));
          float v19 = v113;
          *((void *)v113 + 2) = v112 - 1;
          unint64_t v55 = v112 - 1;
          uint64_t v4 = 0;
          __n128 v13 = a3;
        }
        while (v112 > 2);
      }
LABEL_136:
      swift_bridgeObjectRelease();
      *(void *)(v119 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v119 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v11 = v9 >> 1;
    uint64_t v12 = sub_2347EE810();
    *(void *)(v12 + 16) = v11;
    uint64_t v119 = v12;
    float64x2_t v121 = (unint64_t *)(v12 + 32);
    __n128 v13 = a3;
  }
  uint64_t v15 = 0;
  uint64_t v16 = *a1;
  float v17 = v13.n128_f32[1];
  float v18 = v13.n128_f32[2];
  uint64_t v116 = *a1 + 16;
  uint64_t v114 = *a1 - 8;
  float v19 = (char *)MEMORY[0x263F8EE78];
  uint64_t v117 = v10;
  uint64_t v118 = v7;
  uint64_t v120 = *a1;
  while (1)
  {
    uint64_t v20 = v15++;
    if (v15 < v7)
    {
      float v21 = v19;
      unint64_t v126 = *(void *)(v16 + 8 * v15);
      v125[0] = *(void *)(v16 + 8 * v20);
      int v22 = sub_234703BD0(&v126, v125, a2, v13);
      if (v4) {
        goto LABEL_136;
      }
      int v23 = v22;
      uint64_t v15 = v20 + 2;
      if (v20 + 2 < v7)
      {
        unint64_t v24 = (unint64_t *)(v116 + 8 * v20);
        __n128 v25 = a3;
        while (1)
        {
          unint64_t v126 = *v24;
          v125[0] = *(v24 - 1);
          if ((v23 ^ sub_234703BD0(&v126, v125, a2, v25))) {
            break;
          }
          ++v24;
          ++v15;
          __n128 v25 = a3;
          if (v7 == v15)
          {
            uint64_t v15 = v7;
            break;
          }
        }
      }
      if (v23)
      {
        if (v15 < v20) {
          goto LABEL_166;
        }
        float v19 = v21;
        if (v20 < v15)
        {
          uint64_t v26 = v15 - 1;
          uint64_t v27 = v20;
          do
          {
            if (v27 != v26)
            {
              if (!v120) {
                goto LABEL_169;
              }
              uint64_t v28 = *(void *)(v120 + 8 * v27);
              *(void *)(v120 + 8 * v27) = *(void *)(v120 + 8 * v26);
              *(void *)(v120 + 8 * v26) = v28;
            }
            BOOL v86 = ++v27 < v26--;
          }
          while (v86);
        }
      }
      else
      {
        float v19 = v21;
      }
    }
    if (v15 >= v7) {
      goto LABEL_70;
    }
    if (__OFSUB__(v15, v20)) {
      goto LABEL_163;
    }
    if (v15 - v20 >= v10) {
      goto LABEL_70;
    }
    if (__OFADD__(v20, v10)) {
      goto LABEL_164;
    }
    uint64_t v29 = v20 + v10 >= v7 ? v7 : v20 + v10;
    if (v29 < v20) {
      break;
    }
    if (v15 != v29)
    {
      uint64_t v30 = v19;
      uint64_t v31 = type metadata accessor for AnimationGraph();
      float v19 = v30;
      uint64_t v32 = *(int *)(v31 + 44);
      uint64_t v33 = (unint64_t *)(v114 + 8 * v15);
      do
      {
        unint64_t v34 = *(void *)(v120 + 8 * v15);
        uint64_t v35 = v20;
        float v36 = v33;
        do
        {
          if ((v34 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
            goto LABEL_165;
          }
          uint64_t v37 = *(void *)(a2 + v32);
          unint64_t v38 = *(void *)(v37 + 16);
          if (v34 >= v38) {
            goto LABEL_140;
          }
          unint64_t v39 = *v36;
          if (*v36 >= v38) {
            goto LABEL_141;
          }
          uint64_t v40 = v37 + 32;
          uint64_t v41 = (unsigned char *)(v40 + 5 * v34);
          uint64_t v42 = (unsigned __int8 *)(v40 + 5 * v39);
          int v43 = *v42;
          int v44 = v42[1];
          int v45 = v42[2];
          if (*v41) {
            float v46 = 1.0;
          }
          else {
            float v46 = -1.0;
          }
          if (v41[1]) {
            float v47 = 1.0;
          }
          else {
            float v47 = -1.0;
          }
          if (v41[2]) {
            float v48 = 1.0;
          }
          else {
            float v48 = -1.0;
          }
          if (v43) {
            float v49 = 1.0;
          }
          else {
            float v49 = -1.0;
          }
          if (v44) {
            float v50 = 1.0;
          }
          else {
            float v50 = -1.0;
          }
          if (v45) {
            float v51 = 1.0;
          }
          else {
            float v51 = -1.0;
          }
          if ((float)(vabds_f32(v48, v18) + (float)(vabds_f32(v47, v17) + vabds_f32(v46, a3.n128_f32[0]))) >= (float)((float)(vabds_f32(v49, a3.n128_f32[0]) + vabds_f32(v50, v17)) + vabds_f32(v51, v18))) {
            break;
          }
          if (!v120) {
            goto LABEL_167;
          }
          *float v36 = v34;
          v36[1] = v39;
          --v36;
          ++v35;
        }
        while (v15 != v35);
        ++v15;
        ++v33;
      }
      while (v15 != v29);
      uint64_t v15 = v29;
    }
LABEL_70:
    if (v15 < v20) {
      goto LABEL_161;
    }
    uint64_t v52 = v19;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      float v19 = v52;
    }
    else {
      float v19 = sub_234747DB8(0, *((void *)v52 + 2) + 1, 1, v52);
    }
    unint64_t v54 = *((void *)v19 + 2);
    unint64_t v53 = *((void *)v19 + 3);
    unint64_t v55 = v54 + 1;
    __n128 v13 = a3;
    uint64_t v16 = v120;
    if (v54 >= v53 >> 1)
    {
      float64x2_t v104 = sub_234747DB8((char *)(v53 > 1), v54 + 1, 1, v19);
      uint64_t v16 = v120;
      __n128 v13 = a3;
      float v19 = v104;
    }
    uint64_t v124 = v4;
    *((void *)v19 + 2) = v55;
    __n128 v56 = v19 + 32;
    uint64_t v57 = &v19[16 * v54 + 32];
    *(void *)uint64_t v57 = v20;
    *((void *)v57 + 1) = v15;
    if (v54)
    {
      while (1)
      {
        unint64_t v58 = v55 - 1;
        if (v55 >= 4)
        {
          unint64_t v63 = &v56[16 * v55];
          uint64_t v64 = *((void *)v63 - 8);
          uint64_t v65 = *((void *)v63 - 7);
          BOOL v69 = __OFSUB__(v65, v64);
          uint64_t v66 = v65 - v64;
          if (v69) {
            goto LABEL_146;
          }
          uint64_t v68 = *((void *)v63 - 6);
          uint64_t v67 = *((void *)v63 - 5);
          BOOL v69 = __OFSUB__(v67, v68);
          uint64_t v61 = v67 - v68;
          char v62 = v69;
          if (v69) {
            goto LABEL_147;
          }
          unint64_t v70 = v55 - 2;
          __n128 v71 = &v56[16 * v55 - 32];
          uint64_t v73 = *(void *)v71;
          uint64_t v72 = *((void *)v71 + 1);
          BOOL v69 = __OFSUB__(v72, v73);
          uint64_t v74 = v72 - v73;
          if (v69) {
            goto LABEL_149;
          }
          BOOL v69 = __OFADD__(v61, v74);
          uint64_t v75 = v61 + v74;
          if (v69) {
            goto LABEL_152;
          }
          if (v75 >= v66)
          {
            float32x4_t v93 = &v56[16 * v58];
            uint64_t v95 = *(void *)v93;
            uint64_t v94 = *((void *)v93 + 1);
            BOOL v69 = __OFSUB__(v94, v95);
            uint64_t v96 = v94 - v95;
            if (v69) {
              goto LABEL_156;
            }
            BOOL v86 = v61 < v96;
            goto LABEL_107;
          }
        }
        else
        {
          if (v55 != 3)
          {
            uint64_t v87 = *((void *)v19 + 4);
            uint64_t v88 = *((void *)v19 + 5);
            BOOL v69 = __OFSUB__(v88, v87);
            uint64_t v80 = v88 - v87;
            char v81 = v69;
            goto LABEL_101;
          }
          uint64_t v60 = *((void *)v19 + 4);
          uint64_t v59 = *((void *)v19 + 5);
          BOOL v69 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          char v62 = v69;
        }
        if (v62) {
          goto LABEL_148;
        }
        unint64_t v70 = v55 - 2;
        float v76 = &v56[16 * v55 - 32];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v79 = __OFSUB__(v77, v78);
        uint64_t v80 = v77 - v78;
        char v81 = v79;
        if (v79) {
          goto LABEL_151;
        }
        __n128 v82 = &v56[16 * v58];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v69 = __OFSUB__(v83, v84);
        uint64_t v85 = v83 - v84;
        if (v69) {
          goto LABEL_154;
        }
        if (__OFADD__(v80, v85)) {
          goto LABEL_155;
        }
        if (v80 + v85 >= v61)
        {
          BOOL v86 = v61 < v85;
LABEL_107:
          if (v86) {
            unint64_t v58 = v70;
          }
          goto LABEL_109;
        }
LABEL_101:
        if (v81) {
          goto LABEL_150;
        }
        simd_float4x4 v89 = &v56[16 * v58];
        uint64_t v91 = *(void *)v89;
        uint64_t v90 = *((void *)v89 + 1);
        BOOL v69 = __OFSUB__(v90, v91);
        uint64_t v92 = v90 - v91;
        if (v69) {
          goto LABEL_153;
        }
        if (v92 < v80) {
          goto LABEL_118;
        }
LABEL_109:
        unint64_t v97 = v58 - 1;
        if (v58 - 1 >= v55) {
          goto LABEL_142;
        }
        if (!v16) {
          goto LABEL_168;
        }
        float32x4_t v98 = v19;
        uint64_t v99 = &v56[16 * v97];
        uint64_t v100 = *(void *)v99;
        char v101 = &v56[16 * v58];
        uint64_t v102 = *((void *)v101 + 1);
        sub_234704BBC((unint64_t *)(v16 + 8 * *(void *)v99), (unint64_t *)(v16 + 8 * *(void *)v101), v16 + 8 * v102, v121, v122, v13);
        if (v124) {
          goto LABEL_136;
        }
        if (v102 < v100) {
          goto LABEL_143;
        }
        if (v58 > *((void *)v98 + 2)) {
          goto LABEL_144;
        }
        *(void *)uint64_t v99 = v100;
        *(void *)&v56[16 * v97 + 8] = v102;
        unint64_t v103 = *((void *)v98 + 2);
        if (v58 >= v103) {
          goto LABEL_145;
        }
        unint64_t v55 = v103 - 1;
        memmove(&v56[16 * v58], v101 + 16, 16 * (v103 - 1 - v58));
        float v19 = v98;
        *((void *)v98 + 2) = v103 - 1;
        __n128 v13 = a3;
        uint64_t v16 = v120;
        if (v103 <= 2) {
          goto LABEL_118;
        }
      }
    }
    unint64_t v55 = 1;
LABEL_118:
    uint64_t v10 = v117;
    uint64_t v7 = v118;
    uint64_t v4 = v124;
    a2 = v122;
    if (v15 >= v118)
    {
      uint64_t v14 = v119;
      goto LABEL_123;
    }
  }
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  uint64_t result = sub_2347EEE90();
  __break(1u);
  return result;
}

uint64_t sub_234704AF4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, __n128 a6)
{
  if (a3 != a2)
  {
    uint64_t v8 = a3;
    uint64_t v10 = result;
    uint64_t v11 = *a4;
    uint64_t v12 = *a4 + 8 * a3 - 8;
LABEL_4:
    unint64_t v13 = *(void *)(v11 + 8 * v8);
    uint64_t v14 = v10;
    uint64_t v15 = (unint64_t *)v12;
    while (1)
    {
      unint64_t v19 = v13;
      unint64_t v18 = *v15;
      uint64_t result = sub_234703BD0(&v19, &v18, a5, a6);
      if (v6) {
        break;
      }
      if (result)
      {
        if (!v11)
        {
          __break(1u);
          return result;
        }
        unint64_t v16 = *v15;
        unint64_t v13 = v15[1];
        *uint64_t v15 = v13;
        v15[1] = v16;
        --v15;
        if (v8 != ++v14) {
          continue;
        }
      }
      ++v8;
      v12 += 8;
      if (v8 != a2) {
        goto LABEL_4;
      }
      return result;
    }
  }
  return result;
}

uint64_t sub_234704BBC(unint64_t *__src, unint64_t *a2, unint64_t a3, unint64_t *__dst, uint64_t a5, __n128 a6)
{
  uint64_t v7 = __dst;
  uint64_t v9 = a2;
  uint64_t v10 = __src;
  int64_t v11 = (char *)a2 - (char *)__src;
  int64_t v12 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v12 = (char *)a2 - (char *)__src;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v14 = a3 - (void)a2;
  uint64_t v15 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v15 = a3 - (void)a2;
  }
  uint64_t v16 = v15 >> 3;
  uint64_t v33 = __src;
  uint64_t v32 = __dst;
  if (v13 >= v15 >> 3)
  {
    if (v14 >= -7)
    {
      if (__dst != a2 || &a2[v16] <= __dst) {
        memmove(__dst, a2, 8 * v16);
      }
      uint64_t v20 = &v7[v16];
      uint64_t v31 = v20;
      uint64_t v33 = v9;
      if (v10 < v9 && v14 >= 8)
      {
        float v21 = (unint64_t *)(a3 - 8);
        int v22 = v9;
        while (1)
        {
          unint64_t v30 = *(v20 - 1);
          unint64_t v23 = *--v22;
          unint64_t v29 = v23;
          char v24 = sub_234703BD0(&v30, &v29, a5, a6);
          if (v6) {
            break;
          }
          __n128 v25 = v21 + 1;
          if (v24)
          {
            if (v25 != v9 || v21 >= v9) {
              *float v21 = *v22;
            }
            uint64_t v33 = v22;
            if (v22 <= v10) {
              goto LABEL_44;
            }
          }
          else
          {
            uint64_t v31 = v20 - 1;
            if (v25 < v20 || v21 >= v20 || v25 != v20) {
              *float v21 = *(v20 - 1);
            }
            int v22 = v9;
            --v20;
            if (v9 <= v10) {
              goto LABEL_44;
            }
          }
          --v21;
          uint64_t v9 = v22;
          if (v20 <= v7) {
            goto LABEL_44;
          }
        }
      }
      goto LABEL_44;
    }
  }
  else if (v11 >= -7)
  {
    if (__dst != __src || &__src[v13] <= __dst) {
      memmove(__dst, __src, 8 * v13);
    }
    float v17 = &v7[v13];
    uint64_t v31 = v17;
    if ((unint64_t)v9 < a3 && v11 >= 8)
    {
      do
      {
        unint64_t v30 = *v9;
        unint64_t v29 = *v7;
        char v18 = sub_234703BD0(&v30, &v29, a5, a6);
        if (v6) {
          break;
        }
        if (v18)
        {
          unint64_t v19 = v9 + 1;
          if (v10 < v9 || v10 >= v19 || v10 != v9) {
            *uint64_t v10 = *v9;
          }
        }
        else
        {
          if (v10 != v7) {
            *uint64_t v10 = *v7;
          }
          uint64_t v32 = ++v7;
          unint64_t v19 = v9;
        }
        uint64_t v33 = ++v10;
        if (v7 >= v17) {
          break;
        }
        uint64_t v9 = v19;
      }
      while ((unint64_t)v19 < a3);
    }
LABEL_44:
    sub_234747EB8((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

void (*sub_234704E90(void *a1, uint64_t a2))(uint64_t)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_234705344(v4);
  v4[9] = sub_234705014(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_234704F20;
}

void (*sub_234704F24(void *a1, unsigned __int8 a2))(uint64_t)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_234705374(v4);
  v4[9] = sub_2347051D8((uint64_t)(v4 + 4), a2, isUniquelyReferenced_nonNull_native);
  return sub_234704F20;
}

void sub_234704FB4(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

void (*sub_234705014(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_2347BFCB8(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_234705144;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_2347D5A24();
      goto LABEL_7;
    }
    sub_2347CF450(v14, a3 & 1);
    unint64_t v18 = sub_2347BFCB8(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))sub_2347EF0F0();
  __break(1u);
  return result;
}

void sub_234705144(uint64_t **a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v3 = *((unsigned char *)*a1 + 32);
  if (v2)
  {
    unint64_t v4 = v1[3];
    unint64_t v5 = *(void **)v1[2];
    if (v3) {
      *(void *)(v5[7] + 8 * v4) = v2;
    }
    else {
      sub_2347AC278(v4, v1[1], v2, v5);
    }
  }
  else if ((*a1)[4])
  {
    sub_2347D36BC(v1[3], *(void *)v1[2]);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

  free(v1);
}

unint64_t (*sub_2347051D8(uint64_t a1, unsigned __int8 a2, char a3))(unint64_t result)
{
  unint64_t v4 = v3;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 24) = a2;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_2347BFCB4(a2);
  *(unsigned char *)(a1 + 25) = v9 & 1;
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    char v14 = v9;
    uint64_t v15 = *(void *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      *(void *)(a1 + 16) = v10;
      if (v14)
      {
LABEL_8:
        uint64_t v16 = *(void *)(*(void *)(*v4 + 56) + 8 * v10);
LABEL_12:
        *(void *)a1 = v16;
        return sub_2347052FC;
      }
LABEL_11:
      uint64_t v16 = 0;
      goto LABEL_12;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2347D5DAC();
      goto LABEL_7;
    }
    sub_2347CFA38(v13, a3 & 1);
    unint64_t v17 = sub_2347BFCB4(a2);
    if ((v14 & 1) == (v18 & 1))
    {
      unint64_t v10 = v17;
      *(void *)(a1 + 16) = v17;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (unint64_t (*)(unint64_t))sub_2347EF0F0();
  __break(1u);
  return result;
}

unint64_t sub_2347052FC(unint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v2 = **(void ***)(result + 8);
    if (*(unsigned char *)(result + 25)) {
      *(void *)(v2[7] + 8 * *(void *)(result + 16)) = v1;
    }
    else {
      return sub_2347AC434(*(void *)(result + 16), *(unsigned char *)(result + 24), v1, v2);
    }
  }
  else if (*(unsigned char *)(result + 25))
  {
    return sub_2347D3854(*(void *)(result + 16), **(void **)(result + 8));
  }
  return result;
}

uint64_t (*sub_234705344(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_234705670;
}

uint64_t (*sub_234705374(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_2347053A4;
}

uint64_t sub_2347053A4(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_2347053B0(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4, __n128 a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9)
{
  uint64_t v10 = v9;
  float32x4_t v31 = a8;
  float32x4_t v32 = a9;
  float32x4_t v29 = a6;
  float32x4_t v30 = a7;
  __n128 v28 = a5;
  uint64_t v26 = a3;
  unint64_t v27 = a4;
  uint64_t v25 = a2;
  uint64_t v12 = type metadata accessor for LineAnimation();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (v16)
  {
    uint64_t v33 = MEMORY[0x263F8EE78];
    sub_234745750(0, v16, 0);
    uint64_t v17 = v33;
    unint64_t v18 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v19 = a1 + v18;
    uint64_t v20 = *(void *)(v13 + 72);
    while (1)
    {
      sub_234702BB4(v19, v25, v26, v27, (uint64_t)v15, v28, v29, v30, v31, v32);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      uint64_t v33 = v17;
      unint64_t v22 = *(void *)(v17 + 16);
      unint64_t v21 = *(void *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_234745750(v21 > 1, v22 + 1, 1);
        uint64_t v17 = v33;
      }
      *(void *)(v17 + 16) = v22 + 1;
      sub_234705558((uint64_t)v15, v17 + v18 + v22 * v20);
      v19 += v20;
      if (!--v16) {
        return v17;
      }
    }
    swift_release();
  }
  return v17;
}

uint64_t sub_234705558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LineAnimation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2347055BC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_234705608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_234705674(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for LineAnimation() - 8);
  char v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v3 = (void *)sub_2347483BC(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_234706870(v5);
  *a1 = v3;
}

uint64_t type metadata accessor for EdgeEntityFactory()
{
  return self;
}

uint64_t type metadata accessor for EdgeEntity()
{
  uint64_t result = qword_2687AD260;
  if (!qword_2687AD260) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_23470578C()
{
  return swift_initClassMetadata2();
}

void sub_234705800()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + qword_2687AD248) = 0;
  *(void *)(v0 + qword_2687AD250) = 0;
  *(void *)(v0 + qword_2687AD258) = MEMORY[0x263F8EE78];
  swift_release();
  sub_2347EEEA0();
  __break(1u);
}

uint64_t sub_23470589C(float a1, __n128 a2, float a3, float a4)
{
  uint64_t v6 = v4;
  __n128 v16 = a2;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACBB8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + qword_2687AD248) = 0;
  *(void *)(v4 + qword_2687AD250) = 0;
  *(void *)(v4 + qword_2687AD258) = MEMORY[0x263F8EE78];
  type metadata accessor for RERoomsMaterial();
  swift_allocObject();
  swift_retain();
  uint64_t v13 = sub_2347EAAFC(0x6D65722E65676465, 0xEF6C616972657461);
  if (v5)
  {
    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for EdgeEntity();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v4 + qword_2687AD240) = v13;
    swift_release();
    uint64_t v6 = sub_2347ED690();
    float v17 = 0.0;
    swift_retain();
    REMaterialParameterBlockGetFloat();
    if (v17 != a1) {
      REMaterialParameterBlockSetFloat();
    }
    sub_2347EB234(v16);
    float v17 = 0.0;
    REMaterialParameterBlockGetFloat();
    if (v17 != a3) {
      REMaterialParameterBlockSetFloat();
    }
    float v17 = 0.0;
    REMaterialParameterBlockGetFloat();
    if (v17 != a4) {
      REMaterialParameterBlockSetFloat();
    }
    uint64_t v14 = sub_2347EDB50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 1, 1, v14);
    type metadata accessor for EdgeEntity();
    sub_2347EDAF0();
    swift_release();
  }
  return v6;
}

void sub_234705B88(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = sub_2347ED670();
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  MEMORY[0x270FA5388](v9);
  int v44 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LineAnimation();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_2347ED7D0();
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (a4 & 1) == 0 && (a2 & 0x100000000) == 0)
  {
    uint64_t v41 = v17;
    uint64_t v42 = v16;
    *(void *)&v47[0] = sub_234707B24(a1);
    swift_bridgeObjectRetain();
    sub_234705674((void **)v47);
    if (v4)
    {
      swift_release();
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)&v47[0];
    int64_t v21 = *(void *)(*(void *)&v47[0] + 16);
    if (!v21) {
      goto LABEL_23;
    }
    uint64_t v40 = 0;
    float32x2_t v22 = (float32x2_t)a3;
    float v23 = *(float *)&a2;
    *(void *)&v47[0] = MEMORY[0x263F8EE78];
    sub_2347456C0(0, v21, 0);
    uint64_t v24 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v43 = v20;
    uint64_t v25 = v20 + ((v24 + 32) & ~v24);
    uint64_t v26 = *(void *)(v12 + 72);
    unint64_t v27 = *(void **)&v47[0];
    do
    {
      sub_2346C0B38(v25, (uint64_t)v14);
      uint64_t v28 = *(void *)(*((void *)v14 + 14) + 16);
      sub_2346C0B9C((uint64_t)v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2347456C0(0, v27[2] + 1, 1);
        unint64_t v27 = *(void **)&v47[0];
      }
      unint64_t v30 = v27[2];
      unint64_t v29 = v27[3];
      if (v30 >= v29 >> 1)
      {
        sub_2347456C0(v29 > 1, v30 + 1, 1);
        unint64_t v27 = *(void **)&v47[0];
      }
      void v27[2] = v30 + 1;
      v27[v30 + 4] = v28;
      v25 += v26;
      --v21;
    }
    while (v21);
    uint64_t v31 = qword_2687AD258;
    uint64_t v32 = v49;
    BOOL v33 = sub_23470A608(v27, *(void **)(v49 + qword_2687AD258));
    *(void *)(v32 + v31) = v27;
    swift_bridgeObjectRelease();
    if (qword_2687ABE08 != -1) {
      swift_once();
    }
    sub_234767ACC(v43);
    uint64_t v34 = qword_2687AD248;
    uint64_t v35 = v40;
    if (*(void *)(v32 + qword_2687AD248))
    {
      if (!v33)
      {
        unint64_t v36 = sub_234707D28();
        sub_234764074(v32, v36, (uint64_t)v19);
        if (v35)
        {
          (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v42);
LABEL_23:
          swift_release();
          return;
        }
      }
    }
    else
    {
      unint64_t v37 = sub_234707D28();
      uint64_t v48 = 0;
      memset(v47, 0, sizeof(v47));
      sub_234768190(v32, v37, (uint64_t)v19, (uint64_t)v47);
      if (v35)
      {
        swift_release();
        sub_2346BEFB0((uint64_t)v47);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v42);
        return;
      }
      sub_2346BEFB0((uint64_t)v47);
    }
    unint64_t v38 = v44;
    sub_2347EDEA0();
    sub_2347ED600();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v46);
    REMeshComponentGetComponentType();
    *(void *)(v32 + v34) = REEntityGetComponentByClass();
    sub_234706044(v43, v23, v22);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v42);
    goto LABEL_23;
  }
}

uint64_t sub_234706044(int64_t a1, float a2, float32x2_t a3)
{
  uint64_t v5 = v3;
  v52[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = sub_2347EE370();
  uint64_t v48 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v46 - v13;
  float32x4_t v51 = 0uLL;
  if (qword_2687ABE08 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_234768824(a1, &v51);
  unint64_t v16 = v15[2];
  if (v16 >> 59) {
    __break(1u);
  }
  uint64_t v17 = v15;
  uint64_t v47 = v9;
  uint64_t v49 = v4;
  uint64_t v18 = qword_2687AD250;
  uint64_t v19 = *(void **)(v5 + qword_2687AD250);
  if (!v19 || (id)(16 * v16) != objc_msgSend(v19, sel_length))
  {
    type metadata accessor for MetalConstants();
    swift_initStaticObject();
    id v20 = objc_msgSend((id)sub_2346FFCC4(), sel_newBufferWithLength_options_, 16 * v16, 0);
    swift_unknownObjectRelease();
    *(void *)(v5 + v18) = v20;
    swift_unknownObjectRelease();
  }
  int64_t v21 = *(void **)(v5 + v18);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for Constants();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v27 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    id v28 = objc_msgSend(v27, sel_bundleIdentifier);

    if (v28)
    {
      sub_2347EE620();
    }
    sub_2346A7A4C();
    sub_2347EEAF0();
    sub_2347EE380();
    swift_retain_n();
    unint64_t v30 = sub_2347EE350();
    os_log_type_t v31 = sub_2347EE960();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v52[0] = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v34 = sub_2347EDF60();
      uint64_t v50 = sub_234775704(v34, v35, v52);
      sub_2347EEB30();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23468B000, v30, v31, " pointArrayBuffer for %s is nil", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x237DC8070](v33, -1, -1);
      MEMORY[0x237DC8070](v32, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v11, v47);
  }
  float32x2_t v22 = objc_msgSend((id)swift_unknownObjectRetain_n(), sel_contents);
  id v23 = v21;
  BOOL v24 = v22 != v17 + 4 || v22 >= &v17[2 * v16 + 4];
  uint64_t v25 = v49;
  if (v24) {
    memmove(v22, v17 + 4, 16 * v16);
  }
  swift_bridgeObjectRelease();
  REMaterialParameterBlockSetBuffer();
  LODWORD(v52[0]) = 0;
  REMaterialParameterBlockGetFloat();
  if (*(float *)v52 != a2)
  {
    REMaterialParameterBlockSetFloat();
    sub_2347EB158(a3);
    goto LABEL_19;
  }
  if (sub_2347EB158(a3))
  {
LABEL_19:
    sub_2347EAFC4();
    if (v25) {
      return swift_unknownObjectRelease();
    }
  }
  if (*(void *)(v5 + qword_2687AD248))
  {
    REMeshComponentSetBoundsMargin();
    return swift_unknownObjectRelease();
  }
  type metadata accessor for Constants();
  uint64_t v36 = swift_getObjCClassFromMetadata();
  id v37 = objc_msgSend(self, sel_bundleForClass_, v36);
  id v38 = objc_msgSend(v37, sel_bundleIdentifier);

  if (v38)
  {
    sub_2347EE620();
  }
  sub_2346A7A4C();
  sub_2347EEAF0();
  sub_2347EE380();
  swift_retain_n();
  uint64_t v39 = sub_2347EE350();
  os_log_type_t v40 = sub_2347EE960();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    v52[0] = v49;
    *(_DWORD *)uint64_t v41 = 136315138;
    v46[1] = v41 + 4;
    uint64_t v42 = v41;
    uint64_t v43 = sub_2347EDF60();
    uint64_t v50 = sub_234775704(v43, v44, v52);
    sub_2347EEB30();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23468B000, v39, v40, "MeshComponent for %s is nil", v41, 0xCu);
    uint64_t v45 = v49;
    swift_arrayDestroy();
    MEMORY[0x237DC8070](v45, -1, -1);
    MEMORY[0x237DC8070](v42, -1, -1);
    swift_unknownObjectRelease();
  }
  else
  {

    swift_release_n();
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v14, v47);
}

uint64_t sub_2347067A8()
{
  swift_release();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2347067F8()
{
  sub_2347EDFC0();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_234706868()
{
  return type metadata accessor for EdgeEntity();
}

void sub_234706870(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LineAnimation();
  uint64_t v159 = *(void *)(v4 - 8);
  uint64_t v160 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v155 = (uint64_t)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v165 = (uint64_t)&v146 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v161 = (uint64_t)&v146 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v146 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v156 = (uint64_t)&v146 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v146 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v152 = (uint64_t)&v146 - v19;
  MEMORY[0x270FA5388](v20);
  float32x2_t v22 = (char *)&v146 - v21;
  uint64_t v166 = a1;
  uint64_t v23 = a1[1];
  uint64_t v24 = sub_2347EF060();
  if (v24 >= v23)
  {
    if (v23 < 0) {
      goto LABEL_151;
    }
    if (v23) {
      sub_234707380(0, v23, 1, v166);
    }
    return;
  }
  if (v23 >= 0) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = v23 + 1;
  }
  if (v23 < -1) {
    goto LABEL_159;
  }
  uint64_t v148 = v24;
  if (v23 < 2)
  {
    unint64_t v29 = (char *)MEMORY[0x263F8EE78];
    unint64_t v158 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
    uint64_t v147 = MEMORY[0x263F8EE78];
    if (v23 != 1)
    {
      unint64_t v31 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_117:
      unint64_t v139 = v29;
      if (v31 >= 2)
      {
        uint64_t v140 = *v166;
        do
        {
          unint64_t v141 = v31 - 2;
          if (v31 < 2) {
            goto LABEL_146;
          }
          if (!v140) {
            goto LABEL_158;
          }
          uint64_t v142 = *(void *)&v139[16 * v141 + 32];
          uint64_t v143 = *(void *)&v139[16 * v31 + 24];
          sub_234707600(v140 + *(void *)(v159 + 72) * v142, v140 + *(void *)(v159 + 72) * *(void *)&v139[16 * v31 + 16], v140 + *(void *)(v159 + 72) * v143, v158);
          if (v2) {
            break;
          }
          if (v143 < v142) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v139 = sub_234748228((uint64_t)v139);
          }
          if (v141 >= *((void *)v139 + 2)) {
            goto LABEL_148;
          }
          uint64_t v144 = &v139[16 * v141 + 32];
          *(void *)uint64_t v144 = v142;
          *((void *)v144 + 1) = v143;
          unint64_t v145 = *((void *)v139 + 2);
          if (v31 > v145) {
            goto LABEL_149;
          }
          memmove(&v139[16 * v31 + 16], &v139[16 * v31 + 32], 16 * (v145 - v31));
          *((void *)v139 + 2) = v145 - 1;
          unint64_t v31 = v145 - 1;
        }
        while (v145 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      *(void *)(v147 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v154 = v17;
  }
  else
  {
    uint64_t v154 = v17;
    uint64_t v26 = v25 >> 1;
    uint64_t v27 = sub_2347EE810();
    *(void *)(v27 + 16) = v26;
    uint64_t v28 = *(unsigned __int8 *)(v159 + 80);
    uint64_t v147 = v27;
    unint64_t v158 = v27 + ((v28 + 32) & ~v28);
  }
  uint64_t v30 = 0;
  unint64_t v29 = (char *)MEMORY[0x263F8EE78];
  unint64_t v164 = v12;
  uint64_t v150 = v22;
  while (1)
  {
    uint64_t v32 = v30;
    uint64_t v33 = v30 + 1;
    if (v30 + 1 >= v23) {
      goto LABEL_46;
    }
    uint64_t v34 = *v166;
    uint64_t v35 = *(void *)(v159 + 72);
    sub_2346C0B38(*v166 + v35 * v33, (uint64_t)v22);
    uint64_t v153 = v34;
    uint64_t v163 = v35;
    uint64_t v36 = v34 + v35 * v32;
    uint64_t v37 = v152;
    sub_2346C0B38(v36, v152);
    uint64_t v38 = v37;
    int v39 = v22[104];
    int v40 = *(unsigned __int8 *)(v37 + 104);
    if (v39 == v40)
    {
      uint64_t v41 = (unint64_t *)(*((void *)v22 + 14) + 16);
      uint64_t v42 = (unint64_t *)(*(void *)(v37 + 112) + 16);
    }
    else
    {
      uint64_t v43 = (char)v40;
      uint64_t v41 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * (char)v39);
      uint64_t v42 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * v43);
    }
    uint64_t v151 = v2;
    unint64_t v44 = *v41;
    unint64_t v45 = *v42;
    sub_2346C0B9C(v38);
    sub_2346C0B9C((uint64_t)v22);
    uint64_t v162 = v23;
    if (v32 + 2 < v23) {
      break;
    }
    uint64_t v48 = v32 + 2;
    if (v44 >= v45) {
      goto LABEL_43;
    }
LABEL_30:
    if (v48 < v32) {
      goto LABEL_152;
    }
    uint64_t v33 = v48;
    if (v32 >= v48)
    {
      uint64_t v2 = v151;
LABEL_46:
      if (v33 >= v23) {
        goto LABEL_69;
      }
      goto LABEL_47;
    }
    uint64_t v149 = v29;
    uint64_t v58 = 0;
    uint64_t v59 = v163 * (v48 - 1);
    uint64_t v60 = v48 * v163;
    uint64_t v157 = v32;
    uint64_t v61 = v32 * v163;
    do
    {
      if (v32 != v33 + v58 - 1)
      {
        uint64_t v62 = v153;
        if (!v153) {
          goto LABEL_157;
        }
        unint64_t v63 = v153 + v61;
        sub_234705558(v153 + v61, v155);
        if (v61 < v59 || v63 >= v62 + v60)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v61 != v59)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        sub_234705558(v155, v62 + v59);
        uint64_t v12 = v164;
        uint64_t v33 = v48;
      }
      ++v32;
      --v58;
      v59 -= v163;
      v60 -= v163;
      v61 += v163;
    }
    while (v32 < v33 + v58);
    unint64_t v29 = v149;
    uint64_t v2 = v151;
    uint64_t v32 = v157;
    uint64_t v23 = v162;
    if (v33 < v162) {
      goto LABEL_47;
    }
LABEL_69:
    if (v33 < v32) {
      goto LABEL_145;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v163 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v29 = sub_234747DB8(0, *((void *)v29 + 2) + 1, 1, v29);
    }
    unint64_t v89 = *((void *)v29 + 2);
    unint64_t v88 = *((void *)v29 + 3);
    unint64_t v31 = v89 + 1;
    if (v89 >= v88 >> 1) {
      unint64_t v29 = sub_234747DB8((char *)(v88 > 1), v89 + 1, 1, v29);
    }
    *((void *)v29 + 2) = v31;
    uint64_t v90 = v29 + 32;
    uint64_t v91 = &v29[16 * v89 + 32];
    uint64_t v92 = v163;
    *(void *)uint64_t v91 = v32;
    *((void *)v91 + 1) = v92;
    if (v89)
    {
      while (1)
      {
        unint64_t v93 = v31 - 1;
        if (v31 >= 4)
        {
          float32x4_t v98 = &v90[16 * v31];
          uint64_t v99 = *((void *)v98 - 8);
          uint64_t v100 = *((void *)v98 - 7);
          BOOL v104 = __OFSUB__(v100, v99);
          uint64_t v101 = v100 - v99;
          if (v104) {
            goto LABEL_134;
          }
          uint64_t v103 = *((void *)v98 - 6);
          uint64_t v102 = *((void *)v98 - 5);
          BOOL v104 = __OFSUB__(v102, v103);
          uint64_t v96 = v102 - v103;
          char v97 = v104;
          if (v104) {
            goto LABEL_135;
          }
          unint64_t v105 = v31 - 2;
          unint64_t v106 = &v90[16 * v31 - 32];
          uint64_t v108 = *(void *)v106;
          uint64_t v107 = *((void *)v106 + 1);
          BOOL v104 = __OFSUB__(v107, v108);
          uint64_t v109 = v107 - v108;
          if (v104) {
            goto LABEL_137;
          }
          BOOL v104 = __OFADD__(v96, v109);
          uint64_t v110 = v96 + v109;
          if (v104) {
            goto LABEL_140;
          }
          if (v110 >= v101)
          {
            float64x2_t v128 = &v90[16 * v93];
            uint64_t v130 = *(void *)v128;
            uint64_t v129 = *((void *)v128 + 1);
            BOOL v104 = __OFSUB__(v129, v130);
            uint64_t v131 = v129 - v130;
            if (v104) {
              goto LABEL_144;
            }
            BOOL v121 = v96 < v131;
            goto LABEL_106;
          }
        }
        else
        {
          if (v31 != 3)
          {
            uint64_t v122 = *((void *)v29 + 4);
            uint64_t v123 = *((void *)v29 + 5);
            BOOL v104 = __OFSUB__(v123, v122);
            uint64_t v115 = v123 - v122;
            char v116 = v104;
            goto LABEL_100;
          }
          uint64_t v95 = *((void *)v29 + 4);
          uint64_t v94 = *((void *)v29 + 5);
          BOOL v104 = __OFSUB__(v94, v95);
          uint64_t v96 = v94 - v95;
          char v97 = v104;
        }
        if (v97) {
          goto LABEL_136;
        }
        unint64_t v105 = v31 - 2;
        float64x2_t v111 = &v90[16 * v31 - 32];
        uint64_t v113 = *(void *)v111;
        uint64_t v112 = *((void *)v111 + 1);
        BOOL v114 = __OFSUB__(v112, v113);
        uint64_t v115 = v112 - v113;
        char v116 = v114;
        if (v114) {
          goto LABEL_139;
        }
        uint64_t v117 = &v90[16 * v93];
        uint64_t v119 = *(void *)v117;
        uint64_t v118 = *((void *)v117 + 1);
        BOOL v104 = __OFSUB__(v118, v119);
        uint64_t v120 = v118 - v119;
        if (v104) {
          goto LABEL_142;
        }
        if (__OFADD__(v115, v120)) {
          goto LABEL_143;
        }
        if (v115 + v120 >= v96)
        {
          BOOL v121 = v96 < v120;
LABEL_106:
          if (v121) {
            unint64_t v93 = v105;
          }
          goto LABEL_108;
        }
LABEL_100:
        if (v116) {
          goto LABEL_138;
        }
        uint64_t v124 = &v90[16 * v93];
        uint64_t v126 = *(void *)v124;
        uint64_t v125 = *((void *)v124 + 1);
        BOOL v104 = __OFSUB__(v125, v126);
        uint64_t v127 = v125 - v126;
        if (v104) {
          goto LABEL_141;
        }
        if (v127 < v115) {
          goto LABEL_15;
        }
LABEL_108:
        unint64_t v132 = v93 - 1;
        if (v93 - 1 >= v31)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!*v166) {
          goto LABEL_156;
        }
        uint64_t v133 = v29;
        uint64_t v134 = &v90[16 * v132];
        uint64_t v135 = *(void *)v134;
        uint64_t v136 = &v90[16 * v93];
        uint64_t v137 = *((void *)v136 + 1);
        sub_234707600(*v166 + *(void *)(v159 + 72) * *(void *)v134, *v166 + *(void *)(v159 + 72) * *(void *)v136, *v166 + *(void *)(v159 + 72) * v137, v158);
        if (v2) {
          goto LABEL_128;
        }
        if (v137 < v135) {
          goto LABEL_131;
        }
        if (v93 > *((void *)v133 + 2)) {
          goto LABEL_132;
        }
        *(void *)uint64_t v134 = v135;
        *(void *)&v90[16 * v132 + 8] = v137;
        unint64_t v138 = *((void *)v133 + 2);
        if (v93 >= v138) {
          goto LABEL_133;
        }
        unint64_t v29 = v133;
        unint64_t v31 = v138 - 1;
        memmove(&v90[16 * v93], v136 + 16, 16 * (v138 - 1 - v93));
        *((void *)v133 + 2) = v138 - 1;
        uint64_t v12 = v164;
        if (v138 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v31 = 1;
LABEL_15:
    uint64_t v23 = v166[1];
    uint64_t v30 = v163;
    float32x2_t v22 = v150;
    if (v163 >= v23) {
      goto LABEL_117;
    }
  }
  uint64_t v157 = v32;
  uint64_t v149 = v29;
  uint64_t v46 = v163 * v33;
  uint64_t v47 = v153;
  uint64_t v48 = v32 + 2;
  uint64_t v49 = v163 * (v32 + 2);
  do
  {
    uint64_t v50 = (uint64_t)v154;
    sub_2346C0B38(v47 + v49, (uint64_t)v154);
    uint64_t v51 = v156;
    sub_2346C0B38(v47 + v46, v156);
    int v52 = *(unsigned __int8 *)(v50 + 104);
    int v53 = *(unsigned __int8 *)(v51 + 104);
    if (v52 == v53)
    {
      unint64_t v54 = (void *)(*(void *)(v50 + 112) + 16);
      unint64_t v55 = (void *)(*(void *)(v51 + 112) + 16);
    }
    else
    {
      uint64_t v56 = (char)v53;
      unint64_t v54 = (void *)((char *)&unk_2347F3EE8 + 8 * (char)v52);
      unint64_t v55 = (void *)((char *)&unk_2347F3EE8 + 8 * v56);
    }
    BOOL v57 = *v54 < *v55;
    sub_2346C0B9C(v51);
    sub_2346C0B9C(v50);
    if (((v44 < v45) ^ v57))
    {
      unint64_t v29 = v149;
      uint64_t v12 = v164;
      uint64_t v32 = v157;
      uint64_t v23 = v162;
      if (v44 >= v45) {
        goto LABEL_43;
      }
      goto LABEL_30;
    }
    uint64_t v23 = v162;
    v47 += v163;
    ++v48;
  }
  while (v162 != v48);
  uint64_t v48 = v162;
  unint64_t v29 = v149;
  uint64_t v12 = v164;
  uint64_t v32 = v157;
  if (v44 < v45) {
    goto LABEL_30;
  }
LABEL_43:
  uint64_t v33 = v48;
  uint64_t v2 = v151;
  if (v33 >= v23) {
    goto LABEL_69;
  }
LABEL_47:
  if (__OFSUB__(v33, v32)) {
    goto LABEL_150;
  }
  if (v33 - v32 >= v148) {
    goto LABEL_69;
  }
  if (__OFADD__(v32, v148)) {
    goto LABEL_153;
  }
  if (v32 + v148 >= v23) {
    uint64_t v64 = v23;
  }
  else {
    uint64_t v64 = v32 + v148;
  }
  if (v64 >= v32)
  {
    if (v33 != v64)
    {
      uint64_t v157 = v32;
      uint64_t v149 = v29;
      uint64_t v151 = v2;
      uint64_t v65 = *(void *)(v159 + 72);
      uint64_t v66 = v65 * (v33 - 1);
      uint64_t v162 = v65;
      uint64_t v67 = v33 * v65;
      uint64_t v153 = v64;
      do
      {
        uint64_t v69 = 0;
        uint64_t v70 = v157;
        uint64_t v163 = v33;
        while (1)
        {
          uint64_t v71 = *v166;
          uint64_t v72 = v67;
          sub_2346C0B38(v67 + v69 + *v166, (uint64_t)v12);
          uint64_t v73 = v66;
          uint64_t v74 = v66 + v69 + v71;
          uint64_t v75 = v161;
          sub_2346C0B38(v74, v161);
          uint64_t v76 = v75;
          int v77 = v12[104];
          int v78 = *(unsigned __int8 *)(v75 + 104);
          if (v77 == v78)
          {
            BOOL v79 = (unint64_t *)(*((void *)v12 + 14) + 16);
            uint64_t v80 = (unint64_t *)(*(void *)(v75 + 112) + 16);
          }
          else
          {
            uint64_t v81 = (char)v78;
            BOOL v79 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * (char)v77);
            uint64_t v80 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * v81);
          }
          uint64_t v82 = (uint64_t)v12;
          unint64_t v83 = *v79;
          unint64_t v84 = *v80;
          sub_2346C0B9C(v76);
          sub_2346C0B9C(v82);
          if (v83 >= v84) {
            break;
          }
          uint64_t v85 = *v166;
          if (!*v166) {
            goto LABEL_155;
          }
          uint64_t v66 = v73;
          uint64_t v67 = v72;
          uint64_t v86 = v85 + v66 + v69;
          sub_234705558(v85 + v72 + v69, v165);
          swift_arrayInitWithTakeFrontToBack();
          sub_234705558(v165, v86);
          uint64_t v68 = v163;
          v69 -= v162;
          ++v70;
          uint64_t v12 = v164;
          if (v163 == v70) {
            goto LABEL_57;
          }
        }
        uint64_t v68 = v163;
        uint64_t v12 = v164;
        uint64_t v66 = v73;
        uint64_t v67 = v72;
LABEL_57:
        uint64_t v33 = v68 + 1;
        v66 += v162;
        v67 += v162;
      }
      while (v33 != v153);
      uint64_t v33 = v153;
      uint64_t v2 = v151;
      unint64_t v29 = v149;
      uint64_t v32 = v157;
    }
    goto LABEL_69;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  sub_2347EEE90();
  __break(1u);
}

void sub_234707380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v35 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = type metadata accessor for LineAnimation();
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v28 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v33 = a3;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v11 + 72);
    uint64_t v36 = v14 * (v33 - 1);
    uint64_t v32 = v14;
    uint64_t v15 = v14 * v33;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v30;
    while (1)
    {
      uint64_t v18 = *v35;
      sub_2346C0B38(v15 + v16 + *v35, (uint64_t)v13);
      sub_2346C0B38(v36 + v16 + v18, (uint64_t)v9);
      int v19 = v13[104];
      int v20 = v9[104];
      if (v19 == v20)
      {
        uint64_t v21 = (unint64_t *)(*((void *)v13 + 14) + 16);
        float32x2_t v22 = (unint64_t *)(*((void *)v9 + 14) + 16);
      }
      else
      {
        uint64_t v23 = (char)v20;
        uint64_t v21 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * (char)v19);
        float32x2_t v22 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * v23);
      }
      unint64_t v24 = *v21;
      unint64_t v25 = *v22;
      sub_2346C0B9C((uint64_t)v9);
      sub_2346C0B9C((uint64_t)v13);
      if (v24 >= v25)
      {
LABEL_4:
        v36 += v32;
        v15 += v32;
        if (++v33 == v29) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *v35;
      if (!*v35) {
        break;
      }
      uint64_t v27 = v26 + v36 + v16;
      sub_234705558(v26 + v15 + v16, v34);
      swift_arrayInitWithTakeFrontToBack();
      sub_234705558(v34, v27);
      v16 -= v32;
      if (v33 == ++v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_234707600(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v57 = type metadata accessor for LineAnimation();
  MEMORY[0x270FA5388](v57);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v54 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v54 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v54 - v16;
  uint64_t v19 = *(void *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  unint64_t v20 = a1;
  if (a2 - a1 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_67;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_68;
  }
  uint64_t v22 = (uint64_t)(a2 - a1) / v19;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  uint64_t v23 = v21 / v19;
  if (v22 >= v21 / v19)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      uint64_t v55 = v15;
      unint64_t v56 = a1;
      uint64_t v25 = v23 * v19;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v38 = a4 + v25;
      unint64_t v58 = a4 + v25;
      unint64_t v60 = a2;
      if (v25 >= 1 && v56 < a2)
      {
        uint64_t v40 = -v19;
        do
        {
          sub_2346C0B38(v38 + v40, (uint64_t)v10);
          unint64_t v41 = a2 + v40;
          uint64_t v42 = v55;
          sub_2346C0B38(a2 + v40, v55);
          uint64_t v43 = v42;
          int v44 = v10[104];
          int v45 = *(unsigned __int8 *)(v42 + 104);
          if (v44 == v45)
          {
            uint64_t v46 = (unint64_t *)(*((void *)v10 + 14) + 16);
            uint64_t v47 = (unint64_t *)(*(void *)(v42 + 112) + 16);
          }
          else
          {
            uint64_t v48 = (char)v45;
            uint64_t v46 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * (char)v44);
            uint64_t v47 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * v48);
          }
          unint64_t v49 = *v46;
          unint64_t v50 = *v47;
          unint64_t v51 = a3 + v40;
          sub_2346C0B9C(v43);
          sub_2346C0B9C((uint64_t)v10);
          if (v49 >= v50)
          {
            unint64_t v52 = v58;
            v58 += v40;
            if (a3 < v52 || v51 >= v52)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v52)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v41 = a2;
          }
          else
          {
            if (a3 < a2 || v51 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v60 += v40;
          }
          unint64_t v38 = v58;
          if (v58 <= a4) {
            break;
          }
          a2 = v41;
          a3 += v40;
        }
        while (v41 > v56);
      }
      goto LABEL_65;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = v22 * v19;
    if (a4 < v20 || v20 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != v20)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v26 = a4 + v24;
    unint64_t v58 = a4 + v24;
    if (v24 >= 1 && a2 < a3)
    {
      do
      {
        sub_2346C0B38(a2, (uint64_t)v17);
        sub_2346C0B38(a4, (uint64_t)v13);
        int v28 = v17[104];
        int v29 = v13[104];
        if (v28 == v29)
        {
          uint64_t v30 = (unint64_t *)(*((void *)v17 + 14) + 16);
          uint64_t v31 = (unint64_t *)(*((void *)v13 + 14) + 16);
        }
        else
        {
          uint64_t v32 = (char)v29;
          uint64_t v30 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * (char)v28);
          uint64_t v31 = (unint64_t *)((char *)&unk_2347F3EE8 + 8 * v32);
        }
        unint64_t v33 = *v30;
        unint64_t v34 = *v31;
        sub_2346C0B9C((uint64_t)v13);
        sub_2346C0B9C((uint64_t)v17);
        unint64_t v35 = v60;
        if (v33 >= v34)
        {
          unint64_t v37 = v59 + v19;
          if (v60 < v59 || v60 >= v37)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v60 != v59)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v59 = v37;
          unint64_t v36 = a2;
        }
        else
        {
          unint64_t v36 = a2 + v19;
          if (v60 < a2 || v60 >= v36)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v60 == a2)
          {
            unint64_t v35 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v60 = v35 + v19;
        a4 = v59;
        if (v59 >= v26) {
          break;
        }
        a2 = v36;
      }
      while (v36 < a3);
    }
LABEL_65:
    sub_234747F74(&v60, &v59, (uint64_t *)&v58);
    return 1;
  }
LABEL_69:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

unint64_t sub_234707B24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LineAnimation() - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v21 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = *(void *)(v6 + 72);
  v21[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v13 = MEMORY[0x263F8EE78];
  do
  {
    sub_2346C0B38(v11, (uint64_t)v8);
    uint64_t v14 = (float32x4_t *)*((void *)v8 + 14);
    uint64_t v15 = v14[1].i64[0];
    if (v15)
    {
      float32x4_t v16 = vsubq_f32(v14[2], v14[v15 + 1]);
      float32x4_t v17 = vmulq_f32(v16, v16);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0] >= 0.00000001)
      {
        sub_2346C0B38((uint64_t)v8, (uint64_t)v4);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = sub_2346FAFC4(0, *(void *)(v13 + 16) + 1, 1, v13);
        }
        unint64_t v19 = *(void *)(v13 + 16);
        unint64_t v18 = *(void *)(v13 + 24);
        if (v19 >= v18 >> 1) {
          unint64_t v13 = sub_2346FAFC4(v18 > 1, v19 + 1, 1, v13);
        }
        *(void *)(v13 + 16) = v19 + 1;
        sub_234705558((uint64_t)v4, v13 + v10 + v19 * v12);
      }
    }
    sub_2346C0B9C((uint64_t)v8);
    v11 += v12;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t sub_234707D28()
{
  unint64_t result = qword_2687AD278;
  if (!qword_2687AD278)
  {
    type metadata accessor for EdgeEntity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD278);
  }
  return result;
}

ValueMetadata *type metadata accessor for ItemSides()
{
  return &type metadata for ItemSides;
}

_DWORD *sub_234707D90@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_234707D9C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_234707DA4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_234707DB8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_234707DCC(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_234707DFC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_234707E28@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_234707E4C(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_234707E60(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_234707E74@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_234707E88(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_234707E9C()
{
  return *v0 == 0;
}

_DWORD *sub_234707EAC(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_234707EC0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_234707ED0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_2346A1A7C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unint64_t sub_234707F14()
{
  unint64_t result = qword_2687AD288;
  if (!qword_2687AD288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD288);
  }
  return result;
}

unint64_t sub_234707F6C()
{
  unint64_t result = qword_2687AD290;
  if (!qword_2687AD290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD290);
  }
  return result;
}

unint64_t sub_234707FC4()
{
  unint64_t result = qword_2687AD298;
  if (!qword_2687AD298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD298);
  }
  return result;
}

unint64_t sub_23470801C()
{
  unint64_t result = qword_2687AD2A0;
  if (!qword_2687AD2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD2A0);
  }
  return result;
}

uint64_t sub_234708074(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_234708088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_23470809C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_2347080B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_2347080C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t sub_2347080D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t sub_2347080EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_234708100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t sub_234708114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t sub_234708128(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t sub_23470813C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t sub_234708150(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t sub_234708164(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t sub_234708178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t sub_23470818C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t sub_2347081A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t sub_2347081B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t sub_2347081C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t sub_2347081DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t sub_2347081F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t sub_234708204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t sub_234708218(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t sub_23470822C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t sub_234708240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t sub_234708254(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t sub_234708268(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t sub_23470827C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t sub_234708290(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t sub_2347082A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t sub_2347082B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 248))();
}

uint64_t sub_2347082CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t sub_2347082E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 264))();
}

uint64_t sub_2347082F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 272))();
}

uint64_t sub_234708308(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t sub_23470831C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 288))();
}

uint64_t sub_234708330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 296))();
}

uint64_t sub_234708344(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 304))();
}

uint64_t sub_234708358(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 312))();
}

uint64_t sub_23470836C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 320))();
}

uint64_t sub_234708380(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 328))();
}

uint64_t sub_234708394(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 336))();
}

uint64_t sub_2347083A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 344))();
}

uint64_t sub_2347083BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 352))();
}

uint64_t sub_2347083D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 360))();
}

uint64_t sub_2347083E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 368))();
}

uint64_t sub_2347083F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 376))();
}

uint64_t sub_23470840C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 384))();
}

uint64_t sub_234708420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 392))();
}

uint64_t sub_234708434()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameTextures()
{
  return self;
}

uint64_t sub_2347084A0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, double a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *(NSObject **)(v5 + 24);
  uint64_t v13 = swift_allocObject();
  long long v14 = a4[1];
  *(_OWORD *)(v13 + 16) = *a4;
  *(_OWORD *)(v13 + 32) = v14;
  *(_OWORD *)(v13 + 48) = a4[2];
  *(void *)(v13 + 64) = a1;
  *(void *)(v13 + 72) = a2;
  *(void *)(v13 + 80) = a3;
  *(double *)(v13 + 88) = a5;
  *(void *)(v13 + 96) = v6;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_23470A3D4;
  *(void *)(v15 + 24) = v13;
  v18[4] = sub_2346DF1D8;
  v18[5] = v15;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  v18[2] = sub_2347E9AA8;
  double v18[3] = &block_descriptor_66;
  float32x4_t v16 = _Block_copy(v18);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_release();
  dispatch_sync(v12, v16);
  _Block_release(v16);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v12) {
    __break(1u);
  }
  return result;
}

uint64_t sub_234708654(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  long long v11 = a1[1];
  *(_OWORD *)&v21.a = *a1;
  *(_OWORD *)&v21.c = v11;
  *(_OWORD *)&v21.tx = a1[2];
  CGAffineTransformInvert(&v20, &v21);
  *((void *)&v12 + 1) = *(void *)&v20.b;
  *(float32x2_t *)&long long v12 = vcvt_f32_f64(*(float64x2_t *)&v20.a);
  long long v18 = v12;
  *(float32x2_t *)&long long v12 = vcvt_f32_f64(*(float64x2_t *)&v20.c);
  long long v19 = v12;
  *(float32x2_t *)&long long v13 = vcvt_f32_f64(*(float64x2_t *)&v20.tx);
  *((void *)&v13 + 1) = 1065353216;
  long long v17 = v13;
  type metadata accessor for FrameTextures();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  *(void *)(v14 + 32) = a4;
  *(_OWORD *)(v14 + 48) = v18;
  *(_OWORD *)(v14 + 64) = v19;
  *(_OWORD *)(v14 + 80) = v17;
  *(double *)(v14 + 96) = a6;
  swift_beginAccess();
  swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v15 = swift_unknownObjectRetain();
  MEMORY[0x237DC6730](v15);
  if (*(void *)((*(void *)(a5 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a5 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_2347EE800();
  sub_2347EE820();
  sub_2347EE7F0();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_2347087A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v11 = *(NSObject **)(v5 + 24);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  long long v13 = (void *)swift_allocObject();
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a5;
  v13[7] = a4;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_23470A34C;
  *(void *)(v14 + 24) = v13;
  v17[4] = sub_2346DF164;
  v17[5] = v14;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 1107296256;
  v17[2] = sub_2347E9AA8;
  v17[3] = &block_descriptor_1;
  uint64_t v15 = _Block_copy(v17);
  swift_retain();
  swift_release();
  dispatch_sync(v11, v15);
  _Block_release(v15);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v11) {
    __break(1u);
  }
  return result;
}

uint64_t sub_234708938(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    long long v13 = (unint64_t *)(result + 16);
    swift_beginAccess();
    unint64_t v14 = *(void *)(v12 + 16);
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      if (sub_2347EEEC0())
      {
LABEL_4:
        if ((v14 & 0xC000000000000001) != 0)
        {
          uint64_t v16 = MEMORY[0x237DC6CF0](0, v14);
        }
        else
        {
          if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_22;
          }
          uint64_t v16 = *(void *)(v14 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        *a2 = *(void *)(v16 + 16);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        *a3 = *(void *)(v16 + 24);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        *a4 = *(void *)(v16 + 32);
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        *a5 = *(void *)(v16 + 96);
        long long v17 = *(_OWORD *)(v16 + 64);
        long long v18 = *(_OWORD *)(v16 + 80);
        *(_OWORD *)a6 = *(_OWORD *)(v16 + 48);
        *(_OWORD *)(a6 + 16) = v17;
        *(_OWORD *)(a6 + 32) = v18;
        swift_beginAccess();
        a6 = *v13;
        if (!(*v13 >> 62))
        {
          if (*(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_9;
          }
          goto LABEL_23;
        }
LABEL_22:
        swift_bridgeObjectRetain();
        uint64_t v19 = sub_2347EEEC0();
        swift_bridgeObjectRelease();
        if (v19)
        {
LABEL_9:
          a6 = *v13;
          if (!(*v13 >> 62))
          {
            if (*(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_11;
            }
            goto LABEL_25;
          }
LABEL_24:
          swift_bridgeObjectRetain();
          uint64_t v20 = sub_2347EEEC0();
          swift_bridgeObjectRelease();
          if (v20)
          {
LABEL_11:
            if ((a6 & 0xC000000000000001) == 0)
            {
              if (!*(void *)((a6 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_28;
              }
              uint64_t result = swift_retain();
LABEL_14:
              if (!(*v13 >> 62))
              {
                if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
LABEL_16:
                  sub_23478F094(0, 1);
                  swift_endAccess();
                  swift_release();
                  swift_release();
                  return swift_release();
                }
                goto LABEL_29;
              }
LABEL_28:
              swift_bridgeObjectRetain();
              uint64_t v21 = sub_2347EEEC0();
              uint64_t result = swift_bridgeObjectRelease();
              if (v21) {
                goto LABEL_16;
              }
LABEL_29:
              __break(1u);
              return result;
            }
LABEL_26:
            uint64_t result = MEMORY[0x237DC6CF0](0, a6);
            goto LABEL_14;
          }
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15) {
        goto LABEL_4;
      }
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_234708C18()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameTextureCache()
{
  return self;
}

uint64_t sub_234708C7C()
{
  uint64_t v1 = sub_2347EE9F0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  int v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2347EE9D0();
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = sub_2347EE410();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 16) = MEMORY[0x263F8EE78];
  sub_2346DEFA8();
  sub_2347EE3D0();
  v9[1] = v7;
  sub_234709FCC((unint64_t *)&qword_2687AE910, 255, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AD2C0);
  sub_2346DF040();
  sub_2347EEC30();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8F130], v1);
  *(void *)(v0 + 24) = sub_2347EEA20();
  return v0;
}

uint64_t sub_234708EB8()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PixelBufferFormat()
{
  return self;
}

BOOL sub_234708EEC(uint64_t *a1, uint64_t *a2)
{
  return sub_234709D14(*a1, *a2);
}

uint64_t sub_234708EF8()
{
  return sub_2347EF200();
}

uint64_t sub_234708F64()
{
  return sub_2347EF1D0();
}

uint64_t sub_234708FB8()
{
  return sub_2347EF200();
}

uint64_t sub_234709020(void *a1, _OWORD *a2)
{
  id v4 = objc_msgSend(a1, sel_capturedImage);
  id v5 = sub_2347094A0(v4);

  id v6 = sub_2347E943C();
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = sub_23470935C(v6, 0, MTLPixelFormatR32Float);
  }
  else
  {
    id v8 = 0;
  }
  id v9 = objc_msgSend(a1, sel_smoothedSceneDepth);
  if (v9
    && (unint64_t v10 = v9, v11 = objc_msgSend(v9, sel_confidenceMap), v10, v11)
    || (id v12 = objc_msgSend(a1, sel_sceneDepth),
        id v11 = objc_msgSend(v12, sel_confidenceMap),
        v12,
        v11))
  {
    id v13 = sub_23470935C(v11, 0, MTLPixelFormatR8Uint);
  }
  else
  {
    id v13 = 0;
  }
  objc_msgSend(a1, sel_timestamp);
  sub_2347084A0((uint64_t)v5, (uint64_t)v8, (uint64_t)v13, a2, v14);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_23470919C(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 0;
  }
  char v7 = *(unsigned char *)(v3 + 72);
  swift_unknownObjectRetain();
  if ((v7 & 1) == 0)
  {
    sub_2347098EC((uint64_t)objc_msgSend(a3, sel_width), (uint64_t)objc_msgSend(a3, sel_height));
    *(unsigned char *)(v3 + 72) = 1;
  }
  uint64_t v8 = *(void *)(v3 + 88);
  if (!v8 || (uint64_t v9 = *(void *)(v3 + 96)) == 0 || (v10 = *(void *)(v3 + 104)) == 0)
  {
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v3 + 112);
  if (v11)
  {
    id v12 = *(void **)(v3 + 64);
    if (v12)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      objc_msgSend(v12, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, a1, a2, v8);
      objc_msgSend(v12, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, a1, a2, v9);
      id v13 = *(void **)(v3 + 56);
      if (!v13)
      {
LABEL_11:
        objc_msgSend(v13, sel_encodeReconstructionToCommandBuffer_guidanceTexture_coefficientsTexture_destinationTexture_, a1, v8, v10, v11);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_13;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      id v13 = *(void **)(v3 + 56);
      if (!v13) {
        goto LABEL_11;
      }
    }
    objc_msgSend(v13, sel_encodeRegressionToCommandBuffer_sourceTexture_guidanceTexture_weightsTexture_destinationCoefficientsTexture_, a1, a3, v9, 0, v10);
    goto LABEL_11;
  }
LABEL_13:
  swift_unknownObjectRelease();
  return v11;
}

id sub_23470935C(void *a1, size_t a2, MTLPixelFormat a3)
{
  textureOut[4] = *(CVMetalTextureRef *)MEMORY[0x263EF8340];
  swift_beginAccess();
  char v7 = *(void **)(v3 + 128);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_2347095D0(a1);
    if (v9)
    {
      uint64_t v10 = v9;
      size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v9, a2);
      size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v10, a2);
      textureOut[0] = 0;
      CVReturn TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v8, v10, 0, a3, WidthOfPlane, HeightOfPlane, a2, textureOut);
      CVMetalTextureRef v14 = textureOut[0];
      if (TextureFromImage)
      {

        uint64_t v8 = v10;
      }
      else
      {
        if (textureOut[0])
        {
          long long v17 = textureOut[0];
          id v15 = CVMetalTextureGetTexture(v17);

          return v15;
        }
        CVMetalTextureRef v14 = v10;
      }
    }
    else
    {
    }
  }
  return 0;
}

id sub_2347094A0(void *a1)
{
  textureOut[4] = *(CVMetalTextureRef *)MEMORY[0x263EF8340];
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 128);
  if (v3)
  {
    id v4 = v3;
    id v5 = sub_2347095D0(a1);
    if (v5)
    {
      id v6 = v5;
      size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v5, 0);
      size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v6, 0);
      textureOut[0] = 0;
      CVReturn TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v4, v6, 0, (MTLPixelFormat)0x208uLL, WidthOfPlane, HeightOfPlane, 0, textureOut);
      CVMetalTextureRef v10 = textureOut[0];
      if (TextureFromImage)
      {

        id v4 = v6;
        id v6 = v10;
      }
      else if (textureOut[0])
      {
        id v13 = textureOut[0];
        id v11 = CVMetalTextureGetTexture(v13);

        return v11;
      }
    }
    else
    {
    }
  }
  return 0;
}

CVPixelBufferRef sub_2347095D0(void *a1)
{
  pixelBufferOut[6] = *(CVPixelBufferRef *)MEMORY[0x263EF8340];
  uint64_t v2 = a1;
  size_t Width = CVPixelBufferGetWidth(v2);
  size_t Height = CVPixelBufferGetHeight(v2);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v2);

  type metadata accessor for PixelBufferFormat();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = Width;
  *(void *)(v6 + 24) = Height;
  *(_DWORD *)(v6 + 32) = PixelFormatType;
  char v7 = (uint64_t *)(v1 + 32);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v1 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_234712708(v6, v8);
  swift_release();
  swift_bridgeObjectRelease();

  if (!v9)
  {
    swift_retain();
    CVPixelBufferPoolRef v10 = sub_23470A014(v2);
    swift_beginAccess();
    if (v10)
    {
      sub_234713D74((uint64_t)v10, v6);
      swift_release();
    }
    else
    {
      id v11 = (void *)sub_2347CC99C(v6);
      swift_release();
    }
    swift_endAccess();
  }
  uint64_t v12 = *v7;
  swift_retain();
  swift_bridgeObjectRetain();
  id v13 = (__CVPixelBufferPool *)sub_234712708(v6, v12);
  swift_release();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_12;
  }
  pixelBufferOut[0] = 0;
  CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x263EFFB08], v13, pixelBufferOut);
  CVPixelBufferRef v14 = pixelBufferOut[0];
  if (!pixelBufferOut[0]) {
    goto LABEL_20;
  }
  id v15 = pixelBufferOut[0];
  if (!CVPixelBufferLockBaseAddress(v2, 1uLL))
  {
    if (CVPixelBufferLockBaseAddress(v15, 0))
    {
      CVPixelBufferUnlockBaseAddress(v2, 1uLL);
      goto LABEL_11;
    }
    int64_t PlaneCount = CVPixelBufferGetPlaneCount(v2);
    if (PlaneCount < 2)
    {
      CVPixelBufferLockBaseAddress(v2, 1uLL);
      CVPixelBufferLockBaseAddress(v15, 0);
      BaseAddress = CVPixelBufferGetBaseAddress(v2);
      uint64_t v24 = CVPixelBufferGetBaseAddress(v15);
      size_t DataSize = CVPixelBufferGetDataSize(v2);
      memcpy(v24, BaseAddress, DataSize);
    }
    else
    {
      int64_t v17 = PlaneCount;
      for (size_t i = 0; i != v17; ++i)
      {
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v2, i);
        uint64_t v20 = CVPixelBufferGetBaseAddressOfPlane(v15, i);
        int64_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v2, i);
        int64_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v2, i);
        if ((unsigned __int128)(BytesPerRowOfPlane * (__int128)HeightOfPlane) >> 64 != (BytesPerRowOfPlane
                                                                                       * HeightOfPlane) >> 63)
          __break(1u);
        memcpy(v20, BaseAddressOfPlane, BytesPerRowOfPlane * HeightOfPlane);
      }
    }
    CVPixelBufferUnlockBaseAddress(v15, 0);
    CVPixelBufferUnlockBaseAddress(v2, 1uLL);

LABEL_20:
    swift_release();
    return v14;
  }
LABEL_11:

LABEL_12:
  swift_release();
  return 0;
}

uint64_t sub_2347098EC(uint64_t result, uint64_t a2)
{
  double v3 = *(double *)(v2 + 16);
  double v4 = v3 * (double)result;
  if (v4 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  double v6 = v3 * (double)a2;
  if ((*(void *)&v4 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v6 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_14;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = (uint64_t)v4;
  uint64_t v19 = (uint64_t)v6;
  CVPixelBufferPoolRef v10 = *(void **)(v2 + 120);
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
  objc_msgSend(v11, sel_setPixelFormat_, 115);
  objc_msgSend(v11, sel_setWidth_, v8);
  objc_msgSend(v11, sel_setHeight_, a2);
  objc_msgSend(v11, sel_setUsage_, 3);
  uint64_t v20 = a2;
  id v12 = objc_msgSend(v10, sel_newTextureWithDescriptor_, v11);

  *(void *)(v2 + 104) = v12;
  swift_unknownObjectRelease();
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
  objc_msgSend(v13, sel_setPixelFormat_, 55);
  objc_msgSend(v13, sel_setWidth_, v9);
  objc_msgSend(v13, sel_setHeight_, v19);
  objc_msgSend(v13, sel_setUsage_, 3);
  id v14 = objc_msgSend(v10, sel_newTextureWithDescriptor_, v13);

  *(void *)(v2 + 112) = v14;
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
  objc_msgSend(v15, sel_setPixelFormat_, 115);
  objc_msgSend(v15, (SEL)&selRef_drawPrimitives_vertexStart_vertexCount_, v9);
  objc_msgSend(v15, (SEL)0x264BF9F98, v19);
  objc_msgSend(v15, sel_setUsage_, 3);
  id v16 = objc_msgSend(v10, sel_newTextureWithDescriptor_, v15);

  *(void *)(v2 + 88) = v16;
  swift_unknownObjectRelease();
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
  objc_msgSend(v17, sel_setPixelFormat_, 115);
  objc_msgSend(v17, (SEL)&selRef_drawPrimitives_vertexStart_vertexCount_, v8);
  objc_msgSend(v17, (SEL)0x264BF9F98, v20);
  objc_msgSend(v17, sel_setUsage_, 3);
  id v18 = objc_msgSend(v10, sel_newTextureWithDescriptor_, v17);

  *(void *)(v2 + 96) = v18;

  return swift_unknownObjectRelease();
}

id *sub_234709C04()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v0;
}

uint64_t sub_234709C74()
{
  sub_234709C04();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FrameProcessor()
{
  return self;
}

uint64_t sub_234709CCC(uint64_t a1, uint64_t a2)
{
  return sub_234709FCC(&qword_2687AD2A8, a2, (void (*)(uint64_t))type metadata accessor for PixelBufferFormat);
}

BOOL sub_234709D14(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

void sub_234709D50(id *a1, void *a2, id a3, id a4, id a5, id a6)
{
  id v12 = *a1;
  if (!*a1
    || objc_msgSend(*a1, sel_width) != a3
    || objc_msgSend(v12, sel_height) != a4
    || objc_msgSend(v12, sel_pixelFormat) != a6
    || objc_msgSend(v12, sel_usage) != a5)
  {
    if (a3)
    {
      if (a4)
      {
        id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F12A50]), sel_init);
        objc_msgSend(v13, sel_setPixelFormat_, a6);
        objc_msgSend(v13, sel_setWidth_, a3);
        objc_msgSend(v13, sel_setHeight_, a4);
        objc_msgSend(v13, sel_setUsage_, a5);
        id v14 = objc_msgSend(a2, sel_newTextureWithDescriptor_, v13);
        swift_unknownObjectRelease();

        *a1 = v14;
      }
    }
  }
}

uint64_t sub_234709E9C(void *a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 16) = 0x400E000000000000;
  type metadata accessor for FrameTextureCache();
  uint64_t v4 = swift_allocObject();
  sub_234708C7C();
  uint64_t v5 = MEMORY[0x263F8EE80];
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v5;
  *(_DWORD *)(v2 + 40) = 998445679;
  *(void *)(v2 + 48) = 5;
  *(void *)(v2 + 128) = 0;
  *(unsigned char *)(v2 + 72) = 0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = a1;
  swift_beginAccess();
  swift_unknownObjectRetain();
  CVMetalTextureCacheCreate(0, 0, a1, 0, (CVMetalTextureCacheRef *)(v2 + 128));
  swift_endAccess();
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F13290]), sel_initWithDevice_kernelDiameter_, a1, 5);
  *(void *)(v2 + 56) = v6;
  LODWORD(v7) = 998445679;
  objc_msgSend(v6, sel_setEpsilon_, v7);
  *(void *)(v2 + 64) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F13240]), sel_initWithDevice_, a1);
  return v2;
}

uint64_t sub_234709FCC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

CVPixelBufferPoolRef sub_23470A014(__CVBuffer *a1)
{
  poolOut[1] = *(CVPixelBufferPoolRef *)MEMORY[0x263EF8340];
  poolOut[0] = 0;
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD2D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2347F2580;
  uint64_t v6 = sub_2347EE620();
  uint64_t v7 = MEMORY[0x263F8E8F8];
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 72) = v7;
  *(_DWORD *)(inited + 48) = PixelFormatType;
  uint64_t v9 = sub_2347EE620();
  uint64_t v10 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 80) = v9;
  *(void *)(inited + 88) = v11;
  *(void *)(inited + 120) = v10;
  *(void *)(inited + 96) = Width;
  *(void *)(inited + 128) = sub_2347EE620();
  *(void *)(inited + 136) = v12;
  *(void *)(inited + 168) = v10;
  *(void *)(inited + 144) = Height;
  *(void *)(inited + 176) = sub_2347EE620();
  *(void *)(inited + 184) = v13;
  size_t v14 = extraColumnsOnLeft;
  *(void *)(inited + 216) = v10;
  *(void *)(inited + 192) = v14;
  *(void *)(inited + 224) = sub_2347EE620();
  *(void *)(inited + 232) = v15;
  size_t v16 = extraColumnsOnRight;
  *(void *)(inited + 264) = v10;
  *(void *)(inited + 240) = v16;
  *(void *)(inited + 272) = sub_2347EE620();
  *(void *)(inited + 280) = v17;
  size_t v18 = extraRowsOnTop;
  *(void *)(inited + 312) = v10;
  *(void *)(inited + 288) = v18;
  *(void *)(inited + 320) = sub_2347EE620();
  *(void *)(inited + 328) = v19;
  size_t v20 = extraRowsOnBottom;
  *(void *)(inited + 360) = v10;
  *(void *)(inited + 336) = v20;
  *(void *)(inited + 368) = sub_2347EE620();
  *(void *)(inited + 376) = v21;
  unint64_t v22 = sub_2347992B0(MEMORY[0x263F8EE78]);
  *(void *)(inited + 408) = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD2D8);
  *(void *)(inited + 384) = v22;
  sub_2347993E0(inited);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AD2E0);
  uint64_t v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_2347F0FA0;
  *(void *)(v23 + 32) = sub_2347EE620();
  *(void *)(v23 + 40) = v24;
  *(void *)(v23 + 48) = 10;
  sub_234799518(v23);
  CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef v26 = (const __CFDictionary *)sub_2347EE510();
  swift_bridgeObjectRelease();
  CFDictionaryRef v27 = (const __CFDictionary *)sub_2347EE510();
  swift_bridgeObjectRelease();
  CVPixelBufferPoolCreate(v25, v26, v27, poolOut);

  return poolOut[0];
}

uint64_t sub_23470A2DC()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_23470A314()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_23470A34C()
{
  return sub_234708938(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_23470A35C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_23470A384()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t sub_23470A3D4()
{
  return sub_234708654((_OWORD *)(v0 + 16), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 96), *(double *)(v0 + 88));
}

uint64_t sub_23470A3EC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_23470A404(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_234748394(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_23470AF8C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23470A470(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v2 = a1[2];
  if (*(void *)&v2 != *(void *)&a2[2]) {
    return 0;
  }
  if (!*(void *)&v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 4;
  uint64_t v4 = a2 + 4;
  uint64_t v5 = *(void *)&v2 - 1;
  do
  {
    float32x2_t v6 = *v3++;
    float32x2_t v7 = v6;
    float32x2_t v8 = *v4++;
    int32x2_t v9 = vceq_f32(v7, v8);
    BOOL v11 = v5-- != 0;
  }
  while ((v9.i8[0] & v9.i8[4] & 1) != 0 && v11);
  return v9.i8[0] & v9.i8[4] & 1;
}

BOOL sub_23470A4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 32;
  do
  {
    uint64_t v5 = 0;
    uint64_t v6 = 16 * v3++;
    long long v7 = *(_OWORD *)(v4 + v6);
    long long v8 = *(_OWORD *)(a2 + 32 + v6);
    while (1)
    {
      long long v13 = v7;
      float v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      long long v14 = v8;
      float v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      BOOL result = v10 == v11;
      if (v5 == 2) {
        break;
      }
      while (1)
      {
        ++v5;
        if (result) {
          break;
        }
        BOOL result = 0;
        if (v5 == 2) {
          return result;
        }
      }
    }
  }
  while (v10 == v11 && v3 != v2);
  return result;
}

BOOL sub_23470A59C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (float *)(a1 + 36);
  uint64_t v4 = (float *)(a2 + 36);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    float v7 = *v3++;
    float v8 = v7;
    float v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

BOOL sub_23470A608(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = a1 + 5;
  uint64_t v6 = a2 + 5;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v10 = *v6++;
    uint64_t v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

BOOL sub_23470A67C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  uint64_t v6 = (int *)(a2 + 36);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

BOOL sub_23470A6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 32;
  uint64_t v4 = a2 + 32;
  uint64_t v5 = v2 - 1;
  do
  {
    sub_23470BA38(v3, (uint64_t)v14);
    sub_23470BA38(v4, (uint64_t)v13);
    sub_2347EF1C0();
    sub_2346A1DCC((uint64_t)v14, (uint64_t)&v11);
    __swift_project_boxed_opaque_existential_1(&v11, v12);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACED0);
    sub_2347EE690();
    sub_2347EE6C0();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    sub_2347EE750();
    sub_2347EE6C0();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_2347EF200();
    sub_2347EF1C0();
    sub_2346A1DCC((uint64_t)v13, (uint64_t)&v11);
    __swift_project_boxed_opaque_existential_1(&v11, v12);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
    sub_2347EE690();
    sub_2347EE6C0();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    sub_2347EE750();
    sub_2347EE6C0();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_2347EF200();
    sub_23470BA94((uint64_t)v13);
    sub_23470BA94((uint64_t)v14);
    BOOL v9 = v5-- != 0;
    BOOL result = v6 == v7;
    if (v6 != v7) {
      break;
    }
    v3 += 40;
    v4 += 40;
  }
  while (v9);
  return result;
}

void *sub_23470A940(float32x2_t *a1, char a2, float a3, double a4, int32x2_t a5)
{
  *(float *)a5.i32 = a3;
  uint64_t v7 = (float32x2_t *)v5[5];
  int v8 = (float32x2_t *)a1[5];
  float32x2_t v9 = v7[2];
  if (*(void *)&v9 != *(void *)&v8[2]) {
    goto LABEL_11;
  }
  if (v9) {
    BOOL v10 = v7 == v8;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = v7 + 4;
    uint64_t v12 = v8 + 4;
    while (1)
    {
      int32x2_t v13 = vceq_f32(*v11, *v12);
      if ((v13.i32[0] & v13.i32[1] & 1) == 0) {
        break;
      }
      ++v12;
      ++v11;
      if (!--*(void *)&v9) {
        goto LABEL_9;
      }
    }
LABEL_11:
    float32x2_t v16 = v5[2];
    float32x2_t v56 = v5[3];
    float32x2_t v17 = vsub_f32(v56, v16);
    float32x2_t v19 = a1[2];
    float32x2_t v18 = a1[3];
    float32x2_t v20 = vsub_f32(v18, v19);
    int32x2_t v57 = a5;
    float v21 = _simd_orient_vf2((simd_float2)v17, (simd_float2)v20);
    float32x2_t v22 = vsub_f32(v19, v16);
    float v23 = _simd_orient_vf2((simd_float2)v22, (simd_float2)v17);
    float v24 = v23;
    float v25 = fabsf(v23);
    if (fabsf(v21) >= *(float *)v57.i32 || v25 >= *(float *)v57.i32)
    {
      if (v21 == 0.0 && v23 != 0.0) {
        return (void *)MEMORY[0x263F8EE78];
      }
      float v38 = _simd_orient_vf2((simd_float2)v22, (simd_float2)v20) / v21;
      long long v14 = (void *)MEMORY[0x263F8EE78];
      if (v38 >= 0.0 && v38 <= 1.0 && (float)(v24 / v21) >= 0.0 && (float)(v24 / v21) <= 1.0)
      {
        float v58 = v38;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9E8);
        uint64_t v41 = swift_allocObject();
        long long v14 = (void *)v41;
        *(_OWORD *)(v41 + 16) = xmmword_2347F0FA0;
        if (v58 == 0.0 || v58 == 1.0) {
          float32x2_t v46 = vadd_f32(v16, vmul_n_f32(v17, v58));
        }
        else {
          float32x2_t v46 = vadd_f32(v19, vmul_n_f32(v20, v24 / v21));
        }
        *(float32x2_t *)(v41 + 32) = v46;
      }
      return v14;
    }
    int32x2_t v27 = vcgt_f32((float32x2_t)vdup_lane_s32(v57, 0), vabs_f32(v22));
    if (v27.i32[0] & v27.i32[1] & 1) != 0 || (sub_2346C1780(v5, *(float *)v57.i32, v19))
    {
      long long v14 = sub_2346FA4C4(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v28 = v14[2];
      unint64_t v29 = v14[3];
      unint64_t v30 = v28 + 1;
      if (v28 >= v29 >> 1)
      {
        unint64_t v54 = v28 + 1;
        uint64_t v48 = v14;
        unint64_t v49 = v14[2];
        unint64_t v50 = sub_2346FA4C4((void *)(v29 > 1), v28 + 1, 1, v48);
        unint64_t v28 = v49;
        unint64_t v30 = v54;
        long long v14 = v50;
      }
    }
    else
    {
      if ((sub_2346C1780(a1, *(float *)v57.i32, v16) & 1) == 0)
      {
        long long v14 = (void *)MEMORY[0x263F8EE78];
        float32x2_t v31 = v56;
        float v32 = *(float *)v57.i32;
LABEL_23:
        float32x2_t v33 = vsub_f32(v18, v31);
        float v34 = fabsf(v33.f32[1]);
        BOOL v35 = fabsf(v33.f32[0]) < v32 && v34 < v32;
        if (v35 || (sub_2346C1780(v5, v32, v18) & 1) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v14 = sub_2346FA4C4(0, v14[2] + 1, 1, v14);
          }
          unint64_t v37 = v14[2];
          unint64_t v36 = v14[3];
          if (v37 >= v36 >> 1) {
            long long v14 = sub_2346FA4C4((void *)(v36 > 1), v37 + 1, 1, v14);
          }
          void v14[2] = v37 + 1;
          v14[v37 + 4] = v18;
        }
        else if (sub_2346C1780(a1, *(float *)v57.i32, v31))
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v14 = sub_2346FA4C4(0, v14[2] + 1, 1, v14);
          }
          unint64_t v44 = v14[2];
          unint64_t v43 = v14[3];
          if (v44 >= v43 >> 1) {
            long long v14 = sub_2346FA4C4((void *)(v43 > 1), v44 + 1, 1, v14);
          }
          void v14[2] = v44 + 1;
          v14[v44 + 4] = v31;
        }
        return v14;
      }
      long long v14 = sub_2346FA4C4(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v28 = v14[2];
      unint64_t v45 = v14[3];
      unint64_t v30 = v28 + 1;
      if (v28 >= v45 >> 1)
      {
        unint64_t v55 = v28 + 1;
        unint64_t v51 = v14;
        unint64_t v52 = v14[2];
        int v53 = sub_2346FA4C4((void *)(v45 > 1), v28 + 1, 1, v51);
        unint64_t v28 = v52;
        unint64_t v30 = v55;
        long long v14 = v53;
      }
      float32x2_t v19 = v16;
    }
    float32x2_t v31 = v56;
    float v32 = *(float *)v57.i32;
    void v14[2] = v30;
    v14[v28 + 4] = v19;
    goto LABEL_23;
  }
LABEL_9:
  if (a2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9E8);
  long long v14 = (void *)swift_allocObject();
  *((_OWORD *)v14 + 1) = xmmword_2347F19A0;
  float32x2_t v15 = a1[3];
  void v14[4] = a1[2];
  v14[5] = v15;
  return v14;
}

uint64_t sub_23470AD70(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
  int32x2_t v5 = vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a2);
  *(unsigned char *)(v2 + 32) = v5.i8[0] & v5.i8[4] & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC9E8);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2347F19A0;
  *(double *)(v6 + 32) = a1;
  *(double *)(v6 + 40) = a2;
  uint64_t v8 = v6;
  swift_bridgeObjectRetain();
  sub_23470A404(&v8);
  swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = v8;
  return v2;
}

uint64_t sub_23470AE2C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CDTEdge()
{
  return self;
}

uint64_t sub_23470AE88()
{
  uint64_t v1 = *v0;
  sub_2347EF1C0();
  sub_23470B96C((uint64_t)v3, *(void *)(v1 + 40));
  return sub_2347EF200();
}

uint64_t sub_23470AED0(uint64_t a1)
{
  return sub_23470B96C(a1, *(void *)(*(void *)v1 + 40));
}

uint64_t sub_23470AEDC()
{
  sub_2347EF1C0();
  sub_23470B96C((uint64_t)v2, *(void *)(*(void *)v0 + 40));
  return sub_2347EF200();
}

uint64_t sub_23470AF20(uint64_t a1, uint64_t a2)
{
  return sub_23470A470(*(float32x2_t **)(*(void *)a1 + 40), *(float32x2_t **)(*(void *)a2 + 40));
}

unint64_t sub_23470AF38()
{
  unint64_t result = qword_2687AD2F0;
  if (!qword_2687AD2F0)
  {
    type metadata accessor for CDTEdge();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD2F0);
  }
  return result;
}

uint64_t sub_23470AF8C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_2347EF060();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        float32x2_t v12 = *(float32x2_t *)(v10 + 8 * i);
        uint64_t v13 = v9;
        do
        {
          long long v14 = (float32x2_t *)(v10 + 8 * v13);
          float32x2_t v15 = *v14;
          if (fabsf(vsub_f32(v12, *v14).f32[0]) >= 0.00000011921)
          {
            if ((vcgt_f32(v15, v12).u8[0] & 1) == 0) {
              break;
            }
          }
          else if ((vcgt_f32(v15, v12).i32[1] & 1) == 0)
          {
            break;
          }
          if (!v10) {
            goto LABEL_145;
          }
          *long long v14 = v12;
          v14[1] = v15;
          --v13;
        }
        while (v13 != -1);
        ++v9;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  uint64_t v6 = result;
  uint64_t v96 = a1;
  if (v3 < 2)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t v102 = (float32x2_t *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v20 = *(void *)(MEMORY[0x263F8EE78] + 16);
      float32x2_t v19 = (char *)MEMORY[0x263F8EE78];
LABEL_107:
      unint64_t v88 = v19;
      uint64_t v98 = v16;
      if (v20 >= 2)
      {
        uint64_t v89 = *v96;
        do
        {
          unint64_t v90 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_136;
          }
          if (!v89) {
            goto LABEL_149;
          }
          uint64_t v91 = v88;
          uint64_t v92 = *(void *)&v88[16 * v90 + 32];
          uint64_t v93 = *(void *)&v88[16 * v20 + 24];
          sub_23470B6BC((float32x2_t *)(v89 + 8 * v92), (float32x2_t *)(v89 + 8 * *(void *)&v88[16 * v20 + 16]), (float32x2_t *)(v89 + 8 * v93), v102);
          if (v1) {
            goto LABEL_104;
          }
          if (v93 < v92) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v91 = sub_234748228((uint64_t)v91);
          }
          if (v90 >= *((void *)v91 + 2)) {
            goto LABEL_138;
          }
          uint64_t v94 = &v91[16 * v90 + 32];
          *(void *)uint64_t v94 = v92;
          *((void *)v94 + 1) = v93;
          unint64_t v95 = *((void *)v91 + 2);
          if (v20 > v95) {
            goto LABEL_139;
          }
          memmove(&v91[16 * v20 + 16], &v91[16 * v20 + 32], 16 * (v95 - v20));
          unint64_t v88 = v91;
          *((void *)v91 + 2) = v95 - 1;
          unint64_t v20 = v95 - 1;
        }
        while (v95 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v98 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v98 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD2F8);
    uint64_t v8 = sub_2347EE810();
    *(void *)(v8 + 16) = v7;
    uint64_t v98 = v8;
    uint64_t v102 = (float32x2_t *)(v8 + 32);
  }
  uint64_t v17 = 0;
  uint64_t v18 = *a1;
  uint64_t v97 = *a1 - 8;
  float32x2_t v19 = (char *)MEMORY[0x263F8EE78];
  uint64_t v99 = v6;
  uint64_t v100 = v3;
  uint64_t v101 = v18;
  while (1)
  {
    uint64_t v21 = v17++;
    if (v17 < v3)
    {
      float32x2_t v22 = *(float32x2_t *)(v18 + 8 * v17);
      float32x2_t v23 = *(float32x2_t *)(v18 + 8 * v21);
      int32x2_t v104 = vcgt_f32(v23, v22);
      int v24 = *(_DWORD *)((unint64_t)&v104 | (4 * (fabsf(vsub_f32(v22, v23).f32[0]) < 0.00000011921)));
      uint64_t v17 = v21 + 2;
      if (v21 + 2 < v3)
      {
        while (1)
        {
          float32x2_t v25 = v22;
          float32x2_t v22 = *(float32x2_t *)(v18 + 8 * v17);
          int32x2_t v103 = vcgt_f32(v25, v22);
          if ((v24 & 1) != (*(_DWORD *)((unint64_t)&v103 | (4
                                                                  * (fabsf(vsub_f32(v22, v25).f32[0]) < 0.00000011921))) & 1))
            break;
          if (v3 == ++v17)
          {
            uint64_t v17 = v3;
            break;
          }
        }
      }
      if (v24)
      {
        if (v17 < v21) {
          goto LABEL_142;
        }
        if (v21 < v17)
        {
          CFDictionaryRef v26 = (uint64_t *)(v97 + 8 * v17);
          uint64_t v27 = v17;
          uint64_t v28 = v21;
          unint64_t v29 = (uint64_t *)(v18 + 8 * v21);
          do
          {
            if (v28 != --v27)
            {
              if (!v18) {
                goto LABEL_148;
              }
              uint64_t v30 = *v29;
              *unint64_t v29 = *v26;
              *CFDictionaryRef v26 = v30;
            }
            ++v28;
            --v26;
            ++v29;
          }
          while (v28 < v27);
        }
      }
    }
    if (v17 >= v3) {
      goto LABEL_57;
    }
    if (__OFSUB__(v17, v21)) {
      goto LABEL_140;
    }
    if (v17 - v21 >= v6) {
      goto LABEL_57;
    }
    uint64_t v31 = v21 + v6;
    if (__OFADD__(v21, v6)) {
      goto LABEL_143;
    }
    if (v31 >= v3) {
      uint64_t v31 = v3;
    }
    if (v31 < v21) {
      break;
    }
    if (v17 != v31)
    {
      float v32 = (float32x2_t *)(v97 + 8 * v17);
      do
      {
        float32x2_t v33 = *(float32x2_t *)(v18 + 8 * v17);
        uint64_t v34 = v21;
        BOOL v35 = v32;
        do
        {
          float32x2_t v36 = *v35;
          if (fabsf(vsub_f32(v33, *v35).f32[0]) >= 0.00000011921)
          {
            if ((vcgt_f32(v36, v33).u8[0] & 1) == 0) {
              break;
            }
          }
          else if ((vcgt_f32(v36, v33).i32[1] & 1) == 0)
          {
            break;
          }
          if (!v18) {
            goto LABEL_146;
          }
          *BOOL v35 = v33;
          v35[1] = v36;
          --v35;
          ++v34;
        }
        while (v17 != v34);
        ++v17;
        ++v32;
      }
      while (v17 != v31);
      uint64_t v17 = v31;
    }
LABEL_57:
    if (v17 < v21) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float32x2_t v19 = sub_234747DB8(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v38 = *((void *)v19 + 2);
    unint64_t v37 = *((void *)v19 + 3);
    unint64_t v20 = v38 + 1;
    uint64_t v18 = v101;
    if (v38 >= v37 >> 1)
    {
      uint64_t v87 = sub_234747DB8((char *)(v37 > 1), v38 + 1, 1, v19);
      uint64_t v18 = v101;
      float32x2_t v19 = v87;
    }
    *((void *)v19 + 2) = v20;
    int v39 = v19 + 32;
    uint64_t v40 = &v19[16 * v38 + 32];
    *(void *)uint64_t v40 = v21;
    *((void *)v40 + 1) = v17;
    if (v38)
    {
      while (1)
      {
        unint64_t v41 = v20 - 1;
        if (v20 >= 4)
        {
          float32x2_t v46 = &v39[16 * v20];
          uint64_t v47 = *((void *)v46 - 8);
          uint64_t v48 = *((void *)v46 - 7);
          BOOL v52 = __OFSUB__(v48, v47);
          uint64_t v49 = v48 - v47;
          if (v52) {
            goto LABEL_124;
          }
          uint64_t v51 = *((void *)v46 - 6);
          uint64_t v50 = *((void *)v46 - 5);
          BOOL v52 = __OFSUB__(v50, v51);
          uint64_t v44 = v50 - v51;
          char v45 = v52;
          if (v52) {
            goto LABEL_125;
          }
          unint64_t v53 = v20 - 2;
          unint64_t v54 = &v39[16 * v20 - 32];
          uint64_t v56 = *(void *)v54;
          uint64_t v55 = *((void *)v54 + 1);
          BOOL v52 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          if (v52) {
            goto LABEL_127;
          }
          BOOL v52 = __OFADD__(v44, v57);
          uint64_t v58 = v44 + v57;
          if (v52) {
            goto LABEL_130;
          }
          if (v58 >= v49)
          {
            uint64_t v76 = &v39[16 * v41];
            uint64_t v78 = *(void *)v76;
            uint64_t v77 = *((void *)v76 + 1);
            BOOL v52 = __OFSUB__(v77, v78);
            uint64_t v79 = v77 - v78;
            if (v52) {
              goto LABEL_134;
            }
            BOOL v69 = v44 < v79;
            goto LABEL_94;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v70 = *((void *)v19 + 4);
            uint64_t v71 = *((void *)v19 + 5);
            BOOL v52 = __OFSUB__(v71, v70);
            uint64_t v63 = v71 - v70;
            char v64 = v52;
            goto LABEL_88;
          }
          uint64_t v43 = *((void *)v19 + 4);
          uint64_t v42 = *((void *)v19 + 5);
          BOOL v52 = __OFSUB__(v42, v43);
          uint64_t v44 = v42 - v43;
          char v45 = v52;
        }
        if (v45) {
          goto LABEL_126;
        }
        unint64_t v53 = v20 - 2;
        unint64_t v59 = &v39[16 * v20 - 32];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v62 = __OFSUB__(v60, v61);
        uint64_t v63 = v60 - v61;
        char v64 = v62;
        if (v62) {
          goto LABEL_129;
        }
        uint64_t v65 = &v39[16 * v41];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        BOOL v52 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v52) {
          goto LABEL_132;
        }
        if (__OFADD__(v63, v68)) {
          goto LABEL_133;
        }
        if (v63 + v68 >= v44)
        {
          BOOL v69 = v44 < v68;
LABEL_94:
          if (v69) {
            unint64_t v41 = v53;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v64) {
          goto LABEL_128;
        }
        uint64_t v72 = &v39[16 * v41];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v52 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v52) {
          goto LABEL_131;
        }
        if (v75 < v63) {
          goto LABEL_24;
        }
LABEL_96:
        unint64_t v80 = v41 - 1;
        if (v41 - 1 >= v20)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v18) {
          goto LABEL_147;
        }
        uint64_t v81 = v19;
        uint64_t v82 = &v39[16 * v80];
        uint64_t v83 = *(void *)v82;
        unint64_t v84 = &v39[16 * v41];
        uint64_t v85 = *((void *)v84 + 1);
        sub_23470B6BC((float32x2_t *)(v18 + 8 * *(void *)v82), (float32x2_t *)(v18 + 8 * *(void *)v84), (float32x2_t *)(v18 + 8 * v85), v102);
        if (v1)
        {
LABEL_104:
          swift_bridgeObjectRelease();
          *(void *)(v98 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        if (v85 < v83) {
          goto LABEL_121;
        }
        if (v41 > *((void *)v81 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v82 = v83;
        *(void *)&v39[16 * v80 + 8] = v85;
        unint64_t v86 = *((void *)v81 + 2);
        if (v41 >= v86) {
          goto LABEL_123;
        }
        float32x2_t v19 = v81;
        unint64_t v20 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((void *)v81 + 2) = v86 - 1;
        uint64_t v18 = v101;
        if (v86 <= 2) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_24:
    uint64_t v6 = v99;
    uint64_t v3 = v100;
    if (v17 >= v100)
    {
      uint64_t v16 = v98;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  uint64_t result = sub_2347EEE90();
  __break(1u);
  return result;
}

uint64_t sub_23470B6BC(float32x2_t *__src, float32x2_t *a2, float32x2_t *a3, float32x2_t *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)a2;
  uint64_t v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v12 = (char *)a3 - (char *)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v27 = __src;
  CFDictionaryRef v26 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_48;
    }
    if (__dst != a2 || &a2[v13] <= __dst) {
      memmove(__dst, a2, 8 * v13);
    }
    uint64_t v17 = &v4[v13];
    float32x2_t v25 = v17;
    uint64_t v27 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_47:
      sub_234747EB8((void **)&v27, (const void **)&v26, &v25);
      return 1;
    }
    while (1)
    {
      float32x2_t v18 = v17[-1];
      float32x2_t v19 = v6 - 1;
      float32x2_t v20 = v6[-1];
      float v21 = fabsf(vsub_f32(v18, v20).f32[0]);
      float32x2_t v22 = v5 - 1;
      int32x2_t v23 = vcgt_f32(v20, v18);
      if (v21 >= 0.00000011921)
      {
        if ((v23.i8[0] & 1) == 0)
        {
LABEL_37:
          float32x2_t v25 = v17 - 1;
          if (v5 < v17 || v22 >= v17 || v5 != v17) {
            *float32x2_t v22 = v17[-1];
          }
          --v17;
          if (v6 <= v7) {
            goto LABEL_47;
          }
          goto LABEL_34;
        }
      }
      else if ((v23.i8[4] & 1) == 0)
      {
        goto LABEL_37;
      }
      if (v5 != v6 || v22 >= v6) {
        *float32x2_t v22 = v20;
      }
      uint64_t v27 = --v6;
      if (v19 <= v7) {
        goto LABEL_47;
      }
LABEL_34:
      --v5;
      if (v17 <= v4) {
        goto LABEL_47;
      }
    }
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    long long v14 = &v4[v10];
    float32x2_t v25 = v14;
    if (v6 < v5 && v8 >= 8)
    {
      while (1)
      {
        int32x2_t v15 = vcgt_f32(*v4, *v6);
        if (fabsf(vsub_f32(*v6, *v4).f32[0]) >= 0.00000011921)
        {
          if (v15.i8[0])
          {
LABEL_18:
            uint64_t v16 = v6 + 1;
            if (v7 < v6 || v7 >= v16 || v7 != v6) {
              *uint64_t v7 = *v6;
            }
            goto LABEL_22;
          }
        }
        else if (v15.i8[4])
        {
          goto LABEL_18;
        }
        if (v7 != v4) {
          *uint64_t v7 = *v4;
        }
        CFDictionaryRef v26 = ++v4;
        uint64_t v16 = v6;
LABEL_22:
        ++v7;
        if (v4 < v14)
        {
          uint64_t v6 = v16;
          if (v16 < v5) {
            continue;
          }
        }
        uint64_t v27 = v7;
        goto LABEL_47;
      }
    }
    goto LABEL_47;
  }
LABEL_48:
  uint64_t result = sub_2347EEF10();
  __break(1u);
  return result;
}

uint64_t sub_23470B96C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_2347EF1D0();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 8;
      sub_2347EF1F0();
      uint64_t result = sub_2347EF1F0();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_23470B9E8()
{
  return sub_2347EF1F0();
}

uint64_t sub_23470BA38(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_23470BA94(uint64_t a1)
{
  return a1;
}

uint64_t sub_23470BAE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_2346A1A80(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void sub_23470BB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(v4 + 16);
  if ((v8 & 8) != 0)
  {
    sub_23470D9DC(a1);
    uint64_t v8 = *(void *)(v4 + 16);
    if ((v8 & 8) != 0)
    {
      uint64_t v10 = sub_23470BBF0(a1);
      sub_23470E4F8(v10);
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(v4 + 16);
    }
  }
  if (v8)
  {
    sub_23470F5AC(a2);
    uint64_t v8 = *(void *)(v4 + 16);
  }
  if (a3 && (v8 & 2) != 0)
  {
    swift_retain();
    sub_23470C870();
    swift_release();
    uint64_t v8 = *(void *)(v4 + 16);
  }
  if ((v8 & 4) != 0)
  {
    sub_23470CFF0(a4);
  }
}

uint64_t sub_23470BBF0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD368);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v56 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD370);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v55 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2347ED5C0();
  uint64_t v57 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  BOOL v62 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v54 = (char *)v46 - v9;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD350);
  MEMORY[0x270FA5388](v53);
  BOOL v52 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v51 = (char *)v46 - v12;
  uint64_t v58 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD378);
    uint64_t v13 = sub_2347EEF00();
  }
  else
  {
    uint64_t v13 = MEMORY[0x263F8EE80];
  }
  uint64_t v14 = *(void *)(v58 + 64);
  uint64_t v48 = v58 + 64;
  uint64_t v15 = -1 << *(unsigned char *)(v58 + 32);
  if (-v15 < 64) {
    uint64_t v16 = ~(-1 << -(char)v15);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  v46[1] = -1 << *(unsigned char *)(v58 + 32);
  int64_t v47 = (unint64_t)(63 - v15) >> 6;
  uint64_t v50 = v57 + 16;
  uint64_t v61 = v57 + 32;
  uint64_t v18 = v13 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v59 = 0;
  uint64_t v49 = v13;
  while (1)
  {
    if (v17)
    {
      unint64_t v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v22 = v21 | (v59 << 6);
      goto LABEL_28;
    }
    int64_t v23 = v59 + 1;
    if (__OFADD__(v59, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v23 >= v47) {
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v48 + 8 * v23);
    int64_t v25 = v59 + 1;
    if (!v24)
    {
      int64_t v25 = v59 + 2;
      if (v59 + 2 >= v47) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v48 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v59 + 3;
        if (v59 + 3 >= v47) {
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v48 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v59 + 4;
          if (v59 + 4 >= v47) {
            goto LABEL_37;
          }
          unint64_t v24 = *(void *)(v48 + 8 * v25);
          if (!v24) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    int64_t v59 = v25;
LABEL_28:
    uint64_t v28 = v57;
    uint64_t v27 = v58;
    uint64_t v29 = *(void *)(v57 + 72);
    uint64_t v30 = (uint64_t)v51;
    (*(void (**)(char *, unint64_t, uint64_t))(v57 + 16))(v51, *(void *)(v58 + 48) + v29 * v22, v6);
    uint64_t v31 = *(void *)(*(void *)(v27 + 56) + 8 * v22);
    uint64_t v33 = (uint64_t)v52;
    uint64_t v32 = v53;
    *(void *)(v30 + *(int *)(v53 + 48)) = v31;
    sub_2346B1970(v30, v33, &qword_2687AD350);
    uint64_t v34 = *(int *)(v32 + 48);
    BOOL v35 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
    float32x2_t v36 = v56;
    v35(v56, v33, v6);
    uint64_t v60 = *(void *)(v33 + v34);
    unint64_t v37 = v55;
    v35(v55, (uint64_t)v36, v6);
    unint64_t v38 = v54;
    v35(v54, (uint64_t)v37, v6);
    v35(v62, (uint64_t)v38, v6);
    uint64_t v13 = v49;
    sub_234711BCC(&qword_2687ACDD0, MEMORY[0x263F07508]);
    swift_retain();
    uint64_t result = sub_2347EE530();
    uint64_t v39 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v18 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v40) & ~*(void *)(v18 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v18 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v20 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v35)(*(void *)(v13 + 48) + v20 * v29, v62, v6);
    *(void *)(*(void *)(v13 + 56) + 8 * v20) = v60;
    ++*(void *)(v13 + 16);
  }
  int64_t v26 = v59 + 5;
  if (v59 + 5 >= v47)
  {
LABEL_37:
    swift_release();
    sub_2346DC0DC();
    return v13;
  }
  unint64_t v24 = *(void *)(v48 + 8 * v26);
  if (v24)
  {
    int64_t v25 = v59 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v47) {
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v48 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_23470C1CC(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2347EE370();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = v2[5];
  if (a1)
  {
    if (v5 || v2[6] || v2[7] || v2[8] || v2[9]) {
      return;
    }
    uint64_t v6 = self;
    id v7 = objc_msgSend(v6, sel_systemRedColor);
    type metadata accessor for DebugArrowEntity();
    swift_allocObject();
    uint64_t v8 = sub_2346BEB1C(v7);
    id v9 = objc_msgSend(v6, sel_magentaColor);
    swift_allocObject();
    uint64_t v10 = sub_2346BEB1C(v9);
    id v11 = objc_msgSend(v6, sel_systemGreenColor);
    swift_allocObject();
    uint64_t v16 = sub_2346BEB1C(v11);
    id v12 = objc_msgSend(v6, sel_systemMintColor);
    swift_allocObject();
    uint64_t v13 = sub_2346BEB1C(v12);
    id v14 = objc_msgSend(v6, sel_blueColor);
    swift_allocObject();
    uint64_t v15 = sub_2346BEB1C(v14);
    type metadata accessor for DollHouse();
    sub_2347ED700();
    sub_2347ED700();
    sub_2347ED700();
    sub_2347ED700();
    sub_2347ED700();
    swift_retain();
    sub_2347EDF90();
    swift_release();
    swift_retain();
    sub_2347EDF90();
    swift_release();
    swift_retain();
    sub_2347EDF90();
    swift_release();
    swift_retain();
    sub_2347EDF90();
    swift_release();
    swift_retain();
    sub_2347EDF90();
    swift_release();
    v2[5] = v8;
    swift_release();
    v2[6] = v10;
    swift_release();
    v2[7] = v16;
    swift_release();
    v2[8] = v13;
    swift_release();
    v2[9] = v15;
  }
  else
  {
    if (!v5 || !v2[6] || !v2[7] || !v2[8] || !v2[9]) {
      return;
    }
    type metadata accessor for DollHouse();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_2347ED6E0();
    sub_2347ED6E0();
    sub_2347ED6E0();
    sub_2347ED6E0();
    sub_2347ED6E0();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v2[5] = 0;
    swift_release();
    v2[6] = 0;
    swift_release();
    v2[7] = 0;
    swift_release();
    v2[8] = 0;
    swift_release();
    v2[9] = 0;
  }

  swift_release();
}

void sub_23470C870()
{
  uint64_t v1 = v0[4];
  if (v1)
  {
    if (v0[5])
    {
      if (v0[6])
      {
        if (v0[7])
        {
          if (v0[8])
          {
            uint64_t v2 = v0[9];
            if (v2)
            {
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              sub_2347EDED0();
              double v4 = COERCE_DOUBLE(vzip1_s32(*(int32x2_t *)v3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)));
              float32x4_t v5 = vmulq_f32((float32x4_t)v3, (float32x4_t)v3);
              v5.i64[0] = vaddq_f32(v5, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2)).u64[0];
              v5.f32[0] = sqrtf(v5.f32[0]);
              double v6 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v4, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 0)));
              if (v5.f32[0] < 0.01) {
                double v6 = v4;
              }
              float32x2_t v56 = *(float32x2_t *)&v6;
              swift_retain();
              sub_2347EDF90();
              swift_release();
              swift_retain();
              sub_2347EDF90();
              swift_release();
              swift_retain();
              sub_2347EDF90();
              swift_release();
              swift_retain();
              sub_2347EDF90();
              swift_release();
              swift_retain();
              sub_2347EDF90();
              swift_release();
              long long v55 = *(_OWORD *)(v1 + 48);
              long long v59 = *(_OWORD *)(v1 + 64);
              __asm { FMOV            V3.4S, #1.0 }
              type metadata accessor for DebugArrowEntity();
              id v12 = (void (*)(unsigned char *, void))sub_2347ED790();
              id v14 = v13;
              sub_2347EF180();
              long long v60 = v15;
              sub_2347EE9A0();
              long long v57 = v16;
              sub_2347EE990();
              *id v14 = v17;
              v14[1] = v57;
              void v14[2] = v60;
              v12(v64, 0);
              uint64_t v18 = (void (*)(unsigned char *, void))sub_2347ED790();
              unint64_t v20 = v19;
              sub_2347EF180();
              long long v52 = v21;
              sub_2347EE9A0();
              long long v51 = v22;
              sub_2347EE990();
              *unint64_t v20 = v23;
              v20[1] = v51;
              v20[2] = v52;
              v18(v64, 0);
              unint64_t v24 = (void (*)(unsigned char *, void))sub_2347ED790();
              int64_t v26 = v25;
              sub_2347EF180();
              long long v54 = v27;
              sub_2347EE9A0();
              long long v53 = v28;
              sub_2347EE990();
              *int64_t v26 = v29;
              v26[1] = v53;
              void v26[2] = v54;
              v24(v64, 0);
              uint64_t v30 = (void (*)(unsigned char *, void))sub_2347ED790();
              uint64_t v32 = v31;
              sub_2347EF180();
              long long v61 = v33;
              sub_2347EE9A0();
              long long v58 = v34;
              sub_2347EE990();
              *uint64_t v32 = v35;
              v32[1] = v58;
              v32[2] = v61;
              v30(v64, 0);
              float32x2_t v36 = (void (*)(unsigned char *, void))sub_2347ED790();
              unint64_t v38 = v37;
              sub_2347EF180();
              long long v63 = v39;
              sub_2347EE9A0();
              long long v62 = v40;
              sub_2347EE990();
              *unint64_t v38 = v41;
              v38[1] = v62;
              v38[2] = v63;
              v36(v64, 0);
              float v42 = vaddv_f32(vmul_f32(v56, *(float32x2_t *)&v55));
              float v43 = vaddv_f32(vmul_f32(v56, vsub_f32(0, *(float32x2_t *)&v55)));
              float v44 = vaddv_f32(vmul_f32(v56, *(float32x2_t *)&v59));
              if (vaddv_f32(vmul_f32(v56, vsub_f32(0, *(float32x2_t *)&v59))) > 0.4)
              {
                if (v42 <= 0.4)
                {
                  if (v43 <= 0.4)
                  {
                    if (v44 <= 0.4)
                    {
                      uint64_t v45 = self;
                      float32x2_t v46 = &selRef_systemMintColor;
                      goto LABEL_30;
                    }
                  }
                  else if (v44 <= 0.4)
                  {
                    uint64_t v45 = self;
                    float32x2_t v46 = &selRef_systemBrownColor;
                    goto LABEL_30;
                  }
                }
                else if (v43 <= 0.4 && v44 <= 0.4)
                {
                  uint64_t v45 = self;
                  float32x2_t v46 = &selRef_systemOrangeColor;
LABEL_30:
                  id v48 = objc_msgSend(v45, *v46, v51);
                  uint64_t v49 = *(void **)(v2 + qword_2687BDF80);
                  *(void *)(v2 + qword_2687BDF80) = v48;
                  id v50 = v48;
                  sub_2346BE80C();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();

                  return;
                }
LABEL_29:
                uint64_t v45 = self;
                float32x2_t v46 = &selRef_blackColor;
                goto LABEL_30;
              }
              if (v42 <= 0.4)
              {
                if (v43 <= 0.4)
                {
                  if (v44 > 0.4)
                  {
                    uint64_t v45 = self;
                    float32x2_t v46 = &selRef_systemGreenColor;
                    goto LABEL_30;
                  }
                  goto LABEL_29;
                }
                uint64_t v45 = self;
                float32x2_t v46 = &selRef_magentaColor;
                int64_t v47 = &selRef_systemPurpleColor;
              }
              else
              {
                if (v43 > 0.4) {
                  goto LABEL_29;
                }
                uint64_t v45 = self;
                float32x2_t v46 = &selRef_systemRedColor;
                int64_t v47 = &selRef_systemYellowColor;
              }
              if (v44 > 0.4) {
                float32x2_t v46 = v47;
              }
              goto LABEL_30;
            }
          }
        }
      }
    }
  }
}

void sub_23470CFF0(uint64_t a1)
{
  uint64_t v3 = sub_2347ED5C0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v6 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v74 = (char *)v59 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v75 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = v1;
  uint64_t v11 = *(void *)(v1 + 32);
  if (!v11) {
    return;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD358);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2347F1A10;
  long long v13 = *(_OWORD *)(v11 + 48);
  *(void *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 48) = xmmword_2347F4340;
  *(float32x2_t *)(v12 + 64) = vsub_f32(0, *(float32x2_t *)&v13);
  *(_OWORD *)(v12 + 80) = xmmword_2347F4350;
  long long v14 = *(_OWORD *)(v11 + 64);
  *(void *)(v12 + 96) = v14;
  *(_OWORD *)(v12 + 112) = xmmword_2347F4360;
  *(float32x2_t *)(v12 + 128) = vsub_f32(0, *(float32x2_t *)&v14);
  *(_OWORD *)(v12 + 144) = xmmword_2347F4370;
  unint64_t v15 = sub_2347AE938(v12);
  swift_setDeallocating();
  swift_deallocClassInstance();
  uint64_t v16 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(a1 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v81 = v4 + 16;
  uint64_t v82 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v78 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  uint64_t v76 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v83 = (void (**)(char *, uint64_t))(v4 + 8);
  v59[1] = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  int64_t v21 = 0;
  long long v66 = xmmword_2347F0FA0;
  uint64_t v65 = a1;
  uint64_t v60 = v4;
  unint64_t v64 = v15;
  uint64_t v63 = a1 + 64;
  int64_t v62 = v20;
  uint64_t v73 = v6;
  uint64_t v84 = v3;
  while (1)
  {
    while (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v21 << 6);
      if (*(void *)(v15 + 16))
      {
LABEL_24:
        uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8 * v25);
        unint64_t v30 = sub_2347BFC4C(*(float32x2_t *)(*(void *)(a1 + 48) + 8 * v25));
        if (v31)
        {
          int64_t v70 = v21;
          uint64_t v32 = v29;
          uint64_t v33 = *(void *)(v29 + 16);
          long long v34 = v82;
          unint64_t v69 = v19;
          uint64_t v68 = v32;
          if (v33)
          {
            unint64_t v61 = (unint64_t)v82 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
            long long v71 = *(_OWORD *)(*(void *)(v15 + 56) + 16 * v30);
            uint64_t v35 = v32 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
            uint64_t v80 = *(void *)(v60 + 72);
            float32x2_t v36 = *(void (**)(void, void, void))(v60 + 16);
            swift_bridgeObjectRetain();
            unint64_t v37 = v74;
            unint64_t v38 = v75;
            uint64_t v67 = v36;
            while (1)
            {
              long long v22 = v6;
              uint64_t v41 = v84;
              v36(v38, v35, v84);
              uint64_t v79 = *v34;
              v79(v38, 0, 1, v41);
              if ((*v78)(v38, 1, v41) == 1) {
                break;
              }
              (*v76)(v37, v38, v41);
              uint64_t v42 = sub_23469DDFC();
              v36(v6, v37, v41);
              swift_beginAccess();
              uint64_t v43 = *(void *)(v42 + 96);
              swift_bridgeObjectRetain();
              swift_release();
              if (*(void *)(v43 + 16) && (unint64_t v44 = sub_2347BFA88((uint64_t)v6), (v45 & 1) != 0))
              {
                uint64_t v46 = *(void *)(*(void *)(v43 + 56) + 8 * v44);
                swift_retain();
                swift_bridgeObjectRelease();
                int64_t v47 = *v83;
                uint64_t v48 = v84;
                (*v83)(v6, v84);
                uint64_t v49 = v46 + qword_2687BDFB0;
                swift_beginAccess();
                sub_2346A1DCC(v49, (uint64_t)&v86);
                __swift_instantiateConcreteTypeFromMangledName(&qword_2687AC970);
                type metadata accessor for SimpleScanMaterial();
                if (swift_dynamicCast())
                {
                  swift_beginAccess();
                  id v50 = (void (*)(uint64_t *, void))sub_2347EE180();
                  sub_2347EE090();
                  v50(&v85, 0);
                  swift_endAccess();
                  unint64_t v37 = v74;
                  swift_release();
                }
                type metadata accessor for WallEntity();
                sub_234711BCC((unint64_t *)&qword_2687AD360, (void (*)(uint64_t))type metadata accessor for WallEntity);
                long long v51 = (void (*)(uint64_t *, void))sub_2347EDFD0();
                uint64_t v53 = v52;
                uint64_t v54 = sub_2347ED990();
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v53, 1, v54))
                {
                  v51(&v85, 0);
                }
                else
                {
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
                  *(_OWORD *)(swift_allocObject() + 16) = v66;
                  uint64_t v72 = v51;
                  swift_beginAccess();
                  sub_2346A1DCC(v49, (uint64_t)&v86);
                  uint64_t v56 = v87;
                  uint64_t v55 = v88;
                  __swift_project_boxed_opaque_existential_1(&v86, v87);
                  long long v57 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
                  uint64_t v58 = v55;
                  float32x2_t v36 = v67;
                  v57(v56, v58);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
                  unint64_t v37 = v74;
                  sub_2347ED980();
                  v72(&v85, 0);
                }
                double v6 = v73;
                unint64_t v38 = v75;
                swift_release();
                v47(v37, v48);
              }
              else
              {
                swift_bridgeObjectRelease();
                long long v39 = *v83;
                uint64_t v40 = v84;
                (*v83)(v6, v84);
                v39(v37, v40);
              }
              v35 += v80;
              --v33;
              long long v34 = v82;
              if (!v33)
              {
                long long v22 = v6;
                v79(v38, 1, 1, v84);
                break;
              }
            }
          }
          else
          {
            long long v22 = v6;
            long long v23 = *v82;
            swift_bridgeObjectRetain();
            v23(v75, 1, 1, v84);
          }
          swift_bridgeObjectRelease();
          a1 = v65;
          unint64_t v15 = v64;
          uint64_t v16 = v63;
          int64_t v20 = v62;
          int64_t v21 = v70;
          unint64_t v19 = v69;
          double v6 = v22;
        }
      }
    }
    int64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v26 >= v20) {
      goto LABEL_39;
    }
    unint64_t v27 = *(void *)(v16 + 8 * v26);
    ++v21;
    if (!v27)
    {
      int64_t v21 = v26 + 1;
      if (v26 + 1 >= v20) {
        goto LABEL_39;
      }
      unint64_t v27 = *(void *)(v16 + 8 * v21);
      if (!v27)
      {
        int64_t v21 = v26 + 2;
        if (v26 + 2 >= v20) {
          goto LABEL_39;
        }
        unint64_t v27 = *(void *)(v16 + 8 * v21);
        if (!v27) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v19 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v21 << 6);
    if (*(void *)(v15 + 16)) {
      goto LABEL_24;
    }
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v20)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return;
  }
  unint64_t v27 = *(void *)(v16 + 8 * v28);
  if (v27)
  {
    int64_t v21 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v21 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v21 >= v20) {
      goto LABEL_39;
    }
    unint64_t v27 = *(void *)(v16 + 8 * v21);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_23470D91C()
{
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 80);
  }
  else
  {
    id v2 = objc_msgSend(self, sel_blueColor);
    uint64_t v3 = *(void *)(v0 + 24);
    type metadata accessor for DebugEntityPools();
    uint64_t v1 = swift_allocObject();
    uint64_t v4 = MEMORY[0x263F8EE80];
    *(void *)(v1 + 16) = 10;
    *(void *)(v1 + 24) = v4;
    *(_OWORD *)(v1 + 32) = xmmword_2347F4380;
    *(void *)(v1 + 48) = v2;
    *(void *)(v1 + 56) = v3;
    *(void *)(v0 + 80) = v1;
    swift_retain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_23470D9DC(uint64_t a1)
{
  uint64_t v3 = sub_2347ED5C0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD348);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v44 - v14;
  uint64_t v49 = v1;
  uint64_t v16 = sub_23470D91C();
  uint64_t v17 = swift_bridgeObjectRetain();
  sub_234710C58(v17, v16);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v47 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  unint64_t v22 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v51 = v4;
  uint64_t v52 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  uint64_t v23 = (uint64_t)v15;
  unint64_t v44 = v22 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v25 = 0;
  int64_t v50 = v22;
  uint64_t v45 = a1 + 104;
  unint64_t v46 = v22 - 5;
  uint64_t v54 = v23;
  uint64_t v48 = a1;
  while (1)
  {
    if (v21)
    {
      unint64_t v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v28 = v27 | (v25 << 6);
      goto LABEL_9;
    }
    int64_t v31 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v31 >= v50)
    {
      unint64_t v33 = v25;
    }
    else
    {
      unint64_t v32 = *(void *)(v47 + 8 * v31);
      if (v32) {
        goto LABEL_13;
      }
      unint64_t v33 = v25 + 1;
      if ((uint64_t)(v25 + 2) < v50)
      {
        unint64_t v32 = *(void *)(v47 + 8 * (v25 + 2));
        if (v32)
        {
          int64_t v31 = v25 + 2;
          goto LABEL_13;
        }
        unint64_t v33 = v25 + 2;
        if ((uint64_t)(v25 + 3) < v50)
        {
          unint64_t v32 = *(void *)(v47 + 8 * (v25 + 3));
          if (v32)
          {
            int64_t v31 = v25 + 3;
LABEL_13:
            unint64_t v21 = (v32 - 1) & v32;
            unint64_t v28 = __clz(__rbit64(v32)) + (v31 << 6);
            unint64_t v25 = v31;
LABEL_9:
            (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v12, *(void *)(a1 + 48) + *(void *)(v51 + 72) * v28, v3);
            uint64_t v29 = *(void *)(a1 + 56);
            uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD350);
            *(void *)&v12[*(int *)(v30 + 48)] = *(void *)(v29 + 8 * v28);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 0, 1, v30);
            swift_retain();
            uint64_t v23 = v54;
            goto LABEL_16;
          }
          int64_t v31 = v25 + 4;
          unint64_t v33 = v25 + 3;
          if ((uint64_t)(v25 + 4) < v50)
          {
            unint64_t v32 = *(void *)(v47 + 8 * v31);
            if (v32) {
              goto LABEL_13;
            }
            while (v46 != v25)
            {
              unint64_t v32 = *(void *)(v45 + 8 * v25++);
              if (v32)
              {
                int64_t v31 = v25 + 4;
                goto LABEL_13;
              }
            }
            unint64_t v33 = v44;
          }
        }
      }
    }
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD350);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v12, 1, 1, v34);
    unint64_t v21 = 0;
    unint64_t v25 = v33;
LABEL_16:
    sub_2346B1970((uint64_t)v12, v23, &qword_2687AD348);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD350);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v23, 1, v35) == 1) {
      return swift_release();
    }
    unint64_t v56 = v25;
    float32x2_t v36 = v12;
    uint64_t v37 = *(void *)(v23 + *(int *)(v35 + 48));
    (*v53)(v9, v23, v3);
    if (qword_2687ABCC8 != -1) {
      swift_once();
    }
    uint64_t v38 = qword_2687BDE30;
    (*v55)(v6, v9, v3);
    swift_beginAccess();
    uint64_t v39 = *(void *)(v38 + 24);
    if (!*(void *)(v39 + 16)) {
      goto LABEL_5;
    }
    swift_bridgeObjectRetain();
    unint64_t v40 = sub_2347BFA88((uint64_t)v6);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      int64_t v26 = *v52;
      (*v52)(v6, v3);
      v26(v9, v3);
      uint64_t result = swift_release();
      goto LABEL_6;
    }
    uint64_t v42 = *(void *)(*(void *)(v39 + 56) + 8 * v40);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v43 = *v52;
    (*v52)(v6, v3);
    sub_23470DF8C(v42, v37);
    swift_release();
    uint64_t v23 = v54;
    swift_release();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v43)(v9, v3);
    a1 = v48;
LABEL_6:
    uint64_t v12 = v36;
    unint64_t v25 = v56;
  }
  __break(1u);
  return result;
}

uint64_t sub_23470DF8C(uint64_t a1, uint64_t a2)
{
  sub_23470D91C();
  unint64_t v3 = sub_2346B29CC(a2);
  swift_release();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_2347EEEC0();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      MEMORY[0x237DC6CF0](i, v3);
    }
    else {
      swift_retain();
    }
    sub_2347EDF90();
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_2346B14F8(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v10 = *(void *)(sub_23470D91C() + 16);
    uint64_t result = swift_release();
    if (v10 >= 1)
    {
      unint64_t v11 = 0;
      uint64_t v12 = v9 - 1;
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          MEMORY[0x237DC6CF0](v11, v3);
        }
        else
        {
          if (v11 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_28;
          }
          swift_retain();
        }
        uint64_t v13 = swift_bridgeObjectRetain();
        uint64_t v14 = sub_2346B14F8(v13);
        uint64_t result = swift_bridgeObjectRelease();
        if (v11 >= *(void *)(v14 + 16)) {
          break;
        }
        swift_bridgeObjectRelease();
        uint64_t v15 = swift_bridgeObjectRetain();
        uint64_t v16 = sub_2346B14F8(v15);
        swift_bridgeObjectRelease();
        uint64_t v17 = swift_bridgeObjectRetain();
        uint64_t v18 = sub_2346B14F8(v17);
        swift_bridgeObjectRelease();
        unint64_t v19 = *(void *)(v18 + 16);
        uint64_t result = swift_bridgeObjectRelease();
        if (!v19) {
          goto LABEL_26;
        }
        if ((v11 + 1) % v19 >= *(void *)(v16 + 16)) {
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
        sub_2347ED650();
        sub_2347ED720();
        swift_retain();
        sub_2347EDF90();
        swift_release_n();
        if (v12 != v11)
        {
          uint64_t v20 = *(void *)(sub_23470D91C() + 16);
          uint64_t result = swift_release();
          if ((uint64_t)++v11 < v20) {
            continue;
          }
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
LABEL_22:

  return swift_bridgeObjectRelease();
}

uint64_t sub_23470E438()
{
  if (*(void *)(v0 + 88))
  {
    uint64_t v1 = *(void *)(v0 + 88);
  }
  else
  {
    id v2 = objc_msgSend(self, sel_redColor);
    uint64_t v3 = *(void *)(v0 + 24);
    type metadata accessor for DebugEntityPools();
    uint64_t v1 = swift_allocObject();
    uint64_t v4 = MEMORY[0x263F8EE80];
    *(void *)(v1 + 16) = 40;
    *(void *)(v1 + 24) = v4;
    *(_OWORD *)(v1 + 32) = xmmword_2347F43B0;
    *(void *)(v1 + 48) = v2;
    *(void *)(v1 + 56) = v3;
    *(void *)(v0 + 88) = v1;
    swift_retain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_23470E4F8(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v69 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v70 = (uint64_t)&v56 - v6;
  uint64_t v7 = sub_2347ED5C0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = v1;
  uint64_t v11 = sub_23470E438();
  uint64_t v12 = swift_bridgeObjectRetain();
  sub_234710C58(v12, v11);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v13 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(a1 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  unint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v21 = 0;
  uint64_t v65 = 0;
  unint64_t v22 = 0x2687AB000uLL;
  uint64_t v62 = v7;
  unint64_t v61 = v10;
  uint64_t v60 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v59 = a1;
  uint64_t v58 = a1 + 64;
  int64_t v57 = v17;
  unint64_t v56 = (void (**)(char *, uint64_t))(v8 + 8);
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      uint64_t v24 = (v16 - 1) & v16;
      int64_t v68 = v21;
      unint64_t v25 = v23 | (v21 << 6);
    }
    else
    {
      BOOL v26 = __OFADD__(v21, 1);
      int64_t v27 = v21 + 1;
      if (v26) {
        goto LABEL_55;
      }
      if (v27 >= v17) {
        return swift_release();
      }
      unint64_t v28 = *(void *)(v13 + 8 * v27);
      if (!v28)
      {
        int64_t v29 = v27 + 1;
        if (v27 + 1 >= v17) {
          return swift_release();
        }
        unint64_t v28 = *(void *)(v13 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v27 + 2;
          if (v27 + 2 >= v17) {
            return swift_release();
          }
          unint64_t v28 = *(void *)(v13 + 8 * v29);
          if (!v28)
          {
            int64_t v29 = v27 + 3;
            if (v27 + 3 >= v17) {
              return swift_release();
            }
            unint64_t v28 = *(void *)(v13 + 8 * v29);
            if (!v28)
            {
              int64_t v29 = v27 + 4;
              if (v27 + 4 >= v17) {
                return swift_release();
              }
              unint64_t v28 = *(void *)(v13 + 8 * v29);
              if (!v28)
              {
                while (1)
                {
                  int64_t v27 = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    goto LABEL_56;
                  }
                  if (v27 >= v17) {
                    return swift_release();
                  }
                  unint64_t v28 = *(void *)(v13 + 8 * v27);
                  ++v29;
                  if (v28) {
                    goto LABEL_21;
                  }
                }
              }
            }
          }
        }
        int64_t v27 = v29;
      }
LABEL_21:
      uint64_t v24 = (v28 - 1) & v28;
      int64_t v68 = v27;
      unint64_t v25 = __clz(__rbit64(v28)) + (v27 << 6);
    }
    unint64_t v67 = v24;
    uint64_t v30 = *(void *)(*(void *)(a1 + 56) + 8 * v25);
    uint64_t v31 = *(void *)(v22 + 3272);
    swift_retain();
    if (v31 != -1) {
      swift_once();
    }
    uint64_t v32 = qword_2687BDE30;
    uint64_t v66 = v30;
    (*v18)(v10, v30 + qword_2687BDFA8, v7);
    swift_beginAccess();
    uint64_t v33 = *(void *)(v32 + 24);
    if (!*(void *)(v33 + 16)) {
      goto LABEL_5;
    }
    swift_bridgeObjectRetain();
    unint64_t v34 = sub_2347BFA88((uint64_t)v10);
    if ((v35 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      (*v19)(v10, v7);
      uint64_t result = swift_release();
      goto LABEL_6;
    }
    uint64_t v36 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
    swift_retain();
    swift_bridgeObjectRelease();
    (*v19)(v10, v7);
    if (*(unsigned char *)(v36 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 2)
    {
      swift_beginAccess();
      swift_retain();
      uint64_t v37 = swift_bridgeObjectRetain();
      uint64_t v38 = v65;
      sub_23478E650(v37, v36);
      unint64_t v40 = v39;
      uint64_t v65 = v38;
      swift_release();
      unint64_t v41 = MEMORY[0x263F8EE78];
    }
    else
    {
      unint64_t v41 = MEMORY[0x263F8EE78];
      unint64_t v40 = MEMORY[0x263F8EE78];
    }
    unint64_t v75 = v41;
    if (v40 >> 62)
    {
      swift_retain();
      uint64_t v42 = sub_2347EEEC0();
    }
    else
    {
      uint64_t v42 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
    }
    uint64_t v74 = v36 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
    uint64_t result = swift_beginAccess();
    if (v42) {
      break;
    }
    unint64_t v53 = v41;
LABEL_46:
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    uint64_t v54 = v65;
    unint64_t v55 = sub_234711300(v53, v36);
    uint64_t v65 = v54;
    swift_release();
    swift_release();
    sub_23470EBFC(v55, v66);
    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v62;
    uint64_t v10 = v61;
    uint64_t v18 = v60;
    unint64_t v22 = 0x2687AB000;
LABEL_6:
    unint64_t v16 = v67;
    int64_t v21 = v68;
  }
  uint64_t v64 = v36;
  unint64_t v43 = 0;
  uint64_t v72 = v40 & 0xFFFFFFFFFFFFFF8;
  unint64_t v73 = v40 & 0xC000000000000001;
  uint64_t v71 = v42;
  while (v73)
  {
    uint64_t result = MEMORY[0x237DC6CF0](v43, v40);
    uint64_t v44 = result;
    unint64_t v45 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      goto LABEL_54;
    }
LABEL_38:
    unint64_t v46 = v40;
    uint64_t v47 = v70;
    sub_2346A7BCC(v74, v70, (uint64_t *)&unk_2687AE190);
    uint64_t v48 = type metadata accessor for CapturedRoom.Surface.Curve(0);
    uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48);
    int v50 = v49(v47, 1, v48);
    sub_2346A7C30(v47, (uint64_t *)&unk_2687AE190);
    if (v50 == 1
      || (uint64_t v51 = v69,
          sub_2346A7BCC(v44 + OBJC_IVAR____TtC8RoomPlan8ScanItem_rawCurve, v69, (uint64_t *)&unk_2687AE190),
          int v52 = v49(v51, 1, v48),
          sub_2346A7C30(v51, (uint64_t *)&unk_2687AE190),
          v52 == 1))
    {
      uint64_t result = swift_release();
    }
    else
    {
      sub_2347EEDF0();
      sub_2347EEE20();
      sub_2347EEE30();
      uint64_t result = sub_2347EEE00();
    }
    unint64_t v40 = v46;
    ++v43;
    if (v45 == v71)
    {
      unint64_t v53 = v75;
      a1 = v59;
      uint64_t v13 = v58;
      int64_t v17 = v57;
      unint64_t v19 = v56;
      uint64_t v36 = v64;
      goto LABEL_46;
    }
  }
  if (v43 < *(void *)(v72 + 16))
  {
    uint64_t v44 = *(void *)(v40 + 8 * v43 + 32);
    uint64_t result = swift_retain();
    unint64_t v45 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      goto LABEL_54;
    }
    goto LABEL_38;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_23470EBFC(unint64_t a1, uint64_t a2)
{
  unint64_t v69 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CapturedRoom.Surface.Curve(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (float *)((char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = sub_2347ED5C0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23470E438();
  uint64_t v76 = sub_2346B29CC(a2);
  swift_release();
  if (qword_2687ABCC8 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_2687BDE30;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2 + qword_2687BDFA8, v10);
  swift_beginAccess();
  uint64_t v15 = *(void *)(v14 + 24);
  if (!*(void *)(v15 + 16)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_2347BFA88((uint64_t)v13);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v19 = v18;
  uint64_t v20 = v18 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
  swift_beginAccess();
  sub_2346A7BCC(v20, (uint64_t)v5, (uint64_t *)&unk_2687AE190);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return sub_2346A7C30((uint64_t)v5, (uint64_t *)&unk_2687AE190);
  }
  uint64_t v22 = sub_2346B19D4((uint64_t)v5, (uint64_t)v9);
  *(double *)v23.i64 = MEMORY[0x237DC6930](v22, *(__n128 *)(v18 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition), *(__n128 *)(v18 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation), (__n128)xmmword_2347F1A00);
  float32x4_t v74 = v24;
  float32x4_t v75 = v23;
  float32x4_t v72 = v26;
  float32x4_t v73 = v25;
  unint64_t v27 = v69;
  if (v69 >> 62) {
    goto LABEL_48;
  }
  uint64_t v28 = *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v28)
  {
LABEL_11:
    v60[1] = v19;
    *(void *)&long long v29 = *(void *)v9;
    float v30 = v9[2];
    long long v71 = v29;
    float v31 = *((float *)&v29 + 1);
    unint64_t v63 = v27 & 0xC000000000000001;
    unint64_t v32 = v76 & 0xC000000000000001;
    uint64_t v64 = v76 & 0xFFFFFFFFFFFFFF8;
    uint64_t v19 = v76 + 56;
    uint64_t v33 = 4;
    uint64_t v34 = 3;
    uint64_t v62 = v9;
    unint64_t v61 = (char *)v28;
    do
    {
      uint64_t v35 = v33 - 4;
      if (v63)
      {
        uint64_t v36 = (float *)MEMORY[0x237DC6CF0](v33 - 4, v27);
        uint64_t v9 = (float *)(v33 - 3);
        if (__OFADD__(v35, 1)) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v36 = *(float **)(v27 + 8 * v33);
        swift_retain();
        uint64_t v9 = (float *)(v33 - 3);
        if (__OFADD__(v35, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          swift_bridgeObjectRetain();
          uint64_t v28 = sub_2347EEEC0();
          if (!v28) {
            break;
          }
          goto LABEL_11;
        }
      }
      float v38 = v36[4];
      v37.f32[0] = v36[6];
      float32x4_t v70 = v37;
      __float2 v39 = __sincosf_stret(v38);
      if (v32)
      {
        MEMORY[0x237DC6CF0](v34 - 3, v76);
      }
      else
      {
        if ((unint64_t)(v34 - 3) >= *(void *)(v64 + 16)) {
          goto LABEL_44;
        }
        swift_retain();
      }
      float32x4_t v40 = vaddq_f32(v72, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v75, *(float *)&v71 + (float)(v30 * v39.__cosval)), v74, v70.f32[0]), v73, v31 + (float)(v30 * v39.__sinval)));
      v40.i32[3] = v68.i32[3];
      float32x4_t v70 = v40;
      sub_2347ED650();
      sub_2347ED780();
      swift_retain();
      sub_2347EDF90();
      swift_release_n();
      unint64_t v27 = v34 - 2;
      uint64_t v41 = *(void *)(sub_23470E438() + 16);
      swift_release();
      if (v34 - 2 >= v41) {
        goto LABEL_40;
      }
      float v43 = v36[5];
      v42.f32[0] = v36[6];
      float32x4_t v68 = v42;
      __float2 v44 = __sincosf_stret(v43);
      if (v32)
      {
        MEMORY[0x237DC6CF0](v34 - 2, v76);
      }
      else
      {
        if (v27 >= *(void *)(v64 + 16)) {
          goto LABEL_45;
        }
        swift_retain();
      }
      float32x4_t v45 = vaddq_f32(v72, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v75, *(float *)&v71 + (float)(v30 * v44.__cosval)), v74, v68.f32[0]), v73, v31 + (float)(v30 * v44.__sinval)));
      v45.i32[3] = v67.i32[3];
      float32x4_t v67 = v45;
      sub_2347ED780();
      swift_retain();
      sub_2347EDF90();
      swift_release_n();
      unint64_t v27 = v34 - 1;
      uint64_t v46 = *(void *)(sub_23470E438() + 16);
      swift_release();
      if (v34 - 1 >= v46) {
        goto LABEL_40;
      }
      float v48 = v36[4];
      v47.f32[0] = v36[7];
      float32x4_t v68 = v47;
      __float2 v49 = __sincosf_stret(v48);
      if (v32)
      {
        MEMORY[0x237DC6CF0](v34 - 1, v76);
      }
      else
      {
        if (v27 >= *(void *)(v64 + 16)) {
          goto LABEL_46;
        }
        swift_retain();
      }
      float32x4_t v50 = vaddq_f32(v72, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v75, *(float *)&v71 + (float)(v30 * v49.__cosval)), v74, v68.f32[0]), v73, v31 + (float)(v30 * v49.__sinval)));
      v50.i32[3] = v66.i32[3];
      float32x4_t v68 = v50;
      sub_2347ED780();
      swift_retain();
      sub_2347EDF90();
      swift_release_n();
      uint64_t v51 = *(void *)(sub_23470E438() + 16);
      swift_release();
      if (v34 >= v51)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        swift_release();
LABEL_42:
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v59 = (uint64_t)v62;
        return sub_2346B2844(v59);
      }
      float v53 = v36[5];
      v52.f32[0] = v36[7];
      float32x4_t v66 = v52;
      __float2 v54 = __sincosf_stret(v53);
      if (v32)
      {
        MEMORY[0x237DC6CF0](v34, v76);
      }
      else
      {
        if ((unint64_t)v34 >= *(void *)(v64 + 16)) {
          goto LABEL_47;
        }
        swift_retain();
      }
      float32x4_t v55 = vaddq_f32(v72, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v75, *(float *)&v71 + (float)(v30 * v54.__cosval)), v74, v66.f32[0]), v73, v31 + (float)(v30 * v54.__sinval)));
      v55.i32[3] = v65.i32[3];
      float32x4_t v65 = v55;
      sub_2347ED780();
      swift_retain();
      sub_2347EDF90();
      swift_release_n();
      uint64_t v56 = sub_23470E438();
      swift_release();
      uint64_t v57 = *(void *)(v56 + 16);
      swift_release();
      if (v34 + 1 >= v57)
      {
        swift_bridgeObjectRelease();
        goto LABEL_42;
      }
      ++v33;
      v34 += 4;
      v19 += 32;
      float32x4_t v66 = v68;
      float32x4_t v68 = v70;
      BOOL v58 = v9 == (float *)v61;
      uint64_t v9 = v62;
      unint64_t v27 = v69;
    }
    while (!v58);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v59 = (uint64_t)v9;
  return sub_2346B2844(v59);
}

uint64_t sub_23470F4EC()
{
  if (*(void *)(v0 + 96))
  {
    uint64_t v1 = *(void *)(v0 + 96);
  }
  else
  {
    id v2 = objc_msgSend(self, sel_whiteColor);
    uint64_t v3 = *(void *)(v0 + 24);
    type metadata accessor for DebugEntityPools();
    uint64_t v1 = swift_allocObject();
    uint64_t v4 = MEMORY[0x263F8EE80];
    *(void *)(v1 + 16) = 20;
    *(void *)(v1 + 24) = v4;
    *(_OWORD *)(v1 + 32) = xmmword_2347F43C0;
    *(void *)(v1 + 48) = v2;
    *(void *)(v1 + 56) = v3;
    *(void *)(v0 + 96) = v1;
    swift_retain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_23470F5AC(uint64_t a1)
{
  uint64_t v3 = sub_2347ED5C0();
  uint64_t v4 = *(char **)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v59 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = (char *)&v50 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD320);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v60 = (char *)&v50 - v12;
  uint64_t v13 = sub_23470F4EC();
  uint64_t v14 = swift_bridgeObjectRetain();
  sub_234710C58(v14, v13);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_2687ABCC8 != -1) {
LABEL_47:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_234710304(v15);
  swift_bridgeObjectRelease();
  float v53 = v1;
  uint64_t v17 = sub_23470F4EC();
  sub_234710C58(v16, v17);
  swift_release();
  swift_release();
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v54 = a1 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  unint64_t v22 = (unint64_t)(v19 + 63) >> 6;
  BOOL v58 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  unint64_t v61 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v62 = (void (**)(char *, char *, uint64_t))(v4 + 16);
  unint64_t v50 = v22 - 1;
  swift_bridgeObjectRetain();
  unint64_t v23 = 0;
  int64_t v57 = v22;
  unint64_t v52 = v22 - 5;
  uint64_t v51 = a1 + 104;
  float32x4_t v24 = v4;
  float32x4_t v55 = v4;
  uint64_t v56 = a1;
  while (1)
  {
    if (v21)
    {
      unint64_t v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v63 = v23;
      unint64_t v27 = v26 | (v23 << 6);
      uint64_t v28 = (uint64_t)v60;
LABEL_10:
      (*((void (**)(char *, unint64_t, uint64_t))v24 + 2))(v10, *(void *)(a1 + 48) + *((void *)v24 + 9) * v27, v3);
      uint64_t v29 = *(void *)(a1 + 56);
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD328);
      *(void *)&v10[*(int *)(v30 + 48)] = *(void *)(v29 + 8 * v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v10, 0, 1, v30);
      swift_retain();
      goto LABEL_17;
    }
    int64_t v31 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v31 >= v57)
    {
      unint64_t v63 = v23;
      uint64_t v28 = (uint64_t)v60;
    }
    else
    {
      unint64_t v32 = *(void *)(v54 + 8 * v31);
      uint64_t v28 = (uint64_t)v60;
      if (v32) {
        goto LABEL_14;
      }
      if ((uint64_t)(v23 + 2) >= v57)
      {
        unint64_t v63 = v23 + 1;
      }
      else
      {
        unint64_t v32 = *(void *)(v54 + 8 * (v23 + 2));
        if (v32)
        {
          int64_t v31 = v23 + 2;
LABEL_14:
          unint64_t v21 = (v32 - 1) & v32;
          unint64_t v27 = __clz(__rbit64(v32)) + (v31 << 6);
          unint64_t v63 = v31;
          goto LABEL_10;
        }
        if ((uint64_t)(v23 + 3) >= v57)
        {
          unint64_t v63 = v23 + 2;
        }
        else
        {
          unint64_t v32 = *(void *)(v54 + 8 * (v23 + 3));
          if (v32)
          {
            int64_t v31 = v23 + 3;
            goto LABEL_14;
          }
          int64_t v31 = v23 + 4;
          if ((uint64_t)(v23 + 4) >= v57)
          {
            unint64_t v63 = v23 + 3;
          }
          else
          {
            unint64_t v32 = *(void *)(v54 + 8 * v31);
            if (v32) {
              goto LABEL_14;
            }
            while (v52 != v23)
            {
              unint64_t v32 = *(void *)(v51 + 8 * v23++);
              if (v32)
              {
                int64_t v31 = v23 + 4;
                goto LABEL_14;
              }
            }
            unint64_t v63 = v50;
          }
        }
      }
    }
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD328);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v10, 1, 1, v33);
    unint64_t v21 = 0;
LABEL_17:
    sub_2346B1970((uint64_t)v10, v28, &qword_2687AD320);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD328);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v28, 1, v34) == 1) {
      return swift_release();
    }
    uint64_t v4 = v10;
    uint64_t v35 = v28;
    uint64_t v36 = *(void *)(v28 + *(int *)(v34 + 48));
    float32x4_t v37 = v64;
    (*v58)(v64, v35, v3);
    uint64_t v38 = qword_2687BDE30;
    uint64_t v39 = (uint64_t)v59;
    (*v62)(v59, v37, v3);
    swift_beginAccess();
    uint64_t v40 = *(void *)(v38 + 24);
    if (!*(void *)(v40 + 16)) {
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    unint64_t v41 = sub_2347BFA88(v39);
    uint64_t v42 = v39;
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v1 = v61;
      float32x4_t v25 = *v61;
      (*v61)(v39, v3);
      v25((uint64_t)v64, v3);
      swift_release();
      goto LABEL_7;
    }
    uint64_t v44 = *(void *)(*(void *)(v40 + 56) + 8 * v41);
    swift_retain();
    swift_bridgeObjectRelease();
    float32x4_t v45 = *v61;
    (*v61)(v42, v3);
    if (*(unsigned char *)(v44 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3)
    {
      swift_beginAccess();
      swift_retain();
      uint64_t v46 = swift_bridgeObjectRetain();
      sub_23471162C(v46, v44);
      uint64_t v1 = v47;
      swift_release();
    }
    else
    {
      uint64_t v1 = (void (**)(uint64_t, uint64_t))MEMORY[0x263F8EE78];
    }
    if ((unint64_t)v1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_2347EEEC0();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v48 = *(void *)(((unint64_t)v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v48 < 1)
    {
      v45((uint64_t)v64, v3);
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v1 = v53;
      sub_23470FCE0(v44, v36);
      swift_release();
      swift_release();
      v45((uint64_t)v64, v3);
    }
    float32x4_t v24 = v55;
    a1 = v56;
LABEL_7:
    uint64_t v10 = v4;
    unint64_t v23 = v63;
  }
}

uint64_t sub_23470FCE0(uint64_t a1, uint64_t a2)
{
  sub_23470F4EC();
  unint64_t v3 = sub_2346B29CC(a2);
  swift_release();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_2347EEEC0();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      MEMORY[0x237DC6CF0](i, v3);
    }
    else {
      swift_retain();
    }
    sub_2347EDF90();
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_234792E3C();
  uint64_t v8 = *((void *)v7 + 2);
  if (v8)
  {
    uint64_t v9 = *(void *)(sub_23470F4EC() + 16);
    uint64_t result = swift_release();
    if (v9 >= 1)
    {
      unint64_t v10 = 0;
      uint64_t v11 = v7 + 3;
      while (v10 < *((void *)v7 + 2))
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          MEMORY[0x237DC6CF0](v10, v3);
        }
        else
        {
          if (v10 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_24;
          }
          swift_retain();
        }
        sub_2347ED650();
        sub_2347ED720();
        swift_retain();
        sub_2347EDF90();
        swift_release_n();
        if (v8 - 1 != v10)
        {
          uint64_t v12 = *(void *)(sub_23470F4EC() + 16);
          uint64_t result = swift_release();
          v11 += 2;
          if ((uint64_t)++v10 < v12) {
            continue;
          }
        }
        goto LABEL_20;
      }
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
LABEL_20:
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2347100D4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_23471013C()
{
  sub_2347100D4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DebugDollHouseManager()
{
  return self;
}

ValueMetadata *type metadata accessor for DollHouseDebugOptions()
{
  return &type metadata for DollHouseDebugOptions;
}

unint64_t sub_2347101A8()
{
  unint64_t result = qword_2687AD300;
  if (!qword_2687AD300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD300);
  }
  return result;
}

unint64_t sub_234710200()
{
  unint64_t result = qword_2687AD308;
  if (!qword_2687AD308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD308);
  }
  return result;
}

unint64_t sub_234710258()
{
  unint64_t result = qword_2687AD310;
  if (!qword_2687AD310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD310);
  }
  return result;
}

unint64_t sub_2347102B0()
{
  unint64_t result = qword_2687AD318;
  if (!qword_2687AD318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD318);
  }
  return result;
}

uint64_t sub_234710304(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    sub_23471045C((void *)((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    sub_23471045C((unint64_t *)v7, v4, v2);
    uint64_t v2 = v8;
    MEMORY[0x237DC8070](v7, -1, -1);
  }
  return v2;
}

void sub_23471045C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a2;
  int64_t v31 = a1;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD340);
  MEMORY[0x270FA5388](v38);
  uint64_t v41 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_2347ED5C0();
  v7.n128_f64[0] = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v40 = (void *)a3;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v32 = 0;
  uint64_t v33 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v36 = v6 + 16;
  uint64_t v37 = v6;
  int64_t v34 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v35 = (void (**)(char *, uint64_t))(v6 + 8);
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_17;
    }
    BOOL v17 = __OFADD__(v10++, 1);
    if (v17)
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v10 >= v34) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v33 + 8 * v10);
    if (!v18) {
      break;
    }
LABEL_16:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_17:
    uint64_t v20 = v40;
    unint64_t v21 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v37 + 16);
    v21(v9, v40[6] + *(void *)(v37 + 72) * v16, v5, v7);
    uint64_t v22 = *(void *)(v20[7] + 8 * v16);
    uint64_t v23 = v41;
    ((void (*)(uint64_t, char *, uint64_t))v21)(v41, v9, v5);
    *(void *)(v23 + *(int *)(v38 + 48)) = v22;
    if (*(unsigned char *)(v22 + OBJC_IVAR____TtC8RoomPlan8ScanItem_type) == 3)
    {
      uint64_t v24 = qword_2687ABCC8;
      swift_retain_n();
      if (v24 != -1) {
        swift_once();
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v25 = swift_bridgeObjectRetain();
      uint64_t v26 = v39;
      sub_23471162C(v25, v22);
      unint64_t v28 = v27;
      uint64_t v39 = v26;
      swift_release();
      if (v28 >> 62)
      {
LABEL_21:
        swift_bridgeObjectRetain();
        uint64_t v29 = sub_2347EEEC0();
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    else
    {
      swift_retain_n();
      unint64_t v28 = MEMORY[0x263F8EE78];
      if (MEMORY[0x263F8EE78] >> 62) {
        goto LABEL_21;
      }
    }
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_24:
    swift_bridgeObjectRelease();
    sub_2346A7C30(v41, &qword_2687AD340);
    swift_release();
    (*v35)(v9, v5);
    if (v29 >= 1)
    {
      *(unint64_t *)((char *)v31 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      BOOL v17 = __OFADD__(v32++, 1);
      if (v17) {
        goto LABEL_35;
      }
    }
  }
  int64_t v19 = v10 + 1;
  if (v10 + 1 >= v34) {
    goto LABEL_32;
  }
  unint64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v19 = v10 + 2;
  if (v10 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v19 = v10 + 3;
  if (v10 + 3 >= v34)
  {
LABEL_32:
    sub_234710880(v31, v30, v32, v40);
    return;
  }
  unint64_t v18 = *(void *)(v33 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v10 = v19;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v34) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v33 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_16;
    }
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t sub_234710880(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = sub_2347ED5C0();
  uint64_t v42 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v46 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2687AF060);
  uint64_t result = sub_2347EEF00();
  uint64_t v12 = result;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = a4;
  uint64_t v40 = v42 + 16;
  uint64_t v45 = v42 + 32;
  uint64_t v15 = result + 64;
  uint64_t v16 = v47;
  while (1)
  {
    if (v13)
    {
      uint64_t v43 = (v13 - 1) & v13;
      uint64_t v44 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v38) {
        return v12;
      }
      unint64_t v19 = v37[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v38) {
          return v12;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v38) {
            return v12;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v38) {
              return v12;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v38) {
                  return v12;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v43 = (v19 - 1) & v19;
      uint64_t v44 = v20;
      unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    uint64_t v22 = v41;
    uint64_t v23 = v42;
    uint64_t v24 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v24 * v17, v16);
    uint64_t v25 = *(void *)(a4[7] + 8 * v17);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v46, v22, v16);
    sub_234711BCC(&qword_2687ACDD0, MEMORY[0x263F07508]);
    swift_retain();
    uint64_t result = sub_2347EE530();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v12 + 48) + v30 * v24, v46, v47);
    *(void *)(*(void *)(v12 + 56) + 8 * v30) = v25;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v39;
    unint64_t v13 = v43;
    uint64_t v14 = v44;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_234710C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2347ED5C0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  __n128 v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD330);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v49 - v12;
  uint64_t v14 = (uint64_t *)(a2 + 24);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v53 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  unint64_t v20 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v59 = v5 + 16;
  unint64_t v61 = (uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v62 = v5;
  unint64_t v63 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v50 = v20 - 1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v22 = 0;
  int64_t v54 = v20;
  uint64_t v60 = v15;
  uint64_t v51 = v15 + 120;
  unint64_t v52 = v20 - 7;
  uint64_t v56 = v4;
  uint64_t v57 = a1;
  float32x4_t v55 = v13;
  BOOL v58 = v14;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v24 = (v19 - 1) & v19;
  unint64_t v64 = v22;
  unint64_t v25 = __clz(__rbit64(v19)) | (v22 << 6);
LABEL_8:
  uint64_t v26 = v60;
  (*(void (**)(char *, unint64_t, uint64_t))(v62 + 16))(v10, *(void *)(v60 + 48) + *(void *)(v62 + 72) * v25, v4);
  uint64_t v27 = *(void *)(v26 + 56);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD338);
  *(void *)&v10[*(int *)(v28 + 48)] = *(void *)(v27 + 8 * v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v10, 0, 1, v28);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_2346B1970((uint64_t)v10, (uint64_t)v13, &qword_2687AD330);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD338);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v13, 1, v33) == 1)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    unint64_t v34 = *(void *)&v13[*(int *)(v33 + 48)];
    uint64_t result = (*v61)(v7, v13, v4);
    if (*(void *)(a1 + 16))
    {
      uint64_t result = sub_2347BFA88((uint64_t)v7);
      if (v35)
      {
        (*v63)(v7, v4);
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v22 = v64;
        unint64_t v19 = v24;
        if (v24) {
          goto LABEL_7;
        }
        goto LABEL_9;
      }
    }
    uint64_t v36 = v10;
    uint64_t v37 = (uint64_t)v7;
    uint64_t v38 = v58;
    unint64_t v19 = v24;
    if (v34 >> 62) {
      break;
    }
    uint64_t v39 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v39) {
      goto LABEL_22;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    uint64_t v43 = v38;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __n128 v7 = (char *)v37;
    unint64_t v44 = sub_2347BFA88(v37);
    char v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v10 = v36;
    unint64_t v13 = v55;
    uint64_t v4 = v56;
    if (v46)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v48 = *v43;
      uint64_t v65 = *v43;
      *uint64_t v43 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_2347D54E0();
        uint64_t v48 = v65;
      }
      (*(void (**)(unint64_t, uint64_t))(v62 + 8))(*(void *)(v48 + 48) + *(void *)(v62 + 72) * v44, v4);
      uint64_t v23 = v65;
      sub_2347D3178(v44, v65);
      *uint64_t v43 = v23;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v63)(v7, v4);
    a1 = v57;
    unint64_t v22 = v64;
    if (v19) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v29 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_50;
    }
    if (v29 >= v54)
    {
      unint64_t v31 = v22;
    }
    else
    {
      unint64_t v30 = *(void *)(v53 + 8 * v29);
      if (v30) {
        goto LABEL_12;
      }
      int64_t v41 = v22 + 2;
      unint64_t v31 = v22 + 1;
      if ((uint64_t)(v22 + 2) < v54)
      {
        unint64_t v30 = *(void *)(v53 + 8 * v41);
        if (v30) {
          goto LABEL_30;
        }
        int64_t v42 = v22 + 3;
        unint64_t v31 = v22 + 2;
        if ((uint64_t)(v22 + 3) < v54)
        {
          unint64_t v30 = *(void *)(v53 + 8 * v42);
          if (v30) {
            goto LABEL_33;
          }
          int64_t v41 = v22 + 4;
          unint64_t v31 = v22 + 3;
          if ((uint64_t)(v22 + 4) < v54)
          {
            unint64_t v30 = *(void *)(v53 + 8 * v41);
            if (v30)
            {
LABEL_30:
              int64_t v29 = v41;
LABEL_12:
              uint64_t v24 = (v30 - 1) & v30;
              unint64_t v25 = __clz(__rbit64(v30)) + (v29 << 6);
              unint64_t v64 = v29;
              goto LABEL_8;
            }
            int64_t v42 = v22 + 5;
            unint64_t v31 = v22 + 4;
            if ((uint64_t)(v22 + 5) < v54)
            {
              unint64_t v30 = *(void *)(v53 + 8 * v42);
              if (v30)
              {
LABEL_33:
                int64_t v29 = v42;
                goto LABEL_12;
              }
              int64_t v29 = v22 + 6;
              unint64_t v31 = v22 + 5;
              if ((uint64_t)(v22 + 6) < v54)
              {
                unint64_t v30 = *(void *)(v53 + 8 * v29);
                if (v30) {
                  goto LABEL_12;
                }
                while (v52 != v22)
                {
                  unint64_t v30 = *(void *)(v51 + 8 * v22++);
                  if (v30)
                  {
                    int64_t v29 = v22 + 6;
                    goto LABEL_12;
                  }
                }
                unint64_t v31 = v50;
              }
            }
          }
        }
      }
    }
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687AD338);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v10, 1, 1, v32);
    uint64_t v24 = 0;
    unint64_t v64 = v31;
  }
  swift_bridgeObjectRetain();
  uint64_t v39 = sub_2347EEEC0();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v39) {
    goto LABEL_44;
  }
LABEL_22:
  if (v39 >= 1)
  {
    uint64_t v40 = 0;
    do
    {
      if ((v34 & 0xC000000000000001) != 0) {
        MEMORY[0x237DC6CF0](v40, v34);
      }
      else {
        swift_retain();
      }
      ++v40;
      sub_2347ED650();
      sub_2347ED6F0();
      swift_release();
    }
    while (v39 != v40);
    goto LABEL_44;
  }
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_234711300(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AE190);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v29 - v10;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x263F8EE78];
    if (!v12) {
      break;
    }
    uint64_t v43 = MEMORY[0x263F8EE78];
    uint64_t result = sub_2347EEE10();
    if (v12 < 0)
    {
      __break(1u);
      return result;
    }
    v29[1] = v3;
    unint64_t v33 = a1 & 0xC000000000000001;
    uint64_t v32 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition;
    uint64_t v31 = OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation;
    uint64_t v30 = a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
    swift_beginAccess();
    uint64_t v14 = 0;
    __n128 v42 = (__n128)xmmword_2347F1A00;
    uint64_t v3 = a1;
    while (v12 != v14)
    {
      if (v33)
      {
        uint64_t v15 = MEMORY[0x237DC6CF0](v14, a1);
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 8 * v14 + 32);
        swift_retain();
      }
      ++v14;
      *(double *)v16.i64 = MEMORY[0x237DC6930](*(__n128 *)(v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhousePosition), *(__n128 *)(v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseOrientation), v42);
      float32x4_t v40 = v17;
      float32x4_t v41 = v16;
      float32x4_t v38 = v19;
      float32x4_t v39 = v18;
      uint64_t v20 = v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseCurve;
      swift_beginAccess();
      uint64_t v21 = sub_2346A7BCC(v20, (uint64_t)v11, (uint64_t *)&unk_2687AE190);
      float v22 = *(float *)(v15 + OBJC_IVAR____TtC8RoomPlan8ScanItem_dollhouseDimensions + 4);
      *(double *)v44.columns[0].i64 = MEMORY[0x237DC6930](v21, *(__n128 *)(a2 + v32), *(__n128 *)(a2 + v31), v42);
      simd_float4x4 v45 = __invert_f4(v44);
      float32x4_t v36 = (float32x4_t)v45.columns[1];
      float32x4_t v37 = (float32x4_t)v45.columns[0];
      float32x4_t v35 = (float32x4_t)v45.columns[2];
      float32x4_t v34 = (float32x4_t)v45.columns[3];
      sub_2346A7BCC(v30, (uint64_t)v8, (uint64_t *)&unk_2687AE190);
      sub_2346B20D0((uint64_t)v11, (uint64_t)v8, v41, v40, v39, v38, v22, v37, v36, v35, v23, v24, v25, v26, v27, v28, v34);
      swift_release();
      sub_2347EEDF0();
      sub_2347EEE20();
      sub_2347EEE30();
      sub_2347EEE00();
      a1 = v3;
      if (v12 == v14) {
        return v43;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_2347EEEC0();
    swift_bridgeObjectRelease();
  }
  return result;
}

void sub_23471162C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2347ED5C0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  float32x4_t v35 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2687ACD38);
  MEMORY[0x270FA5388](v46);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687AEB70);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v39 = (uint64_t)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v33 - v13;
  int64_t v15 = 0;
  uint64_t v47 = a1;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v49 = MEMORY[0x263F8EE78];
  uint64_t v40 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  simd_float4x4 v44 = (void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  uint64_t v45 = a2 + OBJC_IVAR____TtC8RoomPlan8ScanItem_uuid;
  uint64_t v43 = (void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
  int64_t v41 = (unint64_t)(v17 + 63) >> 6;
  __n128 v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  float32x4_t v34 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  float32x4_t v37 = v8;
  float32x4_t v38 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  if ((v18 & v16) != 0) {
    goto LABEL_8;
  }
LABEL_9:
  int64_t v22 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v22 < v41)
    {
      unint64_t v23 = *(void *)(v40 + 8 * v22);
      int64_t v24 = v15 + 1;
      if (v23) {
        goto LABEL_24;
      }
      int64_t v24 = v15 + 2;
      if (v15 + 2 >= v41) {
        goto LABEL_32;
      }
      unint64_t v23 = *(void *)(v40 + 8 * v24);
      if (v23) {
        goto LABEL_24;
      }
      int64_t v24 = v15 + 3;
      if (v15 + 3 >= v41) {
        goto LABEL_32;
      }
      unint64_t v23 = *(void *)(v40 + 8 * v24);
      if (v23) {
        goto LABEL_24;
      }
      int64_t v24 = v15 + 4;
      if (v15 + 4 >= v41) {
        goto LABEL_32;
      }
      unint64_t v23 = *(void *)(v40 + 8 * v24);
      if (v23)
      {
LABEL_24:
        unint64_t v19 = (v23 - 1) & v23;
        int64_t v48 = v24;
        for (unint64_t i = __clz(__rbit64(v23)) + (v24 << 6); ; unint64_t i = v20 | (v15 << 6))
        {
          uint64_t v26 = *(void *)(*(void *)(v47 + 56) + 8 * i) + OBJC_IVAR____TtC8RoomPlan8ScanItem_parentUUID;
          (*v44)(v14, v45, v4, v12);
          (*v43)(v14, 0, 1, v4);
          uint64_t v27 = (uint64_t)&v8[*(int *)(v46 + 48)];
          sub_2346A7BCC(v26, (uint64_t)v8, (uint64_t *)&unk_2687AEB70);
          sub_2346A7BCC((uint64_t)v14, v27, (uint64_t *)&unk_2687AEB70);
          uint64_t v28 = *v42;
          if ((*v42)(v8, 1, v4) == 1)
          {
            swift_retain();
            sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
            if (v28((char *)v27, 1, v4) != 1) {
              goto LABEL_6;
            }
            sub_2346A7C30((uint64_t)v8, (uint64_t *)&unk_2687AEB70);
          }
          else
          {
            uint64_t v29 = (uint64_t)v8;
            uint64_t v30 = v39;
            sub_2346A7BCC(v29, v39, (uint64_t *)&unk_2687AEB70);
            if (v28((char *)v27, 1, v4) == 1)
            {
              swift_retain();
              sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
              (*v38)(v30, v4);
              uint64_t v8 = v37;
LABEL_6:
              sub_2346A7C30((uint64_t)v8, &qword_2687ACD38);
LABEL_7:
              swift_release();
              int64_t v15 = v48;
              if (!v19) {
                goto LABEL_9;
              }
              goto LABEL_8;
            }
            uint64_t v31 = v35;
            (*v34)(v35, v27, v4);
            sub_234711BCC((unint64_t *)&qword_2687AC5A0, MEMORY[0x263F07508]);
            swift_retain();
            int v36 = sub_2347EE570();
            uint64_t v32 = *v38;
            (*v38)((uint64_t)v31, v4);
            sub_2346A7C30((uint64_t)v14, (uint64_t *)&unk_2687AEB70);
            v32(v30, v4);
            uint64_t v8 = v37;
            sub_2346A7C30((uint64_t)v37, (uint64_t *)&unk_2687AEB70);
            if ((v36 & 1) == 0) {
              goto LABEL_7;
            }
          }
          sub_2347EEDF0();
          sub_2347EEE20();
          sub_2347EEE30();
          sub_2347EEE00();
          int64_t v15 = v48;
          if (!v19) {
            goto LABEL_9;
          }
LABEL_8:
          unint64_t v20 = __clz(__rbit64(v19));
          v19 &= v19 - 1;
          int64_t v48 = v15;
        }
      }
      uint64_t v25 = v15 + 5;
      if (v15 + 5 < v41)
      {
        unint64_t v23 = *(void *)(v40 + 8 * v25);
        if (v23)
        {
          int64_t v24 = v15 + 5;
          goto LABEL_24;
        }
        while (1)
        {
          int64_t v24 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            goto LABEL_34;
          }
          if (v24 >= v41) {
            break;
          }
          unint64_t v23 = *(void *)(v40 + 8 * v24);
          ++v25;
          if (v23) {
            goto LABEL_24;
          }
        }
      }
    }
LABEL_32:
    swift_release();
    return;
  }
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t sub_234711BCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ARViewCameraEntity()
{
  uint64_t result = qword_2687AD380;
  if (!qword_2687AD380) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_234711C60()
{
  return swift_initClassMetadata2();
}

CGFloat sub_234711CA0(void *a1, float32x4_t a2)
{
  float32x4_t v15 = a2;
  uint64_t v3 = sub_2347ED670();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2347EDED0();
  simd_float4x4 v17 = __invert_f4(v16);
  float32x4_t v15 = vaddq_f32((float32x4_t)v17.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v17.columns[0], v15.f32[0]), (float32x4_t)v17.columns[1], *(float32x2_t *)v15.f32, 1), (float32x4_t)v17.columns[2], v15, 2));
  sub_2347EDEA0();
  sub_2347ED600();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  RECustomMatrixCameraComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RECustomMatrixCameraComponentGetProjectionMatrix();
  float32x4_t v11 = vaddq_f32(v10, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v15.f32[0]), v8, *(float32x2_t *)v15.f32, 1), v9, v15, 2));
  double v12 = (float)((float)(v11.f32[0] / v11.f32[3]) + 1.0) * 0.5;
  objc_msgSend(a1, sel_bounds);
  CGFloat v13 = CGRectGetWidth(v18) * v12;
  objc_msgSend(a1, sel_bounds);
  CGRectGetHeight(v19);
  return v13;
}

uint64_t sub_234711E5C()
{
  uint64_t v0 = sub_2347ED670();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2347EDEA0();
  sub_2347ED600();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  RECameraViewDescriptorsComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RECameraViewDescriptorsComponentClearCameraViewDescriptors();
  RECameraViewDescriptorsComponentAddViewDescriptor();
  uint64_t v4 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
  RERenderGraphDataStructAddFloat4();
  MEMORY[0x237DC76C0](v4, "disableTonemapping", 1);
  RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
  if ((unint64_t)sub_2347EDE10() >> 32)
  {
    uint64_t result = sub_2347EEE90();
    __break(1u);
  }
  else
  {
    RECameraViewDescriptorsComponentAddSpecifyCommandFromLayer();
    return RERelease();
  }
  return result;
}

uint64_t sub_234712034()
{
  return sub_2347ED690();
}

uint64_t sub_234712068()
{
  sub_2347EDFC0();

  return swift_deallocClassInstance();
}

uint64_t sub_234712098()
{
  return type metadata accessor for ARViewCameraEntity();
}

unsigned char *storeEnumTagSinglePayload for ARViewCameraProjectionMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x23471216CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARViewCameraProjectionMode()
{
  return &type metadata for ARViewCameraProjectionMode;
}

unint64_t sub_2347121A8()
{
  unint64_t result = qword_2687AD390;
  if (!qword_2687AD390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2687AD390);
  }
  return result;
}

uint64_t sub_2347121FC(int a1)
{
  if ((a1 & 0x66) == 0x64) {
    int v1 = a1 | 2;
  }
  else {
    int v1 = a1;
  }
  if (!(~a1 & 0x62 | v1 & 4)) {
    v1 |= 4u;
  }
  if (!(~a1 & 0x46 | v1 & 0x20)) {
    v1 |= 0x20u;
  }
  if (!(~a1 & 0x26 | v1 & 0x40)) {
    v1 |= 0x40u;
  }
  int v2 = v1 | ((~a1 & 0x98 | v1 & 1) == 0);
  if (!(~a1 & 0x91 | v1 & 8)) {
    v2 |= 8u;
  }
  if (!(~a1 & 0x89 | v2 & 0x10)) {
    v2 |= 0x10u;
  }
  if (~a1 & 0x19 | v2 & 0x80) {
    int v3 = v2;
  }
  else {
    int v3 = v2 | 0x80;
  }
  int v4 = a1 & 0xC0;
  if (~a1 & 0xC8 | v3 & 4) {
    int v5 = v3;
  }
  else {
    int v5 = v3 | 4;
  }
  int v6 = a1 & 0x30;
  if (!(~a1 & 0x31 | v5 & 2)) {
    v5 |= 2u;
  }
  if (!(~a1 & 0xC4 | v5 & 8)) {
    v5 |= 8u;
  }
  if (~a1 & 0x8C | v5 & 0x40) {
    unsigned int v7 = v5 | ((~a1 & 0x32 | v5 & 1) == 0);
  }
  else {
    unsigned int v7 = v5 | ((~a1 & 0x32 | v5 & 1) == 0) | 0x40;
  }
  if (!(~a1 & 0x13 | v7 & 0x20)) {
    v7 |= 0x20u;
  }
  if (!(~a1 & 0x4C | v7 & 0x80)) {
    v7 |= 0x80u;
  }
  if (!(~a1 & 0x23 | v7 & 0x10)) {
    v7 |= 0x10u;
  }
  if ((~a1 & 0x90) == 0)
  {
    int v8 = (v7 >> 5) & 1;
    if (v4 != 192) {
      int v8 = 1;
    }
    if (v8) {
      unsigned int v9 = v7;
    }
    else {
      unsigned int v9 = v7 | 0x20;
    }
    int v10 = (v9 >> 6) & 1;
    if (v6 != 48) {
      int v10 = 1;
    }
    if (v10) {
      unsigned int v7 = v9;
    }
    else {
      unsigned int v7 = v9 | 0x40;
    }
  }
  if ((a1 & 0x60) == 0x60)
  {
    int v11 = (v7 >> 4) & 1;
    if (v4 != 192) {
      int v11 = 1;
    }
    if (v11) {
      unsigned int v12 = v7;
    }
    else {
      unsigned int v12 = v7 | 0x10;
    }
    int v13 = (v12 >> 7) & 1;
    if (v6 != 48) {
      int v13 = 1;
    }
    if (v13) {
      unsigned int v7 = v12;
    }
    else {
      unsigned int v7 = v12 | 0x80;
    }
  }
  int v14 = a1 & 0xC;
  int v15 = a1 & 3;
  if ((a1 & 9) == 9)
  {
    int v16 = (v7 >> 1) & 1;
    if (v14 != 12) {
      int v16 = 1;
    }
    if (v16) {
      unsigned int v17 = v7;
    }
    else {
      unsigned int v17 = v7 | 2;
    }
    int v18 = (v17 >> 2) & 1;
    if (v15 != 3) {
      int v18 = 1;
    }
    unsigned int v7 = v17 | 4;
    if (v18) {
      unsigned int v7 = v17;
    }
  }
  BOOL v19 = (v7 & 1) == 0 && v14 == 12;
  int v20 = v19;
  int v21 = v7 | v20;
  BOOL v19 = v15 == 3;
  int v22 = (v7 >> 3) & 1;
  if (!v19) {
    int v22 = 1;
  }
  if (v22) {
    unsigned int v23 = v21;
  }
  else {
    unsigned int v23 = v21 | 8;
  }
  if ((a1 & 6) == 6) {
    return v23;
  }
  else {
    return v7;
  }
}

uint64_t sub_2347124AC(int a1)
{
  if (qword_2687ABE00 != -1) {
    swift_once();
  }
  if ((dword_2687BE0D0 & ~a1) == 0) {
    return 15;
  }
  BOOL v3 = (~a1 & 0x22) == 0;
  if ((~a1 & 0x11) == 0) {
    BOOL v3 = 1;
  }
  if ((~a1 & 0x44) != 0 && (a1 & 0x88) != 0x88)
  {
    if (v3)
    {
      uint64_t result = 2;
LABEL_13:
      if ((~a1 & 0x60) != 0 && (a1 & 0x90) != 0x90) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    LODWORD(result) = 0;
    if ((~a1 & 0x60) != 0 && (a1 & 0x90) != 0x90)
    {
      uint64_t result = 0;
      goto LABEL_21;
    }
LABEL_24:
    uint64_t result = result | 8;
LABEL_25:
    BOOL v4 = (~a1 & 9) == 0 || (~a1 & 6) == 0;
    if (v4 && (result & 4) == 0) {
      return result | 4;
    }
    return result;
  }
  if (v3)
  {
    uint64_t result = 3;
    goto LABEL_13;
  }
  uint64_t result = 1;
  if ((~a1 & 0x60) == 0 || (a1 & 0x90) == 0x90) {
    goto LABEL_24;
  }
LABEL_21:
  if ((~a1 & 6) == 0 || (a1 & 9) == 9) {
    return result | 4;
  }
  return result;
}

uint64_t type metadata accessor for RoomPlanCommon()
{
  return self;
}

uint64_t sub_23471262C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v5 = sub_2347BF9DC(a1);
      if (v6)
      {
        uint64_t v4 = *(void *)(*(void *)(a2 + 56) + 8 * v5);
        swift_retain();
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  uint64_t v3 = sub_2347EEE70();
  swift_release();
  if (!v3) {
    return 0;
  }
  type metadata accessor for ScanEntityDebugUtility();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v8;
  swift_unknownObjectRelease();
  return v4;
}

void *sub_234712708(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v5 = sub_2347C01D0(a1);
      if (v6)
      {
        uint64_t v4 = *(void **)(*(void *)(a2 + 56) + 8 * v5);
        id v7 = v4;
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  uint64_t v3 = sub_2347EEE70();
  swift_release();
  if (!v3) {
    return 0;
  }
  type metadata accessor for CVPixelBufferPool(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v9;
  swift_unknownObjectRelease();
  return v4;
}

void *sub_2347127E0(uint64_t a1, void *a2)
{
  uint64_t v5 = 10;
  *(void *)(v2 + 40) = 10;
  uint64_t v12 = MEMORY[0x263F8EE78];
  sub_2347ED8E0();
  uint64_t v6 = MEMORY[0x263F16178];
  do
  {
    sub_2347ED890();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2347F0FA0;
    *(void *)(v7 + 56) = sub_2347ED930();
    *(void *)(v7 + 64) = v6;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 32));
    id v8 = a2;
    sub_2347ED920();
    sub_2347ED650();
    swift_allocObject();
    sub_2347ED640();
    sub_2347EDFB0();
    sub_2347ED700();
    swift_retain();
    sub_2347EDF90();
    swift_release();
    uint64_t v9 = swift_retain();
    MEMORY[0x237DC6730](v9);
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_2347EE800();
    }
    sub_2347EE820();
    sub_2347EE7F0();
    swift_release();
    --v5;
  }
  while (v5);
  uint64_t result = v11;
  v11[2] = v12;
  v11[3] = a1;
  v11[4] = v8;
  return result;
}

uint64_t sub_2347129C0(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + 16);
  uint64_t result = swift_beginAccess();
  uint64_t v5 = MEMORY[0x263F16178];
  while (!((unint64_t)*v3 >> 62))
  {
    if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1) {
      goto LABEL_8;
    }
LABEL_4:
    uint64_t v6 = *(void **)(v1 + 32);
    sub_2347ED8E0();
    sub_2347ED890();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2687ACB30);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_2347F0FA0;
    *(void *)(v7 + 56) = sub_2347ED930();
    *(void *)(v7 + 64) = v5;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 + 32));
    id v8 = v6;
    sub_2347ED920();
    sub_2347ED650();
    swift_allocObject();
    sub_2347ED640();
    sub_2347EDFB0();
    sub_2347ED700();
    swift_retain();
    sub_2347EDF90();
    swift_release();
    swift_beginAccess();
    uint64_t v9 = swift_retain();
    MEMORY[0x237DC6730](v9);
    if (*(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_2347EE800();
    sub_2347EE820();
    sub_2347EE7F0();
    swift_endAccess();
    uint64_t result = swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_2347EEEC0();
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 <= a1) {
    goto LABEL_4;
  }
LABEL_8:
  uint64_t v11 = *v3;
  if ((*v3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = MEMORY[0x237DC6CF0](a1, v11);
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a1)
    {
      uint64_t v12 = *(void *)(v11 + 8 * a1 + 32);
      swift_retain();
      return v12;
    }
    __break(1u);
  }
  return result;
}